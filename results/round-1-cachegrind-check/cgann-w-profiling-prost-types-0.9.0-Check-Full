--------------------------------------------------------------------------------
I1 cache:         65536 B, 64 B, 4-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         67108864 B, 64 B, 64-way associative
Command:          /usr/home/liquid/.rustup/toolchains/w-profiling/bin/rustc --crate-name prost_types --edition=2018 src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --cfg feature="default" --cfg feature="std" -C metadata=c09f61589ec29c52 -C extra-filename=-c09f61589ec29c52 --out-dir /usr/home/liquid/tmp/.tmpRYhZgG/target/debug/deps -L dependency=/usr/home/liquid/tmp/.tmpRYhZgG/target/debug/deps --extern bytes=/usr/home/liquid/tmp/.tmpRYhZgG/target/debug/deps/libbytes-753ba059cec614b5.rmeta --extern prost=/usr/home/liquid/tmp/.tmpRYhZgG/target/debug/deps/libprost-d1300c3358738d00.rmeta -Adeprecated -Aunknown-lints -Zincremental-verify-ich
Data file:        results/cgout-w-profiling-prost-types-0.9.0-Check-Full
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Thresholds:       0.1
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                     
--------------------------------------------------------------------------------
4,267,576,443 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                    file:function
--------------------------------------------------------------------------------
139,998,350 ( 3.28%)  ./malloc/malloc.c:_int_free
104,116,971 ( 2.44%)  ./malloc/malloc.c:_int_malloc
 84,073,859 ( 1.97%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_avx_unaligned_erms
 79,415,807 ( 1.86%)  ./malloc/malloc.c:malloc
 41,133,274 ( 0.96%)  ./malloc/malloc.c:free
 37,350,684 ( 0.88%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/hash/sip.rs:<std::collections::hash::map::DefaultHasher as core::hash::Hasher>::write
 33,899,612 ( 0.79%)  /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/server.rs:<proc_macro::bridge::server::Dispatcher<proc_macro::bridge::server::MarkedTypes<rustc_expand::proc_macro_server::Rustc>> as proc_macro::bridge::server::DispatcherTrait>::dispatch
 32,001,981 ( 0.75%)  ./elf/../elf/dl-tls.c:_dl_update_slotinfo
 23,062,346 ( 0.54%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
 22,285,678 ( 0.52%)  /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/client.rs:proc_macro::bridge::scoped_cell::ScopedCell<T>::replace
 21,414,127 ( 0.50%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs:<rustc_data_structures::sip128::SipHasher128>::short_write_process_buffer::<u64>
 17,388,030 ( 0.41%)  ./elf/dl-lookup.c:_dl_lookup_symbol_x
 16,605,990 ( 0.39%)  ./malloc/malloc.c:malloc_consolidate
 16,528,673 ( 0.39%)  ./malloc/malloc.c:realloc
 14,624,550 ( 0.34%)  /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/rpc.rs:<proc_macro::bridge::api_tags::Method as proc_macro::bridge::rpc::DecodeMut<()>>::decode
 14,364,756 ( 0.34%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs:<rustc_data_structures::sip128::SipHasher128>::short_write_process_buffer::<u64>
 13,576,598 ( 0.32%)  ./elf/../elf/dl-tls.c:update_get_addr
 13,550,404 ( 0.32%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs:core::ptr::drop_in_place<proc_macro::bridge::scoped_cell::ScopedCell<T>::replace::PutBackOnDrop<proc_macro::bridge::client::BridgeStateL>>
 13,354,257 ( 0.31%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilder<rustc_span::def_id::LocalDefId, (&rustc_middle::ty::context::TypeckResults, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_span::def_id::LocalDefId>
 12,136,754 ( 0.28%)  /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs:__rdl_alloc
 11,947,158 ( 0.28%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs:<rustc_infer::infer::InferCtxt>::shallow_resolve_ty
 11,935,761 ( 0.28%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/mem/mod.rs:proc_macro::bridge::scoped_cell::ScopedCell<T>::replace
 11,846,497 ( 0.28%)  /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/scoped_cell.rs:proc_macro::bridge::scoped_cell::ScopedCell<T>::replace
 11,615,180 ( 0.27%)  ./elf/dl-lookup.c:do_lookup_x
 11,564,797 ( 0.27%)  ./malloc/malloc.c:_int_realloc
 11,519,037 ( 0.27%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::TyKind as core::cmp::PartialEq>::eq
 11,193,793 ( 0.26%)  /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/rpc.rs:<proc_macro::bridge::api_tags::Method as proc_macro::bridge::rpc::Encode<S>>::encode
 10,905,101 ( 0.26%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
 10,709,501 ( 0.25%)  ./elf/../sysdeps/x86_64/tls_get_addr.S:__tls_get_addr
 10,604,646 ( 0.25%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs:proc_macro::bridge::scoped_cell::ScopedCell<T>::replace
 10,485,445 ( 0.25%)  ./malloc/malloc.c:unlink_chunk.constprop.0
 10,426,771 ( 0.24%)  /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/rpc.rs:<core::result::Result<T,E> as proc_macro::bridge::rpc::DecodeMut<S>>::decode
 10,425,255 ( 0.24%)  /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/buffer.rs:proc_macro::bridge::scoped_cell::ScopedCell<T>::replace
 10,331,267 ( 0.24%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::CtxtInterners>::intern_ty
  9,913,472 ( 0.23%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/search.rs:<alloc::collections::btree::node::NodeRef<alloc::collections::btree::node::marker::Mut, core::num::nonzero::NonZeroU32, proc_macro::bridge::Marked<rustc_expand::proc_macro_server::Ident, proc_macro::bridge::client::Ident>, alloc::collections::btree::node::marker::LeafOrInternal>>::search_tree::<core::num::nonzero::NonZeroU32>
  9,696,168 ( 0.23%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs:<rustc_span::caching_source_map_view::CachingSourceMapView>::span_data_to_lines_and_cols
  9,655,805 ( 0.23%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::TyKind as core::hash::Hash>::hash::<rustc_hash::FxHasher>
  9,426,352 ( 0.22%)  /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/closure.rs:proc_macro::bridge::scoped_cell::ScopedCell<T>::replace
  8,887,701 ( 0.21%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/hash/sip.rs:<std::collections::hash::map::DefaultHasher as core::hash::Hasher>::write
  8,765,998 ( 0.21%)  /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/buffer.rs:<proc_macro::bridge::api_tags::Method as proc_macro::bridge::rpc::Encode<S>>::encode
  8,730,387 ( 0.20%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/search.rs:<alloc::collections::btree::node::NodeRef<alloc::collections::btree::node::marker::Mut, core::num::nonzero::NonZeroU32, proc_macro::bridge::Marked<alloc::rc::Rc<rustc_span::SourceFile>, proc_macro::bridge::client::SourceFile>, alloc::collections::btree::node::marker::LeafOrInternal>>::search_tree::<core::num::nonzero::NonZeroU32>
  8,659,752 ( 0.20%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::Binder<rustc_middle::ty::PredicateKind>, rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>>::{closure#0}>
  8,248,072 ( 0.19%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/mem/mod.rs:core::ptr::drop_in_place<proc_macro::bridge::scoped_cell::ScopedCell<T>::replace::PutBackOnDrop<proc_macro::bridge::client::BridgeStateL>>
  8,237,092 ( 0.19%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<core::slice::iter::Iter<T> as core::iter::traits::iterator::Iterator>::next
  8,160,327 ( 0.19%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<rustc_span::span_encoding::Span as rustc_data_structures::stable_hasher::HashStable<rustc_query_system::ich::hcx::StableHashingContext>>::hash_stable
  7,824,232 ( 0.18%)  /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/buffer.rs:<u32 as proc_macro::bridge::rpc::Encode<S>>::encode
  7,781,386 ( 0.18%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/mem/mod.rs:core::mem::replace
  7,483,011 ( 0.18%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/node.rs:<alloc::collections::btree::node::Handle<alloc::collections::btree::node::NodeRef<alloc::collections::btree::node::marker::Mut, core::num::nonzero::NonZeroU32, proc_macro::bridge::Marked<rustc_ast::tokenstream::TokenStream, proc_macro::bridge::client::TokenStream>, alloc::collections::btree::node::marker::Leaf>, alloc::collections::btree::node::marker::Edge>>::insert_recursing
  7,270,156 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cmp.rs:<alloc::collections::btree::node::NodeRef<alloc::collections::btree::node::marker::Mut, core::num::nonzero::NonZeroU32, proc_macro::bridge::Marked<rustc_expand::proc_macro_server::Ident, proc_macro::bridge::client::Ident>, alloc::collections::btree::node::marker::LeafOrInternal>>::search_tree::<core::num::nonzero::NonZeroU32>
  6,996,807 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/search.rs:<alloc::collections::btree::node::NodeRef<alloc::collections::btree::node::marker::Mut, rustc_infer::infer::region_constraints::Constraint, rustc_infer::infer::SubregionOrigin, alloc::collections::btree::node::marker::LeafOrInternal>>::search_tree::<rustc_infer::infer::region_constraints::Constraint>
  6,969,439 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::RegionKind as core::hash::Hash>::hash::<rustc_hash::FxHasher>
  6,951,554 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/search.rs:<alloc::collections::btree::map::BTreeMap<core::num::nonzero::NonZeroU32, proc_macro::bridge::Marked<rustc_ast::tokenstream::TokenStream, proc_macro::bridge::client::TokenStream>>>::insert
  6,934,047 ( 0.16%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<[rustc_middle::ty::subst::GenericArg], rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>>::{closure#0}>
  6,907,141 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs:core::ptr::read
  6,777,612 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/type_variable.rs:<rustc_infer::infer::type_variable::TypeVariableTable>::probe
  6,585,166 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mut_ptr.rs:core::ptr::mut_ptr::<impl *mut T>::guaranteed_eq
  6,511,907 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_borrowck/src/lib.rs:<rustc_borrowck::MirBorrowckCtxt>::access_place
  6,408,833 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::TyCtxt>::_intern_substs
  6,399,665 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs:alloc::vec::Vec<T,A>::push
  6,317,790 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/obligation_forest/mod.rs:<rustc_data_structures::obligation_forest::ObligationForest<rustc_trait_selection::traits::fulfill::PendingPredicateObligation>>::process_obligations::<rustc_trait_selection::traits::fulfill::FulfillProcessor, rustc_data_structures::obligation_forest::Outcome<rustc_trait_selection::traits::fulfill::PendingPredicateObligation, rustc_infer::traits::FulfillmentErrorCode>>
  6,288,436 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cmp.rs:<alloc::collections::btree::node::NodeRef<alloc::collections::btree::node::marker::Mut, core::num::nonzero::NonZeroU32, proc_macro::bridge::Marked<alloc::rc::Rc<rustc_span::SourceFile>, proc_macro::bridge::client::SourceFile>, alloc::collections::btree::node::marker::LeafOrInternal>>::search_tree::<core::num::nonzero::NonZeroU32>
  6,114,797 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mut_ptr.rs:core::ptr::mut_ptr::<impl *mut T>::is_null
  6,052,467 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<rustc_middle::ty::context::TyCtxt>::_intern_substs
  6,040,340 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs:<rustc_span::span_encoding::Span as rustc_data_structures::stable_hasher::HashStable<rustc_query_system::ich::hcx::StableHashingContext>>::hash_stable
  5,910,812 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::RegionKind as core::cmp::PartialEq>::eq
  5,906,697 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::Parser>::check
  5,825,810 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
  5,721,647 ( 0.13%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<[rustc_middle::ty::subst::GenericArg], rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>>::{closure#0}>
  5,716,952 ( 0.13%)  ./malloc/malloc.c:calloc
  5,714,594 ( 0.13%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/proc-macro2-1.0.36/src/wrapper.rs:<proc_macro2::imp::TokenStream as core::iter::traits::collect::Extend<proc_macro2::TokenTree>>::extend
  5,684,557 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/hir/map/mod.rs:<rustc_middle::hir::map::Map>::find_parent_node
  5,620,864 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cmp.rs:<alloc::collections::btree::map::BTreeMap<core::num::nonzero::NonZeroU32, proc_macro::bridge::Marked<rustc_ast::tokenstream::TokenStream, proc_macro::bridge::client::TokenStream>>>::insert
  5,477,097 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs:<rustc_span::source_map::SourceMap>::lookup_source_file_idx
  5,417,602 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/rpc.rs:<u32 as proc_macro::bridge::rpc::Encode<S>>::encode
  5,369,312 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/hir/map/mod.rs:<rustc_middle::hir::map::Map>::attrs
  5,307,846 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/remove.rs:<alloc::collections::btree::node::Handle<alloc::collections::btree::node::NodeRef<alloc::collections::btree::node::marker::Mut, core::num::nonzero::NonZeroU32, proc_macro::bridge::Marked<rustc_ast::tokenstream::TokenStream, proc_macro::bridge::client::TokenStream>, alloc::collections::btree::node::marker::Leaf>, alloc::collections::btree::node::marker::KV>>::remove_leaf_kv::<<alloc::collections::btree::map::entry::OccupiedEntry<core::num::nonzero::NonZeroU32, proc_macro::bridge::Marked<rustc_ast::tokenstream::TokenStream, proc_macro::bridge::client::TokenStream>>>::remove_kv::{closure#0}>
  5,302,323 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/server.rs:<proc_macro::bridge::closure::Closure<_, _> as core::convert::From<&mut _>>::from::call::<proc_macro::bridge::buffer::Buffer<u8>, proc_macro::bridge::buffer::Buffer<u8>, <proc_macro::bridge::server::SameThread as proc_macro::bridge::server::ExecutionStrategy>::run_bridge_and_client<fn(proc_macro::TokenStream) -> proc_macro::TokenStream, proc_macro::bridge::server::Dispatcher<proc_macro::bridge::server::MarkedTypes<rustc_expand::proc_macro_server::Rustc>>>::{closure#0}>
  5,276,226 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs:<rustc_middle::hir::map::Map>::attrs
  5,254,326 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/map/entry.rs:<alloc::collections::btree::map::entry::OccupiedEntry<core::num::nonzero::NonZeroU32, proc_macro::bridge::Marked<rustc_ast::tokenstream::TokenStream, proc_macro::bridge::client::TokenStream>>>::remove_entry
  5,127,670 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/result.rs:<core::result::Result<T,E> as core::ops::try_trait::Try>::branch
  5,011,780 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_privacy/src/lib.rs:<rustc_privacy::DefIdVisitorSkeleton<rustc_privacy::TypePrivacyVisitor> as rustc_middle::ty::fold::TypeVisitor>::visit_ty
  4,909,502 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/non_null.rs:core::ptr::non_null::NonNull<T>::as_ptr
  4,897,697 ( 0.11%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilder<rustc_span::def_id::LocalDefId, (&rustc_middle::ty::context::TypeckResults, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_span::def_id::LocalDefId>
  4,863,881 ( 0.11%)  ./elf/../sysdeps/x86_64/dl-machine.h:_dl_relocate_object
  4,848,785 ( 0.11%)  ./elf/../sysdeps/x86_64/dl-tls.c:__tls_get_addr_slow
  4,825,518 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::TokenCursor>::next
  4,705,194 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/graph/scc/mod.rs:<rustc_data_structures::graph::scc::SccsConstruction<rustc_borrowck::constraints::graph::RegionGraph<rustc_borrowck::constraints::graph::Normal>, rustc_borrowck::constraints::ConstraintSccIndex>>::start_walk_from
  4,636,170 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/node.rs:<alloc::collections::btree::node::Handle<alloc::collections::btree::node::NodeRef<alloc::collections::btree::node::marker::Mut, core::num::nonzero::NonZeroU32, proc_macro::bridge::Marked<rustc_ast::tokenstream::TokenStream, proc_macro::bridge::client::TokenStream>, alloc::collections::btree::node::marker::Leaf>, alloc::collections::btree::node::marker::Edge>>::insert_fit
  4,565,448 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/traits/iterator.rs:core::iter::traits::iterator::Iterator::fold
  4,526,078 ( 0.11%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<std::collections::hash::map::HashMap<rustc_middle::middle::region::Scope, (rustc_middle::middle::region::Scope, u32), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::get::<rustc_middle::middle::region::Scope>
  4,494,567 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::Parser>::bump
  4,374,976 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/cmp.rs:<[A] as core::slice::cmp::SlicePartialEq<B>>::equal

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_borrowck/src/lib.rs
--------------------------------------------------------------------------------
Ir                 

-- line 97 ----------------------------------------
        .           
        .               /// If true, the capture is behind a reference.
        .               by_ref: bool,
        .           }
        .           
        .           const DEREF_PROJECTION: &[PlaceElem<'_>; 1] = &[ProjectionElem::Deref];
        .           
        .           pub fn provide(providers: &mut Providers) {
        4 ( 0.00%)      *providers = Providers {
        .                   mir_borrowck: |tcx, did| {
    1,319 ( 0.00%)              if let Some(def) = ty::WithOptConstParam::try_lookup(did, tcx) {
        .                           tcx.mir_borrowck_const_arg(def)
        .                       } else {
    5,276 ( 0.00%)                  mir_borrowck(tcx, ty::WithOptConstParam::unknown(did))
        .                       }
        .                   },
        .                   mir_borrowck_const_arg: |tcx, (did, param_did)| {
        .                       mir_borrowck(tcx, ty::WithOptConstParam { did, const_param_did: Some(param_did) })
        .                   },
        .                   ..*providers
        .               };
        1 ( 0.00%)  }
        .           
   13,190 ( 0.00%)  fn mir_borrowck<'tcx>(
        .               tcx: TyCtxt<'tcx>,
        .               def: ty::WithOptConstParam<LocalDefId>,
        .           ) -> &'tcx BorrowCheckResult<'tcx> {
        .               let (input_body, promoted) = tcx.mir_promoted(def);
        .               debug!("run query mir_borrowck: {}", tcx.def_path_str(def.did.to_def_id()));
        .           
   17,147 ( 0.00%)      let opt_closure_req = tcx.infer_ctxt().with_opaque_type_inference(def.did).enter(|infcx| {
        .                   let input_body: &Body<'_> = &input_body.borrow();
        .                   let promoted: &IndexVec<_, _> = &promoted.borrow();
   18,466 ( 0.00%)          do_mir_borrowck(&infcx, input_body, promoted, false).0
    5,276 ( 0.00%)      });
        .               debug!("mir_borrowck done");
        .           
    1,319 ( 0.00%)      tcx.arena.alloc(opt_closure_req)
   10,552 ( 0.00%)  }
        .           
        .           /// Perform the actual borrow checking.
        .           ///
        .           /// If `return_body_with_facts` is true, then return the body with non-erased
        .           /// region ids on which the borrow checking was performed together with Polonius
        .           /// facts.
   29,018 ( 0.00%)  #[instrument(skip(infcx, input_body, input_promoted), level = "debug")]
        .           fn do_mir_borrowck<'a, 'tcx>(
        .               infcx: &InferCtxt<'a, 'tcx>,
        .               input_body: &Body<'tcx>,
        .               input_promoted: &IndexVec<Promoted, Body<'tcx>>,
        .               return_body_with_facts: bool,
        .           ) -> (BorrowCheckResult<'tcx>, Option<Box<BodyWithBorrowckFacts<'tcx>>>) {
   13,190 ( 0.00%)      let def = input_body.source.with_opt_param().as_local().unwrap();
        .           
        .               debug!(?def);
        .           
    2,638 ( 0.00%)      let tcx = infcx.tcx;
        .               let param_env = tcx.param_env(def.did);
    1,319 ( 0.00%)      let id = tcx.hir().local_def_id_to_hir_id(def.did);
        .           
    2,638 ( 0.00%)      let mut local_names = IndexVec::from_elem(None, &input_body.local_decls);
        .               for var_debug_info in &input_body.var_debug_info {
   14,859 ( 0.00%)          if let VarDebugInfoContents::Place(place) = var_debug_info.value {
    7,591 ( 0.00%)              if let Some(local) = place.as_local() {
   11,367 ( 0.00%)                  if let Some(prev_name) = local_names[local] {
        .                               if var_debug_info.name != prev_name {
        .                                   span_bug!(
        .                                       var_debug_info.source_info.span,
        .                                       "local {:?} has many names (`{}` vs `{}`)",
        .                                       local,
        .                                       prev_name,
        .                                       var_debug_info.name
        .                                   );
        .                               }
        .                           }
   11,367 ( 0.00%)                  local_names[local] = Some(var_debug_info.name);
        .                       }
        .                   }
        .               }
        .           
        .               // Gather the upvars of a closure, if any.
    5,276 ( 0.00%)      let tables = tcx.typeck_opt_const_arg(def);
    2,638 ( 0.00%)      if let Some(ErrorReported) = tables.tainted_by_errors {
        .                   infcx.set_tainted_by_errors();
        .               }
    5,276 ( 0.00%)      let upvars: Vec<_> = tables
        .                   .closure_min_captures_flattened(def.did.to_def_id())
        .                   .map(|captured_place| {
        .                       let capture = captured_place.info.capture_kind;
       13 ( 0.00%)              let by_ref = match capture {
        .                           ty::UpvarCapture::ByValue => false,
        .                           ty::UpvarCapture::ByRef(..) => true,
        .                       };
        .                       Upvar { place: captured_place.clone(), by_ref }
        .                   })
        .                   .collect();
        .           
        .               // Replace all regions with fresh inference variables. This
        .               // requires first making our own copy of the MIR. This copy will
        .               // be modified (in place) to contain non-lexical lifetimes. It
        .               // will have a lifetime tied to the inference context.
    2,638 ( 0.00%)      let mut body_owned = input_body.clone();
        .               let mut promoted = input_promoted.clone();
        .               let free_regions =
    3,957 ( 0.00%)          nll::replace_regions_in_mir(infcx, param_env, &mut body_owned, &mut promoted);
        .               let body = &body_owned; // no further changes
        .           
    1,319 ( 0.00%)      let location_table_owned = LocationTable::new(body);
        .               let location_table = &location_table_owned;
        .           
        .               let mut errors_buffer = Vec::new();
    3,957 ( 0.00%)      let (move_data, move_errors): (MoveData<'tcx>, Vec<(Place<'tcx>, MoveError<'tcx>)>) =
    9,233 ( 0.00%)          match MoveData::gather_moves(&body, tcx, param_env) {
    7,914 ( 0.00%)              Ok(move_data) => (move_data, Vec::new()),
        .                       Err((move_data, move_errors)) => (move_data, move_errors),
        .                   };
        .               let promoted_errors = promoted
        .                   .iter_enumerated()
      430 ( 0.00%)          .map(|(idx, body)| (idx, MoveData::gather_moves(&body, tcx, param_env)));
        .           
    7,914 ( 0.00%)      let mdpe = MoveDataParamEnv { move_data, param_env };
        .           
   10,552 ( 0.00%)      let mut flow_inits = MaybeInitializedPlaces::new(tcx, &body, &mdpe)
    1,319 ( 0.00%)          .into_engine(tcx, &body)
        .                   .pass_name("borrowck")
        .                   .iterate_to_fixpoint()
        .                   .into_results_cursor(&body);
        .           
   15,828 ( 0.00%)      let locals_are_invalidated_at_exit = tcx.hir().body_owner_kind(id).is_fn_or_closure();
        .               let borrow_set =
   13,190 ( 0.00%)          Rc::new(BorrowSet::build(tcx, body, locals_are_invalidated_at_exit, &mdpe.move_data));
        .           
    6,595 ( 0.00%)      let use_polonius = return_body_with_facts || infcx.tcx.sess.opts.debugging_opts.polonius;
        .           
        .               // Compute non-lexical lifetimes.
        .               let nll::NllOutput {
    3,957 ( 0.00%)          regioncx,
    5,276 ( 0.00%)          opaque_type_values,
    2,638 ( 0.00%)          polonius_input,
    3,957 ( 0.00%)          polonius_output,
    5,276 ( 0.00%)          opt_closure_req,
   13,190 ( 0.00%)          nll_errors,
   23,742 ( 0.00%)      } = nll::compute_regions(
        .                   infcx,
   21,104 ( 0.00%)          free_regions,
        .                   body,
        .                   &promoted,
        .                   location_table,
        .                   param_env,
        .                   &mut flow_inits,
        .                   &mdpe.move_data,
        .                   &borrow_set,
        .                   &upvars,
        .                   use_polonius,
        .               );
        .           
        .               // Dump MIR results into a file, if that is enabled. This let us
        .               // write unit-tests, as well as helping with debugging.
    3,957 ( 0.00%)      nll::dump_mir_results(infcx, &body, &regioncx, &opt_closure_req);
        .           
        .               // We also have a `#[rustc_regions]` annotation that causes us to dump
        .               // information.
    2,638 ( 0.00%)      nll::dump_annotation(
        .                   infcx,
        .                   &body,
        .                   &regioncx,
        .                   &opt_closure_req,
        .                   &opaque_type_values,
        .                   &mut errors_buffer,
        .               );
        .           
        .               // The various `flow_*` structures can be large. We drop `flow_inits` here
        .               // so it doesn't overlap with the others below. This reduces peak memory
        .               // usage significantly on some benchmarks.
   21,104 ( 0.00%)      drop(flow_inits);
        .           
    1,319 ( 0.00%)      let regioncx = Rc::new(regioncx);
        .           
    7,914 ( 0.00%)      let flow_borrows = Borrows::new(tcx, body, &regioncx, &borrow_set)
    1,319 ( 0.00%)          .into_engine(tcx, body)
        .                   .pass_name("borrowck")
        .                   .iterate_to_fixpoint();
    7,914 ( 0.00%)      let flow_uninits = MaybeUninitializedPlaces::new(tcx, body, &mdpe)
    1,319 ( 0.00%)          .into_engine(tcx, body)
        .                   .pass_name("borrowck")
        .                   .iterate_to_fixpoint();
    7,914 ( 0.00%)      let flow_ever_inits = EverInitializedPlaces::new(tcx, body, &mdpe)
    1,319 ( 0.00%)          .into_engine(tcx, body)
        .                   .pass_name("borrowck")
        .                   .iterate_to_fixpoint();
        .           
    3,850 ( 0.00%)      let movable_generator = !matches!(
    9,126 ( 0.00%)          tcx.hir().get(id),
        .                   Node::Expr(&hir::Expr {
        .                       kind: hir::ExprKind::Closure(.., Some(hir::Movability::Static)),
        .                       ..
        .                   })
        .               );
        .           
      301 ( 0.00%)      for (idx, move_data_results) in promoted_errors {
        .                   let promoted_body = &promoted[idx];
        .           
       86 ( 0.00%)          if let Err((move_data, move_errors)) = move_data_results {
        .                       let mut promoted_mbcx = MirBorrowckCtxt {
        .                           infcx,
        .                           param_env,
        .                           body: promoted_body,
        .                           move_data: &move_data,
        .                           location_table, // no need to create a real one for the promoted, it is not used
        .                           movable_generator,
        .                           fn_self_span_reported: Default::default(),
-- line 307 ----------------------------------------
-- line 325 ----------------------------------------
        .                       };
        .                       promoted_mbcx.report_move_errors(move_errors);
        .                       errors_buffer = promoted_mbcx.errors_buffer;
        .                   };
        .               }
        .           
        .               let dominators = body.dominators();
        .           
   59,355 ( 0.00%)      let mut mbcx = MirBorrowckCtxt {
        .                   infcx,
        .                   param_env,
        .                   body,
        .                   move_data: &mdpe.move_data,
        .                   location_table,
        .                   movable_generator,
        .                   locals_are_invalidated_at_exit,
        .                   fn_self_span_reported: Default::default(),
        .                   access_place_error_reported: Default::default(),
        .                   reservation_error_reported: Default::default(),
        .                   reservation_warnings: Default::default(),
        .                   move_error_reported: BTreeMap::new(),
        .                   uninitialized_error_reported: Default::default(),
    5,276 ( 0.00%)          errors_buffer,
    1,319 ( 0.00%)          regioncx: Rc::clone(&regioncx),
        .                   used_mut: Default::default(),
        .                   used_mut_upvars: SmallVec::new(),
    1,319 ( 0.00%)          borrow_set: Rc::clone(&borrow_set),
    7,914 ( 0.00%)          dominators,
    5,276 ( 0.00%)          upvars,
    5,276 ( 0.00%)          local_names,
        .                   region_names: RefCell::default(),
        .                   next_region_name: RefCell::new(1),
        .                   polonius_output,
        .               };
        .           
        .               // Compute and report region errors, if any.
    3,957 ( 0.00%)      mbcx.report_region_errors(nll_errors);
        .           
        .               let results = BorrowckResults {
    7,914 ( 0.00%)          ever_inits: flow_ever_inits,
   10,552 ( 0.00%)          uninits: flow_uninits,
   14,509 ( 0.00%)          borrows: flow_borrows,
        .               };
        .           
    7,914 ( 0.00%)      mbcx.report_move_errors(move_errors);
        .           
    1,319 ( 0.00%)      rustc_mir_dataflow::visit_results(
        .                   body,
    1,319 ( 0.00%)          traversal::reverse_postorder(body).map(|(bb, _)| bb),
        .                   &results,
        .                   &mut mbcx,
        .               );
        .           
        .               // Convert any reservation warnings into lints.
        .               let reservation_warnings = mem::take(&mut mbcx.reservation_warnings);
        .               for (_, (place, span, location, bk, borrow)) in reservation_warnings {
        .                   let mut initial_diag = mbcx.report_conflicting_borrow(location, (place, span), bk, &borrow);
-- line 381 ----------------------------------------
-- line 406 ----------------------------------------
        .               // For each non-user used mutable variable, check if it's been assigned from
        .               // a user-declared local. If so, then put that local into the used_mut set.
        .               // Note that this set is expected to be small - only upvars from closures
        .               // would have a chance of erroneously adding non-user-defined mutable vars
        .               // to the set.
        .               let temporary_used_locals: FxHashSet<Local> = mbcx
        .                   .used_mut
        .                   .iter()
    1,319 ( 0.00%)          .filter(|&local| !mbcx.body.local_decls[*local].is_user_variable())
        .                   .cloned()
        .                   .collect();
        .               // For the remaining unused locals that are marked as mutable, we avoid linting any that
        .               // were never initialized. These locals may have been removed as unreachable code; or will be
        .               // linted as unused variables.
        .               let unused_mut_locals =
    1,319 ( 0.00%)          mbcx.body.mut_vars_iter().filter(|local| !mbcx.used_mut.contains(local)).collect();
    5,276 ( 0.00%)      mbcx.gather_used_muts(temporary_used_locals, unused_mut_locals);
        .           
        .               debug!("mbcx.used_mut: {:?}", mbcx.used_mut);
    5,276 ( 0.00%)      let used_mut = mbcx.used_mut;
    1,319 ( 0.00%)      for local in mbcx.body.mut_vars_and_args_iter().filter(|local| !used_mut.contains(local)) {
      501 ( 0.00%)          let local_decl = &mbcx.body.local_decls[local];
    3,006 ( 0.00%)          let lint_root = match &mbcx.body.source_scopes[local_decl.source_info.scope].local_data {
        .                       ClearCrossCrate::Set(data) => data.lint_root,
        .                       _ => continue,
        .                   };
        .           
        .                   // Skip over locals that begin with an underscore or have no name
    1,503 ( 0.00%)          match mbcx.local_names[local] {
      192 ( 0.00%)              Some(name) => {
      576 ( 0.00%)                  if name.as_str().starts_with('_') {
        .                               continue;
        .                           }
        .                       }
        .                       None => continue,
        .                   }
        .           
      384 ( 0.00%)          let span = local_decl.source_info.span;
      384 ( 0.00%)          if span.desugaring_kind().is_some() {
        .                       // If the `mut` arises as part of a desugaring, we should ignore it.
        .                       continue;
        .                   }
        .           
      960 ( 0.00%)          tcx.struct_span_lint_hir(UNUSED_MUT, lint_root, span, |lint| {
        .                       let mut_span = tcx.sess.source_map().span_until_non_whitespace(span);
        .                       lint.build("variable does not need to be mutable")
        .                           .span_suggestion_short(
        .                               mut_span,
        .                               "remove this `mut`",
        .                               String::new(),
        .                               Applicability::MachineApplicable,
        .                           )
        .                           .emit();
        .                   })
        .               }
        .           
        .               // Buffer any move errors that we collected and de-duplicated.
   11,871 ( 0.00%)      for (_, (_, diag)) in mbcx.move_error_reported {
        .                   diag.buffer(&mut mbcx.errors_buffer);
        .               }
        .           
    1,319 ( 0.00%)      if !mbcx.errors_buffer.is_empty() {
        .                   mbcx.errors_buffer.sort_by_key(|diag| diag.sort_span);
        .           
        .                   for diag in mbcx.errors_buffer.drain(..) {
        .                       mbcx.infcx.tcx.sess.diagnostic().emit_diagnostic(&diag);
        .                   }
        .               }
        .           
        .               let result = BorrowCheckResult {
    5,276 ( 0.00%)          concrete_opaque_types: opaque_type_values,
    6,595 ( 0.00%)          closure_requirements: opt_closure_req,
    7,914 ( 0.00%)          used_mut_upvars: mbcx.used_mut_upvars,
        .               };
        .           
    2,638 ( 0.00%)      let body_with_facts = if return_body_with_facts {
        .                   let output_facts = mbcx.polonius_output.expect("Polonius output was not computed");
        .                   Some(Box::new(BodyWithBorrowckFacts {
        .                       body: body_owned,
        .                       input_facts: *polonius_input.expect("Polonius input facts were not generated"),
        .                       output_facts,
        .                       location_table: location_table_owned,
        .                   }))
        .               } else {
        .                   None
        .               };
        .           
        .               debug!("do_mir_borrowck: result = {:#?}", result);
        .           
   18,466 ( 0.00%)      (result, body_with_facts)
   15,828 ( 0.00%)  }
        .           
        .           /// A `Body` with information computed by the borrow checker. This struct is
        .           /// intended to be consumed by compiler consumers.
        .           ///
        .           /// We need to include the MIR body here because the region identifiers must
        .           /// match the ones in the Polonius facts.
        .           pub struct BodyWithBorrowckFacts<'tcx> {
        .               /// A mir body that contains region identifiers.
-- line 504 ----------------------------------------
-- line 608 ----------------------------------------
        .           // Check that:
        .           // 1. assignments are always made to mutable locations (FIXME: does that still really go here?)
        .           // 2. loans made in overlapping scopes do not conflict
        .           // 3. assignments do not affect things loaned out as immutable
        .           // 4. moves do not affect things loaned out in any way
        .           impl<'cx, 'tcx> rustc_mir_dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtxt<'cx, 'tcx> {
        .               type FlowState = Flows<'cx, 'tcx>;
        .           
  357,534 ( 0.01%)      fn visit_statement_before_primary_effect(
        .                   &mut self,
        .                   flow_state: &Flows<'cx, 'tcx>,
        .                   stmt: &'cx Statement<'tcx>,
        .                   location: Location,
        .               ) {
        .                   debug!("MirBorrowckCtxt::process_statement({:?}, {:?}): {:?}", location, stmt, flow_state);
        .                   let span = stmt.source_info.span;
        .           
        .                   self.check_activations(location, span, flow_state);
        .           
  198,630 ( 0.00%)          match &stmt.kind {
   25,194 ( 0.00%)              StatementKind::Assign(box (lhs, ref rhs)) => {
        .                           self.consume_rvalue(location, (rhs, span), flow_state);
        .           
   50,388 ( 0.00%)                  self.mutate_place(location, (*lhs, span), Shallow(None), flow_state);
        .                       }
    1,423 ( 0.00%)              StatementKind::FakeRead(box (_, ref place)) => {
        .                           // Read for match doesn't access any memory and is used to
        .                           // assert that a place is safe and live. So we don't have to
        .                           // do any checks here.
        .                           //
        .                           // FIXME: Remove check that the place is initialized. This is
        .                           // needed for now because matches don't have never patterns yet.
        .                           // So this is the only place we prevent
        .                           //      let x: !;
        .                           //      match x {};
        .                           // from compiling.
    5,692 ( 0.00%)                  self.check_if_path_or_subpath_is_moved(
        .                               location,
        .                               InitializationRequiringAction::Use,
   12,807 ( 0.00%)                      (place.as_ref(), span),
        .                               flow_state,
        .                           );
        .                       }
        .                       StatementKind::SetDiscriminant { place, variant_index: _ } => {
        .                           self.mutate_place(location, (**place, span), Shallow(None), flow_state);
        .                       }
        .                       StatementKind::CopyNonOverlapping(box rustc_middle::mir::CopyNonOverlapping {
        .                           ..
-- line 655 ----------------------------------------
-- line 663 ----------------------------------------
        .                       | StatementKind::Coverage(..)
        .                       | StatementKind::AscribeUserType(..)
        .                       | StatementKind::Retag { .. }
        .                       | StatementKind::StorageLive(..) => {
        .                           // `Nop`, `AscribeUserType`, `Retag`, and `StorageLive` are irrelevant
        .                           // to borrow check.
        .                       }
        .                       StatementKind::StorageDead(local) => {
   77,490 ( 0.00%)                  self.access_place(
        .                               location,
  142,065 ( 0.00%)                      (Place::from(*local), span),
        .                               (Shallow(None), Write(WriteKind::StorageDeadOrDrop)),
        .                               LocalMutationIsAllowed::Yes,
        .                               flow_state,
        .                           );
        .                       }
        .                   }
  317,808 ( 0.01%)      }
        .           
   86,704 ( 0.00%)      fn visit_terminator_before_primary_effect(
        .                   &mut self,
        .                   flow_state: &Flows<'cx, 'tcx>,
        .                   term: &'cx Terminator<'tcx>,
        .                   loc: Location,
        .               ) {
        .                   debug!("MirBorrowckCtxt::process_terminator({:?}, {:?}): {:?}", loc, term, flow_state);
        .                   let span = term.source_info.span;
        .           
        .                   self.check_activations(loc, span, flow_state);
        .           
   54,190 ( 0.00%)          match term.kind {
    3,252 ( 0.00%)              TerminatorKind::SwitchInt { ref discr, switch_ty: _, targets: _ } => {
    3,252 ( 0.00%)                  self.consume_operand(loc, (discr, span), flow_state);
        .                       }
    2,598 ( 0.00%)              TerminatorKind::Drop { place, target: _, unwind: _ } => {
        .                           debug!(
        .                               "visit_terminator_drop \
        .                                loc: {:?} term: {:?} place: {:?} span: {:?}",
        .                               loc, term, place, span
        .                           );
        .           
    7,794 ( 0.00%)                  self.access_place(
        .                               loc,
   11,691 ( 0.00%)                      (place, span),
        .                               (AccessDepth::Drop, Write(WriteKind::StorageDeadOrDrop)),
        .                               LocalMutationIsAllowed::Yes,
        .                               flow_state,
        .                           );
        .                       }
        .                       TerminatorKind::DropAndReplace {
      122 ( 0.00%)                  place: drop_place,
       61 ( 0.00%)                  value: ref new_value,
        .                           target: _,
        .                           unwind: _,
        .                       } => {
      976 ( 0.00%)                  self.mutate_place(loc, (drop_place, span), Deep, flow_state);
        .                           self.consume_operand(loc, (new_value, span), flow_state);
        .                       }
        .                       TerminatorKind::Call {
    9,837 ( 0.00%)                  ref func,
        .                           ref args,
        .                           ref destination,
        .                           cleanup: _,
        .                           from_hir_call: _,
        .                           fn_span: _,
        .                       } => {
   26,232 ( 0.00%)                  self.consume_operand(loc, (func, span), flow_state);
        .                           for arg in args {
   39,822 ( 0.00%)                      self.consume_operand(loc, (arg, span), flow_state);
        .                           }
   13,110 ( 0.00%)                  if let Some((dest, _ /*bb*/)) = *destination {
   39,276 ( 0.00%)                      self.mutate_place(loc, (dest, span), Deep, flow_state);
        .                           }
        .                       }
    1,296 ( 0.00%)              TerminatorKind::Assert { ref cond, expected: _, ref msg, target: _, cleanup: _ } => {
      216 ( 0.00%)                  self.consume_operand(loc, (cond, span), flow_state);
        .                           use rustc_middle::mir::AssertKind;
      432 ( 0.00%)                  if let AssertKind::BoundsCheck { ref len, ref index } = *msg {
        .                               self.consume_operand(loc, (len, span), flow_state);
        .                               self.consume_operand(loc, (index, span), flow_state);
        .                           }
        .                       }
        .           
        .                       TerminatorKind::Yield { ref value, resume: _, resume_arg, drop: _ } => {
        .                           self.consume_operand(loc, (value, span), flow_state);
        .                           self.mutate_place(loc, (resume_arg, span), Deep, flow_state);
-- line 748 ----------------------------------------
-- line 790 ----------------------------------------
        .                       | TerminatorKind::Resume
        .                       | TerminatorKind::Return
        .                       | TerminatorKind::GeneratorDrop
        .                       | TerminatorKind::FalseEdge { real_target: _, imaginary_target: _ }
        .                       | TerminatorKind::FalseUnwind { real_target: _, unwind: _ } => {
        .                           // no data used, thus irrelevant to borrowck
        .                       }
        .                   }
   79,712 ( 0.00%)      }
        .           
   75,866 ( 0.00%)      fn visit_terminator_after_primary_effect(
        .                   &mut self,
        .                   flow_state: &Flows<'cx, 'tcx>,
        .                   term: &'cx Terminator<'tcx>,
        .                   loc: Location,
        .               ) {
   10,838 ( 0.00%)          let span = term.source_info.span;
        .           
   43,352 ( 0.00%)          match term.kind {
        .                       TerminatorKind::Yield { value: _, resume: _, resume_arg: _, drop: _ } => {
        .                           if self.movable_generator {
        .                               // Look for any active borrows to locals
        .                               let borrow_set = self.borrow_set.clone();
        .                               for i in flow_state.borrows.iter() {
        .                                   let borrow = &borrow_set[i];
        .                                   self.check_for_local_borrow(borrow, span);
        .                               }
-- line 816 ----------------------------------------
-- line 817 ----------------------------------------
        .                           }
        .                       }
        .           
        .                       TerminatorKind::Resume | TerminatorKind::Return | TerminatorKind::GeneratorDrop => {
        .                           // Returning from the function implicitly kills storage for all locals and statics.
        .                           // Often, the storage will already have been killed by an explicit
        .                           // StorageDead, but we don't always emit those (notably on unwind paths),
        .                           // so this "extra check" serves as a kind of backup.
    4,784 ( 0.00%)                  let borrow_set = self.borrow_set.clone();
        .                           for i in flow_state.borrows.iter() {
        .                               let borrow = &borrow_set[i];
        .                               self.check_for_invalidation_at_exit(loc, borrow, span);
        .                           }
        .                       }
        .           
        .                       TerminatorKind::Abort
        .                       | TerminatorKind::Assert { .. }
-- line 833 ----------------------------------------
-- line 836 ----------------------------------------
        .                       | TerminatorKind::DropAndReplace { .. }
        .                       | TerminatorKind::FalseEdge { real_target: _, imaginary_target: _ }
        .                       | TerminatorKind::FalseUnwind { real_target: _, unwind: _ }
        .                       | TerminatorKind::Goto { .. }
        .                       | TerminatorKind::SwitchInt { .. }
        .                       | TerminatorKind::Unreachable
        .                       | TerminatorKind::InlineAsm { .. } => {}
        .                   }
   86,704 ( 0.00%)      }
        .           }
        .           
        .           use self::AccessDepth::{Deep, Shallow};
        .           use self::ReadOrWrite::{Activation, Read, Reservation, Write};
        .           
        .           #[derive(Copy, Clone, PartialEq, Eq, Debug)]
        .           enum ArtificialField {
        .               ArrayLength,
-- line 852 ----------------------------------------
-- line 913 ----------------------------------------
        .           /// When checking permissions for a place access, this flag is used to indicate that an immutable
        .           /// local place can be mutated.
        .           //
        .           // FIXME: @nikomatsakis suggested that this flag could be removed with the following modifications:
        .           // - Merge `check_access_permissions()` and `check_if_reassignment_to_immutable_state()`.
        .           // - Split `is_mutable()` into `is_assignable()` (can be directly assigned) and
        .           //   `is_declared_mutable()`.
        .           // - Take flow state into consideration in `is_assignable()` for local variables.
   13,904 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Debug)]
        .           enum LocalMutationIsAllowed {
        .               Yes,
        .               /// We want use of immutable upvars to cause a "write to immutable upvar"
        .               /// error, not an "reassignment" error.
        .               ExceptUpvars,
        .               No,
        .           }
        .           
-- line 929 ----------------------------------------
-- line 970 ----------------------------------------
        .               }
        .           
        .               /// Checks an access to the given place to see if it is allowed. Examines the set of borrows
        .               /// that are in scope, as well as which paths have been initialized, to ensure that (a) the
        .               /// place is initialized and (b) it is not borrowed in some way that would prevent this
        .               /// access.
        .               ///
        .               /// Returns `true` if an error is reported.
  723,168 ( 0.02%)      fn access_place(
        .                   &mut self,
        .                   location: Location,
        .                   place_span: (Place<'tcx>, Span),
        .                   kind: (AccessDepth, ReadOrWrite),
        .                   is_local_mutation_allowed: LocalMutationIsAllowed,
        .                   flow_state: &Flows<'cx, 'tcx>,
        .               ) {
        .                   let (sd, rw) = kind;
        .           
  180,792 ( 0.00%)          if let Activation(_, borrow_index) = rw {
    3,228 ( 0.00%)              if self.reservation_error_reported.contains(&place_span.0) {
        .                           debug!(
        .                               "skipping access_place for activation of invalid reservation \
        .                                place: {:?} borrow_index: {:?}",
        .                               place_span.0, borrow_index
        .                           );
        .                           return;
        .                       }
        .                   }
        .           
        .                   // Check is_empty() first because it's the common case, and doing that
        .                   // way we avoid the clone() call.
   45,198 ( 0.00%)          if !self.access_place_error_reported.is_empty()
        .                       && self.access_place_error_reported.contains(&(place_span.0, place_span.1))
        .                   {
        .                       debug!(
        .                           "access_place: suppressing error place_span=`{:?}` kind=`{:?}`",
        .                           place_span, kind
        .                       );
        .                       return;
        .                   }
        .           
  271,188 ( 0.01%)          let mutability_error = self.check_access_permissions(
  180,792 ( 0.00%)              place_span,
        .                       rw,
        .                       is_local_mutation_allowed,
        .                       flow_state,
        .                       location,
        .                   );
        .                   let conflict_error =
  497,178 ( 0.01%)              self.check_access_for_conflict(location, place_span, sd, rw, flow_state);
        .           
  135,594 ( 0.00%)          if let (Activation(_, borrow_idx), true) = (kind.1, conflict_error) {
        .                       // Suppress this warning when there's an error being emitted for the
        .                       // same borrow: fixing the error is likely to fix the warning.
        .                       self.reservation_warnings.remove(&borrow_idx);
        .                   }
        .           
  135,594 ( 0.00%)          if conflict_error || mutability_error {
        .                       debug!("access_place: logging error place_span=`{:?}` kind=`{:?}`", place_span, kind);
        .           
        .                       self.access_place_error_reported.insert((place_span.0, place_span.1));
        .                   }
  361,584 ( 0.01%)      }
        .           
        .               fn check_access_for_conflict(
        .                   &mut self,
        .                   location: Location,
        .                   place_span: (Place<'tcx>, Span),
        .                   sd: AccessDepth,
        .                   rw: ReadOrWrite,
        .                   flow_state: &Flows<'cx, 'tcx>,
        .               ) -> bool {
        .                   debug!(
        .                       "check_access_for_conflict(location={:?}, place_span={:?}, sd={:?}, rw={:?})",
        .                       location, place_span, sd, rw,
        .                   );
        .           
   45,198 ( 0.00%)          let mut error_reported = false;
  135,594 ( 0.00%)          let tcx = self.infcx.tcx;
        .                   let body = self.body;
   90,396 ( 0.00%)          let borrow_set = self.borrow_set.clone();
        .           
        .                   // Use polonius output if it has been enabled.
   90,396 ( 0.00%)          let polonius_output = self.polonius_output.clone();
        .                   let borrows_in_scope = if let Some(polonius) = &polonius_output {
        .                       let location = self.location_table.start_index(location);
        .                       Either::Left(polonius.errors_at(location).iter().copied())
        .                   } else {
        .                       Either::Right(flow_state.borrows.iter())
        .                   };
        .           
  587,574 ( 0.01%)          each_borrow_involving_path(
        .                       self,
        .                       tcx,
        .                       body,
        .                       location,
  271,188 ( 0.01%)              (sd, place_span.0),
        .                       &borrow_set,
  271,188 ( 0.01%)              borrows_in_scope,
  518,160 ( 0.01%)              |this, borrow_index, borrow| match (rw, borrow.kind) {
        .                           // Obviously an activation is compatible with its own
        .                           // reservation (or even prior activating uses of same
        .                           // borrow); so don't check if they interfere.
        .                           //
        .                           // NOTE: *reservations* do conflict with themselves;
        .                           // thus aren't injecting unsoundenss w/ this check.)
    1,614 ( 0.00%)                  (Activation(_, activating), _) if activating == borrow_index => {
        .                               debug!(
        .                                   "check_access_for_conflict place_span: {:?} sd: {:?} rw: {:?} \
        .                                    skipping {:?} b/c activation of same borrow_index",
        .                                   place_span,
        .                                   sd,
        .                                   rw,
        .                                   (borrow_index, borrow),
        .                               );
-- line 1084 ----------------------------------------
-- line 1179 ----------------------------------------
        .                                   }
        .                               }
        .                               Control::Break
        .                           }
        .                       },
        .                   );
        .           
        .                   error_reported
  135,594 ( 0.00%)      }
        .           
  159,310 ( 0.00%)      fn mutate_place(
        .                   &mut self,
        .                   location: Location,
        .                   place_span: (Place<'tcx>, Span),
        .                   kind: AccessDepth,
        .                   flow_state: &Flows<'cx, 'tcx>,
        .               ) {
        .                   // Write of P[i] or *P requires P init'd.
  143,379 ( 0.00%)          self.check_if_assigned_path_is_moved(location, place_span, flow_state);
        .           
        .                   // Special case: you can assign an immutable local variable
        .                   // (e.g., `x = ...`) so long as it has never been initialized
        .                   // before (at this point in the flow).
   15,931 ( 0.00%)          if let Some(local) = place_span.0.as_local() {
   63,084 ( 0.00%)              if let Mutability::Not = self.body.local_decls[local].mutability {
        .                           // check for reassignments to immutable local variables
        .                           self.check_if_reassignment_to_immutable_state(
        .                               location, local, place_span, flow_state,
        .                           );
        .                           return;
        .                       }
        .                   }
        .           
        .                   // Otherwise, use the normal access permission rules.
  142,044 ( 0.00%)          self.access_place(
        .                       location,
   47,348 ( 0.00%)              place_span,
        .                       (kind, Write(WriteKind::Mutate)),
        .                       LocalMutationIsAllowed::No,
        .                       flow_state,
        .                   );
  127,448 ( 0.00%)      }
        .           
        .               fn consume_rvalue(
        .                   &mut self,
        .                   location: Location,
        .                   (rvalue, span): (&'cx Rvalue<'tcx>, Span),
        .                   flow_state: &Flows<'cx, 'tcx>,
        .               ) {
   75,582 ( 0.00%)          match *rvalue {
   21,180 ( 0.00%)              Rvalue::Ref(_ /*rgn*/, bk, place) => {
   80,574 ( 0.00%)                  let access_kind = match bk {
        .                               BorrowKind::Shallow => {
        .                                   (Shallow(Some(ArtificialField::ShallowBorrow)), Read(ReadKind::Borrow(bk)))
        .                               }
        .                               BorrowKind::Shared => (Deep, Read(ReadKind::Borrow(bk))),
        .                               BorrowKind::Unique | BorrowKind::Mut { .. } => {
        .                                   let wk = WriteKind::MutableBorrow(bk);
    4,146 ( 0.00%)                          if allow_two_phase_borrow(bk) {
        .                                       (Deep, Reservation(wk))
        .                                   } else {
        .                                       (Deep, Write(wk))
        .                                   }
        .                               }
        .                           };
        .           
  148,260 ( 0.00%)                  self.access_place(
        .                               location,
   28,240 ( 0.00%)                      (place, span),
        .                               access_kind,
        .                               LocalMutationIsAllowed::No,
        .                               flow_state,
        .                           );
        .           
        .                           let action = if bk == BorrowKind::Shallow {
        .                               InitializationRequiringAction::MatchOn
        .                           } else {
        .                               InitializationRequiringAction::Borrow
        .                           };
        .           
   49,420 ( 0.00%)                  self.check_if_path_or_subpath_is_moved(
        .                               location,
        .                               action,
   49,420 ( 0.00%)                      (place.as_ref(), span),
        .                               flow_state,
        .                           );
        .                       }
        .           
        .                       Rvalue::AddressOf(mutability, place) => {
        .                           let access_kind = match mutability {
        .                               Mutability::Mut => (
        .                                   Deep,
-- line 1270 ----------------------------------------
-- line 1302 ----------------------------------------
        .                       }
        .           
        .                       Rvalue::Len(place) | Rvalue::Discriminant(place) => {
        .                           let af = match *rvalue {
        .                               Rvalue::Len(..) => Some(ArtificialField::ArrayLength),
        .                               Rvalue::Discriminant(..) => None,
        .                               _ => unreachable!(),
        .                           };
    4,752 ( 0.00%)                  self.access_place(
        .                               location,
    1,188 ( 0.00%)                      (place, span),
        .                               (Shallow(af), Read(ReadKind::Copy)),
        .                               LocalMutationIsAllowed::No,
        .                               flow_state,
        .                           );
    2,079 ( 0.00%)                  self.check_if_path_or_subpath_is_moved(
        .                               location,
        .                               InitializationRequiringAction::Use,
    2,079 ( 0.00%)                      (place.as_ref(), span),
        .                               flow_state,
        .                           );
        .                       }
        .           
        .                       Rvalue::BinaryOp(_bin_op, box (ref operand1, ref operand2))
        .                       | Rvalue::CheckedBinaryOp(_bin_op, box (ref operand1, ref operand2)) => {
    3,510 ( 0.00%)                  self.consume_operand(location, (operand1, span), flow_state);
    2,457 ( 0.00%)                  self.consume_operand(location, (operand2, span), flow_state);
        .                       }
        .           
        .                       Rvalue::NullaryOp(_op, _ty) => {
        .                           // nullary ops take no dynamic input; no borrowck effect.
        .                       }
        .           
        .                       Rvalue::Aggregate(ref aggregate_kind, ref operands) => {
        .                           // We need to report back the list of mutable upvars that were
        .                           // moved into the closure and subsequently used by the closure,
        .                           // in order to populate our used_mut set.
    3,045 ( 0.00%)                  match **aggregate_kind {
        .                               AggregateKind::Closure(def_id, _) | AggregateKind::Generator(def_id, _, _) => {
        .                                   let BorrowCheckResult { used_mut_upvars, .. } =
    1,212 ( 0.00%)                              self.infcx.tcx.mir_borrowck(def_id.expect_local());
        .                                   debug!("{:?} used_mut_upvars={:?}", def_id, used_mut_upvars);
        .                                   for field in used_mut_upvars {
        .                                       self.propagate_closure_used_mut_upvar(&operands[field.index()]);
        .                                   }
        .                               }
        .                               AggregateKind::Adt(..)
        .                               | AggregateKind::Array(..)
        .                               | AggregateKind::Tuple { .. } => (),
-- line 1350 ----------------------------------------
-- line 1448 ----------------------------------------
        .                               }
        .                               _ => propagate_closure_used_mut_place(self, place),
        .                           }
        .                       }
        .                       Operand::Constant(..) => {}
        .                   }
        .               }
        .           
  186,984 ( 0.00%)      fn consume_operand(
        .                   &mut self,
        .                   location: Location,
        .                   (operand, span): (&'cx Operand<'tcx>, Span),
        .                   flow_state: &Flows<'cx, 'tcx>,
        .               ) {
   81,322 ( 0.00%)          match *operand {
    3,627 ( 0.00%)              Operand::Copy(place) => {
        .                           // copy of place: check if this is "copy of frozen path"
        .                           // (FIXME: see check_loans.rs)
    7,254 ( 0.00%)                  self.access_place(
        .                               location,
    6,045 ( 0.00%)                      (place, span),
        .                               (Deep, Read(ReadKind::Copy)),
        .                               LocalMutationIsAllowed::No,
        .                               flow_state,
        .                           );
        .           
        .                           // Finally, check if path was already moved.
        .                           self.check_if_path_or_subpath_is_moved(
        .                               location,
        .                               InitializationRequiringAction::Use,
        .                               (place.as_ref(), span),
        .                               flow_state,
        .                           );
        .                       }
   26,901 ( 0.00%)              Operand::Move(place) => {
        .                           // move of place: check if this is move of already borrowed path
   66,993 ( 0.00%)                  self.access_place(
        .                               location,
   44,835 ( 0.00%)                      (place, span),
        .                               (Deep, Write(WriteKind::Move)),
        .                               LocalMutationIsAllowed::Yes,
        .                               flow_state,
        .                           );
        .           
        .                           // Finally, check if path was already moved.
    5,632 ( 0.00%)                  self.check_if_path_or_subpath_is_moved(
        .                               location,
        .                               InitializationRequiringAction::Use,
    4,224 ( 0.00%)                      (place.as_ref(), span),
        .                               flow_state,
        .                           );
        .                       }
        .                       Operand::Constant(_) => {}
        .                   }
  124,656 ( 0.00%)      }
        .           
        .               /// Checks whether a borrow of this place is invalidated when the function
        .               /// exits
        .               fn check_for_invalidation_at_exit(
        .                   &mut self,
        .                   location: Location,
        .                   borrow: &BorrowData<'tcx>,
        .                   span: Span,
-- line 1510 ----------------------------------------
-- line 1573 ----------------------------------------
        .                       err.buffer(&mut self.errors_buffer);
        .                   }
        .               }
        .           
        .               fn check_activations(&mut self, location: Location, span: Span, flow_state: &Flows<'cx, 'tcx>) {
        .                   // Two-phase borrow support: For each activation that is newly
        .                   // generated at this statement, check if it interferes with
        .                   // another borrow.
  101,128 ( 0.00%)          let borrow_set = self.borrow_set.clone();
  193,032 ( 0.00%)          for &borrow_index in borrow_set.activations_at_location(location) {
        .                       let borrow = &borrow_set[borrow_index];
        .           
        .                       // only mutable borrows should be 2-phase
    8,070 ( 0.00%)              assert!(match borrow.kind {
        .                           BorrowKind::Shared | BorrowKind::Shallow => false,
        .                           BorrowKind::Unique | BorrowKind::Mut { .. } => true,
        .                       });
        .           
   19,368 ( 0.00%)              self.access_place(
        .                           location,
    9,684 ( 0.00%)                  (borrow.borrowed_place, span),
   14,526 ( 0.00%)                  (Deep, Activation(WriteKind::MutableBorrow(borrow.kind), borrow_index)),
        .                           LocalMutationIsAllowed::No,
        .                           flow_state,
        .                       );
        .                       // We do not need to call `check_if_path_or_subpath_is_moved`
        .                       // again, as we already called it when we made the
        .                       // initial reservation.
        .                   }
        .               }
-- line 1602 ----------------------------------------
-- line 1606 ----------------------------------------
        .                   location: Location,
        .                   local: Local,
        .                   place_span: (Place<'tcx>, Span),
        .                   flow_state: &Flows<'cx, 'tcx>,
        .               ) {
        .                   debug!("check_if_reassignment_to_immutable_state({:?})", local);
        .           
        .                   // Check if any of the initializiations of `local` have happened yet:
   24,564 ( 0.00%)          if let Some(init_index) = self.is_local_ever_initialized(local, flow_state) {
        .                       // And, if so, report an error.
        .                       let init = &self.move_data.inits[init_index];
        .                       let span = init.span(&self.body);
        .                       self.report_illegal_reassignment(location, place_span, span, place_span.0);
        .                   }
        .               }
        .           
  248,508 ( 0.01%)      fn check_if_full_path_is_moved(
        .                   &mut self,
        .                   location: Location,
        .                   desired_action: InitializationRequiringAction,
        .                   place_span: (PlaceRef<'tcx>, Span),
        .                   flow_state: &Flows<'cx, 'tcx>,
        .               ) {
        .                   let maybe_uninits = &flow_state.uninits;
        .           
-- line 1630 ----------------------------------------
-- line 1660 ----------------------------------------
        .                   // Therefore, if we seek out the *closest* prefix for which we
        .                   // have a MovePath, that should capture the initialization
        .                   // state for the place scenario.
        .                   //
        .                   // This code covers scenarios 1, 2, and 3.
        .           
        .                   debug!("check_if_full_path_is_moved place: {:?}", place_span.0);
        .                   let (prefix, mpi) = self.move_path_closest_to(place_span.0);
   19,116 ( 0.00%)          if maybe_uninits.contains(mpi) {
        .                       self.report_use_of_moved_or_uninitialized(
        .                           location,
        .                           desired_action,
        .                           (prefix, place_span.0, place_span.1),
        .                           mpi,
        .                       );
        .                   } // Only query longest prefix with a MovePath, not further
        .                   // ancestors; dataflow recurs on children when parents
        .                   // move (to support partial (re)inits).
        .                   //
        .                   // (I.e., querying parents breaks scenario 7; but may want
        .                   // to do such a query based on partial-init feature-gate.)
  152,928 ( 0.00%)      }
        .           
        .               /// Subslices correspond to multiple move paths, so we iterate through the
        .               /// elements of the base array. For each element we check
        .               ///
        .               /// * Does this element overlap with our slice.
        .               /// * Is any part of it uninitialized.
        .               fn check_if_subslice_element_is_moved(
        .                   &mut self,
-- line 1689 ----------------------------------------
-- line 1719 ----------------------------------------
        .                                       return; // don't bother finding other problems.
        .                                   }
        .                               }
        .                           }
        .                       }
        .                   }
        .               }
        .           
  208,516 ( 0.00%)      fn check_if_path_or_subpath_is_moved(
        .                   &mut self,
        .                   location: Location,
        .                   desired_action: InitializationRequiringAction,
        .                   place_span: (PlaceRef<'tcx>, Span),
        .                   flow_state: &Flows<'cx, 'tcx>,
        .               ) {
   37,912 ( 0.00%)          let maybe_uninits = &flow_state.uninits;
        .           
        .                   // Bad scenarios:
        .                   //
        .                   // 1. Move of `a.b.c`, use of `a` or `a.b`
        .                   //    partial initialization support, one might have `a.x`
        .                   //    initialized but not `a.b`.
        .                   // 2. All bad scenarios from `check_if_full_path_is_moved`
        .                   //
-- line 1742 ----------------------------------------
-- line 1743 ----------------------------------------
        .                   // OK scenarios:
        .                   //
        .                   // 3. Move of `a.b.c`, use of `a.b.d`
        .                   // 4. Uninitialized `a.x`, initialized `a.b`, use of `a.b`
        .                   // 5. Copied `(a.b: &_)`, use of `*(a.b).c`; note that `a.b`
        .                   //    must have been initialized for the use to be sound.
        .                   // 6. Move of `a.b.c` then reinit of `a.b.c.d`, use of `a.b.c.d`
        .           
  132,692 ( 0.00%)          self.check_if_full_path_is_moved(location, desired_action, place_span, flow_state);
        .           
   30,860 ( 0.00%)          if let Some((place_base, ProjectionElem::Subslice { from, to, from_end: false })) =
   18,956 ( 0.00%)              place_span.0.last_projection()
        .                   {
        .                       let place_ty = place_base.ty(self.body(), self.infcx.tcx);
        .                       if let ty::Array(..) = place_ty.ty.kind() {
        .                           self.check_if_subslice_element_is_moved(
        .                               location,
        .                               desired_action,
        .                               (place_base, place_span.1),
        .                               maybe_uninits,
-- line 1762 ----------------------------------------
-- line 1772 ----------------------------------------
        .                   //
        .                   // (Distinct from handling of scenarios 1+2+4 above because
        .                   // `place` does not interfere with suffixes of its prefixes,
        .                   // e.g., `a.b.c` does not interfere with `a.b.d`)
        .                   //
        .                   // This code covers scenario 1.
        .           
        .                   debug!("check_if_path_or_subpath_is_moved place: {:?}", place_span.0);
   75,824 ( 0.00%)          if let Some(mpi) = self.move_path_for_place(place_span.0) {
   46,572 ( 0.00%)              let uninit_mpi = self
        .                           .move_data
        .                           .find_in_move_path_or_its_descendants(mpi, |mpi| maybe_uninits.contains(mpi));
        .           
   23,286 ( 0.00%)              if let Some(uninit_mpi) = uninit_mpi {
        .                           self.report_use_of_moved_or_uninitialized(
        .                               location,
        .                               desired_action,
        .                               (place_span.0, place_span.0, place_span.1),
        .                               uninit_mpi,
        .                           );
        .                           return; // don't bother finding other problems.
        .                       }
        .                   }
  151,648 ( 0.00%)      }
        .           
        .               /// Currently MoveData does not store entries for all places in
        .               /// the input MIR. For example it will currently filter out
        .               /// places that are Copy; thus we do not track places of shared
        .               /// reference type. This routine will walk up a place along its
        .               /// prefixes, searching for a foundational place that *is*
        .               /// tracked in the MoveData.
        .               ///
        .               /// An Err result includes a tag indicated why the search failed.
        .               /// Currently this can only occur if the place is built off of a
        .               /// static variable, as we do not track those in the MoveData.
        .               fn move_path_closest_to(&mut self, place: PlaceRef<'tcx>) -> (PlaceRef<'tcx>, MovePathIndex) {
  248,508 ( 0.01%)          match self.move_data.rev_lookup.find(place) {
        .                       LookupResult::Parent(Some(mpi)) | LookupResult::Exact(mpi) => {
        .                           (self.move_data.move_paths[mpi].place.as_ref(), mpi)
        .                       }
        .                       LookupResult::Parent(None) => panic!("should have move path for every Local"),
        .                   }
        .               }
        .           
        .               fn move_path_for_place(&mut self, place: PlaceRef<'tcx>) -> Option<MovePathIndex> {
        .                   // If returns None, then there is no move path corresponding
        .                   // to a direct owner of `place` (which means there is nothing
        .                   // that borrowck tracks for its analysis).
        .           
  171,836 ( 0.00%)          match self.move_data.rev_lookup.find(place) {
        .                       LookupResult::Parent(_) => None,
        .                       LookupResult::Exact(mpi) => Some(mpi),
        .                   }
        .               }
        .           
        .               fn check_if_assigned_path_is_moved(
        .                   &mut self,
        .                   location: Location,
        .                   (place, span): (Place<'tcx>, Span),
        .                   flow_state: &Flows<'cx, 'tcx>,
        .               ) {
        .                   debug!("check_if_assigned_path_is_moved place: {:?}", place);
        .           
        .                   // None case => assigning to `x` does not require `x` be initialized.
      160 ( 0.00%)          for (place_base, elem) in place.iter_projections().rev() {
    1,256 ( 0.00%)              match elem {
        .                           ProjectionElem::Index(_/*operand*/) |
        .                           ProjectionElem::ConstantIndex { .. } |
        .                           // assigning to P[i] requires P to be valid.
        .                           ProjectionElem::Downcast(_/*adt_def*/, _/*variant_idx*/) =>
        .                           // assigning to (P->variant) is okay if assigning to `P` is okay
        .                           //
        .                           // FIXME: is this true even if P is an adt with a dtor?
        .                           { }
        .           
        .                           // assigning to (*P) requires P to be initialized
        .                           ProjectionElem::Deref => {
    1,120 ( 0.00%)                      self.check_if_full_path_is_moved(
        .                                   location, InitializationRequiringAction::Use,
      960 ( 0.00%)                          (place_base, span), flow_state);
        .                               // (base initialized; no need to
        .                               // recur further)
        .                               break;
        .                           }
        .           
        .                           ProjectionElem::Subslice { .. } => {
        .                               panic!("we don't allow assignments to subslices, location: {:?}",
        .                                      location);
        .                           }
        .           
        .                           ProjectionElem::Field(..) => {
        .                               // if type of `P` has a dtor, then
        .                               // assigning to `P.f` requires `P` itself
        .                               // be already initialized
        .                               let tcx = self.infcx.tcx;
      154 ( 0.00%)                      let base_ty = place_base.ty(self.body(), tcx).ty;
      462 ( 0.00%)                      match base_ty.kind() {
      924 ( 0.00%)                          ty::Adt(def, _) if def.has_dtor(tcx) => {
        .                                       self.check_if_path_or_subpath_is_moved(
        .                                           location, InitializationRequiringAction::Assignment,
        .                                           (place_base, span), flow_state);
        .           
        .                                       // (base initialized; no need to
        .                                       // recur further)
        .                                       break;
        .                                   }
-- line 1877 ----------------------------------------
-- line 1931 ----------------------------------------
        .           
        .                       // Shallow so that we'll stop at any dereference; we'll
        .                       // report errors about issues with such bases elsewhere.
        .                       let maybe_uninits = &flow_state.uninits;
        .           
        .                       // Find the shortest uninitialized prefix you can reach
        .                       // without going over a Deref.
        .                       let mut shortest_uninit_seen = None;
    3,388 ( 0.00%)              for prefix in this.prefixes(base, PrefixSet::Shallow) {
      154 ( 0.00%)                  let mpi = match this.move_path_for_place(prefix) {
        .                               Some(mpi) => mpi,
        .                               None => continue,
        .                           };
        .           
        .                           if maybe_uninits.contains(mpi) {
        .                               debug!(
        .                                   "check_parent_of_field updating shortest_uninit_seen from {:?} to {:?}",
        .                                   shortest_uninit_seen,
-- line 1948 ----------------------------------------
-- line 1949 ----------------------------------------
        .                                   Some((prefix, mpi))
        .                               );
        .                               shortest_uninit_seen = Some((prefix, mpi));
        .                           } else {
        .                               debug!("check_parent_of_field {:?} is definitely initialized", (prefix, mpi));
        .                           }
        .                       }
        .           
      462 ( 0.00%)              if let Some((prefix, mpi)) = shortest_uninit_seen {
        .                           // Check for a reassignment into an uninitialized field of a union (for example,
        .                           // after a move out). In this case, do not report an error here. There is an
        .                           // exception, if this is the first assignment into the union (that is, there is
        .                           // no move out from an earlier location) then this is an attempt at initialization
        .                           // of the union - we should error in that case.
        .                           let tcx = this.infcx.tcx;
        .                           if base.ty(this.body(), tcx).ty.is_union() {
        .                               if this.move_data.path_map[mpi].iter().any(|moi| {
-- line 1965 ----------------------------------------
-- line 1979 ----------------------------------------
        .                   }
        .               }
        .           
        .               /// Checks the permissions for the given place and read or write kind
        .               ///
        .               /// Returns `true` if an error is reported.
        .               fn check_access_permissions(
        .                   &mut self,
   90,396 ( 0.00%)          (place, span): (Place<'tcx>, Span),
        .                   kind: ReadOrWrite,
        .                   is_local_mutation_allowed: LocalMutationIsAllowed,
        .                   flow_state: &Flows<'cx, 'tcx>,
        .                   location: Location,
        .               ) -> bool {
        .                   debug!(
        .                       "check_access_permissions({:?}, {:?}, is_local_mutation_allowed: {:?})",
        .                       place, kind, is_local_mutation_allowed
        .                   );
        .           
        .                   let error_access;
        .                   let the_place_err;
        .           
  695,588 ( 0.02%)          match kind {
        .                       Reservation(WriteKind::MutableBorrow(
        .                           borrow_kind @ (BorrowKind::Unique | BorrowKind::Mut { .. }),
        .                       ))
        .                       | Write(WriteKind::MutableBorrow(
        .                           borrow_kind @ (BorrowKind::Unique | BorrowKind::Mut { .. }),
        .                       )) => {
   20,718 ( 0.00%)                  let is_local_mutation_allowed = match borrow_kind {
        .                               BorrowKind::Unique => LocalMutationIsAllowed::Yes,
        .                               BorrowKind::Mut { .. } => is_local_mutation_allowed,
        .                               BorrowKind::Shared | BorrowKind::Shallow => unreachable!(),
        .                           };
   14,511 ( 0.00%)                  match self.is_mutable(place.as_ref(), is_local_mutation_allowed) {
        .                               Ok(root_place) => {
        .                                   self.add_used_mut(root_place, flow_state);
        .                                   return false;
        .                               }
        .                               Err(place_err) => {
        .                                   error_access = AccessKind::MutableBorrow;
        .                                   the_place_err = place_err;
        .                               }
        .                           }
        .                       }
        .                       Reservation(WriteKind::Mutate) | Write(WriteKind::Mutate) => {
   82,859 ( 0.00%)                  match self.is_mutable(place.as_ref(), is_local_mutation_allowed) {
        .                               Ok(root_place) => {
        .                                   self.add_used_mut(root_place, flow_state);
        .                                   return false;
        .                               }
        .                               Err(place_err) => {
        .                                   error_access = AccessKind::Mutate;
        .                                   the_place_err = place_err;
        .                               }
-- line 2033 ----------------------------------------
-- line 2041 ----------------------------------------
        .                           | WriteKind::MutableBorrow(BorrowKind::Shallow),
        .                       )
        .                       | Write(
        .                           WriteKind::Move
        .                           | WriteKind::StorageDeadOrDrop
        .                           | WriteKind::MutableBorrow(BorrowKind::Shared)
        .                           | WriteKind::MutableBorrow(BorrowKind::Shallow),
        .                       ) => {
   46,362 ( 0.00%)                  if let (Err(_), true) = (
  162,267 ( 0.00%)                      self.is_mutable(place.as_ref(), is_local_mutation_allowed),
        .                               self.errors_buffer.is_empty(),
        .                           ) {
        .                               // rust-lang/rust#46908: In pure NLL mode this code path should be
        .                               // unreachable, but we use `delay_span_bug` because we can hit this when
        .                               // dereferencing a non-Copy raw pointer *and* have `-Ztreat-err-as-bug`
        .                               // enabled. We don't want to ICE for that case, as other errors will have
        .                               // been emitted (#52262).
        .                               self.infcx.tcx.sess.delay_span_bug(
-- line 2058 ----------------------------------------
-- line 2094 ----------------------------------------
        .                   if previously_initialized {
        .                       self.report_mutability_error(place, span, the_place_err, error_access, location);
        .                       true
        .                   } else {
        .                       false
        .                   }
        .               }
        .           
   80,535 ( 0.00%)      fn is_local_ever_initialized(
        .                   &self,
        .                   local: Local,
        .                   flow_state: &Flows<'cx, 'tcx>,
        .               ) -> Option<InitIndex> {
   48,321 ( 0.00%)          let mpi = self.move_data.rev_lookup.find_local(local);
   16,107 ( 0.00%)          let ii = &self.move_data.init_path_map[mpi];
   70,056 ( 0.00%)          for &index in ii {
   43,470 ( 0.00%)              if flow_state.ever_inits.contains(index) {
        .                           return Some(index);
        .                       }
        .                   }
        .                   None
   64,428 ( 0.00%)      }
        .           
        .               /// Adds the place into the used mutable variables set
   55,640 ( 0.00%)      fn add_used_mut(&mut self, root_place: RootPlace<'tcx>, flow_state: &Flows<'cx, 'tcx>) {
       12 ( 0.00%)          match root_place {
   41,730 ( 0.00%)              RootPlace { place_local: local, place_projection: [], is_local_mutation_allowed } => {
        .                           // If the local may have been initialized, and it is now currently being
        .                           // mutated, then it is justified to be annotated with the `mut`
        .                           // keyword, since the mutation may be a possible reassignment.
   25,917 ( 0.00%)                  if is_local_mutation_allowed != LocalMutationIsAllowed::Yes
   36,039 ( 0.00%)                      && self.is_local_ever_initialized(local, flow_state).is_some()
        .                           {
        .                               self.used_mut.insert(local);
        .                           }
        .                       }
        .                       RootPlace {
        .                           place_local: _,
        .                           place_projection: _,
        .                           is_local_mutation_allowed: LocalMutationIsAllowed::Yes,
-- line 2133 ----------------------------------------
-- line 2140 ----------------------------------------
        .                           if let Some(field) = self.is_upvar_field_projection(PlaceRef {
        .                               local: place_local,
        .                               projection: place_projection,
        .                           }) {
        .                               self.used_mut_upvars.push(field);
        .                           }
        .                       }
        .                   }
   53,872 ( 0.00%)      }
        .           
        .               /// Whether this value can be written or borrowed mutably.
        .               /// Returns the root place if the place passed in is a projection.
  438,251 ( 0.01%)      fn is_mutable(
        .                   &self,
        .                   place: PlaceRef<'tcx>,
        .                   is_local_mutation_allowed: LocalMutationIsAllowed,
        .               ) -> Result<RootPlace<'tcx>, PlaceRef<'tcx>> {
        .                   debug!("is_mutable: place={:?}, is_local...={:?}", place, is_local_mutation_allowed);
  125,023 ( 0.00%)          match place.last_projection() {
        .                       None => {
   37,091 ( 0.00%)                  let local = &self.body.local_decls[place.local];
  111,273 ( 0.00%)                  match local.mutability {
   11,726 ( 0.00%)                      Mutability::Not => match is_local_mutation_allowed {
   35,178 ( 0.00%)                          LocalMutationIsAllowed::Yes => Ok(RootPlace {
        .                                       place_local: place.local,
        .                                       place_projection: place.projection,
        .                                       is_local_mutation_allowed: LocalMutationIsAllowed::Yes,
        .                                   }),
        .                                   LocalMutationIsAllowed::ExceptUpvars => Ok(RootPlace {
        .                                       place_local: place.local,
        .                                       place_projection: place.projection,
        .                                       is_local_mutation_allowed: LocalMutationIsAllowed::ExceptUpvars,
        .                                   }),
        .                                   LocalMutationIsAllowed::No => Err(place),
        .                               },
   62,456 ( 0.00%)                      Mutability::Mut => Ok(RootPlace {
        .                                   place_local: place.local,
        .                                   place_projection: place.projection,
        .                                   is_local_mutation_allowed,
        .                               }),
        .                           }
        .                       }
        .                       Some((place_base, elem)) => {
    8,250 ( 0.00%)                  match elem {
        .                               ProjectionElem::Deref => {
    3,796 ( 0.00%)                          let base_ty = place_base.ty(self.body(), self.infcx.tcx).ty;
        .           
        .                                   // Check the kind of deref to decide
   11,388 ( 0.00%)                          match base_ty.kind() {
        .                                       ty::Ref(_, _, mutbl) => {
    3,796 ( 0.00%)                                  match mutbl {
        .                                               // Shared borrowed data is never mutable
        .                                               hir::Mutability::Not => Err(place),
        .                                               // Mutably borrowed data is mutable, but only if we have a
        .                                               // unique path to the `&mut`
        .                                               hir::Mutability::Mut => {
    3,796 ( 0.00%)                                          let mode = match self.is_upvar_field_projection(place) {
       30 ( 0.00%)                                              Some(field) if self.upvars[field.index()].by_ref => {
        .                                                           is_local_mutation_allowed
        .                                                       }
        .                                                       _ => LocalMutationIsAllowed::Yes,
        .                                                   };
        .           
   11,388 ( 0.00%)                                          self.is_mutable(place_base, mode)
        .                                               }
        .                                           }
        .                                       }
        .                                       ty::RawPtr(tnm) => {
        .                                           match tnm.mutbl {
        .                                               // `*const` raw pointers are not mutable
        .                                               hir::Mutability::Not => Err(place),
        .                                               // `*mut` raw pointers are always mutable, regardless of
-- line 2211 ----------------------------------------
-- line 2228 ----------------------------------------
        .                               // All other projections are owned by their base path, so mutable if
        .                               // base path is mutable
        .                               ProjectionElem::Field(..)
        .                               | ProjectionElem::Index(..)
        .                               | ProjectionElem::ConstantIndex { .. }
        .                               | ProjectionElem::Subslice { .. }
        .                               | ProjectionElem::Downcast(..) => {
        .                                   let upvar_field_projection = self.is_upvar_field_projection(place);
    1,704 ( 0.00%)                          if let Some(field) = upvar_field_projection {
        .                                       let upvar = &self.upvars[field.index()];
        .                                       debug!(
        .                                           "is_mutable: upvar.mutability={:?} local_mutation_is_allowed={:?} \
        .                                            place={:?}, place_base={:?}",
        .                                           upvar, is_local_mutation_allowed, place, place_base
        .                                       );
       45 ( 0.00%)                              match (upvar.place.mutability, is_local_mutation_allowed) {
        .                                           (
        .                                               Mutability::Not,
        .                                               LocalMutationIsAllowed::No
        .                                               | LocalMutationIsAllowed::ExceptUpvars,
        .                                           ) => Err(place),
        .                                           (Mutability::Not, LocalMutationIsAllowed::Yes)
        .                                           | (Mutability::Mut, _) => {
        .                                               // Subtle: this is an upvar
-- line 2251 ----------------------------------------
-- line 2270 ----------------------------------------
        .                                               // fn main() {
        .                                               //     let var = Vec::new();
        .                                               //     foo(move || {
        .                                               //         var.push(1);
        .                                               //     });
        .                                               // }
        .                                               // ```
        .                                               let _ =
       81 ( 0.00%)                                          self.is_mutable(place_base, is_local_mutation_allowed)?;
        .                                               Ok(RootPlace {
        .                                                   place_local: place.local,
        .                                                   place_projection: place.projection,
        .                                                   is_local_mutation_allowed,
        .                                               })
        .                                           }
        .                                       }
        .                                   } else {
        .                                       self.is_mutable(place_base, is_local_mutation_allowed)
        .                                   }
        .                               }
        .                           }
        .                       }
        .                   }
  318,728 ( 0.01%)      }
        .           
        .               /// If `place` is a field projection, and the field is being projected from a closure type,
        .               /// then returns the index of the field being projected. Note that this closure will always
        .               /// be `self` in the current MIR, because that is the only time we directly access the fields
        .               /// of a closure type.
        .               fn is_upvar_field_projection(&self, place_ref: PlaceRef<'tcx>) -> Option<Field> {
   24,750 ( 0.00%)          path_utils::is_upvar_field_projection(self.infcx.tcx, &self.upvars, place_ref, self.body())
        .               }
        .           }
        .           
        .           /// The degree of overlap between 2 places for borrow-checking.
        .           enum Overlap {
        .               /// The places might partially overlap - in this case, we give
        .               /// up and say that they might conflict. This occurs when
        .               /// different fields of a union are borrowed. For example,
-- line 2308 ----------------------------------------

1,464,334 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_borrowck/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs
--------------------------------------------------------------------------------
Ir                 

-- line 91 ----------------------------------------
        .           // maximum of number bytes needed to fill an 8-byte-sized element on which
        .           // SipHash operates. Note that for variable-sized copies which are known to be
        .           // less than 8 bytes, this function will perform more work than necessary unless
        .           // the compiler is able to optimize the extra work away.
        .           #[inline]
        .           unsafe fn copy_nonoverlapping_small(src: *const u8, dst: *mut u8, count: usize) {
        .               debug_assert!(count <= 8);
        .           
   98,603 ( 0.00%)      if count == 8 {
        .                   ptr::copy_nonoverlapping(src, dst, 8);
        .                   return;
        .               }
        .           
        .               let mut i = 0;
  101,990 ( 0.00%)      if i + 3 < count {
        .                   ptr::copy_nonoverlapping(src.add(i), dst.add(i), 4);
        .                   i += 4;
        .               }
        .           
  224,229 ( 0.01%)      if i + 1 < count {
        .                   ptr::copy_nonoverlapping(src.add(i), dst.add(i), 2);
   23,173 ( 0.00%)          i += 2
        .               }
        .           
  101,990 ( 0.00%)      if i < count {
   71,798 ( 0.00%)          *dst.add(i) = *src.add(i);
        .                   i += 1;
        .               }
        .           
        .               debug_assert_eq!(i, count);
        .           }
        .           
        .           // # Implementation
        .           //
-- line 124 ----------------------------------------
-- line 201 ----------------------------------------
        .           
        .                   hasher
        .               }
        .           
        .               // A specialized write function for values with size <= 8.
        .               #[inline]
        .               fn short_write<T>(&mut self, x: T) {
        .                   let size = mem::size_of::<T>();
1,360,883 ( 0.03%)          let nbuf = self.nbuf;
        .                   debug_assert!(size <= 8);
        .                   debug_assert!(nbuf < BUFFER_SIZE);
        .                   debug_assert!(nbuf + size < BUFFER_WITH_SPILL_SIZE);
        .           
9,463,930 ( 0.22%)          if nbuf + size < BUFFER_SIZE {
        .                       unsafe {
        .                           // The memcpy call is optimized away because the size is known.
        .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
        .                           ptr::copy_nonoverlapping(&x as *const _ as *const u8, dst, size);
        .                       }
        .           
3,009,751 ( 0.07%)              self.nbuf = nbuf + size;
        .           
        .                       return;
        .                   }
        .           
  519,388 ( 0.01%)          unsafe { self.short_write_process_buffer(x) }
        .               }
        .           
        .               // A specialized write function for values with size <= 8 that should only
        .               // be called when the write would cause the buffer to fill.
        .               //
        .               // SAFETY: the write of `x` into `self.buf` starting at byte offset
        .               // `self.nbuf` must cause `self.buf` to become fully initialized (and not
        .               // overflow) if it wasn't already.
        .               #[inline(never)]
  151,704 ( 0.00%)      unsafe fn short_write_process_buffer<T>(&mut self, x: T) {
        .                   let size = mem::size_of::<T>();
  151,704 ( 0.00%)          let nbuf = self.nbuf;
        .                   debug_assert!(size <= 8);
        .                   debug_assert!(nbuf < BUFFER_SIZE);
        .                   debug_assert!(nbuf + size >= BUFFER_SIZE);
        .                   debug_assert!(nbuf + size < BUFFER_WITH_SPILL_SIZE);
        .           
        .                   // Copy first part of input into end of buffer, possibly into spill
        .                   // element. The memcpy call is optimized away because the size is known.
        .                   let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
        .                   ptr::copy_nonoverlapping(&x as *const _ as *const u8, dst, size);
        .           
        .                   // Process buffer.
        .                   for i in 0..BUFFER_CAPACITY {
1,517,040 ( 0.04%)              let elem = self.buf.get_unchecked(i).assume_init().to_le();
1,213,632 ( 0.03%)              self.state.v3 ^= elem;
        .                       Sip24Rounds::c_rounds(&mut self.state);
1,365,336 ( 0.03%)              self.state.v0 ^= elem;
        .                   }
        .           
        .                   // Copy remaining input into start of buffer by copying size - 1
        .                   // elements from spill (at most size - 1 bytes could have overflowed
        .                   // into the spill). The memcpy call is optimized away because the size
        .                   // is known. And the whole copy is optimized away for size == 1.
        .                   let src = self.buf.get_unchecked(BUFFER_SPILL_INDEX) as *const _ as *const u8;
        .                   ptr::copy_nonoverlapping(src, self.buf.as_mut_ptr() as *mut u8, size - 1);
        .           
        .                   // This function should only be called when the write fills the buffer.
        .                   // Therefore, when size == 1, the new `self.nbuf` must be zero. The size
        .                   // is statically known, so the branch is optimized away.
  721,492 ( 0.02%)          self.nbuf = if size == 1 { 0 } else { nbuf + size - BUFFER_SIZE };
  606,816 ( 0.01%)          self.processed += BUFFER_SIZE;
  303,408 ( 0.01%)      }
        .           
        .               // A write function for byte slices.
        .               #[inline]
        .               fn slice_write(&mut self, msg: &[u8]) {
        .                   let length = msg.len();
   14,840 ( 0.00%)          let nbuf = self.nbuf;
        .                   debug_assert!(nbuf < BUFFER_SIZE);
        .           
  319,915 ( 0.01%)          if nbuf + length < BUFFER_SIZE {
        .                       unsafe {
        .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
        .           
  115,714 ( 0.00%)                  if length <= 8 {
        .                               copy_nonoverlapping_small(msg.as_ptr(), dst, length);
        .                           } else {
        .                               // This memcpy is *not* optimized away.
        .                               ptr::copy_nonoverlapping(msg.as_ptr(), dst, length);
        .                           }
        .                       }
        .           
   59,486 ( 0.00%)              self.nbuf = nbuf + length;
        .           
        .                       return;
        .                   }
        .           
   41,555 ( 0.00%)          unsafe { self.slice_write_process_buffer(msg) }
        .               }
        .           
        .               // A write function for byte slices that should only be called when the
        .               // write would cause the buffer to fill.
        .               //
        .               // SAFETY: `self.buf` must be initialized up to the byte offset `self.nbuf`,
        .               // and `msg` must contain enough bytes to initialize the rest of the element
        .               // containing the byte offset `self.nbuf`.
        .               #[inline(never)]
   25,385 ( 0.00%)      unsafe fn slice_write_process_buffer(&mut self, msg: &[u8]) {
        .                   let length = msg.len();
    5,077 ( 0.00%)          let nbuf = self.nbuf;
        .                   debug_assert!(nbuf < BUFFER_SIZE);
        .                   debug_assert!(nbuf + length >= BUFFER_SIZE);
        .           
        .                   // Always copy first part of input into current element of buffer.
        .                   // This function should only be called when the write fills the buffer,
        .                   // so we know that there is enough input to fill the current element.
   15,231 ( 0.00%)          let valid_in_elem = nbuf % ELEM_SIZE;
    5,077 ( 0.00%)          let needed_in_elem = ELEM_SIZE - valid_in_elem;
        .           
        .                   let src = msg.as_ptr();
        .                   let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
        .                   copy_nonoverlapping_small(src, dst, needed_in_elem);
        .           
        .                   // Process buffer.
        .           
        .                   // Using `nbuf / ELEM_SIZE + 1` rather than `(nbuf + needed_in_elem) /
        .                   // ELEM_SIZE` to show the compiler that this loop's upper bound is > 0.
        .                   // We know that is true, because last step ensured we have a full
        .                   // element in the buffer.
   10,154 ( 0.00%)          let last = nbuf / ELEM_SIZE + 1;
        .           
        .                   for i in 0..last {
   39,518 ( 0.00%)              let elem = self.buf.get_unchecked(i).assume_init().to_le();
   44,595 ( 0.00%)              self.state.v3 ^= elem;
        .                       Sip24Rounds::c_rounds(&mut self.state);
   79,036 ( 0.00%)              self.state.v0 ^= elem;
        .                   }
        .           
        .                   // Process the remaining element-sized chunks of input.
        .                   let mut processed = needed_in_elem;
   10,154 ( 0.00%)          let input_left = length - processed;
    4,713 ( 0.00%)          let elems_left = input_left / ELEM_SIZE;
        .                   let extra_bytes_left = input_left % ELEM_SIZE;
        .           
        .                   for _ in 0..elems_left {
    2,951 ( 0.00%)              let elem = (msg.as_ptr().add(processed) as *const u64).read_unaligned().to_le();
    2,951 ( 0.00%)              self.state.v3 ^= elem;
        .                       Sip24Rounds::c_rounds(&mut self.state);
    2,951 ( 0.00%)              self.state.v0 ^= elem;
    5,902 ( 0.00%)              processed += ELEM_SIZE;
        .                   }
        .           
        .                   // Copy remaining input into start of buffer.
        .                   let src = msg.as_ptr().add(processed);
        .                   let dst = self.buf.as_mut_ptr() as *mut u8;
        .                   copy_nonoverlapping_small(src, dst, extra_bytes_left);
        .           
    5,077 ( 0.00%)          self.nbuf = extra_bytes_left;
   25,385 ( 0.00%)          self.processed += nbuf + processed;
   30,462 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn finish128(mut self) -> (u64, u64) {
        .                   debug_assert!(self.nbuf < BUFFER_SIZE);
        .           
        .                   // Process full elements in buffer.
   46,557 ( 0.00%)          let last = self.nbuf / ELEM_SIZE;
        .           
        .                   // Since we're consuming self, avoid updating members for a potential
        .                   // performance gain.
   62,076 ( 0.00%)          let mut state = self.state;
        .           
        .                   for i in 0..last {
   43,334 ( 0.00%)              let elem = unsafe { self.buf.get_unchecked(i).assume_init().to_le() };
   43,334 ( 0.00%)              state.v3 ^= elem;
        .                       Sip24Rounds::c_rounds(&mut state);
   43,334 ( 0.00%)              state.v0 ^= elem;
        .                   }
        .           
        .                   // Get remaining partial element.
   31,038 ( 0.00%)          let elem = if self.nbuf % ELEM_SIZE != 0 {
        .                       unsafe {
        .                           // Ensure element is initialized by writing zero bytes. At most
        .                           // `ELEM_SIZE - 1` are required given the above check. It's safe
        .                           // to write this many because we have the spill and we maintain
        .                           // `self.nbuf` such that this write will start before the spill.
        .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(self.nbuf);
        .                           ptr::write_bytes(dst, 0, ELEM_SIZE - 1);
   12,176 ( 0.00%)                  self.buf.get_unchecked(last).assume_init().to_le()
        .                       }
        .                   } else {
        .                       0
        .                   };
        .           
        .                   // Finalize the hash.
   43,214 ( 0.00%)          let length = self.processed + self.nbuf;
   31,036 ( 0.00%)          let b: u64 = ((length as u64 & 0xff) << 56) | elem;
        .           
   15,518 ( 0.00%)          state.v3 ^= b;
        .                   Sip24Rounds::c_rounds(&mut state);
   15,518 ( 0.00%)          state.v0 ^= b;
        .           
   15,518 ( 0.00%)          state.v2 ^= 0xee;
        .                   Sip24Rounds::d_rounds(&mut state);
   50,160 ( 0.00%)          let _0 = state.v0 ^ state.v1 ^ state.v2 ^ state.v3;
        .           
   19,122 ( 0.00%)          state.v1 ^= 0xdd;
        .                   Sip24Rounds::d_rounds(&mut state);
   19,122 ( 0.00%)          let _1 = state.v0 ^ state.v1 ^ state.v2 ^ state.v3;
        .           
        .                   (_0, _1)
        .               }
        .           }
        .           
        .           impl Hasher for SipHasher128 {
        .               #[inline]
        .               fn write_u8(&mut self, i: u8) {
-- line 414 ----------------------------------------
-- line 471 ----------------------------------------
        .           }
        .           
        .           #[derive(Debug, Clone, Default)]
        .           struct Sip24Rounds;
        .           
        .           impl Sip24Rounds {
        .               #[inline]
        .               fn c_rounds(state: &mut State) {
5,426,747 ( 0.13%)          compress!(state);
5,833,478 ( 0.14%)          compress!(state);
        .               }
        .           
        .               #[inline]
        .               fn d_rounds(state: &mut State) {
  100,316 ( 0.00%)          compress!(state);
  100,316 ( 0.00%)          compress!(state);
  100,316 ( 0.00%)          compress!(state);
   84,799 ( 0.00%)          compress!(state);
        .               }
        .           }

1,044,959 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/cmp.rs
--------------------------------------------------------------------------------
Ir                 

-- line 18 ----------------------------------------
        .               fn memcmp(s1: *const u8, s2: *const u8, n: usize) -> i32;
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<A, B> PartialEq<[B]> for [A]
        .           where
        .               A: PartialEq<B>,
        .           {
1,060,475 ( 0.02%)      fn eq(&self, other: &[B]) -> bool {
  363,956 ( 0.01%)          SlicePartialEq::equal(self, other)
  914,774 ( 0.02%)      }
        .           
        .               fn ne(&self, other: &[B]) -> bool {
        .                   SlicePartialEq::not_equal(self, other)
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T: Eq> Eq for [T] {}
-- line 36 ----------------------------------------
-- line 62 ----------------------------------------
        .           }
        .           
        .           // Generic slice equality
        .           impl<A, B> SlicePartialEq<B> for [A]
        .           where
        .               A: PartialEq<B>,
        .           {
        .               default fn equal(&self, other: &[B]) -> bool {
  776,810 ( 0.02%)          if self.len() != other.len() {
        .                       return false;
        .                   }
        .           
   68,549 ( 0.00%)          self.iter().zip(other.iter()).all(|(x, y)| x == y)
        .               }
        .           }
        .           
        .           // Use memcmp for bytewise equality when the types allow
        .           impl<A, B> SlicePartialEq<B> for [A]
        .           where
        .               A: BytewiseEquality<B>,
        .           {
1,637,802 ( 0.04%)      fn equal(&self, other: &[B]) -> bool {
  555,621 ( 0.01%)          if self.len() != other.len() {
  130,724 ( 0.00%)              return false;
        .                   }
        .           
        .                   // SAFETY: `self` and `other` are references and are thus guaranteed to be valid.
        .                   // The two slices have been checked to have the same size above.
        .                   unsafe {
  205,016 ( 0.00%)              let size = mem::size_of_val(self);
1,055,735 ( 0.02%)              memcmp(self.as_ptr() as *const u8, other.as_ptr() as *const u8, size) == 0
        .                   }
  961,144 ( 0.02%)      }
        .           }
        .           
        .           #[doc(hidden)]
        .           // intermediate trait for specialization of slice's PartialOrd
        .           trait SlicePartialOrd: Sized {
        .               fn partial_compare(left: &[Self], right: &[Self]) -> Option<Ordering>;
        .           }
        .           
-- line 102 ----------------------------------------
-- line 168 ----------------------------------------
        .               default fn compare(left: &[Self], right: &[Self]) -> Ordering {
        .                   let l = cmp::min(left.len(), right.len());
        .           
        .                   // Slice to the loop iteration range to enable bound check
        .                   // elimination in the compiler
        .                   let lhs = &left[..l];
        .                   let rhs = &right[..l];
        .           
        2 ( 0.00%)          for i in 0..l {
        .                       match lhs[i].cmp(&rhs[i]) {
        .                           Ordering::Equal => (),
        .                           non_eq => return non_eq,
        .                       }
        .                   }
        .           
        .                   left.len().cmp(&right.len())
        .               }
-- line 184 ----------------------------------------
-- line 188 ----------------------------------------
        .           // this matches the order we want for [u8], but no others (not even [i8]).
        .           impl SliceOrd for u8 {
        .               #[inline]
        .               fn compare(left: &[Self], right: &[Self]) -> Ordering {
        .                   let order =
        .                       // SAFETY: `left` and `right` are references and are thus guaranteed to be valid.
        .                       // We use the minimum of both lengths which guarantees that both regions are
        .                       // valid for reads in that interval.
    8,002 ( 0.00%)              unsafe { memcmp(left.as_ptr(), right.as_ptr(), cmp::min(left.len(), right.len())) };
   16,004 ( 0.00%)          if order == 0 {
        .                       left.len().cmp(&right.len())
    5,230 ( 0.00%)          } else if order < 0 {
        .                       Less
        .                   } else {
        .                       Greater
        .                   }
        .               }
        .           }
        .           
        .           // Hack to allow specializing on `Eq` even though `Eq` has a method.
-- line 207 ----------------------------------------
-- line 230 ----------------------------------------
        .           pub(super) trait SliceContains: Sized {
        .               fn slice_contains(&self, x: &[Self]) -> bool;
        .           }
        .           
        .           impl<T> SliceContains for T
        .           where
        .               T: PartialEq,
        .           {
      790 ( 0.00%)      default fn slice_contains(&self, x: &[Self]) -> bool {
   98,483 ( 0.00%)          x.iter().any(|y| *y == *self)
    1,185 ( 0.00%)      }
        .           }
        .           
        .           impl SliceContains for u8 {
        .               #[inline]
        .               fn slice_contains(&self, x: &[Self]) -> bool {
        .                   memchr::memchr(*self, x).is_some()
        .               }
        .           }
-- line 248 ----------------------------------------

1,525,842 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/cmp.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/hash/sip.rs
--------------------------------------------------------------------------------
Ir                 

-- line 124 ----------------------------------------
        .           /// sizes and avoid calling `memcpy`, which is good for speed.
        .           ///
        .           /// Unsafe because: unchecked indexing at start..start+len
        .           #[inline]
        .           unsafe fn u8to64_le(buf: &[u8], start: usize, len: usize) -> u64 {
        .               debug_assert!(len < 8);
        .               let mut i = 0; // current byte index (from LSB) in the output u64
        .               let mut out = 0;
2,262,816 ( 0.05%)      if i + 3 < len {
        .                   // SAFETY: `i` cannot be greater than `len`, and the caller must guarantee
        .                   // that the index start..start+len is in bounds.
        .                   out = unsafe { load_int_le!(buf, start + i, u32) } as u64;
        .                   i += 4;
        .               }
4,688,363 ( 0.11%)      if i + 1 < len {
        .                   // SAFETY: same as above.
2,344,229 ( 0.05%)          out |= (unsafe { load_int_le!(buf, start + i, u16) } as u64) << (i * 8);
1,171,888 ( 0.03%)          i += 2
        .               }
2,621,789 ( 0.06%)      if i < len {
        .                   // SAFETY: same as above.
3,748,286 ( 0.09%)          out |= (unsafe { *buf.get_unchecked(start + i) } as u64) << (i * 8);
        .                   i += 1;
        .               }
        .               debug_assert_eq!(i, len);
        .               out
        .           }
        .           
        .           impl SipHasher {
        .               /// Creates a new `SipHasher` with the two initial keys set to 0.
-- line 153 ----------------------------------------
-- line 190 ----------------------------------------
        .               /// Creates a `SipHasher13` that is keyed off the provided keys.
        .               #[inline]
        .               #[unstable(feature = "hashmap_internals", issue = "none")]
        .               #[rustc_deprecated(
        .                   since = "1.13.0",
        .                   reason = "use `std::collections::hash_map::DefaultHasher` instead"
        .               )]
        .               pub fn new_with_keys(key0: u64, key1: u64) -> SipHasher13 {
  451,917 ( 0.01%)          SipHasher13 { hasher: Hasher::new_with_keys(key0, key1) }
        .               }
        .           }
        .           
        .           impl<S: Sip> Hasher<S> {
        .               #[inline]
        .               fn new_with_keys(key0: u64, key1: u64) -> Hasher<S> {
        9 ( 0.00%)          let mut state = Hasher {
        .                       k0: key0,
        .                       k1: key1,
        .                       length: 0,
        .                       state: State { v0: 0, v1: 0, v2: 0, v3: 0 },
        .                       tail: 0,
        .                       ntail: 0,
        .                       _marker: PhantomData,
        .                   };
        .                   state.reset();
        .                   state
        .               }
        .           
        .               #[inline]
        .               fn reset(&mut self) {
        .                   self.length = 0;
  677,871 ( 0.02%)          self.state.v0 = self.k0 ^ 0x736f6d6570736575;
  718,554 ( 0.02%)          self.state.v1 = self.k1 ^ 0x646f72616e646f6d;
        .                   self.state.v2 = self.k0 ^ 0x6c7967656e657261;
        .                   self.state.v3 = self.k1 ^ 0x7465646279746573;
        .                   self.ntail = 0;
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl super::Hasher for SipHasher {
-- line 230 ----------------------------------------
-- line 258 ----------------------------------------
        .               // in librustc_data_structures/sip128.rs, and add `write_u*`/`write_i*`
        .               // methods to `SipHasher`, `SipHasher13`, and `DefaultHasher`. This would
        .               // greatly speed up integer hashing by those hashers, at the cost of
        .               // slightly slowing down compile speeds on some benchmarks. See #69152 for
        .               // details.
        .               #[inline]
        .               fn write(&mut self, msg: &[u8]) {
        .                   let length = msg.len();
2,878,097 ( 0.07%)          self.length += length;
        .           
        .                   let mut needed = 0;
        .           
2,837,403 ( 0.07%)          if self.ntail != 0 {
1,439,560 ( 0.03%)              needed = 8 - self.ntail;
        .                       // SAFETY: `cmp::min(length, needed)` is guaranteed to not be over `length`
7,197,750 ( 0.17%)              self.tail |= unsafe { u8to64_le(msg, 0, cmp::min(length, needed)) } << (8 * self.ntail);
1,439,550 ( 0.03%)              if length < needed {
  987,010 ( 0.02%)                  self.ntail += length;
        .                           return;
        .                       } else {
  226,270 ( 0.01%)                  self.state.v3 ^= self.tail;
        .                           S::c_rounds(&mut self.state);
  452,540 ( 0.01%)                  self.state.v0 ^= self.tail;
  226,270 ( 0.01%)                  self.ntail = 0;
        .                       }
        .                   }
        .           
        .                   // Buffered tail is now flushed, process new input.
  823,215 ( 0.02%)          let len = length - needed;
  823,226 ( 0.02%)          let left = len & 0x7; // len % 8
        .           
        .                   let mut i = needed;
1,235,159 ( 0.03%)          while i < len - left {
        .                       // SAFETY: because `len - left` is the biggest multiple of 8 under
        .                       // `len`, and because `i` starts at `needed` where `len` is `length - needed`,
        .                       // `i + 8` is guaranteed to be less than or equal to `length`.
        .                       let mi = unsafe { load_int_le!(msg, i, u64) };
        .           
      160 ( 0.00%)              self.state.v3 ^= mi;
        .                       S::c_rounds(&mut self.state);
      160 ( 0.00%)              self.state.v0 ^= mi;
        .           
      320 ( 0.00%)              i += 8;
        .                   }
        .           
        .                   // SAFETY: `i` is now `needed + len.div_euclid(8) * 8`,
        .                   // so `i + left` = `needed + len` = `length`, which is by
        .                   // definition equal to `msg.len()`.
  863,898 ( 0.02%)          self.tail = unsafe { u8to64_le(msg, i, left) };
        .                   self.ntail = left;
        .               }
        .           
        .               #[inline]
        .               fn finish(&self) -> u64 {
  225,960 ( 0.01%)          let mut state = self.state;
        .           
1,129,800 ( 0.03%)          let b: u64 = ((self.length as u64 & 0xff) << 56) | self.tail;
        .           
  225,960 ( 0.01%)          state.v3 ^= b;
        .                   S::c_rounds(&mut state);
  225,960 ( 0.01%)          state.v0 ^= b;
        .           
  225,960 ( 0.01%)          state.v2 ^= 0xff;
        .                   S::d_rounds(&mut state);
        .           
  451,920 ( 0.01%)          state.v0 ^ state.v1 ^ state.v2 ^ state.v3
        .               }
        .           }
        .           
        .           impl<S: Sip> Clone for Hasher<S> {
        .               #[inline]
        .               fn clone(&self) -> Hasher<S> {
        .                   Hasher {
        .                       k0: self.k0,
-- line 331 ----------------------------------------
-- line 354 ----------------------------------------
        .           }
        .           
        .           #[derive(Debug, Clone, Default)]
        .           struct Sip13Rounds;
        .           
        .           impl Sip for Sip13Rounds {
        .               #[inline]
        .               fn c_rounds(state: &mut State) {
2,941,142 ( 0.07%)          compress!(state);
        .               }
        .           
        .               #[inline]
        .               fn d_rounds(state: &mut State) {
  903,840 ( 0.02%)          compress!(state);
  903,840 ( 0.02%)          compress!(state);
  677,880 ( 0.02%)          compress!(state);
        .               }
        .           }
        .           
        .           #[derive(Debug, Clone, Default)]
        .           struct Sip24Rounds;
        .           
        .           impl Sip for Sip24Rounds {
        .               #[inline]
-- line 377 ----------------------------------------

6,705,040 ( 0.16%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/hash/sip.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/server.rs
--------------------------------------------------------------------------------
Ir                 

-- line 28 ----------------------------------------
        .                   (type SourceFile: 'static + Clone;);
        .               (type MultiSpan) =>
        .                   (type MultiSpan: 'static;);
        .               (type Diagnostic) =>
        .                   (type Diagnostic: 'static;);
        .               (type Span) =>
        .                   (type Span: 'static + Copy + Eq + Hash;);
        .               (fn drop(&mut self, $arg:ident: $arg_ty:ty)) =>
   64,026 ( 0.00%)          (fn drop(&mut self, $arg: $arg_ty) { mem::drop($arg) });
        .               (fn clone(&mut self, $arg:ident: $arg_ty:ty) -> $ret_ty:ty) =>
    6,284 ( 0.00%)          (fn clone(&mut self, $arg: $arg_ty) -> $ret_ty { $arg.clone() });
        .               ($($item:tt)*) => ($($item)*;)
        .           }
        .           
        .           macro_rules! declare_server_traits {
        .               ($($name:ident {
        .                   $(fn $method:ident($($arg:ident: $arg_ty:ty),* $(,)?) $(-> $ret_ty:ty)?;)*
        .               }),* $(,)?) => {
        .                   pub trait Types {
-- line 46 ----------------------------------------
-- line 63 ----------------------------------------
        .               ($($name:ident {
        .                   $(fn $method:ident($($arg:ident: $arg_ty:ty),* $(,)?) $(-> $ret_ty:ty)?;)*
        .               }),* $(,)?) => {
        .                   impl<S: Types> Types for MarkedTypes<S> {
        .                       $(type $name = Marked<S::$name, client::$name>;)*
        .                   }
        .           
        .                   $(impl<S: $name> $name for MarkedTypes<S> {
    2,166 ( 0.00%)              $(fn $method(&mut self, $($arg: $arg_ty),*) $(-> $ret_ty)? {
2,252,861 ( 0.05%)                  <_>::mark($name::$method(&mut self.0, $($arg.unmark()),*))
    2,166 ( 0.00%)              })*
        .                   })*
        .               }
        .           }
        .           with_api!(Self, self_, define_mark_types_impls);
        .           
        .           struct Dispatcher<S: Types> {
        .               handle_store: HandleStore<S>,
        .               server: S,
-- line 81 ----------------------------------------
-- line 89 ----------------------------------------
        .                   pub trait DispatcherTrait {
        .                       // HACK(eddyb) these are here to allow `Self::$name` to work below.
        .                       $(type $name;)*
        .                       fn dispatch(&mut self, b: Buffer<u8>) -> Buffer<u8>;
        .                   }
        .           
        .                   impl<S: Server> DispatcherTrait for Dispatcher<MarkedTypes<S>> {
        .                       $(type $name = <MarkedTypes<S> as Types>::$name;)*
5,891,470 ( 0.14%)              fn dispatch(&mut self, mut b: Buffer<u8>) -> Buffer<u8> {
        .                           let Dispatcher { handle_store, server } = self;
        .           
1,767,441 ( 0.04%)                  let mut reader = &b[..];
4,124,029 ( 0.10%)                  match api_tags::Method::decode(&mut reader, &mut ()) {
2,840,439 ( 0.07%)                      $(api_tags::Method::$name(m) => match m {
        .                                   $(api_tags::$name::$method => {
        .                                       let mut call_method = || {
1,795,643 ( 0.04%)                                  reverse_decode!(reader, handle_store; $($arg: $arg_ty),*);
    1,083 ( 0.00%)                                  $name::$method(server, $($arg),*)
        .                                       };
        .                                       // HACK(eddyb) don't use `panic::catch_unwind` in a panic.
        .                                       // If client and server happen to use the same `libstd`,
        .                                       // `catch_unwind` asserts that the panic counter was 0,
        .                                       // even when the closure passed to it didn't panic.
        .                                       let r = if thread::panicking() {
        .                                           Ok(call_method())
        .                                       } else {
2,621,966 ( 0.06%)                                  panic::catch_unwind(panic::AssertUnwindSafe(call_method))
        .                                               .map_err(PanicMessage::from)
        .                                       };
        .           
        .                                       b.clear();
6,505,201 ( 0.15%)                              r.encode(&mut b, handle_store);
        .                                   })*
        .                               }),*
        .                           }
3,534,882 ( 0.08%)                  b
5,302,323 ( 0.12%)              }
        .                   }
        .               }
        .           }
        .           with_api!(Self, self_, define_dispatcher_impl);
        .           
        .           pub trait ExecutionStrategy {
        .               fn run_bridge_and_client<D: Copy + Send + 'static>(
        .                   &self,
-- line 133 ----------------------------------------
-- line 145 ----------------------------------------
        .               fn run_bridge_and_client<D: Copy + Send + 'static>(
        .                   &self,
        .                   dispatcher: &mut impl DispatcherTrait,
        .                   input: Buffer<u8>,
        .                   run_client: extern "C" fn(Bridge<'_>, D) -> Buffer<u8>,
        .                   client_data: D,
        .                   force_show_panics: bool,
        .               ) -> Buffer<u8> {
5,302,382 ( 0.12%)          let mut dispatch = |b| dispatcher.dispatch(b);
        .           
      590 ( 0.00%)          run_client(
      649 ( 0.00%)              Bridge { cached_buffer: input, dispatch: (&mut dispatch).into(), force_show_panics },
        .                       client_data,
        .                   )
        .               }
        .           }
        .           
        .           // NOTE(eddyb) Two implementations are provided, the second one is a bit
        .           // faster but neither is anywhere near as fast as same-thread execution.
        .           
-- line 164 ----------------------------------------
-- line 263 ----------------------------------------
        .                       *state.lock().unwrap() = State::Res(b);
        .                       join_handle.thread().unpark();
        .                   }
        .           
        .                   join_handle.join().unwrap()
        .               }
        .           }
        .           
      767 ( 0.00%)  fn run_server<
        .               S: Server,
        .               I: Encode<HandleStore<MarkedTypes<S>>>,
        .               O: for<'a, 's> DecodeMut<'a, 's, HandleStore<MarkedTypes<S>>>,
        .               D: Copy + Send + 'static,
        .           >(
        .               strategy: &impl ExecutionStrategy,
        .               handle_counters: &'static client::HandleCounters,
        .               server: S,
        .               input: I,
        .               run_client: extern "C" fn(Bridge<'_>, D) -> Buffer<u8>,
        .               client_data: D,
        .               force_show_panics: bool,
        .           ) -> Result<O, PanicMessage> {
        .               let mut dispatcher =
    1,003 ( 0.00%)          Dispatcher { handle_store: HandleStore::new(handle_counters), server: MarkedTypes(server) };
        .           
        .               let mut b = Buffer::new();
      177 ( 0.00%)      input.encode(&mut b, &mut dispatcher.handle_store);
        .           
      354 ( 0.00%)      b = strategy.run_bridge_and_client(
        .                   &mut dispatcher,
        .                   b,
        .                   run_client,
        .                   client_data,
        .                   force_show_panics,
        .               );
        .           
      295 ( 0.00%)      Result::decode(&mut &b[..], &mut dispatcher.handle_store)
      590 ( 0.00%)  }
        .           
        .           impl client::Client<fn(crate::TokenStream) -> crate::TokenStream> {
        .               pub fn run<S: Server>(
        .                   &self,
        .                   strategy: &impl ExecutionStrategy,
        .                   server: S,
        .                   input: S::TokenStream,
        .                   force_show_panics: bool,
        .               ) -> Result<S::TokenStream, PanicMessage> {
      118 ( 0.00%)          let client::Client { get_handle_counters, run, f } = *self;
      649 ( 0.00%)          run_server(
        .                       strategy,
       59 ( 0.00%)              get_handle_counters(),
      590 ( 0.00%)              server,
        .                       <MarkedTypes<S> as Types>::TokenStream::mark(input),
        .                       run,
        .                       f,
        .                       force_show_panics,
        .                   )
        .                   .map(<MarkedTypes<S> as Types>::TokenStream::unmark)
        .               }
        .           }
-- line 322 ----------------------------------------

1,345,775 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/server.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/traits/iterator.rs
--------------------------------------------------------------------------------
Ir                 

-- line 152 ----------------------------------------
        .               /// // an infinite iterator has no upper bound
        .               /// // and the maximum possible lower bound
        .               /// let iter = 0..;
        .               ///
        .               /// assert_eq!((usize::MAX, None), iter.size_hint());
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        6 ( 0.00%)      fn size_hint(&self) -> (usize, Option<usize>) {
       12 ( 0.00%)          (0, None)
        4 ( 0.00%)      }
        .           
        .               /// Consumes the iterator, counting the number of iterations and returning it.
        .               ///
        .               /// This method will call [`next`] repeatedly until [`None`] is encountered,
        .               /// returning the number of times it saw [`Some`]. Note that [`next`] has to be
        .               /// called at least once even if the iterator does not have any elements.
        .               ///
        .               /// [`next`]: Iterator::next
-- line 170 ----------------------------------------
-- line 193 ----------------------------------------
        .               /// assert_eq!(a.iter().count(), 5);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               fn count(self) -> usize
        .               where
        .                   Self: Sized,
        .               {
    7,985 ( 0.00%)          self.fold(
        .                       0,
        .                       #[rustc_inherit_overflow_checks]
   20,818 ( 0.00%)              |count, _| count + 1,
        .                   )
        .               }
        .           
        .               /// Consumes the iterator, returning the last element.
        .               ///
        .               /// This method will evaluate the iterator until it returns [`None`]. While
        .               /// doing so, it keeps track of the current element. After [`None`] is
        .               /// returned, `last()` will then return the last element it saw.
-- line 212 ----------------------------------------
-- line 267 ----------------------------------------
        .               /// assert_eq!(iter.next(), Some(&3));
        .               /// assert_eq!(iter.advance_by(0), Ok(()));
        .               /// assert_eq!(iter.advance_by(100), Err(1)); // only `&4` was skipped
        .               /// ```
        .               #[inline]
        .               #[unstable(feature = "iter_advance_by", reason = "recently added", issue = "77404")]
        .               fn advance_by(&mut self, n: usize) -> Result<(), usize> {
        .                   for i in 0..n {
    2,535 ( 0.00%)              self.next().ok_or(i)?;
        .                   }
        .                   Ok(())
        .               }
        .           
        .               /// Returns the `n`th element of the iterator.
        .               ///
        .               /// Like most indexing operations, the count starts from zero, so `nth(0)`
        .               /// returns the first value, `nth(1)` the second, and so on.
-- line 283 ----------------------------------------
-- line 313 ----------------------------------------
        .               /// Returning `None` if there are less than `n + 1` elements:
        .               ///
        .               /// ```
        .               /// let a = [1, 2, 3];
        .               /// assert_eq!(a.iter().nth(10), None);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
      104 ( 0.00%)      fn nth(&mut self, n: usize) -> Option<Self::Item> {
        .                   self.advance_by(n).ok()?;
    4,256 ( 0.00%)          self.next()
        .               }
        .           
        .               /// Creates an iterator starting at the same point, but stepping by
        .               /// the given amount at each iteration.
        .               ///
        .               /// Note 1: The first element of the iterator will always be returned,
        .               /// regardless of the step given.
        .               ///
-- line 331 ----------------------------------------
-- line 436 ----------------------------------------
        .               ///     s.encode_wide().chain(std::iter::once(0)).collect()
        .               /// }
        .               /// ```
        .               ///
        .               /// [`once`]: crate::iter::once
        .               /// [`OsStr`]: ../../std/ffi/struct.OsStr.html
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
  119,604 ( 0.00%)      fn chain<U>(self, other: U) -> Chain<Self, U::IntoIter>
        .               where
        .                   Self: Sized,
        .                   U: IntoIterator<Item = Self::Item>,
        .               {
  444,344 ( 0.01%)          Chain::new(self, other.into_iter())
   39,868 ( 0.00%)      }
        .           
        .               /// 'Zips up' two iterators into a single iterator of pairs.
        .               ///
        .               /// `zip()` returns a new iterator that will iterate over two other
        .               /// iterators, returning a tuple where the first element comes from the
        .               /// first iterator, and the second element comes from the second iterator.
        .               ///
        .               /// In other words, it zips two iterators together, into a single one.
-- line 458 ----------------------------------------
-- line 550 ----------------------------------------
        .               /// # assert_eq!(zipped.next(), None);
        .               /// ```
        .               ///
        .               /// [`enumerate`]: Iterator::enumerate
        .               /// [`next`]: Iterator::next
        .               /// [`zip`]: crate::iter::zip
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
      705 ( 0.00%)      fn zip<U>(self, other: U) -> Zip<Self, U::IntoIter>
        .               where
        .                   Self: Sized,
        .                   U: IntoIterator,
        .               {
    1,501 ( 0.00%)          Zip::new(self, other.into_iter())
       94 ( 0.00%)      }
        .           
        .               /// Creates a new iterator which places a copy of `separator` between adjacent
        .               /// items of the original iterator.
        .               ///
        .               /// In case `separator` does not implement [`Clone`] or needs to be
        .               /// computed every time, use [`intersperse_with`].
        .               ///
        .               /// # Examples
-- line 572 ----------------------------------------
-- line 709 ----------------------------------------
        .               ///
        .               /// // Instead, use for:
        .               /// for x in 0..5 {
        .               ///     println!("{}", x);
        .               /// }
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
   93,251 ( 0.00%)      fn map<B, F>(self, f: F) -> Map<Self, F>
        .               where
        .                   Self: Sized,
        .                   F: FnMut(Self::Item) -> B,
        .               {
  400,065 ( 0.01%)          Map::new(self, f)
   61,916 ( 0.00%)      }
        .           
        .               /// Calls a closure on each element of an iterator.
        .               ///
        .               /// This is equivalent to using a [`for`] loop on the iterator, although
        .               /// `break` and `continue` are not possible from a closure. It's generally
        .               /// more idiomatic to use a `for` loop, but `for_each` may be more legible
        .               /// when processing items at the end of longer iterator chains. In some
        .               /// cases `for_each` may also be faster than a loop, because it will use
-- line 731 ----------------------------------------
-- line 754 ----------------------------------------
        .               /// ```
        .               /// (0..5).flat_map(|x| x * 100 .. x * 110)
        .               ///       .enumerate()
        .               ///       .filter(|&(i, x)| (i + x) % 3 == 0)
        .               ///       .for_each(|(i, x)| println!("{}:{}", i, x));
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "iterator_for_each", since = "1.21.0")]
  107,688 ( 0.00%)      fn for_each<F>(self, f: F)
        .               where
        .                   Self: Sized,
        .                   F: FnMut(Self::Item),
        .               {
        .                   #[inline]
   43,314 ( 0.00%)          fn call<T>(mut f: impl FnMut(T)) -> impl FnMut((), T) {
1,349,364 ( 0.03%)              move |(), item| f(item)
   64,713 ( 0.00%)          }
        .           
3,025,036 ( 0.07%)          self.fold((), call(f));
   43,830 ( 0.00%)      }
        .           
        .               /// Creates an iterator which uses a closure to determine if an element
        .               /// should be yielded.
        .               ///
        .               /// Given an element the closure must return `true` or `false`. The returned
        .               /// iterator will yield only the elements for which the closure returns
        .               /// true.
        .               ///
-- line 781 ----------------------------------------
-- line 834 ----------------------------------------
        .               /// Note that `iter.filter(f).next()` is equivalent to `iter.find(f)`.
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               fn filter<P>(self, predicate: P) -> Filter<Self, P>
        .               where
        .                   Self: Sized,
        .                   P: FnMut(&Self::Item) -> bool,
        .               {
   34,973 ( 0.00%)          Filter::new(self, predicate)
        .               }
        .           
        .               /// Creates an iterator that both filters and maps.
        .               ///
        .               /// The returned iterator yields only the `value`s for which the supplied
        .               /// closure returns `Some(value)`.
        .               ///
        .               /// `filter_map` can be used to make chains of [`filter`] and [`map`] more
-- line 850 ----------------------------------------
-- line 879 ----------------------------------------
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               fn filter_map<B, F>(self, f: F) -> FilterMap<Self, F>
        .               where
        .                   Self: Sized,
        .                   F: FnMut(Self::Item) -> Option<B>,
        .               {
   15,564 ( 0.00%)          FilterMap::new(self, f)
        .               }
        .           
        .               /// Creates an iterator which gives the current iteration count as well as
        .               /// the next value.
        .               ///
        .               /// The iterator returned yields pairs `(i, val)`, where `i` is the
        .               /// current index of iteration and `val` is the value returned by the
        .               /// iterator.
-- line 895 ----------------------------------------
-- line 920 ----------------------------------------
        .               ///
        .               /// assert_eq!(iter.next(), Some((0, &'a')));
        .               /// assert_eq!(iter.next(), Some((1, &'b')));
        .               /// assert_eq!(iter.next(), Some((2, &'c')));
        .               /// assert_eq!(iter.next(), None);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
  126,376 ( 0.00%)      fn enumerate(self) -> Enumerate<Self>
        .               where
        .                   Self: Sized,
        .               {
   25,717 ( 0.00%)          Enumerate::new(self)
   50,588 ( 0.00%)      }
        .           
        .               /// Creates an iterator which can use the [`peek`] and [`peek_mut`] methods
        .               /// to look at the next element of the iterator without consuming it. See
        .               /// their documentation for more information.
        .               ///
        .               /// Note that the underlying iterator is still advanced when [`peek`] or
        .               /// [`peek_mut`] are called for the first time: In order to retrieve the
        .               /// next element, [`next`] is called on the underlying iterator, hence any
-- line 941 ----------------------------------------
-- line 995 ----------------------------------------
        .               /// [`peek_mut`]: Peekable::peek_mut
        .               /// [`next`]: Iterator::next
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               fn peekable(self) -> Peekable<Self>
        .               where
        .                   Self: Sized,
        .               {
       17 ( 0.00%)          Peekable::new(self)
        .               }
        .           
        .               /// Creates an iterator that [`skip`]s elements based on a predicate.
        .               ///
        .               /// [`skip`]: Iterator::skip
        .               ///
        .               /// `skip_while()` takes a closure as an argument. It will call this
        .               /// closure on each element of the iterator, and ignore elements
-- line 1011 ----------------------------------------
-- line 1309 ----------------------------------------
        .               /// let v = [1, 2];
        .               /// let mut iter = v.into_iter().take(5);
        .               /// assert_eq!(iter.next(), Some(1));
        .               /// assert_eq!(iter.next(), Some(2));
        .               /// assert_eq!(iter.next(), None);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
   25,376 ( 0.00%)      fn take(self, n: usize) -> Take<Self>
        .               where
        .                   Self: Sized,
        .               {
   50,752 ( 0.00%)          Take::new(self, n)
   12,688 ( 0.00%)      }
        .           
        .               /// An iterator adapter similar to [`fold`] that holds internal state and
        .               /// produces a new iterator.
        .               ///
        .               /// [`fold`]: Iterator::fold
        .               ///
        .               /// `scan()` takes two arguments: an initial value which seeds the internal
        .               /// state, and a closure with two arguments, the first being a mutable
-- line 1330 ----------------------------------------
-- line 1393 ----------------------------------------
        .               /// // chars() returns an iterator
        .               /// let merged: String = words.iter()
        .               ///                           .flat_map(|s| s.chars())
        .               ///                           .collect();
        .               /// assert_eq!(merged, "alphabetagamma");
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
    2,994 ( 0.00%)      fn flat_map<U, F>(self, f: F) -> FlatMap<Self, U, F>
        .               where
        .                   Self: Sized,
        .                   U: IntoIterator,
        .                   F: FnMut(Self::Item) -> U,
        .               {
    2,519 ( 0.00%)          FlatMap::new(self, f)
    1,478 ( 0.00%)      }
        .           
        .               /// Creates an iterator that flattens nested structure.
        .               ///
        .               /// This is useful when you have an iterator of iterators or an iterator of
        .               /// things that can be turned into iterators and you want to remove one
        .               /// level of indirection.
        .               ///
        .               /// # Examples
-- line 1416 ----------------------------------------
-- line 1533 ----------------------------------------
        .               ///
        .               /// // it will always return `None` after the first time.
        .               /// assert_eq!(iter.next(), None);
        .               /// assert_eq!(iter.next(), None);
        .               /// assert_eq!(iter.next(), None);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
    2,796 ( 0.00%)      fn fuse(self) -> Fuse<Self>
        .               where
        .                   Self: Sized,
        .               {
   17,784 ( 0.00%)          Fuse::new(self)
    1,864 ( 0.00%)      }
        .           
        .               /// Does something with each element of an iterator, passing the value on.
        .               ///
        .               /// When using iterators, you'll often chain several of them together.
        .               /// While working on such code, you might want to check out what's
        .               /// happening at various parts in the pipeline. To do that, insert
        .               /// a call to `inspect()`.
        .               ///
-- line 1554 ----------------------------------------
-- line 1765 ----------------------------------------
        .               /// ```
        .               ///
        .               /// [`iter`]: Iterator::next
        .               /// [`String`]: ../../std/string/struct.String.html
        .               /// [`char`]: type@char
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[must_use = "if you really need to exhaust the iterator, consider `.for_each(drop)` instead"]
   55,902 ( 0.00%)      fn collect<B: FromIterator<Self::Item>>(self) -> B
        .               where
        .                   Self: Sized,
        .               {
  287,166 ( 0.01%)          FromIterator::from_iter(self)
   77,328 ( 0.00%)      }
        .           
        .               /// Consumes an iterator, creating two collections from it.
        .               ///
        .               /// The predicate passed to `partition()` can return `true`, or `false`.
        .               /// `partition()` returns a pair, all of the elements for which it returned
        .               /// `true`, and all of the elements for which it returned `false`.
        .               ///
        .               /// See also [`is_partitioned()`] and [`partition_in_place()`].
-- line 1786 ----------------------------------------
-- line 1798 ----------------------------------------
        .               /// let (even, odd): (Vec<i32>, Vec<i32>) = a
        .               ///     .iter()
        .               ///     .partition(|&n| n % 2 == 0);
        .               ///
        .               /// assert_eq!(even, vec![2]);
        .               /// assert_eq!(odd, vec![1, 3]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
      856 ( 0.00%)      fn partition<B, F>(self, f: F) -> (B, B)
        .               where
        .                   Self: Sized,
        .                   B: Default + Extend<Self::Item>,
        .                   F: FnMut(&Self::Item) -> bool,
        .               {
        .                   #[inline]
        .                   fn extend<'a, T, B: Extend<T>>(
        .                       mut f: impl FnMut(&T) -> bool + 'a,
        .                       left: &'a mut B,
        .                       right: &'a mut B,
        .                   ) -> impl FnMut((), T) + 'a {
        .                       move |(), x| {
       53 ( 0.00%)                  if f(&x) {
        .                               left.extend_one(x);
        .                           } else {
        .                               right.extend_one(x);
        .                           }
        .                       }
        .                   }
        .           
        .                   let mut left: B = Default::default();
        .                   let mut right: B = Default::default();
        .           
        4 ( 0.00%)          self.fold((), extend(f, &mut left, &mut right));
        .           
    1,280 ( 0.00%)          (left, right)
      963 ( 0.00%)      }
        .           
        .               /// Reorders the elements of this iterator *in-place* according to the given predicate,
        .               /// such that all those that return `true` precede all those that return `false`.
        .               /// Returns the number of `true` elements found.
        .               ///
        .               /// The relative order of partitioned items is not maintained.
        .               ///
        .               /// # Current implementation
-- line 1841 ----------------------------------------
-- line 2011 ----------------------------------------
        .               ///     } else {
        .               ///         ControlFlow::Break(prev)
        .               ///     }
        .               /// });
        .               /// assert_eq!(triangular, ControlFlow::Continue(435));
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "iterator_try_fold", since = "1.27.0")]
   11,824 ( 0.00%)      fn try_fold<B, F, R>(&mut self, init: B, mut f: F) -> R
        .               where
        .                   Self: Sized,
        .                   F: FnMut(B, Self::Item) -> R,
        .                   R: Try<Output = B>,
        .               {
    5,693 ( 0.00%)          let mut accum = init;
2,862,861 ( 0.07%)          while let Some(x) = self.next() {
3,713,398 ( 0.09%)              accum = f(accum, x)?;
        .                   }
    6,565 ( 0.00%)          try { accum }
    9,673 ( 0.00%)      }
        .           
        .               /// An iterator method that applies a fallible function to each item in the
        .               /// iterator, stopping at the first error and returning that error.
        .               ///
        .               /// This can also be thought of as the fallible form of [`for_each()`]
        .               /// or as the stateless version of [`try_fold()`].
        .               ///
        .               /// [`for_each()`]: Iterator::for_each
-- line 2038 ----------------------------------------
-- line 2077 ----------------------------------------
        .               fn try_for_each<F, R>(&mut self, f: F) -> R
        .               where
        .                   Self: Sized,
        .                   F: FnMut(Self::Item) -> R,
        .                   R: Try<Output = ()>,
        .               {
        .                   #[inline]
        .                   fn call<T, R>(mut f: impl FnMut(T) -> R) -> impl FnMut((), T) -> R {
    7,710 ( 0.00%)              move |(), x| f(x)
        .                   }
        .           
      526 ( 0.00%)          self.try_fold((), call(f))
        .               }
        .           
        .               /// Folds every element into an accumulator by applying an operation,
        .               /// returning the final result.
        .               ///
        .               /// `fold()` takes two arguments: an initial value, and a closure with two
        .               /// arguments: an 'accumulator', and an element. The closure returns the value that
        .               /// the accumulator should have for the next iteration.
-- line 2096 ----------------------------------------
-- line 2188 ----------------------------------------
        .               /// // they're the same
        .               /// assert_eq!(result, result2);
        .               /// ```
        .               ///
        .               /// [`reduce()`]: Iterator::reduce
        .               #[doc(alias = "inject", alias = "foldl")]
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
  176,095 ( 0.00%)      fn fold<B, F>(mut self, init: B, mut f: F) -> B
        .               where
        .                   Self: Sized,
        .                   F: FnMut(B, Self::Item) -> B,
        .               {
   91,775 ( 0.00%)          let mut accum = init;
3,890,373 ( 0.09%)          while let Some(x) = self.next() {
1,508,705 ( 0.04%)              accum = f(accum, x);
        .                   }
   42,442 ( 0.00%)          accum
  201,659 ( 0.00%)      }
        .           
        .               /// Reduces the elements to a single one, by repeatedly applying a reducing
        .               /// operation.
        .               ///
        .               /// If the iterator is empty, returns [`None`]; otherwise, returns the
        .               /// result of the reduction.
        .               ///
        .               /// The reducing function is a closure with two arguments: an 'accumulator', and an element.
-- line 2214 ----------------------------------------
-- line 2234 ----------------------------------------
        .               /// let a = [10, 20, 5, -23, 0];
        .               /// let b: [u32; 0] = [];
        .               ///
        .               /// assert_eq!(find_max(a.iter()), Some(&20));
        .               /// assert_eq!(find_max(b.iter()), None);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "iterator_fold_self", since = "1.51.0")]
    1,379 ( 0.00%)      fn reduce<F>(mut self, f: F) -> Option<Self::Item>
        .               where
        .                   Self: Sized,
        .                   F: FnMut(Self::Item, Self::Item) -> Self::Item,
        .               {
   11,060 ( 0.00%)          let first = self.next()?;
   17,742 ( 0.00%)          Some(self.fold(first, f))
    2,772 ( 0.00%)      }
        .           
        .               /// Reduces the elements to a single one by repeatedly applying a reducing operation. If the
        .               /// closure returns a failure, the failure is propagated back to the caller immediately.
        .               ///
        .               /// The return type of this method depends on the return type of the closure. If the closure
        .               /// returns `Result<Self::Item, E>`, then this function will return `Result<Option<Self::Item>,
        .               /// E>`. If the closure returns `Option<Self::Item>`, then this function will return
        .               /// `Option<Option<Self::Item>>`.
-- line 2257 ----------------------------------------
-- line 2370 ----------------------------------------
        .               fn all<F>(&mut self, f: F) -> bool
        .               where
        .                   Self: Sized,
        .                   F: FnMut(Self::Item) -> bool,
        .               {
        .                   #[inline]
        .                   fn check<T>(mut f: impl FnMut(T) -> bool) -> impl FnMut((), T) -> ControlFlow<()> {
        .                       move |(), x| {
    7,844 ( 0.00%)                  if f(x) { ControlFlow::CONTINUE } else { ControlFlow::BREAK }
        .                       }
        .                   }
    7,193 ( 0.00%)          self.try_fold((), check(f)) == ControlFlow::CONTINUE
        .               }
        .           
        .               /// Tests if any element of the iterator matches a predicate.
        .               ///
        .               /// `any()` takes a closure that returns `true` or `false`. It applies
        .               /// this closure to each element of the iterator, and if any of them return
        .               /// `true`, then so does `any()`. If they all return `false`, it
        .               /// returns `false`.
-- line 2389 ----------------------------------------
-- line 2423 ----------------------------------------
        .               fn any<F>(&mut self, f: F) -> bool
        .               where
        .                   Self: Sized,
        .                   F: FnMut(Self::Item) -> bool,
        .               {
        .                   #[inline]
        .                   fn check<T>(mut f: impl FnMut(T) -> bool) -> impl FnMut((), T) -> ControlFlow<()> {
        .                       move |(), x| {
       12 ( 0.00%)                  if f(x) { ControlFlow::BREAK } else { ControlFlow::CONTINUE }
        .                       }
        .                   }
        .           
        .                   self.try_fold((), check(f)) == ControlFlow::BREAK
        .               }
        .           
        .               /// Searches for an element of an iterator that satisfies a predicate.
        .               ///
-- line 2439 ----------------------------------------
-- line 2475 ----------------------------------------
        .               ///
        .               /// // we can still use `iter`, as there are more elements.
        .               /// assert_eq!(iter.next(), Some(&3));
        .               /// ```
        .               ///
        .               /// Note that `iter.find(f)` is equivalent to `iter.filter(f).next()`.
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
    1,221 ( 0.00%)      fn find<P>(&mut self, predicate: P) -> Option<Self::Item>
        .               where
        .                   Self: Sized,
        .                   P: FnMut(&Self::Item) -> bool,
        .               {
        .                   #[inline]
        .                   fn check<T>(mut predicate: impl FnMut(&T) -> bool) -> impl FnMut((), T) -> ControlFlow<T> {
    1,562 ( 0.00%)              move |(), x| {
   76,403 ( 0.00%)                  if predicate(&x) { ControlFlow::Break(x) } else { ControlFlow::CONTINUE }
      808 ( 0.00%)              }
      247 ( 0.00%)          }
        .           
   92,871 ( 0.00%)          self.try_fold((), check(predicate)).break_value()
      494 ( 0.00%)      }
        .           
        .               /// Applies function to the elements of iterator and returns
        .               /// the first non-none result.
        .               ///
        .               /// `iter.find_map(f)` is equivalent to `iter.filter_map(f).next()`.
        .               ///
        .               /// # Examples
        .               ///
-- line 2504 ----------------------------------------
-- line 2513 ----------------------------------------
        .               #[stable(feature = "iterator_find_map", since = "1.30.0")]
        .               fn find_map<B, F>(&mut self, f: F) -> Option<B>
        .               where
        .                   Self: Sized,
        .                   F: FnMut(Self::Item) -> Option<B>,
        .               {
        .                   #[inline]
        .                   fn check<T, B>(mut f: impl FnMut(T) -> Option<B>) -> impl FnMut((), T) -> ControlFlow<B> {
   98,838 ( 0.00%)              move |(), x| match f(x) {
   29,882 ( 0.00%)                  Some(x) => ControlFlow::Break(x),
        .                           None => ControlFlow::CONTINUE,
        .                       }
        .                   }
        .           
      117 ( 0.00%)          self.try_fold((), check(f)).break_value()
        .               }
        .           
        .               /// Applies function to the elements of iterator and returns
        .               /// the first true result or the first error.
        .               ///
        .               /// The return type of this method depends on the return type of the closure.
        .               /// If you return `Result<bool, E>` from the closure, you'll get a `Result<Option<Self::Item>; E>`.
        .               /// If you return `Option<bool>` from the closure, you'll get an `Option<Option<Self::Item>>`.
-- line 2535 ----------------------------------------
-- line 2655 ----------------------------------------
        .                   P: FnMut(Self::Item) -> bool,
        .               {
        .                   #[inline]
        .                   fn check<T>(
        .                       mut predicate: impl FnMut(T) -> bool,
        .                   ) -> impl FnMut(usize, T) -> ControlFlow<usize, usize> {
        .                       #[rustc_inherit_overflow_checks]
        .                       move |i, x| {
        6 ( 0.00%)                  if predicate(x) { ControlFlow::Break(i) } else { ControlFlow::Continue(i + 1) }
        .                       }
        .                   }
        .           
        .                   self.try_fold(0, check(predicate)).break_value()
        .               }
        .           
        .               /// Searches for an element in an iterator from the right, returning its
        .               /// index.
-- line 2671 ----------------------------------------
-- line 2752 ----------------------------------------
        .               /// let a = [1, 2, 3];
        .               /// let b: Vec<u32> = Vec::new();
        .               ///
        .               /// assert_eq!(a.iter().max(), Some(&3));
        .               /// assert_eq!(b.iter().max(), None);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
      579 ( 0.00%)      fn max(self) -> Option<Self::Item>
        .               where
        .                   Self: Sized,
        .                   Self::Item: Ord,
        .               {
      386 ( 0.00%)          self.max_by(Ord::cmp)
      386 ( 0.00%)      }
        .           
        .               /// Returns the minimum element of an iterator.
        .               ///
        .               /// If several elements are equally minimum, the first element is returned.
        .               /// If the iterator is empty, [`None`] is returned.
        .               ///
        .               /// Note that [`f32`]/[`f64`] doesn't implement [`Ord`] due to NaN being
        .               /// incomparable. You can work around this by using [`Iterator::reduce`]:
-- line 2774 ----------------------------------------
-- line 2790 ----------------------------------------
        .               /// let a = [1, 2, 3];
        .               /// let b: Vec<u32> = Vec::new();
        .               ///
        .               /// assert_eq!(a.iter().min(), Some(&1));
        .               /// assert_eq!(b.iter().min(), None);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
      400 ( 0.00%)      fn min(self) -> Option<Self::Item>
        .               where
        .                   Self: Sized,
        .                   Self::Item: Ord,
        .               {
    4,800 ( 0.00%)          self.min_by(Ord::cmp)
      800 ( 0.00%)      }
        .           
        .               /// Returns the element that gives the maximum value from the
        .               /// specified function.
        .               ///
        .               /// If several elements are equally maximum, the last element is
        .               /// returned. If the iterator is empty, [`None`] is returned.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let a = [-3_i32, 0, 1, 5, -10];
        .               /// assert_eq!(*a.iter().max_by_key(|x| x.abs()).unwrap(), -10);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "iter_cmp_by_key", since = "1.6.0")]
        7 ( 0.00%)      fn max_by_key<B: Ord, F>(self, f: F) -> Option<Self::Item>
        .               where
        .                   Self: Sized,
        .                   F: FnMut(&Self::Item) -> B,
        .               {
        .                   #[inline]
        .                   fn key<T, B>(mut f: impl FnMut(&T) -> B) -> impl FnMut(T) -> (B, T) {
       24 ( 0.00%)              move |x| (f(&x), x)
        .                   }
        .           
        .                   #[inline]
        .                   fn compare<T, B: Ord>((x_p, _): &(B, T), (y_p, _): &(B, T)) -> Ordering {
        .                       x_p.cmp(y_p)
        .                   }
        .           
       39 ( 0.00%)          let (_, x) = self.map(key(f)).max_by(compare)?;
        .                   Some(x)
        8 ( 0.00%)      }
        .           
        .               /// Returns the element that gives the maximum value with respect to the
        .               /// specified comparison function.
        .               ///
        .               /// If several elements are equally maximum, the last element is
        .               /// returned. If the iterator is empty, [`None`] is returned.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let a = [-3_i32, 0, 1, 5, -10];
        .               /// assert_eq!(*a.iter().max_by(|x, y| x.cmp(y)).unwrap(), 5);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "iter_max_by", since = "1.15.0")]
      965 ( 0.00%)      fn max_by<F>(self, compare: F) -> Option<Self::Item>
        .               where
        .                   Self: Sized,
        .                   F: FnMut(&Self::Item, &Self::Item) -> Ordering,
        .               {
        .                   #[inline]
        .                   fn fold<T>(mut compare: impl FnMut(&T, &T) -> Ordering) -> impl FnMut(T, T) -> T {
       91 ( 0.00%)              move |x, y| cmp::max_by(x, y, &mut compare)
      193 ( 0.00%)          }
        .           
   13,623 ( 0.00%)          self.reduce(fold(compare))
      386 ( 0.00%)      }
        .           
        .               /// Returns the element that gives the minimum value from the
        .               /// specified function.
        .               ///
        .               /// If several elements are equally minimum, the first element is
        .               /// returned. If the iterator is empty, [`None`] is returned.
        .               ///
        .               /// # Examples
-- line 2872 ----------------------------------------
-- line 2905 ----------------------------------------
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let a = [-3_i32, 0, 1, 5, -10];
        .               /// assert_eq!(*a.iter().min_by(|x, y| x.cmp(y)).unwrap(), -10);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "iter_min_by", since = "1.15.0")]
      400 ( 0.00%)      fn min_by<F>(self, compare: F) -> Option<Self::Item>
        .               where
        .                   Self: Sized,
        .                   F: FnMut(&Self::Item, &Self::Item) -> Ordering,
        .               {
        .                   #[inline]
        .                   fn fold<T>(mut compare: impl FnMut(&T, &T) -> Ordering) -> impl FnMut(T, T) -> T {
        .                       move |x, y| cmp::min_by(x, y, &mut compare)
      400 ( 0.00%)          }
        .           
    6,000 ( 0.00%)          self.reduce(fold(compare))
      800 ( 0.00%)      }
        .           
        .               /// Reverses an iterator's direction.
        .               ///
        .               /// Usually, iterators iterate from left to right. After using `rev()`,
        .               /// an iterator will instead iterate from right to left.
        .               ///
        .               /// This is only possible if the iterator has an end, so `rev()` only
        .               /// works on [`DoubleEndedIterator`]s.
-- line 2932 ----------------------------------------
-- line 2942 ----------------------------------------
        .               /// assert_eq!(iter.next(), Some(&2));
        .               /// assert_eq!(iter.next(), Some(&1));
        .               ///
        .               /// assert_eq!(iter.next(), None);
        .               /// ```
        .               #[inline]
        .               #[doc(alias = "reverse")]
        .               #[stable(feature = "rust1", since = "1.0.0")]
      474 ( 0.00%)      fn rev(self) -> Rev<Self>
        .               where
        .                   Self: Sized + DoubleEndedIterator,
        .               {
      487 ( 0.00%)          Rev::new(self)
      316 ( 0.00%)      }
        .           
        .               /// Converts an iterator of pairs into a pair of containers.
        .               ///
        .               /// `unzip()` consumes an entire iterator of pairs, producing two
        .               /// collections: one from the left elements of the pairs, and one
        .               /// from the right elements.
        .               ///
        .               /// This function is, in some sense, the opposite of [`zip`].
-- line 2963 ----------------------------------------
-- line 2987 ----------------------------------------
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               fn unzip<A, B, FromA, FromB>(self) -> (FromA, FromB)
        .               where
        .                   FromA: Default + Extend<A>,
        .                   FromB: Default + Extend<B>,
        .                   Self: Sized + Iterator<Item = (A, B)>,
        .               {
        .                   let mut unzipped: (FromA, FromB) = Default::default();
    1,207 ( 0.00%)          unzipped.extend(self);
        .                   unzipped
        .               }
        .           
        .               /// Creates an iterator which copies all of its elements.
        .               ///
        .               /// This is useful when you have an iterator over `&T`, but you need an
        .               /// iterator over `T`.
        .               ///
-- line 3003 ----------------------------------------
-- line 3017 ----------------------------------------
        .               /// assert_eq!(v_map, vec![1, 2, 3]);
        .               /// ```
        .               #[stable(feature = "iter_copied", since = "1.36.0")]
        .               fn copied<'a, T: 'a>(self) -> Copied<Self>
        .               where
        .                   Self: Sized + Iterator<Item = &'a T>,
        .                   T: Copy,
        .               {
   27,975 ( 0.00%)          Copied::new(self)
        .               }
        .           
        .               /// Creates an iterator which [`clone`]s all of its elements.
        .               ///
        .               /// This is useful when you have an iterator over `&T`, but you need an
        .               /// iterator over `T`.
        .               ///
        .               /// [`clone`]: Clone::clone
-- line 3033 ----------------------------------------
-- line 3048 ----------------------------------------
        .               /// assert_eq!(v_map, vec![1, 2, 3]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               fn cloned<'a, T: 'a>(self) -> Cloned<Self>
        .               where
        .                   Self: Sized + Iterator<Item = &'a T>,
        .                   T: Clone,
        .               {
  107,652 ( 0.00%)          Cloned::new(self)
        .               }
        .           
        .               /// Repeats an iterator endlessly.
        .               ///
        .               /// Instead of stopping at [`None`], the iterator will instead start again,
        .               /// from the beginning. After iterating again, it will start at the
        .               /// beginning again. And again. And again. Forever. Note that in case the
        .               /// original iterator is empty, the resulting iterator will also be empty.
-- line 3064 ----------------------------------------
-- line 3313 ----------------------------------------
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// assert_eq!([1].iter().eq([1].iter()), true);
        .               /// assert_eq!([1].iter().eq([1, 2].iter()), false);
        .               /// ```
        .               #[stable(feature = "iter_order", since = "1.5.0")]
        7 ( 0.00%)      fn eq<I>(self, other: I) -> bool
        .               where
        .                   I: IntoIterator,
        .                   Self::Item: PartialEq<I::Item>,
        .                   Self: Sized,
        .               {
        8 ( 0.00%)          self.eq_by(other, |x, y| x == y)
        8 ( 0.00%)      }
        .           
        .               /// Determines if the elements of this [`Iterator`] are equal to those of
        .               /// another with respect to the specified equality function.
        .               ///
        .               /// # Examples
        .               ///
        .               /// Basic usage:
        .               ///
-- line 3336 ----------------------------------------
-- line 3344 ----------------------------------------
        .               /// ```
        .               #[unstable(feature = "iter_order_by", issue = "64295")]
        .               fn eq_by<I, F>(mut self, other: I, mut eq: F) -> bool
        .               where
        .                   Self: Sized,
        .                   I: IntoIterator,
        .                   F: FnMut(Self::Item, I::Item) -> bool,
        .               {
       10 ( 0.00%)          let mut other = other.into_iter();
        .           
        .                   loop {
        3 ( 0.00%)              let x = match self.next() {
        .                           None => return other.next().is_none(),
       11 ( 0.00%)                  Some(val) => val,
        .                       };
        .           
        3 ( 0.00%)              let y = match other.next() {
        .                           None => return false,
        .                           Some(val) => val,
        .                       };
        .           
        .                       if !eq(x, y) {
        .                           return false;
        .                       }
        .                   }
-- line 3368 ----------------------------------------
-- line 3589 ----------------------------------------
        .                   unreachable!("Always specialized");
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<I: Iterator + ?Sized> Iterator for &mut I {
        .               type Item = I::Item;
        .               #[inline]
       44 ( 0.00%)      fn next(&mut self) -> Option<I::Item> {
   92,575 ( 0.00%)          (**self).next()
       66 ( 0.00%)      }
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   (**self).size_hint()
        .               }
        .               fn advance_by(&mut self, n: usize) -> Result<(), usize> {
        .                   (**self).advance_by(n)
        .               }
        .               fn nth(&mut self, n: usize) -> Option<Self::Item> {
        .                   (**self).nth(n)
-- line 3607 ----------------------------------------

1,420,506 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/traits/iterator.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/client.rs
--------------------------------------------------------------------------------
Ir                 

-- line 18 ----------------------------------------
        .                       // FIXME(eddyb) use a reference to the `static COUNTERS`, instead of
        .                       // a wrapper `fn` pointer, once `const fn` can reference `static`s.
        .                       extern "C" fn get() -> &'static Self {
        .                           static COUNTERS: HandleCounters = HandleCounters {
        .                               $($oty: AtomicUsize::new(1),)*
        .                               $($ity: AtomicUsize::new(1),)*
        .                           };
        .                           &COUNTERS
      118 ( 0.00%)              }
        .                   }
        .           
        .                   // FIXME(eddyb) generate the definition of `HandleStore` in `server.rs`.
        .                   #[repr(C)]
        .                   #[allow(non_snake_case)]
        .                   pub(super) struct HandleStore<S: server::Types> {
        .                       $($oty: handle::OwnedStore<S::$oty>,)*
        .                       $($ity: handle::InternedStore<S::$ity>,)*
        .                   }
        .           
        .                   impl<S: server::Types> HandleStore<S> {
      354 ( 0.00%)              pub(super) fn new(handle_counters: &'static HandleCounters) -> Self {
    3,481 ( 0.00%)                  HandleStore {
        .                               $($oty: handle::OwnedStore::new(&handle_counters.$oty),)*
        .                               $($ity: handle::InternedStore::new(&handle_counters.$ity),)*
        .                           }
      472 ( 0.00%)              }
        .                   }
        .           
        .                   $(
        .                       #[repr(C)]
        .                       pub(crate) struct $oty(handle::Handle);
        .                       impl !Send for $oty {}
        .                       impl !Sync for $oty {}
        .           
        .                       // Forward `Drop::drop` to the inherent `drop` method.
        .                       impl Drop for $oty {
    9,084 ( 0.00%)                  fn drop(&mut self) {
   59,861 ( 0.00%)                      $oty(self.0).drop();
   13,626 ( 0.00%)                  }
        .                       }
        .           
        .                       impl<S> Encode<S> for $oty {
      472 ( 0.00%)                  fn encode(self, w: &mut Writer, s: &mut S) {
      177 ( 0.00%)                      let handle = self.0;
      236 ( 0.00%)                      mem::forget(self);
       59 ( 0.00%)                      handle.encode(w, s);
      118 ( 0.00%)                  }
        .                       }
        .           
        .                       impl<S: server::Types> DecodeMut<'_, '_, HandleStore<server::MarkedTypes<S>>>
        .                           for Marked<S::$oty, $oty>
        .                       {
  463,617 ( 0.01%)                  fn decode(r: &mut Reader<'_>, s: &mut HandleStore<server::MarkedTypes<S>>) -> Self {
        .                               s.$oty.take(handle::Handle::decode(r, &mut ()))
  618,156 ( 0.01%)                  }
        .                       }
        .           
        .                       impl<S> Encode<S> for &$oty {
        .                           fn encode(self, w: &mut Writer, s: &mut S) {
  121,086 ( 0.00%)                      self.0.encode(w, s);
        .                           }
        .                       }
        .           
        .                       impl<'s, S: server::Types> Decode<'_, 's, HandleStore<server::MarkedTypes<S>>>
        .                           for &'s Marked<S::$oty, $oty>
        .                       {
   40,362 ( 0.00%)                  fn decode(r: &mut Reader<'_>, s: &'s HandleStore<server::MarkedTypes<S>>) -> Self {
        .                               &s.$oty[handle::Handle::decode(r, &mut ())]
   80,724 ( 0.00%)                  }
        .                       }
        .           
        .                       impl<S> Encode<S> for &mut $oty {
        .                           fn encode(self, w: &mut Writer, s: &mut S) {
  357,561 ( 0.01%)                      self.0.encode(w, s);
        .                           }
        .                       }
        .           
        .                       impl<'s, S: server::Types> DecodeMut<'_, 's, HandleStore<server::MarkedTypes<S>>>
        .                           for &'s mut Marked<S::$oty, $oty>
        .                       {
  119,187 ( 0.00%)                  fn decode(
        .                               r: &mut Reader<'_>,
        .                               s: &'s mut HandleStore<server::MarkedTypes<S>>
        .                           ) -> Self {
        .                               &mut s.$oty[handle::Handle::decode(r, &mut ())]
  238,374 ( 0.01%)                  }
        .                       }
        .           
        .                       impl<S: server::Types> Encode<HandleStore<server::MarkedTypes<S>>>
        .                           for Marked<S::$oty, $oty>
        .                       {
  946,656 ( 0.02%)                  fn encode(self, w: &mut Writer, s: &mut HandleStore<server::MarkedTypes<S>>) {
  184,144 ( 0.00%)                      s.$oty.alloc(self).encode(w, s);
        .                           }
        .                       }
        .           
        .                       impl<S> DecodeMut<'_, '_, S> for $oty {
      177 ( 0.00%)                  fn decode(r: &mut Reader<'_>, s: &mut S) -> Self {
      177 ( 0.00%)                      $oty(handle::Handle::decode(r, s))
      177 ( 0.00%)                  }
        .                       }
        .                   )*
        .           
        .                   $(
        .                       #[repr(C)]
  232,498 ( 0.01%)              #[derive(Copy, Clone, PartialEq, Eq, Hash)]
        .                       pub(crate) struct $ity(handle::Handle);
        .                       impl !Send for $ity {}
        .                       impl !Sync for $ity {}
        .           
        .                       impl<S> Encode<S> for $ity {
        .                           fn encode(self, w: &mut Writer, s: &mut S) {
        .                               self.0.encode(w, s);
        .                           }
        .                       }
        .           
        .                       impl<S: server::Types> DecodeMut<'_, '_, HandleStore<server::MarkedTypes<S>>>
        .                           for Marked<S::$ity, $ity>
        .                       {
  124,918 ( 0.00%)                  fn decode(r: &mut Reader<'_>, s: &mut HandleStore<server::MarkedTypes<S>>) -> Self {
        .                               s.$ity.copy(handle::Handle::decode(r, &mut ()))
  249,836 ( 0.01%)                  }
        .                       }
        .           
        .                       impl<S: server::Types> Encode<HandleStore<server::MarkedTypes<S>>>
        .                           for Marked<S::$ity, $ity>
        .                       {
        .                           fn encode(self, w: &mut Writer, s: &mut HandleStore<server::MarkedTypes<S>>) {
1,079,984 ( 0.03%)                      s.$ity.alloc(self).encode(w, s);
        .                           }
        .                       }
        .           
        .                       impl<S> DecodeMut<'_, '_, S> for $ity {
        .                           fn decode(r: &mut Reader<'_>, s: &mut S) -> Self {
        .                               $ity(handle::Handle::decode(r, s))
        .                           }
        .                       }
-- line 154 ----------------------------------------
-- line 175 ----------------------------------------
        .           
        .           // FIXME(eddyb) generate these impls by pattern-matching on the
        .           // names of methods - also could use the presence of `fn drop`
        .           // to distinguish between 'owned and 'interned, above.
        .           // Alternatively, special 'modes" could be listed of types in with_api
        .           // instead of pattern matching on methods, here and in server decl.
        .           
        .           impl Clone for TokenStream {
   18,852 ( 0.00%)      fn clone(&self) -> Self {
        .                   self.clone()
   18,852 ( 0.00%)      }
        .           }
        .           
        .           impl Clone for TokenStreamIter {
        .               fn clone(&self) -> Self {
        .                   self.clone()
        .               }
        .           }
        .           
        .           impl Clone for Group {
    8,298 ( 0.00%)      fn clone(&self) -> Self {
        .                   self.clone()
    8,298 ( 0.00%)      }
        .           }
        .           
        .           impl Clone for Literal {
    8,292 ( 0.00%)      fn clone(&self) -> Self {
        .                   self.clone()
    8,292 ( 0.00%)      }
        .           }
        .           
        .           impl fmt::Debug for Literal {
        .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   f.debug_struct("Literal")
        .                       // format the kind without quotes, as in `kind: Float`
        .                       .field("kind", &format_args!("{}", &self.debug_kind()))
        .                       .field("symbol", &self.symbol())
-- line 211 ----------------------------------------
-- line 228 ----------------------------------------
        .               }
        .           }
        .           
        .           macro_rules! define_client_side {
        .               ($($name:ident {
        .                   $(fn $method:ident($($arg:ident: $arg_ty:ty),* $(,)?) $(-> $ret_ty:ty)*;)*
        .               }),* $(,)?) => {
        .                   $(impl $name {
  604,278 ( 0.01%)              $(pub(crate) fn $method($($arg: $arg_ty),*) $(-> $ret_ty)* {
  308,937 ( 0.01%)                  Bridge::with(|bridge| {
        .                               let mut b = bridge.cached_buffer.take();
        .           
        .                               b.clear();
1,767,441 ( 0.04%)                      api_tags::Method::$name(api_tags::$name::$method).encode(&mut b, &mut ());
  451,382 ( 0.01%)                      reverse_encode!(b; $($arg),*);
        .           
3,534,882 ( 0.08%)                      b = bridge.dispatch.call(b);
        .           
2,477,627 ( 0.06%)                      let r = Result::<_, PanicMessage>::decode(&mut &b[..], &mut ());
        .           
7,069,764 ( 0.17%)                      bridge.cached_buffer = b;
        .           
  898,204 ( 0.02%)                      r.unwrap_or_else(|e| panic::resume_unwind(e.into()))
        .                           })
  503,565 ( 0.01%)              })*
        .                   })*
        .               }
        .           }
        .           with_api!(self, self, define_client_side);
        .           
        .           enum BridgeState<'a> {
        .               /// No server is currently connected to this client.
        .               NotConnected,
-- line 260 ----------------------------------------
-- line 270 ----------------------------------------
        .           enum BridgeStateL {}
        .           
        .           impl<'a> scoped_cell::ApplyL<'a> for BridgeStateL {
        .               type Out = BridgeState<'a>;
        .           }
        .           
        .           thread_local! {
        .               static BRIDGE_STATE: scoped_cell::ScopedCell<BridgeStateL> =
        3 ( 0.00%)          scoped_cell::ScopedCell::new(BridgeState::NotConnected);
        .           }
        .           
        .           impl BridgeState<'_> {
        .               /// Take exclusive control of the thread-local
        .               /// `BridgeState`, and pass it to `f`, mutably.
        .               /// The state will be restored after `f` exits, even
        .               /// by panic, including modifications made to it by `f`.
        .               ///
        .               /// N.B., while `f` is running, the thread-local state
        .               /// is `BridgeState::InUse`.
  361,175 ( 0.01%)      fn with<R>(f: impl FnOnce(&mut BridgeState<'_>) -> R) -> R {
  280,712 ( 0.01%)          BRIDGE_STATE.with(|state| {
3,180,293 ( 0.07%)              state.replace(BridgeState::InUse, |mut state| {
        .                           // FIXME(#52812) pass `f` directly to `replace` when `RefMutL` is gone
    1,416 ( 0.00%)                  f(&mut *state)
      236 ( 0.00%)              })
      236 ( 0.00%)          })
  310,339 ( 0.01%)      }
        .           }
        .           
        .           impl Bridge<'_> {
        .               pub(crate) fn is_available() -> bool {
        3 ( 0.00%)          BridgeState::with(|state| match state {
        .                       BridgeState::Connected(_) | BridgeState::InUse => true,
        .                       BridgeState::NotConnected => false,
        .                   })
        .               }
        .           
      354 ( 0.00%)      fn enter<R>(self, f: impl FnOnce() -> R) -> R {
      413 ( 0.00%)          let force_show_panics = self.force_show_panics;
        .                   // Hide the default panic output within `proc_macro` expansions.
        .                   // NB. the server can't do this because it may use a different libstd.
        .                   static HIDE_PANICS_DURING_EXPANSION: Once = Once::new();
      297 ( 0.00%)          HIDE_PANICS_DURING_EXPANSION.call_once(|| {
        7 ( 0.00%)              panic::update_hook(move |prev, info| {
        .                           let show = BridgeState::with(|state| match state {
        .                               BridgeState::NotConnected => true,
        .                               BridgeState::Connected(_) | BridgeState::InUse => force_show_panics,
        .                           });
        .                           if show {
        .                               prev(info)
        .                           }
        .                       });
        2 ( 0.00%)          });
        .           
    2,183 ( 0.00%)          BRIDGE_STATE.with(|state| state.set(BridgeState::Connected(self), f))
      118 ( 0.00%)      }
        .           
      295 ( 0.00%)      fn with<R>(f: impl FnOnce(&mut Bridge<'_>) -> R) -> R {
4,177,461 ( 0.10%)          BridgeState::with(|state| match state {
        .                       BridgeState::NotConnected => {
        .                           panic!("procedural macro API is used outside of a procedural macro");
        .                       }
        .                       BridgeState::InUse => {
        .                           panic!("procedural macro API is used while it's already in use");
        .                       }
      767 ( 0.00%)              BridgeState::Connected(bridge) => f(bridge),
      236 ( 0.00%)          })
      236 ( 0.00%)      }
        .           }
        .           
        .           /// A client-side "global object" (usually a function pointer),
        .           /// which may be using a different `proc_macro` from the one
        .           /// used by the server, but can be interacted with compatibly.
        .           ///
        .           /// N.B., `F` must have FFI-friendly memory layout (e.g., a pointer).
        .           /// The call ABI of function pointers used for `F` doesn't
-- line 345 ----------------------------------------
-- line 353 ----------------------------------------
        .               pub(super) get_handle_counters: extern "C" fn() -> &'static HandleCounters,
        .               pub(super) run: extern "C" fn(Bridge<'_>, F) -> Buffer<u8>,
        .               pub(super) f: F,
        .           }
        .           
        .           /// Client-side helper for handling client panics, entering the bridge,
        .           /// deserializing input and serializing output.
        .           // FIXME(eddyb) maybe replace `Bridge::enter` with this?
      413 ( 0.00%)  fn run_client<A: for<'a, 's> DecodeMut<'a, 's, ()>, R: Encode<()>>(
        .               mut bridge: Bridge<'_>,
        .               f: impl FnOnce(A) -> R,
        .           ) -> Buffer<u8> {
        .               // The initial `cached_buffer` contains the input.
      354 ( 0.00%)      let mut b = bridge.cached_buffer.take();
        .           
    2,124 ( 0.00%)      panic::catch_unwind(panic::AssertUnwindSafe(|| {
      885 ( 0.00%)          bridge.enter(|| {
    1,121 ( 0.00%)              let reader = &mut &b[..];
      413 ( 0.00%)              let input = A::decode(reader, &mut ());
        .           
        .                       // Put the `cached_buffer` back in the `Bridge`, for requests.
    1,180 ( 0.00%)              Bridge::with(|bridge| bridge.cached_buffer = b.take());
        .           
      944 ( 0.00%)              let output = f(input);
        .           
        .                       // Take the `cached_buffer` back out, for the output value.
    1,121 ( 0.00%)              b = Bridge::with(|bridge| bridge.cached_buffer.take());
        .           
        .                       // HACK(eddyb) Separate encoding a success value (`Ok(output)`)
        .                       // from encoding a panic (`Err(e: PanicMessage)`) to avoid
        .                       // having handles outside the `bridge.enter(|| ...)` scope, and
        .                       // to catch panics that could happen while encoding the success.
        .                       //
        .                       // Note that panics should be impossible beyond this point, but
        .                       // this is defensively trying to avoid any accidental panicking
        .                       // reaching the `extern "C"` (which should `abort` but might not
        .                       // at the moment, so this is also potentially preventing UB).
      177 ( 0.00%)              b.clear();
      590 ( 0.00%)              Ok::<_, ()>(output).encode(&mut b, &mut ());
      236 ( 0.00%)          })
      118 ( 0.00%)      }))
        .               .map_err(PanicMessage::from)
       59 ( 0.00%)      .unwrap_or_else(|e| {
        .                   b.clear();
        .                   Err::<(), _>(e).encode(&mut b, &mut ());
        .               });
        .               b
      118 ( 0.00%)  }
        .           
        .           impl Client<fn(crate::TokenStream) -> crate::TokenStream> {
        .               #[rustc_allow_const_fn_unstable(const_fn)]
        1 ( 0.00%)      pub const fn expand1(f: fn(crate::TokenStream) -> crate::TokenStream) -> Self {
      413 ( 0.00%)          extern "C" fn run(
        .                       bridge: Bridge<'_>,
        .                       f: impl FnOnce(crate::TokenStream) -> crate::TokenStream,
        .                   ) -> Buffer<u8> {
    1,770 ( 0.00%)              run_client(bridge, |input| f(crate::TokenStream(input)).0)
      118 ( 0.00%)          }
        5 ( 0.00%)          Client { get_handle_counters: HandleCounters::get, run, f }
        1 ( 0.00%)      }
        .           }
        .           
        .           impl Client<fn(crate::TokenStream, crate::TokenStream) -> crate::TokenStream> {
        .               #[rustc_allow_const_fn_unstable(const_fn)]
        .               pub const fn expand2(
        .                   f: fn(crate::TokenStream, crate::TokenStream) -> crate::TokenStream,
        .               ) -> Self {
        .                   extern "C" fn run(
-- line 420 ----------------------------------------

1,503,772 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/client.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs
--------------------------------------------------------------------------------
Ir                 

-- line 84 ----------------------------------------
        .           pub struct SessionGlobals {
        .               symbol_interner: symbol::Interner,
        .               span_interner: Lock<span_encoding::SpanInterner>,
        .               hygiene_data: Lock<hygiene::HygieneData>,
        .               source_map: Lock<Option<Lrc<SourceMap>>>,
        .           }
        .           
        .           impl SessionGlobals {
       12 ( 0.00%)      pub fn new(edition: Edition) -> SessionGlobals {
       50 ( 0.00%)          SessionGlobals {
        2 ( 0.00%)              symbol_interner: symbol::Interner::fresh(),
        .                       span_interner: Lock::new(span_encoding::SpanInterner::default()),
        6 ( 0.00%)              hygiene_data: Lock::new(hygiene::HygieneData::new(edition)),
        .                       source_map: Lock::new(None),
        .                   }
       10 ( 0.00%)      }
        .           }
        .           
        .           #[inline]
        .           pub fn create_session_globals_then<R>(edition: Edition, f: impl FnOnce() -> R) -> R {
        1 ( 0.00%)      assert!(
        .                   !SESSION_GLOBALS.is_set(),
        .                   "SESSION_GLOBALS should never be overwritten! \
        .                    Use another thread if you need another SessionGlobals"
        .               );
        3 ( 0.00%)      let session_globals = SessionGlobals::new(edition);
        7 ( 0.00%)      SESSION_GLOBALS.set(&session_globals, f)
        1 ( 0.00%)  }
        .           
        .           #[inline]
        .           pub fn set_session_globals_then<R>(session_globals: &SessionGlobals, f: impl FnOnce() -> R) -> R {
        .               assert!(
        .                   !SESSION_GLOBALS.is_set(),
        .                   "SESSION_GLOBALS should never be overwritten! \
        .                    Use another thread if you need another SessionGlobals"
        .               );
-- line 119 ----------------------------------------
-- line 120 ----------------------------------------
        .               SESSION_GLOBALS.set(session_globals, f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_default_session_if_not_set_then<R, F>(f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
        4 ( 0.00%)      create_session_if_not_set_then(edition::DEFAULT_EDITION, f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_session_if_not_set_then<R, F>(edition: Edition, f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
        1 ( 0.00%)      if !SESSION_GLOBALS.is_set() {
        3 ( 0.00%)          let session_globals = SessionGlobals::new(edition);
       11 ( 0.00%)          SESSION_GLOBALS.set(&session_globals, || SESSION_GLOBALS.with(f))
        1 ( 0.00%)      } else {
        .                   SESSION_GLOBALS.with(f)
        .               }
        .           }
        .           
        .           #[inline]
        .           pub fn with_session_globals<R, F>(f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
1,341,920 ( 0.03%)      SESSION_GLOBALS.with(f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_default_session_globals_then<R>(f: impl FnOnce() -> R) -> R {
        .               create_session_globals_then(edition::DEFAULT_EDITION, f)
        .           }
        .           
        .           // If this ever becomes non thread-local, `decode_syntax_context`
        .           // and `decode_expn_id` will need to be updated to handle concurrent
        .           // deserialization.
        .           scoped_tls::scoped_thread_local!(static SESSION_GLOBALS: SessionGlobals);
        .           
        .           // FIXME: We should use this enum or something like it to get rid of the
        .           // use of magic `/rust/1.x/...` paths across the board.
       21 ( 0.00%)  #[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd)]
    1,086 ( 0.00%)  #[derive(Decodable)]
        .           pub enum RealFileName {
        .               LocalPath(PathBuf),
        .               /// For remapped paths (namely paths into libstd that have been mapped
        .               /// to the appropriate spot on the local host's file system, and local file
        .               /// system paths that have been remapped with `FilePathMapping`),
        .               Remapped {
        .                   /// `local_path` is the (host-dependent) local path to the file. This is
        .                   /// None if the file was imported from another crate
-- line 173 ----------------------------------------
-- line 179 ----------------------------------------
        .           }
        .           
        .           impl Hash for RealFileName {
        .               fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
        .                   // To prevent #70924 from happening again we should only hash the
        .                   // remapped (virtualized) path if that exists. This is because
        .                   // virtualized paths to sysroot crates (/rust/$hash or /rust/$version)
        .                   // remain stable even if the corresponding local_path changes
    2,778 ( 0.00%)          self.remapped_path_if_available().hash(state)
        .               }
        .           }
        .           
        .           // This is functionally identical to #[derive(Encodable)], with the exception of
        .           // an added assert statement
        .           impl<S: Encoder> Encodable<S> for RealFileName {
        .               fn encode(&self, encoder: &mut S) -> Result<(), S::Error> {
        6 ( 0.00%)          encoder.emit_enum(|encoder| match *self {
        .                       RealFileName::LocalPath(ref local_path) => {
       24 ( 0.00%)                  encoder.emit_enum_variant("LocalPath", 0, 1, |encoder| {
        .                               encoder.emit_enum_variant_arg(true, |encoder| local_path.encode(encoder))?;
        .                               Ok(())
        .                           })
        .                       }
        .           
        .                       RealFileName::Remapped { ref local_path, ref virtual_name } => encoder
        .                           .emit_enum_variant("Remapped", 1, 2, |encoder| {
        .                               // For privacy and build reproducibility, we must not embed host-dependant path in artifacts
-- line 205 ----------------------------------------
-- line 213 ----------------------------------------
        .               }
        .           }
        .           
        .           impl RealFileName {
        .               /// Returns the path suitable for reading from the file system on the local host,
        .               /// if this information exists.
        .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
        .               pub fn local_path(&self) -> Option<&Path> {
        2 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(p) => Some(p),
        .                       RealFileName::Remapped { local_path: p, virtual_name: _ } => {
        .                           p.as_ref().map(PathBuf::as_path)
        .                       }
        .                   }
        .               }
        .           
        .               /// Returns the path suitable for reading from the file system on the local host,
        .               /// if this information exists.
        .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
        6 ( 0.00%)      pub fn into_local_path(self) -> Option<PathBuf> {
        6 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(p) => Some(p),
        .                       RealFileName::Remapped { local_path: p, virtual_name: _ } => p,
        .                   }
        9 ( 0.00%)      }
        .           
        .               /// Returns the path suitable for embedding into build artifacts. This would still
        .               /// be a local path if it has not been remapped. A remapped path will not correspond
        .               /// to a valid file system path: see `local_path_if_available()` for something that
        .               /// is more likely to return paths into the local host file system.
        .               pub fn remapped_path_if_available(&self) -> &Path {
    2,212 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(p)
        .                       | RealFileName::Remapped { local_path: _, virtual_name: p } => &p,
        .                   }
        4 ( 0.00%)      }
        .           
        .               /// Returns the path suitable for reading from the file system on the local host,
        .               /// if this information exists. Otherwise returns the remapped name.
        .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
        .               pub fn local_path_if_available(&self) -> &Path {
        3 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(path)
        .                       | RealFileName::Remapped { local_path: None, virtual_name: path }
        .                       | RealFileName::Remapped { local_path: Some(path), virtual_name: _ } => path,
        .                   }
        .               }
        .           
        .               pub fn to_string_lossy(&self, display_pref: FileNameDisplayPreference) -> Cow<'_, str> {
        3 ( 0.00%)          match display_pref {
        .                       FileNameDisplayPreference::Local => self.local_path_if_available().to_string_lossy(),
        .                       FileNameDisplayPreference::Remapped => {
        .                           self.remapped_path_if_available().to_string_lossy()
        .                       }
        .                   }
        .               }
        .           }
        .           
        .           /// Differentiates between real files and common virtual files.
   20,156 ( 0.00%)  #[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd, Hash)]
    6,590 ( 0.00%)  #[derive(Decodable, Encodable)]
        .           pub enum FileName {
        .               Real(RealFileName),
        .               /// Call to `quote!`.
        2 ( 0.00%)      QuoteExpansion(u64),
        .               /// Command line.
        .               Anon(u64),
        .               /// Hack in `src/librustc_ast/parse.rs`.
        .               // FIXME(jseyfried)
        .               MacroExpansion(u64),
      361 ( 0.00%)      ProcMacroSourceCode(u64),
        .               /// Strings provided as `--cfg [cfgspec]` stored in a `crate_cfg`.
        .               CfgSpec(u64),
        .               /// Strings provided as crate attributes in the CLI.
        .               CliCrateAttr(u64),
        .               /// Custom sources for explicit parser calls from plugins and drivers.
        .               Custom(String),
        .               DocTest(PathBuf, isize),
        .               /// Post-substitution inline assembly from LLVM.
        .               InlineAsm(u64),
        .           }
        .           
        .           impl From<PathBuf> for FileName {
       21 ( 0.00%)      fn from(p: PathBuf) -> Self {
        6 ( 0.00%)          assert!(!p.to_string_lossy().ends_with('>'));
       18 ( 0.00%)          FileName::Real(RealFileName::LocalPath(p))
       21 ( 0.00%)      }
        .           }
        .           
        2 ( 0.00%)  #[derive(Clone, Copy, Eq, PartialEq, Hash, Debug)]
        .           pub enum FileNameDisplayPreference {
        .               Remapped,
        .               Local,
        .           }
        .           
        .           pub struct FileNameDisplay<'a> {
        .               inner: &'a FileName,
        .               display_pref: FileNameDisplayPreference,
        .           }
        .           
        .           impl fmt::Display for FileNameDisplay<'_> {
       12 ( 0.00%)      fn fmt(&self, fmt: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        .                   use FileName::*;
       18 ( 0.00%)          match *self.inner {
        .                       Real(ref name) => {
       18 ( 0.00%)                  write!(fmt, "{}", name.to_string_lossy(self.display_pref))
        .                       }
        .                       QuoteExpansion(_) => write!(fmt, "<quote expansion>"),
        .                       MacroExpansion(_) => write!(fmt, "<macro expansion>"),
        .                       Anon(_) => write!(fmt, "<anon>"),
        .                       ProcMacroSourceCode(_) => write!(fmt, "<proc-macro source code>"),
        .                       CfgSpec(_) => write!(fmt, "<cfgspec>"),
        .                       CliCrateAttr(_) => write!(fmt, "<crate attribute>"),
        .                       Custom(ref s) => write!(fmt, "<{}>", s),
        .                       DocTest(ref path, _) => write!(fmt, "{}", path.display()),
        .                       InlineAsm(_) => write!(fmt, "<inline asm>"),
        .                   }
       15 ( 0.00%)      }
        .           }
        .           
        .           impl FileNameDisplay<'_> {
        .               pub fn to_string_lossy(&self) -> Cow<'_, str> {
        .                   match self.inner {
        .                       FileName::Real(ref inner) => inner.to_string_lossy(self.display_pref),
        .                       _ => Cow::from(format!("{}", self)),
        .                   }
        .               }
        .           }
        .           
        .           impl FileName {
        .               pub fn is_real(&self) -> bool {
        .                   use FileName::*;
    1,138 ( 0.00%)          match *self {
        .                       Real(_) => true,
        .                       Anon(_)
        .                       | MacroExpansion(_)
        .                       | ProcMacroSourceCode(_)
        .                       | CfgSpec(_)
        .                       | CliCrateAttr(_)
        .                       | Custom(_)
        .                       | QuoteExpansion(_)
-- line 353 ----------------------------------------
-- line 357 ----------------------------------------
        .               }
        .           
        .               pub fn prefer_remapped(&self) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref: FileNameDisplayPreference::Remapped }
        .               }
        .           
        .               // This may include transient local filesystem information.
        .               // Must not be embedded in build outputs.
        3 ( 0.00%)      pub fn prefer_local(&self) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref: FileNameDisplayPreference::Local }
        6 ( 0.00%)      }
        .           
        .               pub fn display(&self, display_pref: FileNameDisplayPreference) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref }
        .               }
        .           
        .               pub fn macro_expansion_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
-- line 375 ----------------------------------------
-- line 377 ----------------------------------------
        .               }
        .           
        .               pub fn anon_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
        .                   FileName::Anon(hasher.finish())
        .               }
        .           
    1,805 ( 0.00%)      pub fn proc_macro_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
      722 ( 0.00%)          FileName::ProcMacroSourceCode(hasher.finish())
    1,805 ( 0.00%)      }
        .           
       10 ( 0.00%)      pub fn cfg_spec_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
        4 ( 0.00%)          FileName::QuoteExpansion(hasher.finish())
       10 ( 0.00%)      }
        .           
        .               pub fn cli_crate_attr_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
        .                   FileName::CliCrateAttr(hasher.finish())
        .               }
        .           
        .               pub fn doc_test_source_code(path: PathBuf, line: isize) -> FileName {
-- line 403 ----------------------------------------
-- line 423 ----------------------------------------
        .           /// that the length of the span is equal to `span.hi - span.lo`; there may be space in the
        .           /// [`BytePos`] range between files.
        .           ///
        .           /// `SpanData` is public because `Span` uses a thread-local interner and can't be
        .           /// sent to other threads, but some pieces of performance infra run in a separate thread.
        .           /// Using `Span` is generally preferred.
        .           #[derive(Clone, Copy, Hash, PartialEq, Eq)]
        .           pub struct SpanData {
        4 ( 0.00%)      pub lo: BytePos,
        4 ( 0.00%)      pub hi: BytePos,
        .               /// Information about where the macro came from, if this piece of
        .               /// code was created by a macro expansion.
       12 ( 0.00%)      pub ctxt: SyntaxContext,
        4 ( 0.00%)      pub parent: Option<LocalDefId>,
        .           }
        .           
        .           // Order spans by position in the file.
        .           impl Ord for SpanData {
        .               fn cmp(&self, other: &Self) -> Ordering {
        .                   let SpanData {
        .                       lo: s_lo,
        .                       hi: s_hi,
-- line 444 ----------------------------------------
-- line 485 ----------------------------------------
        .               }
        .               #[inline]
        .               pub fn with_parent(&self, parent: Option<LocalDefId>) -> Span {
        .                   Span::new(self.lo, self.hi, self.ctxt, parent)
        .               }
        .               /// Returns `true` if this is a dummy span with any hygienic context.
        .               #[inline]
        .               pub fn is_dummy(self) -> bool {
  411,497 ( 0.01%)          self.lo.0 == 0 && self.hi.0 == 0
        .               }
        .               /// Returns `true` if `self` fully encloses `other`.
        .               pub fn contains(self, other: Self) -> bool {
    3,735 ( 0.00%)          self.lo <= other.lo && other.hi <= self.hi
        .               }
        .           }
        .           
        .           // The interner is pointed to by a thread local value which is only set on the main thread
        .           // with parallelization is disabled. So we don't allow `Span` to transfer between threads
        .           // to avoid panics and other errors, even though it would be memory safe to do so.
        .           #[cfg(not(parallel_compiler))]
        .           impl !Send for Span {}
        .           #[cfg(not(parallel_compiler))]
        .           impl !Sync for Span {}
        .           
        .           impl PartialOrd for Span {
   31,624 ( 0.00%)      fn partial_cmp(&self, rhs: &Self) -> Option<Ordering> {
   23,718 ( 0.00%)          PartialOrd::partial_cmp(&self.data(), &rhs.data())
   31,624 ( 0.00%)      }
        .           }
        .           impl Ord for Span {
        .               fn cmp(&self, rhs: &Self) -> Ordering {
        .                   Ord::cmp(&self.data(), &rhs.data())
        .               }
        .           }
        .           
        .           /// A collection of `Span`s.
-- line 520 ----------------------------------------
-- line 532 ----------------------------------------
        .           }
        .           
        .           impl Span {
        .               #[inline]
        .               pub fn lo(self) -> BytePos {
        .                   self.data().lo
        .               }
        .               #[inline]
  137,520 ( 0.00%)      pub fn with_lo(self, lo: BytePos) -> Span {
        .                   self.data().with_lo(lo)
   91,680 ( 0.00%)      }
        .               #[inline]
    6,112 ( 0.00%)      pub fn hi(self) -> BytePos {
        .                   self.data().hi
    6,112 ( 0.00%)      }
        .               #[inline]
   34,677 ( 0.00%)      pub fn with_hi(self, hi: BytePos) -> Span {
        .                   self.data().with_hi(hi)
   23,118 ( 0.00%)      }
        .               #[inline]
        .               pub fn ctxt(self) -> SyntaxContext {
        .                   self.data_untracked().ctxt
        .               }
        .               #[inline]
   31,445 ( 0.00%)      pub fn with_ctxt(self, ctxt: SyntaxContext) -> Span {
        .                   self.data_untracked().with_ctxt(ctxt)
   18,867 ( 0.00%)      }
        .               #[inline]
        .               pub fn parent(self) -> Option<LocalDefId> {
        .                   self.data().parent
        .               }
        .               #[inline]
        .               pub fn with_parent(self, ctxt: Option<LocalDefId>) -> Span {
        .                   self.data().with_parent(ctxt)
        .               }
-- line 566 ----------------------------------------
-- line 568 ----------------------------------------
        .               /// Returns `true` if this is a dummy span with any hygienic context.
        .               #[inline]
        .               pub fn is_dummy(self) -> bool {
        .                   self.data_untracked().is_dummy()
        .               }
        .           
        .               /// Returns `true` if this span comes from a macro or desugaring.
        .               #[inline]
       33 ( 0.00%)      pub fn from_expansion(self) -> bool {
        .                   self.ctxt() != SyntaxContext::root()
       22 ( 0.00%)      }
        .           
        .               /// Returns `true` if `span` originates in a derive-macro's expansion.
        .               pub fn in_derive_expansion(self) -> bool {
        .                   matches!(self.ctxt().outer_expn_data().kind, ExpnKind::Macro(MacroKind::Derive, _))
        .               }
        .           
        .               /// Gate suggestions that would not be appropriate in a context the user didn't write.
        .               pub fn can_be_used_for_suggestions(self) -> bool {
-- line 586 ----------------------------------------
-- line 600 ----------------------------------------
        .               /// Returns a new span representing an empty span at the beginning of this span.
        .               #[inline]
        .               pub fn shrink_to_lo(self) -> Span {
        .                   let span = self.data_untracked();
        .                   span.with_hi(span.lo)
        .               }
        .               /// Returns a new span representing an empty span at the end of this span.
        .               #[inline]
      444 ( 0.00%)      pub fn shrink_to_hi(self) -> Span {
        .                   let span = self.data_untracked();
        .                   span.with_lo(span.hi)
      296 ( 0.00%)      }
        .           
        .               #[inline]
        .               /// Returns `true` if `hi == lo`.
        .               pub fn is_empty(self) -> bool {
        .                   let span = self.data_untracked();
        .                   span.hi == span.lo
        .               }
        .           
        .               /// Returns `self` if `self` is not the dummy span, and `other` otherwise.
        .               pub fn substitute_dummy(self, other: Span) -> Span {
        .                   if self.is_dummy() { other } else { self }
        .               }
        .           
        .               /// Returns `true` if `self` fully encloses `other`.
   11,205 ( 0.00%)      pub fn contains(self, other: Span) -> bool {
        .                   let span = self.data();
        .                   let other = other.data();
        .                   span.contains(other)
    7,470 ( 0.00%)      }
        .           
        .               /// Returns `true` if `self` touches `other`.
        .               pub fn overlaps(self, other: Span) -> bool {
        .                   let span = self.data();
        .                   let other = other.data();
        .                   span.lo < other.hi && other.lo < span.hi
        .               }
        .           
-- line 638 ----------------------------------------
-- line 650 ----------------------------------------
        .               pub fn trim_start(self, other: Span) -> Option<Span> {
        .                   let span = self.data();
        .                   let other = other.data();
        .                   if span.hi > other.hi { Some(span.with_lo(cmp::max(span.lo, other.hi))) } else { None }
        .               }
        .           
        .               /// Returns the source span -- this is either the supplied span, or the span for
        .               /// the macro callsite that expanded to it.
       20 ( 0.00%)      pub fn source_callsite(self) -> Span {
        .                   let expn_data = self.ctxt().outer_expn_data();
        8 ( 0.00%)          if !expn_data.is_root() { expn_data.call_site.source_callsite() } else { self }
       16 ( 0.00%)      }
        .           
        .               /// The `Span` for the tokens in the previous macro expansion from which `self` was generated,
        .               /// if any.
        .               pub fn parent_callsite(self) -> Option<Span> {
        .                   let expn_data = self.ctxt().outer_expn_data();
        .                   if !expn_data.is_root() { Some(expn_data.call_site) } else { None }
        .               }
        .           
        .               /// Walk down the expansion ancestors to find a span that's contained within `outer`.
    2,410 ( 0.00%)      pub fn find_ancestor_inside(mut self, outer: Span) -> Option<Span> {
    1,205 ( 0.00%)          while !outer.contains(self) {
        .                       self = self.parent_callsite()?;
        .                   }
        .                   Some(self)
    2,651 ( 0.00%)      }
        .           
        .               /// Edition of the crate from which this span came.
   45,726 ( 0.00%)      pub fn edition(self) -> edition::Edition {
        .                   self.ctxt().edition()
   30,484 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn rust_2015(self) -> bool {
    6,634 ( 0.00%)          self.edition() == edition::Edition::Edition2015
        .               }
        .           
        .               #[inline]
        .               pub fn rust_2018(self) -> bool {
    9,174 ( 0.00%)          self.edition() >= edition::Edition::Edition2018
        .               }
        .           
        .               #[inline]
        .               pub fn rust_2021(self) -> bool {
    4,648 ( 0.00%)          self.edition() >= edition::Edition::Edition2021
        .               }
        .           
        .               /// Returns the source callee.
        .               ///
        .               /// Returns `None` if the supplied span has no expansion trace,
        .               /// else returns the `ExpnData` for the macro definition
        .               /// corresponding to the source callsite.
        .               pub fn source_callee(self) -> Option<ExpnData> {
-- line 703 ----------------------------------------
-- line 707 ----------------------------------------
        .                   }
        .                   let expn_data = self.ctxt().outer_expn_data();
        .                   if !expn_data.is_root() { Some(source_callee(expn_data)) } else { None }
        .               }
        .           
        .               /// Checks if a span is "internal" to a macro in which `#[unstable]`
        .               /// items can be used (that is, a macro marked with
        .               /// `#[allow_internal_unstable]`).
      945 ( 0.00%)      pub fn allows_unstable(self, feature: Symbol) -> bool {
      189 ( 0.00%)          self.ctxt()
        .                       .outer_expn_data()
        .                       .allow_internal_unstable
        .                       .map_or(false, |features| features.iter().any(|&f| f == feature))
      756 ( 0.00%)      }
        .           
        .               /// Checks if this span arises from a compiler desugaring of kind `kind`.
   23,457 ( 0.00%)      pub fn is_desugaring(self, kind: DesugaringKind) -> bool {
   20,106 ( 0.00%)          match self.ctxt().outer_expn_data().kind {
        .                       ExpnKind::Desugaring(k) => k == kind,
        .                       _ => false,
        .                   }
   16,755 ( 0.00%)      }
        .           
        .               /// Returns the compiler desugaring that created this span, or `None`
        .               /// if this span is not from a desugaring.
    1,355 ( 0.00%)      pub fn desugaring_kind(self) -> Option<DesugaringKind> {
    1,626 ( 0.00%)          match self.ctxt().outer_expn_data().kind {
        .                       ExpnKind::Desugaring(k) => Some(k),
        .                       _ => None,
        .                   }
    1,084 ( 0.00%)      }
        .           
        .               /// Checks if a span is "internal" to a macro in which `unsafe`
        .               /// can be used without triggering the `unsafe_code` lint.
        .               //  (that is, a macro marked with `#[allow_internal_unsafe]`).
        .               pub fn allows_unsafe(self) -> bool {
        .                   self.ctxt().outer_expn_data().allow_internal_unsafe
        .               }
        .           
-- line 745 ----------------------------------------
-- line 767 ----------------------------------------
        .           
        .               /// Returns a `Span` that would enclose both `self` and `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///     ^^^^^^^^^^^^^^^^^^^^
        .               /// ```
  871,893 ( 0.02%)      pub fn to(self, end: Span) -> Span {
        .                   let span_data = self.data();
        .                   let end_data = end.data();
        .                   // FIXME(jseyfried): `self.ctxt` should always equal `end.ctxt` here (cf. issue #23480).
        .                   // Return the macro span on its own to avoid weird diagnostic output. It is preferable to
        .                   // have an incomplete span than a completely nonsensical one.
  154,911 ( 0.00%)          if span_data.ctxt != end_data.ctxt {
    3,615 ( 0.00%)              if span_data.ctxt == SyntaxContext::root() {
        .                           return end;
    3,158 ( 0.00%)              } else if end_data.ctxt == SyntaxContext::root() {
        .                           return self;
        .                       }
        .                       // Both spans fall within a macro.
        .                       // FIXME(estebank): check if it is the *same* macro.
        .                   }
        .                   Span::new(
        .                       cmp::min(span_data.lo, end_data.lo),
        .                       cmp::max(span_data.hi, end_data.hi),
        .                       if span_data.ctxt == SyntaxContext::root() { end_data.ctxt } else { span_data.ctxt },
  529,907 ( 0.01%)              if span_data.parent == end_data.parent { span_data.parent } else { None },
        .                   )
  713,367 ( 0.02%)      }
        .           
        .               /// Returns a `Span` between the end of `self` to the beginning of `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///         ^^^^^^^^^^^^^
        .               /// ```
    3,619 ( 0.00%)      pub fn between(self, end: Span) -> Span {
        .                   let span = self.data();
        .                   let end = end.data();
        .                   Span::new(
        .                       span.hi,
        .                       end.lo,
        .                       if end.ctxt == SyntaxContext::root() { end.ctxt } else { span.ctxt },
    2,303 ( 0.00%)              if span.parent == end.parent { span.parent } else { None },
        .                   )
    2,632 ( 0.00%)      }
        .           
        .               /// Returns a `Span` from the beginning of `self` until the beginning of `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///     ^^^^^^^^^^^^^^^^^
        .               /// ```
    6,391 ( 0.00%)      pub fn until(self, end: Span) -> Span {
        .                   // Most of this function's body is copied from `to`.
        .                   // We can't just do `self.to(end.shrink_to_lo())`,
        .                   // because to also does some magic where it uses min/max so
        .                   // it can handle overlapping spans. Some advanced mis-use of
        .                   // `until` with different ctxts makes this visible.
        .                   let span_data = self.data();
        .                   let end_data = end.data();
        .                   // FIXME(jseyfried): `self.ctxt` should always equal `end.ctxt` here (cf. issue #23480).
        .                   // Return the macro span on its own to avoid weird diagnostic output. It is preferable to
        .                   // have an incomplete span than a completely nonsensical one.
    1,162 ( 0.00%)          if span_data.ctxt != end_data.ctxt {
        .                       if span_data.ctxt == SyntaxContext::root() {
        .                           return end;
        .                       } else if end_data.ctxt == SyntaxContext::root() {
        .                           return self;
        .                       }
        .                       // Both spans fall within a macro.
        .                       // FIXME(estebank): check if it is the *same* macro.
        .                   }
        .                   Span::new(
        .                       span_data.lo,
        .                       end_data.lo,
        .                       if end_data.ctxt == SyntaxContext::root() { end_data.ctxt } else { span_data.ctxt },
    4,067 ( 0.00%)              if span_data.parent == end_data.parent { span_data.parent } else { None },
        .                   )
    5,229 ( 0.00%)      }
        .           
       11 ( 0.00%)      pub fn from_inner(self, inner: InnerSpan) -> Span {
        .                   let span = self.data();
        .                   Span::new(
        .                       span.lo + BytePos::from_usize(inner.start),
        .                       span.lo + BytePos::from_usize(inner.end),
        .                       span.ctxt,
        .                       span.parent,
        .                   )
        7 ( 0.00%)      }
        .           
        .               /// Equivalent of `Span::def_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_def_site_ctxt(self, expn_id: ExpnId) -> Span {
    3,124 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::Opaque)
        .               }
        .           
        .               /// Equivalent of `Span::call_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_call_site_ctxt(self, expn_id: ExpnId) -> Span {
      122 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::Transparent)
        .               }
        .           
        .               /// Equivalent of `Span::mixed_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_mixed_site_ctxt(self, expn_id: ExpnId) -> Span {
      118 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::SemiTransparent)
        .               }
        .           
        .               /// Produces a span with the same location as `self` and context produced by a macro with the
        .               /// given ID and transparency, assuming that macro was defined directly and not produced by
        .               /// some other macro (which is the case for built-in and procedural macros).
   20,184 ( 0.00%)      pub fn with_ctxt_from_mark(self, expn_id: ExpnId, transparency: Transparency) -> Span {
        .                   self.with_ctxt(SyntaxContext::root().apply_mark(expn_id, transparency))
   11,774 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn apply_mark(self, expn_id: ExpnId, transparency: Transparency) -> Span {
        .                   let span = self.data();
    2,646 ( 0.00%)          span.with_ctxt(span.ctxt.apply_mark(expn_id, transparency))
        .               }
        .           
        .               #[inline]
        .               pub fn remove_mark(&mut self) -> ExpnId {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.remove_mark();
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
-- line 897 ----------------------------------------
-- line 901 ----------------------------------------
        .               pub fn adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.adjust(expn_id);
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
        .           
        .               #[inline]
  183,483 ( 0.00%)      pub fn normalize_to_macros_2_0_and_adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
  122,322 ( 0.00%)          let mut span = self.data();
  100,639 ( 0.00%)          let mark = span.ctxt.normalize_to_macros_2_0_and_adjust(expn_id);
  183,483 ( 0.00%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
  202,574 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn glob_adjust(&mut self, expn_id: ExpnId, glob_span: Span) -> Option<Option<ExpnId>> {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.glob_adjust(expn_id, glob_span);
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
-- line 922 ----------------------------------------
-- line 929 ----------------------------------------
        .               ) -> Option<Option<ExpnId>> {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.reverse_glob_adjust(expn_id, glob_span);
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
        .           
        .               #[inline]
  105,904 ( 0.00%)      pub fn normalize_to_macros_2_0(self) -> Span {
        .                   let span = self.data();
        .                   span.with_ctxt(span.ctxt.normalize_to_macros_2_0())
   92,666 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn normalize_to_macro_rules(self) -> Span {
        .                   let span = self.data();
        .                   span.with_ctxt(span.ctxt.normalize_to_macro_rules())
        .               }
        .           }
        .           
-- line 948 ----------------------------------------
-- line 958 ----------------------------------------
        .           
        .               /// What label should we attach to this span (if any)?
        .               pub label: Option<String>,
        .           }
        .           
        .           impl Default for Span {
        .               fn default() -> Self {
        .                   DUMMY_SP
        2 ( 0.00%)      }
        .           }
        .           
        .           impl<E: Encoder> Encodable<E> for Span {
        .               default fn encode(&self, s: &mut E) -> Result<(), E::Error> {
        .                   let span = self.data();
        .                   s.emit_struct(false, |s| {
        .                       s.emit_struct_field("lo", true, |s| span.lo.encode(s))?;
        .                       s.emit_struct_field("hi", false, |s| span.hi.encode(s))
-- line 974 ----------------------------------------
-- line 990 ----------------------------------------
        .           /// any spans that are debug-printed during the closure's execution.
        .           ///
        .           /// Normally, the global `TyCtxt` is used to retrieve the `SourceMap`
        .           /// (see `rustc_interface::callbacks::span_debug1`). However, some parts
        .           /// of the compiler (e.g. `rustc_parse`) may debug-print `Span`s before
        .           /// a `TyCtxt` is available. In this case, we fall back to
        .           /// the `SourceMap` provided to this function. If that is not available,
        .           /// we fall back to printing the raw `Span` field values.
        9 ( 0.00%)  pub fn with_source_map<T, F: FnOnce() -> T>(source_map: Lrc<SourceMap>, f: F) -> T {
        .               with_session_globals(|session_globals| {
        2 ( 0.00%)          *session_globals.source_map.borrow_mut() = Some(source_map);
        .               });
        .               struct ClearSourceMap;
        .               impl Drop for ClearSourceMap {
        .                   fn drop(&mut self) {
        .                       with_session_globals(|session_globals| {
        1 ( 0.00%)                  session_globals.source_map.borrow_mut().take();
        .                       });
        .                   }
        .               }
        .           
        .               let _guard = ClearSourceMap;
        4 ( 0.00%)      f()
        8 ( 0.00%)  }
        .           
        .           pub fn debug_with_source_map(
        .               span: Span,
        .               f: &mut fmt::Formatter<'_>,
        .               source_map: &SourceMap,
        .           ) -> fmt::Result {
        .               write!(f, "{} ({:?})", source_map.span_to_diagnostic_string(span), span.ctxt())
        .           }
-- line 1021 ----------------------------------------
-- line 1048 ----------------------------------------
        .           
        .           impl MultiSpan {
        .               #[inline]
        .               pub fn new() -> MultiSpan {
        .                   MultiSpan { primary_spans: vec![], span_labels: vec![] }
        .               }
        .           
        .               pub fn from_span(primary_span: Span) -> MultiSpan {
    6,925 ( 0.00%)          MultiSpan { primary_spans: vec![primary_span], span_labels: vec![] }
        .               }
        .           
        .               pub fn from_spans(mut vec: Vec<Span>) -> MultiSpan {
        .                   vec.sort();
      870 ( 0.00%)          MultiSpan { primary_spans: vec, span_labels: vec![] }
        .               }
        .           
        .               pub fn push_span_label(&mut self, span: Span, label: String) {
        .                   self.span_labels.push((span, label));
        .               }
        .           
        .               /// Selects the first primary span (if any).
        .               pub fn primary_span(&self) -> Option<Span> {
        .                   self.primary_spans.first().cloned()
    1,162 ( 0.00%)      }
        .           
        .               /// Returns all primary spans.
        .               pub fn primary_spans(&self) -> &[Span] {
        .                   &self.primary_spans
      513 ( 0.00%)      }
        .           
        .               /// Returns `true` if any of the primary spans are displayable.
        .               pub fn has_primary_spans(&self) -> bool {
        .                   self.primary_spans.iter().any(|sp| !sp.is_dummy())
        .               }
        .           
        .               /// Returns `true` if this contains only a dummy primary span with any hygienic context.
        .               pub fn is_dummy(&self) -> bool {
-- line 1084 ----------------------------------------
-- line 1139 ----------------------------------------
        .           
        .               /// Returns `true` if any of the span labels is displayable.
        .               pub fn has_span_labels(&self) -> bool {
        .                   self.span_labels.iter().any(|(sp, _)| !sp.is_dummy())
        .               }
        .           }
        .           
        .           impl From<Span> for MultiSpan {
    6,925 ( 0.00%)      fn from(span: Span) -> MultiSpan {
        .                   MultiSpan::from_span(span)
    6,925 ( 0.00%)      }
        .           }
        .           
        .           impl From<Vec<Span>> for MultiSpan {
      870 ( 0.00%)      fn from(spans: Vec<Span>) -> MultiSpan {
      696 ( 0.00%)          MultiSpan::from_spans(spans)
      870 ( 0.00%)      }
        .           }
        .           
        .           /// Identifies an offset of a multi-byte character in a `SourceFile`.
        .           #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub struct MultiByteChar {
        .               /// The absolute offset of the character in the `SourceMap`.
        .               pub pos: BytePos,
        .               /// The number of bytes, `>= 2`.
        .               pub bytes: u8,
        .           }
        .           
        .           /// Identifies an offset of a non-narrow character in a `SourceFile`.
      308 ( 0.00%)  #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub enum NonNarrowChar {
        .               /// Represents a zero-width character.
        .               ZeroWidth(BytePos),
        .               /// Represents a wide (full-width) character.
        .               Wide(BytePos),
        .               /// Represents a tab character, represented visually with a width of 4 characters.
        .               Tab(BytePos),
        .           }
-- line 1176 ----------------------------------------
-- line 1201 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           impl Add<BytePos> for NonNarrowChar {
        .               type Output = Self;
        .           
        .               fn add(self, rhs: BytePos) -> Self {
      532 ( 0.00%)          match self {
        .                       NonNarrowChar::ZeroWidth(pos) => NonNarrowChar::ZeroWidth(pos + rhs),
        .                       NonNarrowChar::Wide(pos) => NonNarrowChar::Wide(pos + rhs),
        .                       NonNarrowChar::Tab(pos) => NonNarrowChar::Tab(pos + rhs),
        .                   }
        .               }
        .           }
        .           
        .           impl Sub<BytePos> for NonNarrowChar {
        .               type Output = Self;
        .           
      154 ( 0.00%)      fn sub(self, rhs: BytePos) -> Self {
      532 ( 0.00%)          match self {
        .                       NonNarrowChar::ZeroWidth(pos) => NonNarrowChar::ZeroWidth(pos - rhs),
        .                       NonNarrowChar::Wide(pos) => NonNarrowChar::Wide(pos - rhs),
        .                       NonNarrowChar::Tab(pos) => NonNarrowChar::Tab(pos - rhs),
        .                   }
      462 ( 0.00%)      }
        .           }
        .           
        .           /// Identifies an offset of a character that was normalized away from `SourceFile`.
        .           #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub struct NormalizedPos {
        .               /// The absolute offset of the character in the `SourceMap`.
        .               pub pos: BytePos,
        .               /// The difference between original and normalized string at position.
        .               pub diff: u32,
        .           }
        .           
        9 ( 0.00%)  #[derive(PartialEq, Eq, Clone, Debug)]
        .           pub enum ExternalSource {
        .               /// No external source has to be loaded, since the `SourceFile` represents a local crate.
        .               Unneeded,
        .               Foreign {
        .                   kind: ExternalSourceKind,
        .                   /// This SourceFile's byte-offset within the source_map of its original crate.
        .                   original_start_pos: BytePos,
        .                   /// The end of this SourceFile within the source_map of its original crate.
-- line 1246 ----------------------------------------
-- line 1257 ----------------------------------------
        .               AbsentOk,
        .               /// A failed attempt has been made to load the external source.
        .               AbsentErr,
        .               Unneeded,
        .           }
        .           
        .           impl ExternalSource {
        .               pub fn get_source(&self) -> Option<&Lrc<String>> {
       86 ( 0.00%)          match self {
        .                       ExternalSource::Foreign { kind: ExternalSourceKind::Present(ref src), .. } => Some(src),
        .                       _ => None,
        .                   }
        .               }
        .           }
        .           
        .           #[derive(Debug)]
        .           pub struct OffsetOverflowError;
        .           
    1,100 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash, Encodable, Decodable)]
        .           pub enum SourceFileHashAlgorithm {
        .               Md5,
        .               Sha1,
        .               Sha256,
        .           }
        .           
        .           impl FromStr for SourceFileHashAlgorithm {
        .               type Err = ();
-- line 1283 ----------------------------------------
-- line 1290 ----------------------------------------
        .                       _ => Err(()),
        .                   }
        .               }
        .           }
        .           
        .           rustc_data_structures::impl_stable_hash_via_hash!(SourceFileHashAlgorithm);
        .           
        .           /// The hash of the on-disk source file used for debug info.
       18 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Debug)]
    2,200 ( 0.00%)  #[derive(HashStable_Generic, Encodable, Decodable)]
        .           pub struct SourceFileHash {
        .               pub kind: SourceFileHashAlgorithm,
        .               value: [u8; 32],
        .           }
        .           
        .           impl SourceFileHash {
        .               pub fn new(kind: SourceFileHashAlgorithm, src: &str) -> SourceFileHash {
        1 ( 0.00%)          let mut hash = SourceFileHash { kind, value: Default::default() };
        .                   let len = hash.hash_len();
        .                   let value = &mut hash.value[..len];
        .                   let data = src.as_bytes();
        .                   match kind {
        .                       SourceFileHashAlgorithm::Md5 => {
       66 ( 0.00%)                  value.copy_from_slice(&Md5::digest(data));
        .                       }
        .                       SourceFileHashAlgorithm::Sha1 => {
        .                           value.copy_from_slice(&Sha1::digest(data));
        .                       }
        .                       SourceFileHashAlgorithm::Sha256 => {
        .                           value.copy_from_slice(&Sha256::digest(data));
        .                       }
        .                   }
        .                   hash
        .               }
        .           
        .               /// Check if the stored hash matches the hash of the string.
        .               pub fn matches(&self, src: &str) -> bool {
        1 ( 0.00%)          Self::new(self.kind, src) == *self
        .               }
        .           
        .               /// The bytes of the hash.
        .               pub fn hash_bytes(&self) -> &[u8] {
        .                   let len = self.hash_len();
        .                   &self.value[..len]
        .               }
        .           
        .               fn hash_len(&self) -> usize {
       65 ( 0.00%)          match self.kind {
        .                       SourceFileHashAlgorithm::Md5 => 16,
        .                       SourceFileHashAlgorithm::Sha1 => 20,
        .                       SourceFileHashAlgorithm::Sha256 => 32,
        .                   }
        .               }
        .           }
        .           
        .           /// A single source in the [`SourceMap`].
      174 ( 0.00%)  #[derive(Clone)]
        .           pub struct SourceFile {
        .               /// The name of the file that the source came from. Source that doesn't
        .               /// originate from files has names between angle brackets by convention
        .               /// (e.g., `<anon>`).
        .               pub name: FileName,
        .               /// The complete source code.
        3 ( 0.00%)      pub src: Option<Lrc<String>>,
        .               /// The source code's hash.
        .               pub src_hash: SourceFileHash,
        .               /// The external source code (used for external crates, which will have a `None`
        .               /// value as `self.src`.
        .               pub external_src: Lock<ExternalSource>,
        .               /// The start position of this source in the `SourceMap`.
        .               pub start_pos: BytePos,
        .               /// The end position of this source in the `SourceMap`.
-- line 1361 ----------------------------------------
-- line 1364 ----------------------------------------
        .               pub lines: Vec<BytePos>,
        .               /// Locations of multi-byte characters in the source code.
        .               pub multibyte_chars: Vec<MultiByteChar>,
        .               /// Width of characters that are not narrow in the source code.
        .               pub non_narrow_chars: Vec<NonNarrowChar>,
        .               /// Locations of characters removed during normalization.
        .               pub normalized_pos: Vec<NormalizedPos>,
        .               /// A hash of the filename, used for speeding up hashing in incremental compilation.
        3 ( 0.00%)      pub name_hash: u128,
        .               /// Indicates which crate this `SourceFile` was imported from.
        3 ( 0.00%)      pub cnum: CrateNum,
        .           }
        .           
        .           impl<S: Encoder> Encodable<S> for SourceFile {
        .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
        .                   s.emit_struct(false, |s| {
        .                       s.emit_struct_field("name", true, |s| self.name.encode(s))?;
        .                       s.emit_struct_field("src_hash", false, |s| self.src_hash.encode(s))?;
        .                       s.emit_struct_field("start_pos", false, |s| self.start_pos.encode(s))?;
        .                       s.emit_struct_field("end_pos", false, |s| self.end_pos.encode(s))?;
        .                       s.emit_struct_field("lines", false, |s| {
        .                           let lines = &self.lines[..];
        .                           // Store the length.
        .                           s.emit_u32(lines.len() as u32)?;
        .           
       12 ( 0.00%)                  if !lines.is_empty() {
        .                               // In order to preserve some space, we exploit the fact that
        .                               // the lines list is sorted and individual lines are
        .                               // probably not that long. Because of that we can store lines
        .                               // as a difference list, using as little space as possible
        .                               // for the differences.
        .                               let max_line_length = if lines.len() == 1 {
        .                                   0
        .                               } else {
-- line 1397 ----------------------------------------
-- line 1399 ----------------------------------------
        .                                       .array_windows()
        .                                       .map(|&[fst, snd]| snd - fst)
        .                                       .map(|bp| bp.to_usize())
        .                                       .max()
        .                                       .unwrap()
        .                               };
        .           
        .                               let bytes_per_diff: u8 = match max_line_length {
        6 ( 0.00%)                          0..=0xFF => 1,
        .                                   0x100..=0xFFFF => 2,
        .                                   _ => 4,
        .                               };
        .           
        .                               // Encode the number of bytes used per diff.
        .                               bytes_per_diff.encode(s)?;
        .           
        .                               // Encode the first element.
        .                               lines[0].encode(s)?;
        .           
        .                               let diff_iter = lines.array_windows().map(|&[fst, snd]| snd - fst);
        .           
        6 ( 0.00%)                      match bytes_per_diff {
        .                                   1 => {
        .                                       for diff in diff_iter {
        .                                           (diff.0 as u8).encode(s)?
        .                                       }
        .                                   }
        .                                   2 => {
        .                                       for diff in diff_iter {
        .                                           (diff.0 as u16).encode(s)?
-- line 1428 ----------------------------------------
-- line 1436 ----------------------------------------
        .                                   _ => unreachable!(),
        .                               }
        .                           }
        .           
        .                           Ok(())
        .                       })?;
        .                       s.emit_struct_field("multibyte_chars", false, |s| self.multibyte_chars.encode(s))?;
        .                       s.emit_struct_field("non_narrow_chars", false, |s| self.non_narrow_chars.encode(s))?;
        9 ( 0.00%)              s.emit_struct_field("name_hash", false, |s| self.name_hash.encode(s))?;
        .                       s.emit_struct_field("normalized_pos", false, |s| self.normalized_pos.encode(s))?;
       33 ( 0.00%)              s.emit_struct_field("cnum", false, |s| self.cnum.encode(s))
        .                   })
        .               }
        .           }
        .           
        .           impl<D: Decoder> Decodable<D> for SourceFile {
    4,950 ( 0.00%)      fn decode(d: &mut D) -> SourceFile {
        .                   d.read_struct(|d| {
        .                       let name: FileName = d.read_struct_field("name", |d| Decodable::decode(d));
        .                       let src_hash: SourceFileHash =
        .                           d.read_struct_field("src_hash", |d| Decodable::decode(d));
        .                       let start_pos: BytePos = d.read_struct_field("start_pos", |d| Decodable::decode(d));
        .                       let end_pos: BytePos = d.read_struct_field("end_pos", |d| Decodable::decode(d));
        .                       let lines: Vec<BytePos> = d.read_struct_field("lines", |d| {
        .                           let num_lines: u32 = Decodable::decode(d);
      550 ( 0.00%)                  let mut lines = Vec::with_capacity(num_lines as usize);
        .           
        .                           if num_lines > 0 {
        .                               // Read the number of bytes used per diff.
        .                               let bytes_per_diff: u8 = Decodable::decode(d);
        .           
        .                               // Read the first element.
        .                               let mut line_start: BytePos = Decodable::decode(d);
        .                               lines.push(line_start);
        .           
        .                               for _ in 1..num_lines {
  884,368 ( 0.02%)                          let diff = match bytes_per_diff {
        .                                       1 => d.read_u8() as u32,
        .                                       2 => d.read_u16() as u32,
        .                                       4 => d.read_u32(),
        .                                       _ => unreachable!(),
        .                                   };
        .           
        .                                   line_start = line_start + BytePos(diff);
        .           
-- line 1480 ----------------------------------------
-- line 1483 ----------------------------------------
        .                           }
        .           
        .                           lines
        .                       });
        .                       let multibyte_chars: Vec<MultiByteChar> =
        .                           d.read_struct_field("multibyte_chars", |d| Decodable::decode(d));
        .                       let non_narrow_chars: Vec<NonNarrowChar> =
        .                           d.read_struct_field("non_narrow_chars", |d| Decodable::decode(d));
    1,100 ( 0.00%)              let name_hash: u128 = d.read_struct_field("name_hash", |d| Decodable::decode(d));
        .                       let normalized_pos: Vec<NormalizedPos> =
        .                           d.read_struct_field("normalized_pos", |d| Decodable::decode(d));
        .                       let cnum: CrateNum = d.read_struct_field("cnum", |d| Decodable::decode(d));
    6,050 ( 0.00%)              SourceFile {
    4,400 ( 0.00%)                  name,
        .                           start_pos,
        .                           end_pos,
        .                           src: None,
    2,200 ( 0.00%)                  src_hash,
        .                           // Unused - the metadata decoder will construct
        .                           // a new SourceFile, filling in `external_src` properly
        .                           external_src: Lock::new(ExternalSource::Unneeded),
    2,200 ( 0.00%)                  lines,
    2,200 ( 0.00%)                  multibyte_chars,
    2,200 ( 0.00%)                  non_narrow_chars,
    2,200 ( 0.00%)                  normalized_pos,
        .                           name_hash,
        .                           cnum,
        .                       }
        .                   })
    4,950 ( 0.00%)      }
        .           }
        .           
        .           impl fmt::Debug for SourceFile {
        .               fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   write!(fmt, "SourceFile({:?})", self.name)
        .               }
        .           }
        .           
        .           impl SourceFile {
      231 ( 0.00%)      pub fn new(
        .                   name: FileName,
        .                   mut src: String,
        .                   start_pos: BytePos,
        .                   hash_kind: SourceFileHashAlgorithm,
        .               ) -> Self {
        .                   // Compute the file hash before any normalization.
        .                   let src_hash = SourceFileHash::new(hash_kind, &src);
       63 ( 0.00%)          let normalized_pos = normalize_src(&mut src, start_pos);
        .           
        .                   let name_hash = {
        .                       let mut hasher: StableHasher = StableHasher::new();
       42 ( 0.00%)              name.hash(&mut hasher);
        .                       hasher.finish::<u128>()
        .                   };
       42 ( 0.00%)          let end_pos = start_pos.to_usize() + src.len();
       63 ( 0.00%)          assert!(end_pos <= u32::MAX as usize);
        .           
      252 ( 0.00%)          let (lines, multibyte_chars, non_narrow_chars) =
       42 ( 0.00%)              analyze_source_file::analyze_source_file(&src, start_pos);
        .           
      357 ( 0.00%)          SourceFile {
        .                       name,
        .                       src: Some(Lrc::new(src)),
      231 ( 0.00%)              src_hash,
        .                       external_src: Lock::new(ExternalSource::Unneeded),
        .                       start_pos,
        .                       end_pos: Pos::from_usize(end_pos),
       84 ( 0.00%)              lines,
       84 ( 0.00%)              multibyte_chars,
       84 ( 0.00%)              non_narrow_chars,
       84 ( 0.00%)              normalized_pos,
        .                       name_hash,
        .                       cnum: LOCAL_CRATE,
        .                   }
      189 ( 0.00%)      }
        .           
        .               /// Returns the `BytePos` of the beginning of the current line.
        .               pub fn line_begin_pos(&self, pos: BytePos) -> BytePos {
        .                   let line_index = self.lookup_line(pos).unwrap();
        .                   self.lines[line_index]
        .               }
        .           
        .               /// Add externally loaded source.
        .               /// If the hash of the input doesn't match or no input is supplied via None,
        .               /// it is interpreted as an error and the corresponding enum variant is set.
        .               /// The return value signifies whether some kind of source is present.
    9,086 ( 0.00%)      pub fn add_external_src<F>(&self, get_src: F) -> bool
        .               where
        .                   F: FnOnce() -> Option<String>,
        .               {
    1,300 ( 0.00%)          if matches!(
    2,596 ( 0.00%)              *self.external_src.borrow(),
        .                       ExternalSource::Foreign { kind: ExternalSourceKind::AbsentOk, .. }
        .                   ) {
        1 ( 0.00%)              let src = get_src();
        .                       let mut external_src = self.external_src.borrow_mut();
        .                       // Check that no-one else have provided the source while we were getting it
        3 ( 0.00%)              if let ExternalSource::Foreign {
        .                           kind: src_kind @ ExternalSourceKind::AbsentOk, ..
        .                       } = &mut *external_src
        .                       {
        5 ( 0.00%)                  if let Some(mut src) = src {
        .                               // The src_hash needs to be computed on the pre-normalized src.
        1 ( 0.00%)                      if self.src_hash.matches(&src) {
        3 ( 0.00%)                          normalize_src(&mut src, BytePos::from_usize(0));
        8 ( 0.00%)                          *src_kind = ExternalSourceKind::Present(Lrc::new(src));
        .                                   return true;
        .                               }
        .                           } else {
        .                               *src_kind = ExternalSourceKind::AbsentErr;
        .                           }
        .           
        .                           false
        .                       } else {
        .                           self.src.is_some() || external_src.get_source().is_some()
        .                       }
        .                   } else {
    1,297 ( 0.00%)              self.src.is_some() || self.external_src.borrow().get_source().is_some()
        .                   }
   11,682 ( 0.00%)      }
        .           
        .               /// Gets a line from the list of pre-computed line-beginnings.
        .               /// The line number here is 0-based.
        .               pub fn get_line(&self, line_number: usize) -> Option<Cow<'_, str>> {
        .                   fn get_until_newline(src: &str, begin: usize) -> &str {
        .                       // We can't use `lines.get(line_number+1)` because we might
        .                       // be parsing when we call this function and thus the current
        .                       // line is the last one we have line info for.
-- line 1610 ----------------------------------------
-- line 1627 ----------------------------------------
        .                       Some(Cow::Owned(String::from(get_until_newline(src, begin))))
        .                   } else {
        .                       None
        .                   }
        .               }
        .           
        .               pub fn is_real_file(&self) -> bool {
        .                   self.name.is_real()
      569 ( 0.00%)      }
        .           
        .               pub fn is_imported(&self) -> bool {
        .                   self.src.is_none()
   17,840 ( 0.00%)      }
        .           
        .               pub fn count_lines(&self) -> usize {
        .                   self.lines.len()
        .               }
        .           
        .               /// Finds the line containing the given position. The return value is the
        .               /// index into the `lines` array of this `SourceFile`, not the 1-based line
        .               /// number. If the source_file is empty or the position is located before the
        .               /// first line, `None` is returned.
        .               pub fn lookup_line(&self, pos: BytePos) -> Option<usize> {
   11,621 ( 0.00%)          match self.lines.binary_search(&pos) {
        .                       Ok(idx) => Some(idx),
        .                       Err(0) => None,
        .                       Err(idx) => Some(idx - 1),
        .                   }
        .               }
        .           
        .               pub fn line_bounds(&self, line_index: usize) -> Range<BytePos> {
   32,054 ( 0.00%)          if self.is_empty() {
        .                       return self.start_pos..self.end_pos;
        .                   }
        .           
   21,039 ( 0.00%)          assert!(line_index < self.lines.len());
   31,227 ( 0.00%)          if line_index == (self.lines.len() - 1) {
       10 ( 0.00%)              self.lines[line_index]..self.end_pos
        .                   } else {
   20,810 ( 0.00%)              self.lines[line_index]..self.lines[line_index + 1]
        .                   }
        .               }
        .           
        .               /// Returns whether or not the file contains the given `SourceMap` byte
        .               /// position. The position one past the end of the file is considered to be
        .               /// contained by the file. This implies that files for which `is_empty`
        .               /// returns true still contain one byte position according to this function.
        .               #[inline]
-- line 1674 ----------------------------------------
-- line 1692 ----------------------------------------
        .                       Err(i) if i == 0 => 0,
        .                       Err(i) => self.normalized_pos[i - 1].diff,
        .                   };
        .           
        .                   BytePos::from_u32(pos.0 - self.start_pos.0 + diff)
        .               }
        .           
        .               /// Converts an absolute `BytePos` to a `CharPos` relative to the `SourceFile`.
        6 ( 0.00%)      pub fn bytepos_to_file_charpos(&self, bpos: BytePos) -> CharPos {
        .                   // The number of extra bytes due to multibyte chars in the `SourceFile`.
        .                   let mut total_extra_bytes = 0;
        .           
       18 ( 0.00%)          for mbc in self.multibyte_chars.iter() {
        .                       debug!("{}-byte char at {:?}", mbc.bytes, mbc.pos);
        .                       if mbc.pos < bpos {
        .                           // Every character is at least one byte, so we only
        .                           // count the actual extra bytes.
        .                           total_extra_bytes += mbc.bytes as u32 - 1;
        .                           // We should never see a byte position in the middle of a
        .                           // character.
        .                           assert!(bpos.to_u32() >= mbc.pos.to_u32() + mbc.bytes as u32);
        .                       } else {
        .                           break;
        .                       }
        .                   }
        .           
       36 ( 0.00%)          assert!(self.start_pos.to_u32() + total_extra_bytes <= bpos.to_u32());
       30 ( 0.00%)          CharPos(bpos.to_usize() - self.start_pos.to_usize() - total_extra_bytes as usize)
       12 ( 0.00%)      }
        .           
        .               /// Looks up the file's (1-based) line number and (0-based `CharPos`) column offset, for a
        .               /// given `BytePos`.
       21 ( 0.00%)      pub fn lookup_file_pos(&self, pos: BytePos) -> (usize, CharPos) {
        6 ( 0.00%)          let chpos = self.bytepos_to_file_charpos(pos);
        1 ( 0.00%)          match self.lookup_line(pos) {
        .                       Some(a) => {
        .                           let line = a + 1; // Line numbers start at 1
        3 ( 0.00%)                  let linebpos = self.lines[a];
        6 ( 0.00%)                  let linechpos = self.bytepos_to_file_charpos(linebpos);
        .                           let col = chpos - linechpos;
        .                           debug!("byte pos {:?} is on the line at byte pos {:?}", pos, linebpos);
        .                           debug!("char pos {:?} is on the line at char pos {:?}", chpos, linechpos);
        .                           debug!("byte is on line: {}", line);
        3 ( 0.00%)                  assert!(chpos >= linechpos);
        .                           (line, col)
        .                       }
        .                       None => (0, chpos),
        .                   }
       24 ( 0.00%)      }
        .           
        .               /// Looks up the file's (1-based) line number, (0-based `CharPos`) column offset, and (0-based)
        .               /// column offset when displayed, for a given `BytePos`.
       24 ( 0.00%)      pub fn lookup_file_pos_with_col_display(&self, pos: BytePos) -> (usize, CharPos, usize) {
        9 ( 0.00%)          let (line, col_or_chpos) = self.lookup_file_pos(pos);
        6 ( 0.00%)          if line > 0 {
        .                       let col = col_or_chpos;
        3 ( 0.00%)              let linebpos = self.lines[line - 1];
        .                       let col_display = {
        .                           let start_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&linebpos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let end_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&pos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let special_chars = end_width_idx - start_width_idx;
        .                           let non_narrow: usize = self.non_narrow_chars[start_width_idx..end_width_idx]
        .                               .iter()
        .                               .map(|x| x.width())
        .                               .sum();
       15 ( 0.00%)                  col.0 - special_chars + non_narrow
        .                       };
        .                       (line, col, col_display)
        .                   } else {
        .                       let chpos = col_or_chpos;
        .                       let col_display = {
        .                           let end_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&pos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let non_narrow: usize =
        .                               self.non_narrow_chars[0..end_width_idx].iter().map(|x| x.width()).sum();
        .                           chpos.0 - end_width_idx + non_narrow
        .                       };
        .                       (0, chpos, col_display)
        .                   }
       21 ( 0.00%)      }
        .           }
        .           
        .           /// Normalizes the source code and records the normalizations.
      220 ( 0.00%)  fn normalize_src(src: &mut String, start_pos: BytePos) -> Vec<NormalizedPos> {
        .               let mut normalized_pos = vec![];
        .               remove_bom(src, &mut normalized_pos);
        .               normalize_newlines(src, &mut normalized_pos);
        .           
        .               // Offset all the positions by start_pos to match the final file positions.
        .               for np in &mut normalized_pos {
        .                   np.pos.0 += start_pos.0;
        .               }
        .           
        .               normalized_pos
      198 ( 0.00%)  }
        .           
        .           /// Removes UTF-8 BOM, if any.
        .           fn remove_bom(src: &mut String, normalized_pos: &mut Vec<NormalizedPos>) {
       21 ( 0.00%)      if src.starts_with('\u{feff}') {
        .                   src.drain(..3);
        .                   normalized_pos.push(NormalizedPos { pos: BytePos(0), diff: 3 });
        .               }
        .           }
        .           
        .           /// Replaces `\r\n` with `\n` in-place in `src`.
        .           ///
        .           /// Returns error if there's a lone `\r` in the string.
        .           fn normalize_newlines(src: &mut String, normalized_pos: &mut Vec<NormalizedPos>) {
       22 ( 0.00%)      if !src.as_bytes().contains(&b'\r') {
        .                   return;
        .               }
        .           
        .               // We replace `\r\n` with `\n` in-place, which doesn't break utf-8 encoding.
        .               // While we *can* call `as_mut_vec` and do surgery on the live string
        .               // directly, let's rather steal the contents of `src`. This makes the code
        .               // safe even if a panic occurs.
        .           
-- line 1816 ----------------------------------------
-- line 1877 ----------------------------------------
        .               (
        .                   $(
        .                       $(#[$attr:meta])*
        .                       $vis:vis struct $ident:ident($inner_vis:vis $inner_ty:ty);
        .                   )*
        .               ) => {
        .                   $(
        .                       $(#[$attr])*
   79,951 ( 0.00%)              $vis struct $ident($inner_vis $inner_ty);
        .           
        .                       impl Pos for $ident {
        .                           #[inline(always)]
        .                           fn from_usize(n: usize) -> $ident {
    2,215 ( 0.00%)                      $ident(n as $inner_ty)
        .                           }
        .           
        .                           #[inline(always)]
        .                           fn to_usize(&self) -> usize {
   42,284 ( 0.00%)                      self.0 as usize
        .                           }
        .           
        .                           #[inline(always)]
        .                           fn from_u32(n: u32) -> $ident {
        .                               $ident(n as $inner_ty)
        .                           }
        .           
        .                           #[inline(always)]
-- line 1903 ----------------------------------------
-- line 1906 ----------------------------------------
        .                           }
        .                       }
        .           
        .                       impl Add for $ident {
        .                           type Output = $ident;
        .           
        .                           #[inline(always)]
        .                           fn add(self, rhs: $ident) -> $ident {
1,621,821 ( 0.04%)                      $ident(self.0 + rhs.0)
        .                           }
        .                       }
        .           
        .                       impl Sub for $ident {
        .                           type Output = $ident;
        .           
        .                           #[inline(always)]
        .                           fn sub(self, rhs: $ident) -> $ident {
1,957,053 ( 0.05%)                      $ident(self.0 - rhs.0)
        .                           }
        .                       }
        .                   )*
        .               };
        .           }
        .           
        .           impl_pos! {
        .               /// A byte offset.
-- line 1931 ----------------------------------------
-- line 1946 ----------------------------------------
        .           impl<S: rustc_serialize::Encoder> Encodable<S> for BytePos {
        .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
        .                   s.emit_u32(self.0)
        .               }
        .           }
        .           
        .           impl<D: rustc_serialize::Decoder> Decodable<D> for BytePos {
        .               fn decode(d: &mut D) -> BytePos {
  115,216 ( 0.00%)          BytePos(d.read_u32())
        .               }
        .           }
        .           
        .           // _____________________________________________________________________________
        .           // Loc, SourceFileAndLine, SourceFileAndBytePos
        .           //
        .           
        .           /// A source code location used for error reporting.
-- line 1962 ----------------------------------------
-- line 2042 ----------------------------------------
        .           /// Range inside of a `Span` used for diagnostics when we only have access to relative positions.
        .           #[derive(Copy, Clone, PartialEq, Eq, Debug)]
        .           pub struct InnerSpan {
        .               pub start: usize,
        .               pub end: usize,
        .           }
        .           
        .           impl InnerSpan {
        8 ( 0.00%)      pub fn new(start: usize, end: usize) -> InnerSpan {
        .                   InnerSpan { start, end }
        4 ( 0.00%)      }
        .           }
        .           
        .           /// Requirements for a `StableHashingContext` to be used in this crate.
        .           ///
        .           /// This is a hack to allow using the [`HashStable_Generic`] derive macro
        .           /// instead of implementing everything in rustc_middle.
        .           pub trait HashStableContext {
        .               fn def_path_hash(&self, def_id: DefId) -> DefPathHash;
-- line 2060 ----------------------------------------
-- line 2079 ----------------------------------------
        .               /// offsets into the `SourceMap`). Instead, we hash the (file name, line, column)
        .               /// triple, which stays the same even if the containing `SourceFile` has moved
        .               /// within the `SourceMap`.
        .               ///
        .               /// Also note that we are hashing byte offsets for the column, not unicode
        .               /// codepoint offsets. For the purpose of the hash that's sufficient.
        .               /// Also, hashing filenames is expensive so we avoid doing it twice when the
        .               /// span starts and ends in the same file, which is almost always the case.
1,050,560 ( 0.02%)      fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {
        .                   const TAG_VALID_SPAN: u8 = 0;
        .                   const TAG_INVALID_SPAN: u8 = 1;
        .                   const TAG_RELATIVE_SPAN: u8 = 2;
        .           
  185,750 ( 0.00%)          if !ctx.hash_spans() {
        .                       return;
        .                   }
        .           
  864,810 ( 0.02%)          let span = self.data_untracked();
  343,230 ( 0.01%)          span.ctxt.hash_stable(ctx, hasher);
  450,240 ( 0.01%)          span.parent.hash_stable(ctx, hasher);
        .           
  302,316 ( 0.01%)          if span.is_dummy() {
        .                       Hash::hash(&TAG_INVALID_SPAN, hasher);
        .                       return;
        .                   }
        .           
  295,848 ( 0.01%)          if let Some(parent) = span.parent {
        .                       let def_span = ctx.def_span(parent).data_untracked();
        .                       if def_span.contains(span) {
        .                           // This span is enclosed in a definition: only hash the relative position.
        .                           Hash::hash(&TAG_RELATIVE_SPAN, hasher);
        .                           (span.lo - def_span.lo).to_u32().hash_stable(ctx, hasher);
        .                           (span.hi - def_span.lo).to_u32().hash_stable(ctx, hasher);
        .                           return;
        .                       }
        .                   }
        .           
        .                   // If this is not an empty or invalid span, we want to hash the last
        .                   // position that belongs to it, as opposed to hashing the first
        .                   // position past it.
  591,696 ( 0.01%)          let (file, line_lo, col_lo, line_hi, col_hi) = match ctx.span_data_to_lines_and_cols(&span)
        .                   {
  295,848 ( 0.01%)              Some(pos) => pos,
        .                       None => {
        .                           Hash::hash(&TAG_INVALID_SPAN, hasher);
        .                           return;
        .                       }
        .                   };
        .           
        .                   Hash::hash(&TAG_VALID_SPAN, hasher);
        .                   // We truncate the stable ID hash and line and column numbers. The chances
-- line 2129 ----------------------------------------
-- line 2134 ----------------------------------------
        .                   // hash only the length, for example, then two otherwise equal spans with
        .                   // different end locations will have the same hash. This can cause a problem
        .                   // during incremental compilation wherein a previous result for a query that
        .                   // depends on the end location of a span will be incorrectly reused when the
        .                   // end location of the span it depends on has changed (see issue #74890). A
        .                   // similar analysis applies if some query depends specifically on the length
        .                   // of the span, but we only hash the end location. So hash both.
        .           
  147,924 ( 0.00%)          let col_lo_trunc = (col_lo.0 as u64) & 0xFF;
        .                   let line_lo_trunc = ((line_lo as u64) & 0xFF_FF_FF) << 8;
        .                   let col_hi_trunc = (col_hi.0 as u64) & 0xFF << 32;
        .                   let line_hi_trunc = ((line_hi as u64) & 0xFF_FF_FF) << 40;
        .                   let col_line = col_lo_trunc | line_lo_trunc | col_hi_trunc | line_hi_trunc;
  147,924 ( 0.00%)          let len = (span.hi - span.lo).0;
        .                   Hash::hash(&col_line, hasher);
        .                   Hash::hash(&len, hasher);
1,200,640 ( 0.03%)      }
        .           }

3,170,273 ( 0.07%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/non_null.rs
--------------------------------------------------------------------------------
Ir                 

-- line 186 ----------------------------------------
        .               /// use std::ptr::NonNull;
        .               ///
        .               /// // NEVER DO THAT!!! This is undefined behavior. ⚠️
        .               /// let ptr = unsafe { NonNull::<u32>::new_unchecked(std::ptr::null_mut()) };
        .               /// ```
        .               #[stable(feature = "nonnull", since = "1.25.0")]
        .               #[rustc_const_stable(feature = "const_nonnull_new_unchecked", since = "1.25.0")]
        .               #[inline]
1,037,442 ( 0.02%)      pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
        .                   // SAFETY: the caller must guarantee that `ptr` is non-null.
4,474,489 ( 0.10%)          unsafe { NonNull { pointer: ptr as _ } }
1,527,640 ( 0.04%)      }
        .           
        .               /// Creates a new `NonNull` if `ptr` is non-null.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// use std::ptr::NonNull;
        .               ///
-- line 205 ----------------------------------------
-- line 207 ----------------------------------------
        .               /// let ptr = NonNull::<u32>::new(&mut x as *mut _).expect("ptr is null!");
        .               ///
        .               /// if let Some(ptr) = NonNull::<u32>::new(std::ptr::null_mut()) {
        .               ///     unreachable!();
        .               /// }
        .               /// ```
        .               #[stable(feature = "nonnull", since = "1.25.0")]
        .               #[inline]
  163,362 ( 0.00%)      pub fn new(ptr: *mut T) -> Option<Self> {
  272,270 ( 0.01%)          if !ptr.is_null() {
        .                       // SAFETY: The pointer is already checked and is not null
  163,362 ( 0.00%)              Some(unsafe { Self::new_unchecked(ptr) })
        .                   } else {
        .                       None
        .                   }
  163,362 ( 0.00%)      }
        .           
        .               /// Performs the same functionality as [`std::ptr::from_raw_parts`], except that a
        .               /// `NonNull` pointer is returned, as opposed to a raw `*const` pointer.
        .               ///
        .               /// See the documentation of [`std::ptr::from_raw_parts`] for more details.
        .               ///
        .               /// [`std::ptr::from_raw_parts`]: crate::ptr::from_raw_parts
        .               #[unstable(feature = "ptr_metadata", issue = "81513")]
-- line 230 ----------------------------------------
-- line 268 ----------------------------------------
        .               /// unsafe { *ptr.as_ptr() += 2; }
        .               /// let x_value = unsafe { *ptr.as_ptr() };
        .               /// assert_eq!(x_value, 2);
        .               /// ```
        .               #[stable(feature = "nonnull", since = "1.25.0")]
        .               #[rustc_const_stable(feature = "const_nonnull_as_ptr", since = "1.32.0")]
        .               #[must_use]
        .               #[inline]
2,991,338 ( 0.07%)      pub const fn as_ptr(self) -> *mut T {
        .                   self.pointer as *mut T
1,918,164 ( 0.04%)      }
        .           
        .               /// Returns a shared reference to the value. If the value may be uninitialized, [`as_uninit_ref`]
        .               /// must be used instead.
        .               ///
        .               /// For the mutable counterpart see [`as_mut`].
        .               ///
        .               /// [`as_uninit_ref`]: NonNull::as_uninit_ref
        .               /// [`as_mut`]: NonNull::as_mut
-- line 286 ----------------------------------------
-- line 316 ----------------------------------------
        .               /// println!("{}", ref_x);
        .               /// ```
        .               ///
        .               /// [the module documentation]: crate::ptr#safety
        .               #[stable(feature = "nonnull", since = "1.25.0")]
        .               #[rustc_const_unstable(feature = "const_ptr_as_ref", issue = "91822")]
        .               #[must_use]
        .               #[inline]
   57,972 ( 0.00%)      pub const unsafe fn as_ref<'a>(&self) -> &'a T {
        .                   // SAFETY: the caller must guarantee that `self` meets all the
        .                   // requirements for a reference.
   86,958 ( 0.00%)          unsafe { &*self.as_ptr() }
   57,972 ( 0.00%)      }
        .           
        .               /// Returns a unique reference to the value. If the value may be uninitialized, [`as_uninit_mut`]
        .               /// must be used instead.
        .               ///
        .               /// For the shared counterpart see [`as_ref`].
        .               ///
        .               /// [`as_uninit_mut`]: NonNull::as_uninit_mut
        .               /// [`as_ref`]: NonNull::as_ref
-- line 336 ----------------------------------------
-- line 391 ----------------------------------------
        .               /// let casted_ptr = ptr.cast::<i8>();
        .               /// let raw_ptr: *mut i8 = casted_ptr.as_ptr();
        .               /// ```
        .               #[stable(feature = "nonnull_cast", since = "1.27.0")]
        .               #[rustc_const_stable(feature = "const_nonnull_cast", since = "1.36.0")]
        .               #[must_use = "this returns the result of the operation, \
        .                             without modifying the original"]
        .               #[inline]
  144,554 ( 0.00%)      pub const fn cast<U>(self) -> NonNull<U> {
        .                   // SAFETY: `self` is a `NonNull` pointer which is necessarily non-null
  196,112 ( 0.00%)          unsafe { NonNull::new_unchecked(self.as_ptr() as *mut U) }
   97,890 ( 0.00%)      }
        .           }
        .           
        .           impl<T> NonNull<[T]> {
        .               /// Creates a non-null raw slice from a thin pointer and a length.
        .               ///
        .               /// The `len` argument is the number of **elements**, not the number of bytes.
        .               ///
        .               /// This function is safe, but dereferencing the return value is unsafe.
-- line 410 ----------------------------------------
-- line 425 ----------------------------------------
        .               /// ```
        .               ///
        .               /// (Note that this example artificially demonstrates a use of this method,
        .               /// but `let slice = NonNull::from(&x[..]);` would be a better way to write code like this.)
        .               #[unstable(feature = "nonnull_slice_from_raw_parts", issue = "71941")]
        .               #[rustc_const_unstable(feature = "const_nonnull_slice_from_raw_parts", issue = "71941")]
        .               #[must_use]
        .               #[inline]
  228,184 ( 0.01%)      pub const fn slice_from_raw_parts(data: NonNull<T>, len: usize) -> Self {
        .                   // SAFETY: `data` is a `NonNull` pointer which is necessarily non-null
  456,368 ( 0.01%)          unsafe { Self::new_unchecked(super::slice_from_raw_parts_mut(data.as_ptr(), len)) }
  114,092 ( 0.00%)      }
        .           
        .               /// Returns the length of a non-null raw slice.
        .               ///
        .               /// The returned value is the number of **elements**, not the number of bytes.
        .               ///
        .               /// This function is safe, even when the non-null raw slice cannot be dereferenced to a slice
        .               /// because the pointer does not have a valid address.
        .               ///
-- line 444 ----------------------------------------
-- line 469 ----------------------------------------
        .               ///
        .               /// let slice: NonNull<[i8]> = NonNull::slice_from_raw_parts(NonNull::dangling(), 3);
        .               /// assert_eq!(slice.as_non_null_ptr(), NonNull::new(1 as *mut i8).unwrap());
        .               /// ```
        .               #[inline]
        .               #[must_use]
        .               #[unstable(feature = "slice_ptr_get", issue = "74265")]
        .               #[rustc_const_unstable(feature = "slice_ptr_get", issue = "74265")]
   31,146 ( 0.00%)      pub const fn as_non_null_ptr(self) -> NonNull<T> {
        .                   // SAFETY: We know `self` is non-null.
   51,910 ( 0.00%)          unsafe { NonNull::new_unchecked(self.as_ptr().as_mut_ptr()) }
   20,764 ( 0.00%)      }
        .           
        .               /// Returns a raw pointer to the slice's buffer.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```rust
        .               /// #![feature(slice_ptr_get, nonnull_slice_from_raw_parts)]
        .               /// use std::ptr::NonNull;
-- line 488 ----------------------------------------
-- line 489 ----------------------------------------
        .               ///
        .               /// let slice: NonNull<[i8]> = NonNull::slice_from_raw_parts(NonNull::dangling(), 3);
        .               /// assert_eq!(slice.as_mut_ptr(), 1 as *mut i8);
        .               /// ```
        .               #[inline]
        .               #[must_use]
        .               #[unstable(feature = "slice_ptr_get", issue = "74265")]
        .               #[rustc_const_unstable(feature = "slice_ptr_get", issue = "74265")]
   31,146 ( 0.00%)      pub const fn as_mut_ptr(self) -> *mut T {
   41,528 ( 0.00%)          self.as_non_null_ptr().as_ptr()
   20,764 ( 0.00%)      }
        .           
        .               /// Returns a shared reference to a slice of possibly uninitialized values. In contrast to
        .               /// [`as_ref`], this does not require that the value has to be initialized.
        .               ///
        .               /// For the mutable counterpart see [`as_uninit_slice_mut`].
        .               ///
        .               /// [`as_ref`]: NonNull::as_ref
        .               /// [`as_uninit_slice_mut`]: NonNull::as_uninit_slice_mut
-- line 507 ----------------------------------------
-- line 705 ----------------------------------------
        .                   self.as_ptr().hash(state)
        .               }
        .           }
        .           
        .           #[unstable(feature = "ptr_internals", issue = "none")]
        .           #[rustc_const_unstable(feature = "const_convert", issue = "88674")]
        .           impl<T: ?Sized> const From<Unique<T>> for NonNull<T> {
        .               #[inline]
  135,380 ( 0.00%)      fn from(unique: Unique<T>) -> Self {
        .                   // SAFETY: A Unique pointer cannot be null, so the conditions for
        .                   // new_unchecked() are respected.
  270,760 ( 0.01%)          unsafe { NonNull::new_unchecked(unique.as_ptr()) }
  135,380 ( 0.00%)      }
        .           }
        .           
        .           #[stable(feature = "nonnull", since = "1.25.0")]
        .           #[rustc_const_unstable(feature = "const_convert", issue = "88674")]
        .           impl<T: ?Sized> const From<&mut T> for NonNull<T> {
        .               #[inline]
   32,838 ( 0.00%)      fn from(reference: &mut T) -> Self {
        .                   // SAFETY: A mutable reference cannot be null.
   63,561 ( 0.00%)          unsafe { NonNull { pointer: reference as *mut T } }
   49,257 ( 0.00%)      }
        .           }
        .           
        .           #[stable(feature = "nonnull", since = "1.25.0")]
        .           #[rustc_const_unstable(feature = "const_convert", issue = "88674")]
        .           impl<T: ?Sized> const From<&T> for NonNull<T> {
        .               #[inline]
        .               fn from(reference: &T) -> Self {
        .                   // SAFETY: A reference cannot be null, so the conditions for
-- line 735 ----------------------------------------

  984,478 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/non_null.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/hir/map/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 17 ----------------------------------------
        .           use rustc_span::hygiene::MacroKind;
        .           use rustc_span::source_map::Spanned;
        .           use rustc_span::symbol::{kw, sym, Ident, Symbol};
        .           use rustc_span::Span;
        .           use rustc_target::spec::abi::Abi;
        .           use std::collections::VecDeque;
        .           
        .           fn fn_decl<'hir>(node: Node<'hir>) -> Option<&'hir FnDecl<'hir>> {
   14,635 ( 0.00%)      match node {
        .                   Node::Item(Item { kind: ItemKind::Fn(sig, _, _), .. })
        .                   | Node::TraitItem(TraitItem { kind: TraitItemKind::Fn(sig, _), .. })
        .                   | Node::ImplItem(ImplItem { kind: ImplItemKind::Fn(sig, _), .. }) => Some(&sig.decl),
        .                   Node::Expr(Expr { kind: ExprKind::Closure(_, fn_decl, ..), .. })
        .                   | Node::ForeignItem(ForeignItem { kind: ForeignItemKind::Fn(fn_decl, ..), .. }) => {
        .                       Some(fn_decl)
        .                   }
        .                   _ => None,
        .               }
        .           }
        .           
        .           pub fn fn_sig<'hir>(node: Node<'hir>) -> Option<&'hir FnSig<'hir>> {
      758 ( 0.00%)      match &node {
        .                   Node::Item(Item { kind: ItemKind::Fn(sig, _, _), .. })
        .                   | Node::TraitItem(TraitItem { kind: TraitItemKind::Fn(sig, _), .. })
        .                   | Node::ImplItem(ImplItem { kind: ImplItemKind::Fn(sig, _), .. }) => Some(sig),
        .                   _ => None,
        .               }
        .           }
        .           
        .           pub fn associated_body<'hir>(node: Node<'hir>) -> Option<BodyId> {
  171,598 ( 0.00%)      match node {
        .                   Node::Item(Item {
        .                       kind: ItemKind::Const(_, body) | ItemKind::Static(.., body) | ItemKind::Fn(.., body),
        .                       ..
        .                   })
        .                   | Node::TraitItem(TraitItem {
        .                       kind:
        .                           TraitItemKind::Const(_, Some(body)) | TraitItemKind::Fn(_, TraitFn::Provided(body)),
        .                       ..
        .                   })
        .                   | Node::ImplItem(ImplItem {
        .                       kind: ImplItemKind::Const(_, body) | ImplItemKind::Fn(_, body),
        .                       ..
        .                   })
   33,798 ( 0.00%)          | Node::Expr(Expr { kind: ExprKind::Closure(.., body, _, _), .. }) => Some(*body),
        .           
    4,392 ( 0.00%)          Node::AnonConst(constant) => Some(constant.body),
        .           
        .                   _ => None,
        .               }
        .           }
        .           
        .           fn is_body_owner<'hir>(node: Node<'hir>, hir_id: HirId) -> bool {
        .               match associated_body(node) {
        .                   Some(b) => b.hir_id == hir_id,
-- line 71 ----------------------------------------
-- line 83 ----------------------------------------
        .           pub struct ParentHirIterator<'hir> {
        .               current_id: HirId,
        .               map: Map<'hir>,
        .           }
        .           
        .           impl<'hir> Iterator for ParentHirIterator<'hir> {
        .               type Item = (HirId, Node<'hir>);
        .           
   16,954 ( 0.00%)      fn next(&mut self) -> Option<Self::Item> {
    2,422 ( 0.00%)          if self.current_id == CRATE_HIR_ID {
        .                       return None;
        .                   }
        .                   loop {
        .                       // There are nodes that do not have entries, so we need to skip them.
        .                       let parent_id = self.map.get_parent_node(self.current_id);
        .           
    7,266 ( 0.00%)              if parent_id == self.current_id {
        .                           self.current_id = CRATE_HIR_ID;
        .                           return None;
        .                       }
        .           
    4,844 ( 0.00%)              self.current_id = parent_id;
   19,376 ( 0.00%)              if let Some(node) = self.map.find(parent_id) {
    9,688 ( 0.00%)                  return Some((parent_id, node));
        .                       }
        .                       // If this `HirId` doesn't have an entry, skip it and look for its `parent_id`.
        .                   }
   21,798 ( 0.00%)      }
        .           }
        .           
        .           /// An iterator that walks up the ancestor tree of a given `HirId`.
        .           /// Constructed using `tcx.hir().parent_owner_iter(hir_id)`.
        .           pub struct ParentOwnerIterator<'hir> {
        .               current_id: HirId,
        .               map: Map<'hir>,
        .           }
        .           
        .           impl<'hir> Iterator for ParentOwnerIterator<'hir> {
        .               type Item = (LocalDefId, OwnerNode<'hir>);
        .           
  142,200 ( 0.00%)      fn next(&mut self) -> Option<Self::Item> {
   47,400 ( 0.00%)          if self.current_id.local_id.index() != 0 {
    7,231 ( 0.00%)              self.current_id.local_id = ItemLocalId::new(0);
   28,924 ( 0.00%)              if let Some(node) = self.map.tcx.hir_owner(self.current_id.owner) {
        .                           return Some((self.current_id.owner, node.node));
        .                       }
        .                   }
    8,569 ( 0.00%)          if self.current_id == CRATE_HIR_ID {
    1,484 ( 0.00%)              return None;
        .                   }
        .                   loop {
        .                       // There are nodes that do not have entries, so we need to skip them.
        .                       let parent_id = self.map.def_key(self.current_id.owner).parent;
        .           
        .                       let parent_id = parent_id.map_or(CRATE_HIR_ID.owner, |local_def_index| {
        .                           let def_id = LocalDefId { local_def_index };
        .                           self.map.local_def_id_to_hir_id(def_id).owner
        .                       });
   15,654 ( 0.00%)              self.current_id = HirId::make_owner(parent_id);
        .           
        .                       // If this `HirId` doesn't have an entry, skip it and look for its `parent_id`.
   15,654 ( 0.00%)              if let Some(node) = self.map.tcx.hir_owner(self.current_id.owner) {
        .                           return Some((self.current_id.owner, node.node));
        .                       }
        .                   }
  126,400 ( 0.00%)      }
        .           }
        .           
        .           impl<'hir> Map<'hir> {
      217 ( 0.00%)      pub fn krate(&self) -> &'hir Crate<'hir> {
       31 ( 0.00%)          self.tcx.hir_crate(())
      248 ( 0.00%)      }
        .           
        7 ( 0.00%)      pub fn root_module(&self) -> &'hir Mod<'hir> {
        1 ( 0.00%)          match self.tcx.hir_owner(CRATE_DEF_ID).map(|o| o.node) {
        .                       Some(OwnerNode::Crate(item)) => item,
        .                       _ => bug!(),
        .                   }
        8 ( 0.00%)      }
        .           
        .               pub fn items(&self) -> impl Iterator<Item = &'hir Item<'hir>> + 'hir {
        .                   let krate = self.krate();
        .                   krate.owners.iter().filter_map(|owner| match owner.as_ref()?.node() {
        .                       OwnerNode::Item(item) => Some(item),
        .                       _ => None,
        .                   })
        .               }
-- line 169 ----------------------------------------
-- line 184 ----------------------------------------
        .           
        .               #[inline]
        .               pub fn def_path_hash(self, def_id: LocalDefId) -> DefPathHash {
        .                   // Accessing the DefPathHash is ok, it is incr. comp. stable.
        .                   self.tcx.untracked_resolutions.definitions.def_path_hash(def_id)
        .               }
        .           
        .               #[inline]
  280,584 ( 0.01%)      pub fn local_def_id(&self, hir_id: HirId) -> LocalDefId {
   61,851 ( 0.00%)          self.opt_local_def_id(hir_id).unwrap_or_else(|| {
        .                       bug!(
        .                           "local_def_id: no entry for `{:?}`, which has a map of `{:?}`",
        .                           hir_id,
        .                           self.find(hir_id)
        .                       )
        .                   })
  210,438 ( 0.00%)      }
        .           
        .               #[inline]
  164,936 ( 0.00%)      pub fn opt_local_def_id(&self, hir_id: HirId) -> Option<LocalDefId> {
   48,215 ( 0.00%)          if hir_id.local_id == ItemLocalId::new(0) {
        .                       Some(hir_id.owner)
        .                   } else {
   34,916 ( 0.00%)              self.tcx
        .                           .hir_owner_nodes(hir_id.owner)?
        .                           .local_id_to_def_id
        .                           .get(&hir_id.local_id)
        .                           .copied()
        .                   }
  185,553 ( 0.00%)      }
        .           
        .               #[inline]
      226 ( 0.00%)      pub fn local_def_id_to_hir_id(&self, def_id: LocalDefId) -> HirId {
        .                   // FIXME(#85914) is this access safe for incr. comp.?
   10,241 ( 0.00%)          self.tcx.untracked_resolutions.definitions.local_def_id_to_hir_id(def_id)
      452 ( 0.00%)      }
        .           
        7 ( 0.00%)      pub fn iter_local_def_id(&self) -> impl Iterator<Item = LocalDefId> + '_ {
        .                   // Create a dependency to the crate to be sure we reexcute this when the amount of
        .                   // definitions change.
        1 ( 0.00%)          self.tcx.ensure().hir_crate(());
        .                   self.tcx.untracked_resolutions.definitions.iter_local_def_id()
        9 ( 0.00%)      }
        .           
   21,910 ( 0.00%)      pub fn opt_def_kind(&self, local_def_id: LocalDefId) -> Option<DefKind> {
        .                   let hir_id = self.local_def_id_to_hir_id(local_def_id);
   40,690 ( 0.00%)          let def_kind = match self.find(hir_id)? {
    3,812 ( 0.00%)              Node::Item(item) => match item.kind {
        .                           ItemKind::Static(..) => DefKind::Static,
        .                           ItemKind::Const(..) => DefKind::Const,
        .                           ItemKind::Fn(..) => DefKind::Fn,
        .                           ItemKind::Macro(..) => DefKind::Macro(MacroKind::Bang),
        .                           ItemKind::Mod(..) => DefKind::Mod,
        .                           ItemKind::OpaqueTy(..) => DefKind::OpaqueTy,
        .                           ItemKind::TyAlias(..) => DefKind::TyAlias,
        .                           ItemKind::Enum(..) => DefKind::Enum,
-- line 239 ----------------------------------------
-- line 252 ----------------------------------------
        .                           ForeignItemKind::Static(..) => DefKind::Static,
        .                           ForeignItemKind::Type => DefKind::ForeignTy,
        .                       },
        .                       Node::TraitItem(item) => match item.kind {
        .                           TraitItemKind::Const(..) => DefKind::AssocConst,
        .                           TraitItemKind::Fn(..) => DefKind::AssocFn,
        .                           TraitItemKind::Type(..) => DefKind::AssocTy,
        .                       },
      780 ( 0.00%)              Node::ImplItem(item) => match item.kind {
        .                           ImplItemKind::Const(..) => DefKind::AssocConst,
        .                           ImplItemKind::Fn(..) => DefKind::AssocFn,
        .                           ImplItemKind::TyAlias(..) => DefKind::AssocTy,
        .                       },
        .                       Node::Variant(_) => DefKind::Variant,
        .                       Node::Ctor(variant_data) => {
        .                           // FIXME(eddyb) is this even possible, if we have a `Node::Ctor`?
      900 ( 0.00%)                  assert_ne!(variant_data.ctor_hir_id(), None);
        .           
    1,034 ( 0.00%)                  let ctor_of = match self.find(self.get_parent_node(hir_id)) {
        .                               Some(Node::Item(..)) => def::CtorOf::Struct,
        .                               Some(Node::Variant(..)) => def::CtorOf::Variant,
        .                               _ => unreachable!(),
        .                           };
      360 ( 0.00%)                  DefKind::Ctor(ctor_of, def::CtorKind::from_hir(variant_data))
      720 ( 0.00%)              }
        .                       Node::AnonConst(_) => {
      366 ( 0.00%)                  let inline = match self.find(self.get_parent_node(hir_id)) {
        .                               Some(Node::Expr(&Expr {
        .                                   kind: ExprKind::ConstBlock(ref anon_const), ..
        .                               })) if anon_const.hir_id == hir_id => true,
        .                               _ => false,
        .                           };
        .                           if inline { DefKind::InlineConst } else { DefKind::AnonConst }
        .                       }
        .                       Node::Field(_) => DefKind::Field,
    1,515 ( 0.00%)              Node::Expr(expr) => match expr.kind {
        .                           ExprKind::Closure(.., None) => DefKind::Closure,
        .                           ExprKind::Closure(.., Some(_)) => DefKind::Generator,
        .                           _ => bug!("def_kind: unsupported node: {}", self.node_to_string(hir_id)),
        .                       },
    1,392 ( 0.00%)              Node::GenericParam(param) => match param.kind {
        .                           GenericParamKind::Lifetime { .. } => DefKind::LifetimeParam,
        .                           GenericParamKind::Type { .. } => DefKind::TyParam,
        .                           GenericParamKind::Const { .. } => DefKind::ConstParam,
        .                       },
        .                       Node::Crate(_) => DefKind::Mod,
        .                       Node::Stmt(_)
        .                       | Node::PathSegment(_)
        .                       | Node::Ty(_)
-- line 300 ----------------------------------------
-- line 304 ----------------------------------------
        .                       | Node::Binding(_)
        .                       | Node::Local(_)
        .                       | Node::Param(_)
        .                       | Node::Arm(_)
        .                       | Node::Lifetime(_)
        .                       | Node::Visibility(_)
        .                       | Node::Block(_) => return None,
        .                   };
   12,488 ( 0.00%)          Some(def_kind)
   31,300 ( 0.00%)      }
        .           
        .               pub fn def_kind(&self, local_def_id: LocalDefId) -> DefKind {
        .                   self.opt_def_kind(local_def_id)
        .                       .unwrap_or_else(|| bug!("def_kind: unsupported node: {:?}", local_def_id))
        .               }
        .           
1,837,144 ( 0.04%)      pub fn find_parent_node(&self, id: HirId) -> Option<HirId> {
  229,643 ( 0.01%)          if id.local_id == ItemLocalId::from_u32(0) {
        .                       Some(self.tcx.hir_owner_parent(id.owner))
        .                   } else {
  443,138 ( 0.01%)              let owner = self.tcx.hir_owner_nodes(id.owner)?;
  221,569 ( 0.01%)              let node = owner.nodes[id.local_id].as_ref()?;
  664,707 ( 0.02%)              let hir_id = HirId { owner: id.owner, local_id: node.parent };
        .                       Some(hir_id)
        .                   }
1,837,144 ( 0.04%)      }
        .           
    8,185 ( 0.00%)      pub fn get_parent_node(&self, hir_id: HirId) -> HirId {
1,167,416 ( 0.03%)          self.find_parent_node(hir_id).unwrap()
   16,370 ( 0.00%)      }
        .           
        .               /// Retrieves the `Node` corresponding to `id`, returning `None` if cannot be found.
1,109,048 ( 0.03%)      pub fn find(&self, id: HirId) -> Option<Node<'hir>> {
  138,631 ( 0.00%)          if id.local_id == ItemLocalId::from_u32(0) {
        .                       let owner = self.tcx.hir_owner(id.owner)?;
   83,233 ( 0.00%)              Some(owner.node.into())
        .                   } else {
  110,780 ( 0.00%)              let owner = self.tcx.hir_owner_nodes(id.owner)?;
   55,390 ( 0.00%)              let node = owner.nodes[id.local_id].as_ref()?;
  166,170 ( 0.00%)              Some(node.node)
        .                   }
1,109,048 ( 0.03%)      }
        .           
        .               /// Retrieves the `Node` corresponding to `id`, returning `None` if cannot be found.
        .               #[inline]
        .               pub fn find_by_def_id(&self, id: LocalDefId) -> Option<Node<'hir>> {
   19,836 ( 0.00%)          self.find(self.local_def_id_to_hir_id(id))
        .               }
        .           
        .               /// Retrieves the `Node` corresponding to `id`, panicking if it cannot be found.
   99,555 ( 0.00%)      pub fn get(&self, id: HirId) -> Node<'hir> {
   52,255 ( 0.00%)          self.find(id).unwrap_or_else(|| bug!("couldn't find hir id {} in the HIR map", id))
   66,370 ( 0.00%)      }
        .           
        .               /// Retrieves the `Node` corresponding to `id`, panicking if it cannot be found.
        .               #[inline]
        .               pub fn get_by_def_id(&self, id: LocalDefId) -> Node<'hir> {
        .                   self.find_by_def_id(id).unwrap_or_else(|| bug!("couldn't find {:?} in the HIR map", id))
        .               }
        .           
    2,540 ( 0.00%)      pub fn get_if_local(&self, id: DefId) -> Option<Node<'hir>> {
    1,270 ( 0.00%)          id.as_local().and_then(|id| self.find(self.local_def_id_to_hir_id(id)))
    2,540 ( 0.00%)      }
        .           
        .               pub fn get_generics(&self, id: LocalDefId) -> Option<&'hir Generics<'hir>> {
        .                   let node = self.tcx.hir_owner(id)?;
        .                   match node.node {
        .                       OwnerNode::ImplItem(impl_item) => Some(&impl_item.generics),
        .                       OwnerNode::TraitItem(trait_item) => Some(&trait_item.generics),
        .                       OwnerNode::Item(Item {
        .                           kind:
-- line 374 ----------------------------------------
-- line 381 ----------------------------------------
        .                               | ItemKind::TraitAlias(generics, _)
        .                               | ItemKind::Impl(Impl { generics, .. }),
        .                           ..
        .                       }) => Some(generics),
        .                       _ => None,
        .                   }
        .               }
        .           
  181,020 ( 0.00%)      pub fn item(&self, id: ItemId) -> &'hir Item<'hir> {
   51,720 ( 0.00%)          self.tcx.hir_owner(id.def_id).unwrap().node.expect_item()
  206,880 ( 0.00%)      }
        .           
        .               pub fn trait_item(&self, id: TraitItemId) -> &'hir TraitItem<'hir> {
        .                   self.tcx.hir_owner(id.def_id).unwrap().node.expect_trait_item()
        .               }
        .           
  156,933 ( 0.00%)      pub fn impl_item(&self, id: ImplItemId) -> &'hir ImplItem<'hir> {
   44,838 ( 0.00%)          self.tcx.hir_owner(id.def_id).unwrap().node.expect_impl_item()
  179,352 ( 0.00%)      }
        .           
        .               pub fn foreign_item(&self, id: ForeignItemId) -> &'hir ForeignItem<'hir> {
        .                   self.tcx.hir_owner(id.def_id).unwrap().node.expect_foreign_item()
        .               }
        .           
  312,459 ( 0.01%)      pub fn body(&self, id: BodyId) -> &'hir Body<'hir> {
   89,274 ( 0.00%)          self.tcx.hir_owner_nodes(id.hir_id.owner).unwrap().bodies[&id.hir_id.local_id]
  357,096 ( 0.01%)      }
        .           
    8,781 ( 0.00%)      pub fn fn_decl_by_hir_id(&self, hir_id: HirId) -> Option<&'hir FnDecl<'hir>> {
    8,781 ( 0.00%)          if let Some(node) = self.find(hir_id) {
        .                       fn_decl(node)
        .                   } else {
        .                       bug!("no node for hir_id `{}`", hir_id)
        .                   }
    5,854 ( 0.00%)      }
        .           
      330 ( 0.00%)      pub fn fn_sig_by_hir_id(&self, hir_id: HirId) -> Option<&'hir FnSig<'hir>> {
      330 ( 0.00%)          if let Some(node) = self.find(hir_id) {
        .                       fn_sig(node)
        .                   } else {
        .                       bug!("no node for hir_id `{}`", hir_id)
        .                   }
      330 ( 0.00%)      }
        .           
        .               pub fn enclosing_body_owner(&self, hir_id: HirId) -> HirId {
        .                   for (parent, _) in self.parent_iter(hir_id) {
        .                       if let Some(body) = self.maybe_body_owned_by(parent) {
        .                           return self.body_owner(body);
        .                       }
        .                   }
        .           
        .                   bug!("no `enclosing_body_owner` for hir_id `{}`", hir_id);
        .               }
        .           
        .               /// Returns the `HirId` that corresponds to the definition of
        .               /// which this is the body of, i.e., a `fn`, `const` or `static`
        .               /// item (possibly associated), a closure, or a `hir::AnonConst`.
  207,912 ( 0.00%)      pub fn body_owner(&self, BodyId { hir_id }: BodyId) -> HirId {
        .                   let parent = self.get_parent_node(hir_id);
  155,934 ( 0.00%)          assert!(self.find(parent).map_or(false, |n| is_body_owner(n, hir_id)));
        .                   parent
  207,912 ( 0.00%)      }
        .           
   65,645 ( 0.00%)      pub fn body_owner_def_id(&self, id: BodyId) -> LocalDefId {
  103,085 ( 0.00%)          self.local_def_id(self.body_owner(id))
   65,645 ( 0.00%)      }
        .           
        .               /// Given a `HirId`, returns the `BodyId` associated with it,
        .               /// if the node is a body owner, otherwise returns `None`.
    8,991 ( 0.00%)      pub fn maybe_body_owned_by(&self, hir_id: HirId) -> Option<BodyId> {
   29,672 ( 0.00%)          self.find(hir_id).map(associated_body).flatten()
   26,973 ( 0.00%)      }
        .           
        .               /// Given a body owner's id, returns the `BodyId` associated with it.
   24,291 ( 0.00%)      pub fn body_owned_by(&self, id: HirId) -> BodyId {
        .                   self.maybe_body_owned_by(id).unwrap_or_else(|| {
        .                       span_bug!(
        .                           self.span(id),
        .                           "body_owned_by: {} has no associated body",
        .                           self.node_to_string(id)
        .                       );
        .                   })
   18,893 ( 0.00%)      }
        .           
      906 ( 0.00%)      pub fn body_param_names(&self, id: BodyId) -> impl Iterator<Item = Ident> + 'hir {
    8,378 ( 0.00%)          self.body(id).params.iter().map(|arg| match arg.pat.kind {
    2,830 ( 0.00%)              PatKind::Binding(_, _, ident, _) => ident,
        .                       _ => Ident::empty(),
        .                   })
    2,718 ( 0.00%)      }
        .           
        .               /// Returns the `BodyOwnerKind` of this `LocalDefId`.
        .               ///
        .               /// Panics if `LocalDefId` does not have an associated body.
   39,321 ( 0.00%)      pub fn body_owner_kind(&self, id: HirId) -> BodyOwnerKind {
   95,575 ( 0.00%)          match self.get(id) {
        .                       Node::Item(&Item { kind: ItemKind::Const(..), .. })
        .                       | Node::TraitItem(&TraitItem { kind: TraitItemKind::Const(..), .. })
        .                       | Node::ImplItem(&ImplItem { kind: ImplItemKind::Const(..), .. })
        .                       | Node::AnonConst(_) => BodyOwnerKind::Const,
        .                       Node::Ctor(..)
        .                       | Node::Item(&Item { kind: ItemKind::Fn(..), .. })
        .                       | Node::TraitItem(&TraitItem { kind: TraitItemKind::Fn(..), .. })
        .                       | Node::ImplItem(&ImplItem { kind: ImplItemKind::Fn(..), .. }) => BodyOwnerKind::Fn,
        .                       Node::Item(&Item { kind: ItemKind::Static(_, m, _), .. }) => BodyOwnerKind::Static(m),
        .                       Node::Expr(&Expr { kind: ExprKind::Closure(..), .. }) => BodyOwnerKind::Closure,
        .                       node => bug!("{:#?} is not a body node", node),
        .                   }
   39,321 ( 0.00%)      }
        .           
        .               /// Returns the `ConstContext` of the body associated with this `LocalDefId`.
        .               ///
        .               /// Panics if `LocalDefId` does not have an associated body.
        .               ///
        .               /// This should only be used for determining the context of a body, a return
        .               /// value of `Some` does not always suggest that the owner of the body is `const`,
        .               /// just that it has to be checked as if it were.
   43,968 ( 0.00%)      pub fn body_const_context(&self, did: LocalDefId) -> Option<ConstContext> {
        .                   let hir_id = self.local_def_id_to_hir_id(did);
   65,952 ( 0.00%)          let ccx = match self.body_owner_kind(hir_id) {
        .                       BodyOwnerKind::Const => ConstContext::Const,
        .                       BodyOwnerKind::Static(mt) => ConstContext::Static(mt),
        .           
    3,624 ( 0.00%)              BodyOwnerKind::Fn if self.tcx.is_constructor(did.to_def_id()) => return None,
    3,624 ( 0.00%)              BodyOwnerKind::Fn if self.tcx.is_const_fn_raw(did.to_def_id()) => ConstContext::ConstFn,
        .                       BodyOwnerKind::Fn
    7,248 ( 0.00%)                  if self.tcx.has_attr(did.to_def_id(), sym::default_method_body_is_const) =>
        .                       {
        .                           ConstContext::ConstFn
        .                       }
        .                       BodyOwnerKind::Fn | BodyOwnerKind::Closure => return None,
        .                   };
        .           
        .                   Some(ccx)
   49,464 ( 0.00%)      }
        .           
        .               /// Returns an iterator of the `DefId`s for all body-owners in this
        .               /// crate. If you would prefer to iterate over the bodies
        .               /// themselves, you can do `self.hir().krate().body_ids.iter()`.
       21 ( 0.00%)      pub fn body_owners(self) -> impl Iterator<Item = LocalDefId> + 'hir {
        3 ( 0.00%)          self.krate()
        .                       .owners
        .                       .iter_enumerated()
        .                       .flat_map(move |(owner, owner_info)| {
    9,390 ( 0.00%)                  let bodies = &owner_info.as_ref()?.nodes.bodies;
        .                           Some(bodies.iter().map(move |&(local_id, _)| {
      353 ( 0.00%)                      let hir_id = HirId { owner, local_id };
        .                               let body_id = BodyId { hir_id };
   12,131 ( 0.00%)                      self.body_owner_def_id(body_id)
        .                           }))
        .                       })
        .                       .flatten()
       15 ( 0.00%)      }
        .           
       10 ( 0.00%)      pub fn par_body_owners<F: Fn(LocalDefId) + Sync + Send>(self, f: F) {
        .                   use rustc_data_structures::sync::{par_iter, ParallelIterator};
        .                   #[cfg(parallel_compiler)]
        .                   use rustc_rayon::iter::IndexedParallelIterator;
        .           
        3 ( 0.00%)          par_iter(&self.krate().owners.raw).enumerate().for_each(|(owner, owner_info)| {
        .                       let owner = LocalDefId::new(owner);
   18,780 ( 0.00%)              if let Some(owner_info) = owner_info {
        .                           par_iter(owner_info.nodes.bodies.range(..)).for_each(|(local_id, _)| {
        .                               let hir_id = HirId { owner, local_id: *local_id };
        .                               let body_id = BodyId { hir_id };
   11,871 ( 0.00%)                      f(self.body_owner_def_id(body_id))
        .                           })
        .                       }
        .                   });
        8 ( 0.00%)      }
        .           
        .               pub fn ty_param_owner(&self, id: HirId) -> LocalDefId {
        .                   match self.get(id) {
        .                       Node::Item(&Item { kind: ItemKind::Trait(..) | ItemKind::TraitAlias(..), .. }) => {
        .                           id.expect_owner()
        .                       }
        .                       Node::GenericParam(_) => self.get_parent_item(id),
        .                       _ => bug!("ty_param_owner: {} not a type parameter", self.node_to_string(id)),
-- line 558 ----------------------------------------
-- line 564 ----------------------------------------
        .                       Node::Item(&Item { kind: ItemKind::Trait(..) | ItemKind::TraitAlias(..), .. }) => {
        .                           kw::SelfUpper
        .                       }
        .                       Node::GenericParam(param) => param.name.ident().name,
        .                       _ => bug!("ty_param_name: {} not a type parameter", self.node_to_string(id)),
        .                   }
        .               }
        .           
      567 ( 0.00%)      pub fn trait_impls(&self, trait_did: DefId) -> &'hir [LocalDefId] {
       63 ( 0.00%)          self.tcx.all_local_trait_impls(()).get(&trait_did).map_or(&[], |xs| &xs[..])
      567 ( 0.00%)      }
        .           
        .               /// Gets the attributes on the crate. This is preferable to
        .               /// invoking `krate.attrs` because it registers a tighter
        .               /// dep-graph access.
        .               pub fn krate_attrs(&self) -> &'hir [ast::Attribute] {
       20 ( 0.00%)          self.attrs(CRATE_HIR_ID)
        .               }
        .           
      350 ( 0.00%)      pub fn get_module(&self, module: LocalDefId) -> (&'hir Mod<'hir>, Span, HirId) {
        .                   let hir_id = HirId::make_owner(module);
      250 ( 0.00%)          match self.tcx.hir_owner(module).map(|o| o.node) {
       78 ( 0.00%)              Some(OwnerNode::Item(&Item { span, kind: ItemKind::Mod(ref m), .. })) => {
        .                           (m, span, hir_id)
        .                       }
       33 ( 0.00%)              Some(OwnerNode::Crate(item)) => (item, item.inner, hir_id),
        .                       node => panic!("not a module: {:?}", node),
        .                   }
      450 ( 0.00%)      }
        .           
        .               /// Walks the contents of a crate. See also `Crate::visit_all_items`.
       11 ( 0.00%)      pub fn walk_toplevel_module(self, visitor: &mut impl Visitor<'hir>) {
       30 ( 0.00%)          let (top_mod, span, hir_id) = self.get_module(CRATE_DEF_ID);
        .                   visitor.visit_mod(top_mod, span, hir_id);
        8 ( 0.00%)      }
        .           
        .               /// Walks the attributes in a crate.
       20 ( 0.00%)      pub fn walk_attributes(self, visitor: &mut impl Visitor<'hir>) {
        2 ( 0.00%)          let krate = self.krate();
        .                   for (owner, info) in krate.owners.iter_enumerated() {
   12,520 ( 0.00%)              if let Some(info) = info {
        .                           for (local_id, attrs) in info.attrs.map.iter() {
        .                               let id = HirId { owner, local_id: *local_id };
        .                               for a in *attrs {
   12,360 ( 0.00%)                          visitor.visit_attribute(id, a)
        .                               }
        .                           }
        .                       }
        .                   }
       16 ( 0.00%)      }
        .           
        .               /// Visits all items in the crate in some deterministic (but
        .               /// unspecified) order. If you just need to process every item,
        .               /// but don't care about nesting, this method is the best choice.
        .               ///
        .               /// If you do care about nesting -- usually because your algorithm
        .               /// follows lexical scoping rules -- then you want a different
        .               /// approach. You should override `visit_nested_item` in your
        .               /// visitor and then call `intravisit::walk_crate` instead.
      152 ( 0.00%)      pub fn visit_all_item_likes<V>(&self, visitor: &mut V)
        .               where
        .                   V: itemlikevisit::ItemLikeVisitor<'hir>,
        .               {
       21 ( 0.00%)          let krate = self.krate();
       71 ( 0.00%)          for owner in krate.owners.iter().filter_map(Option::as_ref) {
   62,424 ( 0.00%)              match owner.node() {
   44,791 ( 0.00%)                  OwnerNode::Item(item) => visitor.visit_item(item),
        .                           OwnerNode::ForeignItem(item) => visitor.visit_foreign_item(item),
    2,340 ( 0.00%)                  OwnerNode::ImplItem(item) => visitor.visit_impl_item(item),
        .                           OwnerNode::TraitItem(item) => visitor.visit_trait_item(item),
        .                           OwnerNode::Crate(_) => {}
        .                       }
        .                   }
      152 ( 0.00%)      }
        .           
        .               /// A parallel version of `visit_all_item_likes`.
        .               pub fn par_visit_all_item_likes<V>(&self, visitor: &V)
        .               where
        .                   V: itemlikevisit::ParItemLikeVisitor<'hir> + Sync + Send,
        .               {
        1 ( 0.00%)          let krate = self.krate();
        2 ( 0.00%)          par_for_each_in(&krate.owners.raw, |owner| match owner.as_ref().map(OwnerInfo::node) {
      953 ( 0.00%)              Some(OwnerNode::Item(item)) => visitor.visit_item(item),
        .                       Some(OwnerNode::ForeignItem(item)) => visitor.visit_foreign_item(item),
      780 ( 0.00%)              Some(OwnerNode::ImplItem(item)) => visitor.visit_impl_item(item),
        .                       Some(OwnerNode::TraitItem(item)) => visitor.visit_trait_item(item),
        .                       Some(OwnerNode::Crate(_)) | None => {}
        .                   })
        .               }
        .           
    1,204 ( 0.00%)      pub fn visit_item_likes_in_module<V>(&self, module: LocalDefId, visitor: &mut V)
        .               where
        .                   V: ItemLikeVisitor<'hir>,
        .               {
      154 ( 0.00%)          let module = self.tcx.hir_module_items(module);
        .           
      168 ( 0.00%)          for id in module.items.iter() {
   42,885 ( 0.00%)              visitor.visit_item(self.item(*id));
        .                   }
        .           
      168 ( 0.00%)          for id in module.trait_items.iter() {
        .                       visitor.visit_trait_item(self.trait_item(*id));
        .                   }
        .           
      168 ( 0.00%)          for id in module.impl_items.iter() {
   30,420 ( 0.00%)              visitor.visit_impl_item(self.impl_item(*id));
        .                   }
        .           
      168 ( 0.00%)          for id in module.foreign_items.iter() {
        .                       visitor.visit_foreign_item(self.foreign_item(*id));
        .                   }
    1,232 ( 0.00%)      }
        .           
       46 ( 0.00%)      pub fn for_each_module(&self, f: impl Fn(LocalDefId)) {
        .                   let mut queue = VecDeque::new();
        .                   queue.push_back(CRATE_DEF_ID);
        .           
      112 ( 0.00%)          while let Some(id) = queue.pop_front() {
        .                       f(id);
       42 ( 0.00%)              let items = self.tcx.hir_module_items(id);
      448 ( 0.00%)              queue.extend(items.submodules.iter().copied())
        .                   }
       40 ( 0.00%)      }
        .           
        .               #[cfg(not(parallel_compiler))]
        .               #[inline]
        .               pub fn par_for_each_module(&self, f: impl Fn(LocalDefId)) {
        4 ( 0.00%)          self.for_each_module(f)
        .               }
        .           
        .               #[cfg(parallel_compiler)]
        .               pub fn par_for_each_module(&self, f: impl Fn(LocalDefId) + Sync) {
        .                   use rustc_data_structures::sync::{par_iter, ParallelIterator};
        .                   par_iter_submodules(self.tcx, CRATE_DEF_ID, &f);
        .           
        .                   fn par_iter_submodules<F>(tcx: TyCtxt<'_>, module: LocalDefId, f: &F)
-- line 699 ----------------------------------------
-- line 703 ----------------------------------------
        .                       (*f)(module);
        .                       let items = tcx.hir_module_items(module);
        .                       par_iter(&items.submodules[..]).for_each(|&sm| par_iter_submodules(tcx, sm, f));
        .                   }
        .               }
        .           
        .               /// Returns an iterator for the nodes in the ancestor tree of the `current_id`
        .               /// until the crate root is reached. Prefer this over your own loop using `get_parent_node`.
    2,361 ( 0.00%)      pub fn parent_iter(self, current_id: HirId) -> ParentHirIterator<'hir> {
        .                   ParentHirIterator { current_id, map: self }
    9,444 ( 0.00%)      }
        .           
        .               /// Returns an iterator for the nodes in the ancestor tree of the `current_id`
        .               /// until the crate root is reached. Prefer this over your own loop using `get_parent_node`.
        .               pub fn parent_owner_iter(self, current_id: HirId) -> ParentOwnerIterator<'hir> {
        .                   ParentOwnerIterator { current_id, map: self }
   41,871 ( 0.00%)      }
        .           
        .               /// Checks if the node is left-hand side of an assignment.
        .               pub fn is_lhs(&self, id: HirId) -> bool {
        .                   match self.find(self.get_parent_node(id)) {
        .                       Some(Node::Expr(expr)) => match expr.kind {
        .                           ExprKind::Assign(lhs, _rhs, _span) => lhs.hir_id == id,
        .                           _ => false,
        .                       },
-- line 727 ----------------------------------------
-- line 792 ----------------------------------------
        .                   }
        .                   None
        .               }
        .           
        .               /// Retrieves the `HirId` for `id`'s parent item, or `id` itself if no
        .               /// parent item is in this map. The "parent item" is the closest parent node
        .               /// in the HIR which is recorded by the map and is an item, either an item
        .               /// in a module, trait, or impl.
   12,551 ( 0.00%)      pub fn get_parent_item(&self, hir_id: HirId) -> LocalDefId {
  113,167 ( 0.00%)          if let Some((def_id, _node)) = self.parent_owner_iter(hir_id).next() {
        .                       def_id
        .                   } else {
        .                       CRATE_DEF_ID
        .                   }
   25,102 ( 0.00%)      }
        .           
        .               /// Returns the `HirId` of `id`'s nearest module parent, or `id` itself if no
        .               /// module parent is in this map.
        .               pub(super) fn get_module_parent_node(&self, hir_id: HirId) -> LocalDefId {
   21,408 ( 0.00%)          for (def_id, node) in self.parent_owner_iter(hir_id) {
    7,756 ( 0.00%)              if let OwnerNode::Item(&Item { kind: ItemKind::Mod(_), .. }) = node {
        .                           return def_id;
        .                       }
        .                   }
        .                   CRATE_DEF_ID
        .               }
        .           
        .               /// When on an if expression, a match arm tail expression or a match arm, give back
        .               /// the enclosing `if` or `match` expression.
-- line 820 ----------------------------------------
-- line 885 ----------------------------------------
        .                       }
        .                   }
        .                   bug!(
        .                       "expected foreign mod or inlined parent, found {}",
        .                       self.node_to_string(HirId::make_owner(parent))
        .                   )
        .               }
        .           
   54,810 ( 0.00%)      pub fn expect_item(&self, id: LocalDefId) -> &'hir Item<'hir> {
   23,490 ( 0.00%)          match self.tcx.hir_owner(id) {
        .                       Some(Owner { node: OwnerNode::Item(item), .. }) => item,
        .                       _ => bug!("expected item, found {}", self.node_to_string(HirId::make_owner(id))),
        .                   }
   62,640 ( 0.00%)      }
        .           
   10,920 ( 0.00%)      pub fn expect_impl_item(&self, id: LocalDefId) -> &'hir ImplItem<'hir> {
    4,680 ( 0.00%)          match self.tcx.hir_owner(id) {
        .                       Some(Owner { node: OwnerNode::ImplItem(item), .. }) => item,
        .                       _ => bug!("expected impl item, found {}", self.node_to_string(HirId::make_owner(id))),
        .                   }
   12,480 ( 0.00%)      }
        .           
        .               pub fn expect_trait_item(&self, id: LocalDefId) -> &'hir TraitItem<'hir> {
        .                   match self.tcx.hir_owner(id) {
        .                       Some(Owner { node: OwnerNode::TraitItem(item), .. }) => item,
        .                       _ => bug!("expected trait item, found {}", self.node_to_string(HirId::make_owner(id))),
        .                   }
        .               }
        .           
-- line 913 ----------------------------------------
-- line 929 ----------------------------------------
        .           
        .               pub fn expect_expr(&self, id: HirId) -> &'hir Expr<'hir> {
        .                   match self.find(id) {
        .                       Some(Node::Expr(expr)) => expr,
        .                       _ => bug!("expected expr, found {}", self.node_to_string(id)),
        .                   }
        .               }
        .           
   13,653 ( 0.00%)      pub fn opt_name(&self, id: HirId) -> Option<Symbol> {
    4,603 ( 0.00%)          Some(match self.get(id) {
        .                       Node::Item(i) => i.ident.name,
        .                       Node::ForeignItem(fi) => fi.ident.name,
        .                       Node::ImplItem(ii) => ii.ident.name,
        .                       Node::TraitItem(ti) => ti.ident.name,
        .                       Node::Variant(v) => v.ident.name,
        .                       Node::Field(f) => f.ident.name,
        .                       Node::Lifetime(lt) => lt.name.ident().name,
    4,473 ( 0.00%)              Node::GenericParam(param) => param.name.ident().name,
       52 ( 0.00%)              Node::Binding(&Pat { kind: PatKind::Binding(_, _, l, _), .. }) => l.name,
        .                       Node::Ctor(..) => self.name(HirId::make_owner(self.get_parent_item(id))),
        .                       _ => return None,
        .                   })
    7,585 ( 0.00%)      }
        .           
   12,032 ( 0.00%)      pub fn name(&self, id: HirId) -> Symbol {
    4,577 ( 0.00%)          match self.opt_name(id) {
        .                       Some(name) => name,
        .                       None => bug!("no name for {}", self.node_to_string(id)),
        .                   }
    9,024 ( 0.00%)      }
        .           
        .               /// Given a node ID, gets a list of attributes associated with the AST
        .               /// corresponding to the node-ID.
2,349,074 ( 0.06%)      pub fn attrs(&self, id: HirId) -> &'hir [ast::Attribute] {
  335,582 ( 0.01%)          self.tcx.hir_attrs(id.owner).get(id.local_id)
2,684,656 ( 0.06%)      }
        .           
        .               /// Gets the span of the definition of the specified HIR node.
        .               /// This is used by `tcx.get_span`
   17,898 ( 0.00%)      pub fn span(&self, hir_id: HirId) -> Span {
   63,686 ( 0.00%)          self.opt_span(hir_id)
        .                       .unwrap_or_else(|| bug!("hir::map::Map::span: id not in map: {:?}", hir_id))
   17,898 ( 0.00%)      }
        .           
  165,550 ( 0.00%)      pub fn opt_span(&self, hir_id: HirId) -> Option<Span> {
  165,550 ( 0.00%)          let span = match self.find(hir_id)? {
        .                       Node::Param(param) => param.span,
    2,990 ( 0.00%)              Node::Item(item) => match &item.kind {
        .                           ItemKind::Fn(sig, _, _) => sig.span,
    1,966 ( 0.00%)                  _ => item.span,
        .                       },
        .                       Node::ForeignItem(foreign_item) => foreign_item.span,
        .                       Node::TraitItem(trait_item) => match &trait_item.kind {
        .                           TraitItemKind::Fn(sig, _) => sig.span,
        .                           _ => trait_item.span,
        .                       },
    6,228 ( 0.00%)              Node::ImplItem(impl_item) => match &impl_item.kind {
    6,224 ( 0.00%)                  ImplItemKind::Fn(sig, _) => sig.span,
        4 ( 0.00%)                  _ => impl_item.span,
        .                       },
      134 ( 0.00%)              Node::Variant(variant) => variant.span,
      626 ( 0.00%)              Node::Field(field) => field.span,
    2,135 ( 0.00%)              Node::AnonConst(constant) => self.body(constant.body).value.span,
        .                       Node::Expr(expr) => expr.span,
        .                       Node::Stmt(stmt) => stmt.span,
        .                       Node::PathSegment(seg) => seg.ident.span,
        .                       Node::Ty(ty) => ty.span,
        .                       Node::TraitRef(tr) => tr.path.span,
        .                       Node::Binding(pat) => pat.span,
        .                       Node::Pat(pat) => pat.span,
        .                       Node::Arm(arm) => arm.span,
        .                       Node::Block(block) => block.span,
    1,641 ( 0.00%)              Node::Ctor(..) => match self.find(self.get_parent_node(hir_id))? {
        .                           Node::Item(item) => item.span,
        .                           Node::Variant(variant) => variant.span,
        .                           _ => unreachable!(),
        .                       },
        .                       Node::Lifetime(lifetime) => lifetime.span,
        .                       Node::GenericParam(param) => param.span,
        .                       Node::Visibility(&Spanned {
        .                           node: VisibilityKind::Restricted { ref path, .. },
        .                           ..
        .                       }) => path.span,
        .                       Node::Infer(i) => i.span,
        .                       Node::Visibility(v) => bug!("unexpected Visibility {:?}", v),
        .                       Node::Local(local) => local.span,
        4 ( 0.00%)              Node::Crate(item) => item.inner,
        .                   };
        .                   Some(span)
  236,500 ( 0.01%)      }
        .           
        .               /// Like `hir.span()`, but includes the body of function items
        .               /// (instead of just the function header)
        .               pub fn span_with_body(&self, hir_id: HirId) -> Span {
        .                   match self.find(hir_id) {
        .                       Some(Node::TraitItem(item)) => item.span,
        .                       Some(Node::ImplItem(impl_item)) => impl_item.span,
        .                       Some(Node::Item(item)) => item.span,
        .                       Some(_) => self.span(hir_id),
        .                       _ => bug!("hir::map::Map::span_with_body: id not in map: {:?}", hir_id),
        .                   }
        .               }
        .           
    1,534 ( 0.00%)      pub fn span_if_local(&self, id: DefId) -> Option<Span> {
    6,363 ( 0.00%)          id.as_local().and_then(|id| self.opt_span(self.local_def_id_to_hir_id(id)))
    2,301 ( 0.00%)      }
        .           
        .               pub fn res_span(&self, res: Res) -> Option<Span> {
        .                   match res {
        .                       Res::Err => None,
        .                       Res::Local(id) => Some(self.span(id)),
        .                       res => self.span_if_local(res.opt_def_id()?),
        .                   }
        .               }
-- line 1042 ----------------------------------------
-- line 1062 ----------------------------------------
        .           }
        .           
        .           impl<'hir> intravisit::Map<'hir> for Map<'hir> {
        .               fn find(&self, hir_id: HirId) -> Option<Node<'hir>> {
        .                   self.find(hir_id)
        .               }
        .           
        .               fn body(&self, id: BodyId) -> &'hir Body<'hir> {
   25,904 ( 0.00%)          self.body(id)
        .               }
        .           
        .               fn item(&self, id: ItemId) -> &'hir Item<'hir> {
   11,587 ( 0.00%)          self.item(id)
        .               }
        .           
        .               fn trait_item(&self, id: TraitItemId) -> &'hir TraitItem<'hir> {
        .                   self.trait_item(id)
        .               }
        .           
        .               fn impl_item(&self, id: ImplItemId) -> &'hir ImplItem<'hir> {
   10,920 ( 0.00%)          self.impl_item(id)
        .               }
        .           
        .               fn foreign_item(&self, id: ForeignItemId) -> &'hir ForeignItem<'hir> {
        .                   self.foreign_item(id)
        .               }
        .           }
        .           
        7 ( 0.00%)  pub(super) fn crate_hash(tcx: TyCtxt<'_>, crate_num: CrateNum) -> Svh {
        .               debug_assert_eq!(crate_num, LOCAL_CRATE);
        .               let krate = tcx.hir_crate(());
        3 ( 0.00%)      let hir_body_hash = krate.hir_hash;
        .           
        .               let upstream_crates = upstream_crates(tcx);
        .           
        .               // We hash the final, remapped names of all local source files so we
        .               // don't have to include the path prefix remapping commandline args.
        .               // If we included the full mapping in the SVH, we could only have
        .               // reproducible builds by compiling from the same directory. So we just
        .               // hash the result of the mapping instead of the mapping itself.
        2 ( 0.00%)      let mut source_file_names: Vec<_> = tcx
        .                   .sess
        .                   .source_map()
        .                   .files()
        .                   .iter()
        .                   .filter(|source_file| source_file.cnum == LOCAL_CRATE)
       56 ( 0.00%)          .map(|source_file| source_file.name_hash)
        .                   .collect();
        .           
        .               source_file_names.sort_unstable();
        .           
        .               let mut hcx = tcx.create_stable_hashing_context();
        .               let mut stable_hasher = StableHasher::new();
        .               hir_body_hash.hash_stable(&mut hcx, &mut stable_hasher);
        .               upstream_crates.hash_stable(&mut hcx, &mut stable_hasher);
        .               source_file_names.hash_stable(&mut hcx, &mut stable_hasher);
        3 ( 0.00%)      if tcx.sess.opts.debugging_opts.incremental_relative_spans {
        .                   let definitions = &tcx.untracked_resolutions.definitions;
        .                   let mut owner_spans: Vec<_> = krate
        .                       .owners
        .                       .iter_enumerated()
        .                       .filter_map(|(def_id, info)| {
        .                           let _ = info.as_ref()?;
        .                           let def_path_hash = definitions.def_path_hash(def_id);
        .                           let span = definitions.def_span(def_id);
        .                           debug_assert_eq!(span.parent(), None);
        .                           Some((def_path_hash, span))
        .                       })
        .                       .collect();
        .                   owner_spans.sort_unstable_by_key(|bn| bn.0);
        .                   owner_spans.hash_stable(&mut hcx, &mut stable_hasher);
        .               }
        3 ( 0.00%)      tcx.sess.opts.dep_tracking_hash(true).hash_stable(&mut hcx, &mut stable_hasher);
        2 ( 0.00%)      tcx.sess.local_stable_crate_id().hash_stable(&mut hcx, &mut stable_hasher);
        .           
        .               let crate_hash: Fingerprint = stable_hasher.finish();
        1 ( 0.00%)      Svh::new(crate_hash.to_smaller_hash())
        9 ( 0.00%)  }
        .           
        .           fn upstream_crates(tcx: TyCtxt<'_>) -> Vec<(StableCrateId, Svh)> {
        .               let mut upstream_crates: Vec<_> = tcx
        .                   .crates(())
        .                   .iter()
        .                   .map(|&cnum| {
      110 ( 0.00%)              let stable_crate_id = tcx.resolutions(()).cstore.stable_crate_id(cnum);
       22 ( 0.00%)              let hash = tcx.crate_hash(cnum);
        .                       (stable_crate_id, hash)
        .                   })
        .                   .collect();
        .               upstream_crates.sort_unstable_by_key(|&(stable_crate_id, _)| stable_crate_id);
        .               upstream_crates
        .           }
        .           
        .           fn hir_id_to_string(map: &Map<'_>, id: HirId) -> String {
-- line 1155 ----------------------------------------
-- line 1238 ----------------------------------------
        .                   Some(Node::Lifetime(_)) => node_str("lifetime"),
        .                   Some(Node::GenericParam(ref param)) => format!("generic_param {:?}{}", param, id_str),
        .                   Some(Node::Visibility(ref vis)) => format!("visibility {:?}{}", vis, id_str),
        .                   Some(Node::Crate(..)) => String::from("root_crate"),
        .                   None => format!("unknown node{}", id_str),
        .               }
        .           }
        .           
      126 ( 0.00%)  pub(super) fn hir_module_items(tcx: TyCtxt<'_>, module_id: LocalDefId) -> ModuleItems {
       84 ( 0.00%)      let mut collector = ModuleCollector {
        .                   tcx,
        .                   submodules: Vec::default(),
        .                   items: Vec::default(),
        .                   trait_items: Vec::default(),
        .                   impl_items: Vec::default(),
        .                   foreign_items: Vec::default(),
        .               };
        .           
       70 ( 0.00%)      let (hir_mod, span, hir_id) = tcx.hir().get_module(module_id);
        .               collector.visit_mod(hir_mod, span, hir_id);
        .           
      224 ( 0.00%)      let ModuleCollector { submodules, items, trait_items, impl_items, foreign_items, .. } =
        .                   collector;
      154 ( 0.00%)      return ModuleItems {
       56 ( 0.00%)          submodules: submodules.into_boxed_slice(),
       56 ( 0.00%)          items: items.into_boxed_slice(),
       56 ( 0.00%)          trait_items: trait_items.into_boxed_slice(),
       56 ( 0.00%)          impl_items: impl_items.into_boxed_slice(),
       56 ( 0.00%)          foreign_items: foreign_items.into_boxed_slice(),
        .               };
        .           
        .               struct ModuleCollector<'tcx> {
        .                   tcx: TyCtxt<'tcx>,
        .                   submodules: Vec<LocalDefId>,
        .                   items: Vec<ItemId>,
        .                   trait_items: Vec<TraitItemId>,
        .                   impl_items: Vec<ImplItemId>,
        .                   foreign_items: Vec<ForeignItemId>,
        .               }
        .           
        .               impl<'hir> Visitor<'hir> for ModuleCollector<'hir> {
        .                   type NestedFilter = nested_filter::All;
        .           
        .                   fn nested_visit_map(&mut self) -> Self::Map {
    3,038 ( 0.00%)              self.tcx.hir()
        .                   }
        .           
    4,765 ( 0.00%)          fn visit_item(&mut self, item: &'hir Item<'hir>) {
    2,859 ( 0.00%)              self.items.push(item.item_id());
    1,906 ( 0.00%)              if let ItemKind::Mod(..) = item.kind {
        .                           // If this declares another module, do not recurse inside it.
       13 ( 0.00%)                  self.submodules.push(item.def_id);
        .                       } else {
    5,640 ( 0.00%)                  intravisit::walk_item(self, item)
        .                       }
       52 ( 0.00%)          }
        .           
        .                   fn visit_trait_item(&mut self, item: &'hir TraitItem<'hir>) {
        .                       self.trait_items.push(item.trait_item_id());
        .                       intravisit::walk_trait_item(self, item)
        .                   }
        .           
        .                   fn visit_impl_item(&mut self, item: &'hir ImplItem<'hir>) {
    2,340 ( 0.00%)              self.impl_items.push(item.impl_item_id());
    2,340 ( 0.00%)              intravisit::walk_impl_item(self, item)
        .                   }
        .           
        .                   fn visit_foreign_item(&mut self, item: &'hir ForeignItem<'hir>) {
        .                       self.foreign_items.push(item.foreign_item_id());
        .                       intravisit::walk_foreign_item(self, item)
        .                   }
        .               }
      112 ( 0.00%)  }

1,179,432 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/hir/map/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs
--------------------------------------------------------------------------------
Ir                  

-- line 180 ----------------------------------------
         .           /// assert_eq!(v, &[0.into()]);
         .           ///
         .           /// // Ensure that the last item was dropped.
         .           /// assert!(weak.upgrade().is_none());
         .           /// ```
         .           #[stable(feature = "drop_in_place", since = "1.8.0")]
         .           #[lang = "drop_in_place"]
         .           #[allow(unconditional_recursion)]
55,827,015 ( 1.31%)  pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
         .               // Code here does not matter - this is replaced by the
         .               // real drop glue by the compiler.
         .           
         .               // SAFETY: see comment above
         .               unsafe { drop_in_place(to_drop) }
         .           }
         .           
         .           /// Creates a null raw pointer.
-- line 196 ----------------------------------------
-- line 206 ----------------------------------------
         .           #[inline(always)]
         .           #[must_use]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           #[rustc_promotable]
         .           #[rustc_const_stable(feature = "const_ptr_null", since = "1.24.0")]
         .           #[rustc_diagnostic_item = "ptr_null"]
         .           pub const fn null<T>() -> *const T {
         .               0 as *const T
     1,939 ( 0.00%)  }
         .           
         .           /// Creates a null mutable raw pointer.
         .           ///
         .           /// # Examples
         .           ///
         .           /// ```
         .           /// use std::ptr;
         .           ///
-- line 222 ----------------------------------------
-- line 251 ----------------------------------------
         .           /// let x = [5, 6, 7];
         .           /// let raw_pointer = x.as_ptr();
         .           /// let slice = ptr::slice_from_raw_parts(raw_pointer, 3);
         .           /// assert_eq!(unsafe { &*slice }[2], 7);
         .           /// ```
         .           #[inline]
         .           #[stable(feature = "slice_from_raw_parts", since = "1.42.0")]
         .           #[rustc_const_unstable(feature = "const_slice_from_raw_parts", issue = "67456")]
   376,908 ( 0.01%)  pub const fn slice_from_raw_parts<T>(data: *const T, len: usize) -> *const [T] {
   471,135 ( 0.01%)      from_raw_parts(data.cast(), len)
   188,454 ( 0.00%)  }
         .           
         .           /// Performs the same functionality as [`slice_from_raw_parts`], except that a
         .           /// raw mutable slice is returned, as opposed to a raw immutable slice.
         .           ///
         .           /// See the documentation of [`slice_from_raw_parts`] for more details.
         .           ///
         .           /// This function is safe, but actually using the return value is unsafe.
         .           /// See the documentation of [`slice::from_raw_parts_mut`] for slice safety requirements.
-- line 269 ----------------------------------------
-- line 283 ----------------------------------------
         .           ///     (*slice)[2] = 99; // assign a value at an index in the slice
         .           /// };
         .           ///
         .           /// assert_eq!(unsafe { &*slice }[2], 99);
         .           /// ```
         .           #[inline]
         .           #[stable(feature = "slice_from_raw_parts", since = "1.42.0")]
         .           #[rustc_const_unstable(feature = "const_slice_from_raw_parts", issue = "67456")]
 1,144,344 ( 0.03%)  pub const fn slice_from_raw_parts_mut<T>(data: *mut T, len: usize) -> *mut [T] {
   429,129 ( 0.01%)      from_raw_parts_mut(data.cast(), len)
   286,086 ( 0.01%)  }
         .           
         .           /// Swaps the values at two mutable locations of the same type, without
         .           /// deinitializing either.
         .           ///
         .           /// But for the following two exceptions, this function is semantically
         .           /// equivalent to [`mem::swap`]:
         .           ///
         .           /// * It operates on raw pointers instead of references. When references are
-- line 301 ----------------------------------------
-- line 366 ----------------------------------------
         .               let mut tmp = MaybeUninit::<T>::uninit();
         .           
         .               // Perform the swap
         .               // SAFETY: the caller must guarantee that `x` and `y` are
         .               // valid for writes and properly aligned. `tmp` cannot be
         .               // overlapping either `x` or `y` because `tmp` was just allocated
         .               // on the stack as a separate allocated object.
         .               unsafe {
        44 ( 0.00%)          copy_nonoverlapping(x, tmp.as_mut_ptr(), 1);
        44 ( 0.00%)          copy(y, x, 1); // `x` and `y` may overlap
         .                   copy_nonoverlapping(tmp.as_ptr(), y, 1);
         .               }
         .           }
         .           
         .           /// Swaps `count * size_of::<T>()` bytes between the two regions of memory
         .           /// beginning at `x` and `y`. The two regions must *not* overlap.
         .           ///
         .           /// # Safety
-- line 383 ----------------------------------------
-- line 448 ----------------------------------------
         .                       return;
         .                   }
         .               }
         .           
         .               // Direct swapping, for the cases not going through the block optimization.
         .               // SAFETY: the caller must guarantee that `x` and `y` are valid
         .               // for writes, properly aligned, and non-overlapping.
         .               unsafe {
        14 ( 0.00%)          let z = read(x);
         .                   copy_nonoverlapping(y, x, 1);
         .                   write(y, z);
         .               }
         .           }
         .           
         .           #[inline]
         .           #[rustc_const_unstable(feature = "const_swap", issue = "83163")]
         .           const unsafe fn swap_nonoverlapping_bytes(x: *mut u8, y: *mut u8, len: usize) {
-- line 464 ----------------------------------------
-- line 677 ----------------------------------------
         .           ///
         .           /// assert_eq!(s, "bar");
         .           /// ```
         .           ///
         .           /// [valid]: self#safety
         .           #[inline]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           #[rustc_const_unstable(feature = "const_ptr_read", issue = "80377")]
 1,889,264 ( 0.04%)  pub const unsafe fn read<T>(src: *const T) -> T {
         .               // We are calling the intrinsics directly to avoid function calls in the generated code
         .               // as `intrinsics::copy_nonoverlapping` is a wrapper function.
         .               extern "rust-intrinsic" {
         .                   #[rustc_const_unstable(feature = "const_intrinsic_copy", issue = "80697")]
         .                   fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize);
         .               }
         .           
   524,818 ( 0.01%)      let mut tmp = MaybeUninit::<T>::uninit();
         .               // SAFETY: the caller must guarantee that `src` is valid for reads.
         .               // `src` cannot overlap `tmp` because `tmp` was just allocated on
         .               // the stack as a separate allocated object.
         .               //
         .               // Also, since we just wrote a valid value into `tmp`, it is guaranteed
         .               // to be properly initialized.
         .               unsafe {
 3,427,418 ( 0.08%)          copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);
22,316,892 ( 0.52%)          tmp.assume_init()
         .               }
   938,101 ( 0.02%)  }
         .           
         .           /// Reads the value from `src` without moving it. This leaves the
         .           /// memory in `src` unchanged.
         .           ///
         .           /// Unlike [`read`], `read_unaligned` works with unaligned pointers.
         .           ///
         .           /// # Safety
         .           ///
-- line 712 ----------------------------------------
-- line 872 ----------------------------------------
         .           /// swap(&mut foo, &mut bar);
         .           ///
         .           /// assert_eq!(foo, "bar");
         .           /// assert_eq!(bar, "foo");
         .           /// ```
         .           #[inline]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           #[rustc_const_unstable(feature = "const_ptr_write", issue = "86302")]
 1,412,399 ( 0.03%)  pub const unsafe fn write<T>(dst: *mut T, src: T) {
         .               // We are calling the intrinsics directly to avoid function calls in the generated code
         .               // as `intrinsics::copy_nonoverlapping` is a wrapper function.
         .               extern "rust-intrinsic" {
         .                   #[rustc_const_unstable(feature = "const_intrinsic_copy", issue = "80697")]
         .                   fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize);
         .               }
         .           
         .               // SAFETY: the caller must guarantee that `dst` is valid for writes.
         .               // `dst` cannot overlap `src` because the caller has mutable access
         .               // to `dst` while `src` is owned by this function.
         .               unsafe {
47,534,259 ( 1.11%)          copy_nonoverlapping(&src as *const T, dst, 1);
         .                   intrinsics::forget(src);
         .               }
   830,492 ( 0.02%)  }
         .           
         .           /// Overwrites a memory location with the given value without reading or
         .           /// dropping the old value.
         .           ///
         .           /// Unlike [`write()`], the pointer may be unaligned.
         .           ///
         .           /// `write_unaligned` does not drop the contents of `dst`. This is safe, but it
         .           /// could leak allocations or resources, so care should be taken not to overwrite
-- line 903 ----------------------------------------
-- line 1206 ----------------------------------------
         .               if stride == 1 {
         .                   // `stride == 1` case can be computed more simply through `-p (mod a)`, but doing so
         .                   // inhibits LLVM's ability to select instructions like `lea`. Instead we compute
         .                   //
         .                   //    round_up_to_next_alignment(p, a) - p
         .                   //
         .                   // which distributes operations around the load-bearing, but pessimizing `and` sufficiently
         .                   // for LLVM to be able to utilize the various optimizations it knows about.
     7,697 ( 0.00%)          return wrapping_sub(
    22,902 ( 0.00%)              wrapping_add(p as usize, a_minus_one) & wrapping_sub(0, a),
         .                       p as usize,
         .                   );
         .               }
         .           
         .               let pmoda = p as usize & a_minus_one;
         .               if pmoda == 0 {
         .                   // Already aligned. Yay!
         .                   return 0;
-- line 1223 ----------------------------------------
-- line 1348 ----------------------------------------
         .           /// assert!(std::ptr::eq(
         .           ///     &wrapper as &dyn Trait as *const dyn Trait as *const u8,
         .           ///     &wrapper.member as &dyn Trait as *const dyn Trait as *const u8,
         .           /// ));
         .           /// ```
         .           #[stable(feature = "ptr_eq", since = "1.17.0")]
         .           #[inline]
         .           pub fn eq<T: ?Sized>(a: *const T, b: *const T) -> bool {
 1,777,815 ( 0.04%)      a == b
         .           }
         .           
         .           /// Hash a raw pointer.
         .           ///
         .           /// This can be used to hash a `&T` reference (which coerces to `*const T` implicitly)
         .           /// by its address rather than the value it points to
         .           /// (which is what the `Hash for &T` implementation does).
         .           ///
-- line 1364 ----------------------------------------

 9,961,137 ( 0.23%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs
--------------------------------------------------------------------------------
Ir                  

-- line 416 ----------------------------------------
         .               /// ```
         .               /// # #![allow(unused_mut)]
         .               /// let mut vec: Vec<i32> = Vec::new();
         .               /// ```
         .               #[inline]
         .               #[rustc_const_stable(feature = "const_vec_new", since = "1.39.0")]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[must_use]
    35,846 ( 0.00%)      pub const fn new() -> Self {
 7,211,277 ( 0.17%)          Vec { buf: RawVec::NEW, len: 0 }
    36,127 ( 0.00%)      }
         .           
         .               /// Constructs a new, empty `Vec<T>` with the specified capacity.
         .               ///
         .               /// The vector will be able to hold exactly `capacity` elements without
         .               /// reallocating. If `capacity` is 0, the vector will not allocate.
         .               ///
         .               /// It is important to note that although the returned vector has the
         .               /// *capacity* specified, the vector will have a zero *length*. For an
-- line 434 ----------------------------------------
-- line 461 ----------------------------------------
         .               /// vec.push(11);
         .               /// assert_eq!(vec.len(), 11);
         .               /// assert!(vec.capacity() >= 11);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[must_use]
     3,808 ( 0.00%)      pub fn with_capacity(capacity: usize) -> Self {
       952 ( 0.00%)          Self::with_capacity_in(capacity, Global)
     1,904 ( 0.00%)      }
         .           
         .               /// Creates a `Vec<T>` directly from the raw components of another vector.
         .               ///
         .               /// # Safety
         .               ///
         .               /// This is highly unsafe, due to the number of invariants that aren't
         .               /// checked:
         .               ///
-- line 479 ----------------------------------------
-- line 529 ----------------------------------------
         .               ///
         .               ///     // Put everything back together into a Vec
         .               ///     let rebuilt = Vec::from_raw_parts(p, len, cap);
         .               ///     assert_eq!(rebuilt, [4, 5, 6]);
         .               /// }
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
     1,062 ( 0.00%)      pub unsafe fn from_raw_parts(ptr: *mut T, length: usize, capacity: usize) -> Self {
       177 ( 0.00%)          unsafe { Self::from_raw_parts_in(ptr, length, capacity, Global) }
       354 ( 0.00%)      }
         .           }
         .           
         .           impl<T, A: Allocator> Vec<T, A> {
         .               /// Constructs a new, empty `Vec<T, A>`.
         .               ///
         .               /// The vector will not allocate until elements are pushed onto it.
         .               ///
         .               /// # Examples
-- line 547 ----------------------------------------
-- line 600 ----------------------------------------
         .               /// // ...but this may make the vector reallocate
         .               /// vec.push(11);
         .               /// assert_eq!(vec.len(), 11);
         .               /// assert!(vec.capacity() >= 11);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[inline]
         .               #[unstable(feature = "allocator_api", issue = "32838")]
    60,011 ( 0.00%)      pub fn with_capacity_in(capacity: usize, alloc: A) -> Self {
 1,728,355 ( 0.04%)          Vec { buf: RawVec::with_capacity_in(capacity, alloc), len: 0 }
    17,146 ( 0.00%)      }
         .           
         .               /// Creates a `Vec<T, A>` directly from the raw components of another vector.
         .               ///
         .               /// # Safety
         .               ///
         .               /// This is highly unsafe, due to the number of invariants that aren't
         .               /// checked:
         .               ///
-- line 618 ----------------------------------------
-- line 676 ----------------------------------------
         .               ///
         .               ///     // Put everything back together into a Vec
         .               ///     let rebuilt = Vec::from_raw_parts_in(p, len, cap, alloc.clone());
         .               ///     assert_eq!(rebuilt, [4, 5, 6]);
         .               /// }
         .               /// ```
         .               #[inline]
         .               #[unstable(feature = "allocator_api", issue = "32838")]
    27,729 ( 0.00%)      pub unsafe fn from_raw_parts_in(ptr: *mut T, length: usize, capacity: usize, alloc: A) -> Self {
   314,220 ( 0.01%)          unsafe { Vec { buf: RawVec::from_raw_parts_in(ptr, capacity, alloc), len: length } }
     4,266 ( 0.00%)      }
         .           
         .               /// Decomposes a `Vec<T>` into its raw components.
         .               ///
         .               /// Returns the raw pointer to the underlying data, the length of
         .               /// the vector (in elements), and the allocated capacity of the
         .               /// data (in elements). These are the same arguments in the same
         .               /// order as the arguments to [`from_raw_parts`].
         .               ///
-- line 694 ----------------------------------------
-- line 777 ----------------------------------------
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let vec: Vec<i32> = Vec::with_capacity(10);
         .               /// assert_eq!(vec.capacity(), 10);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
    28,016 ( 0.00%)      pub fn capacity(&self) -> usize {
   277,559 ( 0.01%)          self.buf.capacity()
    14,008 ( 0.00%)      }
         .           
         .               /// Reserves capacity for at least `additional` more elements to be inserted
         .               /// in the given `Vec<T>`. The collection may reserve more space to avoid
         .               /// frequent reallocations. After calling `reserve`, capacity will be
         .               /// greater than or equal to `self.len() + additional`. Does nothing if
         .               /// capacity is already sufficient.
         .               ///
         .               /// # Panics
-- line 795 ----------------------------------------
-- line 800 ----------------------------------------
         .               ///
         .               /// ```
         .               /// let mut vec = vec![1];
         .               /// vec.reserve(10);
         .               /// assert!(vec.capacity() >= 11);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[stable(feature = "rust1", since = "1.0.0")]
    30,590 ( 0.00%)      pub fn reserve(&mut self, additional: usize) {
   684,566 ( 0.02%)          self.buf.reserve(self.len, additional);
    12,236 ( 0.00%)      }
         .           
         .               /// Reserves the minimum capacity for exactly `additional` more elements to
         .               /// be inserted in the given `Vec<T>`. After calling `reserve_exact`,
         .               /// capacity will be greater than or equal to `self.len() + additional`.
         .               /// Does nothing if the capacity is already sufficient.
         .               ///
         .               /// Note that the allocator may give the collection more space than it
         .               /// requests. Therefore, capacity can not be relied upon to be precisely
-- line 818 ----------------------------------------
-- line 829 ----------------------------------------
         .               /// ```
         .               /// let mut vec = vec![1];
         .               /// vec.reserve_exact(10);
         .               /// assert!(vec.capacity() >= 11);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn reserve_exact(&mut self, additional: usize) {
    25,562 ( 0.00%)          self.buf.reserve_exact(self.len, additional);
         .               }
         .           
         .               /// Tries to reserve capacity for at least `additional` more elements to be inserted
         .               /// in the given `Vec<T>`. The collection may reserve more space to avoid
         .               /// frequent reallocations. After calling `try_reserve`, capacity will be
         .               /// greater than or equal to `self.len() + additional`. Does nothing if
         .               /// capacity is already sufficient.
         .               ///
-- line 845 ----------------------------------------
-- line 926 ----------------------------------------
         .               /// let mut vec = Vec::with_capacity(10);
         .               /// vec.extend([1, 2, 3]);
         .               /// assert_eq!(vec.capacity(), 10);
         .               /// vec.shrink_to_fit();
         .               /// assert!(vec.capacity() >= 3);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[stable(feature = "rust1", since = "1.0.0")]
    16,110 ( 0.00%)      pub fn shrink_to_fit(&mut self) {
         .                   // The capacity is never less than the length, and there's nothing to do when
         .                   // they are equal, so we can avoid the panic case in `RawVec::shrink_to_fit`
         .                   // by only calling it with a greater capacity.
    61,746 ( 0.00%)          if self.capacity() > self.len {
    22,375 ( 0.00%)              self.buf.shrink_to_fit(self.len);
         .                   }
    10,740 ( 0.00%)      }
         .           
         .               /// Shrinks the capacity of the vector with a lower bound.
         .               ///
         .               /// The capacity will remain at least as large as both the length
         .               /// and the supplied value.
         .               ///
         .               /// If the current capacity is less than the lower limit, this is a no-op.
         .               ///
-- line 949 ----------------------------------------
-- line 987 ----------------------------------------
         .               /// vec.extend([1, 2, 3]);
         .               ///
         .               /// assert_eq!(vec.capacity(), 10);
         .               /// let slice = vec.into_boxed_slice();
         .               /// assert_eq!(slice.into_vec().capacity(), 3);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[stable(feature = "rust1", since = "1.0.0")]
    10,740 ( 0.00%)      pub fn into_boxed_slice(mut self) -> Box<[T], A> {
         .                   unsafe {
    32,220 ( 0.00%)              self.shrink_to_fit();
    51,728 ( 0.00%)              let me = ManuallyDrop::new(self);
    53,700 ( 0.00%)              let buf = ptr::read(&me.buf);
    26,850 ( 0.00%)              let len = me.len();
    69,810 ( 0.00%)              buf.into_box(len).assume_init()
     5,370 ( 0.00%)          }
    10,740 ( 0.00%)      }
         .           
         .               /// Shortens the vector, keeping the first `len` elements and dropping
         .               /// the rest.
         .               ///
         .               /// If `len` is greater than the vector's current length, this has no
         .               /// effect.
         .               ///
         .               /// The [`drain`] method can emulate `truncate`, but causes the excess
-- line 1011 ----------------------------------------
-- line 1040 ----------------------------------------
         .               /// let mut vec = vec![1, 2, 3];
         .               /// vec.truncate(0);
         .               /// assert_eq!(vec, []);
         .               /// ```
         .               ///
         .               /// [`clear`]: Vec::clear
         .               /// [`drain`]: Vec::drain
         .               #[stable(feature = "rust1", since = "1.0.0")]
   415,462 ( 0.01%)      pub fn truncate(&mut self, len: usize) {
         .                   // This is safe because:
         .                   //
         .                   // * the slice passed to `drop_in_place` is valid; the `len > self.len`
         .                   //   case avoids creating an invalid slice, and
         .                   // * the `len` of the vector is shrunk before calling `drop_in_place`,
         .                   //   such that no value will be dropped twice in case `drop_in_place`
         .                   //   were to panic once (if it panics twice, the program aborts).
         .                   unsafe {
         .                       // Note: It's intentional that this is `>` and not `>=`.
         .                       //       Changing it to `>=` has negative performance
         .                       //       implications in some cases. See #78884 for more.
   351,782 ( 0.01%)              if len > self.len {
         .                           return;
         .                       }
       976 ( 0.00%)              let remaining_len = self.len - len;
       732 ( 0.00%)              let s = ptr::slice_from_raw_parts_mut(self.as_mut_ptr().add(len), remaining_len);
   348,710 ( 0.01%)              self.len = len;
    12,991 ( 0.00%)              ptr::drop_in_place(s);
         .                   }
   498,188 ( 0.01%)      }
         .           
         .               /// Extracts a slice containing the entire vector.
         .               ///
         .               /// Equivalent to `&s[..]`.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
-- line 1076 ----------------------------------------
-- line 1123 ----------------------------------------
         .               ///         assert_eq!(*x_ptr.add(i), 1 << i);
         .               ///     }
         .               /// }
         .               /// ```
         .               ///
         .               /// [`as_mut_ptr`]: Vec::as_mut_ptr
         .               #[stable(feature = "vec_as_ptr", since = "1.37.0")]
         .               #[inline]
    59,680 ( 0.00%)      pub fn as_ptr(&self) -> *const T {
         .                   // We shadow the slice method of the same name to avoid going through
         .                   // `deref`, which creates an intermediate reference.
 7,172,973 ( 0.17%)          let ptr = self.buf.ptr();
         .                   unsafe {
    29,840 ( 0.00%)              assume(!ptr.is_null());
         .                   }
         .                   ptr
    59,680 ( 0.00%)      }
         .           
         .               /// Returns an unsafe mutable pointer to the vector's buffer.
         .               ///
         .               /// The caller must ensure that the vector outlives the pointer this
         .               /// function returns, or else it will end up pointing to garbage.
         .               /// Modifying the vector may cause its buffer to be reallocated,
         .               /// which would also make any pointers to it invalid.
         .               ///
-- line 1147 ----------------------------------------
-- line 1159 ----------------------------------------
         .               ///         *x_ptr.add(i) = i as i32;
         .               ///     }
         .               ///     x.set_len(size);
         .               /// }
         .               /// assert_eq!(&*x, &[0, 1, 2, 3]);
         .               /// ```
         .               #[stable(feature = "vec_as_ptr", since = "1.37.0")]
         .               #[inline]
   436,082 ( 0.01%)      pub fn as_mut_ptr(&mut self) -> *mut T {
         .                   // We shadow the slice method of the same name to avoid going through
         .                   // `deref_mut`, which creates an intermediate reference.
 6,110,233 ( 0.14%)          let ptr = self.buf.ptr();
         .                   unsafe {
   218,041 ( 0.01%)              assume(!ptr.is_null());
         .                   }
         .                   ptr
   436,082 ( 0.01%)      }
         .           
         .               /// Returns a reference to the underlying allocator.
         .               #[unstable(feature = "allocator_api", issue = "32838")]
         .               #[inline]
    25,600 ( 0.00%)      pub fn allocator(&self) -> &A {
    25,600 ( 0.00%)          self.buf.allocator()
    25,600 ( 0.00%)      }
         .           
         .               /// Forces the length of the vector to `new_len`.
         .               ///
         .               /// This is a low-level operation that maintains none of the normal
         .               /// invariants of the type. Normally changing the length of a vector
         .               /// is done using one of the safe operations instead, such as
         .               /// [`truncate`], [`resize`], [`extend`], or [`clear`].
         .               ///
-- line 1190 ----------------------------------------
-- line 1256 ----------------------------------------
         .               ///     vec.set_len(0);
         .               /// }
         .               /// ```
         .               ///
         .               /// Normally, here, one would use [`clear`] instead to correctly drop
         .               /// the contents and thus not leak memory.
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
    70,965 ( 0.00%)      pub unsafe fn set_len(&mut self, new_len: usize) {
         .                   debug_assert!(new_len <= self.capacity());
         .           
   880,159 ( 0.02%)          self.len = new_len;
    48,432 ( 0.00%)      }
         .           
         .               /// Removes an element from the vector and returns it.
         .               ///
         .               /// The removed element is replaced by the last element of the vector.
         .               ///
         .               /// This does not preserve ordering, but is *O*(1).
         .               /// If you need to preserve the element order, use [`remove`] instead.
         .               ///
-- line 1276 ----------------------------------------
-- line 1329 ----------------------------------------
         .               /// let mut vec = vec![1, 2, 3];
         .               /// vec.insert(1, 4);
         .               /// assert_eq!(vec, [1, 4, 2, 3]);
         .               /// vec.insert(4, 5);
         .               /// assert_eq!(vec, [1, 4, 2, 3, 5]);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[stable(feature = "rust1", since = "1.0.0")]
    11,165 ( 0.00%)      pub fn insert(&mut self, index: usize, element: T) {
         .                   #[cold]
         .                   #[inline(never)]
         .                   fn assert_failed(index: usize, len: usize) -> ! {
         .                       panic!("insertion index (is {}) should be <= len (is {})", index, len);
         .                   }
         .           
     1,918 ( 0.00%)          let len = self.len();
     4,778 ( 0.00%)          if index > len {
         .                       assert_failed(index, len);
         .                   }
         .           
         .                   // space for the new element
     7,054 ( 0.00%)          if len == self.buf.capacity() {
         .                       self.reserve(1);
         .                   }
         .           
         .                   unsafe {
         .                       // infallible
         .                       // The spot to put the new value
         .                       {
         .                           let p = self.as_mut_ptr().add(index);
         .                           // Shift everything over to make space. (Duplicating the
         .                           // `index`th element into two consecutive places.)
     9,612 ( 0.00%)                  ptr::copy(p, p.offset(1), len - index);
         .                           // Write it in, overwriting the first copy of the `index`th
         .                           // element.
         .                           ptr::write(p, element);
         .                       }
     7,054 ( 0.00%)              self.set_len(len + 1);
         .                   }
     9,570 ( 0.00%)      }
         .           
         .               /// Removes and returns the element at position `index` within the vector,
         .               /// shifting all elements after it to the left.
         .               ///
         .               /// Note: Because this shifts over the remaining elements, it has a
         .               /// worst-case performance of *O*(*n*). If you don't need the order of elements
         .               /// to be preserved, use [`swap_remove`] instead. If you'd like to remove
         .               /// elements from the beginning of the `Vec`, consider using
-- line 1376 ----------------------------------------
-- line 1387 ----------------------------------------
         .               ///
         .               /// ```
         .               /// let mut v = vec![1, 2, 3];
         .               /// assert_eq!(v.remove(1), 2);
         .               /// assert_eq!(v, [1, 3]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[track_caller]
    33,720 ( 0.00%)      pub fn remove(&mut self, index: usize) -> T {
         .                   #[cold]
         .                   #[inline(never)]
         .                   #[track_caller]
         .                   fn assert_failed(index: usize, len: usize) -> ! {
         .                       panic!("removal index (is {}) should be < len (is {})", index, len);
         .                   }
         .           
    11,636 ( 0.00%)          let len = self.len();
    35,012 ( 0.00%)          if index >= len {
         .                       assert_failed(index, len);
         .                   }
         .                   unsafe {
         .                       // infallible
         .                       let ret;
         .                       {
         .                           // the place we are taking from.
         8 ( 0.00%)                  let ptr = self.as_mut_ptr().add(index);
         .                           // copy it out, unsafely having a copy of the value on
         .                           // the stack and in the vector at the same time.
    71,722 ( 0.00%)                  ret = ptr::read(ptr);
         .           
         .                           // Shift everything down to fill in that spot.
    23,380 ( 0.00%)                  ptr::copy(ptr.offset(1), ptr, len - index - 1);
         .                       }
    11,804 ( 0.00%)              self.set_len(len - 1);
         2 ( 0.00%)              ret
         .                   }
    56,184 ( 0.00%)      }
         .           
         .               /// Retains only the elements specified by the predicate.
         .               ///
         .               /// In other words, remove all elements `e` such that `f(&e)` returns `false`.
         .               /// This method operates in place, visiting each element exactly once in the
         .               /// original order, and preserves the order of the retained elements.
         .               ///
         .               /// # Examples
-- line 1431 ----------------------------------------
-- line 1442 ----------------------------------------
         .               /// ```
         .               /// let mut vec = vec![1, 2, 3, 4, 5];
         .               /// let keep = [false, true, true, false, true];
         .               /// let mut iter = keep.iter();
         .               /// vec.retain(|_| *iter.next().unwrap());
         .               /// assert_eq!(vec, [2, 3, 5]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
   379,151 ( 0.01%)      pub fn retain<F>(&mut self, mut f: F)
         .               where
         .                   F: FnMut(&T) -> bool,
         .               {
    24,269 ( 0.00%)          self.retain_mut(|elem| f(elem));
   368,640 ( 0.01%)      }
         .           
         .               /// Retains only the elements specified by the predicate, passing a mutable reference to it.
         .               ///
         .               /// In other words, remove all elements `e` such that `f(&mut e)` returns `false`.
         .               /// This method operates in place, visiting each element exactly once in the
         .               /// original order, and preserves the order of the retained elements.
         .               ///
         .               /// # Examples
-- line 1463 ----------------------------------------
-- line 1474 ----------------------------------------
         .               /// });
         .               /// assert_eq!(vec, [2, 3, 4]);
         .               /// ```
         .               #[unstable(feature = "vec_retain_mut", issue = "90829")]
         .               pub fn retain_mut<F>(&mut self, mut f: F)
         .               where
         .                   F: FnMut(&mut T) -> bool,
         .               {
    47,141 ( 0.00%)          let original_len = self.len();
         .                   // Avoid double drop if the drop guard is not executed,
         .                   // since we may make some holes during the process.
         .                   unsafe { self.set_len(0) };
         .           
         .                   // Vec: [Kept, Kept, Hole, Hole, Hole, Hole, Unchecked, Unchecked]
         .                   //      |<-              processed len   ->| ^- next to check
         .                   //                  |<-  deleted cnt     ->|
         .                   //      |<-              original_len                          ->|
-- line 1490 ----------------------------------------
-- line 1499 ----------------------------------------
         .                       v: &'a mut Vec<T, A>,
         .                       processed_len: usize,
         .                       deleted_cnt: usize,
         .                       original_len: usize,
         .                   }
         .           
         .                   impl<T, A: Allocator> Drop for BackshiftOnDrop<'_, T, A> {
         .                       fn drop(&mut self) {
    35,362 ( 0.00%)                  if self.deleted_cnt > 0 {
         .                               // SAFETY: Trailing unchecked items must be valid since we never touch them.
         .                               unsafe {
         .                                   ptr::copy(
         .                                       self.v.as_ptr().add(self.processed_len),
    26,338 ( 0.00%)                              self.v.as_mut_ptr().add(self.processed_len - self.deleted_cnt),
         .                                       self.original_len - self.processed_len,
         .                                   );
         .                               }
         .                           }
         .                           // SAFETY: After filling holes, all items are in contiguous memory.
         .                           unsafe {
         2 ( 0.00%)                      self.v.set_len(self.original_len - self.deleted_cnt);
         .                           }
         .                       }
         .                   }
         .           
         .                   let mut g = BackshiftOnDrop { v: self, processed_len: 0, deleted_cnt: 0, original_len };
         .           
         .                   fn process_loop<F, T, A: Allocator, const DELETED: bool>(
         .                       original_len: usize,
         .                       f: &mut F,
         .                       g: &mut BackshiftOnDrop<'_, T, A>,
         .                   ) where
         .                       F: FnMut(&mut T) -> bool,
         .                   {
   594,919 ( 0.01%)              while g.processed_len != original_len {
         .                           // SAFETY: Unchecked element must be valid.
         .                           let cur = unsafe { &mut *g.v.as_mut_ptr().add(g.processed_len) };
   155,927 ( 0.00%)                  if !f(cur) {
         .                               // Advance early to avoid double drop if `drop_in_place` panicked.
       722 ( 0.00%)                      g.processed_len += 1;
       308 ( 0.00%)                      g.deleted_cnt += 1;
         .                               // SAFETY: We never touch this element again after dropped.
       195 ( 0.00%)                      unsafe { ptr::drop_in_place(cur) };
         .                               // We already advanced the counter.
         .                               if DELETED {
         .                                   continue;
         .                               } else {
         .                                   break;
         .                               }
         .                           }
         .                           if DELETED {
         .                               // SAFETY: `deleted_cnt` > 0, so the hole slot must not overlap with current element.
         .                               // We use copy for move, and never touch this element again.
         .                               unsafe {
     1,440 ( 0.00%)                          let hole_slot = g.v.as_mut_ptr().add(g.processed_len - g.deleted_cnt);
         .                                   ptr::copy_nonoverlapping(cur, hole_slot, 1);
         .                               }
         .                           }
       960 ( 0.00%)                  g.processed_len += 1;
         .                       }
         .                   }
         .           
         .                   // Stage 1: Nothing was deleted.
         .                   process_loop::<F, T, A, false>(original_len, &mut f, &mut g);
         .           
         .                   // Stage 2: Some elements were deleted.
         .                   process_loop::<F, T, A, true>(original_len, &mut f, &mut g);
-- line 1565 ----------------------------------------
-- line 1606 ----------------------------------------
         .               /// ```
         .               /// let mut vec = vec!["foo", "bar", "Bar", "baz", "bar"];
         .               ///
         .               /// vec.dedup_by(|a, b| a.eq_ignore_ascii_case(b));
         .               ///
         .               /// assert_eq!(vec, ["foo", "bar", "baz", "bar"]);
         .               /// ```
         .               #[stable(feature = "dedup_by", since = "1.16.0")]
    19,499 ( 0.00%)      pub fn dedup_by<F>(&mut self, mut same_bucket: F)
         .               where
         .                   F: FnMut(&mut T, &mut T) -> bool,
         .               {
     3,005 ( 0.00%)          let len = self.len();
     9,479 ( 0.00%)          if len <= 1 {
         .                       return;
         .                   }
         .           
         .                   /* INVARIANT: vec.len() > read >= write > write-1 >= 0 */
         .                   struct FillGapOnDrop<'a, T, A: core::alloc::Allocator> {
         .                       /* Offset of the element we want to check if it is duplicate */
         .                       read: usize,
         .           
-- line 1627 ----------------------------------------
-- line 1661 ----------------------------------------
         .                                * Basically vec[read..write].len() */
         .                               let dropped = self.read.wrapping_sub(self.write);
         .           
         .                               self.vec.set_len(len - dropped);
         .                           }
         .                       }
         .                   }
         .           
       156 ( 0.00%)          let mut gap = FillGapOnDrop { read: 1, write: 1, vec: self };
       195 ( 0.00%)          let ptr = gap.vec.as_mut_ptr();
         .           
         .                   /* Drop items while going through Vec, it should be more efficient than
         .                    * doing slice partition_dedup + truncate */
         .           
         .                   /* SAFETY: Because of the invariant, read_ptr, prev_ptr and write_ptr
         .                    * are always in-bounds and read_ptr never aliases prev_ptr */
         .                   unsafe {
     5,601 ( 0.00%)              while gap.read < len {
       936 ( 0.00%)                  let read_ptr = ptr.add(gap.read);
       624 ( 0.00%)                  let prev_ptr = ptr.add(gap.write.wrapping_sub(1));
         .           
     4,948 ( 0.00%)                  if same_bucket(&mut *read_ptr, &mut *prev_ptr) {
         .                               // Increase `gap.read` now since the drop may panic.
         .                               gap.read += 1;
         .                               /* We have found duplicate, drop it in-place */
         .                               ptr::drop_in_place(read_ptr);
         .                           } else {
     1,092 ( 0.00%)                      let write_ptr = ptr.add(gap.write);
         .           
         .                               /* Because `read_ptr` can be equal to `write_ptr`, we either
         .                                * have to use `copy` or conditional `copy_nonoverlapping`.
         .                                * Looks like the first option is faster. */
       312 ( 0.00%)                      ptr::copy(read_ptr, write_ptr, 1);
         .           
         .                               /* We have filled that place, so go further */
     2,764 ( 0.00%)                      gap.write += 1;
     1,248 ( 0.00%)                      gap.read += 1;
         .                           }
         .                       }
         .           
         .                       /* Technically we could let `gap` clean up with its Drop, but
         .                        * when `same_bucket` is guaranteed to not panic, this bloats a little
         .                        * the codegen, so we just do it manually */
       156 ( 0.00%)              gap.vec.set_len(gap.write);
       312 ( 0.00%)              mem::forget(gap);
         .                   }
    22,303 ( 0.00%)      }
         .           
         .               /// Appends an element to the back of a collection.
         .               ///
         .               /// # Panics
         .               ///
         .               /// Panics if the new capacity exceeds `isize::MAX` bytes.
         .               ///
         .               /// # Examples
-- line 1715 ----------------------------------------
-- line 1717 ----------------------------------------
         .               /// ```
         .               /// let mut vec = vec![1, 2];
         .               /// vec.push(3);
         .               /// assert_eq!(vec, [1, 2, 3]);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
   753,544 ( 0.02%)      pub fn push(&mut self, value: T) {
         .                   // This will panic or abort if we would allocate > isize::MAX bytes
         .                   // or if the length increment would overflow for zero-sized types.
 8,593,552 ( 0.20%)          if self.len == self.buf.capacity() {
   867,072 ( 0.02%)              self.buf.reserve_for_push(self.len);
         .                   }
         .                   unsafe {
 1,666,655 ( 0.04%)              let end = self.as_mut_ptr().add(self.len);
 1,015,655 ( 0.02%)              ptr::write(end, value);
11,544,490 ( 0.27%)              self.len += 1;
         .                   }
   272,714 ( 0.01%)      }
         .           
         .               /// Removes the last element from a vector and returns it, or [`None`] if it
         .               /// is empty.
         .               ///
         .               /// If you'd like to pop the first element, consider using
         .               /// [`VecDeque::pop_front`] instead.
         .               ///
         .               /// [`VecDeque::pop_front`]: crate::collections::VecDeque::pop_front
-- line 1744 ----------------------------------------
-- line 1748 ----------------------------------------
         .               /// ```
         .               /// let mut vec = vec![1, 2, 3];
         .               /// assert_eq!(vec.pop(), Some(3));
         .               /// assert_eq!(vec, [1, 2]);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn pop(&mut self) -> Option<T> {
 2,091,727 ( 0.05%)          if self.len == 0 {
        20 ( 0.00%)              None
         .                   } else {
         .                       unsafe {
 1,623,743 ( 0.04%)                  self.len -= 1;
   276,323 ( 0.01%)                  Some(ptr::read(self.as_ptr().add(self.len())))
         .                       }
         .                   }
         .               }
         .           
         .               /// Moves all the elements of `other` into `Self`, leaving `other` empty.
         .               ///
         .               /// # Panics
         .               ///
-- line 1769 ----------------------------------------
-- line 1776 ----------------------------------------
         .               /// let mut vec2 = vec![4, 5, 6];
         .               /// vec.append(&mut vec2);
         .               /// assert_eq!(vec, [1, 2, 3, 4, 5, 6]);
         .               /// assert_eq!(vec2, []);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[inline]
         .               #[stable(feature = "append", since = "1.4.0")]
     2,401 ( 0.00%)      pub fn append(&mut self, other: &mut Self) {
         .                   unsafe {
         .                       self.append_elements(other.as_slice() as _);
         .                       other.set_len(0);
         .                   }
     2,058 ( 0.00%)      }
         .           
         .               /// Appends elements to `Self` from other buffer.
         .               #[cfg(not(no_global_oom_handling))]
         .               #[inline]
    53,560 ( 0.00%)      unsafe fn append_elements(&mut self, other: *const [T]) {
     5,356 ( 0.00%)          let count = unsafe { (*other).len() };
     5,356 ( 0.00%)          self.reserve(count);
    96,834 ( 0.00%)          let len = self.len();
    16,068 ( 0.00%)          unsafe { ptr::copy_nonoverlapping(other as *const T, self.as_mut_ptr().add(len), count) };
   522,075 ( 0.01%)          self.len += count;
    10,712 ( 0.00%)      }
         .           
         .               /// Creates a draining iterator that removes the specified range in the vector
         .               /// and yields the removed items.
         .               ///
         .               /// When the iterator **is** dropped, all elements in the range are removed
         .               /// from the vector, even if the iterator was not fully consumed. If the
         .               /// iterator **is not** dropped (with [`mem::forget`] for example), it is
         .               /// unspecified how many elements are removed.
-- line 1808 ----------------------------------------
-- line 1820 ----------------------------------------
         .               /// assert_eq!(v, &[1]);
         .               /// assert_eq!(u, &[2, 3]);
         .               ///
         .               /// // A full range clears the vector
         .               /// v.drain(..);
         .               /// assert_eq!(v, &[]);
         .               /// ```
         .               #[stable(feature = "drain", since = "1.6.0")]
    98,994 ( 0.00%)      pub fn drain<R>(&mut self, range: R) -> Drain<'_, T, A>
         .               where
         .                   R: RangeBounds<usize>,
         .               {
         .                   // Memory safety
         .                   //
         .                   // When the Drain is first created, it shortens the length of
         .                   // the source vector to make sure no uninitialized or moved-from elements
         .                   // are accessible at all if the Drain's destructor never gets to run.
         .                   //
         .                   // Drain will ptr::read out the values to remove.
         .                   // When finished, remaining tail of the vec is copied back to cover
         .                   // the hole, and the vector length is restored to the new length.
         .                   //
   162,067 ( 0.00%)          let len = self.len();
   212,130 ( 0.00%)          let Range { start, end } = slice::range(range, ..len);
         .           
         .                   unsafe {
         .                       // set self.vec length's to start, to be safe in case Drain is leaked
    42,426 ( 0.00%)              self.set_len(start);
         .                       // Use the borrow in the IterMut to indicate borrowing behavior of the
         .                       // whole Drain iterator (like &mut T).
   226,286 ( 0.01%)              let range_slice = slice::from_raw_parts_mut(self.as_mut_ptr().add(start), end - start);
    71,051 ( 0.00%)              Drain {
         .                           tail_start: end,
    70,724 ( 0.00%)                  tail_len: len - end,
    70,710 ( 0.00%)                  iter: range_slice.iter(),
    56,568 ( 0.00%)                  vec: NonNull::from(self),
         .                       }
         .                   }
    28,284 ( 0.00%)      }
         .           
         .               /// Clears the vector, removing all values.
         .               ///
         .               /// Note that this method has no effect on the allocated capacity
         .               /// of the vector.
         .               ///
         .               /// # Examples
         .               ///
-- line 1866 ----------------------------------------
-- line 1869 ----------------------------------------
         .               ///
         .               /// v.clear();
         .               ///
         .               /// assert!(v.is_empty());
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn clear(&mut self) {
   745,205 ( 0.02%)          self.truncate(0)
         .               }
         .           
         .               /// Returns the number of elements in the vector, also referred to
         .               /// as its 'length'.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let a = vec![1, 2, 3];
         .               /// assert_eq!(a.len(), 3);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
   164,944 ( 0.00%)      pub fn len(&self) -> usize {
    82,472 ( 0.00%)          self.len
   164,944 ( 0.00%)      }
         .           
         .               /// Returns `true` if the vector contains no elements.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let mut v = Vec::new();
         .               /// assert!(v.is_empty());
         .               ///
         .               /// v.push(1);
         .               /// assert!(!v.is_empty());
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
    42,770 ( 0.00%)      pub fn is_empty(&self) -> bool {
   990,481 ( 0.02%)          self.len() == 0
    85,540 ( 0.00%)      }
         .           
         .               /// Splits the collection into two at the given index.
         .               ///
         .               /// Returns a newly allocated vector containing the elements in the range
         .               /// `[at, len)`. After the call, the original vector will be left containing
         .               /// the elements `[0, at)` with its previous capacity unchanged.
         .               ///
         .               /// # Panics
-- line 1917 ----------------------------------------
-- line 1935 ----------------------------------------
         .                   A: Clone,
         .               {
         .                   #[cold]
         .                   #[inline(never)]
         .                   fn assert_failed(at: usize, len: usize) -> ! {
         .                       panic!("`at` split index (is {}) should be <= len (is {})", at, len);
         .                   }
         .           
     5,054 ( 0.00%)          if at > self.len() {
         .                       assert_failed(at, self.len());
         .                   }
         .           
     3,886 ( 0.00%)          if at == 0 {
         .                       // the new vector can take over the original buffer and avoid the copy
         .                       return mem::replace(
         .                           self,
         .                           Vec::with_capacity_in(self.capacity(), self.allocator().clone()),
         .                       );
         .                   }
         .           
         .                   let other_len = self.len - at;
-- line 1955 ----------------------------------------
-- line 1988 ----------------------------------------
         .               ///
         .               /// let mut vec = vec![];
         .               /// let mut p = 1;
         .               /// vec.resize_with(4, || { p *= 2; p });
         .               /// assert_eq!(vec, [2, 4, 8, 16]);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[stable(feature = "vec_resize_with", since = "1.33.0")]
    78,988 ( 0.00%)      pub fn resize_with<F>(&mut self, new_len: usize, f: F)
         .               where
         .                   F: FnMut() -> T,
         .               {
    10,792 ( 0.00%)          let len = self.len();
    21,584 ( 0.00%)          if new_len > len {
    62,534 ( 0.00%)              self.extend_with(new_len - len, ExtendFunc(f));
         .                   } else {
         .                       self.truncate(new_len);
         .                   }
    68,196 ( 0.00%)      }
         .           
         .               /// Consumes and leaks the `Vec`, returning a mutable reference to the contents,
         .               /// `&'a mut [T]`. Note that the type `T` must outlive the chosen lifetime
         .               /// `'a`. If the type has only static references, or none at all, then this
         .               /// may be chosen to be `'static`.
         .               ///
         .               /// As of Rust 1.57, this method does not reallocate or shrink the `Vec`,
         .               /// so the leaked allocation may include unused capacity that is not part
-- line 2014 ----------------------------------------
-- line 2064 ----------------------------------------
         .               /// unsafe {
         .               ///     v.set_len(3);
         .               /// }
         .               ///
         .               /// assert_eq!(&v, &[0, 1, 2]);
         .               /// ```
         .               #[stable(feature = "vec_spare_capacity", since = "1.60.0")]
         .               #[inline]
    19,032 ( 0.00%)      pub fn spare_capacity_mut(&mut self) -> &mut [MaybeUninit<T>] {
         .                   // Note:
         .                   // This method is not implemented in terms of `split_at_spare_mut`,
         .                   // to prevent invalidation of pointers to the buffer.
         .                   unsafe {
    25,376 ( 0.00%)              slice::from_raw_parts_mut(
    44,412 ( 0.00%)                  self.as_mut_ptr().add(self.len) as *mut MaybeUninit<T>,
    31,773 ( 0.00%)                  self.buf.capacity() - self.len,
         .                       )
         .                   }
    12,688 ( 0.00%)      }
         .           
         .               /// Returns vector content as a slice of `T`, along with the remaining spare
         .               /// capacity of the vector as a slice of `MaybeUninit<T>`.
         .               ///
         .               /// The returned spare capacity slice can be used to fill the vector with data
         .               /// (e.g. by reading from a file) before marking the data as initialized using
         .               /// the [`set_len`] method.
         .               ///
-- line 2090 ----------------------------------------
-- line 2189 ----------------------------------------
         .               /// assert_eq!(vec, ["hello", "world", "world"]);
         .               ///
         .               /// let mut vec = vec![1, 2, 3, 4];
         .               /// vec.resize(2, 0);
         .               /// assert_eq!(vec, [1, 2]);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[stable(feature = "vec_resize", since = "1.5.0")]
     3,638 ( 0.00%)      pub fn resize(&mut self, new_len: usize, value: T) {
     2,323 ( 0.00%)          let len = self.len();
         .           
     1,403 ( 0.00%)          if new_len > len {
    10,903 ( 0.00%)              self.extend_with(new_len - len, ExtendElement(value))
         .                   } else {
       366 ( 0.00%)              self.truncate(new_len);
         .                   }
     1,691 ( 0.00%)      }
         .           
         .               /// Clones and appends all elements in a slice to the `Vec`.
         .               ///
         .               /// Iterates over the slice `other`, clones each element, and then appends
         .               /// it to this `Vec`. The `other` slice is traversed in-order.
         .               ///
         .               /// Note that this function is same as [`extend`] except that it is
         .               /// specialized to work with slices instead. If and when Rust gets
-- line 2213 ----------------------------------------
-- line 2220 ----------------------------------------
         .               /// let mut vec = vec![1];
         .               /// vec.extend_from_slice(&[2, 3, 4]);
         .               /// assert_eq!(vec, [1, 2, 3, 4]);
         .               /// ```
         .               ///
         .               /// [`extend`]: Vec::extend
         .               #[cfg(not(no_global_oom_handling))]
         .               #[stable(feature = "vec_extend_from_slice", since = "1.6.0")]
    58,916 ( 0.00%)      pub fn extend_from_slice(&mut self, other: &[T]) {
    21,424 ( 0.00%)          self.spec_extend(other.iter())
    10,712 ( 0.00%)      }
         .           
         .               /// Copies elements from `src` range to the end of the vector.
         .               ///
         .               /// # Panics
         .               ///
         .               /// Panics if the starting point is greater than the end point or if
         .               /// the end point is greater than the length of the vector.
         .               ///
-- line 2238 ----------------------------------------
-- line 2270 ----------------------------------------
         .           // This code generalizes `extend_with_{element,default}`.
         .           trait ExtendWith<T> {
         .               fn next(&mut self) -> T;
         .               fn last(self) -> T;
         .           }
         .           
         .           struct ExtendElement<T>(T);
         .           impl<T: Clone> ExtendWith<T> for ExtendElement<T> {
       244 ( 0.00%)      fn next(&mut self) -> T {
       244 ( 0.00%)          self.0.clone()
       244 ( 0.00%)      }
       582 ( 0.00%)      fn last(self) -> T {
         .                   self.0
       388 ( 0.00%)      }
         .           }
         .           
         .           struct ExtendFunc<F>(F);
         .           impl<T, F: FnMut() -> T> ExtendWith<T> for ExtendFunc<F> {
         .               fn next(&mut self) -> T {
         .                   (self.0)()
         .               }
         .               fn last(mut self) -> T {
         .                   (self.0)()
         .               }
         .           }
         .           
         .           impl<T, A: Allocator> Vec<T, A> {
         .               #[cfg(not(no_global_oom_handling))]
         .               /// Extend the vector by `n` values, using the given generator.
   325,601 ( 0.01%)      fn extend_with<E: ExtendWith<T>>(&mut self, n: usize, mut value: E) {
       970 ( 0.00%)          self.reserve(n);
         .           
         .                   unsafe {
    17,408 ( 0.00%)              let mut ptr = self.as_mut_ptr().add(self.len());
         .                       // Use SetLenOnDrop to work around bug where compiler
         .                       // might not realize the store through `ptr` through self.set_len()
         .                       // don't alias.
     1,358 ( 0.00%)              let mut local_len = SetLenOnDrop::new(&mut self.len);
         .           
         .                       // Write all elements except the last one
     6,170 ( 0.00%)              for _ in 1..n {
     1,342 ( 0.00%)                  ptr::write(ptr, value.next());
       732 ( 0.00%)                  ptr = ptr.offset(1);
         .                           // Increment the length in every step in case next() panics
       244 ( 0.00%)                  local_len.increment_len(1);
         .                       }
         .           
   486,350 ( 0.01%)              if n > 0 {
         .                           // We can write the last element directly without cloning needlessly
     2,328 ( 0.00%)                  ptr::write(ptr, value.last());
       388 ( 0.00%)                  local_len.increment_len(1);
         .                       }
         .           
         .                       // len set by scope guard
       776 ( 0.00%)          }
   258,591 ( 0.01%)      }
         .           }
         .           
         .           impl<T: PartialEq, A: Allocator> Vec<T, A> {
         .               /// Removes consecutive repeated elements in the vector according to the
         .               /// [`PartialEq`] trait implementation.
         .               ///
         .               /// If the vector is sorted, this removes all duplicates.
         .               ///
-- line 2333 ----------------------------------------
-- line 2337 ----------------------------------------
         .               /// let mut vec = vec![1, 2, 2, 3, 2];
         .               ///
         .               /// vec.dedup();
         .               ///
         .               /// assert_eq!(vec, [1, 2, 3, 2]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[inline]
        96 ( 0.00%)      pub fn dedup(&mut self) {
     4,686 ( 0.00%)          self.dedup_by(|a, b| a == b)
        96 ( 0.00%)      }
         .           }
         .           
         .           ////////////////////////////////////////////////////////////////////////////////
         .           // Internal methods and functions
         .           ////////////////////////////////////////////////////////////////////////////////
         .           
         .           #[doc(hidden)]
         .           #[cfg(not(no_global_oom_handling))]
         .           #[stable(feature = "rust1", since = "1.0.0")]
    76,736 ( 0.00%)  pub fn from_elem<T: Clone>(elem: T, n: usize) -> Vec<T> {
   469,398 ( 0.01%)      <T as SpecFromElem>::from_elem(elem, n, Global)
    91,224 ( 0.00%)  }
         .           
         .           #[doc(hidden)]
         .           #[cfg(not(no_global_oom_handling))]
         .           #[unstable(feature = "allocator_api", issue = "32838")]
         .           pub fn from_elem_in<T: Clone, A: Allocator>(elem: T, n: usize, alloc: A) -> Vec<T, A> {
         .               <T as SpecFromElem>::from_elem(elem, n, alloc)
         .           }
         .           
-- line 2367 ----------------------------------------
-- line 2423 ----------------------------------------
         .           ////////////////////////////////////////////////////////////////////////////////
         .           // Common trait implementations for Vec
         .           ////////////////////////////////////////////////////////////////////////////////
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T, A: Allocator> ops::Deref for Vec<T, A> {
         .               type Target = [T];
         .           
    89,520 ( 0.00%)      fn deref(&self) -> &[T] {
10,985,147 ( 0.26%)          unsafe { slice::from_raw_parts(self.as_ptr(), self.len) }
    59,819 ( 0.00%)      }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T, A: Allocator> ops::DerefMut for Vec<T, A> {
     1,179 ( 0.00%)      fn deref_mut(&mut self) -> &mut [T] {
 2,479,380 ( 0.06%)          unsafe { slice::from_raw_parts_mut(self.as_mut_ptr(), self.len) }
       786 ( 0.00%)      }
         .           }
         .           
         .           #[cfg(not(no_global_oom_handling))]
         .           trait SpecCloneFrom {
         .               fn clone_from(this: &mut Self, other: &Self);
         .           }
         .           
         .           #[cfg(not(no_global_oom_handling))]
-- line 2448 ----------------------------------------
-- line 2468 ----------------------------------------
         .                   this.extend_from_slice(other);
         .               }
         .           }
         .           
         .           #[cfg(not(no_global_oom_handling))]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T: Clone, A: Allocator + Clone> Clone for Vec<T, A> {
         .               #[cfg(not(test))]
   467,708 ( 0.01%)      fn clone(&self) -> Self {
    31,750 ( 0.00%)          let alloc = self.allocator().clone();
    57,050 ( 0.00%)          <[T]>::to_vec_in(&**self, alloc)
   543,864 ( 0.01%)      }
         .           
         .               // HACK(japaric): with cfg(test) the inherent `[T]::to_vec` method, which is
         .               // required for this method definition, is not available. Instead use the
         .               // `slice::to_vec`  function which is only available with cfg(test)
         .               // NB see the slice::hack module in slice.rs for more information
         .               #[cfg(test)]
         .               fn clone(&self) -> Self {
         .                   let alloc = self.allocator().clone();
-- line 2487 ----------------------------------------
-- line 2517 ----------------------------------------
         .           #[rustc_on_unimplemented(
         .               message = "vector indices are of type `usize` or ranges of `usize`",
         .               label = "vector indices are of type `usize` or ranges of `usize`"
         .           )]
         .           impl<T, I: SliceIndex<[T]>, A: Allocator> Index<I> for Vec<T, A> {
         .               type Output = I::Output;
         .           
         .               #[inline]
       825 ( 0.00%)      fn index(&self, index: I) -> &Self::Output {
   457,002 ( 0.01%)          Index::index(&**self, index)
       330 ( 0.00%)      }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           #[rustc_on_unimplemented(
         .               message = "vector indices are of type `usize` or ranges of `usize`",
         .               label = "vector indices are of type `usize` or ranges of `usize`"
         .           )]
         .           impl<T, I: SliceIndex<[T]>, A: Allocator> IndexMut<I> for Vec<T, A> {
         .               #[inline]
       700 ( 0.00%)      fn index_mut(&mut self, index: I) -> &mut Self::Output {
     1,876 ( 0.00%)          IndexMut::index_mut(&mut **self, index)
       280 ( 0.00%)      }
         .           }
         .           
         .           #[cfg(not(no_global_oom_handling))]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T> FromIterator<T> for Vec<T> {
         .               #[inline]
     1,764 ( 0.00%)      fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> Vec<T> {
 2,983,871 ( 0.07%)          <Self as SpecFromIter<T, I::IntoIter>>::from_iter(iter.into_iter())
     1,176 ( 0.00%)      }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T, A: Allocator> IntoIterator for Vec<T, A> {
         .               type Item = T;
         .               type IntoIter = IntoIter<T, A>;
         .           
         .               /// Creates a consuming iterator, that is, one that moves each value out of
-- line 2556 ----------------------------------------
-- line 2562 ----------------------------------------
         .               /// ```
         .               /// let v = vec!["a".to_string(), "b".to_string()];
         .               /// for s in v.into_iter() {
         .               ///     // s has type String, not &String
         .               ///     println!("{}", s);
         .               /// }
         .               /// ```
         .               #[inline]
    19,350 ( 0.00%)      fn into_iter(self) -> IntoIter<T, A> {
         .                   unsafe {
 1,242,311 ( 0.03%)              let mut me = ManuallyDrop::new(self);
    12,900 ( 0.00%)              let alloc = ptr::read(me.allocator());
    31,452 ( 0.00%)              let begin = me.as_mut_ptr();
    19,350 ( 0.00%)              let end = if mem::size_of::<T>() == 0 {
         .                           arith_offset(begin as *const i8, me.len() as isize) as *const T
         .                       } else {
    30,240 ( 0.00%)                  begin.add(me.len()) as *const T
         .                       };
     6,450 ( 0.00%)              let cap = me.buf.capacity();
   392,159 ( 0.01%)              IntoIter {
    25,002 ( 0.00%)                  buf: NonNull::new_unchecked(begin),
         .                           phantom: PhantomData,
         .                           cap,
         .                           alloc,
         .                           ptr: begin,
     6,450 ( 0.00%)                  end,
         .                       }
         .                   }
    12,900 ( 0.00%)      }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<'a, T, A: Allocator> IntoIterator for &'a Vec<T, A> {
         .               type Item = &'a T;
         .               type IntoIter = slice::Iter<'a, T>;
         .           
         .               fn into_iter(self) -> slice::Iter<'a, T> {
         8 ( 0.00%)          self.iter()
         .               }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<'a, T, A: Allocator> IntoIterator for &'a mut Vec<T, A> {
         .               type Item = &'a mut T;
         .               type IntoIter = slice::IterMut<'a, T>;
         .           
       316 ( 0.00%)      fn into_iter(self) -> slice::IterMut<'a, T> {
     2,048 ( 0.00%)          self.iter_mut()
       316 ( 0.00%)      }
         .           }
         .           
         .           #[cfg(not(no_global_oom_handling))]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T, A: Allocator> Extend<T> for Vec<T, A> {
         .               #[inline]
     2,372 ( 0.00%)      fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {
 1,601,750 ( 0.04%)          <Self as SpecExtend<T, I::IntoIter>>::spec_extend(self, iter.into_iter())
     1,856 ( 0.00%)      }
         .           
         .               #[inline]
         .               fn extend_one(&mut self, item: T) {
         .                   self.push(item);
         .               }
         .           
         .               #[inline]
         .               fn extend_reserve(&mut self, additional: usize) {
-- line 2627 ----------------------------------------
-- line 2628 ----------------------------------------
         .                   self.reserve(additional);
         .               }
         .           }
         .           
         .           impl<T, A: Allocator> Vec<T, A> {
         .               // leaf method to which various SpecFrom/SpecExtend implementations delegate when
         .               // they have no further optimizations to apply
         .               #[cfg(not(no_global_oom_handling))]
     2,284 ( 0.00%)      fn extend_desugared<I: Iterator<Item = T>>(&mut self, mut iterator: I) {
         .                   // This is the case for a general iterator.
         .                   //
         .                   // This function should be the moral equivalent of:
         .                   //
         .                   //      for item in iterator {
         .                   //          self.push(item);
         .                   //      }
   330,664 ( 0.01%)          while let Some(element) = iterator.next() {
    83,839 ( 0.00%)              let len = self.len();
   554,052 ( 0.01%)              if len == self.capacity() {
     1,344 ( 0.00%)                  let (lower, _) = iterator.size_hint();
       104 ( 0.00%)                  self.reserve(lower.saturating_add(1));
         .                       }
         .                       unsafe {
    22,973 ( 0.00%)                  ptr::write(self.as_mut_ptr().add(len), element);
         .                           // Since next() executes user code which can panic we have to bump the length
         .                           // after each step.
         .                           // NB can't overflow since we would have had to alloc the address space
   427,535 ( 0.01%)                  self.set_len(len + 1);
         .                       }
     1,280 ( 0.00%)          }
    10,433 ( 0.00%)      }
         .           
         .               /// Creates a splicing iterator that replaces the specified range in the vector
         .               /// with the given `replace_with` iterator and yields the removed items.
         .               /// `replace_with` does not need to be the same length as `range`.
         .               ///
         .               /// `range` is removed even if the iterator is not consumed until the end.
         .               ///
         .               /// It is unspecified how many elements are removed from the vector
-- line 2666 ----------------------------------------
-- line 2745 ----------------------------------------
         .               /// assert_eq!(evens, vec![2, 4, 6, 8, 14]);
         .               /// assert_eq!(odds, vec![1, 3, 5, 9, 11, 13, 15]);
         .               /// ```
         .               #[unstable(feature = "drain_filter", reason = "recently added", issue = "43244")]
         .               pub fn drain_filter<F>(&mut self, filter: F) -> DrainFilter<'_, T, F, A>
         .               where
         .                   F: FnMut(&mut T) -> bool,
         .               {
     4,307 ( 0.00%)          let old_len = self.len();
         .           
         .                   // Guard against us getting leaked (leak amplification)
         .                   unsafe {
         .                       self.set_len(0);
         .                   }
         .           
    10,664 ( 0.00%)          DrainFilter { vec: self, idx: 0, del: 0, old_len, pred: filter, panic_flag: false }
         .               }
         .           }
         .           
         .           /// Extend implementation that copies elements out of references before pushing them onto the Vec.
         .           ///
         .           /// This implementation is specialized for slice iterators, where it uses [`copy_from_slice`] to
         .           /// append the entire slice at once.
         .           ///
-- line 2768 ----------------------------------------
-- line 2803 ----------------------------------------
         .               #[inline]
         .               fn cmp(&self, other: &Self) -> Ordering {
         .                   Ord::cmp(&**self, &**other)
         .               }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           unsafe impl<#[may_dangle] T, A: Allocator> Drop for Vec<T, A> {
 1,890,779 ( 0.04%)      fn drop(&mut self) {
         .                   unsafe {
         .                       // use drop for [T]
         .                       // use a raw slice to refer to the elements of the vector as weakest necessary type;
         .                       // could avoid questions of validity in certain cases
 1,136,592 ( 0.03%)              ptr::drop_in_place(ptr::slice_from_raw_parts_mut(self.as_mut_ptr(), self.len))
         .                   }
         .                   // RawVec handles deallocation
 2,155,922 ( 0.05%)      }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           #[rustc_const_unstable(feature = "const_default_impls", issue = "87864")]
         .           impl<T> const Default for Vec<T> {
         .               /// Creates an empty `Vec<T>`.
         .               fn default() -> Vec<T> {
         .                   Vec::new()
-- line 2827 ----------------------------------------
-- line 2976 ----------------------------------------
         .               /// newly-allocated buffer with exactly the right capacity.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// assert_eq!(Box::from(vec![1, 2, 3]), vec![1, 2, 3].into_boxed_slice());
         .               /// ```
         .               fn from(v: Vec<T, A>) -> Self {
         4 ( 0.00%)          v.into_boxed_slice()
         .               }
         .           }
         .           
         .           #[cfg(not(no_global_oom_handling))]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl From<&str> for Vec<u8> {
         .               /// Allocate a `Vec<u8>` and fill it with a UTF-8 string.
         .               ///
-- line 2992 ----------------------------------------

 5,539,730 ( 0.13%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 118 ----------------------------------------
        .               /// let a = [1, 2, 3];
        .               /// assert_eq!(a.len(), 3);
        .               /// ```
        .               #[lang = "slice_len_fn"]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_stable(feature = "const_slice_len", since = "1.39.0")]
        .               #[inline]
        .               // SAFETY: const sound because we transmute out the length field as a usize (which it must be)
   83,292 ( 0.00%)      pub const fn len(&self) -> usize {
        .                   // FIXME: Replace with `crate::ptr::metadata(self)` when that is const-stable.
        .                   // As of this writing this causes a "Const-stable functions can only call other
        .                   // const-stable functions" error.
        .           
        .                   // SAFETY: Accessing the value from the `PtrRepr` union is safe since *const T
        .                   // and PtrComponents<T> have the same memory layouts. Only std can make this
        .                   // guarantee.
   83,292 ( 0.00%)          unsafe { crate::ptr::PtrRepr { const_ptr: self }.components.metadata }
   55,528 ( 0.00%)      }
        .           
        .               /// Returns `true` if the slice has a length of 0.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let a = [1, 2, 3];
        .               /// assert!(!a.is_empty());
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_stable(feature = "const_slice_is_empty", since = "1.39.0")]
        .               #[inline]
        .               pub const fn is_empty(&self) -> bool {
  916,940 ( 0.02%)          self.len() == 0
        .               }
        .           
        .               /// Returns the first element of the slice, or `None` if it is empty.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let v = [10, 40, 30];
-- line 157 ----------------------------------------
-- line 159 ----------------------------------------
        .               ///
        .               /// let w: &[i32] = &[];
        .               /// assert_eq!(None, w.first());
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
        .               #[inline]
        .               pub const fn first(&self) -> Option<&T> {
   19,524 ( 0.00%)          if let [first, ..] = self { Some(first) } else { None }
        .               }
        .           
        .               /// Returns a mutable pointer to the first element of the slice, or `None` if it is empty.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let x = &mut [0, 1, 2];
-- line 175 ----------------------------------------
-- line 178 ----------------------------------------
        .               ///     *first = 5;
        .               /// }
        .               /// assert_eq!(x, &[5, 1, 2]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_slice_first_last", issue = "83570")]
        .               #[inline]
        .               pub const fn first_mut(&mut self) -> Option<&mut T> {
    3,404 ( 0.00%)          if let [first, ..] = self { Some(first) } else { None }
        .               }
        .           
        .               /// Returns the first and all the rest of the elements of the slice, or `None` if it is empty.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let x = &[0, 1, 2];
-- line 194 ----------------------------------------
-- line 237 ----------------------------------------
        .               ///     assert_eq!(last, &2);
        .               ///     assert_eq!(elements, &[0, 1]);
        .               /// }
        .               /// ```
        .               #[stable(feature = "slice_splits", since = "1.5.0")]
        .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
        .               #[inline]
        .               pub const fn split_last(&self) -> Option<(&T, &[T])> {
   52,961 ( 0.00%)          if let [init @ .., last] = self { Some((last, init)) } else { None }
        .               }
        .           
        .               /// Returns the last and all the rest of the elements of the slice, or `None` if it is empty.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let x = &mut [0, 1, 2];
-- line 253 ----------------------------------------
-- line 276 ----------------------------------------
        .               ///
        .               /// let w: &[i32] = &[];
        .               /// assert_eq!(None, w.last());
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
        .               #[inline]
        .               pub const fn last(&self) -> Option<&T> {
  598,843 ( 0.01%)          if let [.., last] = self { Some(last) } else { None }
        .               }
        .           
        .               /// Returns a mutable pointer to the last item in the slice.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let x = &mut [0, 1, 2];
-- line 292 ----------------------------------------
-- line 295 ----------------------------------------
        .               ///     *last = 10;
        .               /// }
        .               /// assert_eq!(x, &[0, 1, 10]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_slice_first_last", issue = "83570")]
        .               #[inline]
        .               pub const fn last_mut(&mut self) -> Option<&mut T> {
1,118,856 ( 0.03%)          if let [.., last] = self { Some(last) } else { None }
        .               }
        .           
        .               /// Returns a reference to an element or subslice depending on the type of
        .               /// index.
        .               ///
        .               /// - If given a position, returns a reference to the element at that
        .               ///   position or `None` if out of bounds.
        .               /// - If given a range, returns the subslice corresponding to that range,
-- line 311 ----------------------------------------
-- line 317 ----------------------------------------
        .               /// let v = [10, 40, 30];
        .               /// assert_eq!(Some(&40), v.get(1));
        .               /// assert_eq!(Some(&[10, 40][..]), v.get(0..2));
        .               /// assert_eq!(None, v.get(3));
        .               /// assert_eq!(None, v.get(0..4));
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
  274,370 ( 0.01%)      pub fn get<I>(&self, index: I) -> Option<&I::Output>
        .               where
        .                   I: SliceIndex<Self>,
        .               {
   68,596 ( 0.00%)          index.get(self)
   68,582 ( 0.00%)      }
        .           
        .               /// Returns a mutable reference to an element or subslice depending on the
        .               /// type of index (see [`get`]) or `None` if the index is out of bounds.
        .               ///
        .               /// [`get`]: slice::get
        .               ///
        .               /// # Examples
        .               ///
-- line 338 ----------------------------------------
-- line 372 ----------------------------------------
        .               /// let x = &[1, 2, 4];
        .               ///
        .               /// unsafe {
        .               ///     assert_eq!(x.get_unchecked(1), &2);
        .               /// }
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
    2,864 ( 0.00%)      pub unsafe fn get_unchecked<I>(&self, index: I) -> &I::Output
        .               where
        .                   I: SliceIndex<Self>,
        .               {
        .                   // SAFETY: the caller must uphold most of the safety requirements for `get_unchecked`;
        .                   // the slice is dereferenceable because `self` is a safe reference.
        .                   // The returned pointer is safe because impls of `SliceIndex` have to guarantee that it is.
      716 ( 0.00%)          unsafe { &*index.get_unchecked(self) }
      716 ( 0.00%)      }
        .           
        .               /// Returns a mutable reference to an element or subslice, without doing
        .               /// bounds checking.
        .               ///
        .               /// For a safe alternative see [`get_mut`].
        .               ///
        .               /// # Safety
        .               ///
-- line 396 ----------------------------------------
-- line 447 ----------------------------------------
        .               ///     }
        .               /// }
        .               /// ```
        .               ///
        .               /// [`as_mut_ptr`]: slice::as_mut_ptr
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_stable(feature = "const_slice_as_ptr", since = "1.32.0")]
        .               #[inline]
  795,052 ( 0.02%)      pub const fn as_ptr(&self) -> *const T {
1,030,557 ( 0.02%)          self as *const [T] as *const T
  397,526 ( 0.01%)      }
        .           
        .               /// Returns an unsafe mutable pointer to the slice's buffer.
        .               ///
        .               /// The caller must ensure that the slice outlives the pointer this
        .               /// function returns, or else it will end up pointing to garbage.
        .               ///
        .               /// Modifying the container referenced by this slice may cause its buffer
        .               /// to be reallocated, which would also make any pointers to it invalid.
-- line 465 ----------------------------------------
-- line 475 ----------------------------------------
        .               ///         *x_ptr.add(i) += 2;
        .               ///     }
        .               /// }
        .               /// assert_eq!(x, &[3, 4, 6]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_ptr_offset", issue = "71499")]
        .               #[inline]
      876 ( 0.00%)      pub const fn as_mut_ptr(&mut self) -> *mut T {
        4 ( 0.00%)          self as *mut [T] as *mut T
      438 ( 0.00%)      }
        .           
        .               /// Returns the two raw pointers spanning the slice.
        .               ///
        .               /// The returned range is half-open, which means that the end pointer
        .               /// points *one past* the last element of the slice. This way, an empty
        .               /// slice is represented by two equal pointers, and the difference between
        .               /// the two pointers represents the size of the slice.
        .               ///
-- line 493 ----------------------------------------
-- line 582 ----------------------------------------
        .               /// v.swap(2, 4);
        .               /// assert!(v == ["a", "b", "e", "d", "c"]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_swap", issue = "83163")]
        .               #[inline]
        .               #[track_caller]
        .               pub const fn swap(&mut self, a: usize, b: usize) {
    3,856 ( 0.00%)          let _ = &self[a];
   45,950 ( 0.00%)          let _ = &self[b];
        .           
        .                   // SAFETY: we just checked that both `a` and `b` are in bounds
        .                   unsafe { self.swap_unchecked(a, b) }
        .               }
        .           
        .               /// Swaps two elements in the slice, without doing bounds checking.
        .               ///
        .               /// For a safe alternative see [`swap`].
-- line 599 ----------------------------------------
-- line 677 ----------------------------------------
        .           
        .                       // Because this function is first compiled in isolation,
        .                       // this check tells LLVM that the indexing below is
        .                       // in-bounds.  Then after inlining -- once the actual
        .                       // lengths of the slices are known -- it's removed.
        .                       let (a, b) = (&mut a[..n], &mut b[..n]);
        .           
        .                       for i in 0..n {
      554 ( 0.00%)                  mem::swap(&mut a[i], &mut b[n - 1 - i]);
        .                       }
        .                   }
        .               }
        .           
        .               /// Returns an iterator over the slice.
        .               ///
        .               /// # Examples
        .               ///
-- line 693 ----------------------------------------
-- line 697 ----------------------------------------
        .               ///
        .               /// assert_eq!(iterator.next(), Some(&1));
        .               /// assert_eq!(iterator.next(), Some(&2));
        .               /// assert_eq!(iterator.next(), Some(&4));
        .               /// assert_eq!(iterator.next(), None);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
  278,763 ( 0.01%)      pub fn iter(&self) -> Iter<'_, T> {
  278,763 ( 0.01%)          Iter::new(self)
  185,842 ( 0.00%)      }
        .           
        .               /// Returns an iterator that allows modifying each value.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let x = &mut [1, 2, 4];
        .               /// for elem in x.iter_mut() {
        .               ///     *elem += 2;
        .               /// }
        .               /// assert_eq!(x, &[3, 4, 6]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
      474 ( 0.00%)      pub fn iter_mut(&mut self) -> IterMut<'_, T> {
      474 ( 0.00%)          IterMut::new(self)
      316 ( 0.00%)      }
        .           
        .               /// Returns an iterator over all contiguous windows of length
        .               /// `size`. The windows overlap. If the slice is shorter than
        .               /// `size`, the iterator returns no values.
        .               ///
        .               /// # Panics
        .               ///
        .               /// Panics if `size` is 0.
-- line 732 ----------------------------------------
-- line 1499 ----------------------------------------
        .               ///     assert_eq!(left, [1, 2, 3, 4, 5, 6]);
        .               ///     assert_eq!(right, []);
        .               /// }
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
        .               #[track_caller]
        .               pub fn split_at(&self, mid: usize) -> (&[T], &[T]) {
       42 ( 0.00%)          assert!(mid <= self.len());
        .                   // SAFETY: `[ptr; mid]` and `[mid; len]` are inside `self`, which
        .                   // fulfills the requirements of `from_raw_parts_mut`.
        .                   unsafe { self.split_at_unchecked(mid) }
        .               }
        .           
        .               /// Divides one mutable slice into two at an index.
        .               ///
        .               /// The first will contain all indices from `[0, mid)` (excluding
-- line 1515 ----------------------------------------
-- line 1530 ----------------------------------------
        .               /// left[1] = 2;
        .               /// right[1] = 4;
        .               /// assert_eq!(v, [1, 2, 3, 4, 5, 6]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
        .               #[track_caller]
        .               pub fn split_at_mut(&mut self, mid: usize) -> (&mut [T], &mut [T]) {
  123,894 ( 0.00%)          assert!(mid <= self.len());
        .                   // SAFETY: `[ptr; mid]` and `[mid; len]` are inside `self`, which
        .                   // fulfills the requirements of `from_raw_parts_mut`.
        .                   unsafe { self.split_at_mut_unchecked(mid) }
        .               }
        .           
        .               /// Divides one slice into two at an index, without doing bounds checking.
        .               ///
        .               /// The first will contain all indices from `[0, mid)` (excluding
-- line 1546 ----------------------------------------
-- line 1628 ----------------------------------------
        .               pub unsafe fn split_at_mut_unchecked(&mut self, mid: usize) -> (&mut [T], &mut [T]) {
        .                   let len = self.len();
        .                   let ptr = self.as_mut_ptr();
        .           
        .                   // SAFETY: Caller has to check that `0 <= mid <= self.len()`.
        .                   //
        .                   // `[ptr; mid]` and `[mid; len]` are not overlapping, so returning a mutable reference
        .                   // is fine.
    8,055 ( 0.00%)          unsafe { (from_raw_parts_mut(ptr, mid), from_raw_parts_mut(ptr.add(mid), len - mid)) }
        .               }
        .           
        .               /// Divides one slice into an array and a remainder slice at an index.
        .               ///
        .               /// The array will contain all indices from `[0, N)` (excluding
        .               /// the index `N` itself) and the slice will contain all
        .               /// indices from `[N, len)` (excluding the index `len` itself).
        .               ///
-- line 1644 ----------------------------------------
-- line 2113 ----------------------------------------
        .               /// assert!(!v.iter().any(|e| e == "hi"));
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
        .               pub fn contains(&self, x: &T) -> bool
        .               where
        .                   T: PartialEq,
        .               {
      790 ( 0.00%)          cmp::SliceContains::slice_contains(x, self)
        .               }
        .           
        .               /// Returns `true` if `needle` is a prefix of the slice.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let v = [10, 40, 30];
-- line 2129 ----------------------------------------
-- line 2137 ----------------------------------------
        .               ///
        .               /// ```
        .               /// let v = &[10, 40, 30];
        .               /// assert!(v.starts_with(&[]));
        .               /// let v: &[u8] = &[];
        .               /// assert!(v.starts_with(&[]));
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
  179,340 ( 0.00%)      pub fn starts_with(&self, needle: &[T]) -> bool
        .               where
        .                   T: PartialEq,
        .               {
   76,860 ( 0.00%)          let n = needle.len();
  405,345 ( 0.01%)          self.len() >= n && needle == &self[..n]
  128,100 ( 0.00%)      }
        .           
        .               /// Returns `true` if `needle` is a suffix of the slice.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let v = [10, 40, 30];
        .               /// assert!(v.ends_with(&[30]));
-- line 2159 ----------------------------------------
-- line 2166 ----------------------------------------
        .               ///
        .               /// ```
        .               /// let v = &[10, 40, 30];
        .               /// assert!(v.ends_with(&[]));
        .               /// let v: &[u8] = &[];
        .               /// assert!(v.ends_with(&[]));
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
    4,424 ( 0.00%)      pub fn ends_with(&self, needle: &[T]) -> bool
        .               where
        .                   T: PartialEq,
        .               {
    5,688 ( 0.00%)          let (m, n) = (self.len(), needle.len());
   14,576 ( 0.00%)          m >= n && needle == &self[m - n..]
    3,160 ( 0.00%)      }
        .           
        .               /// Returns a subslice with the prefix removed.
        .               ///
        .               /// If the slice starts with `prefix`, returns the subslice after the prefix, wrapped in `Some`.
        .               /// If `prefix` is empty, simply returns the original slice.
        .               ///
        .               /// If the slice does not start with `prefix`, returns `None`.
        .               ///
-- line 2188 ----------------------------------------
-- line 2293 ----------------------------------------
        .               /// s.insert(idx, num);
        .               /// assert_eq!(s, [0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 42, 55]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn binary_search(&self, x: &T) -> Result<usize, usize>
        .               where
        .                   T: Ord,
        .               {
        3 ( 0.00%)          self.binary_search_by(|p| p.cmp(x))
        .               }
        .           
        .               /// Binary searches this sorted slice with a comparator function.
        .               ///
        .               /// The comparator function should implement an order consistent
        .               /// with the sort order of the underlying slice, returning an
        .               /// order code that indicates whether its argument is `Less`,
        .               /// `Equal` or `Greater` the desired target.
-- line 2309 ----------------------------------------
-- line 2345 ----------------------------------------
        .               #[inline]
        .               pub fn binary_search_by<'a, F>(&'a self, mut f: F) -> Result<usize, usize>
        .               where
        .                   F: FnMut(&'a T) -> Ordering,
        .               {
        .                   let mut size = self.len();
        .                   let mut left = 0;
        .                   let mut right = size;
4,070,958 ( 0.10%)          while left < right {
4,794,642 ( 0.11%)              let mid = left + size / 2;
        .           
        .                       // SAFETY: the call is made safe by the following invariants:
        .                       // - `mid >= 0`
        .                       // - `mid < size`: `mid` is limited by `[left; right)` bound.
  783,367 ( 0.02%)              let cmp = f(unsafe { self.get_unchecked(mid) });
        .           
        .                       // The reason why we use if/else control flow rather than match
        .                       // is because match reorders comparison operations, which is perf sensitive.
        .                       // This is x86 asm for u8: https://rust.godbolt.org/z/8Y8Pra.
1,434,605 ( 0.03%)              if cmp == Less {
2,262,763 ( 0.05%)                  left = mid + 1;
  690,361 ( 0.02%)              } else if cmp == Greater {
        .                           right = mid;
        .                       } else {
        .                           // SAFETY: same as the `get_unchecked` above
        .                           unsafe { crate::intrinsics::assume(mid < self.len()) };
        .                           return Ok(mid);
        .                       }
        .           
3,828,197 ( 0.09%)              size = right - left;
        .                   }
        .                   Err(left)
        .               }
        .           
        .               /// Binary searches this sorted slice with a key extraction function.
        .               ///
        .               /// Assumes that the slice is sorted by the key, for instance with
        .               /// [`sort_by_key`] using the same key extraction function.
-- line 2382 ----------------------------------------
-- line 2452 ----------------------------------------
        .               ///
        .               /// v.sort_unstable();
        .               /// assert!(v == [-5, -3, 1, 2, 4]);
        .               /// ```
        .               ///
        .               /// [pdqsort]: https://github.com/orlp/pdqsort
        .               #[stable(feature = "sort_unstable", since = "1.20.0")]
        .               #[inline]
      144 ( 0.00%)      pub fn sort_unstable(&mut self)
        .               where
        .                   T: Ord,
        .               {
    2,592 ( 0.00%)          sort::quicksort(self, |a, b| a.lt(b));
       96 ( 0.00%)      }
        .           
        .               /// Sorts the slice with a comparator function, but might not preserve the order of equal
        .               /// elements.
        .               ///
        .               /// This sort is unstable (i.e., may reorder equal elements), in-place
        .               /// (i.e., does not allocate), and *O*(*n* \* log(*n*)) worst-case.
        .               ///
        .               /// The comparator function must define a total ordering for the elements in the slice. If
-- line 2473 ----------------------------------------
-- line 3187 ----------------------------------------
        .               /// assert_eq!(slice, [4, 5, 3, 4, 5]);
        .               /// ```
        .               ///
        .               /// [`clone_from_slice`]: slice::clone_from_slice
        .               /// [`split_at_mut`]: slice::split_at_mut
        .               #[doc(alias = "memcpy")]
        .               #[stable(feature = "copy_from_slice", since = "1.9.0")]
        .               #[track_caller]
      590 ( 0.00%)      pub fn copy_from_slice(&mut self, src: &[T])
        .               where
        .                   T: Copy,
        .               {
        .                   // The panic code path was put into a cold function to not bloat the
        .                   // call site.
        .                   #[inline(never)]
        .                   #[cold]
        .                   #[track_caller]
        .                   fn len_mismatch_fail(dst_len: usize, src_len: usize) -> ! {
        .                       panic!(
        .                           "source slice length ({}) does not match destination slice length ({})",
        .                           src_len, dst_len,
        .                       );
        .                   }
        .           
  157,620 ( 0.00%)          if self.len() != src.len() {
        .                       len_mismatch_fail(self.len(), src.len());
        .                   }
        .           
        .                   // SAFETY: `self` is valid for `self.len()` elements by definition, and `src` was
        .                   // checked to have the same length. The slices cannot overlap because
        .                   // mutable references are exclusive.
        .                   unsafe {
      354 ( 0.00%)              ptr::copy_nonoverlapping(src.as_ptr(), self.as_mut_ptr(), self.len());
        .                   }
      118 ( 0.00%)      }
        .           
        .               /// Copies elements from one part of the slice to another part of itself,
        .               /// using a memmove.
        .               ///
        .               /// `src` is the range within `self` to copy from. `dest` is the starting
        .               /// index of the range within `self` to copy to, which will have the same
        .               /// length as `src`. The two ranges may overlap. The ends of the two ranges
        .               /// must be less than or equal to `self.len()`.
-- line 3229 ----------------------------------------
-- line 3380 ----------------------------------------
        .                       }
        .                       a << k
        .                   }
        .                   let gcd: usize = gcd(mem::size_of::<T>(), mem::size_of::<U>());
        .                   let ts: usize = mem::size_of::<U>() / gcd;
        .                   let us: usize = mem::size_of::<T>() / gcd;
        .           
        .                   // Armed with this knowledge, we can find how many `U`s we can fit!
        2 ( 0.00%)          let us_len = self.len() / ts * us;
        .                   // And how many `T`s will be in the trailing slice!
   15,394 ( 0.00%)          let ts_len = self.len() % ts;
        .                   (us_len, ts_len)
        .               }
        .           
        .               /// Transmute the slice to a slice of another type, ensuring alignment of the types is
        .               /// maintained.
        .               ///
        .               /// This method splits the slice into three distinct slices: prefix, correctly aligned middle
        .               /// slice of a new type, and the suffix slice. The method may make the middle slice the greatest
-- line 3398 ----------------------------------------
-- line 3429 ----------------------------------------
        .                       return (self, &[], &[]);
        .                   }
        .           
        .                   // First, find at what point do we split between the first and 2nd slice. Easy with
        .                   // ptr.align_offset.
        .                   let ptr = self.as_ptr();
        .                   // SAFETY: See the `align_to_mut` method for the detailed safety comment.
        .                   let offset = unsafe { crate::ptr::align_offset(ptr, mem::align_of::<U>()) };
   15,394 ( 0.00%)          if offset > self.len() {
        .                       (self, &[], &[])
        .                   } else {
        .                       let (left, rest) = self.split_at(offset);
        .                       let (us_len, ts_len) = rest.align_to_offsets::<U>();
        .                       // SAFETY: now `rest` is definitely aligned, so `from_raw_parts` below is okay,
        .                       // since the caller guarantees that we can transmute `T` to `U` safely.
        .                       unsafe {
        .                           (
        .                               left,
        .                               from_raw_parts(rest.as_ptr() as *const U, us_len),
   15,396 ( 0.00%)                      from_raw_parts(rest.as_ptr().add(rest.len() - ts_len), ts_len),
        .                           )
        .                       }
        .                   }
        .               }
        .           
        .               /// Transmute the slice to a slice of another type, ensuring alignment of the types is
        .               /// maintained.
        .               ///
-- line 3456 ----------------------------------------

4,380,365 ( 0.10%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs
--------------------------------------------------------------------------------
Ir                 

-- line 27 ----------------------------------------
        .           impl CacheEntry {
        .               #[inline]
        .               fn update(
        .                   &mut self,
        .                   new_file_and_idx: Option<(Lrc<SourceFile>, usize)>,
        .                   pos: BytePos,
        .                   time_stamp: usize,
        .               ) {
   10,024 ( 0.00%)          if let Some((file, file_idx)) = new_file_and_idx {
    7,859 ( 0.00%)              self.file = file;
   13,237 ( 0.00%)              self.file_index = file_idx;
        .                   }
        .           
    3,377 ( 0.00%)          let line_index = self.file.lookup_line(pos).unwrap();
        .                   let line_bounds = self.file.line_bounds(line_index);
   20,818 ( 0.00%)          self.line_number = line_index + 1;
   31,833 ( 0.00%)          self.line = line_bounds;
        .                   self.touch(time_stamp);
        .               }
        .           
        .               #[inline]
        .               fn touch(&mut self, time_stamp: usize) {
  286,266 ( 0.01%)          self.time_stamp = time_stamp;
        .               }
        .           }
        .           
        .           #[derive(Clone)]
        .           pub struct CachingSourceMapView<'sm> {
        .               source_map: &'sm SourceMap,
        .               line_cache: [CacheEntry; 3],
        .               time_stamp: usize,
        .           }
        .           
        .           impl<'sm> CachingSourceMapView<'sm> {
    7,526 ( 0.00%)      pub fn new(source_map: &'sm SourceMap) -> CachingSourceMapView<'sm> {
        .                   let files = source_map.files();
    3,763 ( 0.00%)          let first_file = files[0].clone();
        .                   let entry = CacheEntry {
        .                       time_stamp: 0,
        .                       line_number: 0,
        .                       line: BytePos(0)..BytePos(0),
        .                       file: first_file,
        .                       file_index: 0,
        .                   };
        .           
   18,815 ( 0.00%)          CachingSourceMapView {
        .                       source_map,
   26,341 ( 0.00%)              line_cache: [entry.clone(), entry.clone(), entry],
        .                       time_stamp: 0,
        .                   }
   15,052 ( 0.00%)      }
        .           
        .               pub fn byte_pos_to_line_and_col(
        .                   &mut self,
        .                   pos: BytePos,
        .               ) -> Option<(Lrc<SourceFile>, usize, BytePos)> {
        .                   self.time_stamp += 1;
        .           
        .                   // Check if the position is in one of the cached lines
-- line 85 ----------------------------------------
-- line 106 ----------------------------------------
        .                   };
        .           
        .                   let cache_entry = &mut self.line_cache[oldest];
        .                   cache_entry.update(new_file_and_idx, pos, self.time_stamp);
        .           
        .                   Some((cache_entry.file.clone(), cache_entry.line_number, pos - cache_entry.line.start))
        .               }
        .           
1,035,468 ( 0.02%)      pub fn span_data_to_lines_and_cols(
        .                   &mut self,
        .                   span_data: &SpanData,
        .               ) -> Option<(Lrc<SourceFile>, usize, BytePos, usize, BytePos)> {
  591,696 ( 0.01%)          self.time_stamp += 1;
        .           
        .                   // Check if lo and hi are in the cached lines.
  147,924 ( 0.00%)          let lo_cache_idx = self.cache_entry_index(span_data.lo);
  147,924 ( 0.00%)          let hi_cache_idx = self.cache_entry_index(span_data.hi);
        .           
  276,804 ( 0.01%)          if lo_cache_idx != -1 && hi_cache_idx != -1 {
        .                       // Cache hit for span lo and hi. Check if they belong to the same file.
        .                       let result = {
  276,684 ( 0.01%)                  let lo = &self.line_cache[lo_cache_idx as usize];
        .                           let hi = &self.line_cache[hi_cache_idx as usize];
        .           
  830,052 ( 0.02%)                  if lo.file_index != hi.file_index {
        .                               return None;
        .                           }
        .           
        .                           (
  276,684 ( 0.01%)                      lo.file.clone(),
        .                               lo.line_number,
        .                               span_data.lo - lo.line.start,
  138,342 ( 0.00%)                      hi.line_number,
        .                               span_data.hi - hi.line.start,
        .                           )
        .                       };
        .           
  138,342 ( 0.00%)              self.line_cache[lo_cache_idx as usize].touch(self.time_stamp);
  138,342 ( 0.00%)              self.line_cache[hi_cache_idx as usize].touch(self.time_stamp);
        .           
  553,368 ( 0.01%)              return Some(result);
        .                   }
        .           
        .                   // No cache hit or cache hit for only one of span lo and hi.
   19,044 ( 0.00%)          let oldest = if lo_cache_idx != -1 || hi_cache_idx != -1 {
        .                       let avoid_idx = if lo_cache_idx != -1 { lo_cache_idx } else { hi_cache_idx };
        .                       self.oldest_cache_entry_index_avoid(avoid_idx as usize)
        .                   } else {
        .                       self.oldest_cache_entry_index()
        .                   };
        .           
        .                   // If the entry doesn't point to the correct file, get the new file and index.
        .                   // Return early if the file containing beginning of span doesn't contain end of span.
   76,612 ( 0.00%)          let new_file_and_idx = if !file_contains(&self.line_cache[oldest].file, span_data.lo) {
   31,025 ( 0.00%)              let new_file_and_idx = self.file_for_position(span_data.lo)?;
   37,230 ( 0.00%)              if !file_contains(&new_file_and_idx.0, span_data.hi) {
        .                           return None;
        .                       }
        .           
   24,820 ( 0.00%)              Some(new_file_and_idx)
        .                   } else {
        .                       let file = &self.line_cache[oldest].file;
   10,131 ( 0.00%)              if !file_contains(&file, span_data.hi) {
        .                           return None;
        .                       }
        .           
   10,131 ( 0.00%)              None
        .                   };
        .           
        .                   // Update the cache entries.
   47,910 ( 0.00%)          let (lo_idx, hi_idx) = match (lo_cache_idx, hi_cache_idx) {
        .                       // Oldest cache entry is for span_data.lo line.
        .                       (-1, -1) => {
        .                           let lo = &mut self.line_cache[oldest];
        .                           lo.update(new_file_and_idx, span_data.lo, self.time_stamp);
        .           
   27,903 ( 0.00%)                  if !lo.line.contains(&span_data.hi) {
        .                               let new_file_and_idx = Some((lo.file.clone(), lo.file_index));
        .                               let next_oldest = self.oldest_cache_entry_index_avoid(oldest);
        .                               let hi = &mut self.line_cache[next_oldest];
        .                               hi.update(new_file_and_idx, span_data.hi, self.time_stamp);
        .                               (oldest, next_oldest)
        .                           } else {
        .                               (oldest, oldest)
        .                           }
        .                       }
        .                       // Oldest cache entry is for span_data.lo line.
        .                       (-1, _) => {
        .                           let lo = &mut self.line_cache[oldest];
        .                           lo.update(new_file_and_idx, span_data.lo, self.time_stamp);
      120 ( 0.00%)                  let hi = &mut self.line_cache[hi_cache_idx as usize];
      180 ( 0.00%)                  hi.touch(self.time_stamp);
        .                           (oldest, hi_cache_idx as usize)
        .                       }
        .                       // Oldest cache entry is for span_data.hi line.
        .                       (_, -1) => {
        .                           let hi = &mut self.line_cache[oldest];
      221 ( 0.00%)                  hi.update(new_file_and_idx, span_data.hi, self.time_stamp);
      442 ( 0.00%)                  let lo = &mut self.line_cache[lo_cache_idx as usize];
      884 ( 0.00%)                  lo.touch(self.time_stamp);
        .                           (lo_cache_idx as usize, oldest)
        .                       }
        .                       _ => {
        .                           panic!();
        .                       }
        .                   };
        .           
        .                   let lo = &self.line_cache[lo_idx];
        .                   let hi = &self.line_cache[hi_idx];
        .           
        .                   // Span lo and hi may equal line end when last line doesn't
        .                   // end in newline, hence the inclusive upper bounds below.
   19,164 ( 0.00%)          assert!(span_data.lo >= lo.line.start);
    9,582 ( 0.00%)          assert!(span_data.lo <= lo.line.end);
   19,164 ( 0.00%)          assert!(span_data.hi >= hi.line.start);
    9,582 ( 0.00%)          assert!(span_data.hi <= hi.line.end);
   47,910 ( 0.00%)          assert!(lo.file.contains(span_data.lo));
   28,746 ( 0.00%)          assert!(lo.file.contains(span_data.hi));
   28,746 ( 0.00%)          assert_eq!(lo.file_index, hi.file_index);
        .           
   28,746 ( 0.00%)          Some((
    9,582 ( 0.00%)              lo.file.clone(),
        .                       lo.line_number,
        .                       span_data.lo - lo.line.start,
    9,582 ( 0.00%)              hi.line_number,
        .                       span_data.hi - hi.line.start,
        .                   ))
1,331,316 ( 0.03%)      }
        .           
        .               fn cache_entry_index(&self, pos: BytePos) -> isize {
        .                   for (idx, cache_entry) in self.line_cache.iter().enumerate() {
1,168,224 ( 0.03%)              if cache_entry.line.contains(&pos) {
        .                           return idx as isize;
        .                       }
        .                   }
        .           
        .                   -1
        .               }
        .           
        .               fn oldest_cache_entry_index(&self) -> usize {
        .                   let mut oldest = 0;
        .           
        .                   for idx in 1..self.line_cache.len() {
   55,806 ( 0.00%)              if self.line_cache[idx].time_stamp < self.line_cache[oldest].time_stamp {
        .                           oldest = idx;
        .                       }
        .                   }
        .           
        .                   oldest
        .               }
        .           
        .               fn oldest_cache_entry_index_avoid(&self, avoid_idx: usize) -> usize {
        .                   let mut oldest = if avoid_idx != 0 { 0 } else { 1 };
        .           
        .                   for idx in 0..self.line_cache.len() {
    5,873 ( 0.00%)              if idx != avoid_idx
    3,870 ( 0.00%)                  && self.line_cache[idx].time_stamp < self.line_cache[oldest].time_stamp
        .                       {
        .                           oldest = idx;
        .                       }
        .                   }
        .           
        .                   oldest
        .               }
        .           
   31,025 ( 0.00%)      fn file_for_position(&self, pos: BytePos) -> Option<(Lrc<SourceFile>, usize)> {
    6,205 ( 0.00%)          if !self.source_map.files().is_empty() {
   12,410 ( 0.00%)              let file_idx = self.source_map.lookup_source_file_idx(pos);
        .                       let file = &self.source_map.files()[file_idx];
        .           
   49,640 ( 0.00%)              if file_contains(file, pos) {
        .                           return Some((file.clone(), file_idx));
        .                       }
        .                   }
        .           
        .                   None
   31,025 ( 0.00%)      }
        .           }
        .           
        .           #[inline]
        .           fn file_contains(file: &SourceFile, pos: BytePos) -> bool {
        .               // `SourceMap::lookup_source_file_idx` and `SourceFile::contains` both consider the position
        .               // one past the end of a file to belong to it. Normally, that's what we want. But for the
        .               // purposes of converting a byte position to a line and column number, we can't come up with a
        .               // line and column number if the file is empty, because an empty file doesn't contain any
-- line 290 ----------------------------------------

1,720,988 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_privacy/src/lib.rs
--------------------------------------------------------------------------------
Ir                 

-- line 59 ----------------------------------------
        .                   &mut self,
        .                   def_id: DefId,
        .                   kind: &str,
        .                   descr: &dyn fmt::Display,
        .               ) -> ControlFlow<Self::BreakTy>;
        .           
        .               /// Not overridden, but used to actually visit types and traits.
        .               fn skeleton(&mut self) -> DefIdVisitorSkeleton<'_, 'tcx, Self> {
  441,836 ( 0.01%)          DefIdVisitorSkeleton {
        .                       def_id_visitor: self,
        .                       visited_opaque_tys: Default::default(),
        .                       dummy: Default::default(),
        .                   }
        .               }
    5,256 ( 0.00%)      fn visit(&mut self, ty_fragment: impl TypeFoldable<'tcx>) -> ControlFlow<Self::BreakTy> {
        .                   ty_fragment.visit_with(&mut self.skeleton())
    8,760 ( 0.00%)      }
    3,240 ( 0.00%)      fn visit_trait(&mut self, trait_ref: TraitRef<'tcx>) -> ControlFlow<Self::BreakTy> {
        .                   self.skeleton().visit_trait(trait_ref)
    3,240 ( 0.00%)      }
        .               fn visit_projection_ty(
        .                   &mut self,
        .                   projection: ty::ProjectionTy<'tcx>,
        .               ) -> ControlFlow<Self::BreakTy> {
        .                   self.skeleton().visit_projection_ty(projection)
        .               }
        .               fn visit_predicates(
        .                   &mut self,
        .                   predicates: ty::GenericPredicates<'tcx>,
        .               ) -> ControlFlow<Self::BreakTy> {
    3,570 ( 0.00%)          self.skeleton().visit_predicates(predicates)
        .               }
        .           }
        .           
        .           struct DefIdVisitorSkeleton<'v, 'tcx, V: ?Sized> {
        .               def_id_visitor: &'v mut V,
        .               visited_opaque_tys: FxHashSet<DefId>,
        .               dummy: PhantomData<TyCtxt<'tcx>>,
        .           }
        .           
        .           impl<'tcx, V> DefIdVisitorSkeleton<'_, 'tcx, V>
        .           where
        .               V: DefIdVisitor<'tcx> + ?Sized,
        .           {
        .               fn visit_trait(&mut self, trait_ref: TraitRef<'tcx>) -> ControlFlow<V::BreakTy> {
      540 ( 0.00%)          let TraitRef { def_id, substs } = trait_ref;
   33,130 ( 0.00%)          self.def_id_visitor.visit_def_id(def_id, "trait", &trait_ref.print_only_trait_path())?;
      540 ( 0.00%)          if self.def_id_visitor.shallow() { ControlFlow::CONTINUE } else { substs.visit_with(self) }
        .               }
        .           
    1,870 ( 0.00%)      fn visit_projection_ty(
        .                   &mut self,
        .                   projection: ty::ProjectionTy<'tcx>,
        .               ) -> ControlFlow<V::BreakTy> {
    1,496 ( 0.00%)          let (trait_ref, assoc_substs) =
      374 ( 0.00%)              projection.trait_ref_and_own_substs(self.def_id_visitor.tcx());
        .                   self.visit_trait(trait_ref)?;
        .                   if self.def_id_visitor.shallow() {
        .                       ControlFlow::CONTINUE
        .                   } else {
        .                       assoc_substs.iter().try_for_each(|subst| subst.visit_with(self))
        .                   }
    1,683 ( 0.00%)      }
        .           
        .               fn visit_predicate(&mut self, predicate: ty::Predicate<'tcx>) -> ControlFlow<V::BreakTy> {
      778 ( 0.00%)          match predicate.kind().skip_binder() {
        .                       ty::PredicateKind::Trait(ty::TraitPredicate {
        .                           trait_ref,
        .                           constness: _,
        .                           polarity: _,
        .                       }) => self.visit_trait(trait_ref),
        .                       ty::PredicateKind::Projection(ty::ProjectionPredicate { projection_ty, term }) => {
        .                           term.visit_with(self)?;
        .                           self.visit_projection_ty(projection_ty)
-- line 132 ----------------------------------------
-- line 157 ----------------------------------------
        .                       ACNode::Leaf(leaf) => self.visit_const(leaf),
        .                       ACNode::Cast(_, _, ty) => self.visit_ty(ty),
        .                       ACNode::Binop(..) | ACNode::UnaryOp(..) | ACNode::FunctionCall(_, _) => {
        .                           ControlFlow::CONTINUE
        .                       }
        .                   })
        .               }
        .           
   24,990 ( 0.00%)      fn visit_predicates(
        .                   &mut self,
        .                   predicates: ty::GenericPredicates<'tcx>,
        .               ) -> ControlFlow<V::BreakTy> {
        .                   let ty::GenericPredicates { parent: _, predicates } = predicates;
        .                   predicates.iter().try_for_each(|&(predicate, _span)| self.visit_predicate(predicate))
   28,560 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx, V> TypeVisitor<'tcx> for DefIdVisitorSkeleton<'_, 'tcx, V>
        .           where
        .               V: DefIdVisitor<'tcx> + ?Sized,
        .           {
        .               type BreakTy = V::BreakTy;
        .           
1,249,317 ( 0.03%)      fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<V::BreakTy> {
  139,739 ( 0.00%)          let tcx = self.def_id_visitor.tcx();
        .                   // InternalSubsts are not visited here because they are visited below in `super_visit_with`.
  689,179 ( 0.02%)          match *ty.kind() {
  192,488 ( 0.00%)              ty::Adt(&ty::AdtDef { did: def_id, .. }, ..)
        .                       | ty::Foreign(def_id)
        .                       | ty::FnDef(def_id, ..)
        .                       | ty::Closure(def_id, ..)
        .                       | ty::Generator(def_id, ..) => {
  863,934 ( 0.02%)                  self.def_id_visitor.visit_def_id(def_id, "type", &ty)?;
        .                           if self.def_id_visitor.shallow() {
        .                               return ControlFlow::CONTINUE;
        .                           }
        .                           // Default type visitor doesn't visit signatures of fn types.
        .                           // Something like `fn() -> Priv {my_func}` is considered a private type even if
        .                           // `my_func` is public, so we need to visit signatures.
  196,453 ( 0.00%)                  if let ty::FnDef(..) = ty.kind() {
        .                               tcx.fn_sig(def_id).visit_with(self)?;
        .                           }
        .                           // Inherent static methods don't have self type in substs.
        .                           // Something like `fn() {my_method}` type of the method
        .                           // `impl Pub<Priv> { pub fn my_method() {} }` is considered a private type,
        .                           // so we need to visit the self type additionally.
  299,832 ( 0.01%)                  if let Some(assoc_item) = tcx.opt_associated_item(def_id) {
   15,840 ( 0.00%)                      if let ty::ImplContainer(impl_def_id) = assoc_item.container {
    2,946 ( 0.00%)                          tcx.type_of(impl_def_id).visit_with(self)?;
        .                               }
        .                           }
        .                       }
      374 ( 0.00%)              ty::Projection(proj) => {
        .                           if self.def_id_visitor.skip_assoc_tys() {
        .                               // Visitors searching for minimal visibility/reachability want to
        .                               // conservatively approximate associated types like `<Type as Trait>::Alias`
        .                               // as visible/reachable even if both `Type` and `Trait` are private.
        .                               // Ideally, associated types should be substituted in the same way as
        .                               // free type aliases, but this isn't done yet.
        .                               return ControlFlow::CONTINUE;
        .                           }
        .                           // This will also visit substs if necessary, so we don't need to recurse.
    1,868 ( 0.00%)                  return self.visit_projection_ty(proj);
        .                       }
      428 ( 0.00%)              ty::Dynamic(predicates, ..) => {
        .                           // All traits in the list are considered the "primary" part of the type
        .                           // and are visited by shallow visitors.
    3,424 ( 0.00%)                  for predicate in predicates {
    2,568 ( 0.00%)                      let trait_ref = match predicate.skip_binder() {
    2,568 ( 0.00%)                          ty::ExistentialPredicate::Trait(trait_ref) => trait_ref,
        .                                   ty::ExistentialPredicate::Projection(proj) => proj.trait_ref(tcx),
        .                                   ty::ExistentialPredicate::AutoTrait(def_id) => {
        .                                       ty::ExistentialTraitRef { def_id, substs: InternalSubsts::empty() }
        .                                   }
        .                               };
      856 ( 0.00%)                      let ty::ExistentialTraitRef { def_id, substs: _ } = trait_ref;
    5,136 ( 0.00%)                      self.def_id_visitor.visit_def_id(def_id, "trait", &trait_ref)?;
        .                           }
        .                       }
        .                       ty::Opaque(def_id, ..) => {
        .                           // Skip repeated `Opaque`s to avoid infinite recursion.
        .                           if self.visited_opaque_tys.insert(def_id) {
        .                               // The intent is to treat `impl Trait1 + Trait2` identically to
        .                               // `dyn Trait1 + Trait2`. Therefore we ignore def-id of the opaque type itself
        .                               // (it either has no visibility, or its visibility is insignificant, like
-- line 241 ----------------------------------------
-- line 270 ----------------------------------------
        .                       ty::Bound(..) | ty::Placeholder(..) | ty::Infer(..) => {
        .                           bug!("unexpected type: {:?}", ty)
        .                       }
        .                   }
        .           
        .                   if self.def_id_visitor.shallow() {
        .                       ControlFlow::CONTINUE
        .                   } else {
  387,892 ( 0.01%)              ty.super_visit_with(self)
        .                   }
1,213,266 ( 0.03%)      }
        .           
        .               fn visit_const(&mut self, c: &'tcx Const<'tcx>) -> ControlFlow<Self::BreakTy> {
      150 ( 0.00%)          self.visit_ty(c.ty)?;
       25 ( 0.00%)          let tcx = self.def_id_visitor.tcx();
      175 ( 0.00%)          if let Ok(Some(ct)) = AbstractConst::from_const(tcx, c) {
        .                       self.visit_abstract_const_expr(tcx, ct)?;
        .                   }
        .                   ControlFlow::CONTINUE
        .               }
        .           }
        .           
        .           fn min(vis1: ty::Visibility, vis2: ty::Visibility, tcx: TyCtxt<'_>) -> ty::Visibility {
    1,827 ( 0.00%)      if vis1.is_at_least(vis2, tcx) { vis2 } else { vis1 }
        .           }
        .           
        .           ////////////////////////////////////////////////////////////////////////////////
        .           /// Visitor used to determine if pub(restricted) is used anywhere in the crate.
        .           ///
        .           /// This is done so that `private_in_public` warnings can be turned into hard errors
        .           /// in crates that have been updated to use pub(restricted).
        .           ////////////////////////////////////////////////////////////////////////////////
-- line 301 ----------------------------------------
-- line 303 ----------------------------------------
        .               tcx: TyCtxt<'tcx>,
        .               has_pub_restricted: bool,
        .           }
        .           
        .           impl<'tcx> Visitor<'tcx> for PubRestrictedVisitor<'tcx> {
        .               type NestedFilter = nested_filter::All;
        .           
        .               fn nested_visit_map(&mut self) -> Self::Map {
    3,052 ( 0.00%)          self.tcx.hir()
        .               }
        .               fn visit_vis(&mut self, vis: &'tcx hir::Visibility<'tcx>) {
   10,543 ( 0.00%)          self.has_pub_restricted = self.has_pub_restricted || vis.node.is_pub_restricted();
        .               }
        .           }
        .           
        .           ////////////////////////////////////////////////////////////////////////////////
        .           /// Visitor used to determine impl visibility and reachability.
        .           ////////////////////////////////////////////////////////////////////////////////
        .           
        .           struct FindMin<'a, 'tcx, VL: VisibilityLike> {
-- line 322 ----------------------------------------
-- line 336 ----------------------------------------
        .                   true
        .               }
        .               fn visit_def_id(
        .                   &mut self,
        .                   def_id: DefId,
        .                   _kind: &str,
        .                   _descr: &dyn fmt::Display,
        .               ) -> ControlFlow<Self::BreakTy> {
   17,646 ( 0.00%)          self.min = VL::new_min(self, def_id);
        .                   ControlFlow::CONTINUE
        .               }
        .           }
        .           
        .           trait VisibilityLike: Sized {
        .               const MAX: Self;
        .               const SHALLOW: bool = false;
        .               fn new_min(find: &FindMin<'_, '_, Self>, def_id: DefId) -> Self;
        .           
        .               // Returns an over-approximation (`skip_assoc_tys` = true) of visibility due to
        .               // associated types for which we can't determine visibility precisely.
   12,264 ( 0.00%)      fn of_impl(def_id: LocalDefId, tcx: TyCtxt<'_>, access_levels: &AccessLevels) -> Self {
    5,840 ( 0.00%)          let mut find = FindMin { tcx, access_levels, min: Self::MAX };
    1,752 ( 0.00%)          find.visit(tcx.type_of(def_id));
    5,256 ( 0.00%)          if let Some(trait_ref) = tcx.impl_trait_ref(def_id) {
      540 ( 0.00%)              find.visit_trait(trait_ref);
        .                   }
    1,344 ( 0.00%)          find.min
   14,016 ( 0.00%)      }
        .           }
        .           impl VisibilityLike for ty::Visibility {
        .               const MAX: Self = ty::Visibility::Public;
   12,089 ( 0.00%)      fn new_min(find: &FindMin<'_, '_, Self>, def_id: DefId) -> Self {
    5,181 ( 0.00%)          min(find.tcx.visibility(def_id), find.min, find.tcx)
   17,270 ( 0.00%)      }
        .           }
        .           impl VisibilityLike for Option<AccessLevel> {
        .               const MAX: Self = Some(AccessLevel::Public);
        .               // Type inference is very smart sometimes.
        .               // It can make an impl reachable even some components of its type or trait are unreachable.
        .               // E.g. methods of `impl ReachableTrait<UnreachableTy> for ReachableTy<UnreachableTy> { ... }`
        .               // can be usable from other crates (#57264). So we skip substs when calculating reachability
        .               // and consider an impl reachable if its "shallow" type and trait are reachable.
        .               //
        .               // The assumption we make here is that type-inference won't let you use an impl without knowing
        .               // both "shallow" version of its self type and "shallow" version of its trait if it exists
        .               // (which require reaching the `DefId`s in them).
        .               const SHALLOW: bool = true;
    6,678 ( 0.00%)      fn new_min(find: &FindMin<'_, '_, Self>, def_id: DefId) -> Self {
        .                   cmp::min(
    6,678 ( 0.00%)              if let Some(def_id) = def_id.as_local() {
    2,284 ( 0.00%)                  find.access_levels.map.get(&def_id).copied()
        .                       } else {
        .                           Self::MAX
        .                       },
    5,084 ( 0.00%)              find.min,
        .                   )
    8,904 ( 0.00%)      }
        .           }
        .           
        .           ////////////////////////////////////////////////////////////////////////////////
        .           /// The embargo visitor, used to determine the exports of the AST.
        .           ////////////////////////////////////////////////////////////////////////////////
        .           
        .           struct EmbargoVisitor<'tcx> {
        .               tcx: TyCtxt<'tcx>,
-- line 400 ----------------------------------------
-- line 422 ----------------------------------------
        .           
        .           struct ReachEverythingInTheInterfaceVisitor<'a, 'tcx> {
        .               access_level: Option<AccessLevel>,
        .               item_def_id: LocalDefId,
        .               ev: &'a mut EmbargoVisitor<'tcx>,
        .           }
        .           
        .           impl<'tcx> EmbargoVisitor<'tcx> {
   25,480 ( 0.00%)      fn get(&self, def_id: LocalDefId) -> Option<AccessLevel> {
        .                   self.access_levels.map.get(&def_id).copied()
   25,480 ( 0.00%)      }
        .           
        .               fn update_with_hir_id(
        .                   &mut self,
        .                   hir_id: hir::HirId,
        .                   level: Option<AccessLevel>,
        .               ) -> Option<AccessLevel> {
    4,818 ( 0.00%)          let def_id = self.tcx.hir().local_def_id(hir_id);
        .                   self.update(def_id, level)
        .               }
        .           
        .               /// Updates node level and returns the updated level.
        .               fn update(&mut self, def_id: LocalDefId, level: Option<AccessLevel>) -> Option<AccessLevel> {
   30,046 ( 0.00%)          let old_level = self.get(def_id);
        .                   // Accessibility levels can only grow.
        .                   if level > old_level {
        .                       self.access_levels.map.insert(def_id, level.unwrap());
    1,138 ( 0.00%)              self.changed = true;
        .                       level
        .                   } else {
        .                       old_level
        .                   }
        .               }
        .           
        .               fn reach(
        .                   &mut self,
-- line 457 ----------------------------------------
-- line 458 ----------------------------------------
        .                   def_id: LocalDefId,
        .                   access_level: Option<AccessLevel>,
        .               ) -> ReachEverythingInTheInterfaceVisitor<'_, 'tcx> {
        .                   ReachEverythingInTheInterfaceVisitor {
        .                       access_level: cmp::min(access_level, Some(AccessLevel::Reachable)),
        .                       item_def_id: def_id,
        .                       ev: self,
        .                   }
   10,886 ( 0.00%)      }
        .           
        .               // We have to make sure that the items that macros might reference
        .               // are reachable, since they might be exported transitively.
        .               fn update_reachability_from_macro(&mut self, local_def_id: LocalDefId, md: &MacroDef) {
        .                   // Non-opaque macros cannot make other items more accessible than they already are.
        .           
        .                   let hir_id = self.tcx.hir().local_def_id_to_hir_id(local_def_id);
        .                   let attrs = self.tcx.hir().attrs(hir_id);
-- line 474 ----------------------------------------
-- line 630 ----------------------------------------
        .           }
        .           
        .           impl<'tcx> Visitor<'tcx> for EmbargoVisitor<'tcx> {
        .               type NestedFilter = nested_filter::All;
        .           
        .               /// We want to visit items in the context of their containing
        .               /// module and so forth, so supply a crate for doing a deep walk.
        .               fn nested_visit_map(&mut self) -> Self::Map {
    6,104 ( 0.00%)          self.tcx.hir()
        .               }
        .           
   17,154 ( 0.00%)      fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {
    3,812 ( 0.00%)          let item_level = match item.kind {
        .                       hir::ItemKind::Impl { .. } => {
        .                           let impl_level =
    7,008 ( 0.00%)                      Option::<AccessLevel>::of_impl(item.def_id, self.tcx, &self.access_levels);
    1,168 ( 0.00%)                  self.update(item.def_id, impl_level)
        .                       }
    2,952 ( 0.00%)              _ => self.get(item.def_id),
        .                   };
        .           
        .                   // Update levels of nested things.
   10,001 ( 0.00%)          match item.kind {
        .                       hir::ItemKind::Enum(ref def, _) => {
       24 ( 0.00%)                  for variant in def.variants {
      402 ( 0.00%)                      let variant_level = self.update_with_hir_id(variant.id, item_level);
      536 ( 0.00%)                      if let Some(ctor_hir_id) = variant.data.ctor_hir_id() {
        .                                   self.update_with_hir_id(ctor_hir_id, item_level);
        .                               }
      268 ( 0.00%)                      for field in variant.data.fields() {
       36 ( 0.00%)                          self.update_with_hir_id(field.hir_id, variant_level);
        .                               }
        .                           }
        .                       }
        .                       hir::ItemKind::Impl(ref impl_) => {
    3,504 ( 0.00%)                  for impl_item_ref in impl_.items {
    7,098 ( 0.00%)                      if impl_.of_trait.is_some()
      528 ( 0.00%)                          || self.tcx.visibility(impl_item_ref.id.def_id) == ty::Visibility::Public
        .                               {
    3,120 ( 0.00%)                          self.update(impl_item_ref.id.def_id, item_level);
        .                               }
        .                           }
        .                       }
        .                       hir::ItemKind::Trait(.., trait_item_refs) => {
        .                           for trait_item_ref in trait_item_refs {
        .                               self.update(trait_item_ref.id.def_id, item_level);
        .                           }
        .                       }
        .                       hir::ItemKind::Struct(ref def, _) | hir::ItemKind::Union(ref def, _) => {
    1,288 ( 0.00%)                  if let Some(ctor_hir_id) = def.ctor_hir_id() {
        .                               self.update_with_hir_id(ctor_hir_id, item_level);
        .                           }
      644 ( 0.00%)                  for field in def.fields() {
    2,456 ( 0.00%)                      if field.vis.node.is_pub() {
    1,552 ( 0.00%)                          self.update_with_hir_id(field.hir_id, item_level);
        .                               }
        .                           }
        .                       }
        .                       hir::ItemKind::Macro(ref macro_def) => {
        .                           self.update_reachability_from_macro(item.def_id, macro_def);
        .                       }
        .                       hir::ItemKind::ForeignMod { items, .. } => {
        .                           for foreign_item in items {
-- line 692 ----------------------------------------
-- line 704 ----------------------------------------
        .                       | hir::ItemKind::TyAlias(..)
        .                       | hir::ItemKind::Mod(..)
        .                       | hir::ItemKind::TraitAlias(..)
        .                       | hir::ItemKind::Fn(..)
        .                       | hir::ItemKind::ExternCrate(..) => {}
        .                   }
        .           
        .                   // Mark all items in interfaces of reachable items as reachable.
    9,530 ( 0.00%)          match item.kind {
        .                       // The interface is empty.
        .                       hir::ItemKind::Macro(..) | hir::ItemKind::ExternCrate(..) => {}
        .                       // All nested items are checked by `visit_item`.
        .                       hir::ItemKind::Mod(..) => {}
        .                       // Handled in the access level of in rustc_resolve
        .                       hir::ItemKind::Use(..) => {}
        .                       // The interface is empty.
        .                       hir::ItemKind::GlobalAsm(..) => {}
-- line 720 ----------------------------------------
-- line 732 ----------------------------------------
        .                               self.reach(item.def_id, exist_level).generics().predicates().ty();
        .                           }
        .                       }
        .                       // Visit everything.
        .                       hir::ItemKind::Const(..)
        .                       | hir::ItemKind::Static(..)
        .                       | hir::ItemKind::Fn(..)
        .                       | hir::ItemKind::TyAlias(..) => {
      354 ( 0.00%)                  if item_level.is_some() {
        .                               self.reach(item.def_id, item_level).generics().predicates().ty();
        .                           }
        .                       }
        .                       hir::ItemKind::Trait(.., trait_item_refs) => {
        .                           if item_level.is_some() {
        .                               self.reach(item.def_id, item_level).generics().predicates();
        .           
        .                               for trait_item_ref in trait_item_refs {
-- line 748 ----------------------------------------
-- line 761 ----------------------------------------
        .                       }
        .                       hir::ItemKind::TraitAlias(..) => {
        .                           if item_level.is_some() {
        .                               self.reach(item.def_id, item_level).generics().predicates();
        .                           }
        .                       }
        .                       // Visit everything except for private impl items.
        .                       hir::ItemKind::Impl(ref impl_) => {
    1,168 ( 0.00%)                  if item_level.is_some() {
    9,420 ( 0.00%)                      self.reach(item.def_id, item_level).generics().predicates().ty().trait_ref();
        .           
      942 ( 0.00%)                      for impl_item_ref in impl_.items {
    4,002 ( 0.00%)                          let impl_item_level = self.get(impl_item_ref.id.def_id);
    5,990 ( 0.00%)                          if impl_item_level.is_some() {
   13,340 ( 0.00%)                              self.reach(impl_item_ref.id.def_id, impl_item_level)
        .                                           .generics()
        .                                           .predicates()
        .                                           .ty();
        .                                   }
        .                               }
        .                           }
        .                       }
        .           
        .                       // Visit everything, but enum variants have their own levels.
        .                       hir::ItemKind::Enum(ref def, _) => {
       24 ( 0.00%)                  if item_level.is_some() {
      192 ( 0.00%)                      self.reach(item.def_id, item_level).generics().predicates();
        .                           }
       24 ( 0.00%)                  for variant in def.variants {
    1,206 ( 0.00%)                      let variant_level = self.get(self.tcx.hir().local_def_id(variant.id));
      134 ( 0.00%)                      if variant_level.is_some() {
      268 ( 0.00%)                          for field in variant.data.fields() {
      108 ( 0.00%)                              self.reach(self.tcx.hir().local_def_id(field.hir_id), variant_level)
        .                                           .ty();
        .                                   }
        .                                   // Corner case: if the variant is reachable, but its
        .                                   // enum is not, make the enum reachable as well.
      268 ( 0.00%)                          self.update(item.def_id, variant_level);
        .                               }
        .                           }
        .                       }
        .                       // Visit everything, but foreign items have their own levels.
        .                       hir::ItemKind::ForeignMod { items, .. } => {
        .                           for foreign_item in items {
        .                               let foreign_item_level = self.get(foreign_item.id.def_id);
        .                               if foreign_item_level.is_some() {
-- line 806 ----------------------------------------
-- line 808 ----------------------------------------
        .                                       .generics()
        .                                       .predicates()
        .                                       .ty();
        .                               }
        .                           }
        .                       }
        .                       // Visit everything except for private fields.
        .                       hir::ItemKind::Struct(ref struct_def, _) | hir::ItemKind::Union(ref struct_def, _) => {
      322 ( 0.00%)                  if item_level.is_some() {
      768 ( 0.00%)                      self.reach(item.def_id, item_level).generics().predicates();
      192 ( 0.00%)                      for field in struct_def.fields() {
    2,716 ( 0.00%)                          let def_id = self.tcx.hir().local_def_id(field.hir_id);
    1,164 ( 0.00%)                          let field_level = self.get(def_id);
      388 ( 0.00%)                          if field_level.is_some() {
    1,940 ( 0.00%)                              self.reach(def_id, field_level).ty();
        .                                   }
        .                               }
        .                           }
        .                       }
        .                   }
        .           
        .                   let orig_level = mem::replace(&mut self.prev_level, item_level);
    5,718 ( 0.00%)          intravisit::walk_item(self, item);
    1,906 ( 0.00%)          self.prev_level = orig_level;
   15,248 ( 0.00%)      }
        .           
        .               fn visit_block(&mut self, b: &'tcx hir::Block<'tcx>) {
        .                   // Blocks can have public items, for example impls, but they always
        .                   // start as completely private regardless of publicity of a function,
        .                   // constant, type, field, etc., in which this block resides.
        .                   let orig_level = mem::replace(&mut self.prev_level, None);
        .                   intravisit::walk_block(self, b);
        .                   self.prev_level = orig_level;
        .               }
        .           }
        .           
        .           impl ReachEverythingInTheInterfaceVisitor<'_, '_> {
   16,772 ( 0.00%)      fn generics(&mut self) -> &mut Self {
    9,584 ( 0.00%)          for param in &self.ev.tcx.generics_of(self.item_def_id).params {
    2,160 ( 0.00%)              match param.kind {
        .                           GenericParamDefKind::Lifetime => {}
      216 ( 0.00%)                  GenericParamDefKind::Type { has_default, .. } => {
      216 ( 0.00%)                      if has_default {
        .                                   self.visit(self.ev.tcx.type_of(param.def_id));
        .                               }
        .                           }
        .                           GenericParamDefKind::Const { has_default, .. } => {
        .                               self.visit(self.ev.tcx.type_of(param.def_id));
        .                               if has_default {
        .                                   self.visit(self.ev.tcx.const_param_default(param.def_id));
        .                               }
        .                           }
        .                       }
        .                   }
        .                   self
   21,564 ( 0.00%)      }
        .           
   11,980 ( 0.00%)      fn predicates(&mut self) -> &mut Self {
    7,188 ( 0.00%)          self.visit_predicates(self.ev.tcx.predicates_of(self.item_def_id));
        .                   self
   14,376 ( 0.00%)      }
        .           
   13,320 ( 0.00%)      fn ty(&mut self) -> &mut Self {
    8,004 ( 0.00%)          self.visit(self.ev.tcx.type_of(self.item_def_id));
        .                   self
   15,984 ( 0.00%)      }
        .           
        .               fn trait_ref(&mut self) -> &mut Self {
    5,652 ( 0.00%)          if let Some(trait_ref) = self.ev.tcx.impl_trait_ref(self.item_def_id) {
        .                       self.visit_trait(trait_ref);
        .                   }
        .                   self
        .               }
        .           }
        .           
        .           impl<'tcx> DefIdVisitor<'tcx> for ReachEverythingInTheInterfaceVisitor<'_, 'tcx> {
        .               fn tcx(&self) -> TyCtxt<'tcx> {
   36,544 ( 0.00%)          self.ev.tcx
        .               }
   45,590 ( 0.00%)      fn visit_def_id(
        .                   &mut self,
        .                   def_id: DefId,
        .                   _kind: &str,
        .                   _descr: &dyn fmt::Display,
        .               ) -> ControlFlow<Self::BreakTy> {
   27,354 ( 0.00%)          if let Some(def_id) = def_id.as_local() {
   25,548 ( 0.00%)              if let (ty::Visibility::Public, _) | (_, Some(AccessLevel::ReachableFromImplTrait)) =
    6,402 ( 0.00%)                  (self.tcx().visibility(def_id.to_def_id()), self.access_level)
        .                       {
        .                           self.ev.update(def_id, self.access_level);
        .                       }
        .                   }
        .                   ControlFlow::CONTINUE
   63,826 ( 0.00%)      }
        .           }
        .           
        .           //////////////////////////////////////////////////////////////////////////////////////
        .           /// Name privacy visitor, checks privacy and reports violations.
        .           /// Most of name privacy checks are performed during the main resolution phase,
        .           /// or later in type checking when field accesses and associated items are resolved.
        .           /// This pass performs remaining checks for fields in struct expressions and patterns.
        .           //////////////////////////////////////////////////////////////////////////////////////
-- line 909 ----------------------------------------
-- line 920 ----------------------------------------
        .               /// `Expr` or `Pat` nodes (they are guaranteed to be found only in bodies).
        .               #[track_caller]
        .               fn typeck_results(&self) -> &'tcx ty::TypeckResults<'tcx> {
        .                   self.maybe_typeck_results
        .                       .expect("`NamePrivacyVisitor::typeck_results` called outside of body")
        .               }
        .           
        .               // Checks that a field in a struct constructor (expression or pattern) is accessible.
   14,100 ( 0.00%)      fn check_field(
        .                   &mut self,
        .                   use_ctxt: Span,        // syntax context of the field name at the use site
        .                   span: Span,            // span of the field pattern, e.g., `x: 0`
        .                   def: &'tcx ty::AdtDef, // definition of the struct or enum
        .                   field: &'tcx ty::FieldDef,
        .                   in_update_syntax: bool,
        .               ) {
    2,820 ( 0.00%)          if def.is_enum() {
        .                       return;
        .                   }
        .           
        .                   // definition of the field
        .                   let ident = Ident::new(kw::Empty, use_ctxt);
    2,714 ( 0.00%)          let hir_id = self.tcx.hir().local_def_id_to_hir_id(self.current_item);
    9,499 ( 0.00%)          let def_id = self.tcx.adjust_ident_and_get_scope(ident, def.did, hir_id).1;
    1,357 ( 0.00%)          if !field.vis.is_accessible_from(def_id, self.tcx) {
        .                       let label = if in_update_syntax {
        .                           format!("field `{}` is private", field.name)
        .                       } else {
        .                           "private field".to_string()
        .                       };
        .           
        .                       struct_span_err!(
        .                           self.tcx.sess,
-- line 952 ----------------------------------------
-- line 955 ----------------------------------------
        .                           "field `{}` of {} `{}` is private",
        .                           field.name,
        .                           def.variant_descr(),
        .                           self.tcx.def_path_str(def.did)
        .                       )
        .                       .span_label(span, label)
        .                       .emit();
        .                   }
   11,280 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> Visitor<'tcx> for NamePrivacyVisitor<'tcx> {
        .               type NestedFilter = nested_filter::All;
        .           
        .               /// We want to visit items in the context of their containing
        .               /// module and so forth, so supply a crate for doing a deep walk.
        .               fn nested_visit_map(&mut self) -> Self::Map {
    1,719 ( 0.00%)          self.tcx.hir()
        .               }
        .           
        .               fn visit_mod(&mut self, _m: &'tcx hir::Mod<'tcx>, _s: Span, _n: hir::HirId) {
        .                   // Don't visit nested modules, since we run a separate visitor walk
        .                   // for each module in `privacy_access_levels`
        .               }
        .           
        .               fn visit_nested_body(&mut self, body: hir::BodyId) {
        .                   let old_maybe_typeck_results =
    7,329 ( 0.00%)              self.maybe_typeck_results.replace(self.tcx.typeck_body(body));
    7,914 ( 0.00%)          let body = self.tcx.hir().body(body);
        .                   self.visit_body(body);
      718 ( 0.00%)          self.maybe_typeck_results = old_maybe_typeck_results;
        .               }
        .           
        .               fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {
      953 ( 0.00%)          let orig_current_item = mem::replace(&mut self.current_item, item.def_id);
    2,845 ( 0.00%)          intravisit::walk_item(self, item);
      953 ( 0.00%)          self.current_item = orig_current_item;
        .               }
        .           
  201,960 ( 0.00%)      fn visit_expr(&mut self, expr: &'tcx hir::Expr<'tcx>) {
   44,880 ( 0.00%)          if let hir::ExprKind::Struct(qpath, fields, ref base) = expr.kind {
      810 ( 0.00%)              let res = self.typeck_results().qpath_res(qpath, expr.hir_id);
      405 ( 0.00%)              let adt = self.typeck_results().expr_ty(expr).ty_adt_def().unwrap();
    1,215 ( 0.00%)              let variant = adt.variant_of_res(res);
      540 ( 0.00%)              if let Some(base) = *base {
        .                           // If the expression uses FRU we need to make sure all the unmentioned fields
        .                           // are checked for privacy (RFC 736). Rather than computing the set of
        .                           // unmentioned fields, just check them all.
        .                           for (vf_index, variant_field) in variant.fields.iter().enumerate() {
        .                               let field = fields.iter().find(|f| {
        .                                   self.tcx.field_index(f.hir_id, self.typeck_results()) == vf_index
        .                               });
        .                               let (use_ctxt, span) = match field {
        .                                   Some(field) => (field.ident.span, field.span),
        .                                   None => (base.span, base.span),
        .                               };
        .                               self.check_field(use_ctxt, span, adt, variant_field, true);
        .                           }
        .                       } else {
        .                           for field in fields {
      391 ( 0.00%)                      let use_ctxt = field.ident.span;
    2,440 ( 0.00%)                      let index = self.tcx.field_index(field.hir_id, self.typeck_results());
    4,301 ( 0.00%)                      self.check_field(use_ctxt, field.span, adt, &variant.fields[index], false);
        .                           }
        .                       }
        .                   }
        .           
  224,400 ( 0.01%)          intravisit::walk_expr(self, expr);
        .               }
        .           
   41,456 ( 0.00%)      fn visit_pat(&mut self, pat: &'tcx hir::Pat<'tcx>) {
   10,706 ( 0.00%)          if let PatKind::Struct(ref qpath, fields, _) = pat.kind {
    2,394 ( 0.00%)              let res = self.typeck_results().qpath_res(qpath, pat.hir_id);
    1,368 ( 0.00%)              let adt = self.typeck_results().pat_ty(pat).ty_adt_def().unwrap();
    2,736 ( 0.00%)              let variant = adt.variant_of_res(res);
        .                       for field in fields {
    1,019 ( 0.00%)                  let use_ctxt = field.ident.span;
    5,962 ( 0.00%)                  let index = self.tcx.field_index(field.hir_id, self.typeck_results());
   10,190 ( 0.00%)                  self.check_field(use_ctxt, field.span, adt, &variant.fields[index], false);
        .                       }
        .                   }
        .           
   46,638 ( 0.00%)          intravisit::walk_pat(self, pat);
        .               }
        .           }
        .           
        .           ////////////////////////////////////////////////////////////////////////////////////////////
        .           /// Type privacy visitor, checks types for privacy and reports violations.
        .           /// Both explicitly written types and inferred types of expressions and patterns are checked.
        .           /// Checks are performed on "semantic" types regardless of names and their hygiene.
        .           ////////////////////////////////////////////////////////////////////////////////////////////
-- line 1045 ----------------------------------------
-- line 1061 ----------------------------------------
        .                       .expect("`TypePrivacyVisitor::typeck_results` called outside of body")
        .               }
        .           
        .               fn item_is_accessible(&self, did: DefId) -> bool {
        .                   self.tcx.visibility(did).is_accessible_from(self.current_item.to_def_id(), self.tcx)
        .               }
        .           
        .               // Take node-id of an expression or pattern and check its type for privacy.
  203,651 ( 0.00%)      fn check_expr_pat_type(&mut self, id: hir::HirId, span: Span) -> bool {
   29,093 ( 0.00%)          self.span = span;
   29,093 ( 0.00%)          let typeck_results = self.typeck_results();
        .                   let result: ControlFlow<()> = try {
  116,372 ( 0.00%)              self.visit(typeck_results.node_type(id))?;
  232,744 ( 0.01%)              self.visit(typeck_results.node_substs(id))?;
  261,837 ( 0.01%)              if let Some(adjustments) = typeck_results.adjustments().get(id) {
        .                           adjustments.iter().try_for_each(|adjustment| self.visit(adjustment.target))?;
        .                       }
        .                   };
        .                   result.is_break()
  232,744 ( 0.01%)      }
        .           
        .               fn check_def_id(&mut self, def_id: DefId, kind: &str, descr: &dyn fmt::Display) -> bool {
  113,630 ( 0.00%)          let is_error = !self.item_is_accessible(def_id);
        .                   if is_error {
        .                       self.tcx
        .                           .sess
        .                           .struct_span_err(self.span, &format!("{} `{}` is private", kind, descr))
        .                           .span_label(self.span, &format!("private {}", kind))
        .                           .emit();
        .                   }
        .                   is_error
-- line 1091 ----------------------------------------
-- line 1093 ----------------------------------------
        .           }
        .           
        .           impl<'tcx> Visitor<'tcx> for TypePrivacyVisitor<'tcx> {
        .               type NestedFilter = nested_filter::All;
        .           
        .               /// We want to visit items in the context of their containing
        .               /// module and so forth, so supply a crate for doing a deep walk.
        .               fn nested_visit_map(&mut self) -> Self::Map {
    1,719 ( 0.00%)          self.tcx.hir()
        .               }
        .           
        .               fn visit_mod(&mut self, _m: &'tcx hir::Mod<'tcx>, _s: Span, _n: hir::HirId) {
        .                   // Don't visit nested modules, since we run a separate visitor walk
        .                   // for each module in `privacy_access_levels`
        .               }
        .           
   13,190 ( 0.00%)      fn visit_nested_body(&mut self, body: hir::BodyId) {
        .                   let old_maybe_typeck_results =
    3,957 ( 0.00%)              self.maybe_typeck_results.replace(self.tcx.typeck_body(body));
    7,914 ( 0.00%)          let body = self.tcx.hir().body(body);
        .                   self.visit_body(body);
    1,319 ( 0.00%)          self.maybe_typeck_results = old_maybe_typeck_results;
   10,552 ( 0.00%)      }
        .           
        .               fn visit_generic_arg(&mut self, generic_arg: &'tcx hir::GenericArg<'tcx>) {
    3,735 ( 0.00%)          match generic_arg {
    1,604 ( 0.00%)              hir::GenericArg::Type(t) => self.visit_ty(t),
        .                       hir::GenericArg::Infer(inf) => self.visit_infer(inf),
        .                       hir::GenericArg::Lifetime(_) | hir::GenericArg::Const(_) => {}
        .                   }
        .               }
        .           
   38,423 ( 0.00%)      fn visit_ty(&mut self, hir_ty: &'tcx hir::Ty<'tcx>) {
   10,978 ( 0.00%)          self.span = hir_ty.span;
   16,467 ( 0.00%)          if let Some(typeck_results) = self.maybe_typeck_results {
        .                       // Types in bodies.
    1,614 ( 0.00%)              if self.visit(typeck_results.node_type(hir_ty.hir_id)).is_break() {
        .                           return;
        .                       }
        .                   } else {
        .                       // Types in signatures.
        .                       // FIXME: This is very ineffective. Ideally each HIR type should be converted
        .                       // into a semantic type only once and the result should be cached somehow.
   14,853 ( 0.00%)              if self.visit(rustc_typeck::hir_ty_to_ty(self.tcx, hir_ty)).is_break() {
        .                           return;
        .                       }
        .                   }
        .           
   16,467 ( 0.00%)          intravisit::walk_ty(self, hir_ty);
   32,934 ( 0.00%)      }
        .           
        .               fn visit_infer(&mut self, inf: &'tcx hir::InferArg) {
        .                   self.span = inf.span;
        .                   if let Some(typeck_results) = self.maybe_typeck_results {
        .                       if let Some(ty) = typeck_results.node_type_opt(inf.hir_id) {
        .                           if self.visit(ty).is_break() {
        .                               return;
        .                           }
-- line 1150 ----------------------------------------
-- line 1152 ----------------------------------------
        .                           // We don't do anything for const infers here.
        .                       }
        .                   } else {
        .                       bug!("visit_infer without typeck_results");
        .                   }
        .                   intravisit::walk_inf(self, inf);
        .               }
        .           
    5,192 ( 0.00%)      fn visit_trait_ref(&mut self, trait_ref: &'tcx hir::TraitRef<'tcx>) {
    1,947 ( 0.00%)          self.span = trait_ref.path.span;
      649 ( 0.00%)          if self.maybe_typeck_results.is_none() {
        .                       // Avoid calling `hir_trait_to_predicates` in bodies, it will ICE.
        .                       // The traits' privacy in bodies is already checked as a part of trait object types.
      649 ( 0.00%)              let bounds = rustc_typeck::hir_trait_to_predicates(
      649 ( 0.00%)                  self.tcx,
        .                           trait_ref,
        .                           // NOTE: This isn't really right, but the actual type doesn't matter here. It's
        .                           // just required by `ty::TraitRef`.
    1,947 ( 0.00%)                  self.tcx.types.never,
        .                       );
        .           
    5,841 ( 0.00%)              for (trait_predicate, _, _) in bounds.trait_bounds {
    4,543 ( 0.00%)                  if self.visit_trait(trait_predicate.skip_binder()).is_break() {
        .                               return;
        .                           }
        .                       }
        .           
    3,894 ( 0.00%)              for (poly_predicate, _) in bounds.projection_bounds {
        .                           let pred = poly_predicate.skip_binder();
        .                           let poly_pred_term = self.visit(pred.term);
        .                           if poly_pred_term.is_break()
        .                               || self.visit_projection_ty(pred.projection_ty).is_break()
        .                           {
        .                               return;
        .                           }
        .                       }
        .                   }
        .           
        .                   intravisit::walk_trait_ref(self, trait_ref);
    5,192 ( 0.00%)      }
        .           
        .               // Check types of expressions
  201,960 ( 0.00%)      fn visit_expr(&mut self, expr: &'tcx hir::Expr<'tcx>) {
  201,960 ( 0.00%)          if self.check_expr_pat_type(expr.hir_id, expr.span) {
        .                       // Do not check nested expressions if the error already happened.
        .                       return;
        .                   }
  150,570 ( 0.00%)          match expr.kind {
      887 ( 0.00%)              hir::ExprKind::Assign(_, rhs, _) | hir::ExprKind::Match(rhs, ..) => {
        .                           // Do not report duplicate errors for `x = y` and `match x { ... }`.
    5,124 ( 0.00%)                  if self.check_expr_pat_type(rhs.hir_id, rhs.span) {
        .                               return;
        .                           }
        .                       }
    1,339 ( 0.00%)              hir::ExprKind::MethodCall(segment, ..) => {
        .                           // Method calls have to be checked specially.
    2,678 ( 0.00%)                  self.span = segment.ident.span;
    8,034 ( 0.00%)                  if let Some(def_id) = self.typeck_results().type_dependent_def_id(expr.hir_id) {
    4,017 ( 0.00%)                      if self.visit(self.tcx.type_of(def_id)).is_break() {
        .                                   return;
        .                               }
        .                           } else {
        .                               self.tcx
        .                                   .sess
        .                                   .delay_span_bug(expr.span, "no type-dependent def for method call");
        .                           }
        .                       }
        .                       _ => {}
        .                   }
        .           
   67,320 ( 0.00%)          intravisit::walk_expr(self, expr);
  179,520 ( 0.00%)      }
        .           
        .               // Prohibit access to associated items with insufficient nominal visibility.
        .               //
        .               // Additionally, until better reachability analysis for macros 2.0 is available,
        .               // we prohibit access to private statics from other crates, this allows to give
        .               // more code internal visibility at link time. (Access to private functions
        .               // is already prohibited by type privacy for function types.)
  129,700 ( 0.00%)      fn visit_qpath(&mut self, qpath: &'tcx hir::QPath<'tcx>, id: hir::HirId, span: Span) {
   25,940 ( 0.00%)          let def = match qpath {
   37,665 ( 0.00%)              hir::QPath::Resolved(_, path) => match path.res {
   32,130 ( 0.00%)                  Res::Def(kind, def_id) => Some((kind, def_id)),
        .                           _ => None,
        .                       },
      415 ( 0.00%)              hir::QPath::TypeRelative(..) | hir::QPath::LangItem(..) => self
        .                           .maybe_typeck_results
    3,726 ( 0.00%)                  .and_then(|typeck_results| typeck_results.type_dependent_def(id)),
        .                   };
        .                   let def = def.filter(|(kind, _)| {
   11,538 ( 0.00%)              matches!(
        .                           kind,
        .                           DefKind::AssocFn | DefKind::AssocConst | DefKind::AssocTy | DefKind::Static
        .                       )
        .                   });
        .                   if let Some((kind, def_id)) = def {
        .                       let is_local_static =
    3,128 ( 0.00%)                  if let DefKind::Static = kind { def_id.is_local() } else { false };
    1,564 ( 0.00%)              if !self.item_is_accessible(def_id) && !is_local_static {
        .                           let sess = self.tcx.sess;
        .                           let sm = sess.source_map();
        .                           let name = match qpath {
        .                               hir::QPath::Resolved(..) | hir::QPath::LangItem(..) => {
        .                                   sm.span_to_snippet(qpath.span()).ok()
        .                               }
        .                               hir::QPath::TypeRelative(_, segment) => Some(segment.ident.to_string()),
        .                           };
-- line 1258 ----------------------------------------
-- line 1263 ----------------------------------------
        .                           };
        .                           sess.struct_span_err(span, &msg)
        .                               .span_label(span, &format!("private {}", kind))
        .                               .emit();
        .                           return;
        .                       }
        .                   }
        .           
  142,670 ( 0.00%)          intravisit::walk_qpath(self, qpath, id, span);
        .               }
        .           
        .               // Check types of patterns.
        .               fn visit_pat(&mut self, pattern: &'tcx hir::Pat<'tcx>) {
   34,503 ( 0.00%)          if self.check_expr_pat_type(pattern.hir_id, pattern.span) {
        .                       // Do not check nested patterns if the error already happened.
        .                       return;
        .                   }
        .           
   18,382 ( 0.00%)          intravisit::walk_pat(self, pattern);
        .               }
        .           
    3,695 ( 0.00%)      fn visit_local(&mut self, local: &'tcx hir::Local<'tcx>) {
    2,217 ( 0.00%)          if let Some(init) = local.init {
    5,173 ( 0.00%)              if self.check_expr_pat_type(init.hir_id, init.span) {
        .                           // Do not report duplicate errors for `let x = y`.
        .                           return;
        .                       }
        .                   }
        .           
        .                   intravisit::walk_local(self, local);
    2,956 ( 0.00%)      }
        .           
        .               // Check types in item interfaces.
        .               fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {
      953 ( 0.00%)          let orig_current_item = mem::replace(&mut self.current_item, item.def_id);
        .                   let old_maybe_typeck_results = self.maybe_typeck_results.take();
    2,845 ( 0.00%)          intravisit::walk_item(self, item);
      953 ( 0.00%)          self.maybe_typeck_results = old_maybe_typeck_results;
    1,755 ( 0.00%)          self.current_item = orig_current_item;
        .               }
        .           }
        .           
        .           impl<'tcx> DefIdVisitor<'tcx> for TypePrivacyVisitor<'tcx> {
        .               fn tcx(&self) -> TyCtxt<'tcx> {
  232,734 ( 0.01%)          self.tcx
        .               }
  852,225 ( 0.02%)      fn visit_def_id(
        .                   &mut self,
        .                   def_id: DefId,
        .                   kind: &str,
        .                   descr: &dyn fmt::Display,
        .               ) -> ControlFlow<Self::BreakTy> {
        .                   if self.check_def_id(def_id, kind, descr) {
        .                       ControlFlow::BREAK
        .                   } else {
        .                       ControlFlow::CONTINUE
        .                   }
  511,335 ( 0.01%)      }
        .           }
        .           
        .           ///////////////////////////////////////////////////////////////////////////////
        .           /// Obsolete visitors for checking for private items in public interfaces.
        .           /// These visitors are supposed to be kept in frozen state and produce an
        .           /// "old error node set". For backward compatibility the new visitor reports
        .           /// warnings instead of hard errors when the erroneous node is not in this old set.
        .           ///////////////////////////////////////////////////////////////////////////////
-- line 1328 ----------------------------------------
-- line 1342 ----------------------------------------
        .               /// Whether we've recurred at all (i.e., if we're pointing at the
        .               /// first type on which `visit_ty` was called).
        .               at_outer_type: bool,
        .               /// Whether that first type is a public path.
        .               outer_type_is_public_path: bool,
        .           }
        .           
        .           impl<'a, 'tcx> ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {
    1,127 ( 0.00%)      fn path_is_private_type(&self, path: &hir::Path<'_>) -> bool {
    3,387 ( 0.00%)          let did = match path.res {
        .                       Res::PrimTy(..) | Res::SelfTy(..) | Res::Err => return false,
    4,902 ( 0.00%)              res => res.def_id(),
        .                   };
        .           
        .                   // A path can only be private if:
        .                   // it's in this crate...
      817 ( 0.00%)          if let Some(did) = did.as_local() {
        .                       // .. and it corresponds to a private type in the AST (this returns
        .                       // `None` for type parameters).
    2,855 ( 0.00%)              match self.tcx.hir().find(self.tcx.hir().local_def_id_to_hir_id(did)) {
    2,276 ( 0.00%)                  Some(Node::Item(item)) => !item.vis.node.is_pub(),
        .                           Some(_) | None => false,
        .                       }
        .                   } else {
        .                       false
        .                   }
    2,254 ( 0.00%)      }
        .           
        .               fn trait_is_public(&self, trait_id: LocalDefId) -> bool {
        .                   // FIXME: this would preferably be using `exported_items`, but all
        .                   // traits are exported currently (see `EmbargoVisitor.exported_trait`).
        .                   self.access_levels.is_public(trait_id)
        .               }
        .           
        .               fn check_generic_bound(&mut self, bound: &hir::GenericBound<'_>) {
       12 ( 0.00%)          if let hir::GenericBound::Trait(ref trait_ref, _) = *bound {
        2 ( 0.00%)              if self.path_is_private_type(trait_ref.trait_ref.path) {
        .                           self.old_error_set.insert(trait_ref.trait_ref.hir_ref_id);
        .                       }
        .                   }
        .               }
        .           
        .               fn item_is_public(&self, def_id: LocalDefId, vis: &hir::Visibility<'_>) -> bool {
       76 ( 0.00%)          self.access_levels.is_reachable(def_id) || vis.node.is_pub()
        .               }
        .           }
        .           
        .           impl<'a, 'b, 'tcx, 'v> Visitor<'v> for ObsoleteCheckTypeForPrivatenessVisitor<'a, 'b, 'tcx> {
        .               fn visit_generic_arg(&mut self, generic_arg: &'v hir::GenericArg<'v>) {
        .                   match generic_arg {
        .                       hir::GenericArg::Type(t) => self.visit_ty(t),
        .                       hir::GenericArg::Infer(inf) => self.visit_ty(&inf.to_ty()),
        .                       hir::GenericArg::Lifetime(_) | hir::GenericArg::Const(_) => {}
        .                   }
        .               }
        .           
        .               fn visit_ty(&mut self, ty: &hir::Ty<'_>) {
    2,355 ( 0.00%)          if let hir::TyKind::Path(hir::QPath::Resolved(_, path)) = ty.kind {
    1,884 ( 0.00%)              if self.inner.path_is_private_type(path) {
        .                           self.contains_private = true;
        .                           // Found what we're looking for, so let's stop working.
        .                           return;
        .                       }
        .                   }
        .                   if let hir::TyKind::Path(_) = ty.kind {
        .                       if self.at_outer_type {
      471 ( 0.00%)                  self.outer_type_is_public_path = true;
        .                       }
        .                   }
      942 ( 0.00%)          self.at_outer_type = false;
      942 ( 0.00%)          intravisit::walk_ty(self, ty)
    1,884 ( 0.00%)      }
        .           
        .               // Don't want to recurse into `[, .. expr]`.
        .               fn visit_expr(&mut self, _: &hir::Expr<'_>) {}
        .           }
        .           
        .           impl<'a, 'tcx> Visitor<'tcx> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {
        .               type NestedFilter = nested_filter::All;
        .           
        .               /// We want to visit items in the context of their containing
        .               /// module and so forth, so supply a crate for doing a deep walk.
        .               fn nested_visit_map(&mut self) -> Self::Map {
      745 ( 0.00%)          self.tcx.hir()
        .               }
        .           
    4,968 ( 0.00%)      fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {
    2,208 ( 0.00%)          match item.kind {
        .                       // Contents of a private mod can be re-exported, so we need
        .                       // to check internals.
        .                       hir::ItemKind::Mod(_) => {}
        .           
        .                       // An `extern {}` doesn't introduce a new privacy
        .                       // namespace (the contents have their own privacies).
        .                       hir::ItemKind::ForeignMod { .. } => {}
        .           
-- line 1437 ----------------------------------------
-- line 1454 ----------------------------------------
        .                           // `impl [... for] Private` is never visible.
        .                           let self_contains_private;
        .                           // `impl [... for] Public<...>`, but not `impl [... for]
        .                           // Vec<Public>` or `(Public,)`, etc.
        .                           let self_is_public_path;
        .           
        .                           // Check the properties of the `Self` type:
        .                           {
    1,884 ( 0.00%)                      let mut visitor = ObsoleteCheckTypeForPrivatenessVisitor {
        .                                   inner: self,
        .                                   contains_private: false,
        .                                   at_outer_type: true,
        .                                   outer_type_is_public_path: false,
        .                               };
      471 ( 0.00%)                      visitor.visit_ty(impl_.self_ty);
        .                               self_contains_private = visitor.contains_private;
        .                               self_is_public_path = visitor.outer_type_is_public_path;
        .                           }
        .           
        .                           // Miscellaneous info about the impl:
        .           
        .                           // `true` iff this is `impl Private for ...`.
        .                           let not_private_trait = impl_.of_trait.as_ref().map_or(
        .                               true, // no trait counts as public trait
        .                               |tr| {
    1,281 ( 0.00%)                          if let Some(def_id) = tr.path.res.def_id().as_local() {
        .                                       self.trait_is_public(def_id)
        .                                   } else {
        .                                       true // external traits must be public
        .                                   }
        .                               },
        .                           );
        .           
        .                           // `true` iff this is a trait impl or at least one method is public.
-- line 1487 ----------------------------------------
-- line 1488 ----------------------------------------
        .                           //
        .                           // `impl Public { $( fn ...() {} )* }` is not visible.
        .                           //
        .                           // This is required over just using the methods' privacy
        .                           // directly because we might have `impl<T: Foo<Private>> ...`,
        .                           // and we shouldn't warn about the generics if all the methods
        .                           // are private (because `T` won't be visible externally).
        .                           let trait_or_some_public_method = impl_.of_trait.is_some()
       44 ( 0.00%)                      || impl_.items.iter().any(|impl_item_ref| {
      176 ( 0.00%)                          let impl_item = self.tcx.hir().impl_item(impl_item_ref.id);
      308 ( 0.00%)                          match impl_item.kind {
        .                                       hir::ImplItemKind::Const(..) | hir::ImplItemKind::Fn(..) => {
        .                                           self.access_levels.is_reachable(impl_item_ref.id.def_id)
        .                                       }
        .                                       hir::ImplItemKind::TyAlias(_) => false,
        .                                   }
        .                               });
        .           
      942 ( 0.00%)                  if !self_contains_private && not_private_trait && trait_or_some_public_method {
        .                               intravisit::walk_generics(self, &impl_.generics);
        .           
      942 ( 0.00%)                      match impl_.of_trait {
        .                                   None => {
       44 ( 0.00%)                              for impl_item_ref in impl_.items {
        .                                           // This is where we choose whether to walk down
        .                                           // further into the impl to check its items. We
        .                                           // should only walk into public items so that we
        .                                           // don't erroneously report errors for private
        .                                           // types in private items.
      792 ( 0.00%)                                  let impl_item = self.tcx.hir().impl_item(impl_item_ref.id);
      880 ( 0.00%)                                  match impl_item.kind {
        .                                               hir::ImplItemKind::Const(..) | hir::ImplItemKind::Fn(..)
      264 ( 0.00%)                                          if self
      132 ( 0.00%)                                              .item_is_public(impl_item.def_id, &impl_item.vis) =>
        .                                               {
        .                                                   intravisit::walk_impl_item(self, impl_item)
        .                                               }
        .                                               hir::ImplItemKind::TyAlias(..) => {
        .                                                   intravisit::walk_impl_item(self, impl_item)
        .                                               }
        .                                               _ => {}
        .                                           }
-- line 1529 ----------------------------------------
-- line 1538 ----------------------------------------
        .                                       //
        .                                       // Those in 1. can only occur if the trait is in
        .                                       // this crate and will've been warned about on the
        .                                       // trait definition (there's no need to warn twice
        .                                       // so we don't check the methods).
        .                                       //
        .                                       // Those in 2. are warned via walk_generics and this
        .                                       // call here.
    1,281 ( 0.00%)                              intravisit::walk_path(self, tr.path);
        .           
        .                                       // Those in 3. are warned with this call.
      427 ( 0.00%)                              for impl_item_ref in impl_.items {
    2,675 ( 0.00%)                                  let impl_item = self.tcx.hir().impl_item(impl_item_ref.id);
    3,480 ( 0.00%)                                  if let hir::ImplItemKind::TyAlias(ty) = impl_item.kind {
        .                                               self.visit_ty(ty);
        .                                           }
        .                                       }
        .                                   }
        .                               }
        .                           } else if impl_.of_trait.is_none() && self_is_public_path {
        .                               // `impl Public<Private> { ... }`. Any public static
        .                               // methods will be visible as `Public::foo`.
-- line 1559 ----------------------------------------
-- line 1584 ----------------------------------------
        .                           return;
        .                       }
        .           
        .                       // `type ... = ...;` can contain private types, because
        .                       // we're introducing a new name.
        .                       hir::ItemKind::TyAlias(..) => return,
        .           
        .                       // Not at all public, so we don't care.
      296 ( 0.00%)              _ if !self.item_is_public(item.def_id, &item.vis) => {
        .                           return;
        .                       }
        .           
        .                       _ => {}
        .                   }
        .           
        .                   // We've carefully constructed it so that if we're here, then
        .                   // any `visit_ty`'s will be called on things that are in
        .                   // public signatures, i.e., things that we're interested in for
        .                   // this visitor.
      730 ( 0.00%)          intravisit::walk_item(self, item);
    3,832 ( 0.00%)      }
        .           
    1,536 ( 0.00%)      fn visit_generics(&mut self, generics: &'tcx hir::Generics<'tcx>) {
        .                   for param in generics.params {
        2 ( 0.00%)              for bound in param.bounds {
        .                           self.check_generic_bound(bound);
        .                       }
        .                   }
      192 ( 0.00%)          for predicate in generics.where_clause.predicates {
        6 ( 0.00%)              match predicate {
        .                           hir::WherePredicate::BoundPredicate(bound_pred) => {
        2 ( 0.00%)                      for bound in bound_pred.bounds.iter() {
        .                                   self.check_generic_bound(bound)
        .                               }
        .                           }
        .                           hir::WherePredicate::RegionPredicate(_) => {}
        .                           hir::WherePredicate::EqPredicate(eq_pred) => {
        .                               self.visit_ty(eq_pred.rhs_ty);
        .                           }
        .                       }
        .                   }
    1,536 ( 0.00%)      }
        .           
        .               fn visit_foreign_item(&mut self, item: &'tcx hir::ForeignItem<'tcx>) {
        .                   if self.access_levels.is_reachable(item.def_id) {
        .                       intravisit::walk_foreign_item(self, item)
        .                   }
        .               }
        .           
        .               fn visit_ty(&mut self, t: &'tcx hir::Ty<'tcx>) {
    2,832 ( 0.00%)          if let hir::TyKind::Path(hir::QPath::Resolved(_, path)) = t.kind {
    2,024 ( 0.00%)              if self.path_is_private_type(path) {
        .                           self.old_error_set.insert(t.hir_id);
        .                       }
        .                   }
    4,428 ( 0.00%)          intravisit::walk_ty(self, t)
        .               }
        .           
      536 ( 0.00%)      fn visit_variant(
        .                   &mut self,
        .                   v: &'tcx hir::Variant<'tcx>,
        .                   g: &'tcx hir::Generics<'tcx>,
        .                   item_id: hir::HirId,
        .               ) {
      670 ( 0.00%)          if self.access_levels.is_reachable(self.tcx.hir().local_def_id(v.id)) {
       67 ( 0.00%)              self.in_variant = true;
        .                       intravisit::walk_variant(self, v, g, item_id);
       67 ( 0.00%)              self.in_variant = false;
        .                   }
      469 ( 0.00%)      }
        .           
    1,000 ( 0.00%)      fn visit_field_def(&mut self, s: &'tcx hir::FieldDef<'tcx>) {
      812 ( 0.00%)          if s.vis.node.is_pub() || self.in_variant {
        .                       intravisit::walk_field_def(self, s);
        .                   }
        .               }
        .           
        .               // We don't need to introspect into these at all: an
        .               // expression/block context can't possibly contain exported things.
        .               // (Making them no-ops stops us from traversing the whole AST without
        .               // having to be super careful about our `walk_...` calls above.)
-- line 1664 ----------------------------------------
-- line 1679 ----------------------------------------
        .               /// The visitor checks that each component type is at least this visible.
        .               required_visibility: ty::Visibility,
        .               has_pub_restricted: bool,
        .               has_old_errors: bool,
        .               in_assoc_ty: bool,
        .           }
        .           
        .           impl SearchInterfaceForPrivateItemsVisitor<'_> {
    8,218 ( 0.00%)      fn generics(&mut self) -> &mut Self {
    3,522 ( 0.00%)          for param in &self.tcx.generics_of(self.item_def_id).params {
    2,571 ( 0.00%)              match param.kind {
        .                           GenericParamDefKind::Lifetime => {}
      237 ( 0.00%)                  GenericParamDefKind::Type { has_default, .. } => {
      237 ( 0.00%)                      if has_default {
        .                                   self.visit(self.tcx.type_of(param.def_id));
        .                               }
        .                           }
        .                           // FIXME(generic_const_exprs): May want to look inside const here
        .                           GenericParamDefKind::Const { .. } => {
        .                               self.visit(self.tcx.type_of(param.def_id));
        .                           }
        .                       }
        .                   }
        .                   self
    9,392 ( 0.00%)      }
        .           
    5,870 ( 0.00%)      fn predicates(&mut self) -> &mut Self {
        .                   // N.B., we use `explicit_predicates_of` and not `predicates_of`
        .                   // because we don't want to report privacy errors due to where
        .                   // clauses that the compiler inferred. We only want to
        .                   // consider the ones that the user wrote. This is important
        .                   // for the inferred outlives rules; see
        .                   // `src/test/ui/rfc-2093-infer-outlives/privacy.rs`.
    2,348 ( 0.00%)          self.visit_predicates(self.tcx.explicit_predicates_of(self.item_def_id));
        .                   self
    7,044 ( 0.00%)      }
        .           
        .               fn bounds(&mut self) -> &mut Self {
        .                   self.visit_predicates(ty::GenericPredicates {
        .                       parent: None,
        .                       predicates: self.tcx.explicit_item_bounds(self.item_def_id),
        .                   });
        .                   self
        .               }
        .           
    6,350 ( 0.00%)      fn ty(&mut self) -> &mut Self {
    2,540 ( 0.00%)          self.visit(self.tcx.type_of(self.item_def_id));
        .                   self
    6,350 ( 0.00%)      }
        .           
        .               fn check_def_id(&mut self, def_id: DefId, kind: &str, descr: &dyn fmt::Display) -> bool {
   20,231 ( 0.00%)          if self.leaks_private_dep(def_id) {
        .                       self.tcx.struct_span_lint_hir(
        .                           lint::builtin::EXPORTED_PRIVATE_DEPENDENCIES,
        .                           self.tcx.hir().local_def_id_to_hir_id(self.item_def_id),
        .                           self.tcx.def_span(self.item_def_id.to_def_id()),
        .                           |lint| {
        .                               lint.build(&format!(
        .                                   "{} `{}` from private dependency '{}' in public \
        .                                                           interface",
-- line 1738 ----------------------------------------
-- line 1740 ----------------------------------------
        .                                   descr,
        .                                   self.tcx.crate_name(def_id.krate)
        .                               ))
        .                               .emit()
        .                           },
        .                       );
        .                   }
        .           
    9,691 ( 0.00%)          let hir_id = match def_id.as_local() {
    2,713 ( 0.00%)              Some(def_id) => self.tcx.hir().local_def_id_to_hir_id(def_id),
        .                       None => return false,
        .                   };
        .           
        .                   let vis = self.tcx.visibility(def_id);
    4,959 ( 0.00%)          if !vis.is_at_least(self.required_visibility, self.tcx) {
        .                       let vis_descr = match vis {
        .                           ty::Visibility::Public => "public",
        .                           ty::Visibility::Invisible => "private",
        .                           ty::Visibility::Restricted(vis_def_id) => {
        .                               if vis_def_id == self.tcx.parent_module(hir_id).to_def_id() {
        .                                   "private"
        .                               } else if vis_def_id.is_top_level_module() {
        .                                   "crate-private"
-- line 1762 ----------------------------------------
-- line 1792 ----------------------------------------
        .                   false
        .               }
        .           
        .               /// An item is 'leaked' from a private dependency if all
        .               /// of the following are true:
        .               /// 1. It's contained within a public type
        .               /// 2. It comes from a private crate
        .               fn leaks_private_dep(&self, item_id: DefId) -> bool {
   12,795 ( 0.00%)          let ret = self.required_visibility.is_public() && self.tcx.is_private_dep(item_id.krate);
        .           
        .                   tracing::debug!("leaks_private_dep(item_id={:?})={}", item_id, ret);
        .                   ret
        .               }
        .           }
        .           
        .           impl<'tcx> DefIdVisitor<'tcx> for SearchInterfaceForPrivateItemsVisitor<'tcx> {
        .               fn tcx(&self) -> TyCtxt<'tcx> {
    7,052 ( 0.00%)          self.tcx
        .               }
   68,240 ( 0.00%)      fn visit_def_id(
        .                   &mut self,
        .                   def_id: DefId,
        .                   kind: &str,
        .                   descr: &dyn fmt::Display,
        .               ) -> ControlFlow<Self::BreakTy> {
        .                   if self.check_def_id(def_id, kind, descr) {
        .                       ControlFlow::BREAK
        .                   } else {
        .                       ControlFlow::CONTINUE
        .                   }
   38,385 ( 0.00%)      }
        .           }
        .           
        .           struct PrivateItemsInPublicInterfacesVisitor<'tcx> {
        .               tcx: TyCtxt<'tcx>,
        .               has_pub_restricted: bool,
        .               old_error_set_ancestry: LocalDefIdSet,
        .           }
        .           
        .           impl<'tcx> PrivateItemsInPublicInterfacesVisitor<'tcx> {
        .               fn check(
        .                   &self,
        .                   def_id: LocalDefId,
        .                   required_visibility: ty::Visibility,
        .               ) -> SearchInterfaceForPrivateItemsVisitor<'tcx> {
   11,528 ( 0.00%)          SearchInterfaceForPrivateItemsVisitor {
    1,093 ( 0.00%)              tcx: self.tcx,
        .                       item_def_id: def_id,
        .                       required_visibility,
    1,800 ( 0.00%)              has_pub_restricted: self.has_pub_restricted,
        .                       has_old_errors: self.old_error_set_ancestry.contains(&def_id),
        .                       in_assoc_ty: false,
        .                   }
        .               }
        .           
   10,140 ( 0.00%)      fn check_assoc_item(
        .                   &self,
        .                   def_id: LocalDefId,
        .                   assoc_item_kind: AssocItemKind,
        .                   defaultness: hir::Defaultness,
        .                   vis: ty::Visibility,
        .               ) {
        .                   let mut check = self.check(def_id, vis);
        .           
    1,560 ( 0.00%)          let (check_ty, is_assoc_ty) = match assoc_item_kind {
        .                       AssocItemKind::Const | AssocItemKind::Fn { .. } => (true, false),
        4 ( 0.00%)              AssocItemKind::Type => (defaultness.has_value(), true),
        .                   };
    1,560 ( 0.00%)          check.in_assoc_ty = is_assoc_ty;
    3,120 ( 0.00%)          check.generics().predicates();
        4 ( 0.00%)          if check_ty {
      780 ( 0.00%)              check.ty();
        .                   }
    6,240 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> Visitor<'tcx> for PrivateItemsInPublicInterfacesVisitor<'tcx> {
        .               type NestedFilter = nested_filter::OnlyBodies;
        .           
        .               fn nested_visit_map(&mut self) -> Self::Map {
    1,081 ( 0.00%)          self.tcx.hir()
        .               }
        .           
    8,577 ( 0.00%)      fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {
      953 ( 0.00%)          let tcx = self.tcx;
      953 ( 0.00%)          let item_visibility = tcx.visibility(item.def_id);
        .           
    4,765 ( 0.00%)          match item.kind {
        .                       // Crates are always public.
        .                       hir::ItemKind::ExternCrate(..) => {}
        .                       // All nested items are checked by `visit_item`.
        .                       hir::ItemKind::Mod(..) => {}
        .                       // Checked in resolve.
        .                       hir::ItemKind::Use(..) => {}
        .                       // No subitems.
        .                       hir::ItemKind::Macro(..) | hir::ItemKind::GlobalAsm(..) => {}
        .                       // Subitems of these items have inherited publicity.
        .                       hir::ItemKind::Const(..)
        .                       | hir::ItemKind::Static(..)
        .                       | hir::ItemKind::Fn(..)
        .                       | hir::ItemKind::TyAlias(..) => {
    1,062 ( 0.00%)                  self.check(item.def_id, item_visibility).generics().predicates().ty();
        .                       }
        .                       hir::ItemKind::OpaqueTy(..) => {
        .                           // `ty()` for opaque types is the underlying type,
        .                           // it's not a part of interface, so we skip it.
        .                           self.check(item.def_id, item_visibility).generics().bounds();
        .                       }
        .                       hir::ItemKind::Trait(.., trait_item_refs) => {
        .                           self.check(item.def_id, item_visibility).generics().predicates();
-- line 1901 ----------------------------------------
-- line 1912 ----------------------------------------
        .                                   self.check(trait_item_ref.id.def_id, item_visibility).bounds();
        .                               }
        .                           }
        .                       }
        .                       hir::ItemKind::TraitAlias(..) => {
        .                           self.check(item.def_id, item_visibility).generics().predicates();
        .                       }
        .                       hir::ItemKind::Enum(ref def, _) => {
       48 ( 0.00%)                  self.check(item.def_id, item_visibility).generics().predicates();
        .           
       12 ( 0.00%)                  for variant in def.variants {
       67 ( 0.00%)                      for field in variant.data.fields() {
       72 ( 0.00%)                          self.check(self.tcx.hir().local_def_id(field.hir_id), item_visibility).ty();
        .                               }
        .                           }
        .                       }
        .                       // Subitems of foreign modules have their own publicity.
        .                       hir::ItemKind::ForeignMod { items, .. } => {
        .                           for foreign_item in items {
        .                               let vis = tcx.visibility(foreign_item.id.def_id);
        .                               self.check(foreign_item.id.def_id, vis).generics().predicates().ty();
        .                           }
        .                       }
        .                       // Subitems of structs and unions have their own publicity.
        .                       hir::ItemKind::Struct(ref struct_def, _) | hir::ItemKind::Union(ref struct_def, _) => {
      644 ( 0.00%)                  self.check(item.def_id, item_visibility).generics().predicates();
        .           
      483 ( 0.00%)                  for field in struct_def.fields() {
    1,842 ( 0.00%)                      let def_id = tcx.hir().local_def_id(field.hir_id);
        .                               let field_visibility = tcx.visibility(def_id);
      921 ( 0.00%)                      self.check(def_id, min(item_visibility, field_visibility, tcx)).ty();
        .                           }
        .                       }
        .                       // An inherent impl is public when its type is public
        .                       // Subitems of inherent impls have their own publicity.
        .                       // A trait impl is public when both its type and its trait are public
        .                       // Subitems of trait impls have inherited publicity.
        .                       hir::ItemKind::Impl(ref impl_) => {
    2,336 ( 0.00%)                  let impl_vis = ty::Visibility::of_impl(item.def_id, tcx, &Default::default());
        .                           // check that private components do not appear in the generics or predicates of inherent impls
        .                           // this check is intentionally NOT performed for impls of traits, per #90586
    1,168 ( 0.00%)                  if impl_.of_trait.is_none() {
      220 ( 0.00%)                      self.check(item.def_id, impl_vis).generics().predicates();
        .                           }
      584 ( 0.00%)                  for impl_item_ref in impl_.items {
      958 ( 0.00%)                      let impl_item_vis = if impl_.of_trait.is_none() {
      132 ( 0.00%)                          min(tcx.visibility(impl_item_ref.id.def_id), impl_vis, tcx)
        .                               } else {
        .                                   impl_vis
        .                               };
    4,548 ( 0.00%)                      self.check_assoc_item(
      780 ( 0.00%)                          impl_item_ref.id.def_id,
        .                                   impl_item_ref.kind,
        .                                   impl_item_ref.defaultness,
        .                                   impl_item_vis,
        .                               );
        .                           }
        .                       }
        .                   }
    7,624 ( 0.00%)      }
        .           }
        .           
        .           pub fn provide(providers: &mut Providers) {
        8 ( 0.00%)      *providers = Providers {
        .                   visibility,
        .                   privacy_access_levels,
        .                   check_private_in_public,
        .                   check_mod_privacy,
        .                   ..*providers
        .               };
        1 ( 0.00%)  }
        .           
   23,373 ( 0.00%)  fn visibility(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Visibility {
    2,597 ( 0.00%)      let def_id = def_id.expect_local();
        .               match tcx.resolutions(()).visibilities.get(&def_id) {
    3,292 ( 0.00%)          Some(vis) => *vis,
        .                   None => {
        .                       let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);
   10,722 ( 0.00%)              match tcx.hir().get(hir_id) {
        .                           // Unique types created for closures participate in type privacy checking.
        .                           // They have visibilities inherited from the module they are defined in.
        .                           Node::Expr(hir::Expr { kind: hir::ExprKind::Closure(..), .. }) => {
    1,818 ( 0.00%)                      ty::Visibility::Restricted(tcx.parent_module(hir_id).to_def_id())
        .                           }
        .                           // - AST lowering may clone `use` items and the clones don't
        .                           //   get their entries in the resolver's visibility table.
        .                           // - AST lowering also creates opaque type items with inherited visibilies.
        .                           //   Visibility on them should have no effect, but to avoid the visibility
        .                           //   query failing on some items, we provide it for opaque types as well.
        .                           Node::Item(hir::Item {
        .                               vis,
        .                               kind: hir::ItemKind::Use(..) | hir::ItemKind::OpaqueTy(..),
        .                               ..
        .                           }) => ty::Visibility::from_hir(vis, hir_id, tcx),
        .                           // Visibilities of trait impl items are inherited from their traits
        .                           // and are not filled in resolve.
        .                           Node::ImplItem(impl_item) => {
    8,424 ( 0.00%)                      match tcx.hir().get_by_def_id(tcx.hir().get_parent_item(hir_id)) {
        .                                   Node::Item(hir::Item {
        .                                       kind: hir::ItemKind::Impl(hir::Impl { of_trait: Some(tr), .. }),
        .                                       ..
      648 ( 0.00%)                          }) => tr.path.res.opt_def_id().map_or_else(
        .                                       || {
        .                                           tcx.sess.delay_span_bug(tr.path.span, "trait without a def-id");
        .                                           ty::Visibility::Public
        .                                       },
        .                                       |def_id| tcx.visibility(def_id),
        .                                   ),
        .                                   _ => span_bug!(impl_item.span, "the parent is not a trait impl"),
        .                               }
-- line 2021 ----------------------------------------
-- line 2023 ----------------------------------------
        .                           _ => span_bug!(
        .                               tcx.def_span(def_id),
        .                               "visibility table unexpectedly missing a def-id: {:?}",
        .                               def_id,
        .                           ),
        .                       }
        .                   }
        .               }
   20,776 ( 0.00%)  }
        .           
      112 ( 0.00%)  fn check_mod_privacy(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {
        .               // Check privacy of names not checked in previous compilation stages.
        .               let mut visitor =
       56 ( 0.00%)          NamePrivacyVisitor { tcx, maybe_typeck_results: None, current_item: module_def_id };
      126 ( 0.00%)      let (module, span, hir_id) = tcx.hir().get_module(module_def_id);
        .           
        .               intravisit::walk_mod(&mut visitor, module, hir_id);
        .           
        .               // Check privacy of explicitly written types and traits as well as
        .               // inferred types of expressions and patterns.
        .               let mut visitor =
       84 ( 0.00%)          TypePrivacyVisitor { tcx, maybe_typeck_results: None, current_item: module_def_id, span };
        .               intravisit::walk_mod(&mut visitor, module, hir_id);
      112 ( 0.00%)  }
        .           
        7 ( 0.00%)  fn privacy_access_levels(tcx: TyCtxt<'_>, (): ()) -> &AccessLevels {
        .               // Build up a set of all exported items in the AST. This is a set of all
        .               // items which are reachable from external crates based on visibility.
        9 ( 0.00%)      let mut visitor = EmbargoVisitor {
        .                   tcx,
        .                   access_levels: tcx.resolutions(()).access_levels.clone(),
        .                   macro_reachable: Default::default(),
        .                   prev_level: Some(AccessLevel::Public),
        .                   changed: false,
        .               };
        .           
        .               loop {
        .                   tcx.hir().walk_toplevel_module(&mut visitor);
        4 ( 0.00%)          if visitor.changed {
        3 ( 0.00%)              visitor.changed = false;
        .                   } else {
        .                       break;
        .                   }
        .               }
        .           
        1 ( 0.00%)      tcx.arena.alloc(visitor.access_levels)
        9 ( 0.00%)  }
        .           
        8 ( 0.00%)  fn check_private_in_public(tcx: TyCtxt<'_>, (): ()) {
        .               let access_levels = tcx.privacy_access_levels(());
        .           
        9 ( 0.00%)      let mut visitor = ObsoleteVisiblePrivateTypesVisitor {
        .                   tcx,
        .                   access_levels,
        .                   in_variant: false,
        .                   old_error_set: Default::default(),
        .               };
        .               tcx.hir().walk_toplevel_module(&mut visitor);
        .           
        .               let has_pub_restricted = {
        5 ( 0.00%)          let mut pub_restricted_visitor = PubRestrictedVisitor { tcx, has_pub_restricted: false };
        .                   tcx.hir().walk_toplevel_module(&mut pub_restricted_visitor);
        1 ( 0.00%)          pub_restricted_visitor.has_pub_restricted
        .               };
        .           
        .               let mut old_error_set_ancestry = HirIdSet::default();
        9 ( 0.00%)      for mut id in visitor.old_error_set.iter().copied() {
        .                   loop {
        .                       if !old_error_set_ancestry.insert(id) {
        .                           break;
        .                       }
        .                       let parent = tcx.hir().get_parent_node(id);
        .                       if parent == id {
        .                           break;
        .                       }
        .                       id = parent;
        .                   }
        .               }
        .           
        .               // Check for private types and traits in public interfaces.
        8 ( 0.00%)      let mut visitor = PrivateItemsInPublicInterfacesVisitor {
        .                   tcx,
        .                   has_pub_restricted,
        .                   // Only definition IDs are ever searched in `old_error_set_ancestry`,
        .                   // so we can filter away all non-definition IDs at this point.
        .                   old_error_set_ancestry: old_error_set_ancestry
        .                       .into_iter()
        .                       .filter_map(|hir_id| tcx.hir().opt_local_def_id(hir_id))
        .                       .collect(),
        .               };
        6 ( 0.00%)      tcx.hir().visit_all_item_likes(&mut DeepVisitor::new(&mut visitor));
        8 ( 0.00%)  }

  666,332 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_privacy/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mut_ptr.rs
--------------------------------------------------------------------------------
Ir                  

-- line 28 ----------------------------------------
         .               /// ```
         .               /// let mut s = [1, 2, 3];
         .               /// let ptr: *mut u32 = s.as_mut_ptr();
         .               /// assert!(!ptr.is_null());
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_ptr_is_null", issue = "74939")]
         .               #[inline]
 1,881,476 ( 0.04%)      pub const fn is_null(self) -> bool {
         .                   // Compare via a cast to a thin pointer, so fat pointers are only
         .                   // considering their "data" part for null-ness.
 1,881,476 ( 0.04%)          (self as *mut u8).guaranteed_eq(null_mut())
 1,881,476 ( 0.04%)      }
         .           
         .               /// Casts to a pointer of another type.
         .               #[stable(feature = "ptr_cast", since = "1.38.0")]
         .               #[rustc_const_stable(feature = "const_ptr_cast", since = "1.38.0")]
         .               #[inline(always)]
         .               pub const fn cast<U>(self) -> *mut U {
         .                   self as _
         .               }
-- line 48 ----------------------------------------
-- line 299 ----------------------------------------
         .               #[inline(always)]
         .               pub const unsafe fn offset(self, count: isize) -> *mut T
         .               where
         .                   T: Sized,
         .               {
         .                   // SAFETY: the caller must uphold the safety contract for `offset`.
         .                   // The obtained pointer is valid for writes since the caller must
         .                   // guarantee that it points to the same allocated object as `self`.
30,508,466 ( 0.71%)          unsafe { intrinsics::offset(self, count) as *mut T }
         .               }
         .           
         .               /// Calculates the offset from a pointer using wrapping arithmetic.
         .               /// `count` is in units of T; e.g., a `count` of 3 represents a pointer
         .               /// offset of `3 * size_of::<T>()` bytes.
         .               ///
         .               /// # Safety
         .               ///
-- line 315 ----------------------------------------
-- line 360 ----------------------------------------
         .               #[must_use = "returns a new pointer rather than modifying its argument"]
         .               #[rustc_const_unstable(feature = "const_ptr_offset", issue = "71499")]
         .               #[inline(always)]
         .               pub const fn wrapping_offset(self, count: isize) -> *mut T
         .               where
         .                   T: Sized,
         .               {
         .                   // SAFETY: the `arith_offset` intrinsic has no prerequisites to be called.
       600 ( 0.00%)          unsafe { intrinsics::arith_offset(self, count) as *mut T }
         .               }
         .           
         .               /// Returns `None` if the pointer is null, or else returns a unique reference to
         .               /// the value wrapped in `Some`. If the value may be uninitialized, [`as_uninit_mut`]
         .               /// must be used instead.
         .               ///
         .               /// For the shared counterpart see [`as_ref`].
         .               ///
-- line 376 ----------------------------------------
-- line 492 ----------------------------------------
         .               /// affect the outcome, but just the performance.
         .               /// The consequences of using this method to make runtime and compile-time code behave
         .               /// differently have not been explored. This method should not be used to introduce such
         .               /// differences, and it should also not be stabilized before we have a better understanding
         .               /// of this issue.
         .               #[unstable(feature = "const_raw_ptr_comparison", issue = "53020")]
         .               #[rustc_const_unstable(feature = "const_raw_ptr_comparison", issue = "53020")]
         .               #[inline]
 1,411,107 ( 0.03%)      pub const fn guaranteed_eq(self, other: *mut T) -> bool
         .               where
         .                   T: Sized,
         .               {
 2,822,530 ( 0.07%)          intrinsics::ptr_guaranteed_eq(self as *const _, other as *const _)
 1,881,476 ( 0.04%)      }
         .           
         .               /// Returns whether two pointers are guaranteed to be unequal.
         .               ///
         .               /// At runtime this function behaves like `self != other`.
         .               /// However, in some contexts (e.g., compile-time evaluation),
         .               /// it is not always possible to determine the inequality of two pointers, so this function may
         .               /// spuriously return `false` for pointers that later actually turn out to be unequal.
         .               /// But when it returns `true`, the pointers are guaranteed to be unequal.
-- line 513 ----------------------------------------
-- line 683 ----------------------------------------
         .               #[rustc_const_unstable(feature = "const_ptr_offset", issue = "71499")]
         .               #[inline(always)]
         .               pub const unsafe fn add(self, count: usize) -> Self
         .               where
         .                   T: Sized,
         .               {
         .                   // SAFETY: the caller must uphold the safety contract for `offset`.
         .                   unsafe { self.offset(count as isize) }
       158 ( 0.00%)      }
         .           
         .               /// Calculates the offset from a pointer (convenience for
         .               /// `.offset((count as isize).wrapping_neg())`).
         .               ///
         .               /// `count` is in units of T; e.g., a `count` of 3 represents a pointer
         .               /// offset of `3 * size_of::<T>()` bytes.
         .               ///
         .               /// # Safety
-- line 699 ----------------------------------------
-- line 1055 ----------------------------------------
         .               ///
         .               /// See [`ptr::drop_in_place`] for safety concerns and examples.
         .               ///
         .               /// [`ptr::drop_in_place`]: crate::ptr::drop_in_place()
         .               #[stable(feature = "pointer_methods", since = "1.26.0")]
         .               #[inline(always)]
         .               pub unsafe fn drop_in_place(self) {
         .                   // SAFETY: the caller must uphold the safety contract for `drop_in_place`.
        88 ( 0.00%)          unsafe { drop_in_place(self) }
         .               }
         .           
         .               /// Overwrites a memory location with the given value without reading or
         .               /// dropping the old value.
         .               ///
         .               /// See [`ptr::write`] for safety concerns and examples.
         .               ///
         .               /// [`ptr::write`]: crate::ptr::write()
-- line 1071 ----------------------------------------
-- line 1072 ----------------------------------------
         .               #[stable(feature = "pointer_methods", since = "1.26.0")]
         .               #[rustc_const_unstable(feature = "const_ptr_write", issue = "86302")]
         .               #[inline(always)]
         .               pub const unsafe fn write(self, val: T)
         .               where
         .                   T: Sized,
         .               {
         .                   // SAFETY: the caller must uphold the safety contract for `write`.
       259 ( 0.00%)          unsafe { write(self, val) }
         .               }
         .           
         .               /// Invokes memset on the specified pointer, setting `count * size_of::<T>()`
         .               /// bytes of memory starting at `self` to `val`.
         .               ///
         .               /// See [`ptr::write_bytes`] for safety concerns and examples.
         .               ///
         .               /// [`ptr::write_bytes`]: crate::ptr::write_bytes()
-- line 1088 ----------------------------------------
-- line 1254 ----------------------------------------
         .               ///
         .               /// let slice: *mut [i8] = ptr::slice_from_raw_parts_mut(ptr::null_mut(), 3);
         .               /// assert_eq!(slice.len(), 3);
         .               /// ```
         .               #[inline(always)]
         .               #[unstable(feature = "slice_ptr_len", issue = "71146")]
         .               #[rustc_const_unstable(feature = "const_slice_ptr_len", issue = "71146")]
         .               pub const fn len(self) -> usize {
       252 ( 0.00%)          metadata(self)
         .               }
         .           
         .               /// Returns a raw pointer to the slice's buffer.
         .               ///
         .               /// This is equivalent to casting `self` to `*mut T`, but more type-safe.
         .               ///
         .               /// # Examples
         .               ///
-- line 1270 ----------------------------------------
-- line 1416 ----------------------------------------
         .               }
         .           }
         .           
         .           // Equality for pointers
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T: ?Sized> PartialEq for *mut T {
         .               #[inline(always)]
         .               fn eq(&self, other: &*mut T) -> bool {
    62,603 ( 0.00%)          *self == *other
         .               }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T: ?Sized> Eq for *mut T {}
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T: ?Sized> Ord for *mut T {
-- line 1432 ----------------------------------------

 1,437,104 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mut_ptr.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/type_variable.rs
--------------------------------------------------------------------------------
Ir                 

-- line 44 ----------------------------------------
        .           /// Convert from a specific kind of undo to the more general UndoLog
        .           impl<'tcx> From<Instantiate> for UndoLog<'tcx> {
        .               fn from(l: Instantiate) -> Self {
        .                   UndoLog::Values(sv::UndoLog::Other(l))
        .               }
        .           }
        .           
        .           impl<'tcx> Rollback<UndoLog<'tcx>> for TypeVariableStorage<'tcx> {
  116,728 ( 0.00%)      fn reverse(&mut self, undo: UndoLog<'tcx>) {
  491,920 ( 0.01%)          match undo {
   91,720 ( 0.00%)              UndoLog::EqRelation(undo) => self.eq_relations.reverse(undo),
   54,024 ( 0.00%)              UndoLog::SubRelation(undo) => self.sub_relations.reverse(undo),
   87,712 ( 0.00%)              UndoLog::Values(undo) => self.values.reverse(undo),
        .                   }
  233,456 ( 0.01%)      }
        .           }
        .           
        .           pub struct TypeVariableStorage<'tcx> {
        .               values: sv::SnapshotVecStorage<Delegate>,
        .           
        .               /// Two variables are unified in `eq_relations` when we have a
        .               /// constraint `?X == ?Y`. This table also stores, for each key,
        .               /// the known value.
-- line 66 ----------------------------------------
-- line 136 ----------------------------------------
        .               DynReturnFn,
        .               LatticeVariable,
        .           }
        .           
        .           pub(crate) struct TypeVariableData {
        .               origin: TypeVariableOrigin,
        .           }
        .           
  828,494 ( 0.02%)  #[derive(Copy, Clone, Debug)]
        .           pub enum TypeVariableValue<'tcx> {
        .               Known { value: Ty<'tcx> },
        .               Unknown { universe: ty::UniverseIndex },
        .           }
        .           
        .           impl<'tcx> TypeVariableValue<'tcx> {
        .               /// If this value is known, returns the type it is known to be.
        .               /// Otherwise, `None`.
        .               pub fn known(&self) -> Option<Ty<'tcx>> {
  537,582 ( 0.01%)          match *self {
        .                       TypeVariableValue::Unknown { .. } => None,
        .                       TypeVariableValue::Known { value } => Some(value),
        .                   }
        .               }
        .           
        .               pub fn is_unknown(&self) -> bool {
        .                   match *self {
        .                       TypeVariableValue::Unknown { .. } => true,
-- line 162 ----------------------------------------
-- line 166 ----------------------------------------
        .           }
        .           
        .           pub(crate) struct Instantiate;
        .           
        .           pub(crate) struct Delegate;
        .           
        .           impl<'tcx> TypeVariableStorage<'tcx> {
        .               pub fn new() -> TypeVariableStorage<'tcx> {
   66,288 ( 0.00%)          TypeVariableStorage {
        .                       values: sv::SnapshotVecStorage::new(),
        .                       eq_relations: ut::UnificationTableStorage::new(),
        .                       sub_relations: ut::UnificationTableStorage::new(),
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub(crate) fn with_log<'a>(
-- line 182 ----------------------------------------
-- line 188 ----------------------------------------
        .           }
        .           
        .           impl<'tcx> TypeVariableTable<'_, 'tcx> {
        .               /// Returns the origin that was given when `vid` was created.
        .               ///
        .               /// Note that this function does not return care whether
        .               /// `vid` has been unified with something else or not.
        .               pub fn var_origin(&self, vid: ty::TyVid) -> &TypeVariableOrigin {
    1,095 ( 0.00%)          &self.storage.values.get(vid.as_usize()).origin
        .               }
        .           
        .               /// Records that `a == b`, depending on `dir`.
        .               ///
        .               /// Precondition: neither `a` nor `b` are known.
        .               pub fn equate(&mut self, a: ty::TyVid, b: ty::TyVid) {
        .                   debug_assert!(self.probe(a).is_unknown());
        .                   debug_assert!(self.probe(b).is_unknown());
    8,764 ( 0.00%)          self.eq_relations().union(a, b);
    7,512 ( 0.00%)          self.sub_relations().union(a, b);
        .               }
        .           
        .               /// Records that `a <: b`, depending on `dir`.
        .               ///
        .               /// Precondition: neither `a` nor `b` are known.
        .               pub fn sub(&mut self, a: ty::TyVid, b: ty::TyVid) {
        .                   debug_assert!(self.probe(a).is_unknown());
        .                   debug_assert!(self.probe(b).is_unknown());
    4,698 ( 0.00%)          self.sub_relations().union(a, b);
        .               }
        .           
        .               /// Instantiates `vid` with the type `ty`.
        .               ///
        .               /// Precondition: `vid` must not have been previously instantiated.
  179,440 ( 0.00%)      pub fn instantiate(&mut self, vid: ty::TyVid, ty: Ty<'tcx>) {
        .                   let vid = self.root_var(vid);
        .                   debug_assert!(self.probe(vid).is_unknown());
        .                   debug_assert!(
        .                       self.eq_relations().probe_value(vid).is_unknown(),
        .                       "instantiating type variable `{:?}` twice: new-value = {:?}, old-value={:?}",
        .                       vid,
        .                       ty,
        .                       self.eq_relations().probe_value(vid)
        .                   );
  251,216 ( 0.01%)          self.eq_relations().union_value(vid, TypeVariableValue::Known { value: ty });
        .           
        .                   // Hack: we only need this so that `types_escaping_snapshot`
        .                   // can see what has been unified; see the Delegate impl for
        .                   // more details.
        .                   self.undo_log.push(Instantiate);
  179,440 ( 0.00%)      }
        .           
        .               /// Creates a new type variable.
        .               ///
        .               /// - `diverging`: indicates if this is a "diverging" type
        .               ///   variable, e.g.,  one created as the type of a `return`
        .               ///   expression. The code in this module doesn't care if a
        .               ///   variable is diverging, but the main Rust type-checker will
        .               ///   sometimes "unify" such variables with the `!` or `()` types.
        .               /// - `origin`: indicates *why* the type variable was created.
        .               ///   The code in this module doesn't care, but it can be useful
        .               ///   for improving error messages.
  237,162 ( 0.01%)      pub fn new_var(
        .                   &mut self,
        .                   universe: ty::UniverseIndex,
        .                   origin: TypeVariableOrigin,
        .               ) -> ty::TyVid {
  355,743 ( 0.01%)          let eq_key = self.eq_relations().new_key(TypeVariableValue::Unknown { universe });
        .           
  197,635 ( 0.00%)          let sub_key = self.sub_relations().new_key(());
   39,527 ( 0.00%)          assert_eq!(eq_key.vid, sub_key);
        .           
  355,743 ( 0.01%)          let index = self.values().push(TypeVariableData { origin });
  158,108 ( 0.00%)          assert_eq!(eq_key.vid.as_u32(), index as u32);
        .           
        .                   debug!("new_var(index={:?}, universe={:?}, origin={:?}", eq_key.vid, universe, origin,);
        .           
        .                   eq_key.vid
  276,689 ( 0.01%)      }
        .           
        .               /// Returns the number of type variables created thus far.
        .               pub fn num_vars(&self) -> usize {
    2,105 ( 0.00%)          self.storage.values.len()
        .               }
        .           
        .               /// Returns the "root" variable of `vid` in the `eq_relations`
        .               /// equivalence table. All type variables that have been equated
        .               /// will yield the same root variable (per the union-find
        .               /// algorithm), so `root_var(a) == root_var(b)` implies that `a ==
        .               /// b` (transitively).
        .               pub fn root_var(&mut self, vid: ty::TyVid) -> ty::TyVid {
  159,630 ( 0.00%)          self.eq_relations().find(vid).vid
        .               }
        .           
        .               /// Returns the "root" variable of `vid` in the `sub_relations`
        .               /// equivalence table. All type variables that have been are
        .               /// related via equality or subtyping will yield the same root
        .               /// variable (per the union-find algorithm), so `sub_root_var(a)
        .               /// == sub_root_var(b)` implies that:
        .               ///
        .               ///     exists X. (a <: X || X <: a) && (b <: X || X <: b)
      647 ( 0.00%)      pub fn sub_root_var(&mut self, vid: ty::TyVid) -> ty::TyVid {
  114,846 ( 0.00%)          self.sub_relations().find(vid)
    1,294 ( 0.00%)      }
        .           
        .               /// Returns `true` if `a` and `b` have same "sub-root" (i.e., exists some
        .               /// type X such that `forall i in {a, b}. (i <: X || X <: i)`.
        .               pub fn sub_unified(&mut self, a: ty::TyVid, b: ty::TyVid) -> bool {
        .                   self.sub_root_var(a) == self.sub_root_var(b)
        .               }
        .           
        .               /// Retrieves the type to which `vid` has been instantiated, if
        .               /// any.
1,882,670 ( 0.04%)      pub fn probe(&mut self, vid: ty::TyVid) -> TypeVariableValue<'tcx> {
        .                   self.inlined_probe(vid)
1,882,670 ( 0.04%)      }
        .           
        .               /// An always-inlined variant of `probe`, for very hot call sites.
        .               #[inline(always)]
        .               pub fn inlined_probe(&mut self, vid: ty::TyVid) -> TypeVariableValue<'tcx> {
1,022,074 ( 0.02%)          self.eq_relations().inlined_probe_value(vid)
        .               }
        .           
        .               /// If `t` is a type-inference variable, and it has been
        .               /// instantiated, then return the with which it was
        .               /// instantiated. Otherwise, returns `t`.
        .               pub fn replace_if_possible(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {
  376,086 ( 0.01%)          match *t.kind() {
  285,975 ( 0.01%)              ty::Infer(ty::TyVar(v)) => match self.probe(v) {
        .                           TypeVariableValue::Unknown { .. } => t,
        .                           TypeVariableValue::Known { value } => value,
        .                       },
        .                       _ => t,
        .                   }
        .               }
        .           
        .               #[inline]
-- line 323 ----------------------------------------
-- line 324 ----------------------------------------
        .               fn values(
        .                   &mut self,
        .               ) -> sv::SnapshotVec<Delegate, &mut Vec<TypeVariableData>, &mut InferCtxtUndoLogs<'tcx>> {
        .                   self.storage.values.with_log(self.undo_log)
        .               }
        .           
        .               #[inline]
        .               fn eq_relations(&mut self) -> super::UnificationTable<'_, 'tcx, TyVidEqKey<'tcx>> {
1,508,924 ( 0.04%)          self.storage.eq_relations.with_log(self.undo_log)
        .               }
        .           
        .               #[inline]
        .               fn sub_relations(&mut self) -> super::UnificationTable<'_, 'tcx, ty::TyVid> {
   82,583 ( 0.00%)          self.storage.sub_relations.with_log(self.undo_log)
        .               }
        .           
        .               /// Returns a range of the type variables created during the snapshot.
   10,525 ( 0.00%)      pub fn vars_since_snapshot(
        .                   &mut self,
        .                   value_count: usize,
        .               ) -> (Range<TyVid>, Vec<TypeVariableOrigin>) {
        .                   let range = TyVid::from_usize(value_count)..TyVid::from_usize(self.num_vars());
   12,630 ( 0.00%)          (
        .                       range.start..range.end,
        .                       (range.start.as_usize()..range.end.as_usize())
        .                           .map(|index| self.storage.values.get(index).origin)
        .                           .collect(),
        .                   )
   12,630 ( 0.00%)      }
        .           
        .               /// Returns indices of all variables that are not yet
        .               /// instantiated.
        .               pub fn unsolved_variables(&mut self) -> Vec<ty::TyVid> {
        .                   (0..self.storage.values.len())
        .                       .filter_map(|i| {
        .                           let vid = ty::TyVid::from_usize(i);
   78,244 ( 0.00%)                  match self.probe(vid) {
        .                               TypeVariableValue::Unknown { .. } => Some(vid),
        .                               TypeVariableValue::Known { .. } => None,
        .                           }
        .                       })
        .                       .collect()
        .               }
        .           }
        .           
-- line 368 ----------------------------------------
-- line 391 ----------------------------------------
        .           /// These structs (a newtyped TyVid) are used as the unification key
        .           /// for the `eq_relations`; they carry a `TypeVariableValue` along
        .           /// with them.
        .           #[derive(Copy, Clone, Debug, PartialEq, Eq)]
        .           pub(crate) struct TyVidEqKey<'tcx> {
        .               vid: ty::TyVid,
        .           
        .               // in the table, we map each ty-vid to one of these:
  888,146 ( 0.02%)      phantom: PhantomData<TypeVariableValue<'tcx>>,
        .           }
        .           
        .           impl<'tcx> From<ty::TyVid> for TyVidEqKey<'tcx> {
        .               #[inline] // make this function eligible for inlining - it is quite hot.
        .               fn from(vid: ty::TyVid) -> Self {
        .                   TyVidEqKey { vid, phantom: PhantomData }
        .               }
        .           }
-- line 407 ----------------------------------------
-- line 419 ----------------------------------------
        .                   "TyVidEqKey"
        .               }
        .           }
        .           
        .           impl<'tcx> ut::UnifyValue for TypeVariableValue<'tcx> {
        .               type Error = ut::NoError;
        .           
        .               fn unify_values(value1: &Self, value2: &Self) -> Result<Self, ut::NoError> {
  149,732 ( 0.00%)          match (value1, value2) {
        .                       // We never equate two type variables, both of which
        .                       // have known types.  Instead, we recursively equate
        .                       // those types.
        .                       (&TypeVariableValue::Known { .. }, &TypeVariableValue::Known { .. }) => {
        .                           bug!("equating two type variables, both of which have known types")
        .                       }
        .           
        .                       // If one side is known, prefer that one.
        .                       (&TypeVariableValue::Known { .. }, &TypeVariableValue::Unknown { .. }) => Ok(*value1),
        .                       (&TypeVariableValue::Unknown { .. }, &TypeVariableValue::Known { .. }) => Ok(*value2),
        .           
        .                       // If both sides are *unknown*, it hardly matters, does it?
        .                       (
    1,236 ( 0.00%)                  &TypeVariableValue::Unknown { universe: universe1 },
    1,236 ( 0.00%)                  &TypeVariableValue::Unknown { universe: universe2 },
        .                       ) => {
        .                           // If we unify two unbound variables, ?T and ?U, then whatever
        .                           // value they wind up taking (which must be the same value) must
        .                           // be nameable by both universes. Therefore, the resulting
        .                           // universe is the minimum of the two universes, because that is
        .                           // the one which contains the fewest names in scope.
        .                           let universe = cmp::min(universe1, universe2);
    4,944 ( 0.00%)                  Ok(TypeVariableValue::Unknown { universe })
        .                       }
        .                   }
        .               }
        .           }

  101,700 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/type_variable.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/rpc.rs
--------------------------------------------------------------------------------
Ir                 

-- line 21 ----------------------------------------
        .           
        .           pub(super) trait DecodeMut<'a, 's, S>: Sized {
        .               fn decode(r: &mut Reader<'a>, s: &'s mut S) -> Self;
        .           }
        .           
        .           macro_rules! rpc_encode_decode {
        .               (le $ty:ty) => {
        .                   impl<S> Encode<S> for $ty {
3,238,159 ( 0.08%)              fn encode(self, w: &mut Writer, _: &mut S) {
      354 ( 0.00%)                  w.extend_from_array(&self.to_le_bytes());
4,047,448 ( 0.09%)              }
        .                   }
        .           
        .                   impl<S> DecodeMut<'_, '_, S> for $ty {
      236 ( 0.00%)              fn decode(r: &mut Reader<'_>, _: &mut S) -> Self {
        .                           const N: usize = ::std::mem::size_of::<$ty>();
        .           
      295 ( 0.00%)                  let mut bytes = [0; N];
  518,087 ( 0.01%)                  bytes.copy_from_slice(&r[..N]);
2,121,551 ( 0.05%)                  *r = &r[N..];
        .           
      295 ( 0.00%)                  Self::from_le_bytes(bytes)
      118 ( 0.00%)              }
        .                   }
        .               };
        .               (struct $name:ident { $($field:ident),* $(,)? }) => {
        .                   impl<S> Encode<S> for $name {
        .                       fn encode(self, w: &mut Writer, s: &mut S) {
        .                           $(self.$field.encode(w, s);)*
        .                       }
        .                   }
-- line 51 ----------------------------------------
-- line 55 ----------------------------------------
        .                           $name {
        .                               $($field: DecodeMut::decode(r, s)),*
        .                           }
        .                       }
        .                   }
        .               };
        .               (enum $name:ident $(<$($T:ident),+>)? { $($variant:ident $(($field:ident))*),* $(,)? }) => {
        .                   impl<S, $($($T: Encode<S>),+)?> Encode<S> for $name $(<$($T),+>)? {
9,054,337 ( 0.21%)              fn encode(self, w: &mut Writer, s: &mut S) {
        .                           // HACK(eddyb): `Tag` enum duplicated between the
        .                           // two impls as there's no other place to stash it.
        .                           #[allow(non_upper_case_globals)]
        .                           mod tag {
        .                               #[repr(u8)] enum Tag { $($variant),* }
        .           
        .                               $(pub const $variant: u8 = Tag::$variant as u8;)*
        .                           }
        .           
4,948,568 ( 0.12%)                  match self {
1,053,354 ( 0.02%)                      $($name::$variant $(($field))* => {
   65,475 ( 0.00%)                          tag::$variant.encode(w, s);
1,264,418 ( 0.03%)                          $($field.encode(w, s);)*
      118 ( 0.00%)                      })*
        .                           }
7,134,849 ( 0.17%)              }
        .                   }
        .           
        .                   impl<'a, S, $($($T: for<'s> DecodeMut<'a, 's, S>),+)?> DecodeMut<'a, '_, S>
        .                       for $name $(<$($T),+>)?
        .                   {
2,309,782 ( 0.05%)              fn decode(r: &mut Reader<'a>, s: &mut S) -> Self {
        .                           // HACK(eddyb): `Tag` enum duplicated between the
        .                           // two impls as there's no other place to stash it.
        .                           #[allow(non_upper_case_globals)]
        .                           mod tag {
        .                               #[repr(u8)] enum Tag { $($variant),* }
        .           
        .                               $(pub const $variant: u8 = Tag::$variant as u8;)*
        .                           }
        .           
2,240,966 ( 0.05%)                  match u8::decode(r, s) {
        .                               $(tag::$variant => {
   62,705 ( 0.00%)                          $(let $field = DecodeMut::decode(r, s);)*
1,596,335 ( 0.04%)                          $name::$variant $(($field))*
   31,264 ( 0.00%)                      })*
        .                               _ => unreachable!(),
        .                           }
4,030,597 ( 0.09%)              }
        .                   }
        .               }
        .           }
        .           
        .           impl<S> Encode<S> for () {
        .               fn encode(self, _: &mut Writer, _: &mut S) {}
        .           }
        .           
        .           impl<S> DecodeMut<'_, '_, S> for () {
        .               fn decode(_: &mut Reader<'_>, _: &mut S) -> Self {}
        .           }
        .           
        .           impl<S> Encode<S> for u8 {
  422,645 ( 0.01%)      fn encode(self, w: &mut Writer, _: &mut S) {
      118 ( 0.00%)          w.push(self);
  351,978 ( 0.01%)      }
        .           }
        .           
        .           impl<S> DecodeMut<'_, '_, S> for u8 {
        .               fn decode(r: &mut Reader<'_>, _: &mut S) -> Self {
9,024,782 ( 0.21%)          let x = r[0];
5,025,413 ( 0.12%)          *r = &r[1..];
        .                   x
        .               }
        .           }
        .           
        .           rpc_encode_decode!(le u32);
        .           rpc_encode_decode!(le usize);
        .           
        .           impl<S> Encode<S> for bool {
        .               fn encode(self, w: &mut Writer, s: &mut S) {
   76,227 ( 0.00%)          (self as u8).encode(w, s);
        .               }
        .           }
        .           
        .           impl<S> DecodeMut<'_, '_, S> for bool {
        .               fn decode(r: &mut Reader<'_>, s: &mut S) -> Self {
   50,818 ( 0.00%)          match u8::decode(r, s) {
        .                       0 => false,
        .                       1 => true,
        .                       _ => unreachable!(),
        .                   }
        .               }
        .           }
        .           
        .           impl<S> Encode<S> for char {
        .               fn encode(self, w: &mut Writer, s: &mut S) {
   76,330 ( 0.00%)          (self as u32).encode(w, s);
        .               }
        .           }
        .           
        .           impl<S> DecodeMut<'_, '_, S> for char {
        .               fn decode(r: &mut Reader<'_>, s: &mut S) -> Self {
        .                   char::from_u32(u32::decode(r, s)).unwrap()
        .               }
        .           }
        .           
        .           impl<S> Encode<S> for NonZeroU32 {
      354 ( 0.00%)      fn encode(self, w: &mut Writer, s: &mut S) {
2,312,608 ( 0.05%)          self.get().encode(w, s);
      118 ( 0.00%)      }
        .           }
        .           
        .           impl<S> DecodeMut<'_, '_, S> for NonZeroU32 {
      177 ( 0.00%)      fn decode(r: &mut Reader<'_>, s: &mut S) -> Self {
      413 ( 0.00%)          Self::new(u32::decode(r, s)).unwrap()
      118 ( 0.00%)      }
        .           }
        .           
        .           impl<S, A: Encode<S>, B: Encode<S>> Encode<S> for (A, B) {
        .               fn encode(self, w: &mut Writer, s: &mut S) {
        .                   self.0.encode(w, s);
        .                   self.1.encode(w, s);
        .               }
        .           }
-- line 177 ----------------------------------------
-- line 204 ----------------------------------------
        .                   Ok(x),
        .                   Err(e),
        .               }
        .           );
        .           
        .           impl<S> Encode<S> for &[u8] {
        .               fn encode(self, w: &mut Writer, s: &mut S) {
        .                   self.len().encode(w, s);
   73,784 ( 0.00%)          w.write_all(self).unwrap();
        .               }
        .           }
        .           
        .           impl<'a, S> DecodeMut<'a, '_, S> for &'a [u8] {
        .               fn decode(r: &mut Reader<'a>, s: &mut S) -> Self {
        .                   let len = usize::decode(r, s);
        .                   let xs = &r[..len];
  137,177 ( 0.00%)          *r = &r[len..];
        .                   xs
        .               }
        .           }
        .           
        .           impl<S> Encode<S> for &str {
   73,784 ( 0.00%)      fn encode(self, w: &mut Writer, s: &mut S) {
        .                   self.as_bytes().encode(w, s);
   92,230 ( 0.00%)      }
        .           }
        .           
        .           impl<'a, S> DecodeMut<'a, '_, S> for &'a str {
   45,723 ( 0.00%)      fn decode(r: &mut Reader<'a>, s: &mut S) -> Self {
   91,446 ( 0.00%)          str::from_utf8(<&[u8]>::decode(r, s)).unwrap()
   91,446 ( 0.00%)      }
        .           }
        .           
        .           impl<S> Encode<S> for String {
        .               fn encode(self, w: &mut Writer, s: &mut S) {
   73,784 ( 0.00%)          self[..].encode(w, s);
        .               }
        .           }
        .           
        .           impl<S> DecodeMut<'_, '_, S> for String {
        .               fn decode(r: &mut Reader<'_>, s: &mut S) -> Self {
   92,230 ( 0.00%)          <&str>::decode(r, s).to_string()
        .               }
        .           }
        .           
        .           /// Simplified version of panic payloads, ignoring
        .           /// types other than `&'static str` and `String`.
        .           pub enum PanicMessage {
        .               StaticStr(&'static str),
        .               String(String),
-- line 253 ----------------------------------------

8,396,272 ( 0.20%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/rpc.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/node.rs
--------------------------------------------------------------------------------
Ir                 

-- line 221 ----------------------------------------
        .                   NodeRef { height: 0, node: NonNull::from(Box::leak(leaf)), _marker: PhantomData }
        .               }
        .           }
        .           
        .           impl<K, V> NodeRef<marker::Owned, K, V, marker::Internal> {
        .               fn new_internal(child: Root<K, V>) -> Self {
        .                   let mut new_node = unsafe { InternalNode::new() };
        .                   new_node.edges[0].write(child.node);
   18,768 ( 0.00%)          unsafe { NodeRef::from_new_internal(new_node, child.height + 1) }
        .               }
        .           
        .               /// # Safety
        .               /// `height` must not be zero.
        .               unsafe fn from_new_internal(internal: Box<InternalNode<K, V>>, height: usize) -> Self {
        .                   debug_assert!(height > 0);
        .                   let node = NonNull::from(Box::leak(internal)).cast();
        .                   let mut this = NodeRef { height, node, _marker: PhantomData };
-- line 237 ----------------------------------------
-- line 269 ----------------------------------------
        .           impl<BorrowType, K, V, Type> NodeRef<BorrowType, K, V, Type> {
        .               /// Finds the length of the node. This is the number of keys or values.
        .               /// The number of edges is `len() + 1`.
        .               /// Note that, despite being safe, calling this function can have the side effect
        .               /// of invalidating mutable references that unsafe code has created.
        .               pub fn len(&self) -> usize {
        .                   // Crucially, we only access the `len` field here. If BorrowType is marker::ValMut,
        .                   // there might be outstanding mutable references to values that we must not invalidate.
  329,756 ( 0.01%)          unsafe { usize::from((*Self::as_leaf_ptr(self)).len) }
        .               }
        .           
        .               /// Returns the number of levels that the node and leaves are apart. Zero
        .               /// height means the node is a leaf itself. If you picture trees with the
        .               /// root on top, the number says at which elevation the node appears.
        .               /// If you picture trees with leaves on top, the number says how high
        .               /// the tree extends above the node.
        .               pub fn height(&self) -> usize {
        .                   self.height
        .               }
        .           
        .               /// Temporarily takes out another, immutable reference to the same node.
        .               pub fn reborrow(&self) -> NodeRef<marker::Immut<'_>, K, V, Type> {
  751,684 ( 0.02%)          NodeRef { height: self.height, node: self.node, _marker: PhantomData }
        .               }
        .           
        .               /// Exposes the leaf portion of any leaf or internal node.
        .               ///
        .               /// Returns a raw ptr to avoid invalidating other references to this node.
        .               fn as_leaf_ptr(this: &Self) -> *mut LeafNode<K, V> {
        .                   // The node must be valid for at least the LeafNode portion.
        .                   // This is not a reference in the NodeRef type because we don't know if
-- line 299 ----------------------------------------
-- line 314 ----------------------------------------
        .               /// both, upon success, do nothing.
        .               pub fn ascend(
        .                   self,
        .               ) -> Result<Handle<NodeRef<BorrowType, K, V, marker::Internal>, marker::Edge>, Self> {
        .                   assert!(BorrowType::PERMITS_TRAVERSAL);
        .                   // We need to use raw pointers to nodes because, if BorrowType is marker::ValMut,
        .                   // there might be outstanding mutable references to values that we must not invalidate.
        .                   let leaf_ptr: *const _ = Self::as_leaf_ptr(&self);
  210,634 ( 0.00%)          unsafe { (*leaf_ptr).parent }
        .                       .as_ref()
        .                       .map(|parent| Handle {
  230,674 ( 0.01%)                  node: NodeRef::from_internal(*parent, self.height + 1),
   78,465 ( 0.00%)                  idx: unsafe { usize::from((*leaf_ptr).parent_idx.assume_init()) },
        .                           _marker: PhantomData,
        .                       })
        .                       .ok_or(self)
        .               }
        .           
        .               pub fn first_edge(self) -> Handle<Self, marker::Edge> {
        .                   unsafe { Handle::new_edge(self, 0) }
        .               }
-- line 334 ----------------------------------------
-- line 373 ----------------------------------------
        .                   // SAFETY: there can be no mutable references into this tree borrowed as `Immut`.
        .                   unsafe { &*ptr }
        .               }
        .           
        .               /// Borrows a view into the keys stored in the node.
        .               pub fn keys(&self) -> &[K] {
        .                   let leaf = self.into_leaf();
        .                   unsafe {
1,782,711 ( 0.04%)              MaybeUninit::slice_assume_init_ref(leaf.keys.get_unchecked(..usize::from(leaf.len)))
        .                   }
        .               }
        .           }
        .           
        .           impl<K, V> NodeRef<marker::Dying, K, V, marker::LeafOrInternal> {
        .               /// Similar to `ascend`, gets a reference to a node's parent node, but also
        .               /// deallocates the current node in the process. This is unsafe because the
        .               /// current node will still be accessible despite being deallocated.
-- line 389 ----------------------------------------
-- line 391 ----------------------------------------
        .                   self,
        .               ) -> Option<Handle<NodeRef<marker::Dying, K, V, marker::Internal>, marker::Edge>> {
        .                   let height = self.height;
        .                   let node = self.node;
        .                   let ret = self.ascend().ok();
        .                   unsafe {
        .                       Global.deallocate(
        .                           node.cast(),
   63,057 ( 0.00%)                  if height > 0 {
        .                               Layout::new::<InternalNode<K, V>>()
        .                           } else {
        .                               Layout::new::<LeafNode<K, V>>()
        .                           },
        .                       );
        .                   }
        .                   ret
        .               }
-- line 407 ----------------------------------------
-- line 435 ----------------------------------------
        .                   // SAFETY: we have exclusive access to the entire node.
        .                   unsafe { &mut *ptr }
        .               }
        .           }
        .           
        .           impl<K, V, Type> NodeRef<marker::Dying, K, V, Type> {
        .               /// Borrows exclusive access to the leaf portion of a dying leaf or internal node.
        .               fn as_leaf_dying(&mut self) -> &mut LeafNode<K, V> {
        2 ( 0.00%)          let ptr = Self::as_leaf_ptr(self);
        .                   // SAFETY: we have exclusive access to the entire node.
        .                   unsafe { &mut *ptr }
        .               }
        .           }
        .           
        .           impl<'a, K: 'a, V: 'a, Type> NodeRef<marker::Mut<'a>, K, V, Type> {
        .               /// Borrows exclusive access to an element of the key storage area.
        .               ///
-- line 451 ----------------------------------------
-- line 467 ----------------------------------------
        .               /// `index` is in bounds of 0..CAPACITY
        .               unsafe fn val_area_mut<I, Output: ?Sized>(&mut self, index: I) -> &mut Output
        .               where
        .                   I: SliceIndex<[MaybeUninit<V>], Output = Output>,
        .               {
        .                   // SAFETY: the caller will not be able to call further methods on self
        .                   // until the value slice reference is dropped, as we have unique access
        .                   // for the lifetime of the borrow.
  284,368 ( 0.01%)          unsafe { self.as_leaf_mut().vals.as_mut_slice().get_unchecked_mut(index) }
        .               }
        .           }
        .           
        .           impl<'a, K: 'a, V: 'a> NodeRef<marker::Mut<'a>, K, V, marker::Internal> {
        .               /// Borrows exclusive access to an element or slice of the node's storage area for edge contents.
        .               ///
        .               /// # Safety
        .               /// `index` is in bounds of 0..CAPACITY + 1
-- line 483 ----------------------------------------
-- line 534 ----------------------------------------
        .               }
        .           }
        .           
        .           impl<'a, K: 'a, V: 'a> NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal> {
        .               /// Sets the node's link to its parent edge,
        .               /// without invalidating other references to the node.
        .               fn set_parent_link(&mut self, parent: NonNull<InternalNode<K, V>>, parent_idx: usize) {
        .                   let leaf = Self::as_leaf_ptr(self);
   45,783 ( 0.00%)          unsafe { (*leaf).parent = Some(parent) };
        .                   unsafe { (*leaf).parent_idx.write(parent_idx as u16) };
        .               }
        .           }
        .           
        .           impl<K, V> NodeRef<marker::Owned, K, V, marker::LeafOrInternal> {
        .               /// Clears the root's link to its parent edge.
        .               fn clear_parent_link(&mut self) {
        .                   let mut root_node = self.borrow_mut();
        .                   let leaf = root_node.as_leaf_mut();
    8,694 ( 0.00%)          leaf.parent = None;
        .               }
        .           }
        .           
        .           impl<K, V> NodeRef<marker::Owned, K, V, marker::LeafOrInternal> {
        .               /// Returns a new owned tree, with its own root node that is initially empty.
        .               pub fn new() -> Self {
        .                   NodeRef::new_leaf().forget_type()
        .               }
        .           
        .               /// Adds a new internal node with a single edge pointing to the previous root node,
        .               /// make that new node the root node, and return it. This increases the height by 1
        .               /// and is the opposite of `pop_internal_level`.
   56,304 ( 0.00%)      pub fn push_internal_level(&mut self) -> NodeRef<marker::Mut<'_>, K, V, marker::Internal> {
        .                   super::mem::take_mut(self, |old_root| NodeRef::new_internal(old_root).forget_type());
        .           
        .                   // `self.borrow_mut()`, except that we just forgot we're internal now:
        .                   NodeRef { height: self.height, node: self.node, _marker: PhantomData }
   75,072 ( 0.00%)      }
        .           
        .               /// Removes the internal root node, using its first child as the new root node.
        .               /// As it is intended only to be called when the root node has only one child,
        .               /// no cleanup is done on any of the keys, values and other children.
        .               /// This decreases the height by 1 and is the opposite of `push_internal_level`.
        .               ///
        .               /// Requires exclusive access to the `NodeRef` object but not to the root node;
        .               /// it will not invalidate other handles or references to the root node.
        .               ///
        .               /// Panics if there is no internal level, i.e., if the root node is a leaf.
        .               pub fn pop_internal_level(&mut self) {
   25,631 ( 0.00%)          assert!(self.height > 0);
        .           
        .                   let top = self.node;
        .           
        .                   // SAFETY: we asserted to be internal.
        .                   let internal_self = unsafe { self.borrow_mut().cast_to_internal_unchecked() };
        .                   // SAFETY: we borrowed `self` exclusively and its borrow type is exclusive.
        .                   let internal_node = unsafe { &mut *NodeRef::as_internal_ptr(&internal_self) };
        .                   // SAFETY: the first edge is always initialized.
    8,694 ( 0.00%)          self.node = unsafe { internal_node.edges[0].assume_init_read() };
   17,388 ( 0.00%)          self.height -= 1;
        .                   self.clear_parent_link();
        .           
        .                   unsafe {
        .                       Global.deallocate(top.cast(), Layout::new::<InternalNode<K, V>>());
        .                   }
        .               }
        .           }
        .           
        .           impl<K, V, Type> NodeRef<marker::Owned, K, V, Type> {
        .               /// Mutably borrows the owned root node. Unlike `reborrow_mut`, this is safe
        .               /// because the return value cannot be used to destroy the root, and there
        .               /// cannot be other references to the tree.
        .               pub fn borrow_mut(&mut self) -> NodeRef<marker::Mut<'_>, K, V, Type> {
1,534,821 ( 0.04%)          NodeRef { height: self.height, node: self.node, _marker: PhantomData }
        .               }
        .           
        .               /// Slightly mutably borrows the owned root node.
        .               pub fn borrow_valmut(&mut self) -> NodeRef<marker::ValMut<'_>, K, V, Type> {
        .                   NodeRef { height: self.height, node: self.node, _marker: PhantomData }
        .               }
        .           
        .               /// Irreversibly transitions to a reference that permits traversal and offers
-- line 614 ----------------------------------------
-- line 617 ----------------------------------------
        .                   NodeRef { height: self.height, node: self.node, _marker: PhantomData }
        .               }
        .           }
        .           
        .           impl<'a, K: 'a, V: 'a> NodeRef<marker::Mut<'a>, K, V, marker::Leaf> {
        .               /// Adds a key-value pair to the end of the node.
        .               pub fn push(&mut self, key: K, val: V) {
        .                   let len = self.len_mut();
       20 ( 0.00%)          let idx = usize::from(*len);
       10 ( 0.00%)          assert!(idx < CAPACITY);
       26 ( 0.00%)          *len += 1;
        .                   unsafe {
        .                       self.key_area_mut(idx).write(key);
        .                       self.val_area_mut(idx).write(val);
        .                   }
        .               }
        .           }
        .           
        .           impl<'a, K: 'a, V: 'a> NodeRef<marker::Mut<'a>, K, V, marker::Internal> {
        .               /// Adds a key-value pair, and an edge to go to the right of that pair,
        .               /// to the end of the node.
        .               pub fn push(&mut self, key: K, val: V, edge: Root<K, V>) {
   37,536 ( 0.00%)          assert!(edge.height == self.height - 1);
        .           
        .                   let len = self.len_mut();
   18,768 ( 0.00%)          let idx = usize::from(*len);
    9,384 ( 0.00%)          assert!(idx < CAPACITY);
   18,768 ( 0.00%)          *len += 1;
        .                   unsafe {
        .                       self.key_area_mut(idx).write(key);
        .                       self.val_area_mut(idx).write(val);
    9,384 ( 0.00%)              self.edge_area_mut(idx + 1).write(edge.node);
        .                       Handle::new_edge(self.reborrow_mut(), idx + 1).correct_parent_link();
        .                   }
        .               }
        .           }
        .           
        .           impl<BorrowType, K, V> NodeRef<BorrowType, K, V, marker::Leaf> {
        .               /// Removes any static information asserting that this node is a `Leaf` node.
        .               pub fn forget_type(self) -> NodeRef<BorrowType, K, V, marker::LeafOrInternal> {
-- line 656 ----------------------------------------
-- line 668 ----------------------------------------
        .           impl<BorrowType, K, V> NodeRef<BorrowType, K, V, marker::LeafOrInternal> {
        .               /// Checks whether a node is an `Internal` node or a `Leaf` node.
        .               pub fn force(
        .                   self,
        .               ) -> ForceResult<
        .                   NodeRef<BorrowType, K, V, marker::Leaf>,
        .                   NodeRef<BorrowType, K, V, marker::Internal>,
        .               > {
1,628,342 ( 0.04%)          if self.height == 0 {
        .                       ForceResult::Leaf(NodeRef {
        .                           height: self.height,
        .                           node: self.node,
        .                           _marker: PhantomData,
        .                       })
        .                   } else {
        .                       ForceResult::Internal(NodeRef {
        .                           height: self.height,
-- line 684 ----------------------------------------
-- line 747 ----------------------------------------
        .                   Handle { node, idx, _marker: PhantomData }
        .               }
        .           
        .               pub fn left_edge(self) -> Handle<NodeRef<BorrowType, K, V, NodeType>, marker::Edge> {
        .                   unsafe { Handle::new_edge(self.node, self.idx) }
        .               }
        .           
        .               pub fn right_edge(self) -> Handle<NodeRef<BorrowType, K, V, NodeType>, marker::Edge> {
  196,687 ( 0.00%)          unsafe { Handle::new_edge(self.node, self.idx + 1) }
        .               }
        .           }
        .           
        .           impl<BorrowType, K, V, NodeType, HandleType> PartialEq
        .               for Handle<NodeRef<BorrowType, K, V, NodeType>, HandleType>
        .           {
        .               fn eq(&self, other: &Self) -> bool {
        .                   let Self { node, idx, _marker } = self;
-- line 763 ----------------------------------------
-- line 790 ----------------------------------------
        .           }
        .           
        .           impl<BorrowType, K, V, NodeType> Handle<NodeRef<BorrowType, K, V, NodeType>, marker::Edge> {
        .               /// Creates a new handle to an edge in `node`.
        .               /// Unsafe because the caller must ensure that `idx <= node.len()`.
        .               pub unsafe fn new_edge(node: NodeRef<BorrowType, K, V, NodeType>, idx: usize) -> Self {
        .                   debug_assert!(idx <= node.len());
        .           
  309,888 ( 0.01%)          Handle { node, idx, _marker: PhantomData }
        .               }
        .           
        .               pub fn left_kv(self) -> Result<Handle<NodeRef<BorrowType, K, V, NodeType>, marker::KV>, Self> {
   21,907 ( 0.00%)          if self.idx > 0 {
   21,041 ( 0.00%)              Ok(unsafe { Handle::new_kv(self.node, self.idx - 1) })
        .                   } else {
        .                       Err(self)
        .                   }
        .               }
        .           
        .               pub fn right_kv(self) -> Result<Handle<NodeRef<BorrowType, K, V, NodeType>, marker::KV>, Self> {
  301,351 ( 0.01%)          if self.idx < self.node.len() {
        .                       Ok(unsafe { Handle::new_kv(self.node, self.idx) })
        .                   } else {
        .                       Err(self)
        .                   }
        .               }
        .           }
        .           
        .           pub enum LeftOrRight<T> {
-- line 818 ----------------------------------------
-- line 820 ----------------------------------------
        .               Right(T),
        .           }
        .           
        .           /// Given an edge index where we want to insert into a node filled to capacity,
        .           /// computes a sensible KV index of a split point and where to perform the insertion.
        .           /// The goal of the split point is for its key and value to end up in a parent node;
        .           /// the keys, values and edges to the left of the split point become the left child;
        .           /// the keys, values and edges to the right of the split point become the right child.
   26,267 ( 0.00%)  fn splitpoint(edge_idx: usize) -> (usize, LeftOrRight<usize>) {
        .               debug_assert!(edge_idx <= CAPACITY);
        .               // Rust issue #74834 tries to explain these symmetric rules.
  103,286 ( 0.00%)      match edge_idx {
   52,534 ( 0.00%)          0..EDGE_IDX_LEFT_OF_CENTER => (KV_IDX_CENTER - 1, LeftOrRight::Left(edge_idx)),
        .                   EDGE_IDX_LEFT_OF_CENTER => (KV_IDX_CENTER, LeftOrRight::Left(edge_idx)),
        .                   EDGE_IDX_RIGHT_OF_CENTER => (KV_IDX_CENTER, LeftOrRight::Right(0)),
   77,181 ( 0.00%)          _ => (KV_IDX_CENTER + 1, LeftOrRight::Right(edge_idx - (KV_IDX_CENTER + 1 + 1))),
        .               }
   26,267 ( 0.00%)  }
        .           
        .           impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, marker::Edge> {
        .               /// Inserts a new key-value pair between the key-value pairs to the right and left of
        .               /// this edge. This method assumes that there is enough space in the node for the new
        .               /// pair to fit.
        .               ///
        .               /// The returned pointer points to the inserted value.
2,214,570 ( 0.05%)      fn insert_fit(&mut self, key: K, val: V) -> *mut V {
        .                   debug_assert!(self.node.len() < CAPACITY);
        .                   let new_len = self.node.len() + 1;
        .           
        .                   unsafe {
  282,609 ( 0.01%)              slice_insert(self.node.key_area_mut(..new_len), self.idx, key);
  333,000 ( 0.01%)              slice_insert(self.node.val_area_mut(..new_len), self.idx, val);
  282,600 ( 0.01%)              *self.node.len_mut() = new_len as u16;
        .           
        .                       self.node.val_area_mut(self.idx).assume_init_mut()
        .                   }
2,260,800 ( 0.05%)      }
        .           }
        .           
        .           impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, marker::Edge> {
        .               /// Inserts a new key-value pair between the key-value pairs to the right and left of
        .               /// this edge. This method splits the node if there isn't enough room.
        .               ///
        .               /// The returned pointer points to the inserted value.
        .               fn insert(mut self, key: K, val: V) -> (InsertResult<'a, K, V, marker::Leaf>, *mut V) {
  847,800 ( 0.02%)          if self.node.len() < CAPACITY {
1,472,618 ( 0.03%)              let val_ptr = self.insert_fit(key, val);
  514,132 ( 0.01%)              let kv = unsafe { Handle::new_kv(self.node, self.idx) };
        .                       (InsertResult::Fit(kv), val_ptr)
        .                   } else {
  204,272 ( 0.00%)              let (middle_kv_idx, insertion) = splitpoint(self.idx);
   50,312 ( 0.00%)              let middle = unsafe { Handle::new_kv(self.node, middle_kv_idx) };
        .                       let mut result = middle.split();
  124,147 ( 0.00%)              let mut insertion_edge = match insertion {
        .                           LeftOrRight::Left(insert_idx) => unsafe {
        .                               Handle::new_edge(result.left.reborrow_mut(), insert_idx)
        .                           },
        .                           LeftOrRight::Right(insert_idx) => unsafe {
        .                               Handle::new_edge(result.right.borrow_mut(), insert_idx)
        .                           },
        .                       };
   94,914 ( 0.00%)              let val_ptr = insertion_edge.insert_fit(key, val);
   65,886 ( 0.00%)              (InsertResult::Split(result), val_ptr)
        .                   }
        .               }
        .           }
        .           
        .           impl<'a, K, V> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>, marker::Edge> {
        .               /// Fixes the parent pointer and index in the child node that this edge
        .               /// links to. This is useful when the ordering of edges has been changed,
        .               fn correct_parent_link(self) {
-- line 890 ----------------------------------------
-- line 895 ----------------------------------------
        .                   child.set_parent_link(ptr, idx);
        .               }
        .           }
        .           
        .           impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>, marker::Edge> {
        .               /// Inserts a new key-value pair and an edge that will go to the right of that new pair
        .               /// between this edge and the key-value pair to the right of this edge. This method assumes
        .               /// that there is enough space in the node for the new pair to fit.
  133,987 ( 0.00%)      fn insert_fit(&mut self, key: K, val: V, edge: Root<K, V>) {
        .                   debug_assert!(self.node.len() < CAPACITY);
        .                   debug_assert!(edge.height == self.node.height - 1);
        .                   let new_len = self.node.len() + 1;
        .           
        .                   unsafe {
   16,883 ( 0.00%)              slice_insert(self.node.key_area_mut(..new_len), self.idx, key);
   13,776 ( 0.00%)              slice_insert(self.node.val_area_mut(..new_len), self.idx, val);
        .                       slice_insert(self.node.edge_area_mut(..new_len + 1), self.idx + 1, edge.node);
   16,883 ( 0.00%)              *self.node.len_mut() = new_len as u16;
        .           
        .                       self.node.correct_childrens_parent_links(self.idx + 1..new_len + 1);
        .                   }
  135,064 ( 0.00%)      }
        .           
        .               /// Inserts a new key-value pair and an edge that will go to the right of that new pair
        .               /// between this edge and the key-value pair to the right of this edge. This method splits
        .               /// the node if there isn't enough room.
        .               fn insert(
        .                   mut self,
        .                   key: K,
        .                   val: V,
        .                   edge: Root<K, V>,
        .               ) -> InsertResult<'a, K, V, marker::Internal> {
   50,649 ( 0.00%)          assert!(edge.height == self.node.height - 1);
        .           
   33,766 ( 0.00%)          if self.node.len() < CAPACITY {
   86,342 ( 0.00%)              self.insert_fit(key, val, edge);
        .                       let kv = unsafe { Handle::new_kv(self.node, self.idx) };
        .                       InsertResult::Fit(kv)
        .                   } else {
    5,359 ( 0.00%)              let (middle_kv_idx, insertion) = splitpoint(self.idx);
        .                       let middle = unsafe { Handle::new_kv(self.node, middle_kv_idx) };
        .                       let mut result = middle.split();
      955 ( 0.00%)              let mut insertion_edge = match insertion {
        .                           LeftOrRight::Left(insert_idx) => unsafe {
        .                               Handle::new_edge(result.left.reborrow_mut(), insert_idx)
        .                           },
        .                           LeftOrRight::Right(insert_idx) => unsafe {
        .                               Handle::new_edge(result.right.borrow_mut(), insert_idx)
        .                           },
        .                       };
    6,187 ( 0.00%)              insertion_edge.insert_fit(key, val, edge);
    1,701 ( 0.00%)              InsertResult::Split(result)
        .                   }
        .               }
        .           }
        .           
        .           impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, marker::Edge> {
        .               /// Inserts a new key-value pair between the key-value pairs to the right and left of
        .               /// this edge. This method splits the node if there isn't enough room, and tries to
        .               /// insert the split off portion into the parent node recursively, until the root is reached.
        .               ///
        .               /// If the returned result is a `Fit`, its handle's node can be this edge's node or an ancestor.
        .               /// If the returned result is a `Split`, the `left` field will be the root node.
        .               /// The returned pointer points to the inserted value.
2,798,849 ( 0.07%)      pub fn insert_recursing(
        .                   self,
        .                   key: K,
        .                   value: V,
        .               ) -> (InsertResult<'a, K, V, marker::LeafOrInternal>, *mut V) {
1,638,394 ( 0.04%)          let (mut split, val_ptr) = match self.insert(key, value) {
        .                       (InsertResult::Fit(handle), ptr) => {
1,285,330 ( 0.03%)                  return (InsertResult::Fit(handle.forget_node_type()), ptr);
        .                       }
        .                       (InsertResult::Split(split), val_ptr) => (split.forget_node_type(), val_ptr),
        .                   };
        .           
        .                   loop {
  113,273 ( 0.00%)              split = match split.left.ascend() {
   77,595 ( 0.00%)                  Ok(parent) => match parent.insert(split.kv.0, split.kv.1, split.right) {
        .                               InsertResult::Fit(handle) => {
   85,824 ( 0.00%)                          return (InsertResult::Fit(handle.forget_node_type()), val_ptr);
        .                               }
       24 ( 0.00%)                      InsertResult::Split(split) => split.forget_node_type(),
        .                           },
        .                           Err(root) => {
   84,158 ( 0.00%)                      return (InsertResult::Split(SplitResult { left: root, ..split }), val_ptr);
        .                           }
        .                       };
        .                   }
2,543,400 ( 0.06%)      }
        .           }
        .           
        .           impl<BorrowType: marker::BorrowType, K, V>
        .               Handle<NodeRef<BorrowType, K, V, marker::Internal>, marker::Edge>
        .           {
        .               /// Finds the node pointed to by this edge.
        .               ///
        .               /// The method name assumes you picture trees with the root node on top.
-- line 992 ----------------------------------------
-- line 999 ----------------------------------------
        .                   // marker::ValMut, there might be outstanding mutable references to
        .                   // values that we must not invalidate. There's no worry accessing the
        .                   // height field because that value is copied. Beware that, once the
        .                   // node pointer is dereferenced, we access the edges array with a
        .                   // reference (Rust issue #73987) and invalidate any other references
        .                   // to or inside the array, should any be around.
        .                   let parent_ptr = NodeRef::as_internal_ptr(&self.node);
        .                   let node = unsafe { (*parent_ptr).edges.get_unchecked(self.idx).assume_init_read() };
   61,449 ( 0.00%)          NodeRef { node, height: self.node.height - 1, _marker: PhantomData }
        .               }
        .           }
        .           
        .           impl<'a, K: 'a, V: 'a, NodeType> Handle<NodeRef<marker::Immut<'a>, K, V, NodeType>, marker::KV> {
        .               pub fn into_kv(self) -> (&'a K, &'a V) {
        .                   debug_assert!(self.idx < self.node.len());
        .                   let leaf = self.node.into_leaf();
        .                   let k = unsafe { leaf.keys.get_unchecked(self.idx).assume_init_ref() };
        .                   let v = unsafe { leaf.vals.get_unchecked(self.idx).assume_init_ref() };
  397,581 ( 0.01%)          (k, v)
        .               }
        .           }
        .           
        .           impl<'a, K: 'a, V: 'a, NodeType> Handle<NodeRef<marker::Mut<'a>, K, V, NodeType>, marker::KV> {
        .               pub fn key_mut(&mut self) -> &mut K {
        .                   unsafe { self.node.key_area_mut(self.idx).assume_init_mut() }
        .               }
        .           
-- line 1025 ----------------------------------------
-- line 1037 ----------------------------------------
        .           }
        .           
        .           impl<'a, K: 'a, V: 'a, NodeType> Handle<NodeRef<marker::Mut<'a>, K, V, NodeType>, marker::KV> {
        .               pub fn kv_mut(&mut self) -> (&mut K, &mut V) {
        .                   debug_assert!(self.idx < self.node.len());
        .                   // We cannot call separate key and value methods, because calling the second one
        .                   // invalidates the reference returned by the first.
        .                   unsafe {
      300 ( 0.00%)              let leaf = self.node.as_leaf_mut();
      300 ( 0.00%)              let key = leaf.keys.get_unchecked_mut(self.idx).assume_init_mut();
        .                       let val = leaf.vals.get_unchecked_mut(self.idx).assume_init_mut();
      410 ( 0.00%)              (key, val)
        .                   }
        .               }
        .           
        .               /// Replaces the key and value that the KV handle refers to.
        .               pub fn replace_kv(&mut self, k: K, v: V) -> (K, V) {
        .                   let (key, val) = self.kv_mut();
        .                   (mem::replace(key, k), mem::replace(val, v))
        .               }
-- line 1056 ----------------------------------------
-- line 1069 ----------------------------------------
        .                       (key, val)
        .                   }
        .               }
        .           
        .               /// Drops the key and value that the KV handle refers to.
        .               /// # Safety
        .               /// The node that the handle refers to must not yet have been deallocated.
        .               #[inline]
       12 ( 0.00%)      pub unsafe fn drop_key_val(mut self) {
        .                   debug_assert!(self.idx < self.node.len());
        .                   let leaf = self.node.as_leaf_dying();
        .                   unsafe {
        2 ( 0.00%)              leaf.keys.get_unchecked_mut(self.idx).assume_init_drop();
   20,219 ( 0.00%)              leaf.vals.get_unchecked_mut(self.idx).assume_init_drop();
        .                   }
       14 ( 0.00%)      }
        .           }
        .           
        .           impl<'a, K: 'a, V: 'a, NodeType> Handle<NodeRef<marker::Mut<'a>, K, V, NodeType>, marker::KV> {
        .               /// Helps implementations of `split` for a particular `NodeType`,
        .               /// by taking care of leaf data.
        .               fn split_leaf_data(&mut self, new_node: &mut LeafNode<K, V>) -> (K, V) {
        .                   debug_assert!(self.idx < self.node.len());
        .                   let old_len = self.node.len();
  134,455 ( 0.00%)          let new_len = old_len - self.idx - 1;
   26,677 ( 0.00%)          new_node.len = new_len as u16;
        .                   unsafe {
   20,892 ( 0.00%)              let k = self.node.key_area_mut(self.idx).assume_init_read();
   18,084 ( 0.00%)              let v = self.node.val_area_mut(self.idx).assume_init_read();
        .           
        .                       move_to_slice(
   78,801 ( 0.00%)                  self.node.key_area_mut(self.idx + 1..old_len),
   26,267 ( 0.00%)                  &mut new_node.keys[..new_len],
        .                       );
        .                       move_to_slice(
        .                           self.node.val_area_mut(self.idx + 1..old_len),
   26,641 ( 0.00%)                  &mut new_node.vals[..new_len],
        .                       );
        .           
   44,352 ( 0.00%)              *self.node.len_mut() = self.idx as u16;
   35,999 ( 0.00%)              (k, v)
        .                   }
        .               }
        .           }
        .           
        .           impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, marker::KV> {
        .               /// Splits the underlying node into three parts:
        .               ///
        .               /// - The node is truncated to only contain the key-value pairs to the left of
-- line 1117 ----------------------------------------
-- line 1120 ----------------------------------------
        .               /// - All the key-value pairs to the right of this handle are put into a newly
        .               ///   allocated node.
        .               pub fn split(mut self) -> SplitResult<'a, K, V, marker::Leaf> {
        .                   let mut new_node = LeafNode::new();
        .           
        .                   let kv = self.split_leaf_data(&mut new_node);
        .           
        .                   let right = NodeRef::from_new_leaf(new_node);
  228,712 ( 0.01%)          SplitResult { left: self.node, kv, right }
        .               }
        .           
        .               /// Removes the key-value pair pointed to by this handle and returns it, along with the edge
        .               /// that the key-value pair collapsed into.
        .               pub fn remove(
        .                   mut self,
        .               ) -> ((K, V), Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, marker::Edge>) {
        .                   let old_len = self.node.len();
        .                   unsafe {
        .                       let k = slice_remove(self.node.key_area_mut(..old_len), self.idx);
  154,539 ( 0.00%)              let v = slice_remove(self.node.val_area_mut(..old_len), self.idx);
  812,907 ( 0.02%)              *self.node.len_mut() = (old_len - 1) as u16;
  798,884 ( 0.02%)              ((k, v), self.left_edge())
        .                   }
        .               }
        .           }
        .           
        .           impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>, marker::KV> {
        .               /// Splits the underlying node into three parts:
        .               ///
        .               /// - The node is truncated to only contain the edges and key-value pairs to the
-- line 1149 ----------------------------------------
-- line 1150 ----------------------------------------
        .               ///   left of this handle.
        .               /// - The key and value pointed to by this handle are extracted.
        .               /// - All the edges and key-value pairs to the right of this handle are put into
        .               ///   a newly allocated node.
        .               pub fn split(mut self) -> SplitResult<'a, K, V, marker::Internal> {
        .                   let old_len = self.node.len();
        .                   unsafe {
        .                       let mut new_node = InternalNode::new();
    1,122 ( 0.00%)              let kv = self.split_leaf_data(&mut new_node.data);
        .                       let new_len = usize::from(new_node.data.len);
        .                       move_to_slice(
      733 ( 0.00%)                  self.node.edge_area_mut(self.idx + 1..old_len + 1),
    1,466 ( 0.00%)                  &mut new_node.edges[..new_len + 1],
        .                       );
        .           
        .                       let height = self.node.height;
        .                       let right = NodeRef::from_new_internal(new_node, height);
        .           
    4,548 ( 0.00%)              SplitResult { left: self.node, kv, right }
        .                   }
        .               }
        .           }
        .           
        .           /// Represents a session for evaluating and performing a balancing operation
        .           /// around an internal key-value pair.
        .           pub struct BalancingContext<'a, K, V> {
        .               parent: Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>, marker::KV>,
-- line 1176 ----------------------------------------
-- line 1242 ----------------------------------------
        .           
        .               pub fn into_right_child(self) -> NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal> {
        .                   self.right_child
        .               }
        .           
        .               /// Returns whether merging is possible, i.e., whether there is enough room
        .               /// in a node to combine the central KV with both adjacent child nodes.
        .               pub fn can_merge(&self) -> bool {
   65,435 ( 0.00%)          self.left_child.len() + 1 + self.right_child.len() <= CAPACITY
        .               }
        .           }
        .           
        .           impl<'a, K: 'a, V: 'a> BalancingContext<'a, K, V> {
        .               /// Performs a merge and lets a closure decide what to return.
        .               fn do_merge<
        .                   F: FnOnce(
        .                       NodeRef<marker::Mut<'a>, K, V, marker::Internal>,
-- line 1258 ----------------------------------------
-- line 1264 ----------------------------------------
        .                   result: F,
        .               ) -> R {
        .                   let Handle { node: mut parent_node, idx: parent_idx, _marker } = self.parent;
        .                   let old_parent_len = parent_node.len();
        .                   let mut left_node = self.left_child;
        .                   let old_left_len = left_node.len();
        .                   let mut right_node = self.right_child;
        .                   let right_len = right_node.len();
   43,020 ( 0.00%)          let new_left_len = old_left_len + 1 + right_len;
        .           
   43,020 ( 0.00%)          assert!(new_left_len <= CAPACITY);
        .           
        .                   unsafe {
   21,510 ( 0.00%)              *left_node.len_mut() = new_left_len as u16;
        .           
        .                       let parent_key = slice_remove(parent_node.key_area_mut(..old_parent_len), parent_idx);
        .                       left_node.key_area_mut(old_left_len).write(parent_key);
        .                       move_to_slice(
        .                           right_node.key_area_mut(..right_len),
        .                           left_node.key_area_mut(old_left_len + 1..new_left_len),
        .                       );
        .           
        .                       let parent_val = slice_remove(parent_node.val_area_mut(..old_parent_len), parent_idx);
        .                       left_node.val_area_mut(old_left_len).write(parent_val);
        .                       move_to_slice(
        .                           right_node.val_area_mut(..right_len),
        .                           left_node.val_area_mut(old_left_len + 1..new_left_len),
        .                       );
        .           
   21,510 ( 0.00%)              slice_remove(&mut parent_node.edge_area_mut(..old_parent_len + 1), parent_idx + 1);
        .                       parent_node.correct_childrens_parent_links(parent_idx + 1..old_parent_len);
  129,113 ( 0.00%)              *parent_node.len_mut() -= 1;
        .           
   43,020 ( 0.00%)              if parent_node.height > 1 {
        .                           // SAFETY: the height of the nodes being merged is one below the height
        .                           // of the node of this edge, thus above zero, so they are internal.
        .                           let mut left_node = left_node.reborrow_mut().cast_to_internal_unchecked();
        .                           let mut right_node = right_node.cast_to_internal_unchecked();
        .                           move_to_slice(
        .                               right_node.edge_area_mut(..right_len + 1),
      439 ( 0.00%)                      left_node.edge_area_mut(old_left_len + 1..new_left_len + 1),
        .                           );
        .           
        .                           left_node.correct_childrens_parent_links(old_left_len + 1..new_left_len + 1);
        .           
        .                           Global.deallocate(right_node.node.cast(), Layout::new::<InternalNode<K, V>>());
        .                       } else {
        .                           Global.deallocate(right_node.node.cast(), Layout::new::<LeafNode<K, V>>());
        .                       }
-- line 1312 ----------------------------------------
-- line 1313 ----------------------------------------
        .                   }
        .                   result(parent_node, left_node)
        .               }
        .           
        .               /// Merges the parent's key-value pair and both adjacent child nodes into
        .               /// the left child node and returns the shrunk parent node.
        .               ///
        .               /// Panics unless we `.can_merge()`.
    3,073 ( 0.00%)      pub fn merge_tracking_parent(self) -> NodeRef<marker::Mut<'a>, K, V, marker::Internal> {
      878 ( 0.00%)          self.do_merge(|parent, _child| parent)
    4,384 ( 0.00%)      }
        .           
        .               /// Merges the parent's key-value pair and both adjacent child nodes into
        .               /// the left child node and returns that child node.
        .               ///
        .               /// Panics unless we `.can_merge()`.
        .               pub fn merge_tracking_child(self) -> NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal> {
        .                   self.do_merge(|_parent, child| child)
        .               }
        .           
        .               /// Merges the parent's key-value pair and both adjacent child nodes into
        .               /// the left child node and returns the edge handle in that child node
        .               /// where the tracked child edge ended up,
        .               ///
        .               /// Panics unless we `.can_merge()`.
  147,497 ( 0.00%)      pub fn merge_tracking_child_edge(
        .                   self,
        .                   track_edge_idx: LeftOrRight<usize>,
        .               ) -> Handle<NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal>, marker::Edge> {
   21,071 ( 0.00%)          let old_left_len = self.left_child.len();
   21,071 ( 0.00%)          let right_len = self.right_child.len();
   63,213 ( 0.00%)          assert!(match track_edge_idx {
        .                       LeftOrRight::Left(idx) => idx <= old_left_len,
        .                       LeftOrRight::Right(idx) => idx <= right_len,
        .                   });
        .                   let child = self.merge_tracking_child();
   21,071 ( 0.00%)          let new_idx = match track_edge_idx {
        .                       LeftOrRight::Left(idx) => idx,
   61,659 ( 0.00%)              LeftOrRight::Right(idx) => old_left_len + 1 + idx,
        .                   };
        .                   unsafe { Handle::new_edge(child, new_idx) }
  168,568 ( 0.00%)      }
        .           
        .               /// Removes a key-value pair from the left child and places it in the key-value storage
        .               /// of the parent, while pushing the old parent key-value pair into the right child.
        .               /// Returns a handle to the edge in the right child corresponding to where the original
        .               /// edge specified by `track_right_edge_idx` ended up.
        .               pub fn steal_left(
        .                   mut self,
        .                   track_right_edge_idx: usize,
        .               ) -> Handle<NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal>, marker::Edge> {
      130 ( 0.00%)          self.bulk_steal_left(1);
        .                   unsafe { Handle::new_edge(self.right_child, 1 + track_right_edge_idx) }
        .               }
        .           
        .               /// Removes a key-value pair from the right child and places it in the key-value storage
        .               /// of the parent, while pushing the old parent key-value pair onto the left child.
        .               /// Returns a handle to the edge in the left child specified by `track_left_edge_idx`,
        .               /// which didn't move.
        .               pub fn steal_right(
        .                   mut self,
        .                   track_left_edge_idx: usize,
        .               ) -> Handle<NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal>, marker::Edge> {
      452 ( 0.00%)          self.bulk_steal_right(1);
        .                   unsafe { Handle::new_edge(self.left_child, track_left_edge_idx) }
        .               }
        .           
        .               /// This does stealing similar to `steal_left` but steals multiple elements at once.
      455 ( 0.00%)      pub fn bulk_steal_left(&mut self, count: usize) {
      130 ( 0.00%)          assert!(count > 0);
        .                   unsafe {
        .                       let left_node = &mut self.left_child;
        .                       let old_left_len = left_node.len();
        .                       let right_node = &mut self.right_child;
       65 ( 0.00%)              let old_right_len = right_node.len();
        .           
        .                       // Make sure that we may steal safely.
      325 ( 0.00%)              assert!(old_right_len + count <= CAPACITY);
      189 ( 0.00%)              assert!(old_left_len >= count);
        .           
        .                       let new_left_len = old_left_len - count;
        .                       let new_right_len = old_right_len + count;
       65 ( 0.00%)              *left_node.len_mut() = new_left_len as u16;
       77 ( 0.00%)              *right_node.len_mut() = new_right_len as u16;
        .           
        .                       // Move leaf data.
        .                       {
        .                           // Make room for stolen elements in the right child.
        .                           slice_shr(right_node.key_area_mut(..new_right_len), count);
        .                           slice_shr(right_node.val_area_mut(..new_right_len), count);
        .           
        .                           // Move elements from the left child to the right one.
        .                           move_to_slice(
      130 ( 0.00%)                      left_node.key_area_mut(new_left_len + 1..old_left_len),
       65 ( 0.00%)                      right_node.key_area_mut(..count - 1),
        .                           );
        .                           move_to_slice(
        .                               left_node.val_area_mut(new_left_len + 1..old_left_len),
        .                               right_node.val_area_mut(..count - 1),
        .                           );
        .           
        .                           // Move the left-most stolen pair to the parent.
       59 ( 0.00%)                  let k = left_node.key_area_mut(new_left_len).assume_init_read();
        .                           let v = left_node.val_area_mut(new_left_len).assume_init_read();
      292 ( 0.00%)                  let (k, v) = self.parent.replace_kv(k, v);
        .           
        .                           // Move parent's key-value pair to the right child.
        .                           right_node.key_area_mut(count - 1).write(k);
        .                           right_node.val_area_mut(count - 1).write(v);
        .                       }
        .           
      325 ( 0.00%)              match (left_node.reborrow_mut().force(), right_node.reborrow_mut().force()) {
        .                           (ForceResult::Internal(mut left), ForceResult::Internal(mut right)) => {
        .                               // Make room for stolen edges.
        .                               slice_shr(right.edge_area_mut(..new_right_len + 1), count);
        .           
        .                               // Steal edges.
        .                               move_to_slice(
        .                                   left.edge_area_mut(new_left_len + 1..old_left_len + 1),
        .                                   right.edge_area_mut(..count),
-- line 1432 ----------------------------------------
-- line 1433 ----------------------------------------
        .                               );
        .           
        .                               right.correct_childrens_parent_links(0..new_right_len + 1);
        .                           }
        .                           (ForceResult::Leaf(_), ForceResult::Leaf(_)) => {}
        .                           _ => unreachable!(),
        .                       }
        .                   }
      520 ( 0.00%)      }
        .           
        .               /// The symmetric clone of `bulk_steal_left`.
    1,645 ( 0.00%)      pub fn bulk_steal_right(&mut self, count: usize) {
      470 ( 0.00%)          assert!(count > 0);
        .                   unsafe {
        .                       let left_node = &mut self.left_child;
      235 ( 0.00%)              let old_left_len = left_node.len();
        .                       let right_node = &mut self.right_child;
        .                       let old_right_len = right_node.len();
        .           
        .                       // Make sure that we may steal safely.
    1,175 ( 0.00%)              assert!(old_left_len + count <= CAPACITY);
      536 ( 0.00%)              assert!(old_right_len >= count);
        .           
        .                       let new_left_len = old_left_len + count;
        .                       let new_right_len = old_right_len - count;
      235 ( 0.00%)              *left_node.len_mut() = new_left_len as u16;
      235 ( 0.00%)              *right_node.len_mut() = new_right_len as u16;
        .           
        .                       // Move leaf data.
        .                       {
        .                           // Move the right-most stolen pair to the parent.
      419 ( 0.00%)                  let k = right_node.key_area_mut(count - 1).assume_init_read();
        .                           let v = right_node.val_area_mut(count - 1).assume_init_read();
      736 ( 0.00%)                  let (k, v) = self.parent.replace_kv(k, v);
        .           
        .                           // Move parent's key-value pair to the left child.
        .                           left_node.key_area_mut(old_left_len).write(k);
        .                           left_node.val_area_mut(old_left_len).write(v);
        .           
        .                           // Move elements from the right child to the left one.
        .                           move_to_slice(
        .                               right_node.key_area_mut(..count - 1),
      235 ( 0.00%)                      left_node.key_area_mut(old_left_len + 1..new_left_len),
        .                           );
        .                           move_to_slice(
        .                               right_node.val_area_mut(..count - 1),
        .                               left_node.val_area_mut(old_left_len + 1..new_left_len),
        .                           );
        .           
        .                           // Fill gap where stolen elements used to be.
        .                           slice_shl(right_node.key_area_mut(..old_right_len), count);
        .                           slice_shl(right_node.val_area_mut(..old_right_len), count);
        .                       }
        .           
    1,175 ( 0.00%)              match (left_node.reborrow_mut().force(), right_node.reborrow_mut().force()) {
        .                           (ForceResult::Internal(mut left), ForceResult::Internal(mut right)) => {
        .                               // Steal edges.
        .                               move_to_slice(
        .                                   right.edge_area_mut(..count),
        9 ( 0.00%)                          left.edge_area_mut(old_left_len + 1..new_left_len + 1),
        .                               );
        .           
        .                               // Fill gap where stolen edges used to be.
        9 ( 0.00%)                      slice_shl(right.edge_area_mut(..old_right_len + 1), count);
        .           
        .                               left.correct_childrens_parent_links(old_left_len + 1..new_left_len + 1);
       18 ( 0.00%)                      right.correct_childrens_parent_links(0..new_right_len + 1);
        .                           }
        .                           (ForceResult::Leaf(_), ForceResult::Leaf(_)) => {}
        .                           _ => unreachable!(),
        .                       }
        .                   }
    1,880 ( 0.00%)      }
        .           }
        .           
        .           impl<BorrowType, K, V> Handle<NodeRef<BorrowType, K, V, marker::Leaf>, marker::Edge> {
        .               pub fn forget_node_type(
        .                   self,
        .               ) -> Handle<NodeRef<BorrowType, K, V, marker::LeafOrInternal>, marker::Edge> {
        .                   unsafe { Handle::new_edge(self.node.forget_type(), self.idx) }
        .               }
-- line 1513 ----------------------------------------
-- line 1681 ----------------------------------------
        .           ///
        .           /// # Safety
        .           /// The slice has more than `idx` elements.
        .           unsafe fn slice_insert<T>(slice: &mut [MaybeUninit<T>], idx: usize, val: T) {
        .               unsafe {
        .                   let len = slice.len();
        .                   debug_assert!(len > idx);
        .                   let slice_ptr = slice.as_mut_ptr();
2,128,909 ( 0.05%)          if len > idx + 1 {
  254,645 ( 0.01%)              ptr::copy(slice_ptr.add(idx), slice_ptr.add(idx + 1), len - idx - 1);
        .                   }
        .                   (*slice_ptr.add(idx)).write(val);
        .               }
        .           }
        .           
        .           /// Removes and returns a value from a slice of all initialized elements, leaving behind one
        .           /// trailing uninitialized element.
        .           ///
-- line 1698 ----------------------------------------
-- line 1699 ----------------------------------------
        .           /// # Safety
        .           /// The slice has more than `idx` elements.
        .           unsafe fn slice_remove<T>(slice: &mut [MaybeUninit<T>], idx: usize) -> T {
        .               unsafe {
        .                   let len = slice.len();
        .                   debug_assert!(idx < len);
        .                   let slice_ptr = slice.as_mut_ptr();
        .                   let ret = (*slice_ptr.add(idx)).assume_init_read();
2,099,808 ( 0.05%)          ptr::copy(slice_ptr.add(idx + 1), slice_ptr.add(idx), len - idx - 1);
        .                   ret
        .               }
        .           }
        .           
        .           /// Shifts the elements in a slice `distance` positions to the left.
        .           ///
        .           /// # Safety
        .           /// The slice has at least `distance` elements.
        .           unsafe fn slice_shl<T>(slice: &mut [MaybeUninit<T>], distance: usize) {
        .               unsafe {
        .                   let slice_ptr = slice.as_mut_ptr();
       18 ( 0.00%)          ptr::copy(slice_ptr.add(distance), slice_ptr, slice.len() - distance);
        .               }
        .           }
        .           
        .           /// Shifts the elements in a slice `distance` positions to the right.
        .           ///
        .           /// # Safety
        .           /// The slice has at least `distance` elements.
        .           unsafe fn slice_shr<T>(slice: &mut [MaybeUninit<T>], distance: usize) {
        .               unsafe {
        .                   let slice_ptr = slice.as_mut_ptr();
      183 ( 0.00%)          ptr::copy(slice_ptr, slice_ptr.add(distance), slice.len() - distance);
        .               }
        .           }
        .           
        .           /// Moves all values from a slice of initialized elements to a slice
        .           /// of uninitialized elements, leaving behind `src` as all uninitialized.
        .           /// Works like `dst.copy_from_slice(src)` but does not require `T` to be `Copy`.
        .           fn move_to_slice<T>(src: &mut [MaybeUninit<T>], dst: &mut [MaybeUninit<T>]) {
   98,728 ( 0.00%)      assert!(src.len() == dst.len());
        .               unsafe {
        .                   ptr::copy_nonoverlapping(src.as_ptr(), dst.as_mut_ptr(), src.len());
        .               }
        .           }
        .           
        .           #[cfg(test)]
        .           mod tests;

6,174,239 ( 0.14%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/node.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs
--------------------------------------------------------------------------------
Ir                  

-- line 111 ----------------------------------------
         .           const EMPTY: u8 = 0b1111_1111;
         .           
         .           /// Control byte value for a deleted bucket.
         .           const DELETED: u8 = 0b1000_0000;
         .           
         .           /// Checks whether a control byte represents a full bucket (top bit is clear).
         .           #[inline]
         .           fn is_full(ctrl: u8) -> bool {
 3,349,281 ( 0.08%)      ctrl & 0x80 == 0
         .           }
         .           
         .           /// Checks whether a control byte represents a special value (top bit is set).
         .           #[inline]
         .           fn is_special(ctrl: u8) -> bool {
         .               ctrl & 0x80 != 0
         .           }
         .           
         .           /// Checks whether a special control value is EMPTY (just check 1 bit).
         .           #[inline]
         .           fn special_is_empty(ctrl: u8) -> bool {
         .               debug_assert!(is_special(ctrl));
   237,894 ( 0.01%)      ctrl & 0x01 != 0
         .           }
         .           
         .           /// Primary hash function, used to select the initial bucket to probe from.
         .           #[inline]
         .           #[allow(clippy::cast_possible_truncation)]
         .           fn h1(hash: u64) -> usize {
         .               // On 32-bit platforms we simply ignore the higher hash bits.
         .               hash as usize
-- line 140 ----------------------------------------
-- line 143 ----------------------------------------
         .           /// Secondary hash function, saved in the low 7 bits of the control byte.
         .           #[inline]
         .           #[allow(clippy::cast_possible_truncation)]
         .           fn h2(hash: u64) -> u8 {
         .               // Grab the top 7 bits of the hash. While the hash is normally a full 64-bit
         .               // value, some hash functions (such as FxHash) produce a usize result
         .               // instead, which means that the top 32 bits are 0 on 32-bit platforms.
         .               let hash_len = usize::min(mem::size_of::<usize>(), mem::size_of::<u64>());
63,576,785 ( 1.49%)      let top7 = hash >> (hash_len * 8 - 7);
         .               (top7 & 0x7f) as u8 // truncation
         .           }
         .           
         .           /// Probe sequence based on triangular numbers, which is guaranteed (since our
         .           /// table size is a power of two) to visit every group of elements exactly once.
         .           ///
         .           /// A triangular probe has us jump by 1 more group every time. So first we
         .           /// jump by 1 group (meaning we just continue our linear scan), then 2 groups
-- line 159 ----------------------------------------
-- line 170 ----------------------------------------
         .               #[inline]
         .               fn move_next(&mut self, bucket_mask: usize) {
         .                   // We should have found an empty bucket by now and ended the probe.
         .                   debug_assert!(
         .                       self.stride <= bucket_mask,
         .                       "Went past end of probe sequence"
         .                   );
         .           
   426,342 ( 0.01%)          self.stride += Group::WIDTH;
   426,342 ( 0.01%)          self.pos += self.stride;
   369,259 ( 0.01%)          self.pos &= bucket_mask;
         .               }
         .           }
         .           
         .           /// Returns the number of buckets needed to hold the given number of items,
         .           /// taking the maximum load factor into account.
         .           ///
         .           /// Returns `None` if an overflow occurs.
         .           // Workaround for emscripten bug emscripten-core/emscripten-fastcomp#258
         .           #[cfg_attr(target_os = "emscripten", inline(never))]
         .           #[cfg_attr(not(target_os = "emscripten"), inline)]
         .           fn capacity_to_buckets(cap: usize) -> Option<usize> {
         .               debug_assert_ne!(cap, 0);
         .           
         .               // For small tables we require at least 1 empty bucket so that lookups are
         .               // guaranteed to terminate if an element doesn't exist in the table.
   293,654 ( 0.01%)      if cap < 8 {
         .                   // We don't bother with a table size of 2 buckets since that can only
         .                   // hold a single element. Instead we skip directly to a 4 bucket table
         .                   // which can hold 3 elements.
   625,840 ( 0.01%)          return Some(if cap < 4 { 4 } else { 8 });
         .               }
         .           
         .               // Otherwise require 1/8 buckets to be empty (87.5% load)
         .               //
         .               // Be careful when modifying this, calculate_layout relies on the
         .               // overflow check here.
   129,954 ( 0.00%)      let adjusted_cap = cap.checked_mul(8)? / 7;
         .           
         .               // Any overflows will have been caught by the checked_mul. Also, any
         .               // rounding errors from the division above will be cleaned up by
         .               // next_power_of_two (which can't overflow because of the previous division).
         .               Some(adjusted_cap.next_power_of_two())
         .           }
         .           
         .           /// Returns the maximum effective capacity for the given bucket mask, taking
         .           /// the maximum load factor into account.
         .           #[inline]
         .           fn bucket_mask_to_capacity(bucket_mask: usize) -> usize {
   777,473 ( 0.02%)      if bucket_mask < 8 {
         .                   // For tables with 1/2/4/8 buckets, we always reserve one empty slot.
         .                   // Keep in mind that the bucket mask is one less than the bucket count.
         .                   bucket_mask
         .               } else {
         .                   // For larger tables we reserve 12.5% of the slots as empty.
   176,730 ( 0.00%)          ((bucket_mask + 1) / 8) * 7
         .               }
         .           }
         .           
         .           /// Helper which allows the max calculation for ctrl_align to be statically computed for each T
         .           /// while keeping the rest of `calculate_layout_for` independent of `T`
         .           #[derive(Copy, Clone)]
         .           struct TableLayout {
         .               size: usize,
-- line 233 ----------------------------------------
-- line 246 ----------------------------------------
         .           
         .               #[inline]
         .               fn calculate_layout_for(self, buckets: usize) -> Option<(Layout, usize)> {
         .                   debug_assert!(buckets.is_power_of_two());
         .           
         .                   let TableLayout { size, ctrl_align } = self;
         .                   // Manual layout calculation since Layout methods are not yet stable.
         .                   let ctrl_offset =
   603,943 ( 0.01%)              size.checked_mul(buckets)?.checked_add(ctrl_align - 1)? & !(ctrl_align - 1);
   801,605 ( 0.02%)          let len = ctrl_offset.checked_add(buckets + Group::WIDTH)?;
         .           
         .                   Some((
         .                       unsafe { Layout::from_size_align_unchecked(len, ctrl_align) },
         .                       ctrl_offset,
         .                   ))
         .               }
         .           }
         .           
-- line 263 ----------------------------------------
-- line 337 ----------------------------------------
         .                   }
         .               }
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub unsafe fn drop(&self) {
         .                   self.as_ptr().drop_in_place();
         .               }
         .               #[inline]
         .               pub unsafe fn read(&self) -> T {
     5,454 ( 0.00%)          self.as_ptr().read()
         .               }
         .               #[inline]
         .               pub unsafe fn write(&self, val: T) {
         .                   self.as_ptr().write(val);
         .               }
         .               #[inline]
         .               pub unsafe fn as_ref<'a>(&self) -> &'a T {
         .                   &*self.as_ptr()
-- line 353 ----------------------------------------
-- line 422 ----------------------------------------
         .               /// Creates a new empty hash table without allocating any memory, using the
         .               /// given allocator.
         .               ///
         .               /// In effect this returns a table with exactly 1 bucket. However we can
         .               /// leave the data pointer dangling since that bucket is never written to
         .               /// due to our load factor forcing us to always have at least 1 free bucket.
         .               #[inline]
         .               pub fn new_in(alloc: A) -> Self {
       315 ( 0.00%)          Self {
         .                       table: RawTableInner::new_in(alloc),
         .                       marker: PhantomData,
         .                   }
         .               }
         .           
         .               /// Allocates a new hash table with the given number of buckets.
         .               ///
         .               /// The control bytes are left uninitialized.
-- line 438 ----------------------------------------
-- line 440 ----------------------------------------
         .               unsafe fn new_uninitialized(
         .                   alloc: A,
         .                   buckets: usize,
         .                   fallibility: Fallibility,
         .               ) -> Result<Self, TryReserveError> {
         .                   debug_assert!(buckets.is_power_of_two());
         .           
         .                   Ok(Self {
       600 ( 0.00%)              table: RawTableInner::new_uninitialized(
         .                           alloc,
         .                           TableLayout::new::<T>(),
         .                           buckets,
         .                           fallibility,
         .                       )?,
         .                       marker: PhantomData,
         .                   })
         .               }
-- line 456 ----------------------------------------
-- line 458 ----------------------------------------
         .               /// Attempts to allocate a new hash table with at least enough capacity
         .               /// for inserting the given number of elements without reallocating.
         .               fn fallible_with_capacity(
         .                   alloc: A,
         .                   capacity: usize,
         .                   fallibility: Fallibility,
         .               ) -> Result<Self, TryReserveError> {
         .                   Ok(Self {
    13,288 ( 0.00%)              table: RawTableInner::fallible_with_capacity(
         .                           alloc,
         .                           TableLayout::new::<T>(),
         .                           capacity,
         .                           fallibility,
         .                       )?,
         .                       marker: PhantomData,
         .                   })
         .               }
-- line 474 ----------------------------------------
-- line 527 ----------------------------------------
         .                   debug_assert_ne!(self.table.bucket_mask, 0);
         .                   debug_assert!(index < self.buckets());
         .                   Bucket::from_base_index(self.data_end(), index)
         .               }
         .           
         .               /// Erases an element from the table without dropping it.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[deprecated(since = "0.8.1", note = "use erase or remove instead")]
    49,002 ( 0.00%)      pub unsafe fn erase_no_drop(&mut self, item: &Bucket<T>) {
    49,002 ( 0.00%)          let index = self.bucket_index(item);
         .                   self.table.erase(index);
    98,004 ( 0.00%)      }
         .           
         .               /// Erases an element from the table, dropping it in place.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[allow(clippy::needless_pass_by_value)]
         .               #[allow(deprecated)]
         .               pub unsafe fn erase(&mut self, item: Bucket<T>) {
         .                   // Erase the element from the table first since drop might panic.
    29,746 ( 0.00%)          self.erase_no_drop(&item);
         .                   item.drop();
         .               }
         .           
         .               /// Finds and erases an element from the table, dropping it in place.
         .               /// Returns true if an element was found.
         .               #[cfg(feature = "raw")]
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn erase_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> bool {
-- line 554 ----------------------------------------
-- line 563 ----------------------------------------
         .                   }
         .               }
         .           
         .               /// Removes an element from the table, returning it.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[allow(clippy::needless_pass_by_value)]
         .               #[allow(deprecated)]
         .               pub unsafe fn remove(&mut self, item: Bucket<T>) -> T {
    68,258 ( 0.00%)          self.erase_no_drop(&item);
       511 ( 0.00%)          item.read()
         .               }
         .           
         .               /// Finds and removes an element from the table, returning it.
         .               #[cfg_attr(feature = "inline-more", inline)]
 1,238,272 ( 0.03%)      pub fn remove_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<T> {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
     1,716 ( 0.00%)          match self.find(hash, eq) {
    17,929 ( 0.00%)              Some(bucket) => Some(unsafe { self.remove(bucket) }),
   301,352 ( 0.01%)              None => None,
         .                   }
 1,708,441 ( 0.04%)      }
         .           
         .               /// Marks all table buckets as empty without dropping their contents.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn clear_no_drop(&mut self) {
         .                   self.table.clear_no_drop();
         .               }
         .           
         .               /// Removes all elements from the table without freeing the backing memory.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn clear(&mut self) {
         .                   // Ensure that the table is reset even if one of the drops panic
         .                   let mut self_ = guard(self, |self_| self_.clear_no_drop());
         .                   unsafe {
         1 ( 0.00%)              self_.drop_elements();
         .                   }
         .               }
         .           
         7 ( 0.00%)      unsafe fn drop_elements(&mut self) {
    28,154 ( 0.00%)          if mem::needs_drop::<T>() && !self.is_empty() {
         .                       for item in self.iter() {
         .                           item.drop();
         .                       }
         .                   }
         8 ( 0.00%)      }
         .           
         .               /// Shrinks the table to fit `max(self.len(), min_size)` elements.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn shrink_to(&mut self, min_size: usize, hasher: impl Fn(&T) -> u64) {
         .                   // Calculate the minimal number of elements that we need to reserve
         .                   // space for.
         .                   let min_size = usize::max(self.table.items, min_size);
         .                   if min_size == 0 {
-- line 615 ----------------------------------------
-- line 642 ----------------------------------------
         .                       }
         .                   }
         .               }
         .           
         .               /// Ensures that at least `additional` items can be inserted into the table
         .               /// without reallocation.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn reserve(&mut self, additional: usize, hasher: impl Fn(&T) -> u64) {
   694,606 ( 0.02%)          if additional > self.table.growth_left {
         .                       // Avoid `Result::unwrap_or_else` because it bloats LLVM IR.
   515,545 ( 0.01%)              if self
         .                           .reserve_rehash(additional, hasher, Fallibility::Infallible)
         .                           .is_err()
         .                       {
         .                           unsafe { hint::unreachable_unchecked() }
         .                       }
         .                   }
         .               }
         .           
-- line 660 ----------------------------------------
-- line 671 ----------------------------------------
         .                   } else {
         .                       Ok(())
         .                   }
         .               }
         .           
         .               /// Out-of-line slow path for `reserve` and `try_reserve`.
         .               #[cold]
         .               #[inline(never)]
 1,182,284 ( 0.03%)      fn reserve_rehash(
         .                   &mut self,
         .                   additional: usize,
         .                   hasher: impl Fn(&T) -> u64,
         .                   fallibility: Fallibility,
         .               ) -> Result<(), TryReserveError> {
         .                   unsafe {
         .                       self.table.reserve_rehash_inner(
         .                           additional,
-- line 687 ----------------------------------------
-- line 690 ----------------------------------------
         .                           TableLayout::new::<T>(),
         .                           if mem::needs_drop::<T>() {
         .                               Some(mem::transmute(ptr::drop_in_place::<T> as unsafe fn(*mut T)))
         .                           } else {
         .                               None
         .                           },
         .                       )
         .                   }
   830,808 ( 0.02%)      }
         .           
         .               /// Allocates a new table of a different size and moves the contents of the
         .               /// current table into it.
         .               fn resize(
         .                   &mut self,
         .                   capacity: usize,
         .                   hasher: impl Fn(&T) -> u64,
         .                   fallibility: Fallibility,
-- line 706 ----------------------------------------
-- line 714 ----------------------------------------
         .                       )
         .                   }
         .               }
         .           
         .               /// Inserts a new element into the table, and returns its raw bucket.
         .               ///
         .               /// This does not check if the given element already exists in the table.
         .               #[cfg_attr(feature = "inline-more", inline)]
 4,539,734 ( 0.11%)      pub fn insert(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> Bucket<T> {
         .                   unsafe {
         .                       let mut index = self.table.find_insert_slot(hash);
         .           
         .                       // We can avoid growing the table once we have reached our load
         .                       // factor if we are replacing a tombstone. This works since the
         .                       // number of EMPTY slots does not change in this case.
    12,767 ( 0.00%)              let old_ctrl = *self.table.ctrl(index);
 3,243,938 ( 0.08%)              if unlikely(self.table.growth_left == 0 && special_is_empty(old_ctrl)) {
         .                           self.reserve(1, hasher);
         .                           index = self.table.find_insert_slot(hash);
         .                       }
         .           
         .                       self.table.record_item_insert_at(index, old_ctrl, hash);
         .           
         .                       let bucket = self.bucket(index);
         2 ( 0.00%)              bucket.write(value);
         .                       bucket
         .                   }
 3,344,298 ( 0.08%)      }
         .           
         .               /// Attempts to insert a new element without growing the table and return its raw bucket.
         .               ///
         .               /// Returns an `Err` containing the given element if inserting it would require growing the
         .               /// table.
         .               ///
         .               /// This does not check if the given element already exists in the table.
         .               #[cfg(feature = "raw")]
-- line 749 ----------------------------------------
-- line 760 ----------------------------------------
         .                       }
         .                   }
         .               }
         .           
         .               /// Inserts a new element into the table, and returns a mutable reference to it.
         .               ///
         .               /// This does not check if the given element already exists in the table.
         .               #[cfg_attr(feature = "inline-more", inline)]
 1,139,672 ( 0.03%)      pub fn insert_entry(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> &mut T {
       424 ( 0.00%)          unsafe { self.insert(hash, value, hasher).as_mut() }
   854,754 ( 0.02%)      }
         .           
         .               /// Inserts a new element into the table, without growing the table.
         .               ///
         .               /// There must be enough space in the table to insert the new element.
         .               ///
         .               /// This does not check if the given element already exists in the table.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[cfg(any(feature = "raw", feature = "rustc-internal-api"))]
     2,586 ( 0.00%)      pub unsafe fn insert_no_grow(&mut self, hash: u64, value: T) -> Bucket<T> {
   656,622 ( 0.02%)          let (index, old_ctrl) = self.table.prepare_insert_slot(hash);
    21,048 ( 0.00%)          let bucket = self.table.bucket(index);
         .           
         .                   // If we are replacing a DELETED entry then we don't need to update
         .                   // the load counter.
 1,359,227 ( 0.03%)          self.table.growth_left -= special_is_empty(old_ctrl) as usize;
         .           
         .                   bucket.write(value);
 1,089,734 ( 0.03%)          self.table.items += 1;
         .                   bucket
     5,163 ( 0.00%)      }
         .           
         .               /// Temporary removes a bucket, applying the given function to the removed
         .               /// element and optionally put back the returned value in the same bucket.
         .               ///
         .               /// Returns `true` if the bucket still contains an element
         .               ///
         .               /// This does not check if the given bucket is actually occupied.
         .               #[cfg_attr(feature = "inline-more", inline)]
-- line 798 ----------------------------------------
-- line 813 ----------------------------------------
         .                       true
         .                   } else {
         .                       false
         .                   }
         .               }
         .           
         .               /// Searches for an element in the table.
         .               #[inline]
    10,448 ( 0.00%)      pub fn find(&self, hash: u64, mut eq: impl FnMut(&T) -> bool) -> Option<Bucket<T>> {
    16,452 ( 0.00%)          let result = self.table.find_inner(hash, &mut |index| unsafe {
    65,402 ( 0.00%)              eq(self.bucket(index).as_ref())
     7,829 ( 0.00%)          });
         .           
         .                   // Avoid `Option::map` because it bloats LLVM IR.
         .                   match result {
     2,051 ( 0.00%)              Some(index) => Some(unsafe { self.bucket(index) }),
         .                       None => None,
         .                   }
    10,448 ( 0.00%)      }
         .           
         .               /// Gets a reference to an element in the table.
         .               #[inline]
         .               pub fn get(&self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&T> {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
    40,967 ( 0.00%)          match self.find(hash, eq) {
         .                       Some(bucket) => Some(unsafe { bucket.as_ref() }),
         .                       None => None,
         .                   }
         .               }
         .           
         .               /// Gets a mutable reference to an element in the table.
         .               #[inline]
         .               pub fn get_mut(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&mut T> {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
     7,279 ( 0.00%)          match self.find(hash, eq) {
         .                       Some(bucket) => Some(unsafe { bucket.as_mut() }),
         .                       None => None,
         .                   }
         .               }
         .           
         .               /// Attempts to get mutable references to `N` entries in the table at once.
         .               ///
         .               /// Returns an array of length `N` with the results of each query.
-- line 855 ----------------------------------------
-- line 920 ----------------------------------------
         .               #[inline]
         .               pub fn len(&self) -> usize {
         .                   self.table.items
         .               }
         .           
         .               /// Returns `true` if the table contains no elements.
         .               #[inline]
         .               pub fn is_empty(&self) -> bool {
 1,826,707 ( 0.04%)          self.len() == 0
         .               }
         .           
         .               /// Returns the number of buckets in the table.
         .               #[inline]
         .               pub fn buckets(&self) -> usize {
         .                   self.table.bucket_mask + 1
         .               }
         .           
         .               /// Returns an iterator over every element in the table. It is up to
         .               /// the caller to ensure that the `RawTable` outlives the `RawIter`.
         .               /// Because we cannot make the `next` method unsafe on the `RawIter`
         .               /// struct, we have to make the `iter` method unsafe.
         .               #[inline]
         .               pub unsafe fn iter(&self) -> RawIter<T> {
         1 ( 0.00%)          let data = Bucket::from_base_index(self.data_end(), 0);
         .                   RawIter {
         .                       iter: RawIterRange::new(self.table.ctrl.as_ptr(), data, self.table.buckets()),
   231,930 ( 0.01%)              items: self.table.items,
         .                   }
         .               }
         .           
         .               /// Returns an iterator over occupied buckets that could match a given hash.
         .               ///
         .               /// `RawTable` only stores 7 bits of the hash value, so this iterator may
         .               /// return items that have a hash value different than the one provided. You
         .               /// should always validate the returned values before using them.
-- line 954 ----------------------------------------
-- line 995 ----------------------------------------
         .               /// Iteration starts at the provided iterator's current location.
         .               ///
         .               /// It is up to the caller to ensure that the iterator is valid for this
         .               /// `RawTable` and covers all items that remain in the table.
         .               pub unsafe fn into_iter_from(self, iter: RawIter<T>) -> RawIntoIter<T, A> {
         .                   debug_assert_eq!(iter.len(), self.len());
         .           
         .                   let alloc = self.table.alloc.clone();
    21,628 ( 0.00%)          let allocation = self.into_allocation();
    16,221 ( 0.00%)          RawIntoIter {
    27,035 ( 0.00%)              iter,
         .                       allocation,
         .                       marker: PhantomData,
         .                       alloc,
         .                   }
         .               }
         .           
         .               /// Converts the table into a raw allocation. The contents of the table
         .               /// should be dropped using a `RawIter` before freeing the allocation.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub(crate) fn into_allocation(self) -> Option<(NonNull<u8>, Layout)> {
     9,884 ( 0.00%)          let alloc = if self.table.is_empty_singleton() {
         .                       None
         .                   } else {
         .                       // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
         .                       let (layout, ctrl_offset) = match calculate_layout::<T>(self.table.buckets()) {
         .                           Some(lco) => lco,
         .                           None => unsafe { hint::unreachable_unchecked() },
         .                       };
         .                       Some((
     1,488 ( 0.00%)                  unsafe { NonNull::new_unchecked(self.table.ctrl.as_ptr().sub(ctrl_offset)) },
         .                           layout,
         .                       ))
         .                   };
         .                   mem::forget(self);
         .                   alloc
         .               }
         .           }
         .           
-- line 1033 ----------------------------------------
-- line 1042 ----------------------------------------
         .               T: Sync,
         .               A: Sync,
         .           {
         .           }
         .           
         .           impl<A> RawTableInner<A> {
         .               #[inline]
         .               const fn new_in(alloc: A) -> Self {
 1,551,913 ( 0.04%)          Self {
         .                       // Be careful to cast the entire slice to a raw pointer.
         .                       ctrl: unsafe { NonNull::new_unchecked(Group::static_empty() as *const _ as *mut u8) },
         .                       bucket_mask: 0,
         .                       items: 0,
         .                       growth_left: 0,
         .                       alloc,
         .                   }
         .               }
         .           }
         .           
         .           impl<A: Allocator + Clone> RawTableInner<A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
 1,117,515 ( 0.03%)      unsafe fn new_uninitialized(
         .                   alloc: A,
         .                   table_layout: TableLayout,
         .                   buckets: usize,
         .                   fallibility: Fallibility,
         .               ) -> Result<Self, TryReserveError> {
         .                   debug_assert!(buckets.is_power_of_two());
         .           
         .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
-- line 1071 ----------------------------------------
-- line 1078 ----------------------------------------
         .                   // exceed `isize::MAX`. We can skip this check on 64-bit systems since
         .                   // such allocations will never succeed anyways.
         .                   //
         .                   // This mirrors what Vec does in the standard library.
         .                   if mem::size_of::<usize>() < 8 && layout.size() > isize::MAX as usize {
         .                       return Err(fallibility.capacity_overflow());
         .                   }
         .           
   251,750 ( 0.01%)          let ptr: NonNull<u8> = match do_alloc(&alloc, layout) {
         .                       Ok(block) => block.cast(),
         .                       Err(_) => return Err(fallibility.alloc_err(layout)),
         .                   };
         .           
         .                   let ctrl = NonNull::new_unchecked(ptr.as_ptr().add(ctrl_offset));
   614,178 ( 0.01%)          Ok(Self {
         .                       ctrl,
   249,310 ( 0.01%)              bucket_mask: buckets - 1,
         .                       items: 0,
         .                       growth_left: bucket_mask_to_capacity(buckets - 1),
         .                       alloc,
         .                   })
   813,252 ( 0.02%)      }
         .           
         .               #[inline]
    32,672 ( 0.00%)      fn fallible_with_capacity(
         .                   alloc: A,
         .                   table_layout: TableLayout,
         .                   capacity: usize,
         .                   fallibility: Fallibility,
         .               ) -> Result<Self, TryReserveError> {
     8,930 ( 0.00%)          if capacity == 0 {
     8,076 ( 0.00%)              Ok(Self::new_in(alloc))
         .                   } else {
         .                       unsafe {
         .                           let buckets =
         .                               capacity_to_buckets(capacity).ok_or_else(|| fallibility.capacity_overflow())?;
         .           
   507,459 ( 0.01%)                  let result = Self::new_uninitialized(alloc, table_layout, buckets, fallibility)?;
         .                           result.ctrl(0).write_bytes(EMPTY, result.num_ctrl_bytes());
         .           
    15,880 ( 0.00%)                  Ok(result)
         .                       }
         .                   }
    32,672 ( 0.00%)      }
         .           
         .               /// Searches for an empty or deleted bucket which is suitable for inserting
         .               /// a new element and sets the hash for that slot.
         .               ///
         .               /// There must be at least 1 empty bucket in the table.
         .               #[inline]
   235,316 ( 0.01%)      unsafe fn prepare_insert_slot(&self, hash: u64) -> (usize, u8) {
         .                   let index = self.find_insert_slot(hash);
   235,316 ( 0.01%)          let old_ctrl = *self.ctrl(index);
         .                   self.set_ctrl_h2(index, hash);
         .                   (index, old_ctrl)
   470,632 ( 0.01%)      }
         .           
         .               /// Searches for an empty or deleted bucket which is suitable for inserting
         .               /// a new element.
         .               ///
         .               /// There must be at least 1 empty bucket in the table.
         .               #[inline]
         .               fn find_insert_slot(&self, hash: u64) -> usize {
         .                   let mut probe_seq = self.probe_seq(hash);
         .                   loop {
         .                       unsafe {
         .                           let group = Group::load(self.ctrl(probe_seq.pos));
 2,168,227 ( 0.05%)                  if let Some(bit) = group.match_empty_or_deleted().lowest_set_bit() {
 6,363,023 ( 0.15%)                      let result = (probe_seq.pos + bit) & self.bucket_mask;
         .           
         .                               // In tables smaller than the group width, trailing control
         .                               // bytes outside the range of the table are filled with
         .                               // EMPTY entries. These will unfortunately trigger a
         .                               // match, but once masked may point to a full bucket that
         .                               // is already occupied. We detect this situation here and
         .                               // perform a second scan starting at the beginning of the
         .                               // table. This second scan is guaranteed to find an empty
         .                               // slot (due to the load factor) before hitting the trailing
         .                               // control bytes (containing EMPTY).
 2,930,556 ( 0.07%)                      if unlikely(is_full(*self.ctrl(result))) {
         .                                   debug_assert!(self.bucket_mask < Group::WIDTH);
         .                                   debug_assert_ne!(probe_seq.pos, 0);
         .                                   return Group::load_aligned(self.ctrl(0))
         .                                       .match_empty_or_deleted()
         .                                       .lowest_set_bit_nonzero();
         .                               }
         .           
         .                               return result;
-- line 1165 ----------------------------------------
-- line 1171 ----------------------------------------
         .           
         .               /// Searches for an element in the table. This uses dynamic dispatch to reduce the amount of
         .               /// code generated, but it is eliminated by LLVM optimizations.
         .               #[inline]
         .               fn find_inner(&self, hash: u64, eq: &mut dyn FnMut(usize) -> bool) -> Option<usize> {
         .                   let h2_hash = h2(hash);
         .                   let mut probe_seq = self.probe_seq(hash);
         .           
   164,932 ( 0.00%)          loop {
         .                       let group = unsafe { Group::load(self.ctrl(probe_seq.pos)) };
         .           
 6,955,391 ( 0.16%)              for bit in group.match_byte(h2_hash) {
13,280,030 ( 0.31%)                  let index = (probe_seq.pos + bit) & self.bucket_mask;
         .           
 8,059,031 ( 0.19%)                  if likely(eq(index)) {
         .                               return Some(index);
         .                           }
         .                       }
         .           
 2,194,255 ( 0.05%)              if likely(group.match_empty().any_bit_set()) {
         .                           return None;
         .                       }
         .           
         .                       probe_seq.move_next(self.bucket_mask);
         .                   }
         .               }
         .           
         .               #[allow(clippy::mut_mut)]
-- line 1198 ----------------------------------------
-- line 1225 ----------------------------------------
         .                   Bucket::from_base_index(self.data_end(), index)
         .               }
         .           
         .               #[inline]
         .               unsafe fn bucket_ptr(&self, index: usize, size_of: usize) -> *mut u8 {
         .                   debug_assert_ne!(self.bucket_mask, 0);
         .                   debug_assert!(index < self.buckets());
         .                   let base: *mut u8 = self.data_end().as_ptr();
 7,794,856 ( 0.18%)          base.sub((index + 1) * size_of)
         .               }
         .           
         .               #[inline]
         .               unsafe fn data_end<T>(&self) -> NonNull<T> {
         .                   NonNull::new_unchecked(self.ctrl.as_ptr().cast())
         .               }
         .           
         .               /// Returns an iterator-like object for a probe sequence on the table.
         .               ///
         .               /// This iterator never terminates, but is guaranteed to visit each bucket
         .               /// group exactly once. The loop using `probe_seq` must terminate upon
         .               /// reaching a group containing an empty bucket.
         .               #[inline]
         .               fn probe_seq(&self, hash: u64) -> ProbeSeq {
         .                   ProbeSeq {
38,118,524 ( 0.89%)              pos: h1(hash) & self.bucket_mask,
         .                       stride: 0,
         .                   }
         .               }
         .           
         .               /// Returns the index of a bucket for which a value must be inserted if there is enough rooom
         .               /// in the table, otherwise returns error
         .               #[cfg(feature = "raw")]
         .               #[inline]
-- line 1257 ----------------------------------------
-- line 1263 ----------------------------------------
         .                   } else {
         .                       self.record_item_insert_at(index, old_ctrl, hash);
         .                       Ok(index)
         .                   }
         .               }
         .           
         .               #[inline]
         .               unsafe fn record_item_insert_at(&mut self, index: usize, old_ctrl: u8, hash: u64) {
 4,052,280 ( 0.09%)          self.growth_left -= special_is_empty(old_ctrl) as usize;
         .                   self.set_ctrl_h2(index, hash);
 3,241,824 ( 0.08%)          self.items += 1;
         .               }
         .           
         .               #[inline]
         .               fn is_in_same_group(&self, i: usize, new_i: usize, hash: u64) -> bool {
         .                   let probe_seq_pos = self.probe_seq(hash).pos;
         .                   let probe_index =
         .                       |pos: usize| (pos.wrapping_sub(probe_seq_pos) & self.bucket_mask) / Group::WIDTH;
         .                   probe_index(i) == probe_index(new_i)
-- line 1281 ----------------------------------------
-- line 1312 ----------------------------------------
         .                   // replicate the buckets at the end of the trailing group. For example
         .                   // with 2 buckets and a group size of 4, the control bytes will look
         .                   // like this:
         .                   //
         .                   //     Real    |             Replicated
         .                   // ---------------------------------------------
         .                   // | [A] | [B] | [EMPTY] | [EMPTY] | [A] | [B] |
         .                   // ---------------------------------------------
 6,068,121 ( 0.14%)          let index2 = ((index.wrapping_sub(Group::WIDTH)) & self.bucket_mask) + Group::WIDTH;
         .           
 2,022,707 ( 0.05%)          *self.ctrl(index) = ctrl;
 2,025,106 ( 0.05%)          *self.ctrl(index2) = ctrl;
         .               }
         .           
         .               /// Returns a pointer to a control byte.
         .               #[inline]
         .               unsafe fn ctrl(&self, index: usize) -> *mut u8 {
         .                   debug_assert!(index < self.num_ctrl_bytes());
         .                   self.ctrl.as_ptr().add(index)
         .               }
         .           
         .               #[inline]
         .               fn buckets(&self) -> usize {
   706,500 ( 0.02%)          self.bucket_mask + 1
         .               }
         .           
         .               #[inline]
         .               fn num_ctrl_bytes(&self) -> usize {
   678,405 ( 0.02%)          self.bucket_mask + 1 + Group::WIDTH
         .               }
         .           
         .               #[inline]
         .               fn is_empty_singleton(&self) -> bool {
 2,838,550 ( 0.07%)          self.bucket_mask == 0
         .               }
         .           
         .               #[allow(clippy::mut_mut)]
         .               #[inline]
         .               unsafe fn prepare_resize(
         .                   &self,
         .                   table_layout: TableLayout,
         .                   capacity: usize,
         .                   fallibility: Fallibility,
         .               ) -> Result<crate::scopeguard::ScopeGuard<Self, impl FnMut(&mut Self)>, TryReserveError> {
         .                   debug_assert!(self.items <= capacity);
         .           
         .                   // Allocate and initialize the new table.
     2,667 ( 0.00%)          let mut new_table = RawTableInner::fallible_with_capacity(
         .                       self.alloc.clone(),
         .                       table_layout,
         .                       capacity,
         .                       fallibility,
         .                   )?;
   320,830 ( 0.01%)          new_table.growth_left -= self.items;
         .                   new_table.items = self.items;
         .           
         .                   // The hash function may panic, in which case we simply free the new
         .                   // table without dropping any elements that may have been copied into
         .                   // it.
         .                   //
         .                   // This guard is also used to free the old table on success, see
         .                   // the comment at the bottom of this function.
         .                   Ok(guard(new_table, move |self_| {
   145,069 ( 0.00%)              if !self_.is_empty_singleton() {
         .                           self_.free_buckets(table_layout);
         .                       }
         .                   }))
         .               }
         .           
         .               /// Reserves or rehashes to make room for `additional` more elements.
         .               ///
         .               /// This uses dynamic dispatch to reduce the amount of
-- line 1383 ----------------------------------------
-- line 1388 ----------------------------------------
         .                   &mut self,
         .                   additional: usize,
         .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
         .                   fallibility: Fallibility,
         .                   layout: TableLayout,
         .                   drop: Option<fn(*mut u8)>,
         .               ) -> Result<(), TryReserveError> {
         .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
   290,139 ( 0.01%)          let new_items = match self.items.checked_add(additional) {
         .                       Some(new_items) => new_items,
         .                       None => return Err(fallibility.capacity_overflow()),
         .                   };
   290,138 ( 0.01%)          let full_capacity = bucket_mask_to_capacity(self.bucket_mask);
   612,214 ( 0.01%)          if new_items <= full_capacity / 2 {
         .                       // Rehash in-place without re-allocating if we have plenty of spare
         .                       // capacity that is locked up due to DELETED entries.
         .                       self.rehash_in_place(hasher, layout.size, drop);
         .                       Ok(())
         .                   } else {
         .                       // Otherwise, conservatively resize to at least the next size up
         .                       // to avoid churning deletes into frequent rehashes.
         .                       self.resize_inner(
   145,069 ( 0.00%)                  usize::max(new_items, full_capacity + 1),
         .                           hasher,
         .                           fallibility,
         .                           layout,
         .                       )
         .                   }
         .               }
         .           
         .               /// Allocates a new table of a different size and moves the contents of the
-- line 1418 ----------------------------------------
-- line 1424 ----------------------------------------
         .               #[inline(always)]
         .               unsafe fn resize_inner(
         .                   &mut self,
         .                   capacity: usize,
         .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
         .                   fallibility: Fallibility,
         .                   layout: TableLayout,
         .               ) -> Result<(), TryReserveError> {
     6,338 ( 0.00%)          let mut new_table = self.prepare_resize(layout, capacity, fallibility)?;
         .           
         .                   // Copy all elements to the new table.
         .                   for i in 0..self.buckets() {
 1,229,181 ( 0.03%)              if !is_full(*self.ctrl(i)) {
         .                           continue;
         .                       }
         .           
         .                       // This may panic.
         .                       let hash = hasher(self, i);
         .           
         .                       // We can use a simpler version of insert() here since:
         .                       // - there are no DELETED entries.
-- line 1444 ----------------------------------------
-- line 1454 ----------------------------------------
         .                   }
         .           
         .                   // We successfully copied all elements without panicking. Now replace
         .                   // self with the new table. The old table will have its memory freed but
         .                   // the items will not be dropped (since they have been moved into the
         .                   // new table).
         .                   mem::swap(self, &mut new_table);
         .           
   145,069 ( 0.00%)          Ok(())
         .               }
         .           
         .               /// Rehashes the contents of the table in place (i.e. without changing the
         .               /// allocation).
         .               ///
         .               /// If `hasher` panics then some the table's contents may be lost.
         .               ///
         .               /// This uses dynamic dispatch to reduce the amount of
-- line 1470 ----------------------------------------
-- line 1554 ----------------------------------------
         .               #[inline]
         .               unsafe fn free_buckets(&mut self, table_layout: TableLayout) {
         .                   // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
         .                   let (layout, ctrl_offset) = match table_layout.calculate_layout_for(self.buckets()) {
         .                       Some(lco) => lco,
         .                       None => hint::unreachable_unchecked(),
         .                   };
         .                   self.alloc.deallocate(
    95,276 ( 0.00%)              NonNull::new_unchecked(self.ctrl.as_ptr().sub(ctrl_offset)),
         .                       layout,
         .                   );
         .               }
         .           
         .               /// Marks all table buckets as empty without dropping their contents.
         .               #[inline]
         .               fn clear_no_drop(&mut self) {
    27,847 ( 0.00%)          if !self.is_empty_singleton() {
         .                       unsafe {
         .                           self.ctrl(0).write_bytes(EMPTY, self.num_ctrl_bytes());
         .                       }
         .                   }
    31,576 ( 0.00%)          self.items = 0;
    27,847 ( 0.00%)          self.growth_left = bucket_mask_to_capacity(self.bucket_mask);
         .               }
         .           
         .               #[inline]
         .               unsafe fn erase(&mut self, index: usize) {
         .                   debug_assert!(is_full(*self.ctrl(index)));
   191,137 ( 0.00%)          let index_before = index.wrapping_sub(Group::WIDTH) & self.bucket_mask;
         .                   let empty_before = Group::load(self.ctrl(index_before)).match_empty();
         .                   let empty_after = Group::load(self.ctrl(index)).match_empty();
         .           
         .                   // If we are inside a continuous block of Group::WIDTH full or deleted
         .                   // cells then a probe window may have seen a full block when trying to
         .                   // insert. We therefore need to keep that block non-empty so that
         .                   // lookups will continue searching to the next probe window.
         .                   //
         .                   // Note that in this context `leading_zeros` refers to the bytes at the
         .                   // end of a group, while `trailing_zeros` refers to the bytes at the
         .                   // beginning of a group.
   764,548 ( 0.02%)          let ctrl = if empty_before.leading_zeros() + empty_after.trailing_zeros() >= Group::WIDTH {
         .                       DELETED
         .                   } else {
   942,110 ( 0.02%)              self.growth_left += 1;
         .                       EMPTY
         .                   };
         .                   self.set_ctrl(index, ctrl);
   764,548 ( 0.02%)          self.items -= 1;
         .               }
         .           }
         .           
         .           impl<T: Clone, A: Allocator + Clone> Clone for RawTable<T, A> {
       856 ( 0.00%)      fn clone(&self) -> Self {
       273 ( 0.00%)          if self.table.is_empty_singleton() {
         .                       Self::new_in(self.table.alloc.clone())
         .                   } else {
         .                       unsafe {
         .                           let mut new_table = ManuallyDrop::new(
         .                               // Avoid `Result::ok_or_else` because it bloats LLVM IR.
         .                               match Self::new_uninitialized(
         .                                   self.table.alloc.clone(),
         .                                   self.table.buckets(),
-- line 1615 ----------------------------------------
-- line 1624 ----------------------------------------
         .                               // We need to free the memory allocated for the new table.
         .                               new_table.free_buckets();
         .                           });
         .           
         .                           // Return the newly created table.
         .                           ManuallyDrop::into_inner(new_table)
         .                       }
         .                   }
       963 ( 0.00%)      }
         .           
         .               fn clone_from(&mut self, source: &Self) {
         .                   if source.table.is_empty_singleton() {
         .                       *self = Self::new_in(self.table.alloc.clone());
         .                   } else {
         .                       unsafe {
         .                           // First, drop all our elements without clearing the control bytes.
         .                           self.drop_elements();
-- line 1640 ----------------------------------------
-- line 1687 ----------------------------------------
         .                       .table
         .                       .ctrl(0)
         .                       .copy_to_nonoverlapping(self.table.ctrl(0), self.table.num_ctrl_bytes());
         .                   source
         .                       .data_start()
         .                       .copy_to_nonoverlapping(self.data_start(), self.table.buckets());
         .           
         .                   self.table.items = source.table.items;
       240 ( 0.00%)          self.table.growth_left = source.table.growth_left;
         .               }
         .           }
         .           
         .           impl<T: Clone, A: Allocator + Clone> RawTable<T, A> {
         .               /// Common code for clone and clone_from. Assumes `self.buckets() == source.buckets()`.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               unsafe fn clone_from_impl(&mut self, source: &Self, mut on_panic: impl FnMut(&mut Self)) {
         .                   // Copy the control bytes unchanged. We do this in a single pass
-- line 1703 ----------------------------------------
-- line 1790 ----------------------------------------
         .               fn default() -> Self {
         .                   Self::new_in(Default::default())
         .               }
         .           }
         .           
         .           #[cfg(feature = "nightly")]
         .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawTable<T, A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
 1,355,523 ( 0.03%)      fn drop(&mut self) {
 1,206,704 ( 0.03%)          if !self.table.is_empty_singleton() {
         .                       unsafe {
         .                           self.drop_elements();
         .                           self.free_buckets();
         .                       }
         .                   }
 1,463,256 ( 0.03%)      }
         .           }
         .           #[cfg(not(feature = "nightly"))]
         .           impl<T, A: Allocator + Clone> Drop for RawTable<T, A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn drop(&mut self) {
         .                   if !self.table.is_empty_singleton() {
         .                       unsafe {
         .                           self.drop_elements();
-- line 1813 ----------------------------------------
-- line 1817 ----------------------------------------
         .               }
         .           }
         .           
         .           impl<T, A: Allocator + Clone> IntoIterator for RawTable<T, A> {
         .               type Item = T;
         .               type IntoIter = RawIntoIter<T, A>;
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
    21,628 ( 0.00%)      fn into_iter(self) -> RawIntoIter<T, A> {
         .                   unsafe {
         .                       let iter = self.iter();
         .                       self.into_iter_from(iter)
         .                   }
    27,035 ( 0.00%)      }
         .           }
         .           
         .           /// Iterator over a sub-range of a table. Unlike `RawIter` this iterator does
         .           /// not track an item count.
         .           pub(crate) struct RawIterRange<T> {
         .               // Mask of full buckets in the current group. Bits are cleared from this
         .               // mask as each element is processed.
         .               current_group: BitMask,
-- line 1838 ----------------------------------------
-- line 1934 ----------------------------------------
         .           
         .           impl<T> Iterator for RawIterRange<T> {
         .               type Item = Bucket<T>;
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn next(&mut self) -> Option<Bucket<T>> {
         .                   unsafe {
         .                       loop {
   478,055 ( 0.01%)                  if let Some(index) = self.current_group.lowest_set_bit() {
    82,015 ( 0.00%)                      self.current_group = self.current_group.remove_lowest_bit();
   138,137 ( 0.00%)                      return Some(self.data.next_n(index));
         .                           }
         .           
   435,759 ( 0.01%)                  if self.next_ctrl >= self.end {
         .                               return None;
         .                           }
         .           
         .                           // We might read past self.end up to the next group boundary,
         .                           // but this is fine because it only occurs on tables smaller
         .                           // than the group size where the trailing control bytes are all
         .                           // EMPTY. On larger tables self.end is guaranteed to be aligned
         .                           // to the group size (since tables are power-of-two sized).
    10,011 ( 0.00%)                  self.current_group = Group::load_aligned(self.next_ctrl).match_full();
    12,010 ( 0.00%)                  self.data = self.data.next_n(Group::WIDTH);
    16,129 ( 0.00%)                  self.next_ctrl = self.next_ctrl.add(Group::WIDTH);
         .                       }
         .                   }
         .               }
         .           
         .               #[inline]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
         .                   // We don't have an item count, so just guess based on the range size.
         .                   (
-- line 1966 ----------------------------------------
-- line 2102 ----------------------------------------
         .                           }
         .                       } else {
         .                           // We must have already iterated past the removed item.
         .                       }
         .                   }
         .               }
         .           
         .               unsafe fn drop_elements(&mut self) {
     2,964 ( 0.00%)          if mem::needs_drop::<T>() && self.len() != 0 {
         .                       for item in self {
         .                           item.drop();
         .                       }
         .                   }
         .               }
         .           }
         .           
         .           impl<T> Clone for RawIter<T> {
-- line 2118 ----------------------------------------
-- line 2124 ----------------------------------------
         .                   }
         .               }
         .           }
         .           
         .           impl<T> Iterator for RawIter<T> {
         .               type Item = Bucket<T>;
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
    95,912 ( 0.00%)      fn next(&mut self) -> Option<Bucket<T>> {
   213,792 ( 0.01%)          if let Some(b) = self.iter.next() {
   694,029 ( 0.02%)              self.items -= 1;
         .                       Some(b)
         .                   } else {
         .                       // We don't check against items == 0 here to allow the
         .                       // compiler to optimize away the item count entirely if the
         .                       // iterator length is never queried.
         .                       debug_assert_eq!(self.items, 0);
         .                       None
         .                   }
   191,824 ( 0.00%)      }
         .           
         .               #[inline]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
         .                   (self.items, Some(self.items))
         .               }
         .           }
         .           
         .           impl<T> ExactSizeIterator for RawIter<T> {}
-- line 2151 ----------------------------------------
-- line 2177 ----------------------------------------
         .               T: Sync,
         .               A: Sync,
         .           {
         .           }
         .           
         .           #[cfg(feature = "nightly")]
         .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
     7,608 ( 0.00%)      fn drop(&mut self) {
         .                   unsafe {
         .                       // Drop all remaining elements
         .                       self.iter.drop_elements();
         .           
         .                       // Free the table
    46,591 ( 0.00%)              if let Some((ptr, layout)) = self.allocation {
         .                           self.alloc.deallocate(ptr, layout);
         .                       }
         .                   }
       568 ( 0.00%)      }
         .           }
         .           #[cfg(not(feature = "nightly"))]
         .           impl<T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn drop(&mut self) {
         .                   unsafe {
         .                       // Drop all remaining elements
         .                       self.iter.drop_elements();
-- line 2203 ----------------------------------------
-- line 2209 ----------------------------------------
         .                   }
         .               }
         .           }
         .           
         .           impl<T, A: Allocator + Clone> Iterator for RawIntoIter<T, A> {
         .               type Item = T;
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
     1,830 ( 0.00%)      fn next(&mut self) -> Option<T> {
       879 ( 0.00%)          unsafe { Some(self.iter.next()?.read()) }
     3,660 ( 0.00%)      }
         .           
         .               #[inline]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
         3 ( 0.00%)          self.iter.size_hint()
         .               }
         .           }
         .           
         .           impl<T, A: Allocator + Clone> ExactSizeIterator for RawIntoIter<T, A> {}
         .           impl<T, A: Allocator + Clone> FusedIterator for RawIntoIter<T, A> {}
         .           
         .           /// Iterator which consumes elements without freeing the table storage.
         .           pub struct RawDrain<'a, T, A: Allocator + Clone = Global> {
-- line 2231 ----------------------------------------
-- line 2259 ----------------------------------------
         .           where
         .               T: Sync,
         .               A: Sync,
         .           {
         .           }
         .           
         .           impl<T, A: Allocator + Clone> Drop for RawDrain<'_, T, A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
        80 ( 0.00%)      fn drop(&mut self) {
         .                   unsafe {
         .                       // Drop all remaining elements. Note that this may panic.
         .                       self.iter.drop_elements();
         .           
         .                       // Reset the contents of the table now that all elements have been
         .                       // dropped.
         .                       self.table.clear_no_drop();
         .           
         .                       // Move the now empty table back to its original location.
        10 ( 0.00%)              self.orig_table
         .                           .as_ptr()
         .                           .copy_from_nonoverlapping(&*self.table, 1);
         .                   }
        80 ( 0.00%)      }
         .           }
         .           
         .           impl<T, A: Allocator + Clone> Iterator for RawDrain<'_, T, A> {
         .               type Item = T;
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn next(&mut self) -> Option<T> {
         .                   unsafe {
-- line 2289 ----------------------------------------

21,027,765 ( 0.49%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 108 ----------------------------------------
        .                   suppress_errors: bool,
        .               },
        .           }
        .           
        .           impl RegionckMode {
        .               /// Indicates that the MIR borrowck will repeat these region
        .               /// checks, so we should ignore errors if NLL is (unconditionally)
        .               /// enabled.
    1,016 ( 0.00%)      pub fn for_item_body(tcx: TyCtxt<'_>) -> Self {
        .                   // FIXME(Centril): Once we actually remove `::Migrate` also make
        .                   // this always `true` and then proceed to eliminate the dead code.
    1,016 ( 0.00%)          match tcx.borrowck_mode() {
        .                       // If we're on Migrate mode, report AST region errors
        .                       BorrowckMode::Migrate => RegionckMode::Erase { suppress_errors: false },
        .           
        .                       // If we're on MIR, don't report AST region errors as they should be reported by NLL
        .                       BorrowckMode::Mir => RegionckMode::Erase { suppress_errors: true },
        .                   }
    2,032 ( 0.00%)      }
        .           }
        .           
        .           /// This type contains all the things within `InferCtxt` that sit within a
        .           /// `RefCell` and are involved with taking/rolling back snapshots. Snapshot
        .           /// operations are hot enough that we want only one call to `borrow_mut` per
        .           /// call to `start_snapshot` and `rollback_to`.
        .           pub struct InferCtxtInner<'tcx> {
        .               /// Cache for projections. This cache is snapshotted along with the infcx.
-- line 134 ----------------------------------------
-- line 202 ----------------------------------------
        .               /// type instantiations (`ty::Infer`) to the actual opaque
        .               /// type (`ty::Opaque`). Used during fallback to map unconstrained
        .               /// opaque type inference variables to their corresponding
        .               /// opaque type.
        .               pub opaque_types_vars: FxHashMap<Ty<'tcx>, Ty<'tcx>>,
        .           }
        .           
        .           impl<'tcx> InferCtxtInner<'tcx> {
  110,480 ( 0.00%)      fn new() -> InferCtxtInner<'tcx> {
  751,264 ( 0.02%)          InferCtxtInner {
        .                       projection_cache: Default::default(),
        .                       type_variable_storage: type_variable::TypeVariableStorage::new(),
        .                       undo_log: InferCtxtUndoLogs::default(),
        .                       const_unification_storage: ut::UnificationTableStorage::new(),
        .                       int_unification_storage: ut::UnificationTableStorage::new(),
        .                       float_unification_storage: ut::UnificationTableStorage::new(),
   66,288 ( 0.00%)              region_constraint_storage: Some(RegionConstraintStorage::new()),
        .                       region_obligations: vec![],
        .                       opaque_types: Default::default(),
        .                       opaque_types_vars: Default::default(),
        .                   }
  132,576 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn region_obligations(&self) -> &[(hir::HirId, RegionObligation<'tcx>)] {
        .                   &self.region_obligations
        .               }
        .           
        .               #[inline]
        .               pub fn projection_cache(&mut self) -> traits::ProjectionCache<'_, 'tcx> {
    5,404 ( 0.00%)          self.projection_cache.with_log(&mut self.undo_log)
        .               }
        .           
        .               #[inline]
        .               fn type_variables(&mut self) -> type_variable::TypeVariableTable<'_, 'tcx> {
  667,061 ( 0.02%)          self.type_variable_storage.with_log(&mut self.undo_log)
        .               }
        .           
        .               #[inline]
        .               fn int_unification_table(
        .                   &mut self,
        .               ) -> ut::UnificationTable<
        .                   ut::InPlace<
        .                       ty::IntVid,
        .                       &mut ut::UnificationStorage<ty::IntVid>,
        .                       &mut InferCtxtUndoLogs<'tcx>,
        .                   >,
        .               > {
   13,464 ( 0.00%)          self.int_unification_storage.with_log(&mut self.undo_log)
        .               }
        .           
        .               #[inline]
        .               fn float_unification_table(
        .                   &mut self,
        .               ) -> ut::UnificationTable<
        .                   ut::InPlace<
        .                       ty::FloatVid,
-- line 258 ----------------------------------------
-- line 268 ----------------------------------------
        .                   &mut self,
        .               ) -> ut::UnificationTable<
        .                   ut::InPlace<
        .                       ty::ConstVid<'tcx>,
        .                       &mut ut::UnificationStorage<ty::ConstVid<'tcx>>,
        .                       &mut InferCtxtUndoLogs<'tcx>,
        .                   >,
        .               > {
    2,933 ( 0.00%)          self.const_unification_storage.with_log(&mut self.undo_log)
        .               }
        .           
        .               #[inline]
        .               pub fn unwrap_region_constraints(&mut self) -> RegionConstraintCollector<'_, 'tcx> {
  133,201 ( 0.00%)          self.region_constraint_storage
        .                       .as_mut()
        .                       .expect("region constraints already solved")
  158,598 ( 0.00%)              .with_log(&mut self.undo_log)
        .               }
        .           }
        .           
        .           pub struct InferCtxt<'a, 'tcx> {
        .               pub tcx: TyCtxt<'tcx>,
        .           
        .               /// The `DefId` of the item in whose context we are performing inference or typeck.
        .               /// It is used to check whether an opaque type use is a defining use.
-- line 292 ----------------------------------------
-- line 361 ----------------------------------------
        .               /// item we are type-checking, and just consider those names as
        .               /// part of the root universe. So this would only get incremented
        .               /// when we enter into a higher-ranked (`for<..>`) type or trait
        .               /// bound.
        .               universe: Cell<ty::UniverseIndex>,
        .           }
        .           
        .           /// See the `error_reporting` module for more details.
  249,360 ( 0.01%)  #[derive(Clone, Copy, Debug, PartialEq, Eq, TypeFoldable)]
        .           pub enum ValuePairs<'tcx> {
        .               Types(ExpectedFound<Ty<'tcx>>),
        .               Regions(ExpectedFound<ty::Region<'tcx>>),
        .               Consts(ExpectedFound<&'tcx ty::Const<'tcx>>),
        .               TraitRefs(ExpectedFound<ty::TraitRef<'tcx>>),
        .               PolyTraitRefs(ExpectedFound<ty::PolyTraitRef<'tcx>>),
        .           }
        .           
-- line 377 ----------------------------------------
-- line 383 ----------------------------------------
        .           pub struct TypeTrace<'tcx> {
        .               cause: ObligationCause<'tcx>,
        .               values: ValuePairs<'tcx>,
        .           }
        .           
        .           /// The origin of a `r1 <= r2` constraint.
        .           ///
        .           /// See `error_reporting` module for more details
  235,178 ( 0.01%)  #[derive(Clone, Debug)]
        .           pub enum SubregionOrigin<'tcx> {
        .               /// Arose from a subtyping relation
   12,765 ( 0.00%)      Subtype(Box<TypeTrace<'tcx>>),
        .           
        .               /// When casting `&'a T` to an `&'b Trait` object,
        .               /// relating `'a` to `'b`
        .               RelateObjectBound(Span),
        .           
        .               /// Some type parameter was instantiated with the given type,
        .               /// and that type must outlive some region.
    2,551 ( 0.00%)      RelateParamBound(Span, Ty<'tcx>, Option<Span>),
        .           
        .               /// The given region parameter was instantiated with a region
        .               /// that must outlive some other region.
        .               RelateRegionParamBound(Span),
        .           
        .               /// Creating a pointer `b` to contents of another reference
        .               Reborrow(Span),
        .           
        .               /// Creating a pointer `b` to contents of an upvar
        .               ReborrowUpvar(Span, ty::UpvarId),
        .           
        .               /// Data with type `Ty<'tcx>` was borrowed
    2,438 ( 0.00%)      DataBorrowed(Ty<'tcx>, Span),
        .           
        .               /// (&'a &'b T) where a >= b
    2,079 ( 0.00%)      ReferenceOutlivesReferent(Ty<'tcx>, Span),
        .           
        .               /// Comparing the signature and requirements of an impl method against
        .               /// the containing trait.
        .               CompareImplMethodObligation { span: Span, impl_item_def_id: DefId, trait_item_def_id: DefId },
        .           
        .               /// Comparing the signature and requirements of an impl associated type
        .               /// against the containing trait
        .               CompareImplTypeObligation { span: Span, impl_item_def_id: DefId, trait_item_def_id: DefId },
-- line 426 ----------------------------------------
-- line 554 ----------------------------------------
        .               defining_use_anchor: Option<LocalDefId>,
        .           }
        .           
        .           pub trait TyCtxtInferExt<'tcx> {
        .               fn infer_ctxt(self) -> InferCtxtBuilder<'tcx>;
        .           }
        .           
        .           impl<'tcx> TyCtxtInferExt<'tcx> for TyCtxt<'tcx> {
   22,096 ( 0.00%)      fn infer_ctxt(self) -> InferCtxtBuilder<'tcx> {
   66,288 ( 0.00%)          InferCtxtBuilder { tcx: self, defining_use_anchor: None, fresh_typeck_results: None }
   22,096 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> InferCtxtBuilder<'tcx> {
        .               /// Used only by `rustc_typeck` during body type-checking/inference,
        .               /// will initialize `in_progress_typeck_results` with fresh `TypeckResults`.
        .               /// Will also change the scope for opaque type defining use checks to the given owner.
   24,570 ( 0.00%)      pub fn with_fresh_in_progress_typeck_results(mut self, table_owner: LocalDefId) -> Self {
   30,030 ( 0.00%)          self.fresh_typeck_results = Some(RefCell::new(ty::TypeckResults::new(table_owner)));
   13,650 ( 0.00%)          self.with_opaque_type_inference(table_owner)
   19,110 ( 0.00%)      }
        .           
        .               /// Whenever the `InferCtxt` should be able to handle defining uses of opaque types,
        .               /// you need to call this function. Otherwise the opaque type will be treated opaquely.
        .               ///
        .               /// It is only meant to be called in two places, for typeck
        .               /// (via `with_fresh_in_progress_typeck_results`) and for the inference context used
        .               /// in mir borrowck.
    2,638 ( 0.00%)      pub fn with_opaque_type_inference(mut self, defining_use_anchor: LocalDefId) -> Self {
    1,319 ( 0.00%)          self.defining_use_anchor = Some(defining_use_anchor);
    8,098 ( 0.00%)          self
    3,957 ( 0.00%)      }
        .           
        .               /// Given a canonical value `C` as a starting point, create an
        .               /// inference context that contains each of the bound values
        .               /// within instantiated as a fresh variable. The `f` closure is
        .               /// invoked with the new infcx, along with the instantiated value
        .               /// `V` and a substitution `S`. This substitution `S` maps from
        .               /// the bound values in `C` to their instantiated values in `V`
        .               /// (in other words, `S(C) = V`).
   28,911 ( 0.00%)      pub fn enter_with_canonical<T, R>(
        .                   &mut self,
        .                   span: Span,
        .                   canonical: &Canonical<'tcx, T>,
        .                   f: impl for<'a> FnOnce(InferCtxt<'a, 'tcx>, T, CanonicalVarValues<'tcx>) -> R,
        .               ) -> R
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
        .                   self.enter(|infcx| {
   50,498 ( 0.00%)              let (value, subst) =
    4,893 ( 0.00%)                  infcx.instantiate_canonical_with_fresh_inference_vars(span, canonical);
   75,087 ( 0.00%)              f(infcx, value, subst)
        .                   })
   31,509 ( 0.00%)      }
        .           
  120,855 ( 0.00%)      pub fn enter<R>(&mut self, f: impl for<'a> FnOnce(InferCtxt<'a, 'tcx>) -> R) -> R {
   62,808 ( 0.00%)          let InferCtxtBuilder { tcx, defining_use_anchor, ref fresh_typeck_results } = *self;
        .                   let in_progress_typeck_results = fresh_typeck_results.as_ref();
  941,096 ( 0.02%)          f(InferCtxt {
        .                       tcx,
        .                       defining_use_anchor,
        .                       in_progress_typeck_results,
   22,096 ( 0.00%)              inner: RefCell::new(InferCtxtInner::new()),
        .                       lexical_region_resolutions: RefCell::new(None),
        .                       selection_cache: Default::default(),
        .                       evaluation_cache: Default::default(),
        .                       reported_trait_errors: Default::default(),
        .                       reported_closure_mismatch: Default::default(),
        .                       tainted_by_errors_flag: Cell::new(false),
   22,096 ( 0.00%)              err_count_on_creation: tcx.sess.err_count(),
        .                       in_snapshot: Cell::new(false),
        .                       skip_leak_check: Cell::new(false),
        .                       universe: Cell::new(ty::UniverseIndex::ROOT),
        .                   })
  128,448 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx, T> InferOk<'tcx, T> {
        .               pub fn unit(self) -> InferOk<'tcx, ()> {
        .                   InferOk { value: (), obligations: self.obligations }
        .               }
        .           
        .               /// Extracts `value`, registering any obligations into `fulfill_cx`.
        .               pub fn into_value_registering_obligations(
        .                   self,
        .                   infcx: &InferCtxt<'_, 'tcx>,
        .                   fulfill_cx: &mut dyn TraitEngine<'tcx>,
        .               ) -> T {
      163 ( 0.00%)          let InferOk { value, obligations } = self;
      674 ( 0.00%)          for obligation in obligations {
        .                       fulfill_cx.register_predicate_obligation(infcx, obligation);
        .                   }
        .                   value
        .               }
        .           }
        .           
        .           impl<'tcx> InferOk<'tcx, ()> {
   23,931 ( 0.00%)      pub fn into_obligations(self) -> PredicateObligations<'tcx> {
   95,724 ( 0.00%)          self.obligations
   23,931 ( 0.00%)      }
        .           }
        .           
        .           #[must_use = "once you start a snapshot, you should always consume it"]
        .           pub struct CombinedSnapshot<'a, 'tcx> {
        .               undo_snapshot: Snapshot<'tcx>,
        .               region_constraints_snapshot: RegionSnapshot,
        .               universe: ty::UniverseIndex,
        .               was_in_snapshot: bool,
-- line 662 ----------------------------------------
-- line 674 ----------------------------------------
        .                   let canonical = self.canonicalize_query((a, b), &mut OriginalQueryValues::default());
        .                   debug!("canonical consts: {:?}", &canonical.value);
        .           
        .                   self.tcx.try_unify_abstract_consts(canonical.value)
        .               }
        .           
        .               pub fn is_in_snapshot(&self) -> bool {
        .                   self.in_snapshot.get()
   42,250 ( 0.00%)      }
        .           
  289,640 ( 0.01%)      pub fn freshen<T: TypeFoldable<'tcx>>(&self, t: T) -> T {
  325,845 ( 0.01%)          t.fold_with(&mut self.freshener())
  325,845 ( 0.01%)      }
        .           
        .               /// Returns the origin of the type variable identified by `vid`, or `None`
        .               /// if this is not a type variable.
        .               ///
        .               /// No attempt is made to resolve `ty`.
      986 ( 0.00%)      pub fn type_var_origin(&'a self, ty: Ty<'tcx>) -> Option<TypeVariableOrigin> {
    1,972 ( 0.00%)          match *ty.kind() {
      493 ( 0.00%)              ty::Infer(ty::TyVar(vid)) => {
    1,972 ( 0.00%)                  Some(*self.inner.borrow_mut().type_variables().var_origin(vid))
        .                       }
        .                       _ => None,
        .                   }
    1,972 ( 0.00%)      }
        .           
   36,205 ( 0.00%)      pub fn freshener<'b>(&'b self) -> TypeFreshener<'b, 'tcx> {
        .                   freshen::TypeFreshener::new(self, false)
   36,205 ( 0.00%)      }
        .           
        .               /// Like `freshener`, but does not replace `'static` regions.
  140,277 ( 0.00%)      pub fn freshener_keep_static<'b>(&'b self) -> TypeFreshener<'b, 'tcx> {
        .                   freshen::TypeFreshener::new(self, true)
  140,277 ( 0.00%)      }
        .           
    4,728 ( 0.00%)      pub fn unsolved_variables(&self) -> Vec<Ty<'tcx>> {
    2,364 ( 0.00%)          let mut inner = self.inner.borrow_mut();
    2,364 ( 0.00%)          let mut vars: Vec<Ty<'_>> = inner
        .                       .type_variables()
        .                       .unsolved_variables()
        .                       .into_iter()
      986 ( 0.00%)              .map(|t| self.tcx.mk_ty_var(t))
        .                       .collect();
        .                   vars.extend(
        .                       (0..inner.int_unification_table().len())
        .                           .map(|i| ty::IntVid { index: i as u32 })
      902 ( 0.00%)                  .filter(|&vid| inner.int_unification_table().probe_value(vid).is_none())
        .                           .map(|v| self.tcx.mk_int_var(v)),
        .                   );
        .                   vars.extend(
        .                       (0..inner.float_unification_table().len())
        .                           .map(|i| ty::FloatVid { index: i as u32 })
        .                           .filter(|&vid| inner.float_unification_table().probe_value(vid).is_none())
        .                           .map(|v| self.tcx.mk_float_var(v)),
        .                   );
        .                   vars
    8,274 ( 0.00%)      }
        .           
   69,462 ( 0.00%)      fn combine_fields(
        .                   &'a self,
        .                   trace: TypeTrace<'tcx>,
        .                   param_env: ty::ParamEnv<'tcx>,
        .               ) -> CombineFields<'a, 'tcx> {
  278,356 ( 0.01%)          CombineFields {
        .                       infcx: self,
  695,890 ( 0.02%)              trace,
        .                       cause: None,
        .                       param_env,
        .                       obligations: PredicateObligations::new(),
        .                   }
   69,462 ( 0.00%)      }
        .           
        .               /// Clear the "currently in a snapshot" flag, invoke the closure,
        .               /// then restore the flag to its original value. This flag is a
        .               /// debugging measure designed to detect cases where we start a
        .               /// snapshot, create type variables, and register obligations
        .               /// which may involve those type variables in the fulfillment cx,
        .               /// potentially leaving "dangling type variables" behind.
        .               /// In such cases, an assertion will fail when attempting to
-- line 753 ----------------------------------------
-- line 755 ----------------------------------------
        .               /// better than grovelling through megabytes of `RUSTC_LOG` output.
        .               ///
        .               /// HOWEVER, in some cases the flag is unhelpful. In particular, we
        .               /// sometimes create a "mini-fulfilment-cx" in which we enroll
        .               /// obligations. As long as this fulfillment cx is fully drained
        .               /// before we return, this is not a problem, as there won't be any
        .               /// escaping obligations in the main cx. In those cases, you can
        .               /// use this function.
       40 ( 0.00%)      pub fn save_and_restore_in_snapshot_flag<F, R>(&self, func: F) -> R
        .               where
        .                   F: FnOnce(&Self) -> R,
        .               {
        .                   let flag = self.in_snapshot.replace(false);
   12,645 ( 0.00%)          let result = func(self);
        .                   self.in_snapshot.set(flag);
        .                   result
       45 ( 0.00%)      }
        .           
  351,218 ( 0.01%)      fn start_snapshot(&self) -> CombinedSnapshot<'a, 'tcx> {
        .                   debug!("start_snapshot()");
        .           
        .                   let in_snapshot = self.in_snapshot.replace(true);
        .           
        .                   let mut inner = self.inner.borrow_mut();
        .           
1,053,654 ( 0.02%)          CombinedSnapshot {
        .                       undo_snapshot: inner.undo_log.start_snapshot(),
        .                       region_constraints_snapshot: inner.unwrap_region_constraints().start_snapshot(),
        .                       universe: self.universe(),
        .                       was_in_snapshot: in_snapshot,
        .                       // Borrow typeck results "in progress" (i.e., during typeck)
        .                       // to ban writes from within a snapshot to them.
  175,609 ( 0.00%)              _in_progress_typeck_results: self
        .                           .in_progress_typeck_results
        .                           .map(|typeck_results| typeck_results.borrow()),
        .                   }
  702,436 ( 0.02%)      }
        .           
  471,515 ( 0.01%)      #[instrument(skip(self, snapshot), level = "debug")]
        .               fn rollback_to(&self, cause: &str, snapshot: CombinedSnapshot<'a, 'tcx>) {
        .                   let CombinedSnapshot {
   42,865 ( 0.00%)              undo_snapshot,
   42,865 ( 0.00%)              region_constraints_snapshot,
   42,865 ( 0.00%)              universe,
   42,865 ( 0.00%)              was_in_snapshot,
   85,730 ( 0.00%)              _in_progress_typeck_results,
        .                   } = snapshot;
        .           
        .                   self.in_snapshot.set(was_in_snapshot);
        .                   self.universe.set(universe);
        .           
        .                   let mut inner = self.inner.borrow_mut();
   42,865 ( 0.00%)          inner.rollback_to(undo_snapshot);
        .                   inner.unwrap_region_constraints().rollback_to(region_constraints_snapshot);
        .               }
        .           
1,991,160 ( 0.05%)      #[instrument(skip(self, snapshot), level = "debug")]
        .               fn commit_from(&self, snapshot: CombinedSnapshot<'a, 'tcx>) {
        .                   let CombinedSnapshot {
  132,744 ( 0.00%)              undo_snapshot,
        .                       region_constraints_snapshot: _,
        .                       universe: _,
  132,744 ( 0.00%)              was_in_snapshot,
  265,488 ( 0.01%)              _in_progress_typeck_results,
        .                   } = snapshot;
        .           
        .                   self.in_snapshot.set(was_in_snapshot);
        .           
        .                   self.inner.borrow_mut().commit(undo_snapshot);
        .               }
        .           
        .               /// Executes `f` and commit the bindings.
   71,667 ( 0.00%)      #[instrument(skip(self, f), level = "debug")]
   88,550 ( 0.00%)      pub fn commit_unconditionally<R, F>(&self, f: F) -> R
        .               where
        .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
        .               {
    8,050 ( 0.00%)          let snapshot = self.start_snapshot();
   28,589 ( 0.00%)          let r = f(&snapshot);
   56,350 ( 0.00%)          self.commit_from(snapshot);
   46,993 ( 0.00%)          r
        .               }
        .           
        .               /// Execute `f` and commit the bindings if closure `f` returns `Ok(_)`.
  786,379 ( 0.02%)      #[instrument(skip(self, f), level = "debug")]
  970,886 ( 0.02%)      pub fn commit_if_ok<T, E, F>(&self, f: F) -> Result<T, E>
        .               where
        .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> Result<T, E>,
        .               {
  156,586 ( 0.00%)          let snapshot = self.start_snapshot();
  447,126 ( 0.01%)          let r = f(&snapshot);
        .                   debug!("commit_if_ok() -- r.is_ok() = {}", r.is_ok());
  163,131 ( 0.00%)          match r {
        .                       Ok(_) => {
  890,660 ( 0.02%)                  self.commit_from(snapshot);
        .                       }
        .                       Err(_) => {
  175,086 ( 0.00%)                  self.rollback_to("commit_if_ok -- error", snapshot);
        .                       }
        .                   }
  900,044 ( 0.02%)          r
        .               }
        .           
        .               /// Execute `f` then unroll any bindings it creates.
  174,713 ( 0.00%)      #[instrument(skip(self, f), level = "debug")]
  203,196 ( 0.00%)      pub fn probe<R, F>(&self, f: F) -> R
        .               where
        .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
        .               {
   47,162 ( 0.00%)          let snapshot = self.start_snapshot();
   73,403 ( 0.00%)          let r = f(&snapshot);
  228,465 ( 0.01%)          self.rollback_to("probe", snapshot);
   49,515 ( 0.00%)          r
        .               }
        .           
        .               /// If `should_skip` is true, then execute `f` then unroll any bindings it creates.
      135 ( 0.00%)      #[instrument(skip(self, f), level = "debug")]
      180 ( 0.00%)      pub fn probe_maybe_skip_leak_check<R, F>(&self, should_skip: bool, f: F) -> R
        .               where
        .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
        .               {
       30 ( 0.00%)          let snapshot = self.start_snapshot();
       15 ( 0.00%)          let was_skip_leak_check = self.skip_leak_check.get();
       30 ( 0.00%)          if should_skip {
        .                       self.skip_leak_check.set(true);
        .                   }
       60 ( 0.00%)          let r = f(&snapshot);
      135 ( 0.00%)          self.rollback_to("probe", snapshot);
        .                   self.skip_leak_check.set(was_skip_leak_check);
      180 ( 0.00%)          r
        .               }
        .           
        .               /// Scan the constraints produced since `snapshot` began and returns:
        .               ///
        .               /// - `None` -- if none of them involve "region outlives" constraints
        .               /// - `Some(true)` -- if there are `'a: 'b` constraints where `'a` or `'b` is a placeholder
        .               /// - `Some(false)` -- if there are `'a: 'b` constraints but none involve placeholders
   13,080 ( 0.00%)      pub fn region_constraints_added_in_snapshot(
        .                   &self,
        .                   snapshot: &CombinedSnapshot<'a, 'tcx>,
        .               ) -> Option<bool> {
   26,160 ( 0.00%)          self.inner
        .                       .borrow_mut()
        .                       .unwrap_region_constraints()
        .                       .region_constraints_added_in_snapshot(&snapshot.undo_snapshot)
   19,620 ( 0.00%)      }
        .           
        .               pub fn add_given(&self, sub: ty::Region<'tcx>, sup: ty::RegionVid) {
        .                   self.inner.borrow_mut().unwrap_region_constraints().add_given(sub, sup);
        .               }
        .           
      900 ( 0.00%)      pub fn can_sub<T>(&self, param_env: ty::ParamEnv<'tcx>, a: T, b: T) -> UnitResult<'tcx>
        .               where
        .                   T: at::ToTrace<'tcx>,
        .               {
        .                   let origin = &ObligationCause::dummy();
        .                   self.probe(|_| {
        .                       self.at(origin, param_env).sub(a, b).map(|InferOk { obligations: _, .. }| {
        .                           // Ignore obligations, since we are unrolling
        .                           // everything anyway.
        .                       })
        .                   })
      675 ( 0.00%)      }
        .           
   16,368 ( 0.00%)      pub fn can_eq<T>(&self, param_env: ty::ParamEnv<'tcx>, a: T, b: T) -> UnitResult<'tcx>
        .               where
        .                   T: at::ToTrace<'tcx>,
        .               {
        .                   let origin = &ObligationCause::dummy();
        .                   self.probe(|_| {
        .                       self.at(origin, param_env).eq(a, b).map(|InferOk { obligations: _, .. }| {
        .                           // Ignore obligations, since we are unrolling
        .                           // everything anyway.
        .                       })
        .                   })
   12,276 ( 0.00%)      }
        .           
  115,980 ( 0.00%)      #[instrument(skip(self), level = "debug")]
        .               pub fn sub_regions(
        .                   &self,
        .                   origin: SubregionOrigin<'tcx>,
        .                   a: ty::Region<'tcx>,
        .                   b: ty::Region<'tcx>,
        .               ) {
  104,382 ( 0.00%)          self.inner.borrow_mut().unwrap_region_constraints().make_subregion(origin, a, b);
        .               }
        .           
        .               /// Require that the region `r` be equal to one of the regions in
        .               /// the set `regions`.
        .               #[instrument(skip(self), level = "debug")]
        .               pub fn member_constraint(
        .                   &self,
        .                   opaque_type_def_id: DefId,
-- line 947 ----------------------------------------
-- line 969 ----------------------------------------
        .               /// to `subtype_predicate` -- that is, "coercing" `a` to `b` winds up
        .               /// actually requiring `a <: b`. This is of course a valid coercion,
        .               /// but it's not as flexible as `FnCtxt::coerce` would be.
        .               ///
        .               /// (We may refactor this in the future, but there are a number of
        .               /// practical obstacles. Among other things, `FnCtxt::coerce` presently
        .               /// records adjustments that are required on the HIR in order to perform
        .               /// the coercion, and we don't currently have a way to manage that.)
       36 ( 0.00%)      pub fn coerce_predicate(
        .                   &self,
        .                   cause: &ObligationCause<'tcx>,
        .                   param_env: ty::ParamEnv<'tcx>,
        .                   predicate: ty::PolyCoercePredicate<'tcx>,
        .               ) -> Option<InferResult<'tcx, ()>> {
       24 ( 0.00%)          let subtype_predicate = predicate.map_bound(|p| ty::SubtypePredicate {
        .                       a_is_expected: false, // when coercing from `a` to `b`, `b` is expected
        .                       a: p.a,
        .                       b: p.b,
        .                   });
       60 ( 0.00%)          self.subtype_predicate(cause, param_env, subtype_predicate)
       48 ( 0.00%)      }
        .           
    6,408 ( 0.00%)      pub fn subtype_predicate(
        .                   &self,
        .                   cause: &ObligationCause<'tcx>,
        .                   param_env: ty::ParamEnv<'tcx>,
        .                   predicate: ty::PolySubtypePredicate<'tcx>,
        .               ) -> Option<InferResult<'tcx, ()>> {
        .                   // Check for two unresolved inference variables, in which case we can
        .                   // make no progress. This is partly a micro-optimization, but it's
        .                   // also an opportunity to "sub-unify" the variables. This isn't
-- line 999 ----------------------------------------
-- line 1002 ----------------------------------------
        .                   // earlier that they are sub-unified).
        .                   //
        .                   // Note that we can just skip the binders here because
        .                   // type variables can't (at present, at
        .                   // least) capture any of the things bound by this binder.
        .                   //
        .                   // Note that this sub here is not just for diagnostics - it has semantic
        .                   // effects as well.
      534 ( 0.00%)          let r_a = self.shallow_resolve(predicate.skip_binder().a);
      534 ( 0.00%)          let r_b = self.shallow_resolve(predicate.skip_binder().b);
    3,818 ( 0.00%)          match (r_a.kind(), r_b.kind()) {
      844 ( 0.00%)              (&ty::Infer(ty::TyVar(a_vid)), &ty::Infer(ty::TyVar(b_vid))) => {
        .                           self.inner.borrow_mut().type_variables().sub(a_vid, b_vid);
      844 ( 0.00%)                  return None;
        .                       }
        .                       _ => {}
        .                   }
        .           
        .                   Some(self.commit_if_ok(|_snapshot| {
      112 ( 0.00%)              let ty::SubtypePredicate { a_is_expected, a, b } =
        .                           self.replace_bound_vars_with_placeholders(predicate);
        .           
      224 ( 0.00%)              let ok = self.at(cause, param_env).sub_exp(a_is_expected, a, b)?;
        .           
        .                       Ok(ok.unit())
        .                   }))
    4,806 ( 0.00%)      }
        .           
   19,008 ( 0.00%)      pub fn region_outlives_predicate(
        .                   &self,
        .                   cause: &traits::ObligationCause<'tcx>,
        .                   predicate: ty::PolyRegionOutlivesPredicate<'tcx>,
        .               ) -> UnitResult<'tcx> {
        .                   self.commit_if_ok(|_snapshot| {
        .                       let ty::OutlivesPredicate(r_a, r_b) =
        .                           self.replace_bound_vars_with_placeholders(predicate);
        .                       let origin = SubregionOrigin::from_obligation_cause(cause, || {
        .                           RelateRegionParamBound(cause.span)
        .                       });
   15,840 ( 0.00%)              self.sub_regions(origin, r_b, r_a); // `b : a` ==> `a <= b`
        .                       Ok(())
        .                   })
   12,672 ( 0.00%)      }
        .           
        .               /// Number of type variables created so far.
      166 ( 0.00%)      pub fn num_ty_vars(&self) -> usize {
        .                   self.inner.borrow_mut().type_variables().num_vars()
      332 ( 0.00%)      }
        .           
   38,114 ( 0.00%)      pub fn next_ty_var_id(&self, origin: TypeVariableOrigin) -> TyVid {
  190,570 ( 0.00%)          self.inner.borrow_mut().type_variables().new_var(self.universe(), origin)
   57,171 ( 0.00%)      }
        .           
   36,982 ( 0.00%)      pub fn next_ty_var(&self, origin: TypeVariableOrigin) -> Ty<'tcx> {
  132,833 ( 0.00%)          self.tcx.mk_ty_var(self.next_ty_var_id(origin))
   55,473 ( 0.00%)      }
        .           
    1,544 ( 0.00%)      pub fn next_ty_var_in_universe(
        .                   &self,
        .                   origin: TypeVariableOrigin,
        .                   universe: ty::UniverseIndex,
        .               ) -> Ty<'tcx> {
    8,492 ( 0.00%)          let vid = self.inner.borrow_mut().type_variables().new_var(universe, origin);
      772 ( 0.00%)          self.tcx.mk_ty_var(vid)
    2,316 ( 0.00%)      }
        .           
        .               pub fn next_const_var(
        .                   &self,
        .                   ty: Ty<'tcx>,
        .                   origin: ConstVariableOrigin,
        .               ) -> &'tcx ty::Const<'tcx> {
        .                   self.tcx.mk_const_var(self.next_const_var_id(origin), ty)
        .               }
-- line 1074 ----------------------------------------
-- line 1090 ----------------------------------------
        .               pub fn next_const_var_id(&self, origin: ConstVariableOrigin) -> ConstVid<'tcx> {
        .                   self.inner.borrow_mut().const_unification_table().new_key(ConstVarValue {
        .                       origin,
        .                       val: ConstVariableValue::Unknown { universe: self.universe() },
        .                   })
        .               }
        .           
        .               fn next_int_var_id(&self) -> IntVid {
    1,565 ( 0.00%)          self.inner.borrow_mut().int_unification_table().new_key(None)
        .               }
        .           
      939 ( 0.00%)      pub fn next_int_var(&self) -> Ty<'tcx> {
        .                   self.tcx.mk_int_var(self.next_int_var_id())
    1,252 ( 0.00%)      }
        .           
        .               fn next_float_var_id(&self) -> FloatVid {
        .                   self.inner.borrow_mut().float_unification_table().new_key(None)
        .               }
        .           
        .               pub fn next_float_var(&self) -> Ty<'tcx> {
        .                   self.tcx.mk_float_var(self.next_float_var_id())
        .               }
        .           
        .               /// Creates a fresh region variable with the next available index.
        .               /// The variable will be created in the maximum universe created
        .               /// thus far, allowing it to name any region created thus far.
   18,746 ( 0.00%)      pub fn next_region_var(&self, origin: RegionVariableOrigin) -> ty::Region<'tcx> {
  363,178 ( 0.01%)          self.next_region_var_in_universe(origin, self.universe())
   37,492 ( 0.00%)      }
        .           
        .               /// Creates a fresh region variable with the next available index
        .               /// in the given universe; typically, you can use
        .               /// `next_region_var` and just use the maximal universe.
  138,918 ( 0.00%)      pub fn next_region_var_in_universe(
        .                   &self,
        .                   origin: RegionVariableOrigin,
        .                   universe: ty::UniverseIndex,
        .               ) -> ty::Region<'tcx> {
        .                   let region_var =
  902,967 ( 0.02%)              self.inner.borrow_mut().unwrap_region_constraints().new_region_var(universe, origin);
  347,295 ( 0.01%)          self.tcx.mk_region(ty::ReVar(region_var))
  208,377 ( 0.00%)      }
        .           
        .               /// Return the universe that the region `r` was created in.  For
        .               /// most regions (e.g., `'static`, named regions from the user,
        .               /// etc) this is the root universe U0. For inference variables or
        .               /// placeholders, however, it will return the universe which which
        .               /// they are associated.
   18,206 ( 0.00%)      pub fn universe_of_region(&self, r: ty::Region<'tcx>) -> ty::UniverseIndex {
        .                   self.inner.borrow_mut().unwrap_region_constraints().universe(r)
   27,309 ( 0.00%)      }
        .           
        .               /// Number of region variables created so far.
   11,158 ( 0.00%)      pub fn num_region_vars(&self) -> usize {
        .                   self.inner.borrow_mut().unwrap_region_constraints().num_region_vars()
   16,737 ( 0.00%)      }
        .           
        .               /// Just a convenient wrapper of `next_region_var` for using during NLL.
   29,976 ( 0.00%)      pub fn next_nll_region_var(&self, origin: NllRegionVariableOrigin) -> ty::Region<'tcx> {
        .                   self.next_region_var(RegionVariableOrigin::Nll(origin))
   59,952 ( 0.00%)      }
        .           
        .               /// Just a convenient wrapper of `next_region_var` for using during NLL.
      139 ( 0.00%)      pub fn next_nll_region_var_in_universe(
        .                   &self,
        .                   origin: NllRegionVariableOrigin,
        .                   universe: ty::UniverseIndex,
        .               ) -> ty::Region<'tcx> {
      977 ( 0.00%)          self.next_region_var_in_universe(RegionVariableOrigin::Nll(origin), universe)
      278 ( 0.00%)      }
        .           
  237,192 ( 0.01%)      pub fn var_for_def(&self, span: Span, param: &ty::GenericParamDef) -> GenericArg<'tcx> {
  127,471 ( 0.00%)          match param.kind {
        .                       GenericParamDefKind::Lifetime => {
        .                           // Create a region inference variable for the given
        .                           // region parameter definition.
   10,387 ( 0.00%)                  self.next_region_var(EarlyBoundRegion(span, param.name)).into()
        .                       }
        .                       GenericParamDefKind::Type { .. } => {
        .                           // Create a type inference variable for the given
        .                           // type parameter definition. The substitutions are
        .                           // for actual parameters that may be referred to by
        .                           // the default of this type parameter, if it exists.
        .                           // e.g., `struct Foo<A, B, C = (A, B)>(...);` when
        .                           // used in a path such as `Foo::<T, U>::new()` will
        .                           // use an inference variable for `C` with `[T, U]`
        .                           // as the substitutions for the default, `(T, U)`.
   76,384 ( 0.00%)                  let ty_var_id = self.inner.borrow_mut().type_variables().new_var(
        .                               self.universe(),
   95,480 ( 0.00%)                      TypeVariableOrigin {
        .                                   kind: TypeVariableOriginKind::TypeParameterDefinition(
   19,096 ( 0.00%)                              param.name,
   19,096 ( 0.00%)                              Some(param.def_id),
        .                                   ),
        .                                   span,
        .                               },
        .                           );
        .           
   19,096 ( 0.00%)                  self.tcx.mk_ty_var(ty_var_id).into()
        .                       }
        .                       GenericParamDefKind::Const { .. } => {
        .                           let origin = ConstVariableOrigin {
        .                               kind: ConstVariableOriginKind::ConstParameterDefinition(
        .                                   param.name,
        .                                   param.def_id,
        .                               ),
        .                               span,
        .                           };
        .                           let const_var_id =
    1,826 ( 0.00%)                      self.inner.borrow_mut().const_unification_table().new_key(ConstVarValue {
        .                                   origin,
        .                                   val: ConstVariableValue::Unknown { universe: self.universe() },
        .                               });
      166 ( 0.00%)                  self.tcx.mk_const_var(const_var_id, self.tcx.type_of(param.def_id)).into()
        .                       }
        .                   }
    1,328 ( 0.00%)      }
        .           
        .               /// Given a set of generics defined on a type or impl, returns a substitution mapping each
        .               /// type/region parameter to a fresh inference variable.
   36,645 ( 0.00%)      pub fn fresh_substs_for_item(&self, span: Span, def_id: DefId) -> SubstsRef<'tcx> {
  197,905 ( 0.00%)          InternalSubsts::for_item(self.tcx, def_id, |param, _| self.var_for_def(span, param))
   24,430 ( 0.00%)      }
        .           
        .               /// Returns `true` if errors have been reported since this infcx was
        .               /// created. This is sometimes used as a heuristic to skip
        .               /// reporting errors that often occur as a result of earlier
        .               /// errors, but where it's hard to be 100% sure (e.g., unresolved
        .               /// inference variables, regionck errors).
    3,018 ( 0.00%)      pub fn is_tainted_by_errors(&self) -> bool {
        .                   debug!(
        .                       "is_tainted_by_errors(err_count={}, err_count_on_creation={}, \
        .                        tainted_by_errors_flag={})",
        .                       self.tcx.sess.err_count(),
        .                       self.err_count_on_creation,
        .                       self.tainted_by_errors_flag.get()
        .                   );
        .           
   66,519 ( 0.00%)          if self.tcx.sess.err_count() > self.err_count_on_creation {
        .                       return true; // errors reported since this infcx was made
        .                   }
        .                   self.tainted_by_errors_flag.get()
    4,527 ( 0.00%)      }
        .           
        .               /// Set the "tainted by errors" flag to true. We call this when we
        .               /// observe an error from a prior pass.
        .               pub fn set_tainted_by_errors(&self) {
        .                   debug!("set_tainted_by_errors()");
        .                   self.tainted_by_errors_flag.set(true)
        .               }
        .           
        .               /// Process the region constraints and return any any errors that
        .               /// result. After this, no more unification operations should be
        .               /// done -- or the compiler will panic -- but it is legal to use
        .               /// `resolve_vars_if_possible` as well as `fully_resolve`.
   65,282 ( 0.00%)      pub fn resolve_regions(
        .                   &self,
        .                   region_context: DefId,
        .                   outlives_env: &OutlivesEnvironment<'tcx>,
        .                   mode: RegionckMode,
        .               ) -> Vec<RegionResolutionError<'tcx>> {
  177,194 ( 0.00%)          let (var_infos, data) = {
        .                       let mut inner = self.inner.borrow_mut();
        .                       let inner = &mut *inner;
    9,326 ( 0.00%)              assert!(
   27,978 ( 0.00%)                  self.is_tainted_by_errors() || inner.region_obligations.is_empty(),
        .                           "region_obligations not empty: {:#?}",
        .                           inner.region_obligations
        .                       );
        .                       inner
        .                           .region_constraint_storage
        .                           .take()
        .                           .expect("regions already resolved")
        .                           .with_log(&mut inner.undo_log)
        .                           .into_infos_and_data()
    9,326 ( 0.00%)          };
        .           
        .                   let region_rels =
    9,326 ( 0.00%)              &RegionRelations::new(self.tcx, region_context, outlives_env.free_region_map());
        .           
   83,934 ( 0.00%)          let (lexical_region_resolutions, errors) =
  223,824 ( 0.01%)              lexical_region_resolve::resolve(region_rels, var_infos, data, mode);
        .           
   37,304 ( 0.00%)          let old_value = self.lexical_region_resolutions.replace(Some(lexical_region_resolutions));
    9,326 ( 0.00%)          assert!(old_value.is_none());
        .           
        .                   errors
   83,934 ( 0.00%)      }
        .           
        .               /// Process the region constraints and report any errors that
        .               /// result. After this, no more unification operations should be
        .               /// done -- or the compiler will panic -- but it is legal to use
        .               /// `resolve_vars_if_possible` as well as `fully_resolve`.
   93,260 ( 0.00%)      pub fn resolve_regions_and_report_errors(
        .                   &self,
        .                   region_context: DefId,
        .                   outlives_env: &OutlivesEnvironment<'tcx>,
        .                   mode: RegionckMode,
        .               ) {
   18,652 ( 0.00%)          let errors = self.resolve_regions(region_context, outlives_env, mode);
        .           
   27,978 ( 0.00%)          if !self.is_tainted_by_errors() {
        .                       // As a heuristic, just skip reporting region errors
        .                       // altogether if other errors have been reported while
        .                       // this infcx was in use.  This is totally hokey but
        .                       // otherwise we have a hard time separating legit region
        .                       // errors from silly ones.
   18,652 ( 0.00%)              self.report_region_errors(&errors);
        .                   }
   46,630 ( 0.00%)      }
        .           
        .               /// Obtains (and clears) the current set of region
        .               /// constraints. The inference context is still usable: further
        .               /// unifications will simply add new constraints.
        .               ///
        .               /// This method is not meant to be used with normal lexical region
        .               /// resolution. Rather, it is used in the NLL mode as a kind of
        .               /// interim hack: basically we run normal type-check and generate
-- line 1307 ----------------------------------------
-- line 1319 ----------------------------------------
        .               }
        .           
        .               /// Gives temporary access to the region constraint data.
        .               pub fn with_region_constraints<R>(
        .                   &self,
        .                   op: impl FnOnce(&RegionConstraintData<'tcx>) -> R,
        .               ) -> R {
        .                   let mut inner = self.inner.borrow_mut();
   19,016 ( 0.00%)          op(inner.unwrap_region_constraints().data())
        .               }
        .           
        .               pub fn region_var_origin(&self, vid: ty::RegionVid) -> RegionVariableOrigin {
        .                   let mut inner = self.inner.borrow_mut();
        .                   let inner = &mut *inner;
        .                   inner
        .                       .region_constraint_storage
        .                       .as_mut()
-- line 1335 ----------------------------------------
-- line 1338 ----------------------------------------
        .                       .var_origin(vid)
        .               }
        .           
        .               /// Takes ownership of the list of variable regions. This implies
        .               /// that all the region constraints have already been taken, and
        .               /// hence that `resolve_regions_and_report_errors` can never be
        .               /// called. This is used only during NLL processing to "hand off" ownership
        .               /// of the set of region variables into the NLL region context.
    6,595 ( 0.00%)      pub fn take_region_var_origins(&self) -> VarInfos {
        .                   let mut inner = self.inner.borrow_mut();
   25,061 ( 0.00%)          let (var_infos, data) = inner
        .                       .region_constraint_storage
        .                       .take()
        .                       .expect("regions already resolved")
        .                       .with_log(&mut inner.undo_log)
    1,319 ( 0.00%)              .into_infos_and_data();
    1,319 ( 0.00%)          assert!(data.is_empty());
        .                   var_infos
   10,552 ( 0.00%)      }
        .           
        .               pub fn ty_to_string(&self, t: Ty<'tcx>) -> String {
        .                   self.resolve_vars_if_possible(t).to_string()
        .               }
        .           
        .               /// If `TyVar(vid)` resolves to a type, return that type. Else, return the
        .               /// universe index of `TyVar(vid)`.
   12,070 ( 0.00%)      pub fn probe_ty_var(&self, vid: TyVid) -> Result<Ty<'tcx>, ty::UniverseIndex> {
        .                   use self::type_variable::TypeVariableValue;
        .           
   36,210 ( 0.00%)          match self.inner.borrow_mut().type_variables().probe(vid) {
        .                       TypeVariableValue::Known { value } => Ok(value),
        .                       TypeVariableValue::Unknown { universe } => Err(universe),
        .                   }
   42,245 ( 0.00%)      }
        .           
        .               /// Resolve any type variables found in `value` -- but only one
        .               /// level.  So, if the variable `?X` is bound to some type
        .               /// `Foo<?Y>`, then this would return `Foo<?Y>` (but `?Y` may
        .               /// itself be bound to a type).
        .               ///
        .               /// Useful when you only need to inspect the outermost level of
        .               /// the type and don't care about nested types (or perhaps you
        .               /// will be resolving them as well, e.g. in a loop).
        .               pub fn shallow_resolve<T>(&self, value: T) -> T
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
  325,680 ( 0.01%)          value.fold_with(&mut ShallowResolver { infcx: self })
        .               }
        .           
   29,856 ( 0.00%)      pub fn root_var(&self, var: ty::TyVid) -> ty::TyVid {
        .                   self.inner.borrow_mut().type_variables().root_var(var)
   44,784 ( 0.00%)      }
        .           
        .               /// Where possible, replaces type/const variables in
        .               /// `value` with their final value. Note that region variables
        .               /// are unaffected. If a type/const variable has not been unified, it
        .               /// is left as is. This is an idempotent operation that does
        .               /// not affect inference state in any way and so you can do it
        .               /// at will.
      856 ( 0.00%)      pub fn resolve_vars_if_possible<T>(&self, value: T) -> T
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
  311,896 ( 0.01%)          if !value.needs_infer() {
  211,184 ( 0.00%)              return value; // Avoid duplicated subst-folding.
        .                   }
  310,110 ( 0.01%)          let mut r = resolve::OpportunisticVarResolver::new(self);
  379,295 ( 0.01%)          value.fold_with(&mut r)
      965 ( 0.00%)      }
        .           
        .               /// Returns the first unresolved variable contained in `T`. In the
        .               /// process of visiting `T`, this will resolve (where possible)
        .               /// type variables in `T`, but it never constructs the final,
        .               /// resolved type, so it's more efficient than
        .               /// `resolve_vars_if_possible()`.
        .               pub fn unresolved_type_vars<T>(&self, value: &T) -> Option<(Ty<'tcx>, Option<Span>)>
        .               where
-- line 1415 ----------------------------------------
-- line 1490 ----------------------------------------
        .                   expected: &'tcx ty::Const<'tcx>,
        .                   actual: &'tcx ty::Const<'tcx>,
        .                   err: TypeError<'tcx>,
        .               ) -> DiagnosticBuilder<'tcx> {
        .                   let trace = TypeTrace::consts(cause, true, expected, actual);
        .                   self.report_and_explain_type_error(trace, &err)
        .               }
        .           
   22,347 ( 0.00%)      pub fn replace_bound_vars_with_fresh_vars<T>(
        .                   &self,
        .                   span: Span,
        .                   lbrct: LateBoundRegionConversionTime,
        .                   value: ty::Binder<'tcx, T>,
        .               ) -> (T, BTreeMap<ty::BoundRegion, ty::Region<'tcx>>)
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
        .                   let fld_r =
  200,080 ( 0.00%)              |br: ty::BoundRegion| self.next_region_var(LateBoundRegion(span, br.kind, lbrct));
        .                   let fld_t = |_| {
        .                       self.next_ty_var(TypeVariableOrigin {
        .                           kind: TypeVariableOriginKind::MiscVariable,
        .                           span,
        .                       })
        .                   };
        .                   let fld_c = |_, ty| {
        .                       self.next_const_var(
        .                           ty,
        .                           ConstVariableOrigin { kind: ConstVariableOriginKind::MiscVariable, span },
        .                       )
        .                   };
  230,384 ( 0.01%)          self.tcx.replace_bound_vars(value, fld_r, fld_t, fld_c)
   14,898 ( 0.00%)      }
        .           
        .               /// See the [`region_constraints::RegionConstraintCollector::verify_generic_bound`] method.
    8,408 ( 0.00%)      pub fn verify_generic_bound(
        .                   &self,
        .                   origin: SubregionOrigin<'tcx>,
        .                   kind: GenericKind<'tcx>,
        .                   a: ty::Region<'tcx>,
        .                   bound: VerifyBound<'tcx>,
        .               ) {
        .                   debug!("verify_generic_bound({:?}, {:?} <: {:?})", kind, a, bound);
        .           
    3,153 ( 0.00%)          self.inner
        .                       .borrow_mut()
        .                       .unwrap_region_constraints()
   17,867 ( 0.00%)              .verify_generic_bound(origin, kind, a, bound);
    7,357 ( 0.00%)      }
        .           
        .               /// Obtains the latest type of the given closure; this may be a
        .               /// closure in the current function, in which case its
        .               /// `ClosureKind` may not yet be known.
    3,662 ( 0.00%)      pub fn closure_kind(&self, closure_substs: SubstsRef<'tcx>) -> Option<ty::ClosureKind> {
    7,324 ( 0.00%)          let closure_kind_ty = closure_substs.as_closure().kind_ty();
        .                   let closure_kind_ty = self.shallow_resolve(closure_kind_ty);
    5,493 ( 0.00%)          closure_kind_ty.to_opt_closure_kind()
        .               }
        .           
        .               /// Clears the selection, evaluation, and projection caches. This is useful when
        .               /// repeatedly attempting to select an `Obligation` while changing only
        .               /// its `ParamEnv`, since `FulfillmentContext` doesn't use probing.
        .               pub fn clear_caches(&self) {
        .                   self.selection_cache.clear();
        .                   self.evaluation_cache.clear();
        .                   self.inner.borrow_mut().projection_cache().clear();
        .               }
        .           
        .               pub fn universe(&self) -> ty::UniverseIndex {
  540,947 ( 0.01%)          self.universe.get()
  199,759 ( 0.00%)      }
        .           
        .               /// Creates and return a fresh universe that extends all previous
        .               /// universes. Updates `self.universe` to that new universe.
      138 ( 0.00%)      pub fn create_next_universe(&self) -> ty::UniverseIndex {
      148 ( 0.00%)          let u = self.universe.get().next_universe();
        .                   self.universe.set(u);
        .                   u
      138 ( 0.00%)      }
        .           
        .               /// Resolves and evaluates a constant.
        .               ///
        .               /// The constant can be located on a trait like `<A as B>::C`, in which case the given
        .               /// substitutions and environment are used to resolve the constant. Alternatively if the
        .               /// constant has generic parameters in scope the substitutions are used to evaluate the value of
        .               /// the constant. For example in `fn foo<T>() { let _ = [0; bar::<T>()]; }` the repeat count
        .               /// constant `bar::<T>()` requires a substitution for `T`, if the substitution for `T` is still
        .               /// too generic for the constant to be evaluated then `Err(ErrorHandled::TooGeneric)` is
        .               /// returned.
        .               ///
        .               /// This handles inferences variables within both `param_env` and `substs` by
        .               /// performing the operation on their respective canonical forms.
      793 ( 0.00%)      pub fn const_eval_resolve(
        .                   &self,
        .                   param_env: ty::ParamEnv<'tcx>,
        .                   unevaluated: ty::Unevaluated<'tcx>,
        .                   span: Option<Span>,
        .               ) -> EvalToConstValueResult<'tcx> {
       61 ( 0.00%)          let substs = self.resolve_vars_if_possible(unevaluated.substs);
        .           
        .                   // Postpone the evaluation of constants whose substs depend on inference
        .                   // variables
        .                   if substs.has_infer_types_or_consts() {
        .                       return Err(ErrorHandled::TooGeneric);
        .                   }
        .           
       61 ( 0.00%)          let param_env_erased = self.tcx.erase_regions(param_env);
        .                   let substs_erased = self.tcx.erase_regions(substs);
        .           
        .                   let unevaluated = ty::Unevaluated {
        .                       def: unevaluated.def,
        .                       substs: substs_erased,
      122 ( 0.00%)              promoted: unevaluated.promoted,
        .                   };
        .           
        .                   // The return value is the evaluated value which doesn't contain any reference to inference
        .                   // variables, thus we don't need to substitute back the original values.
      732 ( 0.00%)          self.tcx.const_eval_resolve(param_env_erased, unevaluated, span)
      549 ( 0.00%)      }
        .           
        .               /// If `typ` is a type variable of some kind, resolve it one level
        .               /// (but do not resolve types found in the result). If `typ` is
        .               /// not a type variable, just return it unmodified.
        .               // FIXME(eddyb) inline into `ShallowResolver::visit_ty`.
3,378,312 ( 0.08%)      fn shallow_resolve_ty(&self, typ: Ty<'tcx>) -> Ty<'tcx> {
1,785,572 ( 0.04%)          match *typ.kind() {
        .                       ty::Infer(ty::TyVar(v)) => {
        .                           // Not entirely obvious: if `typ` is a type variable,
        .                           // it can be resolved to an int/float variable, which
        .                           // can then be recursively resolved, hence the
        .                           // recursion. Note though that we prevent type
        .                           // variables from unifying to other type variables
        .                           // directly (though they may be embedded
        .                           // structurally), and we prevent cycles in any case,
        .                           // so this recursion should always be of very limited
        .                           // depth.
        .                           //
        .                           // Note: if these two lines are combined into one we get
        .                           // dynamic borrow errors on `self.inner`.
  910,364 ( 0.02%)                  let known = self.inner.borrow_mut().type_variables().probe(v).known();
        .                           known.map_or(typ, |t| self.shallow_resolve_ty(t))
        .                       }
        .           
   21,904 ( 0.00%)              ty::Infer(ty::IntVar(v)) => self
        .                           .inner
        .                           .borrow_mut()
        .                           .int_unification_table()
        .                           .probe_value(v)
    7,269 ( 0.00%)                  .map(|v| v.to_type(self.tcx))
        .                           .unwrap_or(typ),
        .           
        .                       ty::Infer(ty::FloatVar(v)) => self
        .                           .inner
        .                           .borrow_mut()
        .                           .float_unification_table()
        .                           .probe_value(v)
        .                           .map(|v| v.to_type(self.tcx))
        .                           .unwrap_or(typ),
        .           
        .                       _ => typ,
        .                   }
3,800,601 ( 0.09%)      }
        .           
        .               /// `ty_or_const_infer_var_changed` is equivalent to one of these two:
        .               ///   * `shallow_resolve(ty) != ty` (where `ty.kind = ty::Infer(_)`)
        .               ///   * `shallow_resolve(ct) != ct` (where `ct.kind = ty::ConstKind::Infer(_)`)
        .               ///
        .               /// However, `ty_or_const_infer_var_changed` is more efficient. It's always
        .               /// inlined, despite being large, because it has only two call sites that
        .               /// are extremely hot (both in `traits::fulfill`'s checking of `stalled_on`
-- line 1659 ----------------------------------------
-- line 1662 ----------------------------------------
        .               #[inline(always)]
        .               pub fn ty_or_const_infer_var_changed(&self, infer_var: TyOrConstInferVar<'tcx>) -> bool {
        .                   match infer_var {
        .                       TyOrConstInferVar::Ty(v) => {
        .                           use self::type_variable::TypeVariableValue;
        .           
        .                           // If `inlined_probe` returns a `Known` value, it never equals
        .                           // `ty::Infer(ty::TyVar(v))`.
  683,409 ( 0.02%)                  match self.inner.borrow_mut().type_variables().inlined_probe(v) {
        .                               TypeVariableValue::Unknown { .. } => false,
        .                               TypeVariableValue::Known { .. } => true,
        .                           }
        .                       }
        .           
        .                       TyOrConstInferVar::TyInt(v) => {
        .                           // If `inlined_probe_value` returns a value it's always a
        .                           // `ty::Int(_)` or `ty::UInt(_)`, which never matches a
        .                           // `ty::Infer(_)`.
    2,748 ( 0.00%)                  self.inner.borrow_mut().int_unification_table().inlined_probe_value(v).is_some()
        .                       }
        .           
        .                       TyOrConstInferVar::TyFloat(v) => {
        .                           // If `probe_value` returns a value it's always a
        .                           // `ty::Float(_)`, which never matches a `ty::Infer(_)`.
        .                           //
        .                           // Not `inlined_probe_value(v)` because this call site is colder.
        .                           self.inner.borrow_mut().float_unification_table().probe_value(v).is_some()
-- line 1688 ----------------------------------------
-- line 1716 ----------------------------------------
        .               /// Equivalent to `ty::ConstKind::Infer(ty::InferConst::Var(_))`.
        .               Const(ConstVid<'tcx>),
        .           }
        .           
        .           impl<'tcx> TyOrConstInferVar<'tcx> {
        .               /// Tries to extract an inference variable from a type or a constant, returns `None`
        .               /// for types other than `ty::Infer(_)` (or `InferTy::Fresh*`) and
        .               /// for constants other than `ty::ConstKind::Infer(_)` (or `InferConst::Fresh`).
   11,173 ( 0.00%)      pub fn maybe_from_generic_arg(arg: GenericArg<'tcx>) -> Option<Self> {
        .                   match arg.unpack() {
        .                       GenericArgKind::Type(ty) => Self::maybe_from_ty(ty),
        .                       GenericArgKind::Const(ct) => Self::maybe_from_const(ct),
        .                       GenericArgKind::Lifetime(_) => None,
        .                   }
   11,173 ( 0.00%)      }
        .           
        .               /// Tries to extract an inference variable from a type, returns `None`
        .               /// for types other than `ty::Infer(_)` (or `InferTy::Fresh*`).
      842 ( 0.00%)      pub fn maybe_from_ty(ty: Ty<'tcx>) -> Option<Self> {
  107,663 ( 0.00%)          match *ty.kind() {
   23,758 ( 0.00%)              ty::Infer(ty::TyVar(v)) => Some(TyOrConstInferVar::Ty(v)),
      192 ( 0.00%)              ty::Infer(ty::IntVar(v)) => Some(TyOrConstInferVar::TyInt(v)),
        .                       ty::Infer(ty::FloatVar(v)) => Some(TyOrConstInferVar::TyFloat(v)),
        .                       _ => None,
        .                   }
      842 ( 0.00%)      }
        .           
        .               /// Tries to extract an inference variable from a constant, returns `None`
        .               /// for constants other than `ty::ConstKind::Infer(_)` (or `InferConst::Fresh`).
        .               pub fn maybe_from_const(ct: &'tcx ty::Const<'tcx>) -> Option<Self> {
        .                   match ct.val {
        .                       ty::ConstKind::Infer(InferConst::Var(v)) => Some(TyOrConstInferVar::Const(v)),
        .                       _ => None,
        .                   }
-- line 1749 ----------------------------------------
-- line 1755 ----------------------------------------
        .           }
        .           
        .           impl<'a, 'tcx> TypeFolder<'tcx> for ShallowResolver<'a, 'tcx> {
        .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
        .                   self.infcx.tcx
        .               }
        .           
        .               fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {
  639,190 ( 0.01%)          self.infcx.shallow_resolve_ty(ty)
        .               }
        .           
      856 ( 0.00%)      fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
      820 ( 0.00%)          if let ty::Const { val: ty::ConstKind::Infer(InferConst::Var(vid)), .. } = ct {
      980 ( 0.00%)              self.infcx
        .                           .inner
        .                           .borrow_mut()
        .                           .const_unification_table()
      588 ( 0.00%)                  .probe_value(*vid)
        .                           .val
        .                           .known()
        .                           .unwrap_or(ct)
        .                   } else {
        .                       ct
        .                   }
    1,070 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> TypeTrace<'tcx> {
        .               pub fn span(&self) -> Span {
        2 ( 0.00%)          self.cause.span
        .               }
        .           
        .               pub fn types(
        .                   cause: &ObligationCause<'tcx>,
        .                   a_is_expected: bool,
        .                   a: Ty<'tcx>,
        .                   b: Ty<'tcx>,
        .               ) -> TypeTrace<'tcx> {
-- line 1792 ----------------------------------------
-- line 1800 ----------------------------------------
        .                   b: &'tcx ty::Const<'tcx>,
        .               ) -> TypeTrace<'tcx> {
        .                   TypeTrace { cause: cause.clone(), values: Consts(ExpectedFound::new(a_is_expected, a, b)) }
        .               }
        .           }
        .           
        .           impl<'tcx> SubregionOrigin<'tcx> {
        .               pub fn span(&self) -> Span {
        5 ( 0.00%)          match *self {
        1 ( 0.00%)              Subtype(ref a) => a.span(),
        .                       RelateObjectBound(a) => a,
        .                       RelateParamBound(a, ..) => a,
        .                       RelateRegionParamBound(a) => a,
        .                       Reborrow(a) => a,
        .                       ReborrowUpvar(a, _) => a,
        .                       DataBorrowed(_, a) => a,
        .                       ReferenceOutlivesReferent(_, a) => a,
        .                       CompareImplMethodObligation { span, .. } => span,
-- line 1817 ----------------------------------------
-- line 1818 ----------------------------------------
        .                       CompareImplTypeObligation { span, .. } => span,
        .                   }
        .               }
        .           
        .               pub fn from_obligation_cause<F>(cause: &traits::ObligationCause<'tcx>, default: F) -> Self
        .               where
        .                   F: FnOnce() -> Self,
        .               {
   36,627 ( 0.00%)          match *cause.code() {
    7,232 ( 0.00%)              traits::ObligationCauseCode::ReferenceOutlivesReferent(ref_type) => {
   36,160 ( 0.00%)                  SubregionOrigin::ReferenceOutlivesReferent(ref_type, cause.span)
        .                       }
        .           
        .                       traits::ObligationCauseCode::CompareImplMethodObligation {
        .                           impl_item_def_id,
        .                           trait_item_def_id,
        .                       } => SubregionOrigin::CompareImplMethodObligation {
        .                           span: cause.span,
        .                           impl_item_def_id,
-- line 1836 ----------------------------------------

2,852,916 ( 0.07%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs
--------------------------------------------------------------------------------
Ir                  

-- line 57 ----------------------------------------
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
         .                   ///
         .                   /// ```
         .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::from_str_radix(\"A\", 16), Ok(10));")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
     2,686 ( 0.00%)          pub fn from_str_radix(src: &str, radix: u32) -> Result<Self, ParseIntError> {
     1,343 ( 0.00%)              from_str_radix(src, radix)
     4,029 ( 0.00%)          }
         .           
         .                   /// Returns the number of ones in the binary representation of `self`.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
         .                   ///
         .                   /// ```
-- line 75 ----------------------------------------
-- line 80 ----------------------------------------
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
         .                   #[doc(alias = "popcount")]
         .                   #[doc(alias = "popcnt")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn count_ones(self) -> u32 {
   303,855 ( 0.01%)              intrinsics::ctpop(self as $ActualT) as u32
         .                   }
         .           
         .                   /// Returns the number of zeros in the binary representation of `self`.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
         .                   ///
-- line 96 ----------------------------------------
-- line 118 ----------------------------------------
         .                   /// assert_eq!(n.leading_zeros(), 2);
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn leading_zeros(self) -> u32 {
   770,302 ( 0.02%)              intrinsics::ctlz(self as $ActualT) as u32
         .                   }
         .           
         .                   /// Returns the number of trailing zeros in the binary representation
         .                   /// of `self`.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 134 ----------------------------------------
-- line 139 ----------------------------------------
         .                   /// assert_eq!(n.trailing_zeros(), 3);
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn trailing_zeros(self) -> u32 {
   642,793 ( 0.02%)              intrinsics::cttz(self) as u32
         .                   }
         .           
         .                   /// Returns the number of leading ones in the binary representation of `self`.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
         .                   ///
-- line 155 ----------------------------------------
-- line 204 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(n.rotate_left(", $rot, "), m);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn rotate_left(self, n: u32) -> Self {
29,350,481 ( 0.69%)              intrinsics::rotate_left(self, n as $SelfT)
         .                   }
         .           
         .                   /// Shifts the bits to the right by a specified amount, `n`,
         .                   /// wrapping the truncated bits to the beginning of the resulting
         .                   /// integer.
         .                   ///
         .                   /// Please note this isn't the same operation as the `>>` shifting operator!
         .                   ///
-- line 220 ----------------------------------------
-- line 429 ----------------------------------------
         .                   )]
         .                   #[doc = concat!("assert_eq!((", stringify!($SelfT), "::MAX - 2).checked_add(3), None);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_checked_int_methods", since = "1.47.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline]
   179,985 ( 0.00%)          pub const fn checked_add(self, rhs: Self) -> Option<Self> {
   143,992 ( 0.00%)              let (a, b) = self.overflowing_add(rhs);
   359,970 ( 0.01%)              if unlikely!(b) {None} else {Some(a)}
   143,988 ( 0.00%)          }
         .           
         .                   /// Unchecked integer addition. Computes `self + rhs`, assuming overflow
         .                   /// cannot occur.
         .                   ///
         .                   /// # Safety
         .                   ///
         .                   /// This results in undefined behavior when
         .                   #[doc = concat!("`self + rhs > ", stringify!($SelfT), "::MAX` or `self + rhs < ", stringify!($SelfT), "::MIN`,")]
-- line 448 ----------------------------------------
-- line 456 ----------------------------------------
         .                   )]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
         .                   #[inline(always)]
         .                   pub const unsafe fn unchecked_add(self, rhs: Self) -> Self {
         .                       // SAFETY: the caller must uphold the safety contract for
         .                       // `unchecked_add`.
 1,568,019 ( 0.04%)              unsafe { intrinsics::unchecked_add(self, rhs) }
         .                   }
         .           
         .                   /// Checked addition with a signed integer. Computes `self + rhs`,
         .                   /// returning `None` if overflow occurred.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 472 ----------------------------------------
-- line 525 ----------------------------------------
         .                   )]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
         .                   #[inline(always)]
         .                   pub const unsafe fn unchecked_sub(self, rhs: Self) -> Self {
         .                       // SAFETY: the caller must uphold the safety contract for
         .                       // `unchecked_sub`.
   116,530 ( 0.00%)              unsafe { intrinsics::unchecked_sub(self, rhs) }
         .                   }
         .           
         .                   /// Checked integer multiplication. Computes `self * rhs`, returning
         .                   /// `None` if overflow occurred.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 541 ----------------------------------------
-- line 544 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(5", stringify!($SelfT), ".checked_mul(1), Some(5));")]
         .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.checked_mul(2), None);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_checked_int_methods", since = "1.47.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline]
   264,834 ( 0.01%)          pub const fn checked_mul(self, rhs: Self) -> Option<Self> {
   176,556 ( 0.00%)              let (a, b) = self.overflowing_mul(rhs);
   441,390 ( 0.01%)              if unlikely!(b) {None} else {Some(a)}
   176,556 ( 0.00%)          }
         .           
         .                   /// Unchecked integer multiplication. Computes `self * rhs`, assuming overflow
         .                   /// cannot occur.
         .                   ///
         .                   /// # Safety
         .                   ///
         .                   /// This results in undefined behavior when
         .                   #[doc = concat!("`self * rhs > ", stringify!($SelfT), "::MAX` or `self * rhs < ", stringify!($SelfT), "::MIN`,")]
-- line 563 ----------------------------------------
-- line 1035 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.saturating_add(127), ", stringify!($SelfT), "::MAX);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
         .                   #[inline(always)]
         .                   pub const fn saturating_add(self, rhs: Self) -> Self {
   320,518 ( 0.01%)              intrinsics::saturating_add(self, rhs)
       571 ( 0.00%)          }
         .           
         .                   /// Saturating addition with a signed integer. Computes `self + rhs`,
         .                   /// saturating at the numeric bounds instead of overflowing.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
         .                   ///
-- line 1052 ----------------------------------------
-- line 1084 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(13", stringify!($SelfT), ".saturating_sub(127), 0);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
         .                   #[inline(always)]
         .                   pub const fn saturating_sub(self, rhs: Self) -> Self {
     6,830 ( 0.00%)              intrinsics::saturating_sub(self, rhs)
         .                   }
         .           
         .                   /// Saturating integer multiplication. Computes `self * rhs`,
         .                   /// saturating at the numeric bounds instead of overflowing.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 1100 ----------------------------------------
-- line 1175 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(200", stringify!($SelfT), ".wrapping_add(", stringify!($SelfT), "::MAX), 199);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn wrapping_add(self, rhs: Self) -> Self {
16,068,020 ( 0.38%)              intrinsics::wrapping_add(self, rhs)
         .                   }
         .           
         .                   /// Wrapping (modular) addition with a signed integer. Computes
         .                   /// `self + rhs`, wrapping around at the boundary of the type.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 1191 ----------------------------------------
-- line 1217 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(100", stringify!($SelfT), ".wrapping_sub(", stringify!($SelfT), "::MAX), 101);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn wrapping_sub(self, rhs: Self) -> Self {
 3,578,963 ( 0.08%)              intrinsics::wrapping_sub(self, rhs)
         .                   }
         .           
         .                   /// Wrapping (modular) multiplication. Computes `self *
         .                   /// rhs`, wrapping around at the boundary of the type.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 1233 ----------------------------------------
-- line 1240 ----------------------------------------
         .                   /// assert_eq!(25u8.wrapping_mul(12), 44);
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn wrapping_mul(self, rhs: Self) -> Self {
11,655,976 ( 0.27%)              intrinsics::wrapping_mul(self, rhs)
         .                   }
         .           
         .                   /// Wrapping (modular) division. Computes `self / rhs`.
         .                   /// Wrapped division on unsigned types is just normal division.
         .                   /// There's no way wrapping could ever happen.
         .                   /// This function exists, so that all operations
         .                   /// are accounted for in the wrapping operations.
         .                   ///
-- line 1256 ----------------------------------------
-- line 1397 ----------------------------------------
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn wrapping_shl(self, rhs: u32) -> Self {
         .                       // SAFETY: the masking by the bitsize of the type ensures that we do not shift
         .                       // out of bounds
         .                       unsafe {
         4 ( 0.00%)                  intrinsics::unchecked_shl(self, (rhs & ($BITS - 1)) as $SelfT)
         .                       }
         .                   }
         .           
         .                   /// Panic-free bitwise shift-right; yields `self >> mask(rhs)`,
         .                   /// where `mask` removes any high-order bits of `rhs` that
         .                   /// would cause the shift to exceed the bitwidth of the type.
         .                   ///
         .                   /// Note that this is *not* the same as a rotate-right; the
-- line 1413 ----------------------------------------
-- line 1492 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.overflowing_add(1), (0, true));")]
         .                   /// ```
         .                   #[stable(feature = "wrapping", since = "1.7.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn overflowing_add(self, rhs: Self) -> (Self, bool) {
 1,835,691 ( 0.04%)              let (a, b) = intrinsics::add_with_overflow(self as $ActualT, rhs as $ActualT);
    71,994 ( 0.00%)              (a as Self, b)
   143,988 ( 0.00%)          }
         .           
         .                   /// Calculates `self + rhs + carry` without the ability to overflow.
         .                   ///
         .                   /// Performs "ternary addition" which takes in an extra bit to add, and may return an
         .                   /// additional bit of overflow. This allows for chaining together multiple additions
         .                   /// to create "big integers" which represent larger values.
         .                   ///
         .                   #[doc = concat!("This can be thought of as a ", stringify!($BITS), "-bit \"full adder\", in the electronics sense.")]
-- line 1510 ----------------------------------------
-- line 1588 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(0", stringify!($SelfT), ".overflowing_sub(1), (", stringify!($SelfT), "::MAX, true));")]
         .                   /// ```
         .                   #[stable(feature = "wrapping", since = "1.7.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn overflowing_sub(self, rhs: Self) -> (Self, bool) {
   600,995 ( 0.01%)              let (a, b) = intrinsics::sub_with_overflow(self as $ActualT, rhs as $ActualT);
         .                       (a as Self, b)
         .                   }
         .           
         .                   /// Calculates `self - rhs - borrow` without the ability to overflow.
         .                   ///
         .                   /// Performs "ternary subtraction" which takes in an extra bit to subtract, and may return
         .                   /// an additional bit of overflow. This allows for chaining together multiple subtractions
         .                   /// to create "big integers" which represent larger values.
-- line 1604 ----------------------------------------
-- line 1674 ----------------------------------------
         .                   /// assert_eq!(1_000_000_000u32.overflowing_mul(10), (1410065408, true));
         .                   /// ```
         .                   #[stable(feature = "wrapping", since = "1.7.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                     without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn overflowing_mul(self, rhs: Self) -> (Self, bool) {
 3,414,654 ( 0.08%)              let (a, b) = intrinsics::mul_with_overflow(self as $ActualT, rhs as $ActualT);
    88,278 ( 0.00%)              (a as Self, b)
   176,556 ( 0.00%)          }
         .           
         .                   /// Calculates the divisor when `self` is divided by `rhs`.
         .                   ///
         .                   /// Returns a tuple of the divisor along with a boolean indicating
         .                   /// whether an arithmetic overflow would occur. Note that for unsigned
         .                   /// integers overflow never occurs, so the second value is always
         .                   /// `false`.
         .                   ///
-- line 1692 ----------------------------------------
-- line 2132 ----------------------------------------
         .                   #[doc = concat!("assert!(16", stringify!($SelfT), ".is_power_of_two());")]
         .                   #[doc = concat!("assert!(!10", stringify!($SelfT), ".is_power_of_two());")]
         .                   /// ```
         .                   #[must_use]
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_is_power_of_two", since = "1.32.0")]
         .                   #[inline(always)]
         .                   pub const fn is_power_of_two(self) -> bool {
       186 ( 0.00%)              self.count_ones() == 1
         .                   }
         .           
         .                   // Returns one less than next power of two.
         .                   // (For 8u8 next power of two is 8u8 and for 6u8 it is 8u8)
         .                   //
         .                   // 8u8.one_less_than_next_power_of_two() == 7
         .                   // 6u8.one_less_than_next_power_of_two() == 7
         .                   //
         .                   // This method cannot overflow, as in the `next_power_of_two`
         .                   // overflow cases it instead ends up returning the maximum value
         .                   // of the type, and can return 0 for 0.
         .                   #[inline]
         .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
         .                   const fn one_less_than_next_power_of_two(self) -> Self {
    53,244 ( 0.00%)              if self <= 1 { return 0; }
         .           
    73,605 ( 0.00%)              let p = self - 1;
         .                       // SAFETY: Because `p > 0`, it cannot consist entirely of leading zeros.
         .                       // That means the shift is always in-bounds, and some processors
         .                       // (such as intel pre-haswell) have more efficient ctlz
         .                       // intrinsics when the argument is non-zero.
   220,693 ( 0.01%)              let z = unsafe { intrinsics::ctlz_nonzero(p) };
    73,647 ( 0.00%)              <$SelfT>::MAX >> z
         .                   }
         .           
         .                   /// Returns the smallest power of two greater than or equal to `self`.
         .                   ///
         .                   /// When return value overflows (i.e., `self > (1 << (N-1))` for type
         .                   /// `uN`), it panics in debug mode and the return value is wrapped to 0 in
         .                   /// release mode (the only situation in which method can return 0).
         .                   ///
-- line 2171 ----------------------------------------
-- line 2179 ----------------------------------------
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline]
         .                   #[rustc_inherit_overflow_checks]
         .                   pub const fn next_power_of_two(self) -> Self {
    93,926 ( 0.00%)              self.one_less_than_next_power_of_two() + 1
         .                   }
         .           
         .                   /// Returns the smallest power of two greater than or equal to `n`. If
         .                   /// the next power of two is greater than the type's maximum value,
         .                   /// `None` is returned, otherwise the power of two is wrapped in `Some`.
         .                   ///
         .                   /// # Examples
         .                   ///
-- line 2195 ----------------------------------------
-- line 2264 ----------------------------------------
         .                   #[doc = concat!("let bytes = ", $swap_op, stringify!($SelfT), ".to_le_bytes();")]
         .                   #[doc = concat!("assert_eq!(bytes, ", $le_bytes, ");")]
         .                   /// ```
         .                   #[stable(feature = "int_to_from_bytes", since = "1.32.0")]
         .                   #[rustc_const_stable(feature = "const_int_conversion", since = "1.44.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline]
       295 ( 0.00%)          pub const fn to_le_bytes(self) -> [u8; mem::size_of::<Self>()] {
       236 ( 0.00%)              self.to_le().to_ne_bytes()
       177 ( 0.00%)          }
         .           
         .                   /// Return the memory representation of this integer as a byte array in
         .                   /// native byte order.
         .                   ///
         .                   /// As the target platform's native endianness is used, portable code
         .                   /// should use [`to_be_bytes`] or [`to_le_bytes`], as appropriate,
         .                   /// instead.
         .                   ///
-- line 2282 ----------------------------------------
-- line 2300 ----------------------------------------
         .                   /// ```
         .                   #[stable(feature = "int_to_from_bytes", since = "1.32.0")]
         .                   #[rustc_const_stable(feature = "const_int_conversion", since = "1.44.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   // SAFETY: const sound because integers are plain old datatypes so we can always
         .                   // transmute them to arrays of bytes
         .                   #[inline]
       118 ( 0.00%)          pub const fn to_ne_bytes(self) -> [u8; mem::size_of::<Self>()] {
         .                       // SAFETY: integers are plain old datatypes so we can always transmute them to
         .                       // arrays of bytes
        59 ( 0.00%)              unsafe { mem::transmute(self) }
       177 ( 0.00%)          }
         .           
         .                   /// Create a native endian integer value from its representation
         .                   /// as a byte array in big endian.
         .                   ///
         .                   #[doc = $from_xe_bytes_doc]
         .                   ///
         .                   /// # Examples
         .                   ///
-- line 2320 ----------------------------------------
-- line 2360 ----------------------------------------
         .                   ///     *input = rest;
         .                   #[doc = concat!("    ", stringify!($SelfT), "::from_le_bytes(int_bytes.try_into().unwrap())")]
         .                   /// }
         .                   /// ```
         .                   #[stable(feature = "int_to_from_bytes", since = "1.32.0")]
         .                   #[rustc_const_stable(feature = "const_int_conversion", since = "1.44.0")]
         .                   #[must_use]
         .                   #[inline]
       236 ( 0.00%)          pub const fn from_le_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {
       295 ( 0.00%)              Self::from_le(Self::from_ne_bytes(bytes))
       118 ( 0.00%)          }
         .           
         .                   /// Create a native endian integer value from its memory representation
         .                   /// as a byte array in native endianness.
         .                   ///
         .                   /// As the target platform's native endianness is used, portable code
         .                   /// likely wants to use [`from_be_bytes`] or [`from_le_bytes`], as
         .                   /// appropriate instead.
         .                   ///
-- line 2378 ----------------------------------------
-- line 2402 ----------------------------------------
         .                   /// }
         .                   /// ```
         .                   #[stable(feature = "int_to_from_bytes", since = "1.32.0")]
         .                   #[rustc_const_stable(feature = "const_int_conversion", since = "1.44.0")]
         .                   #[must_use]
         .                   // SAFETY: const sound because integers are plain old datatypes so we can always
         .                   // transmute to them
         .                   #[inline]
       236 ( 0.00%)          pub const fn from_ne_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {
         .                       // SAFETY: integers are plain old datatypes so we can always transmute to them
       354 ( 0.00%)              unsafe { mem::transmute(bytes) }
       118 ( 0.00%)          }
         .           
         .                   /// New code should prefer to use
         .                   #[doc = concat!("[`", stringify!($SelfT), "::MIN", "`] instead.")]
         .                   ///
         .                   /// Returns the smallest value that can be represented by this integer type.
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_promotable]
         .                   #[inline(always)]
-- line 2421 ----------------------------------------

   680,229 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/buffer.rs
--------------------------------------------------------------------------------
Ir                 

-- line 13 ----------------------------------------
        .               reserve: extern "C" fn(Buffer<T>, usize) -> Buffer<T>,
        .               drop: extern "C" fn(Buffer<T>),
        .           }
        .           
        .           unsafe impl<T: Copy + Sync> Sync for Buffer<T> {}
        .           unsafe impl<T: Copy + Send> Send for Buffer<T> {}
        .           
        .           impl<T: Copy> Default for Buffer<T> {
    1,062 ( 0.00%)      fn default() -> Self {
    1,416 ( 0.00%)          Self::from(vec![])
      708 ( 0.00%)      }
        .           }
        .           
        .           impl<T: Copy> Deref for Buffer<T> {
        .               type Target = [T];
      177 ( 0.00%)      fn deref(&self) -> &[T] {
1,334,684 ( 0.03%)          unsafe { slice::from_raw_parts(self.data as *const T, self.len) }
      118 ( 0.00%)      }
        .           }
        .           
        .           impl<T: Copy> DerefMut for Buffer<T> {
        .               fn deref_mut(&mut self) -> &mut [T] {
        .                   unsafe { slice::from_raw_parts_mut(self.data, self.len) }
        .               }
        .           }
        .           
        .           impl<T: Copy> Buffer<T> {
        .               pub(super) fn new() -> Self {
        .                   Self::default()
        .               }
        .           
      118 ( 0.00%)      pub(super) fn clear(&mut self) {
2,817,580 ( 0.07%)          self.len = 0;
      118 ( 0.00%)      }
        .           
    1,416 ( 0.00%)      pub(super) fn take(&mut self) -> Self {
      354 ( 0.00%)          mem::take(self)
      708 ( 0.00%)      }
        .           
        .               // We have the array method separate from extending from a slice. This is
        .               // because in the case of small arrays, codegen can be more efficient
        .               // (avoiding a memmove call). With extend_from_slice, LLVM at least
        .               // currently is not able to make that optimization.
      295 ( 0.00%)      pub(super) fn extend_from_array<const N: usize>(&mut self, xs: &[T; N]) {
6,095,812 ( 0.14%)          if xs.len() > (self.capacity - self.len) {
        .                       let b = self.take();
    2,478 ( 0.00%)              *self = (b.reserve)(b, xs.len());
        .                   }
        .                   unsafe {
1,048,820 ( 0.02%)              xs.as_ptr().copy_to_nonoverlapping(self.data.add(self.len), xs.len());
3,171,676 ( 0.07%)              self.len += xs.len();
        .                   }
      118 ( 0.00%)      }
        .           
  163,686 ( 0.00%)      pub(super) fn extend_from_slice(&mut self, xs: &[T]) {
  274,362 ( 0.01%)          if xs.len() > (self.capacity - self.len) {
        .                       let b = self.take();
    3,297 ( 0.00%)              *self = (b.reserve)(b, xs.len());
        .                   }
        .                   unsafe {
      157 ( 0.00%)              xs.as_ptr().copy_to_nonoverlapping(self.data.add(self.len), xs.len());
  137,181 ( 0.00%)              self.len += xs.len();
        .                   }
  190,967 ( 0.00%)      }
        .           
      354 ( 0.00%)      pub(super) fn push(&mut self, v: T) {
        .                   // The code here is taken from Vec::push, and we know that reserve()
        .                   // will panic if we're exceeding isize::MAX bytes and so there's no need
        .                   // to check for overflow.
6,942,408 ( 0.16%)          if self.len == self.capacity {
        .                       let b = self.take();
        .                       *self = (b.reserve)(b, 1);
        .                   }
        .                   unsafe {
4,514,718 ( 0.11%)              *self.data.add(self.len) = v;
4,060,424 ( 0.10%)              self.len += 1;
        .                   }
      118 ( 0.00%)      }
        .           }
        .           
        .           impl Write for Buffer<u8> {
        .               fn write(&mut self, xs: &[u8]) -> io::Result<usize> {
        .                   self.extend_from_slice(xs);
        .                   Ok(xs.len())
        .               }
        .           
  110,676 ( 0.00%)      fn write_all(&mut self, xs: &[u8]) -> io::Result<()> {
   81,843 ( 0.00%)          self.extend_from_slice(xs);
        .                   Ok(())
  166,014 ( 0.00%)      }
        .           
        .               fn flush(&mut self) -> io::Result<()> {
        .                   Ok(())
        .               }
        .           }
        .           
        .           impl<T: Copy> Drop for Buffer<T> {
      531 ( 0.00%)      fn drop(&mut self) {
      354 ( 0.00%)          let b = self.take();
7,073,127 ( 0.17%)          (b.drop)(b);
      354 ( 0.00%)      }
        .           }
        .           
        .           impl<T: Copy> From<Vec<T>> for Buffer<T> {
    2,124 ( 0.00%)      fn from(mut v: Vec<T>) -> Self {
    9,204 ( 0.00%)          let (data, len, capacity) = (v.as_mut_ptr(), v.len(), v.capacity());
    2,832 ( 0.00%)          mem::forget(v);
        .           
        .                   // This utility function is nested in here because it can *only*
        .                   // be safely called on `Buffer`s created by *this* `proc_macro`.
      531 ( 0.00%)          fn to_vec<T: Copy>(b: Buffer<T>) -> Vec<T> {
        .                       unsafe {
    1,593 ( 0.00%)                  let Buffer { data, len, capacity, .. } = b;
      885 ( 0.00%)                  mem::forget(b);
      177 ( 0.00%)                  Vec::from_raw_parts(data, len, capacity)
        .                       }
      354 ( 0.00%)          }
        .           
    1,100 ( 0.00%)          extern "C" fn reserve<T: Copy>(b: Buffer<T>, additional: usize) -> Buffer<T> {
      825 ( 0.00%)              let mut v = to_vec(b);
        .                       v.reserve(additional);
      825 ( 0.00%)              Buffer::from(v)
    1,100 ( 0.00%)          }
        .           
      354 ( 0.00%)          extern "C" fn drop<T: Copy>(b: Buffer<T>) {
  590,681 ( 0.01%)              mem::drop(to_vec(b));
  589,501 ( 0.01%)          }
        .           
    4,875 ( 0.00%)          Buffer { data, len, capacity, reserve, drop }
      708 ( 0.00%)      }
        .           }

2,750,420 ( 0.06%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/buffer.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/scoped_cell.rs
--------------------------------------------------------------------------------
Ir                 

-- line 22 ----------------------------------------
        .           impl<'a, 'b, T: LambdaL> Deref for RefMutL<'a, 'b, T> {
        .               type Target = <T as ApplyL<'b>>::Out;
        .               fn deref(&self) -> &Self::Target {
        .                   self.0
        .               }
        .           }
        .           
        .           impl<'a, 'b, T: LambdaL> DerefMut for RefMutL<'a, 'b, T> {
      236 ( 0.00%)      fn deref_mut(&mut self) -> &mut Self::Target {
      118 ( 0.00%)          self.0
      236 ( 0.00%)      }
        .           }
        .           
        .           pub struct ScopedCell<T: LambdaL>(Cell<<T as ApplyL<'static>>::Out>);
        .           
        .           impl<T: LambdaL> ScopedCell<T> {
        .               #[rustc_allow_const_fn_unstable(const_fn)]
        3 ( 0.00%)      pub const fn new(value: <T as ApplyL<'static>>::Out) -> Self {
       10 ( 0.00%)          ScopedCell(Cell::new(value))
        2 ( 0.00%)      }
        .           
        .               /// Sets the value in `self` to `replacement` while
        .               /// running `f`, which gets the old value, mutably.
        .               /// The old value will be restored after `f` exits, even
        .               /// by panic, including modifications made to it by `f`.
4,328,588 ( 0.10%)      pub fn replace<'a, R>(
        .                   &self,
        .                   replacement: <T as ApplyL<'a>>::Out,
        .                   f: impl for<'b, 'c> FnOnce(RefMutL<'b, 'c, T>) -> R,
        .               ) -> R {
        .                   /// Wrapper that ensures that the cell always gets filled
        .                   /// (with the original state, optionally changed by `f`),
        .                   /// even if `f` had panicked.
        .                   struct PutBackOnDrop<'a, T: LambdaL> {
        .                       cell: &'a ScopedCell<T>,
        .                       value: Option<<T as ApplyL<'static>>::Out>,
        .                   }
        .           
        .                   impl<'a, T: LambdaL> Drop for PutBackOnDrop<'a, T> {
      531 ( 0.00%)              fn drop(&mut self) {
  591,095 ( 0.01%)                  self.cell.0.set(self.value.take().unwrap());
      354 ( 0.00%)              }
        .                   }
        .           
1,181,304 ( 0.03%)          let mut put_back_on_drop = PutBackOnDrop {
        .                       cell: self,
    1,770 ( 0.00%)              value: Some(self.0.replace(unsafe {
      354 ( 0.00%)                  let erased = mem::transmute_copy(&replacement);
    2,124 ( 0.00%)                  mem::forget(replacement);
    1,770 ( 0.00%)                  erased
        .                       })),
        .                   };
        .           
  313,211 ( 0.01%)          f(RefMutL(put_back_on_drop.value.as_mut().unwrap()))
5,736,143 ( 0.13%)      }
        .           
        .               /// Sets the value in `self` to `value` while running `f`.
      413 ( 0.00%)      pub fn set<R>(&self, value: <T as ApplyL<'_>>::Out, f: impl FnOnce() -> R) -> R {
      944 ( 0.00%)          self.replace(value, |_| f())
      118 ( 0.00%)      }
        .           }

  281,590 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/scoped_cell.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cmp.rs
--------------------------------------------------------------------------------
Ir                  

-- line 222 ----------------------------------------
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               fn eq(&self, other: &Rhs) -> bool;
         .           
         .               /// This method tests for `!=`.
         .               #[inline]
         .               #[must_use]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[default_method_body_is_const]
    33,045 ( 0.00%)      fn ne(&self, other: &Rhs) -> bool {
    75,235 ( 0.00%)          !self.eq(other)
    44,060 ( 0.00%)      }
         .           }
         .           
         .           /// Derive macro generating an impl of the trait `PartialEq`.
         .           #[rustc_builtin_macro]
         .           #[stable(feature = "builtin_macro_prelude", since = "1.38.0")]
         .           #[allow_internal_unstable(core_intrinsics, structural_match)]
         .           pub macro PartialEq($item:item) {
         .               /* compiler built-in */
-- line 240 ----------------------------------------
-- line 328 ----------------------------------------
         .           /// assert_eq!(Ordering::Less, result);
         .           ///
         .           /// let result = 1.cmp(&1);
         .           /// assert_eq!(Ordering::Equal, result);
         .           ///
         .           /// let result = 2.cmp(&1);
         .           /// assert_eq!(Ordering::Greater, result);
         .           /// ```
       464 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Debug, Hash)]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           #[repr(i8)]
         .           pub enum Ordering {
         .               /// An ordering where a compared value is less than another.
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               Less = -1,
         .               /// An ordering where a compared value is equal to another.
         .               #[stable(feature = "rust1", since = "1.0.0")]
-- line 344 ----------------------------------------
-- line 569 ----------------------------------------
         .               /// let result = x.0.cmp(&y.0).then_with(|| x.1.cmp(&y.1)).then_with(|| x.2.cmp(&y.2));
         .               ///
         .               /// assert_eq!(result, Ordering::Less);
         .               /// ```
         .               #[inline]
         .               #[must_use]
         .               #[stable(feature = "ordering_chaining", since = "1.17.0")]
         .               pub fn then_with<F: FnOnce() -> Ordering>(self, f: F) -> Ordering {
       675 ( 0.00%)          match self {
         .                       Equal => f(),
         .                       _ => self,
         .                   }
         .               }
         .           }
         .           
         .           /// A helper struct for reverse ordering.
         .           ///
-- line 585 ----------------------------------------
-- line 788 ----------------------------------------
         .               ///
         .               /// ```
         .               /// assert_eq!(2, 1.max(2));
         .               /// assert_eq!(2, 2.max(2));
         .               /// ```
         .               #[stable(feature = "ord_max_min", since = "1.21.0")]
         .               #[inline]
         .               #[must_use]
   215,109 ( 0.01%)      fn max(self, other: Self) -> Self
         .               where
         .                   Self: Sized,
         .               {
   366,604 ( 0.01%)          max_by(self, other, Ord::cmp)
   143,406 ( 0.00%)      }
         .           
         .               /// Compares and returns the minimum of two values.
         .               ///
         .               /// Returns the first argument if the comparison determines them to be equal.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
-- line 809 ----------------------------------------
-- line 812 ----------------------------------------
         .               /// ```
         .               #[stable(feature = "ord_max_min", since = "1.21.0")]
         .               #[inline]
         .               #[must_use]
         .               fn min(self, other: Self) -> Self
         .               where
         .                   Self: Sized,
         .               {
    16,508 ( 0.00%)          min_by(self, other, Ord::cmp)
         .               }
         .           
         .               /// Restrict a value to a certain interval.
         .               ///
         .               /// Returns `max` if `self` is greater than `max`, and `min` if `self` is
         .               /// less than `min`. Otherwise this returns `self`.
         .               ///
         .               /// # Panics
-- line 828 ----------------------------------------
-- line 1097 ----------------------------------------
         .               /// let result = 2.0 < 1.0;
         .               /// assert_eq!(result, false);
         .               /// ```
         .               #[inline]
         .               #[must_use]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[default_method_body_is_const]
         .               fn lt(&self, other: &Rhs) -> bool {
    69,480 ( 0.00%)          matches!(self.partial_cmp(other), Some(Less))
         .               }
         .           
         .               /// This method tests less than or equal to (for `self` and `other`) and is used by the `<=`
         .               /// operator.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
-- line 1113 ----------------------------------------
-- line 1121 ----------------------------------------
         .               #[must_use]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[default_method_body_is_const]
         .               fn le(&self, other: &Rhs) -> bool {
         .                   // Pattern `Some(Less | Eq)` optimizes worse than negating `None | Some(Greater)`.
         .                   // FIXME: The root cause was fixed upstream in LLVM with:
         .                   // https://github.com/llvm/llvm-project/commit/9bad7de9a3fb844f1ca2965f35d0c2a3d1e11775
         .                   // Revert this workaround once support for LLVM 12 gets dropped.
   732,444 ( 0.02%)          !matches!(self.partial_cmp(other), None | Some(Greater))
         .               }
         .           
         .               /// This method tests greater than (for `self` and `other`) and is used by the `>` operator.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let result = 1.0 > 2.0;
-- line 1137 ----------------------------------------
-- line 1140 ----------------------------------------
         .               /// let result = 2.0 > 2.0;
         .               /// assert_eq!(result, false);
         .               /// ```
         .               #[inline]
         .               #[must_use]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[default_method_body_is_const]
         .               fn gt(&self, other: &Rhs) -> bool {
 1,368,052 ( 0.03%)          matches!(self.partial_cmp(other), Some(Greater))
         .               }
         .           
         .               /// This method tests greater than or equal to (for `self` and `other`) and is used by the `>=`
         .               /// operator.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
-- line 1156 ----------------------------------------
-- line 1159 ----------------------------------------
         .               ///
         .               /// let result = 2.0 >= 2.0;
         .               /// assert_eq!(result, true);
         .               /// ```
         .               #[inline]
         .               #[must_use]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[default_method_body_is_const]
       183 ( 0.00%)      fn ge(&self, other: &Rhs) -> bool {
       963 ( 0.00%)          matches!(self.partial_cmp(other), Some(Greater | Equal))
       305 ( 0.00%)      }
         .           }
         .           
         .           /// Derive macro generating an impl of the trait `PartialOrd`.
         .           #[rustc_builtin_macro]
         .           #[stable(feature = "builtin_macro_prelude", since = "1.38.0")]
         .           #[allow_internal_unstable(core_intrinsics)]
         .           pub macro PartialOrd($item:item) {
         .               /* compiler built-in */
-- line 1177 ----------------------------------------
-- line 1210 ----------------------------------------
         .           ///
         .           /// assert_eq!(cmp::min_by(-2, 1, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), 1);
         .           /// assert_eq!(cmp::min_by(-2, 2, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), -2);
         .           /// ```
         .           #[inline]
         .           #[must_use]
         .           #[stable(feature = "cmp_min_max_by", since = "1.53.0")]
         .           pub fn min_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T {
 1,059,564 ( 0.02%)      match compare(&v1, &v2) {
         .                   Ordering::Less | Ordering::Equal => v1,
         .                   Ordering::Greater => v2,
         .               }
         2 ( 0.00%)  }
         .           
         .           /// Returns the element that gives the minimum value from the specified function.
         .           ///
         .           /// Returns the first argument if the comparison determines them to be equal.
         .           ///
         .           /// # Examples
         .           ///
         .           /// ```
-- line 1230 ----------------------------------------
-- line 1231 ----------------------------------------
         .           /// use std::cmp;
         .           ///
         .           /// assert_eq!(cmp::min_by_key(-2, 1, |x: &i32| x.abs()), 1);
         .           /// assert_eq!(cmp::min_by_key(-2, 2, |x: &i32| x.abs()), -2);
         .           /// ```
         .           #[inline]
         .           #[must_use]
         .           #[stable(feature = "cmp_min_max_by", since = "1.53.0")]
        12 ( 0.00%)  pub fn min_by_key<T, F: FnMut(&T) -> K, K: Ord>(v1: T, v2: T, mut f: F) -> T {
         8 ( 0.00%)      min_by(v1, v2, |v1, v2| f(v1).cmp(&f(v2)))
         8 ( 0.00%)  }
         .           
         .           /// Compares and returns the maximum of two values.
         .           ///
         .           /// Returns the second argument if the comparison determines them to be equal.
         .           ///
         .           /// Internally uses an alias to [`Ord::max`].
         .           ///
         .           /// # Examples
-- line 1249 ----------------------------------------
-- line 1253 ----------------------------------------
         .           ///
         .           /// assert_eq!(2, cmp::max(1, 2));
         .           /// assert_eq!(2, cmp::max(2, 2));
         .           /// ```
         .           #[inline]
         .           #[must_use]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           #[cfg_attr(not(test), rustc_diagnostic_item = "cmp_max")]
   215,109 ( 0.01%)  pub fn max<T: Ord>(v1: T, v2: T) -> T {
   143,406 ( 0.00%)      v1.max(v2)
   143,406 ( 0.00%)  }
         .           
         .           /// Returns the maximum of two values with respect to the specified comparison function.
         .           ///
         .           /// Returns the second argument if the comparison determines them to be equal.
         .           ///
         .           /// # Examples
         .           ///
         .           /// ```
-- line 1271 ----------------------------------------
-- line 1272 ----------------------------------------
         .           /// use std::cmp;
         .           ///
         .           /// assert_eq!(cmp::max_by(-2, 1, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), -2);
         .           /// assert_eq!(cmp::max_by(-2, 2, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), 2);
         .           /// ```
         .           #[inline]
         .           #[must_use]
         .           #[stable(feature = "cmp_min_max_by", since = "1.53.0")]
   215,144 ( 0.01%)  pub fn max_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T {
 2,378,580 ( 0.06%)      match compare(&v1, &v2) {
   159,366 ( 0.00%)          Ordering::Less | Ordering::Equal => v2,
   102,402 ( 0.00%)          Ordering::Greater => v1,
         .               }
   607,798 ( 0.01%)  }
         .           
         .           /// Returns the element that gives the maximum value from the specified function.
         .           ///
         .           /// Returns the second argument if the comparison determines them to be equal.
         .           ///
         .           /// # Examples
         .           ///
         .           /// ```
-- line 1293 ----------------------------------------
-- line 1308 ----------------------------------------
         .               use crate::cmp::Ordering::{self, Equal, Greater, Less};
         .               use crate::hint::unreachable_unchecked;
         .           
         .               macro_rules! partial_eq_impl {
         .                   ($($t:ty)*) => ($(
         .                       #[stable(feature = "rust1", since = "1.0.0")]
         .                       impl PartialEq for $t {
         .                           #[inline]
    85,386 ( 0.00%)                  fn eq(&self, other: &$t) -> bool { (*self) == (*other) }
         .                           #[inline]
    74,637 ( 0.00%)                  fn ne(&self, other: &$t) -> bool { (*self) != (*other) }
         .                       }
         .                   )*)
         .               }
         .           
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               impl PartialEq for () {
         .                   #[inline]
         .                   fn eq(&self, _other: &()) -> bool {
-- line 1326 ----------------------------------------
-- line 1392 ----------------------------------------
         .                   ($($t:ty)*) => ($(
         .                       #[stable(feature = "rust1", since = "1.0.0")]
         .                       impl PartialOrd for $t {
         .                           #[inline]
         .                           fn partial_cmp(&self, other: &$t) -> Option<Ordering> {
         .                               Some(self.cmp(other))
         .                           }
         .                           #[inline]
 6,860,429 ( 0.16%)                  fn lt(&self, other: &$t) -> bool { (*self) < (*other) }
         .                           #[inline]
   107,572 ( 0.00%)                  fn le(&self, other: &$t) -> bool { (*self) <= (*other) }
         .                           #[inline]
        60 ( 0.00%)                  fn ge(&self, other: &$t) -> bool { (*self) >= (*other) }
         .                           #[inline]
         .                           fn gt(&self, other: &$t) -> bool { (*self) > (*other) }
         .                       }
         .           
         .                       #[stable(feature = "rust1", since = "1.0.0")]
         .                       impl Ord for $t {
         .                           #[inline]
   358,845 ( 0.01%)                  fn cmp(&self, other: &$t) -> Ordering {
         .                               // The order here is important to generate more optimal assembly.
         .                               // See <https://github.com/rust-lang/rust/issues/63758> for more info.
27,737,461 ( 0.65%)                      if *self < *other { Less }
   171,251 ( 0.00%)                      else if *self == *other { Equal }
    34,195 ( 0.00%)                      else { Greater }
   215,307 ( 0.01%)                  }
         .                       }
         .                   )*)
         .               }
         .           
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               impl Ord for () {
         .                   #[inline]
         .                   fn cmp(&self, _other: &()) -> Ordering {
-- line 1426 ----------------------------------------
-- line 1430 ----------------------------------------
         .           
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               impl Ord for bool {
         .                   #[inline]
         .                   fn cmp(&self, other: &bool) -> Ordering {
         .                       // Casting to i8's and converting the difference to an Ordering generates
         .                       // more optimal assembly.
         .                       // See <https://github.com/rust-lang/rust/issues/66780> for more info.
    19,808 ( 0.00%)              match (*self as i8) - (*other as i8) {
         .                           -1 => Less,
         .                           0 => Equal,
         .                           1 => Greater,
         .                           // SAFETY: bool as i8 returns 0 or 1, so the difference can't be anything else
         .                           _ => unsafe { unreachable_unchecked() },
         .                       }
         .                   }
         .               }
-- line 1446 ----------------------------------------
-- line 1474 ----------------------------------------
         .               // & pointers
         .           
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               impl<A: ?Sized, B: ?Sized> PartialEq<&B> for &A
         .               where
         .                   A: PartialEq<B>,
         .               {
         .                   #[inline]
   939,942 ( 0.02%)          fn eq(&self, other: &&B) -> bool {
 3,416,051 ( 0.08%)              PartialEq::eq(*self, *other)
   986,847 ( 0.02%)          }
         .                   #[inline]
       235 ( 0.00%)          fn ne(&self, other: &&B) -> bool {
        66 ( 0.00%)              PartialEq::ne(*self, *other)
    57,905 ( 0.00%)          }
         .               }
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               impl<A: ?Sized, B: ?Sized> PartialOrd<&B> for &A
         .               where
         .                   A: PartialOrd<B>,
         .               {
         .                   #[inline]
         .                   fn partial_cmp(&self, other: &&B) -> Option<Ordering> {
-- line 1496 ----------------------------------------
-- line 1514 ----------------------------------------
         .                   }
         .               }
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               impl<A: ?Sized> Ord for &A
         .               where
         .                   A: Ord,
         .               {
         .                   #[inline]
        15 ( 0.00%)          fn cmp(&self, other: &Self) -> Ordering {
        20 ( 0.00%)              Ord::cmp(*self, *other)
     9,413 ( 0.00%)          }
         .               }
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               impl<A: ?Sized> Eq for &A where A: Eq {}
         .           
         .               // &mut pointers
         .           
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               impl<A: ?Sized, B: ?Sized> PartialEq<&mut B> for &mut A
         .               where
         .                   A: PartialEq<B>,
         .               {
         .                   #[inline]
       468 ( 0.00%)          fn eq(&self, other: &&mut B) -> bool {
       624 ( 0.00%)              PartialEq::eq(*self, *other)
       624 ( 0.00%)          }
         .                   #[inline]
         .                   fn ne(&self, other: &&mut B) -> bool {
         .                       PartialEq::ne(*self, *other)
         .                   }
         .               }
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               impl<A: ?Sized, B: ?Sized> PartialOrd<&mut B> for &mut A
         .               where
-- line 1547 ----------------------------------------

 5,469,970 ( 0.13%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cmp.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/remove.rs
--------------------------------------------------------------------------------
Ir                 

        .           use super::map::MIN_LEN;
        .           use super::node::{marker, ForceResult::*, Handle, LeftOrRight::*, NodeRef};
        .           
        .           impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal>, marker::KV> {
        .               /// Removes a key-value pair from the tree, and returns that pair, as well as
        .               /// the leaf edge corresponding to that former pair. It's possible this empties
        .               /// a root node that is internal, which the caller should pop from the map
        .               /// holding the tree. The caller should also decrement the map's length.
1,101,777 ( 0.03%)      pub fn remove_kv_tracking<F: FnOnce()>(
        .                   self,
        .                   handle_emptied_internal_root: F,
        .               ) -> ((K, V), Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, marker::Edge>) {
  877,824 ( 0.02%)          match self.force() {
1,535,513 ( 0.04%)              Leaf(node) => node.remove_leaf_kv(handle_emptied_internal_root),
        .                       Internal(node) => node.remove_internal_kv(handle_emptied_internal_root),
        .                   }
1,321,233 ( 0.03%)      }
        .           }
        .           
        .           impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, marker::KV> {
1,536,192 ( 0.04%)      fn remove_leaf_kv<F: FnOnce()>(
        .                   self,
        .                   handle_emptied_internal_root: F,
        .               ) -> ((K, V), Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, marker::Edge>) {
1,059,923 ( 0.02%)          let (old_kv, mut pos) = self.remove();
        .                   let len = pos.reborrow().into_node().len();
  438,912 ( 0.01%)          if len < MIN_LEN {
        .                       let idx = pos.idx();
        .                       // We have to temporarily forget the child type, because there is no
        .                       // distinct node type for the immediate parents of a leaf.
        .                       let new_pos = match pos.into_node().forget_type().choose_parent_kv() {
        .                           Ok(Left(left_parent_kv)) => {
        .                               debug_assert!(left_parent_kv.right_child_len() == MIN_LEN - 1);
   20,618 ( 0.00%)                      if left_parent_kv.can_merge() {
  286,228 ( 0.01%)                          left_parent_kv.merge_tracking_child_edge(Right(idx))
        .                               } else {
        .                                   debug_assert!(left_parent_kv.left_child_len() > MIN_LEN);
      541 ( 0.00%)                          left_parent_kv.steal_left(idx)
        .                               }
        .                           }
        .                           Ok(Right(right_parent_kv)) => {
        .                               debug_assert!(right_parent_kv.left_child_len() == MIN_LEN - 1);
      744 ( 0.00%)                      if right_parent_kv.can_merge() {
    6,549 ( 0.00%)                          right_parent_kv.merge_tracking_child_edge(Left(idx))
        .                               } else {
        .                                   debug_assert!(right_parent_kv.right_child_len() > MIN_LEN);
    1,922 ( 0.00%)                          right_parent_kv.steal_right(idx)
        .                               }
        .                           }
        .                           Err(pos) => unsafe { Handle::new_edge(pos, idx) },
        .                       };
        .                       // SAFETY: `new_pos` is the leaf we started from or a sibling.
  263,498 ( 0.01%)              pos = unsafe { new_pos.cast_to_leaf_unchecked() };
        .           
        .                       // Only if we merged, the parent (if any) has shrunk, but skipping
        .                       // the following step otherwise does not pay off in benchmarks.
        .                       //
        .                       // SAFETY: We won't destroy or rearrange the leaf where `pos` is at
        .                       // by handling its parent recursively; at worst we will destroy or
        .                       // rearrange the parent through the grandparent, thus change the
        .                       // link to the parent inside the leaf.
        .                       if let Ok(parent) = unsafe { pos.reborrow_mut() }.into_node().ascend() {
   19,276 ( 0.00%)                  if !parent.into_node().forget_type().fix_node_and_affected_ancestors() {
        .                               handle_emptied_internal_root();
        .                           }
        .                       }
        .                   }
1,805,538 ( 0.04%)          (old_kv, pos)
1,755,648 ( 0.04%)      }
        .           }
        .           
        .           impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>, marker::KV> {
        .               fn remove_internal_kv<F: FnOnce()>(
        .                   self,
        .                   handle_emptied_internal_root: F,
        .               ) -> ((K, V), Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, marker::Edge>) {
        .                   // Remove an adjacent KV from its leaf and then put it back in place of
        .                   // the element we were asked to remove. Prefer the left adjacent KV,
        .                   // for the reasons listed in `choose_parent_kv`.
        .                   let left_leaf_kv = self.left_edge().descend().last_leaf_edge().left_kv();
        .                   let left_leaf_kv = unsafe { left_leaf_kv.ok().unwrap_unchecked() };
    1,432 ( 0.00%)          let (left_kv, left_hole) = left_leaf_kv.remove_leaf_kv(handle_emptied_internal_root);
        .           
        .                   // The internal node may have been stolen from or merged. Go back right
        .                   // to find where the original KV ended up.
        .                   let mut internal = unsafe { left_hole.next_kv().ok().unwrap_unchecked() };
       78 ( 0.00%)          let old_kv = internal.replace_kv(left_kv.0, left_kv.1);
        .                   let pos = internal.next_leaf_edge();
      902 ( 0.00%)          (old_kv, pos)
        .               }
        .           }

1,169,688 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/remove.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs
--------------------------------------------------------------------------------
Ir                 

-- line 5 ----------------------------------------
        .           #[stable(feature = "alloc_system_type", since = "1.28.0")]
        .           unsafe impl GlobalAlloc for System {
        .               #[inline]
        .               unsafe fn alloc(&self, layout: Layout) -> *mut u8 {
        .                   // jemalloc provides alignment less than MIN_ALIGN for small allocations.
        .                   // So only rely on MIN_ALIGN if size >= align.
        .                   // Also see <https://github.com/rust-lang/rust/issues/45955> and
        .                   // <https://github.com/rust-lang/rust/issues/62251#issuecomment-507580914>.
6,935,288 ( 0.16%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
5,201,466 ( 0.12%)              libc::malloc(layout.size()) as *mut u8
        .                   } else {
        .                       #[cfg(target_os = "macos")]
        .                       {
        .                           if layout.align() > (1 << 31) {
        .                               return ptr::null_mut();
        .                           }
        .                       }
        .                       aligned_malloc(&layout)
        .                   }
        .               }
        .           
        .               #[inline]
        .               unsafe fn alloc_zeroed(&self, layout: Layout) -> *mut u8 {
        .                   // See the comment above in `alloc` for why this check looks the way it does.
  209,720 ( 0.00%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
  314,580 ( 0.01%)              libc::calloc(layout.size(), 1) as *mut u8
        .                   } else {
        .                       let ptr = self.alloc(layout);
        .                       if !ptr.is_null() {
        .                           ptr::write_bytes(ptr, 0, layout.size());
        .                       }
        .                       ptr
        .                   }
        .               }
        .           
        .               #[inline]
        .               unsafe fn dealloc(&self, ptr: *mut u8, _layout: Layout) {
1,786,240 ( 0.04%)          libc::free(ptr as *mut libc::c_void)
        .               }
        .           
        .               #[inline]
        .               unsafe fn realloc(&self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {
  703,420 ( 0.02%)          if layout.align() <= MIN_ALIGN && layout.align() <= new_size {
1,406,840 ( 0.03%)              libc::realloc(ptr as *mut libc::c_void, new_size) as *mut u8
        .                   } else {
        .                       realloc_fallback(self, ptr, layout, new_size)
        .                   }
        .               }
        .           }
        .           
        .           cfg_if::cfg_if! {
        .               if #[cfg(any(
-- line 56 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/search.rs
--------------------------------------------------------------------------------
Ir                  

-- line 40 ----------------------------------------
         .           
         .           impl<BorrowType: marker::BorrowType, K, V> NodeRef<BorrowType, K, V, marker::LeafOrInternal> {
         .               /// Looks up a given key in a (sub)tree headed by the node, recursively.
         .               /// Returns a `Found` with the handle of the matching KV, if any. Otherwise,
         .               /// returns a `GoDown` with the handle of the leaf edge where the key belongs.
         .               ///
         .               /// The result is meaningful only if the tree is ordered by key, like the tree
         .               /// in a `BTreeMap` is.
 2,919,358 ( 0.07%)      pub fn search_tree<Q: ?Sized>(
         .                   mut self,
         .                   key: &Q,
         .               ) -> SearchResult<BorrowType, K, V, marker::LeafOrInternal, marker::Leaf>
         .               where
         .                   Q: Ord,
         .                   K: Borrow<Q>,
         .               {
         .                   loop {
         .                       self = match self.search_node(key) {
         .                           Found(handle) => return Found(handle),
   710,358 ( 0.02%)                  GoDown(handle) => match handle.force() {
         .                               Leaf(leaf) => return GoDown(leaf),
         .                               Internal(internal) => internal.descend(),
         .                           },
         .                       }
         .                   }
 1,243,192 ( 0.03%)      }
         .           
         .               /// Descends to the nearest node where the edge matching the lower bound
         .               /// of the range is different from the edge matching the upper bound, i.e.,
         .               /// the nearest node that has at least one key contained in the range.
         .               ///
         .               /// If found, returns an `Ok` with that node, the strictly ascending pair of
         .               /// edge indices in the node delimiting the range, and the corresponding
         .               /// pair of bounds for continuing the search in the child nodes, in case
-- line 73 ----------------------------------------
-- line 202 ----------------------------------------
         .               unsafe fn find_key_index<Q: ?Sized>(&self, key: &Q, start_index: usize) -> IndexResult
         .               where
         .                   Q: Ord,
         .                   K: Borrow<Q>,
         .               {
         .                   let node = self.reborrow();
         .                   let keys = node.keys();
         .                   debug_assert!(start_index <= keys.len());
 6,440,113 ( 0.15%)          for (offset, k) in unsafe { keys.get_unchecked(start_index..) }.iter().enumerate() {
27,842,343 ( 0.65%)              match key.cmp(k.borrow()) {
         .                           Ordering::Greater => {}
         .                           Ordering::Equal => return IndexResult::KV(start_index + offset),
         .                           Ordering::Less => return IndexResult::Edge(start_index + offset),
         .                       }
         .                   }
         .                   IndexResult::Edge(keys.len())
         .               }
         .           
-- line 219 ----------------------------------------

 1,578,476 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/search.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs
--------------------------------------------------------------------------------
Ir                  

-- line 23 ----------------------------------------
         .           use std::cmp::Ordering;
         .           use std::marker::PhantomData;
         .           use std::ops::Range;
         .           use ty::util::IntTypeExt;
         .           
         .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
         .           #[derive(HashStable, TypeFoldable, Lift)]
         .           pub struct TypeAndMut<'tcx> {
       298 ( 0.00%)      pub ty: Ty<'tcx>,
     1,490 ( 0.00%)      pub mutbl: hir::Mutability,
         .           }
         .           
         .           #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, TyEncodable, TyDecodable, Copy)]
         .           #[derive(HashStable)]
         .           /// A "free" region `fr` can be interpreted as "some region
         .           /// at least as big as the scope `fr.scope`".
         .           pub struct FreeRegion {
    56,322 ( 0.00%)      pub scope: DefId,
   115,233 ( 0.00%)      pub bound_region: BoundRegionKind,
         .           }
         .           
   480,303 ( 0.01%)  #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, TyEncodable, TyDecodable, Copy)]
         .           #[derive(HashStable)]
         .           pub enum BoundRegionKind {
         .               /// An anonymous region parameter for a given fn (&T)
     9,367 ( 0.00%)      BrAnon(u32),
         .           
         .               /// Named region parameters for functions (a in &'a T)
         .               ///
         .               /// The `DefId` is needed to distinguish free regions in
         .               /// the event of shadowing.
       408 ( 0.00%)      BrNamed(DefId, Symbol),
         .           
         .               /// Anonymous region for the implicit env pointer parameter
         .               /// to a closure
         .               BrEnv,
         .           }
         .           
     1,722 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable, Debug, PartialOrd, Ord)]
         .           #[derive(HashStable)]
         .           pub struct BoundRegion {
   102,216 ( 0.00%)      pub var: BoundVar,
    75,302 ( 0.00%)      pub kind: BoundRegionKind,
         .           }
         .           
         .           impl BoundRegionKind {
         .               pub fn is_named(&self) -> bool {
         .                   match *self {
         .                       BoundRegionKind::BrNamed(_, name) => name != kw::UnderscoreLifetime,
         .                       _ => false,
         .                   }
         .               }
         .           }
         .           
         .           /// Defines the kinds of types.
         .           ///
         .           /// N.B., if you change this, you'll probably want to change the corresponding
         .           /// AST structure in `rustc_ast/src/ast.rs` as well.
13,718,794 ( 0.32%)  #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable, Debug)]
         .           #[derive(HashStable)]
         .           #[rustc_diagnostic_item = "TyKind"]
         .           pub enum TyKind<'tcx> {
         .               /// The primitive boolean type. Written as `bool`.
         .               Bool,
         .           
         .               /// The primitive character type; holds a Unicode scalar value
         .               /// (a non-surrogate code point). Written as `char`.
-- line 89 ----------------------------------------
-- line 99 ----------------------------------------
         .               Float(ty::FloatTy),
         .           
         .               /// Algebraic data types (ADT). For example: structures, enumerations and unions.
         .               ///
         .               /// InternalSubsts here, possibly against intuition, *may* contain `Param`s.
         .               /// That is, even after substitution it is possible that there are type
         .               /// variables. This happens when the `Adt` corresponds to an ADT
         .               /// definition and not a concrete use of it.
 1,400,090 ( 0.03%)      Adt(&'tcx AdtDef, SubstsRef<'tcx>),
         .           
         .               /// An unsized FFI type that is opaque to Rust. Written as `extern type T`.
         .               Foreign(DefId),
         .           
         .               /// The pointee of a string slice. Written as `str`.
         .               Str,
         .           
         .               /// An array with the given length. Written as `[T; n]`.
     3,103 ( 0.00%)      Array(Ty<'tcx>, &'tcx ty::Const<'tcx>),
         .           
         .               /// The pointee of an array slice. Written as `[T]`.
         .               Slice(Ty<'tcx>),
         .           
         .               /// A raw pointer. Written as `*mut T` or `*const T`
         .               RawPtr(TypeAndMut<'tcx>),
         .           
         .               /// A reference; a pointer with an associated lifetime. Written as
         .               /// `&'a mut T` or `&'a T`.
 2,062,800 ( 0.05%)      Ref(Region<'tcx>, Ty<'tcx>, hir::Mutability),
         .           
         .               /// The anonymous type of a function declaration/definition. Each
         .               /// function has a unique type, which is output (for a function
         .               /// named `foo` returning an `i32`) as `fn() -> i32 {foo}`.
         .               ///
         .               /// For example the type of `bar` here:
         .               ///
         .               /// ```rust
-- line 134 ----------------------------------------
-- line 143 ----------------------------------------
         .               ///
         .               /// ```rust
         .               /// fn foo() -> i32 { 1 }
         .               /// let bar: fn() -> i32 = foo;
         .               /// ```
         .               FnPtr(PolyFnSig<'tcx>),
         .           
         .               /// A trait object. Written as `dyn for<'b> Trait<'b, Assoc = u32> + Send + 'a`.
    49,744 ( 0.00%)      Dynamic(&'tcx List<Binder<'tcx, ExistentialPredicate<'tcx>>>, ty::Region<'tcx>),
         .           
         .               /// The anonymous type of a closure. Used to represent the type of
         .               /// `|a| a`.
         .               Closure(DefId, SubstsRef<'tcx>),
         .           
         .               /// The anonymous type of a generator. Used to represent the type of
         .               /// `|a| yield a`.
         .               Generator(DefId, SubstsRef<'tcx>, hir::Movability),
-- line 159 ----------------------------------------
-- line 180 ----------------------------------------
         .               /// The substitutions are for the generics of the function in question.
         .               /// After typeck, the concrete type can be found in the `types` map.
         .               Opaque(DefId, SubstsRef<'tcx>),
         .           
         .               /// A type parameter; for example, `T` in `fn f<T>(x: T) {}`.
         .               Param(ParamTy),
         .           
         .               /// Bound type variable, used only when preparing a trait query.
     5,380 ( 0.00%)      Bound(ty::DebruijnIndex, BoundTy),
         .           
         .               /// A placeholder type - universally quantified higher-ranked type.
         .               Placeholder(ty::PlaceholderType),
         .           
         .               /// A type variable used during type checking.
         .               Infer(InferTy),
         .           
         .               /// A placeholder for a type which could not be computed; this is
-- line 196 ----------------------------------------
-- line 330 ----------------------------------------
         .               pub closure_kind_ty: T,
         .               pub closure_sig_as_fn_ptr_ty: T,
         .               pub tupled_upvars_ty: T,
         .           }
         .           
         .           impl<'tcx> ClosureSubsts<'tcx> {
         .               /// Construct `ClosureSubsts` from `ClosureSubstsParts`, containing `Substs`
         .               /// for the closure parent, alongside additional closure-specific components.
       303 ( 0.00%)      pub fn new(
         .                   tcx: TyCtxt<'tcx>,
         .                   parts: ClosureSubstsParts<'tcx, Ty<'tcx>>,
         .               ) -> ClosureSubsts<'tcx> {
         .                   ClosureSubsts {
         .                       substs: tcx.mk_substs(
       606 ( 0.00%)                  parts.parent_substs.iter().copied().chain(
     1,212 ( 0.00%)                      [parts.closure_kind_ty, parts.closure_sig_as_fn_ptr_ty, parts.tupled_upvars_ty]
         .                                   .iter()
         .                                   .map(|&ty| ty.into()),
         .                           ),
         .                       ),
         .                   }
       606 ( 0.00%)      }
         .           
         .               /// Divides the closure substs into their respective components.
         .               /// The ordering assumed here must match that used by `ClosureSubsts::new` above.
     3,145 ( 0.00%)      fn split(self) -> ClosureSubstsParts<'tcx, GenericArg<'tcx>> {
         .                   match self.substs[..] {
    29,058 ( 0.00%)              [
     7,489 ( 0.00%)                  ref parent_substs @ ..,
     7,761 ( 0.00%)                  closure_kind_ty,
     4,596 ( 0.00%)                  closure_sig_as_fn_ptr_ty,
     5,320 ( 0.00%)                  tupled_upvars_ty,
    12,580 ( 0.00%)              ] => ClosureSubstsParts {
         .                           parent_substs,
         .                           closure_kind_ty,
         .                           closure_sig_as_fn_ptr_ty,
         .                           tupled_upvars_ty,
         .                       },
         .                       _ => bug!("closure substs missing synthetics"),
         .                   }
     9,435 ( 0.00%)      }
         .           
         .               /// Returns `true` only if enough of the synthetic types are known to
         .               /// allow using all of the methods on `ClosureSubsts` without panicking.
         .               ///
         .               /// Used primarily by `ty::print::pretty` to be able to handle closure
         .               /// types that haven't had their synthetic types substituted in.
         3 ( 0.00%)      pub fn is_valid(self) -> bool {
         6 ( 0.00%)          self.substs.len() >= 3
         6 ( 0.00%)              && matches!(self.split().tupled_upvars_ty.expect_ty().kind(), Tuple(_))
         6 ( 0.00%)      }
         .           
         .               /// Returns the substitutions of the closure's parent.
         .               pub fn parent_substs(self) -> &'tcx [GenericArg<'tcx>] {
         .                   self.split().parent_substs
         .               }
         .           
         .               /// Returns an iterator over the list of types of captured paths by the closure.
         .               /// In case there was a type error in figuring out the types of the captured path, an
         .               /// empty iterator is returned.
         .               #[inline]
        78 ( 0.00%)      pub fn upvar_tys(self) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {
       978 ( 0.00%)          match self.tupled_upvars_ty().kind() {
         .                       TyKind::Error(_) => None,
       655 ( 0.00%)              TyKind::Tuple(..) => Some(self.tupled_upvars_ty().tuple_fields()),
         .                       TyKind::Infer(_) => bug!("upvar_tys called before capture types are inferred"),
         .                       ty => bug!("Unexpected representation of upvar types tuple {:?}", ty),
         .                   }
         .                   .into_iter()
         .                   .flatten()
        52 ( 0.00%)      }
         .           
         .               /// Returns the tuple type representing the upvars for this closure.
         .               #[inline]
         .               pub fn tupled_upvars_ty(self) -> Ty<'tcx> {
    14,128 ( 0.00%)          self.split().tupled_upvars_ty.expect_ty()
         .               }
         .           
         .               /// Returns the closure kind for this closure; may return a type
         .               /// variable during inference. To get the closure kind during
         .               /// inference, use `infcx.closure_kind(substs)`.
     1,831 ( 0.00%)      pub fn kind_ty(self) -> Ty<'tcx> {
         .                   self.split().closure_kind_ty.expect_ty()
     3,662 ( 0.00%)      }
         .           
         .               /// Returns the `fn` pointer type representing the closure signature for this
         .               /// closure.
         .               // FIXME(eddyb) this should be unnecessary, as the shallowly resolved
         .               // type is known at the time of the creation of `ClosureSubsts`,
         .               // see `rustc_typeck::check::closure`.
         .               pub fn sig_as_fn_ptr_ty(self) -> Ty<'tcx> {
         .                   self.split().closure_sig_as_fn_ptr_ty.expect_ty()
         .               }
         .           
         .               /// Returns the closure kind for this closure; only usable outside
         .               /// of an inference context, because in that context we know that
         .               /// there are no type variables.
         .               ///
         .               /// If you have an inference context, use `infcx.closure_kind()`.
         7 ( 0.00%)      pub fn kind(self) -> ty::ClosureKind {
         7 ( 0.00%)          self.kind_ty().to_opt_closure_kind().unwrap()
        14 ( 0.00%)      }
         .           
         .               /// Extracts the signature from the closure.
     2,424 ( 0.00%)      pub fn sig(self) -> ty::PolyFnSig<'tcx> {
         .                   let ty = self.sig_as_fn_ptr_ty();
     4,848 ( 0.00%)          match ty.kind() {
     9,696 ( 0.00%)              ty::FnPtr(sig) => *sig,
         .                       _ => bug!("closure_sig_as_fn_ptr_ty is not a fn-ptr: {:?}", ty.kind()),
         .                   }
     7,272 ( 0.00%)      }
         .           }
         .           
         .           /// Similar to `ClosureSubsts`; see the above documentation for more.
         .           #[derive(Copy, Clone, Debug, TypeFoldable)]
         .           pub struct GeneratorSubsts<'tcx> {
         .               pub substs: SubstsRef<'tcx>,
         .           }
         .           
-- line 448 ----------------------------------------
-- line 676 ----------------------------------------
         .           }
         .           
         .           impl<'tcx> UpvarSubsts<'tcx> {
         .               /// Returns an iterator over the list of types of captured paths by the closure/generator.
         .               /// In case there was a type error in figuring out the types of the captured path, an
         .               /// empty iterator is returned.
         .               #[inline]
         .               pub fn upvar_tys(self) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {
       620 ( 0.00%)          let tupled_tys = match self {
       923 ( 0.00%)              UpvarSubsts::Closure(substs) => substs.as_closure().tupled_upvars_ty(),
         .                       UpvarSubsts::Generator(substs) => substs.as_generator().tupled_upvars_ty(),
         .                   };
         .           
     1,536 ( 0.00%)          match tupled_tys.kind() {
         .                       TyKind::Error(_) => None,
     1,233 ( 0.00%)              TyKind::Tuple(..) => Some(self.tupled_upvars_ty().tuple_fields()),
         .                       TyKind::Infer(_) => bug!("upvar_tys called before capture types are inferred"),
         .                       ty => bug!("Unexpected representation of upvar types tuple {:?}", ty),
         .                   }
         .                   .into_iter()
         .                   .flatten()
         .               }
         .           
         .               #[inline]
         .               pub fn tupled_upvars_ty(self) -> Ty<'tcx> {
     1,226 ( 0.00%)          match self {
     1,239 ( 0.00%)              UpvarSubsts::Closure(substs) => substs.as_closure().tupled_upvars_ty(),
         .                       UpvarSubsts::Generator(substs) => substs.as_generator().tupled_upvars_ty(),
         .                   }
         .               }
         .           }
         .           
         .           /// An inline const is modeled like
         .           ///
         .           ///     const InlineConst<'l0...'li, T0...Tj, R>: R;
-- line 710 ----------------------------------------
-- line 760 ----------------------------------------
         .               }
         .           
         .               /// Returns the type of this inline const.
         .               pub fn ty(self) -> Ty<'tcx> {
         .                   self.split().ty.expect_ty()
         .               }
         .           }
         .           
    37,365 ( 0.00%)  #[derive(Debug, Copy, Clone, PartialEq, PartialOrd, Ord, Eq, Hash, TyEncodable, TyDecodable)]
    41,124 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub enum ExistentialPredicate<'tcx> {
         .               /// E.g., `Iterator`.
         .               Trait(ExistentialTraitRef<'tcx>),
         .               /// E.g., `Iterator::Item = T`.
         .               Projection(ExistentialProjection<'tcx>),
         .               /// E.g., `Send`.
        18 ( 0.00%)      AutoTrait(DefId),
         .           }
         .           
         .           impl<'tcx> ExistentialPredicate<'tcx> {
         .               /// Compares via an ordering that will not change if modules are reordered or other changes are
         .               /// made to the tree. In particular, this ordering is preserved across incremental compilations.
        70 ( 0.00%)      pub fn stable_cmp(&self, tcx: TyCtxt<'tcx>, other: &Self) -> Ordering {
         .                   use self::ExistentialPredicate::*;
        80 ( 0.00%)          match (*self, *other) {
         .                       (Trait(_), Trait(_)) => Ordering::Equal,
         .                       (Projection(ref a), Projection(ref b)) => {
         .                           tcx.def_path_hash(a.item_def_id).cmp(&tcx.def_path_hash(b.item_def_id))
         .                       }
         .                       (AutoTrait(ref a), AutoTrait(ref b)) => {
         .                           tcx.def_path_hash(*a).cmp(&tcx.def_path_hash(*b))
         .                       }
         .                       (Trait(_), _) => Ordering::Less,
         .                       (Projection(_), Trait(_)) => Ordering::Greater,
         .                       (Projection(_), _) => Ordering::Less,
         .                       (AutoTrait(_), _) => Ordering::Greater,
         .                   }
        84 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> Binder<'tcx, ExistentialPredicate<'tcx>> {
     7,182 ( 0.00%)      pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::Predicate<'tcx> {
         .                   use crate::ty::ToPredicate;
     3,990 ( 0.00%)          match self.skip_binder() {
         .                       ExistentialPredicate::Trait(tr) => {
         .                           self.rebind(tr).with_self_ty(tcx, self_ty).without_const().to_predicate(tcx)
         .                       }
         .                       ExistentialPredicate::Projection(p) => {
         .                           self.rebind(p.with_self_ty(tcx, self_ty)).to_predicate(tcx)
         .                       }
         .                       ExistentialPredicate::AutoTrait(did) => {
         .                           let trait_ref = self.rebind(ty::TraitRef {
         .                               def_id: did,
         .                               substs: tcx.mk_substs_trait(self_ty, &[]),
         .                           });
         .                           trait_ref.without_const().to_predicate(tcx)
         .                       }
         .                   }
     6,384 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>> {
         .               /// Returns the "principal `DefId`" of this set of existential predicates.
         .               ///
         .               /// A Rust trait object type consists (in addition to a lifetime bound)
         .               /// of a set of trait bounds, which are separated into any number
         .               /// of auto-trait bounds, and at most one non-auto-trait bound. The
-- line 826 ----------------------------------------
-- line 840 ----------------------------------------
         .               ///
         .               /// It is also possible to have a "trivial" trait object that
         .               /// consists only of auto traits, with no principal - for example,
         .               /// `dyn Send + Sync`. In that case, the set of auto-trait bounds
         .               /// is `{Send, Sync}`, while there is no principal. These trait objects
         .               /// have a "trivial" vtable consisting of just the size, alignment,
         .               /// and destructor.
         .               pub fn principal(&self) -> Option<ty::Binder<'tcx, ExistentialTraitRef<'tcx>>> {
     2,400 ( 0.00%)          self[0]
     2,400 ( 0.00%)              .map_bound(|this| match this {
         .                           ExistentialPredicate::Trait(tr) => Some(tr),
         .                           _ => None,
         .                       })
         .                       .transpose()
         .               }
         .           
       798 ( 0.00%)      pub fn principal_def_id(&self) -> Option<DefId> {
         .                   self.principal().map(|trait_ref| trait_ref.skip_binder().def_id)
     1,596 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn projection_bounds<'a>(
         .                   &'a self,
         .               ) -> impl Iterator<Item = ty::Binder<'tcx, ExistentialProjection<'tcx>>> + 'a {
         .                   self.iter().filter_map(|predicate| {
         .                       predicate
         .                           .map_bound(|pred| match pred {
-- line 866 ----------------------------------------
-- line 886 ----------------------------------------
         .           ///     T: Foo<U>
         .           ///
         .           /// This would be represented by a trait-reference where the `DefId` is the
         .           /// `DefId` for the trait `Foo` and the substs define `T` as parameter 0,
         .           /// and `U` as parameter 1.
         .           ///
         .           /// Trait references also appear in object types like `Foo<U>`, but in
         .           /// that case the `Self` parameter is absent from the substitutions.
    24,924 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
 1,127,543 ( 0.03%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct TraitRef<'tcx> {
       347 ( 0.00%)      pub def_id: DefId,
   802,385 ( 0.02%)      pub substs: SubstsRef<'tcx>,
         .           }
         .           
         .           impl<'tcx> TraitRef<'tcx> {
     2,935 ( 0.00%)      pub fn new(def_id: DefId, substs: SubstsRef<'tcx>) -> TraitRef<'tcx> {
         .                   TraitRef { def_id, substs }
    11,740 ( 0.00%)      }
         .           
         .               /// Returns a `TraitRef` of the form `P0: Foo<P1..Pn>` where `Pi`
         .               /// are the parameters defined on trait.
       324 ( 0.00%)      pub fn identity(tcx: TyCtxt<'tcx>, def_id: DefId) -> Binder<'tcx, TraitRef<'tcx>> {
       144 ( 0.00%)          ty::Binder::dummy(TraitRef {
         .                       def_id,
       216 ( 0.00%)              substs: InternalSubsts::identity_for_item(tcx, def_id),
         .                   })
       288 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn self_ty(&self) -> Ty<'tcx> {
         .                   self.substs.type_at(0)
         .               }
         .           
     1,960 ( 0.00%)      pub fn from_method(
         .                   tcx: TyCtxt<'tcx>,
         .                   trait_id: DefId,
         .                   substs: SubstsRef<'tcx>,
         .               ) -> ty::TraitRef<'tcx> {
         .                   let defs = tcx.generics_of(trait_id);
         .           
       245 ( 0.00%)          ty::TraitRef { def_id: trait_id, substs: tcx.intern_substs(&substs[..defs.params.len()]) }
     2,695 ( 0.00%)      }
         .           }
         .           
         .           pub type PolyTraitRef<'tcx> = Binder<'tcx, TraitRef<'tcx>>;
         .           
         .           impl<'tcx> PolyTraitRef<'tcx> {
         .               pub fn self_ty(&self) -> Binder<'tcx, Ty<'tcx>> {
         .                   self.map_bound_ref(|tr| tr.self_ty())
         .               }
         .           
         .               pub fn def_id(&self) -> DefId {
     3,069 ( 0.00%)          self.skip_binder().def_id
     1,023 ( 0.00%)      }
         .           
     2,491 ( 0.00%)      pub fn to_poly_trait_predicate(&self) -> ty::PolyTraitPredicate<'tcx> {
     4,982 ( 0.00%)          self.map_bound(|trait_ref| ty::TraitPredicate {
         .                       trait_ref,
         .                       constness: ty::BoundConstness::NotConst,
         .                       polarity: ty::ImplPolarity::Positive,
         .                   })
     2,491 ( 0.00%)      }
         .           }
         .           
         .           /// An existential reference to a trait, where `Self` is erased.
         .           /// For example, the trait object `Trait<'a, 'b, X, Y>` is:
         .           ///
         .           ///     exists T. T: Trait<'a, 'b, X, Y>
         .           ///
         .           /// The substitutions don't include the erased `Self`, only trait
         .           /// type and lifetime parameters (`[X, Y]` and `['a, 'b]` above).
        68 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
    20,360 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct ExistentialTraitRef<'tcx> {
     2,786 ( 0.00%)      pub def_id: DefId,
    22,936 ( 0.00%)      pub substs: SubstsRef<'tcx>,
         .           }
         .           
         .           impl<'tcx> ExistentialTraitRef<'tcx> {
         4 ( 0.00%)      pub fn erase_self_ty(
         .                   tcx: TyCtxt<'tcx>,
         .                   trait_ref: ty::TraitRef<'tcx>,
         .               ) -> ty::ExistentialTraitRef<'tcx> {
         .                   // Assert there is a Self.
         .                   trait_ref.substs.type_at(0);
         .           
         .                   ty::ExistentialTraitRef {
         .                       def_id: trait_ref.def_id,
         .                       substs: tcx.intern_substs(&trait_ref.substs[1..]),
         .                   }
         4 ( 0.00%)      }
         .           
         .               /// Object types don't have a self type specified. Therefore, when
         .               /// we convert the principal trait-ref into a normal trait-ref,
         .               /// you must give *some* self type. A common choice is `mk_err()`
         .               /// or some placeholder type.
         .               pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::TraitRef<'tcx> {
         .                   // otherwise the escaping vars would be captured by the binder
         .                   // debug_assert!(!self_ty.has_escaping_bound_vars());
-- line 985 ----------------------------------------
-- line 999 ----------------------------------------
         .               /// we convert the principal trait-ref into a normal trait-ref,
         .               /// you must give *some* self type. A common choice is `mk_err()`
         .               /// or some placeholder type.
         .               pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::PolyTraitRef<'tcx> {
         .                   self.map_bound(|trait_ref| trait_ref.with_self_ty(tcx, self_ty))
         .               }
         .           }
         .           
    55,517 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
         .           #[derive(HashStable)]
         .           pub enum BoundVariableKind {
         .               Ty(BoundTyKind),
         .               Region(BoundRegionKind),
         .               Const,
         .           }
         .           
         .           /// Binder is a binder for higher-ranked lifetimes or types. It is part of the
-- line 1015 ----------------------------------------
-- line 1016 ----------------------------------------
         .           /// compiler's representation for things like `for<'a> Fn(&'a isize)`
         .           /// (which would be represented by the type `PolyTraitRef ==
         .           /// Binder<'tcx, TraitRef>`). Note that when we instantiate,
         .           /// erase, or otherwise "discharge" these bound vars, we change the
         .           /// type from `Binder<'tcx, T>` to just `T` (see
         .           /// e.g., `liberate_late_bound_regions`).
         .           ///
         .           /// `Decodable` and `Encodable` are implemented for `Binder<T>` using the `impl_binder_encode_decode!` macro.
    51,815 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
   523,799 ( 0.01%)  pub struct Binder<'tcx, T>(T, &'tcx List<BoundVariableKind>);
         .           
         .           impl<'tcx, T> Binder<'tcx, T>
         .           where
         .               T: TypeFoldable<'tcx>,
         .           {
         .               /// Wraps `value` in a binder, asserting that `value` does not
         .               /// contain any bound vars that would be bound by the
         .               /// binder. This is commonly used to 'inject' a value T into a
         .               /// different binding level.
    68,680 ( 0.00%)      pub fn dummy(value: T) -> Binder<'tcx, T> {
   209,230 ( 0.00%)          assert!(!value.has_escaping_bound_vars());
   464,563 ( 0.01%)          Binder(value, ty::List::empty())
    68,311 ( 0.00%)      }
         .           
         .               pub fn bind_with_vars(value: T, vars: &'tcx List<BoundVariableKind>) -> Binder<'tcx, T> {
         .                   if cfg!(debug_assertions) {
         .                       let mut validator = ValidateBoundVars::new(vars);
         .                       value.visit_with(&mut validator);
         .                   }
    16,101 ( 0.00%)          Binder(value, vars)
         .               }
         .           }
         .           
         .           impl<'tcx, T> Binder<'tcx, T> {
         .               /// Skips the binder and returns the "bound" value. This is a
         .               /// risky thing to do because it's easy to get confused about
         .               /// De Bruijn indices and the like. It is usually better to
         .               /// discharge the binder using `no_bound_vars` or
-- line 1053 ----------------------------------------
-- line 1059 ----------------------------------------
         .               /// accounting.
         .               ///
         .               /// Some examples where `skip_binder` is reasonable:
         .               ///
         .               /// - extracting the `DefId` from a PolyTraitRef;
         .               /// - comparing the self type of a PolyTraitRef to see if it is equal to
         .               ///   a type parameter `X`, since the type `X` does not reference any regions
         .               pub fn skip_binder(self) -> T {
 1,518,766 ( 0.04%)          self.0
         .               }
         .           
         .               pub fn bound_vars(&self) -> &'tcx List<BoundVariableKind> {
       372 ( 0.00%)          self.1
         .               }
         .           
         .               pub fn as_ref(&self) -> Binder<'tcx, &T> {
     9,571 ( 0.00%)          Binder(&self.0, self.1)
         .               }
         .           
         .               pub fn map_bound_ref_unchecked<F, U>(&self, f: F) -> Binder<'tcx, U>
         .               where
         .                   F: FnOnce(&T) -> U,
         .               {
         .                   let value = f(&self.0);
         .                   Binder(value, self.1)
-- line 1083 ----------------------------------------
-- line 1085 ----------------------------------------
         .           
         .               pub fn map_bound_ref<F, U: TypeFoldable<'tcx>>(&self, f: F) -> Binder<'tcx, U>
         .               where
         .                   F: FnOnce(&T) -> U,
         .               {
         .                   self.as_ref().map_bound(f)
         .               }
         .           
     2,424 ( 0.00%)      pub fn map_bound<F, U: TypeFoldable<'tcx>>(self, f: F) -> Binder<'tcx, U>
         .               where
         .                   F: FnOnce(T) -> U,
         .               {
    49,927 ( 0.00%)          let value = f(self.0);
         .                   if cfg!(debug_assertions) {
         .                       let mut validator = ValidateBoundVars::new(self.1);
         .                       value.visit_with(&mut validator);
         .                   }
   366,997 ( 0.01%)          Binder(value, self.1)
     2,424 ( 0.00%)      }
         .           
         .               pub fn try_map_bound<F, U: TypeFoldable<'tcx>, E>(self, f: F) -> Result<Binder<'tcx, U>, E>
         .               where
         .                   F: FnOnce(T) -> Result<U, E>,
         .               {
         .                   let value = f(self.0)?;
         .                   if cfg!(debug_assertions) {
         .                       let mut validator = ValidateBoundVars::new(self.1);
         .                       value.visit_with(&mut validator);
         .                   }
     8,942 ( 0.00%)          Ok(Binder(value, self.1))
         .               }
         .           
         .               /// Wraps a `value` in a binder, using the same bound variables as the
         .               /// current `Binder`. This should not be used if the new value *changes*
         .               /// the bound variables. Note: the (old or new) value itself does not
         .               /// necessarily need to *name* all the bound variables.
         .               ///
         .               /// This currently doesn't do anything different than `bind`, because we
-- line 1122 ----------------------------------------
-- line 1126 ----------------------------------------
         .               pub fn rebind<U>(&self, value: U) -> Binder<'tcx, U>
         .               where
         .                   U: TypeFoldable<'tcx>,
         .               {
         .                   if cfg!(debug_assertions) {
         .                       let mut validator = ValidateBoundVars::new(self.bound_vars());
         .                       value.visit_with(&mut validator);
         .                   }
    16,257 ( 0.00%)          Binder(value, self.1)
         .               }
         .           
         .               /// Unwraps and returns the value within, but only if it contains
         .               /// no bound vars at all. (In other words, if this binder --
         .               /// and indeed any enclosing binder -- doesn't bind anything at
         .               /// all.) Otherwise, returns `None`.
         .               ///
         .               /// (One could imagine having a method that just unwraps a single
-- line 1142 ----------------------------------------
-- line 1143 ----------------------------------------
         .               /// binder, but permits late-bound vars bound by enclosing
         .               /// binders, but that would require adjusting the debruijn
         .               /// indices, and given the shallow binding structure we often use,
         .               /// would not be that useful.)
         .               pub fn no_bound_vars(self) -> Option<T>
         .               where
         .                   T: TypeFoldable<'tcx>,
         .               {
   246,984 ( 0.01%)          if self.0.has_escaping_bound_vars() { None } else { Some(self.skip_binder()) }
     1,560 ( 0.00%)      }
         .           
         .               /// Splits the contents into two things that share the same binder
         .               /// level as the original, returning two distinct binders.
         .               ///
         .               /// `f` should consider bound regions at depth 1 to be free, and
         .               /// anything it produces with bound regions at depth 1 will be
         .               /// bound in the resulting return values.
         .               pub fn split<U, V, F>(self, f: F) -> (Binder<'tcx, U>, Binder<'tcx, V>)
-- line 1160 ----------------------------------------
-- line 1170 ----------------------------------------
         .               pub fn transpose(self) -> Option<Binder<'tcx, T>> {
         .                   let bound_vars = self.1;
         .                   self.0.map(|v| Binder(v, bound_vars))
         .               }
         .           }
         .           
         .           /// Represents the projection of an associated type. In explicit UFCS
         .           /// form this would be written `<T as Trait<..>>::N`.
       256 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
    39,842 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct ProjectionTy<'tcx> {
         .               /// The parameters of the associated item.
    16,399 ( 0.00%)      pub substs: SubstsRef<'tcx>,
         .           
         .               /// The `DefId` of the `TraitItem` for the associated type `N`.
         .               ///
         .               /// Note that this is not the `DefId` of the `TraitRef` containing this
         .               /// associated type, which is in `tcx.associated_item(item_def_id).container`.
    15,849 ( 0.00%)      pub item_def_id: DefId,
         .           }
         .           
         .           impl<'tcx> ProjectionTy<'tcx> {
    23,625 ( 0.00%)      pub fn trait_def_id(&self, tcx: TyCtxt<'tcx>) -> DefId {
     6,750 ( 0.00%)          tcx.associated_item(self.item_def_id).container.id()
    27,000 ( 0.00%)      }
         .           
         .               /// Extracts the underlying trait reference and own substs from this projection.
         .               /// For example, if this is a projection of `<T as StreamingIterator>::Item<'a>`,
         .               /// then this function would return a `T: Iterator` trait reference and `['a]` as the own substs
     1,309 ( 0.00%)      pub fn trait_ref_and_own_substs(
         .                   &self,
         .                   tcx: TyCtxt<'tcx>,
         .               ) -> (ty::TraitRef<'tcx>, &'tcx [ty::GenericArg<'tcx>]) {
       561 ( 0.00%)          let def_id = tcx.associated_item(self.item_def_id).container.id();
         .                   let trait_generics = tcx.generics_of(def_id);
       935 ( 0.00%)          (
         .                       ty::TraitRef { def_id, substs: self.substs.truncate_to(tcx, trait_generics) },
         .                       &self.substs[trait_generics.count()..],
         .                   )
     1,683 ( 0.00%)      }
         .           
         .               /// Extracts the underlying trait reference from this projection.
         .               /// For example, if this is a projection of `<T as Iterator>::Item`,
         .               /// then this function would return a `T: Iterator` trait reference.
         .               ///
         .               /// WARNING: This will drop the substs for generic associated types
         .               /// consider calling [Self::trait_ref_and_own_substs] to get those
         .               /// as well.
    27,648 ( 0.00%)      pub fn trait_ref(&self, tcx: TyCtxt<'tcx>) -> ty::TraitRef<'tcx> {
     3,072 ( 0.00%)          let def_id = self.trait_def_id(tcx);
     3,072 ( 0.00%)          ty::TraitRef { def_id, substs: self.substs.truncate_to(tcx, tcx.generics_of(def_id)) }
    33,792 ( 0.00%)      }
         .           
     5,584 ( 0.00%)      pub fn self_ty(&self) -> Ty<'tcx> {
    16,752 ( 0.00%)          self.substs.type_at(0)
    11,168 ( 0.00%)      }
         .           }
         .           
         .           #[derive(Copy, Clone, Debug, TypeFoldable)]
         .           pub struct GenSig<'tcx> {
         .               pub resume_ty: Ty<'tcx>,
         .               pub yield_ty: Ty<'tcx>,
         .               pub return_ty: Ty<'tcx>,
         .           }
-- line 1233 ----------------------------------------
-- line 1235 ----------------------------------------
         .           pub type PolyGenSig<'tcx> = Binder<'tcx, GenSig<'tcx>>;
         .           
         .           /// Signature of a function type, which we have arbitrarily
         .           /// decided to use to refer to the input/output types.
         .           ///
         .           /// - `inputs`: is the list of arguments and their modes.
         .           /// - `output`: is the return type.
         .           /// - `c_variadic`: indicates whether this is a C-variadic function.
    69,288 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
    42,021 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct FnSig<'tcx> {
     7,854 ( 0.00%)      pub inputs_and_output: &'tcx List<Ty<'tcx>>,
    66,236 ( 0.00%)      pub c_variadic: bool,
    13,536 ( 0.00%)      pub unsafety: hir::Unsafety,
    55,518 ( 0.00%)      pub abi: abi::Abi,
         .           }
         .           
         .           impl<'tcx> FnSig<'tcx> {
    49,055 ( 0.00%)      pub fn inputs(&self) -> &'tcx [Ty<'tcx>] {
   206,147 ( 0.00%)          &self.inputs_and_output[..self.inputs_and_output.len() - 1]
    98,110 ( 0.00%)      }
         .           
    31,242 ( 0.00%)      pub fn output(&self) -> Ty<'tcx> {
   227,253 ( 0.01%)          self.inputs_and_output[self.inputs_and_output.len() - 1]
    62,484 ( 0.00%)      }
         .           
         .               // Creates a minimal `FnSig` to be used when encountering a `TyKind::Error` in a fallible
         .               // method.
         .               fn fake() -> FnSig<'tcx> {
         .                   FnSig {
         .                       inputs_and_output: List::empty(),
         .                       c_variadic: false,
         .                       unsafety: hir::Unsafety::Normal,
-- line 1267 ----------------------------------------
-- line 1270 ----------------------------------------
         .               }
         .           }
         .           
         .           pub type PolyFnSig<'tcx> = Binder<'tcx, FnSig<'tcx>>;
         .           
         .           impl<'tcx> PolyFnSig<'tcx> {
         .               #[inline]
         .               pub fn inputs(&self) -> Binder<'tcx, &'tcx [Ty<'tcx>]> {
     7,899 ( 0.00%)          self.map_bound_ref_unchecked(|fn_sig| fn_sig.inputs())
         .               }
         .               #[inline]
         .               pub fn input(&self, index: usize) -> ty::Binder<'tcx, Ty<'tcx>> {
    21,809 ( 0.00%)          self.map_bound_ref(|fn_sig| fn_sig.inputs()[index])
         .               }
         .               pub fn inputs_and_output(&self) -> ty::Binder<'tcx, &'tcx List<Ty<'tcx>>> {
         .                   self.map_bound_ref(|fn_sig| fn_sig.inputs_and_output)
     1,209 ( 0.00%)      }
         .               #[inline]
         .               pub fn output(&self) -> ty::Binder<'tcx, Ty<'tcx>> {
    11,661 ( 0.00%)          self.map_bound_ref(|fn_sig| fn_sig.output())
         .               }
         .               pub fn c_variadic(&self) -> bool {
     2,418 ( 0.00%)          self.skip_binder().c_variadic
     1,209 ( 0.00%)      }
         .               pub fn unsafety(&self) -> hir::Unsafety {
     6,570 ( 0.00%)          self.skip_binder().unsafety
     3,285 ( 0.00%)      }
         .               pub fn abi(&self) -> abi::Abi {
    13,552 ( 0.00%)          self.skip_binder().abi
     3,388 ( 0.00%)      }
         .           }
         .           
         .           pub type CanonicalPolyFnSig<'tcx> = Canonical<'tcx, Binder<'tcx, FnSig<'tcx>>>;
         .           
        20 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
         .           #[derive(HashStable)]
         .           pub struct ParamTy {
         .               pub index: u32,
         .               pub name: Symbol,
         .           }
         .           
         .           impl<'tcx> ParamTy {
       476 ( 0.00%)      pub fn new(index: u32, name: Symbol) -> ParamTy {
         .                   ParamTy { index, name }
       238 ( 0.00%)      }
         .           
         .               pub fn for_def(def: &ty::GenericParamDef) -> ParamTy {
         2 ( 0.00%)          ParamTy::new(def.index, def.name)
         1 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn to_ty(self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
         .                   tcx.mk_ty_param(self.index, self.name)
         .               }
         .           }
         .           
         .           #[derive(Copy, Clone, Hash, TyEncodable, TyDecodable, Eq, PartialEq, Ord, PartialOrd)]
         .           #[derive(HashStable)]
         .           pub struct ParamConst {
       106 ( 0.00%)      pub index: u32,
       106 ( 0.00%)      pub name: Symbol,
         .           }
         .           
         .           impl ParamConst {
         .               pub fn new(index: u32, name: Symbol) -> ParamConst {
         .                   ParamConst { index, name }
         .               }
         .           
         .               pub fn for_def(def: &ty::GenericParamDef) -> ParamConst {
-- line 1338 ----------------------------------------
-- line 1440 ----------------------------------------
         .           /// the inference variable is supposed to satisfy the relation
         .           /// *for every value of the placeholder region*. To ensure that doesn't
         .           /// happen, you can use `leak_check`. This is more clearly explained
         .           /// by the [rustc dev guide].
         .           ///
         .           /// [1]: https://smallcultfollowing.com/babysteps/blog/2013/10/29/intermingled-parameter-lists/
         .           /// [2]: https://smallcultfollowing.com/babysteps/blog/2013/11/04/intermingled-parameter-lists/
         .           /// [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/traits/hrtb.html
 5,841,240 ( 0.14%)  #[derive(Clone, PartialEq, Eq, Hash, Copy, TyEncodable, TyDecodable, PartialOrd, Ord)]
        28 ( 0.00%)  pub enum RegionKind {
         .               /// Region bound in a type or fn declaration which will be
         .               /// substituted 'early' -- that is, at the same time when type
         .               /// parameters are substituted.
         .               ReEarlyBound(EarlyBoundRegion),
         .           
         .               /// Region bound in a function scope, which will be substituted when the
         .               /// function is called.
   150,566 ( 0.00%)      ReLateBound(ty::DebruijnIndex, BoundRegion),
         .           
         .               /// When checking a function body, the types of all arguments and so forth
         .               /// that refer to bound region parameters are modified to refer to free
         .               /// region parameters.
         .               ReFree(FreeRegion),
         .           
         .               /// Static data that has an "infinite" lifetime. Top in the region lattice.
         .               ReStatic,
-- line 1465 ----------------------------------------
-- line 1478 ----------------------------------------
         .               /// regions visible from `U`, but not less than regions not visible
         .               /// from `U`.
         .               ReEmpty(ty::UniverseIndex),
         .           
         .               /// Erased region, used by trait selection, in MIR and during codegen.
         .               ReErased,
         .           }
         .           
    18,606 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable, Debug, PartialOrd, Ord)]
         .           pub struct EarlyBoundRegion {
     5,341 ( 0.00%)      pub def_id: DefId,
    16,177 ( 0.00%)      pub index: u32,
    23,963 ( 0.00%)      pub name: Symbol,
         .           }
         .           
         .           /// A **`const`** **v**ariable **ID**.
         .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
         .           pub struct ConstVid<'tcx> {
     2,111 ( 0.00%)      pub index: u32,
       404 ( 0.00%)      pub phantom: PhantomData<&'tcx ()>,
         .           }
         .           
         .           rustc_index::newtype_index! {
         .               /// A **region** (lifetime) **v**ariable **ID**.
         .               pub struct RegionVid {
         .                   DEBUG_FORMAT = custom,
         .               }
         .           }
-- line 1505 ----------------------------------------
-- line 1513 ----------------------------------------
         .           rustc_index::newtype_index! {
         .               pub struct BoundVar { .. }
         .           }
         .           
         .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
         .           #[derive(HashStable)]
         .           pub struct BoundTy {
         .               pub var: BoundVar,
     5,380 ( 0.00%)      pub kind: BoundTyKind,
         .           }
         .           
    91,523 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
         .           #[derive(HashStable)]
         .           pub enum BoundTyKind {
         .               Anon,
         .               Param(Symbol),
         .           }
         .           
         .           impl From<BoundVar> for BoundTy {
         .               fn from(var: BoundVar) -> Self {
-- line 1532 ----------------------------------------
-- line 1616 ----------------------------------------
         .                       RegionKind::RePlaceholder(placeholder) => placeholder.name.is_named(),
         .                       RegionKind::ReEmpty(_) => false,
         .                       RegionKind::ReErased => false,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_late_bound(&self) -> bool {
     5,673 ( 0.00%)          matches!(*self, ty::ReLateBound(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_placeholder(&self) -> bool {
         .                   matches!(*self, ty::RePlaceholder(..))
         .               }
         .           
         .               #[inline]
         .               pub fn bound_at_or_above_binder(&self, index: ty::DebruijnIndex) -> bool {
   133,812 ( 0.00%)          match *self {
         .                       ty::ReLateBound(debruijn, _) => debruijn >= index,
         .                       _ => false,
         .                   }
         .               }
         .           
         .               pub fn type_flags(&self) -> TypeFlags {
         .                   let mut flags = TypeFlags::empty();
         .           
   191,096 ( 0.00%)          match *self {
         .                       ty::ReVar(..) => {
         .                           flags = flags | TypeFlags::HAS_FREE_REGIONS;
         .                           flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;
         .                           flags = flags | TypeFlags::HAS_RE_INFER;
         .                       }
         .                       ty::RePlaceholder(..) => {
         .                           flags = flags | TypeFlags::HAS_FREE_REGIONS;
         .                           flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;
-- line 1651 ----------------------------------------
-- line 1669 ----------------------------------------
         .                       ty::ReErased => {
         .                           flags = flags | TypeFlags::HAS_RE_ERASED;
         .                       }
         .                   }
         .           
         .                   debug!("type_flags({:?}) = {:?}", self, flags);
         .           
         .                   flags
     8,063 ( 0.00%)      }
         .           
         .               /// Given an early-bound or free region, returns the `DefId` where it was bound.
         .               /// For example, consider the regions in this snippet of code:
         .               ///
         .               /// ```
         .               /// impl<'a> Foo {
         .               ///      ^^ -- early bound, declared on an impl
         .               ///
-- line 1685 ----------------------------------------
-- line 1713 ----------------------------------------
         .           
         .               #[inline(always)]
         .               pub fn flags(&self) -> TypeFlags {
         .                   self.flags
         .               }
         .           
         .               #[inline]
         .               pub fn is_unit(&self) -> bool {
     6,674 ( 0.00%)          match self.kind() {
     1,552 ( 0.00%)              Tuple(ref tys) => tys.is_empty(),
         .                       _ => false,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_never(&self) -> bool {
    75,824 ( 0.00%)          matches!(self.kind(), Never)
         .               }
         .           
         .               #[inline]
         .               pub fn is_primitive(&self) -> bool {
         .                   self.kind().is_primitive()
         .               }
         .           
         .               #[inline]
-- line 1737 ----------------------------------------
-- line 1741 ----------------------------------------
         .           
         .               #[inline]
         .               pub fn is_ref(&self) -> bool {
         .                   matches!(self.kind(), Ref(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_ty_var(&self) -> bool {
   105,314 ( 0.00%)          matches!(self.kind(), Infer(TyVar(_)))
         .               }
         .           
         .               #[inline]
         .               pub fn ty_vid(&self) -> Option<ty::TyVid> {
    70,330 ( 0.00%)          match self.kind() {
    12,036 ( 0.00%)              &Infer(TyVar(vid)) => Some(vid),
         .                       _ => None,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_ty_infer(&self) -> bool {
       909 ( 0.00%)          matches!(self.kind(), Infer(_))
         .               }
         .           
         .               #[inline]
         .               pub fn is_phantom_data(&self) -> bool {
         .                   if let Adt(def, _) = self.kind() { def.is_phantom_data() } else { false }
         .               }
         .           
         .               #[inline]
         .               pub fn is_bool(&self) -> bool {
         6 ( 0.00%)          *self.kind() == Bool
         .               }
         .           
         .               /// Returns `true` if this type is a `str`.
         .               #[inline]
         .               pub fn is_str(&self) -> bool {
         .                   *self.kind() == Str
         .               }
         .           
         .               #[inline]
         .               pub fn is_param(&self, index: u32) -> bool {
         3 ( 0.00%)          match self.kind() {
         .                       ty::Param(ref data) => data.index == index,
         .                       _ => false,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_slice(&self) -> bool {
         .                   match self.kind() {
         .                       RawPtr(TypeAndMut { ty, .. }) | Ref(_, ty, _) => matches!(ty.kind(), Slice(_) | Str),
         .                       _ => false,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_array(&self) -> bool {
        37 ( 0.00%)          matches!(self.kind(), Array(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_simd(&self) -> bool {
         .                   match self.kind() {
         .                       Adt(def, _) => def.repr.simd(),
         .                       _ => false,
         .                   }
         .               }
         .           
         8 ( 0.00%)      pub fn sequence_element_type(&self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
        16 ( 0.00%)          match self.kind() {
         .                       Array(ty, _) | Slice(ty) => ty,
         .                       Str => tcx.mk_mach_uint(ty::UintTy::U8),
         .                       _ => bug!("`sequence_element_type` called on non-sequence value: {}", self),
         .                   }
         8 ( 0.00%)      }
         .           
         .               pub fn simd_size_and_type(&self, tcx: TyCtxt<'tcx>) -> (u64, Ty<'tcx>) {
         .                   match self.kind() {
         .                       Adt(def, substs) => {
         .                           assert!(def.repr.simd(), "`simd_size_and_type` called on non-SIMD type");
         .                           let variant = def.non_enum_variant();
         .                           let f0_ty = variant.fields[0].ty(tcx, substs);
         .           
-- line 1824 ----------------------------------------
-- line 1838 ----------------------------------------
         .                           }
         .                       }
         .                       _ => bug!("`simd_size_and_type` called on invalid type"),
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_region_ptr(&self) -> bool {
        62 ( 0.00%)          matches!(self.kind(), Ref(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_mutable_ptr(&self) -> bool {
         .                   matches!(
         .                       self.kind(),
         .                       RawPtr(TypeAndMut { mutbl: hir::Mutability::Mut, .. })
         .                           | Ref(_, _, hir::Mutability::Mut)
-- line 1854 ----------------------------------------
-- line 1861 ----------------------------------------
         .                   match self.kind() {
         .                       Ref(_, _, mutability) => Some(*mutability),
         .                       _ => None,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_unsafe_ptr(&self) -> bool {
     7,531 ( 0.00%)          matches!(self.kind(), RawPtr(_))
         .               }
         .           
         .               /// Tests if this is any kind of primitive pointer type (reference, raw pointer, fn pointer).
         .               #[inline]
         .               pub fn is_any_ptr(&self) -> bool {
         .                   self.is_region_ptr() || self.is_unsafe_ptr() || self.is_fn_ptr()
         .               }
         .           
         .               #[inline]
         .               pub fn is_box(&self) -> bool {
    89,400 ( 0.00%)          match self.kind() {
    20,465 ( 0.00%)              Adt(def, _) => def.is_box(),
         .                       _ => false,
         .                   }
         .               }
         .           
         .               /// Panics if called on any type other than `Box<T>`.
         .               pub fn boxed_ty(&self) -> Ty<'tcx> {
         .                   match self.kind() {
         .                       Adt(def, substs) if def.is_box() => substs.type_at(0),
-- line 1889 ----------------------------------------
-- line 1891 ----------------------------------------
         .                   }
         .               }
         .           
         .               /// A scalar type is one that denotes an atomic datum, with no sub-components.
         .               /// (A RawPtr is scalar because it represents a non-managed pointer, so its
         .               /// contents are abstract to rustc.)
         .               #[inline]
         .               pub fn is_scalar(&self) -> bool {
     2,354 ( 0.00%)          matches!(
     5,348 ( 0.00%)              self.kind(),
         .                       Bool | Char
         .                           | Int(_)
         .                           | Float(_)
         .                           | Uint(_)
         .                           | FnDef(..)
         .                           | FnPtr(_)
         .                           | RawPtr(_)
         .                           | Infer(IntVar(_) | FloatVar(_))
         .                   )
         .               }
         .           
         .               /// Returns `true` if this type is a floating point type.
         .               #[inline]
         .               pub fn is_floating_point(&self) -> bool {
         3 ( 0.00%)          matches!(self.kind(), Float(_) | Infer(FloatVar(_)))
         .               }
         .           
         .               #[inline]
         .               pub fn is_trait(&self) -> bool {
         .                   matches!(self.kind(), Dynamic(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_enum(&self) -> bool {
         .                   matches!(self.kind(), Adt(adt_def, _) if adt_def.is_enum())
         .               }
         .           
         .               #[inline]
         .               pub fn is_union(&self) -> bool {
    19,033 ( 0.00%)          matches!(self.kind(), Adt(adt_def, _) if adt_def.is_union())
         .               }
         .           
         .               #[inline]
         .               pub fn is_closure(&self) -> bool {
     5,776 ( 0.00%)          matches!(self.kind(), Closure(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_generator(&self) -> bool {
     8,619 ( 0.00%)          matches!(self.kind(), Generator(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_integral(&self) -> bool {
    10,877 ( 0.00%)          matches!(self.kind(), Infer(IntVar(_)) | Int(_) | Uint(_))
         .               }
         .           
         .               #[inline]
         .               pub fn is_fresh_ty(&self) -> bool {
         .                   matches!(self.kind(), Infer(FreshTy(_)))
         .               }
         .           
         .               #[inline]
         .               pub fn is_fresh(&self) -> bool {
     3,411 ( 0.00%)          matches!(self.kind(), Infer(FreshTy(_) | FreshIntTy(_) | FreshFloatTy(_)))
         .               }
         .           
         .               #[inline]
         .               pub fn is_char(&self) -> bool {
         .                   matches!(self.kind(), Char)
         .               }
         .           
         .               #[inline]
         .               pub fn is_numeric(&self) -> bool {
         .                   self.is_integral() || self.is_floating_point()
         .               }
         .           
         .               #[inline]
         .               pub fn is_signed(&self) -> bool {
        26 ( 0.00%)          matches!(self.kind(), Int(_))
         .               }
         .           
         .               #[inline]
         .               pub fn is_ptr_sized_integral(&self) -> bool {
     1,911 ( 0.00%)          matches!(self.kind(), Int(ty::IntTy::Isize) | Uint(ty::UintTy::Usize))
         .               }
         .           
         .               #[inline]
         .               pub fn has_concrete_skeleton(&self) -> bool {
         .                   !matches!(self.kind(), Param(_) | Infer(_) | Error(_))
         .               }
         .           
         .               /// Returns the type and mutability of `*ty`.
         .               ///
         .               /// The parameter `explicit` indicates if this is an *explicit* dereference.
         .               /// Some types -- notably unsafe ptrs -- can only be dereferenced explicitly.
    24,759 ( 0.00%)      pub fn builtin_deref(&self, explicit: bool) -> Option<TypeAndMut<'tcx>> {
   151,871 ( 0.00%)          match self.kind() {
       380 ( 0.00%)              Adt(def, _) if def.is_box() => {
         .                           Some(TypeAndMut { ty: self.boxed_ty(), mutbl: hir::Mutability::Not })
         .                       }
   100,006 ( 0.00%)              Ref(_, ty, mutbl) => Some(TypeAndMut { ty, mutbl: *mutbl }),
         .                       RawPtr(mt) if explicit => Some(*mt),
         .                       _ => None,
         .                   }
    49,518 ( 0.00%)      }
         .           
         .               /// Returns the type of `ty[i]`.
         .               pub fn builtin_index(&self) -> Option<Ty<'tcx>> {
       152 ( 0.00%)          match self.kind() {
         .                       Array(ty, _) | Slice(ty) => Some(ty),
         .                       _ => None,
         .                   }
        38 ( 0.00%)      }
         .           
    81,424 ( 0.00%)      pub fn fn_sig(&self, tcx: TyCtxt<'tcx>) -> PolyFnSig<'tcx> {
    40,712 ( 0.00%)          match self.kind() {
    30,534 ( 0.00%)              FnDef(def_id, substs) => tcx.fn_sig(*def_id).subst(tcx, substs),
         .                       FnPtr(f) => *f,
         .                       Error(_) => {
         .                           // ignore errors (#54954)
         .                           ty::Binder::dummy(FnSig::fake())
         .                       }
         .                       Closure(..) => bug!(
         .                           "to get the signature of a closure, use `substs.as_closure().sig()` not `fn_sig()`",
         .                       ),
         .                       _ => bug!("Ty::fn_sig() called on non-fn type: {:?}", self),
         .                   }
    91,602 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn is_fn(&self) -> bool {
       795 ( 0.00%)          matches!(self.kind(), FnDef(..) | FnPtr(_))
         .               }
         .           
         .               #[inline]
         .               pub fn is_fn_ptr(&self) -> bool {
         .                   matches!(self.kind(), FnPtr(_))
         .               }
         .           
         .               #[inline]
         .               pub fn is_impl_trait(&self) -> bool {
         .                   matches!(self.kind(), Opaque(..))
         .               }
         .           
         .               #[inline]
         .               pub fn ty_adt_def(&self) -> Option<&'tcx AdtDef> {
     5,290 ( 0.00%)          match self.kind() {
         .                       Adt(adt, _) => Some(adt),
         .                       _ => None,
         .                   }
         .               }
         .           
         .               /// Iterates over tuple fields.
         .               /// Panics when called on anything but a tuple.
       637 ( 0.00%)      pub fn tuple_fields(&self) -> impl DoubleEndedIterator<Item = Ty<'tcx>> {
     2,788 ( 0.00%)          match self.kind() {
     1,505 ( 0.00%)              Tuple(substs) => substs.iter().map(|field| field.expect_ty()),
         .                       _ => bug!("tuple_fields called on non-tuple"),
         .                   }
     1,274 ( 0.00%)      }
         .           
         .               /// Get the `i`-th element of a tuple.
         .               /// Panics when called on anything but a tuple.
        39 ( 0.00%)      pub fn tuple_element_ty(&self, i: usize) -> Option<Ty<'tcx>> {
        78 ( 0.00%)          match self.kind() {
        78 ( 0.00%)              Tuple(substs) => substs.iter().nth(i).map(|field| field.expect_ty()),
         .                       _ => bug!("tuple_fields called on non-tuple"),
         .                   }
        78 ( 0.00%)      }
         .           
         .               /// If the type contains variants, returns the valid range of variant indices.
         .               //
         .               // FIXME: This requires the optimized MIR in the case of generators.
         .               #[inline]
         .               pub fn variant_range(&self, tcx: TyCtxt<'tcx>) -> Option<Range<VariantIdx>> {
         .                   match self.kind() {
         .                       TyKind::Adt(adt, _) => Some(adt.variant_range()),
-- line 2068 ----------------------------------------
-- line 2095 ----------------------------------------
         .                       TyKind::Generator(def_id, substs, _) => {
         .                           Some(substs.as_generator().discriminant_for_variant(*def_id, tcx, variant_index))
         .                       }
         .                       _ => None,
         .                   }
         .               }
         .           
         .               /// Returns the type of the discriminant of this type.
     6,570 ( 0.00%)      pub fn discriminant_ty(&'tcx self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
     3,285 ( 0.00%)          match self.kind() {
     5,256 ( 0.00%)              ty::Adt(adt, _) if adt.is_enum() => adt.repr.discr_type().to_ty(tcx),
         .                       ty::Generator(_, substs, _) => substs.as_generator().discr_ty(tcx),
         .           
         .                       ty::Param(_) | ty::Projection(_) | ty::Opaque(..) | ty::Infer(ty::TyVar(_)) => {
         .                           let assoc_items = tcx.associated_item_def_ids(
         .                               tcx.require_lang_item(hir::LangItem::DiscriminantKind, None),
         .                           );
         .                           tcx.mk_projection(assoc_items[0], tcx.intern_substs(&[self.into()]))
         .                       }
-- line 2113 ----------------------------------------
-- line 2135 ----------------------------------------
         .                       | ty::Infer(IntVar(_) | FloatVar(_)) => tcx.types.u8,
         .           
         .                       ty::Bound(..)
         .                       | ty::Placeholder(_)
         .                       | ty::Infer(FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
         .                           bug!("`discriminant_ty` applied to unexpected type: {:?}", self)
         .                       }
         .                   }
     5,256 ( 0.00%)      }
         .           
         .               /// Returns the type of metadata for (potentially fat) pointers to this type.
         .               pub fn ptr_metadata_ty(
         .                   &'tcx self,
         .                   tcx: TyCtxt<'tcx>,
         .                   normalize: impl FnMut(Ty<'tcx>) -> Ty<'tcx>,
         .               ) -> Ty<'tcx> {
         .                   let tail = tcx.struct_tail_with_normalize(self, normalize);
-- line 2151 ----------------------------------------
-- line 2200 ----------------------------------------
         .               /// function converts such a special type into the closure
         .               /// kind. To go the other way, use
         .               /// `tcx.closure_kind_ty(closure_kind)`.
         .               ///
         .               /// Note that during type checking, we use an inference variable
         .               /// to represent the closure kind, because it has not yet been
         .               /// inferred. Once upvar inference (in `rustc_typeck/src/check/upvar.rs`)
         .               /// is complete, that type variable will be unified.
     4,888 ( 0.00%)      pub fn to_opt_closure_kind(&self) -> Option<ty::ClosureKind> {
     9,776 ( 0.00%)          match self.kind() {
     9,776 ( 0.00%)              Int(int_ty) => match int_ty {
         .                           ty::IntTy::I8 => Some(ty::ClosureKind::Fn),
         .                           ty::IntTy::I16 => Some(ty::ClosureKind::FnMut),
         .                           ty::IntTy::I32 => Some(ty::ClosureKind::FnOnce),
         .                           _ => bug!("cannot convert type `{:?}` to a closure kind", self),
         .                       },
         .           
         .                       // "Bound" types appear in canonical queries when the
         .                       // closure type is not yet known
         .                       Bound(..) | Infer(_) => None,
         .           
         .                       Error(_) => Some(ty::ClosureKind::Fn),
         .           
         .                       _ => bug!("cannot convert type `{:?}` to a closure kind", self),
         .                   }
     4,888 ( 0.00%)      }
         .           
         .               /// Fast path helper for testing if a type is `Sized`.
         .               ///
         .               /// Returning true means the type is known to be sized. Returning
         .               /// `false` means nothing -- could be sized, might not be.
         .               ///
         .               /// Note that we could never rely on the fact that a type such as `[_]` is
         .               /// trivially `!Sized` because we could be in a type environment with a
         .               /// bound such as `[_]: Copy`. A function with such a bound obviously never
         .               /// can be called, but that doesn't mean it shouldn't typecheck. This is why
         .               /// this method doesn't return `Option<bool>`.
   278,298 ( 0.01%)      pub fn is_trivially_sized(&self, tcx: TyCtxt<'tcx>) -> bool {
   185,532 ( 0.00%)          match self.kind() {
         .                       ty::Infer(ty::IntVar(_) | ty::FloatVar(_))
         .                       | ty::Uint(_)
         .                       | ty::Int(_)
         .                       | ty::Bool
         .                       | ty::Float(_)
         .                       | ty::FnDef(..)
         .                       | ty::FnPtr(_)
         .                       | ty::RawPtr(..)
-- line 2246 ----------------------------------------
-- line 2250 ----------------------------------------
         .                       | ty::GeneratorWitness(..)
         .                       | ty::Array(..)
         .                       | ty::Closure(..)
         .                       | ty::Never
         .                       | ty::Error(_) => true,
         .           
         .                       ty::Str | ty::Slice(_) | ty::Dynamic(..) | ty::Foreign(..) => false,
         .           
     4,001 ( 0.00%)              ty::Tuple(tys) => tys.iter().all(|ty| ty.expect_ty().is_trivially_sized(tcx)),
         .           
    15,090 ( 0.00%)              ty::Adt(def, _substs) => def.sized_constraint(tcx).is_empty(),
         .           
         .                       ty::Projection(_) | ty::Param(_) | ty::Opaque(..) => false,
         .           
         .                       ty::Infer(ty::TyVar(_)) => false,
         .           
         .                       ty::Bound(..)
         .                       | ty::Placeholder(..)
         .                       | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
         .                           bug!("`is_trivially_sized` applied to unexpected type: {:?}", self)
         .                       }
         .                   }
   278,298 ( 0.01%)      }
         .           }
         .           
         .           /// Extra information about why we ended up with a particular variance.
         .           /// This is only used to add more information to error messages, and
         .           /// has no effect on soundness. While choosing the 'wrong' `VarianceDiagInfo`
         .           /// may lead to confusing notes in error messages, it will never cause
         .           /// a miscompilation or unsoundness.
         .           ///
-- line 2280 ----------------------------------------
-- line 2295 ----------------------------------------
         .                   /// (e.g. `0` for `*mut T`, `1` for `MyStruct<'CovariantParam, 'InvariantParam>`)
         .                   param_index: u32,
         .               },
         .           }
         .           
         .           impl<'tcx> VarianceDiagInfo<'tcx> {
         .               /// Mirrors `Variance::xform` - used to 'combine' the existing
         .               /// and new `VarianceDiagInfo`s when our variance changes.
    78,988 ( 0.00%)      pub fn xform(self, other: VarianceDiagInfo<'tcx>) -> VarianceDiagInfo<'tcx> {
         .                   // For now, just use the first `VarianceDiagInfo::Invariant` that we see
   118,482 ( 0.00%)          match self {
         .                       VarianceDiagInfo::None => other,
         .                       VarianceDiagInfo::Invariant { .. } => self,
         .                   }
    39,494 ( 0.00%)      }
         .           }

20,413,069 ( 0.48%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs
--------------------------------------------------------------------------------
Ir                 

-- line 186 ----------------------------------------
        .           /// // use the values stored in map
        .           /// ```
        .           pub struct HashMap<K, V, S = DefaultHashBuilder, A: Allocator + Clone = Global> {
        .               pub(crate) hash_builder: S,
        .               pub(crate) table: RawTable<(K, V), A>,
        .           }
        .           
        .           impl<K: Clone, V: Clone, S: Clone, A: Allocator + Clone> Clone for HashMap<K, V, S, A> {
    1,328 ( 0.00%)      fn clone(&self) -> Self {
    1,018 ( 0.00%)          HashMap {
        .                       hash_builder: self.hash_builder.clone(),
      106 ( 0.00%)              table: self.table.clone(),
        .                   }
    1,494 ( 0.00%)      }
        .           
        .               fn clone_from(&mut self, source: &Self) {
        .                   self.table.clone_from(&source.table);
        .           
        .                   // Update hash_builder only if we successfully cloned all elements.
        .                   self.hash_builder.clone_from(&source.hash_builder);
        .               }
        .           }
-- line 207 ----------------------------------------
-- line 210 ----------------------------------------
        .           /// instances of any functions like RawTable::reserve from being generated
        .           #[cfg_attr(feature = "inline-more", inline)]
        .           pub(crate) fn make_hasher<K, Q, V, S>(hash_builder: &S) -> impl Fn(&(Q, V)) -> u64 + '_
        .           where
        .               K: Borrow<Q>,
        .               Q: Hash,
        .               S: BuildHasher,
        .           {
  334,083 ( 0.01%)      move |val| make_hash::<K, Q, S>(hash_builder, &val.0)
        .           }
        .           
        .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
        .           /// instances of any functions like RawTable::reserve from being generated
        .           #[cfg_attr(feature = "inline-more", inline)]
        .           fn equivalent_key<Q, K, V>(k: &Q) -> impl Fn(&(K, V)) -> bool + '_
        .           where
        .               K: Borrow<Q>,
        .               Q: ?Sized + Eq,
        .           {
  772,678 ( 0.02%)      move |x| k.eq(x.0.borrow())
        .           }
        .           
        .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
        .           /// instances of any functions like RawTable::reserve from being generated
        .           #[cfg_attr(feature = "inline-more", inline)]
        .           fn equivalent<Q, K>(k: &Q) -> impl Fn(&K) -> bool + '_
        .           where
        .               K: Borrow<Q>,
        .               Q: ?Sized + Eq,
        .           {
  680,751 ( 0.02%)      move |x| k.eq(x.borrow())
        .           }
        .           
        .           #[cfg(not(feature = "nightly"))]
        .           #[cfg_attr(feature = "inline-more", inline)]
        .           pub(crate) fn make_hash<K, Q, S>(hash_builder: &S, val: &Q) -> u64
        .           where
        .               K: Borrow<Q>,
        .               Q: Hash + ?Sized,
-- line 248 ----------------------------------------
-- line 251 ----------------------------------------
        .               use core::hash::Hasher;
        .               let mut state = hash_builder.build_hasher();
        .               val.hash(&mut state);
        .               state.finish()
        .           }
        .           
        .           #[cfg(feature = "nightly")]
        .           #[cfg_attr(feature = "inline-more", inline)]
        2 ( 0.00%)  pub(crate) fn make_hash<K, Q, S>(hash_builder: &S, val: &Q) -> u64
        .           where
        .               K: Borrow<Q>,
        .               Q: Hash + ?Sized,
        .               S: BuildHasher,
        .           {
   28,902 ( 0.00%)      hash_builder.hash_one(val)
        4 ( 0.00%)  }
        .           
        .           #[cfg(not(feature = "nightly"))]
        .           #[cfg_attr(feature = "inline-more", inline)]
        .           pub(crate) fn make_insert_hash<K, S>(hash_builder: &S, val: &K) -> u64
        .           where
        .               K: Hash,
        .               S: BuildHasher,
        .           {
-- line 274 ----------------------------------------
-- line 280 ----------------------------------------
        .           
        .           #[cfg(feature = "nightly")]
        .           #[cfg_attr(feature = "inline-more", inline)]
        .           pub(crate) fn make_insert_hash<K, S>(hash_builder: &S, val: &K) -> u64
        .           where
        .               K: Hash,
        .               S: BuildHasher,
        .           {
  591,165 ( 0.01%)      hash_builder.hash_one(val)
        .           }
        .           
        .           #[cfg(feature = "ahash")]
        .           impl<K, V> HashMap<K, V, DefaultHashBuilder> {
        .               /// Creates an empty `HashMap`.
        .               ///
        .               /// The hash map is initially created with a capacity of 0, so it will not allocate until it
        .               /// is first inserted into.
-- line 296 ----------------------------------------
-- line 367 ----------------------------------------
        .               /// let s = DefaultHashBuilder::default();
        .               /// let mut map = HashMap::with_hasher(s);
        .               /// map.insert(1, 2);
        .               /// ```
        .               ///
        .               /// [`BuildHasher`]: ../../std/hash/trait.BuildHasher.html
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub const fn with_hasher(hash_builder: S) -> Self {
  434,600 ( 0.01%)          Self {
        .                       hash_builder,
        .                       table: RawTable::new(),
        .                   }
        .               }
        .           
        .               /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`
        .               /// to hash the keys.
        .               ///
-- line 383 ----------------------------------------
-- line 437 ----------------------------------------
        .               /// use hashbrown::hash_map::DefaultHashBuilder;
        .               ///
        .               /// let s = DefaultHashBuilder::default();
        .               /// let mut map = HashMap::with_hasher(s);
        .               /// map.insert(1, 2);
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn with_hasher_in(hash_builder: S, alloc: A) -> Self {
       91 ( 0.00%)          Self {
        .                       hash_builder,
        .                       table: RawTable::new_in(alloc),
        .                   }
        .               }
        .           
        .               /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`
        .               /// to hash the keys. It will be allocated with the given allocator.
        .               ///
-- line 453 ----------------------------------------
-- line 663 ----------------------------------------
        .               ///
        .               /// let mut a = HashMap::new();
        .               /// assert_eq!(a.len(), 0);
        .               /// a.insert(1, "a");
        .               /// assert_eq!(a.len(), 1);
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn len(&self) -> usize {
   32,355 ( 0.00%)          self.table.len()
        .               }
        .           
        .               /// Returns `true` if the map contains no elements.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// use hashbrown::HashMap;
-- line 679 ----------------------------------------
-- line 680 ----------------------------------------
        .               ///
        .               /// let mut a = HashMap::new();
        .               /// assert!(a.is_empty());
        .               /// a.insert(1, "a");
        .               /// assert!(!a.is_empty());
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn is_empty(&self) -> bool {
  161,422 ( 0.00%)          self.len() == 0
        .               }
        .           
        .               /// Clears the map, returning all key-value pairs as an iterator. Keeps the
        .               /// allocated memory for reuse.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 696 ----------------------------------------
-- line 790 ----------------------------------------
        .               /// use hashbrown::HashMap;
        .               ///
        .               /// let mut a = HashMap::new();
        .               /// a.insert(1, "a");
        .               /// a.clear();
        .               /// assert!(a.is_empty());
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
        6 ( 0.00%)      pub fn clear(&mut self) {
        .                   self.table.clear();
        6 ( 0.00%)      }
        .           
        .               /// Creates a consuming iterator visiting all the keys in arbitrary order.
        .               /// The map cannot be used after calling this.
        .               /// The iterator element type is `K`.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 808 ----------------------------------------
-- line 963 ----------------------------------------
        .               /// }
        .               ///
        .               /// assert_eq!(letters[&'s'], 2);
        .               /// assert_eq!(letters[&'t'], 3);
        .               /// assert_eq!(letters[&'u'], 1);
        .               /// assert_eq!(letters.get(&'y'), None);
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
    1,492 ( 0.00%)      pub fn entry(&mut self, key: K) -> Entry<'_, K, V, S, A> {
        .                   let hash = make_insert_hash::<K, S>(&self.hash_builder, &key);
        .                   if let Some(elem) = self.table.find(hash, equivalent_key(&key)) {
      710 ( 0.00%)              Entry::Occupied(OccupiedEntry {
        .                           hash,
        .                           key: Some(key),
        .                           elem,
        .                           table: self,
        .                       })
        .                   } else {
    1,155 ( 0.00%)              Entry::Vacant(VacantEntry {
        .                           hash,
        .                           key,
        .                           table: self,
        .                       })
        .                   }
    1,865 ( 0.00%)      }
        .           
        .               /// Gets the given key's corresponding entry by reference in the map for in-place manipulation.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// use hashbrown::HashMap;
        .               ///
-- line 995 ----------------------------------------
-- line 1047 ----------------------------------------
        .               /// ```
        .               #[inline]
        .               pub fn get<Q: ?Sized>(&self, k: &Q) -> Option<&V>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
1,544,289 ( 0.04%)          match self.get_inner(k) {
        .                       Some(&(_, ref v)) => Some(v),
        .                       None => None,
        .                   }
        .               }
        .           
        .               /// Returns the key-value pair corresponding to the supplied key.
        .               ///
        .               /// The supplied key may be any borrowed form of the map's key type, but
-- line 1063 ----------------------------------------
-- line 1091 ----------------------------------------
        .               }
        .           
        .               #[inline]
        .               fn get_inner<Q: ?Sized>(&self, k: &Q) -> Option<&(K, V)>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
1,809,767 ( 0.04%)          if self.table.is_empty() {
        .                       None
        .                   } else {
        1 ( 0.00%)              let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
        .                       self.table.get(hash, equivalent_key(k))
        .                   }
        .               }
        .           
        .               /// Returns the key-value pair corresponding to the supplied key, with a mutable reference to value.
        .               ///
        .               /// The supplied key may be any borrowed form of the map's key type, but
        .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
-- line 1110 ----------------------------------------
-- line 1155 ----------------------------------------
        .               /// use hashbrown::HashMap;
        .               ///
        .               /// let mut map = HashMap::new();
        .               /// map.insert(1, "a");
        .               /// assert_eq!(map.contains_key(&1), true);
        .               /// assert_eq!(map.contains_key(&2), false);
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
  621,508 ( 0.01%)      pub fn contains_key<Q: ?Sized>(&self, k: &Q) -> bool
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
        .                   self.get_inner(k).is_some()
  794,438 ( 0.02%)      }
        .           
        .               /// Returns a mutable reference to the value corresponding to the key.
        .               ///
        .               /// The key may be any borrowed form of the map's key type, but
        .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
        .               /// the key type.
        .               ///
        .               /// [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html
-- line 1177 ----------------------------------------
-- line 1185 ----------------------------------------
        .               /// let mut map = HashMap::new();
        .               /// map.insert(1, "a");
        .               /// if let Some(x) = map.get_mut(&1) {
        .               ///     *x = "b";
        .               /// }
        .               /// assert_eq!(map[&1], "b");
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
      342 ( 0.00%)      pub fn get_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut V>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
    1,026 ( 0.00%)          match self.get_inner_mut(k) {
        .                       Some(&mut (_, ref mut v)) => Some(v),
        .                       None => None,
        .                   }
      684 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn get_inner_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut (K, V)>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
      342 ( 0.00%)          if self.table.is_empty() {
        .                       None
        .                   } else {
        .                       let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
        .                       self.table.get_mut(hash, equivalent_key(k))
        .                   }
        .               }
        .           
        .               /// Attempts to get mutable references to `N` values in the map at once.
-- line 1219 ----------------------------------------
-- line 1495 ----------------------------------------
        .               /// assert_eq!(map.insert(37, "a"), None);
        .               /// assert_eq!(map.is_empty(), false);
        .               ///
        .               /// map.insert(37, "b");
        .               /// assert_eq!(map.insert(37, "c"), Some("b"));
        .               /// assert_eq!(map[&37], "c");
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
4,882,349 ( 0.11%)      pub fn insert(&mut self, k: K, v: V) -> Option<V> {
        .                   let hash = make_insert_hash::<K, S>(&self.hash_builder, &k);
    1,306 ( 0.00%)          if let Some((_, item)) = self.table.get_mut(hash, equivalent_key(&k)) {
        .                       Some(mem::replace(item, v))
        .                   } else {
2,188,119 ( 0.05%)              self.table
1,838,338 ( 0.04%)                  .insert(hash, (k, v), make_hasher::<K, _, V, S>(&self.hash_builder));
  236,790 ( 0.01%)              None
        .                   }
4,647,292 ( 0.11%)      }
        .           
        .               /// Insert a key-value pair into the map without checking
        .               /// if the key already exists in the map.
        .               ///
        .               /// Returns a reference to the key and value just inserted.
        .               ///
        .               /// This operation is safe if a key does not exist in the map.
        .               ///
-- line 1520 ----------------------------------------
-- line 1592 ----------------------------------------
        .               /// use hashbrown::HashMap;
        .               ///
        .               /// let mut map = HashMap::new();
        .               /// map.insert(1, "a");
        .               /// assert_eq!(map.remove(&1), Some("a"));
        .               /// assert_eq!(map.remove(&1), None);
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
  167,060 ( 0.00%)      pub fn remove<Q: ?Sized>(&mut self, k: &Q) -> Option<V>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
1,028,578 ( 0.02%)          match self.remove_entry(k) {
   62,688 ( 0.00%)              Some((_, v)) => Some(v),
  133,676 ( 0.00%)              None => None,
        .                   }
  383,785 ( 0.01%)      }
        .           
        .               /// Removes a key from the map, returning the stored key and value if the
        .               /// key was previously in the map.
        .               ///
        .               /// The key may be any borrowed form of the map's key type, but
        .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
        .               /// the key type.
        .               ///
-- line 1618 ----------------------------------------
-- line 1631 ----------------------------------------
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn remove_entry<Q: ?Sized>(&mut self, k: &Q) -> Option<(K, V)>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
        .                   let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
  392,582 ( 0.01%)          self.table.remove_entry(hash, equivalent_key(k))
        .               }
        .           }
        .           
        .           impl<K, V, S, A: Allocator + Clone> HashMap<K, V, S, A> {
        .               /// Creates a raw entry builder for the HashMap.
        .               ///
        .               /// Raw entries provide the lowest level of control for searching and
        .               /// manipulating a map. They must be manually initialized with a hash and
-- line 1647 ----------------------------------------
-- line 2069 ----------------------------------------
        .           where
        .               F: FnMut(&K, &mut V) -> bool,
        .               A: Allocator + Clone,
        .           {
        .               type Item = (K, V);
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn next(&mut self) -> Option<Self::Item> {
       78 ( 0.00%)          self.inner.next(&mut self.f)
        .               }
        .           
        .               #[inline]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   (0, self.inner.iter.size_hint().1)
        .               }
        .           }
        .           
-- line 2085 ----------------------------------------
-- line 2095 ----------------------------------------
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub(super) fn next<F>(&mut self, f: &mut F) -> Option<(K, V)>
        .               where
        .                   F: FnMut(&K, &mut V) -> bool,
        .               {
        .                   unsafe {
        .                       for item in &mut self.iter {
        .                           let &mut (ref key, ref mut value) = item.as_mut();
       99 ( 0.00%)                  if f(key, value) {
       26 ( 0.00%)                      return Some(self.table.remove(item));
        .                           }
        .                       }
        .                   }
        .                   None
        .               }
        .           }
        .           
        .           /// A mutable iterator over the values of a `HashMap`.
-- line 2112 ----------------------------------------
-- line 2209 ----------------------------------------
        .               /// Creates a `RawEntryMut` from the given key and its hash.
        .               #[inline]
        .               #[allow(clippy::wrong_self_convention)]
        .               pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> RawEntryMut<'a, K, V, S, A>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Eq,
        .               {
3,189,510 ( 0.07%)          self.from_hash(hash, equivalent(k))
        .               }
        .           }
        .           
        .           impl<'a, K, V, S, A: Allocator + Clone> RawEntryBuilderMut<'a, K, V, S, A> {
        .               /// Creates a `RawEntryMut` from the given hash.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[allow(clippy::wrong_self_convention)]
8,605,434 ( 0.20%)      pub fn from_hash<F>(self, hash: u64, is_match: F) -> RawEntryMut<'a, K, V, S, A>
        .               where
        .                   for<'b> F: FnMut(&'b K) -> bool,
        .               {
        .                   self.search(hash, is_match)
9,142,642 ( 0.21%)      }
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn search<F>(self, hash: u64, mut is_match: F) -> RawEntryMut<'a, K, V, S, A>
        .               where
        .                   for<'b> F: FnMut(&'b K) -> bool,
        .               {
1,056,650 ( 0.02%)          match self.map.table.find(hash, |(k, _)| is_match(k)) {
5,309,661 ( 0.12%)              Some(elem) => RawEntryMut::Occupied(RawOccupiedEntryMut {
        .                           elem,
        .                           table: &mut self.map.table,
        .                           hash_builder: &self.map.hash_builder,
        .                       }),
  481,051 ( 0.01%)              None => RawEntryMut::Vacant(RawVacantEntryMut {
        .                           table: &mut self.map.table,
        .                           hash_builder: &self.map.hash_builder,
        .                       }),
        .                   }
        .               }
        .           }
        .           
        .           impl<'a, K, V, S, A: Allocator + Clone> RawEntryBuilder<'a, K, V, S, A> {
-- line 2251 ----------------------------------------
-- line 2260 ----------------------------------------
        .               {
        .                   let hash = make_hash::<K, Q, S>(&self.map.hash_builder, k);
        .                   self.from_key_hashed_nocheck(hash, k)
        .               }
        .           
        .               /// Access an entry by a key and its hash.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[allow(clippy::wrong_self_convention)]
2,132,973 ( 0.05%)      pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> Option<(&'a K, &'a V)>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Eq,
        .               {
2,525,405 ( 0.06%)          self.from_hash(hash, equivalent(k))
3,891,718 ( 0.09%)      }
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn search<F>(self, hash: u64, mut is_match: F) -> Option<(&'a K, &'a V)>
        .               where
        .                   F: FnMut(&K) -> bool,
        .               {
4,093,312 ( 0.10%)          match self.map.table.get(hash, |(k, _)| is_match(k)) {
        .                       Some(&(ref key, ref value)) => Some((key, value)),
        .                       None => None,
        .                   }
        .               }
        .           
        .               /// Access an entry by hash.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[allow(clippy::wrong_self_convention)]
-- line 2289 ----------------------------------------
-- line 2624 ----------------------------------------
        .               /// and returns a mutable reference to it.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[allow(clippy::shadow_unrelated)]
        .               pub fn insert_hashed_nocheck(self, hash: u64, key: K, value: V) -> (&'a mut K, &'a mut V)
        .               where
        .                   K: Hash,
        .                   S: BuildHasher,
        .               {
  803,020 ( 0.02%)          let &mut (ref mut k, ref mut v) = self.table.insert_entry(
        .                       hash,
        .                       (key, value),
        .                       make_hasher::<K, _, V, S>(self.hash_builder),
        .                   );
        .                   (k, v)
        .               }
        .           
        .               /// Set the value of an entry with a custom hasher function.
-- line 2640 ----------------------------------------
-- line 2974 ----------------------------------------
        .               /// map.insert("a", 1);
        .               /// map.insert("b", 2);
        .               /// map.insert("c", 3);
        .               ///
        .               /// // Not possible with .iter()
        .               /// let vec: Vec<(&str, i32)> = map.into_iter().collect();
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
    4,477 ( 0.00%)      fn into_iter(self) -> IntoIter<K, V, A> {
   91,267 ( 0.00%)          IntoIter {
   46,895 ( 0.00%)              inner: self.table.into_iter(),
        .                   }
   13,431 ( 0.00%)      }
        .           }
        .           
        .           impl<'a, K, V> Iterator for Iter<'a, K, V> {
        .               type Item = (&'a K, &'a V);
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn next(&mut self) -> Option<(&'a K, &'a V)> {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
  289,122 ( 0.01%)          match self.inner.next() {
        .                       Some(x) => unsafe {
        .                           let r = x.as_ref();
    3,696 ( 0.00%)                  Some((&r.0, &r.1))
        .                       },
        .                       None => None,
        .                   }
        .               }
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
       47 ( 0.00%)          self.inner.size_hint()
        .               }
        .           }
        .           impl<K, V> ExactSizeIterator for Iter<'_, K, V> {
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn len(&self) -> usize {
        .                   self.inner.len()
        .               }
        .           }
-- line 3013 ----------------------------------------
-- line 3051 ----------------------------------------
        .               }
        .           }
        .           
        .           impl<K, V, A: Allocator + Clone> Iterator for IntoIter<K, V, A> {
        .               type Item = (K, V);
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn next(&mut self) -> Option<(K, V)> {
    3,656 ( 0.00%)          self.inner.next()
        .               }
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   self.inner.size_hint()
        .               }
        .           }
        .           impl<K, V, A: Allocator + Clone> ExactSizeIterator for IntoIter<K, V, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
-- line 3067 ----------------------------------------
-- line 3076 ----------------------------------------
        .                   f.debug_list().entries(self.iter()).finish()
        .               }
        .           }
        .           
        .           impl<'a, K, V> Iterator for Keys<'a, K, V> {
        .               type Item = &'a K;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
      169 ( 0.00%)      fn next(&mut self) -> Option<&'a K> {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
        .                   match self.inner.next() {
        .                       Some((k, _)) => Some(k),
        .                       None => None,
        .                   }
      338 ( 0.00%)      }
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   self.inner.size_hint()
        .               }
        .           }
        .           impl<K, V> ExactSizeIterator for Keys<'_, K, V> {
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn len(&self) -> usize {
-- line 3098 ----------------------------------------
-- line 3819 ----------------------------------------
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn insert(self, value: V) -> &'a mut V
        .               where
        .                   K: Hash,
        .                   S: BuildHasher,
        .               {
        .                   let table = &mut self.table.table;
       82 ( 0.00%)          let entry = table.insert_entry(
        .                       self.hash,
        .                       (self.key, value),
        .                       make_hasher::<K, _, V, S>(&self.table.hash_builder),
        .                   );
        .                   &mut entry.1
        .               }
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
-- line 3835 ----------------------------------------
-- line 4557 ----------------------------------------
        .           /// keys with new values returned from the iterator.
        .           impl<K, V, S, A> Extend<(K, V)> for HashMap<K, V, S, A>
        .           where
        .               K: Eq + Hash,
        .               S: BuildHasher,
        .               A: Allocator + Clone,
        .           {
        .               #[cfg_attr(feature = "inline-more", inline)]
   72,500 ( 0.00%)      fn extend<T: IntoIterator<Item = (K, V)>>(&mut self, iter: T) {
        .                   // Keys may be already present or show multiple times in the iterator.
        .                   // Reserve the entire hint lower bound if the map is empty.
        .                   // Otherwise reserve half the hint (rounded up), so the map
        .                   // will only resize twice in the worst case.
   58,116 ( 0.00%)          let iter = iter.into_iter();
   47,151 ( 0.00%)          let reserve = if self.is_empty() {
        .                       iter.size_hint().0
        .                   } else {
    5,251 ( 0.00%)              (iter.size_hint().0 + 1) / 2
        .                   };
        .                   self.reserve(reserve);
        .                   iter.for_each(move |(k, v)| {
  132,248 ( 0.00%)              self.insert(k, v);
        .                   });
   47,841 ( 0.00%)      }
        .           
        .               #[inline]
        .               #[cfg(feature = "nightly")]
        .               fn extend_one(&mut self, (k, v): (K, V)) {
        .                   self.insert(k, v);
        .               }
        .           
        .               #[inline]
-- line 4588 ----------------------------------------

3,611,482 ( 0.08%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs
--------------------------------------------------------------------------------
Ir                 

-- line 118 ----------------------------------------
        .               stability: InternedSet<'tcx, attr::Stability>,
        .           
        .               /// `#[rustc_const_stable]` and `#[rustc_const_unstable]` attributes
        .               const_stability: InternedSet<'tcx, attr::ConstStability>,
        .           }
        .           
        .           impl<'tcx> CtxtInterners<'tcx> {
        .               fn new(arena: &'tcx WorkerLocal<Arena<'tcx>>) -> CtxtInterners<'tcx> {
       17 ( 0.00%)          CtxtInterners {
        .                       arena,
        .                       type_: Default::default(),
        .                       type_list: Default::default(),
        .                       substs: Default::default(),
        .                       region: Default::default(),
        .                       poly_existential_predicates: Default::default(),
        .                       canonical_var_infos: Default::default(),
        .                       predicate: Default::default(),
-- line 134 ----------------------------------------
-- line 143 ----------------------------------------
        .                       stability: Default::default(),
        .                       const_stability: Default::default(),
        .                   }
        .               }
        .           
        .               /// Interns a type.
        .               #[allow(rustc::usage_of_ty_tykind)]
        .               #[inline(never)]
3,639,120 ( 0.09%)      fn intern_ty(&self, kind: TyKind<'tcx>) -> Ty<'tcx> {
        .                   self.type_
2,274,450 ( 0.05%)              .intern(kind, |kind| {
   92,482 ( 0.00%)                  let flags = super::flags::FlagComputation::for_kind(&kind);
        .           
        .                           let ty_struct = TyS {
  184,964 ( 0.00%)                      kind,
        .                               flags: flags.flags,
        .                               outer_exclusive_binder: flags.outer_exclusive_binder,
        .                           };
        .           
        .                           Interned(self.arena.alloc(ty_struct))
        .                       })
        .                       .0
4,094,010 ( 0.10%)      }
        .           
        .               #[inline(never)]
1,271,992 ( 0.03%)      fn intern_predicate(
        .                   &self,
        .                   kind: Binder<'tcx, PredicateKind<'tcx>>,
        .               ) -> &'tcx PredicateInner<'tcx> {
        .                   self.predicate
1,112,993 ( 0.03%)              .intern(kind, |kind| {
  230,418 ( 0.01%)                  let flags = super::flags::FlagComputation::for_predicate(kind);
        .           
        .                           let predicate_struct = PredicateInner {
        .                               kind,
        .                               flags: flags.flags,
        .                               outer_exclusive_binder: flags.outer_exclusive_binder,
        .                           };
        .           
        .                           Interned(self.arena.alloc(predicate_struct))
        .                       })
        .                       .0
1,430,991 ( 0.03%)      }
        .           }
        .           
        .           pub struct CommonTypes<'tcx> {
        .               pub unit: Ty<'tcx>,
        .               pub bool: Ty<'tcx>,
        .               pub char: Ty<'tcx>,
        .               pub isize: Ty<'tcx>,
        .               pub i8: Ty<'tcx>,
-- line 193 ----------------------------------------
-- line 237 ----------------------------------------
        .           /// safely used as a key in the maps of a TypeckResults. For that to be
        .           /// the case, the HirId must have the same `owner` as all the other IDs in
        .           /// this table (signified by `hir_owner`). Otherwise the HirId
        .           /// would be in a different frame of reference and using its `local_id`
        .           /// would result in lookup errors, or worse, in silently wrong data being
        .           /// stored/returned.
        .           #[inline]
        .           fn validate_hir_id_for_typeck_results(hir_owner: LocalDefId, hir_id: hir::HirId) {
  608,250 ( 0.01%)      if hir_id.owner != hir_owner {
        .                   invalid_hir_id_for_typeck_results(hir_owner, hir_id);
        .               }
        .           }
        .           
        .           #[cold]
        .           #[inline(never)]
        .           fn invalid_hir_id_for_typeck_results(hir_owner: LocalDefId, hir_id: hir::HirId) {
        .               ty::tls::with(|tcx| {
-- line 253 ----------------------------------------
-- line 261 ----------------------------------------
        .           }
        .           
        .           impl<'a, V> LocalTableInContext<'a, V> {
        .               pub fn contains_key(&self, id: hir::HirId) -> bool {
        .                   validate_hir_id_for_typeck_results(self.hir_owner, id);
        .                   self.data.contains_key(&id.local_id)
        .               }
        .           
  465,278 ( 0.01%)      pub fn get(&self, id: hir::HirId) -> Option<&V> {
   93,601 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
   93,601 ( 0.00%)          self.data.get(&id.local_id)
  372,886 ( 0.01%)      }
        .           
        .               pub fn iter(&self) -> hash_map::Iter<'_, hir::ItemLocalId, V> {
        .                   self.data.iter()
        .               }
        .           }
        .           
        .           impl<'a, V> ::std::ops::Index<hir::HirId> for LocalTableInContext<'a, V> {
        .               type Output = V;
        .           
    7,254 ( 0.00%)      fn index(&self, key: hir::HirId) -> &V {
        .                   self.get(key).expect("LocalTableInContext: key not found")
    4,836 ( 0.00%)      }
        .           }
        .           
        .           pub struct LocalTableInContextMut<'a, V> {
        .               hir_owner: LocalDefId,
        .               data: &'a mut ItemLocalMap<V>,
        .           }
        .           
        .           impl<'a, V> LocalTableInContextMut<'a, V> {
-- line 292 ----------------------------------------
-- line 507 ----------------------------------------
        .               pub treat_byte_string_as_slice: ItemLocalSet,
        .           
        .               /// Contains the data for evaluating the effect of feature `capture_disjoint_fields`
        .               /// on closure size.
        .               pub closure_size_eval: FxHashMap<DefId, ClosureSizeProfileData<'tcx>>,
        .           }
        .           
        .           impl<'tcx> TypeckResults<'tcx> {
   22,476 ( 0.00%)      pub fn new(hir_owner: LocalDefId) -> TypeckResults<'tcx> {
  265,966 ( 0.01%)          TypeckResults {
        .                       hir_owner,
        .                       type_dependent_defs: Default::default(),
        .                       field_indices: Default::default(),
        .                       user_provided_types: Default::default(),
        .                       user_provided_sigs: Default::default(),
        .                       node_types: Default::default(),
        .                       node_substs: Default::default(),
        .                       adjustments: Default::default(),
-- line 524 ----------------------------------------
-- line 532 ----------------------------------------
        .                       tainted_by_errors: None,
        .                       concrete_opaque_types: Default::default(),
        .                       closure_min_captures: Default::default(),
        .                       closure_fake_reads: Default::default(),
        .                       generator_interior_types: ty::Binder::dummy(Default::default()),
        .                       treat_byte_string_as_slice: Default::default(),
        .                       closure_size_eval: Default::default(),
        .                   }
   22,476 ( 0.00%)      }
        .           
        .               /// Returns the final resolution of a `QPath` in an `Expr` or `Pat` node.
  100,335 ( 0.00%)      pub fn qpath_res(&self, qpath: &hir::QPath<'_>, id: hir::HirId) -> Res {
   66,890 ( 0.00%)          match *qpath {
  191,562 ( 0.00%)              hir::QPath::Resolved(_, ref path) => path.res,
        .                       hir::QPath::TypeRelative(..) | hir::QPath::LangItem(..) => self
        .                           .type_dependent_def(id)
    9,108 ( 0.00%)                  .map_or(Res::Err, |(kind, def_id)| Res::Def(kind, def_id)),
        .                   }
  167,225 ( 0.00%)      }
        .           
      164 ( 0.00%)      pub fn type_dependent_defs(
        .                   &self,
        .               ) -> LocalTableInContext<'_, Result<(DefKind, DefId), ErrorReported>> {
    6,539 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.type_dependent_defs }
      164 ( 0.00%)      }
        .           
    4,689 ( 0.00%)      pub fn type_dependent_def(&self, id: HirId) -> Option<(DefKind, DefId)> {
   10,507 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
        .                   self.type_dependent_defs.get(&id.local_id).cloned().and_then(|r| r.ok())
    9,378 ( 0.00%)      }
        .           
   17,200 ( 0.00%)      pub fn type_dependent_def_id(&self, id: HirId) -> Option<DefId> {
        .                   self.type_dependent_def(id).map(|(_, def_id)| def_id)
   17,200 ( 0.00%)      }
        .           
   37,027 ( 0.00%)      pub fn type_dependent_defs_mut(
        .                   &mut self,
        .               ) -> LocalTableInContextMut<'_, Result<(DefKind, DefId), ErrorReported>> {
   37,027 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.type_dependent_defs }
   37,027 ( 0.00%)      }
        .           
        .               pub fn field_indices(&self) -> LocalTableInContext<'_, usize> {
   13,322 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.field_indices }
    3,012 ( 0.00%)      }
        .           
        .               pub fn field_indices_mut(&mut self) -> LocalTableInContextMut<'_, usize> {
   16,362 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.field_indices }
    8,181 ( 0.00%)      }
        .           
        .               pub fn user_provided_types(&self) -> LocalTableInContext<'_, CanonicalUserType<'tcx>> {
   13,792 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.user_provided_types }
    6,896 ( 0.00%)      }
        .           
        .               pub fn user_provided_types_mut(
        .                   &mut self,
        .               ) -> LocalTableInContextMut<'_, CanonicalUserType<'tcx>> {
      344 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.user_provided_types }
      172 ( 0.00%)      }
        .           
        .               pub fn node_types(&self) -> LocalTableInContext<'_, Ty<'tcx>> {
   89,386 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.node_types }
   44,693 ( 0.00%)      }
        .           
        .               pub fn node_types_mut(&mut self) -> LocalTableInContextMut<'_, Ty<'tcx>> {
  143,680 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.node_types }
   71,840 ( 0.00%)      }
        .           
  607,746 ( 0.01%)      pub fn node_type(&self, id: hir::HirId) -> Ty<'tcx> {
  101,291 ( 0.00%)          self.node_type_opt(id).unwrap_or_else(|| {
        .                       bug!("node_type: no type for node `{}`", tls::with(|tcx| tcx.hir().node_to_string(id)))
        .                   })
  506,455 ( 0.01%)      }
        .           
  135,957 ( 0.00%)      pub fn node_type_opt(&self, id: hir::HirId) -> Option<Ty<'tcx>> {
  135,957 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
        .                   self.node_types.get(&id.local_id).cloned()
  271,914 ( 0.01%)      }
        .           
        .               pub fn node_substs_mut(&mut self) -> LocalTableInContextMut<'_, SubstsRef<'tcx>> {
   16,400 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.node_substs }
    8,200 ( 0.00%)      }
        .           
   47,271 ( 0.00%)      pub fn node_substs(&self, id: hir::HirId) -> SubstsRef<'tcx> {
   47,271 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
        .                   self.node_substs.get(&id.local_id).cloned().unwrap_or_else(|| InternalSubsts::empty())
   94,542 ( 0.00%)      }
        .           
   31,653 ( 0.00%)      pub fn node_substs_opt(&self, id: hir::HirId) -> Option<SubstsRef<'tcx>> {
   31,653 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
        .                   self.node_substs.get(&id.local_id).cloned()
   63,306 ( 0.00%)      }
        .           
        .               // Returns the type of a pattern as a monotype. Like @expr_ty, this function
        .               // doesn't provide type parameter substitutions.
        .               pub fn pat_ty(&self, pat: &hir::Pat<'_>) -> Ty<'tcx> {
   11,212 ( 0.00%)          self.node_type(pat.hir_id)
        .               }
        .           
        .               // Returns the type of an expression as a monotype.
        .               //
        .               // NB (1): This is the PRE-ADJUSTMENT TYPE for the expression.  That is, in
        .               // some cases, we insert `Adjustment` annotations such as auto-deref or
        .               // auto-ref.  The type returned by this function does not consider such
        .               // adjustments.  See `expr_ty_adjusted()` instead.
        .               //
        .               // NB (2): This type doesn't provide type parameter substitutions; e.g., if you
        .               // ask for the type of "id" in "id(3)", it will return "fn(&isize) -> isize"
        .               // instead of "fn(ty) -> T with T = isize".
        .               pub fn expr_ty(&self, expr: &hir::Expr<'_>) -> Ty<'tcx> {
  112,790 ( 0.00%)          self.node_type(expr.hir_id)
        .               }
        .           
        .               pub fn expr_ty_opt(&self, expr: &hir::Expr<'_>) -> Option<Ty<'tcx>> {
  128,654 ( 0.00%)          self.node_type_opt(expr.hir_id)
        .               }
        .           
        .               pub fn adjustments(&self) -> LocalTableInContext<'_, Vec<ty::adjustment::Adjustment<'tcx>>> {
   58,460 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.adjustments }
   29,230 ( 0.00%)      }
        .           
        .               pub fn adjustments_mut(
        .                   &mut self,
        .               ) -> LocalTableInContextMut<'_, Vec<ty::adjustment::Adjustment<'tcx>>> {
   97,380 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.adjustments }
   48,690 ( 0.00%)      }
        .           
   56,466 ( 0.00%)      pub fn expr_adjustments(&self, expr: &hir::Expr<'_>) -> &[ty::adjustment::Adjustment<'tcx>] {
  112,932 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, expr.hir_id);
        .                   self.adjustments.get(&expr.hir_id.local_id).map_or(&[], |a| &a[..])
  112,932 ( 0.00%)      }
        .           
        .               /// Returns the type of `expr`, considering any `Adjustment`
        .               /// entry recorded for that expression.
    9,470 ( 0.00%)      pub fn expr_ty_adjusted(&self, expr: &hir::Expr<'_>) -> Ty<'tcx> {
    1,894 ( 0.00%)          self.expr_adjustments(expr).last().map_or_else(|| self.expr_ty(expr), |adj| adj.target)
    5,232 ( 0.00%)      }
        .           
      760 ( 0.00%)      pub fn expr_ty_adjusted_opt(&self, expr: &hir::Expr<'_>) -> Option<Ty<'tcx>> {
      152 ( 0.00%)          self.expr_adjustments(expr).last().map(|adj| adj.target).or_else(|| self.expr_ty_opt(expr))
      456 ( 0.00%)      }
        .           
    6,375 ( 0.00%)      pub fn is_method_call(&self, expr: &hir::Expr<'_>) -> bool {
        .                   // Only paths and method calls/overloaded operators have
        .                   // entries in type_dependent_defs, ignore the former here.
   12,750 ( 0.00%)          if let hir::ExprKind::Path(_) = expr.kind {
        .                       return false;
        .                   }
        .           
   14,782 ( 0.00%)          matches!(self.type_dependent_defs().get(expr.hir_id), Some(Ok((DefKind::AssocFn, _))))
   12,750 ( 0.00%)      }
        .           
   34,665 ( 0.00%)      pub fn extract_binding_mode(&self, s: &Session, id: HirId, sp: Span) -> Option<BindingMode> {
        .                   self.pat_binding_modes().get(id).copied().or_else(|| {
        .                       s.delay_span_bug(sp, "missing binding mode");
        .                       None
        .                   })
   46,220 ( 0.00%)      }
        .           
        .               pub fn pat_binding_modes(&self) -> LocalTableInContext<'_, BindingMode> {
   29,701 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.pat_binding_modes }
    9,073 ( 0.00%)      }
        .           
        .               pub fn pat_binding_modes_mut(&mut self) -> LocalTableInContextMut<'_, BindingMode> {
   15,156 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.pat_binding_modes }
    7,578 ( 0.00%)      }
        .           
        .               pub fn pat_adjustments(&self) -> LocalTableInContext<'_, Vec<Ty<'tcx>>> {
   34,420 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.pat_adjustments }
   17,210 ( 0.00%)      }
        .           
        .               pub fn pat_adjustments_mut(&mut self) -> LocalTableInContextMut<'_, Vec<Ty<'tcx>>> {
   10,388 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.pat_adjustments }
    5,194 ( 0.00%)      }
        .           
        .               /// For a given closure, returns the iterator of `ty::CapturedPlace`s that are captured
        .               /// by the closure.
   10,180 ( 0.00%)      pub fn closure_min_captures_flattened(
        .                   &self,
        .                   closure_def_id: DefId,
        .               ) -> impl Iterator<Item = &ty::CapturedPlace<'tcx>> {
        .                   self.closure_min_captures
        .                       .get(&closure_def_id)
        .                       .map(|closure_min_captures| closure_min_captures.values().flat_map(|v| v.iter()))
        .                       .into_iter()
        .                       .flatten()
   12,725 ( 0.00%)      }
        .           
        .               pub fn closure_kind_origins(&self) -> LocalTableInContext<'_, (Span, HirPlace<'tcx>)> {
    2,032 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.closure_kind_origins }
    1,016 ( 0.00%)      }
        .           
        .               pub fn closure_kind_origins_mut(
        .                   &mut self,
        .               ) -> LocalTableInContextMut<'_, (Span, HirPlace<'tcx>)> {
        .                   LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.closure_kind_origins }
        .               }
        .           
        .               pub fn liberated_fn_sigs(&self) -> LocalTableInContext<'_, ty::FnSig<'tcx>> {
    6,868 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.liberated_fn_sigs }
    3,434 ( 0.00%)      }
        .           
        .               pub fn liberated_fn_sigs_mut(&mut self) -> LocalTableInContextMut<'_, ty::FnSig<'tcx>> {
    4,836 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.liberated_fn_sigs }
    2,418 ( 0.00%)      }
        .           
        .               pub fn fru_field_types(&self) -> LocalTableInContext<'_, Vec<Ty<'tcx>>> {
    2,032 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.fru_field_types }
    1,016 ( 0.00%)      }
        .           
        .               pub fn fru_field_types_mut(&mut self) -> LocalTableInContextMut<'_, Vec<Ty<'tcx>>> {
        .                   LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.fru_field_types }
        .               }
        .           
      195 ( 0.00%)      pub fn is_coercion_cast(&self, hir_id: hir::HirId) -> bool {
       65 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, hir_id);
        .                   self.coercion_casts.contains(&hir_id.local_id)
      130 ( 0.00%)      }
        .           
        .               pub fn set_coercion_cast(&mut self, id: ItemLocalId) {
        .                   self.coercion_casts.insert(id);
        .               }
        .           
        .               pub fn coercion_casts(&self) -> &ItemLocalSet {
    1,016 ( 0.00%)          &self.coercion_casts
    1,016 ( 0.00%)      }
        .           }
        .           
        .           impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for TypeckResults<'tcx> {
        .               fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {
        .                   let ty::TypeckResults {
        .                       hir_owner,
        .                       ref type_dependent_defs,
        .                       ref field_indices,
-- line 764 ----------------------------------------
-- line 819 ----------------------------------------
        .                   const START_INDEX = 0,
        .               }
        .           }
        .           
        .           /// Mapping of type annotation indices to canonical user type annotations.
        .           pub type CanonicalUserTypeAnnotations<'tcx> =
        .               IndexVec<UserTypeAnnotationIndex, CanonicalUserTypeAnnotation<'tcx>>;
        .           
      164 ( 0.00%)  #[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable, TypeFoldable, Lift)]
        .           pub struct CanonicalUserTypeAnnotation<'tcx> {
        .               pub user_ty: CanonicalUserType<'tcx>,
        .               pub span: Span,
       86 ( 0.00%)      pub inferred_ty: Ty<'tcx>,
        .           }
        .           
        .           /// Canonicalized user type annotation.
        .           pub type CanonicalUserType<'tcx> = Canonical<'tcx, UserType<'tcx>>;
        .           
        .           impl<'tcx> CanonicalUserType<'tcx> {
        .               /// Returns `true` if this represents a substitution of the form `[?0, ?1, ?2]`,
        .               /// i.e., each thing is mapped to a canonical variable with the same index.
    2,635 ( 0.00%)      pub fn is_identity(&self) -> bool {
    5,270 ( 0.00%)          match self.value {
        .                       UserType::Ty(_) => false,
        .                       UserType::TypeOf(_, user_substs) => {
    2,635 ( 0.00%)                  if user_substs.user_self_ty.is_some() {
        .                               return false;
        .                           }
        .           
        .                           iter::zip(user_substs.substs, BoundVar::new(0)..).all(|(kind, cvar)| {
        .                               match kind.unpack() {
    7,410 ( 0.00%)                          GenericArgKind::Type(ty) => match ty.kind() {
        .                                       ty::Bound(debruijn, b) => {
        .                                           // We only allow a `ty::INNERMOST` index in substitutions.
    3,703 ( 0.00%)                                  assert_eq!(*debruijn, ty::INNERMOST);
        .                                           cvar == b.var
        .                                       }
        .                                       _ => false,
        .                                   },
        .           
      226 ( 0.00%)                          GenericArgKind::Lifetime(r) => match r {
        .                                       ty::ReLateBound(debruijn, br) => {
        .                                           // We only allow a `ty::INNERMOST` index in substitutions.
        .                                           assert_eq!(*debruijn, ty::INNERMOST);
        .                                           cvar == br.var
        .                                       }
        .                                       _ => false,
        .                                   },
        .           
-- line 867 ----------------------------------------
-- line 872 ----------------------------------------
        .                                           cvar == b
        .                                       }
        .                                       _ => false,
        .                                   },
        .                               }
        .                           })
        .                       }
        .                   }
    5,270 ( 0.00%)      }
        .           }
        .           
        .           /// A user-given type annotation attached to a constant. These arise
        .           /// from constants that are named via paths, like `Foo::<A>::new` and
        .           /// so forth.
      516 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, TyEncodable, TyDecodable)]
   24,757 ( 0.00%)  #[derive(HashStable, TypeFoldable, Lift)]
        .           pub enum UserType<'tcx> {
        .               Ty(Ty<'tcx>),
        .           
        .               /// The canonical type is the result of `type_of(def_id)` with the
        .               /// given substitutions applied.
        .               TypeOf(DefId, UserSubsts<'tcx>),
        .           }
        .           
        .           impl<'tcx> CommonTypes<'tcx> {
        .               fn new(interners: &CtxtInterners<'tcx>) -> CommonTypes<'tcx> {
      111 ( 0.00%)          let mk = |ty| interners.intern_ty(ty);
        .           
        .                   CommonTypes {
        .                       unit: mk(Tuple(List::empty())),
        .                       bool: mk(Bool),
        .                       char: mk(Char),
        .                       never: mk(Never),
        .                       isize: mk(Int(ty::IntTy::Isize)),
        .                       i8: mk(Int(ty::IntTy::I8)),
-- line 906 ----------------------------------------
-- line 921 ----------------------------------------
        .           
        .                       trait_object_dummy_self: mk(Infer(ty::FreshTy(0))),
        .                   }
        .               }
        .           }
        .           
        .           impl<'tcx> CommonLifetimes<'tcx> {
        .               fn new(interners: &CtxtInterners<'tcx>) -> CommonLifetimes<'tcx> {
       67 ( 0.00%)          let mk = |r| interners.region.intern(r, |r| Interned(interners.arena.alloc(r))).0;
        .           
        .                   CommonLifetimes {
        5 ( 0.00%)              re_root_empty: mk(RegionKind::ReEmpty(ty::UniverseIndex::ROOT)),
        5 ( 0.00%)              re_static: mk(RegionKind::ReStatic),
        5 ( 0.00%)              re_erased: mk(RegionKind::ReErased),
        .                   }
        .               }
        .           }
        .           
        .           impl<'tcx> CommonConsts<'tcx> {
        .               fn new(interners: &CtxtInterners<'tcx>, types: &CommonTypes<'tcx>) -> CommonConsts<'tcx> {
        6 ( 0.00%)          let mk_const = |c| interners.const_.intern(c, |c| Interned(interners.arena.alloc(c))).0;
        .           
        .                   CommonConsts {
        .                       unit: mk_const(ty::Const {
        .                           val: ty::ConstKind::Value(ConstValue::Scalar(Scalar::ZST)),
        .                           ty: types.unit,
        .                       }),
        .                   }
        .               }
-- line 949 ----------------------------------------
-- line 1045 ----------------------------------------
        .           
        .               /// Stores memory for globals (statics/consts).
        .               pub(crate) alloc_map: Lock<interpret::AllocMap<'tcx>>,
        .           
        .               output_filenames: Arc<OutputFilenames>,
        .           }
        .           
        .           impl<'tcx> TyCtxt<'tcx> {
   54,960 ( 0.00%)      pub fn typeck_opt_const_arg(
        .                   self,
        .                   def: ty::WithOptConstParam<LocalDefId>,
        .               ) -> &'tcx TypeckResults<'tcx> {
   21,984 ( 0.00%)          if let Some(param_did) = def.const_param_did {
        .                       self.typeck_const_arg((def.did, param_did))
        .                   } else {
        .                       self.typeck(def.did)
        .                   }
   43,968 ( 0.00%)      }
        .           
    3,957 ( 0.00%)      pub fn alloc_steal_thir(self, thir: Thir<'tcx>) -> &'tcx Steal<Thir<'tcx>> {
    1,319 ( 0.00%)          self.arena.alloc(Steal::new(thir))
    5,276 ( 0.00%)      }
        .           
   20,335 ( 0.00%)      pub fn alloc_steal_mir(self, mir: Body<'tcx>) -> &'tcx Steal<Body<'tcx>> {
    4,067 ( 0.00%)          self.arena.alloc(Steal::new(mir))
   28,469 ( 0.00%)      }
        .           
    5,276 ( 0.00%)      pub fn alloc_steal_promoted(
        .                   self,
        .                   promoted: IndexVec<Promoted, Body<'tcx>>,
        .               ) -> &'tcx Steal<IndexVec<Promoted, Body<'tcx>>> {
    1,319 ( 0.00%)          self.arena.alloc(Steal::new(promoted))
    6,595 ( 0.00%)      }
        .           
    1,980 ( 0.00%)      pub fn alloc_adt_def(
        .                   self,
        .                   did: DefId,
        .                   kind: AdtKind,
        .                   variants: IndexVec<VariantIdx, ty::VariantDef>,
        .                   repr: ReprOptions,
        .               ) -> &'tcx ty::AdtDef {
    3,520 ( 0.00%)          self.intern_adt_def(ty::AdtDef::new(self, did, kind, variants, repr))
      880 ( 0.00%)      }
        .           
        .               /// Allocates a read-only byte or string literal for `mir::interpret`.
        5 ( 0.00%)      pub fn allocate_bytes(self, bytes: &[u8]) -> interpret::AllocId {
        .                   // Create an allocation that just contains these bytes.
        1 ( 0.00%)          let alloc = interpret::Allocation::from_bytes_byte_aligned_immutable(bytes);
       13 ( 0.00%)          let alloc = self.intern_const_alloc(alloc);
        .                   self.create_memory_alloc(alloc)
        5 ( 0.00%)      }
        .           
        .               /// Returns a range of the start/end indices specified with the
        .               /// `rustc_layout_scalar_valid_range` attribute.
        .               // FIXME(eddyb) this is an awkward spot for this method, maybe move it?
   23,360 ( 0.00%)      pub fn layout_scalar_valid_range(self, def_id: DefId) -> (Bound<u128>, Bound<u128>) {
   11,680 ( 0.00%)          let attrs = self.get_attrs(def_id);
   49,640 ( 0.00%)          let get = |name| {
   11,680 ( 0.00%)              let attr = match attrs.iter().find(|a| a.has_name(name)) {
        .                           Some(attr) => attr,
        .                           None => return Bound::Unbounded,
        .                       };
        .                       debug!("layout_scalar_valid_range: attr={:?}", attr);
       24 ( 0.00%)              if let Some(
        .                           &[
        .                               ast::NestedMetaItem::Literal(ast::Lit {
       12 ( 0.00%)                          kind: ast::LitKind::Int(a, _), ..
        .                               }),
        .                           ],
        6 ( 0.00%)              ) = attr.meta_item_list().as_deref()
        .                       {
        .                           Bound::Included(a)
        .                       } else {
        .                           self.sess
        .                               .delay_span_bug(attr.span, "invalid rustc_layout_scalar_valid_range attribute");
        .                           Bound::Unbounded
        .                       }
   58,400 ( 0.00%)          };
   17,520 ( 0.00%)          (
   17,520 ( 0.00%)              get(sym::rustc_layout_scalar_valid_range_start),
    8,760 ( 0.00%)              get(sym::rustc_layout_scalar_valid_range_end),
        .                   )
   23,360 ( 0.00%)      }
        .           
        .               pub fn lift<T: Lift<'tcx>>(self, value: T) -> Option<T::Lifted> {
        .                   value.lift_to_tcx(self)
        .               }
        .           
        .               /// Creates a type context and call the closure with a `TyCtxt` reference
        .               /// to the context. The closure enforces that the type context and any interned
        .               /// value (types, substs, etc.) can only be used while `ty::tls` has a valid
        .               /// reference to the context, to allow formatting values that need it.
       23 ( 0.00%)      pub fn create_global_ctxt(
        .                   s: &'tcx Session,
        .                   lint_store: Lrc<dyn Any + sync::Send + sync::Sync>,
        .                   arena: &'tcx WorkerLocal<Arena<'tcx>>,
        .                   resolutions: ty::ResolverOutputs,
        .                   krate: &'tcx hir::Crate<'tcx>,
        .                   dep_graph: DepGraph,
        .                   on_disk_cache: Option<&'tcx dyn OnDiskCache<'tcx>>,
        .                   queries: &'tcx dyn query::QueryEngine<'tcx>,
        .                   query_kinds: &'tcx [DepKindStruct],
        .                   crate_name: &str,
        .                   output_filenames: OutputFilenames,
        .               ) -> GlobalCtxt<'tcx> {
        1 ( 0.00%)          let data_layout = TargetDataLayout::parse(&s.target).unwrap_or_else(|err| {
        .                       s.fatal(&err);
        .                   });
        .                   let interners = CtxtInterners::new(arena);
        .                   let common_types = CommonTypes::new(&interners);
        .                   let common_lifetimes = CommonLifetimes::new(&interners);
        .                   let common_consts = CommonConsts::new(&interners, &common_types);
        .           
      127 ( 0.00%)          GlobalCtxt {
        .                       sess: s,
        6 ( 0.00%)              lint_store,
        .                       arena,
        2 ( 0.00%)              interners,
        5 ( 0.00%)              dep_graph,
        4 ( 0.00%)              untracked_resolutions: resolutions,
        2 ( 0.00%)              prof: s.prof.clone(),
        .                       types: common_types,
        .                       lifetimes: common_lifetimes,
        .                       consts: common_consts,
        .                       untracked_crate: krate,
        .                       on_disk_cache,
        .                       queries,
        .                       query_caches: query::QueryCaches::default(),
        .                       query_kinds,
        .                       ty_rcache: Default::default(),
        .                       pred_rcache: Default::default(),
        .                       selection_cache: Default::default(),
        .                       evaluation_cache: Default::default(),
        1 ( 0.00%)              crate_name: Symbol::intern(crate_name),
        .                       data_layout,
        .                       alloc_map: Lock::new(interpret::AllocMap::new()),
        .                       output_filenames: Arc::new(output_filenames),
        .                   }
        9 ( 0.00%)      }
        .           
        .               crate fn query_kind(self, k: DepKind) -> &'tcx DepKindStruct {
        .                   &self.query_kinds[k as usize]
        .               }
        .           
        .               /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` to ensure it gets used.
        .               #[track_caller]
        .               pub fn ty_error(self) -> Ty<'tcx> {
-- line 1191 ----------------------------------------
-- line 1217 ----------------------------------------
        .                   ty: Ty<'tcx>,
        .                   span: S,
        .                   msg: &str,
        .               ) -> &'tcx Const<'tcx> {
        .                   self.sess.delay_span_bug(span, msg);
        .                   self.mk_const(ty::Const { val: ty::ConstKind::Error(DelaySpanBugEmitted(())), ty })
        .               }
        .           
    1,211 ( 0.00%)      pub fn consider_optimizing<T: Fn() -> String>(self, msg: T) -> bool {
      173 ( 0.00%)          let cname = self.crate_name(LOCAL_CRATE);
    1,384 ( 0.00%)          self.sess.consider_optimizing(cname.as_str(), msg)
    1,384 ( 0.00%)      }
        .           
        .               /// Obtain all lang items of this crate and all dependencies (recursively)
1,232,175 ( 0.03%)      pub fn lang_items(self) -> &'tcx rustc_hir::lang_items::LanguageItems {
        .                   self.get_lang_items(())
1,584,225 ( 0.04%)      }
        .           
        .               /// Obtain the given diagnostic item's `DefId`. Use `is_diagnostic_item` if you just want to
        .               /// compare against another `DefId`, since `is_diagnostic_item` is cheaper.
      420 ( 0.00%)      pub fn get_diagnostic_item(self, name: Symbol) -> Option<DefId> {
        .                   self.all_diagnostic_items(()).name_to_id.get(&name).copied()
      480 ( 0.00%)      }
        .           
        .               /// Obtain the diagnostic item's name
   34,657 ( 0.00%)      pub fn get_diagnostic_name(self, id: DefId) -> Option<Symbol> {
        .                   self.diagnostic_items(id.krate).id_to_name.get(&id).copied()
   39,608 ( 0.00%)      }
        .           
        .               /// Check whether the diagnostic item with the given `name` has the given `DefId`.
   33,971 ( 0.00%)      pub fn is_diagnostic_item(self, name: Symbol, did: DefId) -> bool {
        .                   self.diagnostic_items(did.krate).name_to_id.get(&name) == Some(&did)
   38,824 ( 0.00%)      }
        .           
   17,738 ( 0.00%)      pub fn stability(self) -> &'tcx stability::Index<'tcx> {
        .                   self.stability_index(())
   22,806 ( 0.00%)      }
        .           
  588,476 ( 0.01%)      pub fn features(self) -> &'tcx rustc_feature::Features {
        .                   self.features_query(())
  672,544 ( 0.02%)      }
        .           
        .               pub fn def_key(self, id: DefId) -> rustc_hir::definitions::DefKey {
        .                   // Accessing the DefKey is ok, since it is part of DefPathHash.
   37,922 ( 0.00%)          if let Some(id) = id.as_local() {
        .                       self.untracked_resolutions.definitions.def_key(id)
        .                   } else {
   13,931 ( 0.00%)              self.untracked_resolutions.cstore.def_key(id)
        .                   }
        .               }
        .           
        .               /// Converts a `DefId` into its fully expanded `DefPath` (every
        .               /// `DefId` is really just an interned `DefPath`).
        .               ///
        .               /// Note that if `id` is not local to this crate, the result will
        .               ///  be a non-local `DefPath`.
-- line 1272 ----------------------------------------
-- line 1277 ----------------------------------------
        .                   } else {
        .                       self.untracked_resolutions.cstore.def_path(id)
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn def_path_hash(self, def_id: DefId) -> rustc_hir::definitions::DefPathHash {
        .                   // Accessing the DefPathHash is ok, it is incr. comp. stable.
   10,755 ( 0.00%)          if let Some(def_id) = def_id.as_local() {
        .                       self.untracked_resolutions.definitions.def_path_hash(def_id)
        .                   } else {
      200 ( 0.00%)              self.untracked_resolutions.cstore.def_path_hash(def_id)
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn stable_crate_id(self, crate_num: CrateNum) -> StableCrateId {
        .                   if crate_num == LOCAL_CRATE {
        .                       self.sess.local_stable_crate_id()
        .                   } else {
-- line 1296 ----------------------------------------
-- line 1353 ----------------------------------------
        .                       &(format!("{:08x}", stable_crate_id.to_u64()))[..4],
        .                       self.def_path(def_id).to_string_no_crate_verbose()
        .                   )
        .               }
        .           
        .               /// Note that this is *untracked* and should only be used within the query
        .               /// system if the result is otherwise tracked through queries
        .               pub fn cstore_untracked(self) -> &'tcx ty::CrateStoreDyn {
   45,236 ( 0.00%)          &*self.untracked_resolutions.cstore
   22,618 ( 0.00%)      }
        .           
        .               /// Note that this is *untracked* and should only be used within the query
        .               /// system if the result is otherwise tracked through queries
        .               pub fn definitions_untracked(self) -> &'tcx hir::definitions::Definitions {
        .                   &self.untracked_resolutions.definitions
        .               }
        .           
        .               #[inline(always)]
        .               pub fn create_stable_hashing_context(self) -> StableHashingContext<'tcx> {
       50 ( 0.00%)          let resolutions = &self.gcx.untracked_resolutions;
      249 ( 0.00%)          StableHashingContext::new(self.sess, &resolutions.definitions, &*resolutions.cstore)
        .               }
        .           
        .               #[inline(always)]
        .               pub fn create_no_span_stable_hashing_context(self) -> StableHashingContext<'tcx> {
        .                   let resolutions = &self.gcx.untracked_resolutions;
        .                   StableHashingContext::ignore_spans(
        .                       self.sess,
        .                       &resolutions.definitions,
-- line 1381 ----------------------------------------
-- line 1390 ----------------------------------------
        .               /// If `true`, we should use the MIR-based borrowck, but also
        .               /// fall back on the AST borrowck if the MIR-based one errors.
        .               pub fn migrate_borrowck(self) -> bool {
        .                   self.borrowck_mode().migrate()
        .               }
        .           
        .               /// What mode(s) of borrowck should we run? AST? MIR? both?
        .               /// (Also considers the `#![feature(nll)]` setting.)
    2,032 ( 0.00%)      pub fn borrowck_mode(self) -> BorrowckMode {
        .                   // Here are the main constraints we need to deal with:
        .                   //
        .                   // 1. An opts.borrowck_mode of `BorrowckMode::Migrate` is
        .                   //    synonymous with no `-Z borrowck=...` flag at all.
        .                   //
        .                   // 2. We want to allow developers on the Nightly channel
        .                   //    to opt back into the "hard error" mode for NLL,
        .                   //    (which they can do via specifying `#![feature(nll)]`
-- line 1406 ----------------------------------------
-- line 1413 ----------------------------------------
        .                   //   errors. (To simplify the code here, it now even overrides
        .                   //   a user's attempt to specify `-Z borrowck=compare`, which
        .                   //   we arguably do not need anymore and should remove.)
        .                   //
        .                   // * Otherwise, if no `-Z borrowck=...` then use migrate mode
        .                   //
        .                   // * Otherwise, use the behavior requested via `-Z borrowck=...`
        .           
    3,048 ( 0.00%)          if self.features().nll {
        .                       return BorrowckMode::Mir;
        .                   }
        .           
    1,016 ( 0.00%)          self.sess.opts.borrowck_mode
    4,064 ( 0.00%)      }
        .           
        .               /// If `true`, we should use lazy normalization for constants, otherwise
        .               /// we still evaluate them eagerly.
        .               #[inline]
        .               pub fn lazy_normalization(self) -> bool {
      305 ( 0.00%)          let features = self.features();
        .                   // Note: We only use lazy normalization for generic const expressions.
      183 ( 0.00%)          features.generic_const_exprs
        .               }
        .           
        .               #[inline]
        .               pub fn local_crate_exports_generics(self) -> bool {
        .                   debug_assert!(self.sess.opts.share_generics());
        .           
        .                   self.sess.crate_types().iter().any(|crate_type| {
        .                       match crate_type {
-- line 1442 ----------------------------------------
-- line 1554 ----------------------------------------
        .                   self.mk_imm_ref(
        .                       self.lifetimes.re_static,
        .                       self.type_of(self.require_lang_item(LangItem::PanicLocation, None))
        .                           .subst(self, self.mk_substs([self.lifetimes.re_static.into()].iter())),
        .                   )
        .               }
        .           
        .               /// Returns a displayable description and article for the given `def_id` (e.g. `("a", "struct")`).
    5,445 ( 0.00%)      pub fn article_and_description(self, def_id: DefId) -> (&'static str, &'static str) {
    3,960 ( 0.00%)          match self.def_kind(def_id) {
        .                       DefKind::Generator => match self.generator_kind(def_id).unwrap() {
        .                           rustc_hir::GeneratorKind::Async(..) => ("an", "async closure"),
        .                           rustc_hir::GeneratorKind::Gen => ("a", "generator"),
        .                       },
    8,910 ( 0.00%)              def_kind => (def_kind.article(), def_kind.descr(def_id)),
        .                   }
    4,455 ( 0.00%)      }
        .           
        .               pub fn type_length_limit(self) -> Limit {
        .                   self.limits(()).type_length_limit
        .               }
        .           
  399,847 ( 0.01%)      pub fn recursion_limit(self) -> Limit {
        .                   self.limits(()).recursion_limit
  456,968 ( 0.01%)      }
        .           
        .               pub fn move_size_limit(self) -> Limit {
        .                   self.limits(()).move_size_limit
        .               }
        .           
    1,540 ( 0.00%)      pub fn const_eval_limit(self) -> Limit {
        .                   self.limits(()).const_eval_limit
    1,760 ( 0.00%)      }
        .           
        .               pub fn all_traits(self) -> impl Iterator<Item = DefId> + 'tcx {
        .                   iter::once(LOCAL_CRATE)
        .                       .chain(self.crates(()).iter().copied())
        .                       .flat_map(move |cnum| self.traits_in_crate(cnum).iter().copied())
        .               }
        .           }
        .           
-- line 1594 ----------------------------------------
-- line 1684 ----------------------------------------
        .               /// This is the implicit state of rustc. It contains the current
        .               /// `TyCtxt` and query. It is updated when creating a local interner or
        .               /// executing a new query. Whenever there's a `TyCtxt` value available
        .               /// you should also have access to an `ImplicitCtxt` through the functions
        .               /// in this module.
        .               #[derive(Clone)]
        .               pub struct ImplicitCtxt<'a, 'tcx> {
        .                   /// The current `TyCtxt`.
        1 ( 0.00%)          pub tcx: TyCtxt<'tcx>,
        .           
        .                   /// The current query job, if any. This is updated by `JobOwner::start` in
        .                   /// `ty::query::plumbing` when executing a query.
        .                   pub query: Option<query::QueryJobId<DepKind>>,
        .           
        .                   /// Where to store diagnostics for the current query job, if any.
        .                   /// This is updated by `JobOwner::start` in `ty::query::plumbing` when executing a query.
        .                   pub diagnostics: Option<&'a Lock<ThinVec<Diagnostic>>>,
-- line 1700 ----------------------------------------
-- line 1703 ----------------------------------------
        .                   pub layout_depth: usize,
        .           
        .                   /// The current dep graph task. This is used to add dependencies to queries
        .                   /// when executing them.
        .                   pub task_deps: TaskDepsRef<'a>,
        .               }
        .           
        .               impl<'a, 'tcx> ImplicitCtxt<'a, 'tcx> {
        5 ( 0.00%)          pub fn new(gcx: &'tcx GlobalCtxt<'tcx>) -> Self {
        .                       let tcx = TyCtxt { gcx };
       25 ( 0.00%)              ImplicitCtxt {
        .                           tcx,
        .                           query: None,
        .                           diagnostics: None,
        .                           layout_depth: 0,
        .                           task_deps: TaskDepsRef::Ignore,
        .                       }
        5 ( 0.00%)          }
        .               }
        .           
        .               /// Sets Rayon's thread-local variable, which is preserved for Rayon jobs
        .               /// to `value` during the call to `f`. It is restored to its previous value after.
        .               /// This is used to set the pointer to the new `ImplicitCtxt`.
        .               #[cfg(parallel_compiler)]
        .               #[inline]
        .               fn set_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {
-- line 1728 ----------------------------------------
-- line 1745 ----------------------------------------
        .           
        .               /// Sets TLV to `value` during the call to `f`.
        .               /// It is restored to its previous value after.
        .               /// This is used to set the pointer to the new `ImplicitCtxt`.
        .               #[cfg(not(parallel_compiler))]
        .               #[inline]
        .               fn set_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {
        .                   let old = get_tlv();
  125,011 ( 0.00%)          let _reset = rustc_data_structures::OnDrop(move || TLV.with(|tlv| tlv.set(old)));
        .                   TLV.with(|tlv| tlv.set(value));
        .                   f()
        .               }
        .           
        .               /// Gets the pointer to the current `ImplicitCtxt`.
        .               #[cfg(not(parallel_compiler))]
        .               #[inline]
        .               fn get_tlv() -> usize {
-- line 1761 ----------------------------------------
-- line 1763 ----------------------------------------
        .               }
        .           
        .               /// Sets `context` as the new current `ImplicitCtxt` for the duration of the function `f`.
        .               #[inline]
        .               pub fn enter_context<'a, 'tcx, F, R>(context: &ImplicitCtxt<'a, 'tcx>, f: F) -> R
        .               where
        .                   F: FnOnce(&ImplicitCtxt<'a, 'tcx>) -> R,
        .               {
        1 ( 0.00%)          set_tlv(context as *const _ as usize, || f(&context))
        .               }
        .           
        .               /// Allows access to the current `ImplicitCtxt` in a closure if one is available.
        .               #[inline]
        .               pub fn with_context_opt<F, R>(f: F) -> R
        .               where
        .                   F: for<'a, 'tcx> FnOnce(Option<&ImplicitCtxt<'a, 'tcx>>) -> R,
        .               {
        .                   let context = get_tlv();
  488,384 ( 0.01%)          if context == 0 {
        .                       f(None)
        .                   } else {
        .                       // We could get an `ImplicitCtxt` pointer from another thread.
        .                       // Ensure that `ImplicitCtxt` is `Sync`.
        .                       sync::assert_sync::<ImplicitCtxt<'_, '_>>();
        .           
        .                       unsafe { f(Some(&*(context as *const ImplicitCtxt<'_, '_>))) }
        .                   }
-- line 1789 ----------------------------------------
-- line 1805 ----------------------------------------
        .               /// This will panic if you pass it a `TyCtxt` which is different from the current
        .               /// `ImplicitCtxt`'s `tcx` field.
        .               #[inline]
        .               pub fn with_related_context<'tcx, F, R>(tcx: TyCtxt<'tcx>, f: F) -> R
        .               where
        .                   F: FnOnce(&ImplicitCtxt<'_, 'tcx>) -> R,
        .               {
        .                   with_context(|context| unsafe {
  241,303 ( 0.01%)              assert!(ptr_eq(context.tcx.gcx, tcx.gcx));
        .                       let context: &ImplicitCtxt<'_, '_> = mem::transmute(context);
  241,252 ( 0.01%)              f(context)
        .                   })
        .               }
        .           
        .               /// Allows access to the `TyCtxt` in the current `ImplicitCtxt`.
        .               /// Panics if there is no `ImplicitCtxt` available.
        .               #[inline]
        .               pub fn with<F, R>(f: F) -> R
        .               where
-- line 1823 ----------------------------------------
-- line 1981 ----------------------------------------
        .               fn into_pointer(&self) -> *const () {
        .                   self.0 as *const _ as *const ()
        .               }
        .           }
        .           
        .           #[allow(rustc::usage_of_ty_tykind)]
        .           impl<'tcx> Borrow<TyKind<'tcx>> for Interned<'tcx, TyS<'tcx>> {
        .               fn borrow<'a>(&'a self) -> &'a TyKind<'tcx> {
  416,031 ( 0.01%)          &self.0.kind()
        .               }
        .           }
        .           
        .           impl<'tcx> PartialEq for Interned<'tcx, TyS<'tcx>> {
        .               fn eq(&self, other: &Interned<'tcx, TyS<'tcx>>) -> bool {
        .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
        .                   // `x == y`.
        .                   self.0.kind() == other.0.kind()
-- line 1997 ----------------------------------------
-- line 1998 ----------------------------------------
        .               }
        .           }
        .           
        .           impl<'tcx> Eq for Interned<'tcx, TyS<'tcx>> {}
        .           
        .           impl<'tcx> Hash for Interned<'tcx, TyS<'tcx>> {
        .               fn hash<H: Hasher>(&self, s: &mut H) {
        .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
  172,020 ( 0.00%)          self.0.kind().hash(s)
        .               }
        .           }
        .           
        .           impl<'tcx> Borrow<Binder<'tcx, PredicateKind<'tcx>>> for Interned<'tcx, PredicateInner<'tcx>> {
        .               fn borrow<'a>(&'a self) -> &'a Binder<'tcx, PredicateKind<'tcx>> {
  125,163 ( 0.00%)          &self.0.kind
        .               }
        .           }
        .           
        .           impl<'tcx> PartialEq for Interned<'tcx, PredicateInner<'tcx>> {
        .               fn eq(&self, other: &Interned<'tcx, PredicateInner<'tcx>>) -> bool {
        .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
        .                   // `x == y`.
        .                   self.0.kind == other.0.kind
-- line 2020 ----------------------------------------
-- line 2021 ----------------------------------------
        .               }
        .           }
        .           
        .           impl<'tcx> Eq for Interned<'tcx, PredicateInner<'tcx>> {}
        .           
        .           impl<'tcx> Hash for Interned<'tcx, PredicateInner<'tcx>> {
        .               fn hash<H: Hasher>(&self, s: &mut H) {
        .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
   57,340 ( 0.00%)          self.0.kind.hash(s)
        .               }
        .           }
        .           
        .           impl<'tcx, T> Borrow<[T]> for Interned<'tcx, List<T>> {
        .               fn borrow<'a>(&'a self) -> &'a [T] {
  373,051 ( 0.01%)          &self.0[..]
        .               }
        .           }
        .           
        .           impl<'tcx, T: PartialEq> PartialEq for Interned<'tcx, List<T>> {
        .               fn eq(&self, other: &Interned<'tcx, List<T>>) -> bool {
        .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
        .                   // `x == y`.
        .                   self.0[..] == other.0[..]
-- line 2043 ----------------------------------------
-- line 2044 ----------------------------------------
        .               }
        .           }
        .           
        .           impl<'tcx, T: Eq> Eq for Interned<'tcx, List<T>> {}
        .           
        .           impl<'tcx, T: Hash> Hash for Interned<'tcx, List<T>> {
        .               fn hash<H: Hasher>(&self, s: &mut H) {
        .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
   72,597 ( 0.00%)          self.0[..].hash(s)
        .               }
        .           }
        .           
        .           macro_rules! direct_interners {
        .               ($($name:ident: $method:ident($ty:ty),)+) => {
        .                   $(impl<'tcx> Borrow<$ty> for Interned<'tcx, $ty> {
        .                       fn borrow<'a>(&'a self) -> &'a $ty {
  145,376 ( 0.00%)                  &self.0
        .                       }
        .                   }
        .           
        .                   impl<'tcx> PartialEq for Interned<'tcx, $ty> {
        .                       fn eq(&self, other: &Self) -> bool {
        .                           // The `Borrow` trait requires that `x.borrow() == y.borrow()`
        .                           // equals `x == y`.
        .                           self.0 == other.0
-- line 2068 ----------------------------------------
-- line 2070 ----------------------------------------
        .                   }
        .           
        .                   impl<'tcx> Eq for Interned<'tcx, $ty> {}
        .           
        .                   impl<'tcx> Hash for Interned<'tcx, $ty> {
        .                       fn hash<H: Hasher>(&self, s: &mut H) {
        .                           // The `Borrow` trait requires that `x.borrow().hash(s) ==
        .                           // x.hash(s)`.
   34,184 ( 0.00%)                  self.0.hash(s)
        .                       }
        .                   }
        .           
        .                   impl<'tcx> TyCtxt<'tcx> {
1,209,831 ( 0.03%)              pub fn $method(self, v: $ty) -> &'tcx $ty {
  622,131 ( 0.01%)                  self.interners.$name.intern(v, |v| {
    7,454 ( 0.00%)                      Interned(self.interners.arena.alloc(v))
        .                           }).0
1,360,764 ( 0.03%)              }
        .                   })+
        .               }
        .           }
        .           
        .           direct_interners! {
        .               region: mk_region(RegionKind),
        .               const_: mk_const(Const<'tcx>),
        .               const_allocation: intern_const_alloc(Allocation),
-- line 2095 ----------------------------------------
-- line 2097 ----------------------------------------
        .               adt_def: intern_adt_def(AdtDef),
        .               stability: intern_stability(attr::Stability),
        .               const_stability: intern_const_stability(attr::ConstStability),
        .           }
        .           
        .           macro_rules! slice_interners {
        .               ($($field:ident: $method:ident($ty:ty)),+ $(,)?) => (
        .                   impl<'tcx> TyCtxt<'tcx> {
4,183,221 ( 0.10%)              $(pub fn $method(self, v: &[$ty]) -> &'tcx List<$ty> {
        .                           self.interners.$field.intern_ref(v, || {
        .                               Interned(List::from_arena(&*self.arena, v))
        .                           }).0
3,733,497 ( 0.09%)              })+
        .                   }
        .               );
        .           }
        .           
        .           slice_interners!(
        .               type_list: _intern_type_list(Ty<'tcx>),
        .               substs: _intern_substs(GenericArg<'tcx>),
        .               canonical_var_infos: _intern_canonical_var_infos(CanonicalVarInfo<'tcx>),
-- line 2117 ----------------------------------------
-- line 2188 ----------------------------------------
        .                       self.mk_fn_sig(params_iter, s.output(), s.c_variadic, unsafety, abi::Abi::Rust)
        .                   })
        .               }
        .           
        .               /// Same a `self.mk_region(kind)`, but avoids accessing the interners if
        .               /// `*r == kind`.
        .               #[inline]
        .               pub fn reuse_or_mk_region(self, r: Region<'tcx>, kind: RegionKind) -> Region<'tcx> {
  145,968 ( 0.00%)          if *r == kind { r } else { self.mk_region(kind) }
        .               }
        .           
        .               #[allow(rustc::usage_of_ty_tykind)]
        .               #[inline]
        .               pub fn mk_ty(self, st: TyKind<'tcx>) -> Ty<'tcx> {
3,168,415 ( 0.07%)          self.interners.intern_ty(st)
        .               }
        .           
        .               #[inline]
        .               pub fn mk_predicate(self, binder: Binder<'tcx, PredicateKind<'tcx>>) -> Predicate<'tcx> {
1,725,025 ( 0.04%)          let inner = self.interners.intern_predicate(binder);
        .                   Predicate { inner }
        .               }
        .           
        .               #[inline]
1,373,984 ( 0.03%)      pub fn reuse_or_mk_predicate(
        .                   self,
        .                   pred: Predicate<'tcx>,
        .                   binder: Binder<'tcx, PredicateKind<'tcx>>,
        .               ) -> Predicate<'tcx> {
   96,128 ( 0.00%)          if pred.kind() != binder { self.mk_predicate(binder) } else { pred }
1,373,984 ( 0.03%)      }
        .           
        .               pub fn mk_mach_int(self, tm: IntTy) -> Ty<'tcx> {
      645 ( 0.00%)          match tm {
        .                       IntTy::Isize => self.types.isize,
        .                       IntTy::I8 => self.types.i8,
        .                       IntTy::I16 => self.types.i16,
        .                       IntTy::I32 => self.types.i32,
        .                       IntTy::I64 => self.types.i64,
        .                       IntTy::I128 => self.types.i128,
        .                   }
      645 ( 0.00%)      }
        .           
        .               pub fn mk_mach_uint(self, tm: UintTy) -> Ty<'tcx> {
    1,176 ( 0.00%)          match tm {
        .                       UintTy::Usize => self.types.usize,
        .                       UintTy::U8 => self.types.u8,
        .                       UintTy::U16 => self.types.u16,
        .                       UintTy::U32 => self.types.u32,
        .                       UintTy::U64 => self.types.u64,
        .                       UintTy::U128 => self.types.u128,
        .                   }
    1,176 ( 0.00%)      }
        .           
        .               pub fn mk_mach_float(self, tm: FloatTy) -> Ty<'tcx> {
       12 ( 0.00%)          match tm {
        .                       FloatTy::F32 => self.types.f32,
        .                       FloatTy::F64 => self.types.f64,
        .                   }
       12 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn mk_static_str(self) -> Ty<'tcx> {
    1,246 ( 0.00%)          self.mk_imm_ref(self.lifetimes.re_static, self.types.str_)
        .               }
        .           
        .               #[inline]
        .               pub fn mk_adt(self, def: &'tcx AdtDef, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
        .                   // Take a copy of substs so that we own the vectors inside.
        .                   self.mk_ty(Adt(def, substs))
        .               }
        .           
-- line 2259 ----------------------------------------
-- line 2329 ----------------------------------------
        .               }
        .           
        .               #[inline]
        .               pub fn mk_imm_ptr(self, ty: Ty<'tcx>) -> Ty<'tcx> {
        .                   self.mk_ptr(TypeAndMut { ty, mutbl: hir::Mutability::Not })
        .               }
        .           
        .               #[inline]
      113 ( 0.00%)      pub fn mk_array(self, ty: Ty<'tcx>, n: u64) -> Ty<'tcx> {
        .                   self.mk_ty(Array(ty, ty::Const::from_usize(self, n)))
      120 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn mk_slice(self, ty: Ty<'tcx>) -> Ty<'tcx> {
        .                   self.mk_ty(Slice(ty))
        .               }
        .           
        .               #[inline]
        .               pub fn intern_tup(self, ts: &[Ty<'tcx>]) -> Ty<'tcx> {
    1,596 ( 0.00%)          let kinds: Vec<_> = ts.iter().map(|&t| GenericArg::from(t)).collect();
    6,471 ( 0.00%)          self.mk_ty(Tuple(self.intern_substs(&kinds)))
        .               }
        .           
        .               pub fn mk_tup<I: InternAs<[Ty<'tcx>], Ty<'tcx>>>(self, iter: I) -> I::Output {
   12,690 ( 0.00%)          iter.intern_with(|ts| {
    4,741 ( 0.00%)              let kinds: Vec<_> = ts.iter().map(|&t| GenericArg::from(t)).collect();
   22,402 ( 0.00%)              self.mk_ty(Tuple(self.intern_substs(&kinds)))
   11,421 ( 0.00%)          })
        .               }
        .           
        .               #[inline]
        .               pub fn mk_unit(self) -> Ty<'tcx> {
      914 ( 0.00%)          self.types.unit
        .               }
        .           
        .               #[inline]
        .               pub fn mk_diverging_default(self) -> Ty<'tcx> {
        .                   if self.features().never_type_fallback { self.types.never } else { self.types.unit }
        .               }
        .           
        .               #[inline]
        .               pub fn mk_fn_def(self, def_id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
        .                   self.mk_ty(FnDef(def_id, substs))
        .               }
        .           
        .               #[inline]
        .               pub fn mk_fn_ptr(self, fty: PolyFnSig<'tcx>) -> Ty<'tcx> {
    3,618 ( 0.00%)          self.mk_ty(FnPtr(fty))
        .               }
        .           
        .               #[inline]
        .               pub fn mk_dynamic(
        .                   self,
        .                   obj: &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>>,
        .                   reg: ty::Region<'tcx>,
        .               ) -> Ty<'tcx> {
-- line 2384 ----------------------------------------
-- line 2412 ----------------------------------------
        .           
        .               #[inline]
        .               pub fn mk_ty_var(self, v: TyVid) -> Ty<'tcx> {
        .                   self.mk_ty_infer(TyVar(v))
        .               }
        .           
        .               #[inline]
        .               pub fn mk_const_var(self, v: ConstVid<'tcx>, ty: Ty<'tcx>) -> &'tcx Const<'tcx> {
      996 ( 0.00%)          self.mk_const(ty::Const { val: ty::ConstKind::Infer(InferConst::Var(v)), ty })
        .               }
        .           
        .               #[inline]
        .               pub fn mk_int_var(self, v: IntVid) -> Ty<'tcx> {
        .                   self.mk_ty_infer(IntVar(v))
        .               }
        .           
        .               #[inline]
-- line 2428 ----------------------------------------
-- line 2445 ----------------------------------------
        .                   self.mk_ty(Param(ParamTy { index, name }))
        .               }
        .           
        .               #[inline]
        .               pub fn mk_const_param(self, index: u32, name: Symbol, ty: Ty<'tcx>) -> &'tcx Const<'tcx> {
        .                   self.mk_const(ty::Const { val: ty::ConstKind::Param(ParamConst { index, name }), ty })
        .               }
        .           
   15,337 ( 0.00%)      pub fn mk_param_from_def(self, param: &ty::GenericParamDef) -> GenericArg<'tcx> {
    9,147 ( 0.00%)          match param.kind {
        .                       GenericParamDefKind::Lifetime => {
    5,424 ( 0.00%)                  self.mk_region(ty::ReEarlyBound(param.to_early_bound_region_data())).into()
        .                       }
    2,574 ( 0.00%)              GenericParamDefKind::Type { .. } => self.mk_ty_param(param.index, param.name).into(),
        .                       GenericParamDefKind::Const { .. } => {
        .                           self.mk_const_param(param.index, param.name, self.type_of(param.def_id)).into()
        .                       }
        .                   }
   15,337 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn mk_opaque(self, def_id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
        .                   self.mk_ty(Opaque(def_id, substs))
        .               }
        .           
      517 ( 0.00%)      pub fn mk_place_field(self, place: Place<'tcx>, f: Field, ty: Ty<'tcx>) -> Place<'tcx> {
      517 ( 0.00%)          self.mk_place_elem(place, PlaceElem::Field(f, ty))
    1,034 ( 0.00%)      }
        .           
        .               pub fn mk_place_deref(self, place: Place<'tcx>) -> Place<'tcx> {
        .                   self.mk_place_elem(place, PlaceElem::Deref)
        .               }
        .           
        6 ( 0.00%)      pub fn mk_place_downcast(
        .                   self,
        .                   place: Place<'tcx>,
        .                   adt_def: &'tcx AdtDef,
        .                   variant_index: VariantIdx,
        .               ) -> Place<'tcx> {
        6 ( 0.00%)          self.mk_place_elem(
        .                       place,
       12 ( 0.00%)              PlaceElem::Downcast(Some(adt_def.variants[variant_index].name), variant_index),
        .                   )
       12 ( 0.00%)      }
        .           
        .               pub fn mk_place_downcast_unnamed(
        .                   self,
        .                   place: Place<'tcx>,
        .                   variant_index: VariantIdx,
        .               ) -> Place<'tcx> {
        .                   self.mk_place_elem(place, PlaceElem::Downcast(None, variant_index))
        .               }
-- line 2496 ----------------------------------------
-- line 2497 ----------------------------------------
        .           
        .               pub fn mk_place_index(self, place: Place<'tcx>, index: Local) -> Place<'tcx> {
        .                   self.mk_place_elem(place, PlaceElem::Index(index))
        .               }
        .           
        .               /// This method copies `Place`'s projection, add an element and reintern it. Should not be used
        .               /// to build a full `Place` it's just a convenient way to grab a projection and modify it in
        .               /// flight.
    4,707 ( 0.00%)      pub fn mk_place_elem(self, place: Place<'tcx>, elem: PlaceElem<'tcx>) -> Place<'tcx> {
        .                   let mut projection = place.projection.to_vec();
        .                   projection.push(elem);
        .           
        .                   Place { local: place.local, projection: self.intern_place_elems(&projection) }
    5,230 ( 0.00%)      }
        .           
    9,800 ( 0.00%)      pub fn intern_poly_existential_predicates(
        .                   self,
        .                   eps: &[ty::Binder<'tcx, ExistentialPredicate<'tcx>>],
        .               ) -> &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>> {
    1,400 ( 0.00%)          assert!(!eps.is_empty());
        .                   assert!(
        .                       eps.array_windows()
       70 ( 0.00%)                  .all(|[a, b]| a.skip_binder().stable_cmp(self, &b.skip_binder())
        .                               != Ordering::Greater)
        .                   );
    5,600 ( 0.00%)          self._intern_poly_existential_predicates(eps)
   11,200 ( 0.00%)      }
        .           
        .               pub fn intern_predicates(self, preds: &[Predicate<'tcx>]) -> &'tcx List<Predicate<'tcx>> {
        .                   // FIXME consider asking the input slice to be sorted to avoid
        .                   // re-interning permutations, in which case that would be asserted
        .                   // here.
   12,049 ( 0.00%)          if preds.is_empty() {
        .                       // The macro-generated method below asserts we don't intern an empty slice.
        .                       List::empty()
        .                   } else {
    2,412 ( 0.00%)              self._intern_predicates(preds)
        .                   }
   19,280 ( 0.00%)      }
        .           
        .               pub fn intern_type_list(self, ts: &[Ty<'tcx>]) -> &'tcx List<Ty<'tcx>> {
   77,871 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_type_list(ts) }
      446 ( 0.00%)      }
        .           
        .               pub fn intern_substs(self, ts: &[GenericArg<'tcx>]) -> &'tcx List<GenericArg<'tcx>> {
  664,123 ( 0.02%)          if ts.is_empty() { List::empty() } else { self._intern_substs(ts) }
   62,042 ( 0.00%)      }
        .           
        .               pub fn intern_projs(self, ps: &[ProjectionKind]) -> &'tcx List<ProjectionKind> {
        .                   if ps.is_empty() { List::empty() } else { self._intern_projs(ps) }
        .               }
        .           
        .               pub fn intern_place_elems(self, ts: &[PlaceElem<'tcx>]) -> &'tcx List<PlaceElem<'tcx>> {
   22,561 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_place_elems(ts) }
    5,986 ( 0.00%)      }
        .           
        .               pub fn intern_canonical_var_infos(
        .                   self,
        .                   ts: &[CanonicalVarInfo<'tcx>],
        .               ) -> CanonicalVarInfos<'tcx> {
   47,938 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_canonical_var_infos(ts) }
    1,048 ( 0.00%)      }
        .           
        .               pub fn intern_bound_variable_kinds(
        .                   self,
        .                   ts: &[ty::BoundVariableKind],
        .               ) -> &'tcx List<ty::BoundVariableKind> {
   12,062 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_bound_variable_kinds(ts) }
   15,754 ( 0.00%)      }
        .           
        .               pub fn mk_fn_sig<I>(
        .                   self,
        .                   inputs: I,
        .                   output: I::Item,
        .                   c_variadic: bool,
        .                   unsafety: hir::Unsafety,
        .                   abi: abi::Abi,
        .               ) -> <I::Item as InternIteratorElement<Ty<'tcx>, ty::FnSig<'tcx>>>::Output
        .               where
        .                   I: Iterator<Item: InternIteratorElement<Ty<'tcx>, ty::FnSig<'tcx>>>,
        .               {
        .                   inputs.chain(iter::once(output)).intern_with(|xs| ty::FnSig {
   12,217 ( 0.00%)              inputs_and_output: self.intern_type_list(xs),
    1,996 ( 0.00%)              c_variadic,
    2,843 ( 0.00%)              unsafety,
    2,298 ( 0.00%)              abi,
    3,030 ( 0.00%)          })
        .               }
        .           
        .               pub fn mk_poly_existential_predicates<
        .                   I: InternAs<
        .                       [ty::Binder<'tcx, ExistentialPredicate<'tcx>>],
        .                       &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>>,
        .                   >,
        .               >(
        .                   self,
        .                   iter: I,
        .               ) -> I::Output {
    5,579 ( 0.00%)          iter.intern_with(|xs| self.intern_poly_existential_predicates(xs))
        .               }
        .           
        .               pub fn mk_predicates<I: InternAs<[Predicate<'tcx>], &'tcx List<Predicate<'tcx>>>>(
        .                   self,
        .                   iter: I,
        .               ) -> I::Output {
        .                   iter.intern_with(|xs| self.intern_predicates(xs))
        .               }
        .           
        .               pub fn mk_type_list<I: InternAs<[Ty<'tcx>], &'tcx List<Ty<'tcx>>>>(self, iter: I) -> I::Output {
    8,184 ( 0.00%)          iter.intern_with(|xs| self.intern_type_list(xs))
        .               }
        .           
        .               pub fn mk_substs<I: InternAs<[GenericArg<'tcx>], &'tcx List<GenericArg<'tcx>>>>(
        .                   self,
        .                   iter: I,
        .               ) -> I::Output {
  409,054 ( 0.01%)          iter.intern_with(|xs| self.intern_substs(xs))
        .               }
        .           
        .               pub fn mk_place_elems<I: InternAs<[PlaceElem<'tcx>], &'tcx List<PlaceElem<'tcx>>>>(
        .                   self,
        .                   iter: I,
        .               ) -> I::Output {
        .                   iter.intern_with(|xs| self.intern_place_elems(xs))
        .               }
        .           
   42,472 ( 0.00%)      pub fn mk_substs_trait(self, self_ty: Ty<'tcx>, rest: &[GenericArg<'tcx>]) -> SubstsRef<'tcx> {
        .                   self.mk_substs(iter::once(self_ty.into()).chain(rest.iter().cloned()))
   84,944 ( 0.00%)      }
        .           
        .               pub fn mk_bound_variable_kinds<
        .                   I: InternAs<[ty::BoundVariableKind], &'tcx List<ty::BoundVariableKind>>,
        .               >(
        .                   self,
        .                   iter: I,
        .               ) -> I::Output {
   52,704 ( 0.00%)          iter.intern_with(|xs| self.intern_bound_variable_kinds(xs))
        .               }
        .           
        .               /// Walks upwards from `id` to find a node which might change lint levels with attributes.
        .               /// It stops at `bound` and just returns it if reached.
  357,000 ( 0.01%)      pub fn maybe_lint_level_root_bounded(self, mut id: HirId, bound: HirId) -> HirId {
  357,000 ( 0.01%)          let hir = self.hir();
        .                   loop {
  680,049 ( 0.02%)              if id == bound {
        .                           return bound;
        .                       }
        .           
  878,415 ( 0.02%)              if hir.attrs(id).iter().any(|attr| Level::from_symbol(attr.name_or_empty()).is_some()) {
        .                           return id;
        .                       }
        .                       let next = hir.get_parent_node(id);
  527,049 ( 0.01%)              if next == id {
        .                           bug!("lint traversal reached the root of the crate");
        .                       }
        .                       id = next;
        .                   }
  510,000 ( 0.01%)      }
        .           
   17,040 ( 0.00%)      pub fn lint_level_at_node(
        .                   self,
        .                   lint: &'static Lint,
        .                   mut id: hir::HirId,
        .               ) -> (Level, LintLevelSource) {
        .                   let sets = self.lint_levels(());
        .                   loop {
  181,236 ( 0.00%)              if let Some(pair) = sets.level_and_source(lint, id, self.sess) {
        .                           return pair;
        .                       }
   16,824 ( 0.00%)              let next = self.hir().get_parent_node(id);
   50,472 ( 0.00%)              if next == id {
        .                           bug!("lint traversal reached the root of the crate");
        .                       }
        .                       id = next;
        .                   }
   17,040 ( 0.00%)      }
        .           
    2,436 ( 0.00%)      pub fn struct_span_lint_hir(
        .                   self,
        .                   lint: &'static Lint,
        .                   hir_id: HirId,
        .                   span: impl Into<MultiSpan>,
        .                   decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),
        .               ) {
    7,023 ( 0.00%)          let (level, src) = self.lint_level_at_node(lint, hir_id);
    2,190 ( 0.00%)          struct_lint_level(self.sess, lint, level, src, Some(span.into()), decorate);
    1,392 ( 0.00%)      }
        .           
        .               pub fn struct_lint_node(
        .                   self,
        .                   lint: &'static Lint,
        .                   id: HirId,
        .                   decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),
        .               ) {
        .                   let (level, src) = self.lint_level_at_node(lint, id);
        .                   struct_lint_level(self.sess, lint, level, src, None, decorate);
        .               }
        .           
   10,521 ( 0.00%)      pub fn in_scope_traits(self, id: HirId) -> Option<&'tcx [TraitCandidate]> {
    3,006 ( 0.00%)          let map = self.in_scope_traits_map(id.owner)?;
        .                   let candidates = map.get(&id.local_id)?;
    3,006 ( 0.00%)          Some(&*candidates)
   12,024 ( 0.00%)      }
        .           
   28,637 ( 0.00%)      pub fn named_region(self, id: HirId) -> Option<resolve_lifetime::Region> {
        .                   debug!(?id, "named_region");
        .                   self.named_region_map(id.owner).and_then(|map| map.get(&id.local_id).cloned())
   36,819 ( 0.00%)      }
        .           
    4,068 ( 0.00%)      pub fn is_late_bound(self, id: HirId) -> bool {
        .                   self.is_late_bound_map(id.owner)
      226 ( 0.00%)              .map_or(false, |(owner, set)| owner == id.owner && set.contains(&id.local_id))
    3,616 ( 0.00%)      }
        .           
   21,056 ( 0.00%)      pub fn object_lifetime_defaults(self, id: HirId) -> Option<Vec<ObjectLifetimeDefault>> {
        .                   self.object_lifetime_defaults_map(id.owner)
   27,072 ( 0.00%)      }
        .           
   18,576 ( 0.00%)      pub fn late_bound_vars(self, id: HirId) -> &'tcx List<ty::BoundVariableKind> {
        .                   self.mk_bound_variable_kinds(
        .                       self.late_bound_vars_map(id.owner)
        .                           .and_then(|map| map.get(&id.local_id).cloned())
        .                           .unwrap_or_else(|| {
        .                               bug!("No bound vars found for {:?} ({:?})", self.hir().node_to_string(id), id)
        .                           })
        .                           .iter(),
        .                   )
   18,576 ( 0.00%)      }
        .           
        .               pub fn lifetime_scope(self, id: HirId) -> Option<LifetimeScopeForPath> {
        .                   self.lifetime_scope_map(id.owner).and_then(|mut map| map.remove(&id.local_id))
        .               }
        .           
        .               /// Whether the `def_id` counts as const fn in the current crate, considering all active
        .               /// feature gates
    2,470 ( 0.00%)      pub fn is_const_fn(self, def_id: DefId) -> bool {
      247 ( 0.00%)          if self.is_const_fn_raw(def_id) {
       16 ( 0.00%)              match self.lookup_const_stability(def_id) {
        8 ( 0.00%)                  Some(stability) if stability.level.is_unstable() => {
        .                               // has a `rustc_const_unstable` attribute, check whether the user enabled the
        .                               // corresponding feature gate.
        4 ( 0.00%)                      self.features()
        .                                   .declared_lib_features
        .                                   .iter()
        .                                   .any(|&(sym, _)| sym == stability.feature)
        .                           }
        .                           // functions without const stability are either stable user written
        .                           // const fn or the user is using feature gates and we thus don't
        .                           // care what they do
        .                           _ => true,
        .                       }
        .                   } else {
        .                       false
        .                   }
    2,223 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> TyCtxtAt<'tcx> {
        .               /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` to ensure it gets used.
        .               #[track_caller]
        .               pub fn ty_error(self) -> Ty<'tcx> {
        .                   self.tcx.ty_error_with_message(self.span, "TyKind::Error constructed but no error reported")
        .               }
-- line 2759 ----------------------------------------
-- line 2774 ----------------------------------------
        .           }
        .           
        .           impl<I, T, R, E> InternAs<[T], R> for I
        .           where
        .               E: InternIteratorElement<T, R>,
        .               I: Iterator<Item = E>,
        .           {
        .               type Output = E::Output;
   89,216 ( 0.00%)      fn intern_with<F>(self, f: F) -> Self::Output
        .               where
        .                   F: FnOnce(&[T]) -> R,
        .               {
1,542,033 ( 0.04%)          E::intern_with(self, f)
   91,935 ( 0.00%)      }
        .           }
        .           
        .           pub trait InternIteratorElement<T, R>: Sized {
        .               type Output;
        .               fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(iter: I, f: F) -> Self::Output;
        .           }
        .           
        .           impl<T, R> InternIteratorElement<T, R> for T {
        .               type Output = R;
  242,029 ( 0.01%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(
        .                   mut iter: I,
        .                   f: F,
        .               ) -> Self::Output {
        .                   // This code is hot enough that it's worth specializing for the most
        .                   // common length lists, to avoid the overhead of `SmallVec` creation.
        .                   // Lengths 0, 1, and 2 typically account for ~95% of cases. If
        .                   // `size_hint` is incorrect a panic will occur via an `unwrap` or an
        .                   // `assert`.
  322,007 ( 0.01%)          match iter.size_hint() {
        .                       (0, Some(0)) => {
        6 ( 0.00%)                  assert!(iter.next().is_none());
        .                           f(&[])
        .                       }
        .                       (1, Some(1)) => {
        .                           let t0 = iter.next().unwrap();
       58 ( 0.00%)                  assert!(iter.next().is_none());
   41,629 ( 0.00%)                  f(&[t0])
        .                       }
        .                       (2, Some(2)) => {
        .                           let t0 = iter.next().unwrap();
        .                           let t1 = iter.next().unwrap();
    1,150 ( 0.00%)                  assert!(iter.next().is_none());
   51,937 ( 0.00%)                  f(&[t0, t1])
        .                       }
    3,384 ( 0.00%)              _ => f(&iter.collect::<SmallVec<[_; 8]>>()),
        .                   }
  253,250 ( 0.01%)      }
        .           }
        .           
        .           impl<'a, T, R> InternIteratorElement<T, R> for &'a T
        .           where
        .               T: Clone + 'a,
        .           {
        .               type Output = R;
   14,574 ( 0.00%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(iter: I, f: F) -> Self::Output {
        .                   // This code isn't hot.
    1,212 ( 0.00%)          f(&iter.cloned().collect::<SmallVec<[_; 8]>>())
   12,750 ( 0.00%)      }
        .           }
        .           
        .           impl<T, R, E> InternIteratorElement<T, R> for Result<T, E> {
        .               type Output = Result<R, E>;
  508,310 ( 0.01%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(
        .                   mut iter: I,
        .                   f: F,
        .               ) -> Self::Output {
        .                   // This code is hot enough that it's worth specializing for the most
        .                   // common length lists, to avoid the overhead of `SmallVec` creation.
        .                   // Lengths 0, 1, and 2 typically account for ~95% of cases. If
        .                   // `size_hint` is incorrect a panic will occur via an `unwrap` or an
        .                   // `assert`, unless a failure happens first, in which case the result
        .                   // will be an error anyway.
  377,544 ( 0.01%)          Ok(match iter.size_hint() {
        .                       (0, Some(0)) => {
        .                           assert!(iter.next().is_none());
        .                           f(&[])
        .                       }
        .                       (1, Some(1)) => {
    4,146 ( 0.00%)                  let t0 = iter.next().unwrap()?;
        .                           assert!(iter.next().is_none());
   31,208 ( 0.00%)                  f(&[t0])
        .                       }
        .                       (2, Some(2)) => {
    1,552 ( 0.00%)                  let t0 = iter.next().unwrap()?;
    1,552 ( 0.00%)                  let t1 = iter.next().unwrap()?;
    2,328 ( 0.00%)                  assert!(iter.next().is_none());
   35,676 ( 0.00%)                  f(&[t0, t1])
        .                       }
    5,558 ( 0.00%)              _ => f(&iter.collect::<Result<SmallVec<[_; 8]>, _>>()?),
        .                   })
  570,538 ( 0.01%)      }
        .           }
        .           
        .           // We are comparing types with different invariant lifetimes, so `ptr::eq`
        .           // won't work for us.
        .           fn ptr_eq<T, U>(t: *const T, u: *const U) -> bool {
  241,303 ( 0.01%)      t as *const () == u as *const ()
        .           }
        .           
        .           pub fn provide(providers: &mut ty::query::Providers) {
        2 ( 0.00%)      providers.in_scope_traits_map =
        .                   |tcx, id| tcx.hir_crate(()).owners[id].as_ref().map(|owner_info| &owner_info.trait_map);
        3 ( 0.00%)      providers.resolutions = |tcx, ()| &tcx.untracked_resolutions;
        2 ( 0.00%)      providers.module_reexports =
        .                   |tcx, id| tcx.resolutions(()).reexport_map.get(&id).map(|v| &v[..]);
        2 ( 0.00%)      providers.crate_name = |tcx, id| {
        1 ( 0.00%)          assert_eq!(id, LOCAL_CRATE);
        1 ( 0.00%)          tcx.crate_name
        .               };
        2 ( 0.00%)      providers.maybe_unused_trait_import =
        .                   |tcx, id| tcx.resolutions(()).maybe_unused_trait_imports.contains(&id);
        2 ( 0.00%)      providers.maybe_unused_extern_crates =
        .                   |tcx, ()| &tcx.resolutions(()).maybe_unused_extern_crates[..];
        2 ( 0.00%)      providers.names_imported_by_glob_use = |tcx, id| {
        .                   tcx.arena.alloc(tcx.resolutions(()).glob_map.get(&id).cloned().unwrap_or_default())
        .               };
        .           
       11 ( 0.00%)      providers.lookup_stability = |tcx, id| tcx.stability().local_stability(id.expect_local());
        2 ( 0.00%)      providers.lookup_const_stability =
       54 ( 0.00%)          |tcx, id| tcx.stability().local_const_stability(id.expect_local());
        2 ( 0.00%)      providers.lookup_deprecation_entry =
   20,208 ( 0.00%)          |tcx, id| tcx.stability().local_deprecation_entry(id.expect_local());
        2 ( 0.00%)      providers.extern_mod_stmt_cnum =
        .                   |tcx, id| tcx.resolutions(()).extern_crate_map.get(&id).cloned();
        3 ( 0.00%)      providers.output_filenames = |tcx, ()| tcx.output_filenames.clone();
        3 ( 0.00%)      providers.features_query = |tcx, ()| tcx.sess.features_untracked();
        2 ( 0.00%)      providers.is_panic_runtime = |tcx, cnum| {
        .                   assert_eq!(cnum, LOCAL_CRATE);
        .                   tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::panic_runtime)
        .               };
        2 ( 0.00%)      providers.is_compiler_builtins = |tcx, cnum| {
        .                   assert_eq!(cnum, LOCAL_CRATE);
        .                   tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::compiler_builtins)
        .               };
        2 ( 0.00%)      providers.has_panic_handler = |tcx, cnum| {
        1 ( 0.00%)          assert_eq!(cnum, LOCAL_CRATE);
        .                   // We want to check if the panic handler was defined in this crate
        3 ( 0.00%)          tcx.lang_items().panic_impl().map_or(false, |did| did.is_local())
        .               };
        .           }

1,691,855 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/mem/mod.rs
--------------------------------------------------------------------------------
Ir                  

-- line 136 ----------------------------------------
         .           /// [`Box::leak`]: ../../std/boxed/struct.Box.html#method.leak
         .           /// [`Box::into_raw`]: ../../std/boxed/struct.Box.html#method.into_raw
         .           /// [`mem::drop`]: drop
         .           /// [ub]: ../../reference/behavior-considered-undefined.html
         .           #[inline]
         .           #[rustc_const_stable(feature = "const_forget", since = "1.46.0")]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           #[cfg_attr(not(test), rustc_diagnostic_item = "mem_forget")]
    33,057 ( 0.00%)  pub const fn forget<T>(t: T) {
     3,951 ( 0.00%)      let _ = ManuallyDrop::new(t);
    14,300 ( 0.00%)  }
         .           
         .           /// Like [`forget`], but also accepts unsized values.
         .           ///
         .           /// This function is just a shim intended to be removed when the `unsized_locals` feature gets
         .           /// stabilized.
         .           #[inline]
         .           #[unstable(feature = "forget_unsized", issue = "none")]
         .           pub fn forget_unsized<T: ?Sized>(t: T) {
-- line 154 ----------------------------------------
-- line 324 ----------------------------------------
         .           /// let y: &[u8] = &x;
         .           /// assert_eq!(13, mem::size_of_val(y));
         .           /// ```
         .           #[inline]
         .           #[must_use]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           #[rustc_const_unstable(feature = "const_size_of_val", issue = "46571")]
         .           #[cfg_attr(not(test), rustc_diagnostic_item = "mem_size_of_val")]
   158,316 ( 0.00%)  pub const fn size_of_val<T: ?Sized>(val: &T) -> usize {
         .               // SAFETY: `val` is a reference, so it's a valid raw pointer
   268,345 ( 0.01%)      unsafe { intrinsics::size_of_val(val) }
   107,062 ( 0.00%)  }
         .           
         .           /// Returns the size of the pointed-to value in bytes.
         .           ///
         .           /// This is usually the same as `size_of::<T>()`. However, when `T` *has* no
         .           /// statically-known size, e.g., a slice [`[T]`][slice] or a [trait object],
         .           /// then `size_of_val_raw` can be used to get the dynamically-known size.
         .           ///
         .           /// # Safety
-- line 343 ----------------------------------------
-- line 375 ----------------------------------------
         .           /// assert_eq!(13, unsafe { mem::size_of_val_raw(y) });
         .           /// ```
         .           #[inline]
         .           #[must_use]
         .           #[unstable(feature = "layout_for_ptr", issue = "69835")]
         .           #[rustc_const_unstable(feature = "const_size_of_val_raw", issue = "46571")]
         .           pub const unsafe fn size_of_val_raw<T: ?Sized>(val: *const T) -> usize {
         .               // SAFETY: the caller must provide a valid raw pointer
        14 ( 0.00%)      unsafe { intrinsics::size_of_val(val) }
         .           }
         .           
         .           /// Returns the [ABI]-required minimum alignment of a type.
         .           ///
         .           /// Every reference to a value of the type `T` must be a multiple of this number.
         .           ///
         .           /// This is the alignment used for struct fields. It may be smaller than the preferred alignment.
         .           ///
-- line 391 ----------------------------------------
-- line 467 ----------------------------------------
         .           ///
         .           /// assert_eq!(4, mem::align_of_val(&5i32));
         .           /// ```
         .           #[inline]
         .           #[must_use]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           #[rustc_const_unstable(feature = "const_align_of_val", issue = "46571")]
         .           #[allow(deprecated)]
     4,554 ( 0.00%)  pub const fn align_of_val<T: ?Sized>(val: &T) -> usize {
         .               // SAFETY: val is a reference, so it's a valid raw pointer
     6,831 ( 0.00%)      unsafe { intrinsics::min_align_of_val(val) }
     4,554 ( 0.00%)  }
         .           
         .           /// Returns the [ABI]-required minimum alignment of the type of the value that `val` points to.
         .           ///
         .           /// Every reference to a value of the type `T` must be a multiple of this number.
         .           ///
         .           /// [ABI]: https://en.wikipedia.org/wiki/Application_binary_interface
         .           ///
         .           /// # Safety
-- line 486 ----------------------------------------
-- line 578 ----------------------------------------
         .           ///     }
         .           /// }
         .           /// ```
         .           #[inline]
         .           #[must_use]
         .           #[stable(feature = "needs_drop", since = "1.21.0")]
         .           #[rustc_const_stable(feature = "const_needs_drop", since = "1.36.0")]
         .           #[rustc_diagnostic_item = "needs_drop"]
         1 ( 0.00%)  pub const fn needs_drop<T>() -> bool {
         3 ( 0.00%)      intrinsics::needs_drop::<T>()
         4 ( 0.00%)  }
         .           
         .           /// Returns the value of type `T` represented by the all-zero byte-pattern.
         .           ///
         .           /// This means that, for example, the padding byte in `(u8, u16)` is not
         .           /// necessarily zeroed.
         .           ///
         .           /// There is no guarantee that an all-zero byte-pattern represents a valid value
         .           /// of some type `T`. For example, the all-zero byte-pattern is not a valid value
-- line 596 ----------------------------------------
-- line 759 ----------------------------------------
         .           /// let mut buffer = Buffer { buf: vec![0, 1] };
         .           /// assert_eq!(buffer.buf.len(), 2);
         .           ///
         .           /// assert_eq!(buffer.get_and_reset(), vec![0, 1]);
         .           /// assert_eq!(buffer.buf.len(), 0);
         .           /// ```
         .           #[inline]
         .           #[stable(feature = "mem_take", since = "1.40.0")]
     1,770 ( 0.00%)  pub fn take<T: Default>(dest: &mut T) -> T {
     1,416 ( 0.00%)      replace(dest, T::default())
       708 ( 0.00%)  }
         .           
         .           /// Moves `src` into the referenced `dest`, returning the previous `dest` value.
         .           ///
         .           /// Neither value is dropped.
         .           ///
         .           /// * If you want to replace the values of two variables, see [`swap`].
         .           /// * If you want to replace with a default value, see [`take`].
         .           ///
-- line 777 ----------------------------------------
-- line 826 ----------------------------------------
         .           /// assert_eq!(buffer.replace_index(0, 2), 0);
         .           /// assert_eq!(buffer.buf[0], 2);
         .           /// ```
         .           #[inline]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           #[must_use = "if you don't need the old value, you can just assign the new value directly"]
         .           #[rustc_const_unstable(feature = "const_replace", issue = "83164")]
         .           #[cfg_attr(not(test), rustc_diagnostic_item = "mem_replace")]
 1,834,770 ( 0.04%)  pub const fn replace<T>(dest: &mut T, src: T) -> T {
         .               // SAFETY: We read from `dest` but directly write `src` into it afterwards,
         .               // such that the old value is not duplicated. Nothing is dropped and
         .               // nothing here can panic.
         .               unsafe {
 2,293,591 ( 0.05%)          let result = ptr::read(dest);
24,428,072 ( 0.57%)          ptr::write(dest, src);
         .                   result
         .               }
   641,136 ( 0.02%)  }
         .           
         .           /// Disposes of a value.
         .           ///
         .           /// This does so by calling the argument's implementation of [`Drop`][drop].
         .           ///
         .           /// This effectively does nothing for types which implement `Copy`, e.g.
         .           /// integers. Such values are copied and _then_ moved into the function, so the
         .           /// value persists after this function call.
-- line 851 ----------------------------------------
-- line 901 ----------------------------------------
         .           ///
         .           /// println!("x: {}, y: {}", x, y.0); // still available
         .           /// ```
         .           ///
         .           /// [`RefCell`]: crate::cell::RefCell
         .           #[inline]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           #[cfg_attr(not(test), rustc_diagnostic_item = "mem_drop")]
   193,802 ( 0.00%)  pub fn drop<T>(_x: T) {}
         .           
         .           /// Interprets `src` as having type `&U`, and then reads `src` without moving
         .           /// the contained value.
         .           ///
         .           /// This function will unsafely assume the pointer `src` is valid for [`size_of::<U>`][size_of]
         .           /// bytes by transmuting `&T` to `&U` and then reading the `&U` (except that this is done in a way
         .           /// that is correct even when `&U` makes stricter alignment requirements than `&T`). It will also
         .           /// unsafely create a copy of the contained value instead of moving out of `src`.
-- line 917 ----------------------------------------
-- line 947 ----------------------------------------
         .           ///
         .           /// // The contents of 'foo_array' should not have changed
         .           /// assert_eq!(foo_array, [10]);
         .           /// ```
         .           #[inline]
         .           #[must_use]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           #[rustc_const_unstable(feature = "const_transmute_copy", issue = "83165")]
       885 ( 0.00%)  pub const unsafe fn transmute_copy<T, U>(src: &T) -> U {
         .               // If U has a higher alignment requirement, src might not be suitably aligned.
       354 ( 0.00%)      if align_of::<U>() > align_of::<T>() {
         .                   // SAFETY: `src` is a reference which is guaranteed to be valid for reads.
         .                   // The caller must guarantee that the actual transmutation is safe.
         .                   unsafe { ptr::read_unaligned(src as *const T as *const U) }
         .               } else {
         .                   // SAFETY: `src` is a reference which is guaranteed to be valid for reads.
         .                   // We just checked that `src as *const U` was properly aligned.
         .                   // The caller must guarantee that the actual transmutation is safe.
       354 ( 0.00%)          unsafe { ptr::read(src as *const T as *const U) }
         .               }
       354 ( 0.00%)  }
         .           
         .           /// Opaque type representing the discriminant of an enum.
         .           ///
         .           /// See the [`discriminant`] function in this module for more information.
         .           #[stable(feature = "discriminant_value", since = "1.21.0")]
         .           pub struct Discriminant<T>(<T as DiscriminantKind>::Discriminant);
         .           
         .           // N.B. These trait implementations cannot be derived because we don't want any bounds on T.
-- line 975 ----------------------------------------
-- line 991 ----------------------------------------
         .               }
         .           }
         .           
         .           #[stable(feature = "discriminant_value", since = "1.21.0")]
         .           impl<T> cmp::Eq for Discriminant<T> {}
         .           
         .           #[stable(feature = "discriminant_value", since = "1.21.0")]
         .           impl<T> hash::Hash for Discriminant<T> {
     4,305 ( 0.00%)      fn hash<H: hash::Hasher>(&self, state: &mut H) {
         .                   self.0.hash(state);
     7,600 ( 0.00%)      }
         .           }
         .           
         .           #[stable(feature = "discriminant_value", since = "1.21.0")]
         .           impl<T> fmt::Debug for Discriminant<T> {
         .               fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
         .                   fmt.debug_tuple("Discriminant").field(&self.0).finish()
         .               }
         .           }
-- line 1009 ----------------------------------------
-- line 1031 ----------------------------------------
         .           /// assert_eq!(mem::discriminant(&Foo::A("bar")), mem::discriminant(&Foo::A("baz")));
         .           /// assert_eq!(mem::discriminant(&Foo::B(1)), mem::discriminant(&Foo::B(2)));
         .           /// assert_ne!(mem::discriminant(&Foo::B(3)), mem::discriminant(&Foo::C(3)));
         .           /// ```
         .           #[stable(feature = "discriminant_value", since = "1.21.0")]
         .           #[rustc_const_unstable(feature = "const_discriminant", issue = "69821")]
         .           #[cfg_attr(not(test), rustc_diagnostic_item = "mem_discriminant")]
         .           pub const fn discriminant<T>(v: &T) -> Discriminant<T> {
    41,663 ( 0.00%)      Discriminant(intrinsics::discriminant_value(v))
         .           }
         .           
         .           /// Returns the number of variants in the enum type `T`.
         .           ///
         .           /// If `T` is not an enum, calling this function will not result in undefined behavior, but the
         .           /// return value is unspecified. Equally, if `T` is an enum with more variants than `usize::MAX`
         .           /// the return value is unspecified. Uninhabited variants will be counted.
         .           ///
-- line 1047 ----------------------------------------

   969,359 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/mem/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/graph/scc/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 35 ----------------------------------------
        .           
        .               /// Contains the successors for all the Sccs, concatenated. The
        .               /// range of indices corresponding to a given SCC is found in its
        .               /// SccData.
        .               all_successors: Vec<S>,
        .           }
        .           
        .           impl<N: Idx, S: Idx + Ord> Sccs<N, S> {
   11,927 ( 0.00%)      pub fn new(graph: &(impl DirectedGraph<Node = N> + WithNumNodes + WithSuccessors)) -> Self {
        .                   SccsConstruction::construct(graph)
   11,943 ( 0.00%)      }
        .           
        .               /// Returns the number of SCCs in the graph.
        .               pub fn num_sccs(&self) -> usize {
        .                   self.scc_data.len()
        .               }
        .           
        .               /// Returns an iterator over the SCCs in the graph.
        .               ///
-- line 53 ----------------------------------------
-- line 56 ----------------------------------------
        .               /// This is convenient when the edges represent dependencies: when you visit
        .               /// `S1`, the value for `S2` will already have been computed.
        .               pub fn all_sccs(&self) -> impl Iterator<Item = S> {
        .                   (0..self.scc_data.len()).map(S::new)
        .               }
        .           
        .               /// Returns the SCC to which a node `r` belongs.
        .               pub fn scc(&self, r: N) -> S {
   73,639 ( 0.00%)          self.scc_indices[r]
        .               }
        .           
        .               /// Returns the successors of the given SCC.
        .               pub fn successors(&self, scc: S) -> &[S] {
        .                   self.scc_data.successors(scc)
        .               }
        .           
        .               /// Construct the reverse graph of the SCC graph.
-- line 72 ----------------------------------------
-- line 116 ----------------------------------------
        .                   self.ranges.len()
        .               }
        .           
        .               /// Returns the successors of the given SCC.
        .               fn successors(&self, scc: S) -> &[S] {
        .                   // Annoyingly, `range` does not implement `Copy`, so we have
        .                   // to do `range.start..range.end`:
        .                   let range = &self.ranges[scc];
  222,640 ( 0.01%)          &self.all_successors[range.start..range.end]
        .               }
        .           
        .               /// Creates a new SCC with `successors` as its successors and
        .               /// returns the resulting index.
        .               fn create_scc(&mut self, successors: impl IntoIterator<Item = S>) -> S {
        .                   // Store the successors on `scc_successors_vec`, remembering
        .                   // the range of indices.
   27,836 ( 0.00%)          let all_successors_start = self.all_successors.len();
        .                   self.all_successors.extend(successors);
        .                   let all_successors_end = self.all_successors.len();
        .           
        .                   debug!(
        .                       "create_scc({:?}) successors={:?}",
        .                       self.ranges.len(),
        .                       &self.all_successors[all_successors_start..all_successors_end],
        .                   );
-- line 140 ----------------------------------------
-- line 164 ----------------------------------------
        .               /// into the successors_stack, we sometimes get duplicate entries.
        .               /// We use this set to remove those -- we also keep its storage
        .               /// around between successors to amortize memory allocation costs.
        .               duplicate_set: FxHashSet<S>,
        .           
        .               scc_data: SccData<S>,
        .           }
        .           
    6,635 ( 0.00%)  #[derive(Copy, Clone, Debug)]
        .           enum NodeState<N, S> {
        .               /// This node has not yet been visited as part of the DFS.
        .               ///
        .               /// After SCC construction is complete, this state ought to be
        .               /// impossible.
        .               NotVisited,
        .           
        .               /// This node is currently being walk as part of our DFS. It is on
-- line 180 ----------------------------------------
-- line 216 ----------------------------------------
        .               /// N with depth D can reach some other node N' with lower depth
        .               /// D' (i.e., D' < D), we know that N, N', and all nodes in
        .               /// between them on the stack are part of an SCC.
        .               ///
        .               /// [wikipedia]: https://bit.ly/2EZIx84
        .               fn construct(graph: &'c G) -> Sccs<G::Node, S> {
        .                   let num_nodes = graph.num_nodes();
        .           
   14,597 ( 0.00%)          let mut this = Self {
        .                       graph,
        .                       node_states: IndexVec::from_elem_n(NodeState::NotVisited, num_nodes),
        .                       node_stack: Vec::with_capacity(num_nodes),
        .                       successors_stack: Vec::new(),
        .                       scc_data: SccData { ranges: IndexVec::new(), all_successors: Vec::new() },
        .                       duplicate_set: FxHashSet::default(),
        .                   };
        .           
        .                   let scc_indices = (0..num_nodes)
        .                       .map(G::Node::new)
  207,036 ( 0.00%)              .map(|node| match this.start_walk_from(node) {
        .                           WalkReturn::Complete { scc_index } => scc_index,
        .                           WalkReturn::Cycle { min_depth } => panic!(
        .                               "`start_walk_node({:?})` returned cycle with depth {:?}",
        .                               node, min_depth
        .                           ),
        .                       })
        .                       .collect();
        .           
    7,962 ( 0.00%)          Sccs { scc_indices, scc_data: this.scc_data }
        .               }
        .           
  310,554 ( 0.01%)      fn start_walk_from(&mut self, node: G::Node) -> WalkReturn<S> {
  138,024 ( 0.00%)          if let Some(result) = self.inspect_node(node) {
        .                       result
        .                   } else {
        .                       self.walk_unvisited_node(node)
        .                   }
  345,060 ( 0.01%)      }
        .           
        .               /// Inspect a node during the DFS. We first examine its current
        .               /// state -- if it is not yet visited (`NotVisited`), return `None` so
        .               /// that the caller might push it onto the stack and start walking its
        .               /// successors.
        .               ///
        .               /// If it is already on the DFS stack it will be in the state
        .               /// `BeingVisited`. In that case, we have found a cycle and we
        .               /// return the depth from the stack.
        .               ///
        .               /// Otherwise, we are looking at a node that has already been
        .               /// completely visited. We therefore return `WalkReturn::Complete`
        .               /// with its associated SCC index.
  421,608 ( 0.01%)      fn inspect_node(&mut self, node: G::Node) -> Option<WalkReturn<S>> {
  843,216 ( 0.02%)          Some(match self.find_state(node) {
  187,908 ( 0.00%)              NodeState::InCycle { scc_index } => WalkReturn::Complete { scc_index },
        .           
   24,780 ( 0.00%)              NodeState::BeingVisited { depth: min_depth } => WalkReturn::Cycle { min_depth },
        .           
        .                       NodeState::NotVisited => return None,
        .           
        .                       NodeState::InCycleWith { parent } => panic!(
        .                           "`find_state` returned `InCycleWith({:?})`, which ought to be impossible",
        .                           parent
        .                       ),
        .                   })
  737,814 ( 0.02%)      }
        .           
        .               /// Fetches the state of the node `r`. If `r` is recorded as being
        .               /// in a cycle with some other node `r2`, then fetches the state
        .               /// of `r2` (and updates `r` to reflect current result). This is
        .               /// basically the "find" part of a standard union-find algorithm
        .               /// (with path compression).
        .               fn find_state(&mut self, mut node: G::Node) -> NodeState<G::Node, S> {
        .                   // To avoid recursion we temporarily reuse the `parent` of each
-- line 288 ----------------------------------------
-- line 299 ----------------------------------------
        .                   // following links downwards is then simply as soon as we have
        .                   // found the initial self-loop.
        .                   let mut previous_node = node;
        .           
        .                   // Ultimately assigned by the parent when following
        .                   // `InCycleWith` upwards.
        .                   let node_state = loop {
        .                       debug!("find_state(r = {:?} in state {:?})", node, self.node_states[node]);
  802,124 ( 0.02%)              match self.node_states[node] {
  250,544 ( 0.01%)                  NodeState::InCycle { scc_index } => break NodeState::InCycle { scc_index },
   33,040 ( 0.00%)                  NodeState::BeingVisited { depth } => break NodeState::BeingVisited { depth },
   34,506 ( 0.00%)                  NodeState::NotVisited => break NodeState::NotVisited,
    6,980 ( 0.00%)                  NodeState::InCycleWith { parent } => {
        .                               // We test this, to be extremely sure that we never
        .                               // ever break our termination condition for the
        .                               // reverse iteration loop.
    6,980 ( 0.00%)                      assert!(node != parent, "Node can not be in cycle with itself");
        .                               // Store the previous node as an inverted list link
   34,900 ( 0.00%)                      self.node_states[node] = NodeState::InCycleWith { parent: previous_node };
        .                               // Update to parent node.
        .                               previous_node = node;
        .                               node = parent;
        .                           }
        .                       }
        .                   };
        .           
        .                   // The states form a graph where up to one outgoing link is stored at
-- line 325 ----------------------------------------
-- line 355 ----------------------------------------
        .                   // We can then walk backwards, starting from `previous_node`, and assign
        .                   // each node in the list with the updated state. The loop terminates
        .                   // when we reach the self-cycle.
        .           
        .                   // Move backwards until we found the node where we started. We
        .                   // will know when we hit the state where previous_node == node.
        .                   loop {
        .                       // Back at the beginning, we can return.
  154,854 ( 0.00%)              if previous_node == node {
        .                           return node_state;
        .                       }
        .                       // Update to previous node in the link.
   13,960 ( 0.00%)              match self.node_states[previous_node] {
    6,980 ( 0.00%)                  NodeState::InCycleWith { parent: previous } => {
        .                               node = previous_node;
        .                               previous_node = previous;
        .                           }
        .                           // Only InCycleWith nodes were added to the reverse linked list.
        .                           other => panic!("Invalid previous link while compressing cycle: {:?}", other),
        .                       }
        .           
        .                       debug!("find_state: parent_state = {:?}", node_state);
        .           
        .                       // Update the node state from the parent state. The assigned
        .                       // state is actually a loop invariant but it will only be
        .                       // evaluated if there is at least one backlink to follow.
        .                       // Fully trusting llvm here to find this loop optimization.
   27,920 ( 0.00%)              match node_state {
        .                           // Path compression, make current node point to the same root.
        .                           NodeState::InCycle { .. } => {
   13,340 ( 0.00%)                      self.node_states[node] = node_state;
        .                           }
        .                           // Still visiting nodes, compress to cycle to the node
        .                           // at that depth.
      310 ( 0.00%)                  NodeState::BeingVisited { depth } => {
      620 ( 0.00%)                      self.node_states[node] =
      310 ( 0.00%)                          NodeState::InCycleWith { parent: self.node_stack[depth] };
        .                           }
        .                           // These are never allowed as parent nodes. InCycleWith
        .                           // should have been followed to a real parent and
        .                           // NotVisited can not be part of a cycle since it should
        .                           // have instead gotten explored.
        .                           NodeState::NotVisited | NodeState::InCycleWith { .. } => {
        .                               panic!("invalid parent state: {:?}", node_state)
        .                           }
        .                       }
        .                   }
  210,804 ( 0.00%)      }
        .           
        .               /// Walks a node that has never been visited before.
        .               ///
        .               /// Call this method when `inspect_node` has returned `None`. Having the
        .               /// caller decide avoids mutual recursion between the two methods and allows
        .               /// us to maintain an allocated stack for nodes on the path between calls.
        .               #[instrument(skip(self, initial), level = "debug")]
        .               fn walk_unvisited_node(&mut self, initial: G::Node) -> WalkReturn<S> {
-- line 410 ----------------------------------------
-- line 418 ----------------------------------------
        .                       successor_node: G::Node,
        .                   }
        .           
        .                   // Move the stack to a local variable. We want to utilize the existing allocation and
        .                   // mutably borrow it without borrowing self at the same time.
        .                   let mut successors_stack = core::mem::take(&mut self.successors_stack);
        .                   debug_assert_eq!(successors_stack.len(), 0);
        .           
    9,289 ( 0.00%)          let mut stack: Vec<VisitingNodeFrame<G, _>> = vec![VisitingNodeFrame {
        .                       node: initial,
        .                       depth: 0,
        .                       min_depth: 0,
        .                       iter: None,
        .                       successors_len: 0,
        .                       min_cycle_root: initial,
        .                       successor_node: initial,
        .                   }];
        .           
        .                   let mut return_value = None;
        .           
   34,506 ( 0.00%)          'recurse: while let Some(frame) = stack.last_mut() {
        .                       let VisitingNodeFrame {
  135,338 ( 0.00%)                  node,
        .                           depth,
        .                           iter,
  135,370 ( 0.00%)                  successors_len,
        .                           min_depth,
        .                           min_cycle_root,
        .                           successor_node,
        .                       } = frame;
        .           
   67,685 ( 0.00%)              let node = *node;
  135,402 ( 0.00%)              let depth = *depth;
        .           
  203,055 ( 0.00%)              let successors = match iter {
        .                           Some(iter) => iter,
        .                           None => {
        .                               // This None marks that we still have the initialize this node's frame.
        .                               debug!(?depth, ?node);
        .           
        .                               debug_assert!(matches!(self.node_states[node], NodeState::NotVisited));
        .           
        .                               // Push `node` onto the stack.
  138,024 ( 0.00%)                      self.node_states[node] = NodeState::BeingVisited { depth };
        .                               self.node_stack.push(node);
        .           
        .                               // Walk each successor of the node, looking to see if any of
        .                               // them can reach a node that is presently on the stack. If
        .                               // so, that means they can also reach us.
   69,012 ( 0.00%)                      *successors_len = successors_stack.len();
        .                               // Set and return a reference, this is currently empty.
  138,004 ( 0.00%)                      iter.get_or_insert(self.graph.successors(node))
        .                           }
        .                       };
        .           
        .                       // Now that iter is initialized, this is a constant for this frame.
  135,370 ( 0.00%)              let successors_len = *successors_len;
        .           
        .                       // Construct iterators for the nodes and walk results. There are two cases:
        .                       // * The walk of a successor node returned.
        .                       // * The remaining successor nodes.
        .                       let returned_walk =
        .                           return_value.take().into_iter().map(|walk| (*successor_node, Some(walk)));
        .           
        .                       let successor_walk = successors.by_ref().map(|successor_node| {
        .                           debug!(?node, ?successor_node);
  212,688 ( 0.00%)                  (successor_node, self.inspect_node(successor_node))
        .                       });
        .           
  277,194 ( 0.01%)              for (successor_node, walk) in returned_walk.chain(successor_walk) {
  386,440 ( 0.01%)                  match walk {
        .                               Some(WalkReturn::Cycle { min_depth: successor_min_depth }) => {
        .                                   // Track the minimum depth we can reach.
   29,860 ( 0.00%)                          assert!(successor_min_depth <= depth);
   36,619 ( 0.00%)                          if successor_min_depth < *min_depth {
        .                                       debug!(?node, ?successor_min_depth);
   20,265 ( 0.00%)                              *min_depth = successor_min_depth;
    6,759 ( 0.00%)                              *min_cycle_root = successor_node;
        .                                   }
        .                               }
        .           
        .                               Some(WalkReturn::Complete { scc_index: successor_scc_index }) => {
        .                                   // Push the completed SCC indices onto
        .                                   // the `successors_stack` for later.
        .                                   debug!(?node, ?successor_scc_index);
        .                                   successors_stack.push(successor_scc_index);
        .                               }
        .           
        .                               None => {
   66,358 ( 0.00%)                          let depth = depth + 1;
        .                                   debug!(?depth, ?successor_node);
        .                                   // Remember which node the return value will come from.
   33,179 ( 0.00%)                          frame.successor_node = successor_node;
        .                                   // Start a new stack frame the step into it.
        .                                   stack.push(VisitingNodeFrame {
        .                                       node: successor_node,
        .                                       depth,
        .                                       iter: None,
        .                                       successors_len: 0,
        .                                       min_depth: depth,
        .                                       min_cycle_root: successor_node,
-- line 518 ----------------------------------------
-- line 531 ----------------------------------------
        .                       let frame = stack.pop().unwrap();
        .           
        .                       // If `min_depth == depth`, then we are the root of the
        .                       // cycle: we can't reach anyone further down the stack.
        .           
        .                       // Pass the 'return value' down the stack.
        .                       // We return one frame at a time so there can't be another return value.
        .                       debug_assert!(return_value.is_none());
   69,012 ( 0.00%)              return_value = Some(if frame.min_depth == depth {
        .                           // Note that successor stack may have duplicates, so we
        .                           // want to remove those:
        .                           let deduplicated_successors = {
        .                               let duplicate_set = &mut self.duplicate_set;
        .                               duplicate_set.clear();
        .                               successors_stack
        .                                   .drain(successors_len..)
   55,966 ( 0.00%)                          .filter(move |&i| duplicate_set.insert(i))
        .                           };
        .                           let scc_index = self.scc_data.create_scc(deduplicated_successors);
  167,016 ( 0.00%)                  self.node_states[node] = NodeState::InCycle { scc_index };
        .                           WalkReturn::Complete { scc_index }
        .                       } else {
        .                           // We are not the head of the cycle. Return back to our
        .                           // caller. They will take ownership of the
        .                           // `self.successors` data that we pushed.
   40,020 ( 0.00%)                  self.node_states[node] = NodeState::InCycleWith { parent: frame.min_cycle_root };
        .                           WalkReturn::Cycle { min_depth: frame.min_depth }
        .                       });
        .                   }
        .           
        .                   // Keep the allocation we used for successors_stack.
   11,943 ( 0.00%)          self.successors_stack = successors_stack;
        .                   debug_assert_eq!(self.successors_stack.len(), 0);
        .           
        .                   return_value.unwrap()
        .               }
        .           }

1,472,296 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/graph/scc/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 36 ----------------------------------------
        .           use rustc_session::parse::ParseSess;
        .           use rustc_span::source_map::{MultiSpan, Span, DUMMY_SP};
        .           use rustc_span::symbol::{kw, sym, Ident, Symbol};
        .           use tracing::debug;
        .           
        .           use std::ops::Range;
        .           use std::{cmp, mem, slice};
        .           
   30,496 ( 0.00%)  bitflags::bitflags! {
        .               struct Restrictions: u8 {
        .                   const STMT_EXPR         = 1 << 0;
        .                   const NO_STRUCT_LITERAL = 1 << 1;
        .                   const CONST_EXPR        = 1 << 2;
        .               }
        .           }
        .           
        .           #[derive(Clone, Copy, PartialEq, Debug)]
-- line 52 ----------------------------------------
-- line 104 ----------------------------------------
        .                               $self.bump();
        .                               return $self.maybe_recover_from_bad_qpath_stage_2($self.prev_token.span, ty);
        .                           }
        .                       }
        .                   }
        .               };
        .           }
        .           
    6,994 ( 0.00%)  #[derive(Clone)]
        .           pub struct Parser<'a> {
      154 ( 0.00%)      pub sess: &'a ParseSess,
        .               /// The current token.
       80 ( 0.00%)      pub token: Token,
        .               /// The spacing for the current token
      105 ( 0.00%)      pub token_spacing: Spacing,
        .               /// The previous token.
      120 ( 0.00%)      pub prev_token: Token,
      170 ( 0.00%)      pub capture_cfg: bool,
      405 ( 0.00%)      restrictions: Restrictions,
      210 ( 0.00%)      expected_tokens: Vec<TokenType>,
        .               // Important: This must only be advanced from `next_tok`
        .               // to ensure that `token_cursor.num_next_calls` is updated properly
        .               token_cursor: TokenCursor,
      210 ( 0.00%)      desugar_doc_comments: bool,
        .               /// This field is used to keep track of how many left angle brackets we have seen. This is
        .               /// required in order to detect extra leading left angle brackets (`<` characters) and error
        .               /// appropriately.
        .               ///
        .               /// See the comments in the `parse_path_segment` function for more details.
      210 ( 0.00%)      unmatched_angle_bracket_count: u32,
      315 ( 0.00%)      max_angle_bracket_count: u32,
        .               /// A list of all unclosed delimiters found by the lexer. If an entry is used for error recovery
        .               /// it gets removed from here. Every entry left at the end gets emitted as an independent
        .               /// error.
      105 ( 0.00%)      pub(super) unclosed_delims: Vec<UnmatchedBrace>,
        .               last_unexpected_token_span: Option<Span>,
        .               /// Span pointing at the `:` for the last type ascription the parser has seen, and whether it
        .               /// looked like it could have been a mistyped path or literal `Option:Some(42)`).
        .               pub last_type_ascription: Option<(Span, bool /* likely path typo */)>,
        .               /// If present, this `Parser` is not parsing Rust code but rather a macro call.
        .               subparser_name: Option<&'static str>,
        .               capture_state: CaptureState,
        .               /// This allows us to recover when the user forget to add braces around
-- line 146 ----------------------------------------
-- line 173 ----------------------------------------
        .           /// the first macro inner attribute to invoke a proc-macro).
        .           /// When create a `TokenStream`, the inner attributes get inserted
        .           /// into the proper place in the token stream.
        .           pub type ReplaceRange = (Range<u32>, Vec<(FlatToken, Spacing)>);
        .           
        .           /// Controls how we capture tokens. Capturing can be expensive,
        .           /// so we try to avoid performing capturing in cases where
        .           /// we will never need an `AttrAnnotatedTokenStream`
      105 ( 0.00%)  #[derive(Copy, Clone)]
        .           pub enum Capturing {
        .               /// We aren't performing any capturing - this is the default mode.
        .               No,
        .               /// We are capturing tokens
        .               Yes,
        .           }
        .           
      429 ( 0.00%)  #[derive(Clone)]
        .           struct CaptureState {
      420 ( 0.00%)      capturing: Capturing,
      105 ( 0.00%)      replace_ranges: Vec<ReplaceRange>,
        .               inner_attr_ranges: FxHashMap<AttrId, ReplaceRange>,
        .           }
        .           
        .           impl<'a> Drop for Parser<'a> {
        .               fn drop(&mut self) {
    2,352 ( 0.00%)          emit_unclosed_delims(&mut self.unclosed_delims, &self.sess);
        .               }
        .           }
        .           
  103,153 ( 0.00%)  #[derive(Clone)]
        .           struct TokenCursor {
        .               frame: TokenCursorFrame,
   25,013 ( 0.00%)      stack: Vec<TokenCursorFrame>,
        .               desugar_doc_comments: bool,
        .               // Counts the number of calls to `next` or `next_desugared`,
        .               // depending on whether `desugar_doc_comments` is set.
    7,707 ( 0.00%)      num_next_calls: usize,
        .               // During parsing, we may sometimes need to 'unglue' a
        .               // glued token into two component tokens
        .               // (e.g. '>>' into '>' and '>), so that the parser
        .               // can consume them one at a time. This process
        .               // bypasses the normal capturing mechanism
        .               // (e.g. `num_next_calls` will not be incremented),
        .               // since the 'unglued' tokens due not exist in
        .               // the original `TokenStream`.
-- line 217 ----------------------------------------
-- line 226 ----------------------------------------
        .               // in `Option<Vec<u8>>` requires us to unglue
        .               // the trailing `>>` token. The `break_last_token`
        .               // field is used to track this token - it gets
        .               // appended to the captured stream when
        .               // we evaluate a `LazyTokenStream`
        .               break_last_token: bool,
        .           }
        .           
   47,086 ( 0.00%)  #[derive(Clone)]
        .           struct TokenCursorFrame {
   22,784 ( 0.00%)      delim: token::DelimToken,
        .               span: DelimSpan,
        .               open_delim: bool,
   45,568 ( 0.00%)      tree_cursor: tokenstream::Cursor,
        .               close_delim: bool,
        .           }
        .           
        .           impl TokenCursorFrame {
        .               fn new(span: DelimSpan, delim: DelimToken, tts: TokenStream) -> Self {
    2,605 ( 0.00%)          TokenCursorFrame {
        .                       delim,
        .                       span,
        .                       open_delim: false,
    9,701 ( 0.00%)              tree_cursor: tts.into_trees(),
        .                       close_delim: false,
        .                   }
        .               }
        .           }
        .           
        .           impl TokenCursor {
1,095,024 ( 0.03%)      fn next(&mut self) -> (Token, Spacing) {
        .                   loop {
  516,209 ( 0.01%)              let (tree, spacing) = if !self.frame.open_delim {
    8,659 ( 0.00%)                  self.frame.open_delim = true;
   43,295 ( 0.00%)                  TokenTree::open_tt(self.frame.span, self.frame.delim).into()
1,073,701 ( 0.03%)              } else if let Some(tree) = self.frame.tree_cursor.next_with_spacing() {
        .                           tree
   34,642 ( 0.00%)              } else if !self.frame.close_delim {
    8,401 ( 0.00%)                  self.frame.close_delim = true;
   42,005 ( 0.00%)                  TokenTree::close_tt(self.frame.span, self.frame.delim).into()
   16,654 ( 0.00%)              } else if let Some(frame) = self.stack.pop() {
  108,251 ( 0.00%)                  self.frame = frame;
        .                           continue;
        .                       } else {
   10,674 ( 0.00%)                  (TokenTree::Token(Token::new(token::Eof, DUMMY_SP)), Spacing::Alone)
        .                       };
        .           
  199,822 ( 0.00%)              match tree {
        .                           TokenTree::Token(token) => {
  730,016 ( 0.02%)                      return (token, spacing);
        .                           }
        .                           TokenTree::Delimited(sp, delim, tts) => {
        .                               let frame = TokenCursorFrame::new(sp, delim, tts);
        .                               self.stack.push(mem::replace(&mut self.frame, frame));
        .                           }
        .                       }
        .                   }
  730,016 ( 0.02%)      }
        .           
    7,920 ( 0.00%)      fn next_desugared(&mut self) -> (Token, Spacing) {
    2,376 ( 0.00%)          let (data, attr_style, sp) = match self.next() {
        .                       (Token { kind: token::DocComment(_, attr_style, data), span }, _) => {
        .                           (data, attr_style, span)
        .                       }
    3,960 ( 0.00%)              tok => return tok,
        .                   };
        .           
        .                   // Searches for the occurrences of `"#*` and returns the minimum number of `#`s
        .                   // required to wrap the text.
        .                   let mut num_of_hashes = 0;
        .                   let mut count = 0;
        .                   for ch in data.as_str().chars() {
        .                       count = match ch {
-- line 298 ----------------------------------------
-- line 332 ----------------------------------------
        .                                   .iter()
        .                                   .cloned()
        .                                   .collect::<TokenStream>()
        .                           },
        .                       ),
        .                   ));
        .           
        .                   self.next()
    7,128 ( 0.00%)      }
        .           }
        .           
   54,140 ( 0.00%)  #[derive(Debug, Clone, PartialEq)]
        .           enum TokenType {
   43,312 ( 0.00%)      Token(TokenKind),
        .               Keyword(Symbol),
        .               Operator,
        .               Lifetime,
        .               Ident,
        .               Path,
        .               Type,
        .               Const,
        .           }
-- line 353 ----------------------------------------
-- line 378 ----------------------------------------
        .               /// The separator token.
        .               sep: Option<TokenKind>,
        .               /// `true` if a trailing separator is allowed.
        .               trailing_sep_allowed: bool,
        .           }
        .           
        .           impl SeqSep {
        .               fn trailing_allowed(t: TokenKind) -> SeqSep {
      909 ( 0.00%)          SeqSep { sep: Some(t), trailing_sep_allowed: true }
        .               }
        .           
        .               fn none() -> SeqSep {
        .                   SeqSep { sep: None, trailing_sep_allowed: false }
        .               }
        .           }
        .           
        .           pub enum FollowedByType {
        .               Yes,
        .               No,
        .           }
        .           
        .           fn token_descr_opt(token: &Token) -> Option<&'static str> {
    1,180 ( 0.00%)      Some(match token.kind {
    2,596 ( 0.00%)          _ if token.is_special_ident() => "reserved identifier",
    2,360 ( 0.00%)          _ if token.is_used_keyword() => "keyword",
    2,360 ( 0.00%)          _ if token.is_unused_keyword() => "reserved keyword",
        .                   token::DocComment(..) => "doc comment",
        .                   _ => return None,
        .               })
        .           }
        .           
    4,543 ( 0.00%)  pub(super) fn token_descr(token: &Token) -> String {
    1,298 ( 0.00%)      let token_str = pprust::token_to_string(token);
        .               match token_descr_opt(token) {
      767 ( 0.00%)          Some(prefix) => format!("{} `{}`", prefix, token_str),
    4,130 ( 0.00%)          _ => format!("`{}`", token_str),
        .               }
    3,245 ( 0.00%)  }
        .           
        .           impl<'a> Parser<'a> {
    7,294 ( 0.00%)      pub fn new(
        .                   sess: &'a ParseSess,
        .                   tokens: TokenStream,
        .                   desugar_doc_comments: bool,
        .                   subparser_name: Option<&'static str>,
        .               ) -> Self {
      521 ( 0.00%)          let mut start_frame = TokenCursorFrame::new(DelimSpan::dummy(), token::NoDelim, tokens);
    1,042 ( 0.00%)          start_frame.open_delim = true;
        .                   start_frame.close_delim = true;
        .           
   16,151 ( 0.00%)          let mut parser = Parser {
        .                       sess,
      521 ( 0.00%)              token: Token::dummy(),
        .                       token_spacing: Spacing::Alone,
      521 ( 0.00%)              prev_token: Token::dummy(),
        .                       capture_cfg: false,
        .                       restrictions: Restrictions::empty(),
        .                       expected_tokens: Vec::new(),
        .                       token_cursor: TokenCursor {
    3,126 ( 0.00%)                  frame: start_frame,
        .                           stack: Vec::new(),
        .                           num_next_calls: 0,
        .                           desugar_doc_comments,
        .                           break_last_token: false,
        .                       },
        .                       desugar_doc_comments,
        .                       unmatched_angle_bracket_count: 0,
        .                       max_angle_bracket_count: 0,
-- line 445 ----------------------------------------
-- line 451 ----------------------------------------
        .                           capturing: Capturing::No,
        .                           replace_ranges: Vec::new(),
        .                           inner_attr_ranges: Default::default(),
        .                       },
        .                       current_closure: None,
        .                   };
        .           
        .                   // Make parser point to the first token.
    1,042 ( 0.00%)          parser.bump();
        .           
        .                   parser
    4,689 ( 0.00%)      }
        .           
        .               fn next_tok(&mut self, fallback_span: Span) -> (Token, Spacing) {
        .                   loop {
  496,380 ( 0.01%)              let (mut next, spacing) = if self.desugar_doc_comments {
    3,168 ( 0.00%)                  self.token_cursor.next_desugared()
        .                       } else {
  245,814 ( 0.01%)                  self.token_cursor.next()
        .                       };
  330,920 ( 0.01%)              self.token_cursor.num_next_calls += 1;
        .                       // We've retrieved an token from the underlying
        .                       // cursor, so we no longer need to worry about
        .                       // an unglued token. See `break_and_eat` for more details
   82,730 ( 0.00%)              self.token_cursor.break_last_token = false;
  330,920 ( 0.01%)              if next.span.is_dummy() {
        .                           // Tweak the location for better diagnostics, but keep syntactic context intact.
    2,100 ( 0.00%)                  next.span = fallback_span.with_ctxt(next.span.ctxt());
        .                       }
  271,920 ( 0.01%)              if matches!(
  165,460 ( 0.00%)                  next.kind,
        .                           token::OpenDelim(token::NoDelim) | token::CloseDelim(token::NoDelim)
        .                       ) {
        .                           continue;
        .                       }
  330,920 ( 0.01%)              return (next, spacing);
        .                   }
        .               }
        .           
        .               pub fn unexpected<T>(&mut self) -> PResult<'a, T> {
        .                   match self.expect_one_of(&[], &[]) {
        .                       Err(e) => Err(e),
        .                       // We can get `Ok(true)` from `recover_closing_delimiter`
        .                       // which is called in `expected_one_of_not_found`.
        .                       Ok(_) => FatalError.raise(),
        .                   }
        .               }
        .           
        .               /// Expects and consumes the token `t`. Signals an error if the next token is not `t`.
   87,741 ( 0.00%)      pub fn expect(&mut self, t: &TokenKind) -> PResult<'a, bool /* recovered */> {
    9,749 ( 0.00%)          if self.expected_tokens.is_empty() {
    5,550 ( 0.00%)              if self.token == *t {
    4,625 ( 0.00%)                  self.bump();
        .                           Ok(false)
        .                       } else {
        .                           self.unexpected_try_recover(t)
        .                       }
        .                   } else {
  105,888 ( 0.00%)              self.expect_one_of(slice::from_ref(t), &[])
        .                   }
  146,235 ( 0.00%)      }
        .           
        .               /// Expect next token to be edible or inedible token.  If edible,
        .               /// then consume it; if inedible, then return without consuming
        .               /// anything.  Signal a fatal error if next token is unexpected.
  135,336 ( 0.00%)      pub fn expect_one_of(
        .                   &mut self,
        .                   edible: &[TokenKind],
        .                   inedible: &[TokenKind],
        .               ) -> PResult<'a, bool /* recovered */> {
   22,556 ( 0.00%)          if edible.contains(&self.token.kind) {
   28,230 ( 0.00%)              self.bump();
        .                       Ok(false)
        .                   } else if inedible.contains(&self.token.kind) {
        .                       // leave it in the input
        .                       Ok(false)
        .                   } else if self.last_unexpected_token_span == Some(self.token.span) {
        .                       FatalError.raise();
        .                   } else {
        .                       self.expected_one_of_not_found(edible, inedible)
        .                   }
  169,170 ( 0.00%)      }
        .           
        .               // Public for rustfmt usage.
        .               pub fn parse_ident(&mut self) -> PResult<'a, Ident> {
   93,355 ( 0.00%)          self.parse_ident_common(true)
        .               }
        .           
        .               fn ident_or_err(&mut self) -> PResult<'a, (Ident, /* is_raw */ bool)> {
   70,569 ( 0.00%)          self.token.ident().ok_or_else(|| match self.prev_token.kind {
        .                       TokenKind::DocComment(..) => {
        .                           self.span_err(self.prev_token.span, Error::UselessDocComment)
        .                       }
        .                       _ => self.expected_ident_found(),
        .                   })
        .               }
        .           
  162,827 ( 0.00%)      fn parse_ident_common(&mut self, recover: bool) -> PResult<'a, Ident> {
   23,261 ( 0.00%)          let (ident, is_raw) = self.ident_or_err()?;
  139,521 ( 0.00%)          if !is_raw && ident.is_reserved() {
        .                       let mut err = self.expected_ident_found();
        .                       if recover {
        .                           err.emit();
        .                       } else {
        .                           return Err(err);
        .                       }
        .                   }
   93,044 ( 0.00%)          self.bump();
        .                   Ok(ident)
  232,610 ( 0.01%)      }
        .           
        .               /// Checks if the next token is `tok`, and returns `true` if so.
        .               ///
        .               /// This method will automatically add `tok` to `expected_tokens` if `tok` is not
        .               /// encountered.
1,793,526 ( 0.04%)      fn check(&mut self, tok: &TokenKind) -> bool {
  781,163 ( 0.02%)          let is_present = self.token == *tok;
  529,750 ( 0.01%)          if !is_present {
1,060,362 ( 0.02%)              self.expected_tokens.push(TokenType::Token(tok.clone()));
        .                   }
        .                   is_present
1,793,526 ( 0.04%)      }
        .           
        .               /// Consumes a token 'tok' if it exists. Returns whether the given token was present.
       60 ( 0.00%)      pub fn eat(&mut self, tok: &TokenKind) -> bool {
  368,351 ( 0.01%)          let is_present = self.check(tok);
  238,325 ( 0.01%)          if is_present {
   58,586 ( 0.00%)              self.bump()
        .                   }
        .                   is_present
       75 ( 0.00%)      }
        .           
        .               /// If the next token is the given keyword, returns `true` without eating it.
        .               /// An expectation is also added for diagnostics purposes.
   48,990 ( 0.00%)      fn check_keyword(&mut self, kw: Symbol) -> bool {
   13,812 ( 0.00%)          self.expected_tokens.push(TokenType::Keyword(kw));
  371,763 ( 0.01%)          self.token.is_keyword(kw)
        .               }
        .           
        .               /// If the next token is the given keyword, eats it and returns `true`.
        .               /// Otherwise, returns `false`. An expectation is also added for diagnostics purposes.
        .               // Public for rustfmt usage.
  116,035 ( 0.00%)      pub fn eat_keyword(&mut self, kw: Symbol) -> bool {
   89,252 ( 0.00%)          if self.check_keyword(kw) {
   10,143 ( 0.00%)              self.bump();
        .                       true
        .                   } else {
        .                       false
        .                   }
  116,035 ( 0.00%)      }
        .           
        .               fn eat_keyword_noexpect(&mut self, kw: Symbol) -> bool {
   13,270 ( 0.00%)          if self.token.is_keyword(kw) {
    2,638 ( 0.00%)              self.bump();
        .                       true
        .                   } else {
        .                       false
        .                   }
        .               }
        .           
        .               /// If the given word is not a keyword, signals an error.
        .               /// If the next token is not the given word, signals an error.
        .               /// Otherwise, eats it.
    1,715 ( 0.00%)      fn expect_keyword(&mut self, kw: Symbol) -> PResult<'a, ()> {
        .                   if !self.eat_keyword(kw) { self.unexpected() } else { Ok(()) }
    1,372 ( 0.00%)      }
        .           
        .               /// Is the given keyword `kw` followed by a non-reserved identifier?
   89,056 ( 0.00%)      fn is_kw_followed_by_ident(&self, kw: Symbol) -> bool {
   44,528 ( 0.00%)          self.token.is_keyword(kw) && self.look_ahead(1, |t| t.is_ident() && !t.is_reserved_ident())
  100,188 ( 0.00%)      }
        .           
   88,584 ( 0.00%)      fn check_or_expected(&mut self, ok: bool, typ: TokenType) -> bool {
   35,256 ( 0.00%)          if ok {
        .                       true
        .                   } else {
   16,548 ( 0.00%)              self.expected_tokens.push(typ);
        .                       false
        .                   }
   88,584 ( 0.00%)      }
        .           
        .               fn check_ident(&mut self) -> bool {
   22,613 ( 0.00%)          self.check_or_expected(self.token.is_ident(), TokenType::Ident)
        .               }
        .           
   33,848 ( 0.00%)      fn check_path(&mut self) -> bool {
   77,880 ( 0.00%)          self.check_or_expected(self.token.is_path_start(), TokenType::Path)
   42,310 ( 0.00%)      }
        .           
        .               fn check_type(&mut self) -> bool {
    3,708 ( 0.00%)          self.check_or_expected(self.token.can_begin_type(), TokenType::Type)
        .               }
        .           
        .               fn check_const_arg(&mut self) -> bool {
    3,120 ( 0.00%)          self.check_or_expected(self.token.can_begin_const_arg(), TokenType::Const)
        .               }
        .           
   23,004 ( 0.00%)      fn check_inline_const(&self, dist: usize) -> bool {
   12,780 ( 0.00%)          self.is_keyword_ahead(dist, &[kw::Const])
        .                       && self.look_ahead(dist + 1, |t| match t.kind {
        .                           token::Interpolated(ref nt) => matches!(**nt, token::NtBlock(..)),
        .                           token::OpenDelim(DelimToken::Brace) => true,
        .                           _ => false,
        .                       })
   23,004 ( 0.00%)      }
        .           
        .               /// Checks to see if the next token is either `+` or `+=`.
        .               /// Otherwise returns `false`.
        .               fn check_plus(&mut self) -> bool {
    8,476 ( 0.00%)          self.check_or_expected(
    4,238 ( 0.00%)              self.token.is_like_plus(),
    4,238 ( 0.00%)              TokenType::Token(token::BinOp(token::Plus)),
        .                   )
        .               }
        .           
        .               /// Eats the expected token if it's present possibly breaking
        .               /// compound tokens like multi-character operators in process.
        .               /// Returns `true` if the token was eaten.
  146,592 ( 0.00%)      fn break_and_eat(&mut self, expected: TokenKind) -> bool {
   85,512 ( 0.00%)          if self.token.kind == expected {
    7,066 ( 0.00%)              self.bump();
        .                       return true;
        .                   }
   43,415 ( 0.00%)          match self.token.kind.break_two_token_op() {
    6,442 ( 0.00%)              Some((first, second)) if first == expected => {
        4 ( 0.00%)                  let first_span = self.sess.source_map().start_point(self.token.span);
        5 ( 0.00%)                  let second_span = self.token.span.with_lo(first_span.hi());
        9 ( 0.00%)                  self.token = Token::new(first, first_span);
        .                           // Keep track of this token - if we end token capturing now,
        .                           // we'll want to append this token to the captured stream.
        .                           //
        .                           // If we consume any additional tokens, then this token
        .                           // is not needed (we'll capture the entire 'glued' token),
        .                           // and `next_tok` will set this field to `None`
        1 ( 0.00%)                  self.token_cursor.break_last_token = true;
        .                           // Use the spacing of the glued token as the spacing
        .                           // of the unglued second token.
       14 ( 0.00%)                  self.bump_with((Token::new(second, second_span), self.token_spacing));
        .                           true
        .                       }
        .                       _ => {
   26,046 ( 0.00%)                  self.expected_tokens.push(TokenType::Token(expected));
        .                           false
        .                       }
        .                   }
  146,817 ( 0.00%)      }
        .           
        .               /// Eats `+` possibly breaking tokens like `+=` in process.
        .               fn eat_plus(&mut self) -> bool {
      400 ( 0.00%)          self.break_and_eat(token::BinOp(token::Plus))
        .               }
        .           
        .               /// Eats `&` possibly breaking tokens like `&&` in process.
        .               /// Signals an error if `&` is not eaten.
        .               fn expect_and(&mut self) -> PResult<'a, ()> {
    8,556 ( 0.00%)          if self.break_and_eat(token::BinOp(token::And)) { Ok(()) } else { self.unexpected() }
        .               }
        .           
        .               /// Eats `|` possibly breaking tokens like `||` in process.
        .               /// Signals an error if `|` was not eaten.
        .               fn expect_or(&mut self) -> PResult<'a, ()> {
    1,818 ( 0.00%)          if self.break_and_eat(token::BinOp(token::Or)) { Ok(()) } else { self.unexpected() }
        .               }
        .           
        .               /// Eats `<` possibly breaking tokens like `<<` in process.
    5,908 ( 0.00%)      fn eat_lt(&mut self) -> bool {
   29,883 ( 0.00%)          let ate = self.break_and_eat(token::Lt);
   19,421 ( 0.00%)          if ate {
        .                       // See doc comment for `unmatched_angle_bracket_count`.
    3,608 ( 0.00%)              self.unmatched_angle_bracket_count += 1;
    4,059 ( 0.00%)              self.max_angle_bracket_count += 1;
        .                       debug!("eat_lt: (increment) count={:?}", self.unmatched_angle_bracket_count);
        .                   }
        .                   ate
    5,908 ( 0.00%)      }
        .           
        .               /// Eats `<` possibly breaking tokens like `<<` in process.
        .               /// Signals an error if `<` was not eaten.
        .               fn expect_lt(&mut self) -> PResult<'a, ()> {
        .                   if self.eat_lt() { Ok(()) } else { self.unexpected() }
        .               }
        .           
        .               /// Eats `>` possibly breaking tokens like `>>` in process.
        .               /// Signals an error if `>` was not eaten.
        .               fn expect_gt(&mut self) -> PResult<'a, ()> {
    5,412 ( 0.00%)          if self.break_and_eat(token::Gt) {
        .                       // See doc comment for `unmatched_angle_bracket_count`.
    2,706 ( 0.00%)              if self.unmatched_angle_bracket_count > 0 {
    1,804 ( 0.00%)                  self.unmatched_angle_bracket_count -= 1;
        .                           debug!("expect_gt: (decrement) count={:?}", self.unmatched_angle_bracket_count);
        .                       }
        .                       Ok(())
        .                   } else {
        .                       self.unexpected()
        .                   }
        .               }
        .           
        .               fn expect_any_with_type(&mut self, kets: &[&TokenKind], expect: TokenExpectType) -> bool {
        .                   kets.iter().any(|k| match expect {
   28,242 ( 0.00%)              TokenExpectType::Expect => self.check(k),
    4,545 ( 0.00%)              TokenExpectType::NoExpect => self.token == **k,
        .                   })
        .               }
        .           
        .               fn parse_seq_to_before_tokens<T>(
        .                   &mut self,
        .                   kets: &[&TokenKind],
        .                   sep: SeqSep,
        .                   expect: TokenExpectType,
-- line 759 ----------------------------------------
-- line 761 ----------------------------------------
        .               ) -> PResult<'a, (Vec<T>, bool /* trailing */, bool /* recovered */)> {
        .                   let mut first = true;
        .                   let mut recovered = false;
        .                   let mut trailing = false;
        .                   let mut v = vec![];
        .                   let unclosed_delims = !self.unclosed_delims.is_empty();
        .           
        .                   while !self.expect_any_with_type(kets, expect) {
   36,350 ( 0.00%)              if let token::CloseDelim(..) | token::Eof = self.token.kind {
        .                           break;
        .                       }
   24,295 ( 0.00%)              if let Some(ref t) = sep.sep {
   27,268 ( 0.00%)                  if first {
        .                               first = false;
        .                           } else {
   21,087 ( 0.00%)                      match self.expect(t) {
        .                                   Ok(false) => {
        .                                       self.current_closure.take();
        .                                   }
        .                                   Ok(true) => {
        .                                       self.current_closure.take();
        .                                       recovered = true;
        .                                       break;
        .                                   }
-- line 784 ----------------------------------------
-- line 857 ----------------------------------------
        .                                               e.cancel();
        .                                               break;
        .                                           }
        .                                       }
        .                                   }
        .                               }
        .                           }
        .                       }
   12,848 ( 0.00%)              if sep.trailing_sep_allowed && self.expect_any_with_type(kets, expect) {
        .                           trailing = true;
        .                           break;
        .                       }
        .           
    9,231 ( 0.00%)              let t = f(self)?;
    5,319 ( 0.00%)              v.push(t);
        .                   }
        .           
   16,084 ( 0.00%)          Ok((v, trailing, recovered))
        .               }
        .           
        .               fn recover_missing_braces_around_closure_body(
        .                   &mut self,
        .                   closure_spans: ClosureSpans,
        .                   mut expect_err: DiagnosticBuilder<'_>,
        .               ) -> PResult<'a, ()> {
        .                   let initial_semicolon = self.token.span;
-- line 882 ----------------------------------------
-- line 937 ----------------------------------------
        .               /// `f` must consume tokens until reaching the next separator or
        .               /// closing bracket.
        .               fn parse_seq_to_before_end<T>(
        .                   &mut self,
        .                   ket: &TokenKind,
        .                   sep: SeqSep,
        .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
        .               ) -> PResult<'a, (Vec<T>, bool, bool)> {
   16,402 ( 0.00%)          self.parse_seq_to_before_tokens(&[ket], sep, TokenExpectType::Expect, f)
        .               }
        .           
        .               /// Parses a sequence, including the closing delimiter. The function
        .               /// `f` must consume tokens until reaching the next separator or
        .               /// closing bracket.
   24,960 ( 0.00%)      fn parse_seq_to_end<T>(
        .                   &mut self,
        .                   ket: &TokenKind,
        .                   sep: SeqSep,
        .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
        .               ) -> PResult<'a, (Vec<T>, bool /* trailing */)> {
   10,052 ( 0.00%)          let (val, trailing, recovered) = self.parse_seq_to_before_end(ket, sep, f)?;
    4,820 ( 0.00%)          if !recovered {
        .                       self.eat(ket);
        .                   }
   26,828 ( 0.00%)          Ok((val, trailing))
   19,968 ( 0.00%)      }
        .           
        .               /// Parses a sequence, including the closing delimiter. The function
        .               /// `f` must consume tokens until reaching the next separator or
        .               /// closing bracket.
        .               fn parse_unspanned_seq<T>(
        .                   &mut self,
        .                   bra: &TokenKind,
        .                   ket: &TokenKind,
        .                   sep: SeqSep,
        .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
        .               ) -> PResult<'a, (Vec<T>, bool)> {
    9,020 ( 0.00%)          self.expect(bra)?;
   19,968 ( 0.00%)          self.parse_seq_to_end(ket, sep, f)
        .               }
        .           
        .               fn parse_delim_comma_seq<T>(
        .                   &mut self,
        .                   delim: DelimToken,
        .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
        .               ) -> PResult<'a, (Vec<T>, bool)> {
        .                   self.parse_unspanned_seq(
    3,606 ( 0.00%)              &token::OpenDelim(delim),
    4,728 ( 0.00%)              &token::CloseDelim(delim),
        .                       SeqSep::trailing_allowed(token::Comma),
        .                       f,
        .                   )
        .               }
        .           
        .               fn parse_paren_comma_seq<T>(
        .                   &mut self,
        .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
        .               ) -> PResult<'a, (Vec<T>, bool)> {
        .                   self.parse_delim_comma_seq(token::Paren, f)
        .               }
        .           
        .               /// Advance the parser by one token using provided token as the next one.
1,075,503 ( 0.03%)      fn bump_with(&mut self, (next_token, next_spacing): (Token, Spacing)) {
        .                   // Bumping after EOF is a bad sign, usually an infinite loop.
  496,386 ( 0.01%)          if self.prev_token.kind == TokenKind::Eof {
        .                       let msg = "attempted to bump the parser past EOF (may be stuck in a loop)";
        .                       self.span_bug(self.token.span, msg);
        .                   }
        .           
        .                   // Update the current and previous tokens.
  330,924 ( 0.01%)          self.prev_token = mem::replace(&mut self.token, next_token);
   82,731 ( 0.00%)          self.token_spacing = next_spacing;
        .           
        .                   // Diagnostics.
   82,731 ( 0.00%)          self.expected_tokens.clear();
        .               }
        .           
        .               /// Advance the parser by one token.
  661,840 ( 0.02%)      pub fn bump(&mut self) {
  330,920 ( 0.01%)          let next_token = self.next_tok(self.token.span);
  496,380 ( 0.01%)          self.bump_with(next_token);
  661,840 ( 0.02%)      }
        .           
        .               /// Look-ahead `dist` tokens of `self.token` and get access to that token there.
        .               /// When `dist == 0` then the current token is looked at.
       16 ( 0.00%)      pub fn look_ahead<R>(&self, dist: usize, looker: impl FnOnce(&Token) -> R) -> R {
    8,596 ( 0.00%)          if dist == 0 {
    3,563 ( 0.00%)              return looker(&self.token);
        .                   }
        .           
   40,053 ( 0.00%)          let frame = &self.token_cursor.frame;
   42,768 ( 0.00%)          if frame.delim != DelimToken::NoDelim {
        .                       let all_normal = (0..dist).all(|i| {
  126,741 ( 0.00%)                  let token = frame.tree_cursor.look_ahead(i);
  167,792 ( 0.00%)                  !matches!(token, Some(TokenTree::Delimited(_, DelimToken::NoDelim, _)))
        .                       });
        .                       if all_normal {
  206,382 ( 0.00%)                  return match frame.tree_cursor.look_ahead(dist - 1) {
   77,429 ( 0.00%)                      Some(tree) => match tree {
   38,501 ( 0.00%)                          TokenTree::Token(token) => looker(token),
        .                                   TokenTree::Delimited(dspan, delim, _) => {
    6,370 ( 0.00%)                              looker(&Token::new(token::OpenDelim(*delim), dspan.open))
        .                                   }
        .                               },
   16,860 ( 0.00%)                      None => looker(&Token::new(token::CloseDelim(frame.delim), frame.span.close)),
        .                           };
        .                       }
        .                   }
        .           
        .                   let mut cursor = self.token_cursor.clone();
        .                   let mut i = 0;
    1,800 ( 0.00%)          let mut token = Token::dummy();
       24 ( 0.00%)          while i < dist {
   12,566 ( 0.00%)              token = cursor.next().0;
    5,900 ( 0.00%)              if matches!(
    3,588 ( 0.00%)                  token.kind,
        .                           token::OpenDelim(token::NoDelim) | token::CloseDelim(token::NoDelim)
        .                       ) {
        .                           continue;
        .                       }
       10 ( 0.00%)              i += 1;
        .                   }
      313 ( 0.00%)          return looker(&token);
       18 ( 0.00%)      }
        .           
        .               /// Returns whether any of the given keywords are `dist` tokens ahead of the current one.
   34,335 ( 0.00%)      fn is_keyword_ahead(&self, dist: usize, kws: &[Symbol]) -> bool {
    9,373 ( 0.00%)          self.look_ahead(dist, |t| kws.iter().any(|&kw| t.is_keyword(kw)))
   34,335 ( 0.00%)      }
        .           
        .               /// Parses asyncness: `async` or nothing.
        .               fn parse_asyncness(&mut self) -> Async {
        .                   if self.eat_keyword(kw::Async) {
        .                       let span = self.prev_token.uninterpolated_span();
        .                       Async::Yes { span, closure_id: DUMMY_NODE_ID, return_impl_trait_id: DUMMY_NODE_ID }
        .                   } else {
        .                       Async::No
        .                   }
        .               }
        .           
        .               /// Parses unsafety: `unsafe` or nothing.
    2,062 ( 0.00%)      fn parse_unsafety(&mut self) -> Unsafe {
        .                   if self.eat_keyword(kw::Unsafe) {
        .                       Unsafe::Yes(self.prev_token.uninterpolated_span())
        .                   } else {
        .                       Unsafe::No
        .                   }
    8,248 ( 0.00%)      }
        .           
        .               /// Parses constness: `const` or nothing.
   18,624 ( 0.00%)      fn parse_constness(&mut self) -> Const {
        .                   // Avoid const blocks to be parsed as const items
    5,168 ( 0.00%)          if self.look_ahead(1, |t| t != &token::OpenDelim(DelimToken::Brace))
        .                       && self.eat_keyword(kw::Const)
        .                   {
      245 ( 0.00%)              Const::Yes(self.prev_token.uninterpolated_span())
        .                   } else {
        .                       Const::No
        .                   }
   32,592 ( 0.00%)      }
        .           
        .               /// Parses inline const expressions.
        .               fn parse_const_block(&mut self, span: Span, pat: bool) -> PResult<'a, P<Expr>> {
        .                   if pat {
        .                       self.sess.gated_spans.gate(sym::inline_const_pat, span);
        .                   } else {
        .                       self.sess.gated_spans.gate(sym::inline_const, span);
        .                   }
-- line 1104 ----------------------------------------
-- line 1108 ----------------------------------------
        .                       id: DUMMY_NODE_ID,
        .                       value: self.mk_expr(blk.span, ExprKind::Block(blk, None), AttrVec::new()),
        .                   };
        .                   let blk_span = anon_const.value.span;
        .                   Ok(self.mk_expr(span.to(blk_span), ExprKind::ConstBlock(anon_const), AttrVec::new()))
        .               }
        .           
        .               /// Parses mutability (`mut` or nothing).
      664 ( 0.00%)      fn parse_mutability(&mut self) -> Mutability {
        .                   if self.eat_keyword(kw::Mut) { Mutability::Mut } else { Mutability::Not }
    3,848 ( 0.00%)      }
        .           
        .               /// Possibly parses mutability (`const` or `mut`).
        .               fn parse_const_or_mut(&mut self) -> Option<Mutability> {
        .                   if self.eat_keyword(kw::Mut) {
        .                       Some(Mutability::Mut)
        .                   } else if self.eat_keyword(kw::Const) {
        .                       Some(Mutability::Not)
        .                   } else {
        .                       None
        .                   }
        .               }
        .           
        .               fn parse_field_name(&mut self) -> PResult<'a, Ident> {
      396 ( 0.00%)          if let token::Literal(token::Lit { kind: token::Integer, symbol, suffix }) = self.token.kind
        .                   {
        .                       self.expect_no_suffix(self.token.span, "a tuple index", suffix);
        .                       self.bump();
        .                       Ok(Ident::new(symbol, self.prev_token.span))
        .                   } else {
      594 ( 0.00%)              self.parse_ident_common(true)
        .                   }
        .               }
        .           
        .               fn parse_mac_args(&mut self) -> PResult<'a, P<MacArgs>> {
    1,819 ( 0.00%)          self.parse_mac_args_common(true).map(P)
        .               }
        .           
        .               fn parse_attr_args(&mut self) -> PResult<'a, MacArgs> {
    1,791 ( 0.00%)          self.parse_mac_args_common(false)
        .               }
        .           
   10,881 ( 0.00%)      fn parse_mac_args_common(&mut self, delimited_only: bool) -> PResult<'a, MacArgs> {
    9,672 ( 0.00%)          Ok(
    6,793 ( 0.00%)              if self.check(&token::OpenDelim(DelimToken::Paren))
      561 ( 0.00%)                  || self.check(&token::OpenDelim(DelimToken::Bracket))
      561 ( 0.00%)                  || self.check(&token::OpenDelim(DelimToken::Brace))
        .                       {
    4,092 ( 0.00%)                  match self.parse_token_tree() {
    5,115 ( 0.00%)                      TokenTree::Delimited(dspan, delim, tokens) =>
        .                               // We've confirmed above that there is a delimiter so unwrapping is OK.
        .                               {
    2,046 ( 0.00%)                          MacArgs::Delimited(dspan, MacDelimiter::from_token(delim).unwrap(), tokens)
        .                               }
        .                               _ => unreachable!(),
        .                           }
      372 ( 0.00%)              } else if !delimited_only {
        .                           if self.eat(&token::Eq) {
      127 ( 0.00%)                      let eq_span = self.prev_token.span;
        .           
        .                               // Collect tokens because they are used during lowering to HIR.
      127 ( 0.00%)                      let expr = self.parse_expr_force_collect()?;
      127 ( 0.00%)                      let span = expr.span;
        .           
      635 ( 0.00%)                      let token_kind = token::Interpolated(Lrc::new(token::NtExpr(expr)));
    1,143 ( 0.00%)                      MacArgs::Eq(eq_span, Token::new(token_kind, span))
        .                           } else {
        .                               MacArgs::Empty
        .                           }
        .                       } else {
        .                           return self.unexpected();
        .                       },
        .                   )
    8,463 ( 0.00%)      }
        .           
        .               fn parse_or_use_outer_attributes(
        .                   &mut self,
        .                   already_parsed_attrs: Option<AttrWrapper>,
        .               ) -> PResult<'a, AttrWrapper> {
   29,362 ( 0.00%)          if let Some(attrs) = already_parsed_attrs {
        .                       Ok(attrs)
        .                   } else {
   17,632 ( 0.00%)              self.parse_outer_attributes()
        .                   }
        .               }
        .           
        .               /// Parses a single token tree from the input.
    8,888 ( 0.00%)      pub(crate) fn parse_token_tree(&mut self) -> TokenTree {
    3,457 ( 0.00%)          match self.token.kind {
        .                       token::OpenDelim(..) => {
        .                           let depth = self.token_cursor.stack.len();
        .           
        .                           // We keep advancing the token cursor until we hit
        .                           // the matching `CloseDelim` token.
   19,992 ( 0.00%)                  while !(depth == self.token_cursor.stack.len()
        .                               && matches!(self.token.kind, token::CloseDelim(_)))
        .                           {
        .                               // Advance one token at a time, so `TokenCursor::next()`
        .                               // can capture these tokens if necessary.
    9,606 ( 0.00%)                      self.bump();
        .                           }
        .                           // We are still inside the frame corresponding
        .                           // to the delimited stream we captured, so grab
        .                           // the tokens from this frame.
        .                           let frame = &self.token_cursor.frame;
    2,160 ( 0.00%)                  let stream = frame.tree_cursor.stream.clone();
    2,160 ( 0.00%)                  let span = frame.span;
    1,080 ( 0.00%)                  let delim = frame.delim;
        .                           // Consume close delimiter
    2,160 ( 0.00%)                  self.bump();
    5,400 ( 0.00%)                  TokenTree::Delimited(span, delim, stream)
        .                       }
        .                       token::CloseDelim(_) | token::Eof => unreachable!(),
        .                       _ => {
       62 ( 0.00%)                  self.bump();
      155 ( 0.00%)                  TokenTree::Token(self.prev_token.clone())
        .                       }
        .                   }
    7,777 ( 0.00%)      }
        .           
        .               /// Parses a stream of tokens into a list of `TokenTree`s, up to EOF.
        .               pub fn parse_all_token_trees(&mut self) -> PResult<'a, Vec<TokenTree>> {
        .                   let mut tts = Vec::new();
        .                   while self.token != token::Eof {
        .                       tts.push(self.parse_token_tree());
        .                   }
        .                   Ok(tts)
-- line 1234 ----------------------------------------
-- line 1244 ----------------------------------------
        .                   }
        .                   TokenStream::new(result)
        .               }
        .           
        .               /// Evaluates the closure with restrictions in place.
        .               ///
        .               /// Afters the closure is evaluated, restrictions are reset.
        .               fn with_res<T>(&mut self, res: Restrictions, f: impl FnOnce(&mut Self) -> T) -> T {
   11,338 ( 0.00%)          let old = self.restrictions;
   14,514 ( 0.00%)          self.restrictions = res;
        .                   let res = f(self);
   13,169 ( 0.00%)          self.restrictions = old;
        .                   res
        .               }
        .           
   33,472 ( 0.00%)      fn is_crate_vis(&self) -> bool {
   20,920 ( 0.00%)          self.token.is_keyword(kw::Crate) && self.look_ahead(1, |t| t != &token::ModSep)
   37,656 ( 0.00%)      }
        .           
        .               /// Parses `pub`, `pub(crate)` and `pub(in path)` plus shortcuts `crate` for `pub(crate)`,
        .               /// `pub(self)` for `pub(in self)` and `pub(super)` for `pub(in super)`.
        .               /// If the following element can't be a tuple (i.e., it's a function definition), then
        .               /// it's not a tuple struct field), and the contents within the parentheses aren't valid,
        .               /// so emit a proper diagnostic.
        .               // Public for rustfmt usage.
   23,870 ( 0.00%)      pub fn parse_visibility(&mut self, fbt: FollowedByType) -> PResult<'a, Visibility> {
    4,774 ( 0.00%)          maybe_whole!(self, NtVis, |x| x);
        .           
    2,387 ( 0.00%)          self.expected_tokens.push(TokenType::Keyword(kw::Crate));
    9,548 ( 0.00%)          if self.is_crate_vis() {
        .                       self.bump(); // `crate`
        .                       self.sess.gated_spans.gate(sym::crate_visibility_modifier, self.prev_token.span);
        .                       return Ok(Visibility {
        .                           span: self.prev_token.span,
        .                           kind: VisibilityKind::Crate(CrateSugar::JustCrate),
        .                           tokens: None,
        .                       });
        .                   }
        .           
        .                   if !self.eat_keyword(kw::Pub) {
        .                       // We need a span for our `Spanned<VisibilityKind>`, but there's inherently no
        .                       // keyword to grab a span from for inherited visibility; an empty span at the
        .                       // beginning of the current token would seem to be the "Schelling span".
    1,986 ( 0.00%)              return Ok(Visibility {
    5,958 ( 0.00%)                  span: self.token.span.shrink_to_lo(),
        .                           kind: VisibilityKind::Inherited,
        .                           tokens: None,
        .                       });
        .                   }
      401 ( 0.00%)          let lo = self.prev_token.span;
        .           
    2,005 ( 0.00%)          if self.check(&token::OpenDelim(token::Paren)) {
        .                       // We don't `self.bump()` the `(` yet because this might be a struct definition where
        .                       // `()` or a tuple might be allowed. For example, `struct Struct(pub (), pub (usize));`.
        .                       // Because of this, we only `bump` the `(` if we're assured it is appropriate to do so
        .                       // by the following tokens.
        .                       if self.is_keyword_ahead(1, &[kw::Crate]) && self.look_ahead(2, |t| t != &token::ModSep)
        .                       // account for `pub(crate::foo)`
        .                       {
        .                           // Parse `pub(crate)`.
-- line 1303 ----------------------------------------
-- line 1338 ----------------------------------------
        .                       } else if let FollowedByType::No = fbt {
        .                           // Provide this diagnostic if a type cannot follow;
        .                           // in particular, if this is not a tuple struct.
        .                           self.recover_incorrect_vis_restriction()?;
        .                           // Emit diagnostic, but continue with public visibility.
        .                       }
        .                   }
        .           
    1,203 ( 0.00%)          Ok(Visibility { span: lo, kind: VisibilityKind::Public, tokens: None })
   21,483 ( 0.00%)      }
        .           
        .               /// Recovery for e.g. `pub(something) fn ...` or `struct X { pub(something) y: Z }`
        .               fn recover_incorrect_vis_restriction(&mut self) -> PResult<'a, ()> {
        .                   self.bump(); // `(`
        .                   let path = self.parse_path(PathStyle::Mod)?;
        .                   self.expect(&token::CloseDelim(token::Paren))?; // `)`
        .           
        .                   let msg = "incorrect visibility restriction";
-- line 1355 ----------------------------------------
-- line 1370 ----------------------------------------
        .                       )
        .                       .emit();
        .           
        .                   Ok(())
        .               }
        .           
        .               /// Parses `extern string_literal?`.
        .               fn parse_extern(&mut self) -> Extern {
      688 ( 0.00%)          if self.eat_keyword(kw::Extern) { Extern::from_abi(self.parse_abi()) } else { Extern::None }
        .               }
        .           
        .               /// Parses a string literal as an ABI spec.
        .               fn parse_abi(&mut self) -> Option<StrLit> {
        .                   match self.parse_str_lit() {
        .                       Ok(str_lit) => Some(str_lit),
        .                       Err(Some(lit)) => match lit.kind {
        .                           ast::LitKind::Err(_) => None,
-- line 1386 ----------------------------------------
-- line 1395 ----------------------------------------
        .                                   .emit();
        .                               None
        .                           }
        .                       },
        .                       Err(None) => None,
        .                   }
        .               }
        .           
    1,360 ( 0.00%)      pub fn collect_tokens_no_attrs<R: AstLike>(
        .                   &mut self,
        .                   f: impl FnOnce(&mut Self) -> PResult<'a, R>,
        .               ) -> PResult<'a, R> {
        .                   // The only reason to call `collect_tokens_no_attrs` is if you want tokens, so use
        .                   // `ForceCollect::Yes`
        .                   self.collect_tokens_trailing_token(
        .                       AttrWrapper::empty(),
        .                       ForceCollect::Yes,
      136 ( 0.00%)              |this, _attrs| Ok((f(this)?, TrailingToken::None)),
        .                   )
    1,360 ( 0.00%)      }
        .           
        .               /// `::{` or `::*`
  151,760 ( 0.00%)      fn is_import_coupler(&mut self) -> bool {
   75,880 ( 0.00%)          self.check(&token::ModSep)
        .                       && self.look_ahead(1, |t| {
  120,037 ( 0.00%)                  *t == token::OpenDelim(token::Brace) || *t == token::BinOp(token::Star)
        .                       })
  105,390 ( 0.00%)      }
        .           
        .               pub fn clear_expected_tokens(&mut self) {
        .                   self.expected_tokens.clear();
        .               }
        .           }
        .           
        .           crate fn make_unclosed_delims_error(
        .               unmatched: UnmatchedBrace,
-- line 1430 ----------------------------------------
-- line 1450 ----------------------------------------
        .                   err.span_label(sp, "closing delimiter possibly meant for this");
        .               }
        .               if let Some(sp) = unmatched.unclosed_span {
        .                   err.span_label(sp, "unclosed delimiter");
        .               }
        .               Some(err)
        .           }
        .           
    7,896 ( 0.00%)  pub fn emit_unclosed_delims(unclosed_delims: &mut Vec<UnmatchedBrace>, sess: &ParseSess) {
    3,948 ( 0.00%)      *sess.reached_eof.borrow_mut() |=
        .                   unclosed_delims.iter().any(|unmatched_delim| unmatched_delim.found_delim.is_none());
    3,948 ( 0.00%)      for unmatched in unclosed_delims.drain(..) {
        .                   if let Some(mut e) = make_unclosed_delims_error(unmatched, sess) {
        .                       e.emit();
        .                   }
        .               }
    7,896 ( 0.00%)  }
        .           
        .           /// A helper struct used when building an `AttrAnnotatedTokenStream` from
        .           /// a `LazyTokenStream`. Both delimiter and non-delimited tokens
        .           /// are stored as `FlatToken::Token`. A vector of `FlatToken`s
        .           /// is then 'parsed' to build up an `AttrAnnotatedTokenStream` with nested
        .           /// `AttrAnnotatedTokenTree::Delimited` tokens
        .           #[derive(Debug, Clone)]
        .           pub enum FlatToken {
-- line 1474 ----------------------------------------

  539,686 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs
--------------------------------------------------------------------------------
Ir                  

-- line 70 ----------------------------------------
         .           
         .                   impl<'a, T> $name<'a, T> {
         .                       // Helper function for creating a slice from the iterator.
         .                       #[inline(always)]
         .                       fn make_slice(&self) -> &'a [T] {
         .                           // SAFETY: the iterator was created from a slice with pointer
         .                           // `self.ptr` and length `len!(self)`. This guarantees that all
         .                           // the prerequisites for `from_raw_parts` are fulfilled.
   173,468 ( 0.00%)                  unsafe { from_raw_parts(self.ptr.as_ptr(), len!(self)) }
         .                       }
         .           
         .                       // Helper function for moving the start of the iterator forwards by `offset` elements,
         .                       // returning the old start.
         .                       // Unsafe because the offset must not exceed `self.len()`.
         .                       #[inline(always)]
         .                       unsafe fn post_inc_start(&mut self, offset: isize) -> * $raw_mut T {
         .                           if mem::size_of::<T>() == 0 {
         .                               zst_shrink!(self, offset);
         .                               self.ptr.as_ptr()
         .                           } else {
   897,348 ( 0.02%)                      let old = self.ptr.as_ptr();
         .                               // SAFETY: the caller guarantees that `offset` doesn't exceed `self.len()`,
         .                               // so this new pointer is inside `self` and thus guaranteed to be non-null.
 1,875,394 ( 0.04%)                      self.ptr = unsafe { NonNull::new_unchecked(self.ptr.as_ptr().offset(offset)) };
   149,558 ( 0.00%)                      old
         .                           }
   299,116 ( 0.01%)              }
         .           
         .                       // Helper function for moving the end of the iterator backwards by `offset` elements,
         .                       // returning the new end.
         .                       // Unsafe because the offset must not exceed `self.len()`.
         .                       #[inline(always)]
         .                       unsafe fn pre_dec_end(&mut self, offset: isize) -> * $raw_mut T {
         .                           if mem::size_of::<T>() == 0 {
         .                               zst_shrink!(self, offset);
         .                               self.ptr.as_ptr()
         .                           } else {
         .                               // SAFETY: the caller guarantees that `offset` doesn't exceed `self.len()`,
         .                               // which is guaranteed to not overflow an `isize`. Also, the resulting pointer
         .                               // is in bounds of `slice`, which fulfills the other requirements for `offset`.
     3,081 ( 0.00%)                      self.end = unsafe { self.end.offset(-offset) };
       874 ( 0.00%)                      self.end
         .                           }
       874 ( 0.00%)              }
         .                   }
         .           
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   impl<T> ExactSizeIterator for $name<'_, T> {
         .                       #[inline(always)]
         .                       fn len(&self) -> usize {
   567,534 ( 0.01%)                  len!(self)
    28,778 ( 0.00%)              }
         .           
         .                       #[inline(always)]
         .                       fn is_empty(&self) -> bool {
         .                           is_empty!(self)
         .                       }
         .                   }
         .           
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   impl<'a, T> Iterator for $name<'a, T> {
         .                       type Item = $elem;
         .           
         .                       #[inline]
   500,403 ( 0.01%)              fn next(&mut self) -> Option<$elem> {
         .                           // could be implemented with slices, but this avoids bounds checks
         .           
         .                           // SAFETY: `assume` calls are safe since a slice's start pointer
         .                           // must be non-null, and slices over non-ZSTs must also have a
         .                           // non-null end pointer. The call to `next_unchecked!` is safe
         .                           // since we check if the iterator is empty first.
         .                           unsafe {
 1,085,266 ( 0.03%)                      assume(!self.ptr.as_ptr().is_null());
   834,005 ( 0.02%)                      if mem::size_of::<T>() != 0 {
   388,151 ( 0.01%)                          assume(!self.end.is_null());
         .                               }
66,441,639 ( 1.56%)                      if is_empty!(self) {
    17,243 ( 0.00%)                          None
         .                               } else {
   299,116 ( 0.01%)                          Some(next_unchecked!(self))
         .                               }
         .                           }
   500,403 ( 0.01%)              }
         .           
         .                       #[inline]
     1,535 ( 0.00%)              fn size_hint(&self) -> (usize, Option<usize>) {
 1,701,767 ( 0.04%)                  let exact = len!(self);
     2,763 ( 0.00%)                  (exact, Some(exact))
       614 ( 0.00%)              }
         .           
         .                       #[inline]
         .                       fn count(self) -> usize {
         .                           len!(self)
         .                       }
         .           
         .                       #[inline]
         .                       fn nth(&mut self, n: usize) -> Option<$elem> {
    32,442 ( 0.00%)                  if n >= len!(self) {
         .                               // This iterator is now empty.
         .                               if mem::size_of::<T>() == 0 {
         .                                   // We have to do it this way as `ptr` may never be 0, but `end`
         .                                   // could be (due to wrapping).
         .                                   self.end = self.ptr.as_ptr();
         .                               } else {
         .                                   // SAFETY: end can't be 0 if T isn't ZST because ptr isn't 0 and end >= ptr
         .                                   unsafe {
-- line 175 ----------------------------------------
-- line 203 ----------------------------------------
         .                       // faster to compile.
         .                       #[inline]
         .                       fn for_each<F>(mut self, mut f: F)
         .                       where
         .                           Self: Sized,
         .                           F: FnMut(Self::Item),
         .                       {
         .                           while let Some(x) = self.next() {
    12,969 ( 0.00%)                      f(x);
         .                           }
         .                       }
         .           
         .                       // We override the default implementation, which uses `try_fold`,
         .                       // because this simple implementation generates less LLVM IR and is
         .                       // faster to compile.
         .                       #[inline]
         .                       fn all<F>(&mut self, mut f: F) -> bool
         .                       where
         .                           Self: Sized,
         .                           F: FnMut(Self::Item) -> bool,
         .                       {
     3,315 ( 0.00%)                  while let Some(x) = self.next() {
    41,750 ( 0.00%)                      if !f(x) {
         .                                   return false;
         .                               }
         .                           }
         .                           true
         .                       }
         .           
         .                       // We override the default implementation, which uses `try_fold`,
         .                       // because this simple implementation generates less LLVM IR and is
         .                       // faster to compile.
         .                       #[inline]
         8 ( 0.00%)              fn any<F>(&mut self, mut f: F) -> bool
         .                       where
         .                           Self: Sized,
         .                           F: FnMut(Self::Item) -> bool,
         .                       {
   834,704 ( 0.02%)                  while let Some(x) = self.next() {
   999,331 ( 0.02%)                      if f(x) {
         .                                   return true;
         .                               }
         .                           }
         .                           false
         8 ( 0.00%)              }
         .           
         .                       // We override the default implementation, which uses `try_fold`,
         .                       // because this simple implementation generates less LLVM IR and is
         .                       // faster to compile.
         .                       #[inline]
        12 ( 0.00%)              fn find<P>(&mut self, mut predicate: P) -> Option<Self::Item>
         .                       where
         .                           Self: Sized,
         .                           P: FnMut(&Self::Item) -> bool,
         .                       {
    38,137 ( 0.00%)                  while let Some(x) = self.next() {
   103,547 ( 0.00%)                      if predicate(&x) {
         .                                   return Some(x);
         .                               }
         .                           }
         2 ( 0.00%)                  None
     2,299 ( 0.00%)              }
         .           
         .                       // We override the default implementation, which uses `try_fold`,
         .                       // because this simple implementation generates less LLVM IR and is
         .                       // faster to compile.
         .                       #[inline]
         .                       fn find_map<B, F>(&mut self, mut f: F) -> Option<B>
         .                       where
         .                           Self: Sized,
         .                           F: FnMut(Self::Item) -> Option<B>,
         .                       {
    37,977 ( 0.00%)                  while let Some(x) = self.next() {
   296,918 ( 0.01%)                      if let Some(y) = f(x) {
    35,411 ( 0.00%)                          return Some(y);
         .                               }
         .                           }
         .                           None
     9,565 ( 0.00%)              }
         .           
         .                       // We override the default implementation, which uses `try_fold`,
         .                       // because this simple implementation generates less LLVM IR and is
         .                       // faster to compile. Also, the `assume` avoids a bounds check.
         .                       #[inline]
         .                       #[rustc_inherit_overflow_checks]
        28 ( 0.00%)              fn position<P>(&mut self, mut predicate: P) -> Option<usize> where
         .                           Self: Sized,
         .                           P: FnMut(Self::Item) -> bool,
         .                       {
       175 ( 0.00%)                  let n = len!(self);
         7 ( 0.00%)                  let mut i = 0;
       430 ( 0.00%)                  while let Some(x) = self.next() {
   283,451 ( 0.01%)                      if predicate(x) {
         .                                   // SAFETY: we are guaranteed to be in bounds by the loop invariant:
         .                                   // when `i >= n`, `self.next()` returns `None` and the loop breaks.
         5 ( 0.00%)                          unsafe { assume(i < n) };
        15 ( 0.00%)                          return Some(i);
         .                               }
       192 ( 0.00%)                      i += 1;
         .                           }
         2 ( 0.00%)                  None
        33 ( 0.00%)              }
         .           
         .                       // We override the default implementation, which uses `try_fold`,
         .                       // because this simple implementation generates less LLVM IR and is
         .                       // faster to compile. Also, the `assume` avoids a bounds check.
         .                       #[inline]
         .                       fn rposition<P>(&mut self, mut predicate: P) -> Option<usize> where
         .                           P: FnMut(Self::Item) -> bool,
         .                           Self: Sized + ExactSizeIterator + DoubleEndedIterator
         .                       {
         .                           let n = len!(self);
         .                           let mut i = n;
    23,526 ( 0.00%)                  while let Some(x) = self.next_back() {
   272,989 ( 0.01%)                      i -= 1;
   226,851 ( 0.01%)                      if predicate(x) {
         .                                   // SAFETY: `i` must be lower than `n` since it starts at `n`
         .                                   // and is only decreasing.
         .                                   unsafe { assume(i < n) };
         .                                   return Some(i);
         .                               }
         .                           }
         .                           None
         .                       }
-- line 326 ----------------------------------------
-- line 332 ----------------------------------------
         .                           // the returned references is guaranteed to refer to an element
         .                           // of the slice and thus guaranteed to be valid.
         .                           //
         .                           // Also note that the caller also guarantees that we're never
         .                           // called with the same index again, and that no other methods
         .                           // that will access this subslice are called, so it is valid
         .                           // for the returned reference to be mutable in the case of
         .                           // `IterMut`
    84,289 ( 0.00%)                  unsafe { & $( $mut_ )? * self.ptr.as_ptr().add(idx) }
         .                       }
         .           
         .                       $($extra)*
         .                   }
         .           
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   impl<'a, T> DoubleEndedIterator for $name<'a, T> {
         .                       #[inline]
     1,695 ( 0.00%)              fn next_back(&mut self) -> Option<$elem> {
         .                           // could be implemented with slices, but this avoids bounds checks
         .           
         .                           // SAFETY: `assume` calls are safe since a slice's start pointer must be non-null,
         .                           // and slices over non-ZSTs must also have a non-null end pointer.
         .                           // The call to `next_back_unchecked!` is safe since we check if the iterator is
         .                           // empty first.
         .                           unsafe {
     2,260 ( 0.00%)                      assume(!self.ptr.as_ptr().is_null());
     2,825 ( 0.00%)                      if mem::size_of::<T>() != 0 {
     1,152 ( 0.00%)                          assume(!self.end.is_null());
         .                               }
 1,617,581 ( 0.04%)                      if is_empty!(self) {
       128 ( 0.00%)                          None
         .                               } else {
       874 ( 0.00%)                          Some(next_back_unchecked!(self))
         .                               }
         .                           }
     1,695 ( 0.00%)              }
         .           
         .                       #[inline]
         .                       fn nth_back(&mut self, n: usize) -> Option<$elem> {
         .                           if n >= len!(self) {
         .                               // This iterator is now empty.
         .                               self.end = self.ptr.as_ptr();
         .                               return None;
         .                           }
-- line 375 ----------------------------------------

13,381,142 ( 0.31%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/closure.rs
--------------------------------------------------------------------------------
Ir                 

-- line 10 ----------------------------------------
        .               type Env;
        .           }
        .           
        .           impl<'a, A, R> !Sync for Closure<'a, A, R> {}
        .           impl<'a, A, R> !Send for Closure<'a, A, R> {}
        .           
        .           impl<'a, A, R, F: FnMut(A) -> R> From<&'a mut F> for Closure<'a, A, R> {
        .               fn from(f: &'a mut F) -> Self {
1,767,441 ( 0.04%)          unsafe extern "C" fn call<A, R, F: FnMut(A) -> R>(env: &mut Env, arg: A) -> R {
        .                       (*(env as *mut _ as *mut F))(arg)
2,356,588 ( 0.06%)          }
        .                   Closure { call: call::<A, R, F>, env: unsafe { &mut *(f as *mut _ as *mut Env) } }
        .               }
        .           }
        .           
        .           impl<'a, A, R> Closure<'a, A, R> {
        .               pub fn call(&mut self, arg: A) -> R {
9,426,352 ( 0.22%)          unsafe { (self.call)(self.env, arg) }
        .               }
        .           }

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/map/entry.rs
--------------------------------------------------------------------------------
Ir                 

-- line 117 ----------------------------------------
        .               /// use std::collections::BTreeMap;
        .               ///
        .               /// let mut map: BTreeMap<&str, usize> = BTreeMap::new();
        .               /// map.entry("poneyland").or_insert(12);
        .               ///
        .               /// assert_eq!(map["poneyland"], 12);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
       14 ( 0.00%)      pub fn or_insert(self, default: V) -> &'a mut V {
        4 ( 0.00%)          match self {
        .                       Occupied(entry) => entry.into_mut(),
        6 ( 0.00%)              Vacant(entry) => entry.insert(default),
        .                   }
       18 ( 0.00%)      }
        .           
        .               /// Ensures a value is in the entry by inserting the result of the default function if empty,
        .               /// and returns a mutable reference to the value in the entry.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// use std::collections::BTreeMap;
-- line 138 ----------------------------------------
-- line 140 ----------------------------------------
        .               /// let mut map: BTreeMap<&str, String> = BTreeMap::new();
        .               /// let s = "hoho".to_string();
        .               ///
        .               /// map.entry("poneyland").or_insert_with(|| s);
        .               ///
        .               /// assert_eq!(map["poneyland"], "hoho".to_string());
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
  238,234 ( 0.01%)      pub fn or_insert_with<F: FnOnce() -> V>(self, default: F) -> &'a mut V {
  117,170 ( 0.00%)          match self {
        .                       Occupied(entry) => entry.into_mut(),
  813,131 ( 0.02%)              Vacant(entry) => entry.insert(default()),
        .                   }
  286,142 ( 0.01%)      }
        .           
        .               /// Ensures a value is in the entry by inserting, if empty, the result of the default function.
        .               /// This method allows for generating key-derived values for insertion by providing the default
        .               /// function a reference to the key that was moved during the `.entry(key)` method call.
        .               ///
        .               /// The reference to the moved key is provided so that cloning or copying the key is
        .               /// unnecessary, unlike with `.or_insert_with(|| ... )`.
        .               ///
-- line 161 ----------------------------------------
-- line 245 ----------------------------------------
        .               /// ```
        .               /// use std::collections::BTreeMap;
        .               ///
        .               /// let mut map: BTreeMap<&str, Option<usize>> = BTreeMap::new();
        .               /// map.entry("poneyland").or_default();
        .               ///
        .               /// assert_eq!(map["poneyland"], None);
        .               /// ```
    1,620 ( 0.00%)      pub fn or_default(self) -> &'a mut V {
    1,080 ( 0.00%)          match self {
        .                       Occupied(entry) => entry.into_mut(),
       58 ( 0.00%)              Vacant(entry) => entry.insert(Default::default()),
        .                   }
    2,700 ( 0.00%)      }
        .           }
        .           
        .           impl<'a, K: Ord, V> VacantEntry<'a, K, V> {
        .               /// Gets a reference to the key that would be used when inserting a value
        .               /// through the VacantEntry.
        .               ///
        .               /// # Examples
        .               ///
-- line 266 ----------------------------------------
-- line 306 ----------------------------------------
        .               /// let mut map: BTreeMap<&str, u32> = BTreeMap::new();
        .               ///
        .               /// if let Entry::Vacant(o) = map.entry("poneyland") {
        .               ///     o.insert(37);
        .               /// }
        .               /// assert_eq!(map["poneyland"], 37);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
1,347,534 ( 0.03%)      pub fn insert(self, value: V) -> &'a mut V {
3,567,269 ( 0.08%)          let out_ptr = match self.handle.insert_recursing(self.key, value) {
  258,966 ( 0.01%)              (Fit(_), val_ptr) => {
        .                           // SAFETY: We have consumed self.handle and the handle returned.
  228,003 ( 0.01%)                  let map = unsafe { self.dormant_map.awaken() };
1,001,758 ( 0.02%)                  map.length += 1;
        .                           val_ptr
        .                       }
   70,650 ( 0.00%)              (Split(ins), val_ptr) => {
        .                           drop(ins.left);
        .                           // SAFETY: We have consumed self.handle and the reference returned.
    8,515 ( 0.00%)                  let map = unsafe { self.dormant_map.awaken() };
        .                           let root = map.root.as_mut().unwrap();
   63,396 ( 0.00%)                  root.push_internal_level().push(ins.kv.0, ins.kv.1, ins.right);
   44,508 ( 0.00%)                  map.length += 1;
        .                           val_ptr
        .                       }
        .                   };
        .                   // Now that we have finished growing the tree using borrowed references,
        .                   // dereference the pointer to a part of it, that we picked up along the way.
        .                   unsafe { &mut *out_ptr }
1,374,634 ( 0.03%)      }
        .           }
        .           
        .           impl<'a, K: Ord, V> OccupiedEntry<'a, K, V> {
        .               /// Gets a reference to the key in the entry.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 343 ----------------------------------------
-- line 368 ----------------------------------------
        .               ///     // We delete the entry from the map.
        .               ///     o.remove_entry();
        .               /// }
        .               ///
        .               /// // If now try to get the value, it will panic:
        .               /// // println!("{}", map["poneyland"]);
        .               /// ```
        .               #[stable(feature = "map_entry_recover_keys2", since = "1.12.0")]
  978,393 ( 0.02%)      pub fn remove_entry(self) -> (K, V) {
  196,318 ( 0.00%)          self.remove_kv()
1,483,789 ( 0.03%)      }
        .           
        .               /// Gets a reference to the value in the entry.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// use std::collections::BTreeMap;
        .               /// use std::collections::btree_map::Entry;
-- line 386 ----------------------------------------
-- line 448 ----------------------------------------
        .               /// if let Entry::Occupied(o) = map.entry("poneyland") {
        .               ///     *o.into_mut() += 10;
        .               /// }
        .               /// assert_eq!(map["poneyland"], 22);
        .               /// ```
        .               #[must_use = "`self` will be dropped if the result is not used"]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn into_mut(self) -> &'a mut V {
    2,200 ( 0.00%)          self.handle.into_val_mut()
        .               }
        .           
        .               /// Sets the value of the entry with the `OccupiedEntry`'s key,
        .               /// and returns the entry's old value.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 464 ----------------------------------------
-- line 497 ----------------------------------------
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn remove(self) -> V {
        .                   self.remove_kv().1
        .               }
        .           
        .               // Body of `remove_entry`, probably separate because the name reflects the returned pair.
        .               pub(super) fn remove_kv(self) -> (K, V) {
  219,456 ( 0.01%)          let mut emptied_internal_root = false;
2,917,947 ( 0.07%)          let (old_kv, _) = self.handle.remove_kv_tracking(|| emptied_internal_root = true);
        .                   // SAFETY: we consumed the intermediate root borrow, `self.handle`.
        .                   let map = unsafe { self.dormant_map.awaken() };
  877,824 ( 0.02%)          map.length -= 1;
  438,912 ( 0.01%)          if emptied_internal_root {
        .                       let root = map.root.as_mut().unwrap();
        .                       root.pop_internal_level();
        .                   }
        .                   old_kv
        .               }
        .           }

  509,308 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/map/entry.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/obligation_forest/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 121 ----------------------------------------
        .           #[derive(Debug)]
        .           pub enum ProcessResult<O, E> {
        .               Unchanged,
        .               Changed(Vec<O>),
        .               Error(E),
        .           }
        .           
        .           #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
   68,843 ( 0.00%)  struct ObligationTreeId(usize);
        .           
        .           type ObligationTreeIdGenerator =
        .               std::iter::Map<std::ops::RangeFrom<usize>, fn(usize) -> ObligationTreeId>;
        .           
        .           pub struct ObligationForest<O: ForestObligation> {
        .               /// The list of obligations. In between calls to `process_obligations`,
        .               /// this list only contains nodes in the `Pending` or `Waiting` state.
        .               ///
-- line 137 ----------------------------------------
-- line 181 ----------------------------------------
        .               has_parent: bool,
        .           
        .               /// Identifier of the obligation tree to which this node belongs.
        .               obligation_tree_id: ObligationTreeId,
        .           }
        .           
        .           impl<O> Node<O> {
        .               fn new(parent: Option<usize>, obligation: O, obligation_tree_id: ObligationTreeId) -> Node<O> {
  790,208 ( 0.02%)          Node {
        .                       obligation,
        .                       state: Cell::new(NodeState::Pending),
   94,295 ( 0.00%)              dependents: if let Some(parent_index) = parent { vec![parent_index] } else { vec![] },
        .                       has_parent: parent.is_some(),
        .                       obligation_tree_id,
        .                   }
        .               }
        .           }
        .           
        .           /// The state of one node in some tree within the forest. This represents the
        .           /// current state of processing for the obligation (of type `O`) associated
-- line 200 ----------------------------------------
-- line 223 ----------------------------------------
        .           ///  |     compress()
        .           ///  v
        .           /// (Removed)
        .           /// ```
        .           /// The `Error` state can be introduced in several places, via `error_at()`.
        .           ///
        .           /// Outside of `ObligationForest` methods, nodes should be either `Pending` or
        .           /// `Waiting`.
  700,759 ( 0.02%)  #[derive(Debug, Copy, Clone, PartialEq, Eq)]
        .           enum NodeState {
        .               /// This obligation has not yet been selected successfully. Cannot have
        .               /// subobligations.
        .               Pending,
        .           
        .               /// This obligation was selected successfully, but may or may not have
        .               /// subobligations.
        .               Success,
-- line 239 ----------------------------------------
-- line 279 ----------------------------------------
        .               pub stalled: bool,
        .           }
        .           
        .           impl<O, E> OutcomeTrait for Outcome<O, E> {
        .               type Error = Error<O, E>;
        .               type Obligation = O;
        .           
        .               fn new() -> Self {
  135,194 ( 0.00%)          Self { stalled: true, errors: vec![] }
        .               }
        .           
        .               fn mark_not_stalled(&mut self) {
   48,976 ( 0.00%)          self.stalled = false;
        .               }
        .           
        .               fn is_stalled(&self) -> bool {
   25,477 ( 0.00%)          self.stalled
        .               }
        .           
        .               fn record_completed(&mut self, _outcome: &Self::Obligation) {
        .                   // do nothing
        .               }
        .           
        .               fn record_error(&mut self, error: Self::Error) {
       80 ( 0.00%)          self.errors.push(error)
        .               }
        .           }
        .           
        .           #[derive(Debug, PartialEq, Eq)]
        .           pub struct Error<O, E> {
        .               pub error: E,
        .               pub backtrace: Vec<O>,
        .           }
        .           
        .           impl<O: ForestObligation> ObligationForest<O> {
   16,850 ( 0.00%)      pub fn new() -> ObligationForest<O> {
  202,200 ( 0.00%)          ObligationForest {
        .                       nodes: vec![],
        .                       done_cache: Default::default(),
        .                       active_cache: Default::default(),
        .                       reused_node_vec: vec![],
        .                       obligation_tree_id_generator: (0..).map(ObligationTreeId),
        .                       error_cache: Default::default(),
        .                   }
   16,850 ( 0.00%)      }
        .           
        .               /// Returns the total number of nodes in the forest that have not
        .               /// yet been fully resolved.
        .               pub fn len(&self) -> usize {
        .                   self.nodes.len()
        .               }
        .           
        .               /// Registers an obligation.
        .               pub fn register_obligation(&mut self, obligation: O) {
        .                   // Ignore errors here - there is no guarantee of success.
  549,250 ( 0.01%)          let _ = self.register_obligation_at(obligation, None);
        .               }
        .           
        .               // Returns Err(()) if we already know this obligation failed.
  728,431 ( 0.02%)      fn register_obligation_at(&mut self, obligation: O, parent: Option<usize>) -> Result<(), ()> {
  132,442 ( 0.00%)          let cache_key = obligation.as_cache_key();
  132,442 ( 0.00%)          if self.done_cache.contains(&cache_key) {
        .                       debug!("register_obligation_at: ignoring already done obligation: {:?}", obligation);
        .                       return Ok(());
        .                   }
        .           
  343,584 ( 0.01%)          match self.active_cache.entry(cache_key) {
        .                       Entry::Occupied(o) => {
   15,752 ( 0.00%)                  let node = &mut self.nodes[*o.get()];
   15,752 ( 0.00%)                  if let Some(parent_index) = parent {
        .                               // If the node is already in `active_cache`, it has already
        .                               // had its chance to be marked with a parent. So if it's
        .                               // not already present, just dump `parent` into the
        .                               // dependents as a non-parent.
   17,250 ( 0.00%)                      if !node.dependents.contains(&parent_index) {
        .                                   node.dependents.push(parent_index);
        .                               }
        .                           }
   23,628 ( 0.00%)                  if let NodeState::Error = node.state.get() { Err(()) } else { Ok(()) }
        .                       }
  148,164 ( 0.00%)              Entry::Vacant(v) => {
  296,328 ( 0.01%)                  let obligation_tree_id = match parent {
   29,938 ( 0.00%)                      Some(parent_index) => self.nodes[parent_index].obligation_tree_id,
        .                               None => self.obligation_tree_id_generator.next().unwrap(),
        .                           };
        .           
        .                           let already_failed = parent.is_some()
        .                               && self
        .                                   .error_cache
        .                                   .get(&obligation_tree_id)
        .                                   .map_or(false, |errors| errors.contains(v.key()));
        .           
        .                           if already_failed {
        .                               Err(())
        .                           } else {
   49,388 ( 0.00%)                      let new_index = self.nodes.len();
        .                               v.insert(new_index);
        .                               self.nodes.push(Node::new(parent, obligation, obligation_tree_id));
        .                               Ok(())
        .                           }
        .                       }
        .                   }
  595,989 ( 0.01%)      }
        .           
        .               /// Converts all remaining obligations to the given error.
  221,599 ( 0.01%)      pub fn to_errors<E: Clone>(&mut self, error: E) -> Vec<Error<O, E>> {
        .                   let errors = self
        .                       .nodes
        .                       .iter()
        .                       .enumerate()
        .                       .filter(|(_index, node)| node.state.get() == NodeState::Pending)
        .                       .map(|(index, _node)| Error { error: error.clone(), backtrace: self.error_at(index) })
        .                       .collect();
        .           
   63,314 ( 0.00%)          self.compress(|_| assert!(false));
        .                   errors
  189,942 ( 0.00%)      }
        .           
        .               /// Returns the set of obligations that are in a pending state.
        .               pub fn map_pending_obligations<P, F>(&self, f: F) -> Vec<P>
        .               where
        .                   F: Fn(&O) -> P,
        .               {
       90 ( 0.00%)          self.nodes
        .                       .iter()
        .                       .filter(|node| node.state.get() == NodeState::Pending)
        .                       .map(|node| f(&node.obligation))
        .                       .collect()
        .               }
        .           
       70 ( 0.00%)      fn insert_into_error_cache(&mut self, index: usize) {
        .                   let node = &self.nodes[index];
       10 ( 0.00%)          self.error_cache
       30 ( 0.00%)              .entry(node.obligation_tree_id)
        .                       .or_default()
        .                       .insert(node.obligation.as_cache_key());
       80 ( 0.00%)      }
        .           
        .               /// Performs a pass through the obligation list. This must
        .               /// be called in a loop until `outcome.stalled` is false.
        .               ///
        .               /// This _cannot_ be unrolled (presently, at least).
        .               #[inline(never)]
  608,373 ( 0.01%)      pub fn process_obligations<P, OUT>(&mut self, processor: &mut P) -> OUT
        .               where
        .                   P: ObligationProcessor<Obligation = O>,
        .                   OUT: OutcomeTrait<Obligation = O, Error = Error<O, P::Error>>,
        .               {
        .                   let mut outcome = OUT::new();
        .           
        .                   // Note that the loop body can append new nodes, and those new nodes
        .                   // will then be processed by subsequent iterations of the loop.
        .                   //
        .                   // We can't use an iterator for the loop because `self.nodes` is
        .                   // appended to and the borrow checker would complain. We also can't use
        .                   // `for index in 0..self.nodes.len() { ... }` because the range would
        .                   // be computed with the initial length, and we would miss the appended
        .                   // nodes. Therefore we use a `while` loop.
        .                   let mut index = 0;
  317,082 ( 0.01%)          while let Some(node) = self.nodes.get_mut(index) {
        .                       // `processor.process_obligation` can modify the predicate within
        .                       // `node.obligation`, and that predicate is the key used for
        .                       // `self.active_cache`. This means that `self.active_cache` can get
        .                       // out of sync with `nodes`. It's not very common, but it does
        .                       // happen, and code in `compress` has to allow for it.
  498,970 ( 0.01%)              if node.state.get() != NodeState::Pending {
   65,983 ( 0.00%)                  index += 1;
        .                           continue;
        .                       }
        .           
  279,086 ( 0.01%)              match processor.process_obligation(&mut node.obligation) {
        .                           ProcessResult::Unchanged => {
        .                               // No change in state.
        .                           }
  195,884 ( 0.00%)                  ProcessResult::Changed(children) => {
        .                               // We are not (yet) stalled.
        .                               outcome.mark_not_stalled();
        .                               node.state.set(NodeState::Success);
        .           
  243,826 ( 0.01%)                      for child in children {
  407,507 ( 0.01%)                          let st = self.register_obligation_at(child, Some(index));
   47,942 ( 0.00%)                          if let Err(()) = st {
        .                                       // Error already reported - propagate it
        .                                       // to our node.
        .                                       self.error_at(index);
        .                                   }
        .                               }
        .                           }
        .                           ProcessResult::Error(err) => {
        .                               outcome.mark_not_stalled();
      165 ( 0.00%)                      outcome.record_error(Error { error: err, backtrace: self.error_at(index) });
        .                           }
        .                       }
  367,004 ( 0.01%)              index += 1;
        .                   }
        .           
        .                   // There's no need to perform marking, cycle processing and compression when nothing
        .                   // changed.
   25,477 ( 0.00%)          if !outcome.is_stalled() {
        .                       self.mark_successes();
        .                       self.process_cycles(processor);
   26,708 ( 0.00%)              self.compress(|obl| outcome.record_completed(obl));
        .                   }
        .           
        .                   outcome
  608,373 ( 0.01%)      }
        .           
        .               /// Returns a vector of obligations for `p` and all of its
        .               /// ancestors, putting them into the error state in the process.
       35 ( 0.00%)      fn error_at(&self, mut index: usize) -> Vec<O> {
        .                   let mut error_stack: Vec<usize> = vec![];
        .                   let mut trace = vec![];
        .           
        .                   loop {
        .                       let node = &self.nodes[index];
       10 ( 0.00%)              node.state.set(NodeState::Error);
        .                       trace.push(node.obligation.clone());
       20 ( 0.00%)              if node.has_parent {
        .                           // The first dependent is the parent, which is treated
        .                           // specially.
        .                           error_stack.extend(node.dependents.iter().skip(1));
        5 ( 0.00%)                  index = node.dependents[0];
        .                       } else {
        .                           // No parent; treat all dependents non-specially.
        .                           error_stack.extend(node.dependents.iter());
        .                           break;
        .                       }
        .                   }
        .           
        .                   while let Some(index) = error_stack.pop() {
-- line 508 ----------------------------------------
-- line 509 ----------------------------------------
        .                       let node = &self.nodes[index];
        .                       if node.state.get() != NodeState::Error {
        .                           node.state.set(NodeState::Error);
        .                           error_stack.extend(node.dependents.iter());
        .                       }
        .                   }
        .           
        .                   trace
       40 ( 0.00%)      }
        .           
        .               /// Mark all `Waiting` nodes as `Success`, except those that depend on a
        .               /// pending node.
        .               fn mark_successes(&self) {
        .                   // Convert all `Waiting` nodes to `Success`.
        .                   for node in &self.nodes {
  284,446 ( 0.01%)              if node.state.get() == NodeState::Waiting {
        .                           node.state.set(NodeState::Success);
        .                       }
        .                   }
        .           
        .                   // Convert `Success` nodes that depend on a pending node back to
        .                   // `Waiting`.
        .                   for node in &self.nodes {
  115,328 ( 0.00%)              if node.state.get() == NodeState::Pending {
        .                           // This call site is hot.
        .                           self.inlined_mark_dependents_as_waiting(node);
        .                       }
        .                   }
        .               }
        .           
        .               // This always-inlined function is for the hot call site.
        .               #[inline(always)]
        .               fn inlined_mark_dependents_as_waiting(&self, node: &Node<O>) {
   24,764 ( 0.00%)          for &index in node.dependents.iter() {
        .                       let node = &self.nodes[index];
   24,764 ( 0.00%)              let state = node.state.get();
   24,764 ( 0.00%)              if state == NodeState::Success {
        .                           // This call site is cold.
   67,353 ( 0.00%)                  self.uninlined_mark_dependents_as_waiting(node);
        .                       } else {
        .                           debug_assert!(state == NodeState::Waiting || state == NodeState::Error)
        .                       }
        .                   }
        .               }
        .           
        .               // This never-inlined function is for the cold call site.
        .               #[inline(never)]
  157,157 ( 0.00%)      fn uninlined_mark_dependents_as_waiting(&self, node: &Node<O>) {
        .                   // Mark node Waiting in the cold uninlined code instead of the hot inlined
        .                   node.state.set(NodeState::Waiting);
        .                   self.inlined_mark_dependents_as_waiting(node)
  179,608 ( 0.00%)      }
        .           
        .               /// Report cycles between all `Success` nodes, and convert all `Success`
        .               /// nodes to `Done`. This must be called after `mark_successes`.
        .               fn process_cycles<P>(&mut self, processor: &mut P)
        .               where
        .                   P: ObligationProcessor<Obligation = O>,
        .               {
   13,354 ( 0.00%)          let mut stack = std::mem::take(&mut self.reused_node_vec);
        .                   for (index, node) in self.nodes.iter().enumerate() {
        .                       // For some benchmarks this state test is extremely hot. It's a win
        .                       // to handle the no-op cases immediately to avoid the cost of the
        .                       // function call.
  115,328 ( 0.00%)              if node.state.get() == NodeState::Success {
  235,075 ( 0.01%)                  self.find_cycles_from_node(&mut stack, processor, index);
        .                       }
        .                   }
        .           
        .                   debug_assert!(stack.is_empty());
  106,832 ( 0.00%)          self.reused_node_vec = stack;
        .               }
        .           
  603,441 ( 0.01%)      fn find_cycles_from_node<P>(&self, stack: &mut Vec<usize>, processor: &mut P, index: usize)
        .               where
        .                   P: ObligationProcessor<Obligation = O>,
        .               {
        .                   let node = &self.nodes[index];
  134,098 ( 0.00%)          if node.state.get() == NodeState::Success {
    3,902 ( 0.00%)              match stack.iter().rposition(|&n| n == index) {
        .                           None => {
        .                               stack.push(index);
   20,034 ( 0.00%)                      for &dep_index in node.dependents.iter() {
   80,136 ( 0.00%)                          self.find_cycles_from_node(stack, processor, dep_index);
        .                               }
        .                               stack.pop();
        .                               node.state.set(NodeState::Done);
        .                           }
        .                           Some(rpos) => {
        .                               // Cycle detected.
        .                               processor.process_backedge(
        .                                   stack[rpos..].iter().map(|&i| &self.nodes[i].obligation),
        .                                   PhantomData,
        .                               );
        .                           }
        .                       }
        .                   }
  536,392 ( 0.01%)      }
        .           
        .               /// Compresses the vector, removing all popped nodes. This adjusts the
        .               /// indices and hence invalidates any outstanding indices. `process_cycles`
        .               /// must be run beforehand to remove any cycles on `Success` nodes.
        .               #[inline(never)]
  328,431 ( 0.01%)      fn compress(&mut self, mut outcome_cb: impl FnMut(&O)) {
   45,011 ( 0.00%)          let orig_nodes_len = self.nodes.len();
        .                   let mut node_rewrites: Vec<_> = std::mem::take(&mut self.reused_node_vec);
        .                   debug_assert!(node_rewrites.is_empty());
        .                   node_rewrites.extend(0..orig_nodes_len);
        .                   let mut dead_nodes = 0;
        .           
        .                   // Move removable nodes to the end, preserving the order of the
        .                   // remaining nodes.
        .                   //
        .                   // LOOP INVARIANT:
        .                   //     self.nodes[0..index - dead_nodes] are the first remaining nodes
        .                   //     self.nodes[index - dead_nodes..index] are all dead
        .                   //     self.nodes[index..] are unchanged
        .                   for index in 0..orig_nodes_len {
        .                       let node = &self.nodes[index];
  630,056 ( 0.01%)              match node.state.get() {
        .                           NodeState::Pending | NodeState::Waiting => {
  132,704 ( 0.00%)                      if dead_nodes > 0 {
   56,931 ( 0.00%)                          self.nodes.swap(index, index - dead_nodes);
   94,885 ( 0.00%)                          node_rewrites[index] -= dead_nodes;
        .                               }
        .                           }
        .                           NodeState::Done => {
        .                               // This lookup can fail because the contents of
        .                               // `self.active_cache` are not guaranteed to match those of
        .                               // `self.nodes`. See the comment in `process_obligation`
        .                               // for more details.
  180,991 ( 0.00%)                      if let Some((predicate, _)) =
  146,898 ( 0.00%)                          self.active_cache.remove_entry(&node.obligation.as_cache_key())
        .                               {
        .                                   self.done_cache.insert(predicate);
        .                               } else {
        .                                   self.done_cache.insert(node.obligation.as_cache_key().clone());
        .                               }
        .                               // Extract the success stories.
        .                               outcome_cb(&node.obligation);
   97,932 ( 0.00%)                      node_rewrites[index] = orig_nodes_len;
   97,932 ( 0.00%)                      dead_nodes += 1;
        .                           }
        .                           NodeState::Error => {
        .                               // We *intentionally* remove the node from the cache at this point. Otherwise
        .                               // tests must come up with a different type on every type error they
        .                               // check against.
       30 ( 0.00%)                      self.active_cache.remove(&node.obligation.as_cache_key());
       20 ( 0.00%)                      self.insert_into_error_cache(index);
       20 ( 0.00%)                      node_rewrites[index] = orig_nodes_len;
       20 ( 0.00%)                      dead_nodes += 1;
        .                           }
        .                           NodeState::Success => unreachable!(),
        .                       }
        .                   }
        .           
        .                   if dead_nodes > 0 {
        .                       // Remove the dead nodes and rewrite indices.
   25,982 ( 0.00%)              self.nodes.truncate(orig_nodes_len - dead_nodes);
   12,991 ( 0.00%)              self.apply_rewrites(&node_rewrites);
        .                   }
        .           
        .                   node_rewrites.truncate(0);
  180,044 ( 0.00%)          self.reused_node_vec = node_rewrites;
  360,088 ( 0.01%)      }
        .           
        .               #[inline(never)]
  116,919 ( 0.00%)      fn apply_rewrites(&mut self, node_rewrites: &[usize]) {
        .                   let orig_nodes_len = node_rewrites.len();
        .           
        .                   for node in &mut self.nodes {
        .                       let mut i = 0;
   82,014 ( 0.00%)              while let Some(dependent) = node.dependents.get_mut(i) {
   86,924 ( 0.00%)                  let new_index = node_rewrites[*dependent];
   43,462 ( 0.00%)                  if new_index >= orig_nodes_len {
        .                               node.dependents.swap_remove(i);
        .                               if i == 0 && node.has_parent {
        .                                   // We just removed the parent.
        .                                   node.has_parent = false;
        .                               }
        .                           } else {
   21,731 ( 0.00%)                      *dependent = new_index;
   43,462 ( 0.00%)                      i += 1;
        .                           }
        .                       }
        .                   }
        .           
        .                   // This updating of `self.active_cache` is necessary because the
        .                   // removal of nodes within `compress` can fail. See above.
        .                   self.active_cache.retain(|_predicate, index| {
  300,624 ( 0.01%)              let new_index = node_rewrites[*index];
  150,312 ( 0.00%)              if new_index >= orig_nodes_len {
        .                           false
        .                       } else {
   60,283 ( 0.00%)                  *index = new_index;
        .                           true
        .                       }
        .                   });
  103,928 ( 0.00%)      }
        .           }

1,411,473 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/obligation_forest/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/proc-macro2-1.0.36/src/wrapper.rs
--------------------------------------------------------------------------------
Ir                 

-- line 3 ----------------------------------------
        .           use std::fmt::{self, Debug, Display};
        .           use std::iter::FromIterator;
        .           use std::ops::RangeBounds;
        .           use std::panic;
        .           #[cfg(super_unstable)]
        .           use std::path::PathBuf;
        .           use std::str::FromStr;
        .           
  131,964 ( 0.00%)  #[derive(Clone)]
        .           pub(crate) enum TokenStream {
   37,704 ( 0.00%)      Compiler(DeferredTokenStream),
        .               Fallback(fallback::TokenStream),
        .           }
        .           
        .           // Work around https://github.com/rust-lang/rust/issues/65080.
        .           // In `impl Extend<TokenTree> for TokenStream` which is used heavily by quote,
        .           // we hold on to the appended tokens and do proc_macro::TokenStream::extend as
        .           // late as possible to batch together consecutive uses of the Extend impl.
   87,976 ( 0.00%)  #[derive(Clone)]
        .           pub(crate) struct DeferredTokenStream {
   50,272 ( 0.00%)      stream: proc_macro::TokenStream,
   31,420 ( 0.00%)      extra: Vec<proc_macro::TokenTree>,
        .           }
        .           
        .           pub(crate) enum LexError {
        .               Compiler(proc_macro::LexError),
        .               Fallback(fallback::LexError),
        .           }
        .           
        .           impl LexError {
-- line 32 ----------------------------------------
-- line 37 ----------------------------------------
        .               }
        .           }
        .           
        .           fn mismatch() -> ! {
        .               panic!("stable/nightly mismatch")
        .           }
        .           
        .           impl DeferredTokenStream {
   97,332 ( 0.00%)      fn new(stream: proc_macro::TokenStream) -> Self {
  129,776 ( 0.00%)          DeferredTokenStream {
   32,444 ( 0.00%)              stream,
   64,888 ( 0.00%)              extra: Vec::new(),
        .                   }
   32,444 ( 0.00%)      }
        .           
        .               fn is_empty(&self) -> bool {
        .                   self.stream.is_empty() && self.extra.is_empty()
        .               }
        .           
   63,837 ( 0.00%)      fn evaluate_now(&mut self) {
        .                   // If-check provides a fast short circuit for the common case of `extra`
        .                   // being empty, which saves a round trip over the proc macro bridge.
        .                   // Improves macro expansion time in winrt by 6% in debug mode.
  106,395 ( 0.00%)          if !self.extra.is_empty() {
  113,136 ( 0.00%)              self.stream.extend(self.extra.drain(..));
        .                   }
   42,558 ( 0.00%)      }
        .           
   30,974 ( 0.00%)      fn into_token_stream(mut self) -> proc_macro::TokenStream {
   46,461 ( 0.00%)          self.evaluate_now();
   30,974 ( 0.00%)          self.stream
   77,435 ( 0.00%)      }
        .           }
        .           
        .           impl TokenStream {
   37,194 ( 0.00%)      pub fn new() -> Self {
   49,592 ( 0.00%)          if inside_proc_macro() {
  198,368 ( 0.00%)              TokenStream::Compiler(DeferredTokenStream::new(proc_macro::TokenStream::new()))
        .                   } else {
        .                       TokenStream::Fallback(fallback::TokenStream::new())
        .                   }
   24,796 ( 0.00%)      }
        .           
        .               pub fn is_empty(&self) -> bool {
        .                   match self {
        .                       TokenStream::Compiler(tts) => tts.is_empty(),
        .                       TokenStream::Fallback(tts) => tts.is_empty(),
        .                   }
        .               }
        .           
   11,584 ( 0.00%)      fn unwrap_nightly(self) -> proc_macro::TokenStream {
   17,376 ( 0.00%)          match self {
   92,672 ( 0.00%)              TokenStream::Compiler(s) => s.into_token_stream(),
        .                       TokenStream::Fallback(_) => mismatch(),
        .                   }
   28,960 ( 0.00%)      }
        .           
        .               fn unwrap_stable(self) -> fallback::TokenStream {
        .                   match self {
        .                       TokenStream::Compiler(_) => mismatch(),
        .                       TokenStream::Fallback(s) => s,
        .                   }
        .               }
        .           }
        .           
        .           impl FromStr for TokenStream {
        .               type Err = LexError;
        .           
    2,527 ( 0.00%)      fn from_str(src: &str) -> Result<TokenStream, LexError> {
    1,805 ( 0.00%)          if inside_proc_macro() {
    6,859 ( 0.00%)              Ok(TokenStream::Compiler(DeferredTokenStream::new(
    5,776 ( 0.00%)                  proc_macro_parse(src)?,
        .                       )))
        .                   } else {
        .                       Ok(TokenStream::Fallback(src.parse()?))
        .                   }
      722 ( 0.00%)      }
        .           }
        .           
        .           // Work around https://github.com/rust-lang/rust/issues/58736.
    1,083 ( 0.00%)  fn proc_macro_parse(src: &str) -> Result<proc_macro::TokenStream, LexError> {
    7,942 ( 0.00%)      let result = panic::catch_unwind(|| src.parse().map_err(LexError::Compiler));
    3,971 ( 0.00%)      result.unwrap_or_else(|_| Err(LexError::call_site()))
    1,083 ( 0.00%)  }
        .           
        .           impl Display for TokenStream {
        .               fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        .                   match self {
        .                       TokenStream::Compiler(tts) => Display::fmt(&tts.clone().into_token_stream(), f),
        .                       TokenStream::Fallback(tts) => Display::fmt(tts, f),
        .                   }
        .               }
        .           }
        .           
        .           impl From<proc_macro::TokenStream> for TokenStream {
      354 ( 0.00%)      fn from(inner: proc_macro::TokenStream) -> TokenStream {
      826 ( 0.00%)          TokenStream::Compiler(DeferredTokenStream::new(inner))
      118 ( 0.00%)      }
        .           }
        .           
        .           impl From<TokenStream> for proc_macro::TokenStream {
      118 ( 0.00%)      fn from(inner: TokenStream) -> proc_macro::TokenStream {
      177 ( 0.00%)          match inner {
    1,298 ( 0.00%)              TokenStream::Compiler(inner) => inner.into_token_stream(),
        .                       TokenStream::Fallback(inner) => inner.to_string().parse().unwrap(),
        .                   }
      177 ( 0.00%)      }
        .           }
        .           
        .           impl From<fallback::TokenStream> for TokenStream {
        .               fn from(inner: fallback::TokenStream) -> TokenStream {
        .                   TokenStream::Fallback(inner)
        .               }
        .           }
        .           
        .           // Assumes inside_proc_macro().
  150,578 ( 0.00%)  fn into_compiler_token(token: TokenTree) -> proc_macro::TokenTree {
  150,578 ( 0.00%)      match token {
  140,240 ( 0.00%)          TokenTree::Group(tt) => tt.inner.unwrap_nightly().into(),
  152,660 ( 0.00%)          TokenTree::Punct(tt) => {
  327,966 ( 0.01%)              let spacing = match tt.spacing() {
   11,323 ( 0.00%)                  Spacing::Joint => proc_macro::Spacing::Joint,
   53,684 ( 0.00%)                  Spacing::Alone => proc_macro::Spacing::Alone,
        .                       };
  381,650 ( 0.01%)              let mut punct = proc_macro::Punct::new(tt.as_char(), spacing);
  572,475 ( 0.01%)              punct.set_span(tt.span().inner.unwrap_nightly());
  305,320 ( 0.01%)              punct.into()
        .                   }
  557,320 ( 0.01%)          TokenTree::Ident(tt) => tt.inner.unwrap_nightly().into(),
   58,396 ( 0.00%)          TokenTree::Literal(tt) => tt.inner.unwrap_nightly().into(),
        .               }
  225,867 ( 0.01%)  }
        .           
        .           impl From<TokenTree> for TokenStream {
        .               fn from(token: TokenTree) -> TokenStream {
        .                   if inside_proc_macro() {
        .                       TokenStream::Compiler(DeferredTokenStream::new(into_compiler_token(token).into()))
        .                   } else {
        .                       TokenStream::Fallback(token.into())
        .                   }
        .               }
        .           }
        .           
        .           impl FromIterator<TokenTree> for TokenStream {
    5,860 ( 0.00%)      fn from_iter<I: IntoIterator<Item = TokenTree>>(trees: I) -> Self {
   10,255 ( 0.00%)          if inside_proc_macro() {
   20,510 ( 0.00%)              TokenStream::Compiler(DeferredTokenStream::new(
   33,695 ( 0.00%)                  trees.into_iter().map(into_compiler_token).collect(),
        .                       ))
        .                   } else {
        .                       TokenStream::Fallback(trees.into_iter().collect())
        .                   }
    2,930 ( 0.00%)      }
        .           }
        .           
        .           impl FromIterator<TokenStream> for TokenStream {
        .               fn from_iter<I: IntoIterator<Item = TokenStream>>(streams: I) -> Self {
        .                   let mut streams = streams.into_iter();
        .                   match streams.next() {
        .                       Some(TokenStream::Compiler(mut first)) => {
        .                           first.evaluate_now();
-- line 197 ----------------------------------------
-- line 209 ----------------------------------------
        .                           TokenStream::Fallback(first)
        .                       }
        .                       None => TokenStream::new(),
        .                   }
        .               }
        .           }
        .           
        .           impl Extend<TokenTree> for TokenStream {
  288,168 ( 0.01%)      fn extend<I: IntoIterator<Item = TokenTree>>(&mut self, stream: I) {
  216,126 ( 0.01%)          match self {
  216,126 ( 0.01%)              TokenStream::Compiler(tts) => {
        .                           // Here is the reason for DeferredTokenStream.
3,182,015 ( 0.07%)                  for token in stream {
1,306,278 ( 0.03%)                      tts.extra.push(into_compiler_token(token));
        .                           }
        .                       }
        .                       TokenStream::Fallback(tts) => tts.extend(stream),
        .                   }
  144,084 ( 0.00%)      }
        .           }
        .           
        .           impl Extend<TokenStream> for TokenStream {
   23,168 ( 0.00%)      fn extend<I: IntoIterator<Item = TokenStream>>(&mut self, streams: I) {
   28,960 ( 0.00%)          match self {
   17,376 ( 0.00%)              TokenStream::Compiler(tts) => {
   17,376 ( 0.00%)                  tts.evaluate_now();
   40,544 ( 0.00%)                  tts.stream
   98,464 ( 0.00%)                      .extend(streams.into_iter().map(TokenStream::unwrap_nightly));
        .                       }
        .                       TokenStream::Fallback(tts) => {
        .                           tts.extend(streams.into_iter().map(TokenStream::unwrap_stable));
        .                       }
        .                   }
   11,584 ( 0.00%)      }
        .           }
        .           
        .           impl Debug for TokenStream {
        .               fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        .                   match self {
        .                       TokenStream::Compiler(tts) => Debug::fmt(&tts.clone().into_token_stream(), f),
        .                       TokenStream::Fallback(tts) => Debug::fmt(tts, f),
        .                   }
-- line 250 ----------------------------------------
-- line 303 ----------------------------------------
        .               Compiler(proc_macro::token_stream::IntoIter),
        .               Fallback(fallback::TokenTreeIter),
        .           }
        .           
        .           impl IntoIterator for TokenStream {
        .               type Item = TokenTree;
        .               type IntoIter = TokenTreeIter;
        .           
   11,352 ( 0.00%)      fn into_iter(self) -> TokenTreeIter {
    8,514 ( 0.00%)          match self {
   22,704 ( 0.00%)              TokenStream::Compiler(tts) => {
   62,436 ( 0.00%)                  TokenTreeIter::Compiler(tts.into_token_stream().into_iter())
    2,838 ( 0.00%)              }
        .                       TokenStream::Fallback(tts) => TokenTreeIter::Fallback(tts.into_iter()),
        .                   }
    5,676 ( 0.00%)      }
        .           }
        .           
        .           impl Iterator for TokenTreeIter {
        .               type Item = TokenTree;
        .           
   92,350 ( 0.00%)      fn next(&mut self) -> Option<TokenTree> {
   55,410 ( 0.00%)          let token = match self {
  385,032 ( 0.01%)              TokenTreeIter::Compiler(iter) => iter.next()?,
        .                       TokenTreeIter::Fallback(iter) => return iter.next(),
        .                   };
   78,160 ( 0.00%)          Some(match token {
   29,145 ( 0.00%)              proc_macro::TokenTree::Group(tt) => crate::Group::_new(Group::Compiler(tt)).into(),
   14,060 ( 0.00%)              proc_macro::TokenTree::Punct(tt) => {
   58,274 ( 0.00%)                  let spacing = match tt.spacing() {
    1,017 ( 0.00%)                      proc_macro::Spacing::Joint => Spacing::Joint,
   12,026 ( 0.00%)                      proc_macro::Spacing::Alone => Spacing::Alone,
        .                           };
   91,390 ( 0.00%)                  let mut o = Punct::new(tt.as_char(), spacing);
  105,450 ( 0.00%)                  o.set_span(crate::Span::_new(Span::Compiler(tt.span())));
   77,330 ( 0.00%)                  o.into()
        .                       }
   63,810 ( 0.00%)              proc_macro::TokenTree::Ident(s) => crate::Ident::_new(Ident::Compiler(s)).into(),
   31,265 ( 0.00%)              proc_macro::TokenTree::Literal(l) => crate::Literal::_new(Literal::Compiler(l)).into(),
        .                   })
   55,410 ( 0.00%)      }
        .           
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   match self {
        .                       TokenTreeIter::Compiler(tts) => tts.size_hint(),
        .                       TokenTreeIter::Fallback(tts) => tts.size_hint(),
        .                   }
        .               }
        .           }
-- line 351 ----------------------------------------
-- line 403 ----------------------------------------
        .           
        .           #[derive(Copy, Clone)]
        .           pub(crate) enum Span {
        .               Compiler(proc_macro::Span),
        .               Fallback(fallback::Span),
        .           }
        .           
        .           impl Span {
   71,207 ( 0.00%)      pub fn call_site() -> Self {
  284,828 ( 0.01%)          if inside_proc_macro() {
  427,242 ( 0.01%)              Span::Compiler(proc_macro::Span::call_site())
        .                   } else {
        .                       Span::Fallback(fallback::Span::call_site())
        .                   }
  213,621 ( 0.01%)      }
        .           
        .               #[cfg(not(no_hygiene))]
        .               pub fn mixed_site() -> Self {
        .                   if inside_proc_macro() {
        .                       Span::Compiler(proc_macro::Span::mixed_site())
        .                   } else {
        .                       Span::Fallback(fallback::Span::mixed_site())
        .                   }
-- line 425 ----------------------------------------
-- line 525 ----------------------------------------
        .               pub fn eq(&self, other: &Span) -> bool {
        .                   match (self, other) {
        .                       (Span::Compiler(a), Span::Compiler(b)) => a.eq(b),
        .                       (Span::Fallback(a), Span::Fallback(b)) => a.eq(b),
        .                       _ => false,
        .                   }
        .               }
        .           
  152,660 ( 0.00%)      fn unwrap_nightly(self) -> proc_macro::Span {
  190,825 ( 0.00%)          match self {
   76,330 ( 0.00%)              Span::Compiler(s) => s,
        .                       Span::Fallback(_) => mismatch(),
        .                   }
  114,495 ( 0.00%)      }
        .           }
        .           
        .           impl From<proc_macro::Span> for crate::Span {
        .               fn from(proc_span: proc_macro::Span) -> crate::Span {
        .                   crate::Span::_new(Span::Compiler(proc_span))
        .               }
        .           }
        .           
-- line 546 ----------------------------------------
-- line 563 ----------------------------------------
        .               match span {
        .                   Span::Compiler(s) => {
        .                       debug.field("span", &s);
        .                   }
        .                   Span::Fallback(s) => fallback::debug_span_field_if_nontrivial(debug, s),
        .               }
        .           }
        .           
    3,210 ( 0.00%)  #[derive(Clone)]
        .           pub(crate) enum Group {
    1,712 ( 0.00%)      Compiler(proc_macro::Group),
        .               Fallback(fallback::Group),
        .           }
        .           
        .           impl Group {
   40,788 ( 0.00%)      pub fn new(delimiter: Delimiter, stream: TokenStream) -> Self {
   20,394 ( 0.00%)          match stream {
   27,192 ( 0.00%)              TokenStream::Compiler(tts) => {
   13,596 ( 0.00%)                  let delimiter = match delimiter {
    8,356 ( 0.00%)                      Delimiter::Parenthesis => proc_macro::Delimiter::Parenthesis,
      684 ( 0.00%)                      Delimiter::Bracket => proc_macro::Delimiter::Bracket,
    4,556 ( 0.00%)                      Delimiter::Brace => proc_macro::Delimiter::Brace,
        .                               Delimiter::None => proc_macro::Delimiter::None,
        .                           };
  163,152 ( 0.00%)                  Group::Compiler(proc_macro::Group::new(delimiter, tts.into_token_stream()))
    6,798 ( 0.00%)              }
        .                       TokenStream::Fallback(stream) => {
        .                           Group::Fallback(fallback::Group::new(delimiter, stream))
        .                       }
        .                   }
   13,596 ( 0.00%)      }
        .           
   13,359 ( 0.00%)      pub fn delimiter(&self) -> Delimiter {
   13,359 ( 0.00%)          match self {
   31,171 ( 0.00%)              Group::Compiler(g) => match g.delimiter() {
    2,084 ( 0.00%)                  proc_macro::Delimiter::Parenthesis => Delimiter::Parenthesis,
    5,974 ( 0.00%)                  proc_macro::Delimiter::Bracket => Delimiter::Bracket,
      848 ( 0.00%)                  proc_macro::Delimiter::Brace => Delimiter::Brace,
        .                           proc_macro::Delimiter::None => Delimiter::None,
        .                       },
        .                       Group::Fallback(g) => g.delimiter(),
        .                   }
   13,359 ( 0.00%)      }
        .           
    9,695 ( 0.00%)      pub fn stream(&self) -> TokenStream {
    5,817 ( 0.00%)          match self {
   38,780 ( 0.00%)              Group::Compiler(g) => TokenStream::Compiler(DeferredTokenStream::new(g.stream())),
        .                       Group::Fallback(g) => TokenStream::Fallback(g.stream()),
        .                   }
    3,878 ( 0.00%)      }
        .           
    5,943 ( 0.00%)      pub fn span(&self) -> Span {
    5,943 ( 0.00%)          match self {
   19,810 ( 0.00%)              Group::Compiler(g) => Span::Compiler(g.span()),
        .                       Group::Fallback(g) => Span::Fallback(g.span()),
        .                   }
    5,943 ( 0.00%)      }
        .           
        .               pub fn span_open(&self) -> Span {
        .                   match self {
        .                       #[cfg(not(no_group_open_close))]
        .                       Group::Compiler(g) => Span::Compiler(g.span_open()),
        .                       #[cfg(no_group_open_close)]
        .                       Group::Compiler(g) => Span::Compiler(g.span()),
        .                       Group::Fallback(g) => Span::Fallback(g.span_open()),
        .                   }
        .               }
        .           
    5,187 ( 0.00%)      pub fn span_close(&self) -> Span {
    5,187 ( 0.00%)          match self {
        .                       #[cfg(not(no_group_open_close))]
   17,290 ( 0.00%)              Group::Compiler(g) => Span::Compiler(g.span_close()),
        .                       #[cfg(no_group_open_close)]
        .                       Group::Compiler(g) => Span::Compiler(g.span()),
        .                       Group::Fallback(g) => Span::Fallback(g.span_close()),
        .                   }
    5,187 ( 0.00%)      }
        .           
        .               pub fn set_span(&mut self, span: Span) {
        .                   match (self, span) {
        .                       (Group::Compiler(g), Span::Compiler(s)) => g.set_span(s),
        .                       (Group::Fallback(g), Span::Fallback(s)) => g.set_span(s),
        .                       _ => mismatch(),
        .                   }
        .               }
        .           
   14,024 ( 0.00%)      fn unwrap_nightly(self) -> proc_macro::Group {
   21,036 ( 0.00%)          match self {
   28,048 ( 0.00%)              Group::Compiler(g) => g,
        .                       Group::Fallback(_) => mismatch(),
        .                   }
   42,072 ( 0.00%)      }
        .           }
        .           
        .           impl From<fallback::Group> for Group {
        .               fn from(g: fallback::Group) -> Self {
        .                   Group::Fallback(g)
        .               }
        .           }
        .           
-- line 662 ----------------------------------------
-- line 673 ----------------------------------------
        .               fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
        .                   match self {
        .                       Group::Compiler(group) => Debug::fmt(group, formatter),
        .                       Group::Fallback(group) => Debug::fmt(group, formatter),
        .                   }
        .               }
        .           }
        .           
  244,905 ( 0.01%)  #[derive(Clone)]
        .           pub(crate) enum Ident {
  130,616 ( 0.00%)      Compiler(proc_macro::Ident),
        .               Fallback(fallback::Ident),
        .           }
        .           
        .           impl Ident {
  254,090 ( 0.01%)      pub fn new(string: &str, span: Span) -> Self {
  127,045 ( 0.00%)          match span {
  355,726 ( 0.01%)              Span::Compiler(s) => Ident::Compiler(proc_macro::Ident::new(string, s)),
        .                       Span::Fallback(s) => Ident::Fallback(fallback::Ident::new(string, s)),
        .                   }
   50,818 ( 0.00%)      }
        .           
        .               pub fn new_raw(string: &str, span: Span) -> Self {
        .                   match span {
        .                       Span::Compiler(s) => {
        .                           let p: proc_macro::TokenStream = string.parse().unwrap();
        .                           let ident = match p.into_iter().next() {
        .                               Some(proc_macro::TokenTree::Ident(mut i)) => {
        .                                   i.set_span(s);
-- line 701 ----------------------------------------
-- line 704 ----------------------------------------
        .                               _ => panic!(),
        .                           };
        .                           Ident::Compiler(ident)
        .                       }
        .                       Span::Fallback(s) => Ident::Fallback(fallback::Ident::new_raw(string, s)),
        .                   }
        .               }
        .           
    6,255 ( 0.00%)      pub fn span(&self) -> Span {
    6,255 ( 0.00%)          match self {
   20,850 ( 0.00%)              Ident::Compiler(t) => Span::Compiler(t.span()),
        .                       Ident::Fallback(t) => Span::Fallback(t.span()),
        .                   }
    6,255 ( 0.00%)      }
        .           
        .               pub fn set_span(&mut self, span: Span) {
        .                   match (self, span) {
        .                       (Ident::Compiler(t), Span::Compiler(s)) => t.set_span(s),
        .                       (Ident::Fallback(t), Span::Fallback(s)) => t.set_span(s),
        .                       _ => mismatch(),
        .                   }
        .               }
        .           
   55,732 ( 0.00%)      fn unwrap_nightly(self) -> proc_macro::Ident {
   83,598 ( 0.00%)          match self {
  111,464 ( 0.00%)              Ident::Compiler(s) => s,
        .                       Ident::Fallback(_) => mismatch(),
        .                   }
  167,196 ( 0.00%)      }
        .           }
        .           
        .           impl PartialEq for Ident {
        .               fn eq(&self, other: &Ident) -> bool {
        .                   match (self, other) {
        .                       (Ident::Compiler(t), Ident::Compiler(o)) => t.to_string() == o.to_string(),
        .                       (Ident::Fallback(t), Ident::Fallback(o)) => t == o,
        .                       _ => mismatch(),
-- line 740 ----------------------------------------
-- line 741 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           impl<T> PartialEq<T> for Ident
        .           where
        .               T: ?Sized + AsRef<str>,
        .           {
   98,210 ( 0.00%)      fn eq(&self, other: &T) -> bool {
   56,120 ( 0.00%)          let other = other.as_ref();
   42,090 ( 0.00%)          match self {
  182,390 ( 0.00%)              Ident::Compiler(t) => t.to_string() == other,
        .                       Ident::Fallback(t) => t == other,
        .                   }
   70,150 ( 0.00%)      }
        .           }
        .           
        .           impl Display for Ident {
   15,740 ( 0.00%)      fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    9,444 ( 0.00%)          match self {
   18,888 ( 0.00%)              Ident::Compiler(t) => Display::fmt(t, f),
        .                       Ident::Fallback(t) => Display::fmt(t, f),
        .                   }
   15,740 ( 0.00%)      }
        .           }
        .           
        .           impl Debug for Ident {
        .               fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        .                   match self {
        .                       Ident::Compiler(t) => Debug::fmt(t, f),
        .                       Ident::Fallback(t) => Debug::fmt(t, f),
        .                   }
        .               }
        .           }
        .           
   35,610 ( 0.00%)  #[derive(Clone)]
        .           pub(crate) enum Literal {
   18,992 ( 0.00%)      Compiler(proc_macro::Literal),
        .               Fallback(fallback::Literal),
        .           }
        .           
        .           macro_rules! suffixed_numbers {
        .               ($($name:ident => $kind:ident,)*) => ($(
    3,230 ( 0.00%)          pub fn $name(n: $kind) -> Literal {
    2,584 ( 0.00%)              if inside_proc_macro() {
    4,522 ( 0.00%)                  Literal::Compiler(proc_macro::Literal::$name(n))
        .                       } else {
        .                           Literal::Fallback(fallback::Literal::$name(n))
        .                       }
    1,292 ( 0.00%)          }
        .               )*)
        .           }
        .           
        .           macro_rules! unsuffixed_integers {
        .               ($($name:ident => $kind:ident,)*) => ($(
        .                   pub fn $name(n: $kind) -> Literal {
        .                       if inside_proc_macro() {
        .                           Literal::Compiler(proc_macro::Literal::$name(n))
-- line 798 ----------------------------------------
-- line 856 ----------------------------------------
        .               pub fn f64_unsuffixed(f: f64) -> Literal {
        .                   if inside_proc_macro() {
        .                       Literal::Compiler(proc_macro::Literal::f64_unsuffixed(f))
        .                   } else {
        .                       Literal::Fallback(fallback::Literal::f64_unsuffixed(f))
        .                   }
        .               }
        .           
    1,512 ( 0.00%)      pub fn string(t: &str) -> Literal {
      864 ( 0.00%)          if inside_proc_macro() {
    1,512 ( 0.00%)              Literal::Compiler(proc_macro::Literal::string(t))
        .                   } else {
        .                       Literal::Fallback(fallback::Literal::string(t))
        .                   }
      432 ( 0.00%)      }
        .           
        .               pub fn character(t: char) -> Literal {
        .                   if inside_proc_macro() {
        .                       Literal::Compiler(proc_macro::Literal::character(t))
        .                   } else {
        .                       Literal::Fallback(fallback::Literal::character(t))
        .                   }
        .               }
        .           
       28 ( 0.00%)      pub fn byte_string(bytes: &[u8]) -> Literal {
       16 ( 0.00%)          if inside_proc_macro() {
       28 ( 0.00%)              Literal::Compiler(proc_macro::Literal::byte_string(bytes))
        .                   } else {
        .                       Literal::Fallback(fallback::Literal::byte_string(bytes))
        .                   }
        8 ( 0.00%)      }
        .           
        .               pub fn span(&self) -> Span {
        .                   match self {
        .                       Literal::Compiler(lit) => Span::Compiler(lit.span()),
        .                       Literal::Fallback(lit) => Span::Fallback(lit.span()),
        .                   }
        .               }
        .           
       20 ( 0.00%)      pub fn set_span(&mut self, span: Span) {
       64 ( 0.00%)          match (self, span) {
       40 ( 0.00%)              (Literal::Compiler(lit), Span::Compiler(s)) => lit.set_span(s),
        .                       (Literal::Fallback(lit), Span::Fallback(s)) => lit.set_span(s),
        .                       _ => mismatch(),
        .                   }
        8 ( 0.00%)      }
        .           
        .               pub fn subspan<R: RangeBounds<usize>>(&self, range: R) -> Option<Span> {
        .                   match self {
        .                       #[cfg(proc_macro_span)]
        .                       Literal::Compiler(lit) => lit.subspan(range).map(Span::Compiler),
        .                       #[cfg(not(proc_macro_span))]
        .                       Literal::Compiler(_lit) => None,
        .                       Literal::Fallback(lit) => lit.subspan(range).map(Span::Fallback),
        .                   }
        .               }
        .           
    4,492 ( 0.00%)      fn unwrap_nightly(self) -> proc_macro::Literal {
    6,738 ( 0.00%)          match self {
    8,984 ( 0.00%)              Literal::Compiler(s) => s,
        .                       Literal::Fallback(_) => mismatch(),
        .                   }
   13,476 ( 0.00%)      }
        .           }
        .           
        .           impl From<fallback::Literal> for Literal {
        .               fn from(s: fallback::Literal) -> Literal {
        .                   Literal::Fallback(s)
        .               }
        .           }
        .           
-- line 926 ----------------------------------------
-- line 951 ----------------------------------------
        .                           return Ok(literal);
        .                       }
        .                   }
        .                   Err(LexError::call_site())
        .               }
        .           }
        .           
        .           impl Display for Literal {
    6,340 ( 0.00%)      fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    3,804 ( 0.00%)          match self {
    7,608 ( 0.00%)              Literal::Compiler(t) => Display::fmt(t, f),
        .                       Literal::Fallback(t) => Display::fmt(t, f),
        .                   }
    6,340 ( 0.00%)      }
        .           }
        .           
        .           impl Debug for Literal {
        .               fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        .                   match self {
        .                       Literal::Compiler(t) => Debug::fmt(t, f),
        .                       Literal::Fallback(t) => Debug::fmt(t, f),
        .                   }
-- line 972 ----------------------------------------

1,629,378 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/proc-macro2-1.0.36/src/wrapper.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/result.rs
--------------------------------------------------------------------------------
Ir                 

-- line 491 ----------------------------------------
        .           
        .           use crate::iter::{self, FromIterator, FusedIterator, TrustedLen};
        .           use crate::ops::{self, ControlFlow, Deref, DerefMut};
        .           use crate::{convert, fmt, hint};
        .           
        .           /// `Result` is a type that represents either success ([`Ok`]) or failure ([`Err`]).
        .           ///
        .           /// See the [module documentation](self) for details.
      302 ( 0.00%)  #[derive(Copy, PartialEq, PartialOrd, Eq, Ord, Debug, Hash)]
        .           #[must_use = "this `Result` may be an `Err` variant, which should be handled"]
        .           #[rustc_diagnostic_item = "Result"]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           pub enum Result<T, E> {
        .               /// Contains the success value
        .               #[lang = "Ok"]
        .               #[stable(feature = "rust1", since = "1.0.0")]
       18 ( 0.00%)      Ok(#[stable(feature = "rust1", since = "1.0.0")] T),
        .           
        .               /// Contains the error value
        .               #[lang = "Err"]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               Err(#[stable(feature = "rust1", since = "1.0.0")] E),
        .           }
        .           
        .           /////////////////////////////////////////////////////////////////////////////
-- line 515 ----------------------------------------
-- line 533 ----------------------------------------
        .               ///
        .               /// let x: Result<i32, &str> = Err("Some error message");
        .               /// assert_eq!(x.is_ok(), false);
        .               /// ```
        .               #[must_use = "if you intended to assert that this is ok, consider `.unwrap()` instead"]
        .               #[rustc_const_stable(feature = "const_result", since = "1.48.0")]
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
    2,064 ( 0.00%)      pub const fn is_ok(&self) -> bool {
    7,401 ( 0.00%)          matches!(*self, Ok(_))
    5,160 ( 0.00%)      }
        .           
        .               /// Returns `true` if the result is [`Ok`] wrapping a value matching the predicate.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// #![feature(is_some_with)]
        .               ///
-- line 551 ----------------------------------------
-- line 577 ----------------------------------------
        .               ///
        .               /// let x: Result<i32, &str> = Err("Some error message");
        .               /// assert_eq!(x.is_err(), true);
        .               /// ```
        .               #[must_use = "if you intended to assert that this is err, consider `.unwrap_err()` instead"]
        .               #[rustc_const_stable(feature = "const_result", since = "1.48.0")]
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
      140 ( 0.00%)      pub const fn is_err(&self) -> bool {
      210 ( 0.00%)          !self.is_ok()
      280 ( 0.00%)      }
        .           
        .               /// Returns `true` if the result is [`Err`] wrapping a value matching the predicate.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// #![feature(is_some_with)]
        .               /// use std::io::{Error, ErrorKind};
-- line 595 ----------------------------------------
-- line 627 ----------------------------------------
        .               /// let x: Result<u32, &str> = Ok(2);
        .               /// assert_eq!(x.ok(), Some(2));
        .               ///
        .               /// let x: Result<u32, &str> = Err("Nothing here");
        .               /// assert_eq!(x.ok(), None);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
    5,684 ( 0.00%)      pub fn ok(self) -> Option<T> {
   33,622 ( 0.00%)          match self {
   45,643 ( 0.00%)              Ok(x) => Some(x),
       61 ( 0.00%)              Err(_) => None,
        .                   }
    6,123 ( 0.00%)      }
        .           
        .               /// Converts from `Result<T, E>` to [`Option<E>`].
        .               ///
        .               /// Converts `self` into an [`Option<E>`], consuming `self`,
        .               /// and discarding the success value, if any.
        .               ///
        .               /// # Examples
        .               ///
-- line 648 ----------------------------------------
-- line 657 ----------------------------------------
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn err(self) -> Option<E> {
        .                   match self {
        .                       Ok(_) => None,
        .                       Err(x) => Some(x),
        .                   }
        4 ( 0.00%)      }
        .           
        .               /////////////////////////////////////////////////////////////////////////
        .               // Adapter for working with references
        .               /////////////////////////////////////////////////////////////////////////
        .           
        .               /// Converts from `&Result<T, E>` to `Result<&T, &E>`.
        .               ///
        .               /// Produces a new `Result`, containing a reference
-- line 673 ----------------------------------------
-- line 683 ----------------------------------------
        .               ///
        .               /// let x: Result<u32, &str> = Err("Error");
        .               /// assert_eq!(x.as_ref(), Err(&"Error"));
        .               /// ```
        .               #[inline]
        .               #[rustc_const_stable(feature = "const_result", since = "1.48.0")]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub const fn as_ref(&self) -> Result<&T, &E> {
       62 ( 0.00%)          match *self {
        .                       Ok(ref x) => Ok(x),
        .                       Err(ref x) => Err(x),
        .                   }
        .               }
        .           
        .               /// Converts from `&mut Result<T, E>` to `Result<&mut T, &mut E>`.
        .               ///
        .               /// # Examples
-- line 699 ----------------------------------------
-- line 715 ----------------------------------------
        .               /// let mut x: Result<i32, i32> = Err(13);
        .               /// mutate(&mut x);
        .               /// assert_eq!(x.unwrap_err(), 0);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_result", issue = "82814")]
        .               pub const fn as_mut(&mut self) -> Result<&mut T, &mut E> {
      891 ( 0.00%)          match *self {
        .                       Ok(ref mut x) => Ok(x),
        .                       Err(ref mut x) => Err(x),
        .                   }
        .               }
        .           
        .               /////////////////////////////////////////////////////////////////////////
        .               // Transforming contained values
        .               /////////////////////////////////////////////////////////////////////////
-- line 731 ----------------------------------------
-- line 746 ----------------------------------------
        .               ///     match num.parse::<i32>().map(|i| i * 2) {
        .               ///         Ok(n) => println!("{}", n),
        .               ///         Err(..) => {}
        .               ///     }
        .               /// }
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
   15,200 ( 0.00%)      pub fn map<U, F: FnOnce(T) -> U>(self, op: F) -> Result<U, E> {
  460,656 ( 0.01%)          match self {
  656,789 ( 0.02%)              Ok(t) => Ok(op(t)),
   69,581 ( 0.00%)              Err(e) => Err(e),
        .                   }
   19,138 ( 0.00%)      }
        .           
        .               /// Returns the provided default (if [`Err`]), or
        .               /// applies a function to the contained value (if [`Ok`]),
        .               ///
        .               /// Arguments passed to `map_or` are eagerly evaluated; if you are passing
        .               /// the result of a function call, it is recommended to use [`map_or_else`],
        .               /// which is lazily evaluated.
        .               ///
-- line 767 ----------------------------------------
-- line 774 ----------------------------------------
        .               /// assert_eq!(x.map_or(42, |v| v.len()), 3);
        .               ///
        .               /// let x: Result<&str, _> = Err("bar");
        .               /// assert_eq!(x.map_or(42, |v| v.len()), 42);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "result_map_or", since = "1.41.0")]
        .               pub fn map_or<U, F: FnOnce(T) -> U>(self, default: U, f: F) -> U {
      180 ( 0.00%)          match self {
       16 ( 0.00%)              Ok(t) => f(t),
        .                       Err(_) => default,
        .                   }
        .               }
        .           
        .               /// Maps a `Result<T, E>` to `U` by applying fallback function `default` to
        .               /// a contained [`Err`] value, or function `f` to a contained [`Ok`] value.
        .               ///
        .               /// This function can be used to unpack a successful result
-- line 791 ----------------------------------------
-- line 831 ----------------------------------------
        .               /// let x: Result<u32, u32> = Ok(2);
        .               /// assert_eq!(x.map_err(stringify), Ok(2));
        .               ///
        .               /// let x: Result<u32, u32> = Err(13);
        .               /// assert_eq!(x.map_err(stringify), Err("error code: 13".to_string()));
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
  604,079 ( 0.01%)      pub fn map_err<F, O: FnOnce(E) -> F>(self, op: O) -> Result<T, F> {
2,864,571 ( 0.07%)          match self {
3,231,969 ( 0.08%)              Ok(t) => Ok(t),
    1,854 ( 0.00%)              Err(e) => Err(op(e)),
        .                   }
  570,067 ( 0.01%)      }
        .           
        .               /// Calls the provided closure with a reference to the contained value (if [`Ok`]).
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// #![feature(result_option_inspect)]
        .               ///
-- line 852 ----------------------------------------
-- line 1008 ----------------------------------------
        .               ///
        .               /// ```should_panic
        .               /// let x: Result<u32, &str> = Err("emergency failure");
        .               /// x.expect("Testing expect"); // panics with `Testing expect: emergency failure`
        .               /// ```
        .               #[inline]
        .               #[track_caller]
        .               #[stable(feature = "result_expect", since = "1.4.0")]
   69,772 ( 0.00%)      pub fn expect(self, msg: &str) -> T
        .               where
        .                   E: fmt::Debug,
        .               {
  926,069 ( 0.02%)          match self {
   66,338 ( 0.00%)              Ok(t) => t,
        .                       Err(e) => unwrap_failed(msg, &e),
        .                   }
   15,978 ( 0.00%)      }
        .           
        .               /// Returns the contained [`Ok`] value, consuming the `self` value.
        .               ///
        .               /// Because this function may panic, its use is generally discouraged.
        .               /// Instead, prefer to use pattern matching and handle the [`Err`]
        .               /// case explicitly, or call [`unwrap_or`], [`unwrap_or_else`], or
        .               /// [`unwrap_or_default`].
        .               ///
-- line 1032 ----------------------------------------
-- line 1051 ----------------------------------------
        .               ///
        .               /// ```should_panic
        .               /// let x: Result<u32, &str> = Err("emergency failure");
        .               /// x.unwrap(); // panics with `emergency failure`
        .               /// ```
        .               #[inline]
        .               #[track_caller]
        .               #[stable(feature = "rust1", since = "1.0.0")]
      380 ( 0.00%)      pub fn unwrap(self) -> T
        .               where
        .                   E: fmt::Debug,
        .               {
  194,027 ( 0.00%)          match self {
   98,561 ( 0.00%)              Ok(t) => t,
        .                       Err(e) => unwrap_failed("called `Result::unwrap()` on an `Err` value", &e),
        .                   }
      216 ( 0.00%)      }
        .           
        .               /// Returns the contained [`Ok`] value or a default
        .               ///
        .               /// Consumes the `self` argument then, if [`Ok`], returns the contained
        .               /// value, otherwise if [`Err`], returns the default value for that
        .               /// type.
        .               ///
        .               /// # Examples
-- line 1075 ----------------------------------------
-- line 1092 ----------------------------------------
        .               /// [`parse`]: str::parse
        .               /// [`FromStr`]: crate::str::FromStr
        .               #[inline]
        .               #[stable(feature = "result_unwrap_or_default", since = "1.16.0")]
        .               pub fn unwrap_or_default(self) -> T
        .               where
        .                   T: Default,
        .               {
    6,615 ( 0.00%)          match self {
    4,016 ( 0.00%)              Ok(x) => x,
        .                       Err(_) => Default::default(),
        .                   }
        .               }
        .           
        .               /// Returns the contained [`Err`] value, consuming the `self` value.
        .               ///
        .               /// # Panics
        .               ///
-- line 1109 ----------------------------------------
-- line 1152 ----------------------------------------
        .               /// ```
        .               #[inline]
        .               #[track_caller]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn unwrap_err(self) -> E
        .               where
        .                   T: fmt::Debug,
        .               {
    1,294 ( 0.00%)          match self {
        .                       Ok(t) => unwrap_failed("called `Result::unwrap_err()` on an `Ok` value", &t),
        .                       Err(e) => e,
        .                   }
        .               }
        .           
        .               /// Returns the contained [`Ok`] value, but never panics.
        .               ///
        .               /// Unlike [`unwrap`], this method is known to never panic on the
-- line 1168 ----------------------------------------
-- line 1190 ----------------------------------------
        .               /// ```
        .               #[unstable(feature = "unwrap_infallible", reason = "newly added", issue = "61695")]
        .               #[inline]
        .               pub fn into_ok(self) -> T
        .               where
        .                   E: Into<!>,
        .               {
        .                   match self {
1,261,836 ( 0.03%)              Ok(x) => x,
        .                       Err(e) => e.into(),
        .                   }
        .               }
        .           
        .               /// Returns the contained [`Err`] value, but never panics.
        .               ///
        .               /// Unlike [`unwrap_err`], this method is known to never panic on the
        .               /// result types it is implemented for. Therefore, it can be used
-- line 1206 ----------------------------------------
-- line 1290 ----------------------------------------
        .               /// assert_eq!(Ok(2).and_then(sq).and_then(sq), Ok(16));
        .               /// assert_eq!(Ok(2).and_then(sq).and_then(err), Err(4));
        .               /// assert_eq!(Ok(2).and_then(err).and_then(sq), Err(2));
        .               /// assert_eq!(Err(3).and_then(sq).and_then(sq), Err(3));
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn and_then<U, F: FnOnce(T) -> Result<U, E>>(self, op: F) -> Result<U, E> {
   36,129 ( 0.00%)          match self {
   53,851 ( 0.00%)              Ok(t) => op(t),
    9,260 ( 0.00%)              Err(e) => Err(e),
        .                   }
        .               }
        .           
        .               /// Returns `res` if the result is [`Err`], otherwise returns the [`Ok`] value of `self`.
        .               ///
        .               /// Arguments passed to `or` are eagerly evaluated; if you are passing the
        .               /// result of a function call, it is recommended to use [`or_else`], which is
        .               /// lazily evaluated.
-- line 1308 ----------------------------------------
-- line 1355 ----------------------------------------
        .               /// assert_eq!(Ok(2).or_else(sq).or_else(sq), Ok(2));
        .               /// assert_eq!(Ok(2).or_else(err).or_else(sq), Ok(2));
        .               /// assert_eq!(Err(3).or_else(sq).or_else(err), Ok(9));
        .               /// assert_eq!(Err(3).or_else(err).or_else(err), Err(3));
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn or_else<F, O: FnOnce(E) -> Result<T, F>>(self, op: O) -> Result<T, F> {
    2,862 ( 0.00%)          match self {
    9,906 ( 0.00%)              Ok(t) => Ok(t),
        .                       Err(e) => op(e),
        .                   }
        .               }
        .           
        .               /// Returns the contained [`Ok`] value or a provided default.
        .               ///
        .               /// Arguments passed to `unwrap_or` are eagerly evaluated; if you are passing
        .               /// the result of a function call, it is recommended to use [`unwrap_or_else`],
-- line 1372 ----------------------------------------
-- line 1384 ----------------------------------------
        .               /// assert_eq!(x.unwrap_or(default), 9);
        .               ///
        .               /// let x: Result<u32, &str> = Err("error");
        .               /// assert_eq!(x.unwrap_or(default), default);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn unwrap_or(self, default: T) -> T {
      233 ( 0.00%)          match self {
      345 ( 0.00%)              Ok(t) => t,
        .                       Err(_) => default,
        .                   }
        .               }
        .           
        .               /// Returns the contained [`Ok`] value or computes it from a closure.
        .               ///
        .               ///
        .               /// # Examples
-- line 1401 ----------------------------------------
-- line 1405 ----------------------------------------
        .               /// ```
        .               /// fn count(x: &str) -> usize { x.len() }
        .               ///
        .               /// assert_eq!(Ok(2).unwrap_or_else(count), 2);
        .               /// assert_eq!(Err("foo").unwrap_or_else(count), 3);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
      958 ( 0.00%)      pub fn unwrap_or_else<F: FnOnce(E) -> T>(self, op: F) -> T {
1,357,224 ( 0.03%)          match self {
  207,059 ( 0.00%)              Ok(t) => t,
        .                       Err(e) => op(e),
        .                   }
    2,461 ( 0.00%)      }
        .           
        .               /// Returns the contained [`Ok`] value, consuming the `self` value,
        .               /// without checking that the value is not an [`Err`].
        .               ///
        .               /// # Safety
        .               ///
        .               /// Calling this method on an [`Err`] is *[undefined behavior]*.
        .               ///
-- line 1426 ----------------------------------------
-- line 1647 ----------------------------------------
        .               /// let x: Result<Option<i32>, SomeErr> = Ok(Some(5));
        .               /// let y: Option<Result<i32, SomeErr>> = Some(Ok(5));
        .               /// assert_eq!(x.transpose(), y);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "transpose_result", since = "1.33.0")]
        .               #[rustc_const_unstable(feature = "const_result", issue = "82814")]
        .               pub const fn transpose(self) -> Option<Result<T, E>> {
      560 ( 0.00%)          match self {
        .                       Ok(Some(x)) => Some(Ok(x)),
        .                       Ok(None) => None,
        .                       Err(e) => Some(Err(e)),
        .                   }
        .               }
        .           }
        .           
        .           impl<T, E> Result<Result<T, E>, E> {
-- line 1663 ----------------------------------------
-- line 1751 ----------------------------------------
        .           
        .           /////////////////////////////////////////////////////////////////////////////
        .           // Trait implementations
        .           /////////////////////////////////////////////////////////////////////////////
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T: Clone, E: Clone> Clone for Result<T, E> {
        .               #[inline]
   55,294 ( 0.00%)      fn clone(&self) -> Self {
  353,796 ( 0.01%)          match self {
  238,441 ( 0.01%)              Ok(x) => Ok(x.clone()),
   94,750 ( 0.00%)              Err(x) => Err(x.clone()),
        .                   }
  119,212 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn clone_from(&mut self, source: &Self) {
        .                   match (self, source) {
        .                       (Ok(to), Ok(from)) => to.clone_from(from),
        .                       (Err(to), Err(from)) => to.clone_from(from),
        .                       (to, from) => *to = from.clone(),
        .                   }
-- line 1772 ----------------------------------------
-- line 1791 ----------------------------------------
        .               /// let v: Vec<u32> = x.into_iter().collect();
        .               /// assert_eq!(v, [5]);
        .               ///
        .               /// let x: Result<u32, &str> = Err("nothing!");
        .               /// let v: Vec<u32> = x.into_iter().collect();
        .               /// assert_eq!(v, []);
        .               /// ```
        .               #[inline]
    4,179 ( 0.00%)      fn into_iter(self) -> IntoIter<T> {
   13,884 ( 0.00%)          IntoIter { inner: self.ok() }
    2,790 ( 0.00%)      }
        .           }
        .           
        .           #[stable(since = "1.4.0", feature = "result_iter")]
        .           impl<'a, T, E> IntoIterator for &'a Result<T, E> {
        .               type Item = &'a T;
        .               type IntoIter = Iter<'a, T>;
        .           
        .               fn into_iter(self) -> Iter<'a, T> {
-- line 1809 ----------------------------------------
-- line 1931 ----------------------------------------
        .               inner: Option<T>,
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T> Iterator for IntoIter<T> {
        .               type Item = T;
        .           
        .               #[inline]
   11,088 ( 0.00%)      fn next(&mut self) -> Option<T> {
    2,802 ( 0.00%)          self.inner.take()
    5,556 ( 0.00%)      }
        .               #[inline]
    2,800 ( 0.00%)      fn size_hint(&self) -> (usize, Option<usize>) {
    2,800 ( 0.00%)          let n = if self.inner.is_some() { 1 } else { 0 };
    3,600 ( 0.00%)          (n, Some(n))
      800 ( 0.00%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T> DoubleEndedIterator for IntoIter<T> {
        .               #[inline]
        .               fn next_back(&mut self) -> Option<T> {
        .                   self.inner.take()
        .               }
-- line 1954 ----------------------------------------
-- line 2007 ----------------------------------------
        .               /// }).collect();
        .               /// assert_eq!(res, Err("Underflow!"));
        .               /// assert_eq!(shared, 6);
        .               /// ```
        .               ///
        .               /// Since the third element caused an underflow, no further elements were taken,
        .               /// so the final value of `shared` is 6 (= `3 + 2 + 1`), not 16.
        .               #[inline]
      144 ( 0.00%)      fn from_iter<I: IntoIterator<Item = Result<A, E>>>(iter: I) -> Result<V, E> {
        .                   // FIXME(#11084): This could be replaced with Iterator::scan when this
        .                   // performance bug is closed.
        .           
    3,814 ( 0.00%)          iter::process_results(iter.into_iter(), |i| i.collect())
       96 ( 0.00%)      }
        .           }
        .           
        .           #[unstable(feature = "try_trait_v2", issue = "84277")]
        .           #[rustc_const_unstable(feature = "const_convert", issue = "88674")]
        .           impl<T, E> const ops::Try for Result<T, E> {
        .               type Output = T;
        .               type Residual = Result<convert::Infallible, E>;
        .           
        .               #[inline]
        .               fn from_output(output: Self::Output) -> Self {
    1,918 ( 0.00%)          Ok(output)
        .               }
        .           
        .               #[inline]
1,017,271 ( 0.02%)      fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {
4,506,134 ( 0.11%)          match self {
5,634,012 ( 0.13%)              Ok(v) => ControlFlow::Continue(v),
   68,496 ( 0.00%)              Err(e) => ControlFlow::Break(Err(e)),
        .                   }
  731,693 ( 0.02%)      }
        .           }
        .           
        .           #[unstable(feature = "try_trait_v2", issue = "84277")]
        .           #[rustc_const_unstable(feature = "const_convert", issue = "88674")]
        .           impl<T, E, F: ~const From<E>> const ops::FromResidual<Result<convert::Infallible, E>>
        .               for Result<T, F>
        .           {
        .               #[inline]
        .               #[track_caller]
    2,703 ( 0.00%)      fn from_residual(residual: Result<convert::Infallible, E>) -> Self {
        .                   match residual {
   78,574 ( 0.00%)              Err(e) => Err(From::from(e)),
        .                   }
    1,802 ( 0.00%)      }
        .           }
        .           
        .           #[unstable(feature = "try_trait_v2_residual", issue = "91285")]
        .           impl<T, E> ops::Residual<T> for Result<convert::Infallible, E> {
        .               type TryType = Result<T, E>;
        .           }

2,907,816 ( 0.07%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/result.rs>

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./elf/../elf/dl-tls.c
  ./elf/../sysdeps/x86_64/dl-machine.h
  ./elf/../sysdeps/x86_64/dl-tls.c
  ./elf/../sysdeps/x86_64/tls_get_addr.S
  ./elf/dl-lookup.c
  ./malloc/malloc.c
  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S

--------------------------------------------------------------------------------
Ir                     
--------------------------------------------------------------------------------
1,571,431,061 (36.82%)  events annotated

