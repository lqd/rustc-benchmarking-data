--------------------------------------------------------------------------------
I1 cache:         65536 B, 64 B, 4-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         67108864 B, 64 B, 64-way associative
Command:          /usr/home/liquid/.rustup/toolchains/w-profiling/bin/rustc --crate-name raw_window_handle --edition=2018 src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 -C metadata=b747a0d2d1e93e9b -C extra-filename=-b747a0d2d1e93e9b --out-dir /usr/home/liquid/tmp/.tmp1WIC1M/target/debug/deps -L dependency=/usr/home/liquid/tmp/.tmp1WIC1M/target/debug/deps --extern cty=/usr/home/liquid/tmp/.tmp1WIC1M/target/debug/deps/libcty-5b56794934598eed.rmeta -Adeprecated -Aunknown-lints -Zincremental-verify-ich
Data file:        results/cgout-w-profiling-raw-window-handle-0.4.2-Check-Full
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Thresholds:       0.1
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                   
--------------------------------------------------------------------------------
257,502,887 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                   file:function
--------------------------------------------------------------------------------
10,305,124 ( 4.00%)  ./elf/dl-lookup.c:_dl_lookup_symbol_x
 8,447,220 ( 3.28%)  ./malloc/malloc.c:_int_free
 7,524,119 ( 2.92%)  ./malloc/malloc.c:_int_malloc
 5,074,256 ( 1.97%)  ./malloc/malloc.c:malloc
 4,835,679 ( 1.88%)  ./elf/dl-lookup.c:do_lookup_x
 4,141,271 ( 1.61%)  ./elf/../sysdeps/x86_64/dl-machine.h:_dl_relocate_object
 3,685,141 ( 1.43%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_avx_unaligned_erms
 2,457,553 ( 0.95%)  ./malloc/malloc.c:free
 2,139,033 ( 0.83%)  ./elf/do-rel.h:_dl_relocate_object
 1,991,334 ( 0.77%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 1,733,326 ( 0.67%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs:<rustc_data_structures::sip128::SipHasher128>::short_write_process_buffer::<u64>
 1,672,112 ( 0.65%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 1,620,881 ( 0.63%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 1,455,791 ( 0.57%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
 1,362,217 ( 0.53%)  ???:SetImpliedBits(llvm::FeatureBitset&, llvm::FeatureBitset const&, llvm::ArrayRef<llvm::SubtargetFeatureKV>)
 1,162,728 ( 0.45%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs:<rustc_data_structures::sip128::SipHasher128>::short_write_process_buffer::<u64>
 1,151,313 ( 0.45%)  ./malloc/malloc.c:malloc_consolidate
   915,638 ( 0.36%)  ./malloc/malloc.c:realloc
   864,856 ( 0.34%)  ./elf/dl-lookup.c:check_match
   852,028 ( 0.33%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilder<rustc_span::def_id::LocalDefId, (&rustc_middle::ty::context::TypeckResults, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_span::def_id::LocalDefId>
   815,905 ( 0.32%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs:<rustc_span::caching_source_map_view::CachingSourceMapView>::span_data_to_lines_and_cols
   748,578 ( 0.29%)  ./malloc/malloc.c:unlink_chunk.constprop.0
   723,448 ( 0.28%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}> as core::iter::traits::iterator::Iterator>::fold::<(), core::iter::traits::iterator::Iterator::for_each::call<rustc_metadata::rmeta::decoder::ImportedSourceFile, <alloc::vec::Vec<rustc_metadata::rmeta::decoder::ImportedSourceFile> as alloc::vec::spec_extend::SpecExtend<rustc_metadata::rmeta::decoder::ImportedSourceFile, core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}>>>::spec_extend::{closure#0}>::{closure#0}>
   721,058 ( 0.28%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<rustc_span::source_map::SourceMap>::new_imported_source_file
   719,459 ( 0.28%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<rustc_span::source_map::SourceMap>::new_imported_source_file
   713,230 ( 0.28%)  /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs:__rdl_alloc
   691,054 ( 0.27%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
   677,020 ( 0.26%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::TyKind as core::hash::Hash>::hash::<rustc_hash::FxHasher>
   674,494 ( 0.26%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::TyKind as core::cmp::PartialEq>::eq
   664,851 ( 0.26%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::CtxtInterners>::intern_ty
   657,681 ( 0.26%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<rustc_span::span_encoding::Span as rustc_data_structures::stable_hasher::HashStable<rustc_query_system::ich::hcx::StableHashingContext>>::hash_stable
   642,329 ( 0.25%)  ./malloc/malloc.c:_int_realloc
   628,156 ( 0.24%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/search.rs:<alloc::collections::btree::node::NodeRef<alloc::collections::btree::node::marker::Mut, rustc_infer::infer::region_constraints::Constraint, rustc_infer::infer::SubregionOrigin, alloc::collections::btree::node::marker::LeafOrInternal>>::search_tree::<rustc_infer::infer::region_constraints::Constraint>
   571,539 ( 0.22%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::RegionKind as core::hash::Hash>::hash::<rustc_hash::FxHasher>
   550,181 ( 0.21%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs:<rustc_infer::infer::InferCtxt>::shallow_resolve_ty
   529,040 ( 0.21%)  ./string/../sysdeps/x86_64/strcmp.S:strcmp
   520,910 ( 0.20%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs:<core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}> as core::iter::traits::iterator::Iterator>::fold::<(), core::iter::traits::iterator::Iterator::for_each::call<rustc_metadata::rmeta::decoder::ImportedSourceFile, <alloc::vec::Vec<rustc_metadata::rmeta::decoder::ImportedSourceFile> as alloc::vec::spec_extend::SpecExtend<rustc_metadata::rmeta::decoder::ImportedSourceFile, core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}>>>::spec_extend::{closure#0}>::{closure#0}>
   505,461 ( 0.20%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(rustc_span::def_id::DefId, rustc_query_system::query::plumbing::QueryResult<rustc_middle::dep_graph::dep_node::DepKind>)>>::remove_entry::<hashbrown::map::equivalent_key<rustc_span::def_id::DefId, rustc_span::def_id::DefId, rustc_query_system::query::plumbing::QueryResult<rustc_middle::dep_graph::dep_node::DepKind>>::{closure#0}>
   494,477 ( 0.19%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs:<rustc_span::span_encoding::Span as rustc_data_structures::stable_hasher::HashStable<rustc_query_system::ich::hcx::StableHashingContext>>::hash_stable
   479,914 ( 0.19%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}> as core::iter::traits::iterator::Iterator>::fold::<(), core::iter::traits::iterator::Iterator::for_each::call<rustc_metadata::rmeta::decoder::ImportedSourceFile, <alloc::vec::Vec<rustc_metadata::rmeta::decoder::ImportedSourceFile> as alloc::vec::spec_extend::SpecExtend<rustc_metadata::rmeta::decoder::ImportedSourceFile, core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}>>>::spec_extend::{closure#0}>::{closure#0}>
   459,321 ( 0.18%)  ???:llvm::StringMapImpl::LookupBucketFor(llvm::StringRef)
   436,217 ( 0.17%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::Binder<rustc_middle::ty::PredicateKind>, rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>>::{closure#0}>
   423,963 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::RegionKind as core::cmp::PartialEq>::eq
   405,693 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/graph/scc/mod.rs:<rustc_data_structures::graph::scc::SccsConstruction<rustc_borrowck::constraints::graph::RegionGraph<rustc_borrowck::constraints::graph::Normal>, rustc_borrowck::constraints::ConstraintSccIndex>>::start_walk_from
   405,615 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/region_constraints/mod.rs:<alloc::collections::btree::node::NodeRef<alloc::collections::btree::node::marker::Mut, rustc_infer::infer::region_constraints::Constraint, rustc_infer::infer::SubregionOrigin, alloc::collections::btree::node::marker::LeafOrInternal>>::search_tree::<rustc_infer::infer::region_constraints::Constraint>
   395,805 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs:<rustc_metadata::rmeta::decoder::DecodeContext as rustc_serialize::serialize::Decoder>::read_u32
   383,616 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/hir/map/mod.rs:<rustc_middle::hir::map::Map>::attrs
   373,861 ( 0.15%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<[rustc_middle::ty::subst::GenericArg], rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>>::{closure#0}>
   372,915 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_borrowck/src/lib.rs:<rustc_borrowck::MirBorrowckCtxt>::access_place
   359,687 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/hir/map/mod.rs:<rustc_middle::hir::map::Map>::find_parent_node
   354,811 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/graph/scc/mod.rs:<rustc_data_structures::graph::scc::SccsConstruction<rustc_borrowck::constraints::graph::RegionGraph<rustc_borrowck::constraints::graph::Normal>, rustc_borrowck::constraints::ConstraintSccIndex>>::inspect_node
   353,511 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs:<rustc_span::source_map::SourceMap>::lookup_source_file_idx
   350,987 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::TyCtxt>::_intern_substs
   337,881 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
   336,181 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<rustc_middle::ty::context::TyCtxt>::_intern_substs
   325,963 ( 0.13%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.14/src/lib.rs:stacker::remaining_stack
   322,572 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs:<rustc_span::span_encoding::Span as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
   315,943 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/obligation_forest/mod.rs:<rustc_data_structures::obligation_forest::ObligationForest<rustc_trait_selection::traits::fulfill::PendingPredicateObligation>>::process_obligations::<rustc_trait_selection::traits::fulfill::FulfillProcessor, rustc_data_structures::obligation_forest::Outcome<rustc_trait_selection::traits::fulfill::PendingPredicateObligation, rustc_infer::traits::FulfillmentErrorCode>>
   315,816 ( 0.12%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilder<rustc_span::def_id::LocalDefId, (core::option::Option<rustc_middle::hir::Owner>, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_span::def_id::LocalDefId>
   313,519 ( 0.12%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilder<rustc_span::def_id::LocalDefId, (&rustc_middle::ty::context::TypeckResults, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_span::def_id::LocalDefId>
   312,444 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/type_variable.rs:<rustc_infer::infer::type_variable::TypeVariableTable>::probe
   312,042 ( 0.12%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::sty::RegionKind>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::RegionKind, rustc_middle::ty::context::Interned<rustc_middle::ty::sty::RegionKind>>::{closure#0}>
   311,757 ( 0.12%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<[rustc_middle::ty::subst::GenericArg], rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>>::{closure#0}>
   309,767 ( 0.12%)  ./malloc/malloc.c:calloc
   304,831 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_index/src/interval.rs:<rustc_index::interval::IntervalSet<rustc_borrowck::region_infer::values::PointIndex>>::union
   302,674 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/region_constraints/mod.rs:<rustc_infer::infer::region_constraints::RegionConstraintCollector>::make_subregion
   298,853 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs:<rustc_metadata::rmeta::decoder::DecodeContext as rustc_serialize::serialize::Decoder>::read_u32
   296,750 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_resolve/src/imports.rs:<rustc_resolve::Resolver>::resolve_ident_in_module_unadjusted_ext
   286,810 ( 0.11%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(rustc_hir::hir_id::ItemLocalId, ())>>::insert::<hashbrown::map::make_hasher<rustc_hir::hir_id::ItemLocalId, rustc_hir::hir_id::ItemLocalId, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>::{closure#0}>
   284,423 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_privacy/src/lib.rs:<rustc_privacy::DefIdVisitorSkeleton<rustc_privacy::TypePrivacyVisitor> as rustc_middle::ty::fold::TypeVisitor>::visit_ty
   280,697 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/hygiene.rs:<rustc_span::hygiene::SyntaxContext as rustc_data_structures::stable_hasher::HashStable<rustc_query_system::ich::hcx::StableHashingContext>>::hash_stable
   280,172 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs:<rustc_middle::hir::map::Map>::attrs
   272,842 ( 0.11%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-hash-1.1.0/src/lib.rs:<&str as core::hash::Hash>::hash::<rustc_hash::FxHasher>
   267,597 ( 0.10%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/rustc_entry.rs:<hashbrown::map::HashMap<rustc_span::def_id::DefId, rustc_query_system::query::plumbing::QueryResult<rustc_middle::dep_graph::dep_node::DepKind>, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::rustc_entry
   265,348 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/library/std/src/thread/local.rs:rustc_span::SESSION_GLOBALS::FOO::__getit
   265,020 ( 0.10%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTableInner<alloc::alloc::Global>>::prepare_insert_slot
   264,137 ( 0.10%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilder<rustc_span::def_id::DefId, (&rustc_middle::ty::TyS, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_span::def_id::DefId>
   263,076 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cmp.rs:<alloc::collections::btree::node::NodeRef<alloc::collections::btree::node::marker::Mut, rustc_infer::infer::region_constraints::Constraint, rustc_infer::infer::SubregionOrigin, alloc::collections::btree::node::marker::LeafOrInternal>>::search_tree::<rustc_infer::infer::region_constraints::Constraint>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs
--------------------------------------------------------------------------------
Ir               

-- line 118 ----------------------------------------
      .               stability: InternedSet<'tcx, attr::Stability>,
      .           
      .               /// `#[rustc_const_stable]` and `#[rustc_const_unstable]` attributes
      .               const_stability: InternedSet<'tcx, attr::ConstStability>,
      .           }
      .           
      .           impl<'tcx> CtxtInterners<'tcx> {
      .               fn new(arena: &'tcx WorkerLocal<Arena<'tcx>>) -> CtxtInterners<'tcx> {
     17 ( 0.00%)          CtxtInterners {
      .                       arena,
      .                       type_: Default::default(),
      .                       type_list: Default::default(),
      .                       substs: Default::default(),
      .                       region: Default::default(),
      .                       poly_existential_predicates: Default::default(),
      .                       canonical_var_infos: Default::default(),
      .                       predicate: Default::default(),
-- line 134 ----------------------------------------
-- line 143 ----------------------------------------
      .                       stability: Default::default(),
      .                       const_stability: Default::default(),
      .                   }
      .               }
      .           
      .               /// Interns a type.
      .               #[allow(rustc::usage_of_ty_tykind)]
      .               #[inline(never)]
229,864 ( 0.09%)      fn intern_ty(&self, kind: TyKind<'tcx>) -> Ty<'tcx> {
      .                   self.type_
143,665 ( 0.06%)              .intern(kind, |kind| {
  9,350 ( 0.00%)                  let flags = super::flags::FlagComputation::for_kind(&kind);
      .           
      .                           let ty_struct = TyS {
 18,700 ( 0.01%)                      kind,
      .                               flags: flags.flags,
      .                               outer_exclusive_binder: flags.outer_exclusive_binder,
      .                           };
      .           
      .                           Interned(self.arena.alloc(ty_struct))
      .                       })
      .                       .0
258,597 ( 0.10%)      }
      .           
      .               #[inline(never)]
 64,776 ( 0.03%)      fn intern_predicate(
      .                   &self,
      .                   kind: Binder<'tcx, PredicateKind<'tcx>>,
      .               ) -> &'tcx PredicateInner<'tcx> {
      .                   self.predicate
 56,679 ( 0.02%)              .intern(kind, |kind| {
 18,024 ( 0.01%)                  let flags = super::flags::FlagComputation::for_predicate(kind);
      .           
      .                           let predicate_struct = PredicateInner {
      .                               kind,
      .                               flags: flags.flags,
      .                               outer_exclusive_binder: flags.outer_exclusive_binder,
      .                           };
      .           
      .                           Interned(self.arena.alloc(predicate_struct))
      .                       })
      .                       .0
 72,873 ( 0.03%)      }
      .           }
      .           
      .           pub struct CommonTypes<'tcx> {
      .               pub unit: Ty<'tcx>,
      .               pub bool: Ty<'tcx>,
      .               pub char: Ty<'tcx>,
      .               pub isize: Ty<'tcx>,
      .               pub i8: Ty<'tcx>,
-- line 193 ----------------------------------------
-- line 237 ----------------------------------------
      .           /// safely used as a key in the maps of a TypeckResults. For that to be
      .           /// the case, the HirId must have the same `owner` as all the other IDs in
      .           /// this table (signified by `hir_owner`). Otherwise the HirId
      .           /// would be in a different frame of reference and using its `local_id`
      .           /// would result in lookup errors, or worse, in silently wrong data being
      .           /// stored/returned.
      .           #[inline]
      .           fn validate_hir_id_for_typeck_results(hir_owner: LocalDefId, hir_id: hir::HirId) {
 42,905 ( 0.02%)      if hir_id.owner != hir_owner {
      .                   invalid_hir_id_for_typeck_results(hir_owner, hir_id);
      .               }
      .           }
      .           
      .           #[cold]
      .           #[inline(never)]
      .           fn invalid_hir_id_for_typeck_results(hir_owner: LocalDefId, hir_id: hir::HirId) {
      .               ty::tls::with(|tcx| {
-- line 253 ----------------------------------------
-- line 261 ----------------------------------------
      .           }
      .           
      .           impl<'a, V> LocalTableInContext<'a, V> {
      .               pub fn contains_key(&self, id: hir::HirId) -> bool {
      .                   validate_hir_id_for_typeck_results(self.hir_owner, id);
      .                   self.data.contains_key(&id.local_id)
      .               }
      .           
 35,688 ( 0.01%)      pub fn get(&self, id: hir::HirId) -> Option<&V> {
  7,123 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
  7,123 ( 0.00%)          self.data.get(&id.local_id)
 28,642 ( 0.01%)      }
      .           
      .               pub fn iter(&self) -> hash_map::Iter<'_, hir::ItemLocalId, V> {
      .                   self.data.iter()
      .               }
      .           }
      .           
      .           impl<'a, V> ::std::ops::Index<hir::HirId> for LocalTableInContext<'a, V> {
      .               type Output = V;
      .           
    462 ( 0.00%)      fn index(&self, key: hir::HirId) -> &V {
      .                   self.get(key).expect("LocalTableInContext: key not found")
    308 ( 0.00%)      }
      .           }
      .           
      .           pub struct LocalTableInContextMut<'a, V> {
      .               hir_owner: LocalDefId,
      .               data: &'a mut ItemLocalMap<V>,
      .           }
      .           
      .           impl<'a, V> LocalTableInContextMut<'a, V> {
-- line 292 ----------------------------------------
-- line 507 ----------------------------------------
      .               pub treat_byte_string_as_slice: ItemLocalSet,
      .           
      .               /// Contains the data for evaluating the effect of feature `capture_disjoint_fields`
      .               /// on closure size.
      .               pub closure_size_eval: FxHashMap<DefId, ClosureSizeProfileData<'tcx>>,
      .           }
      .           
      .           impl<'tcx> TypeckResults<'tcx> {
  2,058 ( 0.00%)      pub fn new(hir_owner: LocalDefId) -> TypeckResults<'tcx> {
 24,353 ( 0.01%)          TypeckResults {
      .                       hir_owner,
      .                       type_dependent_defs: Default::default(),
      .                       field_indices: Default::default(),
      .                       user_provided_types: Default::default(),
      .                       user_provided_sigs: Default::default(),
      .                       node_types: Default::default(),
      .                       node_substs: Default::default(),
      .                       adjustments: Default::default(),
-- line 524 ----------------------------------------
-- line 532 ----------------------------------------
      .                       tainted_by_errors: None,
      .                       concrete_opaque_types: Default::default(),
      .                       closure_min_captures: Default::default(),
      .                       closure_fake_reads: Default::default(),
      .                       generator_interior_types: ty::Binder::dummy(Default::default()),
      .                       treat_byte_string_as_slice: Default::default(),
      .                       closure_size_eval: Default::default(),
      .                   }
  2,058 ( 0.00%)      }
      .           
      .               /// Returns the final resolution of a `QPath` in an `Expr` or `Pat` node.
  7,038 ( 0.00%)      pub fn qpath_res(&self, qpath: &hir::QPath<'_>, id: hir::HirId) -> Res {
  4,692 ( 0.00%)          match *qpath {
 12,870 ( 0.00%)              hir::QPath::Resolved(_, ref path) => path.res,
      .                       hir::QPath::TypeRelative(..) | hir::QPath::LangItem(..) => self
      .                           .type_dependent_def(id)
  1,206 ( 0.00%)                  .map_or(Res::Err, |(kind, def_id)| Res::Def(kind, def_id)),
      .                   }
 11,730 ( 0.00%)      }
      .           
     67 ( 0.00%)      pub fn type_dependent_defs(
      .                   &self,
      .               ) -> LocalTableInContext<'_, Result<(DefKind, DefId), ErrorReported>> {
    885 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.type_dependent_defs }
     67 ( 0.00%)      }
      .           
    357 ( 0.00%)      pub fn type_dependent_def(&self, id: HirId) -> Option<(DefKind, DefId)> {
    561 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
      .                   self.type_dependent_defs.get(&id.local_id).cloned().and_then(|r| r.ok())
    714 ( 0.00%)      }
      .           
     12 ( 0.00%)      pub fn type_dependent_def_id(&self, id: HirId) -> Option<DefId> {
      .                   self.type_dependent_def(id).map(|(_, def_id)| def_id)
     12 ( 0.00%)      }
      .           
  2,463 ( 0.00%)      pub fn type_dependent_defs_mut(
      .                   &mut self,
      .               ) -> LocalTableInContextMut<'_, Result<(DefKind, DefId), ErrorReported>> {
  2,463 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.type_dependent_defs }
  2,463 ( 0.00%)      }
      .           
      .               pub fn field_indices(&self) -> LocalTableInContext<'_, usize> {
    629 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.field_indices }
    102 ( 0.00%)      }
      .           
      .               pub fn field_indices_mut(&mut self) -> LocalTableInContextMut<'_, usize> {
    714 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.field_indices }
    357 ( 0.00%)      }
      .           
      .               pub fn user_provided_types(&self) -> LocalTableInContext<'_, CanonicalUserType<'tcx>> {
  1,072 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.user_provided_types }
    536 ( 0.00%)      }
      .           
      .               pub fn user_provided_types_mut(
      .                   &mut self,
      .               ) -> LocalTableInContextMut<'_, CanonicalUserType<'tcx>> {
    484 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.user_provided_types }
    242 ( 0.00%)      }
      .           
      .               pub fn node_types(&self) -> LocalTableInContext<'_, Ty<'tcx>> {
  6,710 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.node_types }
  3,355 ( 0.00%)      }
      .           
      .               pub fn node_types_mut(&mut self) -> LocalTableInContextMut<'_, Ty<'tcx>> {
 10,752 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.node_types }
  5,376 ( 0.00%)      }
      .           
 42,666 ( 0.02%)      pub fn node_type(&self, id: hir::HirId) -> Ty<'tcx> {
  7,111 ( 0.00%)          self.node_type_opt(id).unwrap_or_else(|| {
      .                       bug!("node_type: no type for node `{}`", tls::with(|tcx| tcx.hir().node_to_string(id)))
      .                   })
 35,555 ( 0.01%)      }
      .           
  9,328 ( 0.00%)      pub fn node_type_opt(&self, id: hir::HirId) -> Option<Ty<'tcx>> {
  9,328 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
      .                   self.node_types.get(&id.local_id).cloned()
 18,656 ( 0.01%)      }
      .           
      .               pub fn node_substs_mut(&mut self) -> LocalTableInContextMut<'_, SubstsRef<'tcx>> {
    788 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.node_substs }
    394 ( 0.00%)      }
      .           
  3,069 ( 0.00%)      pub fn node_substs(&self, id: hir::HirId) -> SubstsRef<'tcx> {
  3,069 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
      .                   self.node_substs.get(&id.local_id).cloned().unwrap_or_else(|| InternalSubsts::empty())
  6,138 ( 0.00%)      }
      .           
  2,199 ( 0.00%)      pub fn node_substs_opt(&self, id: hir::HirId) -> Option<SubstsRef<'tcx>> {
  2,199 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
      .                   self.node_substs.get(&id.local_id).cloned()
  4,398 ( 0.00%)      }
      .           
      .               // Returns the type of a pattern as a monotype. Like @expr_ty, this function
      .               // doesn't provide type parameter substitutions.
      .               pub fn pat_ty(&self, pat: &hir::Pat<'_>) -> Ty<'tcx> {
  1,020 ( 0.00%)          self.node_type(pat.hir_id)
      .               }
      .           
      .               // Returns the type of an expression as a monotype.
      .               //
      .               // NB (1): This is the PRE-ADJUSTMENT TYPE for the expression.  That is, in
      .               // some cases, we insert `Adjustment` annotations such as auto-deref or
      .               // auto-ref.  The type returned by this function does not consider such
      .               // adjustments.  See `expr_ty_adjusted()` instead.
      .               //
      .               // NB (2): This type doesn't provide type parameter substitutions; e.g., if you
      .               // ask for the type of "id" in "id(3)", it will return "fn(&isize) -> isize"
      .               // instead of "fn(ty) -> T with T = isize".
      .               pub fn expr_ty(&self, expr: &hir::Expr<'_>) -> Ty<'tcx> {
  6,088 ( 0.00%)          self.node_type(expr.hir_id)
      .               }
      .           
      .               pub fn expr_ty_opt(&self, expr: &hir::Expr<'_>) -> Option<Ty<'tcx>> {
  7,780 ( 0.00%)          self.node_type_opt(expr.hir_id)
      .               }
      .           
      .               pub fn adjustments(&self) -> LocalTableInContext<'_, Vec<ty::adjustment::Adjustment<'tcx>>> {
  4,112 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.adjustments }
  2,056 ( 0.00%)      }
      .           
      .               pub fn adjustments_mut(
      .                   &mut self,
      .               ) -> LocalTableInContextMut<'_, Vec<ty::adjustment::Adjustment<'tcx>>> {
  6,262 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.adjustments }
  3,131 ( 0.00%)      }
      .           
  3,350 ( 0.00%)      pub fn expr_adjustments(&self, expr: &hir::Expr<'_>) -> &[ty::adjustment::Adjustment<'tcx>] {
  6,700 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, expr.hir_id);
      .                   self.adjustments.get(&expr.hir_id.local_id).map_or(&[], |a| &a[..])
  6,700 ( 0.00%)      }
      .           
      .               /// Returns the type of `expr`, considering any `Adjustment`
      .               /// entry recorded for that expression.
    320 ( 0.00%)      pub fn expr_ty_adjusted(&self, expr: &hir::Expr<'_>) -> Ty<'tcx> {
     64 ( 0.00%)          self.expr_adjustments(expr).last().map_or_else(|| self.expr_ty(expr), |adj| adj.target)
      .               }
      .           
      .               pub fn expr_ty_adjusted_opt(&self, expr: &hir::Expr<'_>) -> Option<Ty<'tcx>> {
      .                   self.expr_adjustments(expr).last().map(|adj| adj.target).or_else(|| self.expr_ty_opt(expr))
      .               }
      .           
    818 ( 0.00%)      pub fn is_method_call(&self, expr: &hir::Expr<'_>) -> bool {
      .                   // Only paths and method calls/overloaded operators have
      .                   // entries in type_dependent_defs, ignore the former here.
  1,636 ( 0.00%)          if let hir::ExprKind::Path(_) = expr.kind {
      .                       return false;
      .                   }
      .           
  1,716 ( 0.00%)          matches!(self.type_dependent_defs().get(expr.hir_id), Some(Ok((DefKind::AssocFn, _))))
  1,636 ( 0.00%)      }
      .           
  2,673 ( 0.00%)      pub fn extract_binding_mode(&self, s: &Session, id: HirId, sp: Span) -> Option<BindingMode> {
      .                   self.pat_binding_modes().get(id).copied().or_else(|| {
      .                       s.delay_span_bug(sp, "missing binding mode");
      .                       None
      .                   })
  3,564 ( 0.00%)      }
      .           
      .               pub fn pat_binding_modes(&self) -> LocalTableInContext<'_, BindingMode> {
  2,403 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.pat_binding_modes }
    756 ( 0.00%)      }
      .           
      .               pub fn pat_binding_modes_mut(&mut self) -> LocalTableInContextMut<'_, BindingMode> {
  1,188 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.pat_binding_modes }
    594 ( 0.00%)      }
      .           
      .               pub fn pat_adjustments(&self) -> LocalTableInContext<'_, Vec<Ty<'tcx>>> {
  3,936 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.pat_adjustments }
  1,968 ( 0.00%)      }
      .           
      .               pub fn pat_adjustments_mut(&mut self) -> LocalTableInContextMut<'_, Vec<Ty<'tcx>>> {
  1,200 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.pat_adjustments }
    600 ( 0.00%)      }
      .           
      .               /// For a given closure, returns the iterator of `ty::CapturedPlace`s that are captured
      .               /// by the closure.
    308 ( 0.00%)      pub fn closure_min_captures_flattened(
      .                   &self,
      .                   closure_def_id: DefId,
      .               ) -> impl Iterator<Item = &ty::CapturedPlace<'tcx>> {
      .                   self.closure_min_captures
      .                       .get(&closure_def_id)
      .                       .map(|closure_min_captures| closure_min_captures.values().flat_map(|v| v.iter()))
      .                       .into_iter()
      .                       .flatten()
    385 ( 0.00%)      }
      .           
      .               pub fn closure_kind_origins(&self) -> LocalTableInContext<'_, (Span, HirPlace<'tcx>)> {
    154 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.closure_kind_origins }
     77 ( 0.00%)      }
      .           
      .               pub fn closure_kind_origins_mut(
      .                   &mut self,
      .               ) -> LocalTableInContextMut<'_, (Span, HirPlace<'tcx>)> {
      .                   LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.closure_kind_origins }
      .               }
      .           
      .               pub fn liberated_fn_sigs(&self) -> LocalTableInContext<'_, ty::FnSig<'tcx>> {
    462 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.liberated_fn_sigs }
    231 ( 0.00%)      }
      .           
      .               pub fn liberated_fn_sigs_mut(&mut self) -> LocalTableInContextMut<'_, ty::FnSig<'tcx>> {
    308 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.liberated_fn_sigs }
    154 ( 0.00%)      }
      .           
      .               pub fn fru_field_types(&self) -> LocalTableInContext<'_, Vec<Ty<'tcx>>> {
    154 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.fru_field_types }
     77 ( 0.00%)      }
      .           
      .               pub fn fru_field_types_mut(&mut self) -> LocalTableInContextMut<'_, Vec<Ty<'tcx>>> {
      .                   LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.fru_field_types }
      .               }
      .           
      .               pub fn is_coercion_cast(&self, hir_id: hir::HirId) -> bool {
      .                   validate_hir_id_for_typeck_results(self.hir_owner, hir_id);
      .                   self.coercion_casts.contains(&hir_id.local_id)
      .               }
      .           
      .               pub fn set_coercion_cast(&mut self, id: ItemLocalId) {
      .                   self.coercion_casts.insert(id);
      .               }
      .           
      .               pub fn coercion_casts(&self) -> &ItemLocalSet {
     77 ( 0.00%)          &self.coercion_casts
     77 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for TypeckResults<'tcx> {
      .               fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {
      .                   let ty::TypeckResults {
      .                       hir_owner,
      .                       ref type_dependent_defs,
      .                       ref field_indices,
-- line 764 ----------------------------------------
-- line 819 ----------------------------------------
      .                   const START_INDEX = 0,
      .               }
      .           }
      .           
      .           /// Mapping of type annotation indices to canonical user type annotations.
      .           pub type CanonicalUserTypeAnnotations<'tcx> =
      .               IndexVec<UserTypeAnnotationIndex, CanonicalUserTypeAnnotation<'tcx>>;
      .           
    350 ( 0.00%)  #[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable, TypeFoldable, Lift)]
      .           pub struct CanonicalUserTypeAnnotation<'tcx> {
      .               pub user_ty: CanonicalUserType<'tcx>,
      .               pub span: Span,
    175 ( 0.00%)      pub inferred_ty: Ty<'tcx>,
      .           }
      .           
      .           /// Canonicalized user type annotation.
      .           pub type CanonicalUserType<'tcx> = Canonical<'tcx, UserType<'tcx>>;
      .           
      .           impl<'tcx> CanonicalUserType<'tcx> {
      .               /// Returns `true` if this represents a substitution of the form `[?0, ?1, ?2]`,
      .               /// i.e., each thing is mapped to a canonical variable with the same index.
    132 ( 0.00%)      pub fn is_identity(&self) -> bool {
    264 ( 0.00%)          match self.value {
      .                       UserType::Ty(_) => false,
      .                       UserType::TypeOf(_, user_substs) => {
    132 ( 0.00%)                  if user_substs.user_self_ty.is_some() {
      .                               return false;
      .                           }
      .           
      .                           iter::zip(user_substs.substs, BoundVar::new(0)..).all(|(kind, cvar)| {
      .                               match kind.unpack() {
    204 ( 0.00%)                          GenericArgKind::Type(ty) => match ty.kind() {
      .                                       ty::Bound(debruijn, b) => {
      .                                           // We only allow a `ty::INNERMOST` index in substitutions.
    102 ( 0.00%)                                  assert_eq!(*debruijn, ty::INNERMOST);
      .                                           cvar == b.var
      .                                       }
      .                                       _ => false,
      .                                   },
      .           
      .                                   GenericArgKind::Lifetime(r) => match r {
      .                                       ty::ReLateBound(debruijn, br) => {
      .                                           // We only allow a `ty::INNERMOST` index in substitutions.
-- line 861 ----------------------------------------
-- line 872 ----------------------------------------
      .                                           cvar == b
      .                                       }
      .                                       _ => false,
      .                                   },
      .                               }
      .                           })
      .                       }
      .                   }
    264 ( 0.00%)      }
      .           }
      .           
      .           /// A user-given type annotation attached to a constant. These arise
      .           /// from constants that are named via paths, like `Foo::<A>::new` and
      .           /// so forth.
  1,050 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, TyEncodable, TyDecodable)]
  2,532 ( 0.00%)  #[derive(HashStable, TypeFoldable, Lift)]
      .           pub enum UserType<'tcx> {
      .               Ty(Ty<'tcx>),
      .           
      .               /// The canonical type is the result of `type_of(def_id)` with the
      .               /// given substitutions applied.
      .               TypeOf(DefId, UserSubsts<'tcx>),
      .           }
      .           
      .           impl<'tcx> CommonTypes<'tcx> {
      .               fn new(interners: &CtxtInterners<'tcx>) -> CommonTypes<'tcx> {
    111 ( 0.00%)          let mk = |ty| interners.intern_ty(ty);
      .           
      .                   CommonTypes {
      .                       unit: mk(Tuple(List::empty())),
      .                       bool: mk(Bool),
      .                       char: mk(Char),
      .                       never: mk(Never),
      .                       isize: mk(Int(ty::IntTy::Isize)),
      .                       i8: mk(Int(ty::IntTy::I8)),
-- line 906 ----------------------------------------
-- line 921 ----------------------------------------
      .           
      .                       trait_object_dummy_self: mk(Infer(ty::FreshTy(0))),
      .                   }
      .               }
      .           }
      .           
      .           impl<'tcx> CommonLifetimes<'tcx> {
      .               fn new(interners: &CtxtInterners<'tcx>) -> CommonLifetimes<'tcx> {
     67 ( 0.00%)          let mk = |r| interners.region.intern(r, |r| Interned(interners.arena.alloc(r))).0;
      .           
      .                   CommonLifetimes {
      5 ( 0.00%)              re_root_empty: mk(RegionKind::ReEmpty(ty::UniverseIndex::ROOT)),
      5 ( 0.00%)              re_static: mk(RegionKind::ReStatic),
      5 ( 0.00%)              re_erased: mk(RegionKind::ReErased),
      .                   }
      .               }
      .           }
      .           
      .           impl<'tcx> CommonConsts<'tcx> {
      .               fn new(interners: &CtxtInterners<'tcx>, types: &CommonTypes<'tcx>) -> CommonConsts<'tcx> {
      6 ( 0.00%)          let mk_const = |c| interners.const_.intern(c, |c| Interned(interners.arena.alloc(c))).0;
      .           
      .                   CommonConsts {
      .                       unit: mk_const(ty::Const {
      .                           val: ty::ConstKind::Value(ConstValue::Scalar(Scalar::ZST)),
      .                           ty: types.unit,
      .                       }),
      .                   }
      .               }
-- line 949 ----------------------------------------
-- line 1045 ----------------------------------------
      .           
      .               /// Stores memory for globals (statics/consts).
      .               pub(crate) alloc_map: Lock<interpret::AllocMap<'tcx>>,
      .           
      .               output_filenames: Arc<OutputFilenames>,
      .           }
      .           
      .           impl<'tcx> TyCtxt<'tcx> {
  3,080 ( 0.00%)      pub fn typeck_opt_const_arg(
      .                   self,
      .                   def: ty::WithOptConstParam<LocalDefId>,
      .               ) -> &'tcx TypeckResults<'tcx> {
  1,232 ( 0.00%)          if let Some(param_did) = def.const_param_did {
      .                       self.typeck_const_arg((def.did, param_did))
      .                   } else {
      .                       self.typeck(def.did)
      .                   }
  2,464 ( 0.00%)      }
      .           
    231 ( 0.00%)      pub fn alloc_steal_thir(self, thir: Thir<'tcx>) -> &'tcx Steal<Thir<'tcx>> {
     77 ( 0.00%)          self.arena.alloc(Steal::new(thir))
    308 ( 0.00%)      }
      .           
  1,155 ( 0.00%)      pub fn alloc_steal_mir(self, mir: Body<'tcx>) -> &'tcx Steal<Body<'tcx>> {
    231 ( 0.00%)          self.arena.alloc(Steal::new(mir))
  1,617 ( 0.00%)      }
      .           
    308 ( 0.00%)      pub fn alloc_steal_promoted(
      .                   self,
      .                   promoted: IndexVec<Promoted, Body<'tcx>>,
      .               ) -> &'tcx Steal<IndexVec<Promoted, Body<'tcx>>> {
     77 ( 0.00%)          self.arena.alloc(Steal::new(promoted))
    385 ( 0.00%)      }
      .           
    144 ( 0.00%)      pub fn alloc_adt_def(
      .                   self,
      .                   did: DefId,
      .                   kind: AdtKind,
      .                   variants: IndexVec<VariantIdx, ty::VariantDef>,
      .                   repr: ReprOptions,
      .               ) -> &'tcx ty::AdtDef {
    256 ( 0.00%)          self.intern_adt_def(ty::AdtDef::new(self, did, kind, variants, repr))
     64 ( 0.00%)      }
      .           
      .               /// Allocates a read-only byte or string literal for `mir::interpret`.
      .               pub fn allocate_bytes(self, bytes: &[u8]) -> interpret::AllocId {
      .                   // Create an allocation that just contains these bytes.
      .                   let alloc = interpret::Allocation::from_bytes_byte_aligned_immutable(bytes);
      .                   let alloc = self.intern_const_alloc(alloc);
      .                   self.create_memory_alloc(alloc)
      .               }
      .           
      .               /// Returns a range of the start/end indices specified with the
      .               /// `rustc_layout_scalar_valid_range` attribute.
      .               // FIXME(eddyb) this is an awkward spot for this method, maybe move it?
  1,456 ( 0.00%)      pub fn layout_scalar_valid_range(self, def_id: DefId) -> (Bound<u128>, Bound<u128>) {
    728 ( 0.00%)          let attrs = self.get_attrs(def_id);
  3,094 ( 0.00%)          let get = |name| {
    728 ( 0.00%)              let attr = match attrs.iter().find(|a| a.has_name(name)) {
      .                           Some(attr) => attr,
      .                           None => return Bound::Unbounded,
      .                       };
      .                       debug!("layout_scalar_valid_range: attr={:?}", attr);
      .                       if let Some(
      .                           &[
      .                               ast::NestedMetaItem::Literal(ast::Lit {
      .                                   kind: ast::LitKind::Int(a, _), ..
-- line 1111 ----------------------------------------
-- line 1114 ----------------------------------------
      .                       ) = attr.meta_item_list().as_deref()
      .                       {
      .                           Bound::Included(a)
      .                       } else {
      .                           self.sess
      .                               .delay_span_bug(attr.span, "invalid rustc_layout_scalar_valid_range attribute");
      .                           Bound::Unbounded
      .                       }
  3,640 ( 0.00%)          };
  1,092 ( 0.00%)          (
  1,092 ( 0.00%)              get(sym::rustc_layout_scalar_valid_range_start),
    546 ( 0.00%)              get(sym::rustc_layout_scalar_valid_range_end),
      .                   )
  1,456 ( 0.00%)      }
      .           
      .               pub fn lift<T: Lift<'tcx>>(self, value: T) -> Option<T::Lifted> {
      .                   value.lift_to_tcx(self)
      .               }
      .           
      .               /// Creates a type context and call the closure with a `TyCtxt` reference
      .               /// to the context. The closure enforces that the type context and any interned
      .               /// value (types, substs, etc.) can only be used while `ty::tls` has a valid
      .               /// reference to the context, to allow formatting values that need it.
     23 ( 0.00%)      pub fn create_global_ctxt(
      .                   s: &'tcx Session,
      .                   lint_store: Lrc<dyn Any + sync::Send + sync::Sync>,
      .                   arena: &'tcx WorkerLocal<Arena<'tcx>>,
      .                   resolutions: ty::ResolverOutputs,
      .                   krate: &'tcx hir::Crate<'tcx>,
      .                   dep_graph: DepGraph,
      .                   on_disk_cache: Option<&'tcx dyn OnDiskCache<'tcx>>,
      .                   queries: &'tcx dyn query::QueryEngine<'tcx>,
      .                   query_kinds: &'tcx [DepKindStruct],
      .                   crate_name: &str,
      .                   output_filenames: OutputFilenames,
      .               ) -> GlobalCtxt<'tcx> {
      1 ( 0.00%)          let data_layout = TargetDataLayout::parse(&s.target).unwrap_or_else(|err| {
      .                       s.fatal(&err);
      .                   });
      .                   let interners = CtxtInterners::new(arena);
      .                   let common_types = CommonTypes::new(&interners);
      .                   let common_lifetimes = CommonLifetimes::new(&interners);
      .                   let common_consts = CommonConsts::new(&interners, &common_types);
      .           
    127 ( 0.00%)          GlobalCtxt {
      .                       sess: s,
      6 ( 0.00%)              lint_store,
      .                       arena,
      2 ( 0.00%)              interners,
      5 ( 0.00%)              dep_graph,
      4 ( 0.00%)              untracked_resolutions: resolutions,
      2 ( 0.00%)              prof: s.prof.clone(),
      .                       types: common_types,
      .                       lifetimes: common_lifetimes,
      .                       consts: common_consts,
      .                       untracked_crate: krate,
      .                       on_disk_cache,
      .                       queries,
      .                       query_caches: query::QueryCaches::default(),
      .                       query_kinds,
      .                       ty_rcache: Default::default(),
      .                       pred_rcache: Default::default(),
      .                       selection_cache: Default::default(),
      .                       evaluation_cache: Default::default(),
      1 ( 0.00%)              crate_name: Symbol::intern(crate_name),
      .                       data_layout,
      .                       alloc_map: Lock::new(interpret::AllocMap::new()),
      .                       output_filenames: Arc::new(output_filenames),
      .                   }
      9 ( 0.00%)      }
      .           
      .               crate fn query_kind(self, k: DepKind) -> &'tcx DepKindStruct {
      .                   &self.query_kinds[k as usize]
      .               }
      .           
      .               /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` to ensure it gets used.
      .               #[track_caller]
      .               pub fn ty_error(self) -> Ty<'tcx> {
-- line 1191 ----------------------------------------
-- line 1217 ----------------------------------------
      .                   ty: Ty<'tcx>,
      .                   span: S,
      .                   msg: &str,
      .               ) -> &'tcx Const<'tcx> {
      .                   self.sess.delay_span_bug(span, msg);
      .                   self.mk_const(ty::Const { val: ty::ConstKind::Error(DelaySpanBugEmitted(())), ty })
      .               }
      .           
     77 ( 0.00%)      pub fn consider_optimizing<T: Fn() -> String>(self, msg: T) -> bool {
     11 ( 0.00%)          let cname = self.crate_name(LOCAL_CRATE);
     88 ( 0.00%)          self.sess.consider_optimizing(cname.as_str(), msg)
     88 ( 0.00%)      }
      .           
      .               /// Obtain all lang items of this crate and all dependencies (recursively)
 69,811 ( 0.03%)      pub fn lang_items(self) -> &'tcx rustc_hir::lang_items::LanguageItems {
      .                   self.get_lang_items(())
 89,757 ( 0.03%)      }
      .           
      .               /// Obtain the given diagnostic item's `DefId`. Use `is_diagnostic_item` if you just want to
      .               /// compare against another `DefId`, since `is_diagnostic_item` is cheaper.
     77 ( 0.00%)      pub fn get_diagnostic_item(self, name: Symbol) -> Option<DefId> {
      .                   self.all_diagnostic_items(()).name_to_id.get(&name).copied()
     88 ( 0.00%)      }
      .           
      .               /// Obtain the diagnostic item's name
  2,821 ( 0.00%)      pub fn get_diagnostic_name(self, id: DefId) -> Option<Symbol> {
      .                   self.diagnostic_items(id.krate).id_to_name.get(&id).copied()
  3,224 ( 0.00%)      }
      .           
      .               /// Check whether the diagnostic item with the given `name` has the given `DefId`.
  1,197 ( 0.00%)      pub fn is_diagnostic_item(self, name: Symbol, did: DefId) -> bool {
      .                   self.diagnostic_items(did.krate).name_to_id.get(&name) == Some(&did)
  1,368 ( 0.00%)      }
      .           
  1,806 ( 0.00%)      pub fn stability(self) -> &'tcx stability::Index<'tcx> {
      .                   self.stability_index(())
  2,322 ( 0.00%)      }
      .           
 49,798 ( 0.02%)      pub fn features(self) -> &'tcx rustc_feature::Features {
      .                   self.features_query(())
 56,912 ( 0.02%)      }
      .           
      .               pub fn def_key(self, id: DefId) -> rustc_hir::definitions::DefKey {
      .                   // Accessing the DefKey is ok, since it is part of DefPathHash.
  1,697 ( 0.00%)          if let Some(id) = id.as_local() {
      .                       self.untracked_resolutions.definitions.def_key(id)
      .                   } else {
    160 ( 0.00%)              self.untracked_resolutions.cstore.def_key(id)
      .                   }
      .               }
      .           
      .               /// Converts a `DefId` into its fully expanded `DefPath` (every
      .               /// `DefId` is really just an interned `DefPath`).
      .               ///
      .               /// Note that if `id` is not local to this crate, the result will
      .               ///  be a non-local `DefPath`.
-- line 1272 ----------------------------------------
-- line 1277 ----------------------------------------
      .                   } else {
      .                       self.untracked_resolutions.cstore.def_path(id)
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn def_path_hash(self, def_id: DefId) -> rustc_hir::definitions::DefPathHash {
      .                   // Accessing the DefPathHash is ok, it is incr. comp. stable.
  1,003 ( 0.00%)          if let Some(def_id) = def_id.as_local() {
      .                       self.untracked_resolutions.definitions.def_path_hash(def_id)
      .                   } else {
    104 ( 0.00%)              self.untracked_resolutions.cstore.def_path_hash(def_id)
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn stable_crate_id(self, crate_num: CrateNum) -> StableCrateId {
      .                   if crate_num == LOCAL_CRATE {
      .                       self.sess.local_stable_crate_id()
      .                   } else {
-- line 1296 ----------------------------------------
-- line 1353 ----------------------------------------
      .                       &(format!("{:08x}", stable_crate_id.to_u64()))[..4],
      .                       self.def_path(def_id).to_string_no_crate_verbose()
      .                   )
      .               }
      .           
      .               /// Note that this is *untracked* and should only be used within the query
      .               /// system if the result is otherwise tracked through queries
      .               pub fn cstore_untracked(self) -> &'tcx ty::CrateStoreDyn {
  9,116 ( 0.00%)          &*self.untracked_resolutions.cstore
  4,558 ( 0.00%)      }
      .           
      .               /// Note that this is *untracked* and should only be used within the query
      .               /// system if the result is otherwise tracked through queries
      .               pub fn definitions_untracked(self) -> &'tcx hir::definitions::Definitions {
      .                   &self.untracked_resolutions.definitions
      .               }
      .           
      .               #[inline(always)]
      .               pub fn create_stable_hashing_context(self) -> StableHashingContext<'tcx> {
      1 ( 0.00%)          let resolutions = &self.gcx.untracked_resolutions;
      4 ( 0.00%)          StableHashingContext::new(self.sess, &resolutions.definitions, &*resolutions.cstore)
      .               }
      .           
      .               #[inline(always)]
      .               pub fn create_no_span_stable_hashing_context(self) -> StableHashingContext<'tcx> {
      .                   let resolutions = &self.gcx.untracked_resolutions;
      .                   StableHashingContext::ignore_spans(
      .                       self.sess,
      .                       &resolutions.definitions,
-- line 1381 ----------------------------------------
-- line 1390 ----------------------------------------
      .               /// If `true`, we should use the MIR-based borrowck, but also
      .               /// fall back on the AST borrowck if the MIR-based one errors.
      .               pub fn migrate_borrowck(self) -> bool {
      .                   self.borrowck_mode().migrate()
      .               }
      .           
      .               /// What mode(s) of borrowck should we run? AST? MIR? both?
      .               /// (Also considers the `#![feature(nll)]` setting.)
    154 ( 0.00%)      pub fn borrowck_mode(self) -> BorrowckMode {
      .                   // Here are the main constraints we need to deal with:
      .                   //
      .                   // 1. An opts.borrowck_mode of `BorrowckMode::Migrate` is
      .                   //    synonymous with no `-Z borrowck=...` flag at all.
      .                   //
      .                   // 2. We want to allow developers on the Nightly channel
      .                   //    to opt back into the "hard error" mode for NLL,
      .                   //    (which they can do via specifying `#![feature(nll)]`
-- line 1406 ----------------------------------------
-- line 1413 ----------------------------------------
      .                   //   errors. (To simplify the code here, it now even overrides
      .                   //   a user's attempt to specify `-Z borrowck=compare`, which
      .                   //   we arguably do not need anymore and should remove.)
      .                   //
      .                   // * Otherwise, if no `-Z borrowck=...` then use migrate mode
      .                   //
      .                   // * Otherwise, use the behavior requested via `-Z borrowck=...`
      .           
    231 ( 0.00%)          if self.features().nll {
      .                       return BorrowckMode::Mir;
      .                   }
      .           
     77 ( 0.00%)          self.sess.opts.borrowck_mode
    308 ( 0.00%)      }
      .           
      .               /// If `true`, we should use lazy normalization for constants, otherwise
      .               /// we still evaluate them eagerly.
      .               #[inline]
      .               pub fn lazy_normalization(self) -> bool {
      .                   let features = self.features();
      .                   // Note: We only use lazy normalization for generic const expressions.
      .                   features.generic_const_exprs
-- line 1434 ----------------------------------------
-- line 1554 ----------------------------------------
      .                   self.mk_imm_ref(
      .                       self.lifetimes.re_static,
      .                       self.type_of(self.require_lang_item(LangItem::PanicLocation, None))
      .                           .subst(self, self.mk_substs([self.lifetimes.re_static.into()].iter())),
      .                   )
      .               }
      .           
      .               /// Returns a displayable description and article for the given `def_id` (e.g. `("a", "struct")`).
    330 ( 0.00%)      pub fn article_and_description(self, def_id: DefId) -> (&'static str, &'static str) {
    240 ( 0.00%)          match self.def_kind(def_id) {
      .                       DefKind::Generator => match self.generator_kind(def_id).unwrap() {
      .                           rustc_hir::GeneratorKind::Async(..) => ("an", "async closure"),
      .                           rustc_hir::GeneratorKind::Gen => ("a", "generator"),
      .                       },
    540 ( 0.00%)              def_kind => (def_kind.article(), def_kind.descr(def_id)),
      .                   }
    270 ( 0.00%)      }
      .           
      .               pub fn type_length_limit(self) -> Limit {
      .                   self.limits(()).type_length_limit
      .               }
      .           
 20,545 ( 0.01%)      pub fn recursion_limit(self) -> Limit {
      .                   self.limits(()).recursion_limit
 23,480 ( 0.01%)      }
      .           
      .               pub fn move_size_limit(self) -> Limit {
      .                   self.limits(()).move_size_limit
      .               }
      .           
      .               pub fn const_eval_limit(self) -> Limit {
      .                   self.limits(()).const_eval_limit
      .               }
-- line 1586 ----------------------------------------
-- line 1684 ----------------------------------------
      .               /// This is the implicit state of rustc. It contains the current
      .               /// `TyCtxt` and query. It is updated when creating a local interner or
      .               /// executing a new query. Whenever there's a `TyCtxt` value available
      .               /// you should also have access to an `ImplicitCtxt` through the functions
      .               /// in this module.
      .               #[derive(Clone)]
      .               pub struct ImplicitCtxt<'a, 'tcx> {
      .                   /// The current `TyCtxt`.
      1 ( 0.00%)          pub tcx: TyCtxt<'tcx>,
      .           
      .                   /// The current query job, if any. This is updated by `JobOwner::start` in
      .                   /// `ty::query::plumbing` when executing a query.
      .                   pub query: Option<query::QueryJobId<DepKind>>,
      .           
      .                   /// Where to store diagnostics for the current query job, if any.
      .                   /// This is updated by `JobOwner::start` in `ty::query::plumbing` when executing a query.
      .                   pub diagnostics: Option<&'a Lock<ThinVec<Diagnostic>>>,
-- line 1700 ----------------------------------------
-- line 1703 ----------------------------------------
      .                   pub layout_depth: usize,
      .           
      .                   /// The current dep graph task. This is used to add dependencies to queries
      .                   /// when executing them.
      .                   pub task_deps: TaskDepsRef<'a>,
      .               }
      .           
      .               impl<'a, 'tcx> ImplicitCtxt<'a, 'tcx> {
      5 ( 0.00%)          pub fn new(gcx: &'tcx GlobalCtxt<'tcx>) -> Self {
      .                       let tcx = TyCtxt { gcx };
     25 ( 0.00%)              ImplicitCtxt {
      .                           tcx,
      .                           query: None,
      .                           diagnostics: None,
      .                           layout_depth: 0,
      .                           task_deps: TaskDepsRef::Ignore,
      .                       }
      5 ( 0.00%)          }
      .               }
      .           
      .               /// Sets Rayon's thread-local variable, which is preserved for Rayon jobs
      .               /// to `value` during the call to `f`. It is restored to its previous value after.
      .               /// This is used to set the pointer to the new `ImplicitCtxt`.
      .               #[cfg(parallel_compiler)]
      .               #[inline]
      .               fn set_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {
-- line 1728 ----------------------------------------
-- line 1745 ----------------------------------------
      .           
      .               /// Sets TLV to `value` during the call to `f`.
      .               /// It is restored to its previous value after.
      .               /// This is used to set the pointer to the new `ImplicitCtxt`.
      .               #[cfg(not(parallel_compiler))]
      .               #[inline]
      .               fn set_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {
      .                   let old = get_tlv();
 13,773 ( 0.01%)          let _reset = rustc_data_structures::OnDrop(move || TLV.with(|tlv| tlv.set(old)));
      .                   TLV.with(|tlv| tlv.set(value));
      .                   f()
      .               }
      .           
      .               /// Gets the pointer to the current `ImplicitCtxt`.
      .               #[cfg(not(parallel_compiler))]
      .               #[inline]
      .               fn get_tlv() -> usize {
-- line 1761 ----------------------------------------
-- line 1763 ----------------------------------------
      .               }
      .           
      .               /// Sets `context` as the new current `ImplicitCtxt` for the duration of the function `f`.
      .               #[inline]
      .               pub fn enter_context<'a, 'tcx, F, R>(context: &ImplicitCtxt<'a, 'tcx>, f: F) -> R
      .               where
      .                   F: FnOnce(&ImplicitCtxt<'a, 'tcx>) -> R,
      .               {
      1 ( 0.00%)          set_tlv(context as *const _ as usize, || f(&context))
      .               }
      .           
      .               /// Allows access to the current `ImplicitCtxt` in a closure if one is available.
      .               #[inline]
      .               pub fn with_context_opt<F, R>(f: F) -> R
      .               where
      .                   F: for<'a, 'tcx> FnOnce(Option<&ImplicitCtxt<'a, 'tcx>>) -> R,
      .               {
      .                   let context = get_tlv();
 53,553 ( 0.02%)          if context == 0 {
      .                       f(None)
      .                   } else {
      .                       // We could get an `ImplicitCtxt` pointer from another thread.
      .                       // Ensure that `ImplicitCtxt` is `Sync`.
      .                       sync::assert_sync::<ImplicitCtxt<'_, '_>>();
      .           
      .                       unsafe { f(Some(&*(context as *const ImplicitCtxt<'_, '_>))) }
      .                   }
-- line 1789 ----------------------------------------
-- line 1805 ----------------------------------------
      .               /// This will panic if you pass it a `TyCtxt` which is different from the current
      .               /// `ImplicitCtxt`'s `tcx` field.
      .               #[inline]
      .               pub fn with_related_context<'tcx, F, R>(tcx: TyCtxt<'tcx>, f: F) -> R
      .               where
      .                   F: FnOnce(&ImplicitCtxt<'_, 'tcx>) -> R,
      .               {
      .                   with_context(|context| unsafe {
 26,521 ( 0.01%)              assert!(ptr_eq(context.tcx.gcx, tcx.gcx));
      .                       let context: &ImplicitCtxt<'_, '_> = mem::transmute(context);
 26,502 ( 0.01%)              f(context)
      .                   })
      .               }
      .           
      .               /// Allows access to the `TyCtxt` in the current `ImplicitCtxt`.
      .               /// Panics if there is no `ImplicitCtxt` available.
      .               #[inline]
      .               pub fn with<F, R>(f: F) -> R
      .               where
-- line 1823 ----------------------------------------
-- line 1981 ----------------------------------------
      .               fn into_pointer(&self) -> *const () {
      .                   self.0 as *const _ as *const ()
      .               }
      .           }
      .           
      .           #[allow(rustc::usage_of_ty_tykind)]
      .           impl<'tcx> Borrow<TyKind<'tcx>> for Interned<'tcx, TyS<'tcx>> {
      .               fn borrow<'a>(&'a self) -> &'a TyKind<'tcx> {
 24,608 ( 0.01%)          &self.0.kind()
      .               }
      .           }
      .           
      .           impl<'tcx> PartialEq for Interned<'tcx, TyS<'tcx>> {
      .               fn eq(&self, other: &Interned<'tcx, TyS<'tcx>>) -> bool {
      .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
      .                   // `x == y`.
      .                   self.0.kind() == other.0.kind()
-- line 1997 ----------------------------------------
-- line 1998 ----------------------------------------
      .               }
      .           }
      .           
      .           impl<'tcx> Eq for Interned<'tcx, TyS<'tcx>> {}
      .           
      .           impl<'tcx> Hash for Interned<'tcx, TyS<'tcx>> {
      .               fn hash<H: Hasher>(&self, s: &mut H) {
      .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
 21,492 ( 0.01%)          self.0.kind().hash(s)
      .               }
      .           }
      .           
      .           impl<'tcx> Borrow<Binder<'tcx, PredicateKind<'tcx>>> for Interned<'tcx, PredicateInner<'tcx>> {
      .               fn borrow<'a>(&'a self) -> &'a Binder<'tcx, PredicateKind<'tcx>> {
  5,385 ( 0.00%)          &self.0.kind
      .               }
      .           }
      .           
      .           impl<'tcx> PartialEq for Interned<'tcx, PredicateInner<'tcx>> {
      .               fn eq(&self, other: &Interned<'tcx, PredicateInner<'tcx>>) -> bool {
      .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
      .                   // `x == y`.
      .                   self.0.kind == other.0.kind
-- line 2020 ----------------------------------------
-- line 2021 ----------------------------------------
      .               }
      .           }
      .           
      .           impl<'tcx> Eq for Interned<'tcx, PredicateInner<'tcx>> {}
      .           
      .           impl<'tcx> Hash for Interned<'tcx, PredicateInner<'tcx>> {
      .               fn hash<H: Hasher>(&self, s: &mut H) {
      .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
  3,580 ( 0.00%)          self.0.kind.hash(s)
      .               }
      .           }
      .           
      .           impl<'tcx, T> Borrow<[T]> for Interned<'tcx, List<T>> {
      .               fn borrow<'a>(&'a self) -> &'a [T] {
 19,381 ( 0.01%)          &self.0[..]
      .               }
      .           }
      .           
      .           impl<'tcx, T: PartialEq> PartialEq for Interned<'tcx, List<T>> {
      .               fn eq(&self, other: &Interned<'tcx, List<T>>) -> bool {
      .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
      .                   // `x == y`.
      .                   self.0[..] == other.0[..]
-- line 2043 ----------------------------------------
-- line 2044 ----------------------------------------
      .               }
      .           }
      .           
      .           impl<'tcx, T: Eq> Eq for Interned<'tcx, List<T>> {}
      .           
      .           impl<'tcx, T: Hash> Hash for Interned<'tcx, List<T>> {
      .               fn hash<H: Hasher>(&self, s: &mut H) {
      .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
  4,599 ( 0.00%)          self.0[..].hash(s)
      .               }
      .           }
      .           
      .           macro_rules! direct_interners {
      .               ($($name:ident: $method:ident($ty:ty),)+) => {
      .                   $(impl<'tcx> Borrow<$ty> for Interned<'tcx, $ty> {
      .                       fn borrow<'a>(&'a self) -> &'a $ty {
 10,997 ( 0.00%)                  &self.0
      .                       }
      .                   }
      .           
      .                   impl<'tcx> PartialEq for Interned<'tcx, $ty> {
      .                       fn eq(&self, other: &Self) -> bool {
      .                           // The `Borrow` trait requires that `x.borrow() == y.borrow()`
      .                           // equals `x == y`.
      .                           self.0 == other.0
-- line 2068 ----------------------------------------
-- line 2070 ----------------------------------------
      .                   }
      .           
      .                   impl<'tcx> Eq for Interned<'tcx, $ty> {}
      .           
      .                   impl<'tcx> Hash for Interned<'tcx, $ty> {
      .                       fn hash<H: Hasher>(&self, s: &mut H) {
      .                           // The `Borrow` trait requires that `x.borrow().hash(s) ==
      .                           // x.hash(s)`.
  6,268 ( 0.00%)                  self.0.hash(s)
      .                       }
      .                   }
      .           
      .                   impl<'tcx> TyCtxt<'tcx> {
 96,642 ( 0.04%)              pub fn $method(self, v: $ty) -> &'tcx $ty {
 49,067 ( 0.02%)                  self.interners.$name.intern(v, |v| {
  1,240 ( 0.00%)                      Interned(self.interners.arena.alloc(v))
      .                           }).0
108,567 ( 0.04%)              }
      .                   })+
      .               }
      .           }
      .           
      .           direct_interners! {
      .               region: mk_region(RegionKind),
      .               const_: mk_const(Const<'tcx>),
      .               const_allocation: intern_const_alloc(Allocation),
-- line 2095 ----------------------------------------
-- line 2097 ----------------------------------------
      .               adt_def: intern_adt_def(AdtDef),
      .               stability: intern_stability(attr::Stability),
      .               const_stability: intern_const_stability(attr::ConstStability),
      .           }
      .           
      .           macro_rules! slice_interners {
      .               ($($field:ident: $method:ident($ty:ty)),+ $(,)?) => (
      .                   impl<'tcx> TyCtxt<'tcx> {
234,376 ( 0.09%)              $(pub fn $method(self, v: &[$ty]) -> &'tcx List<$ty> {
      .                           self.interners.$field.intern_ref(v, || {
      .                               Interned(List::from_arena(&*self.arena, v))
      .                           }).0
208,674 ( 0.08%)              })+
      .                   }
      .               );
      .           }
      .           
      .           slice_interners!(
      .               type_list: _intern_type_list(Ty<'tcx>),
      .               substs: _intern_substs(GenericArg<'tcx>),
      .               canonical_var_infos: _intern_canonical_var_infos(CanonicalVarInfo<'tcx>),
-- line 2117 ----------------------------------------
-- line 2188 ----------------------------------------
      .                       self.mk_fn_sig(params_iter, s.output(), s.c_variadic, unsafety, abi::Abi::Rust)
      .                   })
      .               }
      .           
      .               /// Same a `self.mk_region(kind)`, but avoids accessing the interners if
      .               /// `*r == kind`.
      .               #[inline]
      .               pub fn reuse_or_mk_region(self, r: Region<'tcx>, kind: RegionKind) -> Region<'tcx> {
 10,876 ( 0.00%)          if *r == kind { r } else { self.mk_region(kind) }
      .               }
      .           
      .               #[allow(rustc::usage_of_ty_tykind)]
      .               #[inline]
      .               pub fn mk_ty(self, st: TyKind<'tcx>) -> Ty<'tcx> {
200,059 ( 0.08%)          self.interners.intern_ty(st)
      .               }
      .           
      .               #[inline]
      .               pub fn mk_predicate(self, binder: Binder<'tcx, PredicateKind<'tcx>>) -> Predicate<'tcx> {
 87,087 ( 0.03%)          let inner = self.interners.intern_predicate(binder);
      .                   Predicate { inner }
      .               }
      .           
      .               #[inline]
 64,832 ( 0.03%)      pub fn reuse_or_mk_predicate(
      .                   self,
      .                   pred: Predicate<'tcx>,
      .                   binder: Binder<'tcx, PredicateKind<'tcx>>,
      .               ) -> Predicate<'tcx> {
  4,959 ( 0.00%)          if pred.kind() != binder { self.mk_predicate(binder) } else { pred }
 64,832 ( 0.03%)      }
      .           
      .               pub fn mk_mach_int(self, tm: IntTy) -> Ty<'tcx> {
      .                   match tm {
      .                       IntTy::Isize => self.types.isize,
      .                       IntTy::I8 => self.types.i8,
      .                       IntTy::I16 => self.types.i16,
      .                       IntTy::I32 => self.types.i32,
      .                       IntTy::I64 => self.types.i64,
      .                       IntTy::I128 => self.types.i128,
      .                   }
      .               }
      .           
      .               pub fn mk_mach_uint(self, tm: UintTy) -> Ty<'tcx> {
      8 ( 0.00%)          match tm {
      .                       UintTy::Usize => self.types.usize,
      .                       UintTy::U8 => self.types.u8,
      .                       UintTy::U16 => self.types.u16,
      .                       UintTy::U32 => self.types.u32,
      .                       UintTy::U64 => self.types.u64,
      .                       UintTy::U128 => self.types.u128,
      .                   }
      8 ( 0.00%)      }
      .           
      .               pub fn mk_mach_float(self, tm: FloatTy) -> Ty<'tcx> {
      .                   match tm {
      .                       FloatTy::F32 => self.types.f32,
      .                       FloatTy::F64 => self.types.f64,
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn mk_static_str(self) -> Ty<'tcx> {
     74 ( 0.00%)          self.mk_imm_ref(self.lifetimes.re_static, self.types.str_)
      .               }
      .           
      .               #[inline]
      .               pub fn mk_adt(self, def: &'tcx AdtDef, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
      .                   // Take a copy of substs so that we own the vectors inside.
      .                   self.mk_ty(Adt(def, substs))
      .               }
      .           
-- line 2259 ----------------------------------------
-- line 2345 ----------------------------------------
      .           
      .               #[inline]
      .               pub fn intern_tup(self, ts: &[Ty<'tcx>]) -> Ty<'tcx> {
      .                   let kinds: Vec<_> = ts.iter().map(|&t| GenericArg::from(t)).collect();
      .                   self.mk_ty(Tuple(self.intern_substs(&kinds)))
      .               }
      .           
      .               pub fn mk_tup<I: InternAs<[Ty<'tcx>], Ty<'tcx>>>(self, iter: I) -> I::Output {
    400 ( 0.00%)          iter.intern_with(|ts| {
    108 ( 0.00%)              let kinds: Vec<_> = ts.iter().map(|&t| GenericArg::from(t)).collect();
  1,140 ( 0.00%)              self.mk_ty(Tuple(self.intern_substs(&kinds)))
    360 ( 0.00%)          })
      .               }
      .           
      .               #[inline]
      .               pub fn mk_unit(self) -> Ty<'tcx> {
     12 ( 0.00%)          self.types.unit
      .               }
      .           
      .               #[inline]
      .               pub fn mk_diverging_default(self) -> Ty<'tcx> {
      .                   if self.features().never_type_fallback { self.types.never } else { self.types.unit }
      .               }
      .           
      .               #[inline]
      .               pub fn mk_fn_def(self, def_id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
      .                   self.mk_ty(FnDef(def_id, substs))
      .               }
      .           
      .               #[inline]
      .               pub fn mk_fn_ptr(self, fty: PolyFnSig<'tcx>) -> Ty<'tcx> {
    134 ( 0.00%)          self.mk_ty(FnPtr(fty))
      .               }
      .           
      .               #[inline]
      .               pub fn mk_dynamic(
      .                   self,
      .                   obj: &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>>,
      .                   reg: ty::Region<'tcx>,
      .               ) -> Ty<'tcx> {
-- line 2384 ----------------------------------------
-- line 2445 ----------------------------------------
      .                   self.mk_ty(Param(ParamTy { index, name }))
      .               }
      .           
      .               #[inline]
      .               pub fn mk_const_param(self, index: u32, name: Symbol, ty: Ty<'tcx>) -> &'tcx Const<'tcx> {
      .                   self.mk_const(ty::Const { val: ty::ConstKind::Param(ParamConst { index, name }), ty })
      .               }
      .           
    511 ( 0.00%)      pub fn mk_param_from_def(self, param: &ty::GenericParamDef) -> GenericArg<'tcx> {
    355 ( 0.00%)          match param.kind {
      .                       GenericParamDefKind::Lifetime => {
     30 ( 0.00%)                  self.mk_region(ty::ReEarlyBound(param.to_early_bound_region_data())).into()
      .                       }
    136 ( 0.00%)              GenericParamDefKind::Type { .. } => self.mk_ty_param(param.index, param.name).into(),
      .                       GenericParamDefKind::Const { .. } => {
      .                           self.mk_const_param(param.index, param.name, self.type_of(param.def_id)).into()
      .                       }
      .                   }
    511 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn mk_opaque(self, def_id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
      .                   self.mk_ty(Opaque(def_id, substs))
      .               }
      .           
     10 ( 0.00%)      pub fn mk_place_field(self, place: Place<'tcx>, f: Field, ty: Ty<'tcx>) -> Place<'tcx> {
     10 ( 0.00%)          self.mk_place_elem(place, PlaceElem::Field(f, ty))
     20 ( 0.00%)      }
      .           
      .               pub fn mk_place_deref(self, place: Place<'tcx>) -> Place<'tcx> {
      .                   self.mk_place_elem(place, PlaceElem::Deref)
      .               }
      .           
     10 ( 0.00%)      pub fn mk_place_downcast(
      .                   self,
      .                   place: Place<'tcx>,
      .                   adt_def: &'tcx AdtDef,
      .                   variant_index: VariantIdx,
      .               ) -> Place<'tcx> {
     10 ( 0.00%)          self.mk_place_elem(
      .                       place,
     20 ( 0.00%)              PlaceElem::Downcast(Some(adt_def.variants[variant_index].name), variant_index),
      .                   )
     20 ( 0.00%)      }
      .           
      .               pub fn mk_place_downcast_unnamed(
      .                   self,
      .                   place: Place<'tcx>,
      .                   variant_index: VariantIdx,
      .               ) -> Place<'tcx> {
      .                   self.mk_place_elem(place, PlaceElem::Downcast(None, variant_index))
      .               }
-- line 2496 ----------------------------------------
-- line 2497 ----------------------------------------
      .           
      .               pub fn mk_place_index(self, place: Place<'tcx>, index: Local) -> Place<'tcx> {
      .                   self.mk_place_elem(place, PlaceElem::Index(index))
      .               }
      .           
      .               /// This method copies `Place`'s projection, add an element and reintern it. Should not be used
      .               /// to build a full `Place` it's just a convenient way to grab a projection and modify it in
      .               /// flight.
    180 ( 0.00%)      pub fn mk_place_elem(self, place: Place<'tcx>, elem: PlaceElem<'tcx>) -> Place<'tcx> {
      .                   let mut projection = place.projection.to_vec();
      .                   projection.push(elem);
      .           
      .                   Place { local: place.local, projection: self.intern_place_elems(&projection) }
    200 ( 0.00%)      }
      .           
  1,197 ( 0.00%)      pub fn intern_poly_existential_predicates(
      .                   self,
      .                   eps: &[ty::Binder<'tcx, ExistentialPredicate<'tcx>>],
      .               ) -> &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>> {
    171 ( 0.00%)          assert!(!eps.is_empty());
      .                   assert!(
      .                       eps.array_windows()
     30 ( 0.00%)                  .all(|[a, b]| a.skip_binder().stable_cmp(self, &b.skip_binder())
      .                               != Ordering::Greater)
      .                   );
    684 ( 0.00%)          self._intern_poly_existential_predicates(eps)
  1,368 ( 0.00%)      }
      .           
      .               pub fn intern_predicates(self, preds: &[Predicate<'tcx>]) -> &'tcx List<Predicate<'tcx>> {
      .                   // FIXME consider asking the input slice to be sorted to avoid
      .                   // re-interning permutations, in which case that would be asserted
      .                   // here.
  1,217 ( 0.00%)          if preds.is_empty() {
      .                       // The macro-generated method below asserts we don't intern an empty slice.
      .                       List::empty()
      .                   } else {
    121 ( 0.00%)              self._intern_predicates(preds)
      .                   }
  2,192 ( 0.00%)      }
      .           
      .               pub fn intern_type_list(self, ts: &[Ty<'tcx>]) -> &'tcx List<Ty<'tcx>> {
  4,006 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_type_list(ts) }
     32 ( 0.00%)      }
      .           
      .               pub fn intern_substs(self, ts: &[GenericArg<'tcx>]) -> &'tcx List<GenericArg<'tcx>> {
 36,375 ( 0.01%)          if ts.is_empty() { List::empty() } else { self._intern_substs(ts) }
  5,086 ( 0.00%)      }
      .           
      .               pub fn intern_projs(self, ps: &[ProjectionKind]) -> &'tcx List<ProjectionKind> {
      .                   if ps.is_empty() { List::empty() } else { self._intern_projs(ps) }
      .               }
      .           
      .               pub fn intern_place_elems(self, ts: &[PlaceElem<'tcx>]) -> &'tcx List<PlaceElem<'tcx>> {
  1,853 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_place_elems(ts) }
    214 ( 0.00%)      }
      .           
      .               pub fn intern_canonical_var_infos(
      .                   self,
      .                   ts: &[CanonicalVarInfo<'tcx>],
      .               ) -> CanonicalVarInfos<'tcx> {
  2,944 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_canonical_var_infos(ts) }
      .               }
      .           
      .               pub fn intern_bound_variable_kinds(
      .                   self,
      .                   ts: &[ty::BoundVariableKind],
      .               ) -> &'tcx List<ty::BoundVariableKind> {
    692 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_bound_variable_kinds(ts) }
    812 ( 0.00%)      }
      .           
      .               pub fn mk_fn_sig<I>(
      .                   self,
      .                   inputs: I,
      .                   output: I::Item,
      .                   c_variadic: bool,
      .                   unsafety: hir::Unsafety,
      .                   abi: abi::Abi,
      .               ) -> <I::Item as InternIteratorElement<Ty<'tcx>, ty::FnSig<'tcx>>>::Output
      .               where
      .                   I: Iterator<Item: InternIteratorElement<Ty<'tcx>, ty::FnSig<'tcx>>>,
      .               {
      .                   inputs.chain(iter::once(output)).intern_with(|xs| ty::FnSig {
    498 ( 0.00%)              inputs_and_output: self.intern_type_list(xs),
    122 ( 0.00%)              c_variadic,
    156 ( 0.00%)              unsafety,
    176 ( 0.00%)              abi,
      .                   })
      .               }
      .           
      .               pub fn mk_poly_existential_predicates<
      .                   I: InternAs<
      .                       [ty::Binder<'tcx, ExistentialPredicate<'tcx>>],
      .                       &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>>,
      .                   >,
      .               >(
      .                   self,
      .                   iter: I,
      .               ) -> I::Output {
    675 ( 0.00%)          iter.intern_with(|xs| self.intern_poly_existential_predicates(xs))
      .               }
      .           
      .               pub fn mk_predicates<I: InternAs<[Predicate<'tcx>], &'tcx List<Predicate<'tcx>>>>(
      .                   self,
      .                   iter: I,
      .               ) -> I::Output {
      .                   iter.intern_with(|xs| self.intern_predicates(xs))
      .               }
      .           
      .               pub fn mk_type_list<I: InternAs<[Ty<'tcx>], &'tcx List<Ty<'tcx>>>>(self, iter: I) -> I::Output {
    636 ( 0.00%)          iter.intern_with(|xs| self.intern_type_list(xs))
      .               }
      .           
      .               pub fn mk_substs<I: InternAs<[GenericArg<'tcx>], &'tcx List<GenericArg<'tcx>>>>(
      .                   self,
      .                   iter: I,
      .               ) -> I::Output {
 38,693 ( 0.02%)          iter.intern_with(|xs| self.intern_substs(xs))
      .               }
      .           
      .               pub fn mk_place_elems<I: InternAs<[PlaceElem<'tcx>], &'tcx List<PlaceElem<'tcx>>>>(
      .                   self,
      .                   iter: I,
      .               ) -> I::Output {
      .                   iter.intern_with(|xs| self.intern_place_elems(xs))
      .               }
      .           
  2,491 ( 0.00%)      pub fn mk_substs_trait(self, self_ty: Ty<'tcx>, rest: &[GenericArg<'tcx>]) -> SubstsRef<'tcx> {
      .                   self.mk_substs(iter::once(self_ty.into()).chain(rest.iter().cloned()))
  4,982 ( 0.00%)      }
      .           
      .               pub fn mk_bound_variable_kinds<
      .                   I: InternAs<[ty::BoundVariableKind], &'tcx List<ty::BoundVariableKind>>,
      .               >(
      .                   self,
      .                   iter: I,
      .               ) -> I::Output {
  3,167 ( 0.00%)          iter.intern_with(|xs| self.intern_bound_variable_kinds(xs))
      .               }
      .           
      .               /// Walks upwards from `id` to find a node which might change lint levels with attributes.
      .               /// It stops at `bound` and just returns it if reached.
 23,226 ( 0.01%)      pub fn maybe_lint_level_root_bounded(self, mut id: HirId, bound: HirId) -> HirId {
 23,226 ( 0.01%)          let hir = self.hir();
      .                   loop {
 45,960 ( 0.02%)              if id == bound {
      .                           return bound;
      .                       }
      .           
 60,010 ( 0.02%)              if hir.attrs(id).iter().any(|attr| Level::from_symbol(attr.name_or_empty()).is_some()) {
      .                           return id;
      .                       }
      .                       let next = hir.get_parent_node(id);
 36,006 ( 0.01%)              if next == id {
      .                           bug!("lint traversal reached the root of the crate");
      .                       }
      .                       id = next;
      .                   }
 33,180 ( 0.01%)      }
      .           
  1,432 ( 0.00%)      pub fn lint_level_at_node(
      .                   self,
      .                   lint: &'static Lint,
      .                   mut id: hir::HirId,
      .               ) -> (Level, LintLevelSource) {
      .                   let sets = self.lint_levels(());
      .                   loop {
  4,675 ( 0.00%)              if let Some(pair) = sets.level_and_source(lint, id, self.sess) {
      .                           return pair;
      .                       }
    241 ( 0.00%)              let next = self.hir().get_parent_node(id);
    723 ( 0.00%)              if next == id {
      .                           bug!("lint traversal reached the root of the crate");
      .                       }
      .                       id = next;
      .                   }
  1,432 ( 0.00%)      }
      .           
    154 ( 0.00%)      pub fn struct_span_lint_hir(
      .                   self,
      .                   lint: &'static Lint,
      .                   hir_id: HirId,
      .                   span: impl Into<MultiSpan>,
      .                   decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),
      .               ) {
    187 ( 0.00%)          let (level, src) = self.lint_level_at_node(lint, hir_id);
    100 ( 0.00%)          struct_lint_level(self.sess, lint, level, src, Some(span.into()), decorate);
     88 ( 0.00%)      }
      .           
      .               pub fn struct_lint_node(
      .                   self,
      .                   lint: &'static Lint,
      .                   id: HirId,
      .                   decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),
      .               ) {
      .                   let (level, src) = self.lint_level_at_node(lint, id);
      .                   struct_lint_level(self.sess, lint, level, src, None, decorate);
      .               }
      .           
    476 ( 0.00%)      pub fn in_scope_traits(self, id: HirId) -> Option<&'tcx [TraitCandidate]> {
    136 ( 0.00%)          let map = self.in_scope_traits_map(id.owner)?;
      .                   let candidates = map.get(&id.local_id)?;
    136 ( 0.00%)          Some(&*candidates)
    544 ( 0.00%)      }
      .           
  3,087 ( 0.00%)      pub fn named_region(self, id: HirId) -> Option<resolve_lifetime::Region> {
      .                   debug!(?id, "named_region");
      .                   self.named_region_map(id.owner).and_then(|map| map.get(&id.local_id).cloned())
  3,969 ( 0.00%)      }
      .           
     18 ( 0.00%)      pub fn is_late_bound(self, id: HirId) -> bool {
      .                   self.is_late_bound_map(id.owner)
      1 ( 0.00%)              .map_or(false, |(owner, set)| owner == id.owner && set.contains(&id.local_id))
     16 ( 0.00%)      }
      .           
  1,981 ( 0.00%)      pub fn object_lifetime_defaults(self, id: HirId) -> Option<Vec<ObjectLifetimeDefault>> {
      .                   self.object_lifetime_defaults_map(id.owner)
  2,547 ( 0.00%)      }
      .           
  1,728 ( 0.00%)      pub fn late_bound_vars(self, id: HirId) -> &'tcx List<ty::BoundVariableKind> {
      .                   self.mk_bound_variable_kinds(
      .                       self.late_bound_vars_map(id.owner)
      .                           .and_then(|map| map.get(&id.local_id).cloned())
      .                           .unwrap_or_else(|| {
      .                               bug!("No bound vars found for {:?} ({:?})", self.hir().node_to_string(id), id)
      .                           })
      .                           .iter(),
      .                   )
  1,728 ( 0.00%)      }
      .           
      .               pub fn lifetime_scope(self, id: HirId) -> Option<LifetimeScopeForPath> {
      .                   self.lifetime_scope_map(id.owner).and_then(|mut map| map.remove(&id.local_id))
      .               }
      .           
      .               /// Whether the `def_id` counts as const fn in the current crate, considering all active
      .               /// feature gates
     30 ( 0.00%)      pub fn is_const_fn(self, def_id: DefId) -> bool {
      3 ( 0.00%)          if self.is_const_fn_raw(def_id) {
      2 ( 0.00%)              match self.lookup_const_stability(def_id) {
      4 ( 0.00%)                  Some(stability) if stability.level.is_unstable() => {
      .                               // has a `rustc_const_unstable` attribute, check whether the user enabled the
      .                               // corresponding feature gate.
      2 ( 0.00%)                      self.features()
      .                                   .declared_lib_features
      .                                   .iter()
      .                                   .any(|&(sym, _)| sym == stability.feature)
      .                           }
      .                           // functions without const stability are either stable user written
      .                           // const fn or the user is using feature gates and we thus don't
      .                           // care what they do
      .                           _ => true,
      .                       }
      .                   } else {
      .                       false
      .                   }
     27 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> TyCtxtAt<'tcx> {
      .               /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` to ensure it gets used.
      .               #[track_caller]
      .               pub fn ty_error(self) -> Ty<'tcx> {
      .                   self.tcx.ty_error_with_message(self.span, "TyKind::Error constructed but no error reported")
      .               }
-- line 2759 ----------------------------------------
-- line 2774 ----------------------------------------
      .           }
      .           
      .           impl<I, T, R, E> InternAs<[T], R> for I
      .           where
      .               E: InternIteratorElement<T, R>,
      .               I: Iterator<Item = E>,
      .           {
      .               type Output = E::Output;
 18,384 ( 0.01%)      fn intern_with<F>(self, f: F) -> Self::Output
      .               where
      .                   F: FnOnce(&[T]) -> R,
      .               {
 92,369 ( 0.04%)          E::intern_with(self, f)
 18,936 ( 0.01%)      }
      .           }
      .           
      .           pub trait InternIteratorElement<T, R>: Sized {
      .               type Output;
      .               fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(iter: I, f: F) -> Self::Output;
      .           }
      .           
      .           impl<T, R> InternIteratorElement<T, R> for T {
      .               type Output = R;
 15,212 ( 0.01%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(
      .                   mut iter: I,
      .                   f: F,
      .               ) -> Self::Output {
      .                   // This code is hot enough that it's worth specializing for the most
      .                   // common length lists, to avoid the overhead of `SmallVec` creation.
      .                   // Lengths 0, 1, and 2 typically account for ~95% of cases. If
      .                   // `size_hint` is incorrect a panic will occur via an `unwrap` or an
      .                   // `assert`.
 25,044 ( 0.01%)          match iter.size_hint() {
      .                       (0, Some(0)) => {
      .                           assert!(iter.next().is_none());
      .                           f(&[])
      .                       }
      .                       (1, Some(1)) => {
      .                           let t0 = iter.next().unwrap();
     10 ( 0.00%)                  assert!(iter.next().is_none());
  3,836 ( 0.00%)                  f(&[t0])
      .                       }
      .                       (2, Some(2)) => {
      .                           let t0 = iter.next().unwrap();
      .                           let t1 = iter.next().unwrap();
     34 ( 0.00%)                  assert!(iter.next().is_none());
  2,743 ( 0.00%)                  f(&[t0, t1])
      .                       }
    352 ( 0.00%)              _ => f(&iter.collect::<SmallVec<[_; 8]>>()),
      .                   }
 15,425 ( 0.01%)      }
      .           }
      .           
      .           impl<'a, T, R> InternIteratorElement<T, R> for &'a T
      .           where
      .               T: Clone + 'a,
      .           {
      .               type Output = R;
    985 ( 0.00%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(iter: I, f: F) -> Self::Output {
      .                   // This code isn't hot.
      .                   f(&iter.cloned().collect::<SmallVec<[_; 8]>>())
    788 ( 0.00%)      }
      .           }
      .           
      .           impl<T, R, E> InternIteratorElement<T, R> for Result<T, E> {
      .               type Output = Result<R, E>;
 26,921 ( 0.01%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(
      .                   mut iter: I,
      .                   f: F,
      .               ) -> Self::Output {
      .                   // This code is hot enough that it's worth specializing for the most
      .                   // common length lists, to avoid the overhead of `SmallVec` creation.
      .                   // Lengths 0, 1, and 2 typically account for ~95% of cases. If
      .                   // `size_hint` is incorrect a panic will occur via an `unwrap` or an
      .                   // `assert`, unless a failure happens first, in which case the result
      .                   // will be an error anyway.
 19,892 ( 0.01%)          Ok(match iter.size_hint() {
      .                       (0, Some(0)) => {
      .                           assert!(iter.next().is_none());
      .                           f(&[])
      .                       }
      .                       (1, Some(1)) => {
    483 ( 0.00%)                  let t0 = iter.next().unwrap()?;
      .                           assert!(iter.next().is_none());
  1,723 ( 0.00%)                  f(&[t0])
      .                       }
      .                       (2, Some(2)) => {
     46 ( 0.00%)                  let t0 = iter.next().unwrap()?;
     46 ( 0.00%)                  let t1 = iter.next().unwrap()?;
     69 ( 0.00%)                  assert!(iter.next().is_none());
  2,268 ( 0.00%)                  f(&[t0, t1])
      .                       }
    220 ( 0.00%)              _ => f(&iter.collect::<Result<SmallVec<[_; 8]>, _>>()?),
      .                   })
 29,975 ( 0.01%)      }
      .           }
      .           
      .           // We are comparing types with different invariant lifetimes, so `ptr::eq`
      .           // won't work for us.
      .           fn ptr_eq<T, U>(t: *const T, u: *const U) -> bool {
 26,521 ( 0.01%)      t as *const () == u as *const ()
      .           }
      .           
      .           pub fn provide(providers: &mut ty::query::Providers) {
      2 ( 0.00%)      providers.in_scope_traits_map =
      .                   |tcx, id| tcx.hir_crate(()).owners[id].as_ref().map(|owner_info| &owner_info.trait_map);
      3 ( 0.00%)      providers.resolutions = |tcx, ()| &tcx.untracked_resolutions;
      2 ( 0.00%)      providers.module_reexports =
      .                   |tcx, id| tcx.resolutions(()).reexport_map.get(&id).map(|v| &v[..]);
      2 ( 0.00%)      providers.crate_name = |tcx, id| {
      1 ( 0.00%)          assert_eq!(id, LOCAL_CRATE);
      1 ( 0.00%)          tcx.crate_name
      .               };
      2 ( 0.00%)      providers.maybe_unused_trait_import =
      .                   |tcx, id| tcx.resolutions(()).maybe_unused_trait_imports.contains(&id);
      2 ( 0.00%)      providers.maybe_unused_extern_crates =
      .                   |tcx, ()| &tcx.resolutions(()).maybe_unused_extern_crates[..];
      2 ( 0.00%)      providers.names_imported_by_glob_use = |tcx, id| {
      .                   tcx.arena.alloc(tcx.resolutions(()).glob_map.get(&id).cloned().unwrap_or_default())
      .               };
      .           
     11 ( 0.00%)      providers.lookup_stability = |tcx, id| tcx.stability().local_stability(id.expect_local());
      2 ( 0.00%)      providers.lookup_const_stability =
      .                   |tcx, id| tcx.stability().local_const_stability(id.expect_local());
      2 ( 0.00%)      providers.lookup_deprecation_entry =
  2,048 ( 0.00%)          |tcx, id| tcx.stability().local_deprecation_entry(id.expect_local());
      2 ( 0.00%)      providers.extern_mod_stmt_cnum =
      .                   |tcx, id| tcx.resolutions(()).extern_crate_map.get(&id).cloned();
      3 ( 0.00%)      providers.output_filenames = |tcx, ()| tcx.output_filenames.clone();
      3 ( 0.00%)      providers.features_query = |tcx, ()| tcx.sess.features_untracked();
      2 ( 0.00%)      providers.is_panic_runtime = |tcx, cnum| {
      .                   assert_eq!(cnum, LOCAL_CRATE);
      .                   tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::panic_runtime)
      .               };
      2 ( 0.00%)      providers.is_compiler_builtins = |tcx, cnum| {
      .                   assert_eq!(cnum, LOCAL_CRATE);
      .                   tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::compiler_builtins)
      .               };
      2 ( 0.00%)      providers.has_panic_handler = |tcx, cnum| {
      1 ( 0.00%)          assert_eq!(cnum, LOCAL_CRATE);
      .                   // We want to check if the panic handler was defined in this crate
      3 ( 0.00%)          tcx.lang_items().panic_impl().map_or(false, |did| did.is_local())
      .               };
      .           }

126,756 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/rustc_entry.rs
--------------------------------------------------------------------------------
Ir               

-- line 26 ----------------------------------------
      .               /// }
      .               ///
      .               /// assert_eq!(letters[&'s'], 2);
      .               /// assert_eq!(letters[&'t'], 3);
      .               /// assert_eq!(letters[&'u'], 1);
      .               /// assert_eq!(letters.get(&'y'), None);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
272,677 ( 0.11%)      pub fn rustc_entry(&mut self, key: K) -> RustcEntry<'_, K, V, A> {
      .                   let hash = make_insert_hash(&self.hash_builder, &key);
    167 ( 0.00%)          if let Some(elem) = self.table.find(hash, |q| q.0.eq(&key)) {
 20,372 ( 0.01%)              RustcEntry::Occupied(RustcOccupiedEntry {
  9,722 ( 0.00%)                  key: Some(key),
      .                           elem,
      .                           table: &mut self.table,
      .                       })
      .                   } else {
      .                       // Ideally we would put this in VacantEntry::insert, but Entry is not
      .                       // generic over the BuildHasher and adding a generic parameter would be
      .                       // a breaking change.
      .                       self.reserve(1);
      .           
 74,229 ( 0.03%)              RustcEntry::Vacant(RustcVacantEntry {
      .                           hash,
 12,328 ( 0.00%)                  key,
      .                           table: &mut self.table,
      .                       })
      .                   }
219,898 ( 0.09%)      }
      .           }
      .           
      .           /// A view into a single entry in a map, which may either be vacant or occupied.
      .           ///
      .           /// This `enum` is constructed from the [`entry`] method on [`HashMap`].
      .           ///
      .           /// [`HashMap`]: struct.HashMap.html
      .           /// [`entry`]: struct.HashMap.html#method.rustc_entry
-- line 62 ----------------------------------------
-- line 405 ----------------------------------------
      .               /// if let RustcEntry::Occupied(o) = map.rustc_entry("poneyland") {
      .               ///     *o.into_mut() += 10;
      .               /// }
      .               ///
      .               /// assert_eq!(map["poneyland"], 22);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn into_mut(self) -> &'a mut V {
  2,474 ( 0.00%)          unsafe { &mut self.elem.as_mut().1 }
      .               }
      .           
      .               /// Sets the value of the entry, and returns the entry's old value.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// use hashbrown::HashMap;
-- line 421 ----------------------------------------
-- line 568 ----------------------------------------
      .               /// let mut map: HashMap<&str, u32> = HashMap::new();
      .               ///
      .               /// if let RustcEntry::Vacant(o) = map.rustc_entry("poneyland") {
      .               ///     o.insert(37);
      .               /// }
      .               /// assert_eq!(map["poneyland"], 37);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
  2,983 ( 0.00%)      pub fn insert(self, value: V) -> &'a mut V {
      .                   unsafe {
 11,647 ( 0.00%)              let bucket = self.table.insert_no_grow(self.hash, (self.key, value));
  1,511 ( 0.00%)              &mut bucket.as_mut().1
      .                   }
  3,953 ( 0.00%)      }
      .           
      .               /// Sets the value of the entry with the RustcVacantEntry's key,
      .               /// and returns a RustcOccupiedEntry.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// use hashbrown::HashMap;
-- line 589 ----------------------------------------

 63,084 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/rustc_entry.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs
--------------------------------------------------------------------------------
Ir               

-- line 84 ----------------------------------------
      .           pub struct SessionGlobals {
      .               symbol_interner: symbol::Interner,
      .               span_interner: Lock<span_encoding::SpanInterner>,
      .               hygiene_data: Lock<hygiene::HygieneData>,
      .               source_map: Lock<Option<Lrc<SourceMap>>>,
      .           }
      .           
      .           impl SessionGlobals {
     12 ( 0.00%)      pub fn new(edition: Edition) -> SessionGlobals {
     50 ( 0.00%)          SessionGlobals {
      2 ( 0.00%)              symbol_interner: symbol::Interner::fresh(),
      .                       span_interner: Lock::new(span_encoding::SpanInterner::default()),
      6 ( 0.00%)              hygiene_data: Lock::new(hygiene::HygieneData::new(edition)),
      .                       source_map: Lock::new(None),
      .                   }
     10 ( 0.00%)      }
      .           }
      .           
      .           #[inline]
      .           pub fn create_session_globals_then<R>(edition: Edition, f: impl FnOnce() -> R) -> R {
      1 ( 0.00%)      assert!(
      .                   !SESSION_GLOBALS.is_set(),
      .                   "SESSION_GLOBALS should never be overwritten! \
      .                    Use another thread if you need another SessionGlobals"
      .               );
      3 ( 0.00%)      let session_globals = SessionGlobals::new(edition);
      7 ( 0.00%)      SESSION_GLOBALS.set(&session_globals, f)
      1 ( 0.00%)  }
      .           
      .           #[inline]
      .           pub fn set_session_globals_then<R>(session_globals: &SessionGlobals, f: impl FnOnce() -> R) -> R {
      .               assert!(
      .                   !SESSION_GLOBALS.is_set(),
      .                   "SESSION_GLOBALS should never be overwritten! \
      .                    Use another thread if you need another SessionGlobals"
      .               );
-- line 119 ----------------------------------------
-- line 120 ----------------------------------------
      .               SESSION_GLOBALS.set(session_globals, f)
      .           }
      .           
      .           #[inline]
      .           pub fn create_default_session_if_not_set_then<R, F>(f: F) -> R
      .           where
      .               F: FnOnce(&SessionGlobals) -> R,
      .           {
      4 ( 0.00%)      create_session_if_not_set_then(edition::DEFAULT_EDITION, f)
      .           }
      .           
      .           #[inline]
      .           pub fn create_session_if_not_set_then<R, F>(edition: Edition, f: F) -> R
      .           where
      .               F: FnOnce(&SessionGlobals) -> R,
      .           {
      1 ( 0.00%)      if !SESSION_GLOBALS.is_set() {
      3 ( 0.00%)          let session_globals = SessionGlobals::new(edition);
     11 ( 0.00%)          SESSION_GLOBALS.set(&session_globals, || SESSION_GLOBALS.with(f))
      1 ( 0.00%)      } else {
      .                   SESSION_GLOBALS.with(f)
      .               }
      .           }
      .           
      .           #[inline]
      .           pub fn with_session_globals<R, F>(f: F) -> R
      .           where
      .               F: FnOnce(&SessionGlobals) -> R,
      .           {
127,811 ( 0.05%)      SESSION_GLOBALS.with(f)
      .           }
      .           
      .           #[inline]
      .           pub fn create_default_session_globals_then<R>(f: impl FnOnce() -> R) -> R {
      .               create_session_globals_then(edition::DEFAULT_EDITION, f)
      .           }
      .           
      .           // If this ever becomes non thread-local, `decode_syntax_context`
      .           // and `decode_expn_id` will need to be updated to handle concurrent
      .           // deserialization.
      .           scoped_tls::scoped_thread_local!(static SESSION_GLOBALS: SessionGlobals);
      .           
      .           // FIXME: We should use this enum or something like it to get rid of the
      .           // use of magic `/rust/1.x/...` paths across the board.
     27 ( 0.00%)  #[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd)]
    622 ( 0.00%)  #[derive(Decodable)]
      .           pub enum RealFileName {
      .               LocalPath(PathBuf),
      .               /// For remapped paths (namely paths into libstd that have been mapped
      .               /// to the appropriate spot on the local host's file system, and local file
      .               /// system paths that have been remapped with `FilePathMapping`),
      .               Remapped {
      .                   /// `local_path` is the (host-dependent) local path to the file. This is
      .                   /// None if the file was imported from another crate
-- line 173 ----------------------------------------
-- line 179 ----------------------------------------
      .           }
      .           
      .           impl Hash for RealFileName {
      .               fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
      .                   // To prevent #70924 from happening again we should only hash the
      .                   // remapped (virtualized) path if that exists. This is because
      .                   // virtualized paths to sysroot crates (/rust/$hash or /rust/$version)
      .                   // remain stable even if the corresponding local_path changes
  1,713 ( 0.00%)          self.remapped_path_if_available().hash(state)
      .               }
      .           }
      .           
      .           // This is functionally identical to #[derive(Encodable)], with the exception of
      .           // an added assert statement
      .           impl<S: Encoder> Encodable<S> for RealFileName {
      .               fn encode(&self, encoder: &mut S) -> Result<(), S::Error> {
     16 ( 0.00%)          encoder.emit_enum(|encoder| match *self {
      .                       RealFileName::LocalPath(ref local_path) => {
     64 ( 0.00%)                  encoder.emit_enum_variant("LocalPath", 0, 1, |encoder| {
      .                               encoder.emit_enum_variant_arg(true, |encoder| local_path.encode(encoder))?;
      .                               Ok(())
      .                           })
      .                       }
      .           
      .                       RealFileName::Remapped { ref local_path, ref virtual_name } => encoder
      .                           .emit_enum_variant("Remapped", 1, 2, |encoder| {
      .                               // For privacy and build reproducibility, we must not embed host-dependant path in artifacts
-- line 205 ----------------------------------------
-- line 224 ----------------------------------------
      .                           p.as_ref().map(PathBuf::as_path)
      .                       }
      .                   }
      .               }
      .           
      .               /// Returns the path suitable for reading from the file system on the local host,
      .               /// if this information exists.
      .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
      2 ( 0.00%)      pub fn into_local_path(self) -> Option<PathBuf> {
      2 ( 0.00%)          match self {
      .                       RealFileName::LocalPath(p) => Some(p),
      .                       RealFileName::Remapped { local_path: p, virtual_name: _ } => p,
      .                   }
      3 ( 0.00%)      }
      .           
      .               /// Returns the path suitable for embedding into build artifacts. This would still
      .               /// be a local path if it has not been remapped. A remapped path will not correspond
      .               /// to a valid file system path: see `local_path_if_available()` for something that
      .               /// is more likely to return paths into the local host file system.
      .               pub fn remapped_path_if_available(&self) -> &Path {
  1,344 ( 0.00%)          match self {
      .                       RealFileName::LocalPath(p)
      .                       | RealFileName::Remapped { local_path: _, virtual_name: p } => &p,
      .                   }
      9 ( 0.00%)      }
      .           
      .               /// Returns the path suitable for reading from the file system on the local host,
      .               /// if this information exists. Otherwise returns the remapped name.
      .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
      .               pub fn local_path_if_available(&self) -> &Path {
      8 ( 0.00%)          match self {
      .                       RealFileName::LocalPath(path)
      .                       | RealFileName::Remapped { local_path: None, virtual_name: path }
      .                       | RealFileName::Remapped { local_path: Some(path), virtual_name: _ } => path,
      .                   }
      .               }
      .           
      .               pub fn to_string_lossy(&self, display_pref: FileNameDisplayPreference) -> Cow<'_, str> {
      8 ( 0.00%)          match display_pref {
      .                       FileNameDisplayPreference::Local => self.local_path_if_available().to_string_lossy(),
      .                       FileNameDisplayPreference::Remapped => {
      .                           self.remapped_path_if_available().to_string_lossy()
      .                       }
      .                   }
      .               }
      .           }
      .           
      .           /// Differentiates between real files and common virtual files.
  3,526 ( 0.00%)  #[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd, Hash)]
  3,851 ( 0.00%)  #[derive(Decodable, Encodable)]
      .           pub enum FileName {
      .               Real(RealFileName),
      .               /// Call to `quote!`.
      .               QuoteExpansion(u64),
      .               /// Command line.
      .               Anon(u64),
      .               /// Hack in `src/librustc_ast/parse.rs`.
      .               // FIXME(jseyfried)
-- line 281 ----------------------------------------
-- line 288 ----------------------------------------
      .               /// Custom sources for explicit parser calls from plugins and drivers.
      .               Custom(String),
      .               DocTest(PathBuf, isize),
      .               /// Post-substitution inline assembly from LLVM.
      .               InlineAsm(u64),
      .           }
      .           
      .           impl From<PathBuf> for FileName {
     56 ( 0.00%)      fn from(p: PathBuf) -> Self {
     16 ( 0.00%)          assert!(!p.to_string_lossy().ends_with('>'));
     48 ( 0.00%)          FileName::Real(RealFileName::LocalPath(p))
     56 ( 0.00%)      }
      .           }
      .           
      2 ( 0.00%)  #[derive(Clone, Copy, Eq, PartialEq, Hash, Debug)]
      .           pub enum FileNameDisplayPreference {
      .               Remapped,
      .               Local,
      .           }
      .           
      .           pub struct FileNameDisplay<'a> {
      .               inner: &'a FileName,
      .               display_pref: FileNameDisplayPreference,
      .           }
      .           
      .           impl fmt::Display for FileNameDisplay<'_> {
     32 ( 0.00%)      fn fmt(&self, fmt: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
      .                   use FileName::*;
     48 ( 0.00%)          match *self.inner {
      .                       Real(ref name) => {
     48 ( 0.00%)                  write!(fmt, "{}", name.to_string_lossy(self.display_pref))
      .                       }
      .                       QuoteExpansion(_) => write!(fmt, "<quote expansion>"),
      .                       MacroExpansion(_) => write!(fmt, "<macro expansion>"),
      .                       Anon(_) => write!(fmt, "<anon>"),
      .                       ProcMacroSourceCode(_) => write!(fmt, "<proc-macro source code>"),
      .                       CfgSpec(_) => write!(fmt, "<cfgspec>"),
      .                       CliCrateAttr(_) => write!(fmt, "<crate attribute>"),
      .                       Custom(ref s) => write!(fmt, "<{}>", s),
      .                       DocTest(ref path, _) => write!(fmt, "{}", path.display()),
      .                       InlineAsm(_) => write!(fmt, "<inline asm>"),
      .                   }
     40 ( 0.00%)      }
      .           }
      .           
      .           impl FileNameDisplay<'_> {
      .               pub fn to_string_lossy(&self) -> Cow<'_, str> {
      .                   match self.inner {
      .                       FileName::Real(ref inner) => inner.to_string_lossy(self.display_pref),
      .                       _ => Cow::from(format!("{}", self)),
      .                   }
      .               }
      .           }
      .           
      .           impl FileName {
      .               pub fn is_real(&self) -> bool {
      .                   use FileName::*;
    644 ( 0.00%)          match *self {
      .                       Real(_) => true,
      .                       Anon(_)
      .                       | MacroExpansion(_)
      .                       | ProcMacroSourceCode(_)
      .                       | CfgSpec(_)
      .                       | CliCrateAttr(_)
      .                       | Custom(_)
      .                       | QuoteExpansion(_)
-- line 353 ----------------------------------------
-- line 357 ----------------------------------------
      .               }
      .           
      .               pub fn prefer_remapped(&self) -> FileNameDisplay<'_> {
      .                   FileNameDisplay { inner: self, display_pref: FileNameDisplayPreference::Remapped }
      .               }
      .           
      .               // This may include transient local filesystem information.
      .               // Must not be embedded in build outputs.
      8 ( 0.00%)      pub fn prefer_local(&self) -> FileNameDisplay<'_> {
      .                   FileNameDisplay { inner: self, display_pref: FileNameDisplayPreference::Local }
     16 ( 0.00%)      }
      .           
      .               pub fn display(&self, display_pref: FileNameDisplayPreference) -> FileNameDisplay<'_> {
      .                   FileNameDisplay { inner: self, display_pref }
      .               }
      .           
      .               pub fn macro_expansion_source_code(src: &str) -> FileName {
      .                   let mut hasher = StableHasher::new();
      .                   src.hash(&mut hasher);
-- line 375 ----------------------------------------
-- line 423 ----------------------------------------
      .           /// that the length of the span is equal to `span.hi - span.lo`; there may be space in the
      .           /// [`BytePos`] range between files.
      .           ///
      .           /// `SpanData` is public because `Span` uses a thread-local interner and can't be
      .           /// sent to other threads, but some pieces of performance infra run in a separate thread.
      .           /// Using `Span` is generally preferred.
      .           #[derive(Clone, Copy, Hash, PartialEq, Eq)]
      .           pub struct SpanData {
      2 ( 0.00%)      pub lo: BytePos,
      2 ( 0.00%)      pub hi: BytePos,
      .               /// Information about where the macro came from, if this piece of
      .               /// code was created by a macro expansion.
      6 ( 0.00%)      pub ctxt: SyntaxContext,
      2 ( 0.00%)      pub parent: Option<LocalDefId>,
      .           }
      .           
      .           // Order spans by position in the file.
      .           impl Ord for SpanData {
      .               fn cmp(&self, other: &Self) -> Ordering {
      .                   let SpanData {
      .                       lo: s_lo,
      .                       hi: s_hi,
-- line 444 ----------------------------------------
-- line 485 ----------------------------------------
      .               }
      .               #[inline]
      .               pub fn with_parent(&self, parent: Option<LocalDefId>) -> Span {
      .                   Span::new(self.lo, self.hi, self.ctxt, parent)
      .               }
      .               /// Returns `true` if this is a dummy span with any hygienic context.
      .               #[inline]
      .               pub fn is_dummy(self) -> bool {
 26,965 ( 0.01%)          self.lo.0 == 0 && self.hi.0 == 0
      .               }
      .               /// Returns `true` if `self` fully encloses `other`.
      .               pub fn contains(self, other: Self) -> bool {
    723 ( 0.00%)          self.lo <= other.lo && other.hi <= self.hi
      .               }
      .           }
      .           
      .           // The interner is pointed to by a thread local value which is only set on the main thread
      .           // with parallelization is disabled. So we don't allow `Span` to transfer between threads
      .           // to avoid panics and other errors, even though it would be memory safe to do so.
      .           #[cfg(not(parallel_compiler))]
      .           impl !Send for Span {}
      .           #[cfg(not(parallel_compiler))]
      .           impl !Sync for Span {}
      .           
      .           impl PartialOrd for Span {
  4,552 ( 0.00%)      fn partial_cmp(&self, rhs: &Self) -> Option<Ordering> {
  3,414 ( 0.00%)          PartialOrd::partial_cmp(&self.data(), &rhs.data())
  4,552 ( 0.00%)      }
      .           }
      .           impl Ord for Span {
      .               fn cmp(&self, rhs: &Self) -> Ordering {
      .                   Ord::cmp(&self.data(), &rhs.data())
      .               }
      .           }
      .           
      .           /// A collection of `Span`s.
-- line 520 ----------------------------------------
-- line 532 ----------------------------------------
      .           }
      .           
      .           impl Span {
      .               #[inline]
      .               pub fn lo(self) -> BytePos {
      .                   self.data().lo
      .               }
      .               #[inline]
  8,010 ( 0.00%)      pub fn with_lo(self, lo: BytePos) -> Span {
      .                   self.data().with_lo(lo)
  5,340 ( 0.00%)      }
      .               #[inline]
  1,436 ( 0.00%)      pub fn hi(self) -> BytePos {
      .                   self.data().hi
  1,436 ( 0.00%)      }
      .               #[inline]
  5,652 ( 0.00%)      pub fn with_hi(self, hi: BytePos) -> Span {
      .                   self.data().with_hi(hi)
  3,768 ( 0.00%)      }
      .               #[inline]
      .               pub fn ctxt(self) -> SyntaxContext {
      .                   self.data_untracked().ctxt
      .               }
      .               #[inline]
  2,960 ( 0.00%)      pub fn with_ctxt(self, ctxt: SyntaxContext) -> Span {
      .                   self.data_untracked().with_ctxt(ctxt)
  1,776 ( 0.00%)      }
      .               #[inline]
      .               pub fn parent(self) -> Option<LocalDefId> {
      .                   self.data().parent
      .               }
      .               #[inline]
      .               pub fn with_parent(self, ctxt: Option<LocalDefId>) -> Span {
      .                   self.data().with_parent(ctxt)
      .               }
-- line 566 ----------------------------------------
-- line 618 ----------------------------------------
      .               }
      .           
      .               /// Returns `self` if `self` is not the dummy span, and `other` otherwise.
      .               pub fn substitute_dummy(self, other: Span) -> Span {
      .                   if self.is_dummy() { other } else { self }
      .               }
      .           
      .               /// Returns `true` if `self` fully encloses `other`.
  2,169 ( 0.00%)      pub fn contains(self, other: Span) -> bool {
      .                   let span = self.data();
      .                   let other = other.data();
      .                   span.contains(other)
  1,446 ( 0.00%)      }
      .           
      .               /// Returns `true` if `self` touches `other`.
      .               pub fn overlaps(self, other: Span) -> bool {
      .                   let span = self.data();
      .                   let other = other.data();
      .                   span.lo < other.hi && other.lo < span.hi
      .               }
      .           
-- line 638 ----------------------------------------
-- line 663 ----------------------------------------
      .               /// The `Span` for the tokens in the previous macro expansion from which `self` was generated,
      .               /// if any.
      .               pub fn parent_callsite(self) -> Option<Span> {
      .                   let expn_data = self.ctxt().outer_expn_data();
      .                   if !expn_data.is_root() { Some(expn_data.call_site) } else { None }
      .               }
      .           
      .               /// Walk down the expansion ancestors to find a span that's contained within `outer`.
    780 ( 0.00%)      pub fn find_ancestor_inside(mut self, outer: Span) -> Option<Span> {
    390 ( 0.00%)          while !outer.contains(self) {
      .                       self = self.parent_callsite()?;
      .                   }
      .                   Some(self)
    858 ( 0.00%)      }
      .           
      .               /// Edition of the crate from which this span came.
  2,820 ( 0.00%)      pub fn edition(self) -> edition::Edition {
      .                   self.ctxt().edition()
  1,880 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn rust_2015(self) -> bool {
    895 ( 0.00%)          self.edition() == edition::Edition::Edition2015
      .               }
      .           
      .               #[inline]
      .               pub fn rust_2018(self) -> bool {
      6 ( 0.00%)          self.edition() >= edition::Edition::Edition2018
      .               }
      .           
      .               #[inline]
      .               pub fn rust_2021(self) -> bool {
    137 ( 0.00%)          self.edition() >= edition::Edition::Edition2021
      .               }
      .           
      .               /// Returns the source callee.
      .               ///
      .               /// Returns `None` if the supplied span has no expansion trace,
      .               /// else returns the `ExpnData` for the macro definition
      .               /// corresponding to the source callsite.
      .               pub fn source_callee(self) -> Option<ExpnData> {
-- line 703 ----------------------------------------
-- line 707 ----------------------------------------
      .                   }
      .                   let expn_data = self.ctxt().outer_expn_data();
      .                   if !expn_data.is_root() { Some(source_callee(expn_data)) } else { None }
      .               }
      .           
      .               /// Checks if a span is "internal" to a macro in which `#[unstable]`
      .               /// items can be used (that is, a macro marked with
      .               /// `#[allow_internal_unstable]`).
    525 ( 0.00%)      pub fn allows_unstable(self, feature: Symbol) -> bool {
    105 ( 0.00%)          self.ctxt()
      .                       .outer_expn_data()
      .                       .allow_internal_unstable
      .                       .map_or(false, |features| features.iter().any(|&f| f == feature))
    420 ( 0.00%)      }
      .           
      .               /// Checks if this span arises from a compiler desugaring of kind `kind`.
  1,876 ( 0.00%)      pub fn is_desugaring(self, kind: DesugaringKind) -> bool {
  1,608 ( 0.00%)          match self.ctxt().outer_expn_data().kind {
      .                       ExpnKind::Desugaring(k) => k == kind,
      .                       _ => false,
      .                   }
  1,340 ( 0.00%)      }
      .           
      .               /// Returns the compiler desugaring that created this span, or `None`
      .               /// if this span is not from a desugaring.
     10 ( 0.00%)      pub fn desugaring_kind(self) -> Option<DesugaringKind> {
     12 ( 0.00%)          match self.ctxt().outer_expn_data().kind {
      .                       ExpnKind::Desugaring(k) => Some(k),
      .                       _ => None,
      .                   }
      8 ( 0.00%)      }
      .           
      .               /// Checks if a span is "internal" to a macro in which `unsafe`
      .               /// can be used without triggering the `unsafe_code` lint.
      .               //  (that is, a macro marked with `#[allow_internal_unsafe]`).
      8 ( 0.00%)      pub fn allows_unsafe(self) -> bool {
      2 ( 0.00%)          self.ctxt().outer_expn_data().allow_internal_unsafe
      8 ( 0.00%)      }
      .           
      .               pub fn macro_backtrace(mut self) -> impl Iterator<Item = ExpnData> {
      .                   let mut prev_span = DUMMY_SP;
      .                   std::iter::from_fn(move || {
      .                       loop {
      .                           let expn_data = self.ctxt().outer_expn_data();
      .                           if expn_data.is_root() {
      .                               return None;
-- line 752 ----------------------------------------
-- line 767 ----------------------------------------
      .           
      .               /// Returns a `Span` that would enclose both `self` and `end`.
      .               ///
      .               /// ```text
      .               ///     ____             ___
      .               ///     self lorem ipsum end
      .               ///     ^^^^^^^^^^^^^^^^^^^^
      .               /// ```
 26,565 ( 0.01%)      pub fn to(self, end: Span) -> Span {
      .                   let span_data = self.data();
      .                   let end_data = end.data();
      .                   // FIXME(jseyfried): `self.ctxt` should always equal `end.ctxt` here (cf. issue #23480).
      .                   // Return the macro span on its own to avoid weird diagnostic output. It is preferable to
      .                   // have an incomplete span than a completely nonsensical one.
  4,282 ( 0.00%)          if span_data.ctxt != end_data.ctxt {
    548 ( 0.00%)              if span_data.ctxt == SyntaxContext::root() {
      .                           return end;
    494 ( 0.00%)              } else if end_data.ctxt == SyntaxContext::root() {
      .                           return self;
      .                       }
      .                       // Both spans fall within a macro.
      .                       // FIXME(estebank): check if it is the *same* macro.
      .                   }
      .                   Span::new(
      .                       cmp::min(span_data.lo, end_data.lo),
      .                       cmp::max(span_data.hi, end_data.hi),
      .                       if span_data.ctxt == SyntaxContext::root() { end_data.ctxt } else { span_data.ctxt },
 13,069 ( 0.01%)              if span_data.parent == end_data.parent { span_data.parent } else { None },
      .                   )
 21,735 ( 0.01%)      }
      .           
      .               /// Returns a `Span` between the end of `self` to the beginning of `end`.
      .               ///
      .               /// ```text
      .               ///     ____             ___
      .               ///     self lorem ipsum end
      .               ///         ^^^^^^^^^^^^^
      .               /// ```
    143 ( 0.00%)      pub fn between(self, end: Span) -> Span {
      .                   let span = self.data();
      .                   let end = end.data();
      .                   Span::new(
      .                       span.hi,
      .                       end.lo,
      .                       if end.ctxt == SyntaxContext::root() { end.ctxt } else { span.ctxt },
     91 ( 0.00%)              if span.parent == end.parent { span.parent } else { None },
      .                   )
    104 ( 0.00%)      }
      .           
      .               /// Returns a `Span` from the beginning of `self` until the beginning of `end`.
      .               ///
      .               /// ```text
      .               ///     ____             ___
      .               ///     self lorem ipsum end
      .               ///     ^^^^^^^^^^^^^^^^^
      .               /// ```
-- line 822 ----------------------------------------
-- line 856 ----------------------------------------
      .                       span.ctxt,
      .                       span.parent,
      .                   )
      .               }
      .           
      .               /// Equivalent of `Span::def_site` from the proc macro API,
      .               /// except that the location is taken from the `self` span.
      .               pub fn with_def_site_ctxt(self, expn_id: ExpnId) -> Span {
    926 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::Opaque)
      .               }
      .           
      .               /// Equivalent of `Span::call_site` from the proc macro API,
      .               /// except that the location is taken from the `self` span.
      .               pub fn with_call_site_ctxt(self, expn_id: ExpnId) -> Span {
      2 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::Transparent)
      .               }
      .           
      .               /// Equivalent of `Span::mixed_site` from the proc macro API,
      .               /// except that the location is taken from the `self` span.
      .               pub fn with_mixed_site_ctxt(self, expn_id: ExpnId) -> Span {
      .                   self.with_ctxt_from_mark(expn_id, Transparency::SemiTransparent)
      .               }
      .           
      .               /// Produces a span with the same location as `self` and context produced by a macro with the
      .               /// given ID and transparency, assuming that macro was defined directly and not produced by
      .               /// some other macro (which is the case for built-in and procedural macros).
  5,568 ( 0.00%)      pub fn with_ctxt_from_mark(self, expn_id: ExpnId, transparency: Transparency) -> Span {
      .                   self.with_ctxt(SyntaxContext::root().apply_mark(expn_id, transparency))
  3,248 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn apply_mark(self, expn_id: ExpnId, transparency: Transparency) -> Span {
      .                   let span = self.data();
      .                   span.with_ctxt(span.ctxt.apply_mark(expn_id, transparency))
      .               }
      .           
      .               #[inline]
-- line 892 ----------------------------------------
-- line 901 ----------------------------------------
      .               pub fn adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
      .                   let mut span = self.data();
      .                   let mark = span.ctxt.adjust(expn_id);
      .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
      .                   mark
      .               }
      .           
      .               #[inline]
 13,194 ( 0.01%)      pub fn normalize_to_macros_2_0_and_adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
  8,796 ( 0.00%)          let mut span = self.data();
  7,196 ( 0.00%)          let mark = span.ctxt.normalize_to_macros_2_0_and_adjust(expn_id);
 13,194 ( 0.01%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
      .                   mark
 14,526 ( 0.01%)      }
      .           
      .               #[inline]
      .               pub fn glob_adjust(&mut self, expn_id: ExpnId, glob_span: Span) -> Option<Option<ExpnId>> {
      .                   let mut span = self.data();
      .                   let mark = span.ctxt.glob_adjust(expn_id, glob_span);
      .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
      .                   mark
      .               }
-- line 922 ----------------------------------------
-- line 929 ----------------------------------------
      .               ) -> Option<Option<ExpnId>> {
      .                   let mut span = self.data();
      .                   let mark = span.ctxt.reverse_glob_adjust(expn_id, glob_span);
      .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
      .                   mark
      .               }
      .           
      .               #[inline]
  9,496 ( 0.00%)      pub fn normalize_to_macros_2_0(self) -> Span {
      .                   let span = self.data();
      .                   span.with_ctxt(span.ctxt.normalize_to_macros_2_0())
  8,309 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn normalize_to_macro_rules(self) -> Span {
      .                   let span = self.data();
      .                   span.with_ctxt(span.ctxt.normalize_to_macro_rules())
      .               }
      .           }
      .           
-- line 948 ----------------------------------------
-- line 958 ----------------------------------------
      .           
      .               /// What label should we attach to this span (if any)?
      .               pub label: Option<String>,
      .           }
      .           
      .           impl Default for Span {
      .               fn default() -> Self {
      .                   DUMMY_SP
      2 ( 0.00%)      }
      .           }
      .           
      .           impl<E: Encoder> Encodable<E> for Span {
      .               default fn encode(&self, s: &mut E) -> Result<(), E::Error> {
      .                   let span = self.data();
      .                   s.emit_struct(false, |s| {
      .                       s.emit_struct_field("lo", true, |s| span.lo.encode(s))?;
      .                       s.emit_struct_field("hi", false, |s| span.hi.encode(s))
-- line 974 ----------------------------------------
-- line 990 ----------------------------------------
      .           /// any spans that are debug-printed during the closure's execution.
      .           ///
      .           /// Normally, the global `TyCtxt` is used to retrieve the `SourceMap`
      .           /// (see `rustc_interface::callbacks::span_debug1`). However, some parts
      .           /// of the compiler (e.g. `rustc_parse`) may debug-print `Span`s before
      .           /// a `TyCtxt` is available. In this case, we fall back to
      .           /// the `SourceMap` provided to this function. If that is not available,
      .           /// we fall back to printing the raw `Span` field values.
      9 ( 0.00%)  pub fn with_source_map<T, F: FnOnce() -> T>(source_map: Lrc<SourceMap>, f: F) -> T {
      .               with_session_globals(|session_globals| {
      2 ( 0.00%)          *session_globals.source_map.borrow_mut() = Some(source_map);
      .               });
      .               struct ClearSourceMap;
      .               impl Drop for ClearSourceMap {
      .                   fn drop(&mut self) {
      .                       with_session_globals(|session_globals| {
      1 ( 0.00%)                  session_globals.source_map.borrow_mut().take();
      .                       });
      .                   }
      .               }
      .           
      .               let _guard = ClearSourceMap;
      4 ( 0.00%)      f()
      8 ( 0.00%)  }
      .           
      .           pub fn debug_with_source_map(
      .               span: Span,
      .               f: &mut fmt::Formatter<'_>,
      .               source_map: &SourceMap,
      .           ) -> fmt::Result {
      .               write!(f, "{} ({:?})", source_map.span_to_diagnostic_string(span), span.ctxt())
      .           }
-- line 1021 ----------------------------------------
-- line 1048 ----------------------------------------
      .           
      .           impl MultiSpan {
      .               #[inline]
      .               pub fn new() -> MultiSpan {
      .                   MultiSpan { primary_spans: vec![], span_labels: vec![] }
      .               }
      .           
      .               pub fn from_span(primary_span: Span) -> MultiSpan {
    800 ( 0.00%)          MultiSpan { primary_spans: vec![primary_span], span_labels: vec![] }
      .               }
      .           
      .               pub fn from_spans(mut vec: Vec<Span>) -> MultiSpan {
      .                   vec.sort();
     55 ( 0.00%)          MultiSpan { primary_spans: vec, span_labels: vec![] }
      .               }
      .           
      .               pub fn push_span_label(&mut self, span: Span, label: String) {
      .                   self.span_labels.push((span, label));
      .               }
      .           
      .               /// Selects the first primary span (if any).
      .               pub fn primary_span(&self) -> Option<Span> {
      .                   self.primary_spans.first().cloned()
    146 ( 0.00%)      }
      .           
      .               /// Returns all primary spans.
      .               pub fn primary_spans(&self) -> &[Span] {
      .                   &self.primary_spans
      .               }
      .           
      .               /// Returns `true` if any of the primary spans are displayable.
      .               pub fn has_primary_spans(&self) -> bool {
-- line 1079 ----------------------------------------
-- line 1139 ----------------------------------------
      .           
      .               /// Returns `true` if any of the span labels is displayable.
      .               pub fn has_span_labels(&self) -> bool {
      .                   self.span_labels.iter().any(|(sp, _)| !sp.is_dummy())
      .               }
      .           }
      .           
      .           impl From<Span> for MultiSpan {
    800 ( 0.00%)      fn from(span: Span) -> MultiSpan {
      .                   MultiSpan::from_span(span)
    800 ( 0.00%)      }
      .           }
      .           
      .           impl From<Vec<Span>> for MultiSpan {
     55 ( 0.00%)      fn from(spans: Vec<Span>) -> MultiSpan {
     44 ( 0.00%)          MultiSpan::from_spans(spans)
     55 ( 0.00%)      }
      .           }
      .           
      .           /// Identifies an offset of a multi-byte character in a `SourceFile`.
      .           #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
      .           pub struct MultiByteChar {
      .               /// The absolute offset of the character in the `SourceMap`.
      .               pub pos: BytePos,
      .               /// The number of bytes, `>= 2`.
      .               pub bytes: u8,
      .           }
      .           
      .           /// Identifies an offset of a non-narrow character in a `SourceFile`.
    268 ( 0.00%)  #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
      .           pub enum NonNarrowChar {
      .               /// Represents a zero-width character.
      .               ZeroWidth(BytePos),
      .               /// Represents a wide (full-width) character.
      .               Wide(BytePos),
      .               /// Represents a tab character, represented visually with a width of 4 characters.
      .               Tab(BytePos),
      .           }
-- line 1176 ----------------------------------------
-- line 1201 ----------------------------------------
      .                   }
      .               }
      .           }
      .           
      .           impl Add<BytePos> for NonNarrowChar {
      .               type Output = Self;
      .           
      .               fn add(self, rhs: BytePos) -> Self {
    466 ( 0.00%)          match self {
      .                       NonNarrowChar::ZeroWidth(pos) => NonNarrowChar::ZeroWidth(pos + rhs),
      .                       NonNarrowChar::Wide(pos) => NonNarrowChar::Wide(pos + rhs),
      .                       NonNarrowChar::Tab(pos) => NonNarrowChar::Tab(pos + rhs),
      .                   }
      .               }
      .           }
      .           
      .           impl Sub<BytePos> for NonNarrowChar {
      .               type Output = Self;
      .           
    134 ( 0.00%)      fn sub(self, rhs: BytePos) -> Self {
    466 ( 0.00%)          match self {
      .                       NonNarrowChar::ZeroWidth(pos) => NonNarrowChar::ZeroWidth(pos - rhs),
      .                       NonNarrowChar::Wide(pos) => NonNarrowChar::Wide(pos - rhs),
      .                       NonNarrowChar::Tab(pos) => NonNarrowChar::Tab(pos - rhs),
      .                   }
    402 ( 0.00%)      }
      .           }
      .           
      .           /// Identifies an offset of a character that was normalized away from `SourceFile`.
  5,894 ( 0.00%)  #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
      .           pub struct NormalizedPos {
      .               /// The absolute offset of the character in the `SourceMap`.
      .               pub pos: BytePos,
      .               /// The difference between original and normalized string at position.
      .               pub diff: u32,
      .           }
      .           
     24 ( 0.00%)  #[derive(PartialEq, Eq, Clone, Debug)]
      .           pub enum ExternalSource {
      .               /// No external source has to be loaded, since the `SourceFile` represents a local crate.
      .               Unneeded,
      .               Foreign {
      .                   kind: ExternalSourceKind,
      .                   /// This SourceFile's byte-offset within the source_map of its original crate.
      .                   original_start_pos: BytePos,
      .                   /// The end of this SourceFile within the source_map of its original crate.
-- line 1246 ----------------------------------------
-- line 1267 ----------------------------------------
      .                       _ => None,
      .                   }
      .               }
      .           }
      .           
      .           #[derive(Debug)]
      .           pub struct OffsetOverflowError;
      .           
    628 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash, Encodable, Decodable)]
      .           pub enum SourceFileHashAlgorithm {
      .               Md5,
      .               Sha1,
      .               Sha256,
      .           }
      .           
      .           impl FromStr for SourceFileHashAlgorithm {
      .               type Err = ();
-- line 1283 ----------------------------------------
-- line 1290 ----------------------------------------
      .                       _ => Err(()),
      .                   }
      .               }
      .           }
      .           
      .           rustc_data_structures::impl_stable_hash_via_hash!(SourceFileHashAlgorithm);
      .           
      .           /// The hash of the on-disk source file used for debug info.
     48 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Debug)]
  1,256 ( 0.00%)  #[derive(HashStable_Generic, Encodable, Decodable)]
      .           pub struct SourceFileHash {
      .               pub kind: SourceFileHashAlgorithm,
      .               value: [u8; 32],
      .           }
      .           
      .           impl SourceFileHash {
      .               pub fn new(kind: SourceFileHashAlgorithm, src: &str) -> SourceFileHash {
      .                   let mut hash = SourceFileHash { kind, value: Default::default() };
      .                   let len = hash.hash_len();
      .                   let value = &mut hash.value[..len];
      .                   let data = src.as_bytes();
      .                   match kind {
      .                       SourceFileHashAlgorithm::Md5 => {
     24 ( 0.00%)                  value.copy_from_slice(&Md5::digest(data));
      .                       }
      .                       SourceFileHashAlgorithm::Sha1 => {
      .                           value.copy_from_slice(&Sha1::digest(data));
      .                       }
      .                       SourceFileHashAlgorithm::Sha256 => {
      .                           value.copy_from_slice(&Sha256::digest(data));
      .                       }
      .                   }
-- line 1321 ----------------------------------------
-- line 1329 ----------------------------------------
      .           
      .               /// The bytes of the hash.
      .               pub fn hash_bytes(&self) -> &[u8] {
      .                   let len = self.hash_len();
      .                   &self.value[..len]
      .               }
      .           
      .               fn hash_len(&self) -> usize {
     24 ( 0.00%)          match self.kind {
      .                       SourceFileHashAlgorithm::Md5 => 16,
      .                       SourceFileHashAlgorithm::Sha1 => 20,
      .                       SourceFileHashAlgorithm::Sha256 => 32,
      .                   }
      .               }
      .           }
      .           
      .           /// A single source in the [`SourceMap`].
    464 ( 0.00%)  #[derive(Clone)]
      .           pub struct SourceFile {
      .               /// The name of the file that the source came from. Source that doesn't
      .               /// originate from files has names between angle brackets by convention
      .               /// (e.g., `<anon>`).
      .               pub name: FileName,
      .               /// The complete source code.
      8 ( 0.00%)      pub src: Option<Lrc<String>>,
      .               /// The source code's hash.
      .               pub src_hash: SourceFileHash,
      .               /// The external source code (used for external crates, which will have a `None`
      .               /// value as `self.src`.
      .               pub external_src: Lock<ExternalSource>,
      .               /// The start position of this source in the `SourceMap`.
      .               pub start_pos: BytePos,
      .               /// The end position of this source in the `SourceMap`.
-- line 1361 ----------------------------------------
-- line 1364 ----------------------------------------
      .               pub lines: Vec<BytePos>,
      .               /// Locations of multi-byte characters in the source code.
      .               pub multibyte_chars: Vec<MultiByteChar>,
      .               /// Width of characters that are not narrow in the source code.
      .               pub non_narrow_chars: Vec<NonNarrowChar>,
      .               /// Locations of characters removed during normalization.
      .               pub normalized_pos: Vec<NormalizedPos>,
      .               /// A hash of the filename, used for speeding up hashing in incremental compilation.
      8 ( 0.00%)      pub name_hash: u128,
      .               /// Indicates which crate this `SourceFile` was imported from.
      8 ( 0.00%)      pub cnum: CrateNum,
      .           }
      .           
      .           impl<S: Encoder> Encodable<S> for SourceFile {
      .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
      .                   s.emit_struct(false, |s| {
      .                       s.emit_struct_field("name", true, |s| self.name.encode(s))?;
      .                       s.emit_struct_field("src_hash", false, |s| self.src_hash.encode(s))?;
      .                       s.emit_struct_field("start_pos", false, |s| self.start_pos.encode(s))?;
      .                       s.emit_struct_field("end_pos", false, |s| self.end_pos.encode(s))?;
      .                       s.emit_struct_field("lines", false, |s| {
      .                           let lines = &self.lines[..];
      .                           // Store the length.
      .                           s.emit_u32(lines.len() as u32)?;
      .           
     32 ( 0.00%)                  if !lines.is_empty() {
      .                               // In order to preserve some space, we exploit the fact that
      .                               // the lines list is sorted and individual lines are
      .                               // probably not that long. Because of that we can store lines
      .                               // as a difference list, using as little space as possible
      .                               // for the differences.
      .                               let max_line_length = if lines.len() == 1 {
      .                                   0
      .                               } else {
-- line 1397 ----------------------------------------
-- line 1399 ----------------------------------------
      .                                       .array_windows()
      .                                       .map(|&[fst, snd]| snd - fst)
      .                                       .map(|bp| bp.to_usize())
      .                                       .max()
      .                                       .unwrap()
      .                               };
      .           
      .                               let bytes_per_diff: u8 = match max_line_length {
     16 ( 0.00%)                          0..=0xFF => 1,
      .                                   0x100..=0xFFFF => 2,
      .                                   _ => 4,
      .                               };
      .           
      .                               // Encode the number of bytes used per diff.
      .                               bytes_per_diff.encode(s)?;
      .           
      .                               // Encode the first element.
      .                               lines[0].encode(s)?;
      .           
      .                               let diff_iter = lines.array_windows().map(|&[fst, snd]| snd - fst);
      .           
     16 ( 0.00%)                      match bytes_per_diff {
      .                                   1 => {
      .                                       for diff in diff_iter {
      .                                           (diff.0 as u8).encode(s)?
      .                                       }
      .                                   }
      .                                   2 => {
      .                                       for diff in diff_iter {
      .                                           (diff.0 as u16).encode(s)?
-- line 1428 ----------------------------------------
-- line 1436 ----------------------------------------
      .                                   _ => unreachable!(),
      .                               }
      .                           }
      .           
      .                           Ok(())
      .                       })?;
      .                       s.emit_struct_field("multibyte_chars", false, |s| self.multibyte_chars.encode(s))?;
      .                       s.emit_struct_field("non_narrow_chars", false, |s| self.non_narrow_chars.encode(s))?;
     24 ( 0.00%)              s.emit_struct_field("name_hash", false, |s| self.name_hash.encode(s))?;
      .                       s.emit_struct_field("normalized_pos", false, |s| self.normalized_pos.encode(s))?;
     88 ( 0.00%)              s.emit_struct_field("cnum", false, |s| self.cnum.encode(s))
      .                   })
      .               }
      .           }
      .           
      .           impl<D: Decoder> Decodable<D> for SourceFile {
  2,826 ( 0.00%)      fn decode(d: &mut D) -> SourceFile {
      .                   d.read_struct(|d| {
      .                       let name: FileName = d.read_struct_field("name", |d| Decodable::decode(d));
      .                       let src_hash: SourceFileHash =
      .                           d.read_struct_field("src_hash", |d| Decodable::decode(d));
      .                       let start_pos: BytePos = d.read_struct_field("start_pos", |d| Decodable::decode(d));
      .                       let end_pos: BytePos = d.read_struct_field("end_pos", |d| Decodable::decode(d));
      .                       let lines: Vec<BytePos> = d.read_struct_field("lines", |d| {
      .                           let num_lines: u32 = Decodable::decode(d);
    314 ( 0.00%)                  let mut lines = Vec::with_capacity(num_lines as usize);
      .           
      .                           if num_lines > 0 {
      .                               // Read the number of bytes used per diff.
      .                               let bytes_per_diff: u8 = Decodable::decode(d);
      .           
      .                               // Read the first element.
      .                               let mut line_start: BytePos = Decodable::decode(d);
      .                               lines.push(line_start);
      .           
      .                               for _ in 1..num_lines {
636,976 ( 0.25%)                          let diff = match bytes_per_diff {
      .                                       1 => d.read_u8() as u32,
      .                                       2 => d.read_u16() as u32,
      .                                       4 => d.read_u32(),
      .                                       _ => unreachable!(),
      .                                   };
      .           
      .                                   line_start = line_start + BytePos(diff);
      .           
-- line 1480 ----------------------------------------
-- line 1483 ----------------------------------------
      .                           }
      .           
      .                           lines
      .                       });
      .                       let multibyte_chars: Vec<MultiByteChar> =
      .                           d.read_struct_field("multibyte_chars", |d| Decodable::decode(d));
      .                       let non_narrow_chars: Vec<NonNarrowChar> =
      .                           d.read_struct_field("non_narrow_chars", |d| Decodable::decode(d));
    628 ( 0.00%)              let name_hash: u128 = d.read_struct_field("name_hash", |d| Decodable::decode(d));
      .                       let normalized_pos: Vec<NormalizedPos> =
      .                           d.read_struct_field("normalized_pos", |d| Decodable::decode(d));
      .                       let cnum: CrateNum = d.read_struct_field("cnum", |d| Decodable::decode(d));
  3,454 ( 0.00%)              SourceFile {
  2,512 ( 0.00%)                  name,
      .                           start_pos,
      .                           end_pos,
      .                           src: None,
  1,256 ( 0.00%)                  src_hash,
      .                           // Unused - the metadata decoder will construct
      .                           // a new SourceFile, filling in `external_src` properly
      .                           external_src: Lock::new(ExternalSource::Unneeded),
  1,256 ( 0.00%)                  lines,
  1,256 ( 0.00%)                  multibyte_chars,
  1,256 ( 0.00%)                  non_narrow_chars,
  1,256 ( 0.00%)                  normalized_pos,
      .                           name_hash,
      .                           cnum,
      .                       }
      .                   })
  2,826 ( 0.00%)      }
      .           }
      .           
      .           impl fmt::Debug for SourceFile {
      .               fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
      .                   write!(fmt, "SourceFile({:?})", self.name)
      .               }
      .           }
      .           
      .           impl SourceFile {
     88 ( 0.00%)      pub fn new(
      .                   name: FileName,
      .                   mut src: String,
      .                   start_pos: BytePos,
      .                   hash_kind: SourceFileHashAlgorithm,
      .               ) -> Self {
      .                   // Compute the file hash before any normalization.
      .                   let src_hash = SourceFileHash::new(hash_kind, &src);
     24 ( 0.00%)          let normalized_pos = normalize_src(&mut src, start_pos);
      .           
      .                   let name_hash = {
      .                       let mut hasher: StableHasher = StableHasher::new();
     16 ( 0.00%)              name.hash(&mut hasher);
      .                       hasher.finish::<u128>()
      .                   };
     16 ( 0.00%)          let end_pos = start_pos.to_usize() + src.len();
     24 ( 0.00%)          assert!(end_pos <= u32::MAX as usize);
      .           
     96 ( 0.00%)          let (lines, multibyte_chars, non_narrow_chars) =
     16 ( 0.00%)              analyze_source_file::analyze_source_file(&src, start_pos);
      .           
    136 ( 0.00%)          SourceFile {
      .                       name,
      .                       src: Some(Lrc::new(src)),
     88 ( 0.00%)              src_hash,
      .                       external_src: Lock::new(ExternalSource::Unneeded),
      .                       start_pos,
      .                       end_pos: Pos::from_usize(end_pos),
     32 ( 0.00%)              lines,
     32 ( 0.00%)              multibyte_chars,
     32 ( 0.00%)              non_narrow_chars,
     32 ( 0.00%)              normalized_pos,
      .                       name_hash,
      .                       cnum: LOCAL_CRATE,
      .                   }
     72 ( 0.00%)      }
      .           
      .               /// Returns the `BytePos` of the beginning of the current line.
      .               pub fn line_begin_pos(&self, pos: BytePos) -> BytePos {
      .                   let line_index = self.lookup_line(pos).unwrap();
      .                   self.lines[line_index]
      .               }
      .           
      .               /// Add externally loaded source.
      .               /// If the hash of the input doesn't match or no input is supplied via None,
      .               /// it is interpreted as an error and the corresponding enum variant is set.
      .               /// The return value signifies whether some kind of source is present.
  1,169 ( 0.00%)      pub fn add_external_src<F>(&self, get_src: F) -> bool
      .               where
      .                   F: FnOnce() -> Option<String>,
      .               {
    167 ( 0.00%)          if matches!(
    334 ( 0.00%)              *self.external_src.borrow(),
      .                       ExternalSource::Foreign { kind: ExternalSourceKind::AbsentOk, .. }
      .                   ) {
      .                       let src = get_src();
      .                       let mut external_src = self.external_src.borrow_mut();
      .                       // Check that no-one else have provided the source while we were getting it
      .                       if let ExternalSource::Foreign {
      .                           kind: src_kind @ ExternalSourceKind::AbsentOk, ..
      .                       } = &mut *external_src
-- line 1582 ----------------------------------------
-- line 1592 ----------------------------------------
      .                               *src_kind = ExternalSourceKind::AbsentErr;
      .                           }
      .           
      .                           false
      .                       } else {
      .                           self.src.is_some() || external_src.get_source().is_some()
      .                       }
      .                   } else {
    167 ( 0.00%)              self.src.is_some() || self.external_src.borrow().get_source().is_some()
      .                   }
  1,503 ( 0.00%)      }
      .           
      .               /// Gets a line from the list of pre-computed line-beginnings.
      .               /// The line number here is 0-based.
      .               pub fn get_line(&self, line_number: usize) -> Option<Cow<'_, str>> {
      .                   fn get_until_newline(src: &str, begin: usize) -> &str {
      .                       // We can't use `lines.get(line_number+1)` because we might
      .                       // be parsing when we call this function and thus the current
      .                       // line is the last one we have line info for.
-- line 1610 ----------------------------------------
-- line 1627 ----------------------------------------
      .                       Some(Cow::Owned(String::from(get_until_newline(src, begin))))
      .                   } else {
      .                       None
      .                   }
      .               }
      .           
      .               pub fn is_real_file(&self) -> bool {
      .                   self.name.is_real()
    322 ( 0.00%)      }
      .           
      .               pub fn is_imported(&self) -> bool {
      .                   self.src.is_none()
  2,331 ( 0.00%)      }
      .           
      .               pub fn count_lines(&self) -> usize {
      .                   self.lines.len()
      .               }
      .           
      .               /// Finds the line containing the given position. The return value is the
      .               /// index into the `lines` array of this `SourceFile`, not the 1-based line
      .               /// number. If the source_file is empty or the position is located before the
      .               /// first line, `None` is returned.
      .               pub fn lookup_line(&self, pos: BytePos) -> Option<usize> {
  1,192 ( 0.00%)          match self.lines.binary_search(&pos) {
      .                       Ok(idx) => Some(idx),
      .                       Err(0) => None,
      .                       Err(idx) => Some(idx - 1),
      .                   }
      .               }
      .           
      .               pub fn line_bounds(&self, line_index: usize) -> Range<BytePos> {
  3,316 ( 0.00%)          if self.is_empty() {
      .                       return self.start_pos..self.end_pos;
      .                   }
      .           
  2,216 ( 0.00%)          assert!(line_index < self.lines.len());
  3,213 ( 0.00%)          if line_index == (self.lines.len() - 1) {
     56 ( 0.00%)              self.lines[line_index]..self.end_pos
      .                   } else {
  2,094 ( 0.00%)              self.lines[line_index]..self.lines[line_index + 1]
      .                   }
      .               }
      .           
      .               /// Returns whether or not the file contains the given `SourceMap` byte
      .               /// position. The position one past the end of the file is considered to be
      .               /// contained by the file. This implies that files for which `is_empty`
      .               /// returns true still contain one byte position according to this function.
      .               #[inline]
-- line 1674 ----------------------------------------
-- line 1692 ----------------------------------------
      .                       Err(i) if i == 0 => 0,
      .                       Err(i) => self.normalized_pos[i - 1].diff,
      .                   };
      .           
      .                   BytePos::from_u32(pos.0 - self.start_pos.0 + diff)
      .               }
      .           
      .               /// Converts an absolute `BytePos` to a `CharPos` relative to the `SourceFile`.
      2 ( 0.00%)      pub fn bytepos_to_file_charpos(&self, bpos: BytePos) -> CharPos {
      .                   // The number of extra bytes due to multibyte chars in the `SourceFile`.
      .                   let mut total_extra_bytes = 0;
      .           
      6 ( 0.00%)          for mbc in self.multibyte_chars.iter() {
      .                       debug!("{}-byte char at {:?}", mbc.bytes, mbc.pos);
      .                       if mbc.pos < bpos {
      .                           // Every character is at least one byte, so we only
      .                           // count the actual extra bytes.
      .                           total_extra_bytes += mbc.bytes as u32 - 1;
      .                           // We should never see a byte position in the middle of a
      .                           // character.
      .                           assert!(bpos.to_u32() >= mbc.pos.to_u32() + mbc.bytes as u32);
      .                       } else {
      .                           break;
      .                       }
      .                   }
      .           
     12 ( 0.00%)          assert!(self.start_pos.to_u32() + total_extra_bytes <= bpos.to_u32());
     10 ( 0.00%)          CharPos(bpos.to_usize() - self.start_pos.to_usize() - total_extra_bytes as usize)
      4 ( 0.00%)      }
      .           
      .               /// Looks up the file's (1-based) line number and (0-based `CharPos`) column offset, for a
      .               /// given `BytePos`.
      7 ( 0.00%)      pub fn lookup_file_pos(&self, pos: BytePos) -> (usize, CharPos) {
      2 ( 0.00%)          let chpos = self.bytepos_to_file_charpos(pos);
      .                   match self.lookup_line(pos) {
      .                       Some(a) => {
      .                           let line = a + 1; // Line numbers start at 1
      1 ( 0.00%)                  let linebpos = self.lines[a];
      2 ( 0.00%)                  let linechpos = self.bytepos_to_file_charpos(linebpos);
      .                           let col = chpos - linechpos;
      .                           debug!("byte pos {:?} is on the line at byte pos {:?}", pos, linebpos);
      .                           debug!("char pos {:?} is on the line at char pos {:?}", chpos, linechpos);
      .                           debug!("byte is on line: {}", line);
      1 ( 0.00%)                  assert!(chpos >= linechpos);
      .                           (line, col)
      .                       }
      .                       None => (0, chpos),
      .                   }
      8 ( 0.00%)      }
      .           
      .               /// Looks up the file's (1-based) line number, (0-based `CharPos`) column offset, and (0-based)
      .               /// column offset when displayed, for a given `BytePos`.
      8 ( 0.00%)      pub fn lookup_file_pos_with_col_display(&self, pos: BytePos) -> (usize, CharPos, usize) {
      3 ( 0.00%)          let (line, col_or_chpos) = self.lookup_file_pos(pos);
      2 ( 0.00%)          if line > 0 {
      .                       let col = col_or_chpos;
      1 ( 0.00%)              let linebpos = self.lines[line - 1];
      .                       let col_display = {
      .                           let start_width_idx = self
      .                               .non_narrow_chars
      .                               .binary_search_by_key(&linebpos, |x| x.pos())
      .                               .unwrap_or_else(|x| x);
      .                           let end_width_idx = self
      .                               .non_narrow_chars
      .                               .binary_search_by_key(&pos, |x| x.pos())
      .                               .unwrap_or_else(|x| x);
      .                           let special_chars = end_width_idx - start_width_idx;
      .                           let non_narrow: usize = self.non_narrow_chars[start_width_idx..end_width_idx]
      .                               .iter()
      .                               .map(|x| x.width())
      .                               .sum();
      5 ( 0.00%)                  col.0 - special_chars + non_narrow
      .                       };
      .                       (line, col, col_display)
      .                   } else {
      .                       let chpos = col_or_chpos;
      .                       let col_display = {
      .                           let end_width_idx = self
      .                               .non_narrow_chars
      .                               .binary_search_by_key(&pos, |x| x.pos())
      .                               .unwrap_or_else(|x| x);
      .                           let non_narrow: usize =
      .                               self.non_narrow_chars[0..end_width_idx].iter().map(|x| x.width()).sum();
      .                           chpos.0 - end_width_idx + non_narrow
      .                       };
      .                       (0, chpos, col_display)
      .                   }
      7 ( 0.00%)      }
      .           }
      .           
      .           /// Normalizes the source code and records the normalizations.
     80 ( 0.00%)  fn normalize_src(src: &mut String, start_pos: BytePos) -> Vec<NormalizedPos> {
      .               let mut normalized_pos = vec![];
      .               remove_bom(src, &mut normalized_pos);
      .               normalize_newlines(src, &mut normalized_pos);
      .           
      .               // Offset all the positions by start_pos to match the final file positions.
      .               for np in &mut normalized_pos {
  1,287 ( 0.00%)          np.pos.0 += start_pos.0;
      .               }
      .           
      .               normalized_pos
     72 ( 0.00%)  }
      .           
      .           /// Removes UTF-8 BOM, if any.
      .           fn remove_bom(src: &mut String, normalized_pos: &mut Vec<NormalizedPos>) {
      8 ( 0.00%)      if src.starts_with('\u{feff}') {
      .                   src.drain(..3);
      .                   normalized_pos.push(NormalizedPos { pos: BytePos(0), diff: 3 });
      .               }
      .           }
      .           
      .           /// Replaces `\r\n` with `\n` in-place in `src`.
      .           ///
      .           /// Returns error if there's a lone `\r` in the string.
      .           fn normalize_newlines(src: &mut String, normalized_pos: &mut Vec<NormalizedPos>) {
      8 ( 0.00%)      if !src.as_bytes().contains(&b'\r') {
      .                   return;
      .               }
      .           
      .               // We replace `\r\n` with `\n` in-place, which doesn't break utf-8 encoding.
      .               // While we *can* call `as_mut_vec` and do surgery on the live string
      .               // directly, let's rather steal the contents of `src`. This makes the code
      .               // safe even if a panic occurs.
      .           
-- line 1816 ----------------------------------------
-- line 1817 ----------------------------------------
      .               let mut buf = std::mem::replace(src, String::new()).into_bytes();
      .               let mut gap_len = 0;
      .               let mut tail = buf.as_mut_slice();
      .               let mut cursor = 0;
      .               let original_gap = normalized_pos.last().map_or(0, |l| l.diff);
      .               loop {
      .                   let idx = match find_crlf(&tail[gap_len..]) {
      .                       None => tail.len(),
    842 ( 0.00%)              Some(idx) => idx + gap_len,
      .                   };
      .                   tail.copy_within(gap_len..idx, 0);
      .                   tail = &mut tail[idx - gap_len..];
    858 ( 0.00%)          if tail.len() == gap_len {
      .                       break;
      .                   }
    842 ( 0.00%)          cursor += idx - gap_len;
    842 ( 0.00%)          gap_len += 1;
      .                   normalized_pos.push(NormalizedPos {
  1,263 ( 0.00%)              pos: BytePos::from_usize(cursor + 1),
    842 ( 0.00%)              diff: original_gap + gap_len as u32,
      .                   });
      .               }
      .           
      .               // Account for removed `\r`.
      .               // After `set_len`, `buf` is guaranteed to contain utf-8 again.
     16 ( 0.00%)      let new_len = buf.len() - gap_len;
      .               unsafe {
      .                   buf.set_len(new_len);
     40 ( 0.00%)          *src = String::from_utf8_unchecked(buf);
      .               }
      .           
      .               fn find_crlf(src: &[u8]) -> Option<usize> {
      .                   let mut search_idx = 0;
      .                   while let Some(idx) = find_cr(&src[search_idx..]) {
    421 ( 0.00%)              if src[search_idx..].get(idx + 1) != Some(&b'\n') {
      .                           search_idx += idx + 1;
      .                           continue;
      .                       }
    842 ( 0.00%)              return Some(search_idx + idx);
      .                   }
      .                   None
      .               }
      .           
      .               fn find_cr(src: &[u8]) -> Option<usize> {
 12,318 ( 0.00%)          src.iter().position(|&b| b == b'\r')
      .               }
      .           }
      .           
      .           // _____________________________________________________________________________
      .           // Pos, BytePos, CharPos
      .           //
      .           
      .           pub trait Pos {
-- line 1869 ----------------------------------------
-- line 1877 ----------------------------------------
      .               (
      .                   $(
      .                       $(#[$attr:meta])*
      .                       $vis:vis struct $ident:ident($inner_vis:vis $inner_ty:ty);
      .                   )*
      .               ) => {
      .                   $(
      .                       $(#[$attr])*
  6,120 ( 0.00%)              $vis struct $ident($inner_vis $inner_ty);
      .           
      .                       impl Pos for $ident {
      .                           #[inline(always)]
      .                           fn from_usize(n: usize) -> $ident {
    321 ( 0.00%)                      $ident(n as $inner_ty)
      .                           }
      .           
      .                           #[inline(always)]
      .                           fn to_usize(&self) -> usize {
  4,454 ( 0.00%)                      self.0 as usize
      .                           }
      .           
      .                           #[inline(always)]
      .                           fn from_u32(n: u32) -> $ident {
      .                               $ident(n as $inner_ty)
      .                           }
      .           
      .                           #[inline(always)]
-- line 1903 ----------------------------------------
-- line 1906 ----------------------------------------
      .                           }
      .                       }
      .           
      .                       impl Add for $ident {
      .                           type Output = $ident;
      .           
      .                           #[inline(always)]
      .                           fn add(self, rhs: $ident) -> $ident {
997,549 ( 0.39%)                      $ident(self.0 + rhs.0)
      .                           }
      .                       }
      .           
      .                       impl Sub for $ident {
      .                           type Output = $ident;
      .           
      .                           #[inline(always)]
      .                           fn sub(self, rhs: $ident) -> $ident {
599,583 ( 0.23%)                      $ident(self.0 - rhs.0)
      .                           }
      .                       }
      .                   )*
      .               };
      .           }
      .           
      .           impl_pos! {
      .               /// A byte offset.
-- line 1931 ----------------------------------------
-- line 1946 ----------------------------------------
      .           impl<S: rustc_serialize::Encoder> Encodable<S> for BytePos {
      .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
      .                   s.emit_u32(self.0)
      .               }
      .           }
      .           
      .           impl<D: rustc_serialize::Decoder> Decodable<D> for BytePos {
      .               fn decode(d: &mut D) -> BytePos {
 37,364 ( 0.01%)          BytePos(d.read_u32())
      .               }
      .           }
      .           
      .           // _____________________________________________________________________________
      .           // Loc, SourceFileAndLine, SourceFileAndBytePos
      .           //
      .           
      .           /// A source code location used for error reporting.
-- line 1962 ----------------------------------------
-- line 2079 ----------------------------------------
      .               /// offsets into the `SourceMap`). Instead, we hash the (file name, line, column)
      .               /// triple, which stays the same even if the containing `SourceFile` has moved
      .               /// within the `SourceMap`.
      .               ///
      .               /// Also note that we are hashing byte offsets for the column, not unicode
      .               /// codepoint offsets. For the purpose of the hash that's sufficient.
      .               /// Also, hashing filenames is expensive so we avoid doing it twice when the
      .               /// span starts and ends in the same file, which is almost always the case.
 84,966 ( 0.03%)      fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {
      .                   const TAG_VALID_SPAN: u8 = 0;
      .                   const TAG_INVALID_SPAN: u8 = 1;
      .                   const TAG_RELATIVE_SPAN: u8 = 2;
      .           
 15,974 ( 0.01%)          if !ctx.hash_spans() {
      .                       return;
      .                   }
      .           
 68,992 ( 0.03%)          let span = self.data_untracked();
 24,906 ( 0.01%)          span.ctxt.hash_stable(ctx, hasher);
 36,414 ( 0.01%)          span.parent.hash_stable(ctx, hasher);
      .           
 24,480 ( 0.01%)          if span.is_dummy() {
      .                       Hash::hash(&TAG_INVALID_SPAN, hasher);
      .                       return;
      .                   }
      .           
 23,868 ( 0.01%)          if let Some(parent) = span.parent {
      .                       let def_span = ctx.def_span(parent).data_untracked();
      .                       if def_span.contains(span) {
      .                           // This span is enclosed in a definition: only hash the relative position.
      .                           Hash::hash(&TAG_RELATIVE_SPAN, hasher);
      .                           (span.lo - def_span.lo).to_u32().hash_stable(ctx, hasher);
      .                           (span.hi - def_span.lo).to_u32().hash_stable(ctx, hasher);
      .                           return;
      .                       }
      .                   }
      .           
      .                   // If this is not an empty or invalid span, we want to hash the last
      .                   // position that belongs to it, as opposed to hashing the first
      .                   // position past it.
 47,736 ( 0.02%)          let (file, line_lo, col_lo, line_hi, col_hi) = match ctx.span_data_to_lines_and_cols(&span)
      .                   {
 23,868 ( 0.01%)              Some(pos) => pos,
      .                       None => {
      .                           Hash::hash(&TAG_INVALID_SPAN, hasher);
      .                           return;
      .                       }
      .                   };
      .           
      .                   Hash::hash(&TAG_VALID_SPAN, hasher);
      .                   // We truncate the stable ID hash and line and column numbers. The chances
-- line 2129 ----------------------------------------
-- line 2134 ----------------------------------------
      .                   // hash only the length, for example, then two otherwise equal spans with
      .                   // different end locations will have the same hash. This can cause a problem
      .                   // during incremental compilation wherein a previous result for a query that
      .                   // depends on the end location of a span will be incorrectly reused when the
      .                   // end location of the span it depends on has changed (see issue #74890). A
      .                   // similar analysis applies if some query depends specifically on the length
      .                   // of the span, but we only hash the end location. So hash both.
      .           
 11,934 ( 0.00%)          let col_lo_trunc = (col_lo.0 as u64) & 0xFF;
      .                   let line_lo_trunc = ((line_lo as u64) & 0xFF_FF_FF) << 8;
      .                   let col_hi_trunc = (col_hi.0 as u64) & 0xFF << 32;
      .                   let line_hi_trunc = ((line_hi as u64) & 0xFF_FF_FF) << 40;
      .                   let col_line = col_lo_trunc | line_lo_trunc | col_hi_trunc | line_hi_trunc;
 11,934 ( 0.00%)          let len = (span.hi - span.lo).0;
      .                   Hash::hash(&col_line, hasher);
      .                   Hash::hash(&len, hasher);
 97,104 ( 0.04%)      }
      .           }

904,652 ( 0.35%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/type_variable.rs
--------------------------------------------------------------------------------
Ir              

-- line 44 ----------------------------------------
     .           /// Convert from a specific kind of undo to the more general UndoLog
     .           impl<'tcx> From<Instantiate> for UndoLog<'tcx> {
     .               fn from(l: Instantiate) -> Self {
     .                   UndoLog::Values(sv::UndoLog::Other(l))
     .               }
     .           }
     .           
     .           impl<'tcx> Rollback<UndoLog<'tcx>> for TypeVariableStorage<'tcx> {
 6,589 ( 0.00%)      fn reverse(&mut self, undo: UndoLog<'tcx>) {
27,723 ( 0.01%)          match undo {
 5,222 ( 0.00%)              UndoLog::EqRelation(undo) => self.eq_relations.reverse(undo),
 3,214 ( 0.00%)              UndoLog::SubRelation(undo) => self.sub_relations.reverse(undo),
 4,742 ( 0.00%)              UndoLog::Values(undo) => self.values.reverse(undo),
     .                   }
13,178 ( 0.01%)      }
     .           }
     .           
     .           pub struct TypeVariableStorage<'tcx> {
     .               values: sv::SnapshotVecStorage<Delegate>,
     .           
     .               /// Two variables are unified in `eq_relations` when we have a
     .               /// constraint `?X == ?Y`. This table also stores, for each key,
     .               /// the known value.
-- line 66 ----------------------------------------
-- line 136 ----------------------------------------
     .               DynReturnFn,
     .               LatticeVariable,
     .           }
     .           
     .           pub(crate) struct TypeVariableData {
     .               origin: TypeVariableOrigin,
     .           }
     .           
39,112 ( 0.02%)  #[derive(Copy, Clone, Debug)]
     .           pub enum TypeVariableValue<'tcx> {
     .               Known { value: Ty<'tcx> },
     .               Unknown { universe: ty::UniverseIndex },
     .           }
     .           
     .           impl<'tcx> TypeVariableValue<'tcx> {
     .               /// If this value is known, returns the type it is known to be.
     .               /// Otherwise, `None`.
     .               pub fn known(&self) -> Option<Ty<'tcx>> {
23,340 ( 0.01%)          match *self {
     .                       TypeVariableValue::Unknown { .. } => None,
     .                       TypeVariableValue::Known { value } => Some(value),
     .                   }
     .               }
     .           
     .               pub fn is_unknown(&self) -> bool {
     .                   match *self {
     .                       TypeVariableValue::Unknown { .. } => true,
-- line 162 ----------------------------------------
-- line 166 ----------------------------------------
     .           }
     .           
     .           pub(crate) struct Instantiate;
     .           
     .           pub(crate) struct Delegate;
     .           
     .           impl<'tcx> TypeVariableStorage<'tcx> {
     .               pub fn new() -> TypeVariableStorage<'tcx> {
 4,593 ( 0.00%)          TypeVariableStorage {
     .                       values: sv::SnapshotVecStorage::new(),
     .                       eq_relations: ut::UnificationTableStorage::new(),
     .                       sub_relations: ut::UnificationTableStorage::new(),
     .                   }
     .               }
     .           
     .               #[inline]
     .               pub(crate) fn with_log<'a>(
-- line 182 ----------------------------------------
-- line 188 ----------------------------------------
     .           }
     .           
     .           impl<'tcx> TypeVariableTable<'_, 'tcx> {
     .               /// Returns the origin that was given when `vid` was created.
     .               ///
     .               /// Note that this function does not return care whether
     .               /// `vid` has been unified with something else or not.
     .               pub fn var_origin(&self, vid: ty::TyVid) -> &TypeVariableOrigin {
    51 ( 0.00%)          &self.storage.values.get(vid.as_usize()).origin
     .               }
     .           
     .               /// Records that `a == b`, depending on `dir`.
     .               ///
     .               /// Precondition: neither `a` nor `b` are known.
     .               pub fn equate(&mut self, a: ty::TyVid, b: ty::TyVid) {
     .                   debug_assert!(self.probe(a).is_unknown());
     .                   debug_assert!(self.probe(b).is_unknown());
   840 ( 0.00%)          self.eq_relations().union(a, b);
   720 ( 0.00%)          self.sub_relations().union(a, b);
     .               }
     .           
     .               /// Records that `a <: b`, depending on `dir`.
     .               ///
     .               /// Precondition: neither `a` nor `b` are known.
     .               pub fn sub(&mut self, a: ty::TyVid, b: ty::TyVid) {
     .                   debug_assert!(self.probe(a).is_unknown());
     .                   debug_assert!(self.probe(b).is_unknown());
   311 ( 0.00%)          self.sub_relations().union(a, b);
     .               }
     .           
     .               /// Instantiates `vid` with the type `ty`.
     .               ///
     .               /// Precondition: `vid` must not have been previously instantiated.
 9,930 ( 0.00%)      pub fn instantiate(&mut self, vid: ty::TyVid, ty: Ty<'tcx>) {
     .                   let vid = self.root_var(vid);
     .                   debug_assert!(self.probe(vid).is_unknown());
     .                   debug_assert!(
     .                       self.eq_relations().probe_value(vid).is_unknown(),
     .                       "instantiating type variable `{:?}` twice: new-value = {:?}, old-value={:?}",
     .                       vid,
     .                       ty,
     .                       self.eq_relations().probe_value(vid)
     .                   );
13,902 ( 0.01%)          self.eq_relations().union_value(vid, TypeVariableValue::Known { value: ty });
     .           
     .                   // Hack: we only need this so that `types_escaping_snapshot`
     .                   // can see what has been unified; see the Delegate impl for
     .                   // more details.
     .                   self.undo_log.push(Instantiate);
 9,930 ( 0.00%)      }
     .           
     .               /// Creates a new type variable.
     .               ///
     .               /// - `diverging`: indicates if this is a "diverging" type
     .               ///   variable, e.g.,  one created as the type of a `return`
     .               ///   expression. The code in this module doesn't care if a
     .               ///   variable is diverging, but the main Rust type-checker will
     .               ///   sometimes "unify" such variables with the `!` or `()` types.
     .               /// - `origin`: indicates *why* the type variable was created.
     .               ///   The code in this module doesn't care, but it can be useful
     .               ///   for improving error messages.
12,618 ( 0.00%)      pub fn new_var(
     .                   &mut self,
     .                   universe: ty::UniverseIndex,
     .                   origin: TypeVariableOrigin,
     .               ) -> ty::TyVid {
18,927 ( 0.01%)          let eq_key = self.eq_relations().new_key(TypeVariableValue::Unknown { universe });
     .           
10,515 ( 0.00%)          let sub_key = self.sub_relations().new_key(());
 2,103 ( 0.00%)          assert_eq!(eq_key.vid, sub_key);
     .           
18,927 ( 0.01%)          let index = self.values().push(TypeVariableData { origin });
 8,412 ( 0.00%)          assert_eq!(eq_key.vid.as_u32(), index as u32);
     .           
     .                   debug!("new_var(index={:?}, universe={:?}, origin={:?}", eq_key.vid, universe, origin,);
     .           
     .                   eq_key.vid
14,721 ( 0.01%)      }
     .           
     .               /// Returns the number of type variables created thus far.
     .               pub fn num_vars(&self) -> usize {
   123 ( 0.00%)          self.storage.values.len()
     .               }
     .           
     .               /// Returns the "root" variable of `vid` in the `eq_relations`
     .               /// equivalence table. All type variables that have been equated
     .               /// will yield the same root variable (per the union-find
     .               /// algorithm), so `root_var(a) == root_var(b)` implies that `a ==
     .               /// b` (transitively).
     .               pub fn root_var(&mut self, vid: ty::TyVid) -> ty::TyVid {
 7,620 ( 0.00%)          self.eq_relations().find(vid).vid
     .               }
     .           
     .               /// Returns the "root" variable of `vid` in the `sub_relations`
     .               /// equivalence table. All type variables that have been are
     .               /// related via equality or subtyping will yield the same root
     .               /// variable (per the union-find algorithm), so `sub_root_var(a)
     .               /// == sub_root_var(b)` implies that:
     .               ///
     .               ///     exists X. (a <: X || X <: a) && (b <: X || X <: b)
    28 ( 0.00%)      pub fn sub_root_var(&mut self, vid: ty::TyVid) -> ty::TyVid {
 6,312 ( 0.00%)          self.sub_relations().find(vid)
    56 ( 0.00%)      }
     .           
     .               /// Returns `true` if `a` and `b` have same "sub-root" (i.e., exists some
     .               /// type X such that `forall i in {a, b}. (i <: X || X <: i)`.
     .               pub fn sub_unified(&mut self, a: ty::TyVid, b: ty::TyVid) -> bool {
     .                   self.sub_root_var(a) == self.sub_root_var(b)
     .               }
     .           
     .               /// Retrieves the type to which `vid` has been instantiated, if
     .               /// any.
86,790 ( 0.03%)      pub fn probe(&mut self, vid: ty::TyVid) -> TypeVariableValue<'tcx> {
     .                   self.inlined_probe(vid)
86,790 ( 0.03%)      }
     .           
     .               /// An always-inlined variant of `probe`, for very hot call sites.
     .               #[inline(always)]
     .               pub fn inlined_probe(&mut self, vid: ty::TyVid) -> TypeVariableValue<'tcx> {
42,216 ( 0.02%)          self.eq_relations().inlined_probe_value(vid)
     .               }
     .           
     .               /// If `t` is a type-inference variable, and it has been
     .               /// instantiated, then return the with which it was
     .               /// instantiated. Otherwise, returns `t`.
     .               pub fn replace_if_possible(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {
21,346 ( 0.01%)          match *t.kind() {
16,774 ( 0.01%)              ty::Infer(ty::TyVar(v)) => match self.probe(v) {
     .                           TypeVariableValue::Unknown { .. } => t,
     .                           TypeVariableValue::Known { value } => value,
     .                       },
     .                       _ => t,
     .                   }
     .               }
     .           
     .               #[inline]
-- line 323 ----------------------------------------
-- line 324 ----------------------------------------
     .               fn values(
     .                   &mut self,
     .               ) -> sv::SnapshotVec<Delegate, &mut Vec<TypeVariableData>, &mut InferCtxtUndoLogs<'tcx>> {
     .                   self.storage.values.with_log(self.undo_log)
     .               }
     .           
     .               #[inline]
     .               fn eq_relations(&mut self) -> super::UnificationTable<'_, 'tcx, TyVidEqKey<'tcx>> {
68,765 ( 0.03%)          self.storage.eq_relations.with_log(self.undo_log)
     .               }
     .           
     .               #[inline]
     .               fn sub_relations(&mut self) -> super::UnificationTable<'_, 'tcx, ty::TyVid> {
 4,550 ( 0.00%)          self.storage.sub_relations.with_log(self.undo_log)
     .               }
     .           
     .               /// Returns a range of the type variables created during the snapshot.
   615 ( 0.00%)      pub fn vars_since_snapshot(
     .                   &mut self,
     .                   value_count: usize,
     .               ) -> (Range<TyVid>, Vec<TypeVariableOrigin>) {
     .                   let range = TyVid::from_usize(value_count)..TyVid::from_usize(self.num_vars());
   738 ( 0.00%)          (
     .                       range.start..range.end,
     .                       (range.start.as_usize()..range.end.as_usize())
     .                           .map(|index| self.storage.values.get(index).origin)
     .                           .collect(),
     .                   )
   738 ( 0.00%)      }
     .           
     .               /// Returns indices of all variables that are not yet
     .               /// instantiated.
     .               pub fn unsolved_variables(&mut self) -> Vec<ty::TyVid> {
     .                   (0..self.storage.values.len())
     .                       .filter_map(|i| {
     .                           let vid = ty::TyVid::from_usize(i);
 3,132 ( 0.00%)                  match self.probe(vid) {
     .                               TypeVariableValue::Unknown { .. } => Some(vid),
     .                               TypeVariableValue::Known { .. } => None,
     .                           }
     .                       })
     .                       .collect()
     .               }
     .           }
     .           
-- line 368 ----------------------------------------
-- line 391 ----------------------------------------
     .           /// These structs (a newtyped TyVid) are used as the unification key
     .           /// for the `eq_relations`; they carry a `TypeVariableValue` along
     .           /// with them.
     .           #[derive(Copy, Clone, Debug, PartialEq, Eq)]
     .           pub(crate) struct TyVidEqKey<'tcx> {
     .               vid: ty::TyVid,
     .           
     .               // in the table, we map each ty-vid to one of these:
33,494 ( 0.01%)      phantom: PhantomData<TypeVariableValue<'tcx>>,
     .           }
     .           
     .           impl<'tcx> From<ty::TyVid> for TyVidEqKey<'tcx> {
     .               #[inline] // make this function eligible for inlining - it is quite hot.
     .               fn from(vid: ty::TyVid) -> Self {
     .                   TyVidEqKey { vid, phantom: PhantomData }
     .               }
     .           }
-- line 407 ----------------------------------------
-- line 419 ----------------------------------------
     .                   "TyVidEqKey"
     .               }
     .           }
     .           
     .           impl<'tcx> ut::UnifyValue for TypeVariableValue<'tcx> {
     .               type Error = ut::NoError;
     .           
     .               fn unify_values(value1: &Self, value2: &Self) -> Result<Self, ut::NoError> {
 8,544 ( 0.00%)          match (value1, value2) {
     .                       // We never equate two type variables, both of which
     .                       // have known types.  Instead, we recursively equate
     .                       // those types.
     .                       (&TypeVariableValue::Known { .. }, &TypeVariableValue::Known { .. }) => {
     .                           bug!("equating two type variables, both of which have known types")
     .                       }
     .           
     .                       // If one side is known, prefer that one.
     .                       (&TypeVariableValue::Known { .. }, &TypeVariableValue::Unknown { .. }) => Ok(*value1),
     .                       (&TypeVariableValue::Unknown { .. }, &TypeVariableValue::Known { .. }) => Ok(*value2),
     .           
     .                       // If both sides are *unknown*, it hardly matters, does it?
     .                       (
   120 ( 0.00%)                  &TypeVariableValue::Unknown { universe: universe1 },
   120 ( 0.00%)                  &TypeVariableValue::Unknown { universe: universe2 },
     .                       ) => {
     .                           // If we unify two unbound variables, ?T and ?U, then whatever
     .                           // value they wind up taking (which must be the same value) must
     .                           // be nameable by both universes. Therefore, the resulting
     .                           // universe is the minimum of the two universes, because that is
     .                           // the one which contains the fewest names in scope.
     .                           let universe = cmp::min(universe1, universe2);
   480 ( 0.00%)                  Ok(TypeVariableValue::Unknown { universe })
     .                       }
     .                   }
     .               }
     .           }

 6,358 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/type_variable.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_index/src/interval.rs
--------------------------------------------------------------------------------
Ir              

-- line 25 ----------------------------------------
     .                   Bound::Included(start) => start.index() as u32,
     .                   Bound::Excluded(start) => start.index() as u32 + 1,
     .                   Bound::Unbounded => 0,
     .               }
     .           }
     .           
     .           #[inline]
     .           fn inclusive_end<T: Idx>(domain: usize, range: impl RangeBounds<T>) -> Option<u32> {
15,960 ( 0.01%)      let end = match range.end_bound() {
     .                   Bound::Included(end) => end.index() as u32,
     .                   Bound::Excluded(end) => end.index().checked_sub(1)? as u32,
     .                   Bound::Unbounded => domain.checked_sub(1)? as u32,
     .               };
     .               Some(end)
     .           }
     .           
     .           impl<I: Idx> IntervalSet<I> {
-- line 41 ----------------------------------------
-- line 59 ----------------------------------------
     .               where
     .                   I: Step,
     .               {
     .                   self.map.iter().map(|&(start, end)| I::new(start as usize)..I::new(end as usize + 1))
     .               }
     .           
     .               /// Returns true if we increased the number of elements present.
     .               pub fn insert(&mut self, point: I) -> bool {
 7,436 ( 0.00%)          self.insert_range(point..=point)
     .               }
     .           
     .               /// Returns true if we increased the number of elements present.
19,278 ( 0.01%)      pub fn insert_range(&mut self, range: impl RangeBounds<I> + Clone) -> bool {
     .                   let start = inclusive_start(range.clone());
     .                   let Some(mut end) = inclusive_end(self.domain, range) else {
     .                       // empty range
     .                       return false;
     .                   };
18,360 ( 0.01%)          if start > end {
     .                       return false;
     .                   }
     .           
     .                   loop {
     .                       // This condition looks a bit weird, but actually makes sense.
     .                       //
     .                       // if r.0 == end + 1, then we're actually adjacent, so we want to
     .                       // continue to the next range. We're looking here for the first
     .                       // range which starts *non-adjacently* to our end.
11,875 ( 0.00%)              let next = self.map.partition_point(|r| r.0 <= end + 1);
 5,135 ( 0.00%)              if let Some(last) = next.checked_sub(1) {
     .                           let (prev_start, prev_end) = &mut self.map[last];
30,588 ( 0.01%)                  if *prev_end + 1 >= start {
     .                               // If the start for the inserted range is adjacent to the
     .                               // end of the previous, we can extend the previous range.
 8,858 ( 0.00%)                      if start < *prev_start {
     .                                   // Our range starts before the one we found. We'll need
     .                                   // to *remove* it, and then try again.
     .                                   //
     .                                   // FIXME: This is not so efficient; we may need to
     .                                   // recurse a bunch of times here. Instead, it's probably
     .                                   // better to do something like drain_filter(...) on the
     .                                   // map to be able to delete or modify all the ranges in
     .                                   // start..=end and then potentially re-insert a new
-- line 101 ----------------------------------------
-- line 104 ----------------------------------------
     .                                   self.map.remove(last);
     .                               } else {
     .                                   // We overlap with the previous range, increase it to
     .                                   // include us.
     .                                   //
     .                                   // Make sure we're actually going to *increase* it though --
     .                                   // it may be that end is just inside the previously existing
     .                                   // set.
 4,037 ( 0.00%)                          return if end > *prev_end {
 2,362 ( 0.00%)                              *prev_end = end;
     .                                       true
     .                                   } else {
     .                                       false
     .                                   };
     .                               }
     .                           } else {
     .                               // Otherwise, we don't overlap, so just insert
 2,007 ( 0.00%)                      self.map.insert(last + 1, (start, end));
     .                               return true;
     .                           }
     .                       } else {
     .                           if self.map.is_empty() {
     .                               // Quite common in practice, and expensive to call memcpy
     .                               // with length zero.
     .                               self.map.push((start, end));
     .                           } else {
   111 ( 0.00%)                      self.map.insert(next, (start, end));
     .                           }
     .                           return true;
     .                       }
     .                   }
17,136 ( 0.01%)      }
     .           
     .               pub fn contains(&self, needle: I) -> bool {
     .                   let needle = needle.index() as u32;
 2,568 ( 0.00%)          let last = match self.map.partition_point(|r| r.0 <= needle).checked_sub(1) {
     .                       Some(idx) => idx,
     .                       None => {
     .                           // All ranges in the map start after the new range's end
     .                           return false;
     .                       }
     .                   };
     .                   let (_, prev_end) = &self.map[last];
 2,562 ( 0.00%)          needle <= *prev_end
     .               }
     .           
     .               pub fn superset(&self, other: &IntervalSet<I>) -> bool
     .               where
     .                   I: Step,
     .               {
     .                   // FIXME: Performance here is probably not great. We will be doing a lot
     .                   // of pointless tree traversals.
     .                   other.iter().all(|elem| self.contains(elem))
     .               }
     .           
     .               pub fn is_empty(&self) -> bool {
 1,316 ( 0.00%)          self.map.is_empty()
     .               }
     .           
     .               /// Returns the maximum (last) element present in the set from `range`.
 1,050 ( 0.00%)      pub fn last_set_in(&self, range: impl RangeBounds<I> + Clone) -> Option<I> {
     .                   let start = inclusive_start(range.clone());
     .                   let Some(end) = inclusive_end(self.domain, range) else {
     .                       // empty range
     .                       return None;
     .                   };
 2,100 ( 0.00%)          if start > end {
     .                       return None;
     .                   }
 1,888 ( 0.00%)          let last = match self.map.partition_point(|r| r.0 <= end).checked_sub(1) {
     .                       Some(idx) => idx,
     .                       None => {
     .                           // All ranges in the map start after the new range's end
     .                           return None;
     .                       }
     .                   };
     .                   let (_, prev_end) = &self.map[last];
   924 ( 0.00%)          if start <= *prev_end { Some(I::new(std::cmp::min(*prev_end, end) as usize)) } else { None }
 2,100 ( 0.00%)      }
     .           
 2,770 ( 0.00%)      pub fn insert_all(&mut self) {
     .                   self.clear();
   554 ( 0.00%)          self.map.push((0, self.domain.try_into().unwrap()));
 2,770 ( 0.00%)      }
     .           
57,936 ( 0.02%)      pub fn union(&mut self, other: &IntervalSet<I>) -> bool
     .               where
     .                   I: Step,
     .               {
21,726 ( 0.01%)          assert_eq!(self.domain, other.domain);
     .                   let mut did_insert = false;
     .                   for range in other.iter_intervals() {
21,114 ( 0.01%)              did_insert |= self.insert_range(range);
     .                   }
     .                   did_insert
65,178 ( 0.03%)      }
     .           }
     .           
     .           /// This data structure optimizes for cases where the stored bits in each row
     .           /// are expected to be highly contiguous (long ranges of 1s or 0s), in contrast
     .           /// to BitMatrix and SparseBitMatrix which are optimized for
     .           /// "random"/non-contiguous bits and cheap(er) point queries at the expense of
     .           /// memory usage.
     .           #[derive(Clone)]
-- line 207 ----------------------------------------
-- line 215 ----------------------------------------
     .           }
     .           
     .           impl<R: Idx, C: Step + Idx> SparseIntervalMatrix<R, C> {
     .               pub fn new(column_size: usize) -> SparseIntervalMatrix<R, C> {
     .                   SparseIntervalMatrix { rows: IndexVec::new(), column_size }
     .               }
     .           
     .               pub fn rows(&self) -> impl Iterator<Item = R> {
   154 ( 0.00%)          self.rows.indices()
     .               }
     .           
     .               pub fn row(&self, row: R) -> Option<&IntervalSet<C>> {
     .                   self.rows.get(row)
     .               }
     .           
     .               fn ensure_row(&mut self, row: R) -> &mut IntervalSet<C> {
   479 ( 0.00%)          self.rows.ensure_contains_elem(row, || IntervalSet::new(self.column_size));
     .                   &mut self.rows[row]
     .               }
     .           
     .               pub fn union_row(&mut self, row: R, from: &IntervalSet<C>) -> bool
     .               where
     .                   C: Step,
     .               {
 9,996 ( 0.00%)          self.ensure_row(row).union(from)
     .               }
     .           
     .               pub fn union_rows(&mut self, read: R, write: R) -> bool
     .               where
     .                   C: Step,
     .               {
 7,228 ( 0.00%)          if read == write || self.rows.get(read).is_none() {
     .                       return false;
     .                   }
     .                   self.ensure_row(write);
18,070 ( 0.01%)          let (read_row, write_row) = self.rows.pick2_mut(read, write);
14,456 ( 0.01%)          write_row.union(read_row)
     .               }
     .           
     .               pub fn insert_all_into_row(&mut self, row: R) {
   831 ( 0.00%)          self.ensure_row(row).insert_all();
     .               }
     .           
     .               pub fn insert_range(&mut self, row: R, range: impl RangeBounds<C> + Clone) {
     .                   self.ensure_row(row).insert_range(range);
     .               }
     .           
     .               pub fn insert(&mut self, row: R, point: C) -> bool {
     .                   self.ensure_row(row).insert(point)
-- line 263 ----------------------------------------

77,059 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_index/src/interval.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs
--------------------------------------------------------------------------------
Ir               

-- line 187 ----------------------------------------
      .           /// ```
      .           pub struct HashMap<K, V, S = DefaultHashBuilder, A: Allocator + Clone = Global> {
      .               pub(crate) hash_builder: S,
      .               pub(crate) table: RawTable<(K, V), A>,
      .           }
      .           
      .           impl<K: Clone, V: Clone, S: Clone, A: Allocator + Clone> Clone for HashMap<K, V, S, A> {
      .               fn clone(&self) -> Self {
     44 ( 0.00%)          HashMap {
      .                       hash_builder: self.hash_builder.clone(),
      9 ( 0.00%)              table: self.table.clone(),
      .                   }
      .               }
      .           
      .               fn clone_from(&mut self, source: &Self) {
      .                   self.table.clone_from(&source.table);
      .           
      .                   // Update hash_builder only if we successfully cloned all elements.
      .                   self.hash_builder.clone_from(&source.hash_builder);
-- line 205 ----------------------------------------
-- line 210 ----------------------------------------
      .           /// instances of any functions like RawTable::reserve from being generated
      .           #[cfg_attr(feature = "inline-more", inline)]
      .           pub(crate) fn make_hasher<K, Q, V, S>(hash_builder: &S) -> impl Fn(&(Q, V)) -> u64 + '_
      .           where
      .               K: Borrow<Q>,
      .               Q: Hash,
      .               S: BuildHasher,
      .           {
 17,274 ( 0.01%)      move |val| make_hash::<K, Q, S>(hash_builder, &val.0)
      .           }
      .           
      .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
      .           /// instances of any functions like RawTable::reserve from being generated
      .           #[cfg_attr(feature = "inline-more", inline)]
      .           fn equivalent_key<Q, K, V>(k: &Q) -> impl Fn(&(K, V)) -> bool + '_
      .           where
      .               K: Borrow<Q>,
      .               Q: ?Sized + Eq,
      .           {
 54,461 ( 0.02%)      move |x| k.eq(x.0.borrow())
      .           }
      .           
      .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
      .           /// instances of any functions like RawTable::reserve from being generated
      .           #[cfg_attr(feature = "inline-more", inline)]
      .           fn equivalent<Q, K>(k: &Q) -> impl Fn(&K) -> bool + '_
      .           where
      .               K: Borrow<Q>,
      .               Q: ?Sized + Eq,
      .           {
 49,717 ( 0.02%)      move |x| k.eq(x.borrow())
      .           }
      .           
      .           #[cfg(not(feature = "nightly"))]
      .           #[cfg_attr(feature = "inline-more", inline)]
      .           pub(crate) fn make_hash<K, Q, S>(hash_builder: &S, val: &Q) -> u64
      .           where
      .               K: Borrow<Q>,
      .               Q: Hash + ?Sized,
-- line 248 ----------------------------------------
-- line 251 ----------------------------------------
      .               use core::hash::Hasher;
      .               let mut state = hash_builder.build_hasher();
      .               val.hash(&mut state);
      .               state.finish()
      .           }
      .           
      .           #[cfg(feature = "nightly")]
      .           #[cfg_attr(feature = "inline-more", inline)]
      4 ( 0.00%)  pub(crate) fn make_hash<K, Q, S>(hash_builder: &S, val: &Q) -> u64
      .           where
      .               K: Borrow<Q>,
      .               Q: Hash + ?Sized,
      .               S: BuildHasher,
      .           {
      .               hash_builder.hash_one(val)
      8 ( 0.00%)  }
      .           
      .           #[cfg(not(feature = "nightly"))]
      .           #[cfg_attr(feature = "inline-more", inline)]
      .           pub(crate) fn make_insert_hash<K, S>(hash_builder: &S, val: &K) -> u64
      .           where
      .               K: Hash,
      .               S: BuildHasher,
      .           {
-- line 274 ----------------------------------------
-- line 367 ----------------------------------------
      .               /// let s = DefaultHashBuilder::default();
      .               /// let mut map = HashMap::with_hasher(s);
      .               /// map.insert(1, 2);
      .               /// ```
      .               ///
      .               /// [`BuildHasher`]: ../../std/hash/trait.BuildHasher.html
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub const fn with_hasher(hash_builder: S) -> Self {
 31,051 ( 0.01%)          Self {
      .                       hash_builder,
      .                       table: RawTable::new(),
      .                   }
      .               }
      .           
      .               /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`
      .               /// to hash the keys.
      .               ///
-- line 383 ----------------------------------------
-- line 437 ----------------------------------------
      .               /// use hashbrown::hash_map::DefaultHashBuilder;
      .               ///
      .               /// let s = DefaultHashBuilder::default();
      .               /// let mut map = HashMap::with_hasher(s);
      .               /// map.insert(1, 2);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn with_hasher_in(hash_builder: S, alloc: A) -> Self {
     13 ( 0.00%)          Self {
      .                       hash_builder,
      .                       table: RawTable::new_in(alloc),
      .                   }
      .               }
      .           
      .               /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`
      .               /// to hash the keys. It will be allocated with the given allocator.
      .               ///
-- line 453 ----------------------------------------
-- line 663 ----------------------------------------
      .               ///
      .               /// let mut a = HashMap::new();
      .               /// assert_eq!(a.len(), 0);
      .               /// a.insert(1, "a");
      .               /// assert_eq!(a.len(), 1);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn len(&self) -> usize {
  3,612 ( 0.00%)          self.table.len()
      .               }
      .           
      .               /// Returns `true` if the map contains no elements.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// use hashbrown::HashMap;
-- line 679 ----------------------------------------
-- line 680 ----------------------------------------
      .               ///
      .               /// let mut a = HashMap::new();
      .               /// assert!(a.is_empty());
      .               /// a.insert(1, "a");
      .               /// assert!(!a.is_empty());
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn is_empty(&self) -> bool {
 11,509 ( 0.00%)          self.len() == 0
      .               }
      .           
      .               /// Clears the map, returning all key-value pairs as an iterator. Keeps the
      .               /// allocated memory for reuse.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
-- line 696 ----------------------------------------
-- line 790 ----------------------------------------
      .               /// use hashbrown::HashMap;
      .               ///
      .               /// let mut a = HashMap::new();
      .               /// a.insert(1, "a");
      .               /// a.clear();
      .               /// assert!(a.is_empty());
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      6 ( 0.00%)      pub fn clear(&mut self) {
      .                   self.table.clear();
      6 ( 0.00%)      }
      .           
      .               /// Creates a consuming iterator visiting all the keys in arbitrary order.
      .               /// The map cannot be used after calling this.
      .               /// The iterator element type is `K`.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
-- line 808 ----------------------------------------
-- line 963 ----------------------------------------
      .               /// }
      .               ///
      .               /// assert_eq!(letters[&'s'], 2);
      .               /// assert_eq!(letters[&'t'], 3);
      .               /// assert_eq!(letters[&'u'], 1);
      .               /// assert_eq!(letters.get(&'y'), None);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
     24 ( 0.00%)      pub fn entry(&mut self, key: K) -> Entry<'_, K, V, S, A> {
      .                   let hash = make_insert_hash::<K, S>(&self.hash_builder, &key);
      .                   if let Some(elem) = self.table.find(hash, equivalent_key(&key)) {
      .                       Entry::Occupied(OccupiedEntry {
      .                           hash,
      .                           key: Some(key),
      .                           elem,
      .                           table: self,
      .                       })
      .                   } else {
     30 ( 0.00%)              Entry::Vacant(VacantEntry {
      .                           hash,
      .                           key,
      .                           table: self,
      .                       })
      .                   }
     30 ( 0.00%)      }
      .           
      .               /// Gets the given key's corresponding entry by reference in the map for in-place manipulation.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// use hashbrown::HashMap;
      .               ///
-- line 995 ----------------------------------------
-- line 1047 ----------------------------------------
      .               /// ```
      .               #[inline]
      .               pub fn get<Q: ?Sized>(&self, k: &Q) -> Option<&V>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
      .                   // Avoid `Option::map` because it bloats LLVM IR.
 99,022 ( 0.04%)          match self.get_inner(k) {
      .                       Some(&(_, ref v)) => Some(v),
      .                       None => None,
      .                   }
      .               }
      .           
      .               /// Returns the key-value pair corresponding to the supplied key.
      .               ///
      .               /// The supplied key may be any borrowed form of the map's key type, but
-- line 1063 ----------------------------------------
-- line 1091 ----------------------------------------
      .               }
      .           
      .               #[inline]
      .               fn get_inner<Q: ?Sized>(&self, k: &Q) -> Option<&(K, V)>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
130,650 ( 0.05%)          if self.table.is_empty() {
      .                       None
      .                   } else {
      2 ( 0.00%)              let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
      .                       self.table.get(hash, equivalent_key(k))
      .                   }
      .               }
      .           
      .               /// Returns the key-value pair corresponding to the supplied key, with a mutable reference to value.
      .               ///
      .               /// The supplied key may be any borrowed form of the map's key type, but
      .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
-- line 1110 ----------------------------------------
-- line 1155 ----------------------------------------
      .               /// use hashbrown::HashMap;
      .               ///
      .               /// let mut map = HashMap::new();
      .               /// map.insert(1, "a");
      .               /// assert_eq!(map.contains_key(&1), true);
      .               /// assert_eq!(map.contains_key(&2), false);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
 38,419 ( 0.01%)      pub fn contains_key<Q: ?Sized>(&self, k: &Q) -> bool
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
      .                   self.get_inner(k).is_some()
 50,382 ( 0.02%)      }
      .           
      .               /// Returns a mutable reference to the value corresponding to the key.
      .               ///
      .               /// The key may be any borrowed form of the map's key type, but
      .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
      .               /// the key type.
      .               ///
      .               /// [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html
-- line 1177 ----------------------------------------
-- line 1185 ----------------------------------------
      .               /// let mut map = HashMap::new();
      .               /// map.insert(1, "a");
      .               /// if let Some(x) = map.get_mut(&1) {
      .               ///     *x = "b";
      .               /// }
      .               /// assert_eq!(map[&1], "b");
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
    115 ( 0.00%)      pub fn get_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut V>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
      .                   // Avoid `Option::map` because it bloats LLVM IR.
    345 ( 0.00%)          match self.get_inner_mut(k) {
      .                       Some(&mut (_, ref mut v)) => Some(v),
      .                       None => None,
      .                   }
    230 ( 0.00%)      }
      .           
      .               #[inline]
      .               fn get_inner_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut (K, V)>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
    115 ( 0.00%)          if self.table.is_empty() {
      .                       None
      .                   } else {
      .                       let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
      .                       self.table.get_mut(hash, equivalent_key(k))
      .                   }
      .               }
      .           
      .               /// Attempts to get mutable references to `N` values in the map at once.
-- line 1219 ----------------------------------------
-- line 1495 ----------------------------------------
      .               /// assert_eq!(map.insert(37, "a"), None);
      .               /// assert_eq!(map.is_empty(), false);
      .               ///
      .               /// map.insert(37, "b");
      .               /// assert_eq!(map.insert(37, "c"), Some("b"));
      .               /// assert_eq!(map[&37], "c");
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
434,917 ( 0.17%)      pub fn insert(&mut self, k: K, v: V) -> Option<V> {
      .                   let hash = make_insert_hash::<K, S>(&self.hash_builder, &k);
    123 ( 0.00%)          if let Some((_, item)) = self.table.get_mut(hash, equivalent_key(&k)) {
      .                       Some(mem::replace(item, v))
      .                   } else {
225,668 ( 0.09%)              self.table
182,367 ( 0.07%)                  .insert(hash, (k, v), make_hasher::<K, _, V, S>(&self.hash_builder));
 21,402 ( 0.01%)              None
      .                   }
412,243 ( 0.16%)      }
      .           
      .               /// Insert a key-value pair into the map without checking
      .               /// if the key already exists in the map.
      .               ///
      .               /// Returns a reference to the key and value just inserted.
      .               ///
      .               /// This operation is safe if a key does not exist in the map.
      .               ///
-- line 1520 ----------------------------------------
-- line 1592 ----------------------------------------
      .               /// use hashbrown::HashMap;
      .               ///
      .               /// let mut map = HashMap::new();
      .               /// map.insert(1, "a");
      .               /// assert_eq!(map.remove(&1), Some("a"));
      .               /// assert_eq!(map.remove(&1), None);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
 11,901 ( 0.00%)      pub fn remove<Q: ?Sized>(&mut self, k: &Q) -> Option<V>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
      .                   // Avoid `Option::map` because it bloats LLVM IR.
103,715 ( 0.04%)          match self.remove_entry(k) {
  3,304 ( 0.00%)              Some((_, v)) => Some(v),
 10,708 ( 0.00%)              None => None,
      .                   }
 27,184 ( 0.01%)      }
      .           
      .               /// Removes a key from the map, returning the stored key and value if the
      .               /// key was previously in the map.
      .               ///
      .               /// The key may be any borrowed form of the map's key type, but
      .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
      .               /// the key type.
      .               ///
-- line 1618 ----------------------------------------
-- line 1631 ----------------------------------------
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn remove_entry<Q: ?Sized>(&mut self, k: &Q) -> Option<(K, V)>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
      .                   let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
 33,452 ( 0.01%)          self.table.remove_entry(hash, equivalent_key(k))
      .               }
      .           }
      .           
      .           impl<K, V, S, A: Allocator + Clone> HashMap<K, V, S, A> {
      .               /// Creates a raw entry builder for the HashMap.
      .               ///
      .               /// Raw entries provide the lowest level of control for searching and
      .               /// manipulating a map. They must be manually initialized with a hash and
-- line 1647 ----------------------------------------
-- line 2209 ----------------------------------------
      .               /// Creates a `RawEntryMut` from the given key and its hash.
      .               #[inline]
      .               #[allow(clippy::wrong_self_convention)]
      .               pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> RawEntryMut<'a, K, V, S, A>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Eq,
      .               {
190,538 ( 0.07%)          self.from_hash(hash, equivalent(k))
      .               }
      .           }
      .           
      .           impl<'a, K, V, S, A: Allocator + Clone> RawEntryBuilderMut<'a, K, V, S, A> {
      .               /// Creates a `RawEntryMut` from the given hash.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               #[allow(clippy::wrong_self_convention)]
536,063 ( 0.21%)      pub fn from_hash<F>(self, hash: u64, is_match: F) -> RawEntryMut<'a, K, V, S, A>
      .               where
      .                   for<'b> F: FnMut(&'b K) -> bool,
      .               {
      .                   self.search(hash, is_match)
560,259 ( 0.22%)      }
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn search<F>(self, hash: u64, mut is_match: F) -> RawEntryMut<'a, K, V, S, A>
      .               where
      .                   for<'b> F: FnMut(&'b K) -> bool,
      .               {
 58,188 ( 0.02%)          match self.map.table.find(hash, |(k, _)| is_match(k)) {
298,733 ( 0.12%)              Some(elem) => RawEntryMut::Occupied(RawOccupiedEntryMut {
      .                           elem,
      .                           table: &mut self.map.table,
      .                           hash_builder: &self.map.hash_builder,
      .                       }),
 46,104 ( 0.02%)              None => RawEntryMut::Vacant(RawVacantEntryMut {
      .                           table: &mut self.map.table,
      .                           hash_builder: &self.map.hash_builder,
      .                       }),
      .                   }
      .               }
      .           }
      .           
      .           impl<'a, K, V, S, A: Allocator + Clone> RawEntryBuilder<'a, K, V, S, A> {
-- line 2251 ----------------------------------------
-- line 2260 ----------------------------------------
      .               {
      .                   let hash = make_hash::<K, Q, S>(&self.map.hash_builder, k);
      .                   self.from_key_hashed_nocheck(hash, k)
      .               }
      .           
      .               /// Access an entry by a key and its hash.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               #[allow(clippy::wrong_self_convention)]
144,267 ( 0.06%)      pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> Option<(&'a K, &'a V)>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Eq,
      .               {
184,463 ( 0.07%)          self.from_hash(hash, equivalent(k))
271,451 ( 0.11%)      }
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn search<F>(self, hash: u64, mut is_match: F) -> Option<(&'a K, &'a V)>
      .               where
      .                   F: FnMut(&K) -> bool,
      .               {
296,176 ( 0.12%)          match self.map.table.get(hash, |(k, _)| is_match(k)) {
      .                       Some(&(ref key, ref value)) => Some((key, value)),
      .                       None => None,
      .                   }
      .               }
      .           
      .               /// Access an entry by hash.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               #[allow(clippy::wrong_self_convention)]
-- line 2289 ----------------------------------------
-- line 2624 ----------------------------------------
      .               /// and returns a mutable reference to it.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               #[allow(clippy::shadow_unrelated)]
      .               pub fn insert_hashed_nocheck(self, hash: u64, key: K, value: V) -> (&'a mut K, &'a mut V)
      .               where
      .                   K: Hash,
      .                   S: BuildHasher,
      .               {
 75,629 ( 0.03%)          let &mut (ref mut k, ref mut v) = self.table.insert_entry(
      .                       hash,
      .                       (key, value),
      .                       make_hasher::<K, _, V, S>(self.hash_builder),
      .                   );
      .                   (k, v)
      .               }
      .           
      .               /// Set the value of an entry with a custom hasher function.
-- line 2640 ----------------------------------------
-- line 2974 ----------------------------------------
      .               /// map.insert("a", 1);
      .               /// map.insert("b", 2);
      .               /// map.insert("c", 3);
      .               ///
      .               /// // Not possible with .iter()
      .               /// let vec: Vec<(&str, i32)> = map.into_iter().collect();
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
    410 ( 0.00%)      fn into_iter(self) -> IntoIter<K, V, A> {
  7,629 ( 0.00%)          IntoIter {
  4,184 ( 0.00%)              inner: self.table.into_iter(),
      .                   }
  1,230 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, K, V> Iterator for Iter<'a, K, V> {
      .               type Item = (&'a K, &'a V);
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn next(&mut self) -> Option<(&'a K, &'a V)> {
      .                   // Avoid `Option::map` because it bloats LLVM IR.
 25,277 ( 0.01%)          match self.inner.next() {
      .                       Some(x) => unsafe {
      .                           let r = x.as_ref();
    211 ( 0.00%)                  Some((&r.0, &r.1))
      .                       },
      .                       None => None,
      .                   }
      .               }
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
      .                   self.inner.size_hint()
      .               }
-- line 3006 ----------------------------------------
-- line 3051 ----------------------------------------
      .               }
      .           }
      .           
      .           impl<K, V, A: Allocator + Clone> Iterator for IntoIter<K, V, A> {
      .               type Item = (K, V);
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn next(&mut self) -> Option<(K, V)> {
    524 ( 0.00%)          self.inner.next()
      .               }
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
      .                   self.inner.size_hint()
      .               }
      .           }
      .           impl<K, V, A: Allocator + Clone> ExactSizeIterator for IntoIter<K, V, A> {
      .               #[cfg_attr(feature = "inline-more", inline)]
-- line 3067 ----------------------------------------
-- line 4557 ----------------------------------------
      .           /// keys with new values returned from the iterator.
      .           impl<K, V, S, A> Extend<(K, V)> for HashMap<K, V, S, A>
      .           where
      .               K: Eq + Hash,
      .               S: BuildHasher,
      .               A: Allocator + Clone,
      .           {
      .               #[cfg_attr(feature = "inline-more", inline)]
  6,811 ( 0.00%)      fn extend<T: IntoIterator<Item = (K, V)>>(&mut self, iter: T) {
      .                   // Keys may be already present or show multiple times in the iterator.
      .                   // Reserve the entire hint lower bound if the map is empty.
      .                   // Otherwise reserve half the hint (rounded up), so the map
      .                   // will only resize twice in the worst case.
  6,167 ( 0.00%)          let iter = iter.into_iter();
  3,505 ( 0.00%)          let reserve = if self.is_empty() {
      .                       iter.size_hint().0
      .                   } else {
      3 ( 0.00%)              (iter.size_hint().0 + 1) / 2
      .                   };
      .                   self.reserve(reserve);
      .                   iter.for_each(move |(k, v)| {
 19,154 ( 0.01%)              self.insert(k, v);
      .                   });
  4,507 ( 0.00%)      }
      .           
      .               #[inline]
      .               #[cfg(feature = "nightly")]
      .               fn extend_one(&mut self, (k, v): (K, V)) {
      .                   self.insert(k, v);
      .               }
      .           
      .               #[inline]
-- line 4588 ----------------------------------------

233,475 ( 0.09%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-hash-1.1.0/src/lib.rs
--------------------------------------------------------------------------------
Ir               

-- line 71 ----------------------------------------
      .               fn default() -> FxHasher {
      .                   FxHasher { hash: 0 }
      .               }
      .           }
      .           
      .           impl FxHasher {
      .               #[inline]
      .               fn add_to_hash(&mut self, i: usize) {
178,782 ( 0.07%)          self.hash = self.hash.rotate_left(5).bitxor(i).wrapping_mul(K);
      .               }
      .           }
      .           
      .           impl Hasher for FxHasher {
      .               #[inline]
    850 ( 0.00%)      fn write(&mut self, mut bytes: &[u8]) {
      .                   #[cfg(target_pointer_width = "32")]
      .                   let read_usize = |bytes: &[u8]| u32::from_ne_bytes(bytes[..4].try_into().unwrap());
      .                   #[cfg(target_pointer_width = "64")]
      .                   let read_usize = |bytes: &[u8]| u64::from_ne_bytes(bytes[..8].try_into().unwrap());
      .           
 15,256 ( 0.01%)          let mut hash = FxHasher { hash: self.hash };
      .                   assert!(size_of::<usize>() <= 8);
185,992 ( 0.07%)          while bytes.len() >= size_of::<usize>() {
      .                       hash.add_to_hash(read_usize(bytes) as usize);
      .                       bytes = &bytes[size_of::<usize>()..];
      .                   }
 30,912 ( 0.01%)          if (size_of::<usize>() > 4) && (bytes.len() >= 4) {
      .                       hash.add_to_hash(u32::from_ne_bytes(bytes[..4].try_into().unwrap()) as usize);
      .                       bytes = &bytes[4..];
      .                   }
 30,912 ( 0.01%)          if (size_of::<usize>() > 2) && bytes.len() >= 2 {
      .                       hash.add_to_hash(u16::from_ne_bytes(bytes[..2].try_into().unwrap()) as usize);
      .                       bytes = &bytes[2..];
      .                   }
 34,841 ( 0.01%)          if (size_of::<usize>() > 1) && bytes.len() >= 1 {
  7,860 ( 0.00%)              hash.add_to_hash(bytes[0] as usize);
      .                   }
  1,199 ( 0.00%)          self.hash = hash.hash;
    850 ( 0.00%)      }
      .           
      .               #[inline]
      .               fn write_u8(&mut self, i: u8) {
     44 ( 0.00%)          self.add_to_hash(i as usize);
      .               }
      .           
      .               #[inline]
      .               fn write_u16(&mut self, i: u16) {
     24 ( 0.00%)          self.add_to_hash(i as usize);
      .               }
      .           
      .               #[inline]
      .               fn write_u32(&mut self, i: u32) {
372,612 ( 0.14%)          self.add_to_hash(i as usize);
      .               }
      .           
      .               #[cfg(target_pointer_width = "32")]
      .               #[inline]
      .               fn write_u64(&mut self, i: u64) {
      .                   self.add_to_hash(i as usize);
      .                   self.add_to_hash((i >> 32) as usize);
      .               }
-- line 131 ----------------------------------------

      1 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-hash-1.1.0/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/std/src/thread/local.rs
--------------------------------------------------------------------------------
Ir               

-- line 173 ----------------------------------------
      .           #[unstable(feature = "thread_local_internals", reason = "should not be necessary", issue = "none")]
      .           #[macro_export]
      .           #[allow_internal_unstable(thread_local_internals, cfg_target_thread_local, thread_local)]
      .           #[allow_internal_unsafe]
      .           macro_rules! __thread_local_inner {
      .               // used to generate the `LocalKey` value for const-initialized thread locals
      .               (@key $t:ty, const $init:expr) => {{
      .                   #[cfg_attr(not(windows), inline)] // see comments below
      4 ( 0.00%)          unsafe fn __getit() -> $crate::option::Option<&'static $t> {
      .                       const INIT_EXPR: $t = $init;
      .           
      .                       // wasm without atomics maps directly to `static mut`, and dtors
      .                       // aren't implemented because thread dtors aren't really a thing
      .                       // on wasm right now
      .                       //
      .                       // FIXME(#84224) this should come after the `target_thread_local`
      .                       // block.
-- line 189 ----------------------------------------
-- line 211 ----------------------------------------
      .                           }
      .           
      .                           // 0 == dtor not registered
      .                           // 1 == dtor registered, dtor not run
      .                           // 2 == dtor registered and is running or has run
      .                           #[thread_local]
      .                           static mut STATE: u8 = 0;
      .           
      8 ( 0.00%)                  unsafe extern "C" fn destroy(ptr: *mut u8) {
      .                               let ptr = ptr as *mut $t;
      .           
      .                               unsafe {
      .                                   debug_assert_eq!(STATE, 1);
     12 ( 0.00%)                          STATE = 2;
      .                                   $crate::ptr::drop_in_place(ptr);
      .                               }
      8 ( 0.00%)                  }
      .           
      .                           unsafe {
     48 ( 0.00%)                      match STATE {
      .                                   // 0 == we haven't registered a destructor, so do
      .                                   //   so now.
      .                                   0 => {
      .                                       $crate::thread::__FastLocalKeyInner::<$t>::register_dtor(
      .                                           $crate::ptr::addr_of_mut!(VAL) as *mut u8,
      .                                           destroy,
      .                                       );
      8 ( 0.00%)                              STATE = 1;
      .                                       Some(&VAL)
      .                                   }
      .                                   // 1 == the destructor is registered and the value
      .                                   //   is valid, so return the pointer.
      .                                   1 => Some(&VAL),
      .                                   // otherwise the destructor has already run, so we
      .                                   // can't give access.
      .                                   _ => None,
-- line 246 ----------------------------------------
-- line 257 ----------------------------------------
      .                       {
      .                           #[inline]
      .                           const fn __init() -> $t { INIT_EXPR }
      .                           static __KEY: $crate::thread::__OsLocalKeyInner<$t> =
      .                               $crate::thread::__OsLocalKeyInner::new();
      .                           #[allow(unused_unsafe)]
      .                           unsafe { __KEY.get(__init) }
      .                       }
 39,764 ( 0.02%)          }
      .           
      .                   unsafe {
      .                       $crate::thread::LocalKey::new(__getit)
      .                   }
      .               }};
      .           
      .               // used to generate the `LocalKey` value for `thread_local!`
      .               (@key $t:ty, $init:expr) => {
-- line 273 ----------------------------------------
-- line 318 ----------------------------------------
      .                           static __KEY: $crate::thread::__OsLocalKeyInner<$t> =
      .                               $crate::thread::__OsLocalKeyInner::new();
      .           
      .                           // FIXME: remove the #[allow(...)] marker when macros don't
      .                           // raise warning for missing/extraneous unsafe blocks anymore.
      .                           // See https://github.com/rust-lang/rust/issues/74838.
      .                           #[allow(unused_unsafe)]
      .                           unsafe { __KEY.get(__init) }
212,908 ( 0.08%)              }
      .           
      .                       unsafe {
      .                           $crate::thread::LocalKey::new(__getit)
      .                       }
      .                   }
      .               };
      .               ($(#[$attr:meta])* $vis:vis $name:ident, $t:ty, $($init:tt)*) => {
      .                   $(#[$attr])* $vis const $name: $crate::thread::LocalKey<$t> =
-- line 334 ----------------------------------------
-- line 377 ----------------------------------------
      .               /// this key yet.
      .               ///
      .               /// # Panics
      .               ///
      .               /// This function will `panic!()` if the key currently has its
      .               /// destructor running, and it **may** panic if the destructor has
      .               /// previously been run for this thread.
      .               #[stable(feature = "rust1", since = "1.0.0")]
     12 ( 0.00%)      pub fn with<F, R>(&'static self, f: F) -> R
      .               where
      .                   F: FnOnce(&T) -> R,
      .               {
     17 ( 0.00%)          self.try_with(f).expect(
      .                       "cannot access a Thread Local Storage value \
      .                        during or after destruction",
      .                   )
     16 ( 0.00%)      }
      .           
      .               /// Acquires a reference to the value in this TLS key.
      .               ///
      .               /// This will lazily initialize the value if this thread has not referenced
      .               /// this key yet. If the key has been destroyed (which may happen if this is called
      .               /// in a destructor), this function will return an [`AccessError`].
      .               ///
      .               /// # Panics
-- line 401 ----------------------------------------
-- line 404 ----------------------------------------
      .               /// key's initializer panics.
      .               #[stable(feature = "thread_local_try_with", since = "1.26.0")]
      .               #[inline]
      .               pub fn try_with<F, R>(&'static self, f: F) -> Result<R, AccessError>
      .               where
      .                   F: FnOnce(&T) -> R,
      .               {
      .                   unsafe {
173,120 ( 0.07%)              let thread_local = (self.inner)().ok_or(AccessError)?;
122,554 ( 0.05%)              Ok(f(thread_local))
      .                   }
      .               }
      .           }
      .           
      .           mod lazy {
      .               use crate::cell::UnsafeCell;
      .               use crate::hint;
      .               use crate::mem;
-- line 421 ----------------------------------------
-- line 434 ----------------------------------------
      .                       // the inner cell nor mutable reference to the Option<T> inside said
      .                       // cell. This make it safe to hand a reference, though the lifetime
      .                       // of 'static is itself unsafe, making the get method unsafe.
      .                       unsafe { (*self.inner.get()).as_ref() }
      .                   }
      .           
      .                   /// The caller must ensure that no reference is active: this method
      .                   /// needs unique access.
      9 ( 0.00%)          pub unsafe fn initialize<F: FnOnce() -> T>(&self, init: F) -> &'static T {
      .                       // Execute the initialization up front, *then* move it into our slot,
      .                       // just in case initialization fails.
      .                       let value = init();
      .                       let ptr = self.inner.get();
      .           
      .                       // SAFETY:
      .                       //
      .                       // note that this can in theory just be `*ptr = Some(value)`, but due to
-- line 450 ----------------------------------------
-- line 475 ----------------------------------------
      .                           // always work it empirically doesn't seem to always get optimized away,
      .                           // which means that using something like `try_with` can pull in
      .                           // panicking code and cause a large size bloat.
      .                           match *ptr {
      .                               Some(ref x) => x,
      .                               None => hint::unreachable_unchecked(),
      .                           }
      .                       }
     10 ( 0.00%)          }
      .           
      .                   /// The other methods hand out references while taking &self.
      .                   /// As such, callers of this method must ensure no `&` and `&mut` are
      .                   /// available and used at the same time.
      .                   #[allow(unused)]
      .                   pub unsafe fn take(&mut self) -> Option<T> {
      .                       // SAFETY: See doc comment for this method.
      .                       unsafe { (*self.inner.get()).take() }
-- line 491 ----------------------------------------
-- line 596 ----------------------------------------
      .                       // SAFETY: See the definitions of `LazyKeyInner::get` and
      .                       // `try_initialize` for more information.
      .                       //
      .                       // The caller must ensure no mutable references are ever active to
      .                       // the inner cell or the inner T when this is called.
      .                       // The `try_initialize` is dependant on the passed `init` function
      .                       // for this.
      .                       unsafe {
 82,919 ( 0.03%)                  match self.inner.get() {
      .                               Some(val) => Some(val),
     18 ( 0.00%)                      None => self.try_initialize(init),
      .                           }
      .                       }
      .                   }
      .           
      .                   // `try_initialize` is only called once per fast thread local variable,
      .                   // except in corner cases where thread_local dtors reference other
      .                   // thread_local's, or it is being recursively initialized.
      .                   //
      .                   // Macos: Inlining this function can cause two `tlv_get_addr` calls to
      .                   // be performed for every call to `Key::get`.
      .                   // LLVM issue: https://bugs.llvm.org/show_bug.cgi?id=41722
      .                   #[inline(never)]
      8 ( 0.00%)          unsafe fn try_initialize<F: FnOnce() -> T>(&self, init: F) -> Option<&'static T> {
      .                       // SAFETY: See comment above (this function doc).
      .                       if !mem::needs_drop::<T>() || unsafe { self.try_register_dtor() } {
      .                           // SAFETY: See comment above (his function doc).
      6 ( 0.00%)                  Some(unsafe { self.inner.initialize(init) })
      .                       } else {
      .                           None
      .                       }
      8 ( 0.00%)          }
      .           
      .                   // `try_register_dtor` is only called once per fast thread local
      .                   // variable, except in corner cases where thread_local dtors reference
      .                   // other thread_local's, or it is being recursively initialized.
      .                   unsafe fn try_register_dtor(&self) -> bool {
      6 ( 0.00%)              match self.dtor_state.get() {
      .                           DtorState::Unregistered => {
      .                               // SAFETY: dtor registration happens before initialization.
      .                               // Passing `self` as a pointer while using `destroy_value<T>`
      .                               // is safe because the function will build a pointer to a
      .                               // Key<T>, which is the type of self and so find the correct
      .                               // size.
      6 ( 0.00%)                      unsafe { register_dtor(self as *const _ as *mut u8, destroy_value::<T>) };
      .                               self.dtor_state.set(DtorState::Registered);
      .                               true
      .                           }
      .                           DtorState::Registered => {
      .                               // recursively initialized
      .                               true
      .                           }
      .                           DtorState::RunningOrHasRun => false,
      .                       }
      .                   }
      .               }
      .           
      4 ( 0.00%)      unsafe extern "C" fn destroy_value<T>(ptr: *mut u8) {
      .                   let ptr = ptr as *mut Key<T>;
      .           
      .                   // SAFETY:
      .                   //
      .                   // The pointer `ptr` has been built just above and comes from
      .                   // `try_register_dtor` where it is originally a Key<T> coming from `self`,
      .                   // making it non-NUL and of the correct type.
      .                   //
-- line 661 ----------------------------------------

      4 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/std/src/thread/local.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cmp.rs
--------------------------------------------------------------------------------
Ir               

-- line 223 ----------------------------------------
      .               fn eq(&self, other: &Rhs) -> bool;
      .           
      .               /// This method tests for `!=`.
      .               #[inline]
      .               #[must_use]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[default_method_body_is_const]
      .               fn ne(&self, other: &Rhs) -> bool {
  2,296 ( 0.00%)          !self.eq(other)
      .               }
      .           }
      .           
      .           /// Derive macro generating an impl of the trait `PartialEq`.
      .           #[rustc_builtin_macro]
      .           #[stable(feature = "builtin_macro_prelude", since = "1.38.0")]
      .           #[allow_internal_unstable(core_intrinsics, structural_match)]
      .           pub macro PartialEq($item:item) {
-- line 239 ----------------------------------------
-- line 328 ----------------------------------------
      .           /// assert_eq!(Ordering::Less, result);
      .           ///
      .           /// let result = 1.cmp(&1);
      .           /// assert_eq!(Ordering::Equal, result);
      .           ///
      .           /// let result = 2.cmp(&1);
      .           /// assert_eq!(Ordering::Greater, result);
      .           /// ```
      6 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Debug, Hash)]
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           #[repr(i8)]
      .           pub enum Ordering {
      .               /// An ordering where a compared value is less than another.
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               Less = -1,
      .               /// An ordering where a compared value is equal to another.
      .               #[stable(feature = "rust1", since = "1.0.0")]
-- line 344 ----------------------------------------
-- line 569 ----------------------------------------
      .               /// let result = x.0.cmp(&y.0).then_with(|| x.1.cmp(&y.1)).then_with(|| x.2.cmp(&y.2));
      .               ///
      .               /// assert_eq!(result, Ordering::Less);
      .               /// ```
      .               #[inline]
      .               #[must_use]
      .               #[stable(feature = "ordering_chaining", since = "1.17.0")]
      .               pub fn then_with<F: FnOnce() -> Ordering>(self, f: F) -> Ordering {
      1 ( 0.00%)          match self {
      .                       Equal => f(),
      .                       _ => self,
      .                   }
      .               }
      .           }
      .           
      .           /// A helper struct for reverse ordering.
      .           ///
-- line 585 ----------------------------------------
-- line 792 ----------------------------------------
      .               /// ```
      .               #[stable(feature = "ord_max_min", since = "1.21.0")]
      .               #[inline]
      .               #[must_use]
      .               fn max(self, other: Self) -> Self
      .               where
      .                   Self: Sized,
      .               {
 13,364 ( 0.01%)          max_by(self, other, Ord::cmp)
      .               }
      .           
      .               /// Compares and returns the minimum of two values.
      .               ///
      .               /// Returns the first argument if the comparison determines them to be equal.
      .               ///
      .               /// # Examples
      .               ///
-- line 808 ----------------------------------------
-- line 812 ----------------------------------------
      .               /// ```
      .               #[stable(feature = "ord_max_min", since = "1.21.0")]
      .               #[inline]
      .               #[must_use]
      .               fn min(self, other: Self) -> Self
      .               where
      .                   Self: Sized,
      .               {
  1,444 ( 0.00%)          min_by(self, other, Ord::cmp)
      .               }
      .           
      .               /// Restrict a value to a certain interval.
      .               ///
      .               /// Returns `max` if `self` is greater than `max`, and `min` if `self` is
      .               /// less than `min`. Otherwise this returns `self`.
      .               ///
      .               /// # Panics
-- line 828 ----------------------------------------
-- line 1097 ----------------------------------------
      .               /// let result = 2.0 < 1.0;
      .               /// assert_eq!(result, false);
      .               /// ```
      .               #[inline]
      .               #[must_use]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[default_method_body_is_const]
      .               fn lt(&self, other: &Rhs) -> bool {
  6,572 ( 0.00%)          matches!(self.partial_cmp(other), Some(Less))
      .               }
      .           
      .               /// This method tests less than or equal to (for `self` and `other`) and is used by the `<=`
      .               /// operator.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
-- line 1113 ----------------------------------------
-- line 1121 ----------------------------------------
      .               #[must_use]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[default_method_body_is_const]
      .               fn le(&self, other: &Rhs) -> bool {
      .                   // Pattern `Some(Less | Eq)` optimizes worse than negating `None | Some(Greater)`.
      .                   // FIXME: The root cause was fixed upstream in LLVM with:
      .                   // https://github.com/llvm/llvm-project/commit/9bad7de9a3fb844f1ca2965f35d0c2a3d1e11775
      .                   // Revert this workaround once support for LLVM 12 gets dropped.
 57,646 ( 0.02%)          !matches!(self.partial_cmp(other), None | Some(Greater))
      .               }
      .           
      .               /// This method tests greater than (for `self` and `other`) and is used by the `>` operator.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let result = 1.0 > 2.0;
-- line 1137 ----------------------------------------
-- line 1140 ----------------------------------------
      .               /// let result = 2.0 > 2.0;
      .               /// assert_eq!(result, false);
      .               /// ```
      .               #[inline]
      .               #[must_use]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[default_method_body_is_const]
      .               fn gt(&self, other: &Rhs) -> bool {
 86,302 ( 0.03%)          matches!(self.partial_cmp(other), Some(Greater))
      .               }
      .           
      .               /// This method tests greater than or equal to (for `self` and `other`) and is used by the `>=`
      .               /// operator.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
-- line 1156 ----------------------------------------
-- line 1210 ----------------------------------------
      .           ///
      .           /// assert_eq!(cmp::min_by(-2, 1, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), 1);
      .           /// assert_eq!(cmp::min_by(-2, 2, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), -2);
      .           /// ```
      .           #[inline]
      .           #[must_use]
      .           #[stable(feature = "cmp_min_max_by", since = "1.53.0")]
      .           pub fn min_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T {
 20,362 ( 0.01%)      match compare(&v1, &v2) {
      .                   Ordering::Less | Ordering::Equal => v1,
      .                   Ordering::Greater => v2,
      .               }
      .           }
      .           
      .           /// Returns the element that gives the minimum value from the specified function.
      .           ///
      .           /// Returns the first argument if the comparison determines them to be equal.
-- line 1226 ----------------------------------------
-- line 1273 ----------------------------------------
      .           ///
      .           /// assert_eq!(cmp::max_by(-2, 1, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), -2);
      .           /// assert_eq!(cmp::max_by(-2, 2, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), 2);
      .           /// ```
      .           #[inline]
      .           #[must_use]
      .           #[stable(feature = "cmp_min_max_by", since = "1.53.0")]
      .           pub fn max_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T {
 61,520 ( 0.02%)      match compare(&v1, &v2) {
    305 ( 0.00%)          Ordering::Less | Ordering::Equal => v2,
      .                   Ordering::Greater => v1,
      .               }
      .           }
      .           
      .           /// Returns the element that gives the maximum value from the specified function.
      .           ///
      .           /// Returns the second argument if the comparison determines them to be equal.
      .           ///
-- line 1290 ----------------------------------------
-- line 1308 ----------------------------------------
      .               use crate::cmp::Ordering::{self, Equal, Greater, Less};
      .               use crate::hint::unreachable_unchecked;
      .           
      .               macro_rules! partial_eq_impl {
      .                   ($($t:ty)*) => ($(
      .                       #[stable(feature = "rust1", since = "1.0.0")]
      .                       impl PartialEq for $t {
      .                           #[inline]
    738 ( 0.00%)                  fn eq(&self, other: &$t) -> bool { (*self) == (*other) }
      .                           #[inline]
 15,679 ( 0.01%)                  fn ne(&self, other: &$t) -> bool { (*self) != (*other) }
      .                       }
      .                   )*)
      .               }
      .           
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               impl PartialEq for () {
      .                   #[inline]
      .                   fn eq(&self, _other: &()) -> bool {
-- line 1326 ----------------------------------------
-- line 1392 ----------------------------------------
      .                   ($($t:ty)*) => ($(
      .                       #[stable(feature = "rust1", since = "1.0.0")]
      .                       impl PartialOrd for $t {
      .                           #[inline]
      .                           fn partial_cmp(&self, other: &$t) -> Option<Ordering> {
      .                               Some(self.cmp(other))
      .                           }
      .                           #[inline]
858,835 ( 0.33%)                  fn lt(&self, other: &$t) -> bool { (*self) < (*other) }
      .                           #[inline]
 10,730 ( 0.00%)                  fn le(&self, other: &$t) -> bool { (*self) <= (*other) }
      .                           #[inline]
      .                           fn ge(&self, other: &$t) -> bool { (*self) >= (*other) }
      .                           #[inline]
      .                           fn gt(&self, other: &$t) -> bool { (*self) > (*other) }
      .                       }
      .           
      .                       #[stable(feature = "rust1", since = "1.0.0")]
      .                       impl Ord for $t {
      .                           #[inline]
      .                           fn cmp(&self, other: &$t) -> Ordering {
      .                               // The order here is important to generate more optimal assembly.
      .                               // See <https://github.com/rust-lang/rust/issues/63758> for more info.
367,248 ( 0.14%)                      if *self < *other { Less }
      .                               else if *self == *other { Equal }
      .                               else { Greater }
      .                           }
      .                       }
      .                   )*)
      .               }
      .           
      .               #[stable(feature = "rust1", since = "1.0.0")]
-- line 1423 ----------------------------------------
-- line 1430 ----------------------------------------
      .           
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               impl Ord for bool {
      .                   #[inline]
      .                   fn cmp(&self, other: &bool) -> Ordering {
      .                       // Casting to i8's and converting the difference to an Ordering generates
      .                       // more optimal assembly.
      .                       // See <https://github.com/rust-lang/rust/issues/66780> for more info.
    172 ( 0.00%)              match (*self as i8) - (*other as i8) {
      .                           -1 => Less,
      .                           0 => Equal,
      .                           1 => Greater,
      .                           // SAFETY: bool as i8 returns 0 or 1, so the difference can't be anything else
      .                           _ => unsafe { unreachable_unchecked() },
      .                       }
      .                   }
      .               }
-- line 1446 ----------------------------------------
-- line 1475 ----------------------------------------
      .           
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               impl<A: ?Sized, B: ?Sized> PartialEq<&B> for &A
      .               where
      .                   A: PartialEq<B>,
      .               {
      .                   #[inline]
      .                   fn eq(&self, other: &&B) -> bool {
145,450 ( 0.06%)              PartialEq::eq(*self, *other)
 17,261 ( 0.01%)          }
      .                   #[inline]
      .                   fn ne(&self, other: &&B) -> bool {
     12 ( 0.00%)              PartialEq::ne(*self, *other)
  5,199 ( 0.00%)          }
      .               }
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               impl<A: ?Sized, B: ?Sized> PartialOrd<&B> for &A
      .               where
      .                   A: PartialOrd<B>,
      .               {
      .                   #[inline]
      .                   fn partial_cmp(&self, other: &&B) -> Option<Ordering> {
-- line 1496 ----------------------------------------
-- line 1516 ----------------------------------------
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               impl<A: ?Sized> Ord for &A
      .               where
      .                   A: Ord,
      .               {
      .                   #[inline]
      .                   fn cmp(&self, other: &Self) -> Ordering {
      .                       Ord::cmp(*self, *other)
    999 ( 0.00%)          }
      .               }
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               impl<A: ?Sized> Eq for &A where A: Eq {}
      .           
      .               // &mut pointers
      .           
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               impl<A: ?Sized, B: ?Sized> PartialEq<&mut B> for &mut A
-- line 1532 ----------------------------------------

228,633 ( 0.09%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cmp.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/hir/map/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 17 ----------------------------------------
      .           use rustc_span::hygiene::MacroKind;
      .           use rustc_span::source_map::Spanned;
      .           use rustc_span::symbol::{kw, sym, Ident, Symbol};
      .           use rustc_span::Span;
      .           use rustc_target::spec::abi::Abi;
      .           use std::collections::VecDeque;
      .           
      .           fn fn_decl<'hir>(node: Node<'hir>) -> Option<&'hir FnDecl<'hir>> {
    940 ( 0.00%)      match node {
      .                   Node::Item(Item { kind: ItemKind::Fn(sig, _, _), .. })
      .                   | Node::TraitItem(TraitItem { kind: TraitItemKind::Fn(sig, _), .. })
      .                   | Node::ImplItem(ImplItem { kind: ImplItemKind::Fn(sig, _), .. }) => Some(&sig.decl),
      .                   Node::Expr(Expr { kind: ExprKind::Closure(_, fn_decl, ..), .. })
      .                   | Node::ForeignItem(ForeignItem { kind: ForeignItemKind::Fn(fn_decl, ..), .. }) => {
      .                       Some(fn_decl)
      .                   }
      .                   _ => None,
-- line 33 ----------------------------------------
-- line 39 ----------------------------------------
      .                   Node::Item(Item { kind: ItemKind::Fn(sig, _, _), .. })
      .                   | Node::TraitItem(TraitItem { kind: TraitItemKind::Fn(sig, _), .. })
      .                   | Node::ImplItem(ImplItem { kind: ImplItemKind::Fn(sig, _), .. }) => Some(sig),
      .                   _ => None,
      .               }
      .           }
      .           
      .           pub fn associated_body<'hir>(node: Node<'hir>) -> Option<BodyId> {
 13,445 ( 0.01%)      match node {
      .                   Node::Item(Item {
      .                       kind: ItemKind::Const(_, body) | ItemKind::Static(.., body) | ItemKind::Fn(.., body),
      .                       ..
      .                   })
      .                   | Node::TraitItem(TraitItem {
      .                       kind:
      .                           TraitItemKind::Const(_, Some(body)) | TraitItemKind::Fn(_, TraitFn::Provided(body)),
      .                       ..
      .                   })
      .                   | Node::ImplItem(ImplItem {
      .                       kind: ImplItemKind::Const(_, body) | ImplItemKind::Fn(_, body),
      .                       ..
      .                   })
  2,096 ( 0.00%)          | Node::Expr(Expr { kind: ExprKind::Closure(.., body, _, _), .. }) => Some(*body),
      .           
      .                   Node::AnonConst(constant) => Some(constant.body),
      .           
      .                   _ => None,
      .               }
      .           }
      .           
      .           fn is_body_owner<'hir>(node: Node<'hir>, hir_id: HirId) -> bool {
-- line 69 ----------------------------------------
-- line 83 ----------------------------------------
      .           pub struct ParentHirIterator<'hir> {
      .               current_id: HirId,
      .               map: Map<'hir>,
      .           }
      .           
      .           impl<'hir> Iterator for ParentHirIterator<'hir> {
      .               type Item = (HirId, Node<'hir>);
      .           
  1,561 ( 0.00%)      fn next(&mut self) -> Option<Self::Item> {
    223 ( 0.00%)          if self.current_id == CRATE_HIR_ID {
      .                       return None;
      .                   }
      .                   loop {
      .                       // There are nodes that do not have entries, so we need to skip them.
      .                       let parent_id = self.map.get_parent_node(self.current_id);
      .           
    669 ( 0.00%)              if parent_id == self.current_id {
      .                           self.current_id = CRATE_HIR_ID;
      .                           return None;
      .                       }
      .           
    446 ( 0.00%)              self.current_id = parent_id;
  1,784 ( 0.00%)              if let Some(node) = self.map.find(parent_id) {
    892 ( 0.00%)                  return Some((parent_id, node));
      .                       }
      .                       // If this `HirId` doesn't have an entry, skip it and look for its `parent_id`.
      .                   }
  2,007 ( 0.00%)      }
      .           }
      .           
      .           /// An iterator that walks up the ancestor tree of a given `HirId`.
      .           /// Constructed using `tcx.hir().parent_owner_iter(hir_id)`.
      .           pub struct ParentOwnerIterator<'hir> {
      .               current_id: HirId,
      .               map: Map<'hir>,
      .           }
      .           
      .           impl<'hir> Iterator for ParentOwnerIterator<'hir> {
      .               type Item = (LocalDefId, OwnerNode<'hir>);
      .           
 12,312 ( 0.00%)      fn next(&mut self) -> Option<Self::Item> {
  4,104 ( 0.00%)          if self.current_id.local_id.index() != 0 {
    624 ( 0.00%)              self.current_id.local_id = ItemLocalId::new(0);
  2,496 ( 0.00%)              if let Some(node) = self.map.tcx.hir_owner(self.current_id.owner) {
      .                           return Some((self.current_id.owner, node.node));
      .                       }
      .                   }
    744 ( 0.00%)          if self.current_id == CRATE_HIR_ID {
     14 ( 0.00%)              return None;
      .                   }
      .                   loop {
      .                       // There are nodes that do not have entries, so we need to skip them.
      .                       let parent_id = self.map.def_key(self.current_id.owner).parent;
      .           
      .                       let parent_id = parent_id.map_or(CRATE_HIR_ID.owner, |local_def_index| {
      .                           let def_id = LocalDefId { local_def_index };
      .                           self.map.local_def_id_to_hir_id(def_id).owner
      .                       });
  1,474 ( 0.00%)              self.current_id = HirId::make_owner(parent_id);
      .           
      .                       // If this `HirId` doesn't have an entry, skip it and look for its `parent_id`.
  1,474 ( 0.00%)              if let Some(node) = self.map.tcx.hir_owner(self.current_id.owner) {
      .                           return Some((self.current_id.owner, node.node));
      .                       }
      .                   }
 10,944 ( 0.00%)      }
      .           }
      .           
      .           impl<'hir> Map<'hir> {
    210 ( 0.00%)      pub fn krate(&self) -> &'hir Crate<'hir> {
     30 ( 0.00%)          self.tcx.hir_crate(())
    240 ( 0.00%)      }
      .           
      7 ( 0.00%)      pub fn root_module(&self) -> &'hir Mod<'hir> {
      1 ( 0.00%)          match self.tcx.hir_owner(CRATE_DEF_ID).map(|o| o.node) {
      .                       Some(OwnerNode::Crate(item)) => item,
      .                       _ => bug!(),
      .                   }
      8 ( 0.00%)      }
      .           
      .               pub fn items(&self) -> impl Iterator<Item = &'hir Item<'hir>> + 'hir {
      .                   let krate = self.krate();
      .                   krate.owners.iter().filter_map(|owner| match owner.as_ref()?.node() {
      .                       OwnerNode::Item(item) => Some(item),
      .                       _ => None,
      .                   })
      .               }
-- line 169 ----------------------------------------
-- line 184 ----------------------------------------
      .           
      .               #[inline]
      .               pub fn def_path_hash(self, def_id: LocalDefId) -> DefPathHash {
      .                   // Accessing the DefPathHash is ok, it is incr. comp. stable.
      .                   self.tcx.untracked_resolutions.definitions.def_path_hash(def_id)
      .               }
      .           
      .               #[inline]
 18,756 ( 0.01%)      pub fn local_def_id(&self, hir_id: HirId) -> LocalDefId {
  3,444 ( 0.00%)          self.opt_local_def_id(hir_id).unwrap_or_else(|| {
      .                       bug!(
      .                           "local_def_id: no entry for `{:?}`, which has a map of `{:?}`",
      .                           hir_id,
      .                           self.find(hir_id)
      .                       )
      .                   })
 14,067 ( 0.01%)      }
      .           
      .               #[inline]
  9,184 ( 0.00%)      pub fn opt_local_def_id(&self, hir_id: HirId) -> Option<LocalDefId> {
  3,061 ( 0.00%)          if hir_id.local_id == ItemLocalId::new(0) {
      .                       Some(hir_id.owner)
      .                   } else {
  1,222 ( 0.00%)              self.tcx
      .                           .hir_owner_nodes(hir_id.owner)?
      .                           .local_id_to_def_id
      .                           .get(&hir_id.local_id)
      .                           .copied()
      .                   }
 10,332 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn local_def_id_to_hir_id(&self, def_id: LocalDefId) -> HirId {
      .                   // FIXME(#85914) is this access safe for incr. comp.?
    765 ( 0.00%)          self.tcx.untracked_resolutions.definitions.local_def_id_to_hir_id(def_id)
      .               }
      .           
      7 ( 0.00%)      pub fn iter_local_def_id(&self) -> impl Iterator<Item = LocalDefId> + '_ {
      .                   // Create a dependency to the crate to be sure we reexcute this when the amount of
      .                   // definitions change.
      1 ( 0.00%)          self.tcx.ensure().hir_crate(());
      .                   self.tcx.untracked_resolutions.definitions.iter_local_def_id()
      9 ( 0.00%)      }
      .           
  2,317 ( 0.00%)      pub fn opt_def_kind(&self, local_def_id: LocalDefId) -> Option<DefKind> {
      .                   let hir_id = self.local_def_id_to_hir_id(local_def_id);
  4,303 ( 0.00%)          let def_kind = match self.find(hir_id)? {
    584 ( 0.00%)              Node::Item(item) => match item.kind {
      .                           ItemKind::Static(..) => DefKind::Static,
      .                           ItemKind::Const(..) => DefKind::Const,
      .                           ItemKind::Fn(..) => DefKind::Fn,
      .                           ItemKind::Macro(..) => DefKind::Macro(MacroKind::Bang),
      .                           ItemKind::Mod(..) => DefKind::Mod,
      .                           ItemKind::OpaqueTy(..) => DefKind::OpaqueTy,
      .                           ItemKind::TyAlias(..) => DefKind::TyAlias,
      .                           ItemKind::Enum(..) => DefKind::Enum,
-- line 239 ----------------------------------------
-- line 247 ----------------------------------------
      .                           ItemKind::GlobalAsm(..) => DefKind::GlobalAsm,
      .                           ItemKind::Impl { .. } => DefKind::Impl,
      .                       },
      .                       Node::ForeignItem(item) => match item.kind {
      .                           ForeignItemKind::Fn(..) => DefKind::Fn,
      .                           ForeignItemKind::Static(..) => DefKind::Static,
      .                           ForeignItemKind::Type => DefKind::ForeignTy,
      .                       },
      2 ( 0.00%)              Node::TraitItem(item) => match item.kind {
      .                           TraitItemKind::Const(..) => DefKind::AssocConst,
      .                           TraitItemKind::Fn(..) => DefKind::AssocFn,
      .                           TraitItemKind::Type(..) => DefKind::AssocTy,
      .                       },
     77 ( 0.00%)              Node::ImplItem(item) => match item.kind {
      .                           ImplItemKind::Const(..) => DefKind::AssocConst,
      .                           ImplItemKind::Fn(..) => DefKind::AssocFn,
      .                           ImplItemKind::TyAlias(..) => DefKind::AssocTy,
      .                       },
      .                       Node::Variant(_) => DefKind::Variant,
      .                       Node::Ctor(variant_data) => {
      .                           // FIXME(eddyb) is this even possible, if we have a `Node::Ctor`?
     50 ( 0.00%)                  assert_ne!(variant_data.ctor_hir_id(), None);
      .           
     70 ( 0.00%)                  let ctor_of = match self.find(self.get_parent_node(hir_id)) {
      .                               Some(Node::Item(..)) => def::CtorOf::Struct,
      .                               Some(Node::Variant(..)) => def::CtorOf::Variant,
      .                               _ => unreachable!(),
      .                           };
     20 ( 0.00%)                  DefKind::Ctor(ctor_of, def::CtorKind::from_hir(variant_data))
     40 ( 0.00%)              }
      .                       Node::AnonConst(_) => {
      .                           let inline = match self.find(self.get_parent_node(hir_id)) {
      .                               Some(Node::Expr(&Expr {
      .                                   kind: ExprKind::ConstBlock(ref anon_const), ..
      .                               })) if anon_const.hir_id == hir_id => true,
      .                               _ => false,
      .                           };
      .                           if inline { DefKind::InlineConst } else { DefKind::AnonConst }
      .                       }
      .                       Node::Field(_) => DefKind::Field,
      .                       Node::Expr(expr) => match expr.kind {
      .                           ExprKind::Closure(.., None) => DefKind::Closure,
      .                           ExprKind::Closure(.., Some(_)) => DefKind::Generator,
      .                           _ => bug!("def_kind: unsupported node: {}", self.node_to_string(hir_id)),
      .                       },
     39 ( 0.00%)              Node::GenericParam(param) => match param.kind {
      .                           GenericParamKind::Lifetime { .. } => DefKind::LifetimeParam,
      .                           GenericParamKind::Type { .. } => DefKind::TyParam,
      .                           GenericParamKind::Const { .. } => DefKind::ConstParam,
      .                       },
      .                       Node::Crate(_) => DefKind::Mod,
      .                       Node::Stmt(_)
      .                       | Node::PathSegment(_)
      .                       | Node::Ty(_)
-- line 300 ----------------------------------------
-- line 304 ----------------------------------------
      .                       | Node::Binding(_)
      .                       | Node::Local(_)
      .                       | Node::Param(_)
      .                       | Node::Arm(_)
      .                       | Node::Lifetime(_)
      .                       | Node::Visibility(_)
      .                       | Node::Block(_) => return None,
      .                   };
  1,140 ( 0.00%)          Some(def_kind)
  3,310 ( 0.00%)      }
      .           
      .               pub fn def_kind(&self, local_def_id: LocalDefId) -> DefKind {
      .                   self.opt_def_kind(local_def_id)
      .                       .unwrap_or_else(|| bug!("def_kind: unsupported node: {:?}", local_def_id))
      .               }
      .           
116,408 ( 0.05%)      pub fn find_parent_node(&self, id: HirId) -> Option<HirId> {
 14,551 ( 0.01%)          if id.local_id == ItemLocalId::from_u32(0) {
      .                       Some(self.tcx.hir_owner_parent(id.owner))
      .                   } else {
 27,934 ( 0.01%)              let owner = self.tcx.hir_owner_nodes(id.owner)?;
 13,967 ( 0.01%)              let node = owner.nodes[id.local_id].as_ref()?;
 41,901 ( 0.02%)              let hir_id = HirId { owner: id.owner, local_id: node.parent };
      .                       Some(hir_id)
      .                   }
116,408 ( 0.05%)      }
      .           
    565 ( 0.00%)      pub fn get_parent_node(&self, hir_id: HirId) -> HirId {
 76,043 ( 0.03%)          self.find_parent_node(hir_id).unwrap()
  1,130 ( 0.00%)      }
      .           
      .               /// Retrieves the `Node` corresponding to `id`, returning `None` if cannot be found.
 81,936 ( 0.03%)      pub fn find(&self, id: HirId) -> Option<Node<'hir>> {
 10,242 ( 0.00%)          if id.local_id == ItemLocalId::from_u32(0) {
      .                       let owner = self.tcx.hir_owner(id.owner)?;
  7,847 ( 0.00%)              Some(owner.node.into())
      .                   } else {
  4,658 ( 0.00%)              let owner = self.tcx.hir_owner_nodes(id.owner)?;
  2,329 ( 0.00%)              let node = owner.nodes[id.local_id].as_ref()?;
  6,987 ( 0.00%)              Some(node.node)
      .                   }
 81,936 ( 0.03%)      }
      .           
      .               /// Retrieves the `Node` corresponding to `id`, returning `None` if cannot be found.
      .               #[inline]
      .               pub fn find_by_def_id(&self, id: LocalDefId) -> Option<Node<'hir>> {
  1,925 ( 0.00%)          self.find(self.local_def_id_to_hir_id(id))
      .               }
      .           
      .               /// Retrieves the `Node` corresponding to `id`, panicking if it cannot be found.
  8,295 ( 0.00%)      pub fn get(&self, id: HirId) -> Node<'hir> {
  4,020 ( 0.00%)          self.find(id).unwrap_or_else(|| bug!("couldn't find hir id {} in the HIR map", id))
  5,530 ( 0.00%)      }
      .           
      .               /// Retrieves the `Node` corresponding to `id`, panicking if it cannot be found.
      .               #[inline]
      .               pub fn get_by_def_id(&self, id: LocalDefId) -> Node<'hir> {
      .                   self.find_by_def_id(id).unwrap_or_else(|| bug!("couldn't find {:?} in the HIR map", id))
      .               }
      .           
    230 ( 0.00%)      pub fn get_if_local(&self, id: DefId) -> Option<Node<'hir>> {
    115 ( 0.00%)          id.as_local().and_then(|id| self.find(self.local_def_id_to_hir_id(id)))
    230 ( 0.00%)      }
      .           
      .               pub fn get_generics(&self, id: LocalDefId) -> Option<&'hir Generics<'hir>> {
      .                   let node = self.tcx.hir_owner(id)?;
      .                   match node.node {
      .                       OwnerNode::ImplItem(impl_item) => Some(&impl_item.generics),
      .                       OwnerNode::TraitItem(trait_item) => Some(&trait_item.generics),
      .                       OwnerNode::Item(Item {
      .                           kind:
-- line 374 ----------------------------------------
-- line 381 ----------------------------------------
      .                               | ItemKind::TraitAlias(generics, _)
      .                               | ItemKind::Impl(Impl { generics, .. }),
      .                           ..
      .                       }) => Some(generics),
      .                       _ => None,
      .                   }
      .               }
      .           
 27,832 ( 0.01%)      pub fn item(&self, id: ItemId) -> &'hir Item<'hir> {
  7,952 ( 0.00%)          self.tcx.hir_owner(id.def_id).unwrap().node.expect_item()
 31,808 ( 0.01%)      }
      .           
    189 ( 0.00%)      pub fn trait_item(&self, id: TraitItemId) -> &'hir TraitItem<'hir> {
     54 ( 0.00%)          self.tcx.hir_owner(id.def_id).unwrap().node.expect_trait_item()
    216 ( 0.00%)      }
      .           
 15,631 ( 0.01%)      pub fn impl_item(&self, id: ImplItemId) -> &'hir ImplItem<'hir> {
  4,466 ( 0.00%)          self.tcx.hir_owner(id.def_id).unwrap().node.expect_impl_item()
 17,864 ( 0.01%)      }
      .           
      .               pub fn foreign_item(&self, id: ForeignItemId) -> &'hir ForeignItem<'hir> {
      .                   self.tcx.hir_owner(id.def_id).unwrap().node.expect_foreign_item()
      .               }
      .           
 17,780 ( 0.01%)      pub fn body(&self, id: BodyId) -> &'hir Body<'hir> {
  5,080 ( 0.00%)          self.tcx.hir_owner_nodes(id.hir_id.owner).unwrap().bodies[&id.hir_id.local_id]
 20,320 ( 0.01%)      }
      .           
    564 ( 0.00%)      pub fn fn_decl_by_hir_id(&self, hir_id: HirId) -> Option<&'hir FnDecl<'hir>> {
    564 ( 0.00%)          if let Some(node) = self.find(hir_id) {
      .                       fn_decl(node)
      .                   } else {
      .                       bug!("no node for hir_id `{}`", hir_id)
      .                   }
    376 ( 0.00%)      }
      .           
      .               pub fn fn_sig_by_hir_id(&self, hir_id: HirId) -> Option<&'hir FnSig<'hir>> {
      .                   if let Some(node) = self.find(hir_id) {
      .                       fn_sig(node)
      .                   } else {
      .                       bug!("no node for hir_id `{}`", hir_id)
      .                   }
      .               }
-- line 423 ----------------------------------------
-- line 430 ----------------------------------------
      .                   }
      .           
      .                   bug!("no `enclosing_body_owner` for hir_id `{}`", hir_id);
      .               }
      .           
      .               /// Returns the `HirId` that corresponds to the definition of
      .               /// which this is the body of, i.e., a `fn`, `const` or `static`
      .               /// item (possibly associated), a closure, or a `hir::AnonConst`.
 11,920 ( 0.00%)      pub fn body_owner(&self, BodyId { hir_id }: BodyId) -> HirId {
      .                   let parent = self.get_parent_node(hir_id);
  8,940 ( 0.00%)          assert!(self.find(parent).map_or(false, |n| is_body_owner(n, hir_id)));
      .                   parent
 11,920 ( 0.00%)      }
      .           
  3,850 ( 0.00%)      pub fn body_owner_def_id(&self, id: BodyId) -> LocalDefId {
  5,740 ( 0.00%)          self.local_def_id(self.body_owner(id))
  3,850 ( 0.00%)      }
      .           
      .               /// Given a `HirId`, returns the `BodyId` associated with it,
      .               /// if the node is a body owner, otherwise returns `None`.
    833 ( 0.00%)      pub fn maybe_body_owned_by(&self, hir_id: HirId) -> Option<BodyId> {
  2,653 ( 0.00%)          self.find(hir_id).map(associated_body).flatten()
  2,499 ( 0.00%)      }
      .           
      .               /// Given a body owner's id, returns the `BodyId` associated with it.
  1,386 ( 0.00%)      pub fn body_owned_by(&self, id: HirId) -> BodyId {
      .                   self.maybe_body_owned_by(id).unwrap_or_else(|| {
      .                       span_bug!(
      .                           self.span(id),
      .                           "body_owned_by: {} has no associated body",
      .                           self.node_to_string(id)
      .                       );
      .                   })
  1,078 ( 0.00%)      }
      .           
     77 ( 0.00%)      pub fn body_param_names(&self, id: BodyId) -> impl Iterator<Item = Ident> + 'hir {
    675 ( 0.00%)          self.body(id).params.iter().map(|arg| match arg.pat.kind {
    222 ( 0.00%)              PatKind::Binding(_, _, ident, _) => ident,
      .                       _ => Ident::empty(),
      .                   })
    231 ( 0.00%)      }
      .           
      .               /// Returns the `BodyOwnerKind` of this `LocalDefId`.
      .               ///
      .               /// Panics if `LocalDefId` does not have an associated body.
  2,310 ( 0.00%)      pub fn body_owner_kind(&self, id: HirId) -> BodyOwnerKind {
  6,160 ( 0.00%)          match self.get(id) {
      .                       Node::Item(&Item { kind: ItemKind::Const(..), .. })
      .                       | Node::TraitItem(&TraitItem { kind: TraitItemKind::Const(..), .. })
      .                       | Node::ImplItem(&ImplItem { kind: ImplItemKind::Const(..), .. })
      .                       | Node::AnonConst(_) => BodyOwnerKind::Const,
      .                       Node::Ctor(..)
      .                       | Node::Item(&Item { kind: ItemKind::Fn(..), .. })
      .                       | Node::TraitItem(&TraitItem { kind: TraitItemKind::Fn(..), .. })
      .                       | Node::ImplItem(&ImplItem { kind: ImplItemKind::Fn(..), .. }) => BodyOwnerKind::Fn,
      .                       Node::Item(&Item { kind: ItemKind::Static(_, m, _), .. }) => BodyOwnerKind::Static(m),
      .                       Node::Expr(&Expr { kind: ExprKind::Closure(..), .. }) => BodyOwnerKind::Closure,
      .                       node => bug!("{:#?} is not a body node", node),
      .                   }
  2,310 ( 0.00%)      }
      .           
      .               /// Returns the `ConstContext` of the body associated with this `LocalDefId`.
      .               ///
      .               /// Panics if `LocalDefId` does not have an associated body.
      .               ///
      .               /// This should only be used for determining the context of a body, a return
      .               /// value of `Some` does not always suggest that the owner of the body is `const`,
      .               /// just that it has to be checked as if it were.
  2,464 ( 0.00%)      pub fn body_const_context(&self, did: LocalDefId) -> Option<ConstContext> {
      .                   let hir_id = self.local_def_id_to_hir_id(did);
  3,696 ( 0.00%)          let ccx = match self.body_owner_kind(hir_id) {
      .                       BodyOwnerKind::Const => ConstContext::Const,
      .                       BodyOwnerKind::Static(mt) => ConstContext::Static(mt),
      .           
    308 ( 0.00%)              BodyOwnerKind::Fn if self.tcx.is_constructor(did.to_def_id()) => return None,
    308 ( 0.00%)              BodyOwnerKind::Fn if self.tcx.is_const_fn_raw(did.to_def_id()) => ConstContext::ConstFn,
      .                       BodyOwnerKind::Fn
    616 ( 0.00%)                  if self.tcx.has_attr(did.to_def_id(), sym::default_method_body_is_const) =>
      .                       {
      .                           ConstContext::ConstFn
      .                       }
      .                       BodyOwnerKind::Fn | BodyOwnerKind::Closure => return None,
      .                   };
      .           
      .                   Some(ccx)
  2,772 ( 0.00%)      }
      .           
      .               /// Returns an iterator of the `DefId`s for all body-owners in this
      .               /// crate. If you would prefer to iterate over the bodies
      .               /// themselves, you can do `self.hir().krate().body_ids.iter()`.
     21 ( 0.00%)      pub fn body_owners(self) -> impl Iterator<Item = LocalDefId> + 'hir {
      3 ( 0.00%)          self.krate()
      .                       .owners
      .                       .iter_enumerated()
      .                       .flat_map(move |(owner, owner_info)| {
    993 ( 0.00%)                  let bodies = &owner_info.as_ref()?.nodes.bodies;
      .                           Some(bodies.iter().map(move |&(local_id, _)| {
      .                               let hir_id = HirId { owner, local_id };
      .                               let body_id = BodyId { hir_id };
    770 ( 0.00%)                      self.body_owner_def_id(body_id)
      .                           }))
      .                       })
      .                       .flatten()
     15 ( 0.00%)      }
      .           
     10 ( 0.00%)      pub fn par_body_owners<F: Fn(LocalDefId) + Sync + Send>(self, f: F) {
      .                   use rustc_data_structures::sync::{par_iter, ParallelIterator};
      .                   #[cfg(parallel_compiler)]
      .                   use rustc_rayon::iter::IndexedParallelIterator;
      .           
      3 ( 0.00%)          par_iter(&self.krate().owners.raw).enumerate().for_each(|(owner, owner_info)| {
      .                       let owner = LocalDefId::new(owner);
  1,986 ( 0.00%)              if let Some(owner_info) = owner_info {
      .                           par_iter(owner_info.nodes.bodies.range(..)).for_each(|(local_id, _)| {
      .                               let hir_id = HirId { owner, local_id: *local_id };
      .                               let body_id = BodyId { hir_id };
    693 ( 0.00%)                      f(self.body_owner_def_id(body_id))
      .                           })
      .                       }
      .                   });
      8 ( 0.00%)      }
      .           
      .               pub fn ty_param_owner(&self, id: HirId) -> LocalDefId {
      .                   match self.get(id) {
      .                       Node::Item(&Item { kind: ItemKind::Trait(..) | ItemKind::TraitAlias(..), .. }) => {
      .                           id.expect_owner()
      .                       }
      .                       Node::GenericParam(_) => self.get_parent_item(id),
      .                       _ => bug!("ty_param_owner: {} not a type parameter", self.node_to_string(id)),
-- line 558 ----------------------------------------
-- line 564 ----------------------------------------
      .                       Node::Item(&Item { kind: ItemKind::Trait(..) | ItemKind::TraitAlias(..), .. }) => {
      .                           kw::SelfUpper
      .                       }
      .                       Node::GenericParam(param) => param.name.ident().name,
      .                       _ => bug!("ty_param_name: {} not a type parameter", self.node_to_string(id)),
      .                   }
      .               }
      .           
    243 ( 0.00%)      pub fn trait_impls(&self, trait_did: DefId) -> &'hir [LocalDefId] {
     27 ( 0.00%)          self.tcx.all_local_trait_impls(()).get(&trait_did).map_or(&[], |xs| &xs[..])
    243 ( 0.00%)      }
      .           
      .               /// Gets the attributes on the crate. This is preferable to
      .               /// invoking `krate.attrs` because it registers a tighter
      .               /// dep-graph access.
      .               pub fn krate_attrs(&self) -> &'hir [ast::Attribute] {
     20 ( 0.00%)          self.attrs(CRATE_HIR_ID)
      .               }
      .           
    224 ( 0.00%)      pub fn get_module(&self, module: LocalDefId) -> (&'hir Mod<'hir>, Span, HirId) {
      .                   let hir_id = HirId::make_owner(module);
    160 ( 0.00%)          match self.tcx.hir_owner(module).map(|o| o.node) {
     42 ( 0.00%)              Some(OwnerNode::Item(&Item { span, kind: ItemKind::Mod(ref m), .. })) => {
      .                           (m, span, hir_id)
      .                       }
     33 ( 0.00%)              Some(OwnerNode::Crate(item)) => (item, item.inner, hir_id),
      .                       node => panic!("not a module: {:?}", node),
      .                   }
    288 ( 0.00%)      }
      .           
      .               /// Walks the contents of a crate. See also `Crate::visit_all_items`.
     11 ( 0.00%)      pub fn walk_toplevel_module(self, visitor: &mut impl Visitor<'hir>) {
     30 ( 0.00%)          let (top_mod, span, hir_id) = self.get_module(CRATE_DEF_ID);
      .                   visitor.visit_mod(top_mod, span, hir_id);
      8 ( 0.00%)      }
      .           
      .               /// Walks the attributes in a crate.
     20 ( 0.00%)      pub fn walk_attributes(self, visitor: &mut impl Visitor<'hir>) {
      2 ( 0.00%)          let krate = self.krate();
      .                   for (owner, info) in krate.owners.iter_enumerated() {
  1,324 ( 0.00%)              if let Some(info) = info {
      .                           for (local_id, attrs) in info.attrs.map.iter() {
      .                               let id = HirId { owner, local_id: *local_id };
      .                               for a in *attrs {
  2,305 ( 0.00%)                          visitor.visit_attribute(id, a)
      .                               }
      .                           }
      .                       }
      .                   }
     16 ( 0.00%)      }
      .           
      .               /// Visits all items in the crate in some deterministic (but
      .               /// unspecified) order. If you just need to process every item,
      .               /// but don't care about nesting, this method is the best choice.
      .               ///
      .               /// If you do care about nesting -- usually because your algorithm
      .               /// follows lexical scoping rules -- then you want a different
      .               /// approach. You should override `visit_nested_item` in your
      .               /// visitor and then call `intravisit::walk_crate` instead.
    144 ( 0.00%)      pub fn visit_all_item_likes<V>(&self, visitor: &mut V)
      .               where
      .                   V: itemlikevisit::ItemLikeVisitor<'hir>,
      .               {
     20 ( 0.00%)          let krate = self.krate();
     70 ( 0.00%)          for owner in krate.owners.iter().filter_map(Option::as_ref) {
  7,425 ( 0.00%)              match owner.node() {
  6,278 ( 0.00%)                  OwnerNode::Item(item) => visitor.visit_item(item),
      .                           OwnerNode::ForeignItem(item) => visitor.visit_foreign_item(item),
    231 ( 0.00%)                  OwnerNode::ImplItem(item) => visitor.visit_impl_item(item),
      .                           OwnerNode::TraitItem(item) => visitor.visit_trait_item(item),
      .                           OwnerNode::Crate(_) => {}
      .                       }
      .                   }
    144 ( 0.00%)      }
      .           
      .               /// A parallel version of `visit_all_item_likes`.
      .               pub fn par_visit_all_item_likes<V>(&self, visitor: &V)
      .               where
      .                   V: itemlikevisit::ParItemLikeVisitor<'hir> + Sync + Send,
      .               {
      1 ( 0.00%)          let krate = self.krate();
      2 ( 0.00%)          par_for_each_in(&krate.owners.raw, |owner| match owner.as_ref().map(OwnerInfo::node) {
    146 ( 0.00%)              Some(OwnerNode::Item(item)) => visitor.visit_item(item),
      .                       Some(OwnerNode::ForeignItem(item)) => visitor.visit_foreign_item(item),
     77 ( 0.00%)              Some(OwnerNode::ImplItem(item)) => visitor.visit_impl_item(item),
      1 ( 0.00%)              Some(OwnerNode::TraitItem(item)) => visitor.visit_trait_item(item),
      .                       Some(OwnerNode::Crate(_)) | None => {}
      .                   })
      .               }
      .           
    688 ( 0.00%)      pub fn visit_item_likes_in_module<V>(&self, module: LocalDefId, visitor: &mut V)
      .               where
      .                   V: ItemLikeVisitor<'hir>,
      .               {
     88 ( 0.00%)          let module = self.tcx.hir_module_items(module);
      .           
     96 ( 0.00%)          for id in module.items.iter() {
  6,570 ( 0.00%)              visitor.visit_item(self.item(*id));
      .                   }
      .           
     96 ( 0.00%)          for id in module.trait_items.iter() {
     40 ( 0.00%)              visitor.visit_trait_item(self.trait_item(*id));
      .                   }
      .           
     96 ( 0.00%)          for id in module.impl_items.iter() {
  3,003 ( 0.00%)              visitor.visit_impl_item(self.impl_item(*id));
      .                   }
      .           
     96 ( 0.00%)          for id in module.foreign_items.iter() {
      .                       visitor.visit_foreign_item(self.foreign_item(*id));
      .                   }
    704 ( 0.00%)      }
      .           
     46 ( 0.00%)      pub fn for_each_module(&self, f: impl Fn(LocalDefId)) {
      .                   let mut queue = VecDeque::new();
      .                   queue.push_back(CRATE_DEF_ID);
      .           
     64 ( 0.00%)          while let Some(id) = queue.pop_front() {
      .                       f(id);
     24 ( 0.00%)              let items = self.tcx.hir_module_items(id);
    256 ( 0.00%)              queue.extend(items.submodules.iter().copied())
      .                   }
     40 ( 0.00%)      }
      .           
      .               #[cfg(not(parallel_compiler))]
      .               #[inline]
      .               pub fn par_for_each_module(&self, f: impl Fn(LocalDefId)) {
      4 ( 0.00%)          self.for_each_module(f)
      .               }
      .           
      .               #[cfg(parallel_compiler)]
      .               pub fn par_for_each_module(&self, f: impl Fn(LocalDefId) + Sync) {
      .                   use rustc_data_structures::sync::{par_iter, ParallelIterator};
      .                   par_iter_submodules(self.tcx, CRATE_DEF_ID, &f);
      .           
      .                   fn par_iter_submodules<F>(tcx: TyCtxt<'_>, module: LocalDefId, f: &F)
-- line 699 ----------------------------------------
-- line 703 ----------------------------------------
      .                       (*f)(module);
      .                       let items = tcx.hir_module_items(module);
      .                       par_iter(&items.submodules[..]).for_each(|&sm| par_iter_submodules(tcx, sm, f));
      .                   }
      .               }
      .           
      .               /// Returns an iterator for the nodes in the ancestor tree of the `current_id`
      .               /// until the crate root is reached. Prefer this over your own loop using `get_parent_node`.
    223 ( 0.00%)      pub fn parent_iter(self, current_id: HirId) -> ParentHirIterator<'hir> {
      .                   ParentHirIterator { current_id, map: self }
    892 ( 0.00%)      }
      .           
      .               /// Returns an iterator for the nodes in the ancestor tree of the `current_id`
      .               /// until the crate root is reached. Prefer this over your own loop using `get_parent_node`.
      .               pub fn parent_owner_iter(self, current_id: HirId) -> ParentOwnerIterator<'hir> {
      .                   ParentOwnerIterator { current_id, map: self }
  3,971 ( 0.00%)      }
      .           
      .               /// Checks if the node is left-hand side of an assignment.
      .               pub fn is_lhs(&self, id: HirId) -> bool {
      .                   match self.find(self.get_parent_node(id)) {
      .                       Some(Node::Expr(expr)) => match expr.kind {
      .                           ExprKind::Assign(lhs, _rhs, _span) => lhs.hir_id == id,
      .                           _ => false,
      .                       },
-- line 727 ----------------------------------------
-- line 792 ----------------------------------------
      .                   }
      .                   None
      .               }
      .           
      .               /// Retrieves the `HirId` for `id`'s parent item, or `id` itself if no
      .               /// parent item is in this map. The "parent item" is the closest parent node
      .               /// in the HIR which is recorded by the map and is an item, either an item
      .               /// in a module, trait, or impl.
  1,169 ( 0.00%)      pub fn get_parent_item(&self, hir_id: HirId) -> LocalDefId {
 10,521 ( 0.00%)          if let Some((def_id, _node)) = self.parent_owner_iter(hir_id).next() {
      .                       def_id
      .                   } else {
      .                       CRATE_DEF_ID
      .                   }
  2,338 ( 0.00%)      }
      .           
      .               /// Returns the `HirId` of `id`'s nearest module parent, or `id` itself if no
      .               /// module parent is in this map.
      .               pub(super) fn get_module_parent_node(&self, hir_id: HirId) -> LocalDefId {
  1,426 ( 0.00%)          for (def_id, node) in self.parent_owner_iter(hir_id) {
    754 ( 0.00%)              if let OwnerNode::Item(&Item { kind: ItemKind::Mod(_), .. }) = node {
      .                           return def_id;
      .                       }
      .                   }
      .                   CRATE_DEF_ID
      .               }
      .           
      .               /// When on an if expression, a match arm tail expression or a match arm, give back
      .               /// the enclosing `if` or `match` expression.
-- line 820 ----------------------------------------
-- line 885 ----------------------------------------
      .                       }
      .                   }
      .                   bug!(
      .                       "expected foreign mod or inlined parent, found {}",
      .                       self.node_to_string(HirId::make_owner(parent))
      .                   )
      .               }
      .           
  6,944 ( 0.00%)      pub fn expect_item(&self, id: LocalDefId) -> &'hir Item<'hir> {
  2,976 ( 0.00%)          match self.tcx.hir_owner(id) {
      .                       Some(Owner { node: OwnerNode::Item(item), .. }) => item,
      .                       _ => bug!("expected item, found {}", self.node_to_string(HirId::make_owner(id))),
      .                   }
  7,936 ( 0.00%)      }
      .           
  1,078 ( 0.00%)      pub fn expect_impl_item(&self, id: LocalDefId) -> &'hir ImplItem<'hir> {
    462 ( 0.00%)          match self.tcx.hir_owner(id) {
      .                       Some(Owner { node: OwnerNode::ImplItem(item), .. }) => item,
      .                       _ => bug!("expected impl item, found {}", self.node_to_string(HirId::make_owner(id))),
      .                   }
  1,232 ( 0.00%)      }
      .           
     14 ( 0.00%)      pub fn expect_trait_item(&self, id: LocalDefId) -> &'hir TraitItem<'hir> {
      6 ( 0.00%)          match self.tcx.hir_owner(id) {
      .                       Some(Owner { node: OwnerNode::TraitItem(item), .. }) => item,
      .                       _ => bug!("expected trait item, found {}", self.node_to_string(HirId::make_owner(id))),
      .                   }
     16 ( 0.00%)      }
      .           
      .               pub fn expect_variant(&self, id: HirId) -> &'hir Variant<'hir> {
      .                   match self.find(id) {
      .                       Some(Node::Variant(variant)) => variant,
      .                       _ => bug!("expected variant, found {}", self.node_to_string(id)),
      .                   }
      .               }
      .           
-- line 920 ----------------------------------------
-- line 929 ----------------------------------------
      .           
      .               pub fn expect_expr(&self, id: HirId) -> &'hir Expr<'hir> {
      .                   match self.find(id) {
      .                       Some(Node::Expr(expr)) => expr,
      .                       _ => bug!("expected expr, found {}", self.node_to_string(id)),
      .                   }
      .               }
      .           
    342 ( 0.00%)      pub fn opt_name(&self, id: HirId) -> Option<Symbol> {
    114 ( 0.00%)          Some(match self.get(id) {
      .                       Node::Item(i) => i.ident.name,
      .                       Node::ForeignItem(fi) => fi.ident.name,
      .                       Node::ImplItem(ii) => ii.ident.name,
      .                       Node::TraitItem(ti) => ti.ident.name,
      .                       Node::Variant(v) => v.ident.name,
      .                       Node::Field(f) => f.ident.name,
      .                       Node::Lifetime(lt) => lt.name.ident().name,
    114 ( 0.00%)              Node::GenericParam(param) => param.name.ident().name,
      .                       Node::Binding(&Pat { kind: PatKind::Binding(_, _, l, _), .. }) => l.name,
      .                       Node::Ctor(..) => self.name(HirId::make_owner(self.get_parent_item(id))),
      .                       _ => return None,
      .                   })
    190 ( 0.00%)      }
      .           
    304 ( 0.00%)      pub fn name(&self, id: HirId) -> Symbol {
    114 ( 0.00%)          match self.opt_name(id) {
      .                       Some(name) => name,
      .                       None => bug!("no name for {}", self.node_to_string(id)),
      .                   }
    228 ( 0.00%)      }
      .           
      .               /// Given a node ID, gets a list of attributes associated with the AST
      .               /// corresponding to the node-ID.
167,832 ( 0.07%)      pub fn attrs(&self, id: HirId) -> &'hir [ast::Attribute] {
 23,976 ( 0.01%)          self.tcx.hir_attrs(id.owner).get(id.local_id)
191,808 ( 0.07%)      }
      .           
      .               /// Gets the span of the definition of the specified HIR node.
      .               /// This is used by `tcx.get_span`
    729 ( 0.00%)      pub fn span(&self, hir_id: HirId) -> Span {
  3,899 ( 0.00%)          self.opt_span(hir_id)
      .                       .unwrap_or_else(|| bug!("hir::map::Map::span: id not in map: {:?}", hir_id))
    729 ( 0.00%)      }
      .           
 10,171 ( 0.00%)      pub fn opt_span(&self, hir_id: HirId) -> Option<Span> {
 10,171 ( 0.00%)          let span = match self.find(hir_id)? {
      .                       Node::Param(param) => param.span,
    314 ( 0.00%)              Node::Item(item) => match &item.kind {
      .                           ItemKind::Fn(sig, _, _) => sig.span,
    314 ( 0.00%)                  _ => item.span,
      .                       },
      .                       Node::ForeignItem(foreign_item) => foreign_item.span,
      4 ( 0.00%)              Node::TraitItem(trait_item) => match &trait_item.kind {
      4 ( 0.00%)                  TraitItemKind::Fn(sig, _) => sig.span,
      .                           _ => trait_item.span,
      .                       },
    616 ( 0.00%)              Node::ImplItem(impl_item) => match &impl_item.kind {
    616 ( 0.00%)                  ImplItemKind::Fn(sig, _) => sig.span,
      .                           _ => impl_item.span,
      .                       },
     20 ( 0.00%)              Node::Variant(variant) => variant.span,
     54 ( 0.00%)              Node::Field(field) => field.span,
      .                       Node::AnonConst(constant) => self.body(constant.body).value.span,
      .                       Node::Expr(expr) => expr.span,
      .                       Node::Stmt(stmt) => stmt.span,
      .                       Node::PathSegment(seg) => seg.ident.span,
      .                       Node::Ty(ty) => ty.span,
      .                       Node::TraitRef(tr) => tr.path.span,
      .                       Node::Binding(pat) => pat.span,
      .                       Node::Pat(pat) => pat.span,
      .                       Node::Arm(arm) => arm.span,
      .                       Node::Block(block) => block.span,
    140 ( 0.00%)              Node::Ctor(..) => match self.find(self.get_parent_node(hir_id))? {
      .                           Node::Item(item) => item.span,
      .                           Node::Variant(variant) => variant.span,
      .                           _ => unreachable!(),
      .                       },
      .                       Node::Lifetime(lifetime) => lifetime.span,
      .                       Node::GenericParam(param) => param.span,
      .                       Node::Visibility(&Spanned {
      .                           node: VisibilityKind::Restricted { ref path, .. },
      .                           ..
      .                       }) => path.span,
      .                       Node::Infer(i) => i.span,
      .                       Node::Visibility(v) => bug!("unexpected Visibility {:?}", v),
      .                       Node::Local(local) => local.span,
      4 ( 0.00%)              Node::Crate(item) => item.inner,
      .                   };
      .                   Some(span)
 14,530 ( 0.01%)      }
      .           
      .               /// Like `hir.span()`, but includes the body of function items
      .               /// (instead of just the function header)
      .               pub fn span_with_body(&self, hir_id: HirId) -> Span {
      .                   match self.find(hir_id) {
      .                       Some(Node::TraitItem(item)) => item.span,
      .                       Some(Node::ImplItem(impl_item)) => impl_item.span,
      .                       Some(Node::Item(item)) => item.span,
      .                       Some(_) => self.span(hir_id),
      .                       _ => bug!("hir::map::Map::span_with_body: id not in map: {:?}", hir_id),
      .                   }
      .               }
      .           
    154 ( 0.00%)      pub fn span_if_local(&self, id: DefId) -> Option<Span> {
    581 ( 0.00%)          id.as_local().and_then(|id| self.opt_span(self.local_def_id_to_hir_id(id)))
    231 ( 0.00%)      }
      .           
      .               pub fn res_span(&self, res: Res) -> Option<Span> {
      .                   match res {
      .                       Res::Err => None,
      .                       Res::Local(id) => Some(self.span(id)),
      .                       res => self.span_if_local(res.opt_def_id()?),
      .                   }
      .               }
-- line 1042 ----------------------------------------
-- line 1062 ----------------------------------------
      .           }
      .           
      .           impl<'hir> intravisit::Map<'hir> for Map<'hir> {
      .               fn find(&self, hir_id: HirId) -> Option<Node<'hir>> {
      .                   self.find(hir_id)
      .               }
      .           
      .               fn body(&self, id: BodyId) -> &'hir Body<'hir> {
  1,550 ( 0.00%)          self.body(id)
      .               }
      .           
      .               fn item(&self, id: ItemId) -> &'hir Item<'hir> {
  1,898 ( 0.00%)          self.item(id)
      .               }
      .           
      .               fn trait_item(&self, id: TraitItemId) -> &'hir TraitItem<'hir> {
     15 ( 0.00%)          self.trait_item(id)
      .               }
      .           
      .               fn impl_item(&self, id: ImplItemId) -> &'hir ImplItem<'hir> {
  1,078 ( 0.00%)          self.impl_item(id)
      .               }
      .           
      .               fn foreign_item(&self, id: ForeignItemId) -> &'hir ForeignItem<'hir> {
      .                   self.foreign_item(id)
      .               }
      .           }
      .           
      7 ( 0.00%)  pub(super) fn crate_hash(tcx: TyCtxt<'_>, crate_num: CrateNum) -> Svh {
      .               debug_assert_eq!(crate_num, LOCAL_CRATE);
      .               let krate = tcx.hir_crate(());
      3 ( 0.00%)      let hir_body_hash = krate.hir_hash;
      .           
      .               let upstream_crates = upstream_crates(tcx);
      .           
      .               // We hash the final, remapped names of all local source files so we
      .               // don't have to include the path prefix remapping commandline args.
      .               // If we included the full mapping in the SVH, we could only have
      .               // reproducible builds by compiling from the same directory. So we just
      .               // hash the result of the mapping instead of the mapping itself.
      2 ( 0.00%)      let mut source_file_names: Vec<_> = tcx
      .                   .sess
      .                   .source_map()
      .                   .files()
      .                   .iter()
      .                   .filter(|source_file| source_file.cnum == LOCAL_CRATE)
     23 ( 0.00%)          .map(|source_file| source_file.name_hash)
      .                   .collect();
      .           
      .               source_file_names.sort_unstable();
      .           
      .               let mut hcx = tcx.create_stable_hashing_context();
      .               let mut stable_hasher = StableHasher::new();
      .               hir_body_hash.hash_stable(&mut hcx, &mut stable_hasher);
      .               upstream_crates.hash_stable(&mut hcx, &mut stable_hasher);
      .               source_file_names.hash_stable(&mut hcx, &mut stable_hasher);
      3 ( 0.00%)      if tcx.sess.opts.debugging_opts.incremental_relative_spans {
      .                   let definitions = &tcx.untracked_resolutions.definitions;
      .                   let mut owner_spans: Vec<_> = krate
      .                       .owners
      .                       .iter_enumerated()
      .                       .filter_map(|(def_id, info)| {
      .                           let _ = info.as_ref()?;
      .                           let def_path_hash = definitions.def_path_hash(def_id);
      .                           let span = definitions.def_span(def_id);
      .                           debug_assert_eq!(span.parent(), None);
      .                           Some((def_path_hash, span))
      .                       })
      .                       .collect();
      .                   owner_spans.sort_unstable_by_key(|bn| bn.0);
      .                   owner_spans.hash_stable(&mut hcx, &mut stable_hasher);
      .               }
      3 ( 0.00%)      tcx.sess.opts.dep_tracking_hash(true).hash_stable(&mut hcx, &mut stable_hasher);
      2 ( 0.00%)      tcx.sess.local_stable_crate_id().hash_stable(&mut hcx, &mut stable_hasher);
      .           
      .               let crate_hash: Fingerprint = stable_hasher.finish();
      1 ( 0.00%)      Svh::new(crate_hash.to_smaller_hash())
      9 ( 0.00%)  }
      .           
      .           fn upstream_crates(tcx: TyCtxt<'_>) -> Vec<(StableCrateId, Svh)> {
      .               let mut upstream_crates: Vec<_> = tcx
      .                   .crates(())
      .                   .iter()
      .                   .map(|&cnum| {
     20 ( 0.00%)              let stable_crate_id = tcx.resolutions(()).cstore.stable_crate_id(cnum);
      4 ( 0.00%)              let hash = tcx.crate_hash(cnum);
      .                       (stable_crate_id, hash)
      .                   })
      .                   .collect();
      .               upstream_crates.sort_unstable_by_key(|&(stable_crate_id, _)| stable_crate_id);
      .               upstream_crates
      .           }
      .           
      .           fn hir_id_to_string(map: &Map<'_>, id: HirId) -> String {
-- line 1155 ----------------------------------------
-- line 1238 ----------------------------------------
      .                   Some(Node::Lifetime(_)) => node_str("lifetime"),
      .                   Some(Node::GenericParam(ref param)) => format!("generic_param {:?}{}", param, id_str),
      .                   Some(Node::Visibility(ref vis)) => format!("visibility {:?}{}", vis, id_str),
      .                   Some(Node::Crate(..)) => String::from("root_crate"),
      .                   None => format!("unknown node{}", id_str),
      .               }
      .           }
      .           
     72 ( 0.00%)  pub(super) fn hir_module_items(tcx: TyCtxt<'_>, module_id: LocalDefId) -> ModuleItems {
     48 ( 0.00%)      let mut collector = ModuleCollector {
      .                   tcx,
      .                   submodules: Vec::default(),
      .                   items: Vec::default(),
      .                   trait_items: Vec::default(),
      .                   impl_items: Vec::default(),
      .                   foreign_items: Vec::default(),
      .               };
      .           
     40 ( 0.00%)      let (hir_mod, span, hir_id) = tcx.hir().get_module(module_id);
      .               collector.visit_mod(hir_mod, span, hir_id);
      .           
    128 ( 0.00%)      let ModuleCollector { submodules, items, trait_items, impl_items, foreign_items, .. } =
      .                   collector;
     88 ( 0.00%)      return ModuleItems {
     32 ( 0.00%)          submodules: submodules.into_boxed_slice(),
     32 ( 0.00%)          items: items.into_boxed_slice(),
     32 ( 0.00%)          trait_items: trait_items.into_boxed_slice(),
     32 ( 0.00%)          impl_items: impl_items.into_boxed_slice(),
     32 ( 0.00%)          foreign_items: foreign_items.into_boxed_slice(),
      .               };
      .           
      .               struct ModuleCollector<'tcx> {
      .                   tcx: TyCtxt<'tcx>,
      .                   submodules: Vec<LocalDefId>,
      .                   items: Vec<ItemId>,
      .                   trait_items: Vec<TraitItemId>,
      .                   impl_items: Vec<ImplItemId>,
      .                   foreign_items: Vec<ForeignItemId>,
      .               }
      .           
      .               impl<'hir> Visitor<'hir> for ModuleCollector<'hir> {
      .                   type NestedFilter = nested_filter::All;
      .           
      .                   fn nested_visit_map(&mut self) -> Self::Map {
    293 ( 0.00%)              self.tcx.hir()
      .                   }
      .           
    730 ( 0.00%)          fn visit_item(&mut self, item: &'hir Item<'hir>) {
    438 ( 0.00%)              self.items.push(item.item_id());
    292 ( 0.00%)              if let ItemKind::Mod(..) = item.kind {
      .                           // If this declares another module, do not recurse inside it.
      7 ( 0.00%)                  self.submodules.push(item.def_id);
      .                       } else {
    834 ( 0.00%)                  intravisit::walk_item(self, item)
      .                       }
     28 ( 0.00%)          }
      .           
      .                   fn visit_trait_item(&mut self, item: &'hir TraitItem<'hir>) {
      3 ( 0.00%)              self.trait_items.push(item.trait_item_id());
      3 ( 0.00%)              intravisit::walk_trait_item(self, item)
      .                   }
      .           
      .                   fn visit_impl_item(&mut self, item: &'hir ImplItem<'hir>) {
    231 ( 0.00%)              self.impl_items.push(item.impl_item_id());
    231 ( 0.00%)              intravisit::walk_impl_item(self, item)
      .                   }
      .           
      .                   fn visit_foreign_item(&mut self, item: &'hir ForeignItem<'hir>) {
      .                       self.foreign_items.push(item.foreign_item_id());
      .                       intravisit::walk_foreign_item(self, item)
      .                   }
      .               }
     64 ( 0.00%)  }

 81,829 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/hir/map/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs
--------------------------------------------------------------------------------
Ir               

-- line 27 ----------------------------------------
      .           impl CacheEntry {
      .               #[inline]
      .               fn update(
      .                   &mut self,
      .                   new_file_and_idx: Option<(Lrc<SourceFile>, usize)>,
      .                   pos: BytePos,
      .                   time_stamp: usize,
      .               ) {
  1,116 ( 0.00%)          if let Some((file, file_idx)) = new_file_and_idx {
    889 ( 0.00%)              self.file = file;
  1,469 ( 0.00%)              self.file_index = file_idx;
      .                   }
      .           
    285 ( 0.00%)          let line_index = self.file.lookup_line(pos).unwrap();
      .                   let line_bounds = self.file.line_bounds(line_index);
  2,142 ( 0.00%)          self.line_number = line_index + 1;
  3,242 ( 0.00%)          self.line = line_bounds;
      .                   self.touch(time_stamp);
      .               }
      .           
      .               #[inline]
      .               fn touch(&mut self, time_stamp: usize) {
 22,900 ( 0.01%)          self.time_stamp = time_stamp;
      .               }
      .           }
      .           
      .           #[derive(Clone)]
      .           pub struct CachingSourceMapView<'sm> {
      .               source_map: &'sm SourceMap,
      .               line_cache: [CacheEntry; 3],
      .               time_stamp: usize,
      .           }
      .           
      .           impl<'sm> CachingSourceMapView<'sm> {
    846 ( 0.00%)      pub fn new(source_map: &'sm SourceMap) -> CachingSourceMapView<'sm> {
      .                   let files = source_map.files();
    423 ( 0.00%)          let first_file = files[0].clone();
      .                   let entry = CacheEntry {
      .                       time_stamp: 0,
      .                       line_number: 0,
      .                       line: BytePos(0)..BytePos(0),
      .                       file: first_file,
      .                       file_index: 0,
      .                   };
      .           
  2,115 ( 0.00%)          CachingSourceMapView {
      .                       source_map,
  2,961 ( 0.00%)              line_cache: [entry.clone(), entry.clone(), entry],
      .                       time_stamp: 0,
      .                   }
  1,692 ( 0.00%)      }
      .           
      .               pub fn byte_pos_to_line_and_col(
      .                   &mut self,
      .                   pos: BytePos,
      .               ) -> Option<(Lrc<SourceFile>, usize, BytePos)> {
      .                   self.time_stamp += 1;
      .           
      .                   // Check if the position is in one of the cached lines
-- line 85 ----------------------------------------
-- line 106 ----------------------------------------
      .                   };
      .           
      .                   let cache_entry = &mut self.line_cache[oldest];
      .                   cache_entry.update(new_file_and_idx, pos, self.time_stamp);
      .           
      .                   Some((cache_entry.file.clone(), cache_entry.line_number, pos - cache_entry.line.start))
      .               }
      .           
 83,538 ( 0.03%)      pub fn span_data_to_lines_and_cols(
      .                   &mut self,
      .                   span_data: &SpanData,
      .               ) -> Option<(Lrc<SourceFile>, usize, BytePos, usize, BytePos)> {
 47,736 ( 0.02%)          self.time_stamp += 1;
      .           
      .                   // Check if lo and hi are in the cached lines.
 11,934 ( 0.00%)          let lo_cache_idx = self.cache_entry_index(span_data.lo);
 11,934 ( 0.00%)          let hi_cache_idx = self.cache_entry_index(span_data.hi);
      .           
 21,932 ( 0.01%)          if lo_cache_idx != -1 && hi_cache_idx != -1 {
      .                       // Cache hit for span lo and hi. Check if they belong to the same file.
      .                       let result = {
 21,932 ( 0.01%)                  let lo = &self.line_cache[lo_cache_idx as usize];
      .                           let hi = &self.line_cache[hi_cache_idx as usize];
      .           
 65,796 ( 0.03%)                  if lo.file_index != hi.file_index {
      .                               return None;
      .                           }
      .           
      .                           (
 21,932 ( 0.01%)                      lo.file.clone(),
      .                               lo.line_number,
      .                               span_data.lo - lo.line.start,
 10,966 ( 0.00%)                      hi.line_number,
      .                               span_data.hi - hi.line.start,
      .                           )
      .                       };
      .           
 10,966 ( 0.00%)              self.line_cache[lo_cache_idx as usize].touch(self.time_stamp);
 10,966 ( 0.00%)              self.line_cache[hi_cache_idx as usize].touch(self.time_stamp);
      .           
 43,864 ( 0.02%)              return Some(result);
      .                   }
      .           
      .                   // No cache hit or cache hit for only one of span lo and hi.
  1,936 ( 0.00%)          let oldest = if lo_cache_idx != -1 || hi_cache_idx != -1 {
      .                       let avoid_idx = if lo_cache_idx != -1 { lo_cache_idx } else { hi_cache_idx };
      .                       self.oldest_cache_entry_index_avoid(avoid_idx as usize)
      .                   } else {
      .                       self.oldest_cache_entry_index()
      .                   };
      .           
      .                   // If the entry doesn't point to the correct file, get the new file and index.
      .                   // Return early if the file containing beginning of span doesn't contain end of span.
  7,744 ( 0.00%)          let new_file_and_idx = if !file_contains(&self.line_cache[oldest].file, span_data.lo) {
  3,415 ( 0.00%)              let new_file_and_idx = self.file_for_position(span_data.lo)?;
  4,098 ( 0.00%)              if !file_contains(&new_file_and_idx.0, span_data.hi) {
      .                           return None;
      .                       }
      .           
  2,732 ( 0.00%)              Some(new_file_and_idx)
      .                   } else {
      .                       let file = &self.line_cache[oldest].file;
    855 ( 0.00%)              if !file_contains(&file, span_data.hi) {
      .                           return None;
      .                       }
      .           
    855 ( 0.00%)              None
      .                   };
      .           
      .                   // Update the cache entries.
  4,840 ( 0.00%)          let (lo_idx, hi_idx) = match (lo_cache_idx, hi_cache_idx) {
      .                       // Oldest cache entry is for span_data.lo line.
      .                       (-1, -1) => {
      .                           let lo = &mut self.line_cache[oldest];
      .                           lo.update(new_file_and_idx, span_data.lo, self.time_stamp);
      .           
  2,682 ( 0.00%)                  if !lo.line.contains(&span_data.hi) {
      .                               let new_file_and_idx = Some((lo.file.clone(), lo.file_index));
      .                               let next_oldest = self.oldest_cache_entry_index_avoid(oldest);
      .                               let hi = &mut self.line_cache[next_oldest];
      .                               hi.update(new_file_and_idx, span_data.hi, self.time_stamp);
      .                               (oldest, next_oldest)
      .                           } else {
      .                               (oldest, oldest)
      .                           }
-- line 190 ----------------------------------------
-- line 195 ----------------------------------------
      .                           lo.update(new_file_and_idx, span_data.lo, self.time_stamp);
      .                           let hi = &mut self.line_cache[hi_cache_idx as usize];
      .                           hi.touch(self.time_stamp);
      .                           (oldest, hi_cache_idx as usize)
      .                       }
      .                       // Oldest cache entry is for span_data.hi line.
      .                       (_, -1) => {
      .                           let hi = &mut self.line_cache[oldest];
     74 ( 0.00%)                  hi.update(new_file_and_idx, span_data.hi, self.time_stamp);
    148 ( 0.00%)                  let lo = &mut self.line_cache[lo_cache_idx as usize];
    296 ( 0.00%)                  lo.touch(self.time_stamp);
      .                           (lo_cache_idx as usize, oldest)
      .                       }
      .                       _ => {
      .                           panic!();
      .                       }
      .                   };
      .           
      .                   let lo = &self.line_cache[lo_idx];
      .                   let hi = &self.line_cache[hi_idx];
      .           
      .                   // Span lo and hi may equal line end when last line doesn't
      .                   // end in newline, hence the inclusive upper bounds below.
  1,936 ( 0.00%)          assert!(span_data.lo >= lo.line.start);
    968 ( 0.00%)          assert!(span_data.lo <= lo.line.end);
  1,936 ( 0.00%)          assert!(span_data.hi >= hi.line.start);
    968 ( 0.00%)          assert!(span_data.hi <= hi.line.end);
  4,840 ( 0.00%)          assert!(lo.file.contains(span_data.lo));
  2,904 ( 0.00%)          assert!(lo.file.contains(span_data.hi));
  2,904 ( 0.00%)          assert_eq!(lo.file_index, hi.file_index);
      .           
  2,904 ( 0.00%)          Some((
    968 ( 0.00%)              lo.file.clone(),
      .                       lo.line_number,
      .                       span_data.lo - lo.line.start,
    968 ( 0.00%)              hi.line_number,
      .                       span_data.hi - hi.line.start,
      .                   ))
107,406 ( 0.04%)      }
      .           
      .               fn cache_entry_index(&self, pos: BytePos) -> isize {
      .                   for (idx, cache_entry) in self.line_cache.iter().enumerate() {
113,735 ( 0.04%)              if cache_entry.line.contains(&pos) {
      .                           return idx as isize;
      .                       }
      .                   }
      .           
      .                   -1
      .               }
      .           
      .               fn oldest_cache_entry_index(&self) -> usize {
      .                   let mut oldest = 0;
      .           
      .                   for idx in 1..self.line_cache.len() {
  5,364 ( 0.00%)              if self.line_cache[idx].time_stamp < self.line_cache[oldest].time_stamp {
      .                           oldest = idx;
      .                       }
      .                   }
      .           
      .                   oldest
      .               }
      .           
      .               fn oldest_cache_entry_index_avoid(&self, avoid_idx: usize) -> usize {
      .                   let mut oldest = if avoid_idx != 0 { 0 } else { 1 };
      .           
      .                   for idx in 0..self.line_cache.len() {
  1,008 ( 0.00%)              if idx != avoid_idx
    602 ( 0.00%)                  && self.line_cache[idx].time_stamp < self.line_cache[oldest].time_stamp
      .                       {
      .                           oldest = idx;
      .                       }
      .                   }
      .           
      .                   oldest
      .               }
      .           
  3,415 ( 0.00%)      fn file_for_position(&self, pos: BytePos) -> Option<(Lrc<SourceFile>, usize)> {
    683 ( 0.00%)          if !self.source_map.files().is_empty() {
  1,366 ( 0.00%)              let file_idx = self.source_map.lookup_source_file_idx(pos);
      .                       let file = &self.source_map.files()[file_idx];
      .           
  5,464 ( 0.00%)              if file_contains(file, pos) {
      .                           return Some((file.clone(), file_idx));
      .                       }
      .                   }
      .           
      .                   None
  3,415 ( 0.00%)      }
      .           }
      .           
      .           #[inline]
      .           fn file_contains(file: &SourceFile, pos: BytePos) -> bool {
      .               // `SourceMap::lookup_source_file_idx` and `SourceFile::contains` both consider the position
      .               // one past the end of a file to belong to it. Normally, that's what we want. But for the
      .               // purposes of converting a byte position to a line and column number, we can't come up with a
      .               // line and column number if the file is empty, because an empty file doesn't contain any
-- line 290 ----------------------------------------

142,646 ( 0.06%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs
--------------------------------------------------------------------------------
Ir               

-- line 5 ----------------------------------------
      .           #[stable(feature = "alloc_system_type", since = "1.28.0")]
      .           unsafe impl GlobalAlloc for System {
      .               #[inline]
      .               unsafe fn alloc(&self, layout: Layout) -> *mut u8 {
      .                   // jemalloc provides alignment less than MIN_ALIGN for small allocations.
      .                   // So only rely on MIN_ALIGN if size >= align.
      .                   // Also see <https://github.com/rust-lang/rust/issues/45955> and
      .                   // <https://github.com/rust-lang/rust/issues/62251#issuecomment-507580914>.
407,560 ( 0.16%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
305,670 ( 0.12%)              libc::malloc(layout.size()) as *mut u8
      .                   } else {
      .                       #[cfg(target_os = "macos")]
      .                       {
      .                           if layout.align() > (1 << 31) {
      .                               return ptr::null_mut();
      .                           }
      .                       }
      .                       aligned_malloc(&layout)
      .                   }
      .               }
      .           
      .               #[inline]
      .               unsafe fn alloc_zeroed(&self, layout: Layout) -> *mut u8 {
      .                   // See the comment above in `alloc` for why this check looks the way it does.
 11,184 ( 0.00%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
 16,776 ( 0.01%)              libc::calloc(layout.size(), 1) as *mut u8
      .                   } else {
      .                       let ptr = self.alloc(layout);
      .                       if !ptr.is_null() {
      .                           ptr::write_bytes(ptr, 0, layout.size());
      .                       }
      .                       ptr
      .                   }
      .               }
      .           
      .               #[inline]
      .               unsafe fn dealloc(&self, ptr: *mut u8, _layout: Layout) {
104,675 ( 0.04%)          libc::free(ptr as *mut libc::c_void)
      .               }
      .           
      .               #[inline]
      .               unsafe fn realloc(&self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {
 38,972 ( 0.02%)          if layout.align() <= MIN_ALIGN && layout.align() <= new_size {
 77,944 ( 0.03%)              libc::realloc(ptr as *mut libc::c_void, new_size) as *mut u8
      .                   } else {
      .                       realloc_fallback(self, ptr, layout, new_size)
      .                   }
      .               }
      .           }
      .           
      .           cfg_if::cfg_if! {
      .               if #[cfg(any(
-- line 56 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/search.rs
--------------------------------------------------------------------------------
Ir               

-- line 40 ----------------------------------------
      .           
      .           impl<BorrowType: marker::BorrowType, K, V> NodeRef<BorrowType, K, V, marker::LeafOrInternal> {
      .               /// Looks up a given key in a (sub)tree headed by the node, recursively.
      .               /// Returns a `Found` with the handle of the matching KV, if any. Otherwise,
      .               /// returns a `GoDown` with the handle of the leaf edge where the key belongs.
      .               ///
      .               /// The result is meaningful only if the tree is ordered by key, like the tree
      .               /// in a `BTreeMap` is.
102,165 ( 0.04%)      pub fn search_tree<Q: ?Sized>(
      .                   mut self,
      .                   key: &Q,
      .               ) -> SearchResult<BorrowType, K, V, marker::LeafOrInternal, marker::Leaf>
      .               where
      .                   Q: Ord,
      .                   K: Borrow<Q>,
      .               {
      .                   loop {
      .                       self = match self.search_node(key) {
      .                           Found(handle) => return Found(handle),
  5,806 ( 0.00%)                  GoDown(handle) => match handle.force() {
      .                               Leaf(leaf) => return GoDown(leaf),
      .                               Internal(internal) => internal.descend(),
      .                           },
      .                       }
      .                   }
 54,672 ( 0.02%)      }
      .           
      .               /// Descends to the nearest node where the edge matching the lower bound
      .               /// of the range is different from the edge matching the upper bound, i.e.,
      .               /// the nearest node that has at least one key contained in the range.
      .               ///
      .               /// If found, returns an `Ok` with that node, the strictly ascending pair of
      .               /// edge indices in the node delimiting the range, and the corresponding
      .               /// pair of bounds for continuing the search in the child nodes, in case
-- line 73 ----------------------------------------
-- line 202 ----------------------------------------
      .               unsafe fn find_key_index<Q: ?Sized>(&self, key: &Q, start_index: usize) -> IndexResult
      .               where
      .                   Q: Ord,
      .                   K: Borrow<Q>,
      .               {
      .                   let node = self.reborrow();
      .                   let keys = node.keys();
      .                   debug_assert!(start_index <= keys.len());
 70,336 ( 0.03%)          for (offset, k) in unsafe { keys.get_unchecked(start_index..) }.iter().enumerate() {
305,786 ( 0.12%)              match key.cmp(k.borrow()) {
      .                           Ordering::Greater => {}
      .                           Ordering::Equal => return IndexResult::KV(start_index + offset),
      .                           Ordering::Less => return IndexResult::Edge(start_index + offset),
      .                       }
      .                   }
      .                   IndexResult::Edge(keys.len())
      .               }
      .           
-- line 219 ----------------------------------------

146,229 ( 0.06%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/search.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.14/src/lib.rs
--------------------------------------------------------------------------------
Ir               

-- line 42 ----------------------------------------
      .           /// `stack_size` bytes.
      .           ///
      .           /// The closure `f` is guaranteed to run on a stack with at least `red_zone` bytes, and it will be
      .           /// run on the current stack if there's space available.
      .           #[inline(always)]
      .           pub fn maybe_grow<R, F: FnOnce() -> R>(red_zone: usize, stack_size: usize, callback: F) -> R {
      .               // if we can't guess the remaining stack (unsupported on some platforms) we immediately grow
      .               // the stack and then cache the new stack size (which we do know now because we allocated it.
 64,277 ( 0.02%)      let enough_space = match remaining_stack() {
      .                   Some(remaining) => remaining >= red_zone,
      .                   None => false,
      .               };
 88,899 ( 0.03%)      if enough_space {
  5,179 ( 0.00%)          callback()
      .               } else {
      .                   grow(stack_size, callback)
      .               }
      .           }
      .           
      .           /// Always creates a new stack for the passed closure to run on.
      .           /// The closure will still be on the same thread as the caller of `grow`.
      .           /// This will allocate a new stack with at least `stack_size` bytes.
-- line 63 ----------------------------------------
-- line 82 ----------------------------------------
      .               _grow(stack_size, dyn_callback);
      .               ret.unwrap()
      .           }
      .           
      .           /// Queries the amount of remaining stack as interpreted by this library.
      .           ///
      .           /// This function will return the amount of stack space left which will be used
      .           /// to determine whether a stack switch should be made or not.
 59,266 ( 0.02%)  pub fn remaining_stack() -> Option<usize> {
      .               let current_ptr = current_stack_ptr();
 59,266 ( 0.02%)      get_stack_limit().map(|limit| current_ptr - limit)
118,532 ( 0.05%)  }
      .           
      .           psm_stack_information! (
      .               yes {
      .                   fn current_stack_ptr() -> usize {
 59,266 ( 0.02%)              psm::stack_pointer() as usize
      .                   }
      .               }
      .               no {
      .                   #[inline(always)]
      .                   fn current_stack_ptr() -> usize {
      .                       unsafe {
      .                           let mut x = std::mem::MaybeUninit::<u8>::uninit();
      .                           // Unlikely to be ever exercised. As a fallback we execute a volatile read to a
-- line 106 ----------------------------------------
-- line 111 ----------------------------------------
      .                           x.as_ptr() as usize
      .                       }
      .                   }
      .               }
      .           );
      .           
      .           thread_local! {
      .               static STACK_LIMIT: Cell<Option<usize>> = Cell::new(unsafe {
      1 ( 0.00%)          guess_os_stack_limit()
      .               })
      .           }
      .           
      .           #[inline(always)]
      .           fn get_stack_limit() -> Option<usize> {
      .               STACK_LIMIT.with(|s| s.get())
      .           }
      .           
-- line 127 ----------------------------------------
-- line 403 ----------------------------------------
      .                       VirtualQuery(
      .                           psm::stack_pointer() as *const _,
      .                           mi.as_mut_ptr(),
      .                           std::mem::size_of::<QueryT>() as SIZE_T,
      .                       );
      .                       Some(mi.assume_init().AllocationBase as usize + get_thread_stack_guarantee() + 0x1000)
      .                   }
      .               } else if #[cfg(any(target_os = "linux", target_os="solaris", target_os = "netbsd"))] {
      2 ( 0.00%)          unsafe fn guess_os_stack_limit() -> Option<usize> {
      .                       let mut attr = std::mem::MaybeUninit::<libc::pthread_attr_t>::uninit();
      4 ( 0.00%)              assert_eq!(libc::pthread_attr_init(attr.as_mut_ptr()), 0);
      7 ( 0.00%)              assert_eq!(libc::pthread_getattr_np(libc::pthread_self(),
      .                                                           attr.as_mut_ptr()), 0);
      1 ( 0.00%)              let mut stackaddr = std::ptr::null_mut();
      4 ( 0.00%)              let mut stacksize = 0;
      4 ( 0.00%)              assert_eq!(libc::pthread_attr_getstack(
      .                           attr.as_ptr(), &mut stackaddr, &mut stacksize
      .                       ), 0);
      4 ( 0.00%)              assert_eq!(libc::pthread_attr_destroy(attr.as_mut_ptr()), 0);
      1 ( 0.00%)              Some(stackaddr as usize)
      3 ( 0.00%)          }
      .               } else if #[cfg(any(target_os = "freebsd", target_os = "dragonfly"))] {
      .                   unsafe fn guess_os_stack_limit() -> Option<usize> {
      .                       let mut attr = std::mem::MaybeUninit::<libc::pthread_attr_t>::uninit();
      .                       assert_eq!(libc::pthread_attr_init(attr.as_mut_ptr()), 0);
      .                       assert_eq!(libc::pthread_attr_get_np(libc::pthread_self(), attr.as_mut_ptr()), 0);
      .                       let mut stackaddr = std::ptr::null_mut();
      .                       let mut stacksize = 0;
      .                       assert_eq!(libc::pthread_attr_getstack(
-- line 431 ----------------------------------------

 35,641 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.14/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs
--------------------------------------------------------------------------------
Ir                 

-- line 70 ----------------------------------------
        .           
        .                   impl<'a, T> $name<'a, T> {
        .                       // Helper function for creating a slice from the iterator.
        .                       #[inline(always)]
        .                       fn make_slice(&self) -> &'a [T] {
        .                           // SAFETY: the iterator was created from a slice with pointer
        .                           // `self.ptr` and length `len!(self)`. This guarantees that all
        .                           // the prerequisites for `from_raw_parts` are fulfilled.
    2,097 ( 0.00%)                  unsafe { from_raw_parts(self.ptr.as_ptr(), len!(self)) }
        .                       }
        .           
        .                       // Helper function for moving the start of the iterator forwards by `offset` elements,
        .                       // returning the old start.
        .                       // Unsafe because the offset must not exceed `self.len()`.
        .                       #[inline(always)]
        .                       unsafe fn post_inc_start(&mut self, offset: isize) -> * $raw_mut T {
        .                           if mem::size_of::<T>() == 0 {
        .                               zst_shrink!(self, offset);
        .                               self.ptr.as_ptr()
        .                           } else {
        .                               let old = self.ptr.as_ptr();
        .                               // SAFETY: the caller guarantees that `offset` doesn't exceed `self.len()`,
        .                               // so this new pointer is inside `self` and thus guaranteed to be non-null.
   35,634 ( 0.01%)                      self.ptr = unsafe { NonNull::new_unchecked(self.ptr.as_ptr().offset(offset)) };
        .                               old
        .                           }
        .                       }
        .           
        .                       // Helper function for moving the end of the iterator backwards by `offset` elements,
        .                       // returning the new end.
        .                       // Unsafe because the offset must not exceed `self.len()`.
        .                       #[inline(always)]
-- line 101 ----------------------------------------
-- line 102 ----------------------------------------
        .                       unsafe fn pre_dec_end(&mut self, offset: isize) -> * $raw_mut T {
        .                           if mem::size_of::<T>() == 0 {
        .                               zst_shrink!(self, offset);
        .                               self.ptr.as_ptr()
        .                           } else {
        .                               // SAFETY: the caller guarantees that `offset` doesn't exceed `self.len()`,
        .                               // which is guaranteed to not overflow an `isize`. Also, the resulting pointer
        .                               // is in bounds of `slice`, which fulfills the other requirements for `offset`.
        4 ( 0.00%)                      self.end = unsafe { self.end.offset(-offset) };
        .                               self.end
        .                           }
        .                       }
        .                   }
        .           
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   impl<T> ExactSizeIterator for $name<'_, T> {
        .                       #[inline(always)]
        .                       fn len(&self) -> usize {
   15,980 ( 0.01%)                  len!(self)
        .                       }
        .           
        .                       #[inline(always)]
        .                       fn is_empty(&self) -> bool {
        .                           is_empty!(self)
        .                       }
        .                   }
        .           
-- line 128 ----------------------------------------
-- line 134 ----------------------------------------
        .                       fn next(&mut self) -> Option<$elem> {
        .                           // could be implemented with slices, but this avoids bounds checks
        .           
        .                           // SAFETY: `assume` calls are safe since a slice's start pointer
        .                           // must be non-null, and slices over non-ZSTs must also have a
        .                           // non-null end pointer. The call to `next_unchecked!` is safe
        .                           // since we check if the iterator is empty first.
        .                           unsafe {
   24,884 ( 0.01%)                      assume(!self.ptr.as_ptr().is_null());
        .                               if mem::size_of::<T>() != 0 {
    2,783 ( 0.00%)                          assume(!self.end.is_null());
        .                               }
4,630,806 ( 1.80%)                      if is_empty!(self) {
        .                                   None
        .                               } else {
        .                                   Some(next_unchecked!(self))
        .                               }
        .                           }
        .                       }
        .           
        .                       #[inline]
        .                       fn size_hint(&self) -> (usize, Option<usize>) {
  117,391 ( 0.05%)                  let exact = len!(self);
        .                           (exact, Some(exact))
        .                       }
        .           
        .                       #[inline]
        .                       fn count(self) -> usize {
        .                           len!(self)
        .                       }
        .           
        .                       #[inline]
        .                       fn nth(&mut self, n: usize) -> Option<$elem> {
    1,607 ( 0.00%)                  if n >= len!(self) {
        .                               // This iterator is now empty.
        .                               if mem::size_of::<T>() == 0 {
        .                                   // We have to do it this way as `ptr` may never be 0, but `end`
        .                                   // could be (due to wrapping).
        .                                   self.end = self.ptr.as_ptr();
        .                               } else {
        .                                   // SAFETY: end can't be 0 if T isn't ZST because ptr isn't 0 and end >= ptr
        .                                   unsafe {
-- line 175 ----------------------------------------
-- line 203 ----------------------------------------
        .                       // faster to compile.
        .                       #[inline]
        .                       fn for_each<F>(mut self, mut f: F)
        .                       where
        .                           Self: Sized,
        .                           F: FnMut(Self::Item),
        .                       {
        .                           while let Some(x) = self.next() {
      889 ( 0.00%)                      f(x);
        .                           }
        .                       }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile.
        .                       #[inline]
        .                       fn all<F>(&mut self, mut f: F) -> bool
        .                       where
        .                           Self: Sized,
        .                           F: FnMut(Self::Item) -> bool,
        .                       {
      587 ( 0.00%)                  while let Some(x) = self.next() {
    2,494 ( 0.00%)                      if !f(x) {
        .                                   return false;
        .                               }
        .                           }
        .                           true
        .                       }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile.
        .                       #[inline]
        8 ( 0.00%)              fn any<F>(&mut self, mut f: F) -> bool
        .                       where
        .                           Self: Sized,
        .                           F: FnMut(Self::Item) -> bool,
        .                       {
   52,439 ( 0.02%)                  while let Some(x) = self.next() {
   46,341 ( 0.02%)                      if f(x) {
        .                                   return true;
        .                               }
        .                           }
        .                           false
        8 ( 0.00%)              }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile.
        .                       #[inline]
        .                       fn find<P>(&mut self, mut predicate: P) -> Option<Self::Item>
        .                       where
        .                           Self: Sized,
        .                           P: FnMut(&Self::Item) -> bool,
        .                       {
    3,238 ( 0.00%)                  while let Some(x) = self.next() {
   11,040 ( 0.00%)                      if predicate(&x) {
        .                                   return Some(x);
        .                               }
        .                           }
        .                           None
       56 ( 0.00%)              }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile.
        .                       #[inline]
        .                       fn find_map<B, F>(&mut self, mut f: F) -> Option<B>
        .                       where
        .                           Self: Sized,
        .                           F: FnMut(Self::Item) -> Option<B>,
        .                       {
    2,697 ( 0.00%)                  while let Some(x) = self.next() {
   23,212 ( 0.01%)                      if let Some(y) = f(x) {
    2,352 ( 0.00%)                          return Some(y);
        .                               }
        .                           }
        .                           None
    1,175 ( 0.00%)              }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile. Also, the `assume` avoids a bounds check.
        .                       #[inline]
        .                       #[rustc_inherit_overflow_checks]
        .                       fn position<P>(&mut self, mut predicate: P) -> Option<usize> where
        .                           Self: Sized,
        .                           P: FnMut(Self::Item) -> bool,
        .                       {
        .                           let n = len!(self);
        .                           let mut i = 0;
        .                           while let Some(x) = self.next() {
   35,942 ( 0.01%)                      if predicate(x) {
        .                                   // SAFETY: we are guaranteed to be in bounds by the loop invariant:
        .                                   // when `i >= n`, `self.next()` returns `None` and the loop breaks.
        .                                   unsafe { assume(i < n) };
        .                                   return Some(i);
        .                               }
        .                               i += 1;
        .                           }
        .                           None
-- line 303 ----------------------------------------
-- line 308 ----------------------------------------
        .                       // faster to compile. Also, the `assume` avoids a bounds check.
        .                       #[inline]
        .                       fn rposition<P>(&mut self, mut predicate: P) -> Option<usize> where
        .                           P: FnMut(Self::Item) -> bool,
        .                           Self: Sized + ExactSizeIterator + DoubleEndedIterator
        .                       {
        .                           let n = len!(self);
        .                           let mut i = n;
    1,545 ( 0.00%)                  while let Some(x) = self.next_back() {
   17,940 ( 0.01%)                      i -= 1;
   15,824 ( 0.01%)                      if predicate(x) {
        .                                   // SAFETY: `i` must be lower than `n` since it starts at `n`
        .                                   // and is only decreasing.
        .                                   unsafe { assume(i < n) };
        .                                   return Some(i);
        .                               }
        .                           }
        .                           None
        .                       }
-- line 326 ----------------------------------------
-- line 332 ----------------------------------------
        .                           // the returned references is guaranteed to refer to an element
        .                           // of the slice and thus guaranteed to be valid.
        .                           //
        .                           // Also note that the caller also guarantees that we're never
        .                           // called with the same index again, and that no other methods
        .                           // that will access this subslice are called, so it is valid
        .                           // for the returned reference to be mutable in the case of
        .                           // `IterMut`
    4,143 ( 0.00%)                  unsafe { & $( $mut_ )? * self.ptr.as_ptr().add(idx) }
        .                       }
        .           
        .                       $($extra)*
        .                   }
        .           
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   impl<'a, T> DoubleEndedIterator for $name<'a, T> {
        .                       #[inline]
-- line 348 ----------------------------------------
-- line 351 ----------------------------------------
        .           
        .                           // SAFETY: `assume` calls are safe since a slice's start pointer must be non-null,
        .                           // and slices over non-ZSTs must also have a non-null end pointer.
        .                           // The call to `next_back_unchecked!` is safe since we check if the iterator is
        .                           // empty first.
        .                           unsafe {
        .                               assume(!self.ptr.as_ptr().is_null());
        .                               if mem::size_of::<T>() != 0 {
        5 ( 0.00%)                          assume(!self.end.is_null());
        .                               }
  105,884 ( 0.04%)                      if is_empty!(self) {
        .                                   None
        .                               } else {
        .                                   Some(next_back_unchecked!(self))
        .                               }
        .                           }
        .                       }
        .           
        .                       #[inline]
-- line 369 ----------------------------------------

  805,960 ( 0.31%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs
--------------------------------------------------------------------------------
Ir               

-- line 176 ----------------------------------------
      .               }
      .               fn sess(self) -> Option<&'tcx Session> {
      .                   None
      .               }
      .               fn tcx(self) -> Option<TyCtxt<'tcx>> {
      .                   None
      .               }
      .           
  1,698 ( 0.00%)      fn decoder(self, pos: usize) -> DecodeContext<'a, 'tcx> {
    566 ( 0.00%)          let tcx = self.tcx();
138,733 ( 0.05%)          DecodeContext {
 13,884 ( 0.01%)              opaque: opaque::Decoder::new(self.blob(), pos),
    566 ( 0.00%)              cdata: self.cdata(),
      .                       blob: self.blob(),
  4,528 ( 0.00%)              sess: self.sess().or(tcx.map(|tcx| tcx.sess)),
      .                       tcx,
      .                       last_source_file_index: 0,
      .                       lazy_state: LazyState::NoNode,
      .                       alloc_decoding_session: self
      .                           .cdata()
 12,144 ( 0.00%)                  .map(|cdata| cdata.cdata.alloc_decoding_state.new_decoding_session()),
      .                   }
  1,698 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Metadata<'a, 'tcx> for &'a MetadataBlob {
      .               #[inline]
      .               fn blob(self) -> &'a MetadataBlob {
      .                   self
      .               }
      .           }
-- line 206 ----------------------------------------
-- line 255 ----------------------------------------
      .               }
      .               #[inline]
      .               fn tcx(self) -> Option<TyCtxt<'tcx>> {
      .                   Some(self.1)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, T: Decodable<DecodeContext<'a, 'tcx>>> Lazy<T> {
 19,306 ( 0.01%)      fn decode<M: Metadata<'a, 'tcx>>(self, metadata: M) -> T {
  9,077 ( 0.00%)          let mut dcx = metadata.decoder(self.position.get());
 38,948 ( 0.02%)          dcx.lazy_state = LazyState::NodeStart(self.position);
 13,355 ( 0.01%)          T::decode(&mut dcx)
 24,601 ( 0.01%)      }
      .           }
      .           
      .           impl<'a: 'x, 'tcx: 'x, 'x, T: Decodable<DecodeContext<'a, 'tcx>>> Lazy<[T]> {
      .               fn decode<M: Metadata<'a, 'tcx>>(
      .                   self,
      .                   metadata: M,
      .               ) -> impl ExactSizeIterator<Item = T> + Captures<'a> + Captures<'tcx> + 'x {
     21 ( 0.00%)          let mut dcx = metadata.decoder(self.position.get());
      6 ( 0.00%)          dcx.lazy_state = LazyState::NodeStart(self.position);
  6,434 ( 0.00%)          (0..self.meta).map(move |_| T::decode(&mut dcx))
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> DecodeContext<'a, 'tcx> {
      .               #[inline]
      .               fn tcx(&self) -> TyCtxt<'tcx> {
      .                   debug_assert!(self.tcx.is_some(), "missing TyCtxt in DecodeContext");
      .                   self.tcx.unwrap()
-- line 285 ----------------------------------------
-- line 292 ----------------------------------------
      .           
      .               #[inline]
      .               pub fn cdata(&self) -> CrateMetadataRef<'a> {
      .                   debug_assert!(self.cdata.is_some(), "missing CrateMetadata in DecodeContext");
      .                   self.cdata.unwrap()
      .               }
      .           
      .               fn map_encoded_cnum_to_current(&self, cnum: CrateNum) -> CrateNum {
 25,847 ( 0.01%)          if cnum == LOCAL_CRATE { self.cdata().cnum } else { self.cdata().cnum_map[cnum] }
      .               }
      .           
 10,654 ( 0.00%)      fn read_lazy_with_meta<T: ?Sized + LazyMeta>(&mut self, meta: T::Meta) -> Lazy<T> {
      .                   let distance = self.read_usize();
 10,156 ( 0.00%)          let position = match self.lazy_state {
      .                       LazyState::NoNode => bug!("read_lazy_with_meta: outside of a metadata node"),
  2,297 ( 0.00%)              LazyState::NodeStart(start) => {
      .                           let start = start.get();
  4,594 ( 0.00%)                  assert!(distance <= start);
      .                           start - distance
      .                       }
  1,959 ( 0.00%)              LazyState::Previous(last_pos) => last_pos.get() + distance,
      .                   };
  5,900 ( 0.00%)          self.lazy_state = LazyState::Previous(NonZeroUsize::new(position).unwrap());
      .                   Lazy::from_position_and_meta(NonZeroUsize::new(position).unwrap(), meta)
 10,654 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn read_raw_bytes(&mut self, len: usize) -> &'a [u8] {
      .                   self.opaque.read_raw_bytes(len)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> TyDecoder<'tcx> for DecodeContext<'a, 'tcx> {
-- line 324 ----------------------------------------
-- line 326 ----------------------------------------
      .           
      .               #[inline]
      .               fn tcx(&self) -> TyCtxt<'tcx> {
      .                   self.tcx.expect("missing TyCtxt in DecodeContext")
      .               }
      .           
      .               #[inline]
      .               fn peek_byte(&self) -> u8 {
 21,605 ( 0.01%)          self.opaque.data[self.opaque.position()]
      .               }
      .           
      .               #[inline]
      .               fn position(&self) -> usize {
      .                   self.opaque.position()
      .               }
      .           
 22,687 ( 0.01%)      fn cached_ty_for_shorthand<F>(&mut self, shorthand: usize, or_insert_with: F) -> Ty<'tcx>
      .               where
      .                   F: FnOnce(&mut Self) -> Ty<'tcx>,
      .               {
  3,241 ( 0.00%)          let tcx = self.tcx();
      .           
  3,241 ( 0.00%)          let key = ty::CReaderCacheKey { cnum: Some(self.cdata().cnum), pos: shorthand };
      .           
 10,136 ( 0.00%)          if let Some(&ty) = tcx.ty_rcache.borrow().get(&key) {
      .                       return ty;
      .                   }
      .           
    707 ( 0.00%)          let ty = or_insert_with(self);
      .                   tcx.ty_rcache.borrow_mut().insert(key, ty);
      .                   ty
 29,169 ( 0.01%)      }
      .           
      .               fn with_position<F, R>(&mut self, pos: usize, f: F) -> R
      .               where
      .                   F: FnOnce(&mut Self) -> R,
      .               {
      .                   let new_opaque = opaque::Decoder::new(self.opaque.data, pos);
      .                   let old_opaque = mem::replace(&mut self.opaque, new_opaque);
      .                   let old_state = mem::replace(&mut self.lazy_state, LazyState::NoNode);
      .                   let r = f(self);
  3,645 ( 0.00%)          self.opaque = old_opaque;
    729 ( 0.00%)          self.lazy_state = old_state;
      .                   r
      .               }
      .           
      .               fn decode_alloc_id(&mut self) -> rustc_middle::mir::interpret::AllocId {
      .                   if let Some(alloc_decoding_session) = self.alloc_decoding_session {
      .                       alloc_decoding_session.decode_alloc_id(self)
      .                   } else {
      .                       bug!("Attempting to decode interpret::AllocId without CrateMetadata")
      .                   }
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for CrateNum {
      .               fn decode(d: &mut DecodeContext<'a, 'tcx>) -> CrateNum {
 12,658 ( 0.00%)          let cnum = CrateNum::from_u32(d.read_u32());
      .                   d.map_encoded_cnum_to_current(cnum)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for DefIndex {
     71 ( 0.00%)      fn decode(d: &mut DecodeContext<'a, 'tcx>) -> DefIndex {
 27,861 ( 0.01%)          DefIndex::from_u32(d.read_u32())
    142 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for ExpnIndex {
      .               fn decode(d: &mut DecodeContext<'a, 'tcx>) -> ExpnIndex {
      .                   ExpnIndex::from_u32(d.read_u32())
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for SyntaxContext {
 23,044 ( 0.01%)      fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> SyntaxContext {
  5,761 ( 0.00%)          let cdata = decoder.cdata();
  5,761 ( 0.00%)          let sess = decoder.sess.unwrap();
 11,522 ( 0.00%)          let cname = cdata.root.name;
      .                   rustc_span::hygiene::decode_syntax_context(decoder, &cdata.hygiene_context, |_, id| {
      .                       debug!("SpecializedDecoder<SyntaxContext>: decoding {}", id);
     36 ( 0.00%)              cdata
      .                           .root
      .                           .syntax_contexts
      .                           .get(cdata, id)
      .                           .unwrap_or_else(|| panic!("Missing SyntaxContext {:?} for crate {:?}", id, cname))
      .                           .decode((cdata, sess))
      .                   })
 28,805 ( 0.01%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for ExpnId {
  1,505 ( 0.00%)      fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> ExpnId {
    215 ( 0.00%)          let local_cdata = decoder.cdata();
    215 ( 0.00%)          let sess = decoder.sess.unwrap();
      .           
      .                   let cnum = CrateNum::decode(decoder);
      .                   let index = u32::decode(decoder);
      .           
      .                   let expn_id = rustc_span::hygiene::decode_expn_id(cnum, index, |expn_id| {
      .                       let ExpnId { krate: cnum, local_id: index } = expn_id;
      .                       // Lookup local `ExpnData`s in our own crate data. Foreign `ExpnData`s
      .                       // are stored in the owning crate, to avoid duplication.
      .                       debug_assert_ne!(cnum, LOCAL_CRATE);
     16 ( 0.00%)              let crate_data = if cnum == local_cdata.cnum {
      .                           local_cdata
      .                       } else {
      .                           local_cdata.cstore.get_crate_data(cnum)
      .                       };
     80 ( 0.00%)              let expn_data = crate_data
      .                           .root
      .                           .expn_data
      .                           .get(crate_data, index)
      .                           .unwrap()
      .                           .decode((crate_data, sess));
     80 ( 0.00%)              let expn_hash = crate_data
      .                           .root
      .                           .expn_hashes
      .                           .get(crate_data, index)
      .                           .unwrap()
      .                           .decode((crate_data, sess));
    160 ( 0.00%)              (expn_data, expn_hash)
      .                   });
      .                   expn_id
  1,720 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for Span {
 45,872 ( 0.02%)      fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Span {
  5,734 ( 0.00%)          let ctxt = SyntaxContext::decode(decoder);
      .                   let tag = u8::decode(decoder);
      .           
 11,468 ( 0.00%)          if tag == TAG_PARTIAL_SPAN {
      .                       return DUMMY_SP.with_ctxt(ctxt);
      .                   }
      .           
      .                   debug_assert!(tag == TAG_VALID_SPAN_LOCAL || tag == TAG_VALID_SPAN_FOREIGN);
      .           
      .                   let lo = BytePos::decode(decoder);
      .                   let len = BytePos::decode(decoder);
      .                   let hi = lo + len;
      .           
 17,172 ( 0.01%)          let Some(sess) = decoder.sess else {
      .                       bug!("Cannot decode Span without Session.")
      .                   };
      .           
      .                   // There are two possibilities here:
      .                   // 1. This is a 'local span', which is located inside a `SourceFile`
      .                   // that came from this crate. In this case, we use the source map data
      .                   // encoded in this crate. This branch should be taken nearly all of the time.
      .                   // 2. This is a 'foreign span', which is located inside a `SourceFile`
-- line 476 ----------------------------------------
-- line 492 ----------------------------------------
      .                   // a transitive dependency.
      .                   //
      .                   // When we encode a foreign span, we adjust its 'lo' and 'high' values
      .                   // to be based on the *foreign* crate (e.g. crate C), not the crate
      .                   // we are writing metadata for (e.g. crate B). This allows us to
      .                   // treat the 'local' and 'foreign' cases almost identically during deserialization:
      .                   // we can call `imported_source_files` for the proper crate, and binary search
      .                   // through the returned slice using our span.
 13,034 ( 0.01%)          let imported_source_files = if tag == TAG_VALID_SPAN_LOCAL {
      .                       decoder.cdata().imported_source_files(sess)
      .                   } else {
      .                       // When we encode a proc-macro crate, all `Span`s should be encoded
      .                       // with `TAG_VALID_SPAN_LOCAL`
      .                       if decoder.cdata().root.is_proc_macro_crate() {
      .                           // Decode `CrateNum` as u32 - using `CrateNum::decode` will ICE
      .                           // since we don't have `cnum_map` populated.
      .                           let cnum = u32::decode(decoder);
-- line 508 ----------------------------------------
-- line 527 ----------------------------------------
      .           
      .                       let foreign_data = decoder.cdata().cstore.get_crate_data(cnum);
      .                       foreign_data.imported_source_files(sess)
      .                   };
      .           
      .                   let source_file = {
      .                       // Optimize for the case that most spans within a translated item
      .                       // originate from the same source_file.
 17,172 ( 0.01%)              let last_source_file = &imported_source_files[decoder.last_source_file_index];
      .           
 22,814 ( 0.01%)              if lo >= last_source_file.original_start_pos && lo <= last_source_file.original_end_pos
      .                       {
      .                           last_source_file
      .                       } else {
      .                           let index = imported_source_files
      .                               .binary_search_by_key(&lo, |source_file| source_file.original_start_pos)
  3,172 ( 0.00%)                      .unwrap_or_else(|index| index - 1);
      .           
      .                           // Don't try to cache the index for foreign spans,
      .                           // as this would require a map from CrateNums to indices
  1,586 ( 0.00%)                  if tag == TAG_VALID_SPAN_LOCAL {
  1,586 ( 0.00%)                      decoder.last_source_file_index = index;
      .                           }
  3,172 ( 0.00%)                  &imported_source_files[index]
      .                       }
      .                   };
      .           
      .                   // Make sure our binary search above is correct.
      .                   debug_assert!(
      .                       lo >= source_file.original_start_pos && lo <= source_file.original_end_pos,
      .                       "Bad binary search: lo={:?} source_file.original_start_pos={:?} source_file.original_end_pos={:?}",
      .                       lo,
-- line 558 ----------------------------------------
-- line 565 ----------------------------------------
      .                       hi >= source_file.original_start_pos && hi <= source_file.original_end_pos,
      .                       "Bad binary search: hi={:?} source_file.original_start_pos={:?} source_file.original_end_pos={:?}",
      .                       hi,
      .                       source_file.original_start_pos,
      .                       source_file.original_end_pos
      .                   );
      .           
      .                   let lo =
 22,896 ( 0.01%)              (lo + source_file.translated_source_file.start_pos) - source_file.original_start_pos;
      .                   let hi =
      .                       (hi + source_file.translated_source_file.start_pos) - source_file.original_start_pos;
      .           
      .                   // Do not try to decode parent for foreign spans.
      .                   Span::new(lo, hi, ctxt, None)
 51,606 ( 0.02%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for &'tcx [thir::abstract_const::Node<'tcx>] {
      .               fn decode(d: &mut DecodeContext<'a, 'tcx>) -> Self {
      .                   ty::codec::RefDecodable::decode(d)
      .               }
      .           }
      .           
-- line 587 ----------------------------------------
-- line 590 ----------------------------------------
      .                   ty::codec::RefDecodable::decode(d)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, T: Decodable<DecodeContext<'a, 'tcx>>> Decodable<DecodeContext<'a, 'tcx>>
      .               for Lazy<T>
      .           {
      .               fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Self {
  4,164 ( 0.00%)          decoder.read_lazy_with_meta(())
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, T: Decodable<DecodeContext<'a, 'tcx>>> Decodable<DecodeContext<'a, 'tcx>>
      .               for Lazy<[T]>
      .           {
      .               fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Self {
      .                   let len = decoder.read_usize();
  3,719 ( 0.00%)          if len == 0 { Lazy::empty() } else { decoder.read_lazy_with_meta(len) }
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, I: Idx, T: Decodable<DecodeContext<'a, 'tcx>>> Decodable<DecodeContext<'a, 'tcx>>
      .               for Lazy<Table<I, T>>
      .           where
      .               Option<T>: FixedSizeEncoding,
      .           {
      .               fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Self {
      .                   let len = decoder.read_usize();
  2,028 ( 0.00%)          decoder.read_lazy_with_meta(len)
      .               }
      .           }
      .           
      .           implement_ty_decoder!(DecodeContext<'a, 'tcx>);
      .           
      .           impl<'tcx> MetadataBlob {
      .               crate fn new(metadata_ref: MetadataRef) -> MetadataBlob {
      .                   MetadataBlob(Lrc::new(metadata_ref))
-- line 626 ----------------------------------------
-- line 630 ----------------------------------------
      .                   self.blob().starts_with(METADATA_HEADER)
      .               }
      .           
      .               crate fn get_rustc_version(&self) -> String {
      .                   Lazy::<String>::from_position(NonZeroUsize::new(METADATA_HEADER.len() + 4).unwrap())
      .                       .decode(self)
      .               }
      .           
     36 ( 0.00%)      crate fn get_root(&self) -> CrateRoot<'tcx> {
     12 ( 0.00%)          let slice = &self.blob()[..];
      .                   let offset = METADATA_HEADER.len();
     60 ( 0.00%)          let pos = (((slice[offset + 0] as u32) << 24)
     24 ( 0.00%)              | ((slice[offset + 1] as u32) << 16)
     48 ( 0.00%)              | ((slice[offset + 2] as u32) << 8)
     36 ( 0.00%)              | ((slice[offset + 3] as u32) << 0)) as usize;
      .                   Lazy::<CrateRoot<'tcx>>::from_position(NonZeroUsize::new(pos).unwrap()).decode(self)
     60 ( 0.00%)      }
      .           
      .               crate fn list_crate_metadata(&self, out: &mut dyn io::Write) -> io::Result<()> {
      .                   let root = self.get_root();
      .                   writeln!(out, "Crate info:")?;
      .                   writeln!(out, "name {}{}", root.name, root.extra_filename)?;
      .                   writeln!(out, "hash {} stable_crate_id {:?}", root.hash, root.stable_crate_id)?;
      .                   writeln!(out, "proc_macro {:?}", root.proc_macro_data.is_some())?;
      .                   writeln!(out, "=External Dependencies=")?;
-- line 654 ----------------------------------------
-- line 666 ----------------------------------------
      .                   }
      .                   write!(out, "\n")?;
      .                   Ok(())
      .               }
      .           }
      .           
      .           impl CrateRoot<'_> {
      .               crate fn is_proc_macro_crate(&self) -> bool {
      8 ( 0.00%)          self.proc_macro_data.is_some()
      .               }
      .           
      .               crate fn name(&self) -> Symbol {
      6 ( 0.00%)          self.name
      .               }
      .           
      .               crate fn hash(&self) -> Svh {
      4 ( 0.00%)          self.hash
      .               }
      .           
      .               crate fn stable_crate_id(&self) -> StableCrateId {
      8 ( 0.00%)          self.stable_crate_id
      .               }
      .           
      .               crate fn triple(&self) -> &TargetTriple {
      .                   &self.triple
      .               }
      .           
      .               crate fn decode_crate_deps<'a>(
      .                   &self,
      .                   metadata: &'a MetadataBlob,
      .               ) -> impl ExactSizeIterator<Item = CrateDep> + Captures<'a> {
      8 ( 0.00%)          self.crate_deps.decode(metadata)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> CrateMetadataRef<'a> {
      .               fn raw_proc_macro(self, id: DefIndex) -> &'a ProcMacro {
      .                   // DefIndex's in root.proc_macro_data have a one-to-one correspondence
      .                   // with items in 'raw_proc_macros'.
      .                   let pos = self
-- line 705 ----------------------------------------
-- line 709 ----------------------------------------
      .                       .unwrap()
      .                       .macros
      .                       .decode(self)
      .                       .position(|i| i == id)
      .                       .unwrap();
      .                   &self.raw_proc_macros.unwrap()[pos]
      .               }
      .           
 16,412 ( 0.01%)      fn opt_item_ident(self, item_index: DefIndex, sess: &Session) -> Option<Ident> {
 12,016 ( 0.00%)          let name = self.def_key(item_index).disambiguated_data.data.get_opt_name()?;
  5,033 ( 0.00%)          let span = match self.root.tables.ident_span.get(self, item_index) {
      .                       Some(lazy_span) => lazy_span.decode((self, sess)),
      .                       None => {
      .                           // FIXME: this weird case of a name with no span is specific to `extern crate`
      .                           // items, which are supposed to be treated like `use` items and only be encoded
      .                           // to metadata as `Export`s, return `None` because that's what all the callers
      .                           // expect in this case.
     36 ( 0.00%)                  assert_eq!(self.def_kind(item_index), DefKind::ExternCrate);
      .                           return None;
      .                       }
      .                   };
      .                   Some(Ident::new(name, span))
 20,920 ( 0.01%)      }
      .           
     68 ( 0.00%)      fn item_ident(self, item_index: DefIndex, sess: &Session) -> Ident {
    453 ( 0.00%)          self.opt_item_ident(item_index, sess).expect("no encoded ident for item")
    136 ( 0.00%)      }
      .           
      .               fn maybe_kind(self, item_id: DefIndex) -> Option<EntryKind> {
  4,396 ( 0.00%)          self.root.tables.kind.get(self, item_id).map(|k| k.decode(self))
      .               }
      .           
 17,584 ( 0.01%)      fn kind(self, item_id: DefIndex) -> EntryKind {
      .                   self.maybe_kind(item_id).unwrap_or_else(|| {
      .                       bug!(
      .                           "CrateMetadata::kind({:?}): id not found, in crate {:?} with number {}",
      .                           item_id,
      .                           self.root.name,
      .                           self.cnum,
      .                       )
      .                   })
 13,188 ( 0.01%)      }
      .           
 15,071 ( 0.01%)      fn def_kind(self, item_id: DefIndex) -> DefKind {
  8,987 ( 0.00%)          self.root.tables.def_kind.get(self, item_id).map(|k| k.decode(self)).unwrap_or_else(|| {
      .                       bug!(
      .                           "CrateMetadata::def_kind({:?}): id not found, in crate {:?} with number {}",
      .                           item_id,
      .                           self.root.name,
      .                           self.cnum,
      .                       )
      .                   })
  8,612 ( 0.00%)      }
      .           
    612 ( 0.00%)      fn get_span(self, index: DefIndex, sess: &Session) -> Span {
  2,193 ( 0.00%)          self.root
      .                       .tables
      .                       .span
      .                       .get(self, index)
      .                       .unwrap_or_else(|| panic!("Missing span for {:?}", index))
      .                       .decode((self, sess))
    340 ( 0.00%)      }
      .           
      .               fn load_proc_macro(self, id: DefIndex, sess: &Session) -> SyntaxExtension {
      .                   let (name, kind, helper_attrs) = match *self.raw_proc_macro(id) {
      .                       ProcMacro::CustomDerive { trait_name, attributes, client } => {
      .                           let helper_attrs =
      .                               attributes.iter().cloned().map(Symbol::intern).collect::<Vec<_>>();
      .                           (
      .                               trait_name,
-- line 778 ----------------------------------------
-- line 795 ----------------------------------------
      .                       self.get_span(id, sess),
      .                       helper_attrs,
      .                       self.root.edition,
      .                       Symbol::intern(name),
      .                       &attrs,
      .                   )
      .               }
      .           
    182 ( 0.00%)      fn get_trait_def(self, item_id: DefIndex, sess: &Session) -> ty::TraitDef {
     56 ( 0.00%)          match self.kind(item_id) {
     14 ( 0.00%)              EntryKind::Trait(data) => {
     84 ( 0.00%)                  let data = data.decode((self, sess));
    224 ( 0.00%)                  ty::TraitDef::new(
      .                               self.local_def_id(item_id),
     28 ( 0.00%)                      data.unsafety,
     28 ( 0.00%)                      data.paren_sugar,
     28 ( 0.00%)                      data.has_auto_impl,
     28 ( 0.00%)                      data.is_marker,
     14 ( 0.00%)                      data.skip_array_during_method_dispatch,
     14 ( 0.00%)                      data.specialization_kind,
     56 ( 0.00%)                      self.def_path_hash(item_id),
     14 ( 0.00%)                      data.must_implement_one_of,
      .                           )
      .                       }
      .                       EntryKind::TraitAlias => ty::TraitDef::new(
      .                           self.local_def_id(item_id),
      .                           hir::Unsafety::Normal,
      .                           false,
      .                           false,
      .                           false,
      .                           false,
      .                           ty::trait_def::TraitSpecializationKind::None,
      .                           self.def_path_hash(item_id),
      .                           None,
      .                       ),
      .                       _ => bug!("def-index does not refer to trait or trait alias"),
      .                   }
    126 ( 0.00%)      }
      .           
     63 ( 0.00%)      fn get_variant(
      .                   self,
      .                   kind: &EntryKind,
      .                   index: DefIndex,
      .                   parent_did: DefId,
      .                   sess: &Session,
      .               ) -> ty::VariantDef {
     28 ( 0.00%)          let data = match kind {
      .                       EntryKind::Variant(data) | EntryKind::Struct(data, _) | EntryKind::Union(data, _) => {
     35 ( 0.00%)                  data.decode(self)
      .                       }
      .                       _ => bug!(),
      .                   };
      .           
     20 ( 0.00%)          let adt_kind = match kind {
      .                       EntryKind::Variant(_) => ty::AdtKind::Enum,
      .                       EntryKind::Struct(..) => ty::AdtKind::Struct,
      .                       EntryKind::Union(..) => ty::AdtKind::Union,
      .                       _ => bug!(),
      .                   };
      .           
      .                   let variant_did =
      .                       if adt_kind == ty::AdtKind::Enum { Some(self.local_def_id(index)) } else { None };
     14 ( 0.00%)          let ctor_did = data.ctor.map(|index| self.local_def_id(index));
      .           
    154 ( 0.00%)          ty::VariantDef::new(
      .                       self.item_ident(index, sess).name,
      .                       variant_did,
      .                       ctor_did,
     28 ( 0.00%)              data.discr,
     42 ( 0.00%)              self.root
      .                           .tables
      .                           .children
      .                           .get(self, index)
      .                           .unwrap_or_else(Lazy::empty)
      .                           .decode(self)
      .                           .map(|index| ty::FieldDef {
      9 ( 0.00%)                      did: self.local_def_id(index),
     18 ( 0.00%)                      name: self.item_ident(index, sess).name,
     18 ( 0.00%)                      vis: self.get_visibility(index),
      .                           })
      .                           .collect(),
      .                       data.ctor_kind,
      .                       adt_kind,
      .                       parent_did,
      .                       false,
      7 ( 0.00%)              data.is_non_exhaustive,
      .                   )
     63 ( 0.00%)      }
      .           
     75 ( 0.00%)      fn get_adt_def(self, item_id: DefIndex, tcx: TyCtxt<'tcx>) -> &'tcx ty::AdtDef {
     20 ( 0.00%)          let kind = self.kind(item_id);
     10 ( 0.00%)          let did = self.local_def_id(item_id);
      .           
     21 ( 0.00%)          let (adt_kind, repr) = match kind {
      .                       EntryKind::Enum(repr) => (ty::AdtKind::Enum, repr),
      .                       EntryKind::Struct(_, repr) => (ty::AdtKind::Struct, repr),
      .                       EntryKind::Union(_, repr) => (ty::AdtKind::Union, repr),
      .                       _ => bug!("get_adt_def called on a non-ADT {:?}", did),
      .                   };
      .           
      .                   let variants = if let ty::AdtKind::Enum = adt_kind {
     10 ( 0.00%)              self.root
      .                           .tables
      .                           .children
      .                           .get(self, item_id)
      .                           .unwrap_or_else(Lazy::empty)
      .                           .decode(self)
     68 ( 0.00%)                  .map(|index| self.get_variant(&self.kind(index), index, did, tcx.sess))
      .                           .collect()
      .                   } else {
     24 ( 0.00%)              std::iter::once(self.get_variant(&kind, item_id, did, tcx.sess)).collect()
      .                   };
      .           
     80 ( 0.00%)          tcx.alloc_adt_def(did, adt_kind, variants, repr)
     35 ( 0.00%)      }
      .           
      .               fn get_explicit_predicates(
      .                   self,
      .                   item_id: DefIndex,
      .                   tcx: TyCtxt<'tcx>,
      .               ) -> ty::GenericPredicates<'tcx> {
    335 ( 0.00%)          self.root.tables.explicit_predicates.get(self, item_id).unwrap().decode((self, tcx))
      .               }
      .           
      .               fn get_inferred_outlives(
      .                   self,
      .                   item_id: DefIndex,
      .                   tcx: TyCtxt<'tcx>,
      .               ) -> &'tcx [(ty::Predicate<'tcx>, Span)] {
    335 ( 0.00%)          self.root
      .                       .tables
      .                       .inferred_outlives
      .                       .get(self, item_id)
     12 ( 0.00%)              .map(|predicates| tcx.arena.alloc_from_iter(predicates.decode((self, tcx))))
      .                       .unwrap_or_default()
      .               }
      .           
      .               fn get_super_predicates(
      .                   self,
      .                   item_id: DefIndex,
      .                   tcx: TyCtxt<'tcx>,
      .               ) -> ty::GenericPredicates<'tcx> {
     50 ( 0.00%)          self.root.tables.super_predicates.get(self, item_id).unwrap().decode((self, tcx))
      .               }
      .           
      .               fn get_explicit_item_bounds(
      .                   self,
      .                   item_id: DefIndex,
      .                   tcx: TyCtxt<'tcx>,
      .               ) -> &'tcx [(ty::Predicate<'tcx>, Span)] {
      .                   self.root
-- line 945 ----------------------------------------
-- line 946 ----------------------------------------
      .                       .tables
      .                       .explicit_item_bounds
      .                       .get(self, item_id)
      .                       .map(|bounds| tcx.arena.alloc_from_iter(bounds.decode((self, tcx))))
      .                       .unwrap_or_default()
      .               }
      .           
      .               fn get_generics(self, item_id: DefIndex, sess: &Session) -> ty::Generics {
  1,487 ( 0.00%)          self.root.tables.generics.get(self, item_id).unwrap().decode((self, sess))
      .               }
      .           
      .               fn get_type(self, id: DefIndex, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
  2,355 ( 0.00%)          self.root
      .                       .tables
      .                       .ty
      .                       .get(self, id)
      .                       .unwrap_or_else(|| panic!("Not a type: {:?}", id))
      .                       .decode((self, tcx))
      .               }
      .           
      .               fn get_stability(self, id: DefIndex) -> Option<attr::Stability> {
    175 ( 0.00%)          self.root.tables.stability.get(self, id).map(|stab| stab.decode(self))
      .               }
      .           
      .               fn get_const_stability(self, id: DefIndex) -> Option<attr::ConstStability> {
      5 ( 0.00%)          self.root.tables.const_stability.get(self, id).map(|stab| stab.decode(self))
      .               }
      .           
      .               fn get_deprecation(self, id: DefIndex) -> Option<attr::Deprecation> {
    145 ( 0.00%)          self.root.tables.deprecation.get(self, id).map(|depr| depr.decode(self))
      .               }
      .           
     18 ( 0.00%)      fn get_visibility(self, id: DefIndex) -> ty::Visibility {
  1,611 ( 0.00%)          self.root.tables.visibility.get(self, id).unwrap().decode(self)
     12 ( 0.00%)      }
      .           
      .               fn get_impl_data(self, id: DefIndex) -> ImplData {
 10,326 ( 0.00%)          match self.kind(id) {
  8,605 ( 0.00%)              EntryKind::Impl(data) => data.decode(self),
      .                       _ => bug!(),
      .                   }
      .               }
      .           
      .               fn get_parent_impl(self, id: DefIndex) -> Option<DefId> {
  5,064 ( 0.00%)          self.get_impl_data(id).parent_impl
      .               }
      .           
      .               fn get_impl_polarity(self, id: DefIndex) -> ty::ImplPolarity {
     30 ( 0.00%)          self.get_impl_data(id).polarity
      .               }
      .           
      .               fn get_impl_defaultness(self, id: DefIndex) -> hir::Defaultness {
      3 ( 0.00%)          self.get_impl_data(id).defaultness
      .               }
      .           
      .               fn get_impl_constness(self, id: DefIndex) -> hir::Constness {
      .                   self.get_impl_data(id).constness
      .               }
      .           
      .               fn get_trait_item_def_id(self, id: DefIndex) -> Option<DefId> {
    255 ( 0.00%)          self.root.tables.trait_item_def_id.get(self, id).map(|d| d.decode(self))
      .               }
      .           
      .               fn get_coerce_unsized_info(self, id: DefIndex) -> Option<ty::adjustment::CoerceUnsizedInfo> {
      .                   self.get_impl_data(id).coerce_unsized_info
      .               }
      .           
      .               fn get_impl_trait(self, id: DefIndex, tcx: TyCtxt<'tcx>) -> Option<ty::TraitRef<'tcx>> {
 20,376 ( 0.01%)          self.root.tables.impl_trait_ref.get(self, id).map(|tr| tr.decode((self, tcx)))
      .               }
      .           
      .               fn get_expn_that_defined(self, id: DefIndex, sess: &Session) -> ExpnId {
    950 ( 0.00%)          self.root.tables.expn_that_defined.get(self, id).unwrap().decode((self, sess))
      .               }
      .           
      .               fn get_const_param_default(
      .                   self,
      .                   tcx: TyCtxt<'tcx>,
      .                   id: DefIndex,
      .               ) -> rustc_middle::ty::Const<'tcx> {
      .                   self.root.tables.const_defaults.get(self, id).unwrap().decode((self, tcx))
-- line 1026 ----------------------------------------
-- line 1028 ----------------------------------------
      .           
      .               /// Iterates over all the stability attributes in the given crate.
      .               fn get_lib_features(self, tcx: TyCtxt<'tcx>) -> &'tcx [(Symbol, Option<Symbol>)] {
      .                   tcx.arena.alloc_from_iter(self.root.lib_features.decode(self))
      .               }
      .           
      .               /// Iterates over the language items in the given crate.
      .               fn get_lang_items(self, tcx: TyCtxt<'tcx>) -> &'tcx [(DefId, usize)] {
     12 ( 0.00%)          tcx.arena.alloc_from_iter(
      8 ( 0.00%)              self.root
      .                           .lang_items
      .                           .decode(self)
    508 ( 0.00%)                  .map(|(def_index, index)| (self.local_def_id(def_index), index)),
      .                   )
      .               }
      .           
      .               /// Iterates over the diagnostic items in the given crate.
      .               fn get_diagnostic_items(self) -> DiagnosticItems {
      .                   let mut id_to_name = FxHashMap::default();
      8 ( 0.00%)          let name_to_id = self
      .                       .root
      .                       .diagnostic_items
      .                       .decode(self)
      .                       .map(|(name, def_index)| {
     91 ( 0.00%)                  let id = self.local_def_id(def_index);
     91 ( 0.00%)                  id_to_name.insert(id, name);
      .                           (name, id)
      .                       })
      .                       .collect();
     36 ( 0.00%)          DiagnosticItems { id_to_name, name_to_id }
      .               }
      .           
      .               /// Iterates over all named children of the given module,
      .               /// including both proper items and reexports.
      .               /// Module here is understood in name resolution sense - it can be a `mod` item,
      .               /// or a crate root, or an enum, or a trait.
      .               fn for_each_module_child(
      .                   self,
      .                   id: DefIndex,
      .                   mut callback: impl FnMut(ModChild),
      .                   sess: &Session,
      .               ) {
    164 ( 0.00%)          if let Some(data) = &self.root.proc_macro_data {
      .                       // If we are loading as a proc macro, we want to return
      .                       // the view of this crate as a proc macro crate.
      .                       if id == CRATE_DEF_INDEX {
      .                           for def_index in data.macros.decode(self) {
      .                               let raw_macro = self.raw_proc_macro(def_index);
      .                               let res = Res::Def(
      .                                   DefKind::Macro(macro_kind(raw_macro)),
      .                                   self.local_def_id(def_index),
-- line 1078 ----------------------------------------
-- line 1085 ----------------------------------------
      .                                   span: ident.span,
      .                               });
      .                           }
      .                       }
      .                       return;
      .                   }
      .           
      .                   // Iterate over all children.
    328 ( 0.00%)          if let Some(children) = self.root.tables.children.get(self, id) {
    656 ( 0.00%)              for child_index in children.decode((self, sess)) {
  8,124 ( 0.00%)                  if let Some(ident) = self.opt_item_ident(child_index, sess) {
  1,707 ( 0.00%)                      let kind = self.def_kind(child_index);
  1,138 ( 0.00%)                      if matches!(kind, DefKind::Macro(..)) {
      .                                   // FIXME: Macros are currently encoded twice, once as items and once as
      .                                   // reexports. We ignore the items here and only use the reexports.
      .                                   continue;
      .                               }
      .                               let def_id = self.local_def_id(child_index);
      .                               let res = Res::Def(kind, def_id);
      .                               let vis = self.get_visibility(child_index);
      .                               let span = self.get_span(child_index, sess);
      .           
      .                               callback(ModChild { ident, res, vis, span });
      .           
      .                               // For non-re-export structs and variants add their constructors to children.
      .                               // Re-export lists automatically contain constructors when necessary.
  2,204 ( 0.00%)                      match kind {
      .                                   DefKind::Struct => {
     15 ( 0.00%)                              if let Some((ctor_def_id, ctor_kind)) =
      .                                           self.get_ctor_def_id_and_kind(child_index)
      .                                       {
      .                                           let ctor_res =
      .                                               Res::Def(DefKind::Ctor(CtorOf::Struct, ctor_kind), ctor_def_id);
      .                                           let vis = self.get_visibility(ctor_def_id.index);
      .                                           callback(ModChild { ident, res: ctor_res, vis, span });
      .                                       }
      .                                   }
-- line 1121 ----------------------------------------
-- line 1144 ----------------------------------------
      .                                       callback(ModChild { ident, res: ctor_res, vis, span });
      .                                   }
      .                                   _ => {}
      .                               }
      .                           }
      .                       }
      .                   }
      .           
    421 ( 0.00%)          match self.kind(id) {
     30 ( 0.00%)              EntryKind::Mod(exports) => {
    602 ( 0.00%)                  for exp in exports.decode((self, sess)) {
      .                               callback(exp);
      .                           }
      .                       }
      .                       EntryKind::Enum(..) | EntryKind::Trait(..) => {}
      .                       _ => bug!("`for_each_module_child` is called on a non-module: {:?}", self.def_kind(id)),
      .                   }
      .               }
      .           
-- line 1162 ----------------------------------------
-- line 1164 ----------------------------------------
      .                   self.root.tables.mir_for_ctfe.get(self, id).is_some()
      .               }
      .           
      .               fn is_item_mir_available(self, id: DefIndex) -> bool {
      .                   self.root.tables.mir.get(self, id).is_some()
      .               }
      .           
      .               fn module_expansion(self, id: DefIndex, sess: &Session) -> ExpnId {
  1,302 ( 0.00%)          match self.kind(id) {
      .                       EntryKind::Mod(_) | EntryKind::Enum(_) | EntryKind::Trait(_) => {
      .                           self.get_expn_that_defined(id, sess)
      .                       }
      .                       _ => panic!("Expected module, found {:?}", self.local_def_id(id)),
      .                   }
      .               }
      .           
      .               fn get_optimized_mir(self, tcx: TyCtxt<'tcx>, id: DefIndex) -> Body<'tcx> {
-- line 1180 ----------------------------------------
-- line 1242 ----------------------------------------
      .                           qualif,
      .                           _,
      .                       ) => qualif,
      .                       _ => bug!("mir_const_qualif: unexpected kind"),
      .                   }
      .               }
      .           
      .               fn get_fn_has_self_parameter(self, id: DefIndex) -> bool {
    550 ( 0.00%)          match self.kind(id) {
    440 ( 0.00%)              EntryKind::AssocFn(data) => data.decode(self).has_self,
      .                       _ => false,
      .                   }
      .               }
      .           
      .               fn get_associated_item_def_ids(self, tcx: TyCtxt<'tcx>, id: DefIndex) -> &'tcx [DefId] {
    105 ( 0.00%)          if let Some(children) = self.root.tables.children.get(self, id) {
     45 ( 0.00%)              tcx.arena.alloc_from_iter(
     15 ( 0.00%)                  children.decode((self, tcx.sess)).map(|child_index| self.local_def_id(child_index)),
      .                       )
      .                   } else {
      .                       &[]
      .                   }
      .               }
      .           
    552 ( 0.00%)      fn get_associated_item(self, id: DefIndex, sess: &Session) -> ty::AssocItem {
    322 ( 0.00%)          let def_key = self.def_key(id);
      .                   let parent = self.local_def_id(def_key.parent.unwrap());
      .                   let ident = self.item_ident(id, sess);
      .           
    324 ( 0.00%)          let (kind, container, has_self) = match self.kind(id) {
      .                       EntryKind::AssocConst(container, _, _) => (ty::AssocKind::Const, container, false),
     45 ( 0.00%)              EntryKind::AssocFn(data) => {
      .                           let data = data.decode(self);
    315 ( 0.00%)                  (ty::AssocKind::Fn, data.container, data.has_self)
      .                       }
      2 ( 0.00%)              EntryKind::AssocType(container) => (ty::AssocKind::Type, container, false),
      .                       _ => bug!("cannot get associated-item of `{:?}`", def_key),
      .                   };
      .           
    828 ( 0.00%)          ty::AssocItem {
      .                       name: ident.name,
      .                       kind,
      .                       vis: self.get_visibility(id),
      .                       defaultness: container.defaultness(),
      .                       def_id: self.local_def_id(id),
      .                       trait_item_def_id: self.get_trait_item_def_id(id),
      .                       container: container.with_def_id(parent),
      .                       fn_has_self_parameter: has_self,
      .                   }
    414 ( 0.00%)      }
      .           
      .               fn get_item_variances(self, id: DefIndex) -> impl Iterator<Item = ty::Variance> + 'a {
     60 ( 0.00%)          self.root.tables.variances.get(self, id).unwrap_or_else(Lazy::empty).decode(self)
      .               }
      .           
      .               fn get_ctor_def_id_and_kind(self, node_id: DefIndex) -> Option<(DefId, CtorKind)> {
    401 ( 0.00%)          match self.kind(node_id) {
      .                       EntryKind::Struct(data, _) | EntryKind::Variant(data) => {
    174 ( 0.00%)                  let vdata = data.decode(self);
    105 ( 0.00%)                  vdata.ctor.map(|index| (self.local_def_id(index), vdata.ctor_kind))
      .                       }
      .                       _ => None,
      .                   }
    190 ( 0.00%)      }
      .           
    816 ( 0.00%)      fn get_item_attrs(
      .                   self,
      .                   id: DefIndex,
      .                   sess: &'a Session,
      .               ) -> impl Iterator<Item = ast::Attribute> + 'a {
    354 ( 0.00%)          self.root
      .                       .tables
      .                       .attributes
      .                       .get(self, id)
      .                       .unwrap_or_else(|| {
      .                           // Structure and variant constructors don't have any attributes encoded for them,
      .                           // but we assume that someone passing a constructor ID actually wants to look at
      .                           // the attributes on the corresponding struct or variant.
      .                           let def_key = self.def_key(id);
-- line 1320 ----------------------------------------
-- line 1322 ----------------------------------------
      .                           let parent_id = def_key.parent.expect("no parent for a constructor");
      .                           self.root
      .                               .tables
      .                               .attributes
      .                               .get(self, parent_id)
      .                               .expect("no encoded attributes for a structure or variant")
      .                       })
      .                       .decode((self, sess))
    612 ( 0.00%)      }
      .           
      .               fn get_struct_field_names(
      .                   self,
      .                   id: DefIndex,
      .                   sess: &'a Session,
      .               ) -> impl Iterator<Item = Spanned<Symbol>> + 'a {
    200 ( 0.00%)          self.root
      .                       .tables
      .                       .children
      .                       .get(self, id)
      .                       .unwrap_or_else(Lazy::empty)
      .                       .decode(self)
    680 ( 0.00%)              .map(move |index| respan(self.get_span(index, sess), self.item_ident(index, sess).name))
      .               }
      .           
      .               fn get_struct_field_visibilities(self, id: DefIndex) -> impl Iterator<Item = Visibility> + 'a {
     40 ( 0.00%)          self.root
      .                       .tables
      .                       .children
      .                       .get(self, id)
      .                       .unwrap_or_else(Lazy::empty)
      .                       .decode(self)
      6 ( 0.00%)              .map(move |field_index| self.get_visibility(field_index))
      .               }
      .           
      .               fn get_inherent_implementations_for_type(
      .                   self,
      .                   tcx: TyCtxt<'tcx>,
      .                   id: DefIndex,
      .               ) -> &'tcx [DefId] {
     12 ( 0.00%)          tcx.arena.alloc_from_iter(
     15 ( 0.00%)              self.root
      .                           .tables
      .                           .inherent_impls
      .                           .get(self, id)
      .                           .unwrap_or_else(Lazy::empty)
      .                           .decode(self)
     49 ( 0.00%)                  .map(|index| self.local_def_id(index)),
      .                   )
      .               }
      .           
      .               fn get_traits(self) -> impl Iterator<Item = DefId> + 'a {
      .                   self.root.traits.decode(self).map(move |index| self.local_def_id(index))
      .               }
      .           
      .               fn get_trait_impls(self) -> impl Iterator<Item = (DefId, DefId, Option<SimplifiedType>)> + 'a {
-- line 1376 ----------------------------------------
-- line 1380 ----------------------------------------
      .                           index: *trait_index,
      .                       };
      .                       impls.decode(self).map(move |(impl_index, simplified_self_ty)| {
      .                           (trait_def_id, self.local_def_id(impl_index), simplified_self_ty)
      .                       })
      .                   })
      .               }
      .           
    504 ( 0.00%)      fn get_implementations_of_trait(
      .                   self,
      .                   tcx: TyCtxt<'tcx>,
      .                   trait_def_id: DefId,
      .               ) -> &'tcx [(DefId, Option<SimplifiedType>)] {
     56 ( 0.00%)          if self.trait_impls.is_empty() {
      .                       return &[];
      .                   }
      .           
      .                   // Do a reverse lookup beforehand to avoid touching the crate_num
      .                   // hash map in the loop below.
     56 ( 0.00%)          let key = match self.reverse_translate_def_id(trait_def_id) {
      .                       Some(def_id) => (def_id.krate.as_u32(), def_id.index),
      .                       None => return &[],
      .                   };
      .           
      .                   if let Some(impls) = self.trait_impls.get(&key) {
     64 ( 0.00%)              tcx.arena.alloc_from_iter(
     32 ( 0.00%)                  impls
      .                               .decode(self)
  1,728 ( 0.00%)                      .map(|(idx, simplified_self_ty)| (self.local_def_id(idx), simplified_self_ty)),
      .                       )
      .                   } else {
      .                       &[]
      .                   }
    448 ( 0.00%)      }
      .           
      .               fn get_trait_of_item(self, id: DefIndex) -> Option<DefId> {
     28 ( 0.00%)          let def_key = self.def_key(id);
     35 ( 0.00%)          match def_key.disambiguated_data.data {
      .                       DefPathData::TypeNs(..) | DefPathData::ValueNs(..) => (),
      .                       // Not an associated item
      .                       _ => return None,
      .                   }
     63 ( 0.00%)          def_key.parent.and_then(|parent_index| match self.kind(parent_index) {
      .                       EntryKind::Trait(_) | EntryKind::TraitAlias => Some(self.local_def_id(parent_index)),
      .                       _ => None,
      .                   })
      .               }
      .           
      .               fn get_native_libraries(self, sess: &'a Session) -> impl Iterator<Item = NativeLib> + 'a {
      8 ( 0.00%)          self.root.native_libraries.decode((self, sess))
      .               }
      .           
      .               fn get_proc_macro_quoted_span(self, index: usize, sess: &Session) -> Span {
      .                   self.root
      .                       .tables
      .                       .proc_macro_quoted_spans
      .                       .get(self, index)
      .                       .unwrap_or_else(|| panic!("Missing proc macro quoted span: {:?}", index))
-- line 1437 ----------------------------------------
-- line 1450 ----------------------------------------
      .                       self.root.dylib_dependency_formats.decode(self).enumerate().flat_map(|(i, link)| {
      .                           let cnum = CrateNum::new(i + 1);
      .                           link.map(|link| (self.cnum_map[cnum], link))
      .                       }),
      .                   )
      .               }
      .           
      .               fn get_missing_lang_items(self, tcx: TyCtxt<'tcx>) -> &'tcx [lang_items::LangItem] {
     20 ( 0.00%)          tcx.arena.alloc_from_iter(self.root.lang_items_missing.decode(self))
      .               }
      .           
      .               fn get_fn_param_names(self, tcx: TyCtxt<'tcx>, id: DefIndex) -> &'tcx [Ident] {
      .                   let param_names = match self.kind(id) {
      .                       EntryKind::Fn(data) | EntryKind::ForeignFn(data) => data.decode(self).param_names,
      .                       EntryKind::AssocFn(data) => data.decode(self).fn_data.param_names,
      .                       _ => Lazy::empty(),
      .                   };
-- line 1466 ----------------------------------------
-- line 1479 ----------------------------------------
      .                       EntryKind::AnonConst(_, data)
      .                       | EntryKind::Const(_, data)
      .                       | EntryKind::AssocConst(_, _, data) => data.decode(self).0,
      .                       _ => bug!(),
      .                   }
      .               }
      .           
      .               fn get_macro(self, id: DefIndex, sess: &Session) -> MacroDef {
     48 ( 0.00%)          match self.kind(id) {
      8 ( 0.00%)              EntryKind::MacroDef(macro_def) => macro_def.decode((self, sess)),
      .                       _ => bug!(),
      .                   }
      .               }
      .           
      .               // This replicates some of the logic of the crate-local `is_const_fn_raw` query, because we
      .               // don't serialize constness for tuple variant and tuple struct constructors.
      .               fn is_const_fn_raw(self, id: DefIndex) -> bool {
     27 ( 0.00%)          let constness = match self.kind(id) {
      4 ( 0.00%)              EntryKind::AssocFn(data) => data.decode(self).fn_data.constness,
      .                       EntryKind::Fn(data) => data.decode(self).constness,
      6 ( 0.00%)              EntryKind::ForeignFn(data) => data.decode(self).constness,
      .                       EntryKind::Variant(..) | EntryKind::Struct(..) => hir::Constness::Const,
      .                       _ => hir::Constness::NotConst,
      .                   };
      .                   constness == hir::Constness::Const
      .               }
      .           
      .               fn asyncness(self, id: DefIndex) -> hir::IsAsync {
      .                   match self.kind(id) {
-- line 1507 ----------------------------------------
-- line 1532 ----------------------------------------
      .               fn generator_kind(self, id: DefIndex) -> Option<hir::GeneratorKind> {
      .                   match self.kind(id) {
      .                       EntryKind::Generator(data) => Some(data),
      .                       _ => None,
      .                   }
      .               }
      .           
      .               fn fn_sig(self, id: DefIndex, tcx: TyCtxt<'tcx>) -> ty::PolyFnSig<'tcx> {
     75 ( 0.00%)          self.root.tables.fn_sig.get(self, id).unwrap().decode((self, tcx))
      .               }
      .           
      .               #[inline]
 22,155 ( 0.01%)      fn def_key(self, index: DefIndex) -> DefKey {
  6,330 ( 0.00%)          *self
      .                       .def_key_cache
      .                       .lock()
      .                       .entry(index)
  7,520 ( 0.00%)              .or_insert_with(|| self.root.tables.def_keys.get(self, index).unwrap().decode(self))
 25,320 ( 0.01%)      }
      .           
      .               // Returns the path leading to the thing with this `id`.
      .               fn def_path(self, id: DefIndex) -> DefPath {
      .                   debug!("def_path(cnum={:?}, id={:?})", self.cnum, id);
      .                   DefPath::make(self.cnum, id, |parent| self.def_key(parent))
      .               }
      .           
      .               fn def_path_hash_unlocked(
      .                   self,
      .                   index: DefIndex,
      .                   def_path_hashes: &mut FxHashMap<DefIndex, DefPathHash>,
      .               ) -> DefPathHash {
  3,494 ( 0.00%)          *def_path_hashes.entry(index).or_insert_with(|| {
    280 ( 0.00%)              self.root.tables.def_path_hashes.get(self, index).unwrap().decode(self)
      .                   })
      .               }
      .           
      .               #[inline]
 12,229 ( 0.00%)      fn def_path_hash(self, index: DefIndex) -> DefPathHash {
      .                   let mut def_path_hashes = self.def_path_hash_cache.lock();
      .                   self.def_path_hash_unlocked(index, &mut def_path_hashes)
 13,976 ( 0.01%)      }
      .           
      .               #[inline]
      .               fn def_path_hash_to_def_index(self, hash: DefPathHash) -> DefIndex {
      .                   self.def_path_hash_map.def_path_hash_to_def_index(&hash)
      .               }
      .           
      .               fn expn_hash_to_expn_id(self, sess: &Session, index_guess: u32, hash: ExpnHash) -> ExpnId {
      .                   debug_assert_eq!(ExpnId::from_hash(hash), None);
-- line 1580 ----------------------------------------
-- line 1635 ----------------------------------------
      .               /// Proc macro crates don't currently export spans, so this function does not have
      .               /// to work for them.
      .               fn imported_source_files(self, sess: &Session) -> &'a [ImportedSourceFile] {
      .                   // Translate the virtual `/rustc/$hash` prefix back to a real directory
      .                   // that should hold actual sources, where possible.
      .                   //
      .                   // NOTE: if you update this, you might need to also update bootstrap's code for generating
      .                   // the `rust-src` component in `Src::run` in `src/bootstrap/dist.rs`.
 11,448 ( 0.00%)          let virtual_rust_source_base_dir = option_env!("CFG_VIRTUAL_RUST_SOURCE_BASE_DIR")
      .                       .map(Path::new)
      .                       .filter(|_| {
      .                           // Only spend time on further checks if we have what to translate *to*.
      .                           sess.opts.real_rust_source_base_dir.is_some()
      .                       })
      .                       .filter(|virtual_dir| {
      .                           // Don't translate away `/rustc/$hash` if we're still remapping to it,
      .                           // since that means we're still building `std`/`rustc` that need it,
      .                           // and we don't want the real path to leak into codegen/debuginfo.
      .                           !sess.opts.remap_path_prefix.iter().any(|(_from, to)| to == virtual_dir)
      .                       });
 11,448 ( 0.00%)          let try_to_translate_virtual_to_real = |name: &mut rustc_span::FileName| {
      .                       debug!(
      .                           "try_to_translate_virtual_to_real(name={:?}): \
      .                            virtual_rust_source_base_dir={:?}, real_rust_source_base_dir={:?}",
      .                           name, virtual_rust_source_base_dir, sess.opts.real_rust_source_base_dir,
      .                       );
      .           
  1,570 ( 0.00%)              if let Some(virtual_dir) = virtual_rust_source_base_dir {
      .                           if let Some(real_dir) = &sess.opts.real_rust_source_base_dir {
      .                               if let rustc_span::FileName::Real(old_name) = name {
      .                                   if let rustc_span::RealFileName::Remapped { local_path: _, virtual_name } =
      .                                       old_name
      .                                   {
      .                                       if let Ok(rest) = virtual_name.strip_prefix(virtual_dir) {
      .                                           let virtual_name = virtual_name.clone();
      .           
-- line 1670 ----------------------------------------
-- line 1709 ----------------------------------------
      .                                           *old_name = new_name;
      .                                       }
      .                                   }
      .                               }
      .                           }
      .                       }
      .                   };
      .           
 11,448 ( 0.00%)          self.cdata.source_map_import_info.get_or_init(|| {
     12 ( 0.00%)              let external_source_map = self.root.source_map.decode(self);
      .           
      .                       external_source_map
      .                           .map(|source_file_to_import| {
      .                               // We can't reuse an existing SourceFile, so allocate a new one
      .                               // containing the information we need.
      .                               let rustc_span::SourceFile {
  6,594 ( 0.00%)                          mut name,
  1,884 ( 0.00%)                          src_hash,
    314 ( 0.00%)                          start_pos,
    628 ( 0.00%)                          end_pos,
  1,570 ( 0.00%)                          mut lines,
  1,570 ( 0.00%)                          mut multibyte_chars,
  1,884 ( 0.00%)                          mut non_narrow_chars,
  1,570 ( 0.00%)                          mut normalized_pos,
  1,884 ( 0.00%)                          name_hash,
      .                                   ..
      .                               } = source_file_to_import;
      .           
      .                               // If this file is under $sysroot/lib/rustlib/src/ but has not been remapped
      .                               // during rust bootstrapping by `remap-debuginfo = true`, and the user
      .                               // wish to simulate that behaviour by -Z simulate-remapped-rust-src-base,
      .                               // then we change `name` to a similar state as if the rust was bootstrapped
      .                               // with `remap-debuginfo = true`.
      .                               // This is useful for testing so that tests about the effects of
      .                               // `try_to_translate_virtual_to_real` don't have to worry about how the
      .                               // compiler is bootstrapped.
    628 ( 0.00%)                      if let Some(virtual_dir) =
      .                                   &sess.opts.debugging_opts.simulate_remapped_rust_src_base
      .                               {
      .                                   if let Some(real_dir) = &sess.opts.real_rust_source_base_dir {
      .                                       if let rustc_span::FileName::Real(ref mut old_name) = name {
      .                                           if let rustc_span::RealFileName::LocalPath(local) = old_name {
      .                                               if let Ok(rest) = local.strip_prefix(real_dir) {
      .                                                   *old_name = rustc_span::RealFileName::Remapped {
      .                                                       local_path: None,
-- line 1753 ----------------------------------------
-- line 1767 ----------------------------------------
      .                               let source_length = (end_pos - start_pos).to_usize();
      .           
      .                               // Translate line-start positions and multibyte character
      .                               // position into frame of reference local to file.
      .                               // `SourceMap::new_imported_source_file()` will then translate those
      .                               // coordinates to their new global frame of reference when the
      .                               // offset of the SourceFile is known.
      .                               for pos in &mut lines {
477,208 ( 0.19%)                          *pos = *pos - start_pos;
      .                               }
      .                               for mbc in &mut multibyte_chars {
  1,136 ( 0.00%)                          mbc.pos = mbc.pos - start_pos;
      .                               }
      .                               for swc in &mut non_narrow_chars {
    804 ( 0.00%)                          *swc = *swc - start_pos;
      .                               }
      .                               for np in &mut normalized_pos {
      .                                   np.pos = np.pos - start_pos;
      .                               }
      .           
  5,652 ( 0.00%)                      let local_version = sess.source_map().new_imported_source_file(
  4,082 ( 0.00%)                          name,
  2,198 ( 0.00%)                          src_hash,
      .                                   name_hash,
      .                                   source_length,
    628 ( 0.00%)                          self.cnum,
  1,570 ( 0.00%)                          lines,
  1,884 ( 0.00%)                          multibyte_chars,
  1,570 ( 0.00%)                          non_narrow_chars,
  1,256 ( 0.00%)                          normalized_pos,
      .                                   start_pos,
      .                                   end_pos,
      .                               );
      .                               debug!(
      .                                   "CrateMetaData::imported_source_files alloc \
      .                                    source_file {:?} original (start_pos {:?} end_pos {:?}) \
      .                                    translated (start_pos {:?} end_pos {:?})",
      .                                   local_version.name,
-- line 1804 ----------------------------------------
-- line 1808 ----------------------------------------
      .                                   local_version.end_pos
      .                               );
      .           
      .                               ImportedSourceFile {
      .                                   original_start_pos: start_pos,
      .                                   original_end_pos: end_pos,
      .                                   translated_source_file: local_version,
      .                               }
    942 ( 0.00%)                  })
      .                           .collect()
      .                   })
      .               }
      .           }
      .           
      .           impl CrateMetadata {
     48 ( 0.00%)      crate fn new(
      .                   sess: &Session,
      .                   blob: MetadataBlob,
      .                   root: CrateRoot<'static>,
      .                   raw_proc_macros: Option<&'static [ProcMacro]>,
      .                   cnum: CrateNum,
      .                   cnum_map: CrateNumMap,
      .                   dep_kind: CrateDepKind,
      .                   source: CrateSource,
      .                   private_dep: bool,
      .                   host_hash: Option<Svh>,
      .               ) -> CrateMetadata {
     12 ( 0.00%)          let trait_impls = root
      .                       .impls
      .                       .decode((&blob, sess))
      .                       .map(|trait_impls| (trait_impls.trait_id, trait_impls.impls))
      .                       .collect();
      .                   let alloc_decoding_state =
     12 ( 0.00%)              AllocDecodingState::new(root.interpret_alloc_index.decode(&blob).collect());
      .                   let dependencies = Lock::new(cnum_map.iter().cloned().collect());
      .           
      .                   // Pre-decode the DefPathHash->DefIndex table. This is a cheap operation
      .                   // that does not copy any data. It just does some data verification.
      4 ( 0.00%)          let def_path_hash_map = root.def_path_hash_map.decode(&blob);
      .           
     92 ( 0.00%)          CrateMetadata {
      4 ( 0.00%)              blob,
     12 ( 0.00%)              root,
     16 ( 0.00%)              trait_impls,
      .                       raw_proc_macros,
      .                       source_map_import_info: OnceCell::new(),
     16 ( 0.00%)              def_path_hash_map,
      .                       expn_hash_map: Default::default(),
     28 ( 0.00%)              alloc_decoding_state,
      .                       cnum,
     16 ( 0.00%)              cnum_map,
     20 ( 0.00%)              dependencies,
      .                       dep_kind: Lock::new(dep_kind),
     48 ( 0.00%)              source,
      .                       private_dep,
      .                       host_hash,
      .                       extern_crate: Lock::new(None),
      .                       hygiene_context: Default::default(),
      .                       def_key_cache: Default::default(),
      .                       def_path_hash_cache: Default::default(),
      .                   }
     36 ( 0.00%)      }
      .           
      .               crate fn dependencies(&self) -> LockGuard<'_, Vec<CrateNum>> {
      .                   self.dependencies.borrow()
      .               }
      .           
      .               crate fn add_dependency(&self, cnum: CrateNum) {
      .                   self.dependencies.borrow_mut().push(cnum);
      .               }
      .           
      .               crate fn update_extern_crate(&self, new_extern_crate: ExternCrate) -> bool {
      .                   let mut extern_crate = self.extern_crate.borrow_mut();
      .                   let update = Some(new_extern_crate.rank()) > extern_crate.as_ref().map(ExternCrate::rank);
      .                   if update {
     20 ( 0.00%)              *extern_crate = Some(new_extern_crate);
      .                   }
      .                   update
      .               }
      .           
      .               crate fn source(&self) -> &CrateSource {
    204 ( 0.00%)          &self.source
      .               }
      .           
      .               crate fn dep_kind(&self) -> CrateDepKind {
      .                   *self.dep_kind.lock()
      .               }
      .           
      .               crate fn update_dep_kind(&self, f: impl FnOnce(CrateDepKind) -> CrateDepKind) {
     56 ( 0.00%)          self.dep_kind.with_lock(|dep_kind| *dep_kind = f(*dep_kind))
      .               }
      .           
      .               crate fn panic_strategy(&self) -> PanicStrategy {
      .                   self.root.panic_strategy
      .               }
      .           
      .               crate fn needs_panic_runtime(&self) -> bool {
      .                   self.root.needs_panic_runtime
-- line 1905 ----------------------------------------
-- line 1909 ----------------------------------------
      .                   self.root.panic_runtime
      .               }
      .           
      .               crate fn is_profiler_runtime(&self) -> bool {
      .                   self.root.profiler_runtime
      .               }
      .           
      .               crate fn needs_allocator(&self) -> bool {
      4 ( 0.00%)          self.root.needs_allocator
      .               }
      .           
      .               crate fn has_global_allocator(&self) -> bool {
      .                   self.root.has_global_allocator
      .               }
      .           
      .               crate fn has_default_lib_allocator(&self) -> bool {
      .                   self.root.has_default_lib_allocator
      .               }
      .           
      .               crate fn is_proc_macro_crate(&self) -> bool {
      .                   self.root.is_proc_macro_crate()
      .               }
      .           
      .               crate fn name(&self) -> Symbol {
     64 ( 0.00%)          self.root.name
      .               }
      .           
      .               crate fn stable_crate_id(&self) -> StableCrateId {
      .                   self.root.stable_crate_id
      .               }
      .           
      .               crate fn hash(&self) -> Svh {
      .                   self.root.hash
      .               }
      .           
      .               fn num_def_ids(&self) -> usize {
      .                   self.root.tables.def_keys.size()
      .               }
      .           
      .               fn local_def_id(&self, index: DefIndex) -> DefId {
  4,970 ( 0.00%)          DefId { krate: self.cnum, index }
      .               }
      .           
      .               // Translate a DefId from the current compilation environment to a DefId
      .               // for an external crate.
      .               fn reverse_translate_def_id(&self, did: DefId) -> Option<DefId> {
      .                   for (local, &global) in self.cnum_map.iter_enumerated() {
     70 ( 0.00%)              if global == did.krate {
      .                           return Some(DefId { krate: local, index: did.index });
      .                       }
      .                   }
      .           
      .                   None
      .               }
      .           }
      .           
-- line 1964 ----------------------------------------

128,525 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs
--------------------------------------------------------------------------------
Ir                 

-- line 14 ----------------------------------------
        .           
        .           pub type EncodeResult = Result<(), !>;
        .           
        .           pub struct Encoder {
        .               pub data: Vec<u8>,
        .           }
        .           
        .           impl Encoder {
        1 ( 0.00%)      pub fn new(data: Vec<u8>) -> Encoder {
        4 ( 0.00%)          Encoder { data }
        1 ( 0.00%)      }
        .           
        1 ( 0.00%)      pub fn into_inner(self) -> Vec<u8> {
        4 ( 0.00%)          self.data
        1 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn position(&self) -> usize {
    4,760 ( 0.00%)          self.data.len()
        .               }
        .           }
        .           
        .           macro_rules! write_leb128 {
        .               ($enc:expr, $value:expr, $int_ty:ty, $fun:ident) => {{
        .                   const MAX_ENCODED_LEN: usize = max_leb128_len!($int_ty);
        .                   let old_len = $enc.data.len();
        .           
-- line 40 ----------------------------------------
-- line 67 ----------------------------------------
        .           
        .               #[inline]
        .               fn emit_unit(&mut self) -> EncodeResult {
        .                   Ok(())
        .               }
        .           
        .               #[inline]
        .               fn emit_usize(&mut self, v: usize) -> EncodeResult {
   80,319 ( 0.03%)          write_leb128!(self, v, usize, write_usize_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u128(&mut self, v: u128) -> EncodeResult {
       56 ( 0.00%)          write_leb128!(self, v, u128, write_u128_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u64(&mut self, v: u64) -> EncodeResult {
      224 ( 0.00%)          write_leb128!(self, v, u64, write_u64_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u32(&mut self, v: u32) -> EncodeResult {
   78,934 ( 0.03%)          write_leb128!(self, v, u32, write_u32_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u16(&mut self, v: u16) -> EncodeResult {
        .                   self.data.extend_from_slice(&v.to_le_bytes());
        .                   Ok(())
        .               }
        .           
-- line 98 ----------------------------------------
-- line 131 ----------------------------------------
        .               #[inline]
        .               fn emit_i8(&mut self, v: i8) -> EncodeResult {
        .                   let as_u8: u8 = unsafe { std::mem::transmute(v) };
        .                   self.emit_u8(as_u8)
        .               }
        .           
        .               #[inline]
        .               fn emit_bool(&mut self, v: bool) -> EncodeResult {
      782 ( 0.00%)          self.emit_u8(if v { 1 } else { 0 })
        .               }
        .           
        .               #[inline]
        .               fn emit_f64(&mut self, v: f64) -> EncodeResult {
        .                   let as_u64: u64 = v.to_bits();
        .                   self.emit_u64(as_u64)
        .               }
        .           
-- line 147 ----------------------------------------
-- line 549 ----------------------------------------
        .               #[inline]
        .               pub fn advance(&mut self, bytes: usize) {
        .                   self.position += bytes;
        .               }
        .           
        .               #[inline]
        .               pub fn read_raw_bytes(&mut self, bytes: usize) -> &'a [u8] {
        .                   let start = self.position;
        4 ( 0.00%)          self.position += bytes;
        4 ( 0.00%)          &self.data[start..self.position]
        .               }
        .           }
        .           
        .           macro_rules! read_leb128 {
        .               ($dec:expr, $fun:ident) => {{ leb128::$fun($dec.data, &mut $dec.position) }};
        .           }
        .           
        .           impl<'a> serialize::Decoder for Decoder<'a> {
        .               #[inline]
        .               fn read_unit(&mut self) -> () {
        .                   ()
        .               }
        .           
        .               #[inline]
        .               fn read_u128(&mut self) -> u128 {
      314 ( 0.00%)          read_leb128!(self, read_u128_leb128)
        .               }
        .           
        .               #[inline]
        .               fn read_u64(&mut self) -> u64 {
      622 ( 0.00%)          read_leb128!(self, read_u64_leb128)
        .               }
        .           
        .               #[inline]
   11,028 ( 0.00%)      fn read_u32(&mut self) -> u32 {
   46,290 ( 0.02%)          read_leb128!(self, read_u32_leb128)
   22,056 ( 0.01%)      }
        .           
        .               #[inline]
        .               fn read_u16(&mut self) -> u16 {
  561,386 ( 0.22%)          let bytes = [self.data[self.position], self.data[self.position + 1]];
   80,198 ( 0.03%)          let value = u16::from_le_bytes(bytes);
  160,396 ( 0.06%)          self.position += 2;
        .                   value
        .               }
        .           
        .               #[inline]
        .               fn read_u8(&mut self) -> u8 {
1,035,437 ( 0.40%)          let value = self.data[self.position];
  196,511 ( 0.08%)          self.position += 1;
        .                   value
        .               }
        .           
        .               #[inline]
   66,381 ( 0.03%)      fn read_usize(&mut self) -> usize {
   66,581 ( 0.03%)          read_leb128!(self, read_usize_leb128)
  132,762 ( 0.05%)      }
        .           
        .               #[inline]
        .               fn read_i128(&mut self) -> i128 {
        .                   read_leb128!(self, read_i128_leb128)
        .               }
        .           
        .               #[inline]
        .               fn read_i64(&mut self) -> i64 {
-- line 613 ----------------------------------------
-- line 637 ----------------------------------------
        .               #[inline]
        .               fn read_isize(&mut self) -> isize {
        .                   read_leb128!(self, read_isize_leb128)
        .               }
        .           
        .               #[inline]
        .               fn read_bool(&mut self) -> bool {
        .                   let value = self.read_u8();
    4,579 ( 0.00%)          value != 0
        .               }
        .           
        .               #[inline]
        .               fn read_f64(&mut self) -> f64 {
        .                   let bits = self.read_u64();
        .                   f64::from_bits(bits)
        .               }
        .           
-- line 653 ----------------------------------------
-- line 660 ----------------------------------------
        .               #[inline]
        .               fn read_char(&mut self) -> char {
        .                   let bits = self.read_u32();
        .                   std::char::from_u32(bits).unwrap()
        .               }
        .           
        .               #[inline]
        .               fn read_str(&mut self) -> Cow<'_, str> {
    9,353 ( 0.00%)          let len = self.read_usize();
   52,912 ( 0.02%)          let sentinel = self.data[self.position + len];
   13,378 ( 0.01%)          assert!(sentinel == STR_SENTINEL);
        .                   let s = unsafe {
        .                       std::str::from_utf8_unchecked(&self.data[self.position..self.position + len])
        .                   };
   33,445 ( 0.01%)          self.position += len + 1;
    8,592 ( 0.00%)          Cow::Borrowed(s)
        .               }
        .           
        .               #[inline]
        .               fn read_raw_bytes_into(&mut self, s: &mut [u8]) {
       56 ( 0.00%)          let start = self.position;
      272 ( 0.00%)          self.position += s.len();
       56 ( 0.00%)          s.copy_from_slice(&self.data[start..self.position]);
        .               }
        .           }
        .           
        .           // Specializations for contiguous byte sequences follow. The default implementations for slices
        .           // encode and decode each element individually. This isn't necessary for `u8` slices when using
        .           // opaque encoders and decoders, because each `u8` is unchanged by encoding and decoding.
        .           // Therefore, we can use more efficient implementations that process the entire sequence at once.
        .           
-- line 690 ----------------------------------------

  237,554 ( 0.09%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs
--------------------------------------------------------------------------------
Ir                 

-- line 57 ----------------------------------------
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
        .                   ///
        .                   /// ```
        .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::from_str_radix(\"A\", 16), Ok(10));")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        6 ( 0.00%)          pub fn from_str_radix(src: &str, radix: u32) -> Result<Self, ParseIntError> {
        3 ( 0.00%)              from_str_radix(src, radix)
        9 ( 0.00%)          }
        .           
        .                   /// Returns the number of ones in the binary representation of `self`.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
        .                   ///
        .                   /// ```
-- line 75 ----------------------------------------
-- line 80 ----------------------------------------
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
        .                   #[doc(alias = "popcount")]
        .                   #[doc(alias = "popcnt")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn count_ones(self) -> u32 {
   12,285 ( 0.00%)              intrinsics::ctpop(self as $ActualT) as u32
        .                   }
        .           
        .                   /// Returns the number of zeros in the binary representation of `self`.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
        .                   ///
-- line 96 ----------------------------------------
-- line 118 ----------------------------------------
        .                   /// assert_eq!(n.leading_zeros(), 2);
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn leading_zeros(self) -> u32 {
   71,017 ( 0.03%)              intrinsics::ctlz(self as $ActualT) as u32
        .                   }
        .           
        .                   /// Returns the number of trailing zeros in the binary representation
        .                   /// of `self`.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 134 ----------------------------------------
-- line 139 ----------------------------------------
        .                   /// assert_eq!(n.trailing_zeros(), 3);
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn trailing_zeros(self) -> u32 {
   57,922 ( 0.02%)              intrinsics::cttz(self) as u32
        .                   }
        .           
        .                   /// Returns the number of leading ones in the binary representation of `self`.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
        .                   ///
-- line 155 ----------------------------------------
-- line 204 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(n.rotate_left(", $rot, "), m);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn rotate_left(self, n: u32) -> Self {
1,785,714 ( 0.69%)              intrinsics::rotate_left(self, n as $SelfT)
        .                   }
        .           
        .                   /// Shifts the bits to the right by a specified amount, `n`,
        .                   /// wrapping the truncated bits to the beginning of the resulting
        .                   /// integer.
        .                   ///
        .                   /// Please note this isn't the same operation as the `>>` shifting operator!
        .                   ///
-- line 220 ----------------------------------------
-- line 456 ----------------------------------------
        .                   )]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
        .                   #[inline(always)]
        .                   pub const unsafe fn unchecked_add(self, rhs: Self) -> Self {
        .                       // SAFETY: the caller must uphold the safety contract for
        .                       // `unchecked_add`.
  137,886 ( 0.05%)              unsafe { intrinsics::unchecked_add(self, rhs) }
        .                   }
        .           
        .                   /// Checked addition with a signed integer. Computes `self + rhs`,
        .                   /// returning `None` if overflow occurred.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 472 ----------------------------------------
-- line 525 ----------------------------------------
        .                   )]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
        .                   #[inline(always)]
        .                   pub const unsafe fn unchecked_sub(self, rhs: Self) -> Self {
        .                       // SAFETY: the caller must uphold the safety contract for
        .                       // `unchecked_sub`.
   11,144 ( 0.00%)              unsafe { intrinsics::unchecked_sub(self, rhs) }
        .                   }
        .           
        .                   /// Checked integer multiplication. Computes `self * rhs`, returning
        .                   /// `None` if overflow occurred.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 541 ----------------------------------------
-- line 1035 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.saturating_add(127), ", stringify!($SelfT), "::MAX);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
        .                   #[inline(always)]
        .                   pub const fn saturating_add(self, rhs: Self) -> Self {
   17,408 ( 0.01%)              intrinsics::saturating_add(self, rhs)
        .                   }
        .           
        .                   /// Saturating addition with a signed integer. Computes `self + rhs`,
        .                   /// saturating at the numeric bounds instead of overflowing.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 1051 ----------------------------------------
-- line 1084 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(13", stringify!($SelfT), ".saturating_sub(127), 0);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
        .                   #[inline(always)]
        .                   pub const fn saturating_sub(self, rhs: Self) -> Self {
      286 ( 0.00%)              intrinsics::saturating_sub(self, rhs)
        .                   }
        .           
        .                   /// Saturating integer multiplication. Computes `self * rhs`,
        .                   /// saturating at the numeric bounds instead of overflowing.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 1100 ----------------------------------------
-- line 1175 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(200", stringify!($SelfT), ".wrapping_add(", stringify!($SelfT), "::MAX), 199);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn wrapping_add(self, rhs: Self) -> Self {
  968,097 ( 0.38%)              intrinsics::wrapping_add(self, rhs)
        .                   }
        .           
        .                   /// Wrapping (modular) addition with a signed integer. Computes
        .                   /// `self + rhs`, wrapping around at the boundary of the type.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 1191 ----------------------------------------
-- line 1217 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(100", stringify!($SelfT), ".wrapping_sub(", stringify!($SelfT), "::MAX), 101);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn wrapping_sub(self, rhs: Self) -> Self {
  257,134 ( 0.10%)              intrinsics::wrapping_sub(self, rhs)
        .                   }
        .           
        .                   /// Wrapping (modular) multiplication. Computes `self *
        .                   /// rhs`, wrapping around at the boundary of the type.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 1233 ----------------------------------------
-- line 1240 ----------------------------------------
        .                   /// assert_eq!(25u8.wrapping_mul(12), 44);
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn wrapping_mul(self, rhs: Self) -> Self {
  864,175 ( 0.34%)              intrinsics::wrapping_mul(self, rhs)
        .                   }
        .           
        .                   /// Wrapping (modular) division. Computes `self / rhs`.
        .                   /// Wrapped division on unsigned types is just normal division.
        .                   /// There's no way wrapping could ever happen.
        .                   /// This function exists, so that all operations
        .                   /// are accounted for in the wrapping operations.
        .                   ///
-- line 1256 ----------------------------------------
-- line 1492 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.overflowing_add(1), (0, true));")]
        .                   /// ```
        .                   #[stable(feature = "wrapping", since = "1.7.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn overflowing_add(self, rhs: Self) -> (Self, bool) {
  120,199 ( 0.05%)              let (a, b) = intrinsics::add_with_overflow(self as $ActualT, rhs as $ActualT);
        .                       (a as Self, b)
        .                   }
        .           
        .                   /// Calculates `self + rhs + carry` without the ability to overflow.
        .                   ///
        .                   /// Performs "ternary addition" which takes in an extra bit to add, and may return an
        .                   /// additional bit of overflow. This allows for chaining together multiple additions
        .                   /// to create "big integers" which represent larger values.
-- line 1508 ----------------------------------------
-- line 1588 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(0", stringify!($SelfT), ".overflowing_sub(1), (", stringify!($SelfT), "::MAX, true));")]
        .                   /// ```
        .                   #[stable(feature = "wrapping", since = "1.7.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn overflowing_sub(self, rhs: Self) -> (Self, bool) {
   39,404 ( 0.02%)              let (a, b) = intrinsics::sub_with_overflow(self as $ActualT, rhs as $ActualT);
        .                       (a as Self, b)
        .                   }
        .           
        .                   /// Calculates `self - rhs - borrow` without the ability to overflow.
        .                   ///
        .                   /// Performs "ternary subtraction" which takes in an extra bit to subtract, and may return
        .                   /// an additional bit of overflow. This allows for chaining together multiple subtractions
        .                   /// to create "big integers" which represent larger values.
-- line 1604 ----------------------------------------
-- line 1674 ----------------------------------------
        .                   /// assert_eq!(1_000_000_000u32.overflowing_mul(10), (1410065408, true));
        .                   /// ```
        .                   #[stable(feature = "wrapping", since = "1.7.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                     without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn overflowing_mul(self, rhs: Self) -> (Self, bool) {
  217,272 ( 0.08%)              let (a, b) = intrinsics::mul_with_overflow(self as $ActualT, rhs as $ActualT);
        .                       (a as Self, b)
        .                   }
        .           
        .                   /// Calculates the divisor when `self` is divided by `rhs`.
        .                   ///
        .                   /// Returns a tuple of the divisor along with a boolean indicating
        .                   /// whether an arithmetic overflow would occur. Note that for unsigned
        .                   /// integers overflow never occurs, so the second value is always
-- line 1690 ----------------------------------------
-- line 2132 ----------------------------------------
        .                   #[doc = concat!("assert!(16", stringify!($SelfT), ".is_power_of_two());")]
        .                   #[doc = concat!("assert!(!10", stringify!($SelfT), ".is_power_of_two());")]
        .                   /// ```
        .                   #[must_use]
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_is_power_of_two", since = "1.32.0")]
        .                   #[inline(always)]
        .                   pub const fn is_power_of_two(self) -> bool {
       60 ( 0.00%)              self.count_ones() == 1
        .                   }
        .           
        .                   // Returns one less than next power of two.
        .                   // (For 8u8 next power of two is 8u8 and for 6u8 it is 8u8)
        .                   //
        .                   // 8u8.one_less_than_next_power_of_two() == 7
        .                   // 6u8.one_less_than_next_power_of_two() == 7
        .                   //
        .                   // This method cannot overflow, as in the `next_power_of_two`
        .                   // overflow cases it instead ends up returning the maximum value
        .                   // of the type, and can return 0 for 0.
        .                   #[inline]
        .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
        .                   const fn one_less_than_next_power_of_two(self) -> Self {
    1,578 ( 0.00%)              if self <= 1 { return 0; }
        .           
    3,496 ( 0.00%)              let p = self - 1;
        .                       // SAFETY: Because `p > 0`, it cannot consist entirely of leading zeros.
        .                       // That means the shift is always in-bounds, and some processors
        .                       // (such as intel pre-haswell) have more efficient ctlz
        .                       // intrinsics when the argument is non-zero.
   10,471 ( 0.00%)              let z = unsafe { intrinsics::ctlz_nonzero(p) };
    3,505 ( 0.00%)              <$SelfT>::MAX >> z
        .                   }
        .           
        .                   /// Returns the smallest power of two greater than or equal to `self`.
        .                   ///
        .                   /// When return value overflows (i.e., `self > (1 << (N-1))` for type
        .                   /// `uN`), it panics in debug mode and the return value is wrapped to 0 in
        .                   /// release mode (the only situation in which method can return 0).
        .                   ///
-- line 2171 ----------------------------------------
-- line 2179 ----------------------------------------
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline]
        .                   #[rustc_inherit_overflow_checks]
        .                   pub const fn next_power_of_two(self) -> Self {
    5,410 ( 0.00%)              self.one_less_than_next_power_of_two() + 1
        .                   }
        .           
        .                   /// Returns the smallest power of two greater than or equal to `n`. If
        .                   /// the next power of two is greater than the type's maximum value,
        .                   /// `None` is returned, otherwise the power of two is wrapped in `Some`.
        .                   ///
        .                   /// # Examples
        .                   ///
-- line 2195 ----------------------------------------

   20,181 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_resolve/src/imports.rs
--------------------------------------------------------------------------------
Ir              

-- line 109 ----------------------------------------
     .               /// The resolution of `module_path`.
     .               pub imported_module: Cell<Option<ModuleOrUniformRoot<'a>>>,
     .               pub vis: Cell<ty::Visibility>,
     .               pub used: Cell<bool>,
     .           }
     .           
     .           impl<'a> Import<'a> {
     .               pub fn is_glob(&self) -> bool {
   175 ( 0.00%)          matches!(self.kind, ImportKind::Glob { .. })
     .               }
     .           
     .               pub fn is_nested(&self) -> bool {
     .                   match self.kind {
     .                       ImportKind::Single { nested, .. } => nested,
     .                       _ => false,
     .                   }
     .               }
     .           
     .               crate fn crate_lint(&self) -> CrateLint {
    89 ( 0.00%)          CrateLint::UsePath { root_id: self.root_id, root_span: self.root_span }
   171 ( 0.00%)      }
     .           }
     .           
 4,152 ( 0.00%)  #[derive(Clone, Default, Debug)]
     .           /// Records information about the resolution of a name in a namespace of a module.
     .           pub struct NameResolution<'a> {
     .               /// Single imports that may define the name in the namespace.
     .               /// Imports are arena-allocated, so it's ok to use pointers as keys.
     .               single_imports: FxHashSet<PtrKey<'a, Import<'a>>>,
     .               /// The least shadowable known binding for this name, or None if there are no known bindings.
     .               pub binding: Option<&'a NameBinding<'a>>,
     .               shadowed_glob: Option<&'a NameBinding<'a>>,
     .           }
     .           
     .           impl<'a> NameResolution<'a> {
     .               // Returns the binding for the name if it is known or None if it not known.
     .               pub(crate) fn binding(&self) -> Option<&'a NameBinding<'a>> {
   965 ( 0.00%)          self.binding.and_then(|binding| {
    35 ( 0.00%)              if !binding.is_glob_import() || self.single_imports.is_empty() {
     .                           Some(binding)
     .                       } else {
     .                           None
     .                       }
     .                   })
     .               }
     .           
     .               crate fn add_single_import(&mut self, import: &'a Import<'a>) {
-- line 155 ----------------------------------------
-- line 177 ----------------------------------------
     .                   &mut self,
     .                   module: ModuleOrUniformRoot<'a>,
     .                   ident: Ident,
     .                   ns: Namespace,
     .                   parent_scope: &ParentScope<'a>,
     .                   record_used: bool,
     .                   path_span: Span,
     .               ) -> Result<&'a NameBinding<'a>, Determinacy> {
 7,794 ( 0.00%)          self.resolve_ident_in_module_unadjusted_ext(
     .                       module,
     .                       ident,
     .                       ns,
     .                       parent_scope,
     .                       false,
     .                       record_used,
     .                       path_span,
     .                   )
     .                   .map_err(|(determinacy, _)| determinacy)
     .               }
     .           
     .               /// Attempts to resolve `ident` in namespaces `ns` of `module`.
     .               /// Invariant: if `record_used` is `Some`, expansion and import resolution must be complete.
77,826 ( 0.03%)      crate fn resolve_ident_in_module_unadjusted_ext(
     .                   &mut self,
     .                   module: ModuleOrUniformRoot<'a>,
     .                   ident: Ident,
     .                   ns: Namespace,
     .                   parent_scope: &ParentScope<'a>,
     .                   restricted_shadowing: bool,
     .                   record_used: bool,
     .                   path_span: Span,
-- line 207 ----------------------------------------
-- line 259 ----------------------------------------
     .                               path_span,
     .                           );
     .                           return binding.map_err(|determinacy| (determinacy, Weak::No));
     .                       }
     .                   };
     .           
     .                   let key = self.new_key(ident, ns);
     .                   let resolution =
29,648 ( 0.01%)              self.resolution(module, key).try_borrow_mut().map_err(|_| (Determined, Weak::No))?; // This happens when there is a cycle of imports.
     .           
14,380 ( 0.01%)          if let Some(binding) = resolution.binding {
 1,609 ( 0.00%)              if !restricted_shadowing && binding.expansion != LocalExpnId::ROOT {
 1,186 ( 0.00%)                  if let NameBindingKind::Res(_, true) = binding.kind {
     .                               self.macro_expanded_macro_export_errors.insert((path_span, binding.span));
     .                           }
     .                       }
     .                   }
     .           
14,824 ( 0.01%)          let check_usable = |this: &mut Self, binding: &'a NameBinding<'a>| {
 2,271 ( 0.00%)              if let Some(unusable_binding) = this.unusable_binding {
     .                           if ptr::eq(binding, unusable_binding) {
     .                               return Err((Determined, Weak::No));
     .                           }
     .                       }
 1,146 ( 0.00%)              let usable = this.is_accessible_from(binding.vis, parent_scope.module);
 1,436 ( 0.00%)              if usable { Ok(binding) } else { Err((Determined, Weak::No)) }
     .                   };
     .           
 7,412 ( 0.00%)          if record_used {
 3,864 ( 0.00%)              return resolution
     .                           .binding
     .                           .and_then(|binding| {
     .                               // If the primary binding is unusable, search further and return the shadowed glob
     .                               // binding if it exists. What we really want here is having two separate scopes in
     .                               // a module - one for non-globs and one for globs, but until that's done use this
     .                               // hack to avoid inconsistent resolution ICEs during import validation.
 6,343 ( 0.00%)                      if let Some(unusable_binding) = self.unusable_binding {
     .                                   if ptr::eq(binding, unusable_binding) {
     .                                       return resolution.shadowed_glob;
     .                                   }
     .                               }
     .                               Some(binding)
     .                           })
     .                           .ok_or((Determined, Weak::No))
     .                           .and_then(|binding| {
 2,574 ( 0.00%)                      if self.last_import_segment && check_usable(self, binding).is_err() {
     .                                   Err((Determined, Weak::No))
     .                               } else {
 7,584 ( 0.00%)                          self.record_use(ident, binding, restricted_shadowing);
     .           
 3,792 ( 0.00%)                          if let Some(shadowed_glob) = resolution.shadowed_glob {
     .                                       // Forbid expanded shadowing to avoid time travel.
     .                                       if restricted_shadowing
     .                                           && binding.expansion != LocalExpnId::ROOT
     .                                           && binding.res() != shadowed_glob.res()
     .                                       {
     .                                           self.ambiguity_errors.push(AmbiguityError {
     .                                               kind: AmbiguityKind::GlobVsExpanded,
     .                                               ident,
-- line 317 ----------------------------------------
-- line 318 ----------------------------------------
     .                                               b1: binding,
     .                                               b2: shadowed_glob,
     .                                               misc1: AmbiguityErrorMisc::None,
     .                                               misc2: AmbiguityErrorMisc::None,
     .                                           });
     .                                       }
     .                                   }
     .           
 6,320 ( 0.00%)                          if !self.is_accessible_from(binding.vis, parent_scope.module) {
     .                                       self.privacy_errors.push(PrivacyError {
     .                                           ident,
     .                                           binding,
     .                                           dedup_span: path_span,
     .                                       });
     .                                   }
     .           
     .                                   Ok(binding)
     .                               }
     .                           });
     .                   }
     .           
     .                   // Items and single imports are not shadowable, if we have one, then it's determined.
 5,322 ( 0.00%)          if let Some(binding) = resolution.binding {
    25 ( 0.00%)              if !binding.is_glob_import() {
     .                           return check_usable(self, binding);
     .                       }
     .                   }
     .           
     .                   // --- From now on we either have a glob resolution or no resolution. ---
     .           
     .                   // Check if one of single imports can still define the name,
     .                   // if it can then our result is not determined and can be invalidated.
14,070 ( 0.01%)          for single_import in &resolution.single_imports {
     .                       if !self.is_accessible_from(single_import.vis.get(), parent_scope.module) {
     .                           continue;
     .                       }
     .                       let module = match single_import.imported_module.get() {
     .                           Some(x) => x,
     .                           None => return Err((Undetermined, Weak::No)),
     .                       };
     .                       let ident = match single_import.kind {
-- line 358 ----------------------------------------
-- line 385 ----------------------------------------
     .                   // Additionally, any macro in any module can plant names in the root module if it creates
     .                   // `macro_export` macros, so the root module effectively has unresolved invocations if any
     .                   // module has unresolved invocations.
     .                   // However, it causes resolution/expansion to stuck too often (#53144), so, to make
     .                   // progress, we have to ignore those potential unresolved invocations from other modules
     .                   // and prohibit access to macro-expanded `macro_export` macros instead (unless restricted
     .                   // shadowing is enabled, see `macro_expanded_macro_export_errors`).
     .                   let unexpanded_macros = !module.unexpanded_invocations.borrow().is_empty();
 7,035 ( 0.00%)          if let Some(binding) = resolution.binding {
     .                       if !unexpanded_macros || ns == MacroNS || restricted_shadowing {
     .                           return check_usable(self, binding);
     .                       } else {
     .                           return Err((Undetermined, Weak::No));
     .                       }
     .                   }
     .           
     .                   // --- From now on we have no resolution. ---
-- line 401 ----------------------------------------
-- line 403 ----------------------------------------
     .                   // Now we are in situation when new item/import can appear only from a glob or a macro
     .                   // expansion. With restricted shadowing names from globs and macro expansions cannot
     .                   // shadow names from outer scopes, so we can freely fallback from module search to search
     .                   // in outer scopes. For `early_resolve_ident_in_lexical_scope` to continue search in outer
     .                   // scopes we return `Undetermined` with `Weak::Yes`.
     .           
     .                   // Check if one of unexpanded macros can still define the name,
     .                   // if it can then our "no resolution" result is not determined and can be invalidated.
 1,407 ( 0.00%)          if unexpanded_macros {
     .                       return Err((Undetermined, Weak::Yes));
     .                   }
     .           
     .                   // Check if one of glob imports can still define the name,
     .                   // if it can then our "no resolution" result is not determined and can be invalidated.
 4,764 ( 0.00%)          for glob_import in module.globs.borrow().iter() {
     .                       if !self.is_accessible_from(glob_import.vis.get(), parent_scope.module) {
     .                           continue;
     .                       }
     .                       let module = match glob_import.imported_module.get() {
     .                           Some(ModuleOrUniformRoot::Module(module)) => module,
     .                           Some(_) => continue,
     .                           None => return Err((Undetermined, Weak::Yes)),
     .                       };
-- line 425 ----------------------------------------
-- line 452 ----------------------------------------
     .                               continue;
     .                           }
     .                           Ok(_) | Err(Undetermined) => return Err((Undetermined, Weak::Yes)),
     .                       }
     .                   }
     .           
     .                   // No resolution and no one else can define the name - determinate error.
     .                   Err((Determined, Weak::No))
66,708 ( 0.03%)      }
     .           
     .               // Given a binding and an import that resolves to it,
     .               // return the corresponding binding defined by the import.
   590 ( 0.00%)      crate fn import(
     .                   &self,
     .                   binding: &'a NameBinding<'a>,
     .                   import: &'a Import<'a>,
     .               ) -> &'a NameBinding<'a> {
   590 ( 0.00%)          let vis = if binding.vis.is_at_least(import.vis.get(), self)
     .                       || pub_use_of_private_extern_crate_hack(import, binding)
     .                   {
     .                       import.vis.get()
     .                   } else {
     .                       binding.vis
     .                   };
     .           
   177 ( 0.00%)          if let ImportKind::Glob { ref max_vis, .. } = import.kind {
     .                       if vis == import.vis.get() || vis.is_at_least(max_vis.get(), self) {
     .                           max_vis.set(vis)
     .                       }
     .                   }
     .           
    59 ( 0.00%)          self.arenas.alloc_name_binding(NameBinding {
     .                       kind: NameBindingKind::Import { binding, import, used: Cell::new(false) },
     .                       ambiguity: None,
    59 ( 0.00%)              span: import.span,
     .                       vis,
    59 ( 0.00%)              expansion: import.parent_scope.expansion,
     .                   })
   472 ( 0.00%)      }
     .           
     .               // Define the name or return the existing binding if there is a collision.
 9,804 ( 0.00%)      crate fn try_define(
     .                   &mut self,
     .                   module: Module<'a>,
     .                   key: BindingKey,
     .                   binding: &'a NameBinding<'a>,
     .               ) -> Result<(), &'a NameBinding<'a>> {
     .                   let res = binding.res();
14,706 ( 0.01%)          self.check_reserved_macro_name(key.ident, res);
     .                   self.set_binding_parent_module(binding, module);
 4,902 ( 0.00%)          self.update_resolution(module, key, |this, resolution| {
     .                       if let Some(old_binding) = resolution.binding {
     .                           if res == Res::Err {
     .                               // Do not override real bindings with `Res::Err`s from error recovery.
     .                               return Ok(());
     .                           }
     .                           match (old_binding.is_glob_import(), binding.is_glob_import()) {
     .                               (true, true) => {
     .                                   if res != old_binding.res() {
-- line 510 ----------------------------------------
-- line 535 ----------------------------------------
     .                                   }
     .                                   resolution.shadowed_glob = Some(glob_binding);
     .                               }
     .                               (false, false) => {
     .                                   return Err(old_binding);
     .                               }
     .                           }
     .                       } else {
 2,451 ( 0.00%)                  resolution.binding = Some(binding);
     .                       }
     .           
     .                       Ok(())
     .                   })
 7,353 ( 0.00%)      }
     .           
     .               fn ambiguity(
     .                   &self,
     .                   kind: AmbiguityKind,
     .                   primary_binding: &'a NameBinding<'a>,
     .                   secondary_binding: &'a NameBinding<'a>,
     .               ) -> &'a NameBinding<'a> {
     .                   self.arenas.alloc_name_binding(NameBinding {
-- line 556 ----------------------------------------
-- line 563 ----------------------------------------
     .               // If the resolution becomes a success, define it in the module's glob importers.
     .               fn update_resolution<T, F>(&mut self, module: Module<'a>, key: BindingKey, f: F) -> T
     .               where
     .                   F: FnOnce(&mut Resolver<'a>, &mut NameResolution<'a>) -> T,
     .               {
     .                   // Ensure that `resolution` isn't borrowed when defining in the module's glob importers,
     .                   // during which the resolution might end up getting re-defined via a glob cycle.
     .                   let (binding, t) = {
13,440 ( 0.01%)              let resolution = &mut *self.resolution(module, key).borrow_mut();
     .                       let old_binding = resolution.binding();
     .           
     .                       let t = f(self, resolution);
     .           
     .                       match resolution.binding() {
     .                           _ if old_binding.is_some() => return t,
     .                           None => return t,
     .                           Some(binding) => match old_binding {
-- line 579 ----------------------------------------
-- line 643 ----------------------------------------
     .               // This is a fixed-point algorithm. We resolve imports until our efforts
     .               // are stymied by an unresolved import; then we bail out of the current
     .               // module and continue. We terminate successfully once no more imports
     .               // remain or unsuccessfully when no forward progress in resolving imports
     .               // is made.
     .           
     .               /// Resolves all imports for the crate. This method performs the fixed-
     .               /// point iteration.
    16 ( 0.00%)      pub fn resolve_imports(&mut self) {
    10 ( 0.00%)          let mut prev_num_indeterminates = self.r.indeterminate_imports.len() + 1;
    29 ( 0.00%)          while self.r.indeterminate_imports.len() < prev_num_indeterminates {
     .                       prev_num_indeterminates = self.r.indeterminate_imports.len();
    88 ( 0.00%)              for import in mem::take(&mut self.r.indeterminate_imports) {
     .                           match self.resolve_import(&import) {
    25 ( 0.00%)                      true => self.r.determined_imports.push(import),
    20 ( 0.00%)                      false => self.r.indeterminate_imports.push(import),
     .                           }
     .                       }
     .                   }
    16 ( 0.00%)      }
     .           
     7 ( 0.00%)      pub fn finalize_imports(&mut self) {
     2 ( 0.00%)          for module in self.r.arenas.local_modules().iter() {
    11 ( 0.00%)              self.finalize_resolutions_in(module);
     .                   }
     .           
     .                   let mut seen_spans = FxHashSet::default();
     .                   let mut errors = vec![];
     .                   let mut prev_root_id: NodeId = NodeId::from_u32(0);
     1 ( 0.00%)          let determined_imports = mem::take(&mut self.r.determined_imports);
     1 ( 0.00%)          let indeterminate_imports = mem::take(&mut self.r.indeterminate_imports);
     .           
    12 ( 0.00%)          for (is_indeterminate, import) in determined_imports
     .                       .into_iter()
     .                       .map(|i| (false, i))
     .                       .chain(indeterminate_imports.into_iter().map(|i| (true, i)))
     .                   {
   144 ( 0.00%)              if let Some(err) = self.finalize_import(import) {
     .                           if let ImportKind::Single { source, ref source_bindings, .. } = import.kind {
     .                               if source.name == kw::SelfLower {
     .                                   // Silence `unresolved import` error if E0429 is already emitted
     .                                   if let Err(Determined) = source_bindings.value_ns.get() {
     .                                       continue;
     .                                   }
     .                               }
     .                           }
-- line 688 ----------------------------------------
-- line 703 ----------------------------------------
     .                               let path = import_path_to_string(
     .                                   &import.module_path.iter().map(|seg| seg.ident).collect::<Vec<_>>(),
     .                                   &import.kind,
     .                                   err.span,
     .                               );
     .                               errors.push((path, err));
     .                               prev_root_id = import.root_id;
     .                           }
    48 ( 0.00%)              } else if is_indeterminate {
     .                           // Consider erroneous imports used to avoid duplicate diagnostics.
     .                           self.r.used_imports.insert(import.id);
     .                           let path = import_path_to_string(
     .                               &import.module_path.iter().map(|seg| seg.ident).collect::<Vec<_>>(),
     .                               &import.kind,
     .                               import.span,
     .                           );
     .                           let err = UnresolvedImportError {
-- line 719 ----------------------------------------
-- line 721 ----------------------------------------
     .                               label: None,
     .                               note: Vec::new(),
     .                               suggestion: None,
     .                           };
     .                           errors.push((path, err));
     .                       }
     .                   }
     .           
     1 ( 0.00%)          if !errors.is_empty() {
     .                       self.throw_unresolved_import_error(errors, None);
     .                   }
     8 ( 0.00%)      }
     .           
     .               fn throw_unresolved_import_error(
     .                   &self,
     .                   errors: Vec<(String, UnresolvedImportError)>,
     .                   span: Option<MultiSpan>,
     .               ) {
     .                   /// Upper limit on the number of `span_label` messages.
     .                   const MAX_LABEL_COUNT: usize = 10;
-- line 740 ----------------------------------------
-- line 776 ----------------------------------------
     .               /// If successful, the resolved bindings are written into the module.
     .               fn resolve_import(&mut self, import: &'b Import<'b>) -> bool {
     .                   debug!(
     .                       "(resolving import for module) resolving import `{}::...` in `{}`",
     .                       Segment::names_to_string(&import.module_path),
     .                       module_to_string(import.parent_scope.module).unwrap_or_else(|| "???".to_string()),
     .                   );
     .           
   152 ( 0.00%)          let module = if let Some(module) = import.imported_module.get() {
    40 ( 0.00%)              module
     .                   } else {
     .                       // For better failure detection, pretend that the import will
     .                       // not define any names while resolving its module path.
     .                       let orig_vis = import.vis.replace(ty::Visibility::Invisible);
     .                       let path_res = self.r.resolve_path(
     .                           &import.module_path,
     .                           None,
    24 ( 0.00%)                  &import.parent_scope,
     .                           false,
     .                           import.span,
     .                           import.crate_lint(),
     .                       );
     .                       import.vis.set(orig_vis);
     .           
   168 ( 0.00%)              match path_res {
   120 ( 0.00%)                  PathResult::Module(module) => module,
     .                           PathResult::Indeterminate => return false,
     .                           PathResult::NonModule(..) | PathResult::Failed { .. } => return true,
     .                       }
     .                   };
     .           
     .                   import.imported_module.set(Some(module));
   521 ( 0.00%)          let (source, target, source_bindings, target_bindings, type_ns_only) = match import.kind {
     .                       ImportKind::Single {
     .                           source,
     .                           target,
    43 ( 0.00%)                  ref source_bindings,
    43 ( 0.00%)                  ref target_bindings,
    43 ( 0.00%)                  type_ns_only,
     .                           ..
     .                       } => (source, target, source_bindings, target_bindings, type_ns_only),
     .                       ImportKind::Glob { .. } => {
     .                           self.resolve_glob_import(import);
     .                           return true;
     .                       }
     .                       _ => unreachable!(),
     .                   };
     .           
    43 ( 0.00%)          let mut indeterminate = false;
 1,849 ( 0.00%)          self.r.per_ns(|this, ns| {
   387 ( 0.00%)              if !type_ns_only || ns == TypeNS {
   516 ( 0.00%)                  if let Err(Undetermined) = source_bindings[ns].get() {
     .                               // For better failure detection, pretend that the import will
     .                               // not define any names while resolving its module path.
   129 ( 0.00%)                      let orig_vis = import.vis.replace(ty::Visibility::Invisible);
     .                               let binding = this.resolve_ident_in_module(
   387 ( 0.00%)                          module,
   387 ( 0.00%)                          source,
     .                                   ns,
   129 ( 0.00%)                          &import.parent_scope,
     .                                   false,
   129 ( 0.00%)                          import.span,
     .                               );
     .                               import.vis.set(orig_vis);
     .                               source_bindings[ns].set(binding);
     .                           } else {
     .                               return;
     .                           };
     .           
   129 ( 0.00%)                  let parent = import.parent_scope.module;
   341 ( 0.00%)                  match source_bindings[ns].get() {
   180 ( 0.00%)                      Err(Undetermined) => indeterminate = true,
     .                               // Don't update the resolution, because it was never added.
    92 ( 0.00%)                      Err(Determined) if target.name == kw::Underscore => {}
     .                               Err(Determined) => {
    92 ( 0.00%)                          let key = this.new_key(target, ns);
     .                                   this.update_resolution(parent, key, |_, resolution| {
    92 ( 0.00%)                              resolution.single_imports.remove(&PtrKey(import));
     .                                   });
     .                               }
     .                               Ok(binding) if !binding.is_importable() => {
     .                                   let msg = format!("`{}` is not directly importable", target);
     .                                   struct_span_err!(this.session, import.span, E0253, "{}", &msg)
     .                                       .span_label(import.span, "cannot be imported directly")
     .                                       .emit();
     .                                   // Do not import this illegal binding. Import a dummy binding and pretend
     .                                   // everything is fine
     .                                   this.import_dummy_binding(import);
     .                               }
     .                               Ok(binding) => {
    92 ( 0.00%)                          let imported_binding = this.import(binding, import);
    23 ( 0.00%)                          target_bindings[ns].set(Some(imported_binding));
    69 ( 0.00%)                          this.define(parent, target, ns, imported_binding);
     .                               }
     .                           }
     .                       }
 1,032 ( 0.00%)          });
     .           
   109 ( 0.00%)          !indeterminate
     .               }
     .           
     .               /// Performs final import resolution, consistency checks and error reporting.
     .               ///
     .               /// Optionally returns an unresolved import error. This error is buffered and used to
     .               /// consolidate multiple unresolved import errors into a single diagnostic.
   240 ( 0.00%)      fn finalize_import(&mut self, import: &'b Import<'b>) -> Option<UnresolvedImportError> {
     .                   let orig_vis = import.vis.replace(ty::Visibility::Invisible);
    96 ( 0.00%)          let orig_unusable_binding = match &import.kind {
     .                       ImportKind::Single { target_bindings, .. } => {
    46 ( 0.00%)                  Some(mem::replace(&mut self.r.unusable_binding, target_bindings[TypeNS].get()))
     .                       }
     .                       _ => None,
     .                   };
    48 ( 0.00%)          let prev_ambiguity_errors_len = self.r.ambiguity_errors.len();
     .                   let path_res = self.r.resolve_path(
     .                       &import.module_path,
     .                       None,
    24 ( 0.00%)              &import.parent_scope,
     .                       true,
    24 ( 0.00%)              import.span,
     .                       import.crate_lint(),
     .                   );
    24 ( 0.00%)          let no_ambiguity = self.r.ambiguity_errors.len() == prev_ambiguity_errors_len;
    24 ( 0.00%)          if let Some(orig_unusable_binding) = orig_unusable_binding {
    23 ( 0.00%)              self.r.unusable_binding = orig_unusable_binding;
     .                   }
     .                   import.vis.set(orig_vis);
   120 ( 0.00%)          if let PathResult::Failed { .. } | PathResult::NonModule(..) = path_res {
     .                       // Consider erroneous imports used to avoid duplicate diagnostics.
     .                       self.r.used_imports.insert(import.id);
     .                   }
     .                   let module = match path_res {
    72 ( 0.00%)              PathResult::Module(module) => {
     .                           // Consistency checks, analogous to `finalize_macro_resolutions`.
    72 ( 0.00%)                  if let Some(initial_module) = import.imported_module.get() {
    72 ( 0.00%)                      if !ModuleOrUniformRoot::same_def(module, initial_module) && no_ambiguity {
     .                                   span_bug!(import.span, "inconsistent resolution for an import");
     .                               }
     .                           } else if self.r.privacy_errors.is_empty() {
     .                               let msg = "cannot determine resolution for the import";
     .                               let msg_note = "import resolution is stuck, try simplifying other imports";
     .                               self.r.session.struct_span_err(import.span, msg).note(msg_note).emit();
     .                           }
     .           
    72 ( 0.00%)                  module
     .                       }
     .                       PathResult::Failed { is_error_from_last_segment: false, span, label, suggestion } => {
     .                           if no_ambiguity {
     .                               assert!(import.imported_module.get().is_none());
     .                               self.r
     .                                   .report_error(span, ResolutionError::FailedToResolve { label, suggestion });
     .                           }
     .                           return None;
-- line 928 ----------------------------------------
-- line 961 ----------------------------------------
     .                               assert!(import.imported_module.get().is_none());
     .                           }
     .                           // The error was already reported earlier.
     .                           return None;
     .                       }
     .                       PathResult::Indeterminate => unreachable!(),
     .                   };
     .           
   281 ( 0.00%)          let (ident, target, source_bindings, target_bindings, type_ns_only) = match import.kind {
     .                       ImportKind::Single {
     .                           source,
     .                           target,
    23 ( 0.00%)                  ref source_bindings,
    23 ( 0.00%)                  ref target_bindings,
    23 ( 0.00%)                  type_ns_only,
     .                           ..
     .                       } => (source, target, source_bindings, target_bindings, type_ns_only),
     2 ( 0.00%)              ImportKind::Glob { is_prelude, ref max_vis } => {
     3 ( 0.00%)                  if import.module_path.len() <= 1 {
     .                               // HACK(eddyb) `lint_if_path_starts_with_module` needs at least
     .                               // 2 segments, so the `resolve_path` above won't trigger it.
     .                               let mut full_path = import.module_path.clone();
     .                               full_path.push(Segment::from_ident(Ident::empty()));
     .                               self.r.lint_if_path_starts_with_module(
     .                                   import.crate_lint(),
     .                                   &full_path,
     .                                   import.span,
     .                                   None,
     .                               );
     .                           }
     .           
     4 ( 0.00%)                  if let ModuleOrUniformRoot::Module(module) = module {
     1 ( 0.00%)                      if ptr::eq(module, import.parent_scope.module) {
     .                                   // Importing a module into itself is not allowed.
     .                                   return Some(UnresolvedImportError {
     .                                       span: import.span,
     .                                       label: Some(String::from("cannot glob-import a module into itself")),
     .                                       note: Vec::new(),
     .                                       suggestion: None,
     .                                   });
     .                               }
     .                           }
     1 ( 0.00%)                  if !is_prelude &&
     .                              max_vis.get() != ty::Visibility::Invisible && // Allow empty globs.
     .                              !max_vis.get().is_at_least(import.vis.get(), &*self)
     .                           {
     .                               let msg = "glob import doesn't reexport anything because no candidate is public enough";
     .                               self.r.lint_buffer.buffer_lint(UNUSED_IMPORTS, import.id, import.span, msg);
     .                           }
     .                           return None;
     .                       }
     .                       _ => unreachable!(),
     .                   };
     .           
    46 ( 0.00%)          let mut all_ns_err = true;
 1,058 ( 0.00%)          self.r.per_ns(|this, ns| {
   207 ( 0.00%)              if !type_ns_only || ns == TypeNS {
    69 ( 0.00%)                  let orig_vis = import.vis.replace(ty::Visibility::Invisible);
     .                           let orig_unusable_binding =
   138 ( 0.00%)                      mem::replace(&mut this.unusable_binding, target_bindings[ns].get());
     .                           let orig_last_import_segment = mem::replace(&mut this.last_import_segment, true);
     .                           let binding = this.resolve_ident_in_module(
   207 ( 0.00%)                      module,
   276 ( 0.00%)                      ident,
     .                               ns,
    69 ( 0.00%)                      &import.parent_scope,
     .                               true,
     .                               import.span,
     .                           );
   138 ( 0.00%)                  this.last_import_segment = orig_last_import_segment;
   138 ( 0.00%)                  this.unusable_binding = orig_unusable_binding;
     .                           import.vis.set(orig_vis);
     .           
     .                           match binding {
     .                               Ok(binding) => {
     .                                   // Consistency checks, analogous to `finalize_macro_resolutions`.
    69 ( 0.00%)                          let initial_res = source_bindings[ns].get().map(|initial_binding| {
    23 ( 0.00%)                              all_ns_err = false;
    69 ( 0.00%)                              if let Some(target_binding) = target_bindings[ns].get() {
    23 ( 0.00%)                                  if target.name == kw::Underscore
     .                                               && initial_binding.is_extern_crate()
     .                                               && !initial_binding.is_import()
     .                                           {
     .                                               this.record_use(
     .                                                   ident,
     .                                                   target_binding,
     .                                                   import.module_path.is_empty(),
     .                                               );
     .                                           }
     .                                       }
     .                                       initial_binding.res()
     .                                   });
     .                                   let res = binding.res();
   322 ( 0.00%)                          if let Ok(initial_res) = initial_res {
    69 ( 0.00%)                              if res != initial_res && this.ambiguity_errors.is_empty() {
     .                                           span_bug!(import.span, "inconsistent resolution for an import");
     .                                       }
     .                                   } else if res != Res::Err
     .                                       && this.ambiguity_errors.is_empty()
     .                                       && this.privacy_errors.is_empty()
     .                                   {
     .                                       let msg = "cannot determine resolution for the import";
     .                                       let msg_note =
-- line 1063 ----------------------------------------
-- line 1070 ----------------------------------------
     .                                   // single import (see test `issue-55884-2.rs`). In theory single imports should
     .                                   // always block globs, even if they are not yet resolved, so that this kind of
     .                                   // self-inconsistent resolution never happens.
     .                                   // Re-enable the assert when the issue is fixed.
     .                                   // assert!(result[ns].get().is_err());
     .                               }
     .                           }
     .                       }
   552 ( 0.00%)          });
     .           
    46 ( 0.00%)          if all_ns_err {
     .                       let mut all_ns_failed = true;
     .                       self.r.per_ns(|this, ns| {
     .                           if !type_ns_only || ns == TypeNS {
     .                               let binding = this.resolve_ident_in_module(
     .                                   module,
     .                                   ident,
     .                                   ns,
     .                                   &import.parent_scope,
-- line 1088 ----------------------------------------
-- line 1175 ----------------------------------------
     .                           })
     .                       } else {
     .                           // `resolve_ident_in_module` reported a privacy error.
     .                           self.r.import_dummy_binding(import);
     .                           None
     .                       };
     .                   }
     .           
    23 ( 0.00%)          let mut reexport_error = None;
    23 ( 0.00%)          let mut any_successful_reexport = false;
    46 ( 0.00%)          let mut crate_private_reexport = false;
   276 ( 0.00%)          self.r.per_ns(|this, ns| {
   161 ( 0.00%)              if let Ok(binding) = source_bindings[ns].get() {
    69 ( 0.00%)                  let vis = import.vis.get();
   138 ( 0.00%)                  if !binding.vis.is_at_least(vis, &*this) {
     .                               reexport_error = Some((ns, binding));
     .                               if let ty::Visibility::Restricted(binding_def_id) = binding.vis {
     .                                   if binding_def_id.is_top_level_module() {
     .                                       crate_private_reexport = true;
     .                                   }
     .                               }
     .                           } else {
    46 ( 0.00%)                      any_successful_reexport = true;
     .                           }
     .                       }
     .                   });
     .           
     .                   // All namespaces must be re-exported with extra visibility for an error to occur.
    46 ( 0.00%)          if !any_successful_reexport {
     .                       let (ns, binding) = reexport_error.unwrap();
     .                       if pub_use_of_private_extern_crate_hack(import, binding) {
     .                           let msg = format!(
     .                               "extern crate `{}` is private, and cannot be \
     .                                              re-exported (error E0365), consider declaring with \
     .                                              `pub`",
     .                               ident
     .                           );
-- line 1211 ----------------------------------------
-- line 1241 ----------------------------------------
     .                                   format!("consider marking `{}` as `pub` in the imported module", ident);
     .                               struct_span_err!(self.r.session, import.span, E0364, "{}", error_msg)
     .                                   .span_note(import.span, &note_msg)
     .                                   .emit();
     .                           }
     .                       }
     .                   }
     .           
    69 ( 0.00%)          if import.module_path.len() <= 1 {
     .                       // HACK(eddyb) `lint_if_path_starts_with_module` needs at least
     .                       // 2 segments, so the `resolve_path` above won't trigger it.
     .                       let mut full_path = import.module_path.clone();
    51 ( 0.00%)              full_path.push(Segment::from_ident(ident));
   119 ( 0.00%)              self.r.per_ns(|this, ns| {
   102 ( 0.00%)                  if let Ok(binding) = source_bindings[ns].get() {
    51 ( 0.00%)                      this.lint_if_path_starts_with_module(
     .                                   import.crate_lint(),
     .                                   &full_path,
    17 ( 0.00%)                          import.span,
     .                                   Some(binding),
     .                               );
     .                           }
     .                       });
     .                   }
     .           
     .                   // Record what this import resolves to for later uses in documentation,
     .                   // this may resolve to either a value or a type, but for documentation
     .                   // purposes it's good enough to just favor one over the other.
   644 ( 0.00%)          self.r.per_ns(|this, ns| {
   276 ( 0.00%)              if let Ok(binding) = source_bindings[ns].get() {
   368 ( 0.00%)                  this.import_res_map.entry(import.id).or_default()[ns] = Some(binding.res());
     .                       }
   552 ( 0.00%)          });
     .           
   207 ( 0.00%)          self.check_for_redundant_imports(ident, import, source_bindings, target_bindings, target);
     .           
     .                   debug!("(resolving single import) successfully resolved import");
     .                   None
   192 ( 0.00%)      }
     .           
     .               fn check_for_redundant_imports(
     .                   &mut self,
     .                   ident: Ident,
     .                   import: &'b Import<'b>,
     .                   source_bindings: &PerNS<Cell<Result<&'b NameBinding<'b>, Determinacy>>>,
     .                   target_bindings: &PerNS<Cell<Option<&'b NameBinding<'b>>>>,
     .                   target: Ident,
     .               ) {
     .                   // Skip if the import was produced by a macro.
    23 ( 0.00%)          if import.parent_scope.expansion != LocalExpnId::ROOT {
     .                       return;
     .                   }
     .           
     .                   // Skip if we are inside a named module (in contrast to an anonymous
     .                   // module defined by a block).
    69 ( 0.00%)          if let ModuleKind::Def(..) = import.parent_scope.module.kind {
     .                       return;
     .                   }
     .           
     .                   let mut is_redundant = PerNS { value_ns: None, type_ns: None, macro_ns: None };
     .           
     .                   let mut redundant_span = PerNS { value_ns: None, type_ns: None, macro_ns: None };
     .           
     .                   self.r.per_ns(|this, ns| {
-- line 1304 ----------------------------------------
-- line 1350 ----------------------------------------
     .                   let module = match import.imported_module.get().unwrap() {
     .                       ModuleOrUniformRoot::Module(module) => module,
     .                       _ => {
     .                           self.r.session.span_err(import.span, "cannot glob-import all possible crates");
     .                           return;
     .                       }
     .                   };
     .           
     3 ( 0.00%)          if module.is_trait() {
     .                       self.r.session.span_err(import.span, "items in traits are not importable");
     .                       return;
     1 ( 0.00%)          } else if ptr::eq(module, import.parent_scope.module) {
     .                       return;
     4 ( 0.00%)          } else if let ImportKind::Glob { is_prelude: true, .. } = import.kind {
     2 ( 0.00%)              self.r.prelude = Some(module);
     .                       return;
     .                   }
     .           
     .                   // Add to module's glob_importers
     .                   module.glob_importers.borrow_mut().push(import);
     .           
     .                   // Ensure that `resolutions` isn't borrowed during `try_define`,
     .                   // since it might get updated via a glob cycle.
-- line 1372 ----------------------------------------
-- line 1394 ----------------------------------------
     .                   // Record the destination of this import
     .                   self.r.record_partial_res(import.id, PartialRes::new(module.res().unwrap()));
     .               }
     .           
     .               // Miscellaneous post-processing, including recording re-exports,
     .               // reporting conflicts, and reporting unresolved imports.
     .               fn finalize_resolutions_in(&mut self, module: Module<'b>) {
     .                   // Since import resolution is finished, globs will not define any more names.
    44 ( 0.00%)          *module.globs.borrow_mut() = Vec::new();
     .           
     .                   let mut reexports = Vec::new();
     .           
    55 ( 0.00%)          module.for_each_child(self.r, |_, ident, _, binding| {
     .                       // Filter away ambiguous imports and anything that has def-site hygiene.
     .                       // FIXME: Implement actual cross-crate hygiene.
     .                       let is_good_import =
    90 ( 0.00%)                  binding.is_import() && !binding.is_ambiguity() && !ident.span.from_expansion();
   195 ( 0.00%)              if is_good_import || binding.is_macro_def() {
     .                           let res = binding.res().expect_non_local();
     .                           if res != def::Res::Err {
    92 ( 0.00%)                      reexports.push(ModChild { ident, res, vis: binding.vis, span: binding.span });
     .                           }
     .                       }
     .                   });
     .           
    11 ( 0.00%)          if !reexports.is_empty() {
    21 ( 0.00%)              if let Some(def_id) = module.opt_def_id() {
     .                           // Call to `expect_local` should be fine because current
     .                           // code is only called for local modules.
     .                           self.r.reexport_map.insert(def_id.expect_local(), reexports);
     .                       }
     .                   }
     .               }
     .           }
     .           
-- line 1428 ----------------------------------------

21,129 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_resolve/src/imports.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 111 ----------------------------------------
        .           const EMPTY: u8 = 0b1111_1111;
        .           
        .           /// Control byte value for a deleted bucket.
        .           const DELETED: u8 = 0b1000_0000;
        .           
        .           /// Checks whether a control byte represents a full bucket (top bit is clear).
        .           #[inline]
        .           fn is_full(ctrl: u8) -> bool {
  290,179 ( 0.11%)      ctrl & 0x80 == 0
        .           }
        .           
        .           /// Checks whether a control byte represents a special value (top bit is set).
        .           #[inline]
        .           fn is_special(ctrl: u8) -> bool {
        .               ctrl & 0x80 != 0
        .           }
        .           
        .           /// Checks whether a special control value is EMPTY (just check 1 bit).
        .           #[inline]
        .           fn special_is_empty(ctrl: u8) -> bool {
        .               debug_assert!(is_special(ctrl));
   20,763 ( 0.01%)      ctrl & 0x01 != 0
        .           }
        .           
        .           /// Primary hash function, used to select the initial bucket to probe from.
        .           #[inline]
        .           #[allow(clippy::cast_possible_truncation)]
        .           fn h1(hash: u64) -> usize {
        .               // On 32-bit platforms we simply ignore the higher hash bits.
        .               hash as usize
-- line 140 ----------------------------------------
-- line 143 ----------------------------------------
        .           /// Secondary hash function, saved in the low 7 bits of the control byte.
        .           #[inline]
        .           #[allow(clippy::cast_possible_truncation)]
        .           fn h2(hash: u64) -> u8 {
        .               // Grab the top 7 bits of the hash. While the hash is normally a full 64-bit
        .               // value, some hash functions (such as FxHash) produce a usize result
        .               // instead, which means that the top 32 bits are 0 on 32-bit platforms.
        .               let hash_len = usize::min(mem::size_of::<usize>(), mem::size_of::<u64>());
4,094,067 ( 1.59%)      let top7 = hash >> (hash_len * 8 - 7);
        .               (top7 & 0x7f) as u8 // truncation
        .           }
        .           
        .           /// Probe sequence based on triangular numbers, which is guaranteed (since our
        .           /// table size is a power of two) to visit every group of elements exactly once.
        .           ///
        .           /// A triangular probe has us jump by 1 more group every time. So first we
        .           /// jump by 1 group (meaning we just continue our linear scan), then 2 groups
-- line 159 ----------------------------------------
-- line 170 ----------------------------------------
        .               #[inline]
        .               fn move_next(&mut self, bucket_mask: usize) {
        .                   // We should have found an empty bucket by now and ended the probe.
        .                   debug_assert!(
        .                       self.stride <= bucket_mask,
        .                       "Went past end of probe sequence"
        .                   );
        .           
   24,750 ( 0.01%)          self.stride += Group::WIDTH;
   24,750 ( 0.01%)          self.pos += self.stride;
   20,642 ( 0.01%)          self.pos &= bucket_mask;
        .               }
        .           }
        .           
        .           /// Returns the number of buckets needed to hold the given number of items,
        .           /// taking the maximum load factor into account.
        .           ///
        .           /// Returns `None` if an overflow occurs.
        .           // Workaround for emscripten bug emscripten-core/emscripten-fastcomp#258
        .           #[cfg_attr(target_os = "emscripten", inline(never))]
        .           #[cfg_attr(not(target_os = "emscripten"), inline)]
        .           fn capacity_to_buckets(cap: usize) -> Option<usize> {
        .               debug_assert_ne!(cap, 0);
        .           
        .               // For small tables we require at least 1 empty bucket so that lookups are
        .               // guaranteed to terminate if an element doesn't exist in the table.
   22,822 ( 0.01%)      if cap < 8 {
        .                   // We don't bother with a table size of 2 buckets since that can only
        .                   // hold a single element. Instead we skip directly to a 4 bucket table
        .                   // which can hold 3 elements.
   47,280 ( 0.02%)          return Some(if cap < 4 { 4 } else { 8 });
        .               }
        .           
        .               // Otherwise require 1/8 buckets to be empty (87.5% load)
        .               //
        .               // Be careful when modifying this, calculate_layout relies on the
        .               // overflow check here.
   11,730 ( 0.00%)      let adjusted_cap = cap.checked_mul(8)? / 7;
        .           
        .               // Any overflows will have been caught by the checked_mul. Also, any
        .               // rounding errors from the division above will be cleaned up by
        .               // next_power_of_two (which can't overflow because of the previous division).
        .               Some(adjusted_cap.next_power_of_two())
        .           }
        .           
        .           /// Returns the maximum effective capacity for the given bucket mask, taking
        .           /// the maximum load factor into account.
        .           #[inline]
        .           fn bucket_mask_to_capacity(bucket_mask: usize) -> usize {
   58,921 ( 0.02%)      if bucket_mask < 8 {
        .                   // For tables with 1/2/4/8 buckets, we always reserve one empty slot.
        .                   // Keep in mind that the bucket mask is one less than the bucket count.
        .                   bucket_mask
        .               } else {
        .                   // For larger tables we reserve 12.5% of the slots as empty.
   17,712 ( 0.01%)          ((bucket_mask + 1) / 8) * 7
        .               }
        .           }
        .           
        .           /// Helper which allows the max calculation for ctrl_align to be statically computed for each T
        .           /// while keeping the rest of `calculate_layout_for` independent of `T`
        .           #[derive(Copy, Clone)]
        .           struct TableLayout {
        .               size: usize,
-- line 233 ----------------------------------------
-- line 246 ----------------------------------------
        .           
        .               #[inline]
        .               fn calculate_layout_for(self, buckets: usize) -> Option<(Layout, usize)> {
        .                   debug_assert!(buckets.is_power_of_two());
        .           
        .                   let TableLayout { size, ctrl_align } = self;
        .                   // Manual layout calculation since Layout methods are not yet stable.
        .                   let ctrl_offset =
   48,749 ( 0.02%)              size.checked_mul(buckets)?.checked_add(ctrl_align - 1)? & !(ctrl_align - 1);
   63,530 ( 0.02%)          let len = ctrl_offset.checked_add(buckets + Group::WIDTH)?;
        .           
        .                   Some((
        .                       unsafe { Layout::from_size_align_unchecked(len, ctrl_align) },
        .                       ctrl_offset,
        .                   ))
        .               }
        .           }
        .           
-- line 263 ----------------------------------------
-- line 337 ----------------------------------------
        .                   }
        .               }
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub unsafe fn drop(&self) {
        .                   self.as_ptr().drop_in_place();
        .               }
        .               #[inline]
        .               pub unsafe fn read(&self) -> T {
      238 ( 0.00%)          self.as_ptr().read()
        .               }
        .               #[inline]
        .               pub unsafe fn write(&self, val: T) {
        .                   self.as_ptr().write(val);
        .               }
        .               #[inline]
        .               pub unsafe fn as_ref<'a>(&self) -> &'a T {
        .                   &*self.as_ptr()
-- line 353 ----------------------------------------
-- line 422 ----------------------------------------
        .               /// Creates a new empty hash table without allocating any memory, using the
        .               /// given allocator.
        .               ///
        .               /// In effect this returns a table with exactly 1 bucket. However we can
        .               /// leave the data pointer dangling since that bucket is never written to
        .               /// due to our load factor forcing us to always have at least 1 free bucket.
        .               #[inline]
        .               pub fn new_in(alloc: A) -> Self {
       24 ( 0.00%)          Self {
        .                       table: RawTableInner::new_in(alloc),
        .                       marker: PhantomData,
        .                   }
        .               }
        .           
        .               /// Allocates a new hash table with the given number of buckets.
        .               ///
        .               /// The control bytes are left uninitialized.
-- line 438 ----------------------------------------
-- line 440 ----------------------------------------
        .               unsafe fn new_uninitialized(
        .                   alloc: A,
        .                   buckets: usize,
        .                   fallibility: Fallibility,
        .               ) -> Result<Self, TryReserveError> {
        .                   debug_assert!(buckets.is_power_of_two());
        .           
        .                   Ok(Self {
       10 ( 0.00%)              table: RawTableInner::new_uninitialized(
        .                           alloc,
        .                           TableLayout::new::<T>(),
        .                           buckets,
        .                           fallibility,
        .                       )?,
        .                       marker: PhantomData,
        .                   })
        .               }
-- line 456 ----------------------------------------
-- line 458 ----------------------------------------
        .               /// Attempts to allocate a new hash table with at least enough capacity
        .               /// for inserting the given number of elements without reallocating.
        .               fn fallible_with_capacity(
        .                   alloc: A,
        .                   capacity: usize,
        .                   fallibility: Fallibility,
        .               ) -> Result<Self, TryReserveError> {
        .                   Ok(Self {
    1,651 ( 0.00%)              table: RawTableInner::fallible_with_capacity(
        .                           alloc,
        .                           TableLayout::new::<T>(),
        .                           capacity,
        .                           fallibility,
        .                       )?,
        .                       marker: PhantomData,
        .                   })
        .               }
-- line 474 ----------------------------------------
-- line 527 ----------------------------------------
        .                   debug_assert_ne!(self.table.bucket_mask, 0);
        .                   debug_assert!(index < self.buckets());
        .                   Bucket::from_base_index(self.data_end(), index)
        .               }
        .           
        .               /// Erases an element from the table without dropping it.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[deprecated(since = "0.8.1", note = "use erase or remove instead")]
    3,173 ( 0.00%)      pub unsafe fn erase_no_drop(&mut self, item: &Bucket<T>) {
    3,173 ( 0.00%)          let index = self.bucket_index(item);
        .                   self.table.erase(index);
    6,346 ( 0.00%)      }
        .           
        .               /// Erases an element from the table, dropping it in place.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[allow(clippy::needless_pass_by_value)]
        .               #[allow(deprecated)]
        .               pub unsafe fn erase(&mut self, item: Bucket<T>) {
        .                   // Erase the element from the table first since drop might panic.
    1,216 ( 0.00%)          self.erase_no_drop(&item);
        .                   item.drop();
        .               }
        .           
        .               /// Finds and erases an element from the table, dropping it in place.
        .               /// Returns true if an element was found.
        .               #[cfg(feature = "raw")]
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn erase_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> bool {
-- line 554 ----------------------------------------
-- line 563 ----------------------------------------
        .                   }
        .               }
        .           
        .               /// Removes an element from the table, returning it.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[allow(clippy::needless_pass_by_value)]
        .               #[allow(deprecated)]
        .               pub unsafe fn remove(&mut self, item: Bucket<T>) -> T {
    5,130 ( 0.00%)          self.erase_no_drop(&item);
       77 ( 0.00%)          item.read()
        .               }
        .           
        .               /// Finds and removes an element from the table, returning it.
        .               #[cfg_attr(feature = "inline-more", inline)]
  101,543 ( 0.04%)      pub fn remove_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<T> {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
       78 ( 0.00%)          match self.find(hash, eq) {
      957 ( 0.00%)              Some(bucket) => Some(unsafe { self.remove(bucket) }),
   23,800 ( 0.01%)              None => None,
        .                   }
  147,718 ( 0.06%)      }
        .           
        .               /// Marks all table buckets as empty without dropping their contents.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn clear_no_drop(&mut self) {
        .                   self.table.clear_no_drop();
        .               }
        .           
        .               /// Removes all elements from the table without freeing the backing memory.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn clear(&mut self) {
        .                   // Ensure that the table is reset even if one of the drops panic
        .                   let mut self_ = guard(self, |self_| self_.clear_no_drop());
        .                   unsafe {
        1 ( 0.00%)              self_.drop_elements();
        .                   }
        .               }
        .           
        7 ( 0.00%)      unsafe fn drop_elements(&mut self) {
    2,076 ( 0.00%)          if mem::needs_drop::<T>() && !self.is_empty() {
        .                       for item in self.iter() {
        .                           item.drop();
        .                       }
        .                   }
        8 ( 0.00%)      }
        .           
        .               /// Shrinks the table to fit `max(self.len(), min_size)` elements.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn shrink_to(&mut self, min_size: usize, hasher: impl Fn(&T) -> u64) {
        .                   // Calculate the minimal number of elements that we need to reserve
        .                   // space for.
        .                   let min_size = usize::max(self.table.items, min_size);
        .                   if min_size == 0 {
-- line 615 ----------------------------------------
-- line 642 ----------------------------------------
        .                       }
        .                   }
        .               }
        .           
        .               /// Ensures that at least `additional` items can be inserted into the table
        .               /// without reallocation.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn reserve(&mut self, additional: usize, hasher: impl Fn(&T) -> u64) {
   55,391 ( 0.02%)          if additional > self.table.growth_left {
        .                       // Avoid `Result::unwrap_or_else` because it bloats LLVM IR.
   38,231 ( 0.01%)              if self
        .                           .reserve_rehash(additional, hasher, Fallibility::Infallible)
        .                           .is_err()
        .                       {
        .                           unsafe { hint::unreachable_unchecked() }
        .                       }
        .                   }
        .               }
        .           
-- line 660 ----------------------------------------
-- line 671 ----------------------------------------
        .                   } else {
        .                       Ok(())
        .                   }
        .               }
        .           
        .               /// Out-of-line slow path for `reserve` and `try_reserve`.
        .               #[cold]
        .               #[inline(never)]
   90,751 ( 0.04%)      fn reserve_rehash(
        .                   &mut self,
        .                   additional: usize,
        .                   hasher: impl Fn(&T) -> u64,
        .                   fallibility: Fallibility,
        .               ) -> Result<(), TryReserveError> {
        .                   unsafe {
        .                       self.table.reserve_rehash_inner(
        .                           additional,
-- line 687 ----------------------------------------
-- line 690 ----------------------------------------
        .                           TableLayout::new::<T>(),
        .                           if mem::needs_drop::<T>() {
        .                               Some(mem::transmute(ptr::drop_in_place::<T> as unsafe fn(*mut T)))
        .                           } else {
        .                               None
        .                           },
        .                       )
        .                   }
   61,192 ( 0.02%)      }
        .           
        .               /// Allocates a new table of a different size and moves the contents of the
        .               /// current table into it.
        .               fn resize(
        .                   &mut self,
        .                   capacity: usize,
        .                   hasher: impl Fn(&T) -> u64,
        .                   fallibility: Fallibility,
-- line 706 ----------------------------------------
-- line 714 ----------------------------------------
        .                       )
        .                   }
        .               }
        .           
        .               /// Inserts a new element into the table, and returns its raw bucket.
        .               ///
        .               /// This does not check if the given element already exists in the table.
        .               #[cfg_attr(feature = "inline-more", inline)]
  436,012 ( 0.17%)      pub fn insert(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> Bucket<T> {
        .                   unsafe {
        .                       let mut index = self.table.find_insert_slot(hash);
        .           
        .                       // We can avoid growing the table once we have reached our load
        .                       // factor if we are replacing a tombstone. This works since the
        .                       // number of EMPTY slots does not change in this case.
    1,014 ( 0.00%)              let old_ctrl = *self.table.ctrl(index);
  295,203 ( 0.11%)              if unlikely(self.table.growth_left == 0 && special_is_empty(old_ctrl)) {
        .                           self.reserve(1, hasher);
        .                           index = self.table.find_insert_slot(hash);
        .                       }
        .           
        .                       self.table.record_item_insert_at(index, old_ctrl, hash);
        .           
        .                       let bucket = self.bucket(index);
        2 ( 0.00%)              bucket.write(value);
        .                       bucket
        .                   }
  320,722 ( 0.12%)      }
        .           
        .               /// Attempts to insert a new element without growing the table and return its raw bucket.
        .               ///
        .               /// Returns an `Err` containing the given element if inserting it would require growing the
        .               /// table.
        .               ///
        .               /// This does not check if the given element already exists in the table.
        .               #[cfg(feature = "raw")]
-- line 749 ----------------------------------------
-- line 760 ----------------------------------------
        .                       }
        .                   }
        .               }
        .           
        .               /// Inserts a new element into the table, and returns a mutable reference to it.
        .               ///
        .               /// This does not check if the given element already exists in the table.
        .               #[cfg_attr(feature = "inline-more", inline)]
  107,008 ( 0.04%)      pub fn insert_entry(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> &mut T {
       12 ( 0.00%)          unsafe { self.insert(hash, value, hasher).as_mut() }
   80,256 ( 0.03%)      }
        .           
        .               /// Inserts a new element into the table, without growing the table.
        .               ///
        .               /// There must be enough space in the table to insert the new element.
        .               ///
        .               /// This does not check if the given element already exists in the table.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[cfg(any(feature = "raw", feature = "rustc-internal-api"))]
       80 ( 0.00%)      pub unsafe fn insert_no_grow(&mut self, hash: u64, value: T) -> Bucket<T> {
   58,780 ( 0.02%)          let (index, old_ctrl) = self.table.prepare_insert_slot(hash);
    1,249 ( 0.00%)          let bucket = self.table.bucket(index);
        .           
        .                   // If we are replacing a DELETED entry then we don't need to update
        .                   // the load counter.
  121,046 ( 0.05%)          self.table.growth_left -= special_is_empty(old_ctrl) as usize;
        .           
        .                   bucket.write(value);
   98,417 ( 0.04%)          self.table.items += 1;
        .                   bucket
      150 ( 0.00%)      }
        .           
        .               /// Temporary removes a bucket, applying the given function to the removed
        .               /// element and optionally put back the returned value in the same bucket.
        .               ///
        .               /// Returns `true` if the bucket still contains an element
        .               ///
        .               /// This does not check if the given bucket is actually occupied.
        .               #[cfg_attr(feature = "inline-more", inline)]
-- line 798 ----------------------------------------
-- line 813 ----------------------------------------
        .                       true
        .                   } else {
        .                       false
        .                   }
        .               }
        .           
        .               /// Searches for an element in the table.
        .               #[inline]
      984 ( 0.00%)      pub fn find(&self, hash: u64, mut eq: impl FnMut(&T) -> bool) -> Option<Bucket<T>> {
      569 ( 0.00%)          let result = self.table.find_inner(hash, &mut |index| unsafe {
    4,200 ( 0.00%)              eq(self.bucket(index).as_ref())
       58 ( 0.00%)          });
        .           
        .                   // Avoid `Option::map` because it bloats LLVM IR.
        .                   match result {
       18 ( 0.00%)              Some(index) => Some(unsafe { self.bucket(index) }),
        .                       None => None,
        .                   }
      984 ( 0.00%)      }
        .           
        .               /// Gets a reference to an element in the table.
        .               #[inline]
        .               pub fn get(&self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&T> {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
    2,276 ( 0.00%)          match self.find(hash, eq) {
        .                       Some(bucket) => Some(unsafe { bucket.as_ref() }),
        .                       None => None,
        .                   }
        .               }
        .           
        .               /// Gets a mutable reference to an element in the table.
        .               #[inline]
        .               pub fn get_mut(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&mut T> {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
      648 ( 0.00%)          match self.find(hash, eq) {
        .                       Some(bucket) => Some(unsafe { bucket.as_mut() }),
        .                       None => None,
        .                   }
        .               }
        .           
        .               /// Attempts to get mutable references to `N` entries in the table at once.
        .               ///
        .               /// Returns an array of length `N` with the results of each query.
-- line 855 ----------------------------------------
-- line 920 ----------------------------------------
        .               #[inline]
        .               pub fn len(&self) -> usize {
        .                   self.table.items
        .               }
        .           
        .               /// Returns `true` if the table contains no elements.
        .               #[inline]
        .               pub fn is_empty(&self) -> bool {
  131,422 ( 0.05%)          self.len() == 0
        .               }
        .           
        .               /// Returns the number of buckets in the table.
        .               #[inline]
        .               pub fn buckets(&self) -> usize {
        .                   self.table.bucket_mask + 1
        .               }
        .           
-- line 936 ----------------------------------------
-- line 938 ----------------------------------------
        .               /// the caller to ensure that the `RawTable` outlives the `RawIter`.
        .               /// Because we cannot make the `next` method unsafe on the `RawIter`
        .               /// struct, we have to make the `iter` method unsafe.
        .               #[inline]
        .               pub unsafe fn iter(&self) -> RawIter<T> {
        .                   let data = Bucket::from_base_index(self.data_end(), 0);
        .                   RawIter {
        .                       iter: RawIterRange::new(self.table.ctrl.as_ptr(), data, self.table.buckets()),
   17,815 ( 0.01%)              items: self.table.items,
        .                   }
        .               }
        .           
        .               /// Returns an iterator over occupied buckets that could match a given hash.
        .               ///
        .               /// `RawTable` only stores 7 bits of the hash value, so this iterator may
        .               /// return items that have a hash value different than the one provided. You
        .               /// should always validate the returned values before using them.
-- line 954 ----------------------------------------
-- line 995 ----------------------------------------
        .               /// Iteration starts at the provided iterator's current location.
        .               ///
        .               /// It is up to the caller to ensure that the iterator is valid for this
        .               /// `RawTable` and covers all items that remain in the table.
        .               pub unsafe fn into_iter_from(self, iter: RawIter<T>) -> RawIntoIter<T, A> {
        .                   debug_assert_eq!(iter.len(), self.len());
        .           
        .                   let alloc = self.table.alloc.clone();
    1,940 ( 0.00%)          let allocation = self.into_allocation();
    1,455 ( 0.00%)          RawIntoIter {
    2,425 ( 0.00%)              iter,
        .                       allocation,
        .                       marker: PhantomData,
        .                       alloc,
        .                   }
        .               }
        .           
        .               /// Converts the table into a raw allocation. The contents of the table
        .               /// should be dropped using a `RawIter` before freeing the allocation.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub(crate) fn into_allocation(self) -> Option<(NonNull<u8>, Layout)> {
      895 ( 0.00%)          let alloc = if self.table.is_empty_singleton() {
        .                       None
        .                   } else {
        .                       // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
        .                       let (layout, ctrl_offset) = match calculate_layout::<T>(self.table.buckets()) {
        .                           Some(lco) => lco,
        .                           None => unsafe { hint::unreachable_unchecked() },
        .                       };
        .                       Some((
      171 ( 0.00%)                  unsafe { NonNull::new_unchecked(self.table.ctrl.as_ptr().sub(ctrl_offset)) },
        .                           layout,
        .                       ))
        .                   };
        .                   mem::forget(self);
        .                   alloc
        .               }
        .           }
        .           
-- line 1033 ----------------------------------------
-- line 1042 ----------------------------------------
        .               T: Sync,
        .               A: Sync,
        .           {
        .           }
        .           
        .           impl<A> RawTableInner<A> {
        .               #[inline]
        .               const fn new_in(alloc: A) -> Self {
  115,957 ( 0.05%)          Self {
        .                       // Be careful to cast the entire slice to a raw pointer.
        .                       ctrl: unsafe { NonNull::new_unchecked(Group::static_empty() as *const _ as *mut u8) },
        .                       bucket_mask: 0,
        .                       items: 0,
        .                       growth_left: 0,
        .                       alloc,
        .                   }
        .               }
        .           }
        .           
        .           impl<A: Allocator + Clone> RawTableInner<A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
   88,250 ( 0.03%)      unsafe fn new_uninitialized(
        .                   alloc: A,
        .                   table_layout: TableLayout,
        .                   buckets: usize,
        .                   fallibility: Fallibility,
        .               ) -> Result<Self, TryReserveError> {
        .                   debug_assert!(buckets.is_power_of_two());
        .           
        .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
-- line 1071 ----------------------------------------
-- line 1078 ----------------------------------------
        .                   // exceed `isize::MAX`. We can skip this check on 64-bit systems since
        .                   // such allocations will never succeed anyways.
        .                   //
        .                   // This mirrors what Vec does in the standard library.
        .                   if mem::size_of::<usize>() < 8 && layout.size() > isize::MAX as usize {
        .                       return Err(fallibility.capacity_overflow());
        .                   }
        .           
   19,934 ( 0.01%)          let ptr: NonNull<u8> = match do_alloc(&alloc, layout) {
        .                       Ok(block) => block.cast(),
        .                       Err(_) => return Err(fallibility.alloc_err(layout)),
        .                   };
        .           
        .                   let ctrl = NonNull::new_unchecked(ptr.as_ptr().add(ctrl_offset));
   49,452 ( 0.02%)          Ok(Self {
        .                       ctrl,
   19,655 ( 0.01%)              bucket_mask: buckets - 1,
        .                       items: 0,
        .                       growth_left: bucket_mask_to_capacity(buckets - 1),
        .                       alloc,
        .                   })
   64,328 ( 0.02%)      }
        .           
        .               #[inline]
    5,169 ( 0.00%)      fn fallible_with_capacity(
        .                   alloc: A,
        .                   table_layout: TableLayout,
        .                   capacity: usize,
        .                   fallibility: Fallibility,
        .               ) -> Result<Self, TryReserveError> {
    1,350 ( 0.00%)          if capacity == 0 {
      748 ( 0.00%)              Ok(Self::new_in(alloc))
        .                   } else {
        .                       unsafe {
        .                           let buckets =
        .                               capacity_to_buckets(capacity).ok_or_else(|| fallibility.capacity_overflow())?;
        .           
   40,384 ( 0.02%)                  let result = Self::new_uninitialized(alloc, table_layout, buckets, fallibility)?;
        .                           result.ctrl(0).write_bytes(EMPTY, result.num_ctrl_bytes());
        .           
    3,060 ( 0.00%)                  Ok(result)
        .                       }
        .                   }
    5,169 ( 0.00%)      }
        .           
        .               /// Searches for an empty or deleted bucket which is suitable for inserting
        .               /// a new element and sets the hash for that slot.
        .               ///
        .               /// There must be at least 1 empty bucket in the table.
        .               #[inline]
   20,693 ( 0.01%)      unsafe fn prepare_insert_slot(&self, hash: u64) -> (usize, u8) {
        .                   let index = self.find_insert_slot(hash);
   20,693 ( 0.01%)          let old_ctrl = *self.ctrl(index);
        .                   self.set_ctrl_h2(index, hash);
        .                   (index, old_ctrl)
   41,386 ( 0.02%)      }
        .           
        .               /// Searches for an empty or deleted bucket which is suitable for inserting
        .               /// a new element.
        .               ///
        .               /// There must be at least 1 empty bucket in the table.
        .               #[inline]
        .               fn find_insert_slot(&self, hash: u64) -> usize {
        .                   let mut probe_seq = self.probe_seq(hash);
        .                   loop {
        .                       unsafe {
        .                           let group = Group::load(self.ctrl(probe_seq.pos));
  190,096 ( 0.07%)                  if let Some(bit) = group.match_empty_or_deleted().lowest_set_bit() {
  558,575 ( 0.22%)                      let result = (probe_seq.pos + bit) & self.bucket_mask;
        .           
        .                               // In tables smaller than the group width, trailing control
        .                               // bytes outside the range of the table are filled with
        .                               // EMPTY entries. These will unfortunately trigger a
        .                               // match, but once masked may point to a full bucket that
        .                               // is already occupied. We detect this situation here and
        .                               // perform a second scan starting at the beginning of the
        .                               // table. This second scan is guaranteed to find an empty
        .                               // slot (due to the load factor) before hitting the trailing
        .                               // control bytes (containing EMPTY).
  259,929 ( 0.10%)                      if unlikely(is_full(*self.ctrl(result))) {
        .                                   debug_assert!(self.bucket_mask < Group::WIDTH);
        .                                   debug_assert_ne!(probe_seq.pos, 0);
        .                                   return Group::load_aligned(self.ctrl(0))
        .                                       .match_empty_or_deleted()
        .                                       .lowest_set_bit_nonzero();
        .                               }
        .           
        .                               return result;
-- line 1165 ----------------------------------------
-- line 1171 ----------------------------------------
        .           
        .               /// Searches for an element in the table. This uses dynamic dispatch to reduce the amount of
        .               /// code generated, but it is eliminated by LLVM optimizations.
        .               #[inline]
        .               fn find_inner(&self, hash: u64, eq: &mut dyn FnMut(usize) -> bool) -> Option<usize> {
        .                   let h2_hash = h2(hash);
        .                   let mut probe_seq = self.probe_seq(hash);
        .           
    8,464 ( 0.00%)          loop {
        .                       let group = unsafe { Group::load(self.ctrl(probe_seq.pos)) };
        .           
  492,469 ( 0.19%)              for bit in group.match_byte(h2_hash) {
  861,365 ( 0.33%)                  let index = (probe_seq.pos + bit) & self.bucket_mask;
        .           
  594,981 ( 0.23%)                  if likely(eq(index)) {
        .                               return Some(index);
        .                           }
        .                       }
        .           
  179,314 ( 0.07%)              if likely(group.match_empty().any_bit_set()) {
        .                           return None;
        .                       }
        .           
        .                       probe_seq.move_next(self.bucket_mask);
        .                   }
        .               }
        .           
        .               #[allow(clippy::mut_mut)]
-- line 1198 ----------------------------------------
-- line 1225 ----------------------------------------
        .                   Bucket::from_base_index(self.data_end(), index)
        .               }
        .           
        .               #[inline]
        .               unsafe fn bucket_ptr(&self, index: usize, size_of: usize) -> *mut u8 {
        .                   debug_assert_ne!(self.bucket_mask, 0);
        .                   debug_assert!(index < self.buckets());
        .                   let base: *mut u8 = self.data_end().as_ptr();
  668,344 ( 0.26%)          base.sub((index + 1) * size_of)
        .               }
        .           
        .               #[inline]
        .               unsafe fn data_end<T>(&self) -> NonNull<T> {
        .                   NonNull::new_unchecked(self.ctrl.as_ptr().cast())
        .               }
        .           
        .               /// Returns an iterator-like object for a probe sequence on the table.
        .               ///
        .               /// This iterator never terminates, but is guaranteed to visit each bucket
        .               /// group exactly once. The loop using `probe_seq` must terminate upon
        .               /// reaching a group containing an empty bucket.
        .               #[inline]
        .               fn probe_seq(&self, hash: u64) -> ProbeSeq {
        .                   ProbeSeq {
2,952,415 ( 1.15%)              pos: h1(hash) & self.bucket_mask,
        .                       stride: 0,
        .                   }
        .               }
        .           
        .               /// Returns the index of a bucket for which a value must be inserted if there is enough rooom
        .               /// in the table, otherwise returns error
        .               #[cfg(feature = "raw")]
        .               #[inline]
-- line 1257 ----------------------------------------
-- line 1263 ----------------------------------------
        .                   } else {
        .                       self.record_item_insert_at(index, old_ctrl, hash);
        .                       Ok(index)
        .                   }
        .               }
        .           
        .               #[inline]
        .               unsafe fn record_item_insert_at(&mut self, index: usize, old_ctrl: u8, hash: u64) {
  368,800 ( 0.14%)          self.growth_left -= special_is_empty(old_ctrl) as usize;
        .                   self.set_ctrl_h2(index, hash);
  295,040 ( 0.11%)          self.items += 1;
        .               }
        .           
        .               #[inline]
        .               fn is_in_same_group(&self, i: usize, new_i: usize, hash: u64) -> bool {
        .                   let probe_seq_pos = self.probe_seq(hash).pos;
        .                   let probe_index =
        .                       |pos: usize| (pos.wrapping_sub(probe_seq_pos) & self.bucket_mask) / Group::WIDTH;
        .                   probe_index(i) == probe_index(new_i)
-- line 1281 ----------------------------------------
-- line 1312 ----------------------------------------
        .                   // replicate the buckets at the end of the trailing group. For example
        .                   // with 2 buckets and a group size of 4, the control bytes will look
        .                   // like this:
        .                   //
        .                   //     Real    |             Replicated
        .                   // ---------------------------------------------
        .                   // | [A] | [B] | [EMPTY] | [EMPTY] | [A] | [B] |
        .                   // ---------------------------------------------
  534,198 ( 0.21%)          let index2 = ((index.wrapping_sub(Group::WIDTH)) & self.bucket_mask) + Group::WIDTH;
        .           
  178,066 ( 0.07%)          *self.ctrl(index) = ctrl;
  178,069 ( 0.07%)          *self.ctrl(index2) = ctrl;
        .               }
        .           
        .               /// Returns a pointer to a control byte.
        .               #[inline]
        .               unsafe fn ctrl(&self, index: usize) -> *mut u8 {
        .                   debug_assert!(index < self.num_ctrl_bytes());
        .                   self.ctrl.as_ptr().add(index)
        .               }
        .           
        .               #[inline]
        .               fn buckets(&self) -> usize {
   55,444 ( 0.02%)          self.bucket_mask + 1
        .               }
        .           
        .               #[inline]
        .               fn num_ctrl_bytes(&self) -> usize {
   53,004 ( 0.02%)          self.bucket_mask + 1 + Group::WIDTH
        .               }
        .           
        .               #[inline]
        .               fn is_empty_singleton(&self) -> bool {
  213,131 ( 0.08%)          self.bucket_mask == 0
        .               }
        .           
        .               #[allow(clippy::mut_mut)]
        .               #[inline]
        .               unsafe fn prepare_resize(
        .                   &self,
        .                   table_layout: TableLayout,
        .                   capacity: usize,
        .                   fallibility: Fallibility,
        .               ) -> Result<crate::scopeguard::ScopeGuard<Self, impl FnMut(&mut Self)>, TryReserveError> {
        .                   debug_assert!(self.items <= capacity);
        .           
        .                   // Allocate and initialize the new table.
      729 ( 0.00%)          let mut new_table = RawTableInner::fallible_with_capacity(
        .                       self.alloc.clone(),
        .                       table_layout,
        .                       capacity,
        .                       fallibility,
        .                   )?;
   24,364 ( 0.01%)          new_table.growth_left -= self.items;
        .                   new_table.items = self.items;
        .           
        .                   // The hash function may panic, in which case we simply free the new
        .                   // table without dropping any elements that may have been copied into
        .                   // it.
        .                   //
        .                   // This guard is also used to free the old table on success, see
        .                   // the comment at the bottom of this function.
        .                   Ok(guard(new_table, move |self_| {
   11,144 ( 0.00%)              if !self_.is_empty_singleton() {
        .                           self_.free_buckets(table_layout);
        .                       }
        .                   }))
        .               }
        .           
        .               /// Reserves or rehashes to make room for `additional` more elements.
        .               ///
        .               /// This uses dynamic dispatch to reduce the amount of
-- line 1383 ----------------------------------------
-- line 1388 ----------------------------------------
        .                   &mut self,
        .                   additional: usize,
        .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
        .                   fallibility: Fallibility,
        .                   layout: TableLayout,
        .                   drop: Option<fn(*mut u8)>,
        .               ) -> Result<(), TryReserveError> {
        .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
   22,288 ( 0.01%)          let new_items = match self.items.checked_add(additional) {
        .                       Some(new_items) => new_items,
        .                       None => return Err(fallibility.capacity_overflow()),
        .                   };
   22,288 ( 0.01%)          let full_capacity = bucket_mask_to_capacity(self.bucket_mask);
   46,668 ( 0.02%)          if new_items <= full_capacity / 2 {
        .                       // Rehash in-place without re-allocating if we have plenty of spare
        .                       // capacity that is locked up due to DELETED entries.
        .                       self.rehash_in_place(hasher, layout.size, drop);
        .                       Ok(())
        .                   } else {
        .                       // Otherwise, conservatively resize to at least the next size up
        .                       // to avoid churning deletes into frequent rehashes.
        .                       self.resize_inner(
   11,144 ( 0.00%)                  usize::max(new_items, full_capacity + 1),
        .                           hasher,
        .                           fallibility,
        .                           layout,
        .                       )
        .                   }
        .               }
        .           
        .               /// Allocates a new table of a different size and moves the contents of the
-- line 1418 ----------------------------------------
-- line 1424 ----------------------------------------
        .               #[inline(always)]
        .               unsafe fn resize_inner(
        .                   &mut self,
        .                   capacity: usize,
        .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
        .                   fallibility: Fallibility,
        .                   layout: TableLayout,
        .               ) -> Result<(), TryReserveError> {
    1,746 ( 0.00%)          let mut new_table = self.prepare_resize(layout, capacity, fallibility)?;
        .           
        .                   // Copy all elements to the new table.
        .                   for i in 0..self.buckets() {
  104,010 ( 0.04%)              if !is_full(*self.ctrl(i)) {
        .                           continue;
        .                       }
        .           
        .                       // This may panic.
        .                       let hash = hasher(self, i);
        .           
        .                       // We can use a simpler version of insert() here since:
        .                       // - there are no DELETED entries.
-- line 1444 ----------------------------------------
-- line 1454 ----------------------------------------
        .                   }
        .           
        .                   // We successfully copied all elements without panicking. Now replace
        .                   // self with the new table. The old table will have its memory freed but
        .                   // the items will not be dropped (since they have been moved into the
        .                   // new table).
        .                   mem::swap(self, &mut new_table);
        .           
   11,144 ( 0.00%)          Ok(())
        .               }
        .           
        .               /// Rehashes the contents of the table in place (i.e. without changing the
        .               /// allocation).
        .               ///
        .               /// If `hasher` panics then some the table's contents may be lost.
        .               ///
        .               /// This uses dynamic dispatch to reduce the amount of
-- line 1470 ----------------------------------------
-- line 1554 ----------------------------------------
        .               #[inline]
        .               unsafe fn free_buckets(&mut self, table_layout: TableLayout) {
        .                   // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
        .                   let (layout, ctrl_offset) = match table_layout.calculate_layout_for(self.buckets()) {
        .                       Some(lco) => lco,
        .                       None => hint::unreachable_unchecked(),
        .                   };
        .                   self.alloc.deallocate(
    6,777 ( 0.00%)              NonNull::new_unchecked(self.ctrl.as_ptr().sub(ctrl_offset)),
        .                       layout,
        .                   );
        .               }
        .           
        .               /// Marks all table buckets as empty without dropping their contents.
        .               #[inline]
        .               fn clear_no_drop(&mut self) {
    1,991 ( 0.00%)          if !self.is_empty_singleton() {
        .                       unsafe {
        .                           self.ctrl(0).write_bytes(EMPTY, self.num_ctrl_bytes());
        .                       }
        .                   }
    2,201 ( 0.00%)          self.items = 0;
    1,991 ( 0.00%)          self.growth_left = bucket_mask_to_capacity(self.bucket_mask);
        .               }
        .           
        .               #[inline]
        .               unsafe fn erase(&mut self, index: usize) {
        .                   debug_assert!(is_full(*self.ctrl(index)));
   17,597 ( 0.01%)          let index_before = index.wrapping_sub(Group::WIDTH) & self.bucket_mask;
        .                   let empty_before = Group::load(self.ctrl(index_before)).match_empty();
        .                   let empty_after = Group::load(self.ctrl(index)).match_empty();
        .           
        .                   // If we are inside a continuous block of Group::WIDTH full or deleted
        .                   // cells then a probe window may have seen a full block when trying to
        .                   // insert. We therefore need to keep that block non-empty so that
        .                   // lookups will continue searching to the next probe window.
        .                   //
        .                   // Note that in this context `leading_zeros` refers to the bytes at the
        .                   // end of a group, while `trailing_zeros` refers to the bytes at the
        .                   // beginning of a group.
   70,388 ( 0.03%)          let ctrl = if empty_before.leading_zeros() + empty_after.trailing_zeros() >= Group::WIDTH {
        .                       DELETED
        .                   } else {
   87,235 ( 0.03%)              self.growth_left += 1;
        .                       EMPTY
        .                   };
        .                   self.set_ctrl(index, ctrl);
   70,388 ( 0.03%)          self.items -= 1;
        .               }
        .           }
        .           
        .           impl<T: Clone, A: Allocator + Clone> Clone for RawTable<T, A> {
       80 ( 0.00%)      fn clone(&self) -> Self {
       10 ( 0.00%)          if self.table.is_empty_singleton() {
        .                       Self::new_in(self.table.alloc.clone())
        .                   } else {
        .                       unsafe {
        .                           let mut new_table = ManuallyDrop::new(
        .                               // Avoid `Result::ok_or_else` because it bloats LLVM IR.
        .                               match Self::new_uninitialized(
        .                                   self.table.alloc.clone(),
        .                                   self.table.buckets(),
-- line 1615 ----------------------------------------
-- line 1624 ----------------------------------------
        .                               // We need to free the memory allocated for the new table.
        .                               new_table.free_buckets();
        .                           });
        .           
        .                           // Return the newly created table.
        .                           ManuallyDrop::into_inner(new_table)
        .                       }
        .                   }
       90 ( 0.00%)      }
        .           
        .               fn clone_from(&mut self, source: &Self) {
        .                   if source.table.is_empty_singleton() {
        .                       *self = Self::new_in(self.table.alloc.clone());
        .                   } else {
        .                       unsafe {
        .                           // First, drop all our elements without clearing the control bytes.
        .                           self.drop_elements();
-- line 1640 ----------------------------------------
-- line 1687 ----------------------------------------
        .                       .table
        .                       .ctrl(0)
        .                       .copy_to_nonoverlapping(self.table.ctrl(0), self.table.num_ctrl_bytes());
        .                   source
        .                       .data_start()
        .                       .copy_to_nonoverlapping(self.data_start(), self.table.buckets());
        .           
        .                   self.table.items = source.table.items;
        4 ( 0.00%)          self.table.growth_left = source.table.growth_left;
        .               }
        .           }
        .           
        .           impl<T: Clone, A: Allocator + Clone> RawTable<T, A> {
        .               /// Common code for clone and clone_from. Assumes `self.buckets() == source.buckets()`.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               unsafe fn clone_from_impl(&mut self, source: &Self, mut on_panic: impl FnMut(&mut Self)) {
        .                   // Copy the control bytes unchanged. We do this in a single pass
-- line 1703 ----------------------------------------
-- line 1790 ----------------------------------------
        .               fn default() -> Self {
        .                   Self::new_in(Default::default())
        .               }
        .           }
        .           
        .           #[cfg(feature = "nightly")]
        .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawTable<T, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
  105,875 ( 0.04%)      fn drop(&mut self) {
   91,224 ( 0.04%)          if !self.table.is_empty_singleton() {
        .                       unsafe {
        .                           self.drop_elements();
        .                           self.free_buckets();
        .                       }
        .                   }
  115,150 ( 0.04%)      }
        .           }
        .           #[cfg(not(feature = "nightly"))]
        .           impl<T, A: Allocator + Clone> Drop for RawTable<T, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn drop(&mut self) {
        .                   if !self.table.is_empty_singleton() {
        .                       unsafe {
        .                           self.drop_elements();
-- line 1813 ----------------------------------------
-- line 1817 ----------------------------------------
        .               }
        .           }
        .           
        .           impl<T, A: Allocator + Clone> IntoIterator for RawTable<T, A> {
        .               type Item = T;
        .               type IntoIter = RawIntoIter<T, A>;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
    1,940 ( 0.00%)      fn into_iter(self) -> RawIntoIter<T, A> {
        .                   unsafe {
        .                       let iter = self.iter();
        .                       self.into_iter_from(iter)
        .                   }
    2,425 ( 0.00%)      }
        .           }
        .           
        .           /// Iterator over a sub-range of a table. Unlike `RawIter` this iterator does
        .           /// not track an item count.
        .           pub(crate) struct RawIterRange<T> {
        .               // Mask of full buckets in the current group. Bits are cleared from this
        .               // mask as each element is processed.
        .               current_group: BitMask,
-- line 1838 ----------------------------------------
-- line 1934 ----------------------------------------
        .           
        .           impl<T> Iterator for RawIterRange<T> {
        .               type Item = Bucket<T>;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn next(&mut self) -> Option<Bucket<T>> {
        .                   unsafe {
        .                       loop {
   37,318 ( 0.01%)                  if let Some(index) = self.current_group.lowest_set_bit() {
    6,521 ( 0.00%)                      self.current_group = self.current_group.remove_lowest_bit();
   11,187 ( 0.00%)                      return Some(self.data.next_n(index));
        .                           }
        .           
   35,836 ( 0.01%)                  if self.next_ctrl >= self.end {
        .                               return None;
        .                           }
        .           
        .                           // We might read past self.end up to the next group boundary,
        .                           // but this is fine because it only occurs on tables smaller
        .                           // than the group size where the trailing control bytes are all
        .                           // EMPTY. On larger tables self.end is guaranteed to be aligned
        .                           // to the group size (since tables are power-of-two sized).
      748 ( 0.00%)                  self.current_group = Group::load_aligned(self.next_ctrl).match_full();
      872 ( 0.00%)                  self.data = self.data.next_n(Group::WIDTH);
    1,137 ( 0.00%)                  self.next_ctrl = self.next_ctrl.add(Group::WIDTH);
        .                       }
        .                   }
        .               }
        .           
        .               #[inline]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   // We don't have an item count, so just guess based on the range size.
        .                   (
-- line 1966 ----------------------------------------
-- line 2102 ----------------------------------------
        .                           }
        .                       } else {
        .                           // We must have already iterated past the removed item.
        .                       }
        .                   }
        .               }
        .           
        .               unsafe fn drop_elements(&mut self) {
      372 ( 0.00%)          if mem::needs_drop::<T>() && self.len() != 0 {
        .                       for item in self {
        .                           item.drop();
        .                       }
        .                   }
        .               }
        .           }
        .           
        .           impl<T> Clone for RawIter<T> {
-- line 2118 ----------------------------------------
-- line 2124 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           impl<T> Iterator for RawIter<T> {
        .               type Item = Bucket<T>;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
    8,382 ( 0.00%)      fn next(&mut self) -> Option<Bucket<T>> {
   17,678 ( 0.01%)          if let Some(b) = self.iter.next() {
   47,449 ( 0.02%)              self.items -= 1;
        .                       Some(b)
        .                   } else {
        .                       // We don't check against items == 0 here to allow the
        .                       // compiler to optimize away the item count entirely if the
        .                       // iterator length is never queried.
        .                       debug_assert_eq!(self.items, 0);
        .                       None
        .                   }
   16,764 ( 0.01%)      }
        .           
        .               #[inline]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   (self.items, Some(self.items))
        .               }
        .           }
        .           
        .           impl<T> ExactSizeIterator for RawIter<T> {}
-- line 2151 ----------------------------------------
-- line 2177 ----------------------------------------
        .               T: Sync,
        .               A: Sync,
        .           {
        .           }
        .           
        .           #[cfg(feature = "nightly")]
        .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
      954 ( 0.00%)      fn drop(&mut self) {
        .                   unsafe {
        .                       // Drop all remaining elements
        .                       self.iter.drop_elements();
        .           
        .                       // Free the table
    4,143 ( 0.00%)              if let Some((ptr, layout)) = self.allocation {
        .                           self.alloc.deallocate(ptr, layout);
        .                       }
        .                   }
       98 ( 0.00%)      }
        .           }
        .           #[cfg(not(feature = "nightly"))]
        .           impl<T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn drop(&mut self) {
        .                   unsafe {
        .                       // Drop all remaining elements
        .                       self.iter.drop_elements();
-- line 2203 ----------------------------------------
-- line 2209 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           impl<T, A: Allocator + Clone> Iterator for RawIntoIter<T, A> {
        .               type Item = T;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
      264 ( 0.00%)      fn next(&mut self) -> Option<T> {
      204 ( 0.00%)          unsafe { Some(self.iter.next()?.read()) }
      528 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        3 ( 0.00%)          self.iter.size_hint()
        .               }
        .           }
        .           
        .           impl<T, A: Allocator + Clone> ExactSizeIterator for RawIntoIter<T, A> {}
        .           impl<T, A: Allocator + Clone> FusedIterator for RawIntoIter<T, A> {}
        .           
        .           /// Iterator which consumes elements without freeing the table storage.
        .           pub struct RawDrain<'a, T, A: Allocator + Clone = Global> {
-- line 2231 ----------------------------------------
-- line 2259 ----------------------------------------
        .           where
        .               T: Sync,
        .               A: Sync,
        .           {
        .           }
        .           
        .           impl<T, A: Allocator + Clone> Drop for RawDrain<'_, T, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
        8 ( 0.00%)      fn drop(&mut self) {
        .                   unsafe {
        .                       // Drop all remaining elements. Note that this may panic.
        .                       self.iter.drop_elements();
        .           
        .                       // Reset the contents of the table now that all elements have been
        .                       // dropped.
        .                       self.table.clear_no_drop();
        .           
        .                       // Move the now empty table back to its original location.
        1 ( 0.00%)              self.orig_table
        .                           .as_ptr()
        .                           .copy_from_nonoverlapping(&*self.table, 1);
        .                   }
        8 ( 0.00%)      }
        .           }
        .           
        .           impl<T, A: Allocator + Clone> Iterator for RawDrain<'_, T, A> {
        .               type Item = T;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn next(&mut self) -> Option<T> {
        .                   unsafe {
-- line 2289 ----------------------------------------

1,583,593 ( 0.61%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_borrowck/src/lib.rs
--------------------------------------------------------------------------------
Ir              

-- line 97 ----------------------------------------
     .           
     .               /// If true, the capture is behind a reference.
     .               by_ref: bool,
     .           }
     .           
     .           const DEREF_PROJECTION: &[PlaceElem<'_>; 1] = &[ProjectionElem::Deref];
     .           
     .           pub fn provide(providers: &mut Providers) {
     4 ( 0.00%)      *providers = Providers {
     .                   mir_borrowck: |tcx, did| {
    77 ( 0.00%)              if let Some(def) = ty::WithOptConstParam::try_lookup(did, tcx) {
     .                           tcx.mir_borrowck_const_arg(def)
     .                       } else {
   308 ( 0.00%)                  mir_borrowck(tcx, ty::WithOptConstParam::unknown(did))
     .                       }
     .                   },
     .                   mir_borrowck_const_arg: |tcx, (did, param_did)| {
     .                       mir_borrowck(tcx, ty::WithOptConstParam { did, const_param_did: Some(param_did) })
     .                   },
     .                   ..*providers
     .               };
     1 ( 0.00%)  }
     .           
   770 ( 0.00%)  fn mir_borrowck<'tcx>(
     .               tcx: TyCtxt<'tcx>,
     .               def: ty::WithOptConstParam<LocalDefId>,
     .           ) -> &'tcx BorrowCheckResult<'tcx> {
     .               let (input_body, promoted) = tcx.mir_promoted(def);
     .               debug!("run query mir_borrowck: {}", tcx.def_path_str(def.did.to_def_id()));
     .           
 1,001 ( 0.00%)      let opt_closure_req = tcx.infer_ctxt().with_opaque_type_inference(def.did).enter(|infcx| {
     .                   let input_body: &Body<'_> = &input_body.borrow();
     .                   let promoted: &IndexVec<_, _> = &promoted.borrow();
 1,078 ( 0.00%)          do_mir_borrowck(&infcx, input_body, promoted, false).0
   308 ( 0.00%)      });
     .               debug!("mir_borrowck done");
     .           
    77 ( 0.00%)      tcx.arena.alloc(opt_closure_req)
   616 ( 0.00%)  }
     .           
     .           /// Perform the actual borrow checking.
     .           ///
     .           /// If `return_body_with_facts` is true, then return the body with non-erased
     .           /// region ids on which the borrow checking was performed together with Polonius
     .           /// facts.
 1,694 ( 0.00%)  #[instrument(skip(infcx, input_body, input_promoted), level = "debug")]
     .           fn do_mir_borrowck<'a, 'tcx>(
     .               infcx: &InferCtxt<'a, 'tcx>,
     .               input_body: &Body<'tcx>,
     .               input_promoted: &IndexVec<Promoted, Body<'tcx>>,
     .               return_body_with_facts: bool,
     .           ) -> (BorrowCheckResult<'tcx>, Option<Box<BodyWithBorrowckFacts<'tcx>>>) {
   770 ( 0.00%)      let def = input_body.source.with_opt_param().as_local().unwrap();
     .           
     .               debug!(?def);
     .           
   154 ( 0.00%)      let tcx = infcx.tcx;
     .               let param_env = tcx.param_env(def.did);
    77 ( 0.00%)      let id = tcx.hir().local_def_id_to_hir_id(def.did);
     .           
   154 ( 0.00%)      let mut local_names = IndexVec::from_elem(None, &input_body.local_decls);
     .               for var_debug_info in &input_body.var_debug_info {
 1,092 ( 0.00%)          if let VarDebugInfoContents::Place(place) = var_debug_info.value {
   594 ( 0.00%)              if let Some(local) = place.as_local() {
   891 ( 0.00%)                  if let Some(prev_name) = local_names[local] {
     .                               if var_debug_info.name != prev_name {
     .                                   span_bug!(
     .                                       var_debug_info.source_info.span,
     .                                       "local {:?} has many names (`{}` vs `{}`)",
     .                                       local,
     .                                       prev_name,
     .                                       var_debug_info.name
     .                                   );
     .                               }
     .                           }
   891 ( 0.00%)                  local_names[local] = Some(var_debug_info.name);
     .                       }
     .                   }
     .               }
     .           
     .               // Gather the upvars of a closure, if any.
   308 ( 0.00%)      let tables = tcx.typeck_opt_const_arg(def);
   154 ( 0.00%)      if let Some(ErrorReported) = tables.tainted_by_errors {
     .                   infcx.set_tainted_by_errors();
     .               }
   308 ( 0.00%)      let upvars: Vec<_> = tables
     .                   .closure_min_captures_flattened(def.did.to_def_id())
     .                   .map(|captured_place| {
     .                       let capture = captured_place.info.capture_kind;
     .                       let by_ref = match capture {
     .                           ty::UpvarCapture::ByValue => false,
     .                           ty::UpvarCapture::ByRef(..) => true,
     .                       };
     .                       Upvar { place: captured_place.clone(), by_ref }
     .                   })
     .                   .collect();
     .           
     .               // Replace all regions with fresh inference variables. This
     .               // requires first making our own copy of the MIR. This copy will
     .               // be modified (in place) to contain non-lexical lifetimes. It
     .               // will have a lifetime tied to the inference context.
   154 ( 0.00%)      let mut body_owned = input_body.clone();
     .               let mut promoted = input_promoted.clone();
     .               let free_regions =
   231 ( 0.00%)          nll::replace_regions_in_mir(infcx, param_env, &mut body_owned, &mut promoted);
     .               let body = &body_owned; // no further changes
     .           
    77 ( 0.00%)      let location_table_owned = LocationTable::new(body);
     .               let location_table = &location_table_owned;
     .           
     .               let mut errors_buffer = Vec::new();
   231 ( 0.00%)      let (move_data, move_errors): (MoveData<'tcx>, Vec<(Place<'tcx>, MoveError<'tcx>)>) =
   539 ( 0.00%)          match MoveData::gather_moves(&body, tcx, param_env) {
   462 ( 0.00%)              Ok(move_data) => (move_data, Vec::new()),
     .                       Err((move_data, move_errors)) => (move_data, move_errors),
     .                   };
     .               let promoted_errors = promoted
     .                   .iter_enumerated()
     .                   .map(|(idx, body)| (idx, MoveData::gather_moves(&body, tcx, param_env)));
     .           
   462 ( 0.00%)      let mdpe = MoveDataParamEnv { move_data, param_env };
     .           
   616 ( 0.00%)      let mut flow_inits = MaybeInitializedPlaces::new(tcx, &body, &mdpe)
    77 ( 0.00%)          .into_engine(tcx, &body)
     .                   .pass_name("borrowck")
     .                   .iterate_to_fixpoint()
     .                   .into_results_cursor(&body);
     .           
   924 ( 0.00%)      let locals_are_invalidated_at_exit = tcx.hir().body_owner_kind(id).is_fn_or_closure();
     .               let borrow_set =
   770 ( 0.00%)          Rc::new(BorrowSet::build(tcx, body, locals_are_invalidated_at_exit, &mdpe.move_data));
     .           
   385 ( 0.00%)      let use_polonius = return_body_with_facts || infcx.tcx.sess.opts.debugging_opts.polonius;
     .           
     .               // Compute non-lexical lifetimes.
     .               let nll::NllOutput {
   231 ( 0.00%)          regioncx,
   308 ( 0.00%)          opaque_type_values,
   154 ( 0.00%)          polonius_input,
   231 ( 0.00%)          polonius_output,
   308 ( 0.00%)          opt_closure_req,
   770 ( 0.00%)          nll_errors,
 1,386 ( 0.00%)      } = nll::compute_regions(
     .                   infcx,
 1,232 ( 0.00%)          free_regions,
     .                   body,
     .                   &promoted,
     .                   location_table,
     .                   param_env,
     .                   &mut flow_inits,
     .                   &mdpe.move_data,
     .                   &borrow_set,
     .                   &upvars,
     .                   use_polonius,
     .               );
     .           
     .               // Dump MIR results into a file, if that is enabled. This let us
     .               // write unit-tests, as well as helping with debugging.
   231 ( 0.00%)      nll::dump_mir_results(infcx, &body, &regioncx, &opt_closure_req);
     .           
     .               // We also have a `#[rustc_regions]` annotation that causes us to dump
     .               // information.
   154 ( 0.00%)      nll::dump_annotation(
     .                   infcx,
     .                   &body,
     .                   &regioncx,
     .                   &opt_closure_req,
     .                   &opaque_type_values,
     .                   &mut errors_buffer,
     .               );
     .           
     .               // The various `flow_*` structures can be large. We drop `flow_inits` here
     .               // so it doesn't overlap with the others below. This reduces peak memory
     .               // usage significantly on some benchmarks.
 1,232 ( 0.00%)      drop(flow_inits);
     .           
    77 ( 0.00%)      let regioncx = Rc::new(regioncx);
     .           
   462 ( 0.00%)      let flow_borrows = Borrows::new(tcx, body, &regioncx, &borrow_set)
    77 ( 0.00%)          .into_engine(tcx, body)
     .                   .pass_name("borrowck")
     .                   .iterate_to_fixpoint();
   462 ( 0.00%)      let flow_uninits = MaybeUninitializedPlaces::new(tcx, body, &mdpe)
    77 ( 0.00%)          .into_engine(tcx, body)
     .                   .pass_name("borrowck")
     .                   .iterate_to_fixpoint();
   462 ( 0.00%)      let flow_ever_inits = EverInitializedPlaces::new(tcx, body, &mdpe)
    77 ( 0.00%)          .into_engine(tcx, body)
     .                   .pass_name("borrowck")
     .                   .iterate_to_fixpoint();
     .           
   154 ( 0.00%)      let movable_generator = !matches!(
   462 ( 0.00%)          tcx.hir().get(id),
     .                   Node::Expr(&hir::Expr {
     .                       kind: hir::ExprKind::Closure(.., Some(hir::Movability::Static)),
     .                       ..
     .                   })
     .               );
     .           
     .               for (idx, move_data_results) in promoted_errors {
     .                   let promoted_body = &promoted[idx];
-- line 297 ----------------------------------------
-- line 325 ----------------------------------------
     .                       };
     .                       promoted_mbcx.report_move_errors(move_errors);
     .                       errors_buffer = promoted_mbcx.errors_buffer;
     .                   };
     .               }
     .           
     .               let dominators = body.dominators();
     .           
 3,465 ( 0.00%)      let mut mbcx = MirBorrowckCtxt {
     .                   infcx,
     .                   param_env,
     .                   body,
     .                   move_data: &mdpe.move_data,
     .                   location_table,
     .                   movable_generator,
     .                   locals_are_invalidated_at_exit,
     .                   fn_self_span_reported: Default::default(),
     .                   access_place_error_reported: Default::default(),
     .                   reservation_error_reported: Default::default(),
     .                   reservation_warnings: Default::default(),
     .                   move_error_reported: BTreeMap::new(),
     .                   uninitialized_error_reported: Default::default(),
   308 ( 0.00%)          errors_buffer,
    77 ( 0.00%)          regioncx: Rc::clone(&regioncx),
     .                   used_mut: Default::default(),
     .                   used_mut_upvars: SmallVec::new(),
    77 ( 0.00%)          borrow_set: Rc::clone(&borrow_set),
   462 ( 0.00%)          dominators,
   308 ( 0.00%)          upvars,
   308 ( 0.00%)          local_names,
     .                   region_names: RefCell::default(),
     .                   next_region_name: RefCell::new(1),
     .                   polonius_output,
     .               };
     .           
     .               // Compute and report region errors, if any.
   231 ( 0.00%)      mbcx.report_region_errors(nll_errors);
     .           
     .               let results = BorrowckResults {
   462 ( 0.00%)          ever_inits: flow_ever_inits,
   616 ( 0.00%)          uninits: flow_uninits,
   847 ( 0.00%)          borrows: flow_borrows,
     .               };
     .           
   462 ( 0.00%)      mbcx.report_move_errors(move_errors);
     .           
    77 ( 0.00%)      rustc_mir_dataflow::visit_results(
     .                   body,
    77 ( 0.00%)          traversal::reverse_postorder(body).map(|(bb, _)| bb),
     .                   &results,
     .                   &mut mbcx,
     .               );
     .           
     .               // Convert any reservation warnings into lints.
     .               let reservation_warnings = mem::take(&mut mbcx.reservation_warnings);
     .               for (_, (place, span, location, bk, borrow)) in reservation_warnings {
     .                   let mut initial_diag = mbcx.report_conflicting_borrow(location, (place, span), bk, &borrow);
-- line 381 ----------------------------------------
-- line 406 ----------------------------------------
     .               // For each non-user used mutable variable, check if it's been assigned from
     .               // a user-declared local. If so, then put that local into the used_mut set.
     .               // Note that this set is expected to be small - only upvars from closures
     .               // would have a chance of erroneously adding non-user-defined mutable vars
     .               // to the set.
     .               let temporary_used_locals: FxHashSet<Local> = mbcx
     .                   .used_mut
     .                   .iter()
    77 ( 0.00%)          .filter(|&local| !mbcx.body.local_decls[*local].is_user_variable())
     .                   .cloned()
     .                   .collect();
     .               // For the remaining unused locals that are marked as mutable, we avoid linting any that
     .               // were never initialized. These locals may have been removed as unreachable code; or will be
     .               // linted as unused variables.
     .               let unused_mut_locals =
    77 ( 0.00%)          mbcx.body.mut_vars_iter().filter(|local| !mbcx.used_mut.contains(local)).collect();
   308 ( 0.00%)      mbcx.gather_used_muts(temporary_used_locals, unused_mut_locals);
     .           
     .               debug!("mbcx.used_mut: {:?}", mbcx.used_mut);
   308 ( 0.00%)      let used_mut = mbcx.used_mut;
    77 ( 0.00%)      for local in mbcx.body.mut_vars_and_args_iter().filter(|local| !used_mut.contains(local)) {
     .                   let local_decl = &mbcx.body.local_decls[local];
     .                   let lint_root = match &mbcx.body.source_scopes[local_decl.source_info.scope].local_data {
     .                       ClearCrossCrate::Set(data) => data.lint_root,
     .                       _ => continue,
     .                   };
     .           
     .                   // Skip over locals that begin with an underscore or have no name
     .                   match mbcx.local_names[local] {
-- line 434 ----------------------------------------
-- line 455 ----------------------------------------
     .                               String::new(),
     .                               Applicability::MachineApplicable,
     .                           )
     .                           .emit();
     .                   })
     .               }
     .           
     .               // Buffer any move errors that we collected and de-duplicated.
   693 ( 0.00%)      for (_, (_, diag)) in mbcx.move_error_reported {
     .                   diag.buffer(&mut mbcx.errors_buffer);
     .               }
     .           
    77 ( 0.00%)      if !mbcx.errors_buffer.is_empty() {
     .                   mbcx.errors_buffer.sort_by_key(|diag| diag.sort_span);
     .           
     .                   for diag in mbcx.errors_buffer.drain(..) {
     .                       mbcx.infcx.tcx.sess.diagnostic().emit_diagnostic(&diag);
     .                   }
     .               }
     .           
     .               let result = BorrowCheckResult {
   308 ( 0.00%)          concrete_opaque_types: opaque_type_values,
   385 ( 0.00%)          closure_requirements: opt_closure_req,
   462 ( 0.00%)          used_mut_upvars: mbcx.used_mut_upvars,
     .               };
     .           
   154 ( 0.00%)      let body_with_facts = if return_body_with_facts {
     .                   let output_facts = mbcx.polonius_output.expect("Polonius output was not computed");
     .                   Some(Box::new(BodyWithBorrowckFacts {
     .                       body: body_owned,
     .                       input_facts: *polonius_input.expect("Polonius input facts were not generated"),
     .                       output_facts,
     .                       location_table: location_table_owned,
     .                   }))
     .               } else {
     .                   None
     .               };
     .           
     .               debug!("do_mir_borrowck: result = {:#?}", result);
     .           
 1,078 ( 0.00%)      (result, body_with_facts)
   924 ( 0.00%)  }
     .           
     .           /// A `Body` with information computed by the borrow checker. This struct is
     .           /// intended to be consumed by compiler consumers.
     .           ///
     .           /// We need to include the MIR body here because the region identifiers must
     .           /// match the ones in the Polonius facts.
     .           pub struct BodyWithBorrowckFacts<'tcx> {
     .               /// A mir body that contains region identifiers.
-- line 504 ----------------------------------------
-- line 608 ----------------------------------------
     .           // Check that:
     .           // 1. assignments are always made to mutable locations (FIXME: does that still really go here?)
     .           // 2. loans made in overlapping scopes do not conflict
     .           // 3. assignments do not affect things loaned out as immutable
     .           // 4. moves do not affect things loaned out in any way
     .           impl<'cx, 'tcx> rustc_mir_dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtxt<'cx, 'tcx> {
     .               type FlowState = Flows<'cx, 'tcx>;
     .           
22,617 ( 0.01%)      fn visit_statement_before_primary_effect(
     .                   &mut self,
     .                   flow_state: &Flows<'cx, 'tcx>,
     .                   stmt: &'cx Statement<'tcx>,
     .                   location: Location,
     .               ) {
     .                   debug!("MirBorrowckCtxt::process_statement({:?}, {:?}): {:?}", location, stmt, flow_state);
     .                   let span = stmt.source_info.span;
     .           
     .                   self.check_activations(location, span, flow_state);
     .           
12,565 ( 0.00%)          match &stmt.kind {
 1,618 ( 0.00%)              StatementKind::Assign(box (lhs, ref rhs)) => {
     .                           self.consume_rvalue(location, (rhs, span), flow_state);
     .           
 3,236 ( 0.00%)                  self.mutate_place(location, (*lhs, span), Shallow(None), flow_state);
     .                       }
    88 ( 0.00%)              StatementKind::FakeRead(box (_, ref place)) => {
     .                           // Read for match doesn't access any memory and is used to
     .                           // assert that a place is safe and live. So we don't have to
     .                           // do any checks here.
     .                           //
     .                           // FIXME: Remove check that the place is initialized. This is
     .                           // needed for now because matches don't have never patterns yet.
     .                           // So this is the only place we prevent
     .                           //      let x: !;
     .                           //      match x {};
     .                           // from compiling.
   352 ( 0.00%)                  self.check_if_path_or_subpath_is_moved(
     .                               location,
     .                               InitializationRequiringAction::Use,
   792 ( 0.00%)                      (place.as_ref(), span),
     .                               flow_state,
     .                           );
     .                       }
     .                       StatementKind::SetDiscriminant { place, variant_index: _ } => {
     .                           self.mutate_place(location, (**place, span), Shallow(None), flow_state);
     .                       }
     .                       StatementKind::CopyNonOverlapping(box rustc_middle::mir::CopyNonOverlapping {
     .                           ..
-- line 655 ----------------------------------------
-- line 663 ----------------------------------------
     .                       | StatementKind::Coverage(..)
     .                       | StatementKind::AscribeUserType(..)
     .                       | StatementKind::Retag { .. }
     .                       | StatementKind::StorageLive(..) => {
     .                           // `Nop`, `AscribeUserType`, `Retag`, and `StorageLive` are irrelevant
     .                           // to borrow check.
     .                       }
     .                       StatementKind::StorageDead(local) => {
 4,842 ( 0.00%)                  self.access_place(
     .                               location,
 8,877 ( 0.00%)                      (Place::from(*local), span),
     .                               (Shallow(None), Write(WriteKind::StorageDeadOrDrop)),
     .                               LocalMutationIsAllowed::Yes,
     .                               flow_state,
     .                           );
     .                       }
     .                   }
20,104 ( 0.01%)      }
     .           
 3,392 ( 0.00%)      fn visit_terminator_before_primary_effect(
     .                   &mut self,
     .                   flow_state: &Flows<'cx, 'tcx>,
     .                   term: &'cx Terminator<'tcx>,
     .                   loc: Location,
     .               ) {
     .                   debug!("MirBorrowckCtxt::process_terminator({:?}, {:?}): {:?}", loc, term, flow_state);
     .                   let span = term.source_info.span;
     .           
     .                   self.check_activations(loc, span, flow_state);
     .           
 2,120 ( 0.00%)          match term.kind {
   168 ( 0.00%)              TerminatorKind::SwitchInt { ref discr, switch_ty: _, targets: _ } => {
   168 ( 0.00%)                  self.consume_operand(loc, (discr, span), flow_state);
     .                       }
     .                       TerminatorKind::Drop { place, target: _, unwind: _ } => {
     .                           debug!(
     .                               "visit_terminator_drop \
     .                                loc: {:?} term: {:?} place: {:?} span: {:?}",
     .                               loc, term, place, span
     .                           );
     .           
-- line 703 ----------------------------------------
-- line 714 ----------------------------------------
     .                           value: ref new_value,
     .                           target: _,
     .                           unwind: _,
     .                       } => {
     .                           self.mutate_place(loc, (drop_place, span), Deep, flow_state);
     .                           self.consume_operand(loc, (new_value, span), flow_state);
     .                       }
     .                       TerminatorKind::Call {
   465 ( 0.00%)                  ref func,
     .                           ref args,
     .                           ref destination,
     .                           cleanup: _,
     .                           from_hir_call: _,
     .                           fn_span: _,
     .                       } => {
 1,240 ( 0.00%)                  self.consume_operand(loc, (func, span), flow_state);
     .                           for arg in args {
 1,560 ( 0.00%)                      self.consume_operand(loc, (arg, span), flow_state);
     .                           }
   618 ( 0.00%)                  if let Some((dest, _ /*bb*/)) = *destination {
 1,836 ( 0.00%)                      self.mutate_place(loc, (dest, span), Deep, flow_state);
     .                           }
     .                       }
     .                       TerminatorKind::Assert { ref cond, expected: _, ref msg, target: _, cleanup: _ } => {
     .                           self.consume_operand(loc, (cond, span), flow_state);
     .                           use rustc_middle::mir::AssertKind;
     .                           if let AssertKind::BoundsCheck { ref len, ref index } = *msg {
     .                               self.consume_operand(loc, (len, span), flow_state);
     .                               self.consume_operand(loc, (index, span), flow_state);
-- line 742 ----------------------------------------
-- line 790 ----------------------------------------
     .                       | TerminatorKind::Resume
     .                       | TerminatorKind::Return
     .                       | TerminatorKind::GeneratorDrop
     .                       | TerminatorKind::FalseEdge { real_target: _, imaginary_target: _ }
     .                       | TerminatorKind::FalseUnwind { real_target: _, unwind: _ } => {
     .                           // no data used, thus irrelevant to borrowck
     .                       }
     .                   }
 3,056 ( 0.00%)      }
     .           
 2,968 ( 0.00%)      fn visit_terminator_after_primary_effect(
     .                   &mut self,
     .                   flow_state: &Flows<'cx, 'tcx>,
     .                   term: &'cx Terminator<'tcx>,
     .                   loc: Location,
     .               ) {
   424 ( 0.00%)          let span = term.source_info.span;
     .           
 1,696 ( 0.00%)          match term.kind {
     .                       TerminatorKind::Yield { value: _, resume: _, resume_arg: _, drop: _ } => {
     .                           if self.movable_generator {
     .                               // Look for any active borrows to locals
     .                               let borrow_set = self.borrow_set.clone();
     .                               for i in flow_state.borrows.iter() {
     .                                   let borrow = &borrow_set[i];
     .                                   self.check_for_local_borrow(borrow, span);
     .                               }
-- line 816 ----------------------------------------
-- line 817 ----------------------------------------
     .                           }
     .                       }
     .           
     .                       TerminatorKind::Resume | TerminatorKind::Return | TerminatorKind::GeneratorDrop => {
     .                           // Returning from the function implicitly kills storage for all locals and statics.
     .                           // Often, the storage will already have been killed by an explicit
     .                           // StorageDead, but we don't always emit those (notably on unwind paths),
     .                           // so this "extra check" serves as a kind of backup.
   222 ( 0.00%)                  let borrow_set = self.borrow_set.clone();
     .                           for i in flow_state.borrows.iter() {
     .                               let borrow = &borrow_set[i];
     .                               self.check_for_invalidation_at_exit(loc, borrow, span);
     .                           }
     .                       }
     .           
     .                       TerminatorKind::Abort
     .                       | TerminatorKind::Assert { .. }
-- line 833 ----------------------------------------
-- line 836 ----------------------------------------
     .                       | TerminatorKind::DropAndReplace { .. }
     .                       | TerminatorKind::FalseEdge { real_target: _, imaginary_target: _ }
     .                       | TerminatorKind::FalseUnwind { real_target: _, unwind: _ }
     .                       | TerminatorKind::Goto { .. }
     .                       | TerminatorKind::SwitchInt { .. }
     .                       | TerminatorKind::Unreachable
     .                       | TerminatorKind::InlineAsm { .. } => {}
     .                   }
 3,392 ( 0.00%)      }
     .           }
     .           
     .           use self::AccessDepth::{Deep, Shallow};
     .           use self::ReadOrWrite::{Activation, Read, Reservation, Write};
     .           
     .           #[derive(Copy, Clone, PartialEq, Eq, Debug)]
     .           enum ArtificialField {
     .               ArrayLength,
-- line 852 ----------------------------------------
-- line 913 ----------------------------------------
     .           /// When checking permissions for a place access, this flag is used to indicate that an immutable
     .           /// local place can be mutated.
     .           //
     .           // FIXME: @nikomatsakis suggested that this flag could be removed with the following modifications:
     .           // - Merge `check_access_permissions()` and `check_if_reassignment_to_immutable_state()`.
     .           // - Split `is_mutable()` into `is_assignable()` (can be directly assigned) and
     .           //   `is_declared_mutable()`.
     .           // - Take flow state into consideration in `is_assignable()` for local variables.
   741 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Debug)]
     .           enum LocalMutationIsAllowed {
     .               Yes,
     .               /// We want use of immutable upvars to cause a "write to immutable upvar"
     .               /// error, not an "reassignment" error.
     .               ExceptUpvars,
     .               No,
     .           }
     .           
-- line 929 ----------------------------------------
-- line 970 ----------------------------------------
     .               }
     .           
     .               /// Checks an access to the given place to see if it is allowed. Examines the set of borrows
     .               /// that are in scope, as well as which paths have been initialized, to ensure that (a) the
     .               /// place is initialized and (b) it is not borrowed in some way that would prevent this
     .               /// access.
     .               ///
     .               /// Returns `true` if an error is reported.
41,808 ( 0.02%)      fn access_place(
     .                   &mut self,
     .                   location: Location,
     .                   place_span: (Place<'tcx>, Span),
     .                   kind: (AccessDepth, ReadOrWrite),
     .                   is_local_mutation_allowed: LocalMutationIsAllowed,
     .                   flow_state: &Flows<'cx, 'tcx>,
     .               ) {
     .                   let (sd, rw) = kind;
     .           
10,452 ( 0.00%)          if let Activation(_, borrow_index) = rw {
   208 ( 0.00%)              if self.reservation_error_reported.contains(&place_span.0) {
     .                           debug!(
     .                               "skipping access_place for activation of invalid reservation \
     .                                place: {:?} borrow_index: {:?}",
     .                               place_span.0, borrow_index
     .                           );
     .                           return;
     .                       }
     .                   }
     .           
     .                   // Check is_empty() first because it's the common case, and doing that
     .                   // way we avoid the clone() call.
 2,613 ( 0.00%)          if !self.access_place_error_reported.is_empty()
     .                       && self.access_place_error_reported.contains(&(place_span.0, place_span.1))
     .                   {
     .                       debug!(
     .                           "access_place: suppressing error place_span=`{:?}` kind=`{:?}`",
     .                           place_span, kind
     .                       );
     .                       return;
     .                   }
     .           
15,678 ( 0.01%)          let mutability_error = self.check_access_permissions(
10,452 ( 0.00%)              place_span,
     .                       rw,
     .                       is_local_mutation_allowed,
     .                       flow_state,
     .                       location,
     .                   );
     .                   let conflict_error =
28,743 ( 0.01%)              self.check_access_for_conflict(location, place_span, sd, rw, flow_state);
     .           
 7,839 ( 0.00%)          if let (Activation(_, borrow_idx), true) = (kind.1, conflict_error) {
     .                       // Suppress this warning when there's an error being emitted for the
     .                       // same borrow: fixing the error is likely to fix the warning.
     .                       self.reservation_warnings.remove(&borrow_idx);
     .                   }
     .           
 7,839 ( 0.00%)          if conflict_error || mutability_error {
     .                       debug!("access_place: logging error place_span=`{:?}` kind=`{:?}`", place_span, kind);
     .           
     .                       self.access_place_error_reported.insert((place_span.0, place_span.1));
     .                   }
20,904 ( 0.01%)      }
     .           
     .               fn check_access_for_conflict(
     .                   &mut self,
     .                   location: Location,
     .                   place_span: (Place<'tcx>, Span),
     .                   sd: AccessDepth,
     .                   rw: ReadOrWrite,
     .                   flow_state: &Flows<'cx, 'tcx>,
     .               ) -> bool {
     .                   debug!(
     .                       "check_access_for_conflict(location={:?}, place_span={:?}, sd={:?}, rw={:?})",
     .                       location, place_span, sd, rw,
     .                   );
     .           
 2,613 ( 0.00%)          let mut error_reported = false;
 7,839 ( 0.00%)          let tcx = self.infcx.tcx;
     .                   let body = self.body;
 5,226 ( 0.00%)          let borrow_set = self.borrow_set.clone();
     .           
     .                   // Use polonius output if it has been enabled.
 5,226 ( 0.00%)          let polonius_output = self.polonius_output.clone();
     .                   let borrows_in_scope = if let Some(polonius) = &polonius_output {
     .                       let location = self.location_table.start_index(location);
     .                       Either::Left(polonius.errors_at(location).iter().copied())
     .                   } else {
     .                       Either::Right(flow_state.borrows.iter())
     .                   };
     .           
33,969 ( 0.01%)          each_borrow_involving_path(
     .                       self,
     .                       tcx,
     .                       body,
     .                       location,
15,678 ( 0.01%)              (sd, place_span.0),
     .                       &borrow_set,
15,678 ( 0.01%)              borrows_in_scope,
30,095 ( 0.01%)              |this, borrow_index, borrow| match (rw, borrow.kind) {
     .                           // Obviously an activation is compatible with its own
     .                           // reservation (or even prior activating uses of same
     .                           // borrow); so don't check if they interfere.
     .                           //
     .                           // NOTE: *reservations* do conflict with themselves;
     .                           // thus aren't injecting unsoundenss w/ this check.)
   104 ( 0.00%)                  (Activation(_, activating), _) if activating == borrow_index => {
     .                               debug!(
     .                                   "check_access_for_conflict place_span: {:?} sd: {:?} rw: {:?} \
     .                                    skipping {:?} b/c activation of same borrow_index",
     .                                   place_span,
     .                                   sd,
     .                                   rw,
     .                                   (borrow_index, borrow),
     .                               );
-- line 1084 ----------------------------------------
-- line 1179 ----------------------------------------
     .                                   }
     .                               }
     .                               Control::Break
     .                           }
     .                       },
     .                   );
     .           
     .                   error_reported
 7,839 ( 0.00%)      }
     .           
 9,620 ( 0.00%)      fn mutate_place(
     .                   &mut self,
     .                   location: Location,
     .                   place_span: (Place<'tcx>, Span),
     .                   kind: AccessDepth,
     .                   flow_state: &Flows<'cx, 'tcx>,
     .               ) {
     .                   // Write of P[i] or *P requires P init'd.
 8,658 ( 0.00%)          self.check_if_assigned_path_is_moved(location, place_span, flow_state);
     .           
     .                   // Special case: you can assign an immutable local variable
     .                   // (e.g., `x = ...`) so long as it has never been initialized
     .                   // before (at this point in the flow).
   962 ( 0.00%)          if let Some(local) = place_span.0.as_local() {
 3,848 ( 0.00%)              if let Mutability::Not = self.body.local_decls[local].mutability {
     .                           // check for reassignments to immutable local variables
     .                           self.check_if_reassignment_to_immutable_state(
     .                               location, local, place_span, flow_state,
     .                           );
     .                           return;
     .                       }
     .                   }
     .           
     .                   // Otherwise, use the normal access permission rules.
 7,404 ( 0.00%)          self.access_place(
     .                       location,
 2,468 ( 0.00%)              place_span,
     .                       (kind, Write(WriteKind::Mutate)),
     .                       LocalMutationIsAllowed::No,
     .                       flow_state,
     .                   );
 7,696 ( 0.00%)      }
     .           
     .               fn consume_rvalue(
     .                   &mut self,
     .                   location: Location,
     .                   (rvalue, span): (&'cx Rvalue<'tcx>, Span),
     .                   flow_state: &Flows<'cx, 'tcx>,
     .               ) {
 4,854 ( 0.00%)          match *rvalue {
 1,629 ( 0.00%)              Rvalue::Ref(_ /*rgn*/, bk, place) => {
 6,268 ( 0.00%)                  let access_kind = match bk {
     .                               BorrowKind::Shallow => {
     .                                   (Shallow(Some(ArtificialField::ShallowBorrow)), Read(ReadKind::Borrow(bk)))
     .                               }
     .                               BorrowKind::Shared => (Deep, Read(ReadKind::Borrow(bk))),
     .                               BorrowKind::Unique | BorrowKind::Mut { .. } => {
     .                                   let wk = WriteKind::MutableBorrow(bk);
   248 ( 0.00%)                          if allow_two_phase_borrow(bk) {
     .                                       (Deep, Reservation(wk))
     .                                   } else {
     .                                       (Deep, Write(wk))
     .                                   }
     .                               }
     .                           };
     .           
11,403 ( 0.00%)                  self.access_place(
     .                               location,
 2,172 ( 0.00%)                      (place, span),
     .                               access_kind,
     .                               LocalMutationIsAllowed::No,
     .                               flow_state,
     .                           );
     .           
     .                           let action = if bk == BorrowKind::Shallow {
     .                               InitializationRequiringAction::MatchOn
     .                           } else {
     .                               InitializationRequiringAction::Borrow
     .                           };
     .           
 3,801 ( 0.00%)                  self.check_if_path_or_subpath_is_moved(
     .                               location,
     .                               action,
 3,801 ( 0.00%)                      (place.as_ref(), span),
     .                               flow_state,
     .                           );
     .                       }
     .           
     .                       Rvalue::AddressOf(mutability, place) => {
     .                           let access_kind = match mutability {
     .                               Mutability::Mut => (
     .                                   Deep,
-- line 1270 ----------------------------------------
-- line 1302 ----------------------------------------
     .                       }
     .           
     .                       Rvalue::Len(place) | Rvalue::Discriminant(place) => {
     .                           let af = match *rvalue {
     .                               Rvalue::Len(..) => Some(ArtificialField::ArrayLength),
     .                               Rvalue::Discriminant(..) => None,
     .                               _ => unreachable!(),
     .                           };
   384 ( 0.00%)                  self.access_place(
     .                               location,
    96 ( 0.00%)                      (place, span),
     .                               (Shallow(af), Read(ReadKind::Copy)),
     .                               LocalMutationIsAllowed::No,
     .                               flow_state,
     .                           );
   168 ( 0.00%)                  self.check_if_path_or_subpath_is_moved(
     .                               location,
     .                               InitializationRequiringAction::Use,
   168 ( 0.00%)                      (place.as_ref(), span),
     .                               flow_state,
     .                           );
     .                       }
     .           
     .                       Rvalue::BinaryOp(_bin_op, box (ref operand1, ref operand2))
     .                       | Rvalue::CheckedBinaryOp(_bin_op, box (ref operand1, ref operand2)) => {
   360 ( 0.00%)                  self.consume_operand(location, (operand1, span), flow_state);
   252 ( 0.00%)                  self.consume_operand(location, (operand2, span), flow_state);
     .                       }
     .           
     .                       Rvalue::NullaryOp(_op, _ty) => {
     .                           // nullary ops take no dynamic input; no borrowck effect.
     .                       }
     .           
     .                       Rvalue::Aggregate(ref aggregate_kind, ref operands) => {
     .                           // We need to report back the list of mutable upvars that were
     .                           // moved into the closure and subsequently used by the closure,
     .                           // in order to populate our used_mut set.
    42 ( 0.00%)                  match **aggregate_kind {
     .                               AggregateKind::Closure(def_id, _) | AggregateKind::Generator(def_id, _, _) => {
     .                                   let BorrowCheckResult { used_mut_upvars, .. } =
     .                                       self.infcx.tcx.mir_borrowck(def_id.expect_local());
     .                                   debug!("{:?} used_mut_upvars={:?}", def_id, used_mut_upvars);
     .                                   for field in used_mut_upvars {
     .                                       self.propagate_closure_used_mut_upvar(&operands[field.index()]);
     .                                   }
     .                               }
-- line 1347 ----------------------------------------
-- line 1448 ----------------------------------------
     .                               }
     .                               _ => propagate_closure_used_mut_place(self, place),
     .                           }
     .                       }
     .                       Operand::Constant(..) => {}
     .                   }
     .               }
     .           
 8,652 ( 0.00%)      fn consume_operand(
     .                   &mut self,
     .                   location: Location,
     .                   (operand, span): (&'cx Operand<'tcx>, Span),
     .                   flow_state: &Flows<'cx, 'tcx>,
     .               ) {
 3,638 ( 0.00%)          match *operand {
   249 ( 0.00%)              Operand::Copy(place) => {
     .                           // copy of place: check if this is "copy of frozen path"
     .                           // (FIXME: see check_loans.rs)
   498 ( 0.00%)                  self.access_place(
     .                               location,
   415 ( 0.00%)                      (place, span),
     .                               (Deep, Read(ReadKind::Copy)),
     .                               LocalMutationIsAllowed::No,
     .                               flow_state,
     .                           );
     .           
     .                           // Finally, check if path was already moved.
     .                           self.check_if_path_or_subpath_is_moved(
     .                               location,
     .                               InitializationRequiringAction::Use,
     .                               (place.as_ref(), span),
     .                               flow_state,
     .                           );
     .                       }
 1,305 ( 0.00%)              Operand::Move(place) => {
     .                           // move of place: check if this is move of already borrowed path
 3,165 ( 0.00%)                  self.access_place(
     .                               location,
 2,175 ( 0.00%)                      (place, span),
     .                               (Deep, Write(WriteKind::Move)),
     .                               LocalMutationIsAllowed::Yes,
     .                               flow_state,
     .                           );
     .           
     .                           // Finally, check if path was already moved.
   160 ( 0.00%)                  self.check_if_path_or_subpath_is_moved(
     .                               location,
     .                               InitializationRequiringAction::Use,
   120 ( 0.00%)                      (place.as_ref(), span),
     .                               flow_state,
     .                           );
     .                       }
     .                       Operand::Constant(_) => {}
     .                   }
 5,768 ( 0.00%)      }
     .           
     .               /// Checks whether a borrow of this place is invalidated when the function
     .               /// exits
     .               fn check_for_invalidation_at_exit(
     .                   &mut self,
     .                   location: Location,
     .                   borrow: &BorrowData<'tcx>,
     .                   span: Span,
-- line 1510 ----------------------------------------
-- line 1573 ----------------------------------------
     .                       err.buffer(&mut self.errors_buffer);
     .                   }
     .               }
     .           
     .               fn check_activations(&mut self, location: Location, span: Span, flow_state: &Flows<'cx, 'tcx>) {
     .                   // Two-phase borrow support: For each activation that is newly
     .                   // generated at this statement, check if it interferes with
     .                   // another borrow.
 5,874 ( 0.00%)          let borrow_set = self.borrow_set.clone();
11,428 ( 0.00%)          for &borrow_index in borrow_set.activations_at_location(location) {
     .                       let borrow = &borrow_set[borrow_index];
     .           
     .                       // only mutable borrows should be 2-phase
   520 ( 0.00%)              assert!(match borrow.kind {
     .                           BorrowKind::Shared | BorrowKind::Shallow => false,
     .                           BorrowKind::Unique | BorrowKind::Mut { .. } => true,
     .                       });
     .           
 1,248 ( 0.00%)              self.access_place(
     .                           location,
   624 ( 0.00%)                  (borrow.borrowed_place, span),
   936 ( 0.00%)                  (Deep, Activation(WriteKind::MutableBorrow(borrow.kind), borrow_index)),
     .                           LocalMutationIsAllowed::No,
     .                           flow_state,
     .                       );
     .                       // We do not need to call `check_if_path_or_subpath_is_moved`
     .                       // again, as we already called it when we made the
     .                       // initial reservation.
     .                   }
     .               }
-- line 1602 ----------------------------------------
-- line 1606 ----------------------------------------
     .                   location: Location,
     .                   local: Local,
     .                   place_span: (Place<'tcx>, Span),
     .                   flow_state: &Flows<'cx, 'tcx>,
     .               ) {
     .                   debug!("check_if_reassignment_to_immutable_state({:?})", local);
     .           
     .                   // Check if any of the initializiations of `local` have happened yet:
 2,070 ( 0.00%)          if let Some(init_index) = self.is_local_ever_initialized(local, flow_state) {
     .                       // And, if so, report an error.
     .                       let init = &self.move_data.inits[init_index];
     .                       let span = init.span(&self.body);
     .                       self.report_illegal_reassignment(location, place_span, span, place_span.0);
     .                   }
     .               }
     .           
15,249 ( 0.01%)      fn check_if_full_path_is_moved(
     .                   &mut self,
     .                   location: Location,
     .                   desired_action: InitializationRequiringAction,
     .                   place_span: (PlaceRef<'tcx>, Span),
     .                   flow_state: &Flows<'cx, 'tcx>,
     .               ) {
     .                   let maybe_uninits = &flow_state.uninits;
     .           
-- line 1630 ----------------------------------------
-- line 1660 ----------------------------------------
     .                   // Therefore, if we seek out the *closest* prefix for which we
     .                   // have a MovePath, that should capture the initialization
     .                   // state for the place scenario.
     .                   //
     .                   // This code covers scenarios 1, 2, and 3.
     .           
     .                   debug!("check_if_full_path_is_moved place: {:?}", place_span.0);
     .                   let (prefix, mpi) = self.move_path_closest_to(place_span.0);
 1,173 ( 0.00%)          if maybe_uninits.contains(mpi) {
     .                       self.report_use_of_moved_or_uninitialized(
     .                           location,
     .                           desired_action,
     .                           (prefix, place_span.0, place_span.1),
     .                           mpi,
     .                       );
     .                   } // Only query longest prefix with a MovePath, not further
     .                   // ancestors; dataflow recurs on children when parents
     .                   // move (to support partial (re)inits).
     .                   //
     .                   // (I.e., querying parents breaks scenario 7; but may want
     .                   // to do such a query based on partial-init feature-gate.)
 9,384 ( 0.00%)      }
     .           
     .               /// Subslices correspond to multiple move paths, so we iterate through the
     .               /// elements of the base array. For each element we check
     .               ///
     .               /// * Does this element overlap with our slice.
     .               /// * Is any part of it uninitialized.
     .               fn check_if_subslice_element_is_moved(
     .                   &mut self,
-- line 1689 ----------------------------------------
-- line 1719 ----------------------------------------
     .                                       return; // don't bother finding other problems.
     .                                   }
     .                               }
     .                           }
     .                       }
     .                   }
     .               }
     .           
12,903 ( 0.01%)      fn check_if_path_or_subpath_is_moved(
     .                   &mut self,
     .                   location: Location,
     .                   desired_action: InitializationRequiringAction,
     .                   place_span: (PlaceRef<'tcx>, Span),
     .                   flow_state: &Flows<'cx, 'tcx>,
     .               ) {
 2,346 ( 0.00%)          let maybe_uninits = &flow_state.uninits;
     .           
     .                   // Bad scenarios:
     .                   //
     .                   // 1. Move of `a.b.c`, use of `a` or `a.b`
     .                   //    partial initialization support, one might have `a.x`
     .                   //    initialized but not `a.b`.
     .                   // 2. All bad scenarios from `check_if_full_path_is_moved`
     .                   //
-- line 1742 ----------------------------------------
-- line 1743 ----------------------------------------
     .                   // OK scenarios:
     .                   //
     .                   // 3. Move of `a.b.c`, use of `a.b.d`
     .                   // 4. Uninitialized `a.x`, initialized `a.b`, use of `a.b`
     .                   // 5. Copied `(a.b: &_)`, use of `*(a.b).c`; note that `a.b`
     .                   //    must have been initialized for the use to be sound.
     .                   // 6. Move of `a.b.c` then reinit of `a.b.c.d`, use of `a.b.c.d`
     .           
 8,211 ( 0.00%)          self.check_if_full_path_is_moved(location, desired_action, place_span, flow_state);
     .           
 2,596 ( 0.00%)          if let Some((place_base, ProjectionElem::Subslice { from, to, from_end: false })) =
 1,173 ( 0.00%)              place_span.0.last_projection()
     .                   {
     .                       let place_ty = place_base.ty(self.body(), self.infcx.tcx);
     .                       if let ty::Array(..) = place_ty.ty.kind() {
     .                           self.check_if_subslice_element_is_moved(
     .                               location,
     .                               desired_action,
     .                               (place_base, place_span.1),
     .                               maybe_uninits,
-- line 1762 ----------------------------------------
-- line 1772 ----------------------------------------
     .                   //
     .                   // (Distinct from handling of scenarios 1+2+4 above because
     .                   // `place` does not interfere with suffixes of its prefixes,
     .                   // e.g., `a.b.c` does not interfere with `a.b.d`)
     .                   //
     .                   // This code covers scenario 1.
     .           
     .                   debug!("check_if_path_or_subpath_is_moved place: {:?}", place_span.0);
 4,692 ( 0.00%)          if let Some(mpi) = self.move_path_for_place(place_span.0) {
 2,096 ( 0.00%)              let uninit_mpi = self
     .                           .move_data
     .                           .find_in_move_path_or_its_descendants(mpi, |mpi| maybe_uninits.contains(mpi));
     .           
 1,048 ( 0.00%)              if let Some(uninit_mpi) = uninit_mpi {
     .                           self.report_use_of_moved_or_uninitialized(
     .                               location,
     .                               desired_action,
     .                               (place_span.0, place_span.0, place_span.1),
     .                               uninit_mpi,
     .                           );
     .                           return; // don't bother finding other problems.
     .                       }
     .                   }
 9,384 ( 0.00%)      }
     .           
     .               /// Currently MoveData does not store entries for all places in
     .               /// the input MIR. For example it will currently filter out
     .               /// places that are Copy; thus we do not track places of shared
     .               /// reference type. This routine will walk up a place along its
     .               /// prefixes, searching for a foundational place that *is*
     .               /// tracked in the MoveData.
     .               ///
     .               /// An Err result includes a tag indicated why the search failed.
     .               /// Currently this can only occur if the place is built off of a
     .               /// static variable, as we do not track those in the MoveData.
     .               fn move_path_closest_to(&mut self, place: PlaceRef<'tcx>) -> (PlaceRef<'tcx>, MovePathIndex) {
15,249 ( 0.01%)          match self.move_data.rev_lookup.find(place) {
     .                       LookupResult::Parent(Some(mpi)) | LookupResult::Exact(mpi) => {
     .                           (self.move_data.move_paths[mpi].place.as_ref(), mpi)
     .                       }
     .                       LookupResult::Parent(None) => panic!("should have move path for every Local"),
     .                   }
     .               }
     .           
     .               fn move_path_for_place(&mut self, place: PlaceRef<'tcx>) -> Option<MovePathIndex> {
     .                   // If returns None, then there is no move path corresponding
     .                   // to a direct owner of `place` (which means there is nothing
     .                   // that borrowck tracks for its analysis).
     .           
10,557 ( 0.00%)          match self.move_data.rev_lookup.find(place) {
     .                       LookupResult::Parent(_) => None,
     .                       LookupResult::Exact(mpi) => Some(mpi),
     .                   }
     .               }
     .           
     .               fn check_if_assigned_path_is_moved(
     .                   &mut self,
     .                   location: Location,
-- line 1829 ----------------------------------------
-- line 1979 ----------------------------------------
     .                   }
     .               }
     .           
     .               /// Checks the permissions for the given place and read or write kind
     .               ///
     .               /// Returns `true` if an error is reported.
     .               fn check_access_permissions(
     .                   &mut self,
 5,226 ( 0.00%)          (place, span): (Place<'tcx>, Span),
     .                   kind: ReadOrWrite,
     .                   is_local_mutation_allowed: LocalMutationIsAllowed,
     .                   flow_state: &Flows<'cx, 'tcx>,
     .                   location: Location,
     .               ) -> bool {
     .                   debug!(
     .                       "check_access_permissions({:?}, {:?}, is_local_mutation_allowed: {:?})",
     .                       place, kind, is_local_mutation_allowed
     .                   );
     .           
     .                   let error_access;
     .                   let the_place_err;
     .           
38,617 ( 0.01%)          match kind {
     .                       Reservation(WriteKind::MutableBorrow(
     .                           borrow_kind @ (BorrowKind::Unique | BorrowKind::Mut { .. }),
     .                       ))
     .                       | Write(WriteKind::MutableBorrow(
     .                           borrow_kind @ (BorrowKind::Unique | BorrowKind::Mut { .. }),
     .                       )) => {
 1,240 ( 0.00%)                  let is_local_mutation_allowed = match borrow_kind {
     .                               BorrowKind::Unique => LocalMutationIsAllowed::Yes,
     .                               BorrowKind::Mut { .. } => is_local_mutation_allowed,
     .                               BorrowKind::Shared | BorrowKind::Shallow => unreachable!(),
     .                           };
   868 ( 0.00%)                  match self.is_mutable(place.as_ref(), is_local_mutation_allowed) {
     .                               Ok(root_place) => {
     .                                   self.add_used_mut(root_place, flow_state);
     .                                   return false;
     .                               }
     .                               Err(place_err) => {
     .                                   error_access = AccessKind::MutableBorrow;
     .                                   the_place_err = place_err;
     .                               }
     .                           }
     .                       }
     .                       Reservation(WriteKind::Mutate) | Write(WriteKind::Mutate) => {
 4,319 ( 0.00%)                  match self.is_mutable(place.as_ref(), is_local_mutation_allowed) {
     .                               Ok(root_place) => {
     .                                   self.add_used_mut(root_place, flow_state);
     .                                   return false;
     .                               }
     .                               Err(place_err) => {
     .                                   error_access = AccessKind::Mutate;
     .                                   the_place_err = place_err;
     .                               }
-- line 2033 ----------------------------------------
-- line 2041 ----------------------------------------
     .                           | WriteKind::MutableBorrow(BorrowKind::Shallow),
     .                       )
     .                       | Write(
     .                           WriteKind::Move
     .                           | WriteKind::StorageDeadOrDrop
     .                           | WriteKind::MutableBorrow(BorrowKind::Shared)
     .                           | WriteKind::MutableBorrow(BorrowKind::Shallow),
     .                       ) => {
 2,484 ( 0.00%)                  if let (Err(_), true) = (
 8,694 ( 0.00%)                      self.is_mutable(place.as_ref(), is_local_mutation_allowed),
     .                               self.errors_buffer.is_empty(),
     .                           ) {
     .                               // rust-lang/rust#46908: In pure NLL mode this code path should be
     .                               // unreachable, but we use `delay_span_bug` because we can hit this when
     .                               // dereferencing a non-Copy raw pointer *and* have `-Ztreat-err-as-bug`
     .                               // enabled. We don't want to ICE for that case, as other errors will have
     .                               // been emitted (#52262).
     .                               self.infcx.tcx.sess.delay_span_bug(
-- line 2058 ----------------------------------------
-- line 2094 ----------------------------------------
     .                   if previously_initialized {
     .                       self.report_mutability_error(place, span, the_place_err, error_access, location);
     .                       true
     .                   } else {
     .                       false
     .                   }
     .               }
     .           
 4,910 ( 0.00%)      fn is_local_ever_initialized(
     .                   &self,
     .                   local: Local,
     .                   flow_state: &Flows<'cx, 'tcx>,
     .               ) -> Option<InitIndex> {
 2,946 ( 0.00%)          let mpi = self.move_data.rev_lookup.find_local(local);
   982 ( 0.00%)          let ii = &self.move_data.init_path_map[mpi];
 4,360 ( 0.00%)          for &index in ii {
 2,828 ( 0.00%)              if flow_state.ever_inits.contains(index) {
     .                           return Some(index);
     .                       }
     .                   }
     .                   None
 3,928 ( 0.00%)      }
     .           
     .               /// Adds the place into the used mutable variables set
 2,964 ( 0.00%)      fn add_used_mut(&mut self, root_place: RootPlace<'tcx>, flow_state: &Flows<'cx, 'tcx>) {
     .                   match root_place {
 2,223 ( 0.00%)              RootPlace { place_local: local, place_projection: [], is_local_mutation_allowed } => {
     .                           // If the local may have been initialized, and it is now currently being
     .                           // mutated, then it is justified to be annotated with the `mut`
     .                           // keyword, since the mutation may be a possible reassignment.
 1,378 ( 0.00%)                  if is_local_mutation_allowed != LocalMutationIsAllowed::Yes
 1,911 ( 0.00%)                      && self.is_local_ever_initialized(local, flow_state).is_some()
     .                           {
     .                               self.used_mut.insert(local);
     .                           }
     .                       }
     .                       RootPlace {
     .                           place_local: _,
     .                           place_projection: _,
     .                           is_local_mutation_allowed: LocalMutationIsAllowed::Yes,
-- line 2133 ----------------------------------------
-- line 2140 ----------------------------------------
     .                           if let Some(field) = self.is_upvar_field_projection(PlaceRef {
     .                               local: place_local,
     .                               projection: place_projection,
     .                           }) {
     .                               self.used_mut_upvars.push(field);
     .                           }
     .                       }
     .                   }
 2,884 ( 0.00%)      }
     .           
     .               /// Whether this value can be written or borrowed mutably.
     .               /// Returns the root place if the place passed in is a projection.
22,957 ( 0.01%)      fn is_mutable(
     .                   &self,
     .                   place: PlaceRef<'tcx>,
     .                   is_local_mutation_allowed: LocalMutationIsAllowed,
     .               ) -> Result<RootPlace<'tcx>, PlaceRef<'tcx>> {
     .                   debug!("is_mutable: place={:?}, is_local...={:?}", place, is_local_mutation_allowed);
 6,469 ( 0.00%)          match place.last_projection() {
     .                       None => {
 1,983 ( 0.00%)                  let local = &self.body.local_decls[place.local];
 5,949 ( 0.00%)                  match local.mutability {
   898 ( 0.00%)                      Mutability::Not => match is_local_mutation_allowed {
 2,694 ( 0.00%)                          LocalMutationIsAllowed::Yes => Ok(RootPlace {
     .                                       place_local: place.local,
     .                                       place_projection: place.projection,
     .                                       is_local_mutation_allowed: LocalMutationIsAllowed::Yes,
     .                                   }),
     .                                   LocalMutationIsAllowed::ExceptUpvars => Ok(RootPlace {
     .                                       place_local: place.local,
     .                                       place_projection: place.projection,
     .                                       is_local_mutation_allowed: LocalMutationIsAllowed::ExceptUpvars,
     .                                   }),
     .                                   LocalMutationIsAllowed::No => Err(place),
     .                               },
 3,068 ( 0.00%)                      Mutability::Mut => Ok(RootPlace {
     .                                   place_local: place.local,
     .                                   place_projection: place.projection,
     .                                   is_local_mutation_allowed,
     .                               }),
     .                           }
     .                       }
     .                       Some((place_base, elem)) => {
   312 ( 0.00%)                  match elem {
     .                               ProjectionElem::Deref => {
   208 ( 0.00%)                          let base_ty = place_base.ty(self.body(), self.infcx.tcx).ty;
     .           
     .                                   // Check the kind of deref to decide
   624 ( 0.00%)                          match base_ty.kind() {
     .                                       ty::Ref(_, _, mutbl) => {
   208 ( 0.00%)                                  match mutbl {
     .                                               // Shared borrowed data is never mutable
     .                                               hir::Mutability::Not => Err(place),
     .                                               // Mutably borrowed data is mutable, but only if we have a
     .                                               // unique path to the `&mut`
     .                                               hir::Mutability::Mut => {
   208 ( 0.00%)                                          let mode = match self.is_upvar_field_projection(place) {
     .                                                       Some(field) if self.upvars[field.index()].by_ref => {
     .                                                           is_local_mutation_allowed
     .                                                       }
     .                                                       _ => LocalMutationIsAllowed::Yes,
     .                                                   };
     .           
   624 ( 0.00%)                                          self.is_mutable(place_base, mode)
     .                                               }
     .                                           }
     .                                       }
     .                                       ty::RawPtr(tnm) => {
     .                                           match tnm.mutbl {
     .                                               // `*const` raw pointers are not mutable
     .                                               hir::Mutability::Not => Err(place),
     .                                               // `*mut` raw pointers are always mutable, regardless of
-- line 2211 ----------------------------------------
-- line 2285 ----------------------------------------
     .                                       }
     .                                   } else {
     .                                       self.is_mutable(place_base, is_local_mutation_allowed)
     .                                   }
     .                               }
     .                           }
     .                       }
     .                   }
16,696 ( 0.01%)      }
     .           
     .               /// If `place` is a field projection, and the field is being projected from a closure type,
     .               /// then returns the index of the field being projected. Note that this closure will always
     .               /// be `self` in the current MIR, because that is the only time we directly access the fields
     .               /// of a closure type.
     .               fn is_upvar_field_projection(&self, place_ref: PlaceRef<'tcx>) -> Option<Field> {
   936 ( 0.00%)          path_utils::is_upvar_field_projection(self.infcx.tcx, &self.upvars, place_ref, self.body())
     .               }
     .           }
     .           
     .           /// The degree of overlap between 2 places for borrow-checking.
     .           enum Overlap {
     .               /// The places might partially overlap - in this case, we give
     .               /// up and say that they might conflict. This occurs when
     .               /// different fields of a union are borrowed. For example,
-- line 2308 ----------------------------------------

81,969 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_borrowck/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/obligation_forest/mod.rs
--------------------------------------------------------------------------------
Ir              

-- line 121 ----------------------------------------
     .           #[derive(Debug)]
     .           pub enum ProcessResult<O, E> {
     .               Unchanged,
     .               Changed(Vec<O>),
     .               Error(E),
     .           }
     .           
     .           #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
 4,498 ( 0.00%)  struct ObligationTreeId(usize);
     .           
     .           type ObligationTreeIdGenerator =
     .               std::iter::Map<std::ops::RangeFrom<usize>, fn(usize) -> ObligationTreeId>;
     .           
     .           pub struct ObligationForest<O: ForestObligation> {
     .               /// The list of obligations. In between calls to `process_obligations`,
     .               /// this list only contains nodes in the `Pending` or `Waiting` state.
     .               ///
-- line 137 ----------------------------------------
-- line 181 ----------------------------------------
     .               has_parent: bool,
     .           
     .               /// Identifier of the obligation tree to which this node belongs.
     .               obligation_tree_id: ObligationTreeId,
     .           }
     .           
     .           impl<O> Node<O> {
     .               fn new(parent: Option<usize>, obligation: O, obligation_tree_id: ObligationTreeId) -> Node<O> {
50,992 ( 0.02%)          Node {
     .                       obligation,
     .                       state: Cell::new(NodeState::Pending),
 6,001 ( 0.00%)              dependents: if let Some(parent_index) = parent { vec![parent_index] } else { vec![] },
     .                       has_parent: parent.is_some(),
     .                       obligation_tree_id,
     .                   }
     .               }
     .           }
     .           
     .           /// The state of one node in some tree within the forest. This represents the
     .           /// current state of processing for the obligation (of type `O`) associated
-- line 200 ----------------------------------------
-- line 223 ----------------------------------------
     .           ///  |     compress()
     .           ///  v
     .           /// (Removed)
     .           /// ```
     .           /// The `Error` state can be introduced in several places, via `error_at()`.
     .           ///
     .           /// Outside of `ObligationForest` methods, nodes should be either `Pending` or
     .           /// `Waiting`.
25,514 ( 0.01%)  #[derive(Debug, Copy, Clone, PartialEq, Eq)]
     .           enum NodeState {
     .               /// This obligation has not yet been selected successfully. Cannot have
     .               /// subobligations.
     .               Pending,
     .           
     .               /// This obligation was selected successfully, but may or may not have
     .               /// subobligations.
     .               Success,
-- line 239 ----------------------------------------
-- line 279 ----------------------------------------
     .               pub stalled: bool,
     .           }
     .           
     .           impl<O, E> OutcomeTrait for Outcome<O, E> {
     .               type Error = Error<O, E>;
     .               type Obligation = O;
     .           
     .               fn new() -> Self {
 9,100 ( 0.00%)          Self { stalled: true, errors: vec![] }
     .               }
     .           
     .               fn mark_not_stalled(&mut self) {
 3,173 ( 0.00%)          self.stalled = false;
     .               }
     .           
     .               fn is_stalled(&self) -> bool {
 1,236 ( 0.00%)          self.stalled
     .               }
     .           
     .               fn record_completed(&mut self, _outcome: &Self::Obligation) {
     .                   // do nothing
     .               }
     .           
     .               fn record_error(&mut self, error: Self::Error) {
     .                   self.errors.push(error)
-- line 303 ----------------------------------------
-- line 306 ----------------------------------------
     .           
     .           #[derive(Debug, PartialEq, Eq)]
     .           pub struct Error<O, E> {
     .               pub error: E,
     .               pub backtrace: Vec<O>,
     .           }
     .           
     .           impl<O: ForestObligation> ObligationForest<O> {
 1,299 ( 0.00%)      pub fn new() -> ObligationForest<O> {
15,588 ( 0.01%)          ObligationForest {
     .                       nodes: vec![],
     .                       done_cache: Default::default(),
     .                       active_cache: Default::default(),
     .                       reused_node_vec: vec![],
     .                       obligation_tree_id_generator: (0..).map(ObligationTreeId),
     .                       error_cache: Default::default(),
     .                   }
 1,299 ( 0.00%)      }
     .           
     .               /// Returns the total number of nodes in the forest that have not
     .               /// yet been fully resolved.
     .               pub fn len(&self) -> usize {
     .                   self.nodes.len()
     .               }
     .           
     .               /// Registers an obligation.
     .               pub fn register_obligation(&mut self, obligation: O) {
     .                   // Ignore errors here - there is no guarantee of success.
31,785 ( 0.01%)          let _ = self.register_obligation_at(obligation, None);
     .               }
     .           
     .               // Returns Err(()) if we already know this obligation failed.
40,744 ( 0.02%)      fn register_obligation_at(&mut self, obligation: O, parent: Option<usize>) -> Result<(), ()> {
 7,408 ( 0.00%)          let cache_key = obligation.as_cache_key();
 7,408 ( 0.00%)          if self.done_cache.contains(&cache_key) {
     .                       debug!("register_obligation_at: ignoring already done obligation: {:?}", obligation);
     .                       return Ok(());
     .                   }
     .           
21,120 ( 0.01%)          match self.active_cache.entry(cache_key) {
     .                       Entry::Occupied(o) => {
   666 ( 0.00%)                  let node = &mut self.nodes[*o.get()];
   666 ( 0.00%)                  if let Some(parent_index) = parent {
     .                               // If the node is already in `active_cache`, it has already
     .                               // had its chance to be marked with a parent. So if it's
     .                               // not already present, just dump `parent` into the
     .                               // dependents as a non-parent.
   840 ( 0.00%)                      if !node.dependents.contains(&parent_index) {
     .                                   node.dependents.push(parent_index);
     .                               }
     .                           }
   999 ( 0.00%)                  if let NodeState::Error = node.state.get() { Err(()) } else { Ok(()) }
     .                       }
 9,561 ( 0.00%)              Entry::Vacant(v) => {
19,122 ( 0.01%)                  let obligation_tree_id = match parent {
 1,876 ( 0.00%)                      Some(parent_index) => self.nodes[parent_index].obligation_tree_id,
     .                               None => self.obligation_tree_id_generator.next().unwrap(),
     .                           };
     .           
     .                           let already_failed = parent.is_some()
     .                               && self
     .                                   .error_cache
     .                                   .get(&obligation_tree_id)
     .                                   .map_or(false, |errors| errors.contains(v.key()));
     .           
     .                           if already_failed {
     .                               Err(())
     .                           } else {
 3,187 ( 0.00%)                      let new_index = self.nodes.len();
     .                               v.insert(new_index);
     .                               self.nodes.push(Node::new(parent, obligation, obligation_tree_id));
     .                               Ok(())
     .                           }
     .                       }
     .                   }
33,336 ( 0.01%)      }
     .           
     .               /// Converts all remaining obligations to the given error.
18,564 ( 0.01%)      pub fn to_errors<E: Clone>(&mut self, error: E) -> Vec<Error<O, E>> {
     .                   let errors = self
     .                       .nodes
     .                       .iter()
     .                       .enumerate()
     .                       .filter(|(_index, node)| node.state.get() == NodeState::Pending)
     .                       .map(|(index, _node)| Error { error: error.clone(), backtrace: self.error_at(index) })
     .                       .collect();
     .           
 5,304 ( 0.00%)          self.compress(|_| assert!(false));
     .                   errors
15,912 ( 0.01%)      }
     .           
     .               /// Returns the set of obligations that are in a pending state.
     .               pub fn map_pending_obligations<P, F>(&self, f: F) -> Vec<P>
     .               where
     .                   F: Fn(&O) -> P,
     .               {
     .                   self.nodes
     .                       .iter()
-- line 403 ----------------------------------------
-- line 414 ----------------------------------------
     .                       .insert(node.obligation.as_cache_key());
     .               }
     .           
     .               /// Performs a pass through the obligation list. This must
     .               /// be called in a loop until `outcome.stalled` is false.
     .               ///
     .               /// This _cannot_ be unrolled (presently, at least).
     .               #[inline(never)]
40,950 ( 0.02%)      pub fn process_obligations<P, OUT>(&mut self, processor: &mut P) -> OUT
     .               where
     .                   P: ObligationProcessor<Obligation = O>,
     .                   OUT: OutcomeTrait<Obligation = O, Error = Error<O, P::Error>>,
     .               {
     .                   let mut outcome = OUT::new();
     .           
     .                   // Note that the loop body can append new nodes, and those new nodes
     .                   // will then be processed by subsequent iterations of the loop.
     .                   //
     .                   // We can't use an iterator for the loop because `self.nodes` is
     .                   // appended to and the borrow checker would complain. We also can't use
     .                   // `for index in 0..self.nodes.len() { ... }` because the range would
     .                   // be computed with the initial length, and we would miss the appended
     .                   // nodes. Therefore we use a `while` loop.
     .                   let mut index = 0;
12,052 ( 0.00%)          while let Some(node) = self.nodes.get_mut(index) {
     .                       // `processor.process_obligation` can modify the predicate within
     .                       // `node.obligation`, and that predicate is the key used for
     .                       // `self.active_cache`. This means that `self.active_cache` can get
     .                       // out of sync with `nodes`. It's not very common, but it does
     .                       // happen, and code in `compress` has to allow for it.
15,004 ( 0.01%)              if node.state.get() != NodeState::Pending {
   565 ( 0.00%)                  index += 1;
     .                           continue;
     .                       }
     .           
16,864 ( 0.01%)              match processor.process_obligation(&mut node.obligation) {
     .                           ProcessResult::Unchanged => {
     .                               // No change in state.
     .                           }
12,692 ( 0.00%)                  ProcessResult::Changed(children) => {
     .                               // We are not (yet) stalled.
     .                               outcome.mark_not_stalled();
     .                               node.state.set(NodeState::Success);
     .           
15,210 ( 0.01%)                      for child in children {
21,403 ( 0.01%)                          let st = self.register_obligation_at(child, Some(index));
 2,518 ( 0.00%)                          if let Err(()) = st {
     .                                       // Error already reported - propagate it
     .                                       // to our node.
     .                                       self.error_at(index);
     .                                   }
     .                               }
     .                           }
     .                           ProcessResult::Error(err) => {
     .                               outcome.mark_not_stalled();
     .                               outcome.record_error(Error { error: err, backtrace: self.error_at(index) });
     .                           }
     .                       }
13,874 ( 0.01%)              index += 1;
     .                   }
     .           
     .                   // There's no need to perform marking, cycle processing and compression when nothing
     .                   // changed.
 1,236 ( 0.00%)          if !outcome.is_stalled() {
     .                       self.mark_successes();
     .                       self.process_cycles(processor);
 1,542 ( 0.00%)              self.compress(|obl| outcome.record_completed(obl));
     .                   }
     .           
     .                   outcome
40,950 ( 0.02%)      }
     .           
     .               /// Returns a vector of obligations for `p` and all of its
     .               /// ancestors, putting them into the error state in the process.
     .               fn error_at(&self, mut index: usize) -> Vec<O> {
     .                   let mut error_stack: Vec<usize> = vec![];
     .                   let mut trace = vec![];
     .           
     .                   loop {
-- line 492 ----------------------------------------
-- line 516 ----------------------------------------
     .                   trace
     .               }
     .           
     .               /// Mark all `Waiting` nodes as `Success`, except those that depend on a
     .               /// pending node.
     .               fn mark_successes(&self) {
     .                   // Convert all `Waiting` nodes to `Success`.
     .                   for node in &self.nodes {
14,058 ( 0.01%)              if node.state.get() == NodeState::Waiting {
     .                           node.state.set(NodeState::Success);
     .                       }
     .                   }
     .           
     .                   // Convert `Success` nodes that depend on a pending node back to
     .                   // `Waiting`.
     .                   for node in &self.nodes {
 4,573 ( 0.00%)              if node.state.get() == NodeState::Pending {
     .                           // This call site is hot.
     .                           self.inlined_mark_dependents_as_waiting(node);
     .                       }
     .                   }
     .               }
     .           
     .               // This always-inlined function is for the hot call site.
     .               #[inline(always)]
     .               fn inlined_mark_dependents_as_waiting(&self, node: &Node<O>) {
   181 ( 0.00%)          for &index in node.dependents.iter() {
     .                       let node = &self.nodes[index];
   181 ( 0.00%)              let state = node.state.get();
   181 ( 0.00%)              if state == NodeState::Success {
     .                           // This call site is cold.
   543 ( 0.00%)                  self.uninlined_mark_dependents_as_waiting(node);
     .                       } else {
     .                           debug_assert!(state == NodeState::Waiting || state == NodeState::Error)
     .                       }
     .                   }
     .               }
     .           
     .               // This never-inlined function is for the cold call site.
     .               #[inline(never)]
 1,267 ( 0.00%)      fn uninlined_mark_dependents_as_waiting(&self, node: &Node<O>) {
     .                   // Mark node Waiting in the cold uninlined code instead of the hot inlined
     .                   node.state.set(NodeState::Waiting);
     .                   self.inlined_mark_dependents_as_waiting(node)
 1,448 ( 0.00%)      }
     .           
     .               /// Report cycles between all `Success` nodes, and convert all `Success`
     .               /// nodes to `Done`. This must be called after `mark_successes`.
     .               fn process_cycles<P>(&mut self, processor: &mut P)
     .               where
     .                   P: ObligationProcessor<Obligation = O>,
     .               {
   771 ( 0.00%)          let mut stack = std::mem::take(&mut self.reused_node_vec);
     .                   for (index, node) in self.nodes.iter().enumerate() {
     .                       // For some benchmarks this state test is extremely hot. It's a win
     .                       // to handle the no-op cases immediately to avoid the cost of the
     .                       // function call.
 4,573 ( 0.00%)              if node.state.get() == NodeState::Success {
15,080 ( 0.01%)                  self.find_cycles_from_node(&mut stack, processor, index);
     .                       }
     .                   }
     .           
     .                   debug_assert!(stack.is_empty());
 6,168 ( 0.00%)          self.reused_node_vec = stack;
     .               }
     .           
37,008 ( 0.01%)      fn find_cycles_from_node<P>(&self, stack: &mut Vec<usize>, processor: &mut P, index: usize)
     .               where
     .                   P: ObligationProcessor<Obligation = O>,
     .               {
     .                   let node = &self.nodes[index];
 8,224 ( 0.00%)          if node.state.get() == NodeState::Success {
   314 ( 0.00%)              match stack.iter().rposition(|&n| n == index) {
     .                           None => {
     .                               stack.push(index);
 1,096 ( 0.00%)                      for &dep_index in node.dependents.iter() {
 4,384 ( 0.00%)                          self.find_cycles_from_node(stack, processor, dep_index);
     .                               }
     .                               stack.pop();
     .                               node.state.set(NodeState::Done);
     .                           }
     .                           Some(rpos) => {
     .                               // Cycle detected.
     .                               processor.process_backedge(
     .                                   stack[rpos..].iter().map(|&i| &self.nodes[i].obligation),
     .                                   PhantomData,
     .                               );
     .                           }
     .                       }
     .                   }
32,896 ( 0.01%)      }
     .           
     .               /// Compresses the vector, removing all popped nodes. This adjusts the
     .               /// indices and hence invalidates any outstanding indices. `process_cycles`
     .               /// must be run beforehand to remove any cycles on `Success` nodes.
     .               #[inline(never)]
24,732 ( 0.01%)      fn compress(&mut self, mut outcome_cb: impl FnMut(&O)) {
 3,423 ( 0.00%)          let orig_nodes_len = self.nodes.len();
     .                   let mut node_rewrites: Vec<_> = std::mem::take(&mut self.reused_node_vec);
     .                   debug_assert!(node_rewrites.is_empty());
     .                   node_rewrites.extend(0..orig_nodes_len);
     .                   let mut dead_nodes = 0;
     .           
     .                   // Move removable nodes to the end, preserving the order of the
     .                   // remaining nodes.
     .                   //
     .                   // LOOP INVARIANT:
     .                   //     self.nodes[0..index - dead_nodes] are the first remaining nodes
     .                   //     self.nodes[index - dead_nodes..index] are all dead
     .                   //     self.nodes[index..] are unchanged
     .                   for index in 0..orig_nodes_len {
     .                       let node = &self.nodes[index];
25,949 ( 0.01%)              match node.state.get() {
     .                           NodeState::Pending | NodeState::Waiting => {
 2,800 ( 0.00%)                      if dead_nodes > 0 {
 1,395 ( 0.00%)                          self.nodes.swap(index, index - dead_nodes);
 2,325 ( 0.00%)                          node_rewrites[index] -= dead_nodes;
     .                               }
     .                           }
     .                           NodeState::Done => {
     .                               // This lookup can fail because the contents of
     .                               // `self.active_cache` are not guaranteed to match those of
     .                               // `self.nodes`. See the comment in `process_obligation`
     .                               // for more details.
12,084 ( 0.00%)                      if let Some((predicate, _)) =
 9,519 ( 0.00%)                          self.active_cache.remove_entry(&node.obligation.as_cache_key())
     .                               {
     .                                   self.done_cache.insert(predicate);
     .                               } else {
     .                                   self.done_cache.insert(node.obligation.as_cache_key().clone());
     .                               }
     .                               // Extract the success stories.
     .                               outcome_cb(&node.obligation);
 6,346 ( 0.00%)                      node_rewrites[index] = orig_nodes_len;
 6,346 ( 0.00%)                      dead_nodes += 1;
     .                           }
     .                           NodeState::Error => {
     .                               // We *intentionally* remove the node from the cache at this point. Otherwise
     .                               // tests must come up with a different type on every type error they
     .                               // check against.
     .                               self.active_cache.remove(&node.obligation.as_cache_key());
     .                               self.insert_into_error_cache(index);
     .                               node_rewrites[index] = orig_nodes_len;
-- line 658 ----------------------------------------
-- line 659 ----------------------------------------
     .                               dead_nodes += 1;
     .                           }
     .                           NodeState::Success => unreachable!(),
     .                       }
     .                   }
     .           
     .                   if dead_nodes > 0 {
     .                       // Remove the dead nodes and rewrite indices.
 1,514 ( 0.00%)              self.nodes.truncate(orig_nodes_len - dead_nodes);
   757 ( 0.00%)              self.apply_rewrites(&node_rewrites);
     .                   }
     .           
     .                   node_rewrites.truncate(0);
13,692 ( 0.01%)          self.reused_node_vec = node_rewrites;
27,384 ( 0.01%)      }
     .           
     .               #[inline(never)]
 6,813 ( 0.00%)      fn apply_rewrites(&mut self, node_rewrites: &[usize]) {
     .                   let orig_nodes_len = node_rewrites.len();
     .           
     .                   for node in &mut self.nodes {
     .                       let mut i = 0;
 1,525 ( 0.00%)              while let Some(dependent) = node.dependents.get_mut(i) {
   668 ( 0.00%)                  let new_index = node_rewrites[*dependent];
   334 ( 0.00%)                  if new_index >= orig_nodes_len {
     .                               node.dependents.swap_remove(i);
     .                               if i == 0 && node.has_parent {
     .                                   // We just removed the parent.
     .                                   node.has_parent = false;
     .                               }
     .                           } else {
   167 ( 0.00%)                      *dependent = new_index;
   334 ( 0.00%)                      i += 1;
     .                           }
     .                       }
     .                   }
     .           
     .                   // This updating of `self.active_cache` is necessary because the
     .                   // removal of nodes within `compress` can fail. See above.
     .                   self.active_cache.retain(|_predicate, index| {
 7,864 ( 0.00%)              let new_index = node_rewrites[*index];
 3,932 ( 0.00%)              if new_index >= orig_nodes_len {
     .                           false
     .                       } else {
 1,358 ( 0.00%)                  *index = new_index;
     .                           true
     .                       }
     .                   });
 6,056 ( 0.00%)      }
     .           }

71,597 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/obligation_forest/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs
--------------------------------------------------------------------------------
Ir               

-- line 91 ----------------------------------------
      .           // maximum of number bytes needed to fill an 8-byte-sized element on which
      .           // SipHash operates. Note that for variable-sized copies which are known to be
      .           // less than 8 bytes, this function will perform more work than necessary unless
      .           // the compiler is able to optimize the extra work away.
      .           #[inline]
      .           unsafe fn copy_nonoverlapping_small(src: *const u8, dst: *mut u8, count: usize) {
      .               debug_assert!(count <= 8);
      .           
  9,860 ( 0.00%)      if count == 8 {
      .                   ptr::copy_nonoverlapping(src, dst, 8);
      .                   return;
      .               }
      .           
      .               let mut i = 0;
 13,454 ( 0.01%)      if i + 3 < count {
      .                   ptr::copy_nonoverlapping(src.add(i), dst.add(i), 4);
      .                   i += 4;
      .               }
      .           
 29,189 ( 0.01%)      if i + 1 < count {
      .                   ptr::copy_nonoverlapping(src.add(i), dst.add(i), 2);
  3,728 ( 0.00%)          i += 2
      .               }
      .           
 13,454 ( 0.01%)      if i < count {
  6,566 ( 0.00%)          *dst.add(i) = *src.add(i);
      .                   i += 1;
      .               }
      .           
      .               debug_assert_eq!(i, count);
      .           }
      .           
      .           // # Implementation
      .           //
-- line 124 ----------------------------------------
-- line 201 ----------------------------------------
      .           
      .                   hasher
      .               }
      .           
      .               // A specialized write function for values with size <= 8.
      .               #[inline]
      .               fn short_write<T>(&mut self, x: T) {
      .                   let size = mem::size_of::<T>();
110,411 ( 0.04%)          let nbuf = self.nbuf;
      .                   debug_assert!(size <= 8);
      .                   debug_assert!(nbuf < BUFFER_SIZE);
      .                   debug_assert!(nbuf + size < BUFFER_WITH_SPILL_SIZE);
      .           
757,518 ( 0.29%)          if nbuf + size < BUFFER_SIZE {
      .                       unsafe {
      .                           // The memcpy call is optimized away because the size is known.
      .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
      .                           ptr::copy_nonoverlapping(&x as *const _ as *const u8, dst, size);
      .                       }
      .           
238,207 ( 0.09%)              self.nbuf = nbuf + size;
      .           
      .                       return;
      .                   }
      .           
 40,734 ( 0.02%)          unsafe { self.short_write_process_buffer(x) }
      .               }
      .           
      .               // A specialized write function for values with size <= 8 that should only
      .               // be called when the write would cause the buffer to fill.
      .               //
      .               // SAFETY: the write of `x` into `self.buf` starting at byte offset
      .               // `self.nbuf` must cause `self.buf` to become fully initialized (and not
      .               // overflow) if it wasn't already.
      .               #[inline(never)]
 12,120 ( 0.00%)      unsafe fn short_write_process_buffer<T>(&mut self, x: T) {
      .                   let size = mem::size_of::<T>();
 12,120 ( 0.00%)          let nbuf = self.nbuf;
      .                   debug_assert!(size <= 8);
      .                   debug_assert!(nbuf < BUFFER_SIZE);
      .                   debug_assert!(nbuf + size >= BUFFER_SIZE);
      .                   debug_assert!(nbuf + size < BUFFER_WITH_SPILL_SIZE);
      .           
      .                   // Copy first part of input into end of buffer, possibly into spill
      .                   // element. The memcpy call is optimized away because the size is known.
      .                   let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
      .                   ptr::copy_nonoverlapping(&x as *const _ as *const u8, dst, size);
      .           
      .                   // Process buffer.
      .                   for i in 0..BUFFER_CAPACITY {
121,200 ( 0.05%)              let elem = self.buf.get_unchecked(i).assume_init().to_le();
 96,960 ( 0.04%)              self.state.v3 ^= elem;
      .                       Sip24Rounds::c_rounds(&mut self.state);
109,080 ( 0.04%)              self.state.v0 ^= elem;
      .                   }
      .           
      .                   // Copy remaining input into start of buffer by copying size - 1
      .                   // elements from spill (at most size - 1 bytes could have overflowed
      .                   // into the spill). The memcpy call is optimized away because the size
      .                   // is known. And the whole copy is optimized away for size == 1.
      .                   let src = self.buf.get_unchecked(BUFFER_SPILL_INDEX) as *const _ as *const u8;
      .                   ptr::copy_nonoverlapping(src, self.buf.as_mut_ptr() as *mut u8, size - 1);
      .           
      .                   // This function should only be called when the write fills the buffer.
      .                   // Therefore, when size == 1, the new `self.nbuf` must be zero. The size
      .                   // is statically known, so the branch is optimized away.
 57,916 ( 0.02%)          self.nbuf = if size == 1 { 0 } else { nbuf + size - BUFFER_SIZE };
 48,480 ( 0.02%)          self.processed += BUFFER_SIZE;
 24,240 ( 0.01%)      }
      .           
      .               // A write function for byte slices.
      .               #[inline]
      .               fn slice_write(&mut self, msg: &[u8]) {
      .                   let length = msg.len();
  4,361 ( 0.00%)          let nbuf = self.nbuf;
      .                   debug_assert!(nbuf < BUFFER_SIZE);
      .           
 41,494 ( 0.02%)          if nbuf + length < BUFFER_SIZE {
      .                       unsafe {
      .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
      .           
 15,314 ( 0.01%)                  if length <= 8 {
      .                               copy_nonoverlapping_small(msg.as_ptr(), dst, length);
      .                           } else {
      .                               // This memcpy is *not* optimized away.
      .                               ptr::copy_nonoverlapping(msg.as_ptr(), dst, length);
      .                           }
      .                       }
      .           
  7,673 ( 0.00%)              self.nbuf = nbuf + length;
      .           
      .                       return;
      .                   }
      .           
  4,243 ( 0.00%)          unsafe { self.slice_write_process_buffer(msg) }
      .               }
      .           
      .               // A write function for byte slices that should only be called when the
      .               // write would cause the buffer to fill.
      .               //
      .               // SAFETY: `self.buf` must be initialized up to the byte offset `self.nbuf`,
      .               // and `msg` must contain enough bytes to initialize the rest of the element
      .               // containing the byte offset `self.nbuf`.
      .               #[inline(never)]
  3,035 ( 0.00%)      unsafe fn slice_write_process_buffer(&mut self, msg: &[u8]) {
      .                   let length = msg.len();
    607 ( 0.00%)          let nbuf = self.nbuf;
      .                   debug_assert!(nbuf < BUFFER_SIZE);
      .                   debug_assert!(nbuf + length >= BUFFER_SIZE);
      .           
      .                   // Always copy first part of input into current element of buffer.
      .                   // This function should only be called when the write fills the buffer,
      .                   // so we know that there is enough input to fill the current element.
  1,821 ( 0.00%)          let valid_in_elem = nbuf % ELEM_SIZE;
    607 ( 0.00%)          let needed_in_elem = ELEM_SIZE - valid_in_elem;
      .           
      .                   let src = msg.as_ptr();
      .                   let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
      .                   copy_nonoverlapping_small(src, dst, needed_in_elem);
      .           
      .                   // Process buffer.
      .           
      .                   // Using `nbuf / ELEM_SIZE + 1` rather than `(nbuf + needed_in_elem) /
      .                   // ELEM_SIZE` to show the compiler that this loop's upper bound is > 0.
      .                   // We know that is true, because last step ensured we have a full
      .                   // element in the buffer.
  1,214 ( 0.00%)          let last = nbuf / ELEM_SIZE + 1;
      .           
      .                   for i in 0..last {
  4,696 ( 0.00%)              let elem = self.buf.get_unchecked(i).assume_init().to_le();
  5,303 ( 0.00%)              self.state.v3 ^= elem;
      .                       Sip24Rounds::c_rounds(&mut self.state);
  9,392 ( 0.00%)              self.state.v0 ^= elem;
      .                   }
      .           
      .                   // Process the remaining element-sized chunks of input.
      .                   let mut processed = needed_in_elem;
  1,214 ( 0.00%)          let input_left = length - processed;
    573 ( 0.00%)          let elems_left = input_left / ELEM_SIZE;
      .                   let extra_bytes_left = input_left % ELEM_SIZE;
      .           
      .                   for _ in 0..elems_left {
    264 ( 0.00%)              let elem = (msg.as_ptr().add(processed) as *const u64).read_unaligned().to_le();
    264 ( 0.00%)              self.state.v3 ^= elem;
      .                       Sip24Rounds::c_rounds(&mut self.state);
    264 ( 0.00%)              self.state.v0 ^= elem;
    528 ( 0.00%)              processed += ELEM_SIZE;
      .                   }
      .           
      .                   // Copy remaining input into start of buffer.
      .                   let src = msg.as_ptr().add(processed);
      .                   let dst = self.buf.as_mut_ptr() as *mut u8;
      .                   copy_nonoverlapping_small(src, dst, extra_bytes_left);
      .           
    607 ( 0.00%)          self.nbuf = extra_bytes_left;
  3,035 ( 0.00%)          self.processed += nbuf + processed;
  3,642 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn finish128(mut self) -> (u64, u64) {
      .                   debug_assert!(self.nbuf < BUFFER_SIZE);
      .           
      .                   // Process full elements in buffer.
  4,989 ( 0.00%)          let last = self.nbuf / ELEM_SIZE;
      .           
      .                   // Since we're consuming self, avoid updating members for a potential
      .                   // performance gain.
  6,652 ( 0.00%)          let mut state = self.state;
      .           
      .                   for i in 0..last {
  4,619 ( 0.00%)              let elem = unsafe { self.buf.get_unchecked(i).assume_init().to_le() };
  4,619 ( 0.00%)              state.v3 ^= elem;
      .                       Sip24Rounds::c_rounds(&mut state);
  4,619 ( 0.00%)              state.v0 ^= elem;
      .                   }
      .           
      .                   // Get remaining partial element.
  3,326 ( 0.00%)          let elem = if self.nbuf % ELEM_SIZE != 0 {
      .                       unsafe {
      .                           // Ensure element is initialized by writing zero bytes. At most
      .                           // `ELEM_SIZE - 1` are required given the above check. It's safe
      .                           // to write this many because we have the spill and we maintain
      .                           // `self.nbuf` such that this write will start before the spill.
      .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(self.nbuf);
      .                           ptr::write_bytes(dst, 0, ELEM_SIZE - 1);
  1,438 ( 0.00%)                  self.buf.get_unchecked(last).assume_init().to_le()
      .                       }
      .                   } else {
      .                       0
      .                   };
      .           
      .                   // Finalize the hash.
  4,764 ( 0.00%)          let length = self.processed + self.nbuf;
  3,324 ( 0.00%)          let b: u64 = ((length as u64 & 0xff) << 56) | elem;
      .           
  1,662 ( 0.00%)          state.v3 ^= b;
      .                   Sip24Rounds::c_rounds(&mut state);
  1,662 ( 0.00%)          state.v0 ^= b;
      .           
  1,662 ( 0.00%)          state.v2 ^= 0xee;
      .                   Sip24Rounds::d_rounds(&mut state);
  5,182 ( 0.00%)          let _0 = state.v0 ^ state.v1 ^ state.v2 ^ state.v3;
      .           
  1,856 ( 0.00%)          state.v1 ^= 0xdd;
      .                   Sip24Rounds::d_rounds(&mut state);
  1,856 ( 0.00%)          let _1 = state.v0 ^ state.v1 ^ state.v2 ^ state.v3;
      .           
      .                   (_0, _1)
      .               }
      .           }
      .           
      .           impl Hasher for SipHasher128 {
      .               #[inline]
      .               fn write_u8(&mut self, i: u8) {
-- line 414 ----------------------------------------
-- line 471 ----------------------------------------
      .           }
      .           
      .           #[derive(Debug, Clone, Default)]
      .           struct Sip24Rounds;
      .           
      .           impl Sip24Rounds {
      .               #[inline]
      .               fn c_rounds(state: &mut State) {
446,745 ( 0.17%)          compress!(state);
483,252 ( 0.19%)          compress!(state);
      .               }
      .           
      .               #[inline]
      .               fn d_rounds(state: &mut State) {
 10,360 ( 0.00%)          compress!(state);
 10,360 ( 0.00%)          compress!(state);
 10,360 ( 0.00%)          compress!(state);
  8,699 ( 0.00%)          compress!(state);
      .               }
      .           }

 86,443 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs
--------------------------------------------------------------------------------
Ir               

-- line 17 ----------------------------------------
      .                   #[inline]
      .                   pub fn $fn_name(
      .                       out: &mut [::std::mem::MaybeUninit<u8>; max_leb128_len!($int_ty)],
      .                       mut value: $int_ty,
      .                   ) -> &[u8] {
      .                       let mut i = 0;
      .           
      .                       loop {
 49,914 ( 0.02%)                  if value < 0x80 {
      .                               unsafe {
 24,907 ( 0.01%)                          *out.get_unchecked_mut(i).as_mut_ptr() = value as u8;
      .                               }
      .           
 34,629 ( 0.01%)                      i += 1;
      .                               break;
      .                           } else {
      .                               unsafe {
 20,168 ( 0.01%)                          *out.get_unchecked_mut(i).as_mut_ptr() = ((value & 0x7f) | 0x80) as u8;
      .                               }
      .           
  9,384 ( 0.00%)                      value >>= 7;
      .                               i += 1;
      .                           }
      .                       }
      .           
      .                       unsafe { ::std::mem::MaybeUninit::slice_assume_init_ref(&out.get_unchecked(..i)) }
      .                   }
      .               };
      .           }
-- line 45 ----------------------------------------
-- line 53 ----------------------------------------
      .           macro_rules! impl_read_unsigned_leb128 {
      .               ($fn_name:ident, $int_ty:ty) => {
      .                   #[inline]
      .                   pub fn $fn_name(slice: &[u8], position: &mut usize) -> $int_ty {
      .                       // The first iteration of this loop is unpeeled. This is a
      .                       // performance win because this code is hot and integer values less
      .                       // than 128 are very common, typically occurring 50-80% or more of
      .                       // the time, even for u64 and u128.
455,228 ( 0.18%)              let byte = slice[*position];
227,614 ( 0.09%)              *position += 1;
227,614 ( 0.09%)              if (byte & 0x80) == 0 {
      .                           return byte as $int_ty;
      .                       }
    628 ( 0.00%)              let mut result = (byte & 0x7F) as $int_ty;
      .                       let mut shift = 7;
      .                       loop {
173,643 ( 0.07%)                  let byte = slice[*position];
112,387 ( 0.04%)                  *position += 1;
115,762 ( 0.04%)                  if (byte & 0x80) == 0 {
 80,816 ( 0.03%)                      result |= (byte as $int_ty) << shift;
      .                               return result;
      .                           } else {
      .                               result |= ((byte & 0x7F) as $int_ty) << shift;
      .                           }
      .                           shift += 7;
      .                       }
      .                   }
      .               };
-- line 80 ----------------------------------------

200,659 ( 0.08%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/region_constraints/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 23 ----------------------------------------
      .           use std::collections::BTreeMap;
      .           use std::ops::Range;
      .           use std::{cmp, fmt, mem};
      .           
      .           mod leak_check;
      .           
      .           pub use rustc_middle::infer::MemberConstraint;
      .           
 16,841 ( 0.01%)  #[derive(Default)]
      .           pub struct RegionConstraintStorage<'tcx> {
      .               /// For each `RegionVid`, the corresponding `RegionVariableOrigin`.
      .               var_infos: IndexVec<RegionVid, RegionVariableInfo>,
      .           
      .               data: RegionConstraintData<'tcx>,
      .           
      .               /// For a given pair of regions (R1, R2), maps to a region R3 that
      .               /// is designated as their LUB (edges R1 <= R3 and R2 <= R3
-- line 39 ----------------------------------------
-- line 64 ----------------------------------------
      .               storage: &'a mut RegionConstraintStorage<'tcx>,
      .               undo_log: &'a mut InferCtxtUndoLogs<'tcx>,
      .           }
      .           
      .           impl<'tcx> std::ops::Deref for RegionConstraintCollector<'_, 'tcx> {
      .               type Target = RegionConstraintStorage<'tcx>;
      .               #[inline]
      .               fn deref(&self) -> &RegionConstraintStorage<'tcx> {
    445 ( 0.00%)          self.storage
      .               }
      .           }
      .           
      .           impl<'tcx> std::ops::DerefMut for RegionConstraintCollector<'_, 'tcx> {
      .               #[inline]
      .               fn deref_mut(&mut self) -> &mut RegionConstraintStorage<'tcx> {
  5,480 ( 0.00%)          self.storage
      .               }
      .           }
      .           
      .           pub type VarInfos = IndexVec<RegionVid, RegionVariableInfo>;
      .           
      .           /// The full set of region constraints gathered up by the collector.
      .           /// Describes constraints between the region variables and other
      .           /// regions, as well as other conditions that must be verified, or
      .           /// assumptions that can be made.
 10,196 ( 0.00%)  #[derive(Debug, Default, Clone)]
      .           pub struct RegionConstraintData<'tcx> {
      .               /// Constraints of the form `A <= B`, where either `A` or `B` can
      .               /// be a region variable (or neither, as it happens).
      .               pub constraints: BTreeMap<Constraint<'tcx>, SubregionOrigin<'tcx>>,
      .           
      .               /// Constraints of the form `R0 member of [R1, ..., Rn]`, meaning that
      .               /// `R0` must be equal to one of the regions `R1..Rn`. These occur
      .               /// with `impl Trait` quite frequently.
-- line 97 ----------------------------------------
-- line 122 ----------------------------------------
      .               /// This hashmap is used to avoid that naive scenario. Basically
      .               /// we record the fact that `'a <= 'b` is implied by the fn
      .               /// signature, and then ignore the constraint when solving
      .               /// equations. This is a bit of a hack but seems to work.
      .               pub givens: FxHashSet<(Region<'tcx>, ty::RegionVid)>,
      .           }
      .           
      .           /// Represents a constraint that influences the inference process.
313,072 ( 0.12%)  #[derive(Clone, Copy, PartialEq, Eq, Debug, PartialOrd, Ord)]
      .           pub enum Constraint<'tcx> {
      .               /// A region variable is a subregion of another.
 81,908 ( 0.03%)      VarSubVar(RegionVid, RegionVid),
      .           
      .               /// A concrete region is a subregion of region variable.
  4,460 ( 0.00%)      RegSubVar(Region<'tcx>, RegionVid),
      .           
      .               /// A region variable is a subregion of a concrete region. This does not
      .               /// directly affect inference, but instead is checked after
      .               /// inference is complete.
  2,640 ( 0.00%)      VarSubReg(RegionVid, Region<'tcx>),
      .           
      .               /// A constraint where neither side is a variable. This does not
      .               /// directly affect inference, but instead is checked after
      .               /// inference is complete.
     80 ( 0.00%)      RegSubReg(Region<'tcx>, Region<'tcx>),
      .           }
      .           
      .           impl Constraint<'_> {
      .               pub fn involves_placeholders(&self) -> bool {
    300 ( 0.00%)          match self {
      .                       Constraint::VarSubVar(_, _) => false,
      .                       Constraint::VarSubReg(_, r) | Constraint::RegSubVar(r, _) => r.is_placeholder(),
      .                       Constraint::RegSubReg(r, s) => r.is_placeholder() || s.is_placeholder(),
      .                   }
      .               }
      .           }
      .           
      .           #[derive(Debug, Clone)]
-- line 159 ----------------------------------------
-- line 304 ----------------------------------------
      .               pub universe: ty::UniverseIndex,
      .           }
      .           
      .           pub struct RegionSnapshot {
      .               any_unifications: bool,
      .           }
      .           
      .           impl<'tcx> RegionConstraintStorage<'tcx> {
  3,062 ( 0.00%)      pub fn new() -> Self {
      .                   Self::default()
  3,062 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub(crate) fn with_log<'a>(
      .                   &'a mut self,
      .                   undo_log: &'a mut InferCtxtUndoLogs<'tcx>,
      .               ) -> RegionConstraintCollector<'a, 'tcx> {
      .                   RegionConstraintCollector { storage: self, undo_log }
      .               }
      .           
      .               fn rollback_undo_entry(&mut self, undo_entry: UndoLog<'tcx>) {
 11,840 ( 0.00%)          match undo_entry {
      .                       AddVar(vid) => {
      .                           self.var_infos.pop().unwrap();
  3,732 ( 0.00%)                  assert_eq!(self.var_infos.len(), vid.index() as usize);
      .                       }
  1,435 ( 0.00%)              AddConstraint(ref constraint) => {
  5,740 ( 0.00%)                  self.data.constraints.remove(constraint);
      .                       }
      .                       AddVerify(index) => {
      .                           self.data.verifys.pop();
      .                           assert_eq!(self.data.verifys.len(), index);
      .                       }
      .                       AddGiven(sub, sup) => {
      .                           self.data.givens.remove(&(sub, sup));
      .                       }
-- line 339 ----------------------------------------
-- line 348 ----------------------------------------
      .           }
      .           
      .           impl<'tcx> RegionConstraintCollector<'_, 'tcx> {
      .               pub fn num_region_vars(&self) -> usize {
      .                   self.var_infos.len()
      .               }
      .           
      .               pub fn region_constraint_data(&self) -> &RegionConstraintData<'tcx> {
    204 ( 0.00%)          &self.data
    204 ( 0.00%)      }
      .           
      .               /// Once all the constraints have been gathered, extract out the final data.
      .               ///
      .               /// Not legal during a snapshot.
      .               pub fn into_infos_and_data(self) -> (VarInfos, RegionConstraintData<'tcx>) {
  1,018 ( 0.00%)          assert!(!UndoLogs::<super::UndoLog<'_>>::in_snapshot(&self.undo_log));
      .                   (mem::take(&mut self.storage.var_infos), mem::take(&mut self.storage.data))
      .               }
      .           
      .               /// Takes (and clears) the current set of constraints. Note that
      .               /// the set of variables remains intact, but all relationships
      .               /// between them are reset. This is used during NLL checking to
      .               /// grab the set of constraints that arose from a particular
      .               /// operation.
-- line 371 ----------------------------------------
-- line 418 ----------------------------------------
      .           
      .               pub fn start_snapshot(&mut self) -> RegionSnapshot {
      .                   debug!("RegionConstraintCollector: start_snapshot");
      .                   RegionSnapshot { any_unifications: self.any_unifications }
      .               }
      .           
      .               pub fn rollback_to(&mut self, snapshot: RegionSnapshot) {
      .                   debug!("RegionConstraintCollector: rollback_to({:?})", snapshot);
  2,220 ( 0.00%)          self.any_unifications = snapshot.any_unifications;
      .               }
      .           
 32,880 ( 0.01%)      pub fn new_region_var(
      .                   &mut self,
      .                   universe: ty::UniverseIndex,
      .                   origin: RegionVariableOrigin,
      .               ) -> RegionVid {
  5,480 ( 0.00%)          let vid = self.var_infos.push(RegionVariableInfo { origin, universe });
      .           
 16,440 ( 0.01%)          let u_vid = self.unification_table().new_key(UnifiedRegion(None));
  5,480 ( 0.00%)          assert_eq!(vid, u_vid.vid);
      .                   self.undo_log.push(AddVar(vid));
      .                   debug!("created new region variable {:?} in {:?} with origin {:?}", vid, universe, origin);
      .                   vid
 43,840 ( 0.02%)      }
      .           
      .               /// Returns the universe for the given variable.
      .               pub fn var_universe(&self, vid: RegionVid) -> ty::UniverseIndex {
  4,143 ( 0.00%)          self.var_infos[vid].universe
      .               }
      .           
      .               /// Returns the origin for the given variable.
      .               pub fn var_origin(&self, vid: RegionVid) -> RegionVariableOrigin {
      .                   self.var_infos[vid].origin
      .               }
      .           
      .               fn add_constraint(&mut self, constraint: Constraint<'tcx>, origin: SubregionOrigin<'tcx>) {
      .                   // cannot add constraints once regions are resolved
      .                   debug!("RegionConstraintCollector: add_constraint({:?})", constraint);
      .           
      .                   // never overwrite an existing (constraint, origin) - only insert one if it isn't
      .                   // present in the map yet. This prevents origins from outside the snapshot being
      .                   // replaced with "less informative" origins e.g., during calls to `can_eq`
      .                   let undo_log = &mut self.undo_log;
 40,496 ( 0.02%)          self.storage.data.constraints.entry(constraint).or_insert_with(|| {
 22,596 ( 0.01%)              undo_log.push(AddConstraint(constraint));
 15,064 ( 0.01%)              origin
      .                   });
      .               }
      .           
      .               fn add_verify(&mut self, verify: Verify<'tcx>) {
      .                   // cannot add verifys once regions are resolved
      .                   debug!("RegionConstraintCollector: add_verify({:?})", verify);
      .           
      .                   // skip no-op cases known to be satisfied
    182 ( 0.00%)          if let VerifyBound::AllBounds(ref bs) = verify.bound {
      .                       if bs.is_empty() {
      .                           return;
      .                       }
      .                   }
      .           
     91 ( 0.00%)          let index = self.data.verifys.len();
  1,365 ( 0.00%)          self.data.verifys.push(verify);
     91 ( 0.00%)          self.undo_log.push(AddVerify(index));
      .               }
      .           
      .               pub fn add_given(&mut self, sub: Region<'tcx>, sup: ty::RegionVid) {
      .                   // cannot add givens once regions are resolved
      .                   if self.data.givens.insert((sub, sup)) {
      .                       debug!("add_given({:?} <= {:?})", sub, sup);
      .           
      .                       self.undo_log.push(AddGiven(sub, sup));
      .                   }
      .               }
      .           
 16,160 ( 0.01%)      pub fn make_eqregion(
      .                   &mut self,
      .                   origin: SubregionOrigin<'tcx>,
      .                   sub: Region<'tcx>,
      .                   sup: Region<'tcx>,
      .               ) {
  8,080 ( 0.00%)          if sub != sup {
      .                       // Eventually, it would be nice to add direct support for
      .                       // equating regions.
  7,728 ( 0.00%)              self.make_subregion(origin.clone(), sub, sup);
  8,694 ( 0.00%)              self.make_subregion(origin, sup, sub);
      .           
  4,831 ( 0.00%)              match (sub, sup) {
  2,595 ( 0.00%)                  (&ty::ReVar(sub), &ty::ReVar(sup)) => {
      .                               debug!("make_eqregion: unifying {:?} with {:?}", sub, sup);
  4,325 ( 0.00%)                      self.unification_table().union(sub, sup);
      .                               self.any_unifications = true;
      .                           }
      .                           (&ty::ReVar(vid), value) | (value, &ty::ReVar(vid)) => {
      .                               debug!("make_eqregion: unifying {:?} with {:?}", vid, value);
    400 ( 0.00%)                      self.unification_table().union_value(vid, UnifiedRegion(Some(value)));
      .                               self.any_unifications = true;
      .                           }
      .                           (_, _) => {}
      .                       }
      .                   }
  6,762 ( 0.00%)      }
      .           
      .               pub fn member_constraint(
      .                   &mut self,
      .                   opaque_type_def_id: DefId,
      .                   definition_span: Span,
      .                   hidden_ty: Ty<'tcx>,
      .                   member_region: ty::Region<'tcx>,
      .                   choice_regions: &Lrc<Vec<ty::Region<'tcx>>>,
-- line 526 ----------------------------------------
-- line 535 ----------------------------------------
      .                       opaque_type_def_id,
      .                       definition_span,
      .                       hidden_ty,
      .                       member_region,
      .                       choice_regions: choice_regions.clone(),
      .                   });
      .               }
      .           
 53,578 ( 0.02%)      #[instrument(skip(self, origin), level = "debug")]
      .               pub fn make_subregion(
      .                   &mut self,
      .                   origin: SubregionOrigin<'tcx>,
      .                   sub: Region<'tcx>,
      .                   sup: Region<'tcx>,
      .               ) {
      .                   // cannot add constraints once regions are resolved
      .                   debug!("origin = {:#?}", origin);
      .           
 38,996 ( 0.02%)          match (sub, sup) {
      .                       (&ReLateBound(..), _) | (_, &ReLateBound(..)) => {
      .                           span_bug!(origin.span(), "cannot relate bound region: {:?} <= {:?}", sub, sup);
      .                       }
      .                       (_, &ReStatic) => {
      .                           // all regions are subregions of static, so we can ignore this
      .                       }
  3,206 ( 0.00%)              (&ReVar(sub_id), &ReVar(sup_id)) => {
 22,442 ( 0.01%)                  self.add_constraint(Constraint::VarSubVar(sub_id, sup_id), origin);
      .                       }
      .                       (_, &ReVar(sup_id)) => {
  1,029 ( 0.00%)                  self.add_constraint(Constraint::RegSubVar(sub, sup_id), origin);
      .                       }
    411 ( 0.00%)              (&ReVar(sub_id), _) => {
  2,877 ( 0.00%)                  self.add_constraint(Constraint::VarSubReg(sub_id, sup), origin);
      .                       }
      .                       _ => {
    182 ( 0.00%)                  self.add_constraint(Constraint::RegSubReg(sub, sup), origin);
      .                       }
      .                   }
      .               }
      .           
    455 ( 0.00%)      pub fn verify_generic_bound(
      .                   &mut self,
      .                   origin: SubregionOrigin<'tcx>,
      .                   kind: GenericKind<'tcx>,
      .                   sub: Region<'tcx>,
      .                   bound: VerifyBound<'tcx>,
      .               ) {
  1,183 ( 0.00%)          self.add_verify(Verify { kind, origin, region: sub, bound });
    455 ( 0.00%)      }
      .           
      .               pub fn lub_regions(
      .                   &mut self,
      .                   tcx: TyCtxt<'tcx>,
      .                   origin: SubregionOrigin<'tcx>,
      .                   a: Region<'tcx>,
      .                   b: Region<'tcx>,
      .               ) -> Region<'tcx> {
-- line 591 ----------------------------------------
-- line 623 ----------------------------------------
      .                       }
      .           
      .                       _ => self.combine_vars(tcx, Glb, a, b, origin),
      .                   }
      .               }
      .           
      .               /// Resolves the passed RegionVid to the root RegionVid in the unification table
      .               pub fn opportunistic_resolve_var(&mut self, rid: ty::RegionVid) -> ty::RegionVid {
  4,518 ( 0.00%)          self.unification_table().find(rid).vid
      .               }
      .           
      .               /// If the Region is a `ReVar`, then resolves it either to the root value in
      .               /// the unification table, if it exists, or to the root `ReVar` in the table.
      .               /// If the Region is not a `ReVar`, just returns the Region itself.
      .               pub fn opportunistic_resolve_region(
      .                   &mut self,
      .                   tcx: TyCtxt<'tcx>,
-- line 639 ----------------------------------------
-- line 683 ----------------------------------------
      .                           Lub => self.make_subregion(origin.clone(), old_r, new_r),
      .                       }
      .                   }
      .                   debug!("combine_vars() c={:?}", c);
      .                   new_r
      .               }
      .           
      .               pub fn universe(&self, region: Region<'tcx>) -> ty::UniverseIndex {
  6,078 ( 0.00%)          match *region {
      .                       ty::ReStatic | ty::ReErased | ty::ReFree(..) | ty::ReEarlyBound(..) => {
      .                           ty::UniverseIndex::ROOT
      .                       }
      .                       ty::ReEmpty(ui) => ui,
      .                       ty::RePlaceholder(placeholder) => placeholder.universe,
    869 ( 0.00%)              ty::ReVar(vid) => self.var_universe(vid),
      .                       ty::ReLateBound(..) => bug!("universe(): encountered bound region {:?}", region),
      .                   }
      .               }
      .           
    615 ( 0.00%)      pub fn vars_since_snapshot(
      .                   &self,
      .                   value_count: usize,
      .               ) -> (Range<RegionVid>, Vec<RegionVariableOrigin>) {
      .                   let range = RegionVid::from(value_count)..RegionVid::from(self.unification_table.len());
    738 ( 0.00%)          (
      .                       range.clone(),
      .                       (range.start.index()..range.end.index())
      .                           .map(|index| self.var_infos[ty::RegionVid::from(index)].origin)
      .                           .collect(),
      .                   )
    738 ( 0.00%)      }
      .           
      .               /// See `InferCtxt::region_constraints_added_in_snapshot`.
  1,212 ( 0.00%)      pub fn region_constraints_added_in_snapshot(&self, mark: &Snapshot<'tcx>) -> Option<bool> {
    404 ( 0.00%)          self.undo_log
      .                       .region_constraints_in_snapshot(mark)
    325 ( 0.00%)              .map(|&elt| match elt {
    100 ( 0.00%)                  AddConstraint(constraint) => Some(constraint.involves_placeholders()),
      .                           _ => None,
      .                       })
      .                       .max()
      .                       .unwrap_or(None)
  1,616 ( 0.00%)      }
      .           
      .               #[inline]
      .               fn unification_table(&mut self) -> super::UnificationTable<'_, 'tcx, RegionVidKey<'tcx>> {
 15,149 ( 0.01%)          ut::UnificationTable::with_log(&mut self.storage.unification_table, self.undo_log)
      .               }
      .           }
      .           
      .           impl fmt::Debug for RegionSnapshot {
      .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      .                   write!(f, "RegionSnapshot")
      .               }
      .           }
-- line 737 ----------------------------------------
-- line 750 ----------------------------------------
      .                   match *self {
      .                       GenericKind::Param(ref p) => write!(f, "{}", p),
      .                       GenericKind::Projection(ref p) => write!(f, "{}", p),
      .                   }
      .               }
      .           }
      .           
      .           impl<'tcx> GenericKind<'tcx> {
     76 ( 0.00%)      pub fn to_ty(&self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
  1,501 ( 0.00%)          match *self {
    129 ( 0.00%)              GenericKind::Param(ref p) => p.to_ty(tcx),
      .                       GenericKind::Projection(ref p) => tcx.mk_projection(p.item_def_id, p.substs),
      .                   }
     76 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> VerifyBound<'tcx> {
      .               pub fn must_hold(&self) -> bool {
      .                   match self {
      .                       VerifyBound::IfEq(..) => false,
      .                       VerifyBound::OutlivedBy(ty::ReStatic) => true,
      .                       VerifyBound::OutlivedBy(_) => false,
-- line 771 ----------------------------------------
-- line 796 ----------------------------------------
      .               }
      .           }
      .           
      .           impl<'tcx> RegionConstraintData<'tcx> {
      .               /// Returns `true` if this region constraint data contains no constraints, and `false`
      .               /// otherwise.
      .               pub fn is_empty(&self) -> bool {
      .                   let RegionConstraintData { constraints, member_constraints, verifys, givens } = self;
    231 ( 0.00%)          constraints.is_empty()
      .                       && member_constraints.is_empty()
      .                       && verifys.is_empty()
      .                       && givens.is_empty()
      .               }
      .           }
      .           
      .           impl<'tcx> Rollback<UndoLog<'tcx>> for RegionConstraintStorage<'tcx> {
 11,840 ( 0.00%)      fn reverse(&mut self, undo: UndoLog<'tcx>) {
  9,472 ( 0.00%)          self.rollback_undo_entry(undo)
 11,840 ( 0.00%)      }
      .           }

149,653 ( 0.06%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/region_constraints/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/graph/scc/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 35 ----------------------------------------
      .           
      .               /// Contains the successors for all the Sccs, concatenated. The
      .               /// range of indices corresponding to a given SCC is found in its
      .               /// SccData.
      .               all_successors: Vec<S>,
      .           }
      .           
      .           impl<N: Idx, S: Idx + Ord> Sccs<N, S> {
    693 ( 0.00%)      pub fn new(graph: &(impl DirectedGraph<Node = N> + WithNumNodes + WithSuccessors)) -> Self {
      .                   SccsConstruction::construct(graph)
    693 ( 0.00%)      }
      .           
      .               /// Returns the number of SCCs in the graph.
      .               pub fn num_sccs(&self) -> usize {
      .                   self.scc_data.len()
      .               }
      .           
      .               /// Returns an iterator over the SCCs in the graph.
      .               ///
-- line 53 ----------------------------------------
-- line 56 ----------------------------------------
      .               /// This is convenient when the edges represent dependencies: when you visit
      .               /// `S1`, the value for `S2` will already have been computed.
      .               pub fn all_sccs(&self) -> impl Iterator<Item = S> {
      .                   (0..self.scc_data.len()).map(S::new)
      .               }
      .           
      .               /// Returns the SCC to which a node `r` belongs.
      .               pub fn scc(&self, r: N) -> S {
  6,075 ( 0.00%)          self.scc_indices[r]
      .               }
      .           
      .               /// Returns the successors of the given SCC.
      .               pub fn successors(&self, scc: S) -> &[S] {
      .                   self.scc_data.successors(scc)
      .               }
      .           
      .               /// Construct the reverse graph of the SCC graph.
-- line 72 ----------------------------------------
-- line 116 ----------------------------------------
      .                   self.ranges.len()
      .               }
      .           
      .               /// Returns the successors of the given SCC.
      .               fn successors(&self, scc: S) -> &[S] {
      .                   // Annoyingly, `range` does not implement `Copy`, so we have
      .                   // to do `range.start..range.end`:
      .                   let range = &self.ranges[scc];
 15,912 ( 0.01%)          &self.all_successors[range.start..range.end]
      .               }
      .           
      .               /// Creates a new SCC with `successors` as its successors and
      .               /// returns the resulting index.
      .               fn create_scc(&mut self, successors: impl IntoIterator<Item = S>) -> S {
      .                   // Store the successors on `scc_successors_vec`, remembering
      .                   // the range of indices.
  1,989 ( 0.00%)          let all_successors_start = self.all_successors.len();
      .                   self.all_successors.extend(successors);
      .                   let all_successors_end = self.all_successors.len();
      .           
      .                   debug!(
      .                       "create_scc({:?}) successors={:?}",
      .                       self.ranges.len(),
      .                       &self.all_successors[all_successors_start..all_successors_end],
      .                   );
-- line 140 ----------------------------------------
-- line 164 ----------------------------------------
      .               /// into the successors_stack, we sometimes get duplicate entries.
      .               /// We use this set to remove those -- we also keep its storage
      .               /// around between successors to amortize memory allocation costs.
      .               duplicate_set: FxHashSet<S>,
      .           
      .               scc_data: SccData<S>,
      .           }
      .           
    385 ( 0.00%)  #[derive(Copy, Clone, Debug)]
      .           enum NodeState<N, S> {
      .               /// This node has not yet been visited as part of the DFS.
      .               ///
      .               /// After SCC construction is complete, this state ought to be
      .               /// impossible.
      .               NotVisited,
      .           
      .               /// This node is currently being walk as part of our DFS. It is on
-- line 180 ----------------------------------------
-- line 216 ----------------------------------------
      .               /// N with depth D can reach some other node N' with lower depth
      .               /// D' (i.e., D' < D), we know that N, N', and all nodes in
      .               /// between them on the stack are part of an SCC.
      .               ///
      .               /// [wikipedia]: https://bit.ly/2EZIx84
      .               fn construct(graph: &'c G) -> Sccs<G::Node, S> {
      .                   let num_nodes = graph.num_nodes();
      .           
    847 ( 0.00%)          let mut this = Self {
      .                       graph,
      .                       node_states: IndexVec::from_elem_n(NodeState::NotVisited, num_nodes),
      .                       node_stack: Vec::with_capacity(num_nodes),
      .                       successors_stack: Vec::new(),
      .                       scc_data: SccData { ranges: IndexVec::new(), all_successors: Vec::new() },
      .                       duplicate_set: FxHashSet::default(),
      .                   };
      .           
      .                   let scc_indices = (0..num_nodes)
      .                       .map(G::Node::new)
 17,280 ( 0.01%)              .map(|node| match this.start_walk_from(node) {
      .                           WalkReturn::Complete { scc_index } => scc_index,
      .                           WalkReturn::Cycle { min_depth } => panic!(
      .                               "`start_walk_node({:?})` returned cycle with depth {:?}",
      .                               node, min_depth
      .                           ),
      .                       })
      .                       .collect();
      .           
    462 ( 0.00%)          Sccs { scc_indices, scc_data: this.scc_data }
      .               }
      .           
 25,920 ( 0.01%)      fn start_walk_from(&mut self, node: G::Node) -> WalkReturn<S> {
 11,520 ( 0.00%)          if let Some(result) = self.inspect_node(node) {
      .                       result
      .                   } else {
      .                       self.walk_unvisited_node(node)
      .                   }
 28,800 ( 0.01%)      }
      .           
      .               /// Inspect a node during the DFS. We first examine its current
      .               /// state -- if it is not yet visited (`NotVisited`), return `None` so
      .               /// that the caller might push it onto the stack and start walking its
      .               /// successors.
      .               ///
      .               /// If it is already on the DFS stack it will be in the state
      .               /// `BeingVisited`. In that case, we have found a cycle and we
      .               /// return the depth from the stack.
      .               ///
      .               /// Otherwise, we are looking at a node that has already been
      .               /// completely visited. We therefore return `WalkReturn::Complete`
      .               /// with its associated SCC index.
 37,676 ( 0.01%)      fn inspect_node(&mut self, node: G::Node) -> Option<WalkReturn<S>> {
 75,352 ( 0.03%)          Some(match self.find_state(node) {
 16,713 ( 0.01%)              NodeState::InCycle { scc_index } => WalkReturn::Complete { scc_index },
      .           
  2,904 ( 0.00%)              NodeState::BeingVisited { depth: min_depth } => WalkReturn::Cycle { min_depth },
      .           
      .                       NodeState::NotVisited => return None,
      .           
      .                       NodeState::InCycleWith { parent } => panic!(
      .                           "`find_state` returned `InCycleWith({:?})`, which ought to be impossible",
      .                           parent
      .                       ),
      .                   })
 65,933 ( 0.03%)      }
      .           
      .               /// Fetches the state of the node `r`. If `r` is recorded as being
      .               /// in a cycle with some other node `r2`, then fetches the state
      .               /// of `r2` (and updates `r` to reflect current result). This is
      .               /// basically the "find" part of a standard union-find algorithm
      .               /// (with path compression).
      .               fn find_state(&mut self, mut node: G::Node) -> NodeState<G::Node, S> {
      .                   // To avoid recursion we temporarily reuse the `parent` of each
-- line 288 ----------------------------------------
-- line 299 ----------------------------------------
      .                   // following links downwards is then simply as soon as we have
      .                   // found the initial self-loop.
      .                   let mut previous_node = node;
      .           
      .                   // Ultimately assigned by the parent when following
      .                   // `InCycleWith` upwards.
      .                   let node_state = loop {
      .                       debug!("find_state(r = {:?} in state {:?})", node, self.node_states[node]);
 73,156 ( 0.03%)              match self.node_states[node] {
 22,284 ( 0.01%)                  NodeState::InCycle { scc_index } => break NodeState::InCycle { scc_index },
  3,872 ( 0.00%)                  NodeState::BeingVisited { depth } => break NodeState::BeingVisited { depth },
  2,880 ( 0.00%)                  NodeState::NotVisited => break NodeState::NotVisited,
    891 ( 0.00%)                  NodeState::InCycleWith { parent } => {
      .                               // We test this, to be extremely sure that we never
      .                               // ever break our termination condition for the
      .                               // reverse iteration loop.
    891 ( 0.00%)                      assert!(node != parent, "Node can not be in cycle with itself");
      .                               // Store the previous node as an inverted list link
  4,455 ( 0.00%)                      self.node_states[node] = NodeState::InCycleWith { parent: previous_node };
      .                               // Update to parent node.
      .                               previous_node = node;
      .                               node = parent;
      .                           }
      .                       }
      .                   };
      .           
      .                   // The states form a graph where up to one outgoing link is stored at
-- line 325 ----------------------------------------
-- line 355 ----------------------------------------
      .                   // We can then walk backwards, starting from `previous_node`, and assign
      .                   // each node in the list with the updated state. The loop terminates
      .                   // when we reach the self-cycle.
      .           
      .                   // Move backwards until we found the node where we started. We
      .                   // will know when we hit the state where previous_node == node.
      .                   loop {
      .                       // Back at the beginning, we can return.
 14,158 ( 0.01%)              if previous_node == node {
      .                           return node_state;
      .                       }
      .                       // Update to previous node in the link.
  1,782 ( 0.00%)              match self.node_states[previous_node] {
    891 ( 0.00%)                  NodeState::InCycleWith { parent: previous } => {
      .                               node = previous_node;
      .                               previous_node = previous;
      .                           }
      .                           // Only InCycleWith nodes were added to the reverse linked list.
      .                           other => panic!("Invalid previous link while compressing cycle: {:?}", other),
      .                       }
      .           
      .                       debug!("find_state: parent_state = {:?}", node_state);
      .           
      .                       // Update the node state from the parent state. The assigned
      .                       // state is actually a loop invariant but it will only be
      .                       // evaluated if there is at least one backlink to follow.
      .                       // Fully trusting llvm here to find this loop optimization.
  3,564 ( 0.00%)              match node_state {
      .                           // Path compression, make current node point to the same root.
      .                           NodeState::InCycle { .. } => {
  1,782 ( 0.00%)                      self.node_states[node] = node_state;
      .                           }
      .                           // Still visiting nodes, compress to cycle to the node
      .                           // at that depth.
      .                           NodeState::BeingVisited { depth } => {
      .                               self.node_states[node] =
      .                                   NodeState::InCycleWith { parent: self.node_stack[depth] };
      .                           }
      .                           // These are never allowed as parent nodes. InCycleWith
-- line 393 ----------------------------------------
-- line 394 ----------------------------------------
      .                           // should have been followed to a real parent and
      .                           // NotVisited can not be part of a cycle since it should
      .                           // have instead gotten explored.
      .                           NodeState::NotVisited | NodeState::InCycleWith { .. } => {
      .                               panic!("invalid parent state: {:?}", node_state)
      .                           }
      .                       }
      .                   }
 18,838 ( 0.01%)      }
      .           
      .               /// Walks a node that has never been visited before.
      .               ///
      .               /// Call this method when `inspect_node` has returned `None`. Having the
      .               /// caller decide avoids mutual recursion between the two methods and allows
      .               /// us to maintain an allocated stack for nodes on the path between calls.
      .               #[instrument(skip(self, initial), level = "debug")]
      .               fn walk_unvisited_node(&mut self, initial: G::Node) -> WalkReturn<S> {
-- line 410 ----------------------------------------
-- line 418 ----------------------------------------
      .                       successor_node: G::Node,
      .                   }
      .           
      .                   // Move the stack to a local variable. We want to utilize the existing allocation and
      .                   // mutably borrow it without borrowing self at the same time.
      .                   let mut successors_stack = core::mem::take(&mut self.successors_stack);
      .                   debug_assert_eq!(successors_stack.len(), 0);
      .           
    539 ( 0.00%)          let mut stack: Vec<VisitingNodeFrame<G, _>> = vec![VisitingNodeFrame {
      .                       node: initial,
      .                       depth: 0,
      .                       min_depth: 0,
      .                       iter: None,
      .                       successors_len: 0,
      .                       min_cycle_root: initial,
      .                       successor_node: initial,
      .                   }];
      .           
      .                   let mut return_value = None;
      .           
  2,880 ( 0.00%)          'recurse: while let Some(frame) = stack.last_mut() {
      .                       let VisitingNodeFrame {
 11,366 ( 0.00%)                  node,
      .                           depth,
      .                           iter,
 11,366 ( 0.00%)                  successors_len,
      .                           min_depth,
      .                           min_cycle_root,
      .                           successor_node,
      .                       } = frame;
      .           
  5,683 ( 0.00%)              let node = *node;
 11,366 ( 0.00%)              let depth = *depth;
      .           
 17,049 ( 0.01%)              let successors = match iter {
      .                           Some(iter) => iter,
      .                           None => {
      .                               // This None marks that we still have the initialize this node's frame.
      .                               debug!(?depth, ?node);
      .           
      .                               debug_assert!(matches!(self.node_states[node], NodeState::NotVisited));
      .           
      .                               // Push `node` onto the stack.
 11,520 ( 0.00%)                      self.node_states[node] = NodeState::BeingVisited { depth };
      .                               self.node_stack.push(node);
      .           
      .                               // Walk each successor of the node, looking to see if any of
      .                               // them can reach a node that is presently on the stack. If
      .                               // so, that means they can also reach us.
  5,760 ( 0.00%)                      *successors_len = successors_stack.len();
      .                               // Set and return a reference, this is currently empty.
 11,520 ( 0.00%)                      iter.get_or_insert(self.graph.successors(node))
      .                           }
      .                       };
      .           
      .                       // Now that iter is initialized, this is a constant for this frame.
 11,366 ( 0.00%)              let successors_len = *successors_len;
      .           
      .                       // Construct iterators for the nodes and walk results. There are two cases:
      .                       // * The walk of a successor node returned.
      .                       // * The remaining successor nodes.
      .                       let returned_walk =
      .                           return_value.take().into_iter().map(|walk| (*successor_node, Some(walk)));
      .           
      .                       let successor_walk = successors.by_ref().map(|successor_node| {
      .                           debug!(?node, ?successor_node);
 19,617 ( 0.01%)                  (successor_node, self.inspect_node(successor_node))
      .                       });
      .           
 24,444 ( 0.01%)              for (successor_node, walk) in returned_walk.chain(successor_walk) {
 33,650 ( 0.01%)                  match walk {
      .                               Some(WalkReturn::Cycle { min_depth: successor_min_depth }) => {
      .                                   // Track the minimum depth we can reach.
  3,718 ( 0.00%)                          assert!(successor_min_depth <= depth);
  4,609 ( 0.00%)                          if successor_min_depth < *min_depth {
      .                                       debug!(?node, ?successor_min_depth);
  2,673 ( 0.00%)                              *min_depth = successor_min_depth;
    891 ( 0.00%)                              *min_cycle_root = successor_node;
      .                                   }
      .                               }
      .           
      .                               Some(WalkReturn::Complete { scc_index: successor_scc_index }) => {
      .                                   // Push the completed SCC indices onto
      .                                   // the `successors_stack` for later.
      .                                   debug!(?node, ?successor_scc_index);
      .                                   successors_stack.push(successor_scc_index);
      .                               }
      .           
      .                               None => {
  5,606 ( 0.00%)                          let depth = depth + 1;
      .                                   debug!(?depth, ?successor_node);
      .                                   // Remember which node the return value will come from.
  2,803 ( 0.00%)                          frame.successor_node = successor_node;
      .                                   // Start a new stack frame the step into it.
      .                                   stack.push(VisitingNodeFrame {
      .                                       node: successor_node,
      .                                       depth,
      .                                       iter: None,
      .                                       successors_len: 0,
      .                                       min_depth: depth,
      .                                       min_cycle_root: successor_node,
-- line 518 ----------------------------------------
-- line 531 ----------------------------------------
      .                       let frame = stack.pop().unwrap();
      .           
      .                       // If `min_depth == depth`, then we are the root of the
      .                       // cycle: we can't reach anyone further down the stack.
      .           
      .                       // Pass the 'return value' down the stack.
      .                       // We return one frame at a time so there can't be another return value.
      .                       debug_assert!(return_value.is_none());
  5,760 ( 0.00%)              return_value = Some(if frame.min_depth == depth {
      .                           // Note that successor stack may have duplicates, so we
      .                           // want to remove those:
      .                           let deduplicated_successors = {
      .                               let duplicate_set = &mut self.duplicate_set;
      .                               duplicate_set.clear();
      .                               successors_stack
      .                                   .drain(successors_len..)
  4,680 ( 0.00%)                          .filter(move |&i| duplicate_set.insert(i))
      .                           };
      .                           let scc_index = self.scc_data.create_scc(deduplicated_successors);
 11,934 ( 0.00%)                  self.node_states[node] = NodeState::InCycle { scc_index };
      .                           WalkReturn::Complete { scc_index }
      .                       } else {
      .                           // We are not the head of the cycle. Return back to our
      .                           // caller. They will take ownership of the
      .                           // `self.successors` data that we pushed.
  5,346 ( 0.00%)                  self.node_states[node] = NodeState::InCycleWith { parent: frame.min_cycle_root };
      .                           WalkReturn::Cycle { min_depth: frame.min_depth }
      .                       });
      .                   }
      .           
      .                   // Keep the allocation we used for successors_stack.
    693 ( 0.00%)          self.successors_stack = successors_stack;
      .                   debug_assert_eq!(self.successors_stack.len(), 0);
      .           
      .                   return_value.unwrap()
      .               }
      .           }

128,369 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/graph/scc/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs
--------------------------------------------------------------------------------
Ir                 

-- line 23 ----------------------------------------
        .           use std::cmp::Ordering;
        .           use std::marker::PhantomData;
        .           use std::ops::Range;
        .           use ty::util::IntTypeExt;
        .           
        .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
        .           #[derive(HashStable, TypeFoldable, Lift)]
        .           pub struct TypeAndMut<'tcx> {
    1,165 ( 0.00%)      pub ty: Ty<'tcx>,
    5,825 ( 0.00%)      pub mutbl: hir::Mutability,
        .           }
        .           
        .           #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, TyEncodable, TyDecodable, Copy)]
        .           #[derive(HashStable)]
        .           /// A "free" region `fr` can be interpreted as "some region
        .           /// at least as big as the scope `fr.scope`".
        .           pub struct FreeRegion {
    5,770 ( 0.00%)      pub scope: DefId,
   11,937 ( 0.00%)      pub bound_region: BoundRegionKind,
        .           }
        .           
   40,688 ( 0.02%)  #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, TyEncodable, TyDecodable, Copy)]
        .           #[derive(HashStable)]
        .           pub enum BoundRegionKind {
        .               /// An anonymous region parameter for a given fn (&T)
      724 ( 0.00%)      BrAnon(u32),
        .           
        .               /// Named region parameters for functions (a in &'a T)
        .               ///
        .               /// The `DefId` is needed to distinguish free regions in
        .               /// the event of shadowing.
       80 ( 0.00%)      BrNamed(DefId, Symbol),
        .           
        .               /// Anonymous region for the implicit env pointer parameter
        .               /// to a closure
        .               BrEnv,
        .           }
        .           
      162 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable, Debug, PartialOrd, Ord)]
        .           #[derive(HashStable)]
        .           pub struct BoundRegion {
    7,853 ( 0.00%)      pub var: BoundVar,
    5,911 ( 0.00%)      pub kind: BoundRegionKind,
        .           }
        .           
        .           impl BoundRegionKind {
        .               pub fn is_named(&self) -> bool {
        .                   match *self {
        .                       BoundRegionKind::BrNamed(_, name) => name != kw::UnderscoreLifetime,
        .                       _ => false,
        .                   }
        .               }
        .           }
        .           
        .           /// Defines the kinds of types.
        .           ///
        .           /// N.B., if you change this, you'll probably want to change the corresponding
        .           /// AST structure in `rustc_ast/src/ast.rs` as well.
  891,099 ( 0.35%)  #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable, Debug)]
        .           #[derive(HashStable)]
        .           #[rustc_diagnostic_item = "TyKind"]
        .           pub enum TyKind<'tcx> {
        .               /// The primitive boolean type. Written as `bool`.
        .               Bool,
        .           
        .               /// The primitive character type; holds a Unicode scalar value
        .               /// (a non-surrogate code point). Written as `char`.
-- line 89 ----------------------------------------
-- line 99 ----------------------------------------
        .               Float(ty::FloatTy),
        .           
        .               /// Algebraic data types (ADT). For example: structures, enumerations and unions.
        .               ///
        .               /// InternalSubsts here, possibly against intuition, *may* contain `Param`s.
        .               /// That is, even after substitution it is possible that there are type
        .               /// variables. This happens when the `Adt` corresponds to an ADT
        .               /// definition and not a concrete use of it.
   71,635 ( 0.03%)      Adt(&'tcx AdtDef, SubstsRef<'tcx>),
        .           
        .               /// An unsized FFI type that is opaque to Rust. Written as `extern type T`.
        .               Foreign(DefId),
        .           
        .               /// The pointee of a string slice. Written as `str`.
        .               Str,
        .           
        .               /// An array with the given length. Written as `[T; n]`.
       18 ( 0.00%)      Array(Ty<'tcx>, &'tcx ty::Const<'tcx>),
        .           
        .               /// The pointee of an array slice. Written as `[T]`.
        .               Slice(Ty<'tcx>),
        .           
        .               /// A raw pointer. Written as `*mut T` or `*const T`
        .               RawPtr(TypeAndMut<'tcx>),
        .           
        .               /// A reference; a pointer with an associated lifetime. Written as
        .               /// `&'a mut T` or `&'a T`.
  142,453 ( 0.06%)      Ref(Region<'tcx>, Ty<'tcx>, hir::Mutability),
        .           
        .               /// The anonymous type of a function declaration/definition. Each
        .               /// function has a unique type, which is output (for a function
        .               /// named `foo` returning an `i32`) as `fn() -> i32 {foo}`.
        .               ///
        .               /// For example the type of `bar` here:
        .               ///
        .               /// ```rust
-- line 134 ----------------------------------------
-- line 143 ----------------------------------------
        .               ///
        .               /// ```rust
        .               /// fn foo() -> i32 { 1 }
        .               /// let bar: fn() -> i32 = foo;
        .               /// ```
        .               FnPtr(PolyFnSig<'tcx>),
        .           
        .               /// A trait object. Written as `dyn for<'b> Trait<'b, Assoc = u32> + Send + 'a`.
    6,445 ( 0.00%)      Dynamic(&'tcx List<Binder<'tcx, ExistentialPredicate<'tcx>>>, ty::Region<'tcx>),
        .           
        .               /// The anonymous type of a closure. Used to represent the type of
        .               /// `|a| a`.
        .               Closure(DefId, SubstsRef<'tcx>),
        .           
        .               /// The anonymous type of a generator. Used to represent the type of
        .               /// `|a| yield a`.
        .               Generator(DefId, SubstsRef<'tcx>, hir::Movability),
-- line 159 ----------------------------------------
-- line 180 ----------------------------------------
        .               /// The substitutions are for the generics of the function in question.
        .               /// After typeck, the concrete type can be found in the `types` map.
        .               Opaque(DefId, SubstsRef<'tcx>),
        .           
        .               /// A type parameter; for example, `T` in `fn f<T>(x: T) {}`.
        .               Param(ParamTy),
        .           
        .               /// Bound type variable, used only when preparing a trait query.
      155 ( 0.00%)      Bound(ty::DebruijnIndex, BoundTy),
        .           
        .               /// A placeholder type - universally quantified higher-ranked type.
        .               Placeholder(ty::PlaceholderType),
        .           
        .               /// A type variable used during type checking.
        .               Infer(InferTy),
        .           
        .               /// A placeholder for a type which could not be computed; this is
-- line 196 ----------------------------------------
-- line 760 ----------------------------------------
        .               }
        .           
        .               /// Returns the type of this inline const.
        .               pub fn ty(self) -> Ty<'tcx> {
        .                   self.split().ty.expect_ty()
        .               }
        .           }
        .           
    4,838 ( 0.00%)  #[derive(Debug, Copy, Clone, PartialEq, PartialOrd, Ord, Eq, Hash, TyEncodable, TyDecodable)]
    5,208 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
        .           pub enum ExistentialPredicate<'tcx> {
        .               /// E.g., `Iterator`.
        .               Trait(ExistentialTraitRef<'tcx>),
        .               /// E.g., `Iterator::Item = T`.
        .               Projection(ExistentialProjection<'tcx>),
        .               /// E.g., `Send`.
        6 ( 0.00%)      AutoTrait(DefId),
        .           }
        .           
        .           impl<'tcx> ExistentialPredicate<'tcx> {
        .               /// Compares via an ordering that will not change if modules are reordered or other changes are
        .               /// made to the tree. In particular, this ordering is preserved across incremental compilations.
       30 ( 0.00%)      pub fn stable_cmp(&self, tcx: TyCtxt<'tcx>, other: &Self) -> Ordering {
        .                   use self::ExistentialPredicate::*;
       32 ( 0.00%)          match (*self, *other) {
        .                       (Trait(_), Trait(_)) => Ordering::Equal,
        .                       (Projection(ref a), Projection(ref b)) => {
        .                           tcx.def_path_hash(a.item_def_id).cmp(&tcx.def_path_hash(b.item_def_id))
        .                       }
        .                       (AutoTrait(ref a), AutoTrait(ref b)) => {
        .                           tcx.def_path_hash(*a).cmp(&tcx.def_path_hash(*b))
        .                       }
        .                       (Trait(_), _) => Ordering::Less,
        .                       (Projection(_), Trait(_)) => Ordering::Greater,
        .                       (Projection(_), _) => Ordering::Less,
        .                       (AutoTrait(_), _) => Ordering::Greater,
        .                   }
       36 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> Binder<'tcx, ExistentialPredicate<'tcx>> {
      612 ( 0.00%)      pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::Predicate<'tcx> {
        .                   use crate::ty::ToPredicate;
      340 ( 0.00%)          match self.skip_binder() {
        .                       ExistentialPredicate::Trait(tr) => {
        .                           self.rebind(tr).with_self_ty(tcx, self_ty).without_const().to_predicate(tcx)
        .                       }
        .                       ExistentialPredicate::Projection(p) => {
        .                           self.rebind(p.with_self_ty(tcx, self_ty)).to_predicate(tcx)
        .                       }
        .                       ExistentialPredicate::AutoTrait(did) => {
        .                           let trait_ref = self.rebind(ty::TraitRef {
        .                               def_id: did,
        .                               substs: tcx.mk_substs_trait(self_ty, &[]),
        .                           });
        .                           trait_ref.without_const().to_predicate(tcx)
        .                       }
        .                   }
      544 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>> {
        .               /// Returns the "principal `DefId`" of this set of existential predicates.
        .               ///
        .               /// A Rust trait object type consists (in addition to a lifetime bound)
        .               /// of a set of trait bounds, which are separated into any number
        .               /// of auto-trait bounds, and at most one non-auto-trait bound. The
-- line 826 ----------------------------------------
-- line 840 ----------------------------------------
        .               ///
        .               /// It is also possible to have a "trivial" trait object that
        .               /// consists only of auto traits, with no principal - for example,
        .               /// `dyn Send + Sync`. In that case, the set of auto-trait bounds
        .               /// is `{Send, Sync}`, while there is no principal. These trait objects
        .               /// have a "trivial" vtable consisting of just the size, alignment,
        .               /// and destructor.
        .               pub fn principal(&self) -> Option<ty::Binder<'tcx, ExistentialTraitRef<'tcx>>> {
      210 ( 0.00%)          self[0]
      210 ( 0.00%)              .map_bound(|this| match this {
        .                           ExistentialPredicate::Trait(tr) => Some(tr),
        .                           _ => None,
        .                       })
        .                       .transpose()
        .               }
        .           
       68 ( 0.00%)      pub fn principal_def_id(&self) -> Option<DefId> {
        .                   self.principal().map(|trait_ref| trait_ref.skip_binder().def_id)
      136 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn projection_bounds<'a>(
        .                   &'a self,
        .               ) -> impl Iterator<Item = ty::Binder<'tcx, ExistentialProjection<'tcx>>> + 'a {
        .                   self.iter().filter_map(|predicate| {
        .                       predicate
        .                           .map_bound(|pred| match pred {
-- line 866 ----------------------------------------
-- line 886 ----------------------------------------
        .           ///     T: Foo<U>
        .           ///
        .           /// This would be represented by a trait-reference where the `DefId` is the
        .           /// `DefId` for the trait `Foo` and the substs define `T` as parameter 0,
        .           /// and `U` as parameter 1.
        .           ///
        .           /// Trait references also appear in object types like `Foo<U>`, but in
        .           /// that case the `Self` parameter is absent from the substitutions.
    5,372 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
   49,611 ( 0.02%)  #[derive(HashStable, TypeFoldable)]
        .           pub struct TraitRef<'tcx> {
       20 ( 0.00%)      pub def_id: DefId,
   35,391 ( 0.01%)      pub substs: SubstsRef<'tcx>,
        .           }
        .           
        .           impl<'tcx> TraitRef<'tcx> {
      300 ( 0.00%)      pub fn new(def_id: DefId, substs: SubstsRef<'tcx>) -> TraitRef<'tcx> {
        .                   TraitRef { def_id, substs }
    1,200 ( 0.00%)      }
        .           
        .               /// Returns a `TraitRef` of the form `P0: Foo<P1..Pn>` where `Pi`
        .               /// are the parameters defined on trait.
      126 ( 0.00%)      pub fn identity(tcx: TyCtxt<'tcx>, def_id: DefId) -> Binder<'tcx, TraitRef<'tcx>> {
       56 ( 0.00%)          ty::Binder::dummy(TraitRef {
        .                       def_id,
       84 ( 0.00%)              substs: InternalSubsts::identity_for_item(tcx, def_id),
        .                   })
      112 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn self_ty(&self) -> Ty<'tcx> {
        .                   self.substs.type_at(0)
        .               }
        .           
       32 ( 0.00%)      pub fn from_method(
        .                   tcx: TyCtxt<'tcx>,
        .                   trait_id: DefId,
        .                   substs: SubstsRef<'tcx>,
        .               ) -> ty::TraitRef<'tcx> {
        .                   let defs = tcx.generics_of(trait_id);
        .           
        4 ( 0.00%)          ty::TraitRef { def_id: trait_id, substs: tcx.intern_substs(&substs[..defs.params.len()]) }
       44 ( 0.00%)      }
        .           }
        .           
        .           pub type PolyTraitRef<'tcx> = Binder<'tcx, TraitRef<'tcx>>;
        .           
        .           impl<'tcx> PolyTraitRef<'tcx> {
        .               pub fn self_ty(&self) -> Binder<'tcx, Ty<'tcx>> {
        .                   self.map_bound_ref(|tr| tr.self_ty())
        .               }
        .           
        .               pub fn def_id(&self) -> DefId {
        6 ( 0.00%)          self.skip_binder().def_id
        2 ( 0.00%)      }
        .           
       23 ( 0.00%)      pub fn to_poly_trait_predicate(&self) -> ty::PolyTraitPredicate<'tcx> {
       46 ( 0.00%)          self.map_bound(|trait_ref| ty::TraitPredicate {
        .                       trait_ref,
        .                       constness: ty::BoundConstness::NotConst,
        .                       polarity: ty::ImplPolarity::Positive,
        .                   })
       23 ( 0.00%)      }
        .           }
        .           
        .           /// An existential reference to a trait, where `Self` is erased.
        .           /// For example, the trait object `Trait<'a, 'b, X, Y>` is:
        .           ///
        .           ///     exists T. T: Trait<'a, 'b, X, Y>
        .           ///
        .           /// The substitutions don't include the erased `Self`, only trait
        .           /// type and lifetime parameters (`[X, Y]` and `['a, 'b]` above).
       36 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
    2,647 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
        .           pub struct ExistentialTraitRef<'tcx> {
      332 ( 0.00%)      pub def_id: DefId,
    2,932 ( 0.00%)      pub substs: SubstsRef<'tcx>,
        .           }
        .           
        .           impl<'tcx> ExistentialTraitRef<'tcx> {
        4 ( 0.00%)      pub fn erase_self_ty(
        .                   tcx: TyCtxt<'tcx>,
        .                   trait_ref: ty::TraitRef<'tcx>,
        .               ) -> ty::ExistentialTraitRef<'tcx> {
        .                   // Assert there is a Self.
        .                   trait_ref.substs.type_at(0);
        .           
        .                   ty::ExistentialTraitRef {
        .                       def_id: trait_ref.def_id,
        .                       substs: tcx.intern_substs(&trait_ref.substs[1..]),
        .                   }
        4 ( 0.00%)      }
        .           
        .               /// Object types don't have a self type specified. Therefore, when
        .               /// we convert the principal trait-ref into a normal trait-ref,
        .               /// you must give *some* self type. A common choice is `mk_err()`
        .               /// or some placeholder type.
        .               pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::TraitRef<'tcx> {
        .                   // otherwise the escaping vars would be captured by the binder
        .                   // debug_assert!(!self_ty.has_escaping_bound_vars());
-- line 985 ----------------------------------------
-- line 999 ----------------------------------------
        .               /// we convert the principal trait-ref into a normal trait-ref,
        .               /// you must give *some* self type. A common choice is `mk_err()`
        .               /// or some placeholder type.
        .               pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::PolyTraitRef<'tcx> {
        .                   self.map_bound(|trait_ref| trait_ref.with_self_ty(tcx, self_ty))
        .               }
        .           }
        .           
    4,722 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
        .           #[derive(HashStable)]
        .           pub enum BoundVariableKind {
        .               Ty(BoundTyKind),
        .               Region(BoundRegionKind),
        .               Const,
        .           }
        .           
        .           /// Binder is a binder for higher-ranked lifetimes or types. It is part of the
-- line 1015 ----------------------------------------
-- line 1016 ----------------------------------------
        .           /// compiler's representation for things like `for<'a> Fn(&'a isize)`
        .           /// (which would be represented by the type `PolyTraitRef ==
        .           /// Binder<'tcx, TraitRef>`). Note that when we instantiate,
        .           /// erase, or otherwise "discharge" these bound vars, we change the
        .           /// type from `Binder<'tcx, T>` to just `T` (see
        .           /// e.g., `liberate_late_bound_regions`).
        .           ///
        .           /// `Decodable` and `Encodable` are implemented for `Binder<T>` using the `impl_binder_encode_decode!` macro.
    6,545 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
   29,722 ( 0.01%)  pub struct Binder<'tcx, T>(T, &'tcx List<BoundVariableKind>);
        .           
        .           impl<'tcx, T> Binder<'tcx, T>
        .           where
        .               T: TypeFoldable<'tcx>,
        .           {
        .               /// Wraps `value` in a binder, asserting that `value` does not
        .               /// contain any bound vars that would be bound by the
        .               /// binder. This is commonly used to 'inject' a value T into a
        .               /// different binding level.
    3,470 ( 0.00%)      pub fn dummy(value: T) -> Binder<'tcx, T> {
   12,745 ( 0.00%)          assert!(!value.has_escaping_bound_vars());
   27,681 ( 0.01%)          Binder(value, ty::List::empty())
    3,430 ( 0.00%)      }
        .           
        .               pub fn bind_with_vars(value: T, vars: &'tcx List<BoundVariableKind>) -> Binder<'tcx, T> {
        .                   if cfg!(debug_assertions) {
        .                       let mut validator = ValidateBoundVars::new(vars);
        .                       value.visit_with(&mut validator);
        .                   }
    1,174 ( 0.00%)          Binder(value, vars)
        .               }
        .           }
        .           
        .           impl<'tcx, T> Binder<'tcx, T> {
        .               /// Skips the binder and returns the "bound" value. This is a
        .               /// risky thing to do because it's easy to get confused about
        .               /// De Bruijn indices and the like. It is usually better to
        .               /// discharge the binder using `no_bound_vars` or
-- line 1053 ----------------------------------------
-- line 1059 ----------------------------------------
        .               /// accounting.
        .               ///
        .               /// Some examples where `skip_binder` is reasonable:
        .               ///
        .               /// - extracting the `DefId` from a PolyTraitRef;
        .               /// - comparing the self type of a PolyTraitRef to see if it is equal to
        .               ///   a type parameter `X`, since the type `X` does not reference any regions
        .               pub fn skip_binder(self) -> T {
   85,072 ( 0.03%)          self.0
        .               }
        .           
        .               pub fn bound_vars(&self) -> &'tcx List<BoundVariableKind> {
       45 ( 0.00%)          self.1
        .               }
        .           
        .               pub fn as_ref(&self) -> Binder<'tcx, &T> {
      236 ( 0.00%)          Binder(&self.0, self.1)
        .               }
        .           
        .               pub fn map_bound_ref_unchecked<F, U>(&self, f: F) -> Binder<'tcx, U>
        .               where
        .                   F: FnOnce(&T) -> U,
        .               {
        .                   let value = f(&self.0);
        .                   Binder(value, self.1)
-- line 1083 ----------------------------------------
-- line 1089 ----------------------------------------
        .               {
        .                   self.as_ref().map_bound(f)
        .               }
        .           
        .               pub fn map_bound<F, U: TypeFoldable<'tcx>>(self, f: F) -> Binder<'tcx, U>
        .               where
        .                   F: FnOnce(T) -> U,
        .               {
    1,421 ( 0.00%)          let value = f(self.0);
        .                   if cfg!(debug_assertions) {
        .                       let mut validator = ValidateBoundVars::new(self.1);
        .                       value.visit_with(&mut validator);
        .                   }
   20,824 ( 0.01%)          Binder(value, self.1)
        .               }
        .           
        .               pub fn try_map_bound<F, U: TypeFoldable<'tcx>, E>(self, f: F) -> Result<Binder<'tcx, U>, E>
        .               where
        .                   F: FnOnce(T) -> Result<U, E>,
        .               {
        .                   let value = f(self.0)?;
        .                   if cfg!(debug_assertions) {
        .                       let mut validator = ValidateBoundVars::new(self.1);
        .                       value.visit_with(&mut validator);
        .                   }
      456 ( 0.00%)          Ok(Binder(value, self.1))
        .               }
        .           
        .               /// Wraps a `value` in a binder, using the same bound variables as the
        .               /// current `Binder`. This should not be used if the new value *changes*
        .               /// the bound variables. Note: the (old or new) value itself does not
        .               /// necessarily need to *name* all the bound variables.
        .               ///
        .               /// This currently doesn't do anything different than `bind`, because we
-- line 1122 ----------------------------------------
-- line 1126 ----------------------------------------
        .               pub fn rebind<U>(&self, value: U) -> Binder<'tcx, U>
        .               where
        .                   U: TypeFoldable<'tcx>,
        .               {
        .                   if cfg!(debug_assertions) {
        .                       let mut validator = ValidateBoundVars::new(self.bound_vars());
        .                       value.visit_with(&mut validator);
        .                   }
      347 ( 0.00%)          Binder(value, self.1)
        .               }
        .           
        .               /// Unwraps and returns the value within, but only if it contains
        .               /// no bound vars at all. (In other words, if this binder --
        .               /// and indeed any enclosing binder -- doesn't bind anything at
        .               /// all.) Otherwise, returns `None`.
        .               ///
        .               /// (One could imagine having a method that just unwraps a single
-- line 1142 ----------------------------------------
-- line 1143 ----------------------------------------
        .               /// binder, but permits late-bound vars bound by enclosing
        .               /// binders, but that would require adjusting the debruijn
        .               /// indices, and given the shallow binding structure we often use,
        .               /// would not be that useful.)
        .               pub fn no_bound_vars(self) -> Option<T>
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
   15,816 ( 0.01%)          if self.0.has_escaping_bound_vars() { None } else { Some(self.skip_binder()) }
        .               }
        .           
        .               /// Splits the contents into two things that share the same binder
        .               /// level as the original, returning two distinct binders.
        .               ///
        .               /// `f` should consider bound regions at depth 1 to be free, and
        .               /// anything it produces with bound regions at depth 1 will be
        .               /// bound in the resulting return values.
-- line 1159 ----------------------------------------
-- line 1170 ----------------------------------------
        .               pub fn transpose(self) -> Option<Binder<'tcx, T>> {
        .                   let bound_vars = self.1;
        .                   self.0.map(|v| Binder(v, bound_vars))
        .               }
        .           }
        .           
        .           /// Represents the projection of an associated type. In explicit UFCS
        .           /// form this would be written `<T as Trait<..>>::N`.
        7 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
      728 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
        .           pub struct ProjectionTy<'tcx> {
        .               /// The parameters of the associated item.
      288 ( 0.00%)      pub substs: SubstsRef<'tcx>,
        .           
        .               /// The `DefId` of the `TraitItem` for the associated type `N`.
        .               ///
        .               /// Note that this is not the `DefId` of the `TraitRef` containing this
        .               /// associated type, which is in `tcx.associated_item(item_def_id).container`.
      293 ( 0.00%)      pub item_def_id: DefId,
        .           }
        .           
        .           impl<'tcx> ProjectionTy<'tcx> {
      133 ( 0.00%)      pub fn trait_def_id(&self, tcx: TyCtxt<'tcx>) -> DefId {
       38 ( 0.00%)          tcx.associated_item(self.item_def_id).container.id()
      152 ( 0.00%)      }
        .           
        .               /// Extracts the underlying trait reference and own substs from this projection.
        .               /// For example, if this is a projection of `<T as StreamingIterator>::Item<'a>`,
        .               /// then this function would return a `T: Iterator` trait reference and `['a]` as the own substs
       98 ( 0.00%)      pub fn trait_ref_and_own_substs(
        .                   &self,
        .                   tcx: TyCtxt<'tcx>,
        .               ) -> (ty::TraitRef<'tcx>, &'tcx [ty::GenericArg<'tcx>]) {
       42 ( 0.00%)          let def_id = tcx.associated_item(self.item_def_id).container.id();
        .                   let trait_generics = tcx.generics_of(def_id);
       70 ( 0.00%)          (
        .                       ty::TraitRef { def_id, substs: self.substs.truncate_to(tcx, trait_generics) },
        .                       &self.substs[trait_generics.count()..],
        .                   )
      126 ( 0.00%)      }
        .           
        .               /// Extracts the underlying trait reference from this projection.
        .               /// For example, if this is a projection of `<T as Iterator>::Item`,
        .               /// then this function would return a `T: Iterator` trait reference.
        .               ///
        .               /// WARNING: This will drop the substs for generic associated types
        .               /// consider calling [Self::trait_ref_and_own_substs] to get those
        .               /// as well.
      171 ( 0.00%)      pub fn trait_ref(&self, tcx: TyCtxt<'tcx>) -> ty::TraitRef<'tcx> {
       19 ( 0.00%)          let def_id = self.trait_def_id(tcx);
       19 ( 0.00%)          ty::TraitRef { def_id, substs: self.substs.truncate_to(tcx, tcx.generics_of(def_id)) }
      209 ( 0.00%)      }
        .           
       48 ( 0.00%)      pub fn self_ty(&self) -> Ty<'tcx> {
      144 ( 0.00%)          self.substs.type_at(0)
       96 ( 0.00%)      }
        .           }
        .           
        .           #[derive(Copy, Clone, Debug, TypeFoldable)]
        .           pub struct GenSig<'tcx> {
        .               pub resume_ty: Ty<'tcx>,
        .               pub yield_ty: Ty<'tcx>,
        .               pub return_ty: Ty<'tcx>,
        .           }
-- line 1233 ----------------------------------------
-- line 1235 ----------------------------------------
        .           pub type PolyGenSig<'tcx> = Binder<'tcx, GenSig<'tcx>>;
        .           
        .           /// Signature of a function type, which we have arbitrarily
        .           /// decided to use to refer to the input/output types.
        .           ///
        .           /// - `inputs`: is the list of arguments and their modes.
        .           /// - `output`: is the return type.
        .           /// - `c_variadic`: indicates whether this is a C-variadic function.
    4,822 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
    1,865 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
        .           pub struct FnSig<'tcx> {
      124 ( 0.00%)      pub inputs_and_output: &'tcx List<Ty<'tcx>>,
    2,014 ( 0.00%)      pub c_variadic: bool,
      289 ( 0.00%)      pub unsafety: hir::Unsafety,
    3,055 ( 0.00%)      pub abi: abi::Abi,
        .           }
        .           
        .           impl<'tcx> FnSig<'tcx> {
    2,453 ( 0.00%)      pub fn inputs(&self) -> &'tcx [Ty<'tcx>] {
   11,441 ( 0.00%)          &self.inputs_and_output[..self.inputs_and_output.len() - 1]
    4,906 ( 0.00%)      }
        .           
    1,445 ( 0.00%)      pub fn output(&self) -> Ty<'tcx> {
   10,832 ( 0.00%)          self.inputs_and_output[self.inputs_and_output.len() - 1]
    2,890 ( 0.00%)      }
        .           
        .               // Creates a minimal `FnSig` to be used when encountering a `TyKind::Error` in a fallible
        .               // method.
        .               fn fake() -> FnSig<'tcx> {
        .                   FnSig {
        .                       inputs_and_output: List::empty(),
        .                       c_variadic: false,
        .                       unsafety: hir::Unsafety::Normal,
-- line 1267 ----------------------------------------
-- line 1270 ----------------------------------------
        .               }
        .           }
        .           
        .           pub type PolyFnSig<'tcx> = Binder<'tcx, FnSig<'tcx>>;
        .           
        .           impl<'tcx> PolyFnSig<'tcx> {
        .               #[inline]
        .               pub fn inputs(&self) -> Binder<'tcx, &'tcx [Ty<'tcx>]> {
      614 ( 0.00%)          self.map_bound_ref_unchecked(|fn_sig| fn_sig.inputs())
        .               }
        .               #[inline]
        .               pub fn input(&self, index: usize) -> ty::Binder<'tcx, Ty<'tcx>> {
    1,544 ( 0.00%)          self.map_bound_ref(|fn_sig| fn_sig.inputs()[index])
        .               }
        .               pub fn inputs_and_output(&self) -> ty::Binder<'tcx, &'tcx List<Ty<'tcx>>> {
        .                   self.map_bound_ref(|fn_sig| fn_sig.inputs_and_output)
       77 ( 0.00%)      }
        .               #[inline]
        .               pub fn output(&self) -> ty::Binder<'tcx, Ty<'tcx>> {
    1,007 ( 0.00%)          self.map_bound_ref(|fn_sig| fn_sig.output())
        .               }
        .               pub fn c_variadic(&self) -> bool {
      154 ( 0.00%)          self.skip_binder().c_variadic
       77 ( 0.00%)      }
        .               pub fn unsafety(&self) -> hir::Unsafety {
      310 ( 0.00%)          self.skip_binder().unsafety
      155 ( 0.00%)      }
        .               pub fn abi(&self) -> abi::Abi {
      588 ( 0.00%)          self.skip_binder().abi
      147 ( 0.00%)      }
        .           }
        .           
        .           pub type CanonicalPolyFnSig<'tcx> = Canonical<'tcx, Binder<'tcx, FnSig<'tcx>>>;
        .           
       12 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
        .           #[derive(HashStable)]
        .           pub struct ParamTy {
        2 ( 0.00%)      pub index: u32,
        .               pub name: Symbol,
        .           }
        .           
        .           impl<'tcx> ParamTy {
       24 ( 0.00%)      pub fn new(index: u32, name: Symbol) -> ParamTy {
        .                   ParamTy { index, name }
       12 ( 0.00%)      }
        .           
        .               pub fn for_def(def: &ty::GenericParamDef) -> ParamTy {
        2 ( 0.00%)          ParamTy::new(def.index, def.name)
        1 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn to_ty(self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
        .                   tcx.mk_ty_param(self.index, self.name)
        .               }
        .           }
        .           
        .           #[derive(Copy, Clone, Hash, TyEncodable, TyDecodable, Eq, PartialEq, Ord, PartialOrd)]
        .           #[derive(HashStable)]
        .           pub struct ParamConst {
       44 ( 0.00%)      pub index: u32,
       44 ( 0.00%)      pub name: Symbol,
        .           }
        .           
        .           impl ParamConst {
        .               pub fn new(index: u32, name: Symbol) -> ParamConst {
        .                   ParamConst { index, name }
        .               }
        .           
        .               pub fn for_def(def: &ty::GenericParamDef) -> ParamConst {
-- line 1338 ----------------------------------------
-- line 1440 ----------------------------------------
        .           /// the inference variable is supposed to satisfy the relation
        .           /// *for every value of the placeholder region*. To ensure that doesn't
        .           /// happen, you can use `leak_check`. This is more clearly explained
        .           /// by the [rustc dev guide].
        .           ///
        .           /// [1]: https://smallcultfollowing.com/babysteps/blog/2013/10/29/intermingled-parameter-lists/
        .           /// [2]: https://smallcultfollowing.com/babysteps/blog/2013/11/04/intermingled-parameter-lists/
        .           /// [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/traits/hrtb.html
  450,069 ( 0.17%)  #[derive(Clone, PartialEq, Eq, Hash, Copy, TyEncodable, TyDecodable, PartialOrd, Ord)]
       12 ( 0.00%)  pub enum RegionKind {
        .               /// Region bound in a type or fn declaration which will be
        .               /// substituted 'early' -- that is, at the same time when type
        .               /// parameters are substituted.
        .               ReEarlyBound(EarlyBoundRegion),
        .           
        .               /// Region bound in a function scope, which will be substituted when the
        .               /// function is called.
   11,830 ( 0.00%)      ReLateBound(ty::DebruijnIndex, BoundRegion),
        .           
        .               /// When checking a function body, the types of all arguments and so forth
        .               /// that refer to bound region parameters are modified to refer to free
        .               /// region parameters.
        .               ReFree(FreeRegion),
        .           
        .               /// Static data that has an "infinite" lifetime. Top in the region lattice.
        .               ReStatic,
-- line 1465 ----------------------------------------
-- line 1478 ----------------------------------------
        .               /// regions visible from `U`, but not less than regions not visible
        .               /// from `U`.
        .               ReEmpty(ty::UniverseIndex),
        .           
        .               /// Erased region, used by trait selection, in MIR and during codegen.
        .               ReErased,
        .           }
        .           
    2,104 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable, Debug, PartialOrd, Ord)]
        .           pub struct EarlyBoundRegion {
       64 ( 0.00%)      pub def_id: DefId,
    1,421 ( 0.00%)      pub index: u32,
      915 ( 0.00%)      pub name: Symbol,
        .           }
        .           
        .           /// A **`const`** **v**ariable **ID**.
        .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
        .           pub struct ConstVid<'tcx> {
       96 ( 0.00%)      pub index: u32,
        .               pub phantom: PhantomData<&'tcx ()>,
        .           }
        .           
        .           rustc_index::newtype_index! {
        .               /// A **region** (lifetime) **v**ariable **ID**.
        .               pub struct RegionVid {
        .                   DEBUG_FORMAT = custom,
        .               }
-- line 1504 ----------------------------------------
-- line 1513 ----------------------------------------
        .           rustc_index::newtype_index! {
        .               pub struct BoundVar { .. }
        .           }
        .           
        .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
        .           #[derive(HashStable)]
        .           pub struct BoundTy {
        .               pub var: BoundVar,
      155 ( 0.00%)      pub kind: BoundTyKind,
        .           }
        .           
    2,662 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
        .           #[derive(HashStable)]
        .           pub enum BoundTyKind {
        .               Anon,
        .               Param(Symbol),
        .           }
        .           
        .           impl From<BoundVar> for BoundTy {
        .               fn from(var: BoundVar) -> Self {
-- line 1532 ----------------------------------------
-- line 1616 ----------------------------------------
        .                       RegionKind::RePlaceholder(placeholder) => placeholder.name.is_named(),
        .                       RegionKind::ReEmpty(_) => false,
        .                       RegionKind::ReErased => false,
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn is_late_bound(&self) -> bool {
      612 ( 0.00%)          matches!(*self, ty::ReLateBound(..))
        .               }
        .           
        .               #[inline]
        .               pub fn is_placeholder(&self) -> bool {
        .                   matches!(*self, ty::RePlaceholder(..))
        .               }
        .           
        .               #[inline]
        .               pub fn bound_at_or_above_binder(&self, index: ty::DebruijnIndex) -> bool {
   15,586 ( 0.01%)          match *self {
        .                       ty::ReLateBound(debruijn, _) => debruijn >= index,
        .                       _ => false,
        .                   }
        .               }
        .           
        .               pub fn type_flags(&self) -> TypeFlags {
        .                   let mut flags = TypeFlags::empty();
        .           
   22,909 ( 0.01%)          match *self {
        .                       ty::ReVar(..) => {
        .                           flags = flags | TypeFlags::HAS_FREE_REGIONS;
        .                           flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;
        .                           flags = flags | TypeFlags::HAS_RE_INFER;
        .                       }
        .                       ty::RePlaceholder(..) => {
        .                           flags = flags | TypeFlags::HAS_FREE_REGIONS;
        .                           flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;
-- line 1651 ----------------------------------------
-- line 1669 ----------------------------------------
        .                       ty::ReErased => {
        .                           flags = flags | TypeFlags::HAS_RE_ERASED;
        .                       }
        .                   }
        .           
        .                   debug!("type_flags({:?}) = {:?}", self, flags);
        .           
        .                   flags
      759 ( 0.00%)      }
        .           
        .               /// Given an early-bound or free region, returns the `DefId` where it was bound.
        .               /// For example, consider the regions in this snippet of code:
        .               ///
        .               /// ```
        .               /// impl<'a> Foo {
        .               ///      ^^ -- early bound, declared on an impl
        .               ///
-- line 1685 ----------------------------------------
-- line 1713 ----------------------------------------
        .           
        .               #[inline(always)]
        .               pub fn flags(&self) -> TypeFlags {
        .                   self.flags
        .               }
        .           
        .               #[inline]
        .               pub fn is_unit(&self) -> bool {
      316 ( 0.00%)          match self.kind() {
       64 ( 0.00%)              Tuple(ref tys) => tys.is_empty(),
        .                       _ => false,
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn is_never(&self) -> bool {
    4,405 ( 0.00%)          matches!(self.kind(), Never)
        .               }
        .           
        .               #[inline]
        .               pub fn is_primitive(&self) -> bool {
        .                   self.kind().is_primitive()
        .               }
        .           
        .               #[inline]
-- line 1737 ----------------------------------------
-- line 1741 ----------------------------------------
        .           
        .               #[inline]
        .               pub fn is_ref(&self) -> bool {
        .                   matches!(self.kind(), Ref(..))
        .               }
        .           
        .               #[inline]
        .               pub fn is_ty_var(&self) -> bool {
    6,477 ( 0.00%)          matches!(self.kind(), Infer(TyVar(_)))
        .               }
        .           
        .               #[inline]
        .               pub fn ty_vid(&self) -> Option<ty::TyVid> {
    3,416 ( 0.00%)          match self.kind() {
      464 ( 0.00%)              &Infer(TyVar(vid)) => Some(vid),
        .                       _ => None,
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn is_ty_infer(&self) -> bool {
        .                   matches!(self.kind(), Infer(_))
        .               }
-- line 1763 ----------------------------------------
-- line 1861 ----------------------------------------
        .                   match self.kind() {
        .                       Ref(_, _, mutability) => Some(*mutability),
        .                       _ => None,
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn is_unsafe_ptr(&self) -> bool {
      659 ( 0.00%)          matches!(self.kind(), RawPtr(_))
        .               }
        .           
        .               /// Tests if this is any kind of primitive pointer type (reference, raw pointer, fn pointer).
        .               #[inline]
        .               pub fn is_any_ptr(&self) -> bool {
        .                   self.is_region_ptr() || self.is_unsafe_ptr() || self.is_fn_ptr()
        .               }
        .           
        .               #[inline]
        .               pub fn is_box(&self) -> bool {
    4,854 ( 0.00%)          match self.kind() {
      939 ( 0.00%)              Adt(def, _) => def.is_box(),
        .                       _ => false,
        .                   }
        .               }
        .           
        .               /// Panics if called on any type other than `Box<T>`.
        .               pub fn boxed_ty(&self) -> Ty<'tcx> {
        .                   match self.kind() {
        .                       Adt(def, substs) if def.is_box() => substs.type_at(0),
-- line 1889 ----------------------------------------
-- line 1891 ----------------------------------------
        .                   }
        .               }
        .           
        .               /// A scalar type is one that denotes an atomic datum, with no sub-components.
        .               /// (A RawPtr is scalar because it represents a non-managed pointer, so its
        .               /// contents are abstract to rustc.)
        .               #[inline]
        .               pub fn is_scalar(&self) -> bool {
      216 ( 0.00%)          matches!(
      524 ( 0.00%)              self.kind(),
        .                       Bool | Char
        .                           | Int(_)
        .                           | Float(_)
        .                           | Uint(_)
        .                           | FnDef(..)
        .                           | FnPtr(_)
        .                           | RawPtr(_)
        .                           | Infer(IntVar(_) | FloatVar(_))
-- line 1908 ----------------------------------------
-- line 1922 ----------------------------------------
        .           
        .               #[inline]
        .               pub fn is_enum(&self) -> bool {
        .                   matches!(self.kind(), Adt(adt_def, _) if adt_def.is_enum())
        .               }
        .           
        .               #[inline]
        .               pub fn is_union(&self) -> bool {
    1,102 ( 0.00%)          matches!(self.kind(), Adt(adt_def, _) if adt_def.is_union())
        .               }
        .           
        .               #[inline]
        .               pub fn is_closure(&self) -> bool {
      324 ( 0.00%)          matches!(self.kind(), Closure(..))
        .               }
        .           
        .               #[inline]
        .               pub fn is_generator(&self) -> bool {
      486 ( 0.00%)          matches!(self.kind(), Generator(..))
        .               }
        .           
        .               #[inline]
        .               pub fn is_integral(&self) -> bool {
      462 ( 0.00%)          matches!(self.kind(), Infer(IntVar(_)) | Int(_) | Uint(_))
        .               }
        .           
        .               #[inline]
        .               pub fn is_fresh_ty(&self) -> bool {
        .                   matches!(self.kind(), Infer(FreshTy(_)))
        .               }
        .           
        .               #[inline]
        .               pub fn is_fresh(&self) -> bool {
      218 ( 0.00%)          matches!(self.kind(), Infer(FreshTy(_) | FreshIntTy(_) | FreshFloatTy(_)))
        .               }
        .           
        .               #[inline]
        .               pub fn is_char(&self) -> bool {
        .                   matches!(self.kind(), Char)
        .               }
        .           
        .               #[inline]
-- line 1963 ----------------------------------------
-- line 1967 ----------------------------------------
        .           
        .               #[inline]
        .               pub fn is_signed(&self) -> bool {
        .                   matches!(self.kind(), Int(_))
        .               }
        .           
        .               #[inline]
        .               pub fn is_ptr_sized_integral(&self) -> bool {
      132 ( 0.00%)          matches!(self.kind(), Int(ty::IntTy::Isize) | Uint(ty::UintTy::Usize))
        .               }
        .           
        .               #[inline]
        .               pub fn has_concrete_skeleton(&self) -> bool {
        .                   !matches!(self.kind(), Param(_) | Infer(_) | Error(_))
        .               }
        .           
        .               /// Returns the type and mutability of `*ty`.
        .               ///
        .               /// The parameter `explicit` indicates if this is an *explicit* dereference.
        .               /// Some types -- notably unsafe ptrs -- can only be dereferenced explicitly.
    1,967 ( 0.00%)      pub fn builtin_deref(&self, explicit: bool) -> Option<TypeAndMut<'tcx>> {
   12,121 ( 0.00%)          match self.kind() {
        .                       Adt(def, _) if def.is_box() => {
        .                           Some(TypeAndMut { ty: self.boxed_ty(), mutbl: hir::Mutability::Not })
        .                       }
    8,076 ( 0.00%)              Ref(_, ty, mutbl) => Some(TypeAndMut { ty, mutbl: *mutbl }),
        .                       RawPtr(mt) if explicit => Some(*mt),
        .                       _ => None,
        .                   }
    3,934 ( 0.00%)      }
        .           
        .               /// Returns the type of `ty[i]`.
        .               pub fn builtin_index(&self) -> Option<Ty<'tcx>> {
        .                   match self.kind() {
        .                       Array(ty, _) | Slice(ty) => Some(ty),
        .                       _ => None,
        .                   }
        .               }
        .           
    4,080 ( 0.00%)      pub fn fn_sig(&self, tcx: TyCtxt<'tcx>) -> PolyFnSig<'tcx> {
    2,040 ( 0.00%)          match self.kind() {
    1,530 ( 0.00%)              FnDef(def_id, substs) => tcx.fn_sig(*def_id).subst(tcx, substs),
        .                       FnPtr(f) => *f,
        .                       Error(_) => {
        .                           // ignore errors (#54954)
        .                           ty::Binder::dummy(FnSig::fake())
        .                       }
        .                       Closure(..) => bug!(
        .                           "to get the signature of a closure, use `substs.as_closure().sig()` not `fn_sig()`",
        .                       ),
        .                       _ => bug!("Ty::fn_sig() called on non-fn type: {:?}", self),
        .                   }
    4,590 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn is_fn(&self) -> bool {
      180 ( 0.00%)          matches!(self.kind(), FnDef(..) | FnPtr(_))
        .               }
        .           
        .               #[inline]
        .               pub fn is_fn_ptr(&self) -> bool {
        .                   matches!(self.kind(), FnPtr(_))
        .               }
        .           
        .               #[inline]
        .               pub fn is_impl_trait(&self) -> bool {
        .                   matches!(self.kind(), Opaque(..))
        .               }
        .           
        .               #[inline]
        .               pub fn ty_adt_def(&self) -> Option<&'tcx AdtDef> {
      714 ( 0.00%)          match self.kind() {
        .                       Adt(adt, _) => Some(adt),
        .                       _ => None,
        .                   }
        .               }
        .           
        .               /// Iterates over tuple fields.
        .               /// Panics when called on anything but a tuple.
        .               pub fn tuple_fields(&self) -> impl DoubleEndedIterator<Item = Ty<'tcx>> {
       46 ( 0.00%)          match self.kind() {
       23 ( 0.00%)              Tuple(substs) => substs.iter().map(|field| field.expect_ty()),
        .                       _ => bug!("tuple_fields called on non-tuple"),
        .                   }
        .               }
        .           
        .               /// Get the `i`-th element of a tuple.
        .               /// Panics when called on anything but a tuple.
        .               pub fn tuple_element_ty(&self, i: usize) -> Option<Ty<'tcx>> {
        .                   match self.kind() {
-- line 2056 ----------------------------------------
-- line 2095 ----------------------------------------
        .                       TyKind::Generator(def_id, substs, _) => {
        .                           Some(substs.as_generator().discriminant_for_variant(*def_id, tcx, variant_index))
        .                       }
        .                       _ => None,
        .                   }
        .               }
        .           
        .               /// Returns the type of the discriminant of this type.
      530 ( 0.00%)      pub fn discriminant_ty(&'tcx self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
      265 ( 0.00%)          match self.kind() {
      424 ( 0.00%)              ty::Adt(adt, _) if adt.is_enum() => adt.repr.discr_type().to_ty(tcx),
        .                       ty::Generator(_, substs, _) => substs.as_generator().discr_ty(tcx),
        .           
        .                       ty::Param(_) | ty::Projection(_) | ty::Opaque(..) | ty::Infer(ty::TyVar(_)) => {
        .                           let assoc_items = tcx.associated_item_def_ids(
        .                               tcx.require_lang_item(hir::LangItem::DiscriminantKind, None),
        .                           );
        .                           tcx.mk_projection(assoc_items[0], tcx.intern_substs(&[self.into()]))
        .                       }
-- line 2113 ----------------------------------------
-- line 2135 ----------------------------------------
        .                       | ty::Infer(IntVar(_) | FloatVar(_)) => tcx.types.u8,
        .           
        .                       ty::Bound(..)
        .                       | ty::Placeholder(_)
        .                       | ty::Infer(FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
        .                           bug!("`discriminant_ty` applied to unexpected type: {:?}", self)
        .                       }
        .                   }
      424 ( 0.00%)      }
        .           
        .               /// Returns the type of metadata for (potentially fat) pointers to this type.
        .               pub fn ptr_metadata_ty(
        .                   &'tcx self,
        .                   tcx: TyCtxt<'tcx>,
        .                   normalize: impl FnMut(Ty<'tcx>) -> Ty<'tcx>,
        .               ) -> Ty<'tcx> {
        .                   let tail = tcx.struct_tail_with_normalize(self, normalize);
-- line 2151 ----------------------------------------
-- line 2229 ----------------------------------------
        .               /// Returning true means the type is known to be sized. Returning
        .               /// `false` means nothing -- could be sized, might not be.
        .               ///
        .               /// Note that we could never rely on the fact that a type such as `[_]` is
        .               /// trivially `!Sized` because we could be in a type environment with a
        .               /// bound such as `[_]: Copy`. A function with such a bound obviously never
        .               /// can be called, but that doesn't mean it shouldn't typecheck. This is why
        .               /// this method doesn't return `Option<bool>`.
   15,588 ( 0.01%)      pub fn is_trivially_sized(&self, tcx: TyCtxt<'tcx>) -> bool {
   10,392 ( 0.00%)          match self.kind() {
        .                       ty::Infer(ty::IntVar(_) | ty::FloatVar(_))
        .                       | ty::Uint(_)
        .                       | ty::Int(_)
        .                       | ty::Bool
        .                       | ty::Float(_)
        .                       | ty::FnDef(..)
        .                       | ty::FnPtr(_)
        .                       | ty::RawPtr(..)
-- line 2246 ----------------------------------------
-- line 2250 ----------------------------------------
        .                       | ty::GeneratorWitness(..)
        .                       | ty::Array(..)
        .                       | ty::Closure(..)
        .                       | ty::Never
        .                       | ty::Error(_) => true,
        .           
        .                       ty::Str | ty::Slice(_) | ty::Dynamic(..) | ty::Foreign(..) => false,
        .           
       61 ( 0.00%)              ty::Tuple(tys) => tys.iter().all(|ty| ty.expect_ty().is_trivially_sized(tcx)),
        .           
      210 ( 0.00%)              ty::Adt(def, _substs) => def.sized_constraint(tcx).is_empty(),
        .           
        .                       ty::Projection(_) | ty::Param(_) | ty::Opaque(..) => false,
        .           
        .                       ty::Infer(ty::TyVar(_)) => false,
        .           
        .                       ty::Bound(..)
        .                       | ty::Placeholder(..)
        .                       | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
        .                           bug!("`is_trivially_sized` applied to unexpected type: {:?}", self)
        .                       }
        .                   }
   15,588 ( 0.01%)      }
        .           }
        .           
        .           /// Extra information about why we ended up with a particular variance.
        .           /// This is only used to add more information to error messages, and
        .           /// has no effect on soundness. While choosing the 'wrong' `VarianceDiagInfo`
        .           /// may lead to confusing notes in error messages, it will never cause
        .           /// a miscompilation or unsoundness.
        .           ///
-- line 2280 ----------------------------------------
-- line 2295 ----------------------------------------
        .                   /// (e.g. `0` for `*mut T`, `1` for `MyStruct<'CovariantParam, 'InvariantParam>`)
        .                   param_index: u32,
        .               },
        .           }
        .           
        .           impl<'tcx> VarianceDiagInfo<'tcx> {
        .               /// Mirrors `Variance::xform` - used to 'combine' the existing
        .               /// and new `VarianceDiagInfo`s when our variance changes.
    5,682 ( 0.00%)      pub fn xform(self, other: VarianceDiagInfo<'tcx>) -> VarianceDiagInfo<'tcx> {
        .                   // For now, just use the first `VarianceDiagInfo::Invariant` that we see
    8,523 ( 0.00%)          match self {
        .                       VarianceDiagInfo::None => other,
        .                       VarianceDiagInfo::Invariant { .. } => self,
        .                   }
    2,841 ( 0.00%)      }
        .           }

1,438,031 ( 0.56%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 141 ----------------------------------------
      .               /// ```
      .               /// let a = [1, 2, 3];
      .               /// assert!(!a.is_empty());
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_stable(feature = "const_slice_is_empty", since = "1.39.0")]
      .               #[inline]
      .               pub const fn is_empty(&self) -> bool {
 57,290 ( 0.02%)          self.len() == 0
      .               }
      .           
      .               /// Returns the first element of the slice, or `None` if it is empty.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let v = [10, 40, 30];
-- line 157 ----------------------------------------
-- line 159 ----------------------------------------
      .               ///
      .               /// let w: &[i32] = &[];
      .               /// assert_eq!(None, w.first());
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
      .               #[inline]
      .               pub const fn first(&self) -> Option<&T> {
    945 ( 0.00%)          if let [first, ..] = self { Some(first) } else { None }
      .               }
      .           
      .               /// Returns a mutable pointer to the first element of the slice, or `None` if it is empty.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let x = &mut [0, 1, 2];
-- line 175 ----------------------------------------
-- line 178 ----------------------------------------
      .               ///     *first = 5;
      .               /// }
      .               /// assert_eq!(x, &[5, 1, 2]);
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_unstable(feature = "const_slice_first_last", issue = "83570")]
      .               #[inline]
      .               pub const fn first_mut(&mut self) -> Option<&mut T> {
    240 ( 0.00%)          if let [first, ..] = self { Some(first) } else { None }
      .               }
      .           
      .               /// Returns the first and all the rest of the elements of the slice, or `None` if it is empty.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let x = &[0, 1, 2];
-- line 194 ----------------------------------------
-- line 237 ----------------------------------------
      .               ///     assert_eq!(last, &2);
      .               ///     assert_eq!(elements, &[0, 1]);
      .               /// }
      .               /// ```
      .               #[stable(feature = "slice_splits", since = "1.5.0")]
      .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
      .               #[inline]
      .               pub const fn split_last(&self) -> Option<(&T, &[T])> {
  3,946 ( 0.00%)          if let [init @ .., last] = self { Some((last, init)) } else { None }
      .               }
      .           
      .               /// Returns the last and all the rest of the elements of the slice, or `None` if it is empty.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let x = &mut [0, 1, 2];
-- line 253 ----------------------------------------
-- line 276 ----------------------------------------
      .               ///
      .               /// let w: &[i32] = &[];
      .               /// assert_eq!(None, w.last());
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
      .               #[inline]
      .               pub const fn last(&self) -> Option<&T> {
 37,363 ( 0.01%)          if let [.., last] = self { Some(last) } else { None }
      .               }
      .           
      .               /// Returns a mutable pointer to the last item in the slice.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let x = &mut [0, 1, 2];
-- line 292 ----------------------------------------
-- line 295 ----------------------------------------
      .               ///     *last = 10;
      .               /// }
      .               /// assert_eq!(x, &[0, 1, 10]);
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_unstable(feature = "const_slice_first_last", issue = "83570")]
      .               #[inline]
      .               pub const fn last_mut(&mut self) -> Option<&mut T> {
 60,024 ( 0.02%)          if let [.., last] = self { Some(last) } else { None }
      .               }
      .           
      .               /// Returns a reference to an element or subslice depending on the type of
      .               /// index.
      .               ///
      .               /// - If given a position, returns a reference to the element at that
      .               ///   position or `None` if out of bounds.
      .               /// - If given a range, returns the subslice corresponding to that range,
-- line 311 ----------------------------------------
-- line 448 ----------------------------------------
      .               /// }
      .               /// ```
      .               ///
      .               /// [`as_mut_ptr`]: slice::as_mut_ptr
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_stable(feature = "const_slice_as_ptr", since = "1.32.0")]
      .               #[inline]
      .               pub const fn as_ptr(&self) -> *const T {
 62,445 ( 0.02%)          self as *const [T] as *const T
      .               }
      .           
      .               /// Returns an unsafe mutable pointer to the slice's buffer.
      .               ///
      .               /// The caller must ensure that the slice outlives the pointer this
      .               /// function returns, or else it will end up pointing to garbage.
      .               ///
      .               /// Modifying the container referenced by this slice may cause its buffer
-- line 464 ----------------------------------------
-- line 476 ----------------------------------------
      .               ///     }
      .               /// }
      .               /// assert_eq!(x, &[3, 4, 6]);
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_unstable(feature = "const_ptr_offset", issue = "71499")]
      .               #[inline]
      .               pub const fn as_mut_ptr(&mut self) -> *mut T {
      8 ( 0.00%)          self as *mut [T] as *mut T
      .               }
      .           
      .               /// Returns the two raw pointers spanning the slice.
      .               ///
      .               /// The returned range is half-open, which means that the end pointer
      .               /// points *one past* the last element of the slice. This way, an empty
      .               /// slice is represented by two equal pointers, and the difference between
      .               /// the two pointers represents the size of the slice.
-- line 492 ----------------------------------------
-- line 582 ----------------------------------------
      .               /// v.swap(2, 4);
      .               /// assert!(v == ["a", "b", "e", "d", "c"]);
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_unstable(feature = "const_swap", issue = "83163")]
      .               #[inline]
      .               #[track_caller]
      .               pub const fn swap(&mut self, a: usize, b: usize) {
    226 ( 0.00%)          let _ = &self[a];
  1,935 ( 0.00%)          let _ = &self[b];
      .           
      .                   // SAFETY: we just checked that both `a` and `b` are in bounds
      .                   unsafe { self.swap_unchecked(a, b) }
      .               }
      .           
      .               /// Swaps two elements in the slice, without doing bounds checking.
      .               ///
      .               /// For a safe alternative see [`swap`].
-- line 599 ----------------------------------------
-- line 677 ----------------------------------------
      .           
      .                       // Because this function is first compiled in isolation,
      .                       // this check tells LLVM that the indexing below is
      .                       // in-bounds.  Then after inlining -- once the actual
      .                       // lengths of the slices are known -- it's removed.
      .                       let (a, b) = (&mut a[..n], &mut b[..n]);
      .           
      .                       for i in 0..n {
     63 ( 0.00%)                  mem::swap(&mut a[i], &mut b[n - 1 - i]);
      .                       }
      .                   }
      .               }
      .           
      .               /// Returns an iterator over the slice.
      .               ///
      .               /// # Examples
      .               ///
-- line 693 ----------------------------------------
-- line 1499 ----------------------------------------
      .               ///     assert_eq!(left, [1, 2, 3, 4, 5, 6]);
      .               ///     assert_eq!(right, []);
      .               /// }
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[inline]
      .               #[track_caller]
      .               pub fn split_at(&self, mid: usize) -> (&[T], &[T]) {
     18 ( 0.00%)          assert!(mid <= self.len());
      .                   // SAFETY: `[ptr; mid]` and `[mid; len]` are inside `self`, which
      .                   // fulfills the requirements of `from_raw_parts_mut`.
      .                   unsafe { self.split_at_unchecked(mid) }
      .               }
      .           
      .               /// Divides one mutable slice into two at an index.
      .               ///
      .               /// The first will contain all indices from `[0, mid)` (excluding
-- line 1515 ----------------------------------------
-- line 1530 ----------------------------------------
      .               /// left[1] = 2;
      .               /// right[1] = 4;
      .               /// assert_eq!(v, [1, 2, 3, 4, 5, 6]);
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[inline]
      .               #[track_caller]
      .               pub fn split_at_mut(&mut self, mid: usize) -> (&mut [T], &mut [T]) {
  9,910 ( 0.00%)          assert!(mid <= self.len());
      .                   // SAFETY: `[ptr; mid]` and `[mid; len]` are inside `self`, which
      .                   // fulfills the requirements of `from_raw_parts_mut`.
      .                   unsafe { self.split_at_mut_unchecked(mid) }
      .               }
      .           
      .               /// Divides one slice into two at an index, without doing bounds checking.
      .               ///
      .               /// The first will contain all indices from `[0, mid)` (excluding
-- line 1546 ----------------------------------------
-- line 1628 ----------------------------------------
      .               pub unsafe fn split_at_mut_unchecked(&mut self, mid: usize) -> (&mut [T], &mut [T]) {
      .                   let len = self.len();
      .                   let ptr = self.as_mut_ptr();
      .           
      .                   // SAFETY: Caller has to check that `0 <= mid <= self.len()`.
      .                   //
      .                   // `[ptr; mid]` and `[mid; len]` are not overlapping, so returning a mutable reference
      .                   // is fine.
    960 ( 0.00%)          unsafe { (from_raw_parts_mut(ptr, mid), from_raw_parts_mut(ptr.add(mid), len - mid)) }
      .               }
      .           
      .               /// Divides one slice into an array and a remainder slice at an index.
      .               ///
      .               /// The array will contain all indices from `[0, N)` (excluding
      .               /// the index `N` itself) and the slice will contain all
      .               /// indices from `[N, len)` (excluding the index `len` itself).
      .               ///
-- line 1644 ----------------------------------------
-- line 2113 ----------------------------------------
      .               /// assert!(!v.iter().any(|e| e == "hi"));
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[inline]
      .               pub fn contains(&self, x: &T) -> bool
      .               where
      .                   T: PartialEq,
      .               {
     74 ( 0.00%)          cmp::SliceContains::slice_contains(x, self)
      .               }
      .           
      .               /// Returns `true` if `needle` is a prefix of the slice.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let v = [10, 40, 30];
-- line 2129 ----------------------------------------
-- line 2142 ----------------------------------------
      .               /// assert!(v.starts_with(&[]));
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               pub fn starts_with(&self, needle: &[T]) -> bool
      .               where
      .                   T: PartialEq,
      .               {
      .                   let n = needle.len();
    769 ( 0.00%)          self.len() >= n && needle == &self[..n]
      .               }
      .           
      .               /// Returns `true` if `needle` is a suffix of the slice.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let v = [10, 40, 30];
-- line 2158 ----------------------------------------
-- line 2171 ----------------------------------------
      .               /// assert!(v.ends_with(&[]));
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               pub fn ends_with(&self, needle: &[T]) -> bool
      .               where
      .                   T: PartialEq,
      .               {
      .                   let (m, n) = (self.len(), needle.len());
    378 ( 0.00%)          m >= n && needle == &self[m - n..]
      .               }
      .           
      .               /// Returns a subslice with the prefix removed.
      .               ///
      .               /// If the slice starts with `prefix`, returns the subslice after the prefix, wrapped in `Some`.
      .               /// If `prefix` is empty, simply returns the original slice.
      .               ///
      .               /// If the slice does not start with `prefix`, returns `None`.
-- line 2187 ----------------------------------------
-- line 2293 ----------------------------------------
      .               /// s.insert(idx, num);
      .               /// assert_eq!(s, [0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 42, 55]);
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               pub fn binary_search(&self, x: &T) -> Result<usize, usize>
      .               where
      .                   T: Ord,
      .               {
      3 ( 0.00%)          self.binary_search_by(|p| p.cmp(x))
      .               }
      .           
      .               /// Binary searches this sorted slice with a comparator function.
      .               ///
      .               /// The comparator function should implement an order consistent
      .               /// with the sort order of the underlying slice, returning an
      .               /// order code that indicates whether its argument is `Less`,
      .               /// `Equal` or `Greater` the desired target.
-- line 2309 ----------------------------------------
-- line 2345 ----------------------------------------
      .               #[inline]
      .               pub fn binary_search_by<'a, F>(&'a self, mut f: F) -> Result<usize, usize>
      .               where
      .                   F: FnMut(&'a T) -> Ordering,
      .               {
      .                   let mut size = self.len();
      .                   let mut left = 0;
      .                   let mut right = size;
221,616 ( 0.09%)          while left < right {
251,356 ( 0.10%)              let mid = left + size / 2;
      .           
      .                       // SAFETY: the call is made safe by the following invariants:
      .                       // - `mid >= 0`
      .                       // - `mid < size`: `mid` is limited by `[left; right)` bound.
 50,584 ( 0.02%)              let cmp = f(unsafe { self.get_unchecked(mid) });
      .           
      .                       // The reason why we use if/else control flow rather than match
      .                       // is because match reorders comparison operations, which is perf sensitive.
      .                       // This is x86 asm for u8: https://rust.godbolt.org/z/8Y8Pra.
 72,647 ( 0.03%)              if cmp == Less {
 87,846 ( 0.03%)                  left = mid + 1;
 39,520 ( 0.02%)              } else if cmp == Greater {
      .                           right = mid;
      .                       } else {
      .                           // SAFETY: same as the `get_unchecked` above
      .                           unsafe { crate::intrinsics::assume(mid < self.len()) };
      .                           return Ok(mid);
      .                       }
      .           
202,211 ( 0.08%)              size = right - left;
      .                   }
      .                   Err(left)
      .               }
      .           
      .               /// Binary searches this sorted slice with a key extraction function.
      .               ///
      .               /// Assumes that the slice is sorted by the key, for instance with
      .               /// [`sort_by_key`] using the same key extraction function.
-- line 2382 ----------------------------------------
-- line 3203 ----------------------------------------
      .                   #[track_caller]
      .                   fn len_mismatch_fail(dst_len: usize, src_len: usize) -> ! {
      .                       panic!(
      .                           "source slice length ({}) does not match destination slice length ({})",
      .                           src_len, dst_len,
      .                       );
      .                   }
      .           
  6,152 ( 0.00%)          if self.len() != src.len() {
      .                       len_mismatch_fail(self.len(), src.len());
      .                   }
      .           
      .                   // SAFETY: `self` is valid for `self.len()` elements by definition, and `src` was
      .                   // checked to have the same length. The slices cannot overlap because
      .                   // mutable references are exclusive.
      .                   unsafe {
      .                       ptr::copy_nonoverlapping(src.as_ptr(), self.as_mut_ptr(), self.len());
-- line 3219 ----------------------------------------
-- line 3246 ----------------------------------------
      .               /// ```
      .               #[stable(feature = "copy_within", since = "1.37.0")]
      .               #[track_caller]
      .               pub fn copy_within<R: RangeBounds<usize>>(&mut self, src: R, dest: usize)
      .               where
      .                   T: Copy,
      .               {
      .                   let Range { start: src_start, end: src_end } = slice::range(src, ..self.len());
  1,287 ( 0.00%)          let count = src_end - src_start;
    858 ( 0.00%)          assert!(dest <= self.len() - count, "dest is out of bounds");
      .                   // SAFETY: the conditions for `ptr::copy` have all been checked above,
      .                   // as have those for `ptr::add`.
      .                   unsafe {
      .                       // Derive both `src_ptr` and `dest_ptr` from the same loan
      .                       let ptr = self.as_mut_ptr();
      .                       let src_ptr = ptr.add(src_start);
      .                       let dest_ptr = ptr.add(dest);
      .                       ptr::copy(src_ptr, dest_ptr, count);
-- line 3263 ----------------------------------------
-- line 3382 ----------------------------------------
      .                   }
      .                   let gcd: usize = gcd(mem::size_of::<T>(), mem::size_of::<U>());
      .                   let ts: usize = mem::size_of::<U>() / gcd;
      .                   let us: usize = mem::size_of::<T>() / gcd;
      .           
      .                   // Armed with this knowledge, we can find how many `U`s we can fit!
      .                   let us_len = self.len() / ts * us;
      .                   // And how many `T`s will be in the trailing slice!
    770 ( 0.00%)          let ts_len = self.len() % ts;
      .                   (us_len, ts_len)
      .               }
      .           
      .               /// Transmute the slice to a slice of another type, ensuring alignment of the types is
      .               /// maintained.
      .               ///
      .               /// This method splits the slice into three distinct slices: prefix, correctly aligned middle
      .               /// slice of a new type, and the suffix slice. The method may make the middle slice the greatest
-- line 3398 ----------------------------------------
-- line 3429 ----------------------------------------
      .                       return (self, &[], &[]);
      .                   }
      .           
      .                   // First, find at what point do we split between the first and 2nd slice. Easy with
      .                   // ptr.align_offset.
      .                   let ptr = self.as_ptr();
      .                   // SAFETY: See the `align_to_mut` method for the detailed safety comment.
      .                   let offset = unsafe { crate::ptr::align_offset(ptr, mem::align_of::<U>()) };
    770 ( 0.00%)          if offset > self.len() {
      .                       (self, &[], &[])
      .                   } else {
      .                       let (left, rest) = self.split_at(offset);
      .                       let (us_len, ts_len) = rest.align_to_offsets::<U>();
      .                       // SAFETY: now `rest` is definitely aligned, so `from_raw_parts` below is okay,
      .                       // since the caller guarantees that we can transmute `T` to `U` safely.
      .                       unsafe {
      .                           (
      .                               left,
      .                               from_raw_parts(rest.as_ptr() as *const U, us_len),
    770 ( 0.00%)                      from_raw_parts(rest.as_ptr().add(rest.len() - ts_len), ts_len),
      .                           )
      .                       }
      .                   }
      .               }
      .           
      .               /// Transmute the slice to a slice of another type, ensuring alignment of the types is
      .               /// maintained.
      .               ///
-- line 3456 ----------------------------------------

217,576 ( 0.08%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_privacy/src/lib.rs
--------------------------------------------------------------------------------
Ir              

-- line 59 ----------------------------------------
     .                   &mut self,
     .                   def_id: DefId,
     .                   kind: &str,
     .                   descr: &dyn fmt::Display,
     .               ) -> ControlFlow<Self::BreakTy>;
     .           
     .               /// Not overridden, but used to actually visit types and traits.
     .               fn skeleton(&mut self) -> DefIdVisitorSkeleton<'_, 'tcx, Self> {
36,997 ( 0.01%)          DefIdVisitorSkeleton {
     .                       def_id_visitor: self,
     .                       visited_opaque_tys: Default::default(),
     .                       dummy: Default::default(),
     .                   }
     .               }
   891 ( 0.00%)      fn visit(&mut self, ty_fragment: impl TypeFoldable<'tcx>) -> ControlFlow<Self::BreakTy> {
     .                   ty_fragment.visit_with(&mut self.skeleton())
 1,485 ( 0.00%)      }
   534 ( 0.00%)      fn visit_trait(&mut self, trait_ref: TraitRef<'tcx>) -> ControlFlow<Self::BreakTy> {
     .                   self.skeleton().visit_trait(trait_ref)
   534 ( 0.00%)      }
     .               fn visit_projection_ty(
     .                   &mut self,
     .                   projection: ty::ProjectionTy<'tcx>,
     .               ) -> ControlFlow<Self::BreakTy> {
     .                   self.skeleton().visit_projection_ty(projection)
     .               }
     .               fn visit_predicates(
     .                   &mut self,
     .                   predicates: ty::GenericPredicates<'tcx>,
     .               ) -> ControlFlow<Self::BreakTy> {
   478 ( 0.00%)          self.skeleton().visit_predicates(predicates)
     .               }
     .           }
     .           
     .           struct DefIdVisitorSkeleton<'v, 'tcx, V: ?Sized> {
     .               def_id_visitor: &'v mut V,
     .               visited_opaque_tys: FxHashSet<DefId>,
     .               dummy: PhantomData<TyCtxt<'tcx>>,
     .           }
     .           
     .           impl<'tcx, V> DefIdVisitorSkeleton<'_, 'tcx, V>
     .           where
     .               V: DefIdVisitor<'tcx> + ?Sized,
     .           {
     .               fn visit_trait(&mut self, trait_ref: TraitRef<'tcx>) -> ControlFlow<V::BreakTy> {
    89 ( 0.00%)          let TraitRef { def_id, substs } = trait_ref;
 4,653 ( 0.00%)          self.def_id_visitor.visit_def_id(def_id, "trait", &trait_ref.print_only_trait_path())?;
    89 ( 0.00%)          if self.def_id_visitor.shallow() { ControlFlow::CONTINUE } else { substs.visit_with(self) }
     .               }
     .           
   140 ( 0.00%)      fn visit_projection_ty(
     .                   &mut self,
     .                   projection: ty::ProjectionTy<'tcx>,
     .               ) -> ControlFlow<V::BreakTy> {
   112 ( 0.00%)          let (trait_ref, assoc_substs) =
    28 ( 0.00%)              projection.trait_ref_and_own_substs(self.def_id_visitor.tcx());
     .                   self.visit_trait(trait_ref)?;
     .                   if self.def_id_visitor.shallow() {
     .                       ControlFlow::CONTINUE
     .                   } else {
     .                       assoc_substs.iter().try_for_each(|subst| subst.visit_with(self))
     .                   }
   126 ( 0.00%)      }
     .           
     .               fn visit_predicate(&mut self, predicate: ty::Predicate<'tcx>) -> ControlFlow<V::BreakTy> {
    70 ( 0.00%)          match predicate.kind().skip_binder() {
     .                       ty::PredicateKind::Trait(ty::TraitPredicate {
     .                           trait_ref,
     .                           constness: _,
     .                           polarity: _,
     .                       }) => self.visit_trait(trait_ref),
     .                       ty::PredicateKind::Projection(ty::ProjectionPredicate { projection_ty, term }) => {
     .                           term.visit_with(self)?;
     .                           self.visit_projection_ty(projection_ty)
-- line 132 ----------------------------------------
-- line 157 ----------------------------------------
     .                       ACNode::Leaf(leaf) => self.visit_const(leaf),
     .                       ACNode::Cast(_, _, ty) => self.visit_ty(ty),
     .                       ACNode::Binop(..) | ACNode::UnaryOp(..) | ACNode::FunctionCall(_, _) => {
     .                           ControlFlow::CONTINUE
     .                       }
     .                   })
     .               }
     .           
 3,346 ( 0.00%)      fn visit_predicates(
     .                   &mut self,
     .                   predicates: ty::GenericPredicates<'tcx>,
     .               ) -> ControlFlow<V::BreakTy> {
     .                   let ty::GenericPredicates { parent: _, predicates } = predicates;
     .                   predicates.iter().try_for_each(|&(predicate, _span)| self.visit_predicate(predicate))
 3,824 ( 0.00%)      }
     .           }
     .           
     .           impl<'tcx, V> TypeVisitor<'tcx> for DefIdVisitorSkeleton<'_, 'tcx, V>
     .           where
     .               V: DefIdVisitor<'tcx> + ?Sized,
     .           {
     .               type BreakTy = V::BreakTy;
     .           
83,945 ( 0.03%)      fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<V::BreakTy> {
 9,535 ( 0.00%)          let tcx = self.def_id_visitor.tcx();
     .                   // InternalSubsts are not visited here because they are visited below in `super_visit_with`.
46,079 ( 0.02%)          match *ty.kind() {
13,653 ( 0.01%)              ty::Adt(&ty::AdtDef { did: def_id, .. }, ..)
     .                       | ty::Foreign(def_id)
     .                       | ty::FnDef(def_id, ..)
     .                       | ty::Closure(def_id, ..)
     .                       | ty::Generator(def_id, ..) => {
51,558 ( 0.02%)                  self.def_id_visitor.visit_def_id(def_id, "type", &ty)?;
     .                           if self.def_id_visitor.shallow() {
     .                               return ControlFlow::CONTINUE;
     .                           }
     .                           // Default type visitor doesn't visit signatures of fn types.
     .                           // Something like `fn() -> Priv {my_func}` is considered a private type even if
     .                           // `my_func` is public, so we need to visit signatures.
12,544 ( 0.00%)                  if let ty::FnDef(..) = ty.kind() {
     .                               tcx.fn_sig(def_id).visit_with(self)?;
     .                           }
     .                           // Inherent static methods don't have self type in substs.
     .                           // Something like `fn() {my_method}` type of the method
     .                           // `impl Pub<Priv> { pub fn my_method() {} }` is considered a private type,
     .                           // so we need to visit the self type additionally.
21,486 ( 0.01%)                  if let Some(assoc_item) = tcx.opt_associated_item(def_id) {
 1,274 ( 0.00%)                      if let ty::ImplContainer(impl_def_id) = assoc_item.container {
   134 ( 0.00%)                          tcx.type_of(impl_def_id).visit_with(self)?;
     .                               }
     .                           }
     .                       }
    28 ( 0.00%)              ty::Projection(proj) => {
     .                           if self.def_id_visitor.skip_assoc_tys() {
     .                               // Visitors searching for minimal visibility/reachability want to
     .                               // conservatively approximate associated types like `<Type as Trait>::Alias`
     .                               // as visible/reachable even if both `Type` and `Trait` are private.
     .                               // Ideally, associated types should be substituted in the same way as
     .                               // free type aliases, but this isn't done yet.
     .                               return ControlFlow::CONTINUE;
     .                           }
     .                           // This will also visit substs if necessary, so we don't need to recurse.
   140 ( 0.00%)                  return self.visit_projection_ty(proj);
     .                       }
    54 ( 0.00%)              ty::Dynamic(predicates, ..) => {
     .                           // All traits in the list are considered the "primary" part of the type
     .                           // and are visited by shallow visitors.
   432 ( 0.00%)                  for predicate in predicates {
   324 ( 0.00%)                      let trait_ref = match predicate.skip_binder() {
   324 ( 0.00%)                          ty::ExistentialPredicate::Trait(trait_ref) => trait_ref,
     .                                   ty::ExistentialPredicate::Projection(proj) => proj.trait_ref(tcx),
     .                                   ty::ExistentialPredicate::AutoTrait(def_id) => {
     .                                       ty::ExistentialTraitRef { def_id, substs: InternalSubsts::empty() }
     .                                   }
     .                               };
   108 ( 0.00%)                      let ty::ExistentialTraitRef { def_id, substs: _ } = trait_ref;
   648 ( 0.00%)                      self.def_id_visitor.visit_def_id(def_id, "trait", &trait_ref)?;
     .                           }
     .                       }
     .                       ty::Opaque(def_id, ..) => {
     .                           // Skip repeated `Opaque`s to avoid infinite recursion.
     .                           if self.visited_opaque_tys.insert(def_id) {
     .                               // The intent is to treat `impl Trait1 + Trait2` identically to
     .                               // `dyn Trait1 + Trait2`. Therefore we ignore def-id of the opaque type itself
     .                               // (it either has no visibility, or its visibility is insignificant, like
-- line 241 ----------------------------------------
-- line 270 ----------------------------------------
     .                       ty::Bound(..) | ty::Placeholder(..) | ty::Infer(..) => {
     .                           bug!("unexpected type: {:?}", ty)
     .                       }
     .                   }
     .           
     .                   if self.def_id_visitor.shallow() {
     .                       ControlFlow::CONTINUE
     .                   } else {
24,494 ( 0.01%)              ty.super_visit_with(self)
     .                   }
79,622 ( 0.03%)      }
     .           
     .               fn visit_const(&mut self, c: &'tcx Const<'tcx>) -> ControlFlow<Self::BreakTy> {
     .                   self.visit_ty(c.ty)?;
     .                   let tcx = self.def_id_visitor.tcx();
     .                   if let Ok(Some(ct)) = AbstractConst::from_const(tcx, c) {
     .                       self.visit_abstract_const_expr(tcx, ct)?;
     .                   }
     .                   ControlFlow::CONTINUE
     .               }
     .           }
     .           
     .           fn min(vis1: ty::Visibility, vis2: ty::Visibility, tcx: TyCtxt<'_>) -> ty::Visibility {
   313 ( 0.00%)      if vis1.is_at_least(vis2, tcx) { vis2 } else { vis1 }
     .           }
     .           
     .           ////////////////////////////////////////////////////////////////////////////////
     .           /// Visitor used to determine if pub(restricted) is used anywhere in the crate.
     .           ///
     .           /// This is done so that `private_in_public` warnings can be turned into hard errors
     .           /// in crates that have been updated to use pub(restricted).
     .           ////////////////////////////////////////////////////////////////////////////////
-- line 301 ----------------------------------------
-- line 303 ----------------------------------------
     .               tcx: TyCtxt<'tcx>,
     .               has_pub_restricted: bool,
     .           }
     .           
     .           impl<'tcx> Visitor<'tcx> for PubRestrictedVisitor<'tcx> {
     .               type NestedFilter = nested_filter::All;
     .           
     .               fn nested_visit_map(&mut self) -> Self::Map {
   301 ( 0.00%)          self.tcx.hir()
     .               }
     .               fn visit_vis(&mut self, vis: &'tcx hir::Visibility<'tcx>) {
 1,277 ( 0.00%)          self.has_pub_restricted = self.has_pub_restricted || vis.node.is_pub_restricted();
     .               }
     .           }
     .           
     .           ////////////////////////////////////////////////////////////////////////////////
     .           /// Visitor used to determine impl visibility and reachability.
     .           ////////////////////////////////////////////////////////////////////////////////
     .           
     .           struct FindMin<'a, 'tcx, VL: VisibilityLike> {
-- line 322 ----------------------------------------
-- line 336 ----------------------------------------
     .                   true
     .               }
     .               fn visit_def_id(
     .                   &mut self,
     .                   def_id: DefId,
     .                   _kind: &str,
     .                   _descr: &dyn fmt::Display,
     .               ) -> ControlFlow<Self::BreakTy> {
 2,945 ( 0.00%)          self.min = VL::new_min(self, def_id);
     .                   ControlFlow::CONTINUE
     .               }
     .           }
     .           
     .           trait VisibilityLike: Sized {
     .               const MAX: Self;
     .               const SHALLOW: bool = false;
     .               fn new_min(find: &FindMin<'_, '_, Self>, def_id: DefId) -> Self;
     .           
     .               // Returns an over-approximation (`skip_assoc_tys` = true) of visibility due to
     .               // associated types for which we can't determine visibility precisely.
 2,079 ( 0.00%)      fn of_impl(def_id: LocalDefId, tcx: TyCtxt<'_>, access_levels: &AccessLevels) -> Self {
   990 ( 0.00%)          let mut find = FindMin { tcx, access_levels, min: Self::MAX };
   297 ( 0.00%)          find.visit(tcx.type_of(def_id));
   891 ( 0.00%)          if let Some(trait_ref) = tcx.impl_trait_ref(def_id) {
    89 ( 0.00%)              find.visit_trait(trait_ref);
     .                   }
   238 ( 0.00%)          find.min
 2,376 ( 0.00%)      }
     .           }
     .           impl VisibilityLike for ty::Visibility {
     .               const MAX: Self = ty::Visibility::Public;
 2,002 ( 0.00%)      fn new_min(find: &FindMin<'_, '_, Self>, def_id: DefId) -> Self {
   858 ( 0.00%)          min(find.tcx.visibility(def_id), find.min, find.tcx)
 2,860 ( 0.00%)      }
     .           }
     .           impl VisibilityLike for Option<AccessLevel> {
     .               const MAX: Self = Some(AccessLevel::Public);
     .               // Type inference is very smart sometimes.
     .               // It can make an impl reachable even some components of its type or trait are unreachable.
     .               // E.g. methods of `impl ReachableTrait<UnreachableTy> for ReachableTy<UnreachableTy> { ... }`
     .               // can be usable from other crates (#57264). So we skip substs when calculating reachability
     .               // and consider an impl reachable if its "shallow" type and trait are reachable.
     .               //
     .               // The assumption we make here is that type-inference won't let you use an impl without knowing
     .               // both "shallow" version of its self type and "shallow" version of its trait if it exists
     .               // (which require reaching the `DefId`s in them).
     .               const SHALLOW: bool = true;
 1,122 ( 0.00%)      fn new_min(find: &FindMin<'_, '_, Self>, def_id: DefId) -> Self {
     .                   cmp::min(
 1,122 ( 0.00%)              if let Some(def_id) = def_id.as_local() {
   396 ( 0.00%)                  find.access_levels.map.get(&def_id).copied()
     .                       } else {
     .                           Self::MAX
     .                       },
   924 ( 0.00%)              find.min,
     .                   )
 1,496 ( 0.00%)      }
     .           }
     .           
     .           ////////////////////////////////////////////////////////////////////////////////
     .           /// The embargo visitor, used to determine the exports of the AST.
     .           ////////////////////////////////////////////////////////////////////////////////
     .           
     .           struct EmbargoVisitor<'tcx> {
     .               tcx: TyCtxt<'tcx>,
-- line 400 ----------------------------------------
-- line 422 ----------------------------------------
     .           
     .           struct ReachEverythingInTheInterfaceVisitor<'a, 'tcx> {
     .               access_level: Option<AccessLevel>,
     .               item_def_id: LocalDefId,
     .               ev: &'a mut EmbargoVisitor<'tcx>,
     .           }
     .           
     .           impl<'tcx> EmbargoVisitor<'tcx> {
 3,400 ( 0.00%)      fn get(&self, def_id: LocalDefId) -> Option<AccessLevel> {
     .                   self.access_levels.map.get(&def_id).copied()
 3,400 ( 0.00%)      }
     .           
     .               fn update_with_hir_id(
     .                   &mut self,
     .                   hir_id: hir::HirId,
     .                   level: Option<AccessLevel>,
     .               ) -> Option<AccessLevel> {
   470 ( 0.00%)          let def_id = self.tcx.hir().local_def_id(hir_id);
     .                   self.update(def_id, level)
     .               }
     .           
     .               /// Updates node level and returns the updated level.
     .               fn update(&mut self, def_id: LocalDefId, level: Option<AccessLevel>) -> Option<AccessLevel> {
 4,236 ( 0.00%)          let old_level = self.get(def_id);
     .                   // Accessibility levels can only grow.
     .                   if level > old_level {
     .                       self.access_levels.map.insert(def_id, level.unwrap());
   176 ( 0.00%)              self.changed = true;
     .                       level
     .                   } else {
     .                       old_level
     .                   }
     .               }
     .           
     .               fn reach(
     .                   &mut self,
-- line 457 ----------------------------------------
-- line 458 ----------------------------------------
     .                   def_id: LocalDefId,
     .                   access_level: Option<AccessLevel>,
     .               ) -> ReachEverythingInTheInterfaceVisitor<'_, 'tcx> {
     .                   ReachEverythingInTheInterfaceVisitor {
     .                       access_level: cmp::min(access_level, Some(AccessLevel::Reachable)),
     .                       item_def_id: def_id,
     .                       ev: self,
     .                   }
 1,556 ( 0.00%)      }
     .           
     .               // We have to make sure that the items that macros might reference
     .               // are reachable, since they might be exported transitively.
     .               fn update_reachability_from_macro(&mut self, local_def_id: LocalDefId, md: &MacroDef) {
     .                   // Non-opaque macros cannot make other items more accessible than they already are.
     .           
     .                   let hir_id = self.tcx.hir().local_def_id_to_hir_id(local_def_id);
     .                   let attrs = self.tcx.hir().attrs(hir_id);
-- line 474 ----------------------------------------
-- line 630 ----------------------------------------
     .           }
     .           
     .           impl<'tcx> Visitor<'tcx> for EmbargoVisitor<'tcx> {
     .               type NestedFilter = nested_filter::All;
     .           
     .               /// We want to visit items in the context of their containing
     .               /// module and so forth, so supply a crate for doing a deep walk.
     .               fn nested_visit_map(&mut self) -> Self::Map {
   602 ( 0.00%)          self.tcx.hir()
     .               }
     .           
 2,628 ( 0.00%)      fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {
   584 ( 0.00%)          let item_level = match item.kind {
     .                       hir::ItemKind::Impl { .. } => {
     .                           let impl_level =
 1,188 ( 0.00%)                      Option::<AccessLevel>::of_impl(item.def_id, self.tcx, &self.access_levels);
   198 ( 0.00%)                  self.update(item.def_id, impl_level)
     .                       }
   376 ( 0.00%)              _ => self.get(item.def_id),
     .                   };
     .           
     .                   // Update levels of nested things.
 1,559 ( 0.00%)          match item.kind {
     .                       hir::ItemKind::Enum(ref def, _) => {
     2 ( 0.00%)                  for variant in def.variants {
    60 ( 0.00%)                      let variant_level = self.update_with_hir_id(variant.id, item_level);
    80 ( 0.00%)                      if let Some(ctor_hir_id) = variant.data.ctor_hir_id() {
     .                                   self.update_with_hir_id(ctor_hir_id, item_level);
     .                               }
    40 ( 0.00%)                      for field in variant.data.fields() {
    60 ( 0.00%)                          self.update_with_hir_id(field.hir_id, variant_level);
     .                               }
     .                           }
     .                       }
     .                       hir::ItemKind::Impl(ref impl_) => {
   594 ( 0.00%)                  for impl_item_ref in impl_.items {
   854 ( 0.00%)                      if impl_.of_trait.is_some()
    40 ( 0.00%)                          || self.tcx.visibility(impl_item_ref.id.def_id) == ty::Visibility::Public
     .                               {
   308 ( 0.00%)                          self.update(impl_item_ref.id.def_id, item_level);
     .                               }
     .                           }
     .                       }
     6 ( 0.00%)              hir::ItemKind::Trait(.., trait_item_refs) => {
     .                           for trait_item_ref in trait_item_refs {
     4 ( 0.00%)                      self.update(trait_item_ref.id.def_id, item_level);
     .                           }
     .                       }
     .                       hir::ItemKind::Struct(ref def, _) | hir::ItemKind::Union(ref def, _) => {
    80 ( 0.00%)                  if let Some(ctor_hir_id) = def.ctor_hir_id() {
     .                               self.update_with_hir_id(ctor_hir_id, item_level);
     .                           }
    40 ( 0.00%)                  for field in def.fields() {
   136 ( 0.00%)                      if field.vis.node.is_pub() {
   136 ( 0.00%)                          self.update_with_hir_id(field.hir_id, item_level);
     .                               }
     .                           }
     .                       }
     .                       hir::ItemKind::Macro(ref macro_def) => {
     .                           self.update_reachability_from_macro(item.def_id, macro_def);
     .                       }
     .                       hir::ItemKind::ForeignMod { items, .. } => {
     .                           for foreign_item in items {
-- line 692 ----------------------------------------
-- line 704 ----------------------------------------
     .                       | hir::ItemKind::TyAlias(..)
     .                       | hir::ItemKind::Mod(..)
     .                       | hir::ItemKind::TraitAlias(..)
     .                       | hir::ItemKind::Fn(..)
     .                       | hir::ItemKind::ExternCrate(..) => {}
     .                   }
     .           
     .                   // Mark all items in interfaces of reachable items as reachable.
 1,460 ( 0.00%)          match item.kind {
     .                       // The interface is empty.
     .                       hir::ItemKind::Macro(..) | hir::ItemKind::ExternCrate(..) => {}
     .                       // All nested items are checked by `visit_item`.
     .                       hir::ItemKind::Mod(..) => {}
     .                       // Handled in the access level of in rustc_resolve
     .                       hir::ItemKind::Use(..) => {}
     .                       // The interface is empty.
     .                       hir::ItemKind::GlobalAsm(..) => {}
-- line 720 ----------------------------------------
-- line 736 ----------------------------------------
     .                       hir::ItemKind::Const(..)
     .                       | hir::ItemKind::Static(..)
     .                       | hir::ItemKind::Fn(..)
     .                       | hir::ItemKind::TyAlias(..) => {
     .                           if item_level.is_some() {
     .                               self.reach(item.def_id, item_level).generics().predicates().ty();
     .                           }
     .                       }
     4 ( 0.00%)              hir::ItemKind::Trait(.., trait_item_refs) => {
     2 ( 0.00%)                  if item_level.is_some() {
    16 ( 0.00%)                      self.reach(item.def_id, item_level).generics().predicates();
     .           
     .                               for trait_item_ref in trait_item_refs {
     4 ( 0.00%)                          let mut reach = self.reach(trait_item_ref.id.def_id, item_level);
     8 ( 0.00%)                          reach.generics().predicates();
     .           
     2 ( 0.00%)                          if trait_item_ref.kind == AssocItemKind::Type
     .                                       && !trait_item_ref.defaultness.has_value()
     .                                   {
     .                                       // No type to visit.
     .                                   } else {
     4 ( 0.00%)                              reach.ty();
     .                                   }
     .                               }
     .                           }
     .                       }
     .                       hir::ItemKind::TraitAlias(..) => {
     .                           if item_level.is_some() {
     .                               self.reach(item.def_id, item_level).generics().predicates();
     .                           }
     .                       }
     .                       // Visit everything except for private impl items.
     .                       hir::ItemKind::Impl(ref impl_) => {
   198 ( 0.00%)                  if item_level.is_some() {
 1,980 ( 0.00%)                      self.reach(item.def_id, item_level).generics().predicates().ty().trait_ref();
     .           
   198 ( 0.00%)                      for impl_item_ref in impl_.items {
   462 ( 0.00%)                          let impl_item_level = self.get(impl_item_ref.id.def_id);
   946 ( 0.00%)                          if impl_item_level.is_some() {
 1,540 ( 0.00%)                              self.reach(impl_item_ref.id.def_id, impl_item_level)
     .                                           .generics()
     .                                           .predicates()
     .                                           .ty();
     .                                   }
     .                               }
     .                           }
     .                       }
     .           
     .                       // Visit everything, but enum variants have their own levels.
     .                       hir::ItemKind::Enum(ref def, _) => {
     2 ( 0.00%)                  if item_level.is_some() {
    16 ( 0.00%)                      self.reach(item.def_id, item_level).generics().predicates();
     .                           }
     2 ( 0.00%)                  for variant in def.variants {
   180 ( 0.00%)                      let variant_level = self.get(self.tcx.hir().local_def_id(variant.id));
    20 ( 0.00%)                      if variant_level.is_some() {
    40 ( 0.00%)                          for field in variant.data.fields() {
   180 ( 0.00%)                              self.reach(self.tcx.hir().local_def_id(field.hir_id), variant_level)
     .                                           .ty();
     .                                   }
     .                                   // Corner case: if the variant is reachable, but its
     .                                   // enum is not, make the enum reachable as well.
    40 ( 0.00%)                          self.update(item.def_id, variant_level);
     .                               }
     .                           }
     .                       }
     .                       // Visit everything, but foreign items have their own levels.
     .                       hir::ItemKind::ForeignMod { items, .. } => {
     .                           for foreign_item in items {
     .                               let foreign_item_level = self.get(foreign_item.id.def_id);
     .                               if foreign_item_level.is_some() {
-- line 806 ----------------------------------------
-- line 808 ----------------------------------------
     .                                       .generics()
     .                                       .predicates()
     .                                       .ty();
     .                               }
     .                           }
     .                       }
     .                       // Visit everything except for private fields.
     .                       hir::ItemKind::Struct(ref struct_def, _) | hir::ItemKind::Union(ref struct_def, _) => {
    20 ( 0.00%)                  if item_level.is_some() {
   160 ( 0.00%)                      self.reach(item.def_id, item_level).generics().predicates();
    40 ( 0.00%)                      for field in struct_def.fields() {
   238 ( 0.00%)                          let def_id = self.tcx.hir().local_def_id(field.hir_id);
   102 ( 0.00%)                          let field_level = self.get(def_id);
    34 ( 0.00%)                          if field_level.is_some() {
   170 ( 0.00%)                              self.reach(def_id, field_level).ty();
     .                                   }
     .                               }
     .                           }
     .                       }
     .                   }
     .           
     .                   let orig_level = mem::replace(&mut self.prev_level, item_level);
   876 ( 0.00%)          intravisit::walk_item(self, item);
   292 ( 0.00%)          self.prev_level = orig_level;
 2,336 ( 0.00%)      }
     .           
     .               fn visit_block(&mut self, b: &'tcx hir::Block<'tcx>) {
     .                   // Blocks can have public items, for example impls, but they always
     .                   // start as completely private regardless of publicity of a function,
     .                   // constant, type, field, etc., in which this block resides.
     .                   let orig_level = mem::replace(&mut self.prev_level, None);
     .                   intravisit::walk_block(self, b);
     .                   self.prev_level = orig_level;
     .               }
     .           }
     .           
     .           impl ReachEverythingInTheInterfaceVisitor<'_, '_> {
 2,646 ( 0.00%)      fn generics(&mut self) -> &mut Self {
 1,512 ( 0.00%)          for param in &self.ev.tcx.generics_of(self.item_def_id).params {
   266 ( 0.00%)              match param.kind {
     .                           GenericParamDefKind::Lifetime => {}
    26 ( 0.00%)                  GenericParamDefKind::Type { has_default, .. } => {
    26 ( 0.00%)                      if has_default {
     .                                   self.visit(self.ev.tcx.type_of(param.def_id));
     .                               }
     .                           }
     .                           GenericParamDefKind::Const { has_default, .. } => {
     .                               self.visit(self.ev.tcx.type_of(param.def_id));
     .                               if has_default {
     .                                   self.visit(self.ev.tcx.const_param_default(param.def_id));
     .                               }
     .                           }
     .                       }
     .                   }
     .                   self
 3,402 ( 0.00%)      }
     .           
 1,890 ( 0.00%)      fn predicates(&mut self) -> &mut Self {
 1,134 ( 0.00%)          self.visit_predicates(self.ev.tcx.predicates_of(self.item_def_id));
     .                   self
 2,268 ( 0.00%)      }
     .           
 1,940 ( 0.00%)      fn ty(&mut self) -> &mut Self {
 1,184 ( 0.00%)          self.visit(self.ev.tcx.type_of(self.item_def_id));
     .                   self
 2,328 ( 0.00%)      }
     .           
     .               fn trait_ref(&mut self) -> &mut Self {
 1,188 ( 0.00%)          if let Some(trait_ref) = self.ev.tcx.impl_trait_ref(self.item_def_id) {
     .                       self.visit_trait(trait_ref);
     .                   }
     .                   self
     .               }
     .           }
     .           
     .           impl<'tcx> DefIdVisitor<'tcx> for ReachEverythingInTheInterfaceVisitor<'_, 'tcx> {
     .               fn tcx(&self) -> TyCtxt<'tcx> {
 4,940 ( 0.00%)          self.ev.tcx
     .               }
 6,320 ( 0.00%)      fn visit_def_id(
     .                   &mut self,
     .                   def_id: DefId,
     .                   _kind: &str,
     .                   _descr: &dyn fmt::Display,
     .               ) -> ControlFlow<Self::BreakTy> {
 3,792 ( 0.00%)          if let Some(def_id) = def_id.as_local() {
 3,789 ( 0.00%)              if let (ty::Visibility::Public, _) | (_, Some(AccessLevel::ReachableFromImplTrait)) =
   950 ( 0.00%)                  (self.tcx().visibility(def_id.to_def_id()), self.access_level)
     .                       {
     .                           self.ev.update(def_id, self.access_level);
     .                       }
     .                   }
     .                   ControlFlow::CONTINUE
 8,848 ( 0.00%)      }
     .           }
     .           
     .           //////////////////////////////////////////////////////////////////////////////////////
     .           /// Name privacy visitor, checks privacy and reports violations.
     .           /// Most of name privacy checks are performed during the main resolution phase,
     .           /// or later in type checking when field accesses and associated items are resolved.
     .           /// This pass performs remaining checks for fields in struct expressions and patterns.
     .           //////////////////////////////////////////////////////////////////////////////////////
-- line 909 ----------------------------------------
-- line 920 ----------------------------------------
     .               /// `Expr` or `Pat` nodes (they are guaranteed to be found only in bodies).
     .               #[track_caller]
     .               fn typeck_results(&self) -> &'tcx ty::TypeckResults<'tcx> {
     .                   self.maybe_typeck_results
     .                       .expect("`NamePrivacyVisitor::typeck_results` called outside of body")
     .               }
     .           
     .               // Checks that a field in a struct constructor (expression or pattern) is accessible.
 1,190 ( 0.00%)      fn check_field(
     .                   &mut self,
     .                   use_ctxt: Span,        // syntax context of the field name at the use site
     .                   span: Span,            // span of the field pattern, e.g., `x: 0`
     .                   def: &'tcx ty::AdtDef, // definition of the struct or enum
     .                   field: &'tcx ty::FieldDef,
     .                   in_update_syntax: bool,
     .               ) {
   238 ( 0.00%)          if def.is_enum() {
     .                       return;
     .                   }
     .           
     .                   // definition of the field
     .                   let ident = Ident::new(kw::Empty, use_ctxt);
   238 ( 0.00%)          let hir_id = self.tcx.hir().local_def_id_to_hir_id(self.current_item);
   833 ( 0.00%)          let def_id = self.tcx.adjust_ident_and_get_scope(ident, def.did, hir_id).1;
   119 ( 0.00%)          if !field.vis.is_accessible_from(def_id, self.tcx) {
     .                       let label = if in_update_syntax {
     .                           format!("field `{}` is private", field.name)
     .                       } else {
     .                           "private field".to_string()
     .                       };
     .           
     .                       struct_span_err!(
     .                           self.tcx.sess,
-- line 952 ----------------------------------------
-- line 955 ----------------------------------------
     .                           "field `{}` of {} `{}` is private",
     .                           field.name,
     .                           def.variant_descr(),
     .                           self.tcx.def_path_str(def.did)
     .                       )
     .                       .span_label(span, label)
     .                       .emit();
     .                   }
   952 ( 0.00%)      }
     .           }
     .           
     .           impl<'tcx> Visitor<'tcx> for NamePrivacyVisitor<'tcx> {
     .               type NestedFilter = nested_filter::All;
     .           
     .               /// We want to visit items in the context of their containing
     .               /// module and so forth, so supply a crate for doing a deep walk.
     .               fn nested_visit_map(&mut self) -> Self::Map {
   216 ( 0.00%)          self.tcx.hir()
     .               }
     .           
     .               fn visit_mod(&mut self, _m: &'tcx hir::Mod<'tcx>, _s: Span, _n: hir::HirId) {
     .                   // Don't visit nested modules, since we run a separate visitor walk
     .                   // for each module in `privacy_access_levels`
     .               }
     .           
     .               fn visit_nested_body(&mut self, body: hir::BodyId) {
     .                   let old_maybe_typeck_results =
   385 ( 0.00%)              self.maybe_typeck_results.replace(self.tcx.typeck_body(body));
   462 ( 0.00%)          let body = self.tcx.hir().body(body);
     .                   self.visit_body(body);
     .                   self.maybe_typeck_results = old_maybe_typeck_results;
     .               }
     .           
     .               fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {
   146 ( 0.00%)          let orig_current_item = mem::replace(&mut self.current_item, item.def_id);
   430 ( 0.00%)          intravisit::walk_item(self, item);
   146 ( 0.00%)          self.current_item = orig_current_item;
     .               }
     .           
12,069 ( 0.00%)      fn visit_expr(&mut self, expr: &'tcx hir::Expr<'tcx>) {
 2,682 ( 0.00%)          if let hir::ExprKind::Struct(qpath, fields, ref base) = expr.kind {
    60 ( 0.00%)              let res = self.typeck_results().qpath_res(qpath, expr.hir_id);
    30 ( 0.00%)              let adt = self.typeck_results().expr_ty(expr).ty_adt_def().unwrap();
    90 ( 0.00%)              let variant = adt.variant_of_res(res);
    40 ( 0.00%)              if let Some(base) = *base {
     .                           // If the expression uses FRU we need to make sure all the unmentioned fields
     .                           // are checked for privacy (RFC 736). Rather than computing the set of
     .                           // unmentioned fields, just check them all.
     .                           for (vf_index, variant_field) in variant.fields.iter().enumerate() {
     .                               let field = fields.iter().find(|f| {
     .                                   self.tcx.field_index(f.hir_id, self.typeck_results()) == vf_index
     .                               });
     .                               let (use_ctxt, span) = match field {
     .                                   Some(field) => (field.ident.span, field.span),
     .                                   None => (base.span, base.span),
     .                               };
     .                               self.check_field(use_ctxt, span, adt, variant_field, true);
     .                           }
     .                       } else {
     .                           for field in fields {
    17 ( 0.00%)                      let use_ctxt = field.ident.span;
   135 ( 0.00%)                      let index = self.tcx.field_index(field.hir_id, self.typeck_results());
   187 ( 0.00%)                      self.check_field(use_ctxt, field.span, adt, &variant.fields[index], false);
     .                           }
     .                       }
     .                   }
     .           
13,410 ( 0.01%)          intravisit::walk_expr(self, expr);
     .               }
     .           
 4,800 ( 0.00%)      fn visit_pat(&mut self, pat: &'tcx hir::Pat<'tcx>) {
 1,260 ( 0.00%)          if let PatKind::Struct(ref qpath, fields, _) = pat.kind {
   420 ( 0.00%)              let res = self.typeck_results().qpath_res(qpath, pat.hir_id);
   240 ( 0.00%)              let adt = self.typeck_results().pat_ty(pat).ty_adt_def().unwrap();
   480 ( 0.00%)              let variant = adt.variant_of_res(res);
     .                       for field in fields {
   102 ( 0.00%)                  let use_ctxt = field.ident.span;
   690 ( 0.00%)                  let index = self.tcx.field_index(field.hir_id, self.typeck_results());
 1,020 ( 0.00%)                  self.check_field(use_ctxt, field.span, adt, &variant.fields[index], false);
     .                       }
     .                   }
     .           
 5,400 ( 0.00%)          intravisit::walk_pat(self, pat);
     .               }
     .           }
     .           
     .           ////////////////////////////////////////////////////////////////////////////////////////////
     .           /// Type privacy visitor, checks types for privacy and reports violations.
     .           /// Both explicitly written types and inferred types of expressions and patterns are checked.
     .           /// Checks are performed on "semantic" types regardless of names and their hygiene.
     .           ////////////////////////////////////////////////////////////////////////////////////////////
-- line 1045 ----------------------------------------
-- line 1061 ----------------------------------------
     .                       .expect("`TypePrivacyVisitor::typeck_results` called outside of body")
     .               }
     .           
     .               fn item_is_accessible(&self, did: DefId) -> bool {
     .                   self.tcx.visibility(did).is_accessible_from(self.current_item.to_def_id(), self.tcx)
     .               }
     .           
     .               // Take node-id of an expression or pattern and check its type for privacy.
14,392 ( 0.01%)      fn check_expr_pat_type(&mut self, id: hir::HirId, span: Span) -> bool {
 2,056 ( 0.00%)          self.span = span;
 2,056 ( 0.00%)          let typeck_results = self.typeck_results();
     .                   let result: ControlFlow<()> = try {
 8,224 ( 0.00%)              self.visit(typeck_results.node_type(id))?;
16,448 ( 0.01%)              self.visit(typeck_results.node_substs(id))?;
18,504 ( 0.01%)              if let Some(adjustments) = typeck_results.adjustments().get(id) {
     .                           adjustments.iter().try_for_each(|adjustment| self.visit(adjustment.target))?;
     .                       }
     .                   };
     .                   result.is_break()
16,448 ( 0.01%)      }
     .           
     .               fn check_def_id(&mut self, def_id: DefId, kind: &str, descr: &dyn fmt::Display) -> bool {
 6,412 ( 0.00%)          let is_error = !self.item_is_accessible(def_id);
     .                   if is_error {
     .                       self.tcx
     .                           .sess
     .                           .struct_span_err(self.span, &format!("{} `{}` is private", kind, descr))
     .                           .span_label(self.span, &format!("private {}", kind))
     .                           .emit();
     .                   }
     .                   is_error
-- line 1091 ----------------------------------------
-- line 1093 ----------------------------------------
     .           }
     .           
     .           impl<'tcx> Visitor<'tcx> for TypePrivacyVisitor<'tcx> {
     .               type NestedFilter = nested_filter::All;
     .           
     .               /// We want to visit items in the context of their containing
     .               /// module and so forth, so supply a crate for doing a deep walk.
     .               fn nested_visit_map(&mut self) -> Self::Map {
   216 ( 0.00%)          self.tcx.hir()
     .               }
     .           
     .               fn visit_mod(&mut self, _m: &'tcx hir::Mod<'tcx>, _s: Span, _n: hir::HirId) {
     .                   // Don't visit nested modules, since we run a separate visitor walk
     .                   // for each module in `privacy_access_levels`
     .               }
     .           
   770 ( 0.00%)      fn visit_nested_body(&mut self, body: hir::BodyId) {
     .                   let old_maybe_typeck_results =
   231 ( 0.00%)              self.maybe_typeck_results.replace(self.tcx.typeck_body(body));
   462 ( 0.00%)          let body = self.tcx.hir().body(body);
     .                   self.visit_body(body);
    77 ( 0.00%)          self.maybe_typeck_results = old_maybe_typeck_results;
   616 ( 0.00%)      }
     .           
     .               fn visit_generic_arg(&mut self, generic_arg: &'tcx hir::GenericArg<'tcx>) {
   848 ( 0.00%)          match generic_arg {
   216 ( 0.00%)              hir::GenericArg::Type(t) => self.visit_ty(t),
     .                       hir::GenericArg::Infer(inf) => self.visit_infer(inf),
     .                       hir::GenericArg::Lifetime(_) | hir::GenericArg::Const(_) => {}
     .                   }
     .               }
     .           
 4,522 ( 0.00%)      fn visit_ty(&mut self, hir_ty: &'tcx hir::Ty<'tcx>) {
 1,292 ( 0.00%)          self.span = hir_ty.span;
 1,938 ( 0.00%)          if let Some(typeck_results) = self.maybe_typeck_results {
     .                       // Types in bodies.
   609 ( 0.00%)              if self.visit(typeck_results.node_type(hir_ty.hir_id)).is_break() {
     .                           return;
     .                       }
     .                   } else {
     .                       // Types in signatures.
     .                       // FIXME: This is very ineffective. Ideally each HIR type should be converted
     .                       // into a semantic type only once and the result should be cached somehow.
 1,329 ( 0.00%)              if self.visit(rustc_typeck::hir_ty_to_ty(self.tcx, hir_ty)).is_break() {
     .                           return;
     .                       }
     .                   }
     .           
 1,938 ( 0.00%)          intravisit::walk_ty(self, hir_ty);
 3,876 ( 0.00%)      }
     .           
     .               fn visit_infer(&mut self, inf: &'tcx hir::InferArg) {
     .                   self.span = inf.span;
     .                   if let Some(typeck_results) = self.maybe_typeck_results {
     .                       if let Some(ty) = typeck_results.node_type_opt(inf.hir_id) {
     .                           if self.visit(ty).is_break() {
     .                               return;
     .                           }
-- line 1150 ----------------------------------------
-- line 1152 ----------------------------------------
     .                           // We don't do anything for const infers here.
     .                       }
     .                   } else {
     .                       bug!("visit_infer without typeck_results");
     .                   }
     .                   intravisit::walk_inf(self, inf);
     .               }
     .           
   816 ( 0.00%)      fn visit_trait_ref(&mut self, trait_ref: &'tcx hir::TraitRef<'tcx>) {
   306 ( 0.00%)          self.span = trait_ref.path.span;
   102 ( 0.00%)          if self.maybe_typeck_results.is_none() {
     .                       // Avoid calling `hir_trait_to_predicates` in bodies, it will ICE.
     .                       // The traits' privacy in bodies is already checked as a part of trait object types.
   102 ( 0.00%)              let bounds = rustc_typeck::hir_trait_to_predicates(
   102 ( 0.00%)                  self.tcx,
     .                           trait_ref,
     .                           // NOTE: This isn't really right, but the actual type doesn't matter here. It's
     .                           // just required by `ty::TraitRef`.
   306 ( 0.00%)                  self.tcx.types.never,
     .                       );
     .           
   918 ( 0.00%)              for (trait_predicate, _, _) in bounds.trait_bounds {
   714 ( 0.00%)                  if self.visit_trait(trait_predicate.skip_binder()).is_break() {
     .                               return;
     .                           }
     .                       }
     .           
   612 ( 0.00%)              for (poly_predicate, _) in bounds.projection_bounds {
     .                           let pred = poly_predicate.skip_binder();
     .                           let poly_pred_term = self.visit(pred.term);
     .                           if poly_pred_term.is_break()
     .                               || self.visit_projection_ty(pred.projection_ty).is_break()
     .                           {
     .                               return;
     .                           }
     .                       }
     .                   }
     .           
     .                   intravisit::walk_trait_ref(self, trait_ref);
   816 ( 0.00%)      }
     .           
     .               // Check types of expressions
12,069 ( 0.00%)      fn visit_expr(&mut self, expr: &'tcx hir::Expr<'tcx>) {
12,069 ( 0.00%)          if self.check_expr_pat_type(expr.hir_id, expr.span) {
     .                       // Do not check nested expressions if the error already happened.
     .                       return;
     .                   }
 9,255 ( 0.00%)          match expr.kind {
    64 ( 0.00%)              hir::ExprKind::Assign(_, rhs, _) | hir::ExprKind::Match(rhs, ..) => {
     .                           // Do not report duplicate errors for `x = y` and `match x { ... }`.
   448 ( 0.00%)                  if self.check_expr_pat_type(rhs.hir_id, rhs.span) {
     .                               return;
     .                           }
     .                       }
     1 ( 0.00%)              hir::ExprKind::MethodCall(segment, ..) => {
     .                           // Method calls have to be checked specially.
     2 ( 0.00%)                  self.span = segment.ident.span;
     6 ( 0.00%)                  if let Some(def_id) = self.typeck_results().type_dependent_def_id(expr.hir_id) {
     3 ( 0.00%)                      if self.visit(self.tcx.type_of(def_id)).is_break() {
     .                                   return;
     .                               }
     .                           } else {
     .                               self.tcx
     .                                   .sess
     .                                   .delay_span_bug(expr.span, "no type-dependent def for method call");
     .                           }
     .                       }
     .                       _ => {}
     .                   }
     .           
 4,023 ( 0.00%)          intravisit::walk_expr(self, expr);
10,728 ( 0.00%)      }
     .           
     .               // Prohibit access to associated items with insufficient nominal visibility.
     .               //
     .               // Additionally, until better reachability analysis for macros 2.0 is available,
     .               // we prohibit access to private statics from other crates, this allows to give
     .               // more code internal visibility at link time. (Access to private functions
     .               // is already prohibited by type privacy for function types.)
10,950 ( 0.00%)      fn visit_qpath(&mut self, qpath: &'tcx hir::QPath<'tcx>, id: hir::HirId, span: Span) {
 2,190 ( 0.00%)          let def = match qpath {
 3,084 ( 0.00%)              hir::QPath::Resolved(_, path) => match path.res {
 3,300 ( 0.00%)                  Res::Def(kind, def_id) => Some((kind, def_id)),
     .                           _ => None,
     .                       },
    67 ( 0.00%)              hir::QPath::TypeRelative(..) | hir::QPath::LangItem(..) => self
     .                           .maybe_typeck_results
   603 ( 0.00%)                  .and_then(|typeck_results| typeck_results.type_dependent_def(id)),
     .                   };
     .                   let def = def.filter(|(kind, _)| {
 1,234 ( 0.00%)              matches!(
     .                           kind,
     .                           DefKind::AssocFn | DefKind::AssocConst | DefKind::AssocTy | DefKind::Static
     .                       )
     .                   });
     .                   if let Some((kind, def_id)) = def {
     .                       let is_local_static =
   416 ( 0.00%)                  if let DefKind::Static = kind { def_id.is_local() } else { false };
   208 ( 0.00%)              if !self.item_is_accessible(def_id) && !is_local_static {
     .                           let sess = self.tcx.sess;
     .                           let sm = sess.source_map();
     .                           let name = match qpath {
     .                               hir::QPath::Resolved(..) | hir::QPath::LangItem(..) => {
     .                                   sm.span_to_snippet(qpath.span()).ok()
     .                               }
     .                               hir::QPath::TypeRelative(_, segment) => Some(segment.ident.to_string()),
     .                           };
-- line 1258 ----------------------------------------
-- line 1263 ----------------------------------------
     .                           };
     .                           sess.struct_span_err(span, &msg)
     .                               .span_label(span, &format!("private {}", kind))
     .                               .emit();
     .                           return;
     .                       }
     .                   }
     .           
12,045 ( 0.00%)          intravisit::walk_qpath(self, qpath, id, span);
     .               }
     .           
     .               // Check types of patterns.
     .               fn visit_pat(&mut self, pattern: &'tcx hir::Pat<'tcx>) {
 3,678 ( 0.00%)          if self.check_expr_pat_type(pattern.hir_id, pattern.span) {
     .                       // Do not check nested patterns if the error already happened.
     .                       return;
     .                   }
     .           
 1,953 ( 0.00%)          intravisit::walk_pat(self, pattern);
     .               }
     .           
   525 ( 0.00%)      fn visit_local(&mut self, local: &'tcx hir::Local<'tcx>) {
   315 ( 0.00%)          if let Some(init) = local.init {
   357 ( 0.00%)              if self.check_expr_pat_type(init.hir_id, init.span) {
     .                           // Do not report duplicate errors for `let x = y`.
     .                           return;
     .                       }
     .                   }
     .           
     .                   intravisit::walk_local(self, local);
   204 ( 0.00%)      }
     .           
     .               // Check types in item interfaces.
     .               fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {
   146 ( 0.00%)          let orig_current_item = mem::replace(&mut self.current_item, item.def_id);
     .                   let old_maybe_typeck_results = self.maybe_typeck_results.take();
   430 ( 0.00%)          intravisit::walk_item(self, item);
   146 ( 0.00%)          self.maybe_typeck_results = old_maybe_typeck_results;
   146 ( 0.00%)          self.current_item = orig_current_item;
     .               }
     .           }
     .           
     .           impl<'tcx> DefIdVisitor<'tcx> for TypePrivacyVisitor<'tcx> {
     .               fn tcx(&self) -> TyCtxt<'tcx> {
13,362 ( 0.01%)          self.tcx
     .               }
48,090 ( 0.02%)      fn visit_def_id(
     .                   &mut self,
     .                   def_id: DefId,
     .                   kind: &str,
     .                   descr: &dyn fmt::Display,
     .               ) -> ControlFlow<Self::BreakTy> {
     .                   if self.check_def_id(def_id, kind, descr) {
     .                       ControlFlow::BREAK
     .                   } else {
     .                       ControlFlow::CONTINUE
     .                   }
28,854 ( 0.01%)      }
     .           }
     .           
     .           ///////////////////////////////////////////////////////////////////////////////
     .           /// Obsolete visitors for checking for private items in public interfaces.
     .           /// These visitors are supposed to be kept in frozen state and produce an
     .           /// "old error node set". For backward compatibility the new visitor reports
     .           /// warnings instead of hard errors when the erroneous node is not in this old set.
     .           ///////////////////////////////////////////////////////////////////////////////
-- line 1328 ----------------------------------------
-- line 1342 ----------------------------------------
     .               /// Whether we've recurred at all (i.e., if we're pointing at the
     .               /// first type on which `visit_ty` was called).
     .               at_outer_type: bool,
     .               /// Whether that first type is a public path.
     .               outer_type_is_public_path: bool,
     .           }
     .           
     .           impl<'a, 'tcx> ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {
   138 ( 0.00%)      fn path_is_private_type(&self, path: &hir::Path<'_>) -> bool {
   414 ( 0.00%)          let did = match path.res {
     .                       Res::PrimTy(..) | Res::SelfTy(..) | Res::Err => return false,
   750 ( 0.00%)              res => res.def_id(),
     .                   };
     .           
     .                   // A path can only be private if:
     .                   // it's in this crate...
   125 ( 0.00%)          if let Some(did) = did.as_local() {
     .                       // .. and it corresponds to a private type in the AST (this returns
     .                       // `None` for type parameters).
   550 ( 0.00%)              match self.tcx.hir().find(self.tcx.hir().local_def_id_to_hir_id(did)) {
   436 ( 0.00%)                  Some(Node::Item(item)) => !item.vis.node.is_pub(),
     .                           Some(_) | None => false,
     .                       }
     .                   } else {
     .                       false
     .                   }
   276 ( 0.00%)      }
     .           
     .               fn trait_is_public(&self, trait_id: LocalDefId) -> bool {
     .                   // FIXME: this would preferably be using `exported_items`, but all
     .                   // traits are exported currently (see `EmbargoVisitor.exported_trait`).
     .                   self.access_levels.is_public(trait_id)
     .               }
     .           
     .               fn check_generic_bound(&mut self, bound: &hir::GenericBound<'_>) {
-- line 1376 ----------------------------------------
-- line 1377 ----------------------------------------
     .                   if let hir::GenericBound::Trait(ref trait_ref, _) = *bound {
     .                       if self.path_is_private_type(trait_ref.trait_ref.path) {
     .                           self.old_error_set.insert(trait_ref.trait_ref.hir_ref_id);
     .                       }
     .                   }
     .               }
     .           
     .               fn item_is_public(&self, def_id: LocalDefId, vis: &hir::Visibility<'_>) -> bool {
    55 ( 0.00%)          self.access_levels.is_reachable(def_id) || vis.node.is_pub()
     .               }
     .           }
     .           
     .           impl<'a, 'b, 'tcx, 'v> Visitor<'v> for ObsoleteCheckTypeForPrivatenessVisitor<'a, 'b, 'tcx> {
     .               fn visit_generic_arg(&mut self, generic_arg: &'v hir::GenericArg<'v>) {
     .                   match generic_arg {
     .                       hir::GenericArg::Type(t) => self.visit_ty(t),
     .                       hir::GenericArg::Infer(inf) => self.visit_ty(&inf.to_ty()),
     .                       hir::GenericArg::Lifetime(_) | hir::GenericArg::Const(_) => {}
     .                   }
     .               }
     .           
     .               fn visit_ty(&mut self, ty: &hir::Ty<'_>) {
   494 ( 0.00%)          if let hir::TyKind::Path(hir::QPath::Resolved(_, path)) = ty.kind {
   392 ( 0.00%)              if self.inner.path_is_private_type(path) {
     .                           self.contains_private = true;
     .                           // Found what we're looking for, so let's stop working.
     .                           return;
     .                       }
     .                   }
     .                   if let hir::TyKind::Path(_) = ty.kind {
     .                       if self.at_outer_type {
    98 ( 0.00%)                  self.outer_type_is_public_path = true;
     .                       }
     .                   }
   198 ( 0.00%)          self.at_outer_type = false;
   198 ( 0.00%)          intravisit::walk_ty(self, ty)
   396 ( 0.00%)      }
     .           
     .               // Don't want to recurse into `[, .. expr]`.
     .               fn visit_expr(&mut self, _: &hir::Expr<'_>) {}
     .           }
     .           
     .           impl<'a, 'tcx> Visitor<'tcx> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {
     .               type NestedFilter = nested_filter::All;
     .           
     .               /// We want to visit items in the context of their containing
     .               /// module and so forth, so supply a crate for doing a deep walk.
     .               fn nested_visit_map(&mut self) -> Self::Map {
   157 ( 0.00%)          self.tcx.hir()
     .               }
     .           
 1,314 ( 0.00%)      fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {
   584 ( 0.00%)          match item.kind {
     .                       // Contents of a private mod can be re-exported, so we need
     .                       // to check internals.
     .                       hir::ItemKind::Mod(_) => {}
     .           
     .                       // An `extern {}` doesn't introduce a new privacy
     .                       // namespace (the contents have their own privacies).
     .                       hir::ItemKind::ForeignMod { .. } => {}
     .           
     2 ( 0.00%)              hir::ItemKind::Trait(.., bounds, _) => {
     5 ( 0.00%)                  if !self.trait_is_public(item.def_id) {
     .                               return;
     .                           }
     .           
     .                           for bound in bounds.iter() {
     .                               self.check_generic_bound(bound)
     .                           }
     .                       }
     .           
-- line 1447 ----------------------------------------
-- line 1454 ----------------------------------------
     .                           // `impl [... for] Private` is never visible.
     .                           let self_contains_private;
     .                           // `impl [... for] Public<...>`, but not `impl [... for]
     .                           // Vec<Public>` or `(Public,)`, etc.
     .                           let self_is_public_path;
     .           
     .                           // Check the properties of the `Self` type:
     .                           {
   396 ( 0.00%)                      let mut visitor = ObsoleteCheckTypeForPrivatenessVisitor {
     .                                   inner: self,
     .                                   contains_private: false,
     .                                   at_outer_type: true,
     .                                   outer_type_is_public_path: false,
     .                               };
    99 ( 0.00%)                      visitor.visit_ty(impl_.self_ty);
     .                               self_contains_private = visitor.contains_private;
     .                               self_is_public_path = visitor.outer_type_is_public_path;
     .                           }
     .           
     .                           // Miscellaneous info about the impl:
     .           
     .                           // `true` iff this is `impl Private for ...`.
     .                           let not_private_trait = impl_.of_trait.as_ref().map_or(
     .                               true, // no trait counts as public trait
     .                               |tr| {
   267 ( 0.00%)                          if let Some(def_id) = tr.path.res.def_id().as_local() {
     3 ( 0.00%)                              self.trait_is_public(def_id)
     .                                   } else {
     .                                       true // external traits must be public
     .                                   }
     .                               },
     .                           );
     .           
     .                           // `true` iff this is a trait impl or at least one method is public.
     .                           //
     .                           // `impl Public { $( fn ...() {} )* }` is not visible.
     .                           //
     .                           // This is required over just using the methods' privacy
     .                           // directly because we might have `impl<T: Foo<Private>> ...`,
     .                           // and we shouldn't warn about the generics if all the methods
     .                           // are private (because `T` won't be visible externally).
     .                           let trait_or_some_public_method = impl_.of_trait.is_some()
    10 ( 0.00%)                      || impl_.items.iter().any(|impl_item_ref| {
    40 ( 0.00%)                          let impl_item = self.tcx.hir().impl_item(impl_item_ref.id);
    70 ( 0.00%)                          match impl_item.kind {
     .                                       hir::ImplItemKind::Const(..) | hir::ImplItemKind::Fn(..) => {
     .                                           self.access_levels.is_reachable(impl_item_ref.id.def_id)
     .                                       }
     .                                       hir::ImplItemKind::TyAlias(_) => false,
     .                                   }
     .                               });
     .           
   198 ( 0.00%)                  if !self_contains_private && not_private_trait && trait_or_some_public_method {
     .                               intravisit::walk_generics(self, &impl_.generics);
     .           
   198 ( 0.00%)                      match impl_.of_trait {
     .                                   None => {
    10 ( 0.00%)                              for impl_item_ref in impl_.items {
     .                                           // This is where we choose whether to walk down
     .                                           // further into the impl to check its items. We
     .                                           // should only walk into public items so that we
     .                                           // don't erroneously report errors for private
     .                                           // types in private items.
    60 ( 0.00%)                                  let impl_item = self.tcx.hir().impl_item(impl_item_ref.id);
   100 ( 0.00%)                                  match impl_item.kind {
     .                                               hir::ImplItemKind::Const(..) | hir::ImplItemKind::Fn(..)
    20 ( 0.00%)                                          if self
    10 ( 0.00%)                                              .item_is_public(impl_item.def_id, &impl_item.vis) =>
     .                                               {
     .                                                   intravisit::walk_impl_item(self, impl_item)
     .                                               }
     .                                               hir::ImplItemKind::TyAlias(..) => {
     .                                                   intravisit::walk_impl_item(self, impl_item)
     .                                               }
     .                                               _ => {}
     .                                           }
-- line 1529 ----------------------------------------
-- line 1538 ----------------------------------------
     .                                       //
     .                                       // Those in 1. can only occur if the trait is in
     .                                       // this crate and will've been warned about on the
     .                                       // trait definition (there's no need to warn twice
     .                                       // so we don't check the methods).
     .                                       //
     .                                       // Those in 2. are warned via walk_generics and this
     .                                       // call here.
   267 ( 0.00%)                              intravisit::walk_path(self, tr.path);
     .           
     .                                       // Those in 3. are warned with this call.
    89 ( 0.00%)                              for impl_item_ref in impl_.items {
   335 ( 0.00%)                                  let impl_item = self.tcx.hir().impl_item(impl_item_ref.id);
   526 ( 0.00%)                                  if let hir::ImplItemKind::TyAlias(ty) = impl_item.kind {
     .                                               self.visit_ty(ty);
     .                                           }
     .                                       }
     .                                   }
     .                               }
     .                           } else if impl_.of_trait.is_none() && self_is_public_path {
     .                               // `impl Public<Private> { ... }`. Any public static
     .                               // methods will be visible as `Public::foo`.
-- line 1559 ----------------------------------------
-- line 1584 ----------------------------------------
     .                           return;
     .                       }
     .           
     .                       // `type ... = ...;` can contain private types, because
     .                       // we're introducing a new name.
     .                       hir::ItemKind::TyAlias(..) => return,
     .           
     .                       // Not at all public, so we don't care.
   204 ( 0.00%)              _ if !self.item_is_public(item.def_id, &item.vis) => {
     .                           return;
     .                       }
     .           
     .                       _ => {}
     .                   }
     .           
     .                   // We've carefully constructed it so that if we're here, then
     .                   // any `visit_ty`'s will be called on things that are in
     .                   // public signatures, i.e., things that we're interested in for
     .                   // this visitor.
   310 ( 0.00%)          intravisit::walk_item(self, item);
   920 ( 0.00%)      }
     .           
   184 ( 0.00%)      fn visit_generics(&mut self, generics: &'tcx hir::Generics<'tcx>) {
     .                   for param in generics.params {
     .                       for bound in param.bounds {
     .                           self.check_generic_bound(bound);
     .                       }
     .                   }
    23 ( 0.00%)          for predicate in generics.where_clause.predicates {
     .                       match predicate {
     .                           hir::WherePredicate::BoundPredicate(bound_pred) => {
     .                               for bound in bound_pred.bounds.iter() {
     .                                   self.check_generic_bound(bound)
     .                               }
     .                           }
     .                           hir::WherePredicate::RegionPredicate(_) => {}
     .                           hir::WherePredicate::EqPredicate(eq_pred) => {
     .                               self.visit_ty(eq_pred.rhs_ty);
     .                           }
     .                       }
     .                   }
   184 ( 0.00%)      }
     .           
     .               fn visit_foreign_item(&mut self, item: &'tcx hir::ForeignItem<'tcx>) {
     .                   if self.access_levels.is_reachable(item.def_id) {
     .                       intravisit::walk_foreign_item(self, item)
     .                   }
     .               }
     .           
     .               fn visit_ty(&mut self, t: &'tcx hir::Ty<'tcx>) {
   150 ( 0.00%)          if let hir::TyKind::Path(hir::QPath::Resolved(_, path)) = t.kind {
    96 ( 0.00%)              if self.path_is_private_type(path) {
     .                           self.old_error_set.insert(t.hir_id);
     .                       }
     .                   }
   276 ( 0.00%)          intravisit::walk_ty(self, t)
     .               }
     .           
    80 ( 0.00%)      fn visit_variant(
     .                   &mut self,
     .                   v: &'tcx hir::Variant<'tcx>,
     .                   g: &'tcx hir::Generics<'tcx>,
     .                   item_id: hir::HirId,
     .               ) {
   100 ( 0.00%)          if self.access_levels.is_reachable(self.tcx.hir().local_def_id(v.id)) {
    10 ( 0.00%)              self.in_variant = true;
     .                       intravisit::walk_variant(self, v, g, item_id);
    10 ( 0.00%)              self.in_variant = false;
     .                   }
    70 ( 0.00%)      }
     .           
   135 ( 0.00%)      fn visit_field_def(&mut self, s: &'tcx hir::FieldDef<'tcx>) {
   128 ( 0.00%)          if s.vis.node.is_pub() || self.in_variant {
     .                       intravisit::walk_field_def(self, s);
     .                   }
     .               }
     .           
     .               // We don't need to introspect into these at all: an
     .               // expression/block context can't possibly contain exported things.
     .               // (Making them no-ops stops us from traversing the whole AST without
     .               // having to be super careful about our `walk_...` calls above.)
-- line 1664 ----------------------------------------
-- line 1679 ----------------------------------------
     .               /// The visitor checks that each component type is at least this visible.
     .               required_visibility: ty::Visibility,
     .               has_pub_restricted: bool,
     .               has_old_errors: bool,
     .               in_assoc_ty: bool,
     .           }
     .           
     .           impl SearchInterfaceForPrivateItemsVisitor<'_> {
   700 ( 0.00%)      fn generics(&mut self) -> &mut Self {
   300 ( 0.00%)          for param in &self.tcx.generics_of(self.item_def_id).params {
    96 ( 0.00%)              match param.kind {
     .                           GenericParamDefKind::Lifetime => {}
    12 ( 0.00%)                  GenericParamDefKind::Type { has_default, .. } => {
    12 ( 0.00%)                      if has_default {
     .                                   self.visit(self.tcx.type_of(param.def_id));
     .                               }
     .                           }
     .                           // FIXME(generic_const_exprs): May want to look inside const here
     .                           GenericParamDefKind::Const { .. } => {
     .                               self.visit(self.tcx.type_of(param.def_id));
     .                           }
     .                       }
     .                   }
     .                   self
   800 ( 0.00%)      }
     .           
   500 ( 0.00%)      fn predicates(&mut self) -> &mut Self {
     .                   // N.B., we use `explicit_predicates_of` and not `predicates_of`
     .                   // because we don't want to report privacy errors due to where
     .                   // clauses that the compiler inferred. We only want to
     .                   // consider the ones that the user wrote. This is important
     .                   // for the inferred outlives rules; see
     .                   // `src/test/ui/rfc-2093-infer-outlives/privacy.rs`.
   200 ( 0.00%)          self.visit_predicates(self.tcx.explicit_predicates_of(self.item_def_id));
     .                   self
   600 ( 0.00%)      }
     .           
     .               fn bounds(&mut self) -> &mut Self {
     .                   self.visit_predicates(ty::GenericPredicates {
     .                       parent: None,
     .                       predicates: self.tcx.explicit_item_bounds(self.item_def_id),
     .                   });
     .                   self
     .               }
     .           
   525 ( 0.00%)      fn ty(&mut self) -> &mut Self {
   210 ( 0.00%)          self.visit(self.tcx.type_of(self.item_def_id));
     .                   self
   525 ( 0.00%)      }
     .           
     .               fn check_def_id(&mut self, def_id: DefId, kind: &str, descr: &dyn fmt::Display) -> bool {
 1,720 ( 0.00%)          if self.leaks_private_dep(def_id) {
     .                       self.tcx.struct_span_lint_hir(
     .                           lint::builtin::EXPORTED_PRIVATE_DEPENDENCIES,
     .                           self.tcx.hir().local_def_id_to_hir_id(self.item_def_id),
     .                           self.tcx.def_span(self.item_def_id.to_def_id()),
     .                           |lint| {
     .                               lint.build(&format!(
     .                                   "{} `{}` from private dependency '{}' in public \
     .                                                           interface",
-- line 1738 ----------------------------------------
-- line 1740 ----------------------------------------
     .                                   descr,
     .                                   self.tcx.crate_name(def_id.krate)
     .                               ))
     .                               .emit()
     .                           },
     .                       );
     .                   }
     .           
   894 ( 0.00%)          let hir_id = match def_id.as_local() {
   275 ( 0.00%)              Some(def_id) => self.tcx.hir().local_def_id_to_hir_id(def_id),
     .                       None => return false,
     .                   };
     .           
     .                   let vis = self.tcx.visibility(def_id);
   550 ( 0.00%)          if !vis.is_at_least(self.required_visibility, self.tcx) {
     .                       let vis_descr = match vis {
     .                           ty::Visibility::Public => "public",
     .                           ty::Visibility::Invisible => "private",
     .                           ty::Visibility::Restricted(vis_def_id) => {
     .                               if vis_def_id == self.tcx.parent_module(hir_id).to_def_id() {
     .                                   "private"
     .                               } else if vis_def_id.is_top_level_module() {
     .                                   "crate-private"
-- line 1762 ----------------------------------------
-- line 1792 ----------------------------------------
     .                   false
     .               }
     .           
     .               /// An item is 'leaked' from a private dependency if all
     .               /// of the following are true:
     .               /// 1. It's contained within a public type
     .               /// 2. It comes from a private crate
     .               fn leaks_private_dep(&self, item_id: DefId) -> bool {
 1,032 ( 0.00%)          let ret = self.required_visibility.is_public() && self.tcx.is_private_dep(item_id.krate);
     .           
     .                   tracing::debug!("leaks_private_dep(item_id={:?})={}", item_id, ret);
     .                   ret
     .               }
     .           }
     .           
     .           impl<'tcx> DefIdVisitor<'tcx> for SearchInterfaceForPrivateItemsVisitor<'tcx> {
     .               fn tcx(&self) -> TyCtxt<'tcx> {
   557 ( 0.00%)          self.tcx
     .               }
 5,504 ( 0.00%)      fn visit_def_id(
     .                   &mut self,
     .                   def_id: DefId,
     .                   kind: &str,
     .                   descr: &dyn fmt::Display,
     .               ) -> ControlFlow<Self::BreakTy> {
     .                   if self.check_def_id(def_id, kind, descr) {
     .                       ControlFlow::BREAK
     .                   } else {
     .                       ControlFlow::CONTINUE
     .                   }
 3,096 ( 0.00%)      }
     .           }
     .           
     .           struct PrivateItemsInPublicInterfacesVisitor<'tcx> {
     .               tcx: TyCtxt<'tcx>,
     .               has_pub_restricted: bool,
     .               old_error_set_ancestry: LocalDefIdSet,
     .           }
     .           
     .           impl<'tcx> PrivateItemsInPublicInterfacesVisitor<'tcx> {
     .               fn check(
     .                   &self,
     .                   def_id: LocalDefId,
     .                   required_visibility: ty::Visibility,
     .               ) -> SearchInterfaceForPrivateItemsVisitor<'tcx> {
   992 ( 0.00%)          SearchInterfaceForPrivateItemsVisitor {
   105 ( 0.00%)              tcx: self.tcx,
     .                       item_def_id: def_id,
     .                       required_visibility,
   154 ( 0.00%)              has_pub_restricted: self.has_pub_restricted,
     .                       has_old_errors: self.old_error_set_ancestry.contains(&def_id),
     .                       in_assoc_ty: false,
     .                   }
     .               }
     .           
 1,014 ( 0.00%)      fn check_assoc_item(
     .                   &self,
     .                   def_id: LocalDefId,
     .                   assoc_item_kind: AssocItemKind,
     .                   defaultness: hir::Defaultness,
     .                   vis: ty::Visibility,
     .               ) {
     .                   let mut check = self.check(def_id, vis);
     .           
   156 ( 0.00%)          let (check_ty, is_assoc_ty) = match assoc_item_kind {
     .                       AssocItemKind::Const | AssocItemKind::Fn { .. } => (true, false),
     .                       AssocItemKind::Type => (defaultness.has_value(), true),
     .                   };
   156 ( 0.00%)          check.in_assoc_ty = is_assoc_ty;
   312 ( 0.00%)          check.generics().predicates();
     .                   if check_ty {
    78 ( 0.00%)              check.ty();
     .                   }
   624 ( 0.00%)      }
     .           }
     .           
     .           impl<'tcx> Visitor<'tcx> for PrivateItemsInPublicInterfacesVisitor<'tcx> {
     .               type NestedFilter = nested_filter::OnlyBodies;
     .           
     .               fn nested_visit_map(&mut self) -> Self::Map {
    77 ( 0.00%)          self.tcx.hir()
     .               }
     .           
 1,314 ( 0.00%)      fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {
   146 ( 0.00%)          let tcx = self.tcx;
   146 ( 0.00%)          let item_visibility = tcx.visibility(item.def_id);
     .           
   730 ( 0.00%)          match item.kind {
     .                       // Crates are always public.
     .                       hir::ItemKind::ExternCrate(..) => {}
     .                       // All nested items are checked by `visit_item`.
     .                       hir::ItemKind::Mod(..) => {}
     .                       // Checked in resolve.
     .                       hir::ItemKind::Use(..) => {}
     .                       // No subitems.
     .                       hir::ItemKind::Macro(..) | hir::ItemKind::GlobalAsm(..) => {}
-- line 1887 ----------------------------------------
-- line 1892 ----------------------------------------
     .                       | hir::ItemKind::TyAlias(..) => {
     .                           self.check(item.def_id, item_visibility).generics().predicates().ty();
     .                       }
     .                       hir::ItemKind::OpaqueTy(..) => {
     .                           // `ty()` for opaque types is the underlying type,
     .                           // it's not a part of interface, so we skip it.
     .                           self.check(item.def_id, item_visibility).generics().bounds();
     .                       }
     4 ( 0.00%)              hir::ItemKind::Trait(.., trait_item_refs) => {
     4 ( 0.00%)                  self.check(item.def_id, item_visibility).generics().predicates();
     .           
     .                           for trait_item_ref in trait_item_refs {
     6 ( 0.00%)                      self.check_assoc_item(
     1 ( 0.00%)                          trait_item_ref.id.def_id,
     .                                   trait_item_ref.kind,
     .                                   trait_item_ref.defaultness,
     .                                   item_visibility,
     .                               );
     .           
     7 ( 0.00%)                      if let AssocItemKind::Type = trait_item_ref.kind {
     .                                   self.check(trait_item_ref.id.def_id, item_visibility).bounds();
     .                               }
     .                           }
     .                       }
     .                       hir::ItemKind::TraitAlias(..) => {
     .                           self.check(item.def_id, item_visibility).generics().predicates();
     .                       }
     .                       hir::ItemKind::Enum(ref def, _) => {
     4 ( 0.00%)                  self.check(item.def_id, item_visibility).generics().predicates();
     .           
     1 ( 0.00%)                  for variant in def.variants {
    10 ( 0.00%)                      for field in variant.data.fields() {
   120 ( 0.00%)                          self.check(self.tcx.hir().local_def_id(field.hir_id), item_visibility).ty();
     .                               }
     .                           }
     .                       }
     .                       // Subitems of foreign modules have their own publicity.
     .                       hir::ItemKind::ForeignMod { items, .. } => {
     .                           for foreign_item in items {
     .                               let vis = tcx.visibility(foreign_item.id.def_id);
     .                               self.check(foreign_item.id.def_id, vis).generics().predicates().ty();
     .                           }
     .                       }
     .                       // Subitems of structs and unions have their own publicity.
     .                       hir::ItemKind::Struct(ref struct_def, _) | hir::ItemKind::Union(ref struct_def, _) => {
    40 ( 0.00%)                  self.check(item.def_id, item_visibility).generics().predicates();
     .           
    30 ( 0.00%)                  for field in struct_def.fields() {
   102 ( 0.00%)                      let def_id = tcx.hir().local_def_id(field.hir_id);
     .                               let field_visibility = tcx.visibility(def_id);
    51 ( 0.00%)                      self.check(def_id, min(item_visibility, field_visibility, tcx)).ty();
     .                           }
     .                       }
     .                       // An inherent impl is public when its type is public
     .                       // Subitems of inherent impls have their own publicity.
     .                       // A trait impl is public when both its type and its trait are public
     .                       // Subitems of trait impls have inherited publicity.
     .                       hir::ItemKind::Impl(ref impl_) => {
   396 ( 0.00%)                  let impl_vis = ty::Visibility::of_impl(item.def_id, tcx, &Default::default());
     .                           // check that private components do not appear in the generics or predicates of inherent impls
     .                           // this check is intentionally NOT performed for impls of traits, per #90586
   198 ( 0.00%)                  if impl_.of_trait.is_none() {
    50 ( 0.00%)                      self.check(item.def_id, impl_vis).generics().predicates();
     .                           }
    99 ( 0.00%)                  for impl_item_ref in impl_.items {
   122 ( 0.00%)                      let impl_item_vis = if impl_.of_trait.is_none() {
    10 ( 0.00%)                          min(tcx.visibility(impl_item_ref.id.def_id), impl_vis, tcx)
     .                               } else {
     .                                   impl_vis
     .                               };
   452 ( 0.00%)                      self.check_assoc_item(
    77 ( 0.00%)                          impl_item_ref.id.def_id,
     .                                   impl_item_ref.kind,
     .                                   impl_item_ref.defaultness,
     .                                   impl_item_vis,
     .                               );
     .                           }
     .                       }
     .                   }
 1,168 ( 0.00%)      }
     .           }
     .           
     .           pub fn provide(providers: &mut Providers) {
     8 ( 0.00%)      *providers = Providers {
     .                   visibility,
     .                   privacy_access_levels,
     .                   check_private_in_public,
     .                   check_mod_privacy,
     .                   ..*providers
     .               };
     1 ( 0.00%)  }
     .           
 2,448 ( 0.00%)  fn visibility(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Visibility {
   272 ( 0.00%)      let def_id = def_id.expect_local();
     .               match tcx.resolutions(()).visibilities.get(&def_id) {
   400 ( 0.00%)          Some(vis) => *vis,
     .                   None => {
     .                       let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);
   735 ( 0.00%)              match tcx.hir().get(hir_id) {
     .                           // Unique types created for closures participate in type privacy checking.
     .                           // They have visibilities inherited from the module they are defined in.
     .                           Node::Expr(hir::Expr { kind: hir::ExprKind::Closure(..), .. }) => {
     .                               ty::Visibility::Restricted(tcx.parent_module(hir_id).to_def_id())
     .                           }
     .                           // - AST lowering may clone `use` items and the clones don't
     .                           //   get their entries in the resolver's visibility table.
     .                           // - AST lowering also creates opaque type items with inherited visibilies.
     .                           //   Visibility on them should have no effect, but to avoid the visibility
     .                           //   query failing on some items, we provide it for opaque types as well.
     .                           Node::Item(hir::Item {
     5 ( 0.00%)                      vis,
     .                               kind: hir::ItemKind::Use(..) | hir::ItemKind::OpaqueTy(..),
     .                               ..
    30 ( 0.00%)                  }) => ty::Visibility::from_hir(vis, hir_id, tcx),
     .                           // Visibilities of trait impl items are inherited from their traits
     .                           // and are not filled in resolve.
     .                           Node::ImplItem(impl_item) => {
   871 ( 0.00%)                      match tcx.hir().get_by_def_id(tcx.hir().get_parent_item(hir_id)) {
     .                                   Node::Item(hir::Item {
     .                                       kind: hir::ItemKind::Impl(hir::Impl { of_trait: Some(tr), .. }),
     .                                       ..
    67 ( 0.00%)                          }) => tr.path.res.opt_def_id().map_or_else(
     .                                       || {
     .                                           tcx.sess.delay_span_bug(tr.path.span, "trait without a def-id");
     .                                           ty::Visibility::Public
     .                                       },
     .                                       |def_id| tcx.visibility(def_id),
     .                                   ),
     .                                   _ => span_bug!(impl_item.span, "the parent is not a trait impl"),
     .                               }
-- line 2021 ----------------------------------------
-- line 2023 ----------------------------------------
     .                           _ => span_bug!(
     .                               tcx.def_span(def_id),
     .                               "visibility table unexpectedly missing a def-id: {:?}",
     .                               def_id,
     .                           ),
     .                       }
     .                   }
     .               }
 2,176 ( 0.00%)  }
     .           
    64 ( 0.00%)  fn check_mod_privacy(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {
     .               // Check privacy of names not checked in previous compilation stages.
     .               let mut visitor =
    32 ( 0.00%)          NamePrivacyVisitor { tcx, maybe_typeck_results: None, current_item: module_def_id };
    72 ( 0.00%)      let (module, span, hir_id) = tcx.hir().get_module(module_def_id);
     .           
     .               intravisit::walk_mod(&mut visitor, module, hir_id);
     .           
     .               // Check privacy of explicitly written types and traits as well as
     .               // inferred types of expressions and patterns.
     .               let mut visitor =
    48 ( 0.00%)          TypePrivacyVisitor { tcx, maybe_typeck_results: None, current_item: module_def_id, span };
     .               intravisit::walk_mod(&mut visitor, module, hir_id);
    64 ( 0.00%)  }
     .           
     7 ( 0.00%)  fn privacy_access_levels(tcx: TyCtxt<'_>, (): ()) -> &AccessLevels {
     .               // Build up a set of all exported items in the AST. This is a set of all
     .               // items which are reachable from external crates based on visibility.
     9 ( 0.00%)      let mut visitor = EmbargoVisitor {
     .                   tcx,
     .                   access_levels: tcx.resolutions(()).access_levels.clone(),
     .                   macro_reachable: Default::default(),
     .                   prev_level: Some(AccessLevel::Public),
     .                   changed: false,
     .               };
     .           
     .               loop {
     .                   tcx.hir().walk_toplevel_module(&mut visitor);
     4 ( 0.00%)          if visitor.changed {
     3 ( 0.00%)              visitor.changed = false;
     .                   } else {
     .                       break;
     .                   }
     .               }
     .           
     1 ( 0.00%)      tcx.arena.alloc(visitor.access_levels)
     9 ( 0.00%)  }
     .           
     8 ( 0.00%)  fn check_private_in_public(tcx: TyCtxt<'_>, (): ()) {
     .               let access_levels = tcx.privacy_access_levels(());
     .           
     9 ( 0.00%)      let mut visitor = ObsoleteVisiblePrivateTypesVisitor {
     .                   tcx,
     .                   access_levels,
     .                   in_variant: false,
     .                   old_error_set: Default::default(),
     .               };
     .               tcx.hir().walk_toplevel_module(&mut visitor);
     .           
     .               let has_pub_restricted = {
     5 ( 0.00%)          let mut pub_restricted_visitor = PubRestrictedVisitor { tcx, has_pub_restricted: false };
     .                   tcx.hir().walk_toplevel_module(&mut pub_restricted_visitor);
     1 ( 0.00%)          pub_restricted_visitor.has_pub_restricted
     .               };
     .           
     .               let mut old_error_set_ancestry = HirIdSet::default();
     9 ( 0.00%)      for mut id in visitor.old_error_set.iter().copied() {
     .                   loop {
     .                       if !old_error_set_ancestry.insert(id) {
     .                           break;
     .                       }
     .                       let parent = tcx.hir().get_parent_node(id);
     .                       if parent == id {
     .                           break;
     .                       }
     .                       id = parent;
     .                   }
     .               }
     .           
     .               // Check for private types and traits in public interfaces.
     8 ( 0.00%)      let mut visitor = PrivateItemsInPublicInterfacesVisitor {
     .                   tcx,
     .                   has_pub_restricted,
     .                   // Only definition IDs are ever searched in `old_error_set_ancestry`,
     .                   // so we can filter away all non-definition IDs at this point.
     .                   old_error_set_ancestry: old_error_set_ancestry
     .                       .into_iter()
     .                       .filter_map(|hir_id| tcx.hir().opt_local_def_id(hir_id))
     .                       .collect(),
     .               };
     6 ( 0.00%)      tcx.hir().visit_all_item_likes(&mut DeepVisitor::new(&mut visitor));
     8 ( 0.00%)  }

54,359 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_privacy/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/hygiene.rs
--------------------------------------------------------------------------------
Ir               

-- line 40 ----------------------------------------
      .           use rustc_macros::HashStable_Generic;
      .           use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};
      .           use std::fmt;
      .           use std::hash::Hash;
      .           use tracing::*;
      .           
      .           /// A `SyntaxContext` represents a chain of pairs `(ExpnId, Transparency)` named "marks".
      .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
 32,803 ( 0.01%)  pub struct SyntaxContext(u32);
      .           
  1,127 ( 0.00%)  #[derive(Debug, Encodable, Decodable, Clone)]
      .           pub struct SyntaxContextData {
     68 ( 0.00%)      outer_expn: ExpnId,
    204 ( 0.00%)      outer_transparency: Transparency,
      .               parent: SyntaxContext,
      .               /// This context, but with all transparent and semi-transparent expansions filtered away.
      .               opaque: SyntaxContext,
      .               /// This context, but with all transparent expansions filtered away.
      .               opaque_and_semitransparent: SyntaxContext,
      .               /// Name of the crate to which `$crate` with this context would resolve.
      .               dollar_crate_name: Symbol,
      .           }
-- line 61 ----------------------------------------
-- line 65 ----------------------------------------
      .               pub struct ExpnIndex {
      .                   ENCODABLE = custom
      .               }
      .           }
      .           
      .           /// A unique ID associated with a macro invocation and expansion.
      .           #[derive(Clone, Copy, PartialEq, Eq, Hash)]
      .           pub struct ExpnId {
    100 ( 0.00%)      pub krate: CrateNum,
 13,834 ( 0.01%)      pub local_id: ExpnIndex,
      .           }
      .           
      .           impl fmt::Debug for ExpnId {
      .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      .                   // Generate crate_::{{expn_}}.
      .                   write!(f, "{:?}::{{{{expn{}}}}}", self.krate, self.local_id.private)
      .               }
      .           }
-- line 82 ----------------------------------------
-- line 106 ----------------------------------------
      .                   // or ensure that this method is always invoked with the same
      .                   // `NodeIdHashingMode`
      .                   //
      .                   // Note that we require that `hash_spans` be set according to the global
      .                   // `-Z incremental-ignore-spans` option. Normally, this option is disabled,
      .                   // which will cause us to require that this method always be called with `Span` hashing
      .                   // enabled.
      .                   HashingControls { hash_spans, node_id_hashing_mode: _ }
 17,852 ( 0.01%)              if hash_spans == !ctx.debug_opts_incremental_ignore_spans() => {}
      .                   other => panic!("Attempted hashing of {msg} with non-default HashingControls: {:?}", other),
      .               }
      .           }
      .           
      .           /// A unique hash value associated to an expansion.
      .           #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, Encodable, Decodable, HashStable_Generic)]
    108 ( 0.00%)  pub struct ExpnHash(Fingerprint);
      .           
      .           impl ExpnHash {
      .               /// Returns the [StableCrateId] identifying the crate this [ExpnHash]
      .               /// originates from.
      .               #[inline]
      .               pub fn stable_crate_id(self) -> StableCrateId {
      .                   StableCrateId(self.0.as_value().0)
      .               }
-- line 129 ----------------------------------------
-- line 138 ----------------------------------------
      .           
      .               #[inline]
      .               pub fn is_root(self) -> bool {
      .                   self.0 == Fingerprint::ZERO
      .               }
      .           
      .               /// Builds a new [ExpnHash] with the given [StableCrateId] and
      .               /// `local_hash`, where `local_hash` must be unique within its crate.
    160 ( 0.00%)      fn new(stable_crate_id: StableCrateId, local_hash: u64) -> ExpnHash {
      .                   ExpnHash(Fingerprint::new(stable_crate_id.0, local_hash))
     80 ( 0.00%)      }
      .           }
      .           
      .           /// A property of a macro expansion that determines how identifiers
      .           /// produced by that expansion are resolved.
  8,289 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Hash, Debug, Encodable, Decodable)]
      .           #[derive(HashStable_Generic)]
      .           pub enum Transparency {
      .               /// Identifier produced by a transparent expansion is always resolved at call-site.
      .               /// Call-site spans in procedural macros, hygiene opt-out in `macro` should use this.
      .               Transparent,
      .               /// Identifier produced by a semi-transparent expansion may be resolved
      .               /// either at call-site or at definition-site.
      .               /// If it's a local variable, label or `$crate` then it's resolved at def-site.
-- line 161 ----------------------------------------
-- line 169 ----------------------------------------
      .           }
      .           
      .           impl LocalExpnId {
      .               /// The ID of the theoretical expansion that generates freshly parsed, unexpanded AST.
      .               pub const ROOT: LocalExpnId = LocalExpnId::from_u32(0);
      .           
      .               pub fn from_raw(idx: ExpnIndex) -> LocalExpnId {
      .                   LocalExpnId::from_u32(idx.as_u32())
 18,460 ( 0.01%)      }
      .           
      .               pub fn as_raw(self) -> ExpnIndex {
      .                   ExpnIndex::from_u32(self.as_u32())
  2,240 ( 0.00%)      }
      .           
      .               pub fn fresh_empty() -> LocalExpnId {
      .                   HygieneData::with(|data| {
      .                       let expn_id = data.local_expn_data.push(None);
      .                       let _eid = data.local_expn_hashes.push(ExpnHash(Fingerprint::ZERO));
      .                       debug_assert_eq!(expn_id, _eid);
      .                       expn_id
      .                   })
      .               }
      .           
      .               pub fn fresh(mut expn_data: ExpnData, ctx: impl HashStableContext) -> LocalExpnId {
      .                   debug_assert_eq!(expn_data.parent.krate, LOCAL_CRATE);
     29 ( 0.00%)          let expn_hash = update_disambiguator(&mut expn_data, ctx);
      .                   HygieneData::with(|data| {
     30 ( 0.00%)              let expn_id = data.local_expn_data.push(Some(expn_data));
      .                       let _eid = data.local_expn_hashes.push(expn_hash);
      .                       debug_assert_eq!(expn_id, _eid);
      6 ( 0.00%)              let _old_id = data.expn_hash_to_expn_id.insert(expn_hash, expn_id.to_expn_id());
      .                       debug_assert!(_old_id.is_none());
      .                       expn_id
      .                   })
      .               }
      .           
      .               #[inline]
      .               pub fn expn_hash(self) -> ExpnHash {
      .                   HygieneData::with(|data| data.local_expn_hash(self))
      .               }
      .           
      .               #[inline]
      .               pub fn expn_data(self) -> ExpnData {
    418 ( 0.00%)          HygieneData::with(|data| data.local_expn_data(self).clone())
      .               }
      .           
      .               #[inline]
      .               pub fn to_expn_id(self) -> ExpnId {
  2,059 ( 0.00%)          ExpnId { krate: LOCAL_CRATE, local_id: self.as_raw() }
      .               }
      .           
      .               #[inline]
      .               pub fn set_expn_data(self, mut expn_data: ExpnData, ctx: impl HashStableContext) {
      .                   debug_assert_eq!(expn_data.parent.krate, LOCAL_CRATE);
  1,232 ( 0.00%)          let expn_hash = update_disambiguator(&mut expn_data, ctx);
      .                   HygieneData::with(|data| {
    154 ( 0.00%)              let old_expn_data = &mut data.local_expn_data[self];
    154 ( 0.00%)              assert!(old_expn_data.is_none(), "expansion data is reset for an expansion ID");
    770 ( 0.00%)              *old_expn_data = Some(expn_data);
      .                       debug_assert_eq!(data.local_expn_hashes[self].0, Fingerprint::ZERO);
    308 ( 0.00%)              data.local_expn_hashes[self] = expn_hash;
    231 ( 0.00%)              let _old_id = data.expn_hash_to_expn_id.insert(expn_hash, self.to_expn_id());
      .                       debug_assert!(_old_id.is_none());
      .                   });
      .               }
      .           
      .               #[inline]
      .               pub fn is_descendant_of(self, ancestor: LocalExpnId) -> bool {
      .                   self.to_expn_id().is_descendant_of(ancestor.to_expn_id())
      .               }
-- line 238 ----------------------------------------
-- line 259 ----------------------------------------
      .               }
      .           }
      .           
      .           impl ExpnId {
      .               /// The ID of the theoretical expansion that generates freshly parsed, unexpanded AST.
      .               /// Invariant: we do not create any ExpnId with local_id == 0 and krate != 0.
      .               pub const fn root() -> ExpnId {
      .                   ExpnId { krate: LOCAL_CRATE, local_id: ExpnIndex::from_u32(0) }
 31,194 ( 0.01%)      }
      .           
      .               #[inline]
      .               pub fn expn_hash(self) -> ExpnHash {
      .                   HygieneData::with(|data| data.expn_hash(self))
      .               }
      .           
      .               #[inline]
      .               pub fn from_hash(hash: ExpnHash) -> Option<ExpnId> {
      .                   HygieneData::with(|data| data.expn_hash_to_expn_id.get(&hash).copied())
      .               }
      .           
      .               #[inline]
      .               pub fn as_local(self) -> Option<LocalExpnId> {
 24,897 ( 0.01%)          if self.krate == LOCAL_CRATE { Some(LocalExpnId::from_raw(self.local_id)) } else { None }
      .               }
      .           
      .               #[inline]
      .               #[track_caller]
      .               pub fn expect_local(self) -> LocalExpnId {
      .                   self.as_local().unwrap()
      .               }
      .           
      .               #[inline]
      .               pub fn expn_data(self) -> ExpnData {
  1,331 ( 0.00%)          HygieneData::with(|data| data.expn_data(self).clone())
      .               }
      .           
      .               #[inline]
      .               pub fn is_descendant_of(self, ancestor: ExpnId) -> bool {
      .                   // a few "fast path" cases to avoid locking HygieneData
      .                   if ancestor == ExpnId::root() || ancestor == self {
      .                       return true;
      .                   }
-- line 300 ----------------------------------------
-- line 301 ----------------------------------------
      .                   if ancestor.krate != self.krate {
      .                       return false;
      .                   }
      .                   HygieneData::with(|data| data.is_descendant_of(self, ancestor))
      .               }
      .           
      .               /// `expn_id.outer_expn_is_descendant_of(ctxt)` is equivalent to but faster than
      .               /// `expn_id.is_descendant_of(ctxt.outer_expn())`.
  5,720 ( 0.00%)      pub fn outer_expn_is_descendant_of(self, ctxt: SyntaxContext) -> bool {
      .                   HygieneData::with(|data| data.is_descendant_of(self, data.outer_expn(ctxt)))
  2,860 ( 0.00%)      }
      .           
      .               /// Returns span for the macro which originally caused this expansion to happen.
      .               ///
      .               /// Stops backtracing at include! boundary.
      .               pub fn expansion_cause(mut self) -> Option<Span> {
      .                   let mut last_macro = None;
      .                   loop {
      .                       let expn_data = self.expn_data();
-- line 319 ----------------------------------------
-- line 348 ----------------------------------------
      .               /// This is used by `update_disambiguator` to keep track of which `ExpnData`s
      .               /// would have collisions without a disambiguator.
      .               /// The keys of this map are always computed with `ExpnData.disambiguator`
      .               /// set to 0.
      .               expn_data_disambiguators: FxHashMap<u64, u32>,
      .           }
      .           
      .           impl HygieneData {
     10 ( 0.00%)      crate fn new(edition: Edition) -> Self {
      .                   let root_data = ExpnData::default(
      .                       ExpnKind::Root,
      .                       DUMMY_SP,
      .                       edition,
      .                       Some(CRATE_DEF_ID.to_def_id()),
      .                       None,
      .                   );
      .           
     50 ( 0.00%)          HygieneData {
      .                       local_expn_data: IndexVec::from_elem_n(Some(root_data), 1),
      .                       local_expn_hashes: IndexVec::from_elem_n(ExpnHash(Fingerprint::ZERO), 1),
      .                       foreign_expn_data: FxHashMap::default(),
      .                       foreign_expn_hashes: FxHashMap::default(),
      .                       expn_hash_to_expn_id: std::iter::once((ExpnHash(Fingerprint::ZERO), ExpnId::root()))
      .                           .collect(),
      8 ( 0.00%)              syntax_context_data: vec![SyntaxContextData {
      .                           outer_expn: ExpnId::root(),
      .                           outer_transparency: Transparency::Opaque,
      .                           parent: SyntaxContext(0),
      .                           opaque: SyntaxContext(0),
      .                           opaque_and_semitransparent: SyntaxContext(0),
      .                           dollar_crate_name: kw::DollarCrate,
      .                       }],
      .                       syntax_context_map: FxHashMap::default(),
      .                       expn_data_disambiguators: FxHashMap::default(),
      .                   }
     10 ( 0.00%)      }
      .           
      9 ( 0.00%)      pub fn with<T, F: FnOnce(&mut HygieneData) -> T>(f: F) -> T {
 15,940 ( 0.01%)          with_session_globals(|session_globals| f(&mut *session_globals.hygiene_data.borrow_mut()))
      9 ( 0.00%)      }
      .           
      .               #[inline]
      .               fn local_expn_hash(&self, expn_id: LocalExpnId) -> ExpnHash {
      .                   self.local_expn_hashes[expn_id]
      .               }
      .           
      .               #[inline]
      .               fn expn_hash(&self, expn_id: ExpnId) -> ExpnHash {
      .                   match expn_id.as_local() {
      .                       Some(expn_id) => self.local_expn_hashes[expn_id],
      .                       None => self.foreign_expn_hashes[&expn_id],
      .                   }
      .               }
      .           
    836 ( 0.00%)      fn local_expn_data(&self, expn_id: LocalExpnId) -> &ExpnData {
      .                   self.local_expn_data[expn_id].as_ref().expect("no expansion data for an expansion ID")
    836 ( 0.00%)      }
      .           
  5,657 ( 0.00%)      fn expn_data(&self, expn_id: ExpnId) -> &ExpnData {
 16,971 ( 0.01%)          if let Some(expn_id) = expn_id.as_local() {
      .                       self.local_expn_data[expn_id].as_ref().expect("no expansion data for an expansion ID")
      .                   } else {
      .                       &self.foreign_expn_data[&expn_id]
      .                   }
 11,314 ( 0.00%)      }
      .           
      .               fn is_descendant_of(&self, mut expn_id: ExpnId, ancestor: ExpnId) -> bool {
      .                   // a couple "fast path" cases to avoid traversing parents in the loop below
  4,484 ( 0.00%)          if ancestor == ExpnId::root() {
      .                       return true;
      .                   }
    943 ( 0.00%)          if expn_id.krate != ancestor.krate {
      .                       return false;
      .                   }
      .                   loop {
    943 ( 0.00%)              if expn_id == ancestor {
      .                           return true;
      .                       }
    943 ( 0.00%)              if expn_id == ExpnId::root() {
      .                           return false;
      .                       }
      .                       expn_id = self.expn_data(expn_id).parent;
      .                   }
    455 ( 0.00%)      }
      .           
  5,096 ( 0.00%)      fn normalize_to_macros_2_0(&self, ctxt: SyntaxContext) -> SyntaxContext {
 39,832 ( 0.02%)          self.syntax_context_data[ctxt.0 as usize].opaque
  5,096 ( 0.00%)      }
      .           
  2,374 ( 0.00%)      fn normalize_to_macro_rules(&self, ctxt: SyntaxContext) -> SyntaxContext {
  7,298 ( 0.00%)          self.syntax_context_data[ctxt.0 as usize].opaque_and_semitransparent
  2,374 ( 0.00%)      }
      .           
  3,112 ( 0.00%)      fn outer_expn(&self, ctxt: SyntaxContext) -> ExpnId {
 48,006 ( 0.02%)          self.syntax_context_data[ctxt.0 as usize].outer_expn
  3,112 ( 0.00%)      }
      .           
 17,530 ( 0.01%)      fn outer_mark(&self, ctxt: SyntaxContext) -> (ExpnId, Transparency) {
  9,217 ( 0.00%)          let data = &self.syntax_context_data[ctxt.0 as usize];
 40,607 ( 0.02%)          (data.outer_expn, data.outer_transparency)
 26,747 ( 0.01%)      }
      .           
      .               fn parent_ctxt(&self, ctxt: SyntaxContext) -> SyntaxContext {
  1,883 ( 0.00%)          self.syntax_context_data[ctxt.0 as usize].parent
      .               }
      .           
      .               fn remove_mark(&self, ctxt: &mut SyntaxContext) -> (ExpnId, Transparency) {
    455 ( 0.00%)          let outer_mark = self.outer_mark(*ctxt);
  1,919 ( 0.00%)          *ctxt = self.parent_ctxt(*ctxt);
      .                   outer_mark
      .               }
      .           
  3,648 ( 0.00%)      fn marks(&self, mut ctxt: SyntaxContext) -> Vec<(ExpnId, Transparency)> {
      .                   let mut marks = Vec::new();
    908 ( 0.00%)          while ctxt != SyntaxContext::root() {
      .                       debug!("marks: getting parent of {:?}", ctxt);
      .                       marks.push(self.outer_mark(ctxt));
      .                       ctxt = self.parent_ctxt(ctxt);
      .                   }
      .                   marks.reverse();
      .                   marks
  4,104 ( 0.00%)      }
      .           
      .               fn walk_chain(&self, mut span: Span, to: SyntaxContext) -> Span {
      .                   debug!("walk_chain({:?}, {:?})", span, to);
      .                   debug!("walk_chain: span ctxt = {:?}", span.ctxt());
      .                   while span.from_expansion() && span.ctxt() != to {
      .                       let outer_expn = self.outer_expn(span.ctxt());
      .                       debug!("walk_chain({:?}): outer_expn={:?}", span, outer_expn);
      .                       let expn_data = self.expn_data(outer_expn);
      .                       debug!("walk_chain({:?}): expn_data={:?}", span, expn_data);
      .                       span = expn_data.call_site;
      .                   }
      .                   span
      .               }
      .           
 25,660 ( 0.01%)      fn adjust(&self, ctxt: &mut SyntaxContext, expn_id: ExpnId) -> Option<ExpnId> {
      .                   let mut scope = None;
  7,698 ( 0.00%)          while !self.is_descendant_of(expn_id, self.outer_expn(*ctxt)) {
      .                       scope = Some(self.remove_mark(ctxt).0);
      .                   }
      .                   scope
 25,660 ( 0.01%)      }
      .           
  4,194 ( 0.00%)      fn apply_mark(
      .                   &mut self,
      .                   ctxt: SyntaxContext,
      .                   expn_id: ExpnId,
      .                   transparency: Transparency,
      .               ) -> SyntaxContext {
    932 ( 0.00%)          assert_ne!(expn_id, ExpnId::root());
    466 ( 0.00%)          if transparency == Transparency::Opaque {
  2,778 ( 0.00%)              return self.apply_mark_internal(ctxt, expn_id, transparency);
      .                   }
      .           
     21 ( 0.00%)          let call_site_ctxt = self.expn_data(expn_id).call_site.ctxt();
      3 ( 0.00%)          let mut call_site_ctxt = if transparency == Transparency::SemiTransparent {
      .                       self.normalize_to_macros_2_0(call_site_ctxt)
      .                   } else {
      .                       self.normalize_to_macro_rules(call_site_ctxt)
      .                   };
      .           
      3 ( 0.00%)          if call_site_ctxt == SyntaxContext::root() {
      3 ( 0.00%)              return self.apply_mark_internal(ctxt, expn_id, transparency);
      .                   }
      .           
      .                   // Otherwise, `expn_id` is a macros 1.0 definition and the call site is in a
      .                   // macros 2.0 expansion, i.e., a macros 1.0 invocation is in a macros 2.0 definition.
      .                   //
      .                   // In this case, the tokens from the macros 1.0 definition inherit the hygiene
      .                   // at their invocation. That is, we pretend that the macros 1.0 definition
      .                   // was defined at its invocation (i.e., inside the macros 2.0 definition)
      .                   // so that the macros 2.0 definition remains hygienic.
      .                   //
      .                   // See the example at `test/ui/hygiene/legacy_interaction.rs`.
     18 ( 0.00%)          for (expn_id, transparency) in self.marks(ctxt) {
      .                       call_site_ctxt = self.apply_mark_internal(call_site_ctxt, expn_id, transparency);
      .                   }
      8 ( 0.00%)          self.apply_mark_internal(call_site_ctxt, expn_id, transparency)
      .               }
      .           
  3,728 ( 0.00%)      fn apply_mark_internal(
      .                   &mut self,
      .                   ctxt: SyntaxContext,
      .                   expn_id: ExpnId,
      .                   transparency: Transparency,
      .               ) -> SyntaxContext {
      .                   let syntax_context_data = &mut self.syntax_context_data;
  2,796 ( 0.00%)          let mut opaque = syntax_context_data[ctxt.0 as usize].opaque;
      .                   let mut opaque_and_semitransparent =
    466 ( 0.00%)              syntax_context_data[ctxt.0 as usize].opaque_and_semitransparent;
      .           
    466 ( 0.00%)          if transparency >= Transparency::Opaque {
      .                       let parent = opaque;
  4,630 ( 0.00%)              opaque = *self
      .                           .syntax_context_map
      .                           .entry((parent, expn_id, transparency))
      .                           .or_insert_with(|| {
     67 ( 0.00%)                      let new_opaque = SyntaxContext(syntax_context_data.len() as u32);
      .                               syntax_context_data.push(SyntaxContextData {
      .                                   outer_expn: expn_id,
      .                                   outer_transparency: transparency,
      .                                   parent,
      .                                   opaque: new_opaque,
      .                                   opaque_and_semitransparent: new_opaque,
      .                                   dollar_crate_name: kw::DollarCrate,
      .                               });
      .                               new_opaque
      .                           });
      .                   }
      .           
      6 ( 0.00%)          if transparency >= Transparency::SemiTransparent {
      .                       let parent = opaque_and_semitransparent;
  1,389 ( 0.00%)              opaque_and_semitransparent = *self
      .                           .syntax_context_map
      .                           .entry((parent, expn_id, transparency))
      .                           .or_insert_with(|| {
      .                               let new_opaque_and_semitransparent =
      .                                   SyntaxContext(syntax_context_data.len() as u32);
      .                               syntax_context_data.push(SyntaxContextData {
      .                                   outer_expn: expn_id,
      .                                   outer_transparency: transparency,
-- line 569 ----------------------------------------
-- line 572 ----------------------------------------
      .                                   opaque_and_semitransparent: new_opaque_and_semitransparent,
      .                                   dollar_crate_name: kw::DollarCrate,
      .                               });
      .                               new_opaque_and_semitransparent
      .                           });
      .                   }
      .           
      .                   let parent = ctxt;
    932 ( 0.00%)          *self.syntax_context_map.entry((parent, expn_id, transparency)).or_insert_with(|| {
      .                       let new_opaque_and_semitransparent_and_transparent =
      6 ( 0.00%)                  SyntaxContext(syntax_context_data.len() as u32);
      .                       syntax_context_data.push(SyntaxContextData {
      .                           outer_expn: expn_id,
      .                           outer_transparency: transparency,
      .                           parent,
      .                           opaque,
      .                           opaque_and_semitransparent,
      .                           dollar_crate_name: kw::DollarCrate,
      .                       });
      .                       new_opaque_and_semitransparent_and_transparent
      .                   })
  3,728 ( 0.00%)      }
      .           }
      .           
      .           pub fn clear_syntax_context_map() {
      5 ( 0.00%)      HygieneData::with(|data| data.syntax_context_map = FxHashMap::default());
      .           }
      .           
      .           pub fn walk_chain(span: Span, to: SyntaxContext) -> Span {
      .               HygieneData::with(|data| data.walk_chain(span, to))
      .           }
      .           
    468 ( 0.00%)  pub fn update_dollar_crate_names(mut get_name: impl FnMut(SyntaxContext) -> Symbol) {
      .               // The new contexts that need updating are at the end of the list and have `$crate` as a name.
      .               let (len, to_update) = HygieneData::with(|data| {
      .                   (
     78 ( 0.00%)              data.syntax_context_data.len(),
      .                       data.syntax_context_data
      .                           .iter()
      .                           .rev()
      .                           .take_while(|scdata| scdata.dollar_crate_name == kw::DollarCrate)
      .                           .count(),
      .                   )
      .               });
      .               // The callback must be called from outside of the `HygieneData` lock,
      .               // since it will try to acquire it too.
    234 ( 0.00%)      let range_to_update = len - to_update..len;
      .               let names: Vec<_> =
      .                   range_to_update.clone().map(|idx| get_name(SyntaxContext::from_u32(idx as u32))).collect();
      .               HygieneData::with(|data| {
    156 ( 0.00%)          range_to_update.zip(names).for_each(|(idx, name)| {
     71 ( 0.00%)              data.syntax_context_data[idx].dollar_crate_name = name;
      .                   })
      .               })
    468 ( 0.00%)  }
      .           
      .           pub fn debug_hygiene_data(verbose: bool) -> String {
      .               HygieneData::with(|data| {
      .                   if verbose {
      .                       format!("{:#?}", data)
      .                   } else {
      .                       let mut s = String::from("");
      .                       s.push_str("Expansions:");
-- line 634 ----------------------------------------
-- line 675 ----------------------------------------
      .           
      .               #[inline]
      .               crate fn from_u32(raw: u32) -> SyntaxContext {
      .                   SyntaxContext(raw)
      .               }
      .           
      .               /// Extend a syntax context with a given expansion and transparency.
      .               crate fn apply_mark(self, expn_id: ExpnId, transparency: Transparency) -> SyntaxContext {
    928 ( 0.00%)          HygieneData::with(|data| data.apply_mark(self, expn_id, transparency))
      .               }
      .           
      .               /// Pulls a single mark off of the syntax context. This effectively moves the
      .               /// context up one macro definition level. That is, if we have a nested macro
      .               /// definition as follows:
      .               ///
      .               /// ```rust
      .               /// macro_rules! f {
-- line 691 ----------------------------------------
-- line 694 ----------------------------------------
      .               ///    }
      .               /// }
      .               /// ```
      .               ///
      .               /// and we have a SyntaxContext that is referring to something declared by an invocation
      .               /// of g (call it g1), calling remove_mark will result in the SyntaxContext for the
      .               /// invocation of f that created g1.
      .               /// Returns the mark that was removed.
    455 ( 0.00%)      pub fn remove_mark(&mut self) -> ExpnId {
      .                   HygieneData::with(|data| data.remove_mark(self).0)
      .               }
      .           
  1,816 ( 0.00%)      pub fn marks(self) -> Vec<(ExpnId, Transparency)> {
    908 ( 0.00%)          HygieneData::with(|data| data.marks(self))
  1,816 ( 0.00%)      }
      .           
      .               /// Adjust this context for resolution in a scope created by the given expansion.
      .               /// For example, consider the following three resolutions of `f`:
      .               ///
      .               /// ```rust
      .               /// mod foo { pub fn f() {} } // `f`'s `SyntaxContext` is empty.
      .               /// m!(f);
      .               /// macro m($f:ident) {
-- line 716 ----------------------------------------
-- line 726 ----------------------------------------
      .               ///     //| and it resolves to `::bar::f`.
      .               ///     bar::$f(); // `f`'s `SyntaxContext` is empty.
      .               ///     //^ Since `mod bar` is not outside this expansion, `adjust` does not change `$f`,
      .               ///     //| and it resolves to `::bar::$f`.
      .               /// }
      .               /// ```
      .               /// This returns the expansion whose definition scope we use to privacy check the resolution,
      .               /// or `None` if we privacy check as usual (i.e., not w.r.t. a macro definition scope).
  3,900 ( 0.00%)      pub fn adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
  1,950 ( 0.00%)          HygieneData::with(|data| data.adjust(self, expn_id))
  1,950 ( 0.00%)      }
      .           
      .               /// Like `SyntaxContext::adjust`, but also normalizes `self` to macros 2.0.
  5,864 ( 0.00%)      pub fn normalize_to_macros_2_0_and_adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
      .                   HygieneData::with(|data| {
  2,932 ( 0.00%)              *self = data.normalize_to_macros_2_0(*self);
  4,398 ( 0.00%)              data.adjust(self, expn_id)
      .                   })
  2,932 ( 0.00%)      }
      .           
      .               /// Adjust this context for resolution in a scope created by the given expansion
      .               /// via a glob import with the given `SyntaxContext`.
      .               /// For example:
      .               ///
      .               /// ```rust
      .               /// m!(f);
      .               /// macro m($i:ident) {
-- line 752 ----------------------------------------
-- line 811 ----------------------------------------
      .                       let scope = marks.last().map(|mark| mark.0);
      .                       while let Some((expn_id, transparency)) = marks.pop() {
      .                           *self = data.apply_mark(*self, expn_id, transparency);
      .                       }
      .                       Some(scope)
      .                   })
      .               }
      .           
    750 ( 0.00%)      pub fn hygienic_eq(self, other: SyntaxContext, expn_id: ExpnId) -> bool {
      .                   HygieneData::with(|data| {
    125 ( 0.00%)              let mut self_normalized = data.normalize_to_macros_2_0(self);
    625 ( 0.00%)              data.adjust(&mut self_normalized, expn_id);
    125 ( 0.00%)              self_normalized == data.normalize_to_macros_2_0(other)
      .                   })
    250 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn normalize_to_macros_2_0(self) -> SyntaxContext {
  2,548 ( 0.00%)          HygieneData::with(|data| data.normalize_to_macros_2_0(self))
      .               }
      .           
      .               #[inline]
      .               pub fn normalize_to_macro_rules(self) -> SyntaxContext {
  1,187 ( 0.00%)          HygieneData::with(|data| data.normalize_to_macro_rules(self))
      .               }
      .           
      .               #[inline]
      .               pub fn outer_expn(self) -> ExpnId {
      .                   HygieneData::with(|data| data.outer_expn(self))
      .               }
      .           
      .               /// `ctxt.outer_expn_data()` is equivalent to but faster than
      .               /// `ctxt.outer_expn().expn_data()`.
      .               #[inline]
      .               pub fn outer_expn_data(self) -> ExpnData {
  8,534 ( 0.00%)          HygieneData::with(|data| data.expn_data(data.outer_expn(self)).clone())
      .               }
      .           
      .               #[inline]
      .               pub fn outer_mark(self) -> (ExpnId, Transparency) {
 14,867 ( 0.01%)          HygieneData::with(|data| data.outer_mark(self))
      .               }
      .           
      .               pub fn dollar_crate_name(self) -> Symbol {
      .                   HygieneData::with(|data| data.syntax_context_data[self.0 as usize].dollar_crate_name)
      .               }
      .           
  2,722 ( 0.00%)      pub fn edition(self) -> Edition {
  6,903 ( 0.00%)          HygieneData::with(|data| data.expn_data(data.outer_expn(self)).edition)
  2,722 ( 0.00%)      }
      .           }
      .           
      .           impl fmt::Debug for SyntaxContext {
      .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      .                   write!(f, "#{}", self.0)
      .               }
      .           }
      .           
-- line 868 ----------------------------------------
-- line 877 ----------------------------------------
      .               }
      .           
      .               pub fn fresh_expansion_with_transparency(
      .                   self,
      .                   expn_data: ExpnData,
      .                   transparency: Transparency,
      .                   ctx: impl HashStableContext,
      .               ) -> Span {
     32 ( 0.00%)          let expn_id = LocalExpnId::fresh(expn_data, ctx).to_expn_id();
      .                   HygieneData::with(|data| {
     12 ( 0.00%)              self.with_ctxt(data.apply_mark(SyntaxContext::root(), expn_id, transparency))
      .                   })
      .               }
      .           
      .               /// Reuses the span but adds information like the kind of the desugaring and features that are
      .               /// allowed inside this span.
     22 ( 0.00%)      pub fn mark_with_reason(
      .                   self,
      .                   allow_internal_unstable: Option<Lrc<[Symbol]>>,
      .                   reason: DesugaringKind,
      .                   edition: Edition,
      .                   ctx: impl HashStableContext,
      .               ) -> Span {
     32 ( 0.00%)          let expn_data = ExpnData {
      4 ( 0.00%)              allow_internal_unstable,
     18 ( 0.00%)              ..ExpnData::default(ExpnKind::Desugaring(reason), self, edition, None, None)
      .                   };
      .                   self.fresh_expansion(expn_data, ctx)
     16 ( 0.00%)      }
      .           }
      .           
      .           /// A subset of properties from both macro definition and macro call available through global data.
      .           /// Avoid using this if you have access to the original definition or call structures.
 49,043 ( 0.02%)  #[derive(Clone, Debug, Encodable, Decodable, HashStable_Generic)]
      .           pub struct ExpnData {
      .               // --- The part unique to each expansion.
      .               /// The kind of this expansion - macro or compiler desugaring.
      .               pub kind: ExpnKind,
      .               /// The expansion that produced this expansion.
  7,542 ( 0.00%)      pub parent: ExpnId,
      .               /// The location of the actual macro invocation or syntax sugar , e.g.
      .               /// `let x = foo!();` or `if let Some(y) = x {}`
      .               ///
      .               /// This may recursively refer to other macro invocations, e.g., if
      .               /// `foo!()` invoked `bar!()` internally, and there was an
      .               /// expression inside `bar!`; the call_site of the expression in
      .               /// the expansion would point to the `bar!` invocation; that
      .               /// call_site span would have its own ExpnData, with the call_site
-- line 924 ----------------------------------------
-- line 929 ----------------------------------------
      .               /// that have identical `ExpnData`s. This violates the contract of `HashStable`
      .               /// - the two `ExpnId`s are not equal, but their `Fingerprint`s are equal
      .               /// (since the numerical `ExpnId` value is not considered by the `HashStable`
      .               /// implementation).
      .               ///
      .               /// The `disambiguator` field is set by `update_disambiguator` when two distinct
      .               /// `ExpnId`s would end up with the same `Fingerprint`. Since `ExpnData` includes
      .               /// a `krate` field, this value only needs to be unique within a single crate.
  3,771 ( 0.00%)      disambiguator: u32,
      .           
      .               // --- The part specific to the macro/desugaring definition.
      .               // --- It may be reasonable to share this part between expansions with the same definition,
      .               // --- but such sharing is known to bring some minor inconveniences without also bringing
      .               // --- noticeable perf improvements (PR #62898).
      .               /// The span of the macro definition (possibly dummy).
      .               /// This span serves only informational purpose and is not used for resolution.
      .               pub def_site: Span,
      .               /// List of `#[unstable]`/feature-gated features that the macro is allowed to use
      .               /// internally without forcing the whole crate to opt-in
      .               /// to them.
     32 ( 0.00%)      pub allow_internal_unstable: Option<Lrc<[Symbol]>>,
      .               /// Whether the macro is allowed to use `unsafe` internally
      .               /// even if the user crate has `#![forbid(unsafe_code)]`.
      .               pub allow_internal_unsafe: bool,
      .               /// Enables the macro helper hack (`ident!(...)` -> `$crate::ident!(...)`)
      .               /// for a given macro.
      .               pub local_inner_macros: bool,
      .               /// Edition of the crate in which the macro is defined.
  3,771 ( 0.00%)      pub edition: Edition,
      .               /// The `DefId` of the macro being invoked,
      .               /// if this `ExpnData` corresponds to a macro invocation
  3,771 ( 0.00%)      pub macro_def_id: Option<DefId>,
      .               /// The normal module (`mod`) in which the expanded macro was defined.
      .               pub parent_module: Option<DefId>,
      .           }
      .           
      .           impl !PartialEq for ExpnData {}
      .           impl !Hash for ExpnData {}
      .           
      .           impl ExpnData {
  1,001 ( 0.00%)      pub fn new(
      .                   kind: ExpnKind,
      .                   parent: ExpnId,
      .                   call_site: Span,
      .                   def_site: Span,
      .                   allow_internal_unstable: Option<Lrc<[Symbol]>>,
      .                   allow_internal_unsafe: bool,
      .                   local_inner_macros: bool,
      .                   edition: Edition,
      .                   macro_def_id: Option<DefId>,
      .                   parent_module: Option<DefId>,
      .               ) -> ExpnData {
  1,078 ( 0.00%)          ExpnData {
      .                       kind,
      .                       parent,
      .                       call_site,
      .                       def_site,
      .                       allow_internal_unstable,
      .                       allow_internal_unsafe,
      .                       local_inner_macros,
      .                       edition,
      .                       macro_def_id,
      .                       parent_module,
      .                       disambiguator: 0,
      .                   }
    385 ( 0.00%)      }
      .           
      .               /// Constructs expansion data with default properties.
      6 ( 0.00%)      pub fn default(
      .                   kind: ExpnKind,
      .                   call_site: Span,
      .                   edition: Edition,
      .                   macro_def_id: Option<DefId>,
      .                   parent_module: Option<DefId>,
      .               ) -> ExpnData {
     24 ( 0.00%)          ExpnData {
      .                       kind,
      .                       parent: ExpnId::root(),
      .                       call_site,
      .                       def_site: DUMMY_SP,
      .                       allow_internal_unstable: None,
      .                       allow_internal_unsafe: false,
      .                       local_inner_macros: false,
      .                       edition,
      .                       macro_def_id,
      .                       parent_module,
      .                       disambiguator: 0,
      .                   }
      2 ( 0.00%)      }
      .           
      6 ( 0.00%)      pub fn allow_unstable(
      .                   kind: ExpnKind,
      .                   call_site: Span,
      .                   edition: Edition,
      .                   allow_internal_unstable: Lrc<[Symbol]>,
      .                   macro_def_id: Option<DefId>,
      .                   parent_module: Option<DefId>,
      .               ) -> ExpnData {
     13 ( 0.00%)          ExpnData {
      .                       allow_internal_unstable: Some(allow_internal_unstable),
      .                       ..ExpnData::default(kind, call_site, edition, macro_def_id, parent_module)
      .                   }
      2 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn is_root(&self) -> bool {
      .                   matches!(self.kind, ExpnKind::Root)
      .               }
      .           
      .               #[inline]
    729 ( 0.00%)      fn hash_expn(&self, ctx: &mut impl HashStableContext) -> u64 {
      .                   let mut hasher = StableHasher::new();
      .                   self.hash_stable(ctx, &mut hasher);
      .                   hasher.finish()
    648 ( 0.00%)      }
      .           }
      .           
      .           /// Expansion kind.
 54,005 ( 0.02%)  #[derive(Clone, Debug, PartialEq, Encodable, Decodable, HashStable_Generic)]
      .           pub enum ExpnKind {
      .               /// No expansion, aka root expansion. Only `ExpnId::root()` has this kind.
      .               Root,
      .               /// Expansion produced by a macro.
  3,780 ( 0.00%)      Macro(MacroKind, Symbol),
      .               /// Transform done by the compiler on the AST.
     55 ( 0.00%)      AstPass(AstPass),
      .               /// Desugaring done by the compiler during HIR lowering.
      8 ( 0.00%)      Desugaring(DesugaringKind),
      .               /// MIR inlining
      .               Inlined,
      .           }
      .           
      .           impl ExpnKind {
      .               pub fn descr(&self) -> String {
      .                   match *self {
      .                       ExpnKind::Root => kw::PathRoot.to_string(),
-- line 1064 ----------------------------------------
-- line 1070 ----------------------------------------
      .                       ExpnKind::AstPass(kind) => kind.descr().to_string(),
      .                       ExpnKind::Desugaring(kind) => format!("desugaring of {}", kind.descr()),
      .                       ExpnKind::Inlined => "inlined source".to_string(),
      .                   }
      .               }
      .           }
      .           
      .           /// The kind of macro invocation or definition.
  3,281 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Debug)]
      .           #[derive(HashStable_Generic)]
      .           pub enum MacroKind {
      .               /// A bang macro `foo!()`.
      .               Bang,
      .               /// An attribute macro `#[foo]`.
      .               Attr,
      .               /// A derive macro `#[derive(Foo)]`
      .               Derive,
-- line 1086 ----------------------------------------
-- line 1106 ----------------------------------------
      .                   match self {
      .                       MacroKind::Attr => "an",
      .                       _ => "a",
      .                   }
      .               }
      .           }
      .           
      .           /// The kind of AST transform.
     10 ( 0.00%)  #[derive(Clone, Copy, Debug, PartialEq, Encodable, Decodable, HashStable_Generic)]
      .           pub enum AstPass {
      .               StdImports,
      .               TestHarness,
      .               ProcMacroHarness,
      .           }
      .           
      .           impl AstPass {
      .               pub fn descr(self) -> &'static str {
-- line 1122 ----------------------------------------
-- line 1161 ----------------------------------------
      .                       DesugaringKind::OpaqueTy => "`impl Trait`",
      .                       DesugaringKind::ForLoop => "`for` loop",
      .                       DesugaringKind::LetElse => "`let...else`",
      .                       DesugaringKind::WhileLoop => "`while` loop",
      .                   }
      .               }
      .           }
      .           
      7 ( 0.00%)  #[derive(Default)]
      .           pub struct HygieneEncodeContext {
      .               /// All `SyntaxContexts` for which we have written `SyntaxContextData` into crate metadata.
      .               /// This is `None` after we finish encoding `SyntaxContexts`, to ensure
      .               /// that we don't accidentally try to encode any more `SyntaxContexts`
      .               serialized_ctxts: Lock<FxHashSet<SyntaxContext>>,
      .               /// The `SyntaxContexts` that we have serialized (e.g. as a result of encoding `Spans`)
      .               /// in the most recent 'round' of serializnig. Serializing `SyntaxContextData`
      .               /// may cause us to serialize more `SyntaxContext`s, so serialize in a loop
-- line 1177 ----------------------------------------
-- line 1180 ----------------------------------------
      .           
      .               serialized_expns: Lock<FxHashSet<ExpnId>>,
      .           
      .               latest_expns: Lock<FxHashSet<ExpnId>>,
      .           }
      .           
      .           impl HygieneEncodeContext {
      .               /// Record the fact that we need to serialize the corresponding `ExpnData`.
  2,160 ( 0.00%)      pub fn schedule_expn_data_for_encoding(&self, expn: ExpnId) {
    864 ( 0.00%)          if !self.serialized_expns.lock().contains(&expn) {
    784 ( 0.00%)              self.latest_expns.lock().insert(expn);
      .                   }
  1,728 ( 0.00%)      }
      .           
      8 ( 0.00%)      pub fn encode<T, R>(
      .                   &self,
      .                   encoder: &mut T,
      .                   mut encode_ctxt: impl FnMut(&mut T, u32, &SyntaxContextData) -> Result<(), R>,
      .                   mut encode_expn: impl FnMut(&mut T, ExpnId, &ExpnData, ExpnHash) -> Result<(), R>,
      .               ) -> Result<(), R> {
      .                   // When we serialize a `SyntaxContextData`, we may end up serializing
      .                   // a `SyntaxContext` that we haven't seen before
      5 ( 0.00%)          while !self.latest_ctxts.lock().is_empty() || !self.latest_expns.lock().is_empty() {
      .                       debug!(
      .                           "encode_hygiene: Serializing a round of {:?} SyntaxContextDatas: {:?}",
      .                           self.latest_ctxts.lock().len(),
      .                           self.latest_ctxts
      .                       );
      .           
      .                       // Consume the current round of SyntaxContexts.
      .                       // Drop the lock() temporary early
      .                       let latest_ctxts = { std::mem::take(&mut *self.latest_ctxts.lock()) };
      .           
      .                       // It's fine to iterate over a HashMap, because the serialization
      .                       // of the table that we insert data into doesn't depend on insertion
      .                       // order
      .                       for_all_ctxts_in(latest_ctxts.into_iter(), |index, ctxt, data| {
    136 ( 0.00%)                  if self.serialized_ctxts.lock().insert(ctxt) {
      .                               encode_ctxt(encoder, index, data)?;
      .                           }
      .                           Ok(())
      .                       })?;
      .           
      .                       let latest_expns = { std::mem::take(&mut *self.latest_expns.lock()) };
      .           
      .                       for_all_expns_in(latest_expns.into_iter(), |expn, data, hash| {
    360 ( 0.00%)                  if self.serialized_expns.lock().insert(expn) {
      .                               encode_expn(encoder, expn, data, hash)?;
      .                           }
      .                           Ok(())
      .                       })?;
      .                   }
      .                   debug!("encode_hygiene: Done serializing SyntaxContextData");
      .                   Ok(())
      8 ( 0.00%)      }
      .           }
      .           
      .           #[derive(Default)]
      .           /// Additional information used to assist in decoding hygiene data
      .           pub struct HygieneDecodeContext {
      .               // Maps serialized `SyntaxContext` ids to a `SyntaxContext` in the current
      .               // global `HygieneData`. When we deserialize a `SyntaxContext`, we need to create
      .               // a new id in the global `HygieneData`. This map tracks the ID we end up picking,
-- line 1242 ----------------------------------------
-- line 1257 ----------------------------------------
      .           
      .                   let _old_id = hygiene_data.expn_hash_to_expn_id.insert(hash, expn_id);
      .                   debug_assert!(_old_id.is_none());
      .                   expn_id
      .               })
      .           }
      .           
      .           /// Register an expansion which has been decoded from the metadata of a foreign crate.
     48 ( 0.00%)  pub fn register_expn_id(
      .               krate: CrateNum,
      .               local_id: ExpnIndex,
      .               data: ExpnData,
      .               hash: ExpnHash,
      .           ) -> ExpnId {
      .               debug_assert!(data.parent == ExpnId::root() || krate == data.parent.krate);
     48 ( 0.00%)      let expn_id = ExpnId { krate, local_id };
      .               HygieneData::with(|hygiene_data| {
     48 ( 0.00%)          let _old_data = hygiene_data.foreign_expn_data.insert(expn_id, data);
      .                   debug_assert!(_old_data.is_none());
     80 ( 0.00%)          let _old_hash = hygiene_data.foreign_expn_hashes.insert(expn_id, hash);
      .                   debug_assert!(_old_hash.is_none());
     64 ( 0.00%)          let _old_id = hygiene_data.expn_hash_to_expn_id.insert(hash, expn_id);
      .                   debug_assert!(_old_id.is_none());
      .               });
      .               expn_id
     64 ( 0.00%)  }
      .           
      .           /// Decode an expansion from the metadata of a foreign crate.
      .           pub fn decode_expn_id(
      .               krate: CrateNum,
      .               index: u32,
      .               decode_data: impl FnOnce(ExpnId) -> (ExpnData, ExpnHash),
      .           ) -> ExpnId {
    430 ( 0.00%)      if index == 0 {
      .                   debug!("decode_expn_id: deserialized root");
    346 ( 0.00%)          return ExpnId::root();
      .               }
      .           
      .               let index = ExpnIndex::from_u32(index);
      .           
      .               // This function is used to decode metadata, so it cannot decode information about LOCAL_CRATE.
      .               debug_assert_ne!(krate, LOCAL_CRATE);
     84 ( 0.00%)      let expn_id = ExpnId { krate, local_id: index };
      .           
      .               // Fast path if the expansion has already been decoded.
     84 ( 0.00%)      if HygieneData::with(|hygiene_data| hygiene_data.foreign_expn_data.contains_key(&expn_id)) {
     78 ( 0.00%)          return expn_id;
      .               }
      .           
      .               // Don't decode the data inside `HygieneData::with`, since we need to recursively decode
      .               // other ExpnIds
    112 ( 0.00%)      let (expn_data, hash) = decode_data(expn_id);
      .           
    144 ( 0.00%)      register_expn_id(krate, index, expn_data, hash)
      .           }
      .           
      .           // Decodes `SyntaxContext`, using the provided `HygieneDecodeContext`
      .           // to track which `SyntaxContext`s we have already decoded.
      .           // The provided closure will be invoked to deserialize a `SyntaxContextData`
      .           // if we haven't already seen the id of the `SyntaxContext` we are deserializing.
      .           pub fn decode_syntax_context<D: Decoder, F: FnOnce(&mut D, u32) -> SyntaxContextData>(
      .               d: &mut D,
      .               context: &HygieneDecodeContext,
      .               decode_data: F,
      .           ) -> SyntaxContext {
  5,761 ( 0.00%)      let raw_id: u32 = Decodable::decode(d);
 11,522 ( 0.00%)      if raw_id == 0 {
      .                   debug!("decode_syntax_context: deserialized root");
      .                   // The root is special
      .                   return SyntaxContext::root();
      .               }
      .           
      .               let outer_ctxts = &context.remapped_ctxts;
      .           
      .               // Ensure that the lock() temporary is dropped early
      .               {
     75 ( 0.00%)          if let Some(ctxt) = outer_ctxts.lock().get(raw_id as usize).copied().flatten() {
      .                       return ctxt;
      .                   }
      .               }
      .           
      .               // Allocate and store SyntaxContext id *before* calling the decoder function,
      .               // as the SyntaxContextData may reference itself.
      9 ( 0.00%)      let new_ctxt = HygieneData::with(|hygiene_data| {
      9 ( 0.00%)          let new_ctxt = SyntaxContext(hygiene_data.syntax_context_data.len() as u32);
      .                   // Push a dummy SyntaxContextData to ensure that nobody else can get the
      .                   // same ID as us. This will be overwritten after call `decode_Data`
      .                   hygiene_data.syntax_context_data.push(SyntaxContextData {
      9 ( 0.00%)              outer_expn: ExpnId::root(),
      .                       outer_transparency: Transparency::Transparent,
      .                       parent: SyntaxContext::root(),
      .                       opaque: SyntaxContext::root(),
      .                       opaque_and_semitransparent: SyntaxContext::root(),
      .                       dollar_crate_name: kw::Empty,
      .                   });
      .                   let mut ctxts = outer_ctxts.lock();
      .                   let new_len = raw_id as usize + 1;
     27 ( 0.00%)          if ctxts.len() < new_len {
      .                       ctxts.resize(new_len, None);
      .                   }
     18 ( 0.00%)          ctxts[raw_id as usize] = Some(new_ctxt);
      .                   drop(ctxts);
      .                   new_ctxt
      .               });
      .           
      .               // Don't try to decode data while holding the lock, since we need to
      .               // be able to recursively decode a SyntaxContext
     18 ( 0.00%)      let mut ctxt_data = decode_data(d, raw_id);
      .               // Reset `dollar_crate_name` so that it will be updated by `update_dollar_crate_names`
      .               // We don't care what the encoding crate set this to - we want to resolve it
      .               // from the perspective of the current compilation session
     18 ( 0.00%)      ctxt_data.dollar_crate_name = kw::DollarCrate;
      .           
      .               // Overwrite the dummy data with our decoded SyntaxContextData
      .               HygieneData::with(|hygiene_data| {
      .                   let dummy = std::mem::replace(
      9 ( 0.00%)              &mut hygiene_data.syntax_context_data[new_ctxt.as_u32() as usize],
      .                       ctxt_data,
      .                   );
      .                   // Make sure nothing weird happening while `decode_data` was running
      9 ( 0.00%)          assert_eq!(dummy.dollar_crate_name, kw::Empty);
      .               });
      .           
     18 ( 0.00%)      new_ctxt
      .           }
      .           
      .           fn for_all_ctxts_in<E, F: FnMut(u32, SyntaxContext, &SyntaxContextData) -> Result<(), E>>(
      .               ctxts: impl Iterator<Item = SyntaxContext>,
      .               mut f: F,
      .           ) -> Result<(), E> {
      .               let all_data: Vec<_> = HygieneData::with(|data| {
    138 ( 0.00%)          ctxts.map(|ctxt| (ctxt, data.syntax_context_data[ctxt.0 as usize].clone())).collect()
      .               });
    612 ( 0.00%)      for (ctxt, data) in all_data.into_iter() {
      .                   f(ctxt.0, ctxt, &data)?;
      .               }
      .               Ok(())
      .           }
      .           
      .           fn for_all_expns_in<E>(
      .               expns: impl Iterator<Item = ExpnId>,
      .               mut f: impl FnMut(ExpnId, &ExpnData, ExpnHash) -> Result<(), E>,
      .           ) -> Result<(), E> {
      .               let all_data: Vec<_> = HygieneData::with(|data| {
  1,620 ( 0.00%)          expns.map(|expn| (expn, data.expn_data(expn).clone(), data.expn_hash(expn))).collect()
      .               });
  1,360 ( 0.00%)      for (expn, data, hash) in all_data.into_iter() {
      .                   f(expn, &data, hash)?;
      .               }
      .               Ok(())
      .           }
      .           
      .           impl<E: Encoder> Encodable<E> for LocalExpnId {
      .               fn encode(&self, e: &mut E) -> Result<(), E::Error> {
      .                   self.to_expn_id().encode(e)
-- line 1411 ----------------------------------------
-- line 1430 ----------------------------------------
      .               }
      .           }
      .           
      .           pub fn raw_encode_syntax_context<E: Encoder>(
      .               ctxt: SyntaxContext,
      .               context: &HygieneEncodeContext,
      .               e: &mut E,
      .           ) -> Result<(), E::Error> {
  4,634 ( 0.00%)      if !context.serialized_ctxts.lock().contains(&ctxt) {
  1,955 ( 0.00%)          context.latest_ctxts.lock().insert(ctxt);
      .               }
      .               ctxt.0.encode(e)
      .           }
      .           
      .           impl<E: Encoder> Encodable<E> for SyntaxContext {
      .               default fn encode(&self, _: &mut E) -> Result<(), E::Error> {
      .                   panic!("cannot encode `SyntaxContext` with `{}`", std::any::type_name::<E>());
      .               }
-- line 1447 ----------------------------------------
-- line 1457 ----------------------------------------
      .           /// such that the `Fingerprint` of the `ExpnData` does not collide with
      .           /// any other `ExpnIds`.
      .           ///
      .           /// This method is called only when an `ExpnData` is first associated
      .           /// with an `ExpnId` (when the `ExpnId` is initially constructed, or via
      .           /// `set_expn_data`). It is *not* called for foreign `ExpnId`s deserialized
      .           /// from another crate's metadata - since `ExpnHash` includes the stable crate id,
      .           /// collisions are only possible between `ExpnId`s within the same crate.
    702 ( 0.00%)  fn update_disambiguator(expn_data: &mut ExpnData, mut ctx: impl HashStableContext) -> ExpnHash {
      .               // This disambiguator should not have been set yet.
    160 ( 0.00%)      assert_eq!(
      .                   expn_data.disambiguator, 0,
      .                   "Already set disambiguator for ExpnData: {:?}",
      .                   expn_data
      .               );
    160 ( 0.00%)      assert_default_hashing_controls(&ctx, "ExpnData (disambiguator)");
    398 ( 0.00%)      let mut expn_hash = expn_data.hash_expn(&mut ctx);
      .           
      .               let disambiguator = HygieneData::with(|data| {
      .                   // If this is the first ExpnData with a given hash, then keep our
      .                   // disambiguator at 0 (the default u32 value)
      .                   let disambig = data.expn_data_disambiguators.entry(expn_hash).or_default();
     80 ( 0.00%)          let disambiguator = *disambig;
    320 ( 0.00%)          *disambig += 1;
      .                   disambiguator
      .               });
      .           
    160 ( 0.00%)      if disambiguator != 0 {
      .                   debug!("Set disambiguator for expn_data={:?} expn_hash={:?}", expn_data, expn_hash);
      .           
      3 ( 0.00%)          expn_data.disambiguator = disambiguator;
      1 ( 0.00%)          expn_hash = expn_data.hash_expn(&mut ctx);
      .           
      .                   // Verify that the new disambiguator makes the hash unique
      .                   #[cfg(debug_assertions)]
      .                   HygieneData::with(|data| {
      .                       assert_eq!(
      .                           data.expn_data_disambiguators.get(&expn_hash),
      .                           None,
      .                           "Hash collision after disambiguator update!",
      .                       );
      .                   });
      .               }
      .           
    160 ( 0.00%)      ExpnHash::new(ctx.def_path_hash(LOCAL_CRATE.as_def_id()).stable_crate_id(), expn_hash)
    702 ( 0.00%)  }
      .           
      .           impl<CTX: HashStableContext> HashStable<CTX> for SyntaxContext {
 66,104 ( 0.03%)      fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {
      .                   const TAG_EXPANSION: u8 = 0;
      .                   const TAG_NO_EXPANSION: u8 = 1;
      .           
 20,440 ( 0.01%)          if *self == SyntaxContext::root() {
      .                       TAG_NO_EXPANSION.hash_stable(ctx, hasher);
      .                   } else {
      .                       TAG_EXPANSION.hash_stable(ctx, hasher);
  5,326 ( 0.00%)              let (expn_id, transparency) = self.outer_mark();
 28,182 ( 0.01%)              expn_id.hash_stable(ctx, hasher);
      .                       transparency.hash_stable(ctx, hasher);
      .                   }
 60,096 ( 0.02%)      }
      .           }
      .           
      .           impl<CTX: HashStableContext> HashStable<CTX> for ExpnId {
 19,208 ( 0.01%)      fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {
      .                   assert_default_hashing_controls(ctx, "ExpnId");
 35,384 ( 0.01%)          let hash = if *self == ExpnId::root() {
      .                       // Avoid fetching TLS storage for a trivial often-used value.
      .                       Fingerprint::ZERO
      .                   } else {
      .                       self.expn_hash().0
      .                   };
      .           
      .                   hash.hash_stable(ctx, hasher);
 13,720 ( 0.01%)      }
      .           }

131,855 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/hygiene.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 108 ----------------------------------------
      .                   suppress_errors: bool,
      .               },
      .           }
      .           
      .           impl RegionckMode {
      .               /// Indicates that the MIR borrowck will repeat these region
      .               /// checks, so we should ignore errors if NLL is (unconditionally)
      .               /// enabled.
     77 ( 0.00%)      pub fn for_item_body(tcx: TyCtxt<'_>) -> Self {
      .                   // FIXME(Centril): Once we actually remove `::Migrate` also make
      .                   // this always `true` and then proceed to eliminate the dead code.
     77 ( 0.00%)          match tcx.borrowck_mode() {
      .                       // If we're on Migrate mode, report AST region errors
      .                       BorrowckMode::Migrate => RegionckMode::Erase { suppress_errors: false },
      .           
      .                       // If we're on MIR, don't report AST region errors as they should be reported by NLL
      .                       BorrowckMode::Mir => RegionckMode::Erase { suppress_errors: true },
      .                   }
    154 ( 0.00%)      }
      .           }
      .           
      .           /// This type contains all the things within `InferCtxt` that sit within a
      .           /// `RefCell` and are involved with taking/rolling back snapshots. Snapshot
      .           /// operations are hot enough that we want only one call to `borrow_mut` per
      .           /// call to `start_snapshot` and `rollback_to`.
      .           pub struct InferCtxtInner<'tcx> {
      .               /// Cache for projections. This cache is snapshotted along with the infcx.
-- line 134 ----------------------------------------
-- line 202 ----------------------------------------
      .               /// type instantiations (`ty::Infer`) to the actual opaque
      .               /// type (`ty::Opaque`). Used during fallback to map unconstrained
      .               /// opaque type inference variables to their corresponding
      .               /// opaque type.
      .               pub opaque_types_vars: FxHashMap<Ty<'tcx>, Ty<'tcx>>,
      .           }
      .           
      .           impl<'tcx> InferCtxtInner<'tcx> {
  7,655 ( 0.00%)      fn new() -> InferCtxtInner<'tcx> {
 52,054 ( 0.02%)          InferCtxtInner {
      .                       projection_cache: Default::default(),
      .                       type_variable_storage: type_variable::TypeVariableStorage::new(),
      .                       undo_log: InferCtxtUndoLogs::default(),
      .                       const_unification_storage: ut::UnificationTableStorage::new(),
      .                       int_unification_storage: ut::UnificationTableStorage::new(),
      .                       float_unification_storage: ut::UnificationTableStorage::new(),
  4,593 ( 0.00%)              region_constraint_storage: Some(RegionConstraintStorage::new()),
      .                       region_obligations: vec![],
      .                       opaque_types: Default::default(),
      .                       opaque_types_vars: Default::default(),
      .                   }
  9,186 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn region_obligations(&self) -> &[(hir::HirId, RegionObligation<'tcx>)] {
      .                   &self.region_obligations
      .               }
      .           
      .               #[inline]
      .               pub fn projection_cache(&mut self) -> traits::ProjectionCache<'_, 'tcx> {
     77 ( 0.00%)          self.projection_cache.with_log(&mut self.undo_log)
      .               }
      .           
      .               #[inline]
      .               fn type_variables(&mut self) -> type_variable::TypeVariableTable<'_, 'tcx> {
 32,161 ( 0.01%)          self.type_variable_storage.with_log(&mut self.undo_log)
      .               }
      .           
      .               #[inline]
      .               fn int_unification_table(
      .                   &mut self,
      .               ) -> ut::UnificationTable<
      .                   ut::InPlace<
      .                       ty::IntVid,
-- line 245 ----------------------------------------
-- line 268 ----------------------------------------
      .                   &mut self,
      .               ) -> ut::UnificationTable<
      .                   ut::InPlace<
      .                       ty::ConstVid<'tcx>,
      .                       &mut ut::UnificationStorage<ty::ConstVid<'tcx>>,
      .                       &mut InferCtxtUndoLogs<'tcx>,
      .                   >,
      .               > {
    123 ( 0.00%)          self.const_unification_storage.with_log(&mut self.undo_log)
      .               }
      .           
      .               #[inline]
      .               pub fn unwrap_region_constraints(&mut self) -> RegionConstraintCollector<'_, 'tcx> {
 10,217 ( 0.00%)          self.region_constraint_storage
      .                       .as_mut()
      .                       .expect("region constraints already solved")
 12,353 ( 0.00%)              .with_log(&mut self.undo_log)
      .               }
      .           }
      .           
      .           pub struct InferCtxt<'a, 'tcx> {
      .               pub tcx: TyCtxt<'tcx>,
      .           
      .               /// The `DefId` of the item in whose context we are performing inference or typeck.
      .               /// It is used to check whether an opaque type use is a defining use.
-- line 292 ----------------------------------------
-- line 361 ----------------------------------------
      .               /// item we are type-checking, and just consider those names as
      .               /// part of the root universe. So this would only get incremented
      .               /// when we enter into a higher-ranked (`for<..>`) type or trait
      .               /// bound.
      .               universe: Cell<ty::UniverseIndex>,
      .           }
      .           
      .           /// See the `error_reporting` module for more details.
 18,008 ( 0.01%)  #[derive(Clone, Copy, Debug, PartialEq, Eq, TypeFoldable)]
      .           pub enum ValuePairs<'tcx> {
      .               Types(ExpectedFound<Ty<'tcx>>),
      .               Regions(ExpectedFound<ty::Region<'tcx>>),
      .               Consts(ExpectedFound<&'tcx ty::Const<'tcx>>),
      .               TraitRefs(ExpectedFound<ty::TraitRef<'tcx>>),
      .               PolyTraitRefs(ExpectedFound<ty::PolyTraitRef<'tcx>>),
      .           }
      .           
-- line 377 ----------------------------------------
-- line 383 ----------------------------------------
      .           pub struct TypeTrace<'tcx> {
      .               cause: ObligationCause<'tcx>,
      .               values: ValuePairs<'tcx>,
      .           }
      .           
      .           /// The origin of a `r1 <= r2` constraint.
      .           ///
      .           /// See `error_reporting` module for more details
 19,022 ( 0.01%)  #[derive(Clone, Debug)]
      .           pub enum SubregionOrigin<'tcx> {
      .               /// Arose from a subtyping relation
    966 ( 0.00%)      Subtype(Box<TypeTrace<'tcx>>),
      .           
      .               /// When casting `&'a T` to an `&'b Trait` object,
      .               /// relating `'a` to `'b`
      .               RelateObjectBound(Span),
      .           
      .               /// Some type parameter was instantiated with the given type,
      .               /// and that type must outlive some region.
    287 ( 0.00%)      RelateParamBound(Span, Ty<'tcx>, Option<Span>),
      .           
      .               /// The given region parameter was instantiated with a region
      .               /// that must outlive some other region.
      .               RelateRegionParamBound(Span),
      .           
      .               /// Creating a pointer `b` to contents of another reference
      .               Reborrow(Span),
      .           
      .               /// Creating a pointer `b` to contents of an upvar
      .               ReborrowUpvar(Span, ty::UpvarId),
      .           
      .               /// Data with type `Ty<'tcx>` was borrowed
    246 ( 0.00%)      DataBorrowed(Ty<'tcx>, Span),
      .           
      .               /// (&'a &'b T) where a >= b
    206 ( 0.00%)      ReferenceOutlivesReferent(Ty<'tcx>, Span),
      .           
      .               /// Comparing the signature and requirements of an impl method against
      .               /// the containing trait.
      .               CompareImplMethodObligation { span: Span, impl_item_def_id: DefId, trait_item_def_id: DefId },
      .           
      .               /// Comparing the signature and requirements of an impl associated type
      .               /// against the containing trait
      .               CompareImplTypeObligation { span: Span, impl_item_def_id: DefId, trait_item_def_id: DefId },
-- line 426 ----------------------------------------
-- line 554 ----------------------------------------
      .               defining_use_anchor: Option<LocalDefId>,
      .           }
      .           
      .           pub trait TyCtxtInferExt<'tcx> {
      .               fn infer_ctxt(self) -> InferCtxtBuilder<'tcx>;
      .           }
      .           
      .           impl<'tcx> TyCtxtInferExt<'tcx> for TyCtxt<'tcx> {
  1,531 ( 0.00%)      fn infer_ctxt(self) -> InferCtxtBuilder<'tcx> {
  4,593 ( 0.00%)          InferCtxtBuilder { tcx: self, defining_use_anchor: None, fresh_typeck_results: None }
  1,531 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> InferCtxtBuilder<'tcx> {
      .               /// Used only by `rustc_typeck` during body type-checking/inference,
      .               /// will initialize `in_progress_typeck_results` with fresh `TypeckResults`.
      .               /// Will also change the scope for opaque type defining use checks to the given owner.
  2,394 ( 0.00%)      pub fn with_fresh_in_progress_typeck_results(mut self, table_owner: LocalDefId) -> Self {
  2,926 ( 0.00%)          self.fresh_typeck_results = Some(RefCell::new(ty::TypeckResults::new(table_owner)));
  1,330 ( 0.00%)          self.with_opaque_type_inference(table_owner)
  1,862 ( 0.00%)      }
      .           
      .               /// Whenever the `InferCtxt` should be able to handle defining uses of opaque types,
      .               /// you need to call this function. Otherwise the opaque type will be treated opaquely.
      .               ///
      .               /// It is only meant to be called in two places, for typeck
      .               /// (via `with_fresh_in_progress_typeck_results`) and for the inference context used
      .               /// in mir borrowck.
    154 ( 0.00%)      pub fn with_opaque_type_inference(mut self, defining_use_anchor: LocalDefId) -> Self {
     77 ( 0.00%)          self.defining_use_anchor = Some(defining_use_anchor);
    686 ( 0.00%)          self
    231 ( 0.00%)      }
      .           
      .               /// Given a canonical value `C` as a starting point, create an
      .               /// inference context that contains each of the bound values
      .               /// within instantiated as a fresh variable. The `f` closure is
      .               /// invoked with the new infcx, along with the instantiated value
      .               /// `V` and a substitution `S`. This substitution `S` maps from
      .               /// the bound values in `C` to their instantiated values in `V`
      .               /// (in other words, `S(C) = V`).
  1,855 ( 0.00%)      pub fn enter_with_canonical<T, R>(
      .                   &mut self,
      .                   span: Span,
      .                   canonical: &Canonical<'tcx, T>,
      .                   f: impl for<'a> FnOnce(InferCtxt<'a, 'tcx>, T, CanonicalVarValues<'tcx>) -> R,
      .               ) -> R
      .               where
      .                   T: TypeFoldable<'tcx>,
      .               {
      .                   self.enter(|infcx| {
  2,572 ( 0.00%)              let (value, subst) =
    183 ( 0.00%)                  infcx.instantiate_canonical_with_fresh_inference_vars(span, canonical);
  3,910 ( 0.00%)              f(infcx, value, subst)
      .                   })
  2,044 ( 0.00%)      }
      .           
  9,500 ( 0.00%)      pub fn enter<R>(&mut self, f: impl for<'a> FnOnce(InferCtxt<'a, 'tcx>) -> R) -> R {
  4,163 ( 0.00%)          let InferCtxtBuilder { tcx, defining_use_anchor, ref fresh_typeck_results } = *self;
      .                   let in_progress_typeck_results = fresh_typeck_results.as_ref();
 67,906 ( 0.03%)          f(InferCtxt {
      .                       tcx,
      .                       defining_use_anchor,
      .                       in_progress_typeck_results,
  1,531 ( 0.00%)              inner: RefCell::new(InferCtxtInner::new()),
      .                       lexical_region_resolutions: RefCell::new(None),
      .                       selection_cache: Default::default(),
      .                       evaluation_cache: Default::default(),
      .                       reported_trait_errors: Default::default(),
      .                       reported_closure_mismatch: Default::default(),
      .                       tainted_by_errors_flag: Cell::new(false),
  1,531 ( 0.00%)              err_count_on_creation: tcx.sess.err_count(),
      .                       in_snapshot: Cell::new(false),
      .                       skip_leak_check: Cell::new(false),
      .                       universe: Cell::new(ty::UniverseIndex::ROOT),
      .                   })
  9,968 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx, T> InferOk<'tcx, T> {
      .               pub fn unit(self) -> InferOk<'tcx, ()> {
      .                   InferOk { value: (), obligations: self.obligations }
      .               }
      .           
      .               /// Extracts `value`, registering any obligations into `fulfill_cx`.
      .               pub fn into_value_registering_obligations(
      .                   self,
      .                   infcx: &InferCtxt<'_, 'tcx>,
      .                   fulfill_cx: &mut dyn TraitEngine<'tcx>,
      .               ) -> T {
     26 ( 0.00%)          let InferOk { value, obligations } = self;
    120 ( 0.00%)          for obligation in obligations {
      .                       fulfill_cx.register_predicate_obligation(infcx, obligation);
      .                   }
      .                   value
      .               }
      .           }
      .           
      .           impl<'tcx> InferOk<'tcx, ()> {
  1,745 ( 0.00%)      pub fn into_obligations(self) -> PredicateObligations<'tcx> {
  6,980 ( 0.00%)          self.obligations
  1,745 ( 0.00%)      }
      .           }
      .           
      .           #[must_use = "once you start a snapshot, you should always consume it"]
      .           pub struct CombinedSnapshot<'a, 'tcx> {
      .               undo_snapshot: Snapshot<'tcx>,
      .               region_constraints_snapshot: RegionSnapshot,
      .               universe: ty::UniverseIndex,
      .               was_in_snapshot: bool,
-- line 662 ----------------------------------------
-- line 674 ----------------------------------------
      .                   let canonical = self.canonicalize_query((a, b), &mut OriginalQueryValues::default());
      .                   debug!("canonical consts: {:?}", &canonical.value);
      .           
      .                   self.tcx.try_unify_abstract_consts(canonical.value)
      .               }
      .           
      .               pub fn is_in_snapshot(&self) -> bool {
      .                   self.in_snapshot.get()
  2,445 ( 0.00%)      }
      .           
 16,992 ( 0.01%)      pub fn freshen<T: TypeFoldable<'tcx>>(&self, t: T) -> T {
 19,116 ( 0.01%)          t.fold_with(&mut self.freshener())
 19,116 ( 0.01%)      }
      .           
      .               /// Returns the origin of the type variable identified by `vid`, or `None`
      .               /// if this is not a type variable.
      .               ///
      .               /// No attempt is made to resolve `ty`.
      .               pub fn type_var_origin(&'a self, ty: Ty<'tcx>) -> Option<TypeVariableOrigin> {
      .                   match *ty.kind() {
      .                       ty::Infer(ty::TyVar(vid)) => {
      .                           Some(*self.inner.borrow_mut().type_variables().var_origin(vid))
      .                       }
      .                       _ => None,
      .                   }
      .               }
      .           
  2,124 ( 0.00%)      pub fn freshener<'b>(&'b self) -> TypeFreshener<'b, 'tcx> {
      .                   freshen::TypeFreshener::new(self, false)
  2,124 ( 0.00%)      }
      .           
      .               /// Like `freshener`, but does not replace `'static` regions.
 10,121 ( 0.00%)      pub fn freshener_keep_static<'b>(&'b self) -> TypeFreshener<'b, 'tcx> {
      .                   freshen::TypeFreshener::new(self, true)
 10,121 ( 0.00%)      }
      .           
    308 ( 0.00%)      pub fn unsolved_variables(&self) -> Vec<Ty<'tcx>> {
    154 ( 0.00%)          let mut inner = self.inner.borrow_mut();
    154 ( 0.00%)          let mut vars: Vec<Ty<'_>> = inner
      .                       .type_variables()
      .                       .unsolved_variables()
      .                       .into_iter()
      .                       .map(|t| self.tcx.mk_ty_var(t))
      .                       .collect();
      .                   vars.extend(
      .                       (0..inner.int_unification_table().len())
      .                           .map(|i| ty::IntVid { index: i as u32 })
-- line 720 ----------------------------------------
-- line 723 ----------------------------------------
      .                   );
      .                   vars.extend(
      .                       (0..inner.float_unification_table().len())
      .                           .map(|i| ty::FloatVid { index: i as u32 })
      .                           .filter(|&vid| inner.float_unification_table().probe_value(vid).is_none())
      .                           .map(|v| self.tcx.mk_float_var(v)),
      .                   );
      .                   vars
    539 ( 0.00%)      }
      .           
  4,246 ( 0.00%)      fn combine_fields(
      .                   &'a self,
      .                   trace: TypeTrace<'tcx>,
      .                   param_env: ty::ParamEnv<'tcx>,
      .               ) -> CombineFields<'a, 'tcx> {
 16,984 ( 0.01%)          CombineFields {
      .                       infcx: self,
 42,460 ( 0.02%)              trace,
      .                       cause: None,
      .                       param_env,
      .                       obligations: PredicateObligations::new(),
      .                   }
  4,246 ( 0.00%)      }
      .           
      .               /// Clear the "currently in a snapshot" flag, invoke the closure,
      .               /// then restore the flag to its original value. This flag is a
      .               /// debugging measure designed to detect cases where we start a
      .               /// snapshot, create type variables, and register obligations
      .               /// which may involve those type variables in the fulfillment cx,
      .               /// potentially leaving "dangling type variables" behind.
      .               /// In such cases, an assertion will fail when attempting to
-- line 753 ----------------------------------------
-- line 760 ----------------------------------------
      .               /// before we return, this is not a problem, as there won't be any
      .               /// escaping obligations in the main cx. In those cases, you can
      .               /// use this function.
      .               pub fn save_and_restore_in_snapshot_flag<F, R>(&self, func: F) -> R
      .               where
      .                   F: FnOnce(&Self) -> R,
      .               {
      .                   let flag = self.in_snapshot.replace(false);
    738 ( 0.00%)          let result = func(self);
      .                   self.in_snapshot.set(flag);
      .                   result
      .               }
      .           
 21,180 ( 0.01%)      fn start_snapshot(&self) -> CombinedSnapshot<'a, 'tcx> {
      .                   debug!("start_snapshot()");
      .           
      .                   let in_snapshot = self.in_snapshot.replace(true);
      .           
      .                   let mut inner = self.inner.borrow_mut();
      .           
 63,540 ( 0.02%)          CombinedSnapshot {
      .                       undo_snapshot: inner.undo_log.start_snapshot(),
      .                       region_constraints_snapshot: inner.unwrap_region_constraints().start_snapshot(),
      .                       universe: self.universe(),
      .                       was_in_snapshot: in_snapshot,
      .                       // Borrow typeck results "in progress" (i.e., during typeck)
      .                       // to ban writes from within a snapshot to them.
 10,590 ( 0.00%)              _in_progress_typeck_results: self
      .                           .in_progress_typeck_results
      .                           .map(|typeck_results| typeck_results.borrow()),
      .                   }
 42,360 ( 0.02%)      }
      .           
 24,420 ( 0.01%)      #[instrument(skip(self, snapshot), level = "debug")]
      .               fn rollback_to(&self, cause: &str, snapshot: CombinedSnapshot<'a, 'tcx>) {
      .                   let CombinedSnapshot {
  2,220 ( 0.00%)              undo_snapshot,
  2,220 ( 0.00%)              region_constraints_snapshot,
  2,220 ( 0.00%)              universe,
  2,220 ( 0.00%)              was_in_snapshot,
  4,440 ( 0.00%)              _in_progress_typeck_results,
      .                   } = snapshot;
      .           
      .                   self.in_snapshot.set(was_in_snapshot);
      .                   self.universe.set(universe);
      .           
      .                   let mut inner = self.inner.borrow_mut();
  2,220 ( 0.00%)          inner.rollback_to(undo_snapshot);
      .                   inner.unwrap_region_constraints().rollback_to(region_constraints_snapshot);
      .               }
      .           
125,550 ( 0.05%)      #[instrument(skip(self, snapshot), level = "debug")]
      .               fn commit_from(&self, snapshot: CombinedSnapshot<'a, 'tcx>) {
      .                   let CombinedSnapshot {
  8,370 ( 0.00%)              undo_snapshot,
      .                       region_constraints_snapshot: _,
      .                       universe: _,
  8,370 ( 0.00%)              was_in_snapshot,
 16,740 ( 0.01%)              _in_progress_typeck_results,
      .                   } = snapshot;
      .           
      .                   self.in_snapshot.set(was_in_snapshot);
      .           
      .                   self.inner.borrow_mut().commit(undo_snapshot);
      .               }
      .           
      .               /// Executes `f` and commit the bindings.
  4,811 ( 0.00%)      #[instrument(skip(self, f), level = "debug")]
  5,885 ( 0.00%)      pub fn commit_unconditionally<R, F>(&self, f: F) -> R
      .               where
      .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
      .               {
    535 ( 0.00%)          let snapshot = self.start_snapshot();
  1,625 ( 0.00%)          let r = f(&snapshot);
  3,745 ( 0.00%)          self.commit_from(snapshot);
  3,206 ( 0.00%)          r
      .               }
      .           
      .               /// Execute `f` and commit the bindings if closure `f` returns `Ok(_)`.
 45,088 ( 0.02%)      #[instrument(skip(self, f), level = "debug")]
 55,667 ( 0.02%)      pub fn commit_if_ok<T, E, F>(&self, f: F) -> Result<T, E>
      .               where
      .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> Result<T, E>,
      .               {
  9,375 ( 0.00%)          let snapshot = self.start_snapshot();
 25,788 ( 0.01%)          let r = f(&snapshot);
      .                   debug!("commit_if_ok() -- r.is_ok() = {}", r.is_ok());
  9,634 ( 0.00%)          match r {
      .                       Ok(_) => {
 55,793 ( 0.02%)                  self.commit_from(snapshot);
      .                       }
      .                       Err(_) => {
  8,154 ( 0.00%)                  self.rollback_to("commit_if_ok -- error", snapshot);
      .                       }
      .                   }
 53,730 ( 0.02%)          r
      .               }
      .           
      .               /// Execute `f` then unroll any bindings it creates.
  9,152 ( 0.00%)      #[instrument(skip(self, f), level = "debug")]
 10,684 ( 0.00%)      pub fn probe<R, F>(&self, f: F) -> R
      .               where
      .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
      .               {
  2,543 ( 0.00%)          let snapshot = self.start_snapshot();
  3,655 ( 0.00%)          let r = f(&snapshot);
 12,663 ( 0.00%)          self.rollback_to("probe", snapshot);
  3,095 ( 0.00%)          r
      .               }
      .           
      .               /// If `should_skip` is true, then execute `f` then unroll any bindings it creates.
      .               #[instrument(skip(self, f), level = "debug")]
      .               pub fn probe_maybe_skip_leak_check<R, F>(&self, should_skip: bool, f: F) -> R
      .               where
      .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
      .               {
-- line 875 ----------------------------------------
-- line 884 ----------------------------------------
      .                   r
      .               }
      .           
      .               /// Scan the constraints produced since `snapshot` began and returns:
      .               ///
      .               /// - `None` -- if none of them involve "region outlives" constraints
      .               /// - `Some(true)` -- if there are `'a: 'b` constraints where `'a` or `'b` is a placeholder
      .               /// - `Some(false)` -- if there are `'a: 'b` constraints but none involve placeholders
    808 ( 0.00%)      pub fn region_constraints_added_in_snapshot(
      .                   &self,
      .                   snapshot: &CombinedSnapshot<'a, 'tcx>,
      .               ) -> Option<bool> {
  1,616 ( 0.00%)          self.inner
      .                       .borrow_mut()
      .                       .unwrap_region_constraints()
      .                       .region_constraints_added_in_snapshot(&snapshot.undo_snapshot)
  1,212 ( 0.00%)      }
      .           
      .               pub fn add_given(&self, sub: ty::Region<'tcx>, sup: ty::RegionVid) {
      .                   self.inner.borrow_mut().unwrap_region_constraints().add_given(sub, sup);
      .               }
      .           
      .               pub fn can_sub<T>(&self, param_env: ty::ParamEnv<'tcx>, a: T, b: T) -> UnitResult<'tcx>
      .               where
      .                   T: at::ToTrace<'tcx>,
-- line 908 ----------------------------------------
-- line 911 ----------------------------------------
      .                   self.probe(|_| {
      .                       self.at(origin, param_env).sub(a, b).map(|InferOk { obligations: _, .. }| {
      .                           // Ignore obligations, since we are unrolling
      .                           // everything anyway.
      .                       })
      .                   })
      .               }
      .           
  1,632 ( 0.00%)      pub fn can_eq<T>(&self, param_env: ty::ParamEnv<'tcx>, a: T, b: T) -> UnitResult<'tcx>
      .               where
      .                   T: at::ToTrace<'tcx>,
      .               {
      .                   let origin = &ObligationCause::dummy();
      .                   self.probe(|_| {
      .                       self.at(origin, param_env).eq(a, b).map(|InferOk { obligations: _, .. }| {
      .                           // Ignore obligations, since we are unrolling
      .                           // everything anyway.
      .                       })
      .                   })
  1,224 ( 0.00%)      }
      .           
 12,600 ( 0.00%)      #[instrument(skip(self), level = "debug")]
      .               pub fn sub_regions(
      .                   &self,
      .                   origin: SubregionOrigin<'tcx>,
      .                   a: ty::Region<'tcx>,
      .                   b: ty::Region<'tcx>,
      .               ) {
 11,340 ( 0.00%)          self.inner.borrow_mut().unwrap_region_constraints().make_subregion(origin, a, b);
      .               }
      .           
      .               /// Require that the region `r` be equal to one of the regions in
      .               /// the set `regions`.
      .               #[instrument(skip(self), level = "debug")]
      .               pub fn member_constraint(
      .                   &self,
      .                   opaque_type_def_id: DefId,
-- line 947 ----------------------------------------
-- line 983 ----------------------------------------
      .                   let subtype_predicate = predicate.map_bound(|p| ty::SubtypePredicate {
      .                       a_is_expected: false, // when coercing from `a` to `b`, `b` is expected
      .                       a: p.a,
      .                       b: p.b,
      .                   });
      .                   self.subtype_predicate(cause, param_env, subtype_predicate)
      .               }
      .           
    168 ( 0.00%)      pub fn subtype_predicate(
      .                   &self,
      .                   cause: &ObligationCause<'tcx>,
      .                   param_env: ty::ParamEnv<'tcx>,
      .                   predicate: ty::PolySubtypePredicate<'tcx>,
      .               ) -> Option<InferResult<'tcx, ()>> {
      .                   // Check for two unresolved inference variables, in which case we can
      .                   // make no progress. This is partly a micro-optimization, but it's
      .                   // also an opportunity to "sub-unify" the variables. This isn't
-- line 999 ----------------------------------------
-- line 1002 ----------------------------------------
      .                   // earlier that they are sub-unified).
      .                   //
      .                   // Note that we can just skip the binders here because
      .                   // type variables can't (at present, at
      .                   // least) capture any of the things bound by this binder.
      .                   //
      .                   // Note that this sub here is not just for diagnostics - it has semantic
      .                   // effects as well.
     14 ( 0.00%)          let r_a = self.shallow_resolve(predicate.skip_binder().a);
     14 ( 0.00%)          let r_b = self.shallow_resolve(predicate.skip_binder().b);
    112 ( 0.00%)          match (r_a.kind(), r_b.kind()) {
     28 ( 0.00%)              (&ty::Infer(ty::TyVar(a_vid)), &ty::Infer(ty::TyVar(b_vid))) => {
      .                           self.inner.borrow_mut().type_variables().sub(a_vid, b_vid);
     28 ( 0.00%)                  return None;
      .                       }
      .                       _ => {}
      .                   }
      .           
      .                   Some(self.commit_if_ok(|_snapshot| {
      .                       let ty::SubtypePredicate { a_is_expected, a, b } =
      .                           self.replace_bound_vars_with_placeholders(predicate);
      .           
      .                       let ok = self.at(cause, param_env).sub_exp(a_is_expected, a, b)?;
      .           
      .                       Ok(ok.unit())
      .                   }))
    126 ( 0.00%)      }
      .           
  3,816 ( 0.00%)      pub fn region_outlives_predicate(
      .                   &self,
      .                   cause: &traits::ObligationCause<'tcx>,
      .                   predicate: ty::PolyRegionOutlivesPredicate<'tcx>,
      .               ) -> UnitResult<'tcx> {
      .                   self.commit_if_ok(|_snapshot| {
      .                       let ty::OutlivesPredicate(r_a, r_b) =
      .                           self.replace_bound_vars_with_placeholders(predicate);
      .                       let origin = SubregionOrigin::from_obligation_cause(cause, || {
      .                           RelateRegionParamBound(cause.span)
      .                       });
  3,180 ( 0.00%)              self.sub_regions(origin, r_b, r_a); // `b : a` ==> `a <= b`
      .                       Ok(())
      .                   })
  2,544 ( 0.00%)      }
      .           
      .               /// Number of type variables created so far.
      .               pub fn num_ty_vars(&self) -> usize {
      .                   self.inner.borrow_mut().type_variables().num_vars()
      .               }
      .           
  2,328 ( 0.00%)      pub fn next_ty_var_id(&self, origin: TypeVariableOrigin) -> TyVid {
 11,640 ( 0.00%)          self.inner.borrow_mut().type_variables().new_var(self.universe(), origin)
  3,492 ( 0.00%)      }
      .           
  2,300 ( 0.00%)      pub fn next_ty_var(&self, origin: TypeVariableOrigin) -> Ty<'tcx> {
  8,134 ( 0.00%)          self.tcx.mk_ty_var(self.next_ty_var_id(origin))
  3,450 ( 0.00%)      }
      .           
     28 ( 0.00%)      pub fn next_ty_var_in_universe(
      .                   &self,
      .                   origin: TypeVariableOrigin,
      .                   universe: ty::UniverseIndex,
      .               ) -> Ty<'tcx> {
    154 ( 0.00%)          let vid = self.inner.borrow_mut().type_variables().new_var(universe, origin);
     14 ( 0.00%)          self.tcx.mk_ty_var(vid)
     42 ( 0.00%)      }
      .           
      .               pub fn next_const_var(
      .                   &self,
      .                   ty: Ty<'tcx>,
      .                   origin: ConstVariableOrigin,
      .               ) -> &'tcx ty::Const<'tcx> {
      .                   self.tcx.mk_const_var(self.next_const_var_id(origin), ty)
      .               }
-- line 1074 ----------------------------------------
-- line 1108 ----------------------------------------
      .           
      .               pub fn next_float_var(&self) -> Ty<'tcx> {
      .                   self.tcx.mk_float_var(self.next_float_var_id())
      .               }
      .           
      .               /// Creates a fresh region variable with the next available index.
      .               /// The variable will be created in the maximum universe created
      .               /// thus far, allowing it to name any region created thus far.
  1,711 ( 0.00%)      pub fn next_region_var(&self, origin: RegionVariableOrigin) -> ty::Region<'tcx> {
 28,974 ( 0.01%)          self.next_region_var_in_universe(origin, self.universe())
  3,422 ( 0.00%)      }
      .           
      .               /// Creates a fresh region variable with the next available index
      .               /// in the given universe; typically, you can use
      .               /// `next_region_var` and just use the maximal universe.
 10,960 ( 0.00%)      pub fn next_region_var_in_universe(
      .                   &self,
      .                   origin: RegionVariableOrigin,
      .                   universe: ty::UniverseIndex,
      .               ) -> ty::Region<'tcx> {
      .                   let region_var =
 71,240 ( 0.03%)              self.inner.borrow_mut().unwrap_region_constraints().new_region_var(universe, origin);
 27,400 ( 0.01%)          self.tcx.mk_region(ty::ReVar(region_var))
 16,440 ( 0.01%)      }
      .           
      .               /// Return the universe that the region `r` was created in.  For
      .               /// most regions (e.g., `'static`, named regions from the user,
      .               /// etc) this is the root universe U0. For inference variables or
      .               /// placeholders, however, it will return the universe which which
      .               /// they are associated.
  2,026 ( 0.00%)      pub fn universe_of_region(&self, r: ty::Region<'tcx>) -> ty::UniverseIndex {
      .                   self.inner.borrow_mut().unwrap_region_constraints().universe(r)
  3,039 ( 0.00%)      }
      .           
      .               /// Number of region variables created so far.
    616 ( 0.00%)      pub fn num_region_vars(&self) -> usize {
      .                   self.inner.borrow_mut().unwrap_region_constraints().num_region_vars()
    924 ( 0.00%)      }
      .           
      .               /// Just a convenient wrapper of `next_region_var` for using during NLL.
  2,392 ( 0.00%)      pub fn next_nll_region_var(&self, origin: NllRegionVariableOrigin) -> ty::Region<'tcx> {
      .                   self.next_region_var(RegionVariableOrigin::Nll(origin))
  4,784 ( 0.00%)      }
      .           
      .               /// Just a convenient wrapper of `next_region_var` for using during NLL.
      .               pub fn next_nll_region_var_in_universe(
      .                   &self,
      .                   origin: NllRegionVariableOrigin,
      .                   universe: ty::UniverseIndex,
      .               ) -> ty::Region<'tcx> {
      .                   self.next_region_var_in_universe(RegionVariableOrigin::Nll(origin), universe)
      .               }
      .           
 11,224 ( 0.00%)      pub fn var_for_def(&self, span: Span, param: &ty::GenericParamDef) -> GenericArg<'tcx> {
  5,957 ( 0.00%)          match param.kind {
      .                       GenericParamDefKind::Lifetime => {
      .                           // Create a region inference variable for the given
      .                           // region parameter definition.
    529 ( 0.00%)                  self.next_region_var(EarlyBoundRegion(span, param.name)).into()
      .                       }
      .                       GenericParamDefKind::Type { .. } => {
      .                           // Create a type inference variable for the given
      .                           // type parameter definition. The substitutions are
      .                           // for actual parameters that may be referred to by
      .                           // the default of this type parameter, if it exists.
      .                           // e.g., `struct Foo<A, B, C = (A, B)>(...);` when
      .                           // used in a path such as `Foo::<T, U>::new()` will
      .                           // use an inference variable for `C` with `[T, U]`
      .                           // as the substitutions for the default, `(T, U)`.
  3,496 ( 0.00%)                  let ty_var_id = self.inner.borrow_mut().type_variables().new_var(
      .                               self.universe(),
  4,370 ( 0.00%)                      TypeVariableOrigin {
      .                                   kind: TypeVariableOriginKind::TypeParameterDefinition(
    874 ( 0.00%)                              param.name,
    874 ( 0.00%)                              Some(param.def_id),
      .                                   ),
      .                                   span,
      .                               },
      .                           );
      .           
    874 ( 0.00%)                  self.tcx.mk_ty_var(ty_var_id).into()
      .                       }
      .                       GenericParamDefKind::Const { .. } => {
      .                           let origin = ConstVariableOrigin {
      .                               kind: ConstVariableOriginKind::ConstParameterDefinition(
      .                                   param.name,
      .                                   param.def_id,
      .                               ),
      .                               span,
-- line 1196 ----------------------------------------
-- line 1202 ----------------------------------------
      .                               });
      .                           self.tcx.mk_const_var(const_var_id, self.tcx.type_of(param.def_id)).into()
      .                       }
      .                   }
      .               }
      .           
      .               /// Given a set of generics defined on a type or impl, returns a substitution mapping each
      .               /// type/region parameter to a fresh inference variable.
  2,214 ( 0.00%)      pub fn fresh_substs_for_item(&self, span: Span, def_id: DefId) -> SubstsRef<'tcx> {
 10,933 ( 0.00%)          InternalSubsts::for_item(self.tcx, def_id, |param, _| self.var_for_def(span, param))
  1,476 ( 0.00%)      }
      .           
      .               /// Returns `true` if errors have been reported since this infcx was
      .               /// created. This is sometimes used as a heuristic to skip
      .               /// reporting errors that often occur as a result of earlier
      .               /// errors, but where it's hard to be 100% sure (e.g., unresolved
      .               /// inference variables, regionck errors).
    154 ( 0.00%)      pub fn is_tainted_by_errors(&self) -> bool {
      .                   debug!(
      .                       "is_tainted_by_errors(err_count={}, err_count_on_creation={}, \
      .                        tainted_by_errors_flag={})",
      .                       self.tcx.sess.err_count(),
      .                       self.err_count_on_creation,
      .                       self.tainted_by_errors_flag.get()
      .                   );
      .           
  6,185 ( 0.00%)          if self.tcx.sess.err_count() > self.err_count_on_creation {
      .                       return true; // errors reported since this infcx was made
      .                   }
      .                   self.tainted_by_errors_flag.get()
    231 ( 0.00%)      }
      .           
      .               /// Set the "tainted by errors" flag to true. We call this when we
      .               /// observe an error from a prior pass.
      .               pub fn set_tainted_by_errors(&self) {
      .                   debug!("set_tainted_by_errors()");
      .                   self.tainted_by_errors_flag.set(true)
      .               }
      .           
      .               /// Process the region constraints and return any any errors that
      .               /// result. After this, no more unification operations should be
      .               /// done -- or the compiler will panic -- but it is legal to use
      .               /// `resolve_vars_if_possible` as well as `fully_resolve`.
  6,587 ( 0.00%)      pub fn resolve_regions(
      .                   &self,
      .                   region_context: DefId,
      .                   outlives_env: &OutlivesEnvironment<'tcx>,
      .                   mode: RegionckMode,
      .               ) -> Vec<RegionResolutionError<'tcx>> {
 17,879 ( 0.01%)          let (var_infos, data) = {
      .                       let mut inner = self.inner.borrow_mut();
      .                       let inner = &mut *inner;
    941 ( 0.00%)              assert!(
  2,823 ( 0.00%)                  self.is_tainted_by_errors() || inner.region_obligations.is_empty(),
      .                           "region_obligations not empty: {:#?}",
      .                           inner.region_obligations
      .                       );
      .                       inner
      .                           .region_constraint_storage
      .                           .take()
      .                           .expect("regions already resolved")
      .                           .with_log(&mut inner.undo_log)
      .                           .into_infos_and_data()
    941 ( 0.00%)          };
      .           
      .                   let region_rels =
    941 ( 0.00%)              &RegionRelations::new(self.tcx, region_context, outlives_env.free_region_map());
      .           
  8,469 ( 0.00%)          let (lexical_region_resolutions, errors) =
 22,584 ( 0.01%)              lexical_region_resolve::resolve(region_rels, var_infos, data, mode);
      .           
  3,764 ( 0.00%)          let old_value = self.lexical_region_resolutions.replace(Some(lexical_region_resolutions));
    941 ( 0.00%)          assert!(old_value.is_none());
      .           
      .                   errors
  8,469 ( 0.00%)      }
      .           
      .               /// Process the region constraints and report any errors that
      .               /// result. After this, no more unification operations should be
      .               /// done -- or the compiler will panic -- but it is legal to use
      .               /// `resolve_vars_if_possible` as well as `fully_resolve`.
  9,410 ( 0.00%)      pub fn resolve_regions_and_report_errors(
      .                   &self,
      .                   region_context: DefId,
      .                   outlives_env: &OutlivesEnvironment<'tcx>,
      .                   mode: RegionckMode,
      .               ) {
  1,882 ( 0.00%)          let errors = self.resolve_regions(region_context, outlives_env, mode);
      .           
  2,823 ( 0.00%)          if !self.is_tainted_by_errors() {
      .                       // As a heuristic, just skip reporting region errors
      .                       // altogether if other errors have been reported while
      .                       // this infcx was in use.  This is totally hokey but
      .                       // otherwise we have a hard time separating legit region
      .                       // errors from silly ones.
  1,882 ( 0.00%)              self.report_region_errors(&errors);
      .                   }
  4,705 ( 0.00%)      }
      .           
      .               /// Obtains (and clears) the current set of region
      .               /// constraints. The inference context is still usable: further
      .               /// unifications will simply add new constraints.
      .               ///
      .               /// This method is not meant to be used with normal lexical region
      .               /// resolution. Rather, it is used in the NLL mode as a kind of
      .               /// interim hack: basically we run normal type-check and generate
-- line 1307 ----------------------------------------
-- line 1319 ----------------------------------------
      .               }
      .           
      .               /// Gives temporary access to the region constraint data.
      .               pub fn with_region_constraints<R>(
      .                   &self,
      .                   op: impl FnOnce(&RegionConstraintData<'tcx>) -> R,
      .               ) -> R {
      .                   let mut inner = self.inner.borrow_mut();
    816 ( 0.00%)          op(inner.unwrap_region_constraints().data())
      .               }
      .           
      .               pub fn region_var_origin(&self, vid: ty::RegionVid) -> RegionVariableOrigin {
      .                   let mut inner = self.inner.borrow_mut();
      .                   let inner = &mut *inner;
      .                   inner
      .                       .region_constraint_storage
      .                       .as_mut()
-- line 1335 ----------------------------------------
-- line 1338 ----------------------------------------
      .                       .var_origin(vid)
      .               }
      .           
      .               /// Takes ownership of the list of variable regions. This implies
      .               /// that all the region constraints have already been taken, and
      .               /// hence that `resolve_regions_and_report_errors` can never be
      .               /// called. This is used only during NLL processing to "hand off" ownership
      .               /// of the set of region variables into the NLL region context.
    385 ( 0.00%)      pub fn take_region_var_origins(&self) -> VarInfos {
      .                   let mut inner = self.inner.borrow_mut();
  1,463 ( 0.00%)          let (var_infos, data) = inner
      .                       .region_constraint_storage
      .                       .take()
      .                       .expect("regions already resolved")
      .                       .with_log(&mut inner.undo_log)
     77 ( 0.00%)              .into_infos_and_data();
     77 ( 0.00%)          assert!(data.is_empty());
      .                   var_infos
    616 ( 0.00%)      }
      .           
      .               pub fn ty_to_string(&self, t: Ty<'tcx>) -> String {
      .                   self.resolve_vars_if_possible(t).to_string()
      .               }
      .           
      .               /// If `TyVar(vid)` resolves to a type, return that type. Else, return the
      .               /// universe index of `TyVar(vid)`.
    372 ( 0.00%)      pub fn probe_ty_var(&self, vid: TyVid) -> Result<Ty<'tcx>, ty::UniverseIndex> {
      .                   use self::type_variable::TypeVariableValue;
      .           
  1,116 ( 0.00%)          match self.inner.borrow_mut().type_variables().probe(vid) {
      .                       TypeVariableValue::Known { value } => Ok(value),
      .                       TypeVariableValue::Unknown { universe } => Err(universe),
      .                   }
  1,302 ( 0.00%)      }
      .           
      .               /// Resolve any type variables found in `value` -- but only one
      .               /// level.  So, if the variable `?X` is bound to some type
      .               /// `Foo<?Y>`, then this would return `Foo<?Y>` (but `?Y` may
      .               /// itself be bound to a type).
      .               ///
      .               /// Useful when you only need to inspect the outermost level of
      .               /// the type and don't care about nested types (or perhaps you
      .               /// will be resolving them as well, e.g. in a loop).
      .               pub fn shallow_resolve<T>(&self, value: T) -> T
      .               where
      .                   T: TypeFoldable<'tcx>,
      .               {
 17,828 ( 0.01%)          value.fold_with(&mut ShallowResolver { infcx: self })
      .               }
      .           
    872 ( 0.00%)      pub fn root_var(&self, var: ty::TyVid) -> ty::TyVid {
      .                   self.inner.borrow_mut().type_variables().root_var(var)
  1,308 ( 0.00%)      }
      .           
      .               /// Where possible, replaces type/const variables in
      .               /// `value` with their final value. Note that region variables
      .               /// are unaffected. If a type/const variable has not been unified, it
      .               /// is left as is. This is an idempotent operation that does
      .               /// not affect inference state in any way and so you can do it
      .               /// at will.
      .               pub fn resolve_vars_if_possible<T>(&self, value: T) -> T
      .               where
      .                   T: TypeFoldable<'tcx>,
      .               {
 17,525 ( 0.01%)          if !value.needs_infer() {
 13,836 ( 0.01%)              return value; // Avoid duplicated subst-folding.
      .                   }
 16,899 ( 0.01%)          let mut r = resolve::OpportunisticVarResolver::new(self);
 20,415 ( 0.01%)          value.fold_with(&mut r)
      .               }
      .           
      .               /// Returns the first unresolved variable contained in `T`. In the
      .               /// process of visiting `T`, this will resolve (where possible)
      .               /// type variables in `T`, but it never constructs the final,
      .               /// resolved type, so it's more efficient than
      .               /// `resolve_vars_if_possible()`.
      .               pub fn unresolved_type_vars<T>(&self, value: &T) -> Option<(Ty<'tcx>, Option<Span>)>
-- line 1414 ----------------------------------------
-- line 1490 ----------------------------------------
      .                   expected: &'tcx ty::Const<'tcx>,
      .                   actual: &'tcx ty::Const<'tcx>,
      .                   err: TypeError<'tcx>,
      .               ) -> DiagnosticBuilder<'tcx> {
      .                   let trace = TypeTrace::consts(cause, true, expected, actual);
      .                   self.report_and_explain_type_error(trace, &err)
      .               }
      .           
  1,710 ( 0.00%)      pub fn replace_bound_vars_with_fresh_vars<T>(
      .                   &self,
      .                   span: Span,
      .                   lbrct: LateBoundRegionConversionTime,
      .                   value: ty::Binder<'tcx, T>,
      .               ) -> (T, BTreeMap<ty::BoundRegion, ty::Region<'tcx>>)
      .               where
      .                   T: TypeFoldable<'tcx>,
      .               {
      .                   let fld_r =
 16,660 ( 0.01%)              |br: ty::BoundRegion| self.next_region_var(LateBoundRegion(span, br.kind, lbrct));
      .                   let fld_t = |_| {
      .                       self.next_ty_var(TypeVariableOrigin {
      .                           kind: TypeVariableOriginKind::MiscVariable,
      .                           span,
      .                       })
      .                   };
      .                   let fld_c = |_, ty| {
      .                       self.next_const_var(
      .                           ty,
      .                           ConstVariableOrigin { kind: ConstVariableOriginKind::MiscVariable, span },
      .                       )
      .                   };
 10,413 ( 0.00%)          self.tcx.replace_bound_vars(value, fld_r, fld_t, fld_c)
  1,140 ( 0.00%)      }
      .           
      .               /// See the [`region_constraints::RegionConstraintCollector::verify_generic_bound`] method.
    728 ( 0.00%)      pub fn verify_generic_bound(
      .                   &self,
      .                   origin: SubregionOrigin<'tcx>,
      .                   kind: GenericKind<'tcx>,
      .                   a: ty::Region<'tcx>,
      .                   bound: VerifyBound<'tcx>,
      .               ) {
      .                   debug!("verify_generic_bound({:?}, {:?} <: {:?})", kind, a, bound);
      .           
    273 ( 0.00%)          self.inner
      .                       .borrow_mut()
      .                       .unwrap_region_constraints()
  1,547 ( 0.00%)              .verify_generic_bound(origin, kind, a, bound);
    637 ( 0.00%)      }
      .           
      .               /// Obtains the latest type of the given closure; this may be a
      .               /// closure in the current function, in which case its
      .               /// `ClosureKind` may not yet be known.
      .               pub fn closure_kind(&self, closure_substs: SubstsRef<'tcx>) -> Option<ty::ClosureKind> {
      .                   let closure_kind_ty = closure_substs.as_closure().kind_ty();
      .                   let closure_kind_ty = self.shallow_resolve(closure_kind_ty);
      .                   closure_kind_ty.to_opt_closure_kind()
-- line 1546 ----------------------------------------
-- line 1551 ----------------------------------------
      .               /// its `ParamEnv`, since `FulfillmentContext` doesn't use probing.
      .               pub fn clear_caches(&self) {
      .                   self.selection_cache.clear();
      .                   self.evaluation_cache.clear();
      .                   self.inner.borrow_mut().projection_cache().clear();
      .               }
      .           
      .               pub fn universe(&self) -> ty::UniverseIndex {
 33,686 ( 0.01%)          self.universe.get()
 10,978 ( 0.00%)      }
      .           
      .               /// Creates and return a fresh universe that extends all previous
      .               /// universes. Updates `self.universe` to that new universe.
      .               pub fn create_next_universe(&self) -> ty::UniverseIndex {
      .                   let u = self.universe.get().next_universe();
      .                   self.universe.set(u);
      .                   u
      .               }
-- line 1568 ----------------------------------------
-- line 1606 ----------------------------------------
      .                   // variables, thus we don't need to substitute back the original values.
      .                   self.tcx.const_eval_resolve(param_env_erased, unevaluated, span)
      .               }
      .           
      .               /// If `typ` is a type variable of some kind, resolve it one level
      .               /// (but do not resolve types found in the result). If `typ` is
      .               /// not a type variable, just return it unmodified.
      .               // FIXME(eddyb) inline into `ShallowResolver::visit_ty`.
164,272 ( 0.06%)      fn shallow_resolve_ty(&self, typ: Ty<'tcx>) -> Ty<'tcx> {
 80,041 ( 0.03%)          match *typ.kind() {
      .                       ty::Infer(ty::TyVar(v)) => {
      .                           // Not entirely obvious: if `typ` is a type variable,
      .                           // it can be resolved to an int/float variable, which
      .                           // can then be recursively resolved, hence the
      .                           // recursion. Note though that we prevent type
      .                           // variables from unifying to other type variables
      .                           // directly (though they may be embedded
      .                           // structurally), and we prevent cycles in any case,
      .                           // so this recursion should always be of very limited
      .                           // depth.
      .                           //
      .                           // Note: if these two lines are combined into one we get
      .                           // dynamic borrow errors on `self.inner`.
 38,032 ( 0.01%)                  let known = self.inner.borrow_mut().type_variables().probe(v).known();
      .                           known.map_or(typ, |t| self.shallow_resolve_ty(t))
      .                       }
      .           
      .                       ty::Infer(ty::IntVar(v)) => self
      .                           .inner
      .                           .borrow_mut()
      .                           .int_unification_table()
      .                           .probe_value(v)
-- line 1637 ----------------------------------------
-- line 1643 ----------------------------------------
      .                           .borrow_mut()
      .                           .float_unification_table()
      .                           .probe_value(v)
      .                           .map(|v| v.to_type(self.tcx))
      .                           .unwrap_or(typ),
      .           
      .                       _ => typ,
      .                   }
184,806 ( 0.07%)      }
      .           
      .               /// `ty_or_const_infer_var_changed` is equivalent to one of these two:
      .               ///   * `shallow_resolve(ty) != ty` (where `ty.kind = ty::Infer(_)`)
      .               ///   * `shallow_resolve(ct) != ct` (where `ct.kind = ty::ConstKind::Infer(_)`)
      .               ///
      .               /// However, `ty_or_const_infer_var_changed` is more efficient. It's always
      .               /// inlined, despite being large, because it has only two call sites that
      .               /// are extremely hot (both in `traits::fulfill`'s checking of `stalled_on`
-- line 1659 ----------------------------------------
-- line 1662 ----------------------------------------
      .               #[inline(always)]
      .               pub fn ty_or_const_infer_var_changed(&self, infer_var: TyOrConstInferVar<'tcx>) -> bool {
      .                   match infer_var {
      .                       TyOrConstInferVar::Ty(v) => {
      .                           use self::type_variable::TypeVariableValue;
      .           
      .                           // If `inlined_probe` returns a `Known` value, it never equals
      .                           // `ty::Infer(ty::TyVar(v))`.
 19,069 ( 0.01%)                  match self.inner.borrow_mut().type_variables().inlined_probe(v) {
      .                               TypeVariableValue::Unknown { .. } => false,
      .                               TypeVariableValue::Known { .. } => true,
      .                           }
      .                       }
      .           
      .                       TyOrConstInferVar::TyInt(v) => {
      .                           // If `inlined_probe_value` returns a value it's always a
      .                           // `ty::Int(_)` or `ty::UInt(_)`, which never matches a
-- line 1678 ----------------------------------------
-- line 1716 ----------------------------------------
      .               /// Equivalent to `ty::ConstKind::Infer(ty::InferConst::Var(_))`.
      .               Const(ConstVid<'tcx>),
      .           }
      .           
      .           impl<'tcx> TyOrConstInferVar<'tcx> {
      .               /// Tries to extract an inference variable from a type or a constant, returns `None`
      .               /// for types other than `ty::Infer(_)` (or `InferTy::Fresh*`) and
      .               /// for constants other than `ty::ConstKind::Infer(_)` (or `InferConst::Fresh`).
    319 ( 0.00%)      pub fn maybe_from_generic_arg(arg: GenericArg<'tcx>) -> Option<Self> {
      .                   match arg.unpack() {
      .                       GenericArgKind::Type(ty) => Self::maybe_from_ty(ty),
      .                       GenericArgKind::Const(ct) => Self::maybe_from_const(ct),
      .                       GenericArgKind::Lifetime(_) => None,
      .                   }
    319 ( 0.00%)      }
      .           
      .               /// Tries to extract an inference variable from a type, returns `None`
      .               /// for types other than `ty::Infer(_)` (or `InferTy::Fresh*`).
     28 ( 0.00%)      pub fn maybe_from_ty(ty: Ty<'tcx>) -> Option<Self> {
  3,123 ( 0.00%)          match *ty.kind() {
    694 ( 0.00%)              ty::Infer(ty::TyVar(v)) => Some(TyOrConstInferVar::Ty(v)),
      .                       ty::Infer(ty::IntVar(v)) => Some(TyOrConstInferVar::TyInt(v)),
      .                       ty::Infer(ty::FloatVar(v)) => Some(TyOrConstInferVar::TyFloat(v)),
      .                       _ => None,
      .                   }
     28 ( 0.00%)      }
      .           
      .               /// Tries to extract an inference variable from a constant, returns `None`
      .               /// for constants other than `ty::ConstKind::Infer(_)` (or `InferConst::Fresh`).
      .               pub fn maybe_from_const(ct: &'tcx ty::Const<'tcx>) -> Option<Self> {
      .                   match ct.val {
      .                       ty::ConstKind::Infer(InferConst::Var(v)) => Some(TyOrConstInferVar::Const(v)),
      .                       _ => None,
      .                   }
-- line 1749 ----------------------------------------
-- line 1755 ----------------------------------------
      .           }
      .           
      .           impl<'a, 'tcx> TypeFolder<'tcx> for ShallowResolver<'a, 'tcx> {
      .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
      .                   self.infcx.tcx
      .               }
      .           
      .               fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {
 31,874 ( 0.01%)          self.infcx.shallow_resolve_ty(ty)
      .               }
      .           
      .               fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
      .                   if let ty::Const { val: ty::ConstKind::Infer(InferConst::Var(vid)), .. } = ct {
      .                       self.infcx
      .                           .inner
      .                           .borrow_mut()
      .                           .const_unification_table()
-- line 1771 ----------------------------------------
-- line 1818 ----------------------------------------
      .                       CompareImplTypeObligation { span, .. } => span,
      .                   }
      .               }
      .           
      .               pub fn from_obligation_cause<F>(cause: &traits::ObligationCause<'tcx>, default: F) -> Self
      .               where
      .                   F: FnOnce() -> Self,
      .               {
  3,943 ( 0.00%)          match *cause.code() {
    479 ( 0.00%)              traits::ObligationCauseCode::ReferenceOutlivesReferent(ref_type) => {
  2,395 ( 0.00%)                  SubregionOrigin::ReferenceOutlivesReferent(ref_type, cause.span)
      .                       }
      .           
      .                       traits::ObligationCauseCode::CompareImplMethodObligation {
      .                           impl_item_def_id,
      .                           trait_item_def_id,
      .                       } => SubregionOrigin::CompareImplMethodObligation {
      .                           span: cause.span,
      .                           impl_item_def_id,
-- line 1836 ----------------------------------------

120,507 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 417 ----------------------------------------
        .               /// # #![allow(unused_mut)]
        .               /// let mut vec: Vec<i32> = Vec::new();
        .               /// ```
        .               #[inline]
        .               #[rustc_const_stable(feature = "const_vec_new", since = "1.39.0")]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[must_use]
        .               pub const fn new() -> Self {
  440,438 ( 0.17%)          Vec { buf: RawVec::NEW, len: 0 }
       27 ( 0.00%)      }
        .           
        .               /// Constructs a new, empty `Vec<T>` with the specified capacity.
        .               ///
        .               /// The vector will be able to hold exactly `capacity` elements without
        .               /// reallocating. If `capacity` is 0, the vector will not allocate.
        .               ///
        .               /// It is important to note that although the returned vector has the
        .               /// *capacity* specified, the vector will have a zero *length*. For an
-- line 434 ----------------------------------------
-- line 601 ----------------------------------------
        .               /// vec.push(11);
        .               /// assert_eq!(vec.len(), 11);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[unstable(feature = "allocator_api", issue = "32838")]
        .               pub fn with_capacity_in(capacity: usize, alloc: A) -> Self {
  143,404 ( 0.06%)          Vec { buf: RawVec::with_capacity_in(capacity, alloc), len: 0 }
        .               }
        .           
        .               /// Creates a `Vec<T, A>` directly from the raw components of another vector.
        .               ///
        .               /// # Safety
        .               ///
        .               /// This is highly unsafe, due to the number of invariants that aren't
        .               /// checked:
-- line 617 ----------------------------------------
-- line 677 ----------------------------------------
        .               ///     // Put everything back together into a Vec
        .               ///     let rebuilt = Vec::from_raw_parts_in(p, len, cap, alloc.clone());
        .               ///     assert_eq!(rebuilt, [4, 5, 6]);
        .               /// }
        .               /// ```
        .               #[inline]
        .               #[unstable(feature = "allocator_api", issue = "32838")]
        .               pub unsafe fn from_raw_parts_in(ptr: *mut T, length: usize, capacity: usize, alloc: A) -> Self {
    9,712 ( 0.00%)          unsafe { Vec { buf: RawVec::from_raw_parts_in(ptr, capacity, alloc), len: length } }
        .               }
        .           
        .               /// Decomposes a `Vec<T>` into its raw components.
        .               ///
        .               /// Returns the raw pointer to the underlying data, the length of
        .               /// the vector (in elements), and the allocated capacity of the
        .               /// data (in elements). These are the same arguments in the same
        .               /// order as the arguments to [`from_raw_parts`].
-- line 693 ----------------------------------------
-- line 778 ----------------------------------------
        .               ///
        .               /// ```
        .               /// let vec: Vec<i32> = Vec::with_capacity(10);
        .               /// assert_eq!(vec.capacity(), 10);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn capacity(&self) -> usize {
   29,995 ( 0.01%)          self.buf.capacity()
        .               }
        .           
        .               /// Reserves capacity for at least `additional` more elements to be inserted
        .               /// in the given `Vec<T>`. The collection may reserve more space to avoid
        .               /// frequent reallocations. After calling `reserve`, capacity will be
        .               /// greater than or equal to `self.len() + additional`. Does nothing if
        .               /// capacity is already sufficient.
        .               ///
-- line 794 ----------------------------------------
-- line 801 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1];
        .               /// vec.reserve(10);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn reserve(&mut self, additional: usize) {
   27,752 ( 0.01%)          self.buf.reserve(self.len, additional);
        .               }
        .           
        .               /// Reserves the minimum capacity for exactly `additional` more elements to
        .               /// be inserted in the given `Vec<T>`. After calling `reserve_exact`,
        .               /// capacity will be greater than or equal to `self.len() + additional`.
        .               /// Does nothing if the capacity is already sufficient.
        .               ///
        .               /// Note that the allocator may give the collection more space than it
-- line 817 ----------------------------------------
-- line 829 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1];
        .               /// vec.reserve_exact(10);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn reserve_exact(&mut self, additional: usize) {
    1,825 ( 0.00%)          self.buf.reserve_exact(self.len, additional);
        .               }
        .           
        .               /// Tries to reserve capacity for at least `additional` more elements to be inserted
        .               /// in the given `Vec<T>`. The collection may reserve more space to avoid
        .               /// frequent reallocations. After calling `try_reserve`, capacity will be
        .               /// greater than or equal to `self.len() + additional`. Does nothing if
        .               /// capacity is already sufficient.
        .               ///
-- line 845 ----------------------------------------
-- line 930 ----------------------------------------
        .               /// assert!(vec.capacity() >= 3);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn shrink_to_fit(&mut self) {
        .                   // The capacity is never less than the length, and there's nothing to do when
        .                   // they are equal, so we can avoid the panic case in `RawVec::shrink_to_fit`
        .                   // by only calling it with a greater capacity.
    2,290 ( 0.00%)          if self.capacity() > self.len {
      769 ( 0.00%)              self.buf.shrink_to_fit(self.len);
        .                   }
        .               }
        .           
        .               /// Shrinks the capacity of the vector with a lower bound.
        .               ///
        .               /// The capacity will remain at least as large as both the length
        .               /// and the supplied value.
        .               ///
-- line 947 ----------------------------------------
-- line 990 ----------------------------------------
        .               /// let slice = vec.into_boxed_slice();
        .               /// assert_eq!(slice.into_vec().capacity(), 3);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn into_boxed_slice(mut self) -> Box<[T], A> {
        .                   unsafe {
        .                       self.shrink_to_fit();
      843 ( 0.00%)              let me = ManuallyDrop::new(self);
        .                       let buf = ptr::read(&me.buf);
        .                       let len = me.len();
        .                       buf.into_box(len).assume_init()
        .                   }
        .               }
        .           
        .               /// Shortens the vector, keeping the first `len` elements and dropping
        .               /// the rest.
-- line 1006 ----------------------------------------
-- line 1040 ----------------------------------------
        .               /// let mut vec = vec![1, 2, 3];
        .               /// vec.truncate(0);
        .               /// assert_eq!(vec, []);
        .               /// ```
        .               ///
        .               /// [`clear`]: Vec::clear
        .               /// [`drain`]: Vec::drain
        .               #[stable(feature = "rust1", since = "1.0.0")]
    8,512 ( 0.00%)      pub fn truncate(&mut self, len: usize) {
        .                   // This is safe because:
        .                   //
        .                   // * the slice passed to `drop_in_place` is valid; the `len > self.len`
        .                   //   case avoids creating an invalid slice, and
        .                   // * the `len` of the vector is shrunk before calling `drop_in_place`,
        .                   //   such that no value will be dropped twice in case `drop_in_place`
        .                   //   were to panic once (if it panics twice, the program aborts).
        .                   unsafe {
        .                       // Note: It's intentional that this is `>` and not `>=`.
        .                       //       Changing it to `>=` has negative performance
        .                       //       implications in some cases. See #78884 for more.
   12,225 ( 0.00%)              if len > self.len {
        .                           return;
        .                       }
        .                       let remaining_len = self.len - len;
        .                       let s = ptr::slice_from_raw_parts_mut(self.as_mut_ptr().add(len), remaining_len);
   17,656 ( 0.01%)              self.len = len;
      757 ( 0.00%)              ptr::drop_in_place(s);
        .                   }
   10,214 ( 0.00%)      }
        .           
        .               /// Extracts a slice containing the entire vector.
        .               ///
        .               /// Equivalent to `&s[..]`.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 1076 ----------------------------------------
-- line 1126 ----------------------------------------
        .               /// ```
        .               ///
        .               /// [`as_mut_ptr`]: Vec::as_mut_ptr
        .               #[stable(feature = "vec_as_ptr", since = "1.37.0")]
        .               #[inline]
        .               pub fn as_ptr(&self) -> *const T {
        .                   // We shadow the slice method of the same name to avoid going through
        .                   // `deref`, which creates an intermediate reference.
  439,441 ( 0.17%)          let ptr = self.buf.ptr();
        .                   unsafe {
        .                       assume(!ptr.is_null());
        .                   }
        .                   ptr
        .               }
        .           
        .               /// Returns an unsafe mutable pointer to the vector's buffer.
        .               ///
-- line 1142 ----------------------------------------
-- line 1162 ----------------------------------------
        .               /// }
        .               /// assert_eq!(&*x, &[0, 1, 2, 3]);
        .               /// ```
        .               #[stable(feature = "vec_as_ptr", since = "1.37.0")]
        .               #[inline]
        .               pub fn as_mut_ptr(&mut self) -> *mut T {
        .                   // We shadow the slice method of the same name to avoid going through
        .                   // `deref_mut`, which creates an intermediate reference.
  542,540 ( 0.21%)          let ptr = self.buf.ptr();
        .                   unsafe {
        .                       assume(!ptr.is_null());
        .                   }
        .                   ptr
        .               }
        .           
        .               /// Returns a reference to the underlying allocator.
        .               #[unstable(feature = "allocator_api", issue = "32838")]
-- line 1178 ----------------------------------------
-- line 1259 ----------------------------------------
        .               ///
        .               /// Normally, here, one would use [`clear`] instead to correctly drop
        .               /// the contents and thus not leak memory.
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub unsafe fn set_len(&mut self, new_len: usize) {
        .                   debug_assert!(new_len <= self.capacity());
        .           
   68,130 ( 0.03%)          self.len = new_len;
       60 ( 0.00%)      }
        .           
        .               /// Removes an element from the vector and returns it.
        .               ///
        .               /// The removed element is replaced by the last element of the vector.
        .               ///
        .               /// This does not preserve ordering, but is *O*(1).
        .               /// If you need to preserve the element order, use [`remove`] instead.
        .               ///
-- line 1276 ----------------------------------------
-- line 1329 ----------------------------------------
        .               /// let mut vec = vec![1, 2, 3];
        .               /// vec.insert(1, 4);
        .               /// assert_eq!(vec, [1, 4, 2, 3]);
        .               /// vec.insert(4, 5);
        .               /// assert_eq!(vec, [1, 4, 2, 3, 5]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
       42 ( 0.00%)      pub fn insert(&mut self, index: usize, element: T) {
        .                   #[cold]
        .                   #[inline(never)]
        .                   fn assert_failed(index: usize, len: usize) -> ! {
        .                       panic!("insertion index (is {}) should be <= len (is {})", index, len);
        .                   }
        .           
      127 ( 0.00%)          let len = self.len();
      262 ( 0.00%)          if index > len {
        .                       assert_failed(index, len);
        .                   }
        .           
        .                   // space for the new element
      756 ( 0.00%)          if len == self.buf.capacity() {
        .                       self.reserve(1);
        .                   }
        .           
        .                   unsafe {
        .                       // infallible
        .                       // The spot to put the new value
        .                       {
        .                           let p = self.as_mut_ptr().add(index);
        .                           // Shift everything over to make space. (Duplicating the
        .                           // `index`th element into two consecutive places.)
      771 ( 0.00%)                  ptr::copy(p, p.offset(1), len - index);
        .                           // Write it in, overwriting the first copy of the `index`th
        .                           // element.
        .                           ptr::write(p, element);
        .                       }
      756 ( 0.00%)              self.set_len(len + 1);
        .                   }
       36 ( 0.00%)      }
        .           
        .               /// Removes and returns the element at position `index` within the vector,
        .               /// shifting all elements after it to the left.
        .               ///
        .               /// Note: Because this shifts over the remaining elements, it has a
        .               /// worst-case performance of *O*(*n*). If you don't need the order of elements
        .               /// to be preserved, use [`swap_remove`] instead. If you'd like to remove
        .               /// elements from the beginning of the `Vec`, consider using
-- line 1376 ----------------------------------------
-- line 1395 ----------------------------------------
        .               pub fn remove(&mut self, index: usize) -> T {
        .                   #[cold]
        .                   #[inline(never)]
        .                   #[track_caller]
        .                   fn assert_failed(index: usize, len: usize) -> ! {
        .                       panic!("removal index (is {}) should be < len (is {})", index, len);
        .                   }
        .           
       26 ( 0.00%)          let len = self.len();
       90 ( 0.00%)          if index >= len {
        .                       assert_failed(index, len);
        .                   }
        .                   unsafe {
        .                       // infallible
        .                       let ret;
        .                       {
        .                           // the place we are taking from.
        .                           let ptr = self.as_mut_ptr().add(index);
        .                           // copy it out, unsafely having a copy of the value on
        .                           // the stack and in the vector at the same time.
      224 ( 0.00%)                  ret = ptr::read(ptr);
        .           
        .                           // Shift everything down to fill in that spot.
       56 ( 0.00%)                  ptr::copy(ptr.offset(1), ptr, len - index - 1);
        .                       }
       48 ( 0.00%)              self.set_len(len - 1);
        .                       ret
        .                   }
        .               }
        .           
        .               /// Retains only the elements specified by the predicate.
        .               ///
        .               /// In other words, remove all elements `e` such that `f(&e)` returns `false`.
        .               /// This method operates in place, visiting each element exactly once in the
-- line 1428 ----------------------------------------
-- line 1442 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1, 2, 3, 4, 5];
        .               /// let keep = [false, true, true, false, true];
        .               /// let mut iter = keep.iter();
        .               /// vec.retain(|_| *iter.next().unwrap());
        .               /// assert_eq!(vec, [2, 3, 5]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
   17,358 ( 0.01%)      pub fn retain<F>(&mut self, mut f: F)
        .               where
        .                   F: FnMut(&T) -> bool,
        .               {
    1,088 ( 0.00%)          self.retain_mut(|elem| f(elem));
   17,072 ( 0.01%)      }
        .           
        .               /// Retains only the elements specified by the predicate, passing a mutable reference to it.
        .               ///
        .               /// In other words, remove all elements `e` such that `f(&mut e)` returns `false`.
        .               /// This method operates in place, visiting each element exactly once in the
        .               /// original order, and preserves the order of the retained elements.
        .               ///
        .               /// # Examples
-- line 1463 ----------------------------------------
-- line 1474 ----------------------------------------
        .               /// });
        .               /// assert_eq!(vec, [2, 3, 4]);
        .               /// ```
        .               #[unstable(feature = "vec_retain_mut", issue = "90829")]
        .               pub fn retain_mut<F>(&mut self, mut f: F)
        .               where
        .                   F: FnMut(&mut T) -> bool,
        .               {
    2,281 ( 0.00%)          let original_len = self.len();
        .                   // Avoid double drop if the drop guard is not executed,
        .                   // since we may make some holes during the process.
        .                   unsafe { self.set_len(0) };
        .           
        .                   // Vec: [Kept, Kept, Hole, Hole, Hole, Hole, Unchecked, Unchecked]
        .                   //      |<-              processed len   ->| ^- next to check
        .                   //                  |<-  deleted cnt     ->|
        .                   //      |<-              original_len                          ->|
-- line 1490 ----------------------------------------
-- line 1499 ----------------------------------------
        .                       v: &'a mut Vec<T, A>,
        .                       processed_len: usize,
        .                       deleted_cnt: usize,
        .                       original_len: usize,
        .                   }
        .           
        .                   impl<T, A: Allocator> Drop for BackshiftOnDrop<'_, T, A> {
        .                       fn drop(&mut self) {
    1,650 ( 0.00%)                  if self.deleted_cnt > 0 {
        .                               // SAFETY: Trailing unchecked items must be valid since we never touch them.
        .                               unsafe {
        .                                   ptr::copy(
        .                                       self.v.as_ptr().add(self.processed_len),
      726 ( 0.00%)                              self.v.as_mut_ptr().add(self.processed_len - self.deleted_cnt),
        .                                       self.original_len - self.processed_len,
        .                                   );
        .                               }
        .                           }
        .                           // SAFETY: After filling holes, all items are in contiguous memory.
        .                           unsafe {
        2 ( 0.00%)                      self.v.set_len(self.original_len - self.deleted_cnt);
        .                           }
        .                       }
        .                   }
        .           
        .                   let mut g = BackshiftOnDrop { v: self, processed_len: 0, deleted_cnt: 0, original_len };
        .           
        .                   fn process_loop<F, T, A: Allocator, const DELETED: bool>(
        .                       original_len: usize,
        .                       f: &mut F,
        .                       g: &mut BackshiftOnDrop<'_, T, A>,
        .                   ) where
        .                       F: FnMut(&mut T) -> bool,
        .                   {
   35,551 ( 0.01%)              while g.processed_len != original_len {
        .                           // SAFETY: Unchecked element must be valid.
        .                           let cur = unsafe { &mut *g.v.as_mut_ptr().add(g.processed_len) };
    9,655 ( 0.00%)                  if !f(cur) {
        .                               // Advance early to avoid double drop if `drop_in_place` panicked.
       40 ( 0.00%)                      g.processed_len += 1;
        .                               g.deleted_cnt += 1;
        .                               // SAFETY: We never touch this element again after dropped.
        .                               unsafe { ptr::drop_in_place(cur) };
        .                               // We already advanced the counter.
        .                               if DELETED {
        .                                   continue;
        .                               } else {
        .                                   break;
-- line 1546 ----------------------------------------
-- line 1606 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec!["foo", "bar", "Bar", "baz", "bar"];
        .               ///
        .               /// vec.dedup_by(|a, b| a.eq_ignore_ascii_case(b));
        .               ///
        .               /// assert_eq!(vec, ["foo", "bar", "baz", "bar"]);
        .               /// ```
        .               #[stable(feature = "dedup_by", since = "1.16.0")]
    2,261 ( 0.00%)      pub fn dedup_by<F>(&mut self, mut same_bucket: F)
        .               where
        .                   F: FnMut(&mut T, &mut T) -> bool,
        .               {
      323 ( 0.00%)          let len = self.len();
    1,118 ( 0.00%)          if len <= 1 {
        .                       return;
        .                   }
        .           
        .                   /* INVARIANT: vec.len() > read >= write > write-1 >= 0 */
        .                   struct FillGapOnDrop<'a, T, A: core::alloc::Allocator> {
        .                       /* Offset of the element we want to check if it is duplicate */
        .                       read: usize,
        .           
-- line 1627 ----------------------------------------
-- line 1670 ----------------------------------------
        .                   let ptr = gap.vec.as_mut_ptr();
        .           
        .                   /* Drop items while going through Vec, it should be more efficient than
        .                    * doing slice partition_dedup + truncate */
        .           
        .                   /* SAFETY: Because of the invariant, read_ptr, prev_ptr and write_ptr
        .                    * are always in-bounds and read_ptr never aliases prev_ptr */
        .                   unsafe {
      222 ( 0.00%)              while gap.read < len {
        .                           let read_ptr = ptr.add(gap.read);
        .                           let prev_ptr = ptr.add(gap.write.wrapping_sub(1));
        .           
      122 ( 0.00%)                  if same_bucket(&mut *read_ptr, &mut *prev_ptr) {
        .                               // Increase `gap.read` now since the drop may panic.
        .                               gap.read += 1;
        .                               /* We have found duplicate, drop it in-place */
        .                               ptr::drop_in_place(read_ptr);
        .                           } else {
        .                               let write_ptr = ptr.add(gap.write);
        .           
        .                               /* Because `read_ptr` can be equal to `write_ptr`, we either
        .                                * have to use `copy` or conditional `copy_nonoverlapping`.
        .                                * Looks like the first option is faster. */
        .                               ptr::copy(read_ptr, write_ptr, 1);
        .           
        .                               /* We have filled that place, so go further */
       74 ( 0.00%)                      gap.write += 1;
        .                               gap.read += 1;
        .                           }
        .                       }
        .           
        .                       /* Technically we could let `gap` clean up with its Drop, but
        .                        * when `same_bucket` is guaranteed to not panic, this bloats a little
        .                        * the codegen, so we just do it manually */
        .                       gap.vec.set_len(gap.write);
        .                       mem::forget(gap);
        .                   }
    2,584 ( 0.00%)      }
        .           
        .               /// Appends an element to the back of a collection.
        .               ///
        .               /// # Panics
        .               ///
        .               /// Panics if the new capacity exceeds `isize::MAX` bytes.
        .               ///
        .               /// # Examples
-- line 1715 ----------------------------------------
-- line 1717 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1, 2];
        .               /// vec.push(3);
        .               /// assert_eq!(vec, [1, 2, 3]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
       15 ( 0.00%)      pub fn push(&mut self, value: T) {
        .                   // This will panic or abort if we would allocate > isize::MAX bytes
        .                   // or if the length increment would overflow for zero-sized types.
1,124,074 ( 0.44%)          if self.len == self.buf.capacity() {
   55,389 ( 0.02%)              self.buf.reserve_for_push(self.len);
        .                   }
        .                   unsafe {
   25,948 ( 0.01%)              let end = self.as_mut_ptr().add(self.len);
        .                       ptr::write(end, value);
1,316,763 ( 0.51%)              self.len += 1;
        .                   }
       12 ( 0.00%)      }
        .           
        .               /// Removes the last element from a vector and returns it, or [`None`] if it
        .               /// is empty.
        .               ///
        .               /// If you'd like to pop the first element, consider using
        .               /// [`VecDeque::pop_front`] instead.
        .               ///
        .               /// [`VecDeque::pop_front`]: crate::collections::VecDeque::pop_front
-- line 1744 ----------------------------------------
-- line 1748 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1, 2, 3];
        .               /// assert_eq!(vec.pop(), Some(3));
        .               /// assert_eq!(vec, [1, 2]);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn pop(&mut self) -> Option<T> {
  116,988 ( 0.05%)          if self.len == 0 {
        2 ( 0.00%)              None
        .                   } else {
        .                       unsafe {
   95,530 ( 0.04%)                  self.len -= 1;
   14,714 ( 0.01%)                  Some(ptr::read(self.as_ptr().add(self.len())))
        .                       }
        .                   }
        .               }
        .           
        .               /// Moves all the elements of `other` into `Self`, leaving `other` empty.
        .               ///
        .               /// # Panics
        .               ///
-- line 1769 ----------------------------------------
-- line 1776 ----------------------------------------
        .               /// let mut vec2 = vec![4, 5, 6];
        .               /// vec.append(&mut vec2);
        .               /// assert_eq!(vec, [1, 2, 3, 4, 5, 6]);
        .               /// assert_eq!(vec2, []);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "append", since = "1.4.0")]
       91 ( 0.00%)      pub fn append(&mut self, other: &mut Self) {
        .                   unsafe {
        .                       self.append_elements(other.as_slice() as _);
        .                       other.set_len(0);
        .                   }
       78 ( 0.00%)      }
        .           
        .               /// Appends elements to `Self` from other buffer.
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               unsafe fn append_elements(&mut self, other: *const [T]) {
        .                   let count = unsafe { (*other).len() };
        .                   self.reserve(count);
    2,449 ( 0.00%)          let len = self.len();
        .                   unsafe { ptr::copy_nonoverlapping(other as *const T, self.as_mut_ptr().add(len), count) };
   26,631 ( 0.01%)          self.len += count;
        .               }
        .           
        .               /// Creates a draining iterator that removes the specified range in the vector
        .               /// and yields the removed items.
        .               ///
        .               /// When the iterator **is** dropped, all elements in the range are removed
        .               /// from the vector, even if the iterator was not fully consumed. If the
        .               /// iterator **is not** dropped (with [`mem::forget`] for example), it is
-- line 1807 ----------------------------------------
-- line 1834 ----------------------------------------
        .                   // When the Drain is first created, it shortens the length of
        .                   // the source vector to make sure no uninitialized or moved-from elements
        .                   // are accessible at all if the Drain's destructor never gets to run.
        .                   //
        .                   // Drain will ptr::read out the values to remove.
        .                   // When finished, remaining tail of the vec is copied back to cover
        .                   // the hole, and the vector length is restored to the new length.
        .                   //
    4,472 ( 0.00%)          let len = self.len();
        .                   let Range { start, end } = slice::range(range, ..len);
        .           
        .                   unsafe {
        .                       // set self.vec length's to start, to be safe in case Drain is leaked
        .                       self.set_len(start);
        .                       // Use the borrow in the IterMut to indicate borrowing behavior of the
        .                       // whole Drain iterator (like &mut T).
        6 ( 0.00%)              let range_slice = slice::from_raw_parts_mut(self.as_mut_ptr().add(start), end - start);
       69 ( 0.00%)              Drain {
        .                           tail_start: end,
        6 ( 0.00%)                  tail_len: len - end,
        .                           iter: range_slice.iter(),
        .                           vec: NonNull::from(self),
        .                       }
        .                   }
        .               }
        .           
        .               /// Clears the vector, removing all values.
        .               ///
-- line 1861 ----------------------------------------
-- line 1869 ----------------------------------------
        .               ///
        .               /// v.clear();
        .               ///
        .               /// assert!(v.is_empty());
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn clear(&mut self) {
   14,972 ( 0.01%)          self.truncate(0)
        .               }
        .           
        .               /// Returns the number of elements in the vector, also referred to
        .               /// as its 'length'.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 1885 ----------------------------------------
-- line 1900 ----------------------------------------
        .               /// let mut v = Vec::new();
        .               /// assert!(v.is_empty());
        .               ///
        .               /// v.push(1);
        .               /// assert!(!v.is_empty());
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn is_empty(&self) -> bool {
   57,899 ( 0.02%)          self.len() == 0
        .               }
        .           
        .               /// Splits the collection into two at the given index.
        .               ///
        .               /// Returns a newly allocated vector containing the elements in the range
        .               /// `[at, len)`. After the call, the original vector will be left containing
        .               /// the elements `[0, at)` with its previous capacity unchanged.
        .               ///
-- line 1916 ----------------------------------------
-- line 1935 ----------------------------------------
        .                   A: Clone,
        .               {
        .                   #[cold]
        .                   #[inline(never)]
        .                   fn assert_failed(at: usize, len: usize) -> ! {
        .                       panic!("`at` split index (is {}) should be <= len (is {})", at, len);
        .                   }
        .           
      630 ( 0.00%)          if at > self.len() {
        .                       assert_failed(at, self.len());
        .                   }
        .           
      432 ( 0.00%)          if at == 0 {
        .                       // the new vector can take over the original buffer and avoid the copy
        .                       return mem::replace(
        .                           self,
        .                           Vec::with_capacity_in(self.capacity(), self.allocator().clone()),
        .                       );
        .                   }
        .           
        .                   let other_len = self.len - at;
-- line 1955 ----------------------------------------
-- line 1988 ----------------------------------------
        .               ///
        .               /// let mut vec = vec![];
        .               /// let mut p = 1;
        .               /// vec.resize_with(4, || { p *= 2; p });
        .               /// assert_eq!(vec, [2, 4, 8, 16]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "vec_resize_with", since = "1.33.0")]
    5,403 ( 0.00%)      pub fn resize_with<F>(&mut self, new_len: usize, f: F)
        .               where
        .                   F: FnMut() -> T,
        .               {
      743 ( 0.00%)          let len = self.len();
    1,486 ( 0.00%)          if new_len > len {
    5,422 ( 0.00%)              self.extend_with(new_len - len, ExtendFunc(f));
        .                   } else {
        .                       self.truncate(new_len);
        .                   }
    4,660 ( 0.00%)      }
        .           
        .               /// Consumes and leaks the `Vec`, returning a mutable reference to the contents,
        .               /// `&'a mut [T]`. Note that the type `T` must outlive the chosen lifetime
        .               /// `'a`. If the type has only static references, or none at all, then this
        .               /// may be chosen to be `'static`.
        .               ///
        .               /// As of Rust 1.57, this method does not reallocate or shrink the `Vec`,
        .               /// so the leaked allocation may include unused capacity that is not part
-- line 2014 ----------------------------------------
-- line 2070 ----------------------------------------
        .               #[stable(feature = "vec_spare_capacity", since = "1.60.0")]
        .               #[inline]
        .               pub fn spare_capacity_mut(&mut self) -> &mut [MaybeUninit<T>] {
        .                   // Note:
        .                   // This method is not implemented in terms of `split_at_spare_mut`,
        .                   // to prevent invalidation of pointers to the buffer.
        .                   unsafe {
        .                       slice::from_raw_parts_mut(
        2 ( 0.00%)                  self.as_mut_ptr().add(self.len) as *mut MaybeUninit<T>,
       39 ( 0.00%)                  self.buf.capacity() - self.len,
        .                       )
        .                   }
        .               }
        .           
        .               /// Returns vector content as a slice of `T`, along with the remaining spare
        .               /// capacity of the vector as a slice of `MaybeUninit<T>`.
        .               ///
        .               /// The returned spare capacity slice can be used to fill the vector with data
-- line 2087 ----------------------------------------
-- line 2193 ----------------------------------------
        .               /// assert_eq!(vec, [1, 2]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "vec_resize", since = "1.5.0")]
        .               pub fn resize(&mut self, new_len: usize, value: T) {
        .                   let len = self.len();
        .           
        .                   if new_len > len {
      966 ( 0.00%)              self.extend_with(new_len - len, ExtendElement(value))
        .                   } else {
        .                       self.truncate(new_len);
        .                   }
        .               }
        .           
        .               /// Clones and appends all elements in a slice to the `Vec`.
        .               ///
        .               /// Iterates over the slice `other`, clones each element, and then appends
-- line 2209 ----------------------------------------
-- line 2291 ----------------------------------------
        .               fn last(mut self) -> T {
        .                   (self.0)()
        .               }
        .           }
        .           
        .           impl<T, A: Allocator> Vec<T, A> {
        .               #[cfg(not(no_global_oom_handling))]
        .               /// Extend the vector by `n` values, using the given generator.
   13,960 ( 0.01%)      fn extend_with<E: ExtendWith<T>>(&mut self, n: usize, mut value: E) {
        .                   self.reserve(n);
        .           
        .                   unsafe {
    1,278 ( 0.00%)              let mut ptr = self.as_mut_ptr().add(self.len());
        .                       // Use SetLenOnDrop to work around bug where compiler
        .                       // might not realize the store through `ptr` through self.set_len()
        .                       // don't alias.
        .                       let mut local_len = SetLenOnDrop::new(&mut self.len);
        .           
        .                       // Write all elements except the last one
        .                       for _ in 1..n {
        .                           ptr::write(ptr, value.next());
        .                           ptr = ptr.offset(1);
        .                           // Increment the length in every step in case next() panics
        .                           local_len.increment_len(1);
        .                       }
        .           
   38,557 ( 0.01%)              if n > 0 {
        .                           // We can write the last element directly without cloning needlessly
        .                           ptr::write(ptr, value.last());
        .                           local_len.increment_len(1);
        .                       }
        .           
        .                       // len set by scope guard
        .                   }
   11,039 ( 0.00%)      }
        .           }
        .           
        .           impl<T: PartialEq, A: Allocator> Vec<T, A> {
        .               /// Removes consecutive repeated elements in the vector according to the
        .               /// [`PartialEq`] trait implementation.
        .               ///
        .               /// If the vector is sorted, this removes all duplicates.
        .               ///
-- line 2333 ----------------------------------------
-- line 2338 ----------------------------------------
        .               ///
        .               /// vec.dedup();
        .               ///
        .               /// assert_eq!(vec, [1, 2, 3, 2]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
        .               pub fn dedup(&mut self) {
      324 ( 0.00%)          self.dedup_by(|a, b| a == b)
        .               }
        .           }
        .           
        .           ////////////////////////////////////////////////////////////////////////////////
        .           // Internal methods and functions
        .           ////////////////////////////////////////////////////////////////////////////////
        .           
        .           #[doc(hidden)]
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
    4,438 ( 0.00%)  pub fn from_elem<T: Clone>(elem: T, n: usize) -> Vec<T> {
   25,680 ( 0.01%)      <T as SpecFromElem>::from_elem(elem, n, Global)
    5,301 ( 0.00%)  }
        .           
        .           #[doc(hidden)]
        .           #[cfg(not(no_global_oom_handling))]
        .           #[unstable(feature = "allocator_api", issue = "32838")]
        .           pub fn from_elem_in<T: Clone, A: Allocator>(elem: T, n: usize, alloc: A) -> Vec<T, A> {
        .               <T as SpecFromElem>::from_elem(elem, n, alloc)
        .           }
        .           
-- line 2367 ----------------------------------------
-- line 2424 ----------------------------------------
        .           // Common trait implementations for Vec
        .           ////////////////////////////////////////////////////////////////////////////////
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> ops::Deref for Vec<T, A> {
        .               type Target = [T];
        .           
        .               fn deref(&self) -> &[T] {
  675,491 ( 0.26%)          unsafe { slice::from_raw_parts(self.as_ptr(), self.len) }
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> ops::DerefMut for Vec<T, A> {
        .               fn deref_mut(&mut self) -> &mut [T] {
  131,514 ( 0.05%)          unsafe { slice::from_raw_parts_mut(self.as_mut_ptr(), self.len) }
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           trait SpecCloneFrom {
        .               fn clone_from(this: &mut Self, other: &Self);
        .           }
        .           
-- line 2447 ----------------------------------------
-- line 2468 ----------------------------------------
        .                   this.extend_from_slice(other);
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T: Clone, A: Allocator + Clone> Clone for Vec<T, A> {
        .               #[cfg(not(test))]
   48,212 ( 0.02%)      fn clone(&self) -> Self {
        .                   let alloc = self.allocator().clone();
        2 ( 0.00%)          <[T]>::to_vec_in(&**self, alloc)
   57,514 ( 0.02%)      }
        .           
        .               // HACK(japaric): with cfg(test) the inherent `[T]::to_vec` method, which is
        .               // required for this method definition, is not available. Instead use the
        .               // `slice::to_vec`  function which is only available with cfg(test)
        .               // NB see the slice::hack module in slice.rs for more information
        .               #[cfg(test)]
        .               fn clone(&self) -> Self {
        .                   let alloc = self.allocator().clone();
-- line 2487 ----------------------------------------
-- line 2518 ----------------------------------------
        .               message = "vector indices are of type `usize` or ranges of `usize`",
        .               label = "vector indices are of type `usize` or ranges of `usize`"
        .           )]
        .           impl<T, I: SliceIndex<[T]>, A: Allocator> Index<I> for Vec<T, A> {
        .               type Output = I::Output;
        .           
        .               #[inline]
        .               fn index(&self, index: I) -> &Self::Output {
   26,433 ( 0.01%)          Index::index(&**self, index)
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[rustc_on_unimplemented(
        .               message = "vector indices are of type `usize` or ranges of `usize`",
        .               label = "vector indices are of type `usize` or ranges of `usize`"
        .           )]
-- line 2534 ----------------------------------------
-- line 2539 ----------------------------------------
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T> FromIterator<T> for Vec<T> {
        .               #[inline]
        .               fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> Vec<T> {
  213,134 ( 0.08%)          <Self as SpecFromIter<T, I::IntoIter>>::from_iter(iter.into_iter())
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> IntoIterator for Vec<T, A> {
        .               type Item = T;
        .               type IntoIter = IntoIter<T, A>;
        .           
-- line 2555 ----------------------------------------
-- line 2564 ----------------------------------------
        .               /// for s in v.into_iter() {
        .               ///     // s has type String, not &String
        .               ///     println!("{}", s);
        .               /// }
        .               /// ```
        .               #[inline]
        .               fn into_iter(self) -> IntoIter<T, A> {
        .                   unsafe {
   91,063 ( 0.04%)              let mut me = ManuallyDrop::new(self);
        .                       let alloc = ptr::read(me.allocator());
        .                       let begin = me.as_mut_ptr();
        .                       let end = if mem::size_of::<T>() == 0 {
        .                           arith_offset(begin as *const i8, me.len() as isize) as *const T
        .                       } else {
        .                           begin.add(me.len()) as *const T
        .                       };
        .                       let cap = me.buf.capacity();
   23,827 ( 0.01%)              IntoIter {
        .                           buf: NonNull::new_unchecked(begin),
        .                           phantom: PhantomData,
        .                           cap,
        .                           alloc,
        .                           ptr: begin,
        .                           end,
        .                       }
        .                   }
-- line 2589 ----------------------------------------
-- line 2601 ----------------------------------------
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<'a, T, A: Allocator> IntoIterator for &'a mut Vec<T, A> {
        .               type Item = &'a mut T;
        .               type IntoIter = slice::IterMut<'a, T>;
        .           
        .               fn into_iter(self) -> slice::IterMut<'a, T> {
      628 ( 0.00%)          self.iter_mut()
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> Extend<T> for Vec<T, A> {
        .               #[inline]
       16 ( 0.00%)      fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {
  102,577 ( 0.04%)          <Self as SpecExtend<T, I::IntoIter>>::spec_extend(self, iter.into_iter())
       16 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn extend_one(&mut self, item: T) {
        .                   self.push(item);
        .               }
        .           
        .               #[inline]
        .               fn extend_reserve(&mut self, additional: usize) {
-- line 2627 ----------------------------------------
-- line 2636 ----------------------------------------
        .               fn extend_desugared<I: Iterator<Item = T>>(&mut self, mut iterator: I) {
        .                   // This is the case for a general iterator.
        .                   //
        .                   // This function should be the moral equivalent of:
        .                   //
        .                   //      for item in iterator {
        .                   //          self.push(item);
        .                   //      }
   15,872 ( 0.01%)          while let Some(element) = iterator.next() {
    5,398 ( 0.00%)              let len = self.len();
   31,679 ( 0.01%)              if len == self.capacity() {
      289 ( 0.00%)                  let (lower, _) = iterator.size_hint();
        .                           self.reserve(lower.saturating_add(1));
        .                       }
        .                       unsafe {
        .                           ptr::write(self.as_mut_ptr().add(len), element);
        .                           // Since next() executes user code which can panic we have to bump the length
        .                           // after each step.
        .                           // NB can't overflow since we would have had to alloc the address space
   26,665 ( 0.01%)                  self.set_len(len + 1);
        .                       }
        .                   }
      218 ( 0.00%)      }
        .           
        .               /// Creates a splicing iterator that replaces the specified range in the vector
        .               /// with the given `replace_with` iterator and yields the removed items.
        .               /// `replace_with` does not need to be the same length as `range`.
        .               ///
        .               /// `range` is removed even if the iterator is not consumed until the end.
        .               ///
        .               /// It is unspecified how many elements are removed from the vector
-- line 2666 ----------------------------------------
-- line 2745 ----------------------------------------
        .               /// assert_eq!(evens, vec![2, 4, 6, 8, 14]);
        .               /// assert_eq!(odds, vec![1, 3, 5, 9, 11, 13, 15]);
        .               /// ```
        .               #[unstable(feature = "drain_filter", reason = "recently added", issue = "43244")]
        .               pub fn drain_filter<F>(&mut self, filter: F) -> DrainFilter<'_, T, F, A>
        .               where
        .                   F: FnMut(&mut T) -> bool,
        .               {
      309 ( 0.00%)          let old_len = self.len();
        .           
        .                   // Guard against us getting leaked (leak amplification)
        .                   unsafe {
        .                       self.set_len(0);
        .                   }
        .           
       40 ( 0.00%)          DrainFilter { vec: self, idx: 0, del: 0, old_len, pred: filter, panic_flag: false }
        .               }
        .           }
        .           
        .           /// Extend implementation that copies elements out of references before pushing them onto the Vec.
        .           ///
        .           /// This implementation is specialized for slice iterators, where it uses [`copy_from_slice`] to
        .           /// append the entire slice at once.
        .           ///
-- line 2768 ----------------------------------------
-- line 2803 ----------------------------------------
        .               #[inline]
        .               fn cmp(&self, other: &Self) -> Ordering {
        .                   Ord::cmp(&**self, &**other)
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           unsafe impl<#[may_dangle] T, A: Allocator> Drop for Vec<T, A> {
  117,014 ( 0.05%)      fn drop(&mut self) {
        .                   unsafe {
        .                       // use drop for [T]
        .                       // use a raw slice to refer to the elements of the vector as weakest necessary type;
        .                       // could avoid questions of validity in certain cases
   52,527 ( 0.02%)              ptr::drop_in_place(ptr::slice_from_raw_parts_mut(self.as_mut_ptr(), self.len))
        .                   }
        .                   // RawVec handles deallocation
  137,514 ( 0.05%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[rustc_const_unstable(feature = "const_default_impls", issue = "87864")]
        .           impl<T> const Default for Vec<T> {
        .               /// Creates an empty `Vec<T>`.
        .               fn default() -> Vec<T> {
        .                   Vec::new()
-- line 2827 ----------------------------------------
-- line 2976 ----------------------------------------
        .               /// newly-allocated buffer with exactly the right capacity.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// assert_eq!(Box::from(vec![1, 2, 3]), vec![1, 2, 3].into_boxed_slice());
        .               /// ```
        .               fn from(v: Vec<T, A>) -> Self {
        4 ( 0.00%)          v.into_boxed_slice()
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl From<&str> for Vec<u8> {
        .               /// Allocate a `Vec<u8>` and fill it with a UTF-8 string.
        .               ///
-- line 2992 ----------------------------------------

  206,901 ( 0.08%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs>

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./elf/../sysdeps/x86_64/dl-machine.h
  ./elf/dl-lookup.c
  ./elf/do-rel.h
  ./malloc/malloc.c
  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S
  ./string/../sysdeps/x86_64/strcmp.S

--------------------------------------------------------------------------------
Ir                  
--------------------------------------------------------------------------------
73,815,121 (28.67%)  events annotated

