--------------------------------------------------------------------------------
I1 cache:         65536 B, 64 B, 4-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         67108864 B, 64 B, 64-way associative
Command:          /usr/home/liquid/.rustup/toolchains/w-profiling/bin/rustc --crate-name ryu --edition=2018 src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 -C metadata=bfbdd37616629df6 -C extra-filename=-bfbdd37616629df6 --out-dir /usr/home/liquid/tmp/.tmpJZMTM9/target/debug/deps -L dependency=/usr/home/liquid/tmp/.tmpJZMTM9/target/debug/deps -Adeprecated -Aunknown-lints -Zincremental-verify-ich
Data file:        results/cgout-w-profiling-ryu-1.0.9-Check-Full
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Thresholds:       0.1
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                   
--------------------------------------------------------------------------------
386,689,020 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                   file:function
--------------------------------------------------------------------------------
10,730,834 ( 2.78%)  ./malloc/malloc.c:_int_malloc
10,315,924 ( 2.67%)  ./malloc/malloc.c:_int_free
10,305,124 ( 2.66%)  ./elf/dl-lookup.c:_dl_lookup_symbol_x
 6,573,584 ( 1.70%)  ./malloc/malloc.c:malloc
 5,386,238 ( 1.39%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_avx_unaligned_erms
 4,835,679 ( 1.25%)  ./elf/dl-lookup.c:do_lookup_x
 4,141,271 ( 1.07%)  ./elf/../sysdeps/x86_64/dl-machine.h:_dl_relocate_object
 2,981,409 ( 0.77%)  ./malloc/malloc.c:free
 2,139,033 ( 0.55%)  ./elf/do-rel.h:_dl_relocate_object
 2,062,408 ( 0.53%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilder<rustc_span::def_id::LocalDefId, (&rustc_middle::ty::context::TypeckResults, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_span::def_id::LocalDefId>
 1,990,381 ( 0.51%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 1,976,384 ( 0.51%)  ./malloc/malloc.c:malloc_consolidate
 1,671,154 ( 0.43%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 1,619,973 ( 0.42%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 1,483,098 ( 0.38%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs:<rustc_infer::infer::InferCtxt>::shallow_resolve_ty
 1,362,217 ( 0.35%)  ???:SetImpliedBits(llvm::FeatureBitset&, llvm::FeatureBitset const&, llvm::ArrayRef<llvm::SubtargetFeatureKV>)
 1,236,793 ( 0.32%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
 1,204,621 ( 0.31%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_borrowck/src/lib.rs:<rustc_borrowck::MirBorrowckCtxt>::access_place
 1,195,264 ( 0.31%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs:<rustc_data_structures::sip128::SipHasher128>::short_write_process_buffer::<u64>
 1,185,992 ( 0.31%)  ./malloc/malloc.c:unlink_chunk.constprop.0
 1,076,682 ( 0.28%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/mod.rs:<rustc_parse::lexer::StringReader>::next_token
 1,048,400 ( 0.27%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs:<rustc_span::caching_source_map_view::CachingSourceMapView>::span_data_to_lines_and_cols
   994,624 ( 0.26%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/hir/map/mod.rs:<rustc_middle::hir::map::Map>::find_parent_node
   994,416 ( 0.26%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/hir/map/mod.rs:<rustc_middle::hir::map::Map>::attrs
   950,369 ( 0.25%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::Parser>::check
   923,348 ( 0.24%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::Binder<rustc_middle::ty::PredicateKind>, rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>>::{closure#0}>
   903,600 ( 0.23%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_dataflow/src/drop_flag_effects.rs:rustc_mir_dataflow::drop_flag_effects::on_all_children_bits::is_terminal_path
   880,380 ( 0.23%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/type_variable.rs:<rustc_infer::infer::type_variable::TypeVariableTable>::probe
   864,856 ( 0.22%)  ./elf/dl-lookup.c:check_match
   863,432 ( 0.22%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lexer/src/lib.rs:<rustc_lexer::cursor::Cursor>::advance_token
   863,359 ( 0.22%)  /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs:__rdl_alloc
   826,592 ( 0.21%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<std::collections::hash::map::HashMap<rustc_middle::middle::region::Scope, (rustc_middle::middle::region::Scope, u32), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::get::<rustc_middle::middle::region::Scope>
   824,492 ( 0.21%)  ./malloc/malloc.c:realloc
   801,792 ( 0.21%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs:<rustc_data_structures::sip128::SipHasher128>::short_write_process_buffer::<u64>
   766,310 ( 0.20%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<rustc_span::span_encoding::Span as rustc_data_structures::stable_hasher::HashStable<rustc_query_system::ich::hcx::StableHashingContext>>::hash_stable
   764,775 ( 0.20%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/tokentrees.rs:<rustc_parse::lexer::tokentrees::TokenTreesReader>::parse_token_tree
   759,741 ( 0.20%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilder<rustc_span::def_id::LocalDefId, (&rustc_middle::ty::context::TypeckResults, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_span::def_id::LocalDefId>
   730,409 ( 0.19%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs:<rustc_metadata::rmeta::decoder::DecodeContext as rustc_serialize::serialize::Decoder>::read_u32
   729,282 ( 0.19%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::TyCtxt>::maybe_lint_level_root_bounded
   723,023 ( 0.19%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}> as core::iter::traits::iterator::Iterator>::fold::<(), core::iter::traits::iterator::Iterator::for_each::call<rustc_metadata::rmeta::decoder::ImportedSourceFile, <alloc::vec::Vec<rustc_metadata::rmeta::decoder::ImportedSourceFile> as alloc::vec::spec_extend::SpecExtend<rustc_metadata::rmeta::decoder::ImportedSourceFile, core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}>>>::spec_extend::{closure#0}>::{closure#0}>
   720,640 ( 0.19%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<rustc_span::source_map::SourceMap>::new_imported_source_file
   719,048 ( 0.19%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<rustc_span::source_map::SourceMap>::new_imported_source_file
   696,202 ( 0.18%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs:<rustc_span::source_map::SourceMap>::lookup_source_file_idx
   688,506 ( 0.18%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::TokenCursor>::next
   687,088 ( 0.18%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs:<rustc_middle::hir::map::Map>::attrs
   685,715 ( 0.18%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/obligation_forest/mod.rs:<rustc_data_structures::obligation_forest::ObligationForest<rustc_trait_selection::traits::fulfill::PendingPredicateObligation>>::process_obligations::<rustc_trait_selection::traits::fulfill::FulfillProcessor, rustc_data_structures::obligation_forest::Outcome<rustc_trait_selection::traits::fulfill::PendingPredicateObligation, rustc_infer::traits::FulfillmentErrorCode>>
   673,313 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/token.rs:<rustc_ast::token::TokenKind as core::clone::Clone>::clone
   668,129 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::Parser>::bump
   633,330 ( 0.16%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<[rustc_middle::ty::subst::GenericArg], rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>>::{closure#0}>
   616,746 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs:<rustc_span::span_encoding::Span as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
   611,515 ( 0.16%)  ./string/../sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S:__memcmp_avx2_movbe
   607,145 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/undo_log.rs:<rustc_infer::infer::InferCtxtInner>::rollback_to
   603,655 ( 0.16%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-hash-1.1.0/src/lib.rs:<&str as core::hash::Hash>::hash::<rustc_hash::FxHasher>
   586,302 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::TyCtxt>::_intern_substs
   580,411 ( 0.15%)  ./malloc/malloc.c:_int_realloc
   580,167 ( 0.15%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.7.0/src/lib.rs:<smallvec::SmallVec<[rustc_mir_dataflow::move_paths::InitIndex; 4]>>::try_reserve
   578,995 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::TyKind as core::hash::Hash>::hash::<rustc_hash::FxHasher>
   576,590 ( 0.15%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
   569,344 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::CtxtInterners>::intern_ty
   568,462 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<rustc_middle::ty::context::TyCtxt>::_intern_substs
   567,720 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_build/src/thir/cx/expr.rs:<rustc_mir_build::thir::cx::Cx>::mirror_expr_inner
   561,714 ( 0.15%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(rustc_span::def_id::DefId, rustc_query_system::query::plumbing::QueryResult<rustc_middle::dep_graph::dep_node::DepKind>)>>::remove_entry::<hashbrown::map::equivalent_key<rustc_span::def_id::DefId, rustc_span::def_id::DefId, rustc_query_system::query::plumbing::QueryResult<rustc_middle::dep_graph::dep_node::DepKind>>::{closure#0}>
   559,359 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cell.rs:<rustc_middle::hir::map::Map>::attrs
   552,022 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/middle/region.rs:<rustc_middle::middle::region::ScopeTree>::temporary_scope
   544,229 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/../../stdarch/crates/core_arch/src/x86/sse2.rs:<hashbrown::map::RawEntryBuilder<rustc_span::def_id::LocalDefId, (&rustc_middle::ty::context::TypeckResults, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_span::def_id::LocalDefId>
   539,019 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs:<rustc_span::span_encoding::Span as rustc_data_structures::stable_hasher::HashStable<rustc_query_system::ich::hcx::StableHashingContext>>::hash_stable
   537,156 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs:<rustc_metadata::rmeta::decoder::DecodeContext as rustc_serialize::serialize::Decoder>::read_u32
   529,040 ( 0.14%)  ./string/../sysdeps/x86_64/strcmp.S:strcmp
   528,700 ( 0.14%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<[rustc_middle::ty::subst::GenericArg], rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>>::{closure#0}>
   525,992 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_typeck/src/check/coercion.rs:<rustc_typeck::check::coercion::Coerce>::coerce
   523,556 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/freshen.rs:<rustc_infer::infer::freshen::TypeFreshener as rustc_middle::ty::fold::TypeFolder>::fold_ty
   520,505 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs:<core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}> as core::iter::traits::iterator::Iterator>::fold::<(), core::iter::traits::iterator::Iterator::for_each::call<rustc_metadata::rmeta::decoder::ImportedSourceFile, <alloc::vec::Vec<rustc_metadata::rmeta::decoder::ImportedSourceFile> as alloc::vec::spec_extend::SpecExtend<rustc_metadata::rmeta::decoder::ImportedSourceFile, core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}>>>::spec_extend::{closure#0}>::{closure#0}>
   517,086 ( 0.13%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(rustc_span::symbol::Symbol, usize)>>::reserve_rehash::<hashbrown::map::make_hasher<rustc_span::symbol::Symbol, rustc_span::symbol::Symbol, usize, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>::{closure#0}>
   513,606 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/token.rs:<rustc_ast::token::TokenKind as core::cmp::PartialEq>::eq
   505,972 ( 0.13%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::HashMap<rustc_hir::hir_id::ItemLocalId, &rustc_middle::ty::TyS, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::insert
   499,939 ( 0.13%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.14/src/lib.rs:stacker::remaining_stack
   498,001 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/tokenstream.rs:<rustc_ast::tokenstream::Cursor>::next_with_spacing
   495,772 ( 0.13%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<rustc_middle::ty::context::TypeckResults>::node_type_opt
   491,625 ( 0.13%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/md-5-0.9.1/src/utils.rs:md5::utils::compress
   481,647 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/undo_log.rs:<rustc_infer::infer::InferCtxtInner as ena::undo_log::Rollback<rustc_infer::infer::undo_log::UndoLog>>::reverse
   479,637 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}> as core::iter::traits::iterator::Iterator>::fold::<(), core::iter::traits::iterator::Iterator::for_each::call<rustc_metadata::rmeta::decoder::ImportedSourceFile, <alloc::vec::Vec<rustc_metadata::rmeta::decoder::ImportedSourceFile> as alloc::vec::spec_extend::SpecExtend<rustc_metadata::rmeta::decoder::ImportedSourceFile, core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}>>>::spec_extend::{closure#0}>::{closure#0}>
   472,603 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/fulfill.rs:<rustc_data_structures::obligation_forest::ObligationForest<rustc_trait_selection::traits::fulfill::PendingPredicateObligation>>::process_obligations::<rustc_trait_selection::traits::fulfill::FulfillProcessor, rustc_data_structures::obligation_forest::Outcome<rustc_trait_selection::traits::fulfill::PendingPredicateObligation, rustc_infer::traits::FulfillmentErrorCode>>
   466,636 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_dataflow/src/drop_flag_effects.rs:rustc_mir_dataflow::drop_flag_effects::drop_flag_effects_for_location::<<rustc_mir_dataflow::impls::MaybeUninitializedPlaces as rustc_mir_dataflow::framework::GenKillAnalysis>::statement_effect<rustc_index::bit_set::BitSet<rustc_mir_dataflow::move_paths::MovePathIndex>>::{closure#0}>
   459,321 ( 0.12%)  ???:llvm::StringMapImpl::LookupBucketFor(llvm::StringRef)
   456,483 ( 0.12%)  ./malloc/malloc.c:calloc
   455,030 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/token.rs:<rustc_ast::token::Token>::is_keyword
   447,877 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_borrowck/src/type_check/mod.rs:<rustc_borrowck::type_check::TypeChecker>::typeck_mir
   446,916 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_build/src/thir/cx/expr.rs:<rustc_mir_build::thir::cx::Cx>::make_mirror_unadjusted
   434,283 ( 0.11%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/bitmask.rs:<hashbrown::map::RawEntryBuilder<rustc_span::def_id::LocalDefId, (&rustc_middle::ty::context::TypeckResults, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_span::def_id::LocalDefId>
   430,008 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs:md5::utils::compress
   429,930 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs:<rustc_infer::infer::InferCtxt>::start_snapshot
   428,816 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fold.rs:<&rustc_middle::ty::TyS as rustc_middle::ty::fold::TypeFoldable>::super_fold_with::<rustc_infer::infer::resolve::OpportunisticVarResolver>
   427,219 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::CtxtInterners>::intern_predicate
   422,821 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_typeck/src/check/regionck.rs:<rustc_typeck::check::regionck::RegionCtxt as rustc_hir::intravisit::Visitor>::visit_expr
   419,406 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lint/src/levels.rs:<rustc_lint::levels::LintLevelsBuilder>::push
   415,170 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/span_encoding.rs:<rustc_span::span_encoding::Span>::to
   415,047 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_typeck/src/check/writeback.rs:<rustc_typeck::check::writeback::WritebackCx>::visit_node_id
   414,232 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs:<alloc::vec::Vec<rustc_parse::parser::TokenType>>::truncate
   411,594 ( 0.11%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(rustc_hir::hir_id::ItemLocalId, ())>>::insert::<hashbrown::map::make_hasher<rustc_hir::hir_id::ItemLocalId, rustc_hir::hir_id::ItemLocalId, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>::{closure#0}>
   403,560 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/walk.rs:<rustc_middle::ty::walk::TypeWalker as core::iter::traits::iterator::Iterator>::next
   401,400 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/query/type_op/mod.rs:<rustc_middle::ty::ParamEnvAnd<rustc_middle::traits::query::type_op::Normalize<&rustc_middle::ty::TyS>> as rustc_trait_selection::traits::query::type_op::TypeOp>::fully_perform
   400,619 ( 0.10%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::Binder<rustc_middle::ty::PredicateKind>, rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>>::{closure#0}>
   400,555 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/into_iter.rs:<alloc::vec::into_iter::IntoIter<rustc_infer::traits::Obligation<rustc_middle::ty::Predicate>> as core::ops::drop::Drop>::drop
   389,833 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_borrowck/src/lib.rs:<rustc_borrowck::MirBorrowckCtxt as rustc_mir_dataflow::framework::visitor::ResultsVisitor>::visit_statement_before_primary_effect
   386,866 ( 0.10%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(rustc_ast::node_id::NodeId, alloc::vec::Vec<rustc_lint_defs::BufferedEarlyLint>)>>::remove_entry::<hashbrown::map::equivalent_key<rustc_ast::node_id::NodeId, rustc_ast::node_id::NodeId, alloc::vec::Vec<rustc_lint_defs::BufferedEarlyLint>>::{closure#0}>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-hash-1.1.0/src/lib.rs
--------------------------------------------------------------------------------
Ir               

-- line 71 ----------------------------------------
      .               fn default() -> FxHasher {
      .                   FxHasher { hash: 0 }
      .               }
      .           }
      .           
      .           impl FxHasher {
      .               #[inline]
      .               fn add_to_hash(&mut self, i: usize) {
192,698 ( 0.05%)          self.hash = self.hash.rotate_left(5).bitxor(i).wrapping_mul(K);
      .               }
      .           }
      .           
      .           impl Hasher for FxHasher {
      .               #[inline]
  3,952 ( 0.00%)      fn write(&mut self, mut bytes: &[u8]) {
      .                   #[cfg(target_pointer_width = "32")]
      .                   let read_usize = |bytes: &[u8]| u32::from_ne_bytes(bytes[..4].try_into().unwrap());
      .                   #[cfg(target_pointer_width = "64")]
      .                   let read_usize = |bytes: &[u8]| u64::from_ne_bytes(bytes[..8].try_into().unwrap());
      .           
 33,720 ( 0.01%)          let mut hash = FxHasher { hash: self.hash };
      .                   assert!(size_of::<usize>() <= 8);
451,244 ( 0.12%)          while bytes.len() >= size_of::<usize>() {
      .                       hash.add_to_hash(read_usize(bytes) as usize);
      .                       bytes = &bytes[size_of::<usize>()..];
      .                   }
 67,782 ( 0.02%)          if (size_of::<usize>() > 4) && (bytes.len() >= 4) {
      .                       hash.add_to_hash(u32::from_ne_bytes(bytes[..4].try_into().unwrap()) as usize);
      .                       bytes = &bytes[4..];
      .                   }
 67,782 ( 0.02%)          if (size_of::<usize>() > 2) && bytes.len() >= 2 {
      .                       hash.add_to_hash(u16::from_ne_bytes(bytes[..2].try_into().unwrap()) as usize);
      .                       bytes = &bytes[2..];
      .                   }
 74,398 ( 0.02%)          if (size_of::<usize>() > 1) && bytes.len() >= 1 {
 16,765 ( 0.00%)              hash.add_to_hash(bytes[0] as usize);
      .                   }
  4,267 ( 0.00%)          self.hash = hash.hash;
  3,952 ( 0.00%)      }
      .           
      .               #[inline]
      .               fn write_u8(&mut self, i: u8) {
  1,835 ( 0.00%)          self.add_to_hash(i as usize);
      .               }
      .           
      .               #[inline]
      .               fn write_u16(&mut self, i: u16) {
     13 ( 0.00%)          self.add_to_hash(i as usize);
      .               }
      .           
      .               #[inline]
      .               fn write_u32(&mut self, i: u32) {
603,285 ( 0.16%)          self.add_to_hash(i as usize);
      .               }
      .           
      .               #[cfg(target_pointer_width = "32")]
      .               #[inline]
      .               fn write_u64(&mut self, i: u64) {
      .                   self.add_to_hash(i as usize);
      .                   self.add_to_hash((i >> 32) as usize);
      .               }
-- line 131 ----------------------------------------

     16 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-hash-1.1.0/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 417 ----------------------------------------
        .               /// # #![allow(unused_mut)]
        .               /// let mut vec: Vec<i32> = Vec::new();
        .               /// ```
        .               #[inline]
        .               #[rustc_const_stable(feature = "const_vec_new", since = "1.39.0")]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[must_use]
        .               pub const fn new() -> Self {
  731,518 ( 0.19%)          Vec { buf: RawVec::NEW, len: 0 }
       97 ( 0.00%)      }
        .           
        .               /// Constructs a new, empty `Vec<T>` with the specified capacity.
        .               ///
        .               /// The vector will be able to hold exactly `capacity` elements without
        .               /// reallocating. If `capacity` is 0, the vector will not allocate.
        .               ///
        .               /// It is important to note that although the returned vector has the
        .               /// *capacity* specified, the vector will have a zero *length*. For an
-- line 434 ----------------------------------------
-- line 601 ----------------------------------------
        .               /// vec.push(11);
        .               /// assert_eq!(vec.len(), 11);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[unstable(feature = "allocator_api", issue = "32838")]
        .               pub fn with_capacity_in(capacity: usize, alloc: A) -> Self {
  157,115 ( 0.04%)          Vec { buf: RawVec::with_capacity_in(capacity, alloc), len: 0 }
        .               }
        .           
        .               /// Creates a `Vec<T, A>` directly from the raw components of another vector.
        .               ///
        .               /// # Safety
        .               ///
        .               /// This is highly unsafe, due to the number of invariants that aren't
        .               /// checked:
-- line 617 ----------------------------------------
-- line 677 ----------------------------------------
        .               ///     // Put everything back together into a Vec
        .               ///     let rebuilt = Vec::from_raw_parts_in(p, len, cap, alloc.clone());
        .               ///     assert_eq!(rebuilt, [4, 5, 6]);
        .               /// }
        .               /// ```
        .               #[inline]
        .               #[unstable(feature = "allocator_api", issue = "32838")]
        .               pub unsafe fn from_raw_parts_in(ptr: *mut T, length: usize, capacity: usize, alloc: A) -> Self {
    8,146 ( 0.00%)          unsafe { Vec { buf: RawVec::from_raw_parts_in(ptr, capacity, alloc), len: length } }
        .               }
        .           
        .               /// Decomposes a `Vec<T>` into its raw components.
        .               ///
        .               /// Returns the raw pointer to the underlying data, the length of
        .               /// the vector (in elements), and the allocated capacity of the
        .               /// data (in elements). These are the same arguments in the same
        .               /// order as the arguments to [`from_raw_parts`].
-- line 693 ----------------------------------------
-- line 778 ----------------------------------------
        .               ///
        .               /// ```
        .               /// let vec: Vec<i32> = Vec::with_capacity(10);
        .               /// assert_eq!(vec.capacity(), 10);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn capacity(&self) -> usize {
   60,487 ( 0.02%)          self.buf.capacity()
        .               }
        .           
        .               /// Reserves capacity for at least `additional` more elements to be inserted
        .               /// in the given `Vec<T>`. The collection may reserve more space to avoid
        .               /// frequent reallocations. After calling `reserve`, capacity will be
        .               /// greater than or equal to `self.len() + additional`. Does nothing if
        .               /// capacity is already sufficient.
        .               ///
-- line 794 ----------------------------------------
-- line 801 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1];
        .               /// vec.reserve(10);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn reserve(&mut self, additional: usize) {
   44,350 ( 0.01%)          self.buf.reserve(self.len, additional);
        .               }
        .           
        .               /// Reserves the minimum capacity for exactly `additional` more elements to
        .               /// be inserted in the given `Vec<T>`. After calling `reserve_exact`,
        .               /// capacity will be greater than or equal to `self.len() + additional`.
        .               /// Does nothing if the capacity is already sufficient.
        .               ///
        .               /// Note that the allocator may give the collection more space than it
-- line 817 ----------------------------------------
-- line 829 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1];
        .               /// vec.reserve_exact(10);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn reserve_exact(&mut self, additional: usize) {
    1,643 ( 0.00%)          self.buf.reserve_exact(self.len, additional);
        .               }
        .           
        .               /// Tries to reserve capacity for at least `additional` more elements to be inserted
        .               /// in the given `Vec<T>`. The collection may reserve more space to avoid
        .               /// frequent reallocations. After calling `try_reserve`, capacity will be
        .               /// greater than or equal to `self.len() + additional`. Does nothing if
        .               /// capacity is already sufficient.
        .               ///
-- line 845 ----------------------------------------
-- line 930 ----------------------------------------
        .               /// assert!(vec.capacity() >= 3);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn shrink_to_fit(&mut self) {
        .                   // The capacity is never less than the length, and there's nothing to do when
        .                   // they are equal, so we can avoid the panic case in `RawVec::shrink_to_fit`
        .                   // by only calling it with a greater capacity.
    5,675 ( 0.00%)          if self.capacity() > self.len {
    1,289 ( 0.00%)              self.buf.shrink_to_fit(self.len);
        .                   }
        .               }
        .           
        .               /// Shrinks the capacity of the vector with a lower bound.
        .               ///
        .               /// The capacity will remain at least as large as both the length
        .               /// and the supplied value.
        .               ///
-- line 947 ----------------------------------------
-- line 990 ----------------------------------------
        .               /// let slice = vec.into_boxed_slice();
        .               /// assert_eq!(slice.into_vec().capacity(), 3);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn into_boxed_slice(mut self) -> Box<[T], A> {
        .                   unsafe {
        .                       self.shrink_to_fit();
    2,218 ( 0.00%)              let me = ManuallyDrop::new(self);
        .                       let buf = ptr::read(&me.buf);
        .                       let len = me.len();
        .                       buf.into_box(len).assume_init()
        .                   }
        .               }
        .           
        .               /// Shortens the vector, keeping the first `len` elements and dropping
        .               /// the rest.
-- line 1006 ----------------------------------------
-- line 1040 ----------------------------------------
        .               /// let mut vec = vec![1, 2, 3];
        .               /// vec.truncate(0);
        .               /// assert_eq!(vec, []);
        .               /// ```
        .               ///
        .               /// [`clear`]: Vec::clear
        .               /// [`drain`]: Vec::drain
        .               #[stable(feature = "rust1", since = "1.0.0")]
   61,937 ( 0.02%)      pub fn truncate(&mut self, len: usize) {
        .                   // This is safe because:
        .                   //
        .                   // * the slice passed to `drop_in_place` is valid; the `len > self.len`
        .                   //   case avoids creating an invalid slice, and
        .                   // * the `len` of the vector is shrunk before calling `drop_in_place`,
        .                   //   such that no value will be dropped twice in case `drop_in_place`
        .                   //   were to panic once (if it panics twice, the program aborts).
        .                   unsafe {
        .                       // Note: It's intentional that this is `>` and not `>=`.
        .                       //       Changing it to `>=` has negative performance
        .                       //       implications in some cases. See #78884 for more.
   51,260 ( 0.01%)              if len > self.len {
        .                           return;
        .                       }
        .                       let remaining_len = self.len - len;
        .                       let s = ptr::slice_from_raw_parts_mut(self.as_mut_ptr().add(len), remaining_len);
   43,399 ( 0.01%)              self.len = len;
    1,079 ( 0.00%)              ptr::drop_in_place(s);
        .                   }
   74,324 ( 0.02%)      }
        .           
        .               /// Extracts a slice containing the entire vector.
        .               ///
        .               /// Equivalent to `&s[..]`.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 1076 ----------------------------------------
-- line 1126 ----------------------------------------
        .               /// ```
        .               ///
        .               /// [`as_mut_ptr`]: Vec::as_mut_ptr
        .               #[stable(feature = "vec_as_ptr", since = "1.37.0")]
        .               #[inline]
        .               pub fn as_ptr(&self) -> *const T {
        .                   // We shadow the slice method of the same name to avoid going through
        .                   // `deref`, which creates an intermediate reference.
1,001,063 ( 0.26%)          let ptr = self.buf.ptr();
        .                   unsafe {
        .                       assume(!ptr.is_null());
        .                   }
        .                   ptr
        .               }
        .           
        .               /// Returns an unsafe mutable pointer to the vector's buffer.
        .               ///
-- line 1142 ----------------------------------------
-- line 1162 ----------------------------------------
        .               /// }
        .               /// assert_eq!(&*x, &[0, 1, 2, 3]);
        .               /// ```
        .               #[stable(feature = "vec_as_ptr", since = "1.37.0")]
        .               #[inline]
        .               pub fn as_mut_ptr(&mut self) -> *mut T {
        .                   // We shadow the slice method of the same name to avoid going through
        .                   // `deref_mut`, which creates an intermediate reference.
  802,663 ( 0.21%)          let ptr = self.buf.ptr();
        .                   unsafe {
        .                       assume(!ptr.is_null());
        .                   }
        .                   ptr
        .               }
        .           
        .               /// Returns a reference to the underlying allocator.
        .               #[unstable(feature = "allocator_api", issue = "32838")]
-- line 1178 ----------------------------------------
-- line 1259 ----------------------------------------
        .               ///
        .               /// Normally, here, one would use [`clear`] instead to correctly drop
        .               /// the contents and thus not leak memory.
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub unsafe fn set_len(&mut self, new_len: usize) {
        .                   debug_assert!(new_len <= self.capacity());
        .           
  110,834 ( 0.03%)          self.len = new_len;
       64 ( 0.00%)      }
        .           
        .               /// Removes an element from the vector and returns it.
        .               ///
        .               /// The removed element is replaced by the last element of the vector.
        .               ///
        .               /// This does not preserve ordering, but is *O*(1).
        .               /// If you need to preserve the element order, use [`remove`] instead.
        .               ///
-- line 1276 ----------------------------------------
-- line 1329 ----------------------------------------
        .               /// let mut vec = vec![1, 2, 3];
        .               /// vec.insert(1, 4);
        .               /// assert_eq!(vec, [1, 4, 2, 3]);
        .               /// vec.insert(4, 5);
        .               /// assert_eq!(vec, [1, 4, 2, 3, 5]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
      959 ( 0.00%)      pub fn insert(&mut self, index: usize, element: T) {
        .                   #[cold]
        .                   #[inline(never)]
        .                   fn assert_failed(index: usize, len: usize) -> ! {
        .                       panic!("insertion index (is {}) should be <= len (is {})", index, len);
        .                   }
        .           
      137 ( 0.00%)          let len = self.len();
      276 ( 0.00%)          if index > len {
        .                       assert_failed(index, len);
        .                   }
        .           
        .                   // space for the new element
      336 ( 0.00%)          if len == self.buf.capacity() {
        .                       self.reserve(1);
        .                   }
        .           
        .                   unsafe {
        .                       // infallible
        .                       // The spot to put the new value
        .                       {
        .                           let p = self.as_mut_ptr().add(index);
        .                           // Shift everything over to make space. (Duplicating the
        .                           // `index`th element into two consecutive places.)
      504 ( 0.00%)                  ptr::copy(p, p.offset(1), len - index);
        .                           // Write it in, overwriting the first copy of the `index`th
        .                           // element.
        .                           ptr::write(p, element);
        .                       }
      336 ( 0.00%)              self.set_len(len + 1);
        .                   }
      822 ( 0.00%)      }
        .           
        .               /// Removes and returns the element at position `index` within the vector,
        .               /// shifting all elements after it to the left.
        .               ///
        .               /// Note: Because this shifts over the remaining elements, it has a
        .               /// worst-case performance of *O*(*n*). If you don't need the order of elements
        .               /// to be preserved, use [`swap_remove`] instead. If you'd like to remove
        .               /// elements from the beginning of the `Vec`, consider using
-- line 1376 ----------------------------------------
-- line 1395 ----------------------------------------
        .               pub fn remove(&mut self, index: usize) -> T {
        .                   #[cold]
        .                   #[inline(never)]
        .                   #[track_caller]
        .                   fn assert_failed(index: usize, len: usize) -> ! {
        .                       panic!("removal index (is {}) should be < len (is {})", index, len);
        .                   }
        .           
      107 ( 0.00%)          let len = self.len();
      378 ( 0.00%)          if index >= len {
        .                       assert_failed(index, len);
        .                   }
        .                   unsafe {
        .                       // infallible
        .                       let ret;
        .                       {
        .                           // the place we are taking from.
        .                           let ptr = self.as_mut_ptr().add(index);
        .                           // copy it out, unsafely having a copy of the value on
        .                           // the stack and in the vector at the same time.
      800 ( 0.00%)                  ret = ptr::read(ptr);
        .           
        .                           // Shift everything down to fill in that spot.
      280 ( 0.00%)                  ptr::copy(ptr.offset(1), ptr, len - index - 1);
        .                       }
      158 ( 0.00%)              self.set_len(len - 1);
        .                       ret
        .                   }
        .               }
        .           
        .               /// Retains only the elements specified by the predicate.
        .               ///
        .               /// In other words, remove all elements `e` such that `f(&e)` returns `false`.
        .               /// This method operates in place, visiting each element exactly once in the
-- line 1428 ----------------------------------------
-- line 1442 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1, 2, 3, 4, 5];
        .               /// let keep = [false, true, true, false, true];
        .               /// let mut iter = keep.iter();
        .               /// vec.retain(|_| *iter.next().unwrap());
        .               /// assert_eq!(vec, [2, 3, 5]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
   38,544 ( 0.01%)      pub fn retain<F>(&mut self, mut f: F)
        .               where
        .                   F: FnMut(&T) -> bool,
        .               {
    2,144 ( 0.00%)          self.retain_mut(|elem| f(elem));
   37,608 ( 0.01%)      }
        .           
        .               /// Retains only the elements specified by the predicate, passing a mutable reference to it.
        .               ///
        .               /// In other words, remove all elements `e` such that `f(&mut e)` returns `false`.
        .               /// This method operates in place, visiting each element exactly once in the
        .               /// original order, and preserves the order of the retained elements.
        .               ///
        .               /// # Examples
-- line 1463 ----------------------------------------
-- line 1474 ----------------------------------------
        .               /// });
        .               /// assert_eq!(vec, [2, 3, 4]);
        .               /// ```
        .               #[unstable(feature = "vec_retain_mut", issue = "90829")]
        .               pub fn retain_mut<F>(&mut self, mut f: F)
        .               where
        .                   F: FnMut(&mut T) -> bool,
        .               {
    4,707 ( 0.00%)          let original_len = self.len();
        .                   // Avoid double drop if the drop guard is not executed,
        .                   // since we may make some holes during the process.
        .                   unsafe { self.set_len(0) };
        .           
        .                   // Vec: [Kept, Kept, Hole, Hole, Hole, Hole, Unchecked, Unchecked]
        .                   //      |<-              processed len   ->| ^- next to check
        .                   //                  |<-  deleted cnt     ->|
        .                   //      |<-              original_len                          ->|
-- line 1490 ----------------------------------------
-- line 1499 ----------------------------------------
        .                       v: &'a mut Vec<T, A>,
        .                       processed_len: usize,
        .                       deleted_cnt: usize,
        .                       original_len: usize,
        .                   }
        .           
        .                   impl<T, A: Allocator> Drop for BackshiftOnDrop<'_, T, A> {
        .                       fn drop(&mut self) {
    2,242 ( 0.00%)                  if self.deleted_cnt > 0 {
        .                               // SAFETY: Trailing unchecked items must be valid since we never touch them.
        .                               unsafe {
        .                                   ptr::copy(
        .                                       self.v.as_ptr().add(self.processed_len),
    1,254 ( 0.00%)                              self.v.as_mut_ptr().add(self.processed_len - self.deleted_cnt),
        .                                       self.original_len - self.processed_len,
        .                                   );
        .                               }
        .                           }
        .                           // SAFETY: After filling holes, all items are in contiguous memory.
        .                           unsafe {
        2 ( 0.00%)                      self.v.set_len(self.original_len - self.deleted_cnt);
        .                           }
        .                       }
        .                   }
        .           
        .                   let mut g = BackshiftOnDrop { v: self, processed_len: 0, deleted_cnt: 0, original_len };
        .           
        .                   fn process_loop<F, T, A: Allocator, const DELETED: bool>(
        .                       original_len: usize,
        .                       f: &mut F,
        .                       g: &mut BackshiftOnDrop<'_, T, A>,
        .                   ) where
        .                       F: FnMut(&mut T) -> bool,
        .                   {
   99,199 ( 0.03%)              while g.processed_len != original_len {
        .                           // SAFETY: Unchecked element must be valid.
        .                           let cur = unsafe { &mut *g.v.as_mut_ptr().add(g.processed_len) };
   27,948 ( 0.01%)                  if !f(cur) {
        .                               // Advance early to avoid double drop if `drop_in_place` panicked.
        2 ( 0.00%)                      g.processed_len += 1;
        .                               g.deleted_cnt += 1;
        .                               // SAFETY: We never touch this element again after dropped.
        .                               unsafe { ptr::drop_in_place(cur) };
        .                               // We already advanced the counter.
        .                               if DELETED {
        .                                   continue;
        .                               } else {
        .                                   break;
-- line 1546 ----------------------------------------
-- line 1606 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec!["foo", "bar", "Bar", "baz", "bar"];
        .               ///
        .               /// vec.dedup_by(|a, b| a.eq_ignore_ascii_case(b));
        .               ///
        .               /// assert_eq!(vec, ["foo", "bar", "baz", "bar"]);
        .               /// ```
        .               #[stable(feature = "dedup_by", since = "1.16.0")]
        7 ( 0.00%)      pub fn dedup_by<F>(&mut self, mut same_bucket: F)
        .               where
        .                   F: FnMut(&mut T, &mut T) -> bool,
        .               {
        1 ( 0.00%)          let len = self.len();
      262 ( 0.00%)          if len <= 1 {
        .                       return;
        .                   }
        .           
        .                   /* INVARIANT: vec.len() > read >= write > write-1 >= 0 */
        .                   struct FillGapOnDrop<'a, T, A: core::alloc::Allocator> {
        .                       /* Offset of the element we want to check if it is duplicate */
        .                       read: usize,
        .           
-- line 1627 ----------------------------------------
-- line 1670 ----------------------------------------
        .                   let ptr = gap.vec.as_mut_ptr();
        .           
        .                   /* Drop items while going through Vec, it should be more efficient than
        .                    * doing slice partition_dedup + truncate */
        .           
        .                   /* SAFETY: Because of the invariant, read_ptr, prev_ptr and write_ptr
        .                    * are always in-bounds and read_ptr never aliases prev_ptr */
        .                   unsafe {
       18 ( 0.00%)              while gap.read < len {
        .                           let read_ptr = ptr.add(gap.read);
        .                           let prev_ptr = ptr.add(gap.write.wrapping_sub(1));
        .           
       24 ( 0.00%)                  if same_bucket(&mut *read_ptr, &mut *prev_ptr) {
        .                               // Increase `gap.read` now since the drop may panic.
        .                               gap.read += 1;
        .                               /* We have found duplicate, drop it in-place */
        .                               ptr::drop_in_place(read_ptr);
        .                           } else {
        .                               let write_ptr = ptr.add(gap.write);
        .           
        .                               /* Because `read_ptr` can be equal to `write_ptr`, we either
        .                                * have to use `copy` or conditional `copy_nonoverlapping`.
        .                                * Looks like the first option is faster. */
        .                               ptr::copy(read_ptr, write_ptr, 1);
        .           
        .                               /* We have filled that place, so go further */
        6 ( 0.00%)                      gap.write += 1;
        .                               gap.read += 1;
        .                           }
        .                       }
        .           
        .                       /* Technically we could let `gap` clean up with its Drop, but
        .                        * when `same_bucket` is guaranteed to not panic, this bloats a little
        .                        * the codegen, so we just do it manually */
        .                       gap.vec.set_len(gap.write);
        .                       mem::forget(gap);
        .                   }
        8 ( 0.00%)      }
        .           
        .               /// Appends an element to the back of a collection.
        .               ///
        .               /// # Panics
        .               ///
        .               /// Panics if the new capacity exceeds `isize::MAX` bytes.
        .               ///
        .               /// # Examples
-- line 1715 ----------------------------------------
-- line 1717 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1, 2];
        .               /// vec.push(3);
        .               /// assert_eq!(vec, [1, 2, 3]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
       30 ( 0.00%)      pub fn push(&mut self, value: T) {
        .                   // This will panic or abort if we would allocate > isize::MAX bytes
        .                   // or if the length increment would overflow for zero-sized types.
1,480,130 ( 0.38%)          if self.len == self.buf.capacity() {
   62,828 ( 0.02%)              self.buf.reserve_for_push(self.len);
        .                   }
        .                   unsafe {
   27,794 ( 0.01%)              let end = self.as_mut_ptr().add(self.len);
        .                       ptr::write(end, value);
1,837,034 ( 0.48%)              self.len += 1;
        .                   }
       24 ( 0.00%)      }
        .           
        .               /// Removes the last element from a vector and returns it, or [`None`] if it
        .               /// is empty.
        .               ///
        .               /// If you'd like to pop the first element, consider using
        .               /// [`VecDeque::pop_front`] instead.
        .               ///
        .               /// [`VecDeque::pop_front`]: crate::collections::VecDeque::pop_front
-- line 1744 ----------------------------------------
-- line 1748 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1, 2, 3];
        .               /// assert_eq!(vec.pop(), Some(3));
        .               /// assert_eq!(vec, [1, 2]);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn pop(&mut self) -> Option<T> {
  203,974 ( 0.05%)          if self.len == 0 {
        2 ( 0.00%)              None
        .                   } else {
        .                       unsafe {
  173,701 ( 0.04%)                  self.len -= 1;
   20,326 ( 0.01%)                  Some(ptr::read(self.as_ptr().add(self.len())))
        .                       }
        .                   }
        .               }
        .           
        .               /// Moves all the elements of `other` into `Self`, leaving `other` empty.
        .               ///
        .               /// # Panics
        .               ///
-- line 1769 ----------------------------------------
-- line 1776 ----------------------------------------
        .               /// let mut vec2 = vec![4, 5, 6];
        .               /// vec.append(&mut vec2);
        .               /// assert_eq!(vec, [1, 2, 3, 4, 5, 6]);
        .               /// assert_eq!(vec2, []);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "append", since = "1.4.0")]
       63 ( 0.00%)      pub fn append(&mut self, other: &mut Self) {
        .                   unsafe {
        .                       self.append_elements(other.as_slice() as _);
        .                       other.set_len(0);
        .                   }
       54 ( 0.00%)      }
        .           
        .               /// Appends elements to `Self` from other buffer.
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               unsafe fn append_elements(&mut self, other: *const [T]) {
        .                   let count = unsafe { (*other).len() };
        .                   self.reserve(count);
    2,055 ( 0.00%)          let len = self.len();
        .                   unsafe { ptr::copy_nonoverlapping(other as *const T, self.as_mut_ptr().add(len), count) };
   37,248 ( 0.01%)          self.len += count;
        .               }
        .           
        .               /// Creates a draining iterator that removes the specified range in the vector
        .               /// and yields the removed items.
        .               ///
        .               /// When the iterator **is** dropped, all elements in the range are removed
        .               /// from the vector, even if the iterator was not fully consumed. If the
        .               /// iterator **is not** dropped (with [`mem::forget`] for example), it is
-- line 1807 ----------------------------------------
-- line 1834 ----------------------------------------
        .                   // When the Drain is first created, it shortens the length of
        .                   // the source vector to make sure no uninitialized or moved-from elements
        .                   // are accessible at all if the Drain's destructor never gets to run.
        .                   //
        .                   // Drain will ptr::read out the values to remove.
        .                   // When finished, remaining tail of the vec is copied back to cover
        .                   // the hole, and the vector length is restored to the new length.
        .                   //
    2,058 ( 0.00%)          let len = self.len();
        .                   let Range { start, end } = slice::range(range, ..len);
        .           
        .                   unsafe {
        .                       // set self.vec length's to start, to be safe in case Drain is leaked
        .                       self.set_len(start);
        .                       // Use the borrow in the IterMut to indicate borrowing behavior of the
        .                       // whole Drain iterator (like &mut T).
    2,010 ( 0.00%)              let range_slice = slice::from_raw_parts_mut(self.as_mut_ptr().add(start), end - start);
       57 ( 0.00%)              Drain {
        .                           tail_start: end,
    1,342 ( 0.00%)                  tail_len: len - end,
        .                           iter: range_slice.iter(),
        .                           vec: NonNull::from(self),
        .                       }
        .                   }
        .               }
        .           
        .               /// Clears the vector, removing all values.
        .               ///
-- line 1861 ----------------------------------------
-- line 1869 ----------------------------------------
        .               ///
        .               /// v.clear();
        .               ///
        .               /// assert!(v.is_empty());
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn clear(&mut self) {
  110,678 ( 0.03%)          self.truncate(0)
        .               }
        .           
        .               /// Returns the number of elements in the vector, also referred to
        .               /// as its 'length'.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 1885 ----------------------------------------
-- line 1900 ----------------------------------------
        .               /// let mut v = Vec::new();
        .               /// assert!(v.is_empty());
        .               ///
        .               /// v.push(1);
        .               /// assert!(!v.is_empty());
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn is_empty(&self) -> bool {
  109,507 ( 0.03%)          self.len() == 0
        .               }
        .           
        .               /// Splits the collection into two at the given index.
        .               ///
        .               /// Returns a newly allocated vector containing the elements in the range
        .               /// `[at, len)`. After the call, the original vector will be left containing
        .               /// the elements `[0, at)` with its previous capacity unchanged.
        .               ///
-- line 1916 ----------------------------------------
-- line 1935 ----------------------------------------
        .                   A: Clone,
        .               {
        .                   #[cold]
        .                   #[inline(never)]
        .                   fn assert_failed(at: usize, len: usize) -> ! {
        .                       panic!("`at` split index (is {}) should be <= len (is {})", at, len);
        .                   }
        .           
      161 ( 0.00%)          if at > self.len() {
        .                       assert_failed(at, self.len());
        .                   }
        .           
      145 ( 0.00%)          if at == 0 {
        .                       // the new vector can take over the original buffer and avoid the copy
        .                       return mem::replace(
        .                           self,
        .                           Vec::with_capacity_in(self.capacity(), self.allocator().clone()),
        .                       );
        .                   }
        .           
        .                   let other_len = self.len - at;
-- line 1955 ----------------------------------------
-- line 1988 ----------------------------------------
        .               ///
        .               /// let mut vec = vec![];
        .               /// let mut p = 1;
        .               /// vec.resize_with(4, || { p *= 2; p });
        .               /// assert_eq!(vec, [2, 4, 8, 16]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "vec_resize_with", since = "1.33.0")]
    2,449 ( 0.00%)      pub fn resize_with<F>(&mut self, new_len: usize, f: F)
        .               where
        .                   F: FnMut() -> T,
        .               {
      329 ( 0.00%)          let len = self.len();
      658 ( 0.00%)          if new_len > len {
    3,184 ( 0.00%)              self.extend_with(new_len - len, ExtendFunc(f));
        .                   } else {
        .                       self.truncate(new_len);
        .                   }
    2,120 ( 0.00%)      }
        .           
        .               /// Consumes and leaks the `Vec`, returning a mutable reference to the contents,
        .               /// `&'a mut [T]`. Note that the type `T` must outlive the chosen lifetime
        .               /// `'a`. If the type has only static references, or none at all, then this
        .               /// may be chosen to be `'static`.
        .               ///
        .               /// As of Rust 1.57, this method does not reallocate or shrink the `Vec`,
        .               /// so the leaked allocation may include unused capacity that is not part
-- line 2014 ----------------------------------------
-- line 2070 ----------------------------------------
        .               #[stable(feature = "vec_spare_capacity", since = "1.60.0")]
        .               #[inline]
        .               pub fn spare_capacity_mut(&mut self) -> &mut [MaybeUninit<T>] {
        .                   // Note:
        .                   // This method is not implemented in terms of `split_at_spare_mut`,
        .                   // to prevent invalidation of pointers to the buffer.
        .                   unsafe {
        .                       slice::from_raw_parts_mut(
        2 ( 0.00%)                  self.as_mut_ptr().add(self.len) as *mut MaybeUninit<T>,
       51 ( 0.00%)                  self.buf.capacity() - self.len,
        .                       )
        .                   }
        .               }
        .           
        .               /// Returns vector content as a slice of `T`, along with the remaining spare
        .               /// capacity of the vector as a slice of `MaybeUninit<T>`.
        .               ///
        .               /// The returned spare capacity slice can be used to fill the vector with data
-- line 2087 ----------------------------------------
-- line 2189 ----------------------------------------
        .               /// assert_eq!(vec, ["hello", "world", "world"]);
        .               ///
        .               /// let mut vec = vec![1, 2, 3, 4];
        .               /// vec.resize(2, 0);
        .               /// assert_eq!(vec, [1, 2]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "vec_resize", since = "1.5.0")]
      310 ( 0.00%)      pub fn resize(&mut self, new_len: usize, value: T) {
       31 ( 0.00%)          let len = self.len();
        .           
       93 ( 0.00%)          if new_len > len {
      528 ( 0.00%)              self.extend_with(new_len - len, ExtendElement(value))
        .                   } else {
        .                       self.truncate(new_len);
        .                   }
       47 ( 0.00%)      }
        .           
        .               /// Clones and appends all elements in a slice to the `Vec`.
        .               ///
        .               /// Iterates over the slice `other`, clones each element, and then appends
        .               /// it to this `Vec`. The `other` slice is traversed in-order.
        .               ///
        .               /// Note that this function is same as [`extend`] except that it is
        .               /// specialized to work with slices instead. If and when Rust gets
-- line 2213 ----------------------------------------
-- line 2271 ----------------------------------------
        .           trait ExtendWith<T> {
        .               fn next(&mut self) -> T;
        .               fn last(self) -> T;
        .           }
        .           
        .           struct ExtendElement<T>(T);
        .           impl<T: Clone> ExtendWith<T> for ExtendElement<T> {
        .               fn next(&mut self) -> T {
    2,012 ( 0.00%)          self.0.clone()
        .               }
        .               fn last(self) -> T {
        .                   self.0
        .               }
        .           }
        .           
        .           struct ExtendFunc<F>(F);
        .           impl<T, F: FnMut() -> T> ExtendWith<T> for ExtendFunc<F> {
-- line 2287 ----------------------------------------
-- line 2291 ----------------------------------------
        .               fn last(mut self) -> T {
        .                   (self.0)()
        .               }
        .           }
        .           
        .           impl<T, A: Allocator> Vec<T, A> {
        .               #[cfg(not(no_global_oom_handling))]
        .               /// Extend the vector by `n` values, using the given generator.
   30,952 ( 0.01%)      fn extend_with<E: ExtendWith<T>>(&mut self, n: usize, mut value: E) {
        .                   self.reserve(n);
        .           
        .                   unsafe {
      778 ( 0.00%)              let mut ptr = self.as_mut_ptr().add(self.len());
        .                       // Use SetLenOnDrop to work around bug where compiler
        .                       // might not realize the store through `ptr` through self.set_len()
        .                       // don't alias.
        .                       let mut local_len = SetLenOnDrop::new(&mut self.len);
        .           
        .                       // Write all elements except the last one
        .                       for _ in 1..n {
        .                           ptr::write(ptr, value.next());
        .                           ptr = ptr.offset(1);
        .                           // Increment the length in every step in case next() panics
        .                           local_len.increment_len(1);
        .                       }
        .           
   32,325 ( 0.01%)              if n > 0 {
        .                           // We can write the last element directly without cloning needlessly
        .                           ptr::write(ptr, value.last());
        .                           local_len.increment_len(1);
        .                       }
        .           
        .                       // len set by scope guard
        .                   }
   24,603 ( 0.01%)      }
        .           }
        .           
        .           impl<T: PartialEq, A: Allocator> Vec<T, A> {
        .               /// Removes consecutive repeated elements in the vector according to the
        .               /// [`PartialEq`] trait implementation.
        .               ///
        .               /// If the vector is sorted, this removes all duplicates.
        .               ///
-- line 2333 ----------------------------------------
-- line 2338 ----------------------------------------
        .               ///
        .               /// vec.dedup();
        .               ///
        .               /// assert_eq!(vec, [1, 2, 3, 2]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
        .               pub fn dedup(&mut self) {
        2 ( 0.00%)          self.dedup_by(|a, b| a == b)
        .               }
        .           }
        .           
        .           ////////////////////////////////////////////////////////////////////////////////
        .           // Internal methods and functions
        .           ////////////////////////////////////////////////////////////////////////////////
        .           
        .           #[doc(hidden)]
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
    3,228 ( 0.00%)  pub fn from_elem<T: Clone>(elem: T, n: usize) -> Vec<T> {
   41,498 ( 0.01%)      <T as SpecFromElem>::from_elem(elem, n, Global)
    3,414 ( 0.00%)  }
        .           
        .           #[doc(hidden)]
        .           #[cfg(not(no_global_oom_handling))]
        .           #[unstable(feature = "allocator_api", issue = "32838")]
        .           pub fn from_elem_in<T: Clone, A: Allocator>(elem: T, n: usize, alloc: A) -> Vec<T, A> {
        .               <T as SpecFromElem>::from_elem(elem, n, alloc)
        .           }
        .           
-- line 2367 ----------------------------------------
-- line 2424 ----------------------------------------
        .           // Common trait implementations for Vec
        .           ////////////////////////////////////////////////////////////////////////////////
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> ops::Deref for Vec<T, A> {
        .               type Target = [T];
        .           
        .               fn deref(&self) -> &[T] {
1,387,877 ( 0.36%)          unsafe { slice::from_raw_parts(self.as_ptr(), self.len) }
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> ops::DerefMut for Vec<T, A> {
        .               fn deref_mut(&mut self) -> &mut [T] {
  336,395 ( 0.09%)          unsafe { slice::from_raw_parts_mut(self.as_mut_ptr(), self.len) }
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           trait SpecCloneFrom {
        .               fn clone_from(this: &mut Self, other: &Self);
        .           }
        .           
-- line 2447 ----------------------------------------
-- line 2468 ----------------------------------------
        .                   this.extend_from_slice(other);
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T: Clone, A: Allocator + Clone> Clone for Vec<T, A> {
        .               #[cfg(not(test))]
   32,669 ( 0.01%)      fn clone(&self) -> Self {
        .                   let alloc = self.allocator().clone();
        2 ( 0.00%)          <[T]>::to_vec_in(&**self, alloc)
   41,395 ( 0.01%)      }
        .           
        .               // HACK(japaric): with cfg(test) the inherent `[T]::to_vec` method, which is
        .               // required for this method definition, is not available. Instead use the
        .               // `slice::to_vec`  function which is only available with cfg(test)
        .               // NB see the slice::hack module in slice.rs for more information
        .               #[cfg(test)]
        .               fn clone(&self) -> Self {
        .                   let alloc = self.allocator().clone();
-- line 2487 ----------------------------------------
-- line 2518 ----------------------------------------
        .               message = "vector indices are of type `usize` or ranges of `usize`",
        .               label = "vector indices are of type `usize` or ranges of `usize`"
        .           )]
        .           impl<T, I: SliceIndex<[T]>, A: Allocator> Index<I> for Vec<T, A> {
        .               type Output = I::Output;
        .           
        .               #[inline]
        .               fn index(&self, index: I) -> &Self::Output {
   78,390 ( 0.02%)          Index::index(&**self, index)
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[rustc_on_unimplemented(
        .               message = "vector indices are of type `usize` or ranges of `usize`",
        .               label = "vector indices are of type `usize` or ranges of `usize`"
        .           )]
        .           impl<T, I: SliceIndex<[T]>, A: Allocator> IndexMut<I> for Vec<T, A> {
        .               #[inline]
        .               fn index_mut(&mut self, index: I) -> &mut Self::Output {
      132 ( 0.00%)          IndexMut::index_mut(&mut **self, index)
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T> FromIterator<T> for Vec<T> {
        .               #[inline]
        .               fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> Vec<T> {
  221,932 ( 0.06%)          <Self as SpecFromIter<T, I::IntoIter>>::from_iter(iter.into_iter())
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> IntoIterator for Vec<T, A> {
        .               type Item = T;
        .               type IntoIter = IntoIter<T, A>;
        .           
-- line 2555 ----------------------------------------
-- line 2564 ----------------------------------------
        .               /// for s in v.into_iter() {
        .               ///     // s has type String, not &String
        .               ///     println!("{}", s);
        .               /// }
        .               /// ```
        .               #[inline]
        .               fn into_iter(self) -> IntoIter<T, A> {
        .                   unsafe {
  142,245 ( 0.04%)              let mut me = ManuallyDrop::new(self);
        .                       let alloc = ptr::read(me.allocator());
        .                       let begin = me.as_mut_ptr();
        .                       let end = if mem::size_of::<T>() == 0 {
        .                           arith_offset(begin as *const i8, me.len() as isize) as *const T
        .                       } else {
        .                           begin.add(me.len()) as *const T
        .                       };
        .                       let cap = me.buf.capacity();
   47,764 ( 0.01%)              IntoIter {
        .                           buf: NonNull::new_unchecked(begin),
        .                           phantom: PhantomData,
        .                           cap,
        .                           alloc,
        .                           ptr: begin,
        .                           end,
        .                       }
        .                   }
-- line 2589 ----------------------------------------
-- line 2601 ----------------------------------------
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<'a, T, A: Allocator> IntoIterator for &'a mut Vec<T, A> {
        .               type Item = &'a mut T;
        .               type IntoIter = slice::IterMut<'a, T>;
        .           
        .               fn into_iter(self) -> slice::IterMut<'a, T> {
      626 ( 0.00%)          self.iter_mut()
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> Extend<T> for Vec<T, A> {
        .               #[inline]
       24 ( 0.00%)      fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {
  110,870 ( 0.03%)          <Self as SpecExtend<T, I::IntoIter>>::spec_extend(self, iter.into_iter())
       24 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn extend_one(&mut self, item: T) {
        .                   self.push(item);
        .               }
        .           
        .               #[inline]
        .               fn extend_reserve(&mut self, additional: usize) {
-- line 2627 ----------------------------------------
-- line 2636 ----------------------------------------
        .               fn extend_desugared<I: Iterator<Item = T>>(&mut self, mut iterator: I) {
        .                   // This is the case for a general iterator.
        .                   //
        .                   // This function should be the moral equivalent of:
        .                   //
        .                   //      for item in iterator {
        .                   //          self.push(item);
        .                   //      }
    5,870 ( 0.00%)          while let Some(element) = iterator.next() {
    2,062 ( 0.00%)              let len = self.len();
   39,417 ( 0.01%)              if len == self.capacity() {
       80 ( 0.00%)                  let (lower, _) = iterator.size_hint();
        .                           self.reserve(lower.saturating_add(1));
        .                       }
        .                       unsafe {
        .                           ptr::write(self.as_mut_ptr().add(len), element);
        .                           // Since next() executes user code which can panic we have to bump the length
        .                           // after each step.
        .                           // NB can't overflow since we would have had to alloc the address space
   24,521 ( 0.01%)                  self.set_len(len + 1);
        .                       }
        .                   }
    1,177 ( 0.00%)      }
        .           
        .               /// Creates a splicing iterator that replaces the specified range in the vector
        .               /// with the given `replace_with` iterator and yields the removed items.
        .               /// `replace_with` does not need to be the same length as `range`.
        .               ///
        .               /// `range` is removed even if the iterator is not consumed until the end.
        .               ///
        .               /// It is unspecified how many elements are removed from the vector
-- line 2666 ----------------------------------------
-- line 2693 ----------------------------------------
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "vec_splice", since = "1.21.0")]
        .               pub fn splice<R, I>(&mut self, range: R, replace_with: I) -> Splice<'_, I::IntoIter, A>
        .               where
        .                   R: RangeBounds<usize>,
        .                   I: IntoIterator<Item = T>,
        .               {
    7,744 ( 0.00%)          Splice { drain: self.drain(range), replace_with: replace_with.into_iter() }
        .               }
        .           
        .               /// Creates an iterator which uses a closure to determine if an element should be removed.
        .               ///
        .               /// If the closure returns true, then the element is removed and yielded.
        .               /// If the closure returns false, the element will remain in the vector and will not be yielded
        .               /// by the iterator.
        .               ///
-- line 2709 ----------------------------------------
-- line 2745 ----------------------------------------
        .               /// assert_eq!(evens, vec![2, 4, 6, 8, 14]);
        .               /// assert_eq!(odds, vec![1, 3, 5, 9, 11, 13, 15]);
        .               /// ```
        .               #[unstable(feature = "drain_filter", reason = "recently added", issue = "43244")]
        .               pub fn drain_filter<F>(&mut self, filter: F) -> DrainFilter<'_, T, F, A>
        .               where
        .                   F: FnMut(&mut T) -> bool,
        .               {
      603 ( 0.00%)          let old_len = self.len();
        .           
        .                   // Guard against us getting leaked (leak amplification)
        .                   unsafe {
        .                       self.set_len(0);
        .                   }
        .           
    1,496 ( 0.00%)          DrainFilter { vec: self, idx: 0, del: 0, old_len, pred: filter, panic_flag: false }
        .               }
        .           }
        .           
        .           /// Extend implementation that copies elements out of references before pushing them onto the Vec.
        .           ///
        .           /// This implementation is specialized for slice iterators, where it uses [`copy_from_slice`] to
        .           /// append the entire slice at once.
        .           ///
-- line 2768 ----------------------------------------
-- line 2803 ----------------------------------------
        .               #[inline]
        .               fn cmp(&self, other: &Self) -> Ordering {
        .                   Ord::cmp(&**self, &**other)
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           unsafe impl<#[may_dangle] T, A: Allocator> Drop for Vec<T, A> {
  239,326 ( 0.06%)      fn drop(&mut self) {
        .                   unsafe {
        .                       // use drop for [T]
        .                       // use a raw slice to refer to the elements of the vector as weakest necessary type;
        .                       // could avoid questions of validity in certain cases
   83,990 ( 0.02%)              ptr::drop_in_place(ptr::slice_from_raw_parts_mut(self.as_mut_ptr(), self.len))
        .                   }
        .                   // RawVec handles deallocation
  283,024 ( 0.07%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[rustc_const_unstable(feature = "const_default_impls", issue = "87864")]
        .           impl<T> const Default for Vec<T> {
        .               /// Creates an empty `Vec<T>`.
        .               fn default() -> Vec<T> {
        .                   Vec::new()
-- line 2827 ----------------------------------------
-- line 2976 ----------------------------------------
        .               /// newly-allocated buffer with exactly the right capacity.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// assert_eq!(Box::from(vec![1, 2, 3]), vec![1, 2, 3].into_boxed_slice());
        .               /// ```
        .               fn from(v: Vec<T, A>) -> Self {
        4 ( 0.00%)          v.into_boxed_slice()
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl From<&str> for Vec<u8> {
        .               /// Allocate a `Vec<u8>` and fill it with a UTF-8 string.
        .               ///
-- line 2992 ----------------------------------------

  367,609 ( 0.10%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 36 ----------------------------------------
      .           use rustc_session::parse::ParseSess;
      .           use rustc_span::source_map::{MultiSpan, Span, DUMMY_SP};
      .           use rustc_span::symbol::{kw, sym, Ident, Symbol};
      .           use tracing::debug;
      .           
      .           use std::ops::Range;
      .           use std::{cmp, mem, slice};
      .           
 10,927 ( 0.00%)  bitflags::bitflags! {
      .               struct Restrictions: u8 {
      .                   const STMT_EXPR         = 1 << 0;
      .                   const NO_STRUCT_LITERAL = 1 << 1;
      .                   const CONST_EXPR        = 1 << 2;
      .               }
      .           }
      .           
      .           #[derive(Clone, Copy, PartialEq, Debug)]
-- line 52 ----------------------------------------
-- line 104 ----------------------------------------
      .                               $self.bump();
      .                               return $self.maybe_recover_from_bad_qpath_stage_2($self.prev_token.span, ty);
      .                           }
      .                       }
      .                   }
      .               };
      .           }
      .           
 14,454 ( 0.00%)  #[derive(Clone)]
      .           pub struct Parser<'a> {
    288 ( 0.00%)      pub sess: &'a ParseSess,
      .               /// The current token.
    106 ( 0.00%)      pub token: Token,
      .               /// The spacing for the current token
    210 ( 0.00%)      pub token_spacing: Spacing,
      .               /// The previous token.
    159 ( 0.00%)      pub prev_token: Token,
    367 ( 0.00%)      pub capture_cfg: bool,
    891 ( 0.00%)      restrictions: Restrictions,
    420 ( 0.00%)      expected_tokens: Vec<TokenType>,
      .               // Important: This must only be advanced from `next_tok`
      .               // to ensure that `token_cursor.num_next_calls` is updated properly
      .               token_cursor: TokenCursor,
    420 ( 0.00%)      desugar_doc_comments: bool,
      .               /// This field is used to keep track of how many left angle brackets we have seen. This is
      .               /// required in order to detect extra leading left angle brackets (`<` characters) and error
      .               /// appropriately.
      .               ///
      .               /// See the comments in the `parse_path_segment` function for more details.
    420 ( 0.00%)      unmatched_angle_bracket_count: u32,
    630 ( 0.00%)      max_angle_bracket_count: u32,
      .               /// A list of all unclosed delimiters found by the lexer. If an entry is used for error recovery
      .               /// it gets removed from here. Every entry left at the end gets emitted as an independent
      .               /// error.
    210 ( 0.00%)      pub(super) unclosed_delims: Vec<UnmatchedBrace>,
      .               last_unexpected_token_span: Option<Span>,
      .               /// Span pointing at the `:` for the last type ascription the parser has seen, and whether it
      .               /// looked like it could have been a mistyped path or literal `Option:Some(42)`).
      .               pub last_type_ascription: Option<(Span, bool /* likely path typo */)>,
      .               /// If present, this `Parser` is not parsing Rust code but rather a macro call.
      .               subparser_name: Option<&'static str>,
      .               capture_state: CaptureState,
      .               /// This allows us to recover when the user forget to add braces around
-- line 146 ----------------------------------------
-- line 173 ----------------------------------------
      .           /// the first macro inner attribute to invoke a proc-macro).
      .           /// When create a `TokenStream`, the inner attributes get inserted
      .           /// into the proper place in the token stream.
      .           pub type ReplaceRange = (Range<u32>, Vec<(FlatToken, Spacing)>);
      .           
      .           /// Controls how we capture tokens. Capturing can be expensive,
      .           /// so we try to avoid performing capturing in cases where
      .           /// we will never need an `AttrAnnotatedTokenStream`
    210 ( 0.00%)  #[derive(Copy, Clone)]
      .           pub enum Capturing {
      .               /// We aren't performing any capturing - this is the default mode.
      .               No,
      .               /// We are capturing tokens
      .               Yes,
      .           }
      .           
    865 ( 0.00%)  #[derive(Clone)]
      .           struct CaptureState {
    840 ( 0.00%)      capturing: Capturing,
    210 ( 0.00%)      replace_ranges: Vec<ReplaceRange>,
      .               inner_attr_ranges: FxHashMap<AttrId, ReplaceRange>,
      .           }
      .           
      .           impl<'a> Drop for Parser<'a> {
      .               fn drop(&mut self) {
  1,373 ( 0.00%)          emit_unclosed_delims(&mut self.unclosed_delims, &self.sess);
      .               }
      .           }
      .           
 19,367 ( 0.01%)  #[derive(Clone)]
      .           struct TokenCursor {
      .               frame: TokenCursorFrame,
  4,596 ( 0.00%)      stack: Vec<TokenCursorFrame>,
      .               desugar_doc_comments: bool,
      .               // Counts the number of calls to `next` or `next_desugared`,
      .               // depending on whether `desugar_doc_comments` is set.
  1,413 ( 0.00%)      num_next_calls: usize,
      .               // During parsing, we may sometimes need to 'unglue' a
      .               // glued token into two component tokens
      .               // (e.g. '>>' into '>' and '>), so that the parser
      .               // can consume them one at a time. This process
      .               // bypasses the normal capturing mechanism
      .               // (e.g. `num_next_calls` will not be incremented),
      .               // since the 'unglued' tokens due not exist in
      .               // the original `TokenStream`.
-- line 217 ----------------------------------------
-- line 226 ----------------------------------------
      .               // in `Option<Vec<u8>>` requires us to unglue
      .               // the trailing `>>` token. The `break_last_token`
      .               // field is used to track this token - it gets
      .               // appended to the captured stream when
      .               // we evaluate a `LazyTokenStream`
      .               break_last_token: bool,
      .           }
      .           
  8,779 ( 0.00%)  #[derive(Clone)]
      .           struct TokenCursorFrame {
  2,895 ( 0.00%)      delim: token::DelimToken,
      .               span: DelimSpan,
      .               open_delim: bool,
  5,790 ( 0.00%)      tree_cursor: tokenstream::Cursor,
      .               close_delim: bool,
      .           }
      .           
      .           impl TokenCursorFrame {
      .               fn new(span: DelimSpan, delim: DelimToken, tts: TokenStream) -> Self {
    875 ( 0.00%)          TokenCursorFrame {
      .                       delim,
      .                       span,
      .                       open_delim: false,
  1,899 ( 0.00%)              tree_cursor: tts.into_trees(),
      .                       close_delim: false,
      .                   }
      .               }
      .           }
      .           
      .           impl TokenCursor {
152,532 ( 0.04%)      fn next(&mut self) -> (Token, Spacing) {
      .                   loop {
 74,316 ( 0.02%)              let (tree, spacing) = if !self.frame.open_delim {
  1,549 ( 0.00%)                  self.frame.open_delim = true;
  7,745 ( 0.00%)                  TokenTree::open_tt(self.frame.span, self.frame.delim).into()
147,780 ( 0.04%)              } else if let Some(tree) = self.frame.tree_cursor.next_with_spacing() {
      .                           tree
  6,528 ( 0.00%)              } else if !self.frame.close_delim {
  1,508 ( 0.00%)                  self.frame.close_delim = true;
  7,540 ( 0.00%)                  TokenTree::close_tt(self.frame.span, self.frame.delim).into()
  3,016 ( 0.00%)              } else if let Some(frame) = self.stack.pop() {
 19,604 ( 0.01%)                  self.frame = frame;
      .                           continue;
      .                       } else {
  4,464 ( 0.00%)                  (TokenTree::Token(Token::new(token::Eof, DUMMY_SP)), Spacing::Alone)
      .                       };
      .           
 28,520 ( 0.01%)              match tree {
      .                           TokenTree::Token(token) => {
101,688 ( 0.03%)                      return (token, spacing);
      .                           }
      .                           TokenTree::Delimited(sp, delim, tts) => {
      .                               let frame = TokenCursorFrame::new(sp, delim, tts);
      .                               self.stack.push(mem::replace(&mut self.frame, frame));
      .                           }
      .                       }
      .                   }
101,688 ( 0.03%)      }
      .           
  2,350 ( 0.00%)      fn next_desugared(&mut self) -> (Token, Spacing) {
    705 ( 0.00%)          let (data, attr_style, sp) = match self.next() {
      .                       (Token { kind: token::DocComment(_, attr_style, data), span }, _) => {
      .                           (data, attr_style, span)
      .                       }
  1,175 ( 0.00%)              tok => return tok,
      .                   };
      .           
      .                   // Searches for the occurrences of `"#*` and returns the minimum number of `#`s
      .                   // required to wrap the text.
      .                   let mut num_of_hashes = 0;
      .                   let mut count = 0;
      .                   for ch in data.as_str().chars() {
      .                       count = match ch {
-- line 298 ----------------------------------------
-- line 332 ----------------------------------------
      .                                   .iter()
      .                                   .cloned()
      .                                   .collect::<TokenStream>()
      .                           },
      .                       ),
      .                   ));
      .           
      .                   self.next()
  2,115 ( 0.00%)      }
      .           }
      .           
  3,120 ( 0.00%)  #[derive(Debug, Clone, PartialEq)]
      .           enum TokenType {
  2,496 ( 0.00%)      Token(TokenKind),
      .               Keyword(Symbol),
      .               Operator,
      .               Lifetime,
      .               Ident,
      .               Path,
      .               Type,
      .               Const,
      .           }
-- line 353 ----------------------------------------
-- line 392 ----------------------------------------
      .           }
      .           
      .           pub enum FollowedByType {
      .               Yes,
      .               No,
      .           }
      .           
      .           fn token_descr_opt(token: &Token) -> Option<&'static str> {
    104 ( 0.00%)      Some(match token.kind {
    208 ( 0.00%)          _ if token.is_special_ident() => "reserved identifier",
    208 ( 0.00%)          _ if token.is_used_keyword() => "keyword",
    208 ( 0.00%)          _ if token.is_unused_keyword() => "reserved keyword",
      .                   token::DocComment(..) => "doc comment",
      .                   _ => return None,
      .               })
      .           }
      .           
    364 ( 0.00%)  pub(super) fn token_descr(token: &Token) -> String {
    104 ( 0.00%)      let token_str = pprust::token_to_string(token);
      .               match token_descr_opt(token) {
      .                   Some(prefix) => format!("{} `{}`", prefix, token_str),
    364 ( 0.00%)          _ => format!("`{}`", token_str),
      .               }
    260 ( 0.00%)  }
      .           
      .           impl<'a> Parser<'a> {
  2,450 ( 0.00%)      pub fn new(
      .                   sess: &'a ParseSess,
      .                   tokens: TokenStream,
      .                   desugar_doc_comments: bool,
      .                   subparser_name: Option<&'static str>,
      .               ) -> Self {
    175 ( 0.00%)          let mut start_frame = TokenCursorFrame::new(DelimSpan::dummy(), token::NoDelim, tokens);
    350 ( 0.00%)          start_frame.open_delim = true;
      .                   start_frame.close_delim = true;
      .           
  5,425 ( 0.00%)          let mut parser = Parser {
      .                       sess,
    175 ( 0.00%)              token: Token::dummy(),
      .                       token_spacing: Spacing::Alone,
    175 ( 0.00%)              prev_token: Token::dummy(),
      .                       capture_cfg: false,
      .                       restrictions: Restrictions::empty(),
      .                       expected_tokens: Vec::new(),
      .                       token_cursor: TokenCursor {
  1,050 ( 0.00%)                  frame: start_frame,
      .                           stack: Vec::new(),
      .                           num_next_calls: 0,
      .                           desugar_doc_comments,
      .                           break_last_token: false,
      .                       },
      .                       desugar_doc_comments,
      .                       unmatched_angle_bracket_count: 0,
      .                       max_angle_bracket_count: 0,
-- line 445 ----------------------------------------
-- line 451 ----------------------------------------
      .                           capturing: Capturing::No,
      .                           replace_ranges: Vec::new(),
      .                           inner_attr_ranges: Default::default(),
      .                       },
      .                       current_closure: None,
      .                   };
      .           
      .                   // Make parser point to the first token.
    350 ( 0.00%)          parser.bump();
      .           
      .                   parser
  1,575 ( 0.00%)      }
      .           
      .               fn next_tok(&mut self, fallback_span: Span) -> (Token, Spacing) {
      .                   loop {
 73,590 ( 0.02%)              let (mut next, spacing) = if self.desugar_doc_comments {
    940 ( 0.00%)                  self.token_cursor.next_desugared()
      .                       } else {
 36,090 ( 0.01%)                  self.token_cursor.next()
      .                       };
 49,060 ( 0.01%)              self.token_cursor.num_next_calls += 1;
      .                       // We've retrieved an token from the underlying
      .                       // cursor, so we no longer need to worry about
      .                       // an unglued token. See `break_and_eat` for more details
 12,265 ( 0.00%)              self.token_cursor.break_last_token = false;
 49,060 ( 0.01%)              if next.span.is_dummy() {
      .                           // Tweak the location for better diagnostics, but keep syntactic context intact.
    848 ( 0.00%)                  next.span = fallback_span.with_ctxt(next.span.ctxt());
      .                       }
 41,319 ( 0.01%)              if matches!(
 24,530 ( 0.01%)                  next.kind,
      .                           token::OpenDelim(token::NoDelim) | token::CloseDelim(token::NoDelim)
      .                       ) {
      .                           continue;
      .                       }
 49,060 ( 0.01%)              return (next, spacing);
      .                   }
      .               }
      .           
      .               pub fn unexpected<T>(&mut self) -> PResult<'a, T> {
      .                   match self.expect_one_of(&[], &[]) {
      .                       Err(e) => Err(e),
      .                       // We can get `Ok(true)` from `recover_closing_delimiter`
      .                       // which is called in `expected_one_of_not_found`.
      .                       Ok(_) => FatalError.raise(),
      .                   }
      .               }
      .           
      .               /// Expects and consumes the token `t`. Signals an error if the next token is not `t`.
 24,669 ( 0.01%)      pub fn expect(&mut self, t: &TokenKind) -> PResult<'a, bool /* recovered */> {
  2,741 ( 0.00%)          if self.expected_tokens.is_empty() {
    630 ( 0.00%)              if self.token == *t {
    525 ( 0.00%)                  self.bump();
      .                           Ok(false)
      .                       } else {
      .                           self.unexpected_try_recover(t)
      .                       }
      .                   } else {
 31,632 ( 0.01%)              self.expect_one_of(slice::from_ref(t), &[])
      .                   }
 41,115 ( 0.01%)      }
      .           
      .               /// Expect next token to be edible or inedible token.  If edible,
      .               /// then consume it; if inedible, then return without consuming
      .               /// anything.  Signal a fatal error if next token is unexpected.
 34,776 ( 0.01%)      pub fn expect_one_of(
      .                   &mut self,
      .                   edible: &[TokenKind],
      .                   inedible: &[TokenKind],
      .               ) -> PResult<'a, bool /* recovered */> {
  5,796 ( 0.00%)          if edible.contains(&self.token.kind) {
  7,920 ( 0.00%)              self.bump();
      .                       Ok(false)
      .                   } else if inedible.contains(&self.token.kind) {
      .                       // leave it in the input
      .                       Ok(false)
      .                   } else if self.last_unexpected_token_span == Some(self.token.span) {
      .                       FatalError.raise();
      .                   } else {
      .                       self.expected_one_of_not_found(edible, inedible)
      .                   }
 43,470 ( 0.01%)      }
      .           
      .               // Public for rustfmt usage.
      .               pub fn parse_ident(&mut self) -> PResult<'a, Ident> {
  8,289 ( 0.00%)          self.parse_ident_common(true)
      .               }
      .           
      .               fn ident_or_err(&mut self) -> PResult<'a, (Ident, /* is_raw */ bool)> {
  6,132 ( 0.00%)          self.token.ident().ok_or_else(|| match self.prev_token.kind {
      .                       TokenKind::DocComment(..) => {
      .                           self.span_err(self.prev_token.span, Error::UselessDocComment)
      .                       }
      .                       _ => self.expected_ident_found(),
      .                   })
      .               }
      .           
 14,273 ( 0.00%)      fn parse_ident_common(&mut self, recover: bool) -> PResult<'a, Ident> {
  2,039 ( 0.00%)          let (ident, is_raw) = self.ident_or_err()?;
 12,234 ( 0.00%)          if !is_raw && ident.is_reserved() {
      .                       let mut err = self.expected_ident_found();
      .                       if recover {
      .                           err.emit();
      .                       } else {
      .                           return Err(err);
      .                       }
      .                   }
  8,156 ( 0.00%)          self.bump();
      .                   Ok(ident)
 20,390 ( 0.01%)      }
      .           
      .               /// Checks if the next token is `tok`, and returns `true` if so.
      .               ///
      .               /// This method will automatically add `tok` to `expected_tokens` if `tok` is not
      .               /// encountered.
284,326 ( 0.07%)      fn check(&mut self, tok: &TokenKind) -> bool {
122,883 ( 0.03%)          let is_present = self.token == *tok;
 82,610 ( 0.02%)          if !is_present {
179,333 ( 0.05%)              self.expected_tokens.push(TokenType::Token(tok.clone()));
      .                   }
      .                   is_present
284,326 ( 0.07%)      }
      .           
      .               /// Consumes a token 'tok' if it exists. Returns whether the given token was present.
    300 ( 0.00%)      pub fn eat(&mut self, tok: &TokenKind) -> bool {
 56,053 ( 0.01%)          let is_present = self.check(tok);
 36,857 ( 0.01%)          if is_present {
  6,051 ( 0.00%)              self.bump()
      .                   }
      .                   is_present
    375 ( 0.00%)      }
      .           
      .               /// If the next token is the given keyword, returns `true` without eating it.
      .               /// An expectation is also added for diagnostics purposes.
  7,610 ( 0.00%)      fn check_keyword(&mut self, kw: Symbol) -> bool {
  1,550 ( 0.00%)          self.expected_tokens.push(TokenType::Keyword(kw));
 45,788 ( 0.01%)          self.token.is_keyword(kw)
      .               }
      .           
      .               /// If the next token is the given keyword, eats it and returns `true`.
      .               /// Otherwise, returns `false`. An expectation is also added for diagnostics purposes.
      .               // Public for rustfmt usage.
 12,335 ( 0.00%)      pub fn eat_keyword(&mut self, kw: Symbol) -> bool {
  9,060 ( 0.00%)          if self.check_keyword(kw) {
  1,135 ( 0.00%)              self.bump();
      .                       true
      .                   } else {
      .                       false
      .                   }
 12,335 ( 0.00%)      }
      .           
      .               fn eat_keyword_noexpect(&mut self, kw: Symbol) -> bool {
  1,244 ( 0.00%)          if self.token.is_keyword(kw) {
    308 ( 0.00%)              self.bump();
      .                       true
      .                   } else {
      .                       false
      .                   }
      .               }
      .           
      .               /// If the given word is not a keyword, signals an error.
      .               /// If the next token is not the given word, signals an error.
      .               /// Otherwise, eats it.
    115 ( 0.00%)      fn expect_keyword(&mut self, kw: Symbol) -> PResult<'a, ()> {
      .                   if !self.eat_keyword(kw) { self.unexpected() } else { Ok(()) }
     92 ( 0.00%)      }
      .           
      .               /// Is the given keyword `kw` followed by a non-reserved identifier?
 12,792 ( 0.00%)      fn is_kw_followed_by_ident(&self, kw: Symbol) -> bool {
  6,396 ( 0.00%)          self.token.is_keyword(kw) && self.look_ahead(1, |t| t.is_ident() && !t.is_reserved_ident())
 14,391 ( 0.00%)      }
      .           
  9,252 ( 0.00%)      fn check_or_expected(&mut self, ok: bool, typ: TokenType) -> bool {
  3,880 ( 0.00%)          if ok {
      .                       true
      .                   } else {
  1,068 ( 0.00%)              self.expected_tokens.push(typ);
      .                       false
      .                   }
  9,252 ( 0.00%)      }
      .           
      .               fn check_ident(&mut self) -> bool {
  1,760 ( 0.00%)          self.check_or_expected(self.token.is_ident(), TokenType::Ident)
      .               }
      .           
  4,764 ( 0.00%)      fn check_path(&mut self) -> bool {
  9,962 ( 0.00%)          self.check_or_expected(self.token.is_path_start(), TokenType::Path)
  5,955 ( 0.00%)      }
      .           
      .               fn check_type(&mut self) -> bool {
     32 ( 0.00%)          self.check_or_expected(self.token.can_begin_type(), TokenType::Type)
      .               }
      .           
      .               fn check_const_arg(&mut self) -> bool {
     32 ( 0.00%)          self.check_or_expected(self.token.can_begin_const_arg(), TokenType::Const)
      .               }
      .           
  1,872 ( 0.00%)      fn check_inline_const(&self, dist: usize) -> bool {
  1,040 ( 0.00%)          self.is_keyword_ahead(dist, &[kw::Const])
      .                       && self.look_ahead(dist + 1, |t| match t.kind {
      .                           token::Interpolated(ref nt) => matches!(**nt, token::NtBlock(..)),
      .                           token::OpenDelim(DelimToken::Brace) => true,
      .                           _ => false,
      .                       })
  1,872 ( 0.00%)      }
      .           
      .               /// Checks to see if the next token is either `+` or `+=`.
      .               /// Otherwise returns `false`.
      .               fn check_plus(&mut self) -> bool {
    572 ( 0.00%)          self.check_or_expected(
    286 ( 0.00%)              self.token.is_like_plus(),
    286 ( 0.00%)              TokenType::Token(token::BinOp(token::Plus)),
      .                   )
      .               }
      .           
      .               /// Eats the expected token if it's present possibly breaking
      .               /// compound tokens like multi-character operators in process.
      .               /// Returns `true` if the token was eaten.
 13,740 ( 0.00%)      fn break_and_eat(&mut self, expected: TokenKind) -> bool {
  8,015 ( 0.00%)          if self.token.kind == expected {
     48 ( 0.00%)              self.bump();
      .                       return true;
      .                   }
  5,605 ( 0.00%)          match self.token.kind.break_two_token_op() {
      .                       Some((first, second)) if first == expected => {
      .                           let first_span = self.sess.source_map().start_point(self.token.span);
      .                           let second_span = self.token.span.with_lo(first_span.hi());
      .                           self.token = Token::new(first, first_span);
      .                           // Keep track of this token - if we end token capturing now,
      .                           // we'll want to append this token to the captured stream.
      .                           //
      .                           // If we consume any additional tokens, then this token
-- line 682 ----------------------------------------
-- line 684 ----------------------------------------
      .                           // and `next_tok` will set this field to `None`
      .                           self.token_cursor.break_last_token = true;
      .                           // Use the spacing of the glued token as the spacing
      .                           // of the unglued second token.
      .                           self.bump_with((Token::new(second, second_span), self.token_spacing));
      .                           true
      .                       }
      .                       _ => {
  3,363 ( 0.00%)                  self.expected_tokens.push(TokenType::Token(expected));
      .                           false
      .                       }
      .                   }
 14,789 ( 0.00%)      }
      .           
      .               /// Eats `+` possibly breaking tokens like `+=` in process.
      .               fn eat_plus(&mut self) -> bool {
     16 ( 0.00%)          self.break_and_eat(token::BinOp(token::Plus))
      .               }
      .           
      .               /// Eats `&` possibly breaking tokens like `&&` in process.
      .               /// Signals an error if `&` is not eaten.
      .               fn expect_and(&mut self) -> PResult<'a, ()> {
     72 ( 0.00%)          if self.break_and_eat(token::BinOp(token::And)) { Ok(()) } else { self.unexpected() }
      .               }
      .           
      .               /// Eats `|` possibly breaking tokens like `||` in process.
      .               /// Signals an error if `|` was not eaten.
      .               fn expect_or(&mut self) -> PResult<'a, ()> {
      .                   if self.break_and_eat(token::BinOp(token::Or)) { Ok(()) } else { self.unexpected() }
      .               }
      .           
      .               /// Eats `<` possibly breaking tokens like `<<` in process.
    616 ( 0.00%)      fn eat_lt(&mut self) -> bool {
  3,421 ( 0.00%)          let ate = self.break_and_eat(token::Lt);
  2,250 ( 0.00%)          if ate {
      .                       // See doc comment for `unmatched_angle_bracket_count`.
     24 ( 0.00%)              self.unmatched_angle_bracket_count += 1;
     26 ( 0.00%)              self.max_angle_bracket_count += 1;
      .                       debug!("eat_lt: (increment) count={:?}", self.unmatched_angle_bracket_count);
      .                   }
      .                   ate
    616 ( 0.00%)      }
      .           
      .               /// Eats `<` possibly breaking tokens like `<<` in process.
      .               /// Signals an error if `<` was not eaten.
      .               fn expect_lt(&mut self) -> PResult<'a, ()> {
      .                   if self.eat_lt() { Ok(()) } else { self.unexpected() }
      .               }
      .           
      .               /// Eats `>` possibly breaking tokens like `>>` in process.
      .               /// Signals an error if `>` was not eaten.
      .               fn expect_gt(&mut self) -> PResult<'a, ()> {
     36 ( 0.00%)          if self.break_and_eat(token::Gt) {
      .                       // See doc comment for `unmatched_angle_bracket_count`.
     18 ( 0.00%)              if self.unmatched_angle_bracket_count > 0 {
     12 ( 0.00%)                  self.unmatched_angle_bracket_count -= 1;
      .                           debug!("expect_gt: (decrement) count={:?}", self.unmatched_angle_bracket_count);
      .                       }
      .                       Ok(())
      .                   } else {
      .                       self.unexpected()
      .                   }
      .               }
      .           
      .               fn expect_any_with_type(&mut self, kets: &[&TokenKind], expect: TokenExpectType) -> bool {
      .                   kets.iter().any(|k| match expect {
 16,596 ( 0.00%)              TokenExpectType::Expect => self.check(k),
      .                       TokenExpectType::NoExpect => self.token == **k,
      .                   })
      .               }
      .           
      .               fn parse_seq_to_before_tokens<T>(
      .                   &mut self,
      .                   kets: &[&TokenKind],
      .                   sep: SeqSep,
-- line 758 ----------------------------------------
-- line 761 ----------------------------------------
      .               ) -> PResult<'a, (Vec<T>, bool /* trailing */, bool /* recovered */)> {
      .                   let mut first = true;
      .                   let mut recovered = false;
      .                   let mut trailing = false;
      .                   let mut v = vec![];
      .                   let unclosed_delims = !self.unclosed_delims.is_empty();
      .           
      .                   while !self.expect_any_with_type(kets, expect) {
 13,602 ( 0.00%)              if let token::CloseDelim(..) | token::Eof = self.token.kind {
      .                           break;
      .                       }
  8,918 ( 0.00%)              if let Some(ref t) = sep.sep {
  8,207 ( 0.00%)                  if first {
      .                               first = false;
      .                           } else {
 11,131 ( 0.00%)                      match self.expect(t) {
      .                                   Ok(false) => {
      .                                       self.current_closure.take();
      .                                   }
      .                                   Ok(true) => {
      .                                       self.current_closure.take();
      .                                       recovered = true;
      .                                       break;
      .                                   }
-- line 784 ----------------------------------------
-- line 857 ----------------------------------------
      .                                               e.cancel();
      .                                               break;
      .                                           }
      .                                       }
      .                                   }
      .                               }
      .                           }
      .                       }
  5,010 ( 0.00%)              if sep.trailing_sep_allowed && self.expect_any_with_type(kets, expect) {
      .                           trailing = true;
      .                           break;
      .                       }
      .           
  2,674 ( 0.00%)              let t = f(self)?;
    379 ( 0.00%)              v.push(t);
      .                   }
      .           
  4,216 ( 0.00%)          Ok((v, trailing, recovered))
      .               }
      .           
      .               fn recover_missing_braces_around_closure_body(
      .                   &mut self,
      .                   closure_spans: ClosureSpans,
      .                   mut expect_err: DiagnosticBuilder<'_>,
      .               ) -> PResult<'a, ()> {
      .                   let initial_semicolon = self.token.span;
-- line 882 ----------------------------------------
-- line 937 ----------------------------------------
      .               /// `f` must consume tokens until reaching the next separator or
      .               /// closing bracket.
      .               fn parse_seq_to_before_end<T>(
      .                   &mut self,
      .                   ket: &TokenKind,
      .                   sep: SeqSep,
      .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
      .               ) -> PResult<'a, (Vec<T>, bool, bool)> {
  3,562 ( 0.00%)          self.parse_seq_to_before_tokens(&[ket], sep, TokenExpectType::Expect, f)
      .               }
      .           
      .               /// Parses a sequence, including the closing delimiter. The function
      .               /// `f` must consume tokens until reaching the next separator or
      .               /// closing bracket.
  2,280 ( 0.00%)      fn parse_seq_to_end<T>(
      .                   &mut self,
      .                   ket: &TokenKind,
      .                   sep: SeqSep,
      .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
      .               ) -> PResult<'a, (Vec<T>, bool /* trailing */)> {
  2,341 ( 0.00%)          let (val, trailing, recovered) = self.parse_seq_to_before_end(ket, sep, f)?;
  1,875 ( 0.00%)          if !recovered {
      .                       self.eat(ket);
      .                   }
  3,830 ( 0.00%)          Ok((val, trailing))
  1,824 ( 0.00%)      }
      .           
      .               /// Parses a sequence, including the closing delimiter. The function
      .               /// `f` must consume tokens until reaching the next separator or
      .               /// closing bracket.
      .               fn parse_unspanned_seq<T>(
      .                   &mut self,
      .                   bra: &TokenKind,
      .                   ket: &TokenKind,
      .                   sep: SeqSep,
      .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
      .               ) -> PResult<'a, (Vec<T>, bool)> {
    773 ( 0.00%)          self.expect(bra)?;
  1,824 ( 0.00%)          self.parse_seq_to_end(ket, sep, f)
      .               }
      .           
      .               fn parse_delim_comma_seq<T>(
      .                   &mut self,
      .                   delim: DelimToken,
      .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
      .               ) -> PResult<'a, (Vec<T>, bool)> {
      .                   self.parse_unspanned_seq(
    294 ( 0.00%)              &token::OpenDelim(delim),
    360 ( 0.00%)              &token::CloseDelim(delim),
      .                       SeqSep::trailing_allowed(token::Comma),
      .                       f,
      .                   )
      .               }
      .           
      .               fn parse_paren_comma_seq<T>(
      .                   &mut self,
      .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
      .               ) -> PResult<'a, (Vec<T>, bool)> {
      .                   self.parse_delim_comma_seq(token::Paren, f)
      .               }
      .           
      .               /// Advance the parser by one token using provided token as the next one.
159,445 ( 0.04%)      fn bump_with(&mut self, (next_token, next_spacing): (Token, Spacing)) {
      .                   // Bumping after EOF is a bad sign, usually an infinite loop.
 73,590 ( 0.02%)          if self.prev_token.kind == TokenKind::Eof {
      .                       let msg = "attempted to bump the parser past EOF (may be stuck in a loop)";
      .                       self.span_bug(self.token.span, msg);
      .                   }
      .           
      .                   // Update the current and previous tokens.
 49,060 ( 0.01%)          self.prev_token = mem::replace(&mut self.token, next_token);
 12,265 ( 0.00%)          self.token_spacing = next_spacing;
      .           
      .                   // Diagnostics.
 12,265 ( 0.00%)          self.expected_tokens.clear();
      .               }
      .           
      .               /// Advance the parser by one token.
 98,120 ( 0.03%)      pub fn bump(&mut self) {
 49,060 ( 0.01%)          let next_token = self.next_tok(self.token.span);
 73,590 ( 0.02%)          self.bump_with(next_token);
 98,120 ( 0.03%)      }
      .           
      .               /// Look-ahead `dist` tokens of `self.token` and get access to that token there.
      .               /// When `dist == 0` then the current token is looked at.
     16 ( 0.00%)      pub fn look_ahead<R>(&self, dist: usize, looker: impl FnOnce(&Token) -> R) -> R {
    636 ( 0.00%)          if dist == 0 {
    284 ( 0.00%)              return looker(&self.token);
      .                   }
      .           
  5,165 ( 0.00%)          let frame = &self.token_cursor.frame;
  5,390 ( 0.00%)          if frame.delim != DelimToken::NoDelim {
      .                       let all_normal = (0..dist).all(|i| {
 14,992 ( 0.00%)                  let token = frame.tree_cursor.look_ahead(i);
 18,410 ( 0.00%)                  !matches!(token, Some(TokenTree::Delimited(_, DelimToken::NoDelim, _)))
      .                       });
      .                       if all_normal {
 24,677 ( 0.01%)                  return match frame.tree_cursor.look_ahead(dist - 1) {
  7,754 ( 0.00%)                      Some(tree) => match tree {
  3,625 ( 0.00%)                          TokenTree::Token(token) => looker(token),
      .                                   TokenTree::Delimited(dspan, delim, _) => {
  1,810 ( 0.00%)                              looker(&Token::new(token::OpenDelim(*delim), dspan.open))
      .                                   }
      .                               },
  7,638 ( 0.00%)                      None => looker(&Token::new(token::CloseDelim(frame.delim), frame.span.close)),
      .                           };
      .                       }
      .                   }
      .           
      .                   let mut cursor = self.token_cursor.clone();
      .                   let mut i = 0;
    458 ( 0.00%)          let mut token = Token::dummy();
      .                   while i < dist {
  3,122 ( 0.00%)              token = cursor.next().0;
  1,420 ( 0.00%)              if matches!(
    892 ( 0.00%)                  token.kind,
      .                           token::OpenDelim(token::NoDelim) | token::CloseDelim(token::NoDelim)
      .                       ) {
      .                           continue;
      .                       }
      .                       i += 1;
      .                   }
     30 ( 0.00%)          return looker(&token);
      .               }
      .           
      .               /// Returns whether any of the given keywords are `dist` tokens ahead of the current one.
  2,745 ( 0.00%)      fn is_keyword_ahead(&self, dist: usize, kws: &[Symbol]) -> bool {
    793 ( 0.00%)          self.look_ahead(dist, |t| kws.iter().any(|&kw| t.is_keyword(kw)))
  2,745 ( 0.00%)      }
      .           
      .               /// Parses asyncness: `async` or nothing.
      .               fn parse_asyncness(&mut self) -> Async {
      .                   if self.eat_keyword(kw::Async) {
      .                       let span = self.prev_token.uninterpolated_span();
      .                       Async::Yes { span, closure_id: DUMMY_NODE_ID, return_impl_trait_id: DUMMY_NODE_ID }
      .                   } else {
      .                       Async::No
      .                   }
      .               }
      .           
      .               /// Parses unsafety: `unsafe` or nothing.
    132 ( 0.00%)      fn parse_unsafety(&mut self) -> Unsafe {
      .                   if self.eat_keyword(kw::Unsafe) {
     50 ( 0.00%)              Unsafe::Yes(self.prev_token.uninterpolated_span())
      .                   } else {
      .                       Unsafe::No
      .                   }
    528 ( 0.00%)      }
      .           
      .               /// Parses constness: `const` or nothing.
  2,176 ( 0.00%)      fn parse_constness(&mut self) -> Const {
      .                   // Avoid const blocks to be parsed as const items
    666 ( 0.00%)          if self.look_ahead(1, |t| t != &token::OpenDelim(DelimToken::Brace))
      .                       && self.eat_keyword(kw::Const)
      .                   {
    105 ( 0.00%)              Const::Yes(self.prev_token.uninterpolated_span())
      .                   } else {
      .                       Const::No
      .                   }
  3,808 ( 0.00%)      }
      .           
      .               /// Parses inline const expressions.
      .               fn parse_const_block(&mut self, span: Span, pat: bool) -> PResult<'a, P<Expr>> {
      .                   if pat {
      .                       self.sess.gated_spans.gate(sym::inline_const_pat, span);
      .                   } else {
      .                       self.sess.gated_spans.gate(sym::inline_const, span);
      .                   }
-- line 1104 ----------------------------------------
-- line 1110 ----------------------------------------
      .                   };
      .                   let blk_span = anon_const.value.span;
      .                   Ok(self.mk_expr(span.to(blk_span), ExprKind::ConstBlock(anon_const), AttrVec::new()))
      .               }
      .           
      .               /// Parses mutability (`mut` or nothing).
      .               fn parse_mutability(&mut self) -> Mutability {
      .                   if self.eat_keyword(kw::Mut) { Mutability::Mut } else { Mutability::Not }
     27 ( 0.00%)      }
      .           
      .               /// Possibly parses mutability (`const` or `mut`).
     78 ( 0.00%)      fn parse_const_or_mut(&mut self) -> Option<Mutability> {
      .                   if self.eat_keyword(kw::Mut) {
      .                       Some(Mutability::Mut)
      .                   } else if self.eat_keyword(kw::Const) {
      .                       Some(Mutability::Not)
      .                   } else {
      .                       None
      .                   }
     78 ( 0.00%)      }
      .           
      .               fn parse_field_name(&mut self) -> PResult<'a, Ident> {
      8 ( 0.00%)          if let token::Literal(token::Lit { kind: token::Integer, symbol, suffix }) = self.token.kind
      .                   {
      .                       self.expect_no_suffix(self.token.span, "a tuple index", suffix);
      .                       self.bump();
      .                       Ok(Ident::new(symbol, self.prev_token.span))
      .                   } else {
     12 ( 0.00%)              self.parse_ident_common(true)
      .                   }
      .               }
      .           
      .               fn parse_mac_args(&mut self) -> PResult<'a, P<MacArgs>> {
    175 ( 0.00%)          self.parse_mac_args_common(true).map(P)
      .               }
      .           
      .               fn parse_attr_args(&mut self) -> PResult<'a, MacArgs> {
    309 ( 0.00%)          self.parse_mac_args_common(false)
      .               }
      .           
  1,602 ( 0.00%)      fn parse_mac_args_common(&mut self, delimited_only: bool) -> PResult<'a, MacArgs> {
  1,424 ( 0.00%)          Ok(
  1,086 ( 0.00%)              if self.check(&token::OpenDelim(DelimToken::Paren))
    147 ( 0.00%)                  || self.check(&token::OpenDelim(DelimToken::Bracket))
    147 ( 0.00%)                  || self.check(&token::OpenDelim(DelimToken::Brace))
      .                       {
    516 ( 0.00%)                  match self.parse_token_tree() {
    645 ( 0.00%)                      TokenTree::Delimited(dspan, delim, tokens) =>
      .                               // We've confirmed above that there is a delimiter so unwrapping is OK.
      .                               {
    258 ( 0.00%)                          MacArgs::Delimited(dspan, MacDelimiter::from_token(delim).unwrap(), tokens)
      .                               }
      .                               _ => unreachable!(),
      .                           }
     98 ( 0.00%)              } else if !delimited_only {
      .                           if self.eat(&token::Eq) {
      .                               let eq_span = self.prev_token.span;
      .           
      .                               // Collect tokens because they are used during lowering to HIR.
      .                               let expr = self.parse_expr_force_collect()?;
      .                               let span = expr.span;
      .           
      .                               let token_kind = token::Interpolated(Lrc::new(token::NtExpr(expr)));
-- line 1172 ----------------------------------------
-- line 1173 ----------------------------------------
      .                               MacArgs::Eq(eq_span, Token::new(token_kind, span))
      .                           } else {
      .                               MacArgs::Empty
      .                           }
      .                       } else {
      .                           return self.unexpected();
      .                       },
      .                   )
  1,246 ( 0.00%)      }
      .           
      .               fn parse_or_use_outer_attributes(
      .                   &mut self,
      .                   already_parsed_attrs: Option<AttrWrapper>,
      .               ) -> PResult<'a, AttrWrapper> {
 10,917 ( 0.00%)          if let Some(attrs) = already_parsed_attrs {
      .                       Ok(attrs)
      .                   } else {
  6,634 ( 0.00%)              self.parse_outer_attributes()
      .                   }
      .               }
      .           
      .               /// Parses a single token tree from the input.
  1,984 ( 0.00%)      pub(crate) fn parse_token_tree(&mut self) -> TokenTree {
  1,164 ( 0.00%)          match self.token.kind {
      .                       token::OpenDelim(..) => {
      .                           let depth = self.token_cursor.stack.len();
      .           
      .                           // We keep advancing the token cursor until we hit
      .                           // the matching `CloseDelim` token.
  3,214 ( 0.00%)                  while !(depth == self.token_cursor.stack.len()
      .                               && matches!(self.token.kind, token::CloseDelim(_)))
      .                           {
      .                               // Advance one token at a time, so `TokenCursor::next()`
      .                               // can capture these tokens if necessary.
  1,562 ( 0.00%)                      self.bump();
      .                           }
      .                           // We are still inside the frame corresponding
      .                           // to the delimited stream we captured, so grab
      .                           // the tokens from this frame.
      .                           let frame = &self.token_cursor.frame;
    286 ( 0.00%)                  let stream = frame.tree_cursor.stream.clone();
    286 ( 0.00%)                  let span = frame.span;
    143 ( 0.00%)                  let delim = frame.delim;
      .                           // Consume close delimiter
    286 ( 0.00%)                  self.bump();
    715 ( 0.00%)                  TokenTree::Delimited(span, delim, stream)
      .                       }
      .                       token::CloseDelim(_) | token::Eof => unreachable!(),
      .                       _ => {
    210 ( 0.00%)                  self.bump();
    525 ( 0.00%)                  TokenTree::Token(self.prev_token.clone())
      .                       }
      .                   }
  1,736 ( 0.00%)      }
      .           
      .               /// Parses a stream of tokens into a list of `TokenTree`s, up to EOF.
      .               pub fn parse_all_token_trees(&mut self) -> PResult<'a, Vec<TokenTree>> {
      .                   let mut tts = Vec::new();
      .                   while self.token != token::Eof {
      .                       tts.push(self.parse_token_tree());
      .                   }
      .                   Ok(tts)
-- line 1234 ----------------------------------------
-- line 1244 ----------------------------------------
      .                   }
      .                   TokenStream::new(result)
      .               }
      .           
      .               /// Evaluates the closure with restrictions in place.
      .               ///
      .               /// Afters the closure is evaluated, restrictions are reset.
      .               fn with_res<T>(&mut self, res: Restrictions, f: impl FnOnce(&mut Self) -> T) -> T {
  3,769 ( 0.00%)          let old = self.restrictions;
  4,679 ( 0.00%)          self.restrictions = res;
      .                   let res = f(self);
  4,252 ( 0.00%)          self.restrictions = old;
      .                   res
      .               }
      .           
  4,240 ( 0.00%)      fn is_crate_vis(&self) -> bool {
  2,650 ( 0.00%)          self.token.is_keyword(kw::Crate) && self.look_ahead(1, |t| t != &token::ModSep)
  4,770 ( 0.00%)      }
      .           
      .               /// Parses `pub`, `pub(crate)` and `pub(in path)` plus shortcuts `crate` for `pub(crate)`,
      .               /// `pub(self)` for `pub(in self)` and `pub(super)` for `pub(in super)`.
      .               /// If the following element can't be a tuple (i.e., it's a function definition), then
      .               /// it's not a tuple struct field), and the contents within the parentheses aren't valid,
      .               /// so emit a proper diagnostic.
      .               // Public for rustfmt usage.
  2,990 ( 0.00%)      pub fn parse_visibility(&mut self, fbt: FollowedByType) -> PResult<'a, Visibility> {
    598 ( 0.00%)          maybe_whole!(self, NtVis, |x| x);
      .           
    299 ( 0.00%)          self.expected_tokens.push(TokenType::Keyword(kw::Crate));
  1,196 ( 0.00%)          if self.is_crate_vis() {
      .                       self.bump(); // `crate`
      .                       self.sess.gated_spans.gate(sym::crate_visibility_modifier, self.prev_token.span);
      .                       return Ok(Visibility {
      .                           span: self.prev_token.span,
      .                           kind: VisibilityKind::Crate(CrateSugar::JustCrate),
      .                           tokens: None,
      .                       });
      .                   }
      .           
      .                   if !self.eat_keyword(kw::Pub) {
      .                       // We need a span for our `Spanned<VisibilityKind>`, but there's inherently no
      .                       // keyword to grab a span from for inherited visibility; an empty span at the
      .                       // beginning of the current token would seem to be the "Schelling span".
    243 ( 0.00%)              return Ok(Visibility {
    729 ( 0.00%)                  span: self.token.span.shrink_to_lo(),
      .                           kind: VisibilityKind::Inherited,
      .                           tokens: None,
      .                       });
      .                   }
     56 ( 0.00%)          let lo = self.prev_token.span;
      .           
    280 ( 0.00%)          if self.check(&token::OpenDelim(token::Paren)) {
      .                       // We don't `self.bump()` the `(` yet because this might be a struct definition where
      .                       // `()` or a tuple might be allowed. For example, `struct Struct(pub (), pub (usize));`.
      .                       // Because of this, we only `bump` the `(` if we're assured it is appropriate to do so
      .                       // by the following tokens.
      .                       if self.is_keyword_ahead(1, &[kw::Crate]) && self.look_ahead(2, |t| t != &token::ModSep)
      .                       // account for `pub(crate::foo)`
      .                       {
      .                           // Parse `pub(crate)`.
-- line 1303 ----------------------------------------
-- line 1338 ----------------------------------------
      .                       } else if let FollowedByType::No = fbt {
      .                           // Provide this diagnostic if a type cannot follow;
      .                           // in particular, if this is not a tuple struct.
      .                           self.recover_incorrect_vis_restriction()?;
      .                           // Emit diagnostic, but continue with public visibility.
      .                       }
      .                   }
      .           
    168 ( 0.00%)          Ok(Visibility { span: lo, kind: VisibilityKind::Public, tokens: None })
  2,691 ( 0.00%)      }
      .           
      .               /// Recovery for e.g. `pub(something) fn ...` or `struct X { pub(something) y: Z }`
      .               fn recover_incorrect_vis_restriction(&mut self) -> PResult<'a, ()> {
      .                   self.bump(); // `(`
      .                   let path = self.parse_path(PathStyle::Mod)?;
      .                   self.expect(&token::CloseDelim(token::Paren))?; // `)`
      .           
      .                   let msg = "incorrect visibility restriction";
-- line 1355 ----------------------------------------
-- line 1370 ----------------------------------------
      .                       )
      .                       .emit();
      .           
      .                   Ok(())
      .               }
      .           
      .               /// Parses `extern string_literal?`.
      .               fn parse_extern(&mut self) -> Extern {
     43 ( 0.00%)          if self.eat_keyword(kw::Extern) { Extern::from_abi(self.parse_abi()) } else { Extern::None }
      .               }
      .           
      .               /// Parses a string literal as an ABI spec.
      .               fn parse_abi(&mut self) -> Option<StrLit> {
      .                   match self.parse_str_lit() {
      .                       Ok(str_lit) => Some(str_lit),
      .                       Err(Some(lit)) => match lit.kind {
      .                           ast::LitKind::Err(_) => None,
-- line 1386 ----------------------------------------
-- line 1409 ----------------------------------------
      .                   self.collect_tokens_trailing_token(
      .                       AttrWrapper::empty(),
      .                       ForceCollect::Yes,
      .                       |this, _attrs| Ok((f(this)?, TrailingToken::None)),
      .                   )
      .               }
      .           
      .               /// `::{` or `::*`
 13,808 ( 0.00%)      fn is_import_coupler(&mut self) -> bool {
  6,904 ( 0.00%)          self.check(&token::ModSep)
      .                       && self.look_ahead(1, |t| {
  1,633 ( 0.00%)                  *t == token::OpenDelim(token::Brace) || *t == token::BinOp(token::Star)
      .                       })
 15,012 ( 0.00%)      }
      .           
      .               pub fn clear_expected_tokens(&mut self) {
      .                   self.expected_tokens.clear();
      .               }
      .           }
      .           
      .           crate fn make_unclosed_delims_error(
      .               unmatched: UnmatchedBrace,
-- line 1430 ----------------------------------------
-- line 1450 ----------------------------------------
      .                   err.span_label(sp, "closing delimiter possibly meant for this");
      .               }
      .               if let Some(sp) = unmatched.unclosed_span {
      .                   err.span_label(sp, "unclosed delimiter");
      .               }
      .               Some(err)
      .           }
      .           
  3,080 ( 0.00%)  pub fn emit_unclosed_delims(unclosed_delims: &mut Vec<UnmatchedBrace>, sess: &ParseSess) {
  1,540 ( 0.00%)      *sess.reached_eof.borrow_mut() |=
      .                   unclosed_delims.iter().any(|unmatched_delim| unmatched_delim.found_delim.is_none());
  1,540 ( 0.00%)      for unmatched in unclosed_delims.drain(..) {
      .                   if let Some(mut e) = make_unclosed_delims_error(unmatched, sess) {
      .                       e.emit();
      .                   }
      .               }
  3,080 ( 0.00%)  }
      .           
      .           /// A helper struct used when building an `AttrAnnotatedTokenStream` from
      .           /// a `LazyTokenStream`. Both delimiter and non-delimited tokens
      .           /// are stored as `FlatToken::Token`. A vector of `FlatToken`s
      .           /// is then 'parsed' to build up an `AttrAnnotatedTokenStream` with nested
      .           /// `AttrAnnotatedTokenTree::Delimited` tokens
      .           #[derive(Debug, Clone)]
      .           pub enum FlatToken {
-- line 1474 ----------------------------------------

 82,812 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/tokentrees.rs
--------------------------------------------------------------------------------
Ir               

-- line 8 ----------------------------------------
      .           };
      .           use rustc_ast_pretty::pprust::token_to_string;
      .           use rustc_data_structures::fx::FxHashMap;
      .           use rustc_errors::PResult;
      .           use rustc_span::Span;
      .           
      .           impl<'a> StringReader<'a> {
      .               pub(super) fn into_token_trees(self) -> (PResult<'a, TokenStream>, Vec<UnmatchedBrace>) {
    228 ( 0.00%)          let mut tt_reader = TokenTreesReader {
      .                       string_reader: self,
     12 ( 0.00%)              token: Token::dummy(),
      .                       open_braces: Vec::new(),
      .                       unmatched_braces: Vec::new(),
      .                       matching_delim_spans: Vec::new(),
      .                       last_unclosed_found_span: None,
      .                       last_delim_empty_block_spans: FxHashMap::default(),
      .                       matching_block_spans: Vec::new(),
      .                   };
     12 ( 0.00%)          let res = tt_reader.parse_all_token_trees();
     72 ( 0.00%)          (res, tt_reader.unmatched_braces)
      .               }
      .           }
      .           
      .           struct TokenTreesReader<'a> {
      .               string_reader: StringReader<'a>,
      .               token: Token,
      .               /// Stack of open delimiters and their spans. Used for error message.
      .               open_braces: Vec<(token::DelimToken, Span)>,
-- line 35 ----------------------------------------
-- line 43 ----------------------------------------
      .               last_delim_empty_block_spans: FxHashMap<token::DelimToken, Span>,
      .               /// Collect the spans of braces (Open, Close). Used only
      .               /// for detecting if blocks are empty and only braces.
      .               matching_block_spans: Vec<(Span, Span)>,
      .           }
      .           
      .           impl<'a> TokenTreesReader<'a> {
      .               // Parse a stream of tokens into a list of `TokenTree`s, up to an `Eof`.
     96 ( 0.00%)      fn parse_all_token_trees(&mut self) -> PResult<'a, TokenStream> {
      .                   let mut buf = TokenStreamBuilder::default();
      .           
      .                   self.bump();
  1,922 ( 0.00%)          while self.token != token::Eof {
  7,592 ( 0.00%)              buf.push(self.parse_token_tree()?);
      .                   }
      .           
      .                   Ok(buf.into_token_stream())
    108 ( 0.00%)      }
      .           
      .               // Parse a stream of tokens into a list of `TokenTree`s, up to a `CloseDelim`.
      .               fn parse_token_trees_until_close_delim(&mut self) -> TokenStream {
      .                   let mut buf = TokenStreamBuilder::default();
      .                   loop {
 20,438 ( 0.01%)              if let token::CloseDelim(..) = self.token.kind {
      .                           return buf.into_token_stream();
      .                       }
      .           
 44,170 ( 0.01%)              match self.parse_token_tree() {
 79,506 ( 0.02%)                  Ok(tree) => buf.push(tree),
      .                           Err(mut e) => {
      .                               e.emit();
      .                               return buf.into_token_stream();
      .                           }
      .                       }
      .                   }
      .               }
      .           
 88,047 ( 0.02%)      fn parse_token_tree(&mut self) -> PResult<'a, TreeAndSpacing> {
 19,566 ( 0.01%)          let sm = self.string_reader.sess.source_map();
      .           
 82,507 ( 0.02%)          match self.token.kind {
      .                       token::Eof => {
      .                           let msg = "this file contains an unclosed delimiter";
      .                           let mut err =
      .                               self.string_reader.sess.span_diagnostic.struct_span_err(self.token.span, msg);
      .                           for &(_, sp) in &self.open_braces {
      .                               err.span_label(sp, "unclosed delimiter");
      .                               self.unmatched_braces.push(UnmatchedBrace {
      .                                   expected_delim: token::DelimToken::Brace,
-- line 91 ----------------------------------------
-- line 113 ----------------------------------------
      .                                   err.span_label(
      .                                       *close_sp,
      .                                       "...as it matches this but it has different indentation",
      .                                   );
      .                               }
      .                           }
      .                           Err(err)
      .                       }
  1,385 ( 0.00%)              token::OpenDelim(delim) => {
      .                           // The span for beginning of the delimited section
  1,385 ( 0.00%)                  let pre_span = self.token.span;
      .           
      .                           // Parse the open delimiter.
  9,695 ( 0.00%)                  self.open_braces.push((delim, self.token.span));
      .                           self.bump();
      .           
      .                           // Parse the token trees within the delimiters.
      .                           // We stop at any delimiter so we can try to recover if the user
      .                           // uses an incorrect delimiter.
  1,385 ( 0.00%)                  let tts = self.parse_token_trees_until_close_delim();
      .           
      .                           // Expand to cover the entire delimited token tree
  6,925 ( 0.00%)                  let delim_span = DelimSpan::from_pair(pre_span, self.token.span);
      .           
  2,770 ( 0.00%)                  match self.token.kind {
      .                               // Correct delimiter.
  2,770 ( 0.00%)                      token::CloseDelim(d) if d == delim => {
      .                                   let (open_brace, open_brace_span) = self.open_braces.pop().unwrap();
  2,770 ( 0.00%)                          let close_brace_span = self.token.span;
      .           
  4,155 ( 0.00%)                          if tts.is_empty() {
    144 ( 0.00%)                              let empty_block_span = open_brace_span.to(close_brace_span);
    192 ( 0.00%)                              if !sm.is_multiline(empty_block_span) {
      .                                           // Only track if the block is in the form of `{}`, otherwise it is
      .                                           // likely that it was written on purpose.
      .                                           self.last_delim_empty_block_spans.insert(delim, empty_block_span);
      .                                       }
      .                                   }
      .           
      .                                   //only add braces
  5,540 ( 0.00%)                          if let (DelimToken::Brace, DelimToken::Brace) = (open_brace, delim) {
      .                                       self.matching_block_spans.push((open_brace_span, close_brace_span));
      .                                   }
      .           
  1,385 ( 0.00%)                          if self.open_braces.is_empty() {
      .                                       // Clear up these spans to avoid suggesting them as we've found
      .                                       // properly matched delimiters so far for an entire block.
      .                                       self.matching_delim_spans.clear();
      .                                   } else {
      .                                       self.matching_delim_spans.push((
      .                                           open_brace,
      .                                           open_brace_span,
      .                                           close_brace_span,
-- line 165 ----------------------------------------
-- line 218 ----------------------------------------
      .                               token::Eof => {
      .                                   // Silently recover, the EOF token will be seen again
      .                                   // and an error emitted then. Thus we don't pop from
      .                                   // self.open_braces here.
      .                               }
      .                               _ => {}
      .                           }
      .           
  9,695 ( 0.00%)                  Ok(TokenTree::Delimited(delim_span, delim, tts).into())
      .                       }
      .                       token::CloseDelim(delim) => {
      .                           // An unexpected closing delimiter (i.e., there is no
      .                           // matching opening delimiter).
      .                           let token_str = token_to_string(&self.token);
      .                           let msg = format!("unexpected closing delimiter: `{}`", token_str);
      .                           let mut err =
      .                               self.string_reader.sess.span_diagnostic.struct_span_err(self.token.span, &msg);
-- line 234 ----------------------------------------
-- line 253 ----------------------------------------
      .                                   err.span_label(parent.1, "...matches this closing brace");
      .                               }
      .                           }
      .           
      .                           err.span_label(self.token.span, "unexpected closing delimiter");
      .                           Err(err)
      .                       }
      .                       _ => {
 41,990 ( 0.01%)                  let tt = TokenTree::Token(self.token.take());
      .                           let mut spacing = self.bump();
 16,796 ( 0.00%)                  if !self.token.is_op() {
      .                               spacing = Alone;
      .                           }
 50,388 ( 0.01%)                  Ok((tt, spacing))
      .                       }
      .                   }
 78,264 ( 0.02%)      }
      .           
      .               fn bump(&mut self) -> Spacing {
 93,659 ( 0.02%)          let (spacing, token) = self.string_reader.next_token();
 49,023 ( 0.01%)          self.token = token;
      .                   spacing
      .               }
      .           }
      .           
  1,385 ( 0.00%)  #[derive(Default)]
      .           struct TokenStreamBuilder {
      .               buf: Vec<TreeAndSpacing>,
      .           }
      .           
      .           impl TokenStreamBuilder {
127,179 ( 0.03%)      fn push(&mut self, (tree, joint): TreeAndSpacing) {
 56,899 ( 0.01%)          if let Some((TokenTree::Token(prev_token), Joint)) = self.buf.last() {
  3,692 ( 0.00%)              if let TokenTree::Token(token) = &tree {
  6,954 ( 0.00%)                  if let Some(glued) = prev_token.glue(token) {
      .                               self.buf.pop();
  4,248 ( 0.00%)                      self.buf.push((TokenTree::Token(glued), joint));
      .                               return;
      .                           }
      .                       }
      .                   }
 47,145 ( 0.01%)          self.buf.push((tree, joint))
 78,264 ( 0.02%)      }
      .           
      .               fn into_token_stream(self) -> TokenStream {
 13,958 ( 0.00%)          TokenStream::new(self.buf)
      .               }
      .           }

 35,182 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/tokentrees.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs
--------------------------------------------------------------------------------
Ir               

-- line 186 ----------------------------------------
      .           /// // use the values stored in map
      .           /// ```
      .           pub struct HashMap<K, V, S = DefaultHashBuilder, A: Allocator + Clone = Global> {
      .               pub(crate) hash_builder: S,
      .               pub(crate) table: RawTable<(K, V), A>,
      .           }
      .           
      .           impl<K: Clone, V: Clone, S: Clone, A: Allocator + Clone> Clone for HashMap<K, V, S, A> {
    128 ( 0.00%)      fn clone(&self) -> Self {
  1,077 ( 0.00%)          HashMap {
      .                       hash_builder: self.hash_builder.clone(),
    211 ( 0.00%)              table: self.table.clone(),
      .                   }
    144 ( 0.00%)      }
      .           
      .               fn clone_from(&mut self, source: &Self) {
      .                   self.table.clone_from(&source.table);
      .           
      .                   // Update hash_builder only if we successfully cloned all elements.
      .                   self.hash_builder.clone_from(&source.hash_builder);
      .               }
      .           }
-- line 207 ----------------------------------------
-- line 210 ----------------------------------------
      .           /// instances of any functions like RawTable::reserve from being generated
      .           #[cfg_attr(feature = "inline-more", inline)]
      .           pub(crate) fn make_hasher<K, Q, V, S>(hash_builder: &S) -> impl Fn(&(Q, V)) -> u64 + '_
      .           where
      .               K: Borrow<Q>,
      .               Q: Hash,
      .               S: BuildHasher,
      .           {
 27,649 ( 0.01%)      move |val| make_hash::<K, Q, S>(hash_builder, &val.0)
      .           }
      .           
      .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
      .           /// instances of any functions like RawTable::reserve from being generated
      .           #[cfg_attr(feature = "inline-more", inline)]
      .           fn equivalent_key<Q, K, V>(k: &Q) -> impl Fn(&(K, V)) -> bool + '_
      .           where
      .               K: Borrow<Q>,
      .               Q: ?Sized + Eq,
      .           {
 97,241 ( 0.03%)      move |x| k.eq(x.0.borrow())
      .           }
      .           
      .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
      .           /// instances of any functions like RawTable::reserve from being generated
      .           #[cfg_attr(feature = "inline-more", inline)]
      .           fn equivalent<Q, K>(k: &Q) -> impl Fn(&K) -> bool + '_
      .           where
      .               K: Borrow<Q>,
      .               Q: ?Sized + Eq,
      .           {
 31,620 ( 0.01%)      move |x| k.eq(x.borrow())
      .           }
      .           
      .           #[cfg(not(feature = "nightly"))]
      .           #[cfg_attr(feature = "inline-more", inline)]
      .           pub(crate) fn make_hash<K, Q, S>(hash_builder: &S, val: &Q) -> u64
      .           where
      .               K: Borrow<Q>,
      .               Q: Hash + ?Sized,
-- line 248 ----------------------------------------
-- line 251 ----------------------------------------
      .               use core::hash::Hasher;
      .               let mut state = hash_builder.build_hasher();
      .               val.hash(&mut state);
      .               state.finish()
      .           }
      .           
      .           #[cfg(feature = "nightly")]
      .           #[cfg_attr(feature = "inline-more", inline)]
      4 ( 0.00%)  pub(crate) fn make_hash<K, Q, S>(hash_builder: &S, val: &Q) -> u64
      .           where
      .               K: Borrow<Q>,
      .               Q: Hash + ?Sized,
      .               S: BuildHasher,
      .           {
      .               hash_builder.hash_one(val)
      8 ( 0.00%)  }
      .           
      .           #[cfg(not(feature = "nightly"))]
      .           #[cfg_attr(feature = "inline-more", inline)]
      .           pub(crate) fn make_insert_hash<K, S>(hash_builder: &S, val: &K) -> u64
      .           where
      .               K: Hash,
      .               S: BuildHasher,
      .           {
-- line 274 ----------------------------------------
-- line 367 ----------------------------------------
      .               /// let s = DefaultHashBuilder::default();
      .               /// let mut map = HashMap::with_hasher(s);
      .               /// map.insert(1, 2);
      .               /// ```
      .               ///
      .               /// [`BuildHasher`]: ../../std/hash/trait.BuildHasher.html
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub const fn with_hasher(hash_builder: S) -> Self {
 81,403 ( 0.02%)          Self {
      .                       hash_builder,
      .                       table: RawTable::new(),
      .                   }
      .               }
      .           
      .               /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`
      .               /// to hash the keys.
      .               ///
-- line 383 ----------------------------------------
-- line 437 ----------------------------------------
      .               /// use hashbrown::hash_map::DefaultHashBuilder;
      .               ///
      .               /// let s = DefaultHashBuilder::default();
      .               /// let mut map = HashMap::with_hasher(s);
      .               /// map.insert(1, 2);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn with_hasher_in(hash_builder: S, alloc: A) -> Self {
     13 ( 0.00%)          Self {
      .                       hash_builder,
      .                       table: RawTable::new_in(alloc),
      .                   }
      .               }
      .           
      .               /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`
      .               /// to hash the keys. It will be allocated with the given allocator.
      .               ///
-- line 453 ----------------------------------------
-- line 663 ----------------------------------------
      .               ///
      .               /// let mut a = HashMap::new();
      .               /// assert_eq!(a.len(), 0);
      .               /// a.insert(1, "a");
      .               /// assert_eq!(a.len(), 1);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn len(&self) -> usize {
  2,559 ( 0.00%)          self.table.len()
      .               }
      .           
      .               /// Returns `true` if the map contains no elements.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// use hashbrown::HashMap;
-- line 679 ----------------------------------------
-- line 680 ----------------------------------------
      .               ///
      .               /// let mut a = HashMap::new();
      .               /// assert!(a.is_empty());
      .               /// a.insert(1, "a");
      .               /// assert!(!a.is_empty());
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn is_empty(&self) -> bool {
 28,786 ( 0.01%)          self.len() == 0
      .               }
      .           
      .               /// Clears the map, returning all key-value pairs as an iterator. Keeps the
      .               /// allocated memory for reuse.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
-- line 696 ----------------------------------------
-- line 790 ----------------------------------------
      .               /// use hashbrown::HashMap;
      .               ///
      .               /// let mut a = HashMap::new();
      .               /// a.insert(1, "a");
      .               /// a.clear();
      .               /// assert!(a.is_empty());
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      6 ( 0.00%)      pub fn clear(&mut self) {
      .                   self.table.clear();
      6 ( 0.00%)      }
      .           
      .               /// Creates a consuming iterator visiting all the keys in arbitrary order.
      .               /// The map cannot be used after calling this.
      .               /// The iterator element type is `K`.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
-- line 808 ----------------------------------------
-- line 963 ----------------------------------------
      .               /// }
      .               ///
      .               /// assert_eq!(letters[&'s'], 2);
      .               /// assert_eq!(letters[&'t'], 3);
      .               /// assert_eq!(letters[&'u'], 1);
      .               /// assert_eq!(letters.get(&'y'), None);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
     12 ( 0.00%)      pub fn entry(&mut self, key: K) -> Entry<'_, K, V, S, A> {
      .                   let hash = make_insert_hash::<K, S>(&self.hash_builder, &key);
      .                   if let Some(elem) = self.table.find(hash, equivalent_key(&key)) {
      5 ( 0.00%)              Entry::Occupied(OccupiedEntry {
      .                           hash,
      .                           key: Some(key),
      .                           elem,
      .                           table: self,
      .                       })
      .                   } else {
     10 ( 0.00%)              Entry::Vacant(VacantEntry {
      .                           hash,
      .                           key,
      .                           table: self,
      .                       })
      .                   }
     15 ( 0.00%)      }
      .           
      .               /// Gets the given key's corresponding entry by reference in the map for in-place manipulation.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// use hashbrown::HashMap;
      .               ///
-- line 995 ----------------------------------------
-- line 1047 ----------------------------------------
      .               /// ```
      .               #[inline]
      .               pub fn get<Q: ?Sized>(&self, k: &Q) -> Option<&V>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
      .                   // Avoid `Option::map` because it bloats LLVM IR.
242,836 ( 0.06%)          match self.get_inner(k) {
      .                       Some(&(_, ref v)) => Some(v),
      .                       None => None,
      .                   }
      .               }
      .           
      .               /// Returns the key-value pair corresponding to the supplied key.
      .               ///
      .               /// The supplied key may be any borrowed form of the map's key type, but
-- line 1063 ----------------------------------------
-- line 1091 ----------------------------------------
      .               }
      .           
      .               #[inline]
      .               fn get_inner<Q: ?Sized>(&self, k: &Q) -> Option<&(K, V)>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
263,290 ( 0.07%)          if self.table.is_empty() {
      .                       None
      .                   } else {
      2 ( 0.00%)              let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
      .                       self.table.get(hash, equivalent_key(k))
      .                   }
      .               }
      .           
      .               /// Returns the key-value pair corresponding to the supplied key, with a mutable reference to value.
      .               ///
      .               /// The supplied key may be any borrowed form of the map's key type, but
      .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
-- line 1110 ----------------------------------------
-- line 1155 ----------------------------------------
      .               /// use hashbrown::HashMap;
      .               ///
      .               /// let mut map = HashMap::new();
      .               /// map.insert(1, "a");
      .               /// assert_eq!(map.contains_key(&1), true);
      .               /// assert_eq!(map.contains_key(&2), false);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
 58,085 ( 0.02%)      pub fn contains_key<Q: ?Sized>(&self, k: &Q) -> bool
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
      .                   self.get_inner(k).is_some()
 79,276 ( 0.02%)      }
      .           
      .               /// Returns a mutable reference to the value corresponding to the key.
      .               ///
      .               /// The key may be any borrowed form of the map's key type, but
      .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
      .               /// the key type.
      .               ///
      .               /// [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html
-- line 1177 ----------------------------------------
-- line 1185 ----------------------------------------
      .               /// let mut map = HashMap::new();
      .               /// map.insert(1, "a");
      .               /// if let Some(x) = map.get_mut(&1) {
      .               ///     *x = "b";
      .               /// }
      .               /// assert_eq!(map[&1], "b");
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
    343 ( 0.00%)      pub fn get_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut V>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
      .                   // Avoid `Option::map` because it bloats LLVM IR.
  1,029 ( 0.00%)          match self.get_inner_mut(k) {
      .                       Some(&mut (_, ref mut v)) => Some(v),
      .                       None => None,
      .                   }
    686 ( 0.00%)      }
      .           
      .               #[inline]
      .               fn get_inner_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut (K, V)>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
    343 ( 0.00%)          if self.table.is_empty() {
      .                       None
      .                   } else {
      .                       let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
      .                       self.table.get_mut(hash, equivalent_key(k))
      .                   }
      .               }
      .           
      .               /// Attempts to get mutable references to `N` values in the map at once.
-- line 1219 ----------------------------------------
-- line 1495 ----------------------------------------
      .               /// assert_eq!(map.insert(37, "a"), None);
      .               /// assert_eq!(map.is_empty(), false);
      .               ///
      .               /// map.insert(37, "b");
      .               /// assert_eq!(map.insert(37, "c"), Some("b"));
      .               /// assert_eq!(map[&37], "c");
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
634,751 ( 0.16%)      pub fn insert(&mut self, k: K, v: V) -> Option<V> {
      .                   let hash = make_insert_hash::<K, S>(&self.hash_builder, &k);
     10 ( 0.00%)          if let Some((_, item)) = self.table.get_mut(hash, equivalent_key(&k)) {
      .                       Some(mem::replace(item, v))
      .                   } else {
268,335 ( 0.07%)              self.table
239,207 ( 0.06%)                  .insert(hash, (k, v), make_hasher::<K, _, V, S>(&self.hash_builder));
 23,506 ( 0.01%)              None
      .                   }
599,712 ( 0.16%)      }
      .           
      .               /// Insert a key-value pair into the map without checking
      .               /// if the key already exists in the map.
      .               ///
      .               /// Returns a reference to the key and value just inserted.
      .               ///
      .               /// This operation is safe if a key does not exist in the map.
      .               ///
-- line 1520 ----------------------------------------
-- line 1592 ----------------------------------------
      .               /// use hashbrown::HashMap;
      .               ///
      .               /// let mut map = HashMap::new();
      .               /// map.insert(1, "a");
      .               /// assert_eq!(map.remove(&1), Some("a"));
      .               /// assert_eq!(map.remove(&1), None);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
 26,540 ( 0.01%)      pub fn remove<Q: ?Sized>(&mut self, k: &Q) -> Option<V>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
      .                   // Avoid `Option::map` because it bloats LLVM IR.
148,226 ( 0.04%)          match self.remove_entry(k) {
 14,303 ( 0.00%)              Some((_, v)) => Some(v),
 19,025 ( 0.00%)              None => None,
      .                   }
 64,421 ( 0.02%)      }
      .           
      .               /// Removes a key from the map, returning the stored key and value if the
      .               /// key was previously in the map.
      .               ///
      .               /// The key may be any borrowed form of the map's key type, but
      .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
      .               /// the key type.
      .               ///
-- line 1618 ----------------------------------------
-- line 1631 ----------------------------------------
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn remove_entry<Q: ?Sized>(&mut self, k: &Q) -> Option<(K, V)>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
      .                   let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
 55,291 ( 0.01%)          self.table.remove_entry(hash, equivalent_key(k))
      .               }
      .           }
      .           
      .           impl<K, V, S, A: Allocator + Clone> HashMap<K, V, S, A> {
      .               /// Creates a raw entry builder for the HashMap.
      .               ///
      .               /// Raw entries provide the lowest level of control for searching and
      .               /// manipulating a map. They must be manually initialized with a hash and
-- line 1647 ----------------------------------------
-- line 2209 ----------------------------------------
      .               /// Creates a `RawEntryMut` from the given key and its hash.
      .               #[inline]
      .               #[allow(clippy::wrong_self_convention)]
      .               pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> RawEntryMut<'a, K, V, S, A>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Eq,
      .               {
241,556 ( 0.06%)          self.from_hash(hash, equivalent(k))
      .               }
      .           }
      .           
      .           impl<'a, K, V, S, A: Allocator + Clone> RawEntryBuilderMut<'a, K, V, S, A> {
      .               /// Creates a `RawEntryMut` from the given hash.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               #[allow(clippy::wrong_self_convention)]
590,250 ( 0.15%)      pub fn from_hash<F>(self, hash: u64, is_match: F) -> RawEntryMut<'a, K, V, S, A>
      .               where
      .                   for<'b> F: FnMut(&'b K) -> bool,
      .               {
      .                   self.search(hash, is_match)
645,046 ( 0.17%)      }
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn search<F>(self, hash: u64, mut is_match: F) -> RawEntryMut<'a, K, V, S, A>
      .               where
      .                   for<'b> F: FnMut(&'b K) -> bool,
      .               {
 64,696 ( 0.02%)          match self.map.table.find(hash, |(k, _)| is_match(k)) {
360,544 ( 0.09%)              Some(elem) => RawEntryMut::Occupied(RawOccupiedEntryMut {
      .                           elem,
      .                           table: &mut self.map.table,
      .                           hash_builder: &self.map.hash_builder,
      .                       }),
 50,854 ( 0.01%)              None => RawEntryMut::Vacant(RawVacantEntryMut {
      .                           table: &mut self.map.table,
      .                           hash_builder: &self.map.hash_builder,
      .                       }),
      .                   }
      .               }
      .           }
      .           
      .           impl<'a, K, V, S, A: Allocator + Clone> RawEntryBuilder<'a, K, V, S, A> {
-- line 2251 ----------------------------------------
-- line 2260 ----------------------------------------
      .               {
      .                   let hash = make_hash::<K, Q, S>(&self.map.hash_builder, k);
      .                   self.from_key_hashed_nocheck(hash, k)
      .               }
      .           
      .               /// Access an entry by a key and its hash.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               #[allow(clippy::wrong_self_convention)]
247,427 ( 0.06%)      pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> Option<(&'a K, &'a V)>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Eq,
      .               {
238,367 ( 0.06%)          self.from_hash(hash, equivalent(k))
432,168 ( 0.11%)      }
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn search<F>(self, hash: u64, mut is_match: F) -> Option<(&'a K, &'a V)>
      .               where
      .                   F: FnMut(&K) -> bool,
      .               {
484,830 ( 0.13%)          match self.map.table.get(hash, |(k, _)| is_match(k)) {
      .                       Some(&(ref key, ref value)) => Some((key, value)),
      .                       None => None,
      .                   }
      .               }
      .           
      .               /// Access an entry by hash.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               #[allow(clippy::wrong_self_convention)]
-- line 2289 ----------------------------------------
-- line 2624 ----------------------------------------
      .               /// and returns a mutable reference to it.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               #[allow(clippy::shadow_unrelated)]
      .               pub fn insert_hashed_nocheck(self, hash: u64, key: K, value: V) -> (&'a mut K, &'a mut V)
      .               where
      .                   K: Hash,
      .                   S: BuildHasher,
      .               {
 83,663 ( 0.02%)          let &mut (ref mut k, ref mut v) = self.table.insert_entry(
      .                       hash,
      .                       (key, value),
      .                       make_hasher::<K, _, V, S>(self.hash_builder),
      .                   );
      .                   (k, v)
      .               }
      .           
      .               /// Set the value of an entry with a custom hasher function.
-- line 2640 ----------------------------------------
-- line 2974 ----------------------------------------
      .               /// map.insert("a", 1);
      .               /// map.insert("b", 2);
      .               /// map.insert("c", 3);
      .               ///
      .               /// // Not possible with .iter()
      .               /// let vec: Vec<(&str, i32)> = map.into_iter().collect();
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
    168 ( 0.00%)      fn into_iter(self) -> IntoIter<K, V, A> {
  4,793 ( 0.00%)          IntoIter {
  3,011 ( 0.00%)              inner: self.table.into_iter(),
      .                   }
    504 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, K, V> Iterator for Iter<'a, K, V> {
      .               type Item = (&'a K, &'a V);
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn next(&mut self) -> Option<(&'a K, &'a V)> {
      .                   // Avoid `Option::map` because it bloats LLVM IR.
 30,651 ( 0.01%)          match self.inner.next() {
      .                       Some(x) => unsafe {
      .                           let r = x.as_ref();
     58 ( 0.00%)                  Some((&r.0, &r.1))
      .                       },
      .                       None => None,
      .                   }
      .               }
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
      3 ( 0.00%)          self.inner.size_hint()
      .               }
      .           }
      .           impl<K, V> ExactSizeIterator for Iter<'_, K, V> {
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn len(&self) -> usize {
      .                   self.inner.len()
      .               }
      .           }
-- line 3013 ----------------------------------------
-- line 3051 ----------------------------------------
      .               }
      .           }
      .           
      .           impl<K, V, A: Allocator + Clone> Iterator for IntoIter<K, V, A> {
      .               type Item = (K, V);
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn next(&mut self) -> Option<(K, V)> {
    144 ( 0.00%)          self.inner.next()
      .               }
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
      .                   self.inner.size_hint()
      .               }
      .           }
      .           impl<K, V, A: Allocator + Clone> ExactSizeIterator for IntoIter<K, V, A> {
      .               #[cfg_attr(feature = "inline-more", inline)]
-- line 3067 ----------------------------------------
-- line 3076 ----------------------------------------
      .                   f.debug_list().entries(self.iter()).finish()
      .               }
      .           }
      .           
      .           impl<'a, K, V> Iterator for Keys<'a, K, V> {
      .               type Item = &'a K;
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
     42 ( 0.00%)      fn next(&mut self) -> Option<&'a K> {
      .                   // Avoid `Option::map` because it bloats LLVM IR.
      .                   match self.inner.next() {
      .                       Some((k, _)) => Some(k),
      .                       None => None,
      .                   }
     84 ( 0.00%)      }
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
      .                   self.inner.size_hint()
      .               }
      .           }
      .           impl<K, V> ExactSizeIterator for Keys<'_, K, V> {
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn len(&self) -> usize {
-- line 3098 ----------------------------------------
-- line 4557 ----------------------------------------
      .           /// keys with new values returned from the iterator.
      .           impl<K, V, S, A> Extend<(K, V)> for HashMap<K, V, S, A>
      .           where
      .               K: Eq + Hash,
      .               S: BuildHasher,
      .               A: Allocator + Clone,
      .           {
      .               #[cfg_attr(feature = "inline-more", inline)]
  3,064 ( 0.00%)      fn extend<T: IntoIterator<Item = (K, V)>>(&mut self, iter: T) {
      .                   // Keys may be already present or show multiple times in the iterator.
      .                   // Reserve the entire hint lower bound if the map is empty.
      .                   // Otherwise reserve half the hint (rounded up), so the map
      .                   // will only resize twice in the worst case.
  2,676 ( 0.00%)          let iter = iter.into_iter();
  3,689 ( 0.00%)          let reserve = if self.is_empty() {
      .                       iter.size_hint().0
      .                   } else {
      3 ( 0.00%)              (iter.size_hint().0 + 1) / 2
      .                   };
      .                   self.reserve(reserve);
      .                   iter.for_each(move |(k, v)| {
 16,139 ( 0.00%)              self.insert(k, v);
      .                   });
  1,666 ( 0.00%)      }
      .           
      .               #[inline]
      .               #[cfg(feature = "nightly")]
      .               fn extend_one(&mut self, (k, v): (K, V)) {
      .                   self.insert(k, v);
      .               }
      .           
      .               #[inline]
-- line 4588 ----------------------------------------

342,320 ( 0.09%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/tokenstream.rs
--------------------------------------------------------------------------------
Ir               

-- line 32 ----------------------------------------
      .           ///
      .           /// If the syntax extension is an MBE macro, it will attempt to match its
      .           /// LHS token tree against the provided token tree, and if it finds a
      .           /// match, will transcribe the RHS token tree, splicing in any captured
      .           /// `macro_parser::matched_nonterminals` into the `SubstNt`s it finds.
      .           ///
      .           /// The RHS of an MBE macro is the only place `SubstNt`s are substituted.
      .           /// Nothing special happens to misnamed or misplaced `SubstNt`s.
143,922 ( 0.04%)  #[derive(Debug, Clone, PartialEq, Encodable, Decodable, HashStable_Generic)]
      .           pub enum TokenTree {
      .               /// A single token.
 42,003 ( 0.01%)      Token(Token),
      .               /// A delimited sequence of token trees.
  3,286 ( 0.00%)      Delimited(DelimSpan, DelimToken, TokenStream),
      .           }
      .           
      .           #[derive(Copy, Clone)]
      .           pub enum CanSynthesizeMissingTokens {
      .               Yes,
      .               No,
      .           }
      .           
-- line 53 ----------------------------------------
-- line 71 ----------------------------------------
      .                           delim == delim2 && tts.eq_unspanned(&tts2)
      .                       }
      .                       _ => false,
      .                   }
      .               }
      .           
      .               /// Retrieves the `TokenTree`'s span.
      .               pub fn span(&self) -> Span {
    350 ( 0.00%)          match self {
    283 ( 0.00%)              TokenTree::Token(token) => token.span,
    200 ( 0.00%)              TokenTree::Delimited(sp, ..) => sp.entire(),
      .                   }
    125 ( 0.00%)      }
      .           
      .               /// Modify the `TokenTree`'s span in-place.
      .               pub fn set_span(&mut self, span: Span) {
    350 ( 0.00%)          match self {
    125 ( 0.00%)              TokenTree::Token(token) => token.span = span,
    100 ( 0.00%)              TokenTree::Delimited(dspan, ..) => *dspan = DelimSpan::from_single(span),
      .                   }
    175 ( 0.00%)      }
      .           
      .               pub fn token(kind: TokenKind, span: Span) -> TokenTree {
 12,228 ( 0.00%)          TokenTree::Token(Token::new(kind, span))
      .               }
      .           
      .               /// Returns the opening delimiter as a token tree.
  1,549 ( 0.00%)      pub fn open_tt(span: DelimSpan, delim: DelimToken) -> TokenTree {
  4,647 ( 0.00%)          TokenTree::token(token::OpenDelim(delim), span.open)
  1,549 ( 0.00%)      }
      .           
      .               /// Returns the closing delimiter as a token tree.
  1,508 ( 0.00%)      pub fn close_tt(span: DelimSpan, delim: DelimToken) -> TokenTree {
  4,524 ( 0.00%)          TokenTree::token(token::CloseDelim(delim), span.close)
  1,508 ( 0.00%)      }
      .           
    747 ( 0.00%)      pub fn uninterpolate(self) -> TokenTree {
    498 ( 0.00%)          match self {
  2,241 ( 0.00%)              TokenTree::Token(token) => TokenTree::Token(token.uninterpolate().into_owned()),
      .                       tt => tt,
      .                   }
    996 ( 0.00%)      }
      .           }
      .           
      .           impl<CTX> HashStable<CTX> for TokenStream
      .           where
      .               CTX: crate::HashStableContext,
      .           {
     36 ( 0.00%)      fn hash_stable(&self, hcx: &mut CTX, hasher: &mut StableHasher) {
    700 ( 0.00%)          for sub_tt in self.trees() {
      .                       sub_tt.hash_stable(hcx, hasher);
      .                   }
     32 ( 0.00%)      }
      .           }
      .           
      .           pub trait CreateTokenStream: sync::Send + sync::Sync {
      .               fn create_token_stream(&self) -> AttrAnnotatedTokenStream;
      .           }
      .           
      .           impl CreateTokenStream for AttrAnnotatedTokenStream {
      .               fn create_token_stream(&self) -> AttrAnnotatedTokenStream {
-- line 131 ----------------------------------------
-- line 188 ----------------------------------------
      .               Delimited(DelimSpan, DelimToken, AttrAnnotatedTokenStream),
      .               /// Stores the attributes for an attribute target,
      .               /// along with the tokens for that attribute target.
      .               /// See `AttributesData` for more information
      .               Attributes(AttributesData),
      .           }
      .           
      .           impl AttrAnnotatedTokenStream {
  2,994 ( 0.00%)      pub fn new(tokens: Vec<(AttrAnnotatedTokenTree, Spacing)>) -> AttrAnnotatedTokenStream {
      .                   AttrAnnotatedTokenStream(Lrc::new(tokens))
  2,994 ( 0.00%)      }
      .           
      .               /// Converts this `AttrAnnotatedTokenStream` to a plain `TokenStream
      .               /// During conversion, `AttrAnnotatedTokenTree::Attributes` get 'flattened'
      .               /// back to a `TokenStream` of the form `outer_attr attr_target`.
      .               /// If there are inner attributes, they are inserted into the proper
      .               /// place in the attribute target tokens.
      .               pub fn to_tokenstream(&self) -> TokenStream {
      .                   let trees: Vec<_> = self
-- line 206 ----------------------------------------
-- line 316 ----------------------------------------
      .           pub struct TokenStream(pub(crate) Lrc<Vec<TreeAndSpacing>>);
      .           
      .           pub type TreeAndSpacing = (TokenTree, Spacing);
      .           
      .           // `TokenStream` is used a lot. Make sure it doesn't unintentionally get bigger.
      .           #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
      .           rustc_data_structures::static_assert_size!(TokenStream, 8);
      .           
 15,196 ( 0.00%)  #[derive(Clone, Copy, Debug, PartialEq, Encodable, Decodable)]
      .           pub enum Spacing {
      .               Alone,
      .               Joint,
      .           }
      .           
      .           impl TokenStream {
      .               /// Given a `TokenStream` with a `Stream` of only two arguments, return a new `TokenStream`
      .               /// separating the two arguments with a comma for diagnostic suggestions.
-- line 332 ----------------------------------------
-- line 371 ----------------------------------------
      .           impl From<(AttrAnnotatedTokenTree, Spacing)> for AttrAnnotatedTokenStream {
      .               fn from((tree, spacing): (AttrAnnotatedTokenTree, Spacing)) -> AttrAnnotatedTokenStream {
      .                   AttrAnnotatedTokenStream::new(vec![(tree, spacing)])
      .               }
      .           }
      .           
      .           impl From<TokenTree> for TokenStream {
      .               fn from(tree: TokenTree) -> TokenStream {
     40 ( 0.00%)          TokenStream::new(vec![(tree, Spacing::Alone)])
      .               }
      .           }
      .           
      .           impl From<TokenTree> for TreeAndSpacing {
      .               fn from(tree: TokenTree) -> TreeAndSpacing {
  4,903 ( 0.00%)          (tree, Spacing::Alone)
      .               }
      .           }
      .           
      .           impl iter::FromIterator<TokenTree> for TokenStream {
      .               fn from_iter<I: IntoIterator<Item = TokenTree>>(iter: I) -> Self {
      .                   TokenStream::new(iter.into_iter().map(Into::into).collect::<Vec<TreeAndSpacing>>())
      .               }
      .           }
-- line 393 ----------------------------------------
-- line 401 ----------------------------------------
      .           }
      .           
      .           impl TokenStream {
      .               pub fn new(streams: Vec<TreeAndSpacing>) -> TokenStream {
      .                   TokenStream(Lrc::new(streams))
      .               }
      .           
      .               pub fn is_empty(&self) -> bool {
  1,421 ( 0.00%)          self.0.is_empty()
  1,421 ( 0.00%)      }
      .           
      .               pub fn len(&self) -> usize {
 15,493 ( 0.00%)          self.0.len()
     25 ( 0.00%)      }
      .           
      .               pub fn from_streams(mut streams: SmallVec<[TokenStream; 2]>) -> TokenStream {
      .                   match streams.len() {
      .                       0 => TokenStream::default(),
      .                       1 => streams.pop().unwrap(),
      .                       _ => {
      .                           // We are going to extend the first stream in `streams` with
      .                           // the elements from the subsequent streams. This requires
-- line 422 ----------------------------------------
-- line 448 ----------------------------------------
      .           
      .                           // Create the final `TokenStream`.
      .                           TokenStream(first_stream_lrc)
      .                       }
      .                   }
      .               }
      .           
      .               pub fn trees(&self) -> Cursor {
     46 ( 0.00%)          self.clone().into_trees()
     92 ( 0.00%)      }
      .           
  1,755 ( 0.00%)      pub fn into_trees(self) -> Cursor {
      .                   Cursor::new(self)
  3,510 ( 0.00%)      }
      .           
      .               /// Compares two `TokenStream`s, checking equality without regarding span information.
      .               pub fn eq_unspanned(&self, other: &TokenStream) -> bool {
      .                   let mut t1 = self.trees();
      .                   let mut t2 = other.trees();
      .                   for (t1, t2) in iter::zip(&mut t1, &mut t2) {
      .                       if !t1.eq_unspanned(&t2) {
      .                           return false;
      .                       }
      .                   }
      .                   t1.next().is_none() && t2.next().is_none()
      .               }
      .           
      .               pub fn map_enumerated<F: FnMut(usize, &TokenTree) -> TokenTree>(self, mut f: F) -> TokenStream {
     25 ( 0.00%)          TokenStream(Lrc::new(
      .                       self.0
      .                           .iter()
      .                           .enumerate()
  1,050 ( 0.00%)                  .map(|(i, (tree, is_joint))| (f(i, tree), *is_joint))
      .                           .collect(),
      .                   ))
      .               }
      .           }
      .           
      .           // 99.5%+ of the time we have 1 or 2 elements in this vector.
      .           #[derive(Clone)]
      .           pub struct TokenStreamBuilder(SmallVec<[TokenStream; 2]>);
-- line 488 ----------------------------------------
-- line 572 ----------------------------------------
      .           pub struct Cursor {
      .               pub stream: TokenStream,
      .               index: usize,
      .           }
      .           
      .           impl Iterator for Cursor {
      .               type Item = TokenTree;
      .           
  1,281 ( 0.00%)      fn next(&mut self) -> Option<TokenTree> {
  6,433 ( 0.00%)          self.next_with_spacing().map(|(tree, _)| tree)
  1,708 ( 0.00%)      }
      .           }
      .           
      .           impl Cursor {
      .               fn new(stream: TokenStream) -> Self {
      .                   Cursor { stream, index: 0 }
      .               }
      .           
 75,080 ( 0.02%)      pub fn next_with_spacing(&mut self) -> Option<TreeAndSpacing> {
 46,329 ( 0.01%)          if self.index < self.stream.len() {
 23,752 ( 0.01%)              self.index += 1;
 80,682 ( 0.02%)              Some(self.stream.0[self.index - 1].clone())
      .                   } else {
  6,980 ( 0.00%)              None
      .                   }
 90,096 ( 0.02%)      }
      .           
      .               pub fn index(&self) -> usize {
      .                   self.index
      .               }
      .           
      .               pub fn append(&mut self, new_stream: TokenStream) {
      .                   if new_stream.is_empty() {
      .                       return;
      .                   }
      .                   let index = self.index;
      .                   let stream = mem::take(&mut self.stream);
      .                   *self = TokenStream::from_streams(smallvec![stream, new_stream]).into_trees();
      .                   self.index = index;
      .               }
      .           
 10,021 ( 0.00%)      pub fn look_ahead(&self, n: usize) -> Option<&TokenTree> {
 20,042 ( 0.01%)          self.stream.0[self.index..].get(n).map(|(tree, _)| tree)
 20,042 ( 0.01%)      }
      .           }
      .           
  6,393 ( 0.00%)  #[derive(Debug, Copy, Clone, PartialEq, Encodable, Decodable, HashStable_Generic)]
      .           pub struct DelimSpan {
      .               pub open: Span,
      .               pub close: Span,
      .           }
      .           
      .           impl DelimSpan {
      .               pub fn from_single(sp: Span) -> Self {
      .                   DelimSpan { open: sp, close: sp }
      .               }
      .           
  2,770 ( 0.00%)      pub fn from_pair(open: Span, close: Span) -> Self {
      .                   DelimSpan { open, close }
  1,385 ( 0.00%)      }
      .           
      .               pub fn dummy() -> Self {
      .                   Self::from_single(DUMMY_SP)
    618 ( 0.00%)      }
      .           
  1,680 ( 0.00%)      pub fn entire(self) -> Span {
      .                   self.open.with_hi(self.close.hi())
  1,260 ( 0.00%)      }
      .           }

  3,545 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/tokenstream.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/token.rs
--------------------------------------------------------------------------------
Ir                 

-- line 12 ----------------------------------------
        .           use rustc_data_structures::sync::Lrc;
        .           use rustc_macros::HashStable_Generic;
        .           use rustc_span::symbol::{kw, sym};
        .           use rustc_span::symbol::{Ident, Symbol};
        .           use rustc_span::{self, edition::Edition, Span, DUMMY_SP};
        .           use std::borrow::Cow;
        .           use std::{fmt, mem};
        .           
    9,132 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
        .           pub enum CommentKind {
        .               Line,
        .               Block,
        .           }
        .           
       75 ( 0.00%)  #[derive(Clone, PartialEq, Encodable, Decodable, Hash, Debug, Copy)]
        .           #[derive(HashStable_Generic)]
        .           pub enum BinOpToken {
        .               Plus,
        .               Minus,
        .               Star,
        .               Slash,
        .               Percent,
        .               Caret,
        .               And,
        .               Or,
        .               Shl,
        .               Shr,
        .           }
        .           
        .           /// A delimiter token.
    7,314 ( 0.00%)  #[derive(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Debug, Copy)]
        .           #[derive(HashStable_Generic)]
        .           pub enum DelimToken {
        .               /// A round parenthesis (i.e., `(` or `)`).
        .               Paren,
        .               /// A square bracket (i.e., `[` or `]`).
        .               Bracket,
        .               /// A curly brace (i.e., `{` or `}`).
        .               Brace,
        .               /// An empty delimiter.
        .               NoDelim,
        .           }
        .           
      935 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
        .           pub enum LitKind {
        .               Bool, // AST only, must never appear in a `Token`
        .               Byte,
        .               Char,
        .               Integer,
        .               Float,
        .               Str,
        .               StrRaw(u16), // raw string delimited by `n` hash symbols
        .               ByteStr,
        .               ByteStrRaw(u16), // raw byte string delimited by `n` hash symbols
        .               Err,
        .           }
        .           
        .           /// A literal token.
   13,138 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
        .           pub struct Lit {
        .               pub kind: LitKind,
        .               pub symbol: Symbol,
        .               pub suffix: Option<Symbol>,
        .           }
        .           
        .           impl fmt::Display for Lit {
      215 ( 0.00%)      fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      387 ( 0.00%)          let Lit { kind, symbol, suffix } = *self;
        .                   match kind {
        .                       Byte => write!(f, "b'{}'", symbol)?,
        .                       Char => write!(f, "'{}'", symbol)?,
        9 ( 0.00%)              Str => write!(f, "\"{}\"", symbol)?,
        .                       StrRaw(n) => write!(
        .                           f,
        .                           "r{delim}\"{string}\"{delim}",
        .                           delim = "#".repeat(n as usize),
        .                           string = symbol
        .                       )?,
        .                       ByteStr => write!(f, "b\"{}\"", symbol)?,
        .                       ByteStrRaw(n) => write!(
        .                           f,
        .                           "br{delim}\"{string}\"{delim}",
        .                           delim = "#".repeat(n as usize),
        .                           string = symbol
        .                       )?,
      120 ( 0.00%)              Integer | Float | Bool | Err => write!(f, "{}", symbol)?,
        .                   }
        .           
       86 ( 0.00%)          if let Some(suffix) = suffix {
        .                       write!(f, "{}", suffix)?;
        .                   }
        .           
        .                   Ok(())
      215 ( 0.00%)      }
        .           }
        .           
        .           impl LitKind {
        .               /// An English article for the literal token kind.
        .               pub fn article(self) -> &'static str {
        .                   match self {
        .                       Integer | Err => "an",
        .                       _ => "a",
-- line 113 ----------------------------------------
-- line 123 ----------------------------------------
        .                       Float => "float",
        .                       Str | StrRaw(..) => "string",
        .                       ByteStr | ByteStrRaw(..) => "byte string",
        .                       Err => "error",
        .                   }
        .               }
        .           
        .               crate fn may_have_suffix(self) -> bool {
       48 ( 0.00%)          matches!(self, Integer | Float | Err)
        .               }
        .           }
        .           
        .           impl Lit {
        .               pub fn new(kind: LitKind, symbol: Symbol, suffix: Option<Symbol>) -> Lit {
        .                   Lit { kind, symbol, suffix }
      539 ( 0.00%)      }
        .           }
        .           
       24 ( 0.00%)  pub fn ident_can_begin_expr(name: Symbol, span: Span, is_raw: bool) -> bool {
       42 ( 0.00%)      let ident_token = Token::new(Ident(name, is_raw), span);
        .           
       12 ( 0.00%)      !ident_token.is_reserved_ident()
        .                   || ident_token.is_path_segment_keyword()
        .                   || [
        .                       kw::Async,
        .                       kw::Do,
        .                       kw::Box,
        .                       kw::Break,
        .                       kw::Const,
        .                       kw::Continue,
-- line 152 ----------------------------------------
-- line 161 ----------------------------------------
        .                       kw::True,
        .                       kw::Try,
        .                       kw::Unsafe,
        .                       kw::While,
        .                       kw::Yield,
        .                       kw::Static,
        .                   ]
        .                   .contains(&name)
       30 ( 0.00%)  }
        .           
        .           fn ident_can_begin_type(name: Symbol, span: Span, is_raw: bool) -> bool {
       24 ( 0.00%)      let ident_token = Token::new(Ident(name, is_raw), span);
        .           
        8 ( 0.00%)      !ident_token.is_reserved_ident()
        .                   || ident_token.is_path_segment_keyword()
        .                   || [kw::Underscore, kw::For, kw::Impl, kw::Fn, kw::Unsafe, kw::Extern, kw::Typeof, kw::Dyn]
        .                       .contains(&name)
        .           }
        .           
1,269,554 ( 0.33%)  #[derive(Clone, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
        .           pub enum TokenKind {
        .               /* Expression-operator symbols. */
        .               Eq,
        .               Lt,
        .               Le,
        .               EqEq,
        .               Ne,
        .               Ge,
        .               Gt,
        .               AndAnd,
        .               OrOr,
        .               Not,
        .               Tilde,
    7,815 ( 0.00%)      BinOp(BinOpToken),
      105 ( 0.00%)      BinOpEq(BinOpToken),
        .           
        .               /* Structural symbols */
        .               At,
        .               Dot,
        .               DotDot,
        .               DotDotDot,
        .               DotDotEq,
        .               Comma,
-- line 203 ----------------------------------------
-- line 208 ----------------------------------------
        .               LArrow,
        .               FatArrow,
        .               Pound,
        .               Dollar,
        .               Question,
        .               /// Used by proc macros for representing lifetimes, not generated by lexer right now.
        .               SingleQuote,
        .               /// An opening delimiter (e.g., `{`).
   15,783 ( 0.00%)      OpenDelim(DelimToken),
        .               /// A closing delimiter (e.g., `}`).
   16,536 ( 0.00%)      CloseDelim(DelimToken),
        .           
        .               /* Literals */
    8,219 ( 0.00%)      Literal(Lit),
        .           
        .               /// Identifier token.
        .               /// Do not forget about `NtIdent` when you want to match on identifiers.
        .               /// It's recommended to use `Token::(ident,uninterpolate,uninterpolated_span)` to
        .               /// treat regular and interpolated identifiers in the same way.
    5,448 ( 0.00%)      Ident(Symbol, /* is_raw */ bool),
        .               /// Lifetime identifier token.
        .               /// Do not forget about `NtLifetime` when you want to match on lifetime identifiers.
        .               /// It's recommended to use `Token::(lifetime,uninterpolate,uninterpolated_span)` to
        .               /// treat regular and interpolated lifetime identifiers in the same way.
        9 ( 0.00%)      Lifetime(Symbol),
        .           
        .               Interpolated(Lrc<Nonterminal>),
        .           
        .               /// A doc comment token.
        .               /// `Symbol` is the doc comment's data excluding its "quotes" (`///`, `/**`, etc)
        .               /// similarly to symbols in string literal tokens.
      594 ( 0.00%)      DocComment(CommentKind, ast::AttrStyle, Symbol),
        .           
        .               Eof,
        .           }
        .           
        .           // `TokenKind` is used a lot. Make sure it doesn't unintentionally get bigger.
        .           #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
        .           rustc_data_structures::static_assert_size!(TokenKind, 16);
        .           
   76,814 ( 0.02%)  #[derive(Clone, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
        .           pub struct Token {
    5,280 ( 0.00%)      pub kind: TokenKind,
        .               pub span: Span,
        .           }
        .           
        .           impl TokenKind {
        .               pub fn lit(kind: LitKind, symbol: Symbol, suffix: Option<Symbol>) -> TokenKind {
        .                   Literal(Lit::new(kind, symbol, suffix))
        .               }
        .           
        .               // An approximation to proc-macro-style single-character operators used by rustc parser.
        .               // If the operator token can be broken into two tokens, the first of which is single-character,
        .               // then this function performs that operation, otherwise it returns `None`.
    1,121 ( 0.00%)      pub fn break_two_token_op(&self) -> Option<(TokenKind, TokenKind)> {
    4,484 ( 0.00%)          Some(match *self {
        .                       Le => (Lt, Eq),
        .                       EqEq => (Eq, Eq),
        .                       Ne => (Not, Eq),
        .                       Ge => (Gt, Eq),
        .                       AndAnd => (BinOp(And), BinOp(And)),
        .                       OrOr => (BinOp(Or), BinOp(Or)),
        .                       BinOp(Shl) => (Lt, Lt),
        .                       BinOp(Shr) => (Gt, Gt),
-- line 271 ----------------------------------------
-- line 280 ----------------------------------------
        .                       BinOpEq(Shl) => (Lt, Le),
        .                       BinOpEq(Shr) => (Gt, Ge),
        .                       DotDot => (Dot, Dot),
        .                       DotDotDot => (Dot, DotDot),
        .                       ModSep => (Colon, Colon),
        .                       RArrow => (BinOp(Minus), Gt),
        .                       LArrow => (Lt, BinOp(Minus)),
        .                       FatArrow => (Eq, Gt),
    1,121 ( 0.00%)              _ => return None,
        .                   })
    1,121 ( 0.00%)      }
        .           
        .               /// Returns tokens that are likely to be typed accidentally instead of the current token.
        .               /// Enables better error recovery when the wrong token is found.
        .               pub fn similar_tokens(&self) -> Option<Vec<TokenKind>> {
        .                   match *self {
        .                       Comma => Some(vec![Dot, Lt, Semi]),
        .                       Semi => Some(vec![Colon, Comma]),
        .                       FatArrow => Some(vec![Eq, RArrow]),
        .                       _ => None,
        .                   }
        .               }
        .           
        .               pub fn should_end_const_arg(&self) -> bool {
       16 ( 0.00%)          matches!(self, Gt | Ge | BinOp(Shr) | BinOpEq(Shr))
        4 ( 0.00%)      }
        .           }
        .           
        .           impl Token {
   12,760 ( 0.00%)      pub fn new(kind: TokenKind, span: Span) -> Self {
   40,744 ( 0.01%)          Token { kind, span }
   12,760 ( 0.00%)      }
        .           
        .               /// Some token that will be thrown away later.
      808 ( 0.00%)      pub fn dummy() -> Self {
        .                   Token::new(TokenKind::Question, DUMMY_SP)
      808 ( 0.00%)      }
        .           
        .               /// Recovers a `Token` from an `Ident`. This creates a raw identifier if necessary.
        .               pub fn from_ast_ident(ident: Ident) -> Self {
        .                   Token::new(Ident(ident.name, ident.is_raw_guess()), ident.span)
        .               }
        .           
        .               /// Return this token by value and leave a dummy token in its place.
    8,398 ( 0.00%)      pub fn take(&mut self) -> Self {
        .                   mem::replace(self, Token::dummy())
    8,398 ( 0.00%)      }
        .           
        .               /// For interpolated tokens, returns a span of the fragment to which the interpolated
        .               /// token refers. For all other tokens this is just a regular span.
        .               /// It is particularly important to use this for identifiers and lifetimes
        .               /// for which spans affect name resolution and edition checks.
        .               /// Note that keywords are also identifiers, so they should use this
        .               /// if they keep spans or perform edition checks.
        .               pub fn uninterpolated_span(&self) -> Span {
      366 ( 0.00%)          match &self.kind {
        .                       Interpolated(nt) => nt.span(),
      183 ( 0.00%)              _ => self.span,
        .                   }
      183 ( 0.00%)      }
        .           
        .               pub fn is_op(&self) -> bool {
   25,194 ( 0.01%)          !matches!(
    8,398 ( 0.00%)              self.kind,
        .                       OpenDelim(..)
        .                           | CloseDelim(..)
        .                           | Literal(..)
        .                           | DocComment(..)
        .                           | Ident(..)
        .                           | Lifetime(..)
        .                           | Interpolated(..)
        .                           | Eof
        .                   )
    8,398 ( 0.00%)      }
        .           
        .               pub fn is_like_plus(&self) -> bool {
    1,565 ( 0.00%)          matches!(self.kind, BinOp(Plus) | BinOpEq(Plus))
      313 ( 0.00%)      }
        .           
        .               /// Returns `true` if the token can appear at the start of an expression.
       11 ( 0.00%)      pub fn can_begin_expr(&self) -> bool {
       55 ( 0.00%)          match self.uninterpolate().kind {
       54 ( 0.00%)              Ident(name, is_raw)              =>
       18 ( 0.00%)                  ident_can_begin_expr(name, self.span, is_raw), // value name or keyword
        .                       OpenDelim(..)                     | // tuple, array or block
        .                       Literal(..)                       | // literal
        .                       Not                               | // operator not
        .                       BinOp(Minus)                      | // unary minus
        .                       BinOp(Star)                       | // dereference
        .                       BinOp(Or) | OrOr                  | // closure
        .                       BinOp(And)                        | // reference
        .                       AndAnd                            | // double reference
-- line 371 ----------------------------------------
-- line 376 ----------------------------------------
        .                       Lifetime(..)                      | // labeled loop
        .                       Pound                             => true, // expression attributes
        .                       Interpolated(ref nt) => matches!(**nt, NtLiteral(..) |
        .                           NtExpr(..)    |
        .                           NtBlock(..)   |
        .                           NtPath(..)),
        .                       _ => false,
        .                   }
       22 ( 0.00%)      }
        .           
        .               /// Returns `true` if the token can appear at the start of a type.
       20 ( 0.00%)      pub fn can_begin_type(&self) -> bool {
       29 ( 0.00%)          match self.uninterpolate().kind {
       36 ( 0.00%)              Ident(name, is_raw)        =>
        4 ( 0.00%)                  ident_can_begin_type(name, self.span, is_raw), // type name or keyword
        .                       OpenDelim(Paren)            | // tuple
        .                       OpenDelim(Bracket)          | // array
        .                       Not                         | // never
        .                       BinOp(Star)                 | // raw pointer
        .                       BinOp(And)                  | // reference
        .                       AndAnd                      | // double reference
        .                       Question                    | // maybe bound in trait object
        .                       Lifetime(..)                | // lifetime bound in trait object
        .                       Lt | BinOp(Shl)             | // associated path
        .                       ModSep                      => true, // global path
        .                       Interpolated(ref nt) => matches!(**nt, NtTy(..) | NtPath(..)),
        .                       _ => false,
        .                   }
       30 ( 0.00%)      }
        .           
        .               /// Returns `true` if the token can appear at the start of a const param.
        .               pub fn can_begin_const_arg(&self) -> bool {
       20 ( 0.00%)          match self.kind {
        .                       OpenDelim(Brace) => true,
        .                       Interpolated(ref nt) => matches!(**nt, NtExpr(..) | NtBlock(..) | NtLiteral(..)),
        4 ( 0.00%)              _ => self.can_begin_literal_maybe_minus(),
        .                   }
        .               }
        .           
        .               /// Returns `true` if the token can appear at the start of a generic bound.
        .               pub fn can_begin_bound(&self) -> bool {
        .                   self.is_path_start()
        .                       || self.is_lifetime()
        .                       || self.is_keyword(kw::For)
-- line 419 ----------------------------------------
-- line 427 ----------------------------------------
        .               }
        .           
        .               /// Returns `true` if the token is any literal, a minus (which can prefix a literal,
        .               /// for example a '-42', or one of the boolean idents).
        .               ///
        .               /// In other words, would this token be a valid start of `parse_literal_maybe_minus`?
        .               ///
        .               /// Keep this in sync with and `Lit::from_token`, excluding unary negation.
        4 ( 0.00%)      pub fn can_begin_literal_maybe_minus(&self) -> bool {
       40 ( 0.00%)          match self.uninterpolate().kind {
        .                       Literal(..) | BinOp(Minus) => true,
       16 ( 0.00%)              Ident(name, false) if name.is_bool_lit() => true,
        .                       Interpolated(ref nt) => match &**nt {
        .                           NtLiteral(_) => true,
        .                           NtExpr(e) => match &e.kind {
        .                               ast::ExprKind::Lit(_) => true,
        .                               ast::ExprKind::Unary(ast::UnOp::Neg, e) => {
        .                                   matches!(&e.kind, ast::ExprKind::Lit(_))
        .                               }
        .                               _ => false,
        .                           },
        .                           _ => false,
        .                       },
        .                       _ => false,
        .                   }
        8 ( 0.00%)      }
        .           
        .               // A convenience function for matching on identifiers during parsing.
        .               // Turns interpolated identifier (`$i: ident`) or lifetime (`$l: lifetime`) token
        .               // into the regular identifier or lifetime token it refers to,
        .               // otherwise returns the original token.
    3,896 ( 0.00%)      pub fn uninterpolate(&self) -> Cow<'_, Token> {
  107,503 ( 0.03%)          match &self.kind {
        .                       Interpolated(nt) => match **nt {
        .                           NtIdent(ident, is_raw) => {
        .                               Cow::Owned(Token::new(Ident(ident.name, is_raw), ident.span))
        .                           }
        .                           NtLifetime(ident) => Cow::Owned(Token::new(Lifetime(ident.name), ident.span)),
        .                           _ => Cow::Borrowed(self),
        .                       },
        .                       _ => Cow::Borrowed(self),
        .                   }
    3,896 ( 0.00%)      }
        .           
        .               /// Returns an identifier if this token is an identifier.
   14,943 ( 0.00%)      pub fn ident(&self) -> Option<(Ident, /* is_raw */ bool)> {
        .                   let token = self.uninterpolate();
   74,732 ( 0.02%)          match token.kind {
  256,815 ( 0.07%)              Ident(name, is_raw) => Some((Ident::new(name, token.span), is_raw)),
        .                       _ => None,
        .                   }
  106,223 ( 0.03%)      }
        .           
        .               /// Returns a lifetime identifier if this token is a lifetime.
       68 ( 0.00%)      pub fn lifetime(&self) -> Option<Ident> {
        .                   let token = self.uninterpolate();
      200 ( 0.00%)          match token.kind {
       42 ( 0.00%)              Lifetime(name) => Some(Ident::new(name, token.span)),
        .                       _ => None,
        .                   }
      476 ( 0.00%)      }
        .           
        .               /// Returns `true` if the token is an identifier.
        .               pub fn is_ident(&self) -> bool {
        .                   self.ident().is_some()
      517 ( 0.00%)      }
        .           
        .               /// Returns `true` if the token is a lifetime.
       32 ( 0.00%)      pub fn is_lifetime(&self) -> bool {
        .                   self.lifetime().is_some()
       64 ( 0.00%)      }
        .           
        .               /// Returns `true` if the token is an identifier whose name is the given
        .               /// string slice.
      870 ( 0.00%)      pub fn is_ident_named(&self, name: Symbol) -> bool {
        .                   self.ident().map_or(false, |(ident, _)| ident.name == name)
    1,740 ( 0.00%)      }
        .           
        .               /// Returns `true` if the token is an interpolated path.
        .               fn is_path(&self) -> bool {
    6,372 ( 0.00%)          if let Interpolated(ref nt) = self.kind {
        .                       if let NtPath(..) = **nt {
        .                           return true;
        .                       }
        .                   }
        .                   false
        .               }
        .           
        .               /// Would `maybe_whole_expr` in `parser.rs` return `Ok(..)`?
-- line 515 ----------------------------------------
-- line 522 ----------------------------------------
        .                       }
        .                   }
        .           
        .                   false
        .               }
        .           
        .               // Is the token an interpolated block (`$b:block`)?
        .               pub fn is_whole_block(&self) -> bool {
       34 ( 0.00%)          if let Interpolated(ref nt) = self.kind {
        .                       if let NtBlock(..) = **nt {
        .                           return true;
        .                       }
        .                   }
        .                   false
       17 ( 0.00%)      }
        .           
        .               /// Returns `true` if the token is either the `mut` or `const` keyword.
        .               pub fn is_mutability(&self) -> bool {
        .                   self.is_keyword(kw::Mut) || self.is_keyword(kw::Const)
        .               }
        .           
      462 ( 0.00%)      pub fn is_qpath_start(&self) -> bool {
    3,648 ( 0.00%)          self == &Lt || self == &BinOp(Shl)
        .               }
        .           
    6,372 ( 0.00%)      pub fn is_path_start(&self) -> bool {
    9,386 ( 0.00%)          self == &ModSep
        .                       || self.is_qpath_start()
        .                       || self.is_path()
        .                       || self.is_path_segment_keyword()
    1,530 ( 0.00%)              || self.is_ident() && !self.is_reserved_ident()
    7,965 ( 0.00%)      }
        .           
        .               /// Returns `true` if the token is a given keyword, `kw`.
   16,645 ( 0.00%)      pub fn is_keyword(&self, kw: Symbol) -> bool {
        .                   self.is_non_raw_ident_where(|id| id.name == kw)
   33,290 ( 0.01%)      }
        .           
      194 ( 0.00%)      pub fn is_path_segment_keyword(&self) -> bool {
        .                   self.is_non_raw_ident_where(Ident::is_path_segment_keyword)
        .               }
        .           
        .               // Returns true for reserved identifiers used internally for elided lifetimes,
        .               // unnamed method parameters, crate root module, error recovery etc.
       52 ( 0.00%)      pub fn is_special_ident(&self) -> bool {
        .                   self.is_non_raw_ident_where(Ident::is_special)
        .               }
        .           
        .               /// Returns `true` if the token is a keyword used in the language.
       54 ( 0.00%)      pub fn is_used_keyword(&self) -> bool {
        .                   self.is_non_raw_ident_where(Ident::is_used_keyword)
        .               }
        .           
        .               /// Returns `true` if the token is a keyword reserved for possible future use.
       52 ( 0.00%)      pub fn is_unused_keyword(&self) -> bool {
        .                   self.is_non_raw_ident_where(Ident::is_unused_keyword)
        .               }
        .           
        .               /// Returns `true` if the token is either a special identifier or a keyword.
        .               pub fn is_reserved_ident(&self) -> bool {
        .                   self.is_non_raw_ident_where(Ident::is_reserved)
        .               }
        .           
        .               /// Returns `true` if the token is the identifier `true` or `false`.
      194 ( 0.00%)      pub fn is_bool_lit(&self) -> bool {
      388 ( 0.00%)          self.is_non_raw_ident_where(|id| id.name.is_bool_lit())
        .               }
        .           
        .               pub fn is_numeric_lit(&self) -> bool {
        .                   matches!(
        .                       self.kind,
        .                       Literal(Lit { kind: LitKind::Integer, .. }) | Literal(Lit { kind: LitKind::Float, .. })
        .                   )
        .               }
        .           
        .               /// Returns `true` if the token is a non-raw identifier for which `pred` holds.
       36 ( 0.00%)      pub fn is_non_raw_ident_where(&self, pred: impl FnOnce(Ident) -> bool) -> bool {
  153,262 ( 0.04%)          match self.ident() {
    1,462 ( 0.00%)              Some((id, false)) => pred(id),
        .                       _ => false,
        .                   }
       45 ( 0.00%)      }
        .           
   18,460 ( 0.00%)      pub fn glue(&self, joint: &Token) -> Option<Token> {
    9,230 ( 0.00%)          let kind = match self.kind {
       99 ( 0.00%)              Eq => match joint.kind {
        .                           Eq => EqEq,
        .                           Gt => FatArrow,
        .                           _ => return None,
        .                       },
      120 ( 0.00%)              Lt => match joint.kind {
        .                           Eq => Le,
        .                           Lt => BinOp(Shl),
        .                           Le => BinOpEq(Shl),
        .                           BinOp(Minus) => LArrow,
        .                           _ => return None,
        .                       },
      247 ( 0.00%)              Gt => match joint.kind {
        .                           Eq => Ge,
        .                           Gt => BinOp(Shr),
        .                           Ge => BinOpEq(Shr),
        .                           _ => return None,
        .                       },
       34 ( 0.00%)              Not => match joint.kind {
        .                           Eq => Ne,
        .                           _ => return None,
        .                       },
      792 ( 0.00%)              BinOp(op) => match joint.kind {
        .                           Eq => BinOpEq(op),
       16 ( 0.00%)                  BinOp(And) if op == And => AndAnd,
       10 ( 0.00%)                  BinOp(Or) if op == Or => OrOr,
       41 ( 0.00%)                  Gt if op == Minus => RArrow,
        .                           _ => return None,
        .                       },
       12 ( 0.00%)              Dot => match joint.kind {
        .                           Dot => DotDot,
        .                           DotDot => DotDotDot,
        .                           _ => return None,
        .                       },
        .                       DotDot => match joint.kind {
        .                           Dot => DotDotDot,
        .                           Eq => DotDotEq,
        .                           _ => return None,
        .                       },
      198 ( 0.00%)              Colon => match joint.kind {
        .                           Colon => ModSep,
        .                           _ => return None,
        .                       },
        .                       SingleQuote => match joint.kind {
        .                           Ident(name, false) => Lifetime(Symbol::intern(&format!("'{}", name))),
        .                           _ => return None,
        .                       },
        .           
        .                       Le | EqEq | Ne | Ge | AndAnd | OrOr | Tilde | BinOpEq(..) | At | DotDotDot
        .                       | DotDotEq | Comma | Semi | ModSep | RArrow | LArrow | FatArrow | Pound | Dollar
        .                       | Question | OpenDelim(..) | CloseDelim(..) | Literal(..) | Ident(..)
        .                       | Lifetime(..) | Interpolated(..) | DocComment(..) | Eof => return None,
        .                   };
        .           
    4,602 ( 0.00%)          Some(Token::new(kind, self.span.to(joint.span)))
   16,614 ( 0.00%)      }
        .           }
        .           
        .           impl PartialEq<TokenKind> for Token {
        .               fn eq(&self, rhs: &TokenKind) -> bool {
   72,747 ( 0.02%)          self.kind == *rhs
        .               }
        .           }
        .           
        .           #[derive(Clone, Encodable, Decodable)]
        .           /// For interpolation during macro expansion.
        .           pub enum Nonterminal {
        .               NtItem(P<ast::Item>),
        .               NtBlock(P<ast::Block>),
-- line 675 ----------------------------------------
-- line 711 ----------------------------------------
        .               Path,
        .               Vis,
        .               TT,
        .           }
        .           
        .           impl NonterminalKind {
        .               /// The `edition` closure is used to get the edition for the given symbol. Doing
        .               /// `span.edition()` is expensive, so we do it lazily.
       20 ( 0.00%)      pub fn from_symbol(
        .                   symbol: Symbol,
        .                   edition: impl FnOnce() -> Edition,
        .               ) -> Option<NonterminalKind> {
       46 ( 0.00%)          Some(match symbol {
        .                       sym::item => NonterminalKind::Item,
        .                       sym::block => NonterminalKind::Block,
        .                       sym::stmt => NonterminalKind::Stmt,
        .                       sym::pat => match edition() {
        .                           Edition::Edition2015 | Edition::Edition2018 => {
        .                               NonterminalKind::PatParam { inferred: true }
        .                           }
        .                           Edition::Edition2021 => NonterminalKind::PatWithOr,
-- line 731 ----------------------------------------
-- line 737 ----------------------------------------
        .                       sym::lifetime => NonterminalKind::Lifetime,
        .                       sym::literal => NonterminalKind::Literal,
        .                       sym::meta => NonterminalKind::Meta,
        .                       sym::path => NonterminalKind::Path,
        .                       sym::vis => NonterminalKind::Vis,
        .                       sym::tt => NonterminalKind::TT,
        .                       _ => return None,
        .                   })
       20 ( 0.00%)      }
        .               fn symbol(self) -> Symbol {
        .                   match self {
        .                       NonterminalKind::Item => sym::item,
        .                       NonterminalKind::Block => sym::block,
        .                       NonterminalKind::Stmt => sym::stmt,
        .                       NonterminalKind::PatParam { inferred: false } => sym::pat_param,
        .                       NonterminalKind::PatParam { inferred: true } | NonterminalKind::PatWithOr => sym::pat,
        .                       NonterminalKind::Expr => sym::expr,
-- line 753 ----------------------------------------

  439,130 ( 0.11%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/token.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cell.rs
--------------------------------------------------------------------------------
Ir                 

-- line 346 ----------------------------------------
        .               ///
        .               /// let c = Cell::new(5);
        .               ///
        .               /// c.set(10);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn set(&self, val: T) {
      769 ( 0.00%)          let old = self.replace(val);
      284 ( 0.00%)          drop(old);
        .               }
        .           
        .               /// Swaps the values of two `Cell`s.
        .               /// Difference with `std::mem::swap` is that this function doesn't require `&mut` reference.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 363 ----------------------------------------
-- line 434 ----------------------------------------
        .               ///
        .               /// let five = c.get();
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn get(&self) -> T {
        .                   // SAFETY: This can cause data races if called from a separate thread,
        .                   // but `Cell` is `!Sync` so this won't happen.
   32,147 ( 0.01%)          unsafe { *self.value.get() }
        .               }
        .           
        .               /// Updates the contained value using a function and returns the new value.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// #![feature(cell_update)]
-- line 450 ----------------------------------------
-- line 689 ----------------------------------------
        .           
        .           #[inline(always)]
        .           fn is_writing(x: BorrowFlag) -> bool {
        .               x < UNUSED
        .           }
        .           
        .           #[inline(always)]
        .           fn is_reading(x: BorrowFlag) -> bool {
   82,882 ( 0.02%)      x > UNUSED
        .           }
        .           
        .           impl<T> RefCell<T> {
        .               /// Creates a new `RefCell` containing `value`.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 705 ----------------------------------------
-- line 706 ----------------------------------------
        .               /// use std::cell::RefCell;
        .               ///
        .               /// let c = RefCell::new(5);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_stable(feature = "const_refcell_new", since = "1.24.0")]
        .               #[inline]
        .               pub const fn new(value: T) -> RefCell<T> {
   11,767 ( 0.00%)          RefCell {
   10,278 ( 0.00%)              value: UnsafeCell::new(value),
        .                       borrow: Cell::new(UNUSED),
        .                       #[cfg(feature = "debug_refcell")]
        .                       borrowed_at: Cell::new(None),
        .                   }
        .               }
        .           
        .               /// Consumes the `RefCell`, returning the wrapped value.
        .               ///
-- line 723 ----------------------------------------
-- line 731 ----------------------------------------
        .               /// let five = c.into_inner();
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_cell_into_inner", issue = "78729")]
        .               #[inline]
        .               pub const fn into_inner(self) -> T {
        .                   // Since this function takes `self` (the `RefCell`) by value, the
        .                   // compiler statically verifies that it is not currently borrowed.
      324 ( 0.00%)          self.value.into_inner()
        .               }
        .           
        .               /// Replaces the wrapped value with a new one, returning the old value,
        .               /// without deinitializing either one.
        .               ///
        .               /// This function corresponds to [`std::mem::replace`](../mem/fn.replace.html).
        .               ///
        .               /// # Panics
-- line 747 ----------------------------------------
-- line 845 ----------------------------------------
        .               /// let c = RefCell::new(5);
        .               ///
        .               /// let m = c.borrow_mut();
        .               /// let b = c.borrow(); // this causes a panic
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
        .               #[track_caller]
      972 ( 0.00%)      pub fn borrow(&self) -> Ref<'_, T> {
        .                   self.try_borrow().expect("already mutably borrowed")
    2,916 ( 0.00%)      }
        .           
        .               /// Immutably borrows the wrapped value, returning an error if the value is currently mutably
        .               /// borrowed.
        .               ///
        .               /// The borrow lasts until the returned `Ref` exits scope. Multiple immutable borrows can be
        .               /// taken out at the same time.
        .               ///
        .               /// This is the non-panicking variant of [`borrow`](#method.borrow).
-- line 863 ----------------------------------------
-- line 937 ----------------------------------------
        .               /// let c = RefCell::new(5);
        .               /// let m = c.borrow();
        .               ///
        .               /// let b = c.borrow_mut(); // this causes a panic
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
        .               #[track_caller]
    7,955 ( 0.00%)      pub fn borrow_mut(&self) -> RefMut<'_, T> {
        .                   self.try_borrow_mut().expect("already borrowed")
   23,865 ( 0.01%)      }
        .           
        .               /// Mutably borrows the wrapped value, returning an error if the value is currently borrowed.
        .               ///
        .               /// The borrow lasts until the returned `RefMut` or all `RefMut`s derived
        .               /// from it exit scope. The value cannot be borrowed while this borrow is
        .               /// active.
        .               ///
        .               /// This is the non-panicking variant of [`borrow_mut`](#method.borrow_mut).
-- line 955 ----------------------------------------
-- line 975 ----------------------------------------
        .                   match BorrowRefMut::new(&self.borrow) {
        .                       Some(b) => {
        .                           #[cfg(feature = "debug_refcell")]
        .                           {
        .                               self.borrowed_at.set(Some(crate::panic::Location::caller()));
        .                           }
        .           
        .                           // SAFETY: `BorrowRef` guarantees unique access.
       22 ( 0.00%)                  Ok(RefMut { value: unsafe { &mut *self.value.get() }, borrow: b })
        .                       }
        .                       None => Err(BorrowMutError {
        .                           // If a borrow occurred, then we must already have an outstanding borrow,
        .                           // so `borrowed_at` will be `Some`
        .                           #[cfg(feature = "debug_refcell")]
        .                           location: self.borrowed_at.get().unwrap(),
        .                       }),
        .                   }
-- line 991 ----------------------------------------
-- line 1254 ----------------------------------------
        .           
        .           struct BorrowRef<'b> {
        .               borrow: &'b Cell<BorrowFlag>,
        .           }
        .           
        .           impl<'b> BorrowRef<'b> {
        .               #[inline]
        .               fn new(borrow: &'b Cell<BorrowFlag>) -> Option<BorrowRef<'b>> {
  123,306 ( 0.03%)          let b = borrow.get().wrapping_add(1);
   72,050 ( 0.02%)          if !is_reading(b) {
        .                       // Incrementing borrow can result in a non-reading value (<= 0) in these cases:
        .                       // 1. It was < 0, i.e. there are writing borrows, so we can't allow a read borrow
        .                       //    due to Rust's reference aliasing rules
        .                       // 2. It was isize::MAX (the max amount of reading borrows) and it overflowed
        .                       //    into isize::MIN (the max amount of writing borrows) so we can't allow
        .                       //    an additional read borrow because isize can't represent so many read borrows
        .                       //    (this can only happen if you mem::forget more than a small constant amount of
        .                       //    `Ref`s, which is not good practice)
-- line 1271 ----------------------------------------
-- line 1279 ----------------------------------------
        .                       Some(BorrowRef { borrow })
        .                   }
        .               }
        .           }
        .           
        .           impl Drop for BorrowRef<'_> {
        .               #[inline]
        .               fn drop(&mut self) {
   58,384 ( 0.02%)          let borrow = self.borrow.get();
        .                   debug_assert!(is_reading(borrow));
  117,445 ( 0.03%)          self.borrow.set(borrow - 1);
        .               }
        .           }
        .           
        .           impl Clone for BorrowRef<'_> {
        .               #[inline]
        .               fn clone(&self) -> Self {
        .                   // Since this Ref exists, we know the borrow flag
        .                   // is a reading borrow.
-- line 1297 ----------------------------------------
-- line 1645 ----------------------------------------
        .           
        .           struct BorrowRefMut<'b> {
        .               borrow: &'b Cell<BorrowFlag>,
        .           }
        .           
        .           impl Drop for BorrowRefMut<'_> {
        .               #[inline]
        .               fn drop(&mut self) {
  650,188 ( 0.17%)          let borrow = self.borrow.get();
        .                   debug_assert!(is_writing(borrow));
1,263,851 ( 0.33%)          self.borrow.set(borrow + 1);
        .               }
        .           }
        .           
        .           impl<'b> BorrowRefMut<'b> {
        .               #[inline]
        .               fn new(borrow: &'b Cell<BorrowFlag>) -> Option<BorrowRefMut<'b>> {
        .                   // NOTE: Unlike BorrowRefMut::clone, new is called to create the initial
        .                   // mutable reference, and so there must currently be no existing
        .                   // references. Thus, while clone increments the mutable refcount, here
        .                   // we explicitly only allow going from UNUSED to UNUSED - 1.
1,335,548 ( 0.35%)          match borrow.get() {
        .                       UNUSED => {
        .                           borrow.set(UNUSED - 1);
        .                           Some(BorrowRefMut { borrow })
        .                       }
        .                       _ => None,
        .                   }
        .               }
        .           
-- line 1674 ----------------------------------------
-- line 1711 ----------------------------------------
        .                   self.value
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T: ?Sized> DerefMut for RefMut<'_, T> {
        .               #[inline]
        .               fn deref_mut(&mut self) -> &mut T {
      445 ( 0.00%)          self.value
        .               }
        .           }
        .           
        .           #[unstable(feature = "coerce_unsized", issue = "27732")]
        .           impl<'b, T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<RefMut<'b, U>> for RefMut<'b, T> {}
        .           
        .           #[stable(feature = "std_guard_impls", since = "1.20.0")]
        .           impl<T: ?Sized + fmt::Display> fmt::Display for RefMut<'_, T> {
-- line 1727 ----------------------------------------
-- line 1909 ----------------------------------------
        .               /// ```
        .               #[inline(always)]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_stable(feature = "const_unsafecell_get", since = "1.32.0")]
        .               pub const fn get(&self) -> *mut T {
        .                   // We can just cast the pointer from `UnsafeCell<T>` to `T` because of
        .                   // #[repr(transparent)]. This exploits libstd's special status, there is
        .                   // no guarantee for user code that this will work in future versions of the compiler!
  489,507 ( 0.13%)          self as *const UnsafeCell<T> as *const T as *mut T
        .               }
        .           
        .               /// Returns a mutable reference to the underlying data.
        .               ///
        .               /// This call borrows the `UnsafeCell` mutably (at compile-time) which
        .               /// guarantees that we possess the only reference.
        .               ///
        .               /// # Examples
-- line 1925 ----------------------------------------

1,046,148 ( 0.27%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cell.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/hir/map/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 17 ----------------------------------------
      .           use rustc_span::hygiene::MacroKind;
      .           use rustc_span::source_map::Spanned;
      .           use rustc_span::symbol::{kw, sym, Ident, Symbol};
      .           use rustc_span::Span;
      .           use rustc_target::spec::abi::Abi;
      .           use std::collections::VecDeque;
      .           
      .           fn fn_decl<'hir>(node: Node<'hir>) -> Option<&'hir FnDecl<'hir>> {
    535 ( 0.00%)      match node {
      .                   Node::Item(Item { kind: ItemKind::Fn(sig, _, _), .. })
      .                   | Node::TraitItem(TraitItem { kind: TraitItemKind::Fn(sig, _), .. })
      .                   | Node::ImplItem(ImplItem { kind: ImplItemKind::Fn(sig, _), .. }) => Some(&sig.decl),
      .                   Node::Expr(Expr { kind: ExprKind::Closure(_, fn_decl, ..), .. })
      .                   | Node::ForeignItem(ForeignItem { kind: ForeignItemKind::Fn(fn_decl, ..), .. }) => {
      .                       Some(fn_decl)
      .                   }
      .                   _ => None,
      .               }
      .           }
      .           
      .           pub fn fn_sig<'hir>(node: Node<'hir>) -> Option<&'hir FnSig<'hir>> {
    222 ( 0.00%)      match &node {
      .                   Node::Item(Item { kind: ItemKind::Fn(sig, _, _), .. })
      .                   | Node::TraitItem(TraitItem { kind: TraitItemKind::Fn(sig, _), .. })
      .                   | Node::ImplItem(ImplItem { kind: ImplItemKind::Fn(sig, _), .. }) => Some(sig),
      .                   _ => None,
      .               }
      .           }
      .           
      .           pub fn associated_body<'hir>(node: Node<'hir>) -> Option<BodyId> {
 10,906 ( 0.00%)      match node {
      .                   Node::Item(Item {
      .                       kind: ItemKind::Const(_, body) | ItemKind::Static(.., body) | ItemKind::Fn(.., body),
      .                       ..
      .                   })
      .                   | Node::TraitItem(TraitItem {
      .                       kind:
      .                           TraitItemKind::Const(_, Some(body)) | TraitItemKind::Fn(_, TraitFn::Provided(body)),
      .                       ..
      .                   })
      .                   | Node::ImplItem(ImplItem {
      .                       kind: ImplItemKind::Const(_, body) | ImplItemKind::Fn(_, body),
      .                       ..
      .                   })
  1,707 ( 0.00%)          | Node::Expr(Expr { kind: ExprKind::Closure(.., body, _, _), .. }) => Some(*body),
      .           
    360 ( 0.00%)          Node::AnonConst(constant) => Some(constant.body),
      .           
      .                   _ => None,
      .               }
      .           }
      .           
      .           fn is_body_owner<'hir>(node: Node<'hir>, hir_id: HirId) -> bool {
      .               match associated_body(node) {
      .                   Some(b) => b.hir_id == hir_id,
-- line 71 ----------------------------------------
-- line 83 ----------------------------------------
      .           pub struct ParentHirIterator<'hir> {
      .               current_id: HirId,
      .               map: Map<'hir>,
      .           }
      .           
      .           impl<'hir> Iterator for ParentHirIterator<'hir> {
      .               type Item = (HirId, Node<'hir>);
      .           
    392 ( 0.00%)      fn next(&mut self) -> Option<Self::Item> {
     56 ( 0.00%)          if self.current_id == CRATE_HIR_ID {
      .                       return None;
      .                   }
      .                   loop {
      .                       // There are nodes that do not have entries, so we need to skip them.
      .                       let parent_id = self.map.get_parent_node(self.current_id);
      .           
    159 ( 0.00%)              if parent_id == self.current_id {
      .                           self.current_id = CRATE_HIR_ID;
      .                           return None;
      .                       }
      .           
    106 ( 0.00%)              self.current_id = parent_id;
    424 ( 0.00%)              if let Some(node) = self.map.find(parent_id) {
    212 ( 0.00%)                  return Some((parent_id, node));
      .                       }
      .                       // If this `HirId` doesn't have an entry, skip it and look for its `parent_id`.
      .                   }
    504 ( 0.00%)      }
      .           }
      .           
      .           /// An iterator that walks up the ancestor tree of a given `HirId`.
      .           /// Constructed using `tcx.hir().parent_owner_iter(hir_id)`.
      .           pub struct ParentOwnerIterator<'hir> {
      .               current_id: HirId,
      .               map: Map<'hir>,
      .           }
      .           
      .           impl<'hir> Iterator for ParentOwnerIterator<'hir> {
      .               type Item = (LocalDefId, OwnerNode<'hir>);
      .           
  4,455 ( 0.00%)      fn next(&mut self) -> Option<Self::Item> {
  1,485 ( 0.00%)          if self.current_id.local_id.index() != 0 {
    344 ( 0.00%)              self.current_id.local_id = ItemLocalId::new(0);
  1,376 ( 0.00%)              if let Some(node) = self.map.tcx.hir_owner(self.current_id.owner) {
      .                           return Some((self.current_id.owner, node.node));
      .                       }
      .                   }
    151 ( 0.00%)          if self.current_id == CRATE_HIR_ID {
      .                       return None;
      .                   }
      .                   loop {
      .                       // There are nodes that do not have entries, so we need to skip them.
      .                       let parent_id = self.map.def_key(self.current_id.owner).parent;
      .           
      .                       let parent_id = parent_id.map_or(CRATE_HIR_ID.owner, |local_def_index| {
      .                           let def_id = LocalDefId { local_def_index };
      .                           self.map.local_def_id_to_hir_id(def_id).owner
      .                       });
    302 ( 0.00%)              self.current_id = HirId::make_owner(parent_id);
      .           
      .                       // If this `HirId` doesn't have an entry, skip it and look for its `parent_id`.
    302 ( 0.00%)              if let Some(node) = self.map.tcx.hir_owner(self.current_id.owner) {
      .                           return Some((self.current_id.owner, node.node));
      .                       }
      .                   }
  3,960 ( 0.00%)      }
      .           }
      .           
      .           impl<'hir> Map<'hir> {
    210 ( 0.00%)      pub fn krate(&self) -> &'hir Crate<'hir> {
     30 ( 0.00%)          self.tcx.hir_crate(())
    240 ( 0.00%)      }
      .           
      7 ( 0.00%)      pub fn root_module(&self) -> &'hir Mod<'hir> {
      1 ( 0.00%)          match self.tcx.hir_owner(CRATE_DEF_ID).map(|o| o.node) {
      .                       Some(OwnerNode::Crate(item)) => item,
      .                       _ => bug!(),
      .                   }
      8 ( 0.00%)      }
      .           
      .               pub fn items(&self) -> impl Iterator<Item = &'hir Item<'hir>> + 'hir {
      .                   let krate = self.krate();
      .                   krate.owners.iter().filter_map(|owner| match owner.as_ref()?.node() {
      .                       OwnerNode::Item(item) => Some(item),
      .                       _ => None,
      .                   })
      .               }
-- line 169 ----------------------------------------
-- line 184 ----------------------------------------
      .           
      .               #[inline]
      .               pub fn def_path_hash(self, def_id: LocalDefId) -> DefPathHash {
      .                   // Accessing the DefPathHash is ok, it is incr. comp. stable.
      .                   self.tcx.untracked_resolutions.definitions.def_path_hash(def_id)
      .               }
      .           
      .               #[inline]
  7,320 ( 0.00%)      pub fn local_def_id(&self, hir_id: HirId) -> LocalDefId {
  3,186 ( 0.00%)          self.opt_local_def_id(hir_id).unwrap_or_else(|| {
      .                       bug!(
      .                           "local_def_id: no entry for `{:?}`, which has a map of `{:?}`",
      .                           hir_id,
      .                           self.find(hir_id)
      .                       )
      .                   })
  5,490 ( 0.00%)      }
      .           
      .               #[inline]
  8,496 ( 0.00%)      pub fn opt_local_def_id(&self, hir_id: HirId) -> Option<LocalDefId> {
  1,783 ( 0.00%)          if hir_id.local_id == ItemLocalId::new(0) {
      .                       Some(hir_id.owner)
      .                   } else {
    332 ( 0.00%)              self.tcx
      .                           .hir_owner_nodes(hir_id.owner)?
      .                           .local_id_to_def_id
      .                           .get(&hir_id.local_id)
      .                           .copied()
      .                   }
  9,558 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn local_def_id_to_hir_id(&self, def_id: LocalDefId) -> HirId {
      .                   // FIXME(#85914) is this access safe for incr. comp.?
    569 ( 0.00%)          self.tcx.untracked_resolutions.definitions.local_def_id_to_hir_id(def_id)
      .               }
      .           
      7 ( 0.00%)      pub fn iter_local_def_id(&self) -> impl Iterator<Item = LocalDefId> + '_ {
      .                   // Create a dependency to the crate to be sure we reexcute this when the amount of
      .                   // definitions change.
      1 ( 0.00%)          self.tcx.ensure().hir_crate(());
      .                   self.tcx.untracked_resolutions.definitions.iter_local_def_id()
      9 ( 0.00%)      }
      .           
  1,246 ( 0.00%)      pub fn opt_def_kind(&self, local_def_id: LocalDefId) -> Option<DefKind> {
      .                   let hir_id = self.local_def_id_to_hir_id(local_def_id);
  2,314 ( 0.00%)          let def_kind = match self.find(hir_id)? {
    460 ( 0.00%)              Node::Item(item) => match item.kind {
      .                           ItemKind::Static(..) => DefKind::Static,
      .                           ItemKind::Const(..) => DefKind::Const,
      .                           ItemKind::Fn(..) => DefKind::Fn,
      .                           ItemKind::Macro(..) => DefKind::Macro(MacroKind::Bang),
      .                           ItemKind::Mod(..) => DefKind::Mod,
      .                           ItemKind::OpaqueTy(..) => DefKind::OpaqueTy,
      .                           ItemKind::TyAlias(..) => DefKind::TyAlias,
      .                           ItemKind::Enum(..) => DefKind::Enum,
-- line 239 ----------------------------------------
-- line 247 ----------------------------------------
      .                           ItemKind::GlobalAsm(..) => DefKind::GlobalAsm,
      .                           ItemKind::Impl { .. } => DefKind::Impl,
      .                       },
      .                       Node::ForeignItem(item) => match item.kind {
      .                           ForeignItemKind::Fn(..) => DefKind::Fn,
      .                           ForeignItemKind::Static(..) => DefKind::Static,
      .                           ForeignItemKind::Type => DefKind::ForeignTy,
      .                       },
      6 ( 0.00%)              Node::TraitItem(item) => match item.kind {
      .                           TraitItemKind::Const(..) => DefKind::AssocConst,
      .                           TraitItemKind::Fn(..) => DefKind::AssocFn,
      .                           TraitItemKind::Type(..) => DefKind::AssocTy,
      .                       },
     11 ( 0.00%)              Node::ImplItem(item) => match item.kind {
      .                           ImplItemKind::Const(..) => DefKind::AssocConst,
      .                           ImplItemKind::Fn(..) => DefKind::AssocFn,
      .                           ImplItemKind::TyAlias(..) => DefKind::AssocTy,
      .                       },
      .                       Node::Variant(_) => DefKind::Variant,
      .                       Node::Ctor(variant_data) => {
      .                           // FIXME(eddyb) is this even possible, if we have a `Node::Ctor`?
      .                           assert_ne!(variant_data.ctor_hir_id(), None);
-- line 268 ----------------------------------------
-- line 270 ----------------------------------------
      .                           let ctor_of = match self.find(self.get_parent_node(hir_id)) {
      .                               Some(Node::Item(..)) => def::CtorOf::Struct,
      .                               Some(Node::Variant(..)) => def::CtorOf::Variant,
      .                               _ => unreachable!(),
      .                           };
      .                           DefKind::Ctor(ctor_of, def::CtorKind::from_hir(variant_data))
      .                       }
      .                       Node::AnonConst(_) => {
     32 ( 0.00%)                  let inline = match self.find(self.get_parent_node(hir_id)) {
      .                               Some(Node::Expr(&Expr {
      .                                   kind: ExprKind::ConstBlock(ref anon_const), ..
      .                               })) if anon_const.hir_id == hir_id => true,
      .                               _ => false,
      .                           };
      .                           if inline { DefKind::InlineConst } else { DefKind::AnonConst }
      .                       }
      .                       Node::Field(_) => DefKind::Field,
      .                       Node::Expr(expr) => match expr.kind {
      .                           ExprKind::Closure(.., None) => DefKind::Closure,
      .                           ExprKind::Closure(.., Some(_)) => DefKind::Generator,
      .                           _ => bug!("def_kind: unsupported node: {}", self.node_to_string(hir_id)),
      .                       },
      6 ( 0.00%)              Node::GenericParam(param) => match param.kind {
      .                           GenericParamKind::Lifetime { .. } => DefKind::LifetimeParam,
      .                           GenericParamKind::Type { .. } => DefKind::TyParam,
      .                           GenericParamKind::Const { .. } => DefKind::ConstParam,
      .                       },
      .                       Node::Crate(_) => DefKind::Mod,
      .                       Node::Stmt(_)
      .                       | Node::PathSegment(_)
      .                       | Node::Ty(_)
-- line 300 ----------------------------------------
-- line 304 ----------------------------------------
      .                       | Node::Binding(_)
      .                       | Node::Local(_)
      .                       | Node::Param(_)
      .                       | Node::Arm(_)
      .                       | Node::Lifetime(_)
      .                       | Node::Visibility(_)
      .                       | Node::Block(_) => return None,
      .                   };
    568 ( 0.00%)          Some(def_kind)
  1,780 ( 0.00%)      }
      .           
      .               pub fn def_kind(&self, local_def_id: LocalDefId) -> DefKind {
      .                   self.opt_def_kind(local_def_id)
      .                       .unwrap_or_else(|| bug!("def_kind: unsupported node: {:?}", local_def_id))
      .               }
      .           
320,672 ( 0.08%)      pub fn find_parent_node(&self, id: HirId) -> Option<HirId> {
 40,084 ( 0.01%)          if id.local_id == ItemLocalId::from_u32(0) {
      .                       Some(self.tcx.hir_owner_parent(id.owner))
      .                   } else {
 78,032 ( 0.02%)              let owner = self.tcx.hir_owner_nodes(id.owner)?;
 39,016 ( 0.01%)              let node = owner.nodes[id.local_id].as_ref()?;
117,048 ( 0.03%)              let hir_id = HirId { owner: id.owner, local_id: node.parent };
      .                       Some(hir_id)
      .                   }
320,672 ( 0.08%)      }
      .           
    477 ( 0.00%)      pub fn get_parent_node(&self, hir_id: HirId) -> HirId {
229,217 ( 0.06%)          self.find_parent_node(hir_id).unwrap()
    954 ( 0.00%)      }
      .           
      .               /// Retrieves the `Node` corresponding to `id`, returning `None` if cannot be found.
 71,384 ( 0.02%)      pub fn find(&self, id: HirId) -> Option<Node<'hir>> {
  8,923 ( 0.00%)          if id.local_id == ItemLocalId::from_u32(0) {
      .                       let owner = self.tcx.hir_owner(id.owner)?;
  5,240 ( 0.00%)              Some(owner.node.into())
      .                   } else {
  7,278 ( 0.00%)              let owner = self.tcx.hir_owner_nodes(id.owner)?;
  3,639 ( 0.00%)              let node = owner.nodes[id.local_id].as_ref()?;
 10,917 ( 0.00%)              Some(node.node)
      .                   }
 71,384 ( 0.02%)      }
      .           
      .               /// Retrieves the `Node` corresponding to `id`, returning `None` if cannot be found.
      .               #[inline]
      .               pub fn find_by_def_id(&self, id: LocalDefId) -> Option<Node<'hir>> {
  1,104 ( 0.00%)          self.find(self.local_def_id_to_hir_id(id))
      .               }
      .           
      .               /// Retrieves the `Node` corresponding to `id`, panicking if it cannot be found.
  5,088 ( 0.00%)      pub fn get(&self, id: HirId) -> Node<'hir> {
  3,216 ( 0.00%)          self.find(id).unwrap_or_else(|| bug!("couldn't find hir id {} in the HIR map", id))
  3,392 ( 0.00%)      }
      .           
      .               /// Retrieves the `Node` corresponding to `id`, panicking if it cannot be found.
      .               #[inline]
      .               pub fn get_by_def_id(&self, id: LocalDefId) -> Node<'hir> {
      .                   self.find_by_def_id(id).unwrap_or_else(|| bug!("couldn't find {:?} in the HIR map", id))
      .               }
      .           
    102 ( 0.00%)      pub fn get_if_local(&self, id: DefId) -> Option<Node<'hir>> {
     51 ( 0.00%)          id.as_local().and_then(|id| self.find(self.local_def_id_to_hir_id(id)))
    102 ( 0.00%)      }
      .           
      .               pub fn get_generics(&self, id: LocalDefId) -> Option<&'hir Generics<'hir>> {
      .                   let node = self.tcx.hir_owner(id)?;
      .                   match node.node {
      .                       OwnerNode::ImplItem(impl_item) => Some(&impl_item.generics),
      .                       OwnerNode::TraitItem(trait_item) => Some(&trait_item.generics),
      .                       OwnerNode::Item(Item {
      .                           kind:
-- line 374 ----------------------------------------
-- line 381 ----------------------------------------
      .                               | ItemKind::TraitAlias(generics, _)
      .                               | ItemKind::Impl(Impl { generics, .. }),
      .                           ..
      .                       }) => Some(generics),
      .                       _ => None,
      .                   }
      .               }
      .           
 21,567 ( 0.01%)      pub fn item(&self, id: ItemId) -> &'hir Item<'hir> {
  6,162 ( 0.00%)          self.tcx.hir_owner(id.def_id).unwrap().node.expect_item()
 24,648 ( 0.01%)      }
      .           
    546 ( 0.00%)      pub fn trait_item(&self, id: TraitItemId) -> &'hir TraitItem<'hir> {
    156 ( 0.00%)          self.tcx.hir_owner(id.def_id).unwrap().node.expect_trait_item()
    624 ( 0.00%)      }
      .           
  2,177 ( 0.00%)      pub fn impl_item(&self, id: ImplItemId) -> &'hir ImplItem<'hir> {
    622 ( 0.00%)          self.tcx.hir_owner(id.def_id).unwrap().node.expect_impl_item()
  2,488 ( 0.00%)      }
      .           
      .               pub fn foreign_item(&self, id: ForeignItemId) -> &'hir ForeignItem<'hir> {
      .                   self.tcx.hir_owner(id.def_id).unwrap().node.expect_foreign_item()
      .               }
      .           
 15,939 ( 0.00%)      pub fn body(&self, id: BodyId) -> &'hir Body<'hir> {
  4,554 ( 0.00%)          self.tcx.hir_owner_nodes(id.hir_id.owner).unwrap().bodies[&id.hir_id.local_id]
 18,216 ( 0.00%)      }
      .           
    321 ( 0.00%)      pub fn fn_decl_by_hir_id(&self, hir_id: HirId) -> Option<&'hir FnDecl<'hir>> {
    321 ( 0.00%)          if let Some(node) = self.find(hir_id) {
      .                       fn_decl(node)
      .                   } else {
      .                       bug!("no node for hir_id `{}`", hir_id)
      .                   }
    214 ( 0.00%)      }
      .           
     87 ( 0.00%)      pub fn fn_sig_by_hir_id(&self, hir_id: HirId) -> Option<&'hir FnSig<'hir>> {
     87 ( 0.00%)          if let Some(node) = self.find(hir_id) {
      .                       fn_sig(node)
      .                   } else {
      .                       bug!("no node for hir_id `{}`", hir_id)
      .                   }
     87 ( 0.00%)      }
      .           
      .               pub fn enclosing_body_owner(&self, hir_id: HirId) -> HirId {
      .                   for (parent, _) in self.parent_iter(hir_id) {
      .                       if let Some(body) = self.maybe_body_owned_by(parent) {
      .                           return self.body_owner(body);
      .                       }
      .                   }
      .           
      .                   bug!("no `enclosing_body_owner` for hir_id `{}`", hir_id);
      .               }
      .           
      .               /// Returns the `HirId` that corresponds to the definition of
      .               /// which this is the body of, i.e., a `fn`, `const` or `static`
      .               /// item (possibly associated), a closure, or a `hir::AnonConst`.
 10,688 ( 0.00%)      pub fn body_owner(&self, BodyId { hir_id }: BodyId) -> HirId {
      .                   let parent = self.get_parent_node(hir_id);
  8,016 ( 0.00%)          assert!(self.find(parent).map_or(false, |n| is_body_owner(n, hir_id)));
      .                   parent
 10,688 ( 0.00%)      }
      .           
  3,425 ( 0.00%)      pub fn body_owner_def_id(&self, id: BodyId) -> LocalDefId {
  5,310 ( 0.00%)          self.local_def_id(self.body_owner(id))
  3,425 ( 0.00%)      }
      .           
      .               /// Given a `HirId`, returns the `BodyId` associated with it,
      .               /// if the node is a body owner, otherwise returns `None`.
    445 ( 0.00%)      pub fn maybe_body_owned_by(&self, hir_id: HirId) -> Option<BodyId> {
  1,478 ( 0.00%)          self.find(hir_id).map(associated_body).flatten()
  1,335 ( 0.00%)      }
      .           
      .               /// Given a body owner's id, returns the `BodyId` associated with it.
  1,287 ( 0.00%)      pub fn body_owned_by(&self, id: HirId) -> BodyId {
      .                   self.maybe_body_owned_by(id).unwrap_or_else(|| {
      .                       span_bug!(
      .                           self.span(id),
      .                           "body_owned_by: {} has no associated body",
      .                           self.node_to_string(id)
      .                       );
      .                   })
  1,001 ( 0.00%)      }
      .           
     40 ( 0.00%)      pub fn body_param_names(&self, id: BodyId) -> impl Iterator<Item = Ident> + 'hir {
    388 ( 0.00%)          self.body(id).params.iter().map(|arg| match arg.pat.kind {
    134 ( 0.00%)              PatKind::Binding(_, _, ident, _) => ident,
      .                       _ => Ident::empty(),
      .                   })
    120 ( 0.00%)      }
      .           
      .               /// Returns the `BodyOwnerKind` of this `LocalDefId`.
      .               ///
      .               /// Panics if `LocalDefId` does not have an associated body.
  2,244 ( 0.00%)      pub fn body_owner_kind(&self, id: HirId) -> BodyOwnerKind {
  6,192 ( 0.00%)          match self.get(id) {
      .                       Node::Item(&Item { kind: ItemKind::Const(..), .. })
      .                       | Node::TraitItem(&TraitItem { kind: TraitItemKind::Const(..), .. })
      .                       | Node::ImplItem(&ImplItem { kind: ImplItemKind::Const(..), .. })
      .                       | Node::AnonConst(_) => BodyOwnerKind::Const,
      .                       Node::Ctor(..)
      .                       | Node::Item(&Item { kind: ItemKind::Fn(..), .. })
      .                       | Node::TraitItem(&TraitItem { kind: TraitItemKind::Fn(..), .. })
      .                       | Node::ImplItem(&ImplItem { kind: ImplItemKind::Fn(..), .. }) => BodyOwnerKind::Fn,
     36 ( 0.00%)              Node::Item(&Item { kind: ItemKind::Static(_, m, _), .. }) => BodyOwnerKind::Static(m),
      .                       Node::Expr(&Expr { kind: ExprKind::Closure(..), .. }) => BodyOwnerKind::Closure,
      .                       node => bug!("{:#?} is not a body node", node),
      .                   }
  2,244 ( 0.00%)      }
      .           
      .               /// Returns the `ConstContext` of the body associated with this `LocalDefId`.
      .               ///
      .               /// Panics if `LocalDefId` does not have an associated body.
      .               ///
      .               /// This should only be used for determining the context of a body, a return
      .               /// value of `Some` does not always suggest that the owner of the body is `const`,
      .               /// just that it has to be checked as if it were.
  2,672 ( 0.00%)      pub fn body_const_context(&self, did: LocalDefId) -> Option<ConstContext> {
      .                   let hir_id = self.local_def_id_to_hir_id(did);
  4,008 ( 0.00%)          let ccx = match self.body_owner_kind(hir_id) {
      .                       BodyOwnerKind::Const => ConstContext::Const,
     54 ( 0.00%)              BodyOwnerKind::Static(mt) => ConstContext::Static(mt),
      .           
    160 ( 0.00%)              BodyOwnerKind::Fn if self.tcx.is_constructor(did.to_def_id()) => return None,
    160 ( 0.00%)              BodyOwnerKind::Fn if self.tcx.is_const_fn_raw(did.to_def_id()) => ConstContext::ConstFn,
      .                       BodyOwnerKind::Fn
    320 ( 0.00%)                  if self.tcx.has_attr(did.to_def_id(), sym::default_method_body_is_const) =>
      .                       {
      .                           ConstContext::ConstFn
      .                       }
      .                       BodyOwnerKind::Fn | BodyOwnerKind::Closure => return None,
      .                   };
      .           
      .                   Some(ccx)
  3,006 ( 0.00%)      }
      .           
      .               /// Returns an iterator of the `DefId`s for all body-owners in this
      .               /// crate. If you would prefer to iterate over the bodies
      .               /// themselves, you can do `self.hir().krate().body_ids.iter()`.
     21 ( 0.00%)      pub fn body_owners(self) -> impl Iterator<Item = LocalDefId> + 'hir {
      3 ( 0.00%)          self.krate()
      .                       .owners
      .                       .iter_enumerated()
      .                       .flat_map(move |(owner, owner_info)| {
    534 ( 0.00%)                  let bodies = &owner_info.as_ref()?.nodes.bodies;
      .                           Some(bodies.iter().map(move |&(local_id, _)| {
      4 ( 0.00%)                      let hir_id = HirId { owner, local_id };
      .                               let body_id = BodyId { hir_id };
    678 ( 0.00%)                      self.body_owner_def_id(body_id)
      .                           }))
      .                       })
      .                       .flatten()
     15 ( 0.00%)      }
      .           
     10 ( 0.00%)      pub fn par_body_owners<F: Fn(LocalDefId) + Sync + Send>(self, f: F) {
      .                   use rustc_data_structures::sync::{par_iter, ParallelIterator};
      .                   #[cfg(parallel_compiler)]
      .                   use rustc_rayon::iter::IndexedParallelIterator;
      .           
      3 ( 0.00%)          par_iter(&self.krate().owners.raw).enumerate().for_each(|(owner, owner_info)| {
      .                       let owner = LocalDefId::new(owner);
  1,068 ( 0.00%)              if let Some(owner_info) = owner_info {
      .                           par_iter(owner_info.nodes.bodies.range(..)).for_each(|(local_id, _)| {
      .                               let hir_id = HirId { owner, local_id: *local_id };
      .                               let body_id = BodyId { hir_id };
    621 ( 0.00%)                      f(self.body_owner_def_id(body_id))
      .                           })
      .                       }
      .                   });
      8 ( 0.00%)      }
      .           
      .               pub fn ty_param_owner(&self, id: HirId) -> LocalDefId {
      .                   match self.get(id) {
      .                       Node::Item(&Item { kind: ItemKind::Trait(..) | ItemKind::TraitAlias(..), .. }) => {
      .                           id.expect_owner()
      .                       }
      .                       Node::GenericParam(_) => self.get_parent_item(id),
      .                       _ => bug!("ty_param_owner: {} not a type parameter", self.node_to_string(id)),
-- line 558 ----------------------------------------
-- line 564 ----------------------------------------
      .                       Node::Item(&Item { kind: ItemKind::Trait(..) | ItemKind::TraitAlias(..), .. }) => {
      .                           kw::SelfUpper
      .                       }
      .                       Node::GenericParam(param) => param.name.ident().name,
      .                       _ => bug!("ty_param_name: {} not a type parameter", self.node_to_string(id)),
      .                   }
      .               }
      .           
    378 ( 0.00%)      pub fn trait_impls(&self, trait_did: DefId) -> &'hir [LocalDefId] {
     42 ( 0.00%)          self.tcx.all_local_trait_impls(()).get(&trait_did).map_or(&[], |xs| &xs[..])
    378 ( 0.00%)      }
      .           
      .               /// Gets the attributes on the crate. This is preferable to
      .               /// invoking `krate.attrs` because it registers a tighter
      .               /// dep-graph access.
      .               pub fn krate_attrs(&self) -> &'hir [ast::Attribute] {
     20 ( 0.00%)          self.attrs(CRATE_HIR_ID)
      .               }
      .           
    329 ( 0.00%)      pub fn get_module(&self, module: LocalDefId) -> (&'hir Mod<'hir>, Span, HirId) {
      .                   let hir_id = HirId::make_owner(module);
    235 ( 0.00%)          match self.tcx.hir_owner(module).map(|o| o.node) {
     72 ( 0.00%)              Some(OwnerNode::Item(&Item { span, kind: ItemKind::Mod(ref m), .. })) => {
      .                           (m, span, hir_id)
      .                       }
     33 ( 0.00%)              Some(OwnerNode::Crate(item)) => (item, item.inner, hir_id),
      .                       node => panic!("not a module: {:?}", node),
      .                   }
    423 ( 0.00%)      }
      .           
      .               /// Walks the contents of a crate. See also `Crate::visit_all_items`.
     11 ( 0.00%)      pub fn walk_toplevel_module(self, visitor: &mut impl Visitor<'hir>) {
     30 ( 0.00%)          let (top_mod, span, hir_id) = self.get_module(CRATE_DEF_ID);
      .                   visitor.visit_mod(top_mod, span, hir_id);
      8 ( 0.00%)      }
      .           
      .               /// Walks the attributes in a crate.
     20 ( 0.00%)      pub fn walk_attributes(self, visitor: &mut impl Visitor<'hir>) {
      2 ( 0.00%)          let krate = self.krate();
      .                   for (owner, info) in krate.owners.iter_enumerated() {
    712 ( 0.00%)              if let Some(info) = info {
      .                           for (local_id, attrs) in info.attrs.map.iter() {
      .                               let id = HirId { owner, local_id: *local_id };
      .                               for a in *attrs {
  1,120 ( 0.00%)                          visitor.visit_attribute(id, a)
      .                               }
      .                           }
      .                       }
      .                   }
     16 ( 0.00%)      }
      .           
      .               /// Visits all items in the crate in some deterministic (but
      .               /// unspecified) order. If you just need to process every item,
      .               /// but don't care about nesting, this method is the best choice.
      .               ///
      .               /// If you do care about nesting -- usually because your algorithm
      .               /// follows lexical scoping rules -- then you want a different
      .               /// approach. You should override `visit_nested_item` in your
      .               /// visitor and then call `intravisit::walk_crate` instead.
    144 ( 0.00%)      pub fn visit_all_item_likes<V>(&self, visitor: &mut V)
      .               where
      .                   V: itemlikevisit::ItemLikeVisitor<'hir>,
      .               {
     20 ( 0.00%)          let krate = self.krate();
     70 ( 0.00%)          for owner in krate.owners.iter().filter_map(Option::as_ref) {
  4,290 ( 0.00%)              match owner.node() {
  4,945 ( 0.00%)                  OwnerNode::Item(item) => visitor.visit_item(item),
      .                           OwnerNode::ForeignItem(item) => visitor.visit_foreign_item(item),
     33 ( 0.00%)                  OwnerNode::ImplItem(item) => visitor.visit_impl_item(item),
      .                           OwnerNode::TraitItem(item) => visitor.visit_trait_item(item),
      .                           OwnerNode::Crate(_) => {}
      .                       }
      .                   }
    144 ( 0.00%)      }
      .           
      .               /// A parallel version of `visit_all_item_likes`.
      .               pub fn par_visit_all_item_likes<V>(&self, visitor: &V)
      .               where
      .                   V: itemlikevisit::ParItemLikeVisitor<'hir> + Sync + Send,
      .               {
      1 ( 0.00%)          let krate = self.krate();
      2 ( 0.00%)          par_for_each_in(&krate.owners.raw, |owner| match owner.as_ref().map(OwnerInfo::node) {
    115 ( 0.00%)              Some(OwnerNode::Item(item)) => visitor.visit_item(item),
      .                       Some(OwnerNode::ForeignItem(item)) => visitor.visit_foreign_item(item),
     11 ( 0.00%)              Some(OwnerNode::ImplItem(item)) => visitor.visit_impl_item(item),
      3 ( 0.00%)              Some(OwnerNode::TraitItem(item)) => visitor.visit_trait_item(item),
      .                       Some(OwnerNode::Crate(_)) | None => {}
      .                   })
      .               }
      .           
  1,118 ( 0.00%)      pub fn visit_item_likes_in_module<V>(&self, module: LocalDefId, visitor: &mut V)
      .               where
      .                   V: ItemLikeVisitor<'hir>,
      .               {
    143 ( 0.00%)          let module = self.tcx.hir_module_items(module);
      .           
    156 ( 0.00%)          for id in module.items.iter() {
  5,175 ( 0.00%)              visitor.visit_item(self.item(*id));
      .                   }
      .           
    156 ( 0.00%)          for id in module.trait_items.iter() {
    120 ( 0.00%)              visitor.visit_trait_item(self.trait_item(*id));
      .                   }
      .           
    156 ( 0.00%)          for id in module.impl_items.iter() {
    429 ( 0.00%)              visitor.visit_impl_item(self.impl_item(*id));
      .                   }
      .           
    156 ( 0.00%)          for id in module.foreign_items.iter() {
      .                       visitor.visit_foreign_item(self.foreign_item(*id));
      .                   }
  1,144 ( 0.00%)      }
      .           
     46 ( 0.00%)      pub fn for_each_module(&self, f: impl Fn(LocalDefId)) {
      .                   let mut queue = VecDeque::new();
      .                   queue.push_back(CRATE_DEF_ID);
      .           
    104 ( 0.00%)          while let Some(id) = queue.pop_front() {
      .                       f(id);
     39 ( 0.00%)              let items = self.tcx.hir_module_items(id);
    416 ( 0.00%)              queue.extend(items.submodules.iter().copied())
      .                   }
     40 ( 0.00%)      }
      .           
      .               #[cfg(not(parallel_compiler))]
      .               #[inline]
      .               pub fn par_for_each_module(&self, f: impl Fn(LocalDefId)) {
      4 ( 0.00%)          self.for_each_module(f)
      .               }
      .           
      .               #[cfg(parallel_compiler)]
      .               pub fn par_for_each_module(&self, f: impl Fn(LocalDefId) + Sync) {
      .                   use rustc_data_structures::sync::{par_iter, ParallelIterator};
      .                   par_iter_submodules(self.tcx, CRATE_DEF_ID, &f);
      .           
      .                   fn par_iter_submodules<F>(tcx: TyCtxt<'_>, module: LocalDefId, f: &F)
-- line 699 ----------------------------------------
-- line 703 ----------------------------------------
      .                       (*f)(module);
      .                       let items = tcx.hir_module_items(module);
      .                       par_iter(&items.submodules[..]).for_each(|&sm| par_iter_submodules(tcx, sm, f));
      .                   }
      .               }
      .           
      .               /// Returns an iterator for the nodes in the ancestor tree of the `current_id`
      .               /// until the crate root is reached. Prefer this over your own loop using `get_parent_node`.
     37 ( 0.00%)      pub fn parent_iter(self, current_id: HirId) -> ParentHirIterator<'hir> {
      .                   ParentHirIterator { current_id, map: self }
    148 ( 0.00%)      }
      .           
      .               /// Returns an iterator for the nodes in the ancestor tree of the `current_id`
      .               /// until the crate root is reached. Prefer this over your own loop using `get_parent_node`.
      .               pub fn parent_owner_iter(self, current_id: HirId) -> ParentOwnerIterator<'hir> {
      .                   ParentOwnerIterator { current_id, map: self }
  1,497 ( 0.00%)      }
      .           
      .               /// Checks if the node is left-hand side of an assignment.
      .               pub fn is_lhs(&self, id: HirId) -> bool {
      .                   match self.find(self.get_parent_node(id)) {
      .                       Some(Node::Expr(expr)) => match expr.kind {
      .                           ExprKind::Assign(lhs, _rhs, _span) => lhs.hir_id == id,
      .                           _ => false,
      .                       },
-- line 727 ----------------------------------------
-- line 792 ----------------------------------------
      .                   }
      .                   None
      .               }
      .           
      .               /// Retrieves the `HirId` for `id`'s parent item, or `id` itself if no
      .               /// parent item is in this map. The "parent item" is the closest parent node
      .               /// in the HIR which is recorded by the map and is an item, either an item
      .               /// in a module, trait, or impl.
    438 ( 0.00%)      pub fn get_parent_item(&self, hir_id: HirId) -> LocalDefId {
  3,950 ( 0.00%)          if let Some((def_id, _node)) = self.parent_owner_iter(hir_id).next() {
      .                       def_id
      .                   } else {
      .                       CRATE_DEF_ID
      .                   }
    876 ( 0.00%)      }
      .           
      .               /// Returns the `HirId` of `id`'s nearest module parent, or `id` itself if no
      .               /// module parent is in this map.
      .               pub(super) fn get_module_parent_node(&self, hir_id: HirId) -> LocalDefId {
    426 ( 0.00%)          for (def_id, node) in self.parent_owner_iter(hir_id) {
    224 ( 0.00%)              if let OwnerNode::Item(&Item { kind: ItemKind::Mod(_), .. }) = node {
      .                           return def_id;
      .                       }
      .                   }
      .                   CRATE_DEF_ID
      .               }
      .           
      .               /// When on an if expression, a match arm tail expression or a match arm, give back
      .               /// the enclosing `if` or `match` expression.
-- line 820 ----------------------------------------
-- line 885 ----------------------------------------
      .                       }
      .                   }
      .                   bug!(
      .                       "expected foreign mod or inlined parent, found {}",
      .                       self.node_to_string(HirId::make_owner(parent))
      .                   )
      .               }
      .           
  1,967 ( 0.00%)      pub fn expect_item(&self, id: LocalDefId) -> &'hir Item<'hir> {
    843 ( 0.00%)          match self.tcx.hir_owner(id) {
      .                       Some(Owner { node: OwnerNode::Item(item), .. }) => item,
      .                       _ => bug!("expected item, found {}", self.node_to_string(HirId::make_owner(id))),
      .                   }
  2,248 ( 0.00%)      }
      .           
    154 ( 0.00%)      pub fn expect_impl_item(&self, id: LocalDefId) -> &'hir ImplItem<'hir> {
     66 ( 0.00%)          match self.tcx.hir_owner(id) {
      .                       Some(Owner { node: OwnerNode::ImplItem(item), .. }) => item,
      .                       _ => bug!("expected impl item, found {}", self.node_to_string(HirId::make_owner(id))),
      .                   }
    176 ( 0.00%)      }
      .           
     42 ( 0.00%)      pub fn expect_trait_item(&self, id: LocalDefId) -> &'hir TraitItem<'hir> {
     18 ( 0.00%)          match self.tcx.hir_owner(id) {
      .                       Some(Owner { node: OwnerNode::TraitItem(item), .. }) => item,
      .                       _ => bug!("expected trait item, found {}", self.node_to_string(HirId::make_owner(id))),
      .                   }
     48 ( 0.00%)      }
      .           
      .               pub fn expect_variant(&self, id: HirId) -> &'hir Variant<'hir> {
      .                   match self.find(id) {
      .                       Some(Node::Variant(variant)) => variant,
      .                       _ => bug!("expected variant, found {}", self.node_to_string(id)),
      .                   }
      .               }
      .           
-- line 920 ----------------------------------------
-- line 929 ----------------------------------------
      .           
      .               pub fn expect_expr(&self, id: HirId) -> &'hir Expr<'hir> {
      .                   match self.find(id) {
      .                       Some(Node::Expr(expr)) => expr,
      .                       _ => bug!("expected expr, found {}", self.node_to_string(id)),
      .                   }
      .               }
      .           
     36 ( 0.00%)      pub fn opt_name(&self, id: HirId) -> Option<Symbol> {
     12 ( 0.00%)          Some(match self.get(id) {
      .                       Node::Item(i) => i.ident.name,
      .                       Node::ForeignItem(fi) => fi.ident.name,
      .                       Node::ImplItem(ii) => ii.ident.name,
      .                       Node::TraitItem(ti) => ti.ident.name,
      .                       Node::Variant(v) => v.ident.name,
      .                       Node::Field(f) => f.ident.name,
      .                       Node::Lifetime(lt) => lt.name.ident().name,
     12 ( 0.00%)              Node::GenericParam(param) => param.name.ident().name,
      .                       Node::Binding(&Pat { kind: PatKind::Binding(_, _, l, _), .. }) => l.name,
      .                       Node::Ctor(..) => self.name(HirId::make_owner(self.get_parent_item(id))),
      .                       _ => return None,
      .                   })
     20 ( 0.00%)      }
      .           
     32 ( 0.00%)      pub fn name(&self, id: HirId) -> Symbol {
     12 ( 0.00%)          match self.opt_name(id) {
      .                       Some(name) => name,
      .                       None => bug!("no name for {}", self.node_to_string(id)),
      .                   }
     24 ( 0.00%)      }
      .           
      .               /// Given a node ID, gets a list of attributes associated with the AST
      .               /// corresponding to the node-ID.
435,057 ( 0.11%)      pub fn attrs(&self, id: HirId) -> &'hir [ast::Attribute] {
 62,151 ( 0.02%)          self.tcx.hir_attrs(id.owner).get(id.local_id)
497,208 ( 0.13%)      }
      .           
      .               /// Gets the span of the definition of the specified HIR node.
      .               /// This is used by `tcx.get_span`
    645 ( 0.00%)      pub fn span(&self, hir_id: HirId) -> Span {
 10,147 ( 0.00%)          self.opt_span(hir_id)
      .                       .unwrap_or_else(|| bug!("hir::map::Map::span: id not in map: {:?}", hir_id))
    645 ( 0.00%)      }
      .           
 19,922 ( 0.01%)      pub fn opt_span(&self, hir_id: HirId) -> Option<Span> {
 19,922 ( 0.01%)          let span = match self.find(hir_id)? {
      .                       Node::Param(param) => param.span,
    550 ( 0.00%)              Node::Item(item) => match &item.kind {
      .                           ItemKind::Fn(sig, _, _) => sig.span,
    318 ( 0.00%)                  _ => item.span,
      .                       },
      .                       Node::ForeignItem(foreign_item) => foreign_item.span,
     18 ( 0.00%)              Node::TraitItem(trait_item) => match &trait_item.kind {
     18 ( 0.00%)                  TraitItemKind::Fn(sig, _) => sig.span,
      .                           _ => trait_item.span,
      .                       },
     88 ( 0.00%)              Node::ImplItem(impl_item) => match &impl_item.kind {
     88 ( 0.00%)                  ImplItemKind::Fn(sig, _) => sig.span,
      .                           _ => impl_item.span,
      .                       },
      .                       Node::Variant(variant) => variant.span,
     10 ( 0.00%)              Node::Field(field) => field.span,
    182 ( 0.00%)              Node::AnonConst(constant) => self.body(constant.body).value.span,
      .                       Node::Expr(expr) => expr.span,
      .                       Node::Stmt(stmt) => stmt.span,
      .                       Node::PathSegment(seg) => seg.ident.span,
      .                       Node::Ty(ty) => ty.span,
      .                       Node::TraitRef(tr) => tr.path.span,
      .                       Node::Binding(pat) => pat.span,
      .                       Node::Pat(pat) => pat.span,
      .                       Node::Arm(arm) => arm.span,
-- line 999 ----------------------------------------
-- line 1007 ----------------------------------------
      .                       Node::GenericParam(param) => param.span,
      .                       Node::Visibility(&Spanned {
      .                           node: VisibilityKind::Restricted { ref path, .. },
      .                           ..
      .                       }) => path.span,
      .                       Node::Infer(i) => i.span,
      .                       Node::Visibility(v) => bug!("unexpected Visibility {:?}", v),
      .                       Node::Local(local) => local.span,
      4 ( 0.00%)              Node::Crate(item) => item.inner,
      .                   };
      .                   Some(span)
 28,460 ( 0.01%)      }
      .           
      .               /// Like `hir.span()`, but includes the body of function items
      .               /// (instead of just the function header)
      .               pub fn span_with_body(&self, hir_id: HirId) -> Span {
      .                   match self.find(hir_id) {
      .                       Some(Node::TraitItem(item)) => item.span,
      .                       Some(Node::ImplItem(impl_item)) => impl_item.span,
      .                       Some(Node::Item(item)) => item.span,
      .                       Some(_) => self.span(hir_id),
      .                       _ => bug!("hir::map::Map::span_with_body: id not in map: {:?}", hir_id),
      .                   }
      .               }
      .           
     16 ( 0.00%)      pub fn span_if_local(&self, id: DefId) -> Option<Span> {
    290 ( 0.00%)          id.as_local().and_then(|id| self.opt_span(self.local_def_id_to_hir_id(id)))
     24 ( 0.00%)      }
      .           
      .               pub fn res_span(&self, res: Res) -> Option<Span> {
      .                   match res {
      .                       Res::Err => None,
      .                       Res::Local(id) => Some(self.span(id)),
      .                       res => self.span_if_local(res.opt_def_id()?),
      .                   }
      .               }
-- line 1042 ----------------------------------------
-- line 1062 ----------------------------------------
      .           }
      .           
      .           impl<'hir> intravisit::Map<'hir> for Map<'hir> {
      .               fn find(&self, hir_id: HirId) -> Option<Node<'hir>> {
      .                   self.find(hir_id)
      .               }
      .           
      .               fn body(&self, id: BodyId) -> &'hir Body<'hir> {
  1,328 ( 0.00%)          self.body(id)
      .               }
      .           
      .               fn item(&self, id: ItemId) -> &'hir Item<'hir> {
  1,483 ( 0.00%)          self.item(id)
      .               }
      .           
      .               fn trait_item(&self, id: TraitItemId) -> &'hir TraitItem<'hir> {
     42 ( 0.00%)          self.trait_item(id)
      .               }
      .           
      .               fn impl_item(&self, id: ImplItemId) -> &'hir ImplItem<'hir> {
    154 ( 0.00%)          self.impl_item(id)
      .               }
      .           
      .               fn foreign_item(&self, id: ForeignItemId) -> &'hir ForeignItem<'hir> {
      .                   self.foreign_item(id)
      .               }
      .           }
      .           
      7 ( 0.00%)  pub(super) fn crate_hash(tcx: TyCtxt<'_>, crate_num: CrateNum) -> Svh {
      .               debug_assert_eq!(crate_num, LOCAL_CRATE);
      .               let krate = tcx.hir_crate(());
      3 ( 0.00%)      let hir_body_hash = krate.hir_hash;
      .           
      .               let upstream_crates = upstream_crates(tcx);
      .           
      .               // We hash the final, remapped names of all local source files so we
      .               // don't have to include the path prefix remapping commandline args.
      .               // If we included the full mapping in the SVH, we could only have
      .               // reproducible builds by compiling from the same directory. So we just
      .               // hash the result of the mapping instead of the mapping itself.
      2 ( 0.00%)      let mut source_file_names: Vec<_> = tcx
      .                   .sess
      .                   .source_map()
      .                   .files()
      .                   .iter()
      .                   .filter(|source_file| source_file.cnum == LOCAL_CRATE)
     35 ( 0.00%)          .map(|source_file| source_file.name_hash)
      .                   .collect();
      .           
      .               source_file_names.sort_unstable();
      .           
      .               let mut hcx = tcx.create_stable_hashing_context();
      .               let mut stable_hasher = StableHasher::new();
      .               hir_body_hash.hash_stable(&mut hcx, &mut stable_hasher);
      .               upstream_crates.hash_stable(&mut hcx, &mut stable_hasher);
      .               source_file_names.hash_stable(&mut hcx, &mut stable_hasher);
      3 ( 0.00%)      if tcx.sess.opts.debugging_opts.incremental_relative_spans {
      .                   let definitions = &tcx.untracked_resolutions.definitions;
      .                   let mut owner_spans: Vec<_> = krate
      .                       .owners
      .                       .iter_enumerated()
      .                       .filter_map(|(def_id, info)| {
      .                           let _ = info.as_ref()?;
      .                           let def_path_hash = definitions.def_path_hash(def_id);
      .                           let span = definitions.def_span(def_id);
      .                           debug_assert_eq!(span.parent(), None);
      .                           Some((def_path_hash, span))
      .                       })
      .                       .collect();
      .                   owner_spans.sort_unstable_by_key(|bn| bn.0);
      .                   owner_spans.hash_stable(&mut hcx, &mut stable_hasher);
      .               }
      3 ( 0.00%)      tcx.sess.opts.dep_tracking_hash(true).hash_stable(&mut hcx, &mut stable_hasher);
      2 ( 0.00%)      tcx.sess.local_stable_crate_id().hash_stable(&mut hcx, &mut stable_hasher);
      .           
      .               let crate_hash: Fingerprint = stable_hasher.finish();
      1 ( 0.00%)      Svh::new(crate_hash.to_smaller_hash())
      9 ( 0.00%)  }
      .           
      .           fn upstream_crates(tcx: TyCtxt<'_>) -> Vec<(StableCrateId, Svh)> {
      .               let mut upstream_crates: Vec<_> = tcx
      .                   .crates(())
      .                   .iter()
      .                   .map(|&cnum| {
     15 ( 0.00%)              let stable_crate_id = tcx.resolutions(()).cstore.stable_crate_id(cnum);
      3 ( 0.00%)              let hash = tcx.crate_hash(cnum);
      .                       (stable_crate_id, hash)
      .                   })
      .                   .collect();
      .               upstream_crates.sort_unstable_by_key(|&(stable_crate_id, _)| stable_crate_id);
      .               upstream_crates
      .           }
      .           
      .           fn hir_id_to_string(map: &Map<'_>, id: HirId) -> String {
-- line 1155 ----------------------------------------
-- line 1238 ----------------------------------------
      .                   Some(Node::Lifetime(_)) => node_str("lifetime"),
      .                   Some(Node::GenericParam(ref param)) => format!("generic_param {:?}{}", param, id_str),
      .                   Some(Node::Visibility(ref vis)) => format!("visibility {:?}{}", vis, id_str),
      .                   Some(Node::Crate(..)) => String::from("root_crate"),
      .                   None => format!("unknown node{}", id_str),
      .               }
      .           }
      .           
    117 ( 0.00%)  pub(super) fn hir_module_items(tcx: TyCtxt<'_>, module_id: LocalDefId) -> ModuleItems {
     78 ( 0.00%)      let mut collector = ModuleCollector {
      .                   tcx,
      .                   submodules: Vec::default(),
      .                   items: Vec::default(),
      .                   trait_items: Vec::default(),
      .                   impl_items: Vec::default(),
      .                   foreign_items: Vec::default(),
      .               };
      .           
     65 ( 0.00%)      let (hir_mod, span, hir_id) = tcx.hir().get_module(module_id);
      .               collector.visit_mod(hir_mod, span, hir_id);
      .           
    208 ( 0.00%)      let ModuleCollector { submodules, items, trait_items, impl_items, foreign_items, .. } =
      .                   collector;
    143 ( 0.00%)      return ModuleItems {
     52 ( 0.00%)          submodules: submodules.into_boxed_slice(),
     52 ( 0.00%)          items: items.into_boxed_slice(),
     52 ( 0.00%)          trait_items: trait_items.into_boxed_slice(),
     52 ( 0.00%)          impl_items: impl_items.into_boxed_slice(),
     52 ( 0.00%)          foreign_items: foreign_items.into_boxed_slice(),
      .               };
      .           
      .               struct ModuleCollector<'tcx> {
      .                   tcx: TyCtxt<'tcx>,
      .                   submodules: Vec<LocalDefId>,
      .                   items: Vec<ItemId>,
      .                   trait_items: Vec<TraitItemId>,
      .                   impl_items: Vec<ImplItemId>,
      .                   foreign_items: Vec<ForeignItemId>,
      .               }
      .           
      .               impl<'hir> Visitor<'hir> for ModuleCollector<'hir> {
      .                   type NestedFilter = nested_filter::All;
      .           
      .                   fn nested_visit_map(&mut self) -> Self::Map {
    185 ( 0.00%)              self.tcx.hir()
      .                   }
      .           
    575 ( 0.00%)          fn visit_item(&mut self, item: &'hir Item<'hir>) {
    345 ( 0.00%)              self.items.push(item.item_id());
    230 ( 0.00%)              if let ItemKind::Mod(..) = item.kind {
      .                           // If this declares another module, do not recurse inside it.
     12 ( 0.00%)                  self.submodules.push(item.def_id);
      .                       } else {
    618 ( 0.00%)                  intravisit::walk_item(self, item)
      .                       }
     48 ( 0.00%)          }
      .           
      .                   fn visit_trait_item(&mut self, item: &'hir TraitItem<'hir>) {
      9 ( 0.00%)              self.trait_items.push(item.trait_item_id());
      9 ( 0.00%)              intravisit::walk_trait_item(self, item)
      .                   }
      .           
      .                   fn visit_impl_item(&mut self, item: &'hir ImplItem<'hir>) {
     33 ( 0.00%)              self.impl_items.push(item.impl_item_id());
     33 ( 0.00%)              intravisit::walk_impl_item(self, item)
      .                   }
      .           
      .                   fn visit_foreign_item(&mut self, item: &'hir ForeignItem<'hir>) {
      .                       self.foreign_items.push(item.foreign_item_id());
      .                       intravisit::walk_foreign_item(self, item)
      .                   }
      .               }
    104 ( 0.00%)  }

118,873 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/hir/map/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 108 ----------------------------------------
      .                   suppress_errors: bool,
      .               },
      .           }
      .           
      .           impl RegionckMode {
      .               /// Indicates that the MIR borrowck will repeat these region
      .               /// checks, so we should ignore errors if NLL is (unconditionally)
      .               /// enabled.
     69 ( 0.00%)      pub fn for_item_body(tcx: TyCtxt<'_>) -> Self {
      .                   // FIXME(Centril): Once we actually remove `::Migrate` also make
      .                   // this always `true` and then proceed to eliminate the dead code.
     69 ( 0.00%)          match tcx.borrowck_mode() {
      .                       // If we're on Migrate mode, report AST region errors
      .                       BorrowckMode::Migrate => RegionckMode::Erase { suppress_errors: false },
      .           
      .                       // If we're on MIR, don't report AST region errors as they should be reported by NLL
      .                       BorrowckMode::Mir => RegionckMode::Erase { suppress_errors: true },
      .                   }
    138 ( 0.00%)      }
      .           }
      .           
      .           /// This type contains all the things within `InferCtxt` that sit within a
      .           /// `RefCell` and are involved with taking/rolling back snapshots. Snapshot
      .           /// operations are hot enough that we want only one call to `borrow_mut` per
      .           /// call to `start_snapshot` and `rollback_to`.
      .           pub struct InferCtxtInner<'tcx> {
      .               /// Cache for projections. This cache is snapshotted along with the infcx.
-- line 134 ----------------------------------------
-- line 202 ----------------------------------------
      .               /// type instantiations (`ty::Infer`) to the actual opaque
      .               /// type (`ty::Opaque`). Used during fallback to map unconstrained
      .               /// opaque type inference variables to their corresponding
      .               /// opaque type.
      .               pub opaque_types_vars: FxHashMap<Ty<'tcx>, Ty<'tcx>>,
      .           }
      .           
      .           impl<'tcx> InferCtxtInner<'tcx> {
 10,370 ( 0.00%)      fn new() -> InferCtxtInner<'tcx> {
 70,516 ( 0.02%)          InferCtxtInner {
      .                       projection_cache: Default::default(),
      .                       type_variable_storage: type_variable::TypeVariableStorage::new(),
      .                       undo_log: InferCtxtUndoLogs::default(),
      .                       const_unification_storage: ut::UnificationTableStorage::new(),
      .                       int_unification_storage: ut::UnificationTableStorage::new(),
      .                       float_unification_storage: ut::UnificationTableStorage::new(),
  6,222 ( 0.00%)              region_constraint_storage: Some(RegionConstraintStorage::new()),
      .                       region_obligations: vec![],
      .                       opaque_types: Default::default(),
      .                       opaque_types_vars: Default::default(),
      .                   }
 12,444 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn region_obligations(&self) -> &[(hir::HirId, RegionObligation<'tcx>)] {
      .                   &self.region_obligations
      .               }
      .           
      .               #[inline]
      .               pub fn projection_cache(&mut self) -> traits::ProjectionCache<'_, 'tcx> {
  1,514 ( 0.00%)          self.projection_cache.with_log(&mut self.undo_log)
      .               }
      .           
      .               #[inline]
      .               fn type_variables(&mut self) -> type_variable::TypeVariableTable<'_, 'tcx> {
102,292 ( 0.03%)          self.type_variable_storage.with_log(&mut self.undo_log)
      .               }
      .           
      .               #[inline]
      .               fn int_unification_table(
      .                   &mut self,
      .               ) -> ut::UnificationTable<
      .                   ut::InPlace<
      .                       ty::IntVid,
      .                       &mut ut::UnificationStorage<ty::IntVid>,
      .                       &mut InferCtxtUndoLogs<'tcx>,
      .                   >,
      .               > {
 10,818 ( 0.00%)          self.int_unification_storage.with_log(&mut self.undo_log)
      .               }
      .           
      .               #[inline]
      .               fn float_unification_table(
      .                   &mut self,
      .               ) -> ut::UnificationTable<
      .                   ut::InPlace<
      .                       ty::FloatVid,
-- line 258 ----------------------------------------
-- line 268 ----------------------------------------
      .                   &mut self,
      .               ) -> ut::UnificationTable<
      .                   ut::InPlace<
      .                       ty::ConstVid<'tcx>,
      .                       &mut ut::UnificationStorage<ty::ConstVid<'tcx>>,
      .                       &mut InferCtxtUndoLogs<'tcx>,
      .                   >,
      .               > {
    459 ( 0.00%)          self.const_unification_storage.with_log(&mut self.undo_log)
      .               }
      .           
      .               #[inline]
      .               pub fn unwrap_region_constraints(&mut self) -> RegionConstraintCollector<'_, 'tcx> {
  4,314 ( 0.00%)          self.region_constraint_storage
      .                       .as_mut()
      .                       .expect("region constraints already solved")
  4,412 ( 0.00%)              .with_log(&mut self.undo_log)
      .               }
      .           }
      .           
      .           pub struct InferCtxt<'a, 'tcx> {
      .               pub tcx: TyCtxt<'tcx>,
      .           
      .               /// The `DefId` of the item in whose context we are performing inference or typeck.
      .               /// It is used to check whether an opaque type use is a defining use.
-- line 292 ----------------------------------------
-- line 361 ----------------------------------------
      .               /// item we are type-checking, and just consider those names as
      .               /// part of the root universe. So this would only get incremented
      .               /// when we enter into a higher-ranked (`for<..>`) type or trait
      .               /// bound.
      .               universe: Cell<ty::UniverseIndex>,
      .           }
      .           
      .           /// See the `error_reporting` module for more details.
  3,584 ( 0.00%)  #[derive(Clone, Copy, Debug, PartialEq, Eq, TypeFoldable)]
      .           pub enum ValuePairs<'tcx> {
      .               Types(ExpectedFound<Ty<'tcx>>),
      .               Regions(ExpectedFound<ty::Region<'tcx>>),
      .               Consts(ExpectedFound<&'tcx ty::Const<'tcx>>),
      .               TraitRefs(ExpectedFound<ty::TraitRef<'tcx>>),
      .               PolyTraitRefs(ExpectedFound<ty::PolyTraitRef<'tcx>>),
      .           }
      .           
-- line 377 ----------------------------------------
-- line 383 ----------------------------------------
      .           pub struct TypeTrace<'tcx> {
      .               cause: ObligationCause<'tcx>,
      .               values: ValuePairs<'tcx>,
      .           }
      .           
      .           /// The origin of a `r1 <= r2` constraint.
      .           ///
      .           /// See `error_reporting` module for more details
  3,135 ( 0.00%)  #[derive(Clone, Debug)]
      .           pub enum SubregionOrigin<'tcx> {
      .               /// Arose from a subtyping relation
    209 ( 0.00%)      Subtype(Box<TypeTrace<'tcx>>),
      .           
      .               /// When casting `&'a T` to an `&'b Trait` object,
      .               /// relating `'a` to `'b`
      .               RelateObjectBound(Span),
      .           
      .               /// Some type parameter was instantiated with the given type,
      .               /// and that type must outlive some region.
      .               RelateParamBound(Span, Ty<'tcx>, Option<Span>),
-- line 402 ----------------------------------------
-- line 554 ----------------------------------------
      .               defining_use_anchor: Option<LocalDefId>,
      .           }
      .           
      .           pub trait TyCtxtInferExt<'tcx> {
      .               fn infer_ctxt(self) -> InferCtxtBuilder<'tcx>;
      .           }
      .           
      .           impl<'tcx> TyCtxtInferExt<'tcx> for TyCtxt<'tcx> {
  2,074 ( 0.00%)      fn infer_ctxt(self) -> InferCtxtBuilder<'tcx> {
  6,222 ( 0.00%)          InferCtxtBuilder { tcx: self, defining_use_anchor: None, fresh_typeck_results: None }
  2,074 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> InferCtxtBuilder<'tcx> {
      .               /// Used only by `rustc_typeck` during body type-checking/inference,
      .               /// will initialize `in_progress_typeck_results` with fresh `TypeckResults`.
      .               /// Will also change the scope for opaque type defining use checks to the given owner.
  1,341 ( 0.00%)      pub fn with_fresh_in_progress_typeck_results(mut self, table_owner: LocalDefId) -> Self {
  1,639 ( 0.00%)          self.fresh_typeck_results = Some(RefCell::new(ty::TypeckResults::new(table_owner)));
    745 ( 0.00%)          self.with_opaque_type_inference(table_owner)
  1,043 ( 0.00%)      }
      .           
      .               /// Whenever the `InferCtxt` should be able to handle defining uses of opaque types,
      .               /// you need to call this function. Otherwise the opaque type will be treated opaquely.
      .               ///
      .               /// It is only meant to be called in two places, for typeck
      .               /// (via `with_fresh_in_progress_typeck_results`) and for the inference context used
      .               /// in mir borrowck.
    138 ( 0.00%)      pub fn with_opaque_type_inference(mut self, defining_use_anchor: LocalDefId) -> Self {
     69 ( 0.00%)          self.defining_use_anchor = Some(defining_use_anchor);
    436 ( 0.00%)          self
    207 ( 0.00%)      }
      .           
      .               /// Given a canonical value `C` as a starting point, create an
      .               /// inference context that contains each of the bound values
      .               /// within instantiated as a fresh variable. The `f` closure is
      .               /// invoked with the new infcx, along with the instantiated value
      .               /// `V` and a substitution `S`. This substitution `S` maps from
      .               /// the bound values in `C` to their instantiated values in `V`
      .               /// (in other words, `S(C) = V`).
  2,290 ( 0.00%)      pub fn enter_with_canonical<T, R>(
      .                   &mut self,
      .                   span: Span,
      .                   canonical: &Canonical<'tcx, T>,
      .                   f: impl for<'a> FnOnce(InferCtxt<'a, 'tcx>, T, CanonicalVarValues<'tcx>) -> R,
      .               ) -> R
      .               where
      .                   T: TypeFoldable<'tcx>,
      .               {
      .                   self.enter(|infcx| {
  2,600 ( 0.00%)              let (value, subst) =
    134 ( 0.00%)                  infcx.instantiate_canonical_with_fresh_inference_vars(span, canonical);
  3,915 ( 0.00%)              f(infcx, value, subst)
      .                   })
  2,509 ( 0.00%)      }
      .           
 13,859 ( 0.00%)      pub fn enter<R>(&mut self, f: impl for<'a> FnOnce(InferCtxt<'a, 'tcx>) -> R) -> R {
  5,499 ( 0.00%)          let InferCtxtBuilder { tcx, defining_use_anchor, ref fresh_typeck_results } = *self;
      .                   let in_progress_typeck_results = fresh_typeck_results.as_ref();
 92,743 ( 0.02%)          f(InferCtxt {
      .                       tcx,
      .                       defining_use_anchor,
      .                       in_progress_typeck_results,
  2,074 ( 0.00%)              inner: RefCell::new(InferCtxtInner::new()),
      .                       lexical_region_resolutions: RefCell::new(None),
      .                       selection_cache: Default::default(),
      .                       evaluation_cache: Default::default(),
      .                       reported_trait_errors: Default::default(),
      .                       reported_closure_mismatch: Default::default(),
      .                       tainted_by_errors_flag: Cell::new(false),
  2,074 ( 0.00%)              err_count_on_creation: tcx.sess.err_count(),
      .                       in_snapshot: Cell::new(false),
      .                       skip_leak_check: Cell::new(false),
      .                       universe: Cell::new(ty::UniverseIndex::ROOT),
      .                   })
 15,160 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx, T> InferOk<'tcx, T> {
      .               pub fn unit(self) -> InferOk<'tcx, ()> {
      .                   InferOk { value: (), obligations: self.obligations }
      .               }
      .           
      .               /// Extracts `value`, registering any obligations into `fulfill_cx`.
      .               pub fn into_value_registering_obligations(
      .                   self,
      .                   infcx: &InferCtxt<'_, 'tcx>,
      .                   fulfill_cx: &mut dyn TraitEngine<'tcx>,
      .               ) -> T {
     52 ( 0.00%)          let InferOk { value, obligations } = self;
    212 ( 0.00%)          for obligation in obligations {
      .                       fulfill_cx.register_predicate_obligation(infcx, obligation);
      .                   }
      .                   value
      .               }
      .           }
      .           
      .           impl<'tcx> InferOk<'tcx, ()> {
    535 ( 0.00%)      pub fn into_obligations(self) -> PredicateObligations<'tcx> {
  2,140 ( 0.00%)          self.obligations
    535 ( 0.00%)      }
      .           }
      .           
      .           #[must_use = "once you start a snapshot, you should always consume it"]
      .           pub struct CombinedSnapshot<'a, 'tcx> {
      .               undo_snapshot: Snapshot<'tcx>,
      .               region_constraints_snapshot: RegionSnapshot,
      .               universe: ty::UniverseIndex,
      .               was_in_snapshot: bool,
-- line 662 ----------------------------------------
-- line 674 ----------------------------------------
      .                   let canonical = self.canonicalize_query((a, b), &mut OriginalQueryValues::default());
      .                   debug!("canonical consts: {:?}", &canonical.value);
      .           
      .                   self.tcx.try_unify_abstract_consts(canonical.value)
      .               }
      .           
      .               pub fn is_in_snapshot(&self) -> bool {
      .                   self.in_snapshot.get()
  4,477 ( 0.00%)      }
      .           
 34,024 ( 0.01%)      pub fn freshen<T: TypeFoldable<'tcx>>(&self, t: T) -> T {
 38,277 ( 0.01%)          t.fold_with(&mut self.freshener())
 38,277 ( 0.01%)      }
      .           
      .               /// Returns the origin of the type variable identified by `vid`, or `None`
      .               /// if this is not a type variable.
      .               ///
      .               /// No attempt is made to resolve `ty`.
    214 ( 0.00%)      pub fn type_var_origin(&'a self, ty: Ty<'tcx>) -> Option<TypeVariableOrigin> {
    428 ( 0.00%)          match *ty.kind() {
     91 ( 0.00%)              ty::Infer(ty::TyVar(vid)) => {
    364 ( 0.00%)                  Some(*self.inner.borrow_mut().type_variables().var_origin(vid))
      .                       }
     16 ( 0.00%)              _ => None,
      .                   }
    428 ( 0.00%)      }
      .           
  4,253 ( 0.00%)      pub fn freshener<'b>(&'b self) -> TypeFreshener<'b, 'tcx> {
      .                   freshen::TypeFreshener::new(self, false)
  4,253 ( 0.00%)      }
      .           
      .               /// Like `freshener`, but does not replace `'static` regions.
 14,133 ( 0.00%)      pub fn freshener_keep_static<'b>(&'b self) -> TypeFreshener<'b, 'tcx> {
      .                   freshen::TypeFreshener::new(self, true)
 14,133 ( 0.00%)      }
      .           
    340 ( 0.00%)      pub fn unsolved_variables(&self) -> Vec<Ty<'tcx>> {
    170 ( 0.00%)          let mut inner = self.inner.borrow_mut();
    170 ( 0.00%)          let mut vars: Vec<Ty<'_>> = inner
      .                       .type_variables()
      .                       .unsolved_variables()
      .                       .into_iter()
    182 ( 0.00%)              .map(|t| self.tcx.mk_ty_var(t))
      .                       .collect();
      .                   vars.extend(
      .                       (0..inner.int_unification_table().len())
      .                           .map(|i| ty::IntVid { index: i as u32 })
    720 ( 0.00%)                  .filter(|&vid| inner.int_unification_table().probe_value(vid).is_none())
     16 ( 0.00%)                  .map(|v| self.tcx.mk_int_var(v)),
      .                   );
      .                   vars.extend(
      .                       (0..inner.float_unification_table().len())
      .                           .map(|i| ty::FloatVid { index: i as u32 })
      .                           .filter(|&vid| inner.float_unification_table().probe_value(vid).is_none())
      .                           .map(|v| self.tcx.mk_float_var(v)),
      .                   );
      .                   vars
    595 ( 0.00%)      }
      .           
 10,944 ( 0.00%)      fn combine_fields(
      .                   &'a self,
      .                   trace: TypeTrace<'tcx>,
      .                   param_env: ty::ParamEnv<'tcx>,
      .               ) -> CombineFields<'a, 'tcx> {
 43,876 ( 0.01%)          CombineFields {
      .                       infcx: self,
109,690 ( 0.03%)              trace,
      .                       cause: None,
      .                       param_env,
      .                       obligations: PredicateObligations::new(),
      .                   }
 10,944 ( 0.00%)      }
      .           
      .               /// Clear the "currently in a snapshot" flag, invoke the closure,
      .               /// then restore the flag to its original value. This flag is a
      .               /// debugging measure designed to detect cases where we start a
      .               /// snapshot, create type variables, and register obligations
      .               /// which may involve those type variables in the fulfillment cx,
      .               /// potentially leaving "dangling type variables" behind.
      .               /// In such cases, an assertion will fail when attempting to
-- line 753 ----------------------------------------
-- line 760 ----------------------------------------
      .               /// before we return, this is not a problem, as there won't be any
      .               /// escaping obligations in the main cx. In those cases, you can
      .               /// use this function.
      .               pub fn save_and_restore_in_snapshot_flag<F, R>(&self, func: F) -> R
      .               where
      .                   F: FnOnce(&Self) -> R,
      .               {
      .                   let flag = self.in_snapshot.replace(false);
    882 ( 0.00%)          let result = func(self);
      .                   self.in_snapshot.set(flag);
      .                   result
      .               }
      .           
 57,324 ( 0.01%)      fn start_snapshot(&self) -> CombinedSnapshot<'a, 'tcx> {
      .                   debug!("start_snapshot()");
      .           
      .                   let in_snapshot = self.in_snapshot.replace(true);
      .           
      .                   let mut inner = self.inner.borrow_mut();
      .           
171,972 ( 0.04%)          CombinedSnapshot {
      .                       undo_snapshot: inner.undo_log.start_snapshot(),
      .                       region_constraints_snapshot: inner.unwrap_region_constraints().start_snapshot(),
      .                       universe: self.universe(),
      .                       was_in_snapshot: in_snapshot,
      .                       // Borrow typeck results "in progress" (i.e., during typeck)
      .                       // to ban writes from within a snapshot to them.
 28,662 ( 0.01%)              _in_progress_typeck_results: self
      .                           .in_progress_typeck_results
      .                           .map(|typeck_results| typeck_results.borrow()),
      .                   }
114,648 ( 0.03%)      }
      .           
 95,194 ( 0.02%)      #[instrument(skip(self, snapshot), level = "debug")]
      .               fn rollback_to(&self, cause: &str, snapshot: CombinedSnapshot<'a, 'tcx>) {
      .                   let CombinedSnapshot {
  8,654 ( 0.00%)              undo_snapshot,
  8,654 ( 0.00%)              region_constraints_snapshot,
  8,654 ( 0.00%)              universe,
  8,654 ( 0.00%)              was_in_snapshot,
 17,308 ( 0.00%)              _in_progress_typeck_results,
      .                   } = snapshot;
      .           
      .                   self.in_snapshot.set(was_in_snapshot);
      .                   self.universe.set(universe);
      .           
      .                   let mut inner = self.inner.borrow_mut();
  8,654 ( 0.00%)          inner.rollback_to(undo_snapshot);
      .                   inner.unwrap_region_constraints().rollback_to(region_constraints_snapshot);
      .               }
      .           
300,120 ( 0.08%)      #[instrument(skip(self, snapshot), level = "debug")]
      .               fn commit_from(&self, snapshot: CombinedSnapshot<'a, 'tcx>) {
      .                   let CombinedSnapshot {
 20,008 ( 0.01%)              undo_snapshot,
      .                       region_constraints_snapshot: _,
      .                       universe: _,
 20,008 ( 0.01%)              was_in_snapshot,
 40,016 ( 0.01%)              _in_progress_typeck_results,
      .                   } = snapshot;
      .           
      .                   self.in_snapshot.set(was_in_snapshot);
      .           
      .                   self.inner.borrow_mut().commit(undo_snapshot);
      .               }
      .           
      .               /// Executes `f` and commit the bindings.
  8,128 ( 0.00%)      #[instrument(skip(self, f), level = "debug")]
  9,944 ( 0.00%)      pub fn commit_unconditionally<R, F>(&self, f: F) -> R
      .               where
      .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
      .               {
    904 ( 0.00%)          let snapshot = self.start_snapshot();
  2,764 ( 0.00%)          let r = f(&snapshot);
  6,328 ( 0.00%)          self.commit_from(snapshot);
  5,404 ( 0.00%)          r
      .               }
      .           
      .               /// Execute `f` and commit the bindings if closure `f` returns `Ok(_)`.
127,140 ( 0.03%)      #[instrument(skip(self, f), level = "debug")]
157,713 ( 0.04%)      pub fn commit_if_ok<T, E, F>(&self, f: F) -> Result<T, E>
      .               where
      .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> Result<T, E>,
      .               {
 28,351 ( 0.01%)          let snapshot = self.start_snapshot();
 72,696 ( 0.02%)          let r = f(&snapshot);
      .                   debug!("commit_if_ok() -- r.is_ok() = {}", r.is_ok());
 35,521 ( 0.01%)          match r {
      .                       Ok(_) => {
134,272 ( 0.03%)                  self.commit_from(snapshot);
      .                       }
      .                       Err(_) => {
 54,689 ( 0.01%)                  self.rollback_to("commit_if_ok -- error", snapshot);
      .                       }
      .                   }
175,502 ( 0.05%)          r
      .               }
      .           
      .               /// Execute `f` then unroll any bindings it creates.
 21,322 ( 0.01%)      #[instrument(skip(self, f), level = "debug")]
 25,815 ( 0.01%)      pub fn probe<R, F>(&self, f: F) -> R
      .               where
      .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
      .               {
  6,136 ( 0.00%)          let snapshot = self.start_snapshot();
 11,314 ( 0.00%)          let r = f(&snapshot);
 28,422 ( 0.01%)          self.rollback_to("probe", snapshot);
  3,010 ( 0.00%)          r
      .               }
      .           
      .               /// If `should_skip` is true, then execute `f` then unroll any bindings it creates.
      .               #[instrument(skip(self, f), level = "debug")]
      .               pub fn probe_maybe_skip_leak_check<R, F>(&self, should_skip: bool, f: F) -> R
      .               where
      .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
      .               {
-- line 875 ----------------------------------------
-- line 884 ----------------------------------------
      .                   r
      .               }
      .           
      .               /// Scan the constraints produced since `snapshot` began and returns:
      .               ///
      .               /// - `None` -- if none of them involve "region outlives" constraints
      .               /// - `Some(true)` -- if there are `'a: 'b` constraints where `'a` or `'b` is a placeholder
      .               /// - `Some(false)` -- if there are `'a: 'b` constraints but none involve placeholders
  1,428 ( 0.00%)      pub fn region_constraints_added_in_snapshot(
      .                   &self,
      .                   snapshot: &CombinedSnapshot<'a, 'tcx>,
      .               ) -> Option<bool> {
  2,856 ( 0.00%)          self.inner
      .                       .borrow_mut()
      .                       .unwrap_region_constraints()
      .                       .region_constraints_added_in_snapshot(&snapshot.undo_snapshot)
  2,142 ( 0.00%)      }
      .           
      .               pub fn add_given(&self, sub: ty::Region<'tcx>, sup: ty::RegionVid) {
      .                   self.inner.borrow_mut().unwrap_region_constraints().add_given(sub, sup);
      .               }
      .           
    240 ( 0.00%)      pub fn can_sub<T>(&self, param_env: ty::ParamEnv<'tcx>, a: T, b: T) -> UnitResult<'tcx>
      .               where
      .                   T: at::ToTrace<'tcx>,
      .               {
      .                   let origin = &ObligationCause::dummy();
      .                   self.probe(|_| {
      .                       self.at(origin, param_env).sub(a, b).map(|InferOk { obligations: _, .. }| {
      .                           // Ignore obligations, since we are unrolling
      .                           // everything anyway.
      .                       })
      .                   })
    180 ( 0.00%)      }
      .           
    180 ( 0.00%)      pub fn can_eq<T>(&self, param_env: ty::ParamEnv<'tcx>, a: T, b: T) -> UnitResult<'tcx>
      .               where
      .                   T: at::ToTrace<'tcx>,
      .               {
      .                   let origin = &ObligationCause::dummy();
      .                   self.probe(|_| {
      .                       self.at(origin, param_env).eq(a, b).map(|InferOk { obligations: _, .. }| {
      .                           // Ignore obligations, since we are unrolling
      .                           // everything anyway.
      .                       })
      .                   })
    135 ( 0.00%)      }
      .           
    240 ( 0.00%)      #[instrument(skip(self), level = "debug")]
      .               pub fn sub_regions(
      .                   &self,
      .                   origin: SubregionOrigin<'tcx>,
      .                   a: ty::Region<'tcx>,
      .                   b: ty::Region<'tcx>,
      .               ) {
    216 ( 0.00%)          self.inner.borrow_mut().unwrap_region_constraints().make_subregion(origin, a, b);
      .               }
      .           
      .               /// Require that the region `r` be equal to one of the regions in
      .               /// the set `regions`.
      .               #[instrument(skip(self), level = "debug")]
      .               pub fn member_constraint(
      .                   &self,
      .                   opaque_type_def_id: DefId,
-- line 947 ----------------------------------------
-- line 969 ----------------------------------------
      .               /// to `subtype_predicate` -- that is, "coercing" `a` to `b` winds up
      .               /// actually requiring `a <: b`. This is of course a valid coercion,
      .               /// but it's not as flexible as `FnCtxt::coerce` would be.
      .               ///
      .               /// (We may refactor this in the future, but there are a number of
      .               /// practical obstacles. Among other things, `FnCtxt::coerce` presently
      .               /// records adjustments that are required on the HIR in order to perform
      .               /// the coercion, and we don't currently have a way to manage that.)
     75 ( 0.00%)      pub fn coerce_predicate(
      .                   &self,
      .                   cause: &ObligationCause<'tcx>,
      .                   param_env: ty::ParamEnv<'tcx>,
      .                   predicate: ty::PolyCoercePredicate<'tcx>,
      .               ) -> Option<InferResult<'tcx, ()>> {
     50 ( 0.00%)          let subtype_predicate = predicate.map_bound(|p| ty::SubtypePredicate {
      .                       a_is_expected: false, // when coercing from `a` to `b`, `b` is expected
      .                       a: p.a,
      .                       b: p.b,
      .                   });
    125 ( 0.00%)          self.subtype_predicate(cause, param_env, subtype_predicate)
    100 ( 0.00%)      }
      .           
    468 ( 0.00%)      pub fn subtype_predicate(
      .                   &self,
      .                   cause: &ObligationCause<'tcx>,
      .                   param_env: ty::ParamEnv<'tcx>,
      .                   predicate: ty::PolySubtypePredicate<'tcx>,
      .               ) -> Option<InferResult<'tcx, ()>> {
      .                   // Check for two unresolved inference variables, in which case we can
      .                   // make no progress. This is partly a micro-optimization, but it's
      .                   // also an opportunity to "sub-unify" the variables. This isn't
-- line 999 ----------------------------------------
-- line 1002 ----------------------------------------
      .                   // earlier that they are sub-unified).
      .                   //
      .                   // Note that we can just skip the binders here because
      .                   // type variables can't (at present, at
      .                   // least) capture any of the things bound by this binder.
      .                   //
      .                   // Note that this sub here is not just for diagnostics - it has semantic
      .                   // effects as well.
     39 ( 0.00%)          let r_a = self.shallow_resolve(predicate.skip_binder().a);
     39 ( 0.00%)          let r_b = self.shallow_resolve(predicate.skip_binder().b);
    212 ( 0.00%)          match (r_a.kind(), r_b.kind()) {
     28 ( 0.00%)              (&ty::Infer(ty::TyVar(a_vid)), &ty::Infer(ty::TyVar(b_vid))) => {
      .                           self.inner.borrow_mut().type_variables().sub(a_vid, b_vid);
     28 ( 0.00%)                  return None;
      .                       }
      .                       _ => {}
      .                   }
      .           
      .                   Some(self.commit_if_ok(|_snapshot| {
     25 ( 0.00%)              let ty::SubtypePredicate { a_is_expected, a, b } =
      .                           self.replace_bound_vars_with_placeholders(predicate);
      .           
     50 ( 0.00%)              let ok = self.at(cause, param_env).sub_exp(a_is_expected, a, b)?;
      .           
      .                       Ok(ok.unit())
      .                   }))
    351 ( 0.00%)      }
      .           
     60 ( 0.00%)      pub fn region_outlives_predicate(
      .                   &self,
      .                   cause: &traits::ObligationCause<'tcx>,
      .                   predicate: ty::PolyRegionOutlivesPredicate<'tcx>,
      .               ) -> UnitResult<'tcx> {
      .                   self.commit_if_ok(|_snapshot| {
      .                       let ty::OutlivesPredicate(r_a, r_b) =
      .                           self.replace_bound_vars_with_placeholders(predicate);
      .                       let origin = SubregionOrigin::from_obligation_cause(cause, || {
      .                           RelateRegionParamBound(cause.span)
      .                       });
     50 ( 0.00%)              self.sub_regions(origin, r_b, r_a); // `b : a` ==> `a <= b`
      .                       Ok(())
      .                   })
     40 ( 0.00%)      }
      .           
      .               /// Number of type variables created so far.
     16 ( 0.00%)      pub fn num_ty_vars(&self) -> usize {
      .                   self.inner.borrow_mut().type_variables().num_vars()
     32 ( 0.00%)      }
      .           
  8,298 ( 0.00%)      pub fn next_ty_var_id(&self, origin: TypeVariableOrigin) -> TyVid {
 41,490 ( 0.01%)          self.inner.borrow_mut().type_variables().new_var(self.universe(), origin)
 12,447 ( 0.00%)      }
      .           
  7,708 ( 0.00%)      pub fn next_ty_var(&self, origin: TypeVariableOrigin) -> Ty<'tcx> {
 28,748 ( 0.01%)          self.tcx.mk_ty_var(self.next_ty_var_id(origin))
 11,562 ( 0.00%)      }
      .           
    132 ( 0.00%)      pub fn next_ty_var_in_universe(
      .                   &self,
      .                   origin: TypeVariableOrigin,
      .                   universe: ty::UniverseIndex,
      .               ) -> Ty<'tcx> {
    726 ( 0.00%)          let vid = self.inner.borrow_mut().type_variables().new_var(universe, origin);
     66 ( 0.00%)          self.tcx.mk_ty_var(vid)
    198 ( 0.00%)      }
      .           
      .               pub fn next_const_var(
      .                   &self,
      .                   ty: Ty<'tcx>,
      .                   origin: ConstVariableOrigin,
      .               ) -> &'tcx ty::Const<'tcx> {
      .                   self.tcx.mk_const_var(self.next_const_var_id(origin), ty)
      .               }
-- line 1074 ----------------------------------------
-- line 1090 ----------------------------------------
      .               pub fn next_const_var_id(&self, origin: ConstVariableOrigin) -> ConstVid<'tcx> {
      .                   self.inner.borrow_mut().const_unification_table().new_key(ConstVarValue {
      .                       origin,
      .                       val: ConstVariableValue::Unknown { universe: self.universe() },
      .                   })
      .               }
      .           
      .               fn next_int_var_id(&self) -> IntVid {
    955 ( 0.00%)          self.inner.borrow_mut().int_unification_table().new_key(None)
      .               }
      .           
    573 ( 0.00%)      pub fn next_int_var(&self) -> Ty<'tcx> {
      .                   self.tcx.mk_int_var(self.next_int_var_id())
    764 ( 0.00%)      }
      .           
      .               fn next_float_var_id(&self) -> FloatVid {
      .                   self.inner.borrow_mut().float_unification_table().new_key(None)
      .               }
      .           
      .               pub fn next_float_var(&self) -> Ty<'tcx> {
      .                   self.tcx.mk_float_var(self.next_float_var_id())
      .               }
      .           
      .               /// Creates a fresh region variable with the next available index.
      .               /// The variable will be created in the maximum universe created
      .               /// thus far, allowing it to name any region created thus far.
    501 ( 0.00%)      pub fn next_region_var(&self, origin: RegionVariableOrigin) -> ty::Region<'tcx> {
 11,603 ( 0.00%)          self.next_region_var_in_universe(origin, self.universe())
  1,002 ( 0.00%)      }
      .           
      .               /// Creates a fresh region variable with the next available index
      .               /// in the given universe; typically, you can use
      .               /// `next_region_var` and just use the maximal universe.
  4,258 ( 0.00%)      pub fn next_region_var_in_universe(
      .                   &self,
      .                   origin: RegionVariableOrigin,
      .                   universe: ty::UniverseIndex,
      .               ) -> ty::Region<'tcx> {
      .                   let region_var =
 27,677 ( 0.01%)              self.inner.borrow_mut().unwrap_region_constraints().new_region_var(universe, origin);
 10,645 ( 0.00%)          self.tcx.mk_region(ty::ReVar(region_var))
  6,387 ( 0.00%)      }
      .           
      .               /// Return the universe that the region `r` was created in.  For
      .               /// most regions (e.g., `'static`, named regions from the user,
      .               /// etc) this is the root universe U0. For inference variables or
      .               /// placeholders, however, it will return the universe which which
      .               /// they are associated.
    480 ( 0.00%)      pub fn universe_of_region(&self, r: ty::Region<'tcx>) -> ty::UniverseIndex {
      .                   self.inner.borrow_mut().unwrap_region_constraints().universe(r)
    720 ( 0.00%)      }
      .           
      .               /// Number of region variables created so far.
    552 ( 0.00%)      pub fn num_region_vars(&self) -> usize {
      .                   self.inner.borrow_mut().unwrap_region_constraints().num_region_vars()
    828 ( 0.00%)      }
      .           
      .               /// Just a convenient wrapper of `next_region_var` for using during NLL.
    461 ( 0.00%)      pub fn next_nll_region_var(&self, origin: NllRegionVariableOrigin) -> ty::Region<'tcx> {
      .                   self.next_region_var(RegionVariableOrigin::Nll(origin))
    922 ( 0.00%)      }
      .           
      .               /// Just a convenient wrapper of `next_region_var` for using during NLL.
      .               pub fn next_nll_region_var_in_universe(
      .                   &self,
      .                   origin: NllRegionVariableOrigin,
      .                   universe: ty::UniverseIndex,
      .               ) -> ty::Region<'tcx> {
      .                   self.next_region_var_in_universe(RegionVariableOrigin::Nll(origin), universe)
      .               }
      .           
 23,592 ( 0.01%)      pub fn var_for_def(&self, span: Span, param: &ty::GenericParamDef) -> GenericArg<'tcx> {
 12,613 ( 0.00%)          match param.kind {
      .                       GenericParamDefKind::Lifetime => {
      .                           // Create a region inference variable for the given
      .                           // region parameter definition.
  1,066 ( 0.00%)                  self.next_region_var(EarlyBoundRegion(span, param.name)).into()
      .                       }
      .                       GenericParamDefKind::Type { .. } => {
      .                           // Create a type inference variable for the given
      .                           // type parameter definition. The substitutions are
      .                           // for actual parameters that may be referred to by
      .                           // the default of this type parameter, if it exists.
      .                           // e.g., `struct Foo<A, B, C = (A, B)>(...);` when
      .                           // used in a path such as `Foo::<T, U>::new()` will
      .                           // use an inference variable for `C` with `[T, U]`
      .                           // as the substitutions for the default, `(T, U)`.
  7,312 ( 0.00%)                  let ty_var_id = self.inner.borrow_mut().type_variables().new_var(
      .                               self.universe(),
  9,140 ( 0.00%)                      TypeVariableOrigin {
      .                                   kind: TypeVariableOriginKind::TypeParameterDefinition(
  1,828 ( 0.00%)                              param.name,
  1,828 ( 0.00%)                              Some(param.def_id),
      .                                   ),
      .                                   span,
      .                               },
      .                           );
      .           
  1,828 ( 0.00%)                  self.tcx.mk_ty_var(ty_var_id).into()
      .                       }
      .                       GenericParamDefKind::Const { .. } => {
      .                           let origin = ConstVariableOrigin {
      .                               kind: ConstVariableOriginKind::ConstParameterDefinition(
      .                                   param.name,
      .                                   param.def_id,
      .                               ),
      .                               span,
      .                           };
      .                           let const_var_id =
    605 ( 0.00%)                      self.inner.borrow_mut().const_unification_table().new_key(ConstVarValue {
      .                                   origin,
      .                                   val: ConstVariableValue::Unknown { universe: self.universe() },
      .                               });
     55 ( 0.00%)                  self.tcx.mk_const_var(const_var_id, self.tcx.type_of(param.def_id)).into()
      .                       }
      .                   }
    440 ( 0.00%)      }
      .           
      .               /// Given a set of generics defined on a type or impl, returns a substitution mapping each
      .               /// type/region parameter to a fresh inference variable.
  8,691 ( 0.00%)      pub fn fresh_substs_for_item(&self, span: Span, def_id: DefId) -> SubstsRef<'tcx> {
 31,942 ( 0.01%)          InternalSubsts::for_item(self.tcx, def_id, |param, _| self.var_for_def(span, param))
  5,794 ( 0.00%)      }
      .           
      .               /// Returns `true` if errors have been reported since this infcx was
      .               /// created. This is sometimes used as a heuristic to skip
      .               /// reporting errors that often occur as a result of earlier
      .               /// errors, but where it's hard to be 100% sure (e.g., unresolved
      .               /// inference variables, regionck errors).
    352 ( 0.00%)      pub fn is_tainted_by_errors(&self) -> bool {
      .                   debug!(
      .                       "is_tainted_by_errors(err_count={}, err_count_on_creation={}, \
      .                        tainted_by_errors_flag={})",
      .                       self.tcx.sess.err_count(),
      .                       self.err_count_on_creation,
      .                       self.tainted_by_errors_flag.get()
      .                   );
      .           
  7,166 ( 0.00%)          if self.tcx.sess.err_count() > self.err_count_on_creation {
      .                       return true; // errors reported since this infcx was made
      .                   }
      .                   self.tainted_by_errors_flag.get()
    528 ( 0.00%)      }
      .           
      .               /// Set the "tainted by errors" flag to true. We call this when we
      .               /// observe an error from a prior pass.
      .               pub fn set_tainted_by_errors(&self) {
      .                   debug!("set_tainted_by_errors()");
      .                   self.tainted_by_errors_flag.set(true)
      .               }
      .           
      .               /// Process the region constraints and return any any errors that
      .               /// result. After this, no more unification operations should be
      .               /// done -- or the compiler will panic -- but it is legal to use
      .               /// `resolve_vars_if_possible` as well as `fully_resolve`.
  6,923 ( 0.00%)      pub fn resolve_regions(
      .                   &self,
      .                   region_context: DefId,
      .                   outlives_env: &OutlivesEnvironment<'tcx>,
      .                   mode: RegionckMode,
      .               ) -> Vec<RegionResolutionError<'tcx>> {
 18,791 ( 0.00%)          let (var_infos, data) = {
      .                       let mut inner = self.inner.borrow_mut();
      .                       let inner = &mut *inner;
    989 ( 0.00%)              assert!(
  2,967 ( 0.00%)                  self.is_tainted_by_errors() || inner.region_obligations.is_empty(),
      .                           "region_obligations not empty: {:#?}",
      .                           inner.region_obligations
      .                       );
      .                       inner
      .                           .region_constraint_storage
      .                           .take()
      .                           .expect("regions already resolved")
      .                           .with_log(&mut inner.undo_log)
      .                           .into_infos_and_data()
    989 ( 0.00%)          };
      .           
      .                   let region_rels =
    989 ( 0.00%)              &RegionRelations::new(self.tcx, region_context, outlives_env.free_region_map());
      .           
  8,901 ( 0.00%)          let (lexical_region_resolutions, errors) =
 23,736 ( 0.01%)              lexical_region_resolve::resolve(region_rels, var_infos, data, mode);
      .           
  3,956 ( 0.00%)          let old_value = self.lexical_region_resolutions.replace(Some(lexical_region_resolutions));
    989 ( 0.00%)          assert!(old_value.is_none());
      .           
      .                   errors
  8,901 ( 0.00%)      }
      .           
      .               /// Process the region constraints and report any errors that
      .               /// result. After this, no more unification operations should be
      .               /// done -- or the compiler will panic -- but it is legal to use
      .               /// `resolve_vars_if_possible` as well as `fully_resolve`.
  9,890 ( 0.00%)      pub fn resolve_regions_and_report_errors(
      .                   &self,
      .                   region_context: DefId,
      .                   outlives_env: &OutlivesEnvironment<'tcx>,
      .                   mode: RegionckMode,
      .               ) {
  1,978 ( 0.00%)          let errors = self.resolve_regions(region_context, outlives_env, mode);
      .           
  2,967 ( 0.00%)          if !self.is_tainted_by_errors() {
      .                       // As a heuristic, just skip reporting region errors
      .                       // altogether if other errors have been reported while
      .                       // this infcx was in use.  This is totally hokey but
      .                       // otherwise we have a hard time separating legit region
      .                       // errors from silly ones.
  1,978 ( 0.00%)              self.report_region_errors(&errors);
      .                   }
  4,945 ( 0.00%)      }
      .           
      .               /// Obtains (and clears) the current set of region
      .               /// constraints. The inference context is still usable: further
      .               /// unifications will simply add new constraints.
      .               ///
      .               /// This method is not meant to be used with normal lexical region
      .               /// resolution. Rather, it is used in the NLL mode as a kind of
      .               /// interim hack: basically we run normal type-check and generate
-- line 1307 ----------------------------------------
-- line 1319 ----------------------------------------
      .               }
      .           
      .               /// Gives temporary access to the region constraint data.
      .               pub fn with_region_constraints<R>(
      .                   &self,
      .                   op: impl FnOnce(&RegionConstraintData<'tcx>) -> R,
      .               ) -> R {
      .                   let mut inner = self.inner.borrow_mut();
    552 ( 0.00%)          op(inner.unwrap_region_constraints().data())
      .               }
      .           
      .               pub fn region_var_origin(&self, vid: ty::RegionVid) -> RegionVariableOrigin {
      .                   let mut inner = self.inner.borrow_mut();
      .                   let inner = &mut *inner;
      .                   inner
      .                       .region_constraint_storage
      .                       .as_mut()
-- line 1335 ----------------------------------------
-- line 1338 ----------------------------------------
      .                       .var_origin(vid)
      .               }
      .           
      .               /// Takes ownership of the list of variable regions. This implies
      .               /// that all the region constraints have already been taken, and
      .               /// hence that `resolve_regions_and_report_errors` can never be
      .               /// called. This is used only during NLL processing to "hand off" ownership
      .               /// of the set of region variables into the NLL region context.
    345 ( 0.00%)      pub fn take_region_var_origins(&self) -> VarInfos {
      .                   let mut inner = self.inner.borrow_mut();
  1,311 ( 0.00%)          let (var_infos, data) = inner
      .                       .region_constraint_storage
      .                       .take()
      .                       .expect("regions already resolved")
      .                       .with_log(&mut inner.undo_log)
     69 ( 0.00%)              .into_infos_and_data();
     69 ( 0.00%)          assert!(data.is_empty());
      .                   var_infos
    552 ( 0.00%)      }
      .           
      .               pub fn ty_to_string(&self, t: Ty<'tcx>) -> String {
      .                   self.resolve_vars_if_possible(t).to_string()
      .               }
      .           
      .               /// If `TyVar(vid)` resolves to a type, return that type. Else, return the
      .               /// universe index of `TyVar(vid)`.
  1,064 ( 0.00%)      pub fn probe_ty_var(&self, vid: TyVid) -> Result<Ty<'tcx>, ty::UniverseIndex> {
      .                   use self::type_variable::TypeVariableValue;
      .           
  3,192 ( 0.00%)          match self.inner.borrow_mut().type_variables().probe(vid) {
      .                       TypeVariableValue::Known { value } => Ok(value),
      .                       TypeVariableValue::Unknown { universe } => Err(universe),
      .                   }
  3,724 ( 0.00%)      }
      .           
      .               /// Resolve any type variables found in `value` -- but only one
      .               /// level.  So, if the variable `?X` is bound to some type
      .               /// `Foo<?Y>`, then this would return `Foo<?Y>` (but `?Y` may
      .               /// itself be bound to a type).
      .               ///
      .               /// Useful when you only need to inspect the outermost level of
      .               /// the type and don't care about nested types (or perhaps you
      .               /// will be resolving them as well, e.g. in a loop).
      .               pub fn shallow_resolve<T>(&self, value: T) -> T
      .               where
      .                   T: TypeFoldable<'tcx>,
      .               {
 55,151 ( 0.01%)          value.fold_with(&mut ShallowResolver { infcx: self })
      .               }
      .           
  1,514 ( 0.00%)      pub fn root_var(&self, var: ty::TyVid) -> ty::TyVid {
      .                   self.inner.borrow_mut().type_variables().root_var(var)
  2,271 ( 0.00%)      }
      .           
      .               /// Where possible, replaces type/const variables in
      .               /// `value` with their final value. Note that region variables
      .               /// are unaffected. If a type/const variable has not been unified, it
      .               /// is left as is. This is an idempotent operation that does
      .               /// not affect inference state in any way and so you can do it
      .               /// at will.
  2,000 ( 0.00%)      pub fn resolve_vars_if_possible<T>(&self, value: T) -> T
      .               where
      .                   T: TypeFoldable<'tcx>,
      .               {
 35,005 ( 0.01%)          if !value.needs_infer() {
 28,064 ( 0.01%)              return value; // Avoid duplicated subst-folding.
      .                   }
 30,187 ( 0.01%)          let mut r = resolve::OpportunisticVarResolver::new(self);
 30,940 ( 0.01%)          value.fold_with(&mut r)
  2,500 ( 0.00%)      }
      .           
      .               /// Returns the first unresolved variable contained in `T`. In the
      .               /// process of visiting `T`, this will resolve (where possible)
      .               /// type variables in `T`, but it never constructs the final,
      .               /// resolved type, so it's more efficient than
      .               /// `resolve_vars_if_possible()`.
      .               pub fn unresolved_type_vars<T>(&self, value: &T) -> Option<(Ty<'tcx>, Option<Span>)>
      .               where
-- line 1415 ----------------------------------------
-- line 1490 ----------------------------------------
      .                   expected: &'tcx ty::Const<'tcx>,
      .                   actual: &'tcx ty::Const<'tcx>,
      .                   err: TypeError<'tcx>,
      .               ) -> DiagnosticBuilder<'tcx> {
      .                   let trace = TypeTrace::consts(cause, true, expected, actual);
      .                   self.report_and_explain_type_error(trace, &err)
      .               }
      .           
  5,688 ( 0.00%)      pub fn replace_bound_vars_with_fresh_vars<T>(
      .                   &self,
      .                   span: Span,
      .                   lbrct: LateBoundRegionConversionTime,
      .                   value: ty::Binder<'tcx, T>,
      .               ) -> (T, BTreeMap<ty::BoundRegion, ty::Region<'tcx>>)
      .               where
      .                   T: TypeFoldable<'tcx>,
      .               {
      .                   let fld_r =
  6,885 ( 0.00%)              |br: ty::BoundRegion| self.next_region_var(LateBoundRegion(span, br.kind, lbrct));
      .                   let fld_t = |_| {
      .                       self.next_ty_var(TypeVariableOrigin {
      .                           kind: TypeVariableOriginKind::MiscVariable,
      .                           span,
      .                       })
      .                   };
      .                   let fld_c = |_, ty| {
      .                       self.next_const_var(
      .                           ty,
      .                           ConstVariableOrigin { kind: ConstVariableOriginKind::MiscVariable, span },
      .                       )
      .                   };
 12,944 ( 0.00%)          self.tcx.replace_bound_vars(value, fld_r, fld_t, fld_c)
  3,792 ( 0.00%)      }
      .           
      .               /// See the [`region_constraints::RegionConstraintCollector::verify_generic_bound`] method.
      .               pub fn verify_generic_bound(
      .                   &self,
      .                   origin: SubregionOrigin<'tcx>,
      .                   kind: GenericKind<'tcx>,
      .                   a: ty::Region<'tcx>,
      .                   bound: VerifyBound<'tcx>,
-- line 1530 ----------------------------------------
-- line 1551 ----------------------------------------
      .               /// its `ParamEnv`, since `FulfillmentContext` doesn't use probing.
      .               pub fn clear_caches(&self) {
      .                   self.selection_cache.clear();
      .                   self.evaluation_cache.clear();
      .                   self.inner.borrow_mut().projection_cache().clear();
      .               }
      .           
      .               pub fn universe(&self) -> ty::UniverseIndex {
 68,555 ( 0.02%)          self.universe.get()
 29,060 ( 0.01%)      }
      .           
      .               /// Creates and return a fresh universe that extends all previous
      .               /// universes. Updates `self.universe` to that new universe.
      .               pub fn create_next_universe(&self) -> ty::UniverseIndex {
      .                   let u = self.universe.get().next_universe();
      .                   self.universe.set(u);
      .                   u
      .               }
-- line 1568 ----------------------------------------
-- line 1606 ----------------------------------------
      .                   // variables, thus we don't need to substitute back the original values.
      .                   self.tcx.const_eval_resolve(param_env_erased, unevaluated, span)
      .               }
      .           
      .               /// If `typ` is a type variable of some kind, resolve it one level
      .               /// (but do not resolve types found in the result). If `typ` is
      .               /// not a type variable, just return it unmodified.
      .               // FIXME(eddyb) inline into `ShallowResolver::visit_ty`.
411,824 ( 0.11%)      fn shallow_resolve_ty(&self, typ: Ty<'tcx>) -> Ty<'tcx> {
219,466 ( 0.06%)          match *typ.kind() {
      .                       ty::Infer(ty::TyVar(v)) => {
      .                           // Not entirely obvious: if `typ` is a type variable,
      .                           // it can be resolved to an int/float variable, which
      .                           // can then be recursively resolved, hence the
      .                           // recursion. Note though that we prevent type
      .                           // variables from unifying to other type variables
      .                           // directly (though they may be embedded
      .                           // structurally), and we prevent cycles in any case,
      .                           // so this recursion should always be of very limited
      .                           // depth.
      .                           //
      .                           // Note: if these two lines are combined into one we get
      .                           // dynamic borrow errors on `self.inner`.
106,952 ( 0.03%)                  let known = self.inner.borrow_mut().type_variables().probe(v).known();
      .                           known.map_or(typ, |t| self.shallow_resolve_ty(t))
      .                       }
      .           
 12,208 ( 0.00%)              ty::Infer(ty::IntVar(v)) => self
      .                           .inner
      .                           .borrow_mut()
      .                           .int_unification_table()
      .                           .probe_value(v)
  3,846 ( 0.00%)                  .map(|v| v.to_type(self.tcx))
      .                           .unwrap_or(typ),
      .           
      .                       ty::Infer(ty::FloatVar(v)) => self
      .                           .inner
      .                           .borrow_mut()
      .                           .float_unification_table()
      .                           .probe_value(v)
      .                           .map(|v| v.to_type(self.tcx))
      .                           .unwrap_or(typ),
      .           
      .                       _ => typ,
      .                   }
463,302 ( 0.12%)      }
      .           
      .               /// `ty_or_const_infer_var_changed` is equivalent to one of these two:
      .               ///   * `shallow_resolve(ty) != ty` (where `ty.kind = ty::Infer(_)`)
      .               ///   * `shallow_resolve(ct) != ct` (where `ct.kind = ty::ConstKind::Infer(_)`)
      .               ///
      .               /// However, `ty_or_const_infer_var_changed` is more efficient. It's always
      .               /// inlined, despite being large, because it has only two call sites that
      .               /// are extremely hot (both in `traits::fulfill`'s checking of `stalled_on`
-- line 1659 ----------------------------------------
-- line 1662 ----------------------------------------
      .               #[inline(always)]
      .               pub fn ty_or_const_infer_var_changed(&self, infer_var: TyOrConstInferVar<'tcx>) -> bool {
      .                   match infer_var {
      .                       TyOrConstInferVar::Ty(v) => {
      .                           use self::type_variable::TypeVariableValue;
      .           
      .                           // If `inlined_probe` returns a `Known` value, it never equals
      .                           // `ty::Infer(ty::TyVar(v))`.
144,154 ( 0.04%)                  match self.inner.borrow_mut().type_variables().inlined_probe(v) {
      .                               TypeVariableValue::Unknown { .. } => false,
      .                               TypeVariableValue::Known { .. } => true,
      .                           }
      .                       }
      .           
      .                       TyOrConstInferVar::TyInt(v) => {
      .                           // If `inlined_probe_value` returns a value it's always a
      .                           // `ty::Int(_)` or `ty::UInt(_)`, which never matches a
      .                           // `ty::Infer(_)`.
  4,080 ( 0.00%)                  self.inner.borrow_mut().int_unification_table().inlined_probe_value(v).is_some()
      .                       }
      .           
      .                       TyOrConstInferVar::TyFloat(v) => {
      .                           // If `probe_value` returns a value it's always a
      .                           // `ty::Float(_)`, which never matches a `ty::Infer(_)`.
      .                           //
      .                           // Not `inlined_probe_value(v)` because this call site is colder.
      .                           self.inner.borrow_mut().float_unification_table().probe_value(v).is_some()
-- line 1688 ----------------------------------------
-- line 1716 ----------------------------------------
      .               /// Equivalent to `ty::ConstKind::Infer(ty::InferConst::Var(_))`.
      .               Const(ConstVid<'tcx>),
      .           }
      .           
      .           impl<'tcx> TyOrConstInferVar<'tcx> {
      .               /// Tries to extract an inference variable from a type or a constant, returns `None`
      .               /// for types other than `ty::Infer(_)` (or `InferTy::Fresh*`) and
      .               /// for constants other than `ty::ConstKind::Infer(_)` (or `InferConst::Fresh`).
  1,796 ( 0.00%)      pub fn maybe_from_generic_arg(arg: GenericArg<'tcx>) -> Option<Self> {
      .                   match arg.unpack() {
      .                       GenericArgKind::Type(ty) => Self::maybe_from_ty(ty),
      .                       GenericArgKind::Const(ct) => Self::maybe_from_const(ct),
      .                       GenericArgKind::Lifetime(_) => None,
      .                   }
  1,796 ( 0.00%)      }
      .           
      .               /// Tries to extract an inference variable from a type, returns `None`
      .               /// for types other than `ty::Infer(_)` (or `InferTy::Fresh*`).
     26 ( 0.00%)      pub fn maybe_from_ty(ty: Ty<'tcx>) -> Option<Self> {
 16,250 ( 0.00%)          match *ty.kind() {
  3,496 ( 0.00%)              ty::Infer(ty::TyVar(v)) => Some(TyOrConstInferVar::Ty(v)),
    148 ( 0.00%)              ty::Infer(ty::IntVar(v)) => Some(TyOrConstInferVar::TyInt(v)),
      .                       ty::Infer(ty::FloatVar(v)) => Some(TyOrConstInferVar::TyFloat(v)),
      .                       _ => None,
      .                   }
     26 ( 0.00%)      }
      .           
      .               /// Tries to extract an inference variable from a constant, returns `None`
      .               /// for constants other than `ty::ConstKind::Infer(_)` (or `InferConst::Fresh`).
      .               pub fn maybe_from_const(ct: &'tcx ty::Const<'tcx>) -> Option<Self> {
      .                   match ct.val {
      .                       ty::ConstKind::Infer(InferConst::Var(v)) => Some(TyOrConstInferVar::Const(v)),
      .                       _ => None,
      .                   }
-- line 1749 ----------------------------------------
-- line 1755 ----------------------------------------
      .           }
      .           
      .           impl<'a, 'tcx> TypeFolder<'tcx> for ShallowResolver<'a, 'tcx> {
      .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
      .                   self.infcx.tcx
      .               }
      .           
      .               fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {
 81,345 ( 0.02%)          self.infcx.shallow_resolve_ty(ty)
      .               }
      .           
    372 ( 0.00%)      fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
    372 ( 0.00%)          if let ty::Const { val: ty::ConstKind::Infer(InferConst::Var(vid)), .. } = ct {
    465 ( 0.00%)              self.infcx
      .                           .inner
      .                           .borrow_mut()
      .                           .const_unification_table()
    279 ( 0.00%)                  .probe_value(*vid)
      .                           .val
      .                           .known()
      .                           .unwrap_or(ct)
      .                   } else {
      .                       ct
      .                   }
    465 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> TypeTrace<'tcx> {
      .               pub fn span(&self) -> Span {
      .                   self.cause.span
      .               }
      .           
      .               pub fn types(
-- line 1787 ----------------------------------------
-- line 1818 ----------------------------------------
      .                       CompareImplTypeObligation { span, .. } => span,
      .                   }
      .               }
      .           
      .               pub fn from_obligation_cause<F>(cause: &traits::ObligationCause<'tcx>, default: F) -> Self
      .               where
      .                   F: FnOnce() -> Self,
      .               {
  1,271 ( 0.00%)          match *cause.code() {
    412 ( 0.00%)              traits::ObligationCauseCode::ReferenceOutlivesReferent(ref_type) => {
  2,060 ( 0.00%)                  SubregionOrigin::ReferenceOutlivesReferent(ref_type, cause.span)
      .                       }
      .           
      .                       traits::ObligationCauseCode::CompareImplMethodObligation {
      .                           impl_item_def_id,
      .                           trait_item_def_id,
      .                       } => SubregionOrigin::CompareImplMethodObligation {
      .                           span: cause.span,
      .                           impl_item_def_id,
-- line 1836 ----------------------------------------

418,560 ( 0.11%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/type_variable.rs
--------------------------------------------------------------------------------
Ir               

-- line 44 ----------------------------------------
      .           /// Convert from a specific kind of undo to the more general UndoLog
      .           impl<'tcx> From<Instantiate> for UndoLog<'tcx> {
      .               fn from(l: Instantiate) -> Self {
      .                   UndoLog::Values(sv::UndoLog::Other(l))
      .               }
      .           }
      .           
      .           impl<'tcx> Rollback<UndoLog<'tcx>> for TypeVariableStorage<'tcx> {
 19,229 ( 0.00%)      fn reverse(&mut self, undo: UndoLog<'tcx>) {
 81,103 ( 0.02%)          match undo {
 15,042 ( 0.00%)              UndoLog::EqRelation(undo) => self.eq_relations.reverse(undo),
  8,482 ( 0.00%)              UndoLog::SubRelation(undo) => self.sub_relations.reverse(undo),
 14,934 ( 0.00%)              UndoLog::Values(undo) => self.values.reverse(undo),
      .                   }
 38,458 ( 0.01%)      }
      .           }
      .           
      .           pub struct TypeVariableStorage<'tcx> {
      .               values: sv::SnapshotVecStorage<Delegate>,
      .           
      .               /// Two variables are unified in `eq_relations` when we have a
      .               /// constraint `?X == ?Y`. This table also stores, for each key,
      .               /// the known value.
-- line 66 ----------------------------------------
-- line 136 ----------------------------------------
      .               DynReturnFn,
      .               LatticeVariable,
      .           }
      .           
      .           pub(crate) struct TypeVariableData {
      .               origin: TypeVariableOrigin,
      .           }
      .           
108,190 ( 0.03%)  #[derive(Copy, Clone, Debug)]
      .           pub enum TypeVariableValue<'tcx> {
      .               Known { value: Ty<'tcx> },
      .               Unknown { universe: ty::UniverseIndex },
      .           }
      .           
      .           impl<'tcx> TypeVariableValue<'tcx> {
      .               /// If this value is known, returns the type it is known to be.
      .               /// Otherwise, `None`.
      .               pub fn known(&self) -> Option<Ty<'tcx>> {
 68,136 ( 0.02%)          match *self {
      .                       TypeVariableValue::Unknown { .. } => None,
      .                       TypeVariableValue::Known { value } => Some(value),
      .                   }
      .               }
      .           
      .               pub fn is_unknown(&self) -> bool {
      .                   match *self {
      .                       TypeVariableValue::Unknown { .. } => true,
-- line 162 ----------------------------------------
-- line 166 ----------------------------------------
      .           }
      .           
      .           pub(crate) struct Instantiate;
      .           
      .           pub(crate) struct Delegate;
      .           
      .           impl<'tcx> TypeVariableStorage<'tcx> {
      .               pub fn new() -> TypeVariableStorage<'tcx> {
  6,222 ( 0.00%)          TypeVariableStorage {
      .                       values: sv::SnapshotVecStorage::new(),
      .                       eq_relations: ut::UnificationTableStorage::new(),
      .                       sub_relations: ut::UnificationTableStorage::new(),
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub(crate) fn with_log<'a>(
-- line 182 ----------------------------------------
-- line 188 ----------------------------------------
      .           }
      .           
      .           impl<'tcx> TypeVariableTable<'_, 'tcx> {
      .               /// Returns the origin that was given when `vid` was created.
      .               ///
      .               /// Note that this function does not return care whether
      .               /// `vid` has been unified with something else or not.
      .               pub fn var_origin(&self, vid: ty::TyVid) -> &TypeVariableOrigin {
    116 ( 0.00%)          &self.storage.values.get(vid.as_usize()).origin
      .               }
      .           
      .               /// Records that `a == b`, depending on `dir`.
      .               ///
      .               /// Precondition: neither `a` nor `b` are known.
      .               pub fn equate(&mut self, a: ty::TyVid, b: ty::TyVid) {
      .                   debug_assert!(self.probe(a).is_unknown());
      .                   debug_assert!(self.probe(b).is_unknown());
    203 ( 0.00%)          self.eq_relations().union(a, b);
    174 ( 0.00%)          self.sub_relations().union(a, b);
      .               }
      .           
      .               /// Records that `a <: b`, depending on `dir`.
      .               ///
      .               /// Precondition: neither `a` nor `b` are known.
      .               pub fn sub(&mut self, a: ty::TyVid, b: ty::TyVid) {
      .                   debug_assert!(self.probe(a).is_unknown());
      .                   debug_assert!(self.probe(b).is_unknown());
    181 ( 0.00%)          self.sub_relations().union(a, b);
      .               }
      .           
      .               /// Instantiates `vid` with the type `ty`.
      .               ///
      .               /// Precondition: `vid` must not have been previously instantiated.
 25,660 ( 0.01%)      pub fn instantiate(&mut self, vid: ty::TyVid, ty: Ty<'tcx>) {
      .                   let vid = self.root_var(vid);
      .                   debug_assert!(self.probe(vid).is_unknown());
      .                   debug_assert!(
      .                       self.eq_relations().probe_value(vid).is_unknown(),
      .                       "instantiating type variable `{:?}` twice: new-value = {:?}, old-value={:?}",
      .                       vid,
      .                       ty,
      .                       self.eq_relations().probe_value(vid)
      .                   );
 35,924 ( 0.01%)          self.eq_relations().union_value(vid, TypeVariableValue::Known { value: ty });
      .           
      .                   // Hack: we only need this so that `types_escaping_snapshot`
      .                   // can see what has been unified; see the Delegate impl for
      .                   // more details.
      .                   self.undo_log.push(Instantiate);
 25,660 ( 0.01%)      }
      .           
      .               /// Creates a new type variable.
      .               ///
      .               /// - `diverging`: indicates if this is a "diverging" type
      .               ///   variable, e.g.,  one created as the type of a `return`
      .               ///   expression. The code in this module doesn't care if a
      .               ///   variable is diverging, but the main Rust type-checker will
      .               ///   sometimes "unify" such variables with the `!` or `()` types.
      .               /// - `origin`: indicates *why* the type variable was created.
      .               ///   The code in this module doesn't care, but it can be useful
      .               ///   for improving error messages.
 36,408 ( 0.01%)      pub fn new_var(
      .                   &mut self,
      .                   universe: ty::UniverseIndex,
      .                   origin: TypeVariableOrigin,
      .               ) -> ty::TyVid {
 54,612 ( 0.01%)          let eq_key = self.eq_relations().new_key(TypeVariableValue::Unknown { universe });
      .           
 30,340 ( 0.01%)          let sub_key = self.sub_relations().new_key(());
  6,068 ( 0.00%)          assert_eq!(eq_key.vid, sub_key);
      .           
 54,612 ( 0.01%)          let index = self.values().push(TypeVariableData { origin });
 24,272 ( 0.01%)          assert_eq!(eq_key.vid.as_u32(), index as u32);
      .           
      .                   debug!("new_var(index={:?}, universe={:?}, origin={:?}", eq_key.vid, universe, origin,);
      .           
      .                   eq_key.vid
 42,476 ( 0.01%)      }
      .           
      .               /// Returns the number of type variables created thus far.
      .               pub fn num_vars(&self) -> usize {
    147 ( 0.00%)          self.storage.values.len()
      .               }
      .           
      .               /// Returns the "root" variable of `vid` in the `eq_relations`
      .               /// equivalence table. All type variables that have been equated
      .               /// will yield the same root variable (per the union-find
      .               /// algorithm), so `root_var(a) == root_var(b)` implies that `a ==
      .               /// b` (transitively).
      .               pub fn root_var(&mut self, vid: ty::TyVid) -> ty::TyVid {
 17,772 ( 0.00%)          self.eq_relations().find(vid).vid
      .               }
      .           
      .               /// Returns the "root" variable of `vid` in the `sub_relations`
      .               /// equivalence table. All type variables that have been are
      .               /// related via equality or subtyping will yield the same root
      .               /// variable (per the union-find algorithm), so `sub_root_var(a)
      .               /// == sub_root_var(b)` implies that:
      .               ///
      .               ///     exists X. (a <: X || X <: a) && (b <: X || X <: b)
      5 ( 0.00%)      pub fn sub_root_var(&mut self, vid: ty::TyVid) -> ty::TyVid {
 15,501 ( 0.00%)          self.sub_relations().find(vid)
     10 ( 0.00%)      }
      .           
      .               /// Returns `true` if `a` and `b` have same "sub-root" (i.e., exists some
      .               /// type X such that `forall i in {a, b}. (i <: X || X <: i)`.
      .               pub fn sub_unified(&mut self, a: ty::TyVid, b: ty::TyVid) -> bool {
      .                   self.sub_root_var(a) == self.sub_root_var(b)
      .               }
      .           
      .               /// Retrieves the type to which `vid` has been instantiated, if
      .               /// any.
244,550 ( 0.06%)      pub fn probe(&mut self, vid: ty::TyVid) -> TypeVariableValue<'tcx> {
      .                   self.inlined_probe(vid)
244,550 ( 0.06%)      }
      .           
      .               /// An always-inlined variant of `probe`, for very hot call sites.
      .               #[inline(always)]
      .               pub fn inlined_probe(&mut self, vid: ty::TyVid) -> TypeVariableValue<'tcx> {
154,808 ( 0.04%)          self.eq_relations().inlined_probe_value(vid)
      .               }
      .           
      .               /// If `t` is a type-inference variable, and it has been
      .               /// instantiated, then return the with which it was
      .               /// instantiated. Otherwise, returns `t`.
      .               pub fn replace_if_possible(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {
 47,864 ( 0.01%)          match *t.kind() {
 37,878 ( 0.01%)              ty::Infer(ty::TyVar(v)) => match self.probe(v) {
      .                           TypeVariableValue::Unknown { .. } => t,
      .                           TypeVariableValue::Known { value } => value,
      .                       },
      .                       _ => t,
      .                   }
      .               }
      .           
      .               #[inline]
-- line 323 ----------------------------------------
-- line 324 ----------------------------------------
      .               fn values(
      .                   &mut self,
      .               ) -> sv::SnapshotVec<Delegate, &mut Vec<TypeVariableData>, &mut InferCtxtUndoLogs<'tcx>> {
      .                   self.storage.values.with_log(self.undo_log)
      .               }
      .           
      .               #[inline]
      .               fn eq_relations(&mut self) -> super::UnificationTable<'_, 'tcx, TyVidEqKey<'tcx>> {
209,645 ( 0.05%)          self.storage.eq_relations.with_log(self.undo_log)
      .               }
      .           
      .               #[inline]
      .               fn sub_relations(&mut self) -> super::UnificationTable<'_, 'tcx, ty::TyVid> {
 11,363 ( 0.00%)          self.storage.sub_relations.with_log(self.undo_log)
      .               }
      .           
      .               /// Returns a range of the type variables created during the snapshot.
    735 ( 0.00%)      pub fn vars_since_snapshot(
      .                   &mut self,
      .                   value_count: usize,
      .               ) -> (Range<TyVid>, Vec<TypeVariableOrigin>) {
      .                   let range = TyVid::from_usize(value_count)..TyVid::from_usize(self.num_vars());
    882 ( 0.00%)          (
      .                       range.start..range.end,
      .                       (range.start.as_usize()..range.end.as_usize())
      .                           .map(|index| self.storage.values.get(index).origin)
      .                           .collect(),
      .                   )
    882 ( 0.00%)      }
      .           
      .               /// Returns indices of all variables that are not yet
      .               /// instantiated.
      .               pub fn unsolved_variables(&mut self) -> Vec<ty::TyVid> {
      .                   (0..self.storage.values.len())
      .                       .filter_map(|i| {
      .                           let vid = ty::TyVid::from_usize(i);
 13,868 ( 0.00%)                  match self.probe(vid) {
      .                               TypeVariableValue::Unknown { .. } => Some(vid),
      .                               TypeVariableValue::Known { .. } => None,
      .                           }
      .                       })
      .                       .collect()
      .               }
      .           }
      .           
-- line 368 ----------------------------------------
-- line 391 ----------------------------------------
      .           /// These structs (a newtyped TyVid) are used as the unification key
      .           /// for the `eq_relations`; they carry a `TypeVariableValue` along
      .           /// with them.
      .           #[derive(Copy, Clone, Debug, PartialEq, Eq)]
      .           pub(crate) struct TyVidEqKey<'tcx> {
      .               vid: ty::TyVid,
      .           
      .               // in the table, we map each ty-vid to one of these:
145,734 ( 0.04%)      phantom: PhantomData<TypeVariableValue<'tcx>>,
      .           }
      .           
      .           impl<'tcx> From<ty::TyVid> for TyVidEqKey<'tcx> {
      .               #[inline] // make this function eligible for inlining - it is quite hot.
      .               fn from(vid: ty::TyVid) -> Self {
      .                   TyVidEqKey { vid, phantom: PhantomData }
      .               }
      .           }
-- line 407 ----------------------------------------
-- line 419 ----------------------------------------
      .                   "TyVidEqKey"
      .               }
      .           }
      .           
      .           impl<'tcx> ut::UnifyValue for TypeVariableValue<'tcx> {
      .               type Error = ut::NoError;
      .           
      .               fn unify_values(value1: &Self, value2: &Self) -> Result<Self, ut::NoError> {
 20,673 ( 0.01%)          match (value1, value2) {
      .                       // We never equate two type variables, both of which
      .                       // have known types.  Instead, we recursively equate
      .                       // those types.
      .                       (&TypeVariableValue::Known { .. }, &TypeVariableValue::Known { .. }) => {
      .                           bug!("equating two type variables, both of which have known types")
      .                       }
      .           
      .                       // If one side is known, prefer that one.
      .                       (&TypeVariableValue::Known { .. }, &TypeVariableValue::Unknown { .. }) => Ok(*value1),
      .                       (&TypeVariableValue::Unknown { .. }, &TypeVariableValue::Known { .. }) => Ok(*value2),
      .           
      .                       // If both sides are *unknown*, it hardly matters, does it?
      .                       (
     29 ( 0.00%)                  &TypeVariableValue::Unknown { universe: universe1 },
     29 ( 0.00%)                  &TypeVariableValue::Unknown { universe: universe2 },
      .                       ) => {
      .                           // If we unify two unbound variables, ?T and ?U, then whatever
      .                           // value they wind up taking (which must be the same value) must
      .                           // be nameable by both universes. Therefore, the resulting
      .                           // universe is the minimum of the two universes, because that is
      .                           // the one which contains the fewest names in scope.
      .                           let universe = cmp::min(universe1, universe2);
    116 ( 0.00%)                  Ok(TypeVariableValue::Unknown { universe })
      .                       }
      .                   }
      .               }
      .           }

 13,643 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/type_variable.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_typeck/src/check/writeback.rs
--------------------------------------------------------------------------------
Ir               

-- line 30 ----------------------------------------
      .           // the final TypeckResults since all of the types should have been
      .           // inferred once typeck is done.
      .           // When type inference is running however, having to update the typeck
      .           // typeck results every time a new type is inferred would be unreasonably slow,
      .           // so instead all of the replacement happens at the end in
      .           // resolve_type_vars_in_body, which creates a new TypeTables which
      .           // doesn't contain any inference types.
      .           impl<'a, 'tcx> FnCtxt<'a, 'tcx> {
    621 ( 0.00%)      pub fn resolve_type_vars_in_body(
      .                   &self,
      .                   body: &'tcx hir::Body<'tcx>,
      .               ) -> &'tcx ty::TypeckResults<'tcx> {
    690 ( 0.00%)          let item_id = self.tcx.hir().body_owner(body.id());
    414 ( 0.00%)          let item_def_id = self.tcx.hir().local_def_id(item_id);
      .           
      .                   // This attribute causes us to dump some writeback information
      .                   // in the form of errors, which is used for unit tests.
      .                   let rustc_dump_user_substs =
    414 ( 0.00%)              self.tcx.has_attr(item_def_id.to_def_id(), sym::rustc_dump_user_substs);
      .           
      .                   let mut wbcx = WritebackCx::new(self, body, rustc_dump_user_substs);
    276 ( 0.00%)          for param in body.params {
    603 ( 0.00%)              wbcx.visit_node_id(param.pat.span, param.hir_id);
      .                   }
      .                   // Type only exists for constants and statics, not functions.
    759 ( 0.00%)          match self.tcx.hir().body_owner_kind(item_id) {
      .                       hir::BodyOwnerKind::Const | hir::BodyOwnerKind::Static(_) => {
    145 ( 0.00%)                  wbcx.visit_node_id(body.value.span, item_id);
      .                       }
      .                       hir::BodyOwnerKind::Closure | hir::BodyOwnerKind::Fn => (),
      .                   }
      .                   wbcx.visit_body(body);
     69 ( 0.00%)          wbcx.visit_min_capture_map();
     69 ( 0.00%)          wbcx.eval_closure_size();
     69 ( 0.00%)          wbcx.visit_fake_reads_map();
     69 ( 0.00%)          wbcx.visit_closures();
     69 ( 0.00%)          wbcx.visit_liberated_fn_sigs();
     69 ( 0.00%)          wbcx.visit_fru_field_types();
    207 ( 0.00%)          wbcx.visit_opaque_types(body.value.span);
     69 ( 0.00%)          wbcx.visit_coercion_casts();
     69 ( 0.00%)          wbcx.visit_user_provided_tys();
     69 ( 0.00%)          wbcx.visit_user_provided_sigs();
     69 ( 0.00%)          wbcx.visit_generator_interior_types();
      .           
      .                   let used_trait_imports =
    138 ( 0.00%)              mem::take(&mut self.typeck_results.borrow_mut().used_trait_imports);
      .                   debug!("used_trait_imports({:?}) = {:?}", item_def_id, used_trait_imports);
    138 ( 0.00%)          wbcx.typeck_results.used_trait_imports = used_trait_imports;
      .           
    345 ( 0.00%)          wbcx.typeck_results.treat_byte_string_as_slice =
     69 ( 0.00%)              mem::take(&mut self.typeck_results.borrow_mut().treat_byte_string_as_slice);
      .           
    207 ( 0.00%)          if self.is_tainted_by_errors() {
      .                       // FIXME(eddyb) keep track of `ErrorReported` from where the error was emitted.
      .                       wbcx.typeck_results.tainted_by_errors = Some(ErrorReported);
      .                   }
      .           
      .                   debug!("writeback: typeck results for {:?} are {:#?}", item_def_id, wbcx.typeck_results);
      .           
    138 ( 0.00%)          self.tcx.arena.alloc(wbcx.typeck_results)
    621 ( 0.00%)      }
      .           }
      .           
      .           ///////////////////////////////////////////////////////////////////////////
      .           // The Writeback context. This visitor walks the HIR, checking the
      .           // fn-specific typeck results to find references to types or regions. It
      .           // resolves those regions to remove inference variables and writes the
      .           // final result back into the master typeck results in the tcx. Here and
      .           // there, it applies a few ad-hoc checks that were not convenient to
-- line 98 ----------------------------------------
-- line 109 ----------------------------------------
      .           }
      .           
      .           impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {
      .               fn new(
      .                   fcx: &'cx FnCtxt<'cx, 'tcx>,
      .                   body: &'tcx hir::Body<'tcx>,
      .                   rustc_dump_user_substs: bool,
      .               ) -> WritebackCx<'cx, 'tcx> {
    138 ( 0.00%)          let owner = body.id().hir_id.owner;
      .           
    621 ( 0.00%)          WritebackCx {
      .                       fcx,
    276 ( 0.00%)              typeck_results: ty::TypeckResults::new(owner),
      .                       body,
      .                       rustc_dump_user_substs,
      .                   }
      .               }
      .           
      .               fn tcx(&self) -> TyCtxt<'tcx> {
    204 ( 0.00%)          self.fcx.tcx
      .               }
      .           
      .               fn write_ty_to_typeck_results(&mut self, hir_id: hir::HirId, ty: Ty<'tcx>) {
      .                   debug!("write_ty_to_typeck_results({:?}, {:?})", hir_id, ty);
 17,646 ( 0.00%)          assert!(!ty.needs_infer() && !ty.has_placeholders() && !ty.has_free_regions());
 23,522 ( 0.01%)          self.typeck_results.node_types_mut().insert(hir_id, ty);
      .               }
      .           
      .               // Hacky hack: During type-checking, we treat *all* operators
      .               // as potentially overloaded. But then, during writeback, if
      .               // we observe that something like `a+b` is (known to be)
      .               // operating on scalars, we clear the overload.
      .               fn fix_scalar_builtin_expr(&mut self, e: &hir::Expr<'_>) {
 34,772 ( 0.01%)          match e.kind {
     55 ( 0.00%)              hir::ExprKind::Unary(hir::UnOp::Neg | hir::UnOp::Not, inner) => {
    220 ( 0.00%)                  let inner_ty = self.fcx.node_ty(inner.hir_id);
      .                           let inner_ty = self.fcx.resolve_vars_if_possible(inner_ty);
      .           
      .                           if inner_ty.is_scalar() {
     55 ( 0.00%)                      let mut typeck_results = self.fcx.typeck_results.borrow_mut();
    330 ( 0.00%)                      typeck_results.type_dependent_defs_mut().remove(e.hir_id);
    110 ( 0.00%)                      typeck_results.node_substs_mut().remove(e.hir_id);
      .                           }
      .                       }
      .                       hir::ExprKind::Binary(ref op, lhs, rhs) | hir::ExprKind::AssignOp(ref op, lhs, rhs) => {
  2,380 ( 0.00%)                  let lhs_ty = self.fcx.node_ty(lhs.hir_id);
      .                           let lhs_ty = self.fcx.resolve_vars_if_possible(lhs_ty);
      .           
  1,904 ( 0.00%)                  let rhs_ty = self.fcx.node_ty(rhs.hir_id);
      .                           let rhs_ty = self.fcx.resolve_vars_if_possible(rhs_ty);
      .           
      .                           if lhs_ty.is_scalar() && rhs_ty.is_scalar() {
    476 ( 0.00%)                      let mut typeck_results = self.fcx.typeck_results.borrow_mut();
  2,380 ( 0.00%)                      typeck_results.type_dependent_defs_mut().remove(e.hir_id);
    476 ( 0.00%)                      typeck_results.node_substs_mut().remove(e.hir_id);
      .           
  1,022 ( 0.00%)                      match e.kind {
      .                                   hir::ExprKind::Binary(..) => {
  1,764 ( 0.00%)                              if !op.node.is_by_value() {
    142 ( 0.00%)                                  let mut adjustments = typeck_results.adjustments_mut();
    852 ( 0.00%)                                  if let Some(a) = adjustments.get_mut(lhs.hir_id) {
      .                                               a.pop();
      .                                           }
    568 ( 0.00%)                                  if let Some(a) = adjustments.get_mut(rhs.hir_id) {
      .                                               a.pop();
      .                                           }
      .                                       }
      .                                   }
      .                                   hir::ExprKind::AssignOp(..)
    175 ( 0.00%)                              if let Some(a) = typeck_results.adjustments_mut().get_mut(lhs.hir_id) =>
      .                                   {
      .                                       a.pop();
      .                                   }
      .                                   _ => {}
      .                               }
      .                           }
      .                       }
      .                       _ => {}
-- line 186 ----------------------------------------
-- line 187 ----------------------------------------
      .                   }
      .               }
      .           
      .               // Similar to operators, indexing is always assumed to be overloaded
      .               // Here, correct cases where an indexing expression can be simplified
      .               // to use builtin indexing because the index type is known to be
      .               // usize-ish
      .               fn fix_index_builtin_expr(&mut self, e: &hir::Expr<'_>) {
 10,670 ( 0.00%)          if let hir::ExprKind::Index(ref base, ref index) = e.kind {
      .                       let mut typeck_results = self.fcx.typeck_results.borrow_mut();
      .           
      .                       // All valid indexing looks like this; might encounter non-valid indexes at this point.
      .                       let base_ty = typeck_results
      .                           .expr_ty_adjusted_opt(base)
      .                           .map(|t| self.fcx.resolve_vars_if_possible(t).kind());
      .                       if base_ty.is_none() {
      .                           // When encountering `return [0][0]` outside of a `fn` body we can encounter a base
-- line 203 ----------------------------------------
-- line 248 ----------------------------------------
      .           // Impl of Visitor for Resolver
      .           //
      .           // This is the master code which walks the AST. It delegates most of
      .           // the heavy lifting to the generic visit and resolve functions
      .           // below. In general, a function is made into a `visitor` if it must
      .           // traffic in node-ids or update typeck results in the type context etc.
      .           
      .           impl<'cx, 'tcx> Visitor<'tcx> for WritebackCx<'cx, 'tcx> {
 45,468 ( 0.01%)      fn visit_expr(&mut self, e: &'tcx hir::Expr<'tcx>) {
  5,052 ( 0.00%)          self.fix_scalar_builtin_expr(e);
      .                   self.fix_index_builtin_expr(e);
      .           
 25,260 ( 0.01%)          self.visit_node_id(e.span, e.hir_id);
      .           
 20,208 ( 0.01%)          match e.kind {
      .                       hir::ExprKind::Closure(_, _, body, _, _) => {
      .                           let body = self.fcx.tcx.hir().body(body);
      .                           for param in body.params {
      .                               self.visit_node_id(e.span, param.hir_id);
      .                           }
      .           
      .                           self.visit_body(body);
      .                       }
      7 ( 0.00%)              hir::ExprKind::Struct(_, fields, _) => {
      .                           for field in fields {
     52 ( 0.00%)                      self.visit_field_id(field.hir_id);
      .                           }
      .                       }
      .                       hir::ExprKind::Field(..) => {
    105 ( 0.00%)                  self.visit_field_id(e.hir_id);
      .                       }
      .                       hir::ExprKind::ConstBlock(anon_const) => {
      .                           self.visit_node_id(e.span, anon_const.hir_id);
      .           
      .                           let body = self.tcx().hir().body(anon_const.body);
      .                           self.visit_body(body);
      .                       }
      .                       _ => {}
      .                   }
      .           
 15,156 ( 0.00%)          intravisit::walk_expr(self, e);
 40,416 ( 0.01%)      }
      .           
  2,043 ( 0.00%)      fn visit_block(&mut self, b: &'tcx hir::Block<'tcx>) {
    908 ( 0.00%)          self.visit_node_id(b.span, b.hir_id);
      .                   intravisit::walk_block(self, b);
    632 ( 0.00%)      }
      .           
  1,926 ( 0.00%)      fn visit_pat(&mut self, p: &'tcx hir::Pat<'tcx>) {
    662 ( 0.00%)          match p.kind {
      .                       hir::PatKind::Binding(..) => {
    408 ( 0.00%)                  let typeck_results = self.fcx.typeck_results.borrow();
    612 ( 0.00%)                  if let Some(bm) =
  1,632 ( 0.00%)                      typeck_results.extract_binding_mode(self.tcx().sess, p.hir_id, p.span)
      .                           {
    612 ( 0.00%)                      self.typeck_results.pat_binding_modes_mut().insert(p.hir_id, bm);
      .                           }
      .                       }
      8 ( 0.00%)              hir::PatKind::Struct(_, fields, _) => {
      .                           for field in fields {
     16 ( 0.00%)                      self.visit_field_id(field.hir_id);
      .                           }
      .                       }
      .                       _ => {}
      .                   };
      .           
    856 ( 0.00%)          self.visit_pat_adjustments(p.span, p.hir_id);
      .           
  1,070 ( 0.00%)          self.visit_node_id(p.span, p.hir_id);
    642 ( 0.00%)          intravisit::walk_pat(self, p);
  1,712 ( 0.00%)      }
      .           
  1,016 ( 0.00%)      fn visit_local(&mut self, l: &'tcx hir::Local<'tcx>) {
      .                   intravisit::walk_local(self, l);
    762 ( 0.00%)          let var_ty = self.fcx.local_ty(l.span, l.hir_id).decl_ty;
      .                   let var_ty = self.resolve(var_ty, &l.span);
      .                   self.write_ty_to_typeck_results(l.hir_id, var_ty);
      .               }
      .           
  1,141 ( 0.00%)      fn visit_ty(&mut self, hir_ty: &'tcx hir::Ty<'tcx>) {
    169 ( 0.00%)          intravisit::walk_ty(self, hir_ty);
    664 ( 0.00%)          let ty = self.fcx.node_ty(hir_ty.hir_id);
    163 ( 0.00%)          let ty = self.resolve(ty, &hir_ty.span);
      .                   self.write_ty_to_typeck_results(hir_ty.hir_id, ty);
      .               }
      .           
      .               fn visit_infer(&mut self, inf: &'tcx hir::InferArg) {
      .                   intravisit::walk_inf(self, inf);
      .                   // Ignore cases where the inference is a const.
      .                   if let Some(ty) = self.fcx.node_ty_opt(inf.hir_id) {
      .                       let ty = self.resolve(ty, &inf.span);
      .                       self.write_ty_to_typeck_results(inf.hir_id, ty);
      .                   }
      .               }
      .           }
      .           
      .           impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {
    483 ( 0.00%)      fn eval_closure_size(&mut self) {
      .                   let mut res: FxHashMap<DefId, ClosureSizeProfileData<'tcx>> = Default::default();
    207 ( 0.00%)          for (closure_def_id, data) in self.fcx.typeck_results.borrow().closure_size_eval.iter() {
      .                       let closure_hir_id =
      .                           self.tcx().hir().local_def_id_to_hir_id(closure_def_id.expect_local());
      .           
      .                       let data = self.resolve(*data, &closure_hir_id);
      .           
      .                       res.insert(*closure_def_id, data);
      .                   }
      .           
    690 ( 0.00%)          self.typeck_results.closure_size_eval = res;
    552 ( 0.00%)      }
    483 ( 0.00%)      fn visit_min_capture_map(&mut self) {
      .                   let mut min_captures_wb = ty::MinCaptureInformationMap::with_capacity_and_hasher(
    138 ( 0.00%)              self.fcx.typeck_results.borrow().closure_min_captures.len(),
      .                       Default::default(),
      .                   );
      .                   for (closure_def_id, root_min_captures) in
    138 ( 0.00%)              self.fcx.typeck_results.borrow().closure_min_captures.iter()
      .                   {
      .                       let mut root_var_map_wb = ty::RootVariableMinCaptureList::with_capacity_and_hasher(
      .                           root_min_captures.len(),
      .                           Default::default(),
      .                       );
      .                       for (var_hir_id, min_list) in root_min_captures.iter() {
      .                           let min_list_wb = min_list
      .                               .iter()
-- line 372 ----------------------------------------
-- line 378 ----------------------------------------
      .                                   self.resolve(captured_place.clone(), &locatable)
      .                               })
      .                               .collect();
      .                           root_var_map_wb.insert(*var_hir_id, min_list_wb);
      .                       }
      .                       min_captures_wb.insert(*closure_def_id, root_var_map_wb);
      .                   }
      .           
    621 ( 0.00%)          self.typeck_results.closure_min_captures = min_captures_wb;
    552 ( 0.00%)      }
      .           
    483 ( 0.00%)      fn visit_fake_reads_map(&mut self) {
      .                   let mut resolved_closure_fake_reads: FxHashMap<
      .                       DefId,
      .                       Vec<(HirPlace<'tcx>, FakeReadCause, hir::HirId)>,
      .                   > = Default::default();
      .                   for (closure_def_id, fake_reads) in
    138 ( 0.00%)              self.fcx.typeck_results.borrow().closure_fake_reads.iter()
      .                   {
      .                       let mut resolved_fake_reads = Vec::<(HirPlace<'tcx>, FakeReadCause, hir::HirId)>::new();
      .                       for (place, cause, hir_id) in fake_reads.iter() {
      .                           let locatable =
      .                               self.tcx().hir().local_def_id_to_hir_id(closure_def_id.expect_local());
      .           
      .                           let resolved_fake_read = self.resolve(place.clone(), &locatable);
      .                           resolved_fake_reads.push((resolved_fake_read, *cause, *hir_id));
      .                       }
      .                       resolved_closure_fake_reads.insert(*closure_def_id, resolved_fake_reads);
      .                   }
    621 ( 0.00%)          self.typeck_results.closure_fake_reads = resolved_closure_fake_reads;
    552 ( 0.00%)      }
      .           
    483 ( 0.00%)      fn visit_closures(&mut self) {
    138 ( 0.00%)          let fcx_typeck_results = self.fcx.typeck_results.borrow();
    207 ( 0.00%)          assert_eq!(fcx_typeck_results.hir_owner, self.typeck_results.hir_owner);
      .                   let common_hir_owner = fcx_typeck_results.hir_owner;
      .           
     69 ( 0.00%)          for (id, origin) in fcx_typeck_results.closure_kind_origins().iter() {
      .                       let hir_id = hir::HirId { owner: common_hir_owner, local_id: *id };
      .                       let place_span = origin.0;
      .                       let place = self.resolve(origin.1.clone(), &place_span);
      .                       self.typeck_results.closure_kind_origins_mut().insert(hir_id, (place_span, place));
      .                   }
    552 ( 0.00%)      }
      .           
    483 ( 0.00%)      fn visit_coercion_casts(&mut self) {
    138 ( 0.00%)          let fcx_typeck_results = self.fcx.typeck_results.borrow();
     69 ( 0.00%)          let fcx_coercion_casts = fcx_typeck_results.coercion_casts();
    138 ( 0.00%)          assert_eq!(fcx_typeck_results.hir_owner, self.typeck_results.hir_owner);
      .           
      .                   for local_id in fcx_coercion_casts {
     16 ( 0.00%)              self.typeck_results.set_coercion_cast(*local_id);
      .                   }
    552 ( 0.00%)      }
      .           
    552 ( 0.00%)      fn visit_user_provided_tys(&mut self) {
    138 ( 0.00%)          let fcx_typeck_results = self.fcx.typeck_results.borrow();
    276 ( 0.00%)          assert_eq!(fcx_typeck_results.hir_owner, self.typeck_results.hir_owner);
      .                   let common_hir_owner = fcx_typeck_results.hir_owner;
      .           
      .                   let mut errors_buffer = Vec::new();
     95 ( 0.00%)          for (&local_id, c_ty) in fcx_typeck_results.user_provided_types().iter() {
      .                       let hir_id = hir::HirId { owner: common_hir_owner, local_id };
      .           
      .                       if cfg!(debug_assertions) && c_ty.needs_infer() {
      .                           span_bug!(
      .                               hir_id.to_span(self.fcx.tcx),
      .                               "writeback: `{:?}` has inference variables",
      .                               c_ty
      .                           );
      .                       };
      .           
    117 ( 0.00%)              self.typeck_results.user_provided_types_mut().insert(hir_id, *c_ty);
      .           
     41 ( 0.00%)              if let ty::UserType::TypeOf(_, user_substs) = c_ty.value {
      6 ( 0.00%)                  if self.rustc_dump_user_substs {
      .                               // This is a unit-testing mechanism.
      .                               let span = self.tcx().hir().span(hir_id);
      .                               // We need to buffer the errors in order to guarantee a consistent
      .                               // order when emitting them.
      .                               let err = self
      .                                   .tcx()
      .                                   .sess
      .                                   .struct_span_err(span, &format!("user substs: {:?}", user_substs));
      .                               err.buffer(&mut errors_buffer);
      .                           }
      .                       }
      .                   }
      .           
     69 ( 0.00%)          if !errors_buffer.is_empty() {
      .                       errors_buffer.sort_by_key(|diag| diag.span.primary_span());
      .                       for diag in errors_buffer.drain(..) {
      .                           self.tcx().sess.diagnostic().emit_diagnostic(&diag);
      .                       }
      .                   }
    552 ( 0.00%)      }
      .           
    483 ( 0.00%)      fn visit_user_provided_sigs(&mut self) {
    138 ( 0.00%)          let fcx_typeck_results = self.fcx.typeck_results.borrow();
    138 ( 0.00%)          assert_eq!(fcx_typeck_results.hir_owner, self.typeck_results.hir_owner);
      .           
      .                   for (&def_id, c_sig) in fcx_typeck_results.user_provided_sigs.iter() {
      .                       if cfg!(debug_assertions) && c_sig.needs_infer() {
      .                           span_bug!(
      .                               self.fcx.tcx.hir().span_if_local(def_id).unwrap(),
      .                               "writeback: `{:?}` has inference variables",
      .                               c_sig
      .                           );
      .                       };
      .           
      .                       self.typeck_results.user_provided_sigs.insert(def_id, *c_sig);
      .                   }
    552 ( 0.00%)      }
      .           
    345 ( 0.00%)      fn visit_generator_interior_types(&mut self) {
    138 ( 0.00%)          let fcx_typeck_results = self.fcx.typeck_results.borrow();
    138 ( 0.00%)          assert_eq!(fcx_typeck_results.hir_owner, self.typeck_results.hir_owner);
    414 ( 0.00%)          self.typeck_results.generator_interior_types =
    138 ( 0.00%)              fcx_typeck_results.generator_interior_types.clone();
    414 ( 0.00%)      }
      .           
  1,104 ( 0.00%)      #[instrument(skip(self, span), level = "debug")]
      .               fn visit_opaque_types(&mut self, span: Span) {
     69 ( 0.00%)          let opaque_types = self.fcx.infcx.inner.borrow().opaque_types.clone();
    276 ( 0.00%)          for (opaque_type_key, opaque_defn) in opaque_types {
      .                       let hir_id =
      .                           self.tcx().hir().local_def_id_to_hir_id(opaque_type_key.def_id.expect_local());
      .                       let instantiated_ty = self.resolve(opaque_defn.concrete_ty, &hir_id);
      .           
      .                       debug_assert!(!instantiated_ty.has_escaping_bound_vars());
      .           
      .                       let opaque_type_key = self.fcx.fully_resolve(opaque_type_key).unwrap();
      .           
-- line 510 ----------------------------------------
-- line 552 ----------------------------------------
      .                       // in some other location, or we'll end up emitting an error due
      .                       // to the lack of defining usage
      .                       if !skip_add {
      .                           self.typeck_results.concrete_opaque_types.insert(opaque_type_key.def_id);
      .                       }
      .                   }
      .               }
      .           
    228 ( 0.00%)      fn visit_field_id(&mut self, hir_id: hir::HirId) {
    190 ( 0.00%)          if let Some(index) = self.fcx.typeck_results.borrow_mut().field_indices_mut().remove(hir_id)
      .                   {
    114 ( 0.00%)              self.typeck_results.field_indices_mut().insert(hir_id, index);
      .                   }
    266 ( 0.00%)      }
      .           
100,602 ( 0.03%)      #[instrument(skip(self, span), level = "debug")]
      .               fn visit_node_id(&mut self, span: Span, hir_id: hir::HirId) {
      .                   // Export associated path extensions and method resolutions.
 22,356 ( 0.01%)          if let Some(def) =
 16,767 ( 0.00%)              self.fcx.typeck_results.borrow_mut().type_dependent_defs_mut().remove(hir_id)
      .                   {
    308 ( 0.00%)              self.typeck_results.type_dependent_defs_mut().insert(hir_id, def);
      .                   }
      .           
      .                   // Resolve any borrowings for the node with id `node_id`
      .                   self.visit_adjustments(span, hir_id);
      .           
      .                   // Resolve the type of the node with id `node_id`
 22,356 ( 0.01%)          let n_ty = self.fcx.node_ty(hir_id);
      .                   let n_ty = self.resolve(n_ty, &span);
      .                   self.write_ty_to_typeck_results(hir_id, n_ty);
      .                   debug!(?n_ty);
      .           
      .                   // Resolve any substitutions
 33,534 ( 0.01%)          if let Some(substs) = self.fcx.typeck_results.borrow().node_substs_opt(hir_id) {
      .                       let substs = self.resolve(substs, &span);
      .                       debug!("write_substs_to_tcx({:?}, {:?})", hir_id, substs);
      .                       assert!(!substs.needs_infer() && !substs.has_placeholders());
    254 ( 0.00%)              self.typeck_results.node_substs_mut().insert(hir_id, substs);
      .                   }
      .               }
      .           
      .               #[instrument(skip(self, span), level = "debug")]
      .               fn visit_adjustments(&mut self, span: Span, hir_id: hir::HirId) {
 16,767 ( 0.00%)          let adjustment = self.fcx.typeck_results.borrow_mut().adjustments_mut().remove(hir_id);
 27,945 ( 0.01%)          match adjustment {
      .                       None => {
      .                           debug!("no adjustments for node");
      .                       }
      .           
      .                       Some(adjustment) => {
    828 ( 0.00%)                  let resolved_adjustment = self.resolve(adjustment, &span);
      .                           debug!(?resolved_adjustment);
  2,484 ( 0.00%)                  self.typeck_results.adjustments_mut().insert(hir_id, resolved_adjustment);
      .                       }
      .                   }
      .               }
      .           
      .               #[instrument(skip(self, span), level = "debug")]
      .               fn visit_pat_adjustments(&mut self, span: Span, hir_id: hir::HirId) {
    642 ( 0.00%)          let adjustment = self.fcx.typeck_results.borrow_mut().pat_adjustments_mut().remove(hir_id);
    428 ( 0.00%)          match adjustment {
      .                       None => {
      .                           debug!("no pat_adjustments for node");
      .                       }
      .           
      .                       Some(adjustment) => {
      .                           let resolved_adjustment = self.resolve(adjustment, &span);
      .                           debug!(?resolved_adjustment);
      .                           self.typeck_results.pat_adjustments_mut().insert(hir_id, resolved_adjustment);
      .                       }
      .                   }
      .               }
      .           
    552 ( 0.00%)      fn visit_liberated_fn_sigs(&mut self) {
    138 ( 0.00%)          let fcx_typeck_results = self.fcx.typeck_results.borrow();
    276 ( 0.00%)          assert_eq!(fcx_typeck_results.hir_owner, self.typeck_results.hir_owner);
      .                   let common_hir_owner = fcx_typeck_results.hir_owner;
      .           
    229 ( 0.00%)          for (&local_id, &fn_sig) in fcx_typeck_results.liberated_fn_sigs().iter() {
    120 ( 0.00%)              let hir_id = hir::HirId { owner: common_hir_owner, local_id };
      .                       let fn_sig = self.resolve(fn_sig, &hir_id);
    120 ( 0.00%)              self.typeck_results.liberated_fn_sigs_mut().insert(hir_id, fn_sig);
      .                   }
    552 ( 0.00%)      }
      .           
    552 ( 0.00%)      fn visit_fru_field_types(&mut self) {
    138 ( 0.00%)          let fcx_typeck_results = self.fcx.typeck_results.borrow();
    276 ( 0.00%)          assert_eq!(fcx_typeck_results.hir_owner, self.typeck_results.hir_owner);
      .                   let common_hir_owner = fcx_typeck_results.hir_owner;
      .           
     69 ( 0.00%)          for (&local_id, ftys) in fcx_typeck_results.fru_field_types().iter() {
      .                       let hir_id = hir::HirId { owner: common_hir_owner, local_id };
      .                       let ftys = self.resolve(ftys.clone(), &hir_id);
      .                       self.typeck_results.fru_field_types_mut().insert(hir_id, ftys);
      .                   }
    552 ( 0.00%)      }
      .           
      .               fn resolve<T>(&mut self, x: T, span: &dyn Locatable) -> T
      .               where
      .                   T: TypeFoldable<'tcx>,
      .               {
 12,512 ( 0.00%)          let mut resolver = Resolver::new(self.fcx, span, self.body);
    254 ( 0.00%)          let x = x.fold_with(&mut resolver);
      .                   if cfg!(debug_assertions) && x.needs_infer() {
      .                       span_bug!(span.to_span(self.fcx.tcx), "writeback: `{:?}` has inference variables", x);
      .                   }
      .           
      .                   // We may have introduced e.g. `ty::Error`, if inference failed, make sure
      .                   // to mark the `TypeckResults` as tainted in that case, so that downstream
      .                   // users of the typeck results don't produce extra errors, or worse, ICEs.
 13,496 ( 0.00%)          if resolver.replaced_with_error {
      .                       // FIXME(eddyb) keep track of `ErrorReported` from where the error was emitted.
      .                       self.typeck_results.tainted_by_errors = Some(ErrorReported);
      .                   }
      .           
      .                   x
      .               }
      .           }
      .           
-- line 671 ----------------------------------------
-- line 698 ----------------------------------------
      .           }
      .           
      .           impl<'cx, 'tcx> Resolver<'cx, 'tcx> {
      .               fn new(
      .                   fcx: &'cx FnCtxt<'cx, 'tcx>,
      .                   span: &'cx dyn Locatable,
      .                   body: &'tcx hir::Body<'tcx>,
      .               ) -> Resolver<'cx, 'tcx> {
 63,626 ( 0.02%)          Resolver { tcx: fcx.tcx, infcx: fcx, span, body, replaced_with_error: false }
      .               }
      .           
      .               fn report_type_error(&self, t: Ty<'tcx>) {
      .                   if !self.tcx.sess.has_errors() {
      .                       self.infcx
      .                           .emit_inference_failure_err(
      .                               Some(self.body.id()),
      .                               self.span.to_span(self.tcx),
-- line 714 ----------------------------------------
-- line 736 ----------------------------------------
      .           }
      .           
      .           struct EraseEarlyRegions<'tcx> {
      .               tcx: TyCtxt<'tcx>,
      .           }
      .           
      .           impl<'tcx> TypeFolder<'tcx> for EraseEarlyRegions<'tcx> {
      .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
    103 ( 0.00%)          self.tcx
      .               }
      .               fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {
  6,358 ( 0.00%)          if ty.has_type_flags(ty::TypeFlags::HAS_FREE_REGIONS) {
    206 ( 0.00%)              ty.super_fold_with(self)
      .                   } else {
      .                       ty
      .                   }
      .               }
      .               fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
    412 ( 0.00%)          if let ty::ReLateBound(..) = r { r } else { self.tcx.lifetimes.re_erased }
      .               }
      .           }
      .           
      .           impl<'cx, 'tcx> TypeFolder<'tcx> for Resolver<'cx, 'tcx> {
      .               fn tcx<'a>(&'a self) -> TyCtxt<'tcx> {
    131 ( 0.00%)          self.tcx
      .               }
      .           
 56,295 ( 0.01%)      fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {
 18,765 ( 0.00%)          match self.infcx.fully_resolve(t) {
      .                       Ok(t) => {
      .                           // Do not anonymize late-bound regions
      .                           // (e.g. keep `for<'a>` named `for<'a>`).
      .                           // This allows NLL to generate error messages that
      .                           // refer to the higher-ranked lifetime names written by the user.
 12,510 ( 0.00%)                  EraseEarlyRegions { tcx: self.infcx.tcx }.fold_ty(t)
      .                       }
      .                       Err(_) => {
      .                           debug!("Resolver::fold_ty: input type `{:?}` not fully resolvable", t);
      .                           self.report_type_error(t);
      .                           self.replaced_with_error = true;
      .                           self.tcx().ty_error()
      .                       }
      .                   }
 50,040 ( 0.01%)      }
      .           
      .               fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
      .                   debug_assert!(!r.is_late_bound(), "Should not be resolving bound region.");
    170 ( 0.00%)          self.tcx.lifetimes.re_erased
      .               }
      .           
      .               fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
      .                   match self.infcx.fully_resolve(ct) {
      .                       Ok(ct) => self.infcx.tcx.erase_regions(ct),
      .                       Err(_) => {
      .                           debug!("Resolver::fold_const: input const `{:?}` not fully resolvable", ct);
      .                           self.report_const_error(ct);
-- line 791 ----------------------------------------

 84,150 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_typeck/src/check/writeback.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs
--------------------------------------------------------------------------------
Ir               

-- line 27 ----------------------------------------
      .           impl CacheEntry {
      .               #[inline]
      .               fn update(
      .                   &mut self,
      .                   new_file_and_idx: Option<(Lrc<SourceFile>, usize)>,
      .                   pos: BytePos,
      .                   time_stamp: usize,
      .               ) {
  2,462 ( 0.00%)          if let Some((file, file_idx)) = new_file_and_idx {
  1,104 ( 0.00%)              self.file = file;
  1,392 ( 0.00%)              self.file_index = file_idx;
      .                   }
      .           
  1,498 ( 0.00%)          let line_index = self.file.lookup_line(pos).unwrap();
      .                   let line_bounds = self.file.line_bounds(line_index);
  4,660 ( 0.00%)          self.line_number = line_index + 1;
  7,060 ( 0.00%)          self.line = line_bounds;
      .                   self.touch(time_stamp);
      .               }
      .           
      .               #[inline]
      .               fn touch(&mut self, time_stamp: usize) {
 26,092 ( 0.01%)          self.time_stamp = time_stamp;
      .               }
      .           }
      .           
      .           #[derive(Clone)]
      .           pub struct CachingSourceMapView<'sm> {
      .               source_map: &'sm SourceMap,
      .               line_cache: [CacheEntry; 3],
      .               time_stamp: usize,
      .           }
      .           
      .           impl<'sm> CachingSourceMapView<'sm> {
    732 ( 0.00%)      pub fn new(source_map: &'sm SourceMap) -> CachingSourceMapView<'sm> {
      .                   let files = source_map.files();
    366 ( 0.00%)          let first_file = files[0].clone();
      .                   let entry = CacheEntry {
      .                       time_stamp: 0,
      .                       line_number: 0,
      .                       line: BytePos(0)..BytePos(0),
      .                       file: first_file,
      .                       file_index: 0,
      .                   };
      .           
  1,830 ( 0.00%)          CachingSourceMapView {
      .                       source_map,
  2,562 ( 0.00%)              line_cache: [entry.clone(), entry.clone(), entry],
      .                       time_stamp: 0,
      .                   }
  1,464 ( 0.00%)      }
      .           
      .               pub fn byte_pos_to_line_and_col(
      .                   &mut self,
      .                   pos: BytePos,
      .               ) -> Option<(Lrc<SourceFile>, usize, BytePos)> {
      .                   self.time_stamp += 1;
      .           
      .                   // Check if the position is in one of the cached lines
-- line 85 ----------------------------------------
-- line 106 ----------------------------------------
      .                   };
      .           
      .                   let cache_entry = &mut self.line_cache[oldest];
      .                   cache_entry.update(new_file_and_idx, pos, self.time_stamp);
      .           
      .                   Some((cache_entry.file.clone(), cache_entry.line_number, pos - cache_entry.line.start))
      .               }
      .           
 98,525 ( 0.03%)      pub fn span_data_to_lines_and_cols(
      .                   &mut self,
      .                   span_data: &SpanData,
      .               ) -> Option<(Lrc<SourceFile>, usize, BytePos, usize, BytePos)> {
 56,300 ( 0.01%)          self.time_stamp += 1;
      .           
      .                   // Check if lo and hi are in the cached lines.
 14,075 ( 0.00%)          let lo_cache_idx = self.cache_entry_index(span_data.lo);
 14,075 ( 0.00%)          let hi_cache_idx = self.cache_entry_index(span_data.hi);
      .           
 24,066 ( 0.01%)          if lo_cache_idx != -1 && hi_cache_idx != -1 {
      .                       // Cache hit for span lo and hi. Check if they belong to the same file.
      .                       let result = {
 24,034 ( 0.01%)                  let lo = &self.line_cache[lo_cache_idx as usize];
      .                           let hi = &self.line_cache[hi_cache_idx as usize];
      .           
 72,102 ( 0.02%)                  if lo.file_index != hi.file_index {
      .                               return None;
      .                           }
      .           
      .                           (
 24,034 ( 0.01%)                      lo.file.clone(),
      .                               lo.line_number,
      .                               span_data.lo - lo.line.start,
 12,017 ( 0.00%)                      hi.line_number,
      .                               span_data.hi - hi.line.start,
      .                           )
      .                       };
      .           
 12,017 ( 0.00%)              self.line_cache[lo_cache_idx as usize].touch(self.time_stamp);
 12,017 ( 0.00%)              self.line_cache[hi_cache_idx as usize].touch(self.time_stamp);
      .           
 48,068 ( 0.01%)              return Some(result);
      .                   }
      .           
      .                   // No cache hit or cache hit for only one of span lo and hi.
  4,084 ( 0.00%)          let oldest = if lo_cache_idx != -1 || hi_cache_idx != -1 {
      .                       let avoid_idx = if lo_cache_idx != -1 { lo_cache_idx } else { hi_cache_idx };
      .                       self.oldest_cache_entry_index_avoid(avoid_idx as usize)
      .                   } else {
      .                       self.oldest_cache_entry_index()
      .                   };
      .           
      .                   // If the entry doesn't point to the correct file, get the new file and index.
      .                   // Return early if the file containing beginning of span doesn't contain end of span.
 16,420 ( 0.00%)          let new_file_and_idx = if !file_contains(&self.line_cache[oldest].file, span_data.lo) {
  2,800 ( 0.00%)              let new_file_and_idx = self.file_for_position(span_data.lo)?;
  3,360 ( 0.00%)              if !file_contains(&new_file_and_idx.0, span_data.hi) {
      .                           return None;
      .                       }
      .           
  2,240 ( 0.00%)              Some(new_file_and_idx)
      .                   } else {
      .                       let file = &self.line_cache[oldest].file;
  4,494 ( 0.00%)              if !file_contains(&file, span_data.hi) {
      .                           return None;
      .                       }
      .           
  4,494 ( 0.00%)              None
      .                   };
      .           
      .                   // Update the cache entries.
 10,290 ( 0.00%)          let (lo_idx, hi_idx) = match (lo_cache_idx, hi_cache_idx) {
      .                       // Oldest cache entry is for span_data.lo line.
      .                       (-1, -1) => {
      .                           let lo = &mut self.line_cache[oldest];
      .                           lo.update(new_file_and_idx, span_data.lo, self.time_stamp);
      .           
  5,520 ( 0.00%)                  if !lo.line.contains(&span_data.hi) {
      .                               let new_file_and_idx = Some((lo.file.clone(), lo.file_index));
      .                               let next_oldest = self.oldest_cache_entry_index_avoid(oldest);
      .                               let hi = &mut self.line_cache[next_oldest];
      .                               hi.update(new_file_and_idx, span_data.hi, self.time_stamp);
      .                               (oldest, next_oldest)
      .                           } else {
      .                               (oldest, oldest)
      .                           }
      .                       }
      .                       // Oldest cache entry is for span_data.lo line.
      .                       (-1, _) => {
      .                           let lo = &mut self.line_cache[oldest];
      .                           lo.update(new_file_and_idx, span_data.lo, self.time_stamp);
     32 ( 0.00%)                  let hi = &mut self.line_cache[hi_cache_idx as usize];
     48 ( 0.00%)                  hi.touch(self.time_stamp);
      .                           (oldest, hi_cache_idx as usize)
      .                       }
      .                       // Oldest cache entry is for span_data.hi line.
      .                       (_, -1) => {
      .                           let hi = &mut self.line_cache[oldest];
    202 ( 0.00%)                  hi.update(new_file_and_idx, span_data.hi, self.time_stamp);
    404 ( 0.00%)                  let lo = &mut self.line_cache[lo_cache_idx as usize];
    808 ( 0.00%)                  lo.touch(self.time_stamp);
      .                           (lo_cache_idx as usize, oldest)
      .                       }
      .                       _ => {
      .                           panic!();
      .                       }
      .                   };
      .           
      .                   let lo = &self.line_cache[lo_idx];
      .                   let hi = &self.line_cache[hi_idx];
      .           
      .                   // Span lo and hi may equal line end when last line doesn't
      .                   // end in newline, hence the inclusive upper bounds below.
  4,116 ( 0.00%)          assert!(span_data.lo >= lo.line.start);
  2,058 ( 0.00%)          assert!(span_data.lo <= lo.line.end);
  4,116 ( 0.00%)          assert!(span_data.hi >= hi.line.start);
  2,058 ( 0.00%)          assert!(span_data.hi <= hi.line.end);
 10,290 ( 0.00%)          assert!(lo.file.contains(span_data.lo));
  6,174 ( 0.00%)          assert!(lo.file.contains(span_data.hi));
  6,174 ( 0.00%)          assert_eq!(lo.file_index, hi.file_index);
      .           
  6,174 ( 0.00%)          Some((
  2,058 ( 0.00%)              lo.file.clone(),
      .                       lo.line_number,
      .                       span_data.lo - lo.line.start,
  2,058 ( 0.00%)              hi.line_number,
      .                       span_data.hi - hi.line.start,
      .                   ))
126,675 ( 0.03%)      }
      .           
      .               fn cache_entry_index(&self, pos: BytePos) -> isize {
      .                   for (idx, cache_entry) in self.line_cache.iter().enumerate() {
164,215 ( 0.04%)              if cache_entry.line.contains(&pos) {
      .                           return idx as isize;
      .                       }
      .                   }
      .           
      .                   -1
      .               }
      .           
      .               fn oldest_cache_entry_index(&self) -> usize {
      .                   let mut oldest = 0;
      .           
      .                   for idx in 1..self.line_cache.len() {
 11,040 ( 0.00%)              if self.line_cache[idx].time_stamp < self.line_cache[oldest].time_stamp {
      .                           oldest = idx;
      .                       }
      .                   }
      .           
      .                   oldest
      .               }
      .           
      .               fn oldest_cache_entry_index_avoid(&self, avoid_idx: usize) -> usize {
      .                   let mut oldest = if avoid_idx != 0 { 0 } else { 1 };
      .           
      .                   for idx in 0..self.line_cache.len() {
  2,869 ( 0.00%)              if idx != avoid_idx
  1,715 ( 0.00%)                  && self.line_cache[idx].time_stamp < self.line_cache[oldest].time_stamp
      .                       {
      .                           oldest = idx;
      .                       }
      .                   }
      .           
      .                   oldest
      .               }
      .           
  2,800 ( 0.00%)      fn file_for_position(&self, pos: BytePos) -> Option<(Lrc<SourceFile>, usize)> {
    560 ( 0.00%)          if !self.source_map.files().is_empty() {
  1,120 ( 0.00%)              let file_idx = self.source_map.lookup_source_file_idx(pos);
      .                       let file = &self.source_map.files()[file_idx];
      .           
  4,480 ( 0.00%)              if file_contains(file, pos) {
      .                           return Some((file.clone(), file_idx));
      .                       }
      .                   }
      .           
      .                   None
  2,800 ( 0.00%)      }
      .           }
      .           
      .           #[inline]
      .           fn file_contains(file: &SourceFile, pos: BytePos) -> bool {
      .               // `SourceMap::lookup_source_file_idx` and `SourceFile::contains` both consider the position
      .               // one past the end of a file to belong to it. Normally, that's what we want. But for the
      .               // purposes of converting a byte position to a line and column number, we can't come up with a
      .               // line and column number if the file is empty, because an empty file doesn't contain any
-- line 290 ----------------------------------------

186,936 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs
--------------------------------------------------------------------------------
Ir               

-- line 118 ----------------------------------------
      .               stability: InternedSet<'tcx, attr::Stability>,
      .           
      .               /// `#[rustc_const_stable]` and `#[rustc_const_unstable]` attributes
      .               const_stability: InternedSet<'tcx, attr::ConstStability>,
      .           }
      .           
      .           impl<'tcx> CtxtInterners<'tcx> {
      .               fn new(arena: &'tcx WorkerLocal<Arena<'tcx>>) -> CtxtInterners<'tcx> {
     17 ( 0.00%)          CtxtInterners {
      .                       arena,
      .                       type_: Default::default(),
      .                       type_list: Default::default(),
      .                       substs: Default::default(),
      .                       region: Default::default(),
      .                       poly_existential_predicates: Default::default(),
      .                       canonical_var_infos: Default::default(),
      .                       predicate: Default::default(),
-- line 134 ----------------------------------------
-- line 143 ----------------------------------------
      .                       stability: Default::default(),
      .                       const_stability: Default::default(),
      .                   }
      .               }
      .           
      .               /// Interns a type.
      .               #[allow(rustc::usage_of_ty_tykind)]
      .               #[inline(never)]
196,608 ( 0.05%)      fn intern_ty(&self, kind: TyKind<'tcx>) -> Ty<'tcx> {
      .                   self.type_
122,880 ( 0.03%)              .intern(kind, |kind| {
  8,192 ( 0.00%)                  let flags = super::flags::FlagComputation::for_kind(&kind);
      .           
      .                           let ty_struct = TyS {
 16,384 ( 0.00%)                      kind,
      .                               flags: flags.flags,
      .                               outer_exclusive_binder: flags.outer_exclusive_binder,
      .                           };
      .           
      .                           Interned(self.arena.alloc(ty_struct))
      .                       })
      .                       .0
221,184 ( 0.06%)      }
      .           
      .               #[inline(never)]
134,648 ( 0.03%)      fn intern_predicate(
      .                   &self,
      .                   kind: Binder<'tcx, PredicateKind<'tcx>>,
      .               ) -> &'tcx PredicateInner<'tcx> {
      .                   self.predicate
117,817 ( 0.03%)              .intern(kind, |kind| {
 19,950 ( 0.01%)                  let flags = super::flags::FlagComputation::for_predicate(kind);
      .           
      .                           let predicate_struct = PredicateInner {
      .                               kind,
      .                               flags: flags.flags,
      .                               outer_exclusive_binder: flags.outer_exclusive_binder,
      .                           };
      .           
      .                           Interned(self.arena.alloc(predicate_struct))
      .                       })
      .                       .0
151,479 ( 0.04%)      }
      .           }
      .           
      .           pub struct CommonTypes<'tcx> {
      .               pub unit: Ty<'tcx>,
      .               pub bool: Ty<'tcx>,
      .               pub char: Ty<'tcx>,
      .               pub isize: Ty<'tcx>,
      .               pub i8: Ty<'tcx>,
-- line 193 ----------------------------------------
-- line 237 ----------------------------------------
      .           /// safely used as a key in the maps of a TypeckResults. For that to be
      .           /// the case, the HirId must have the same `owner` as all the other IDs in
      .           /// this table (signified by `hir_owner`). Otherwise the HirId
      .           /// would be in a different frame of reference and using its `local_id`
      .           /// would result in lookup errors, or worse, in silently wrong data being
      .           /// stored/returned.
      .           #[inline]
      .           fn validate_hir_id_for_typeck_results(hir_owner: LocalDefId, hir_id: hir::HirId) {
 93,613 ( 0.02%)      if hir_id.owner != hir_owner {
      .                   invalid_hir_id_for_typeck_results(hir_owner, hir_id);
      .               }
      .           }
      .           
      .           #[cold]
      .           #[inline(never)]
      .           fn invalid_hir_id_for_typeck_results(hir_owner: LocalDefId, hir_id: hir::HirId) {
      .               ty::tls::with(|tcx| {
-- line 253 ----------------------------------------
-- line 261 ----------------------------------------
      .           }
      .           
      .           impl<'a, V> LocalTableInContext<'a, V> {
      .               pub fn contains_key(&self, id: hir::HirId) -> bool {
      .                   validate_hir_id_for_typeck_results(self.hir_owner, id);
      .                   self.data.contains_key(&id.local_id)
      .               }
      .           
 67,748 ( 0.02%)      pub fn get(&self, id: hir::HirId) -> Option<&V> {
 13,584 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
 13,584 ( 0.00%)          self.data.get(&id.local_id)
 54,204 ( 0.01%)      }
      .           
      .               pub fn iter(&self) -> hash_map::Iter<'_, hir::ItemLocalId, V> {
      .                   self.data.iter()
      .               }
      .           }
      .           
      .           impl<'a, V> ::std::ops::Index<hir::HirId> for LocalTableInContext<'a, V> {
      .               type Output = V;
      .           
    240 ( 0.00%)      fn index(&self, key: hir::HirId) -> &V {
      .                   self.get(key).expect("LocalTableInContext: key not found")
    160 ( 0.00%)      }
      .           }
      .           
      .           pub struct LocalTableInContextMut<'a, V> {
      .               hir_owner: LocalDefId,
      .               data: &'a mut ItemLocalMap<V>,
      .           }
      .           
      .           impl<'a, V> LocalTableInContextMut<'a, V> {
-- line 292 ----------------------------------------
-- line 507 ----------------------------------------
      .               pub treat_byte_string_as_slice: ItemLocalSet,
      .           
      .               /// Contains the data for evaluating the effect of feature `capture_disjoint_fields`
      .               /// on closure size.
      .               pub closure_size_eval: FxHashMap<DefId, ClosureSizeProfileData<'tcx>>,
      .           }
      .           
      .           impl<'tcx> TypeckResults<'tcx> {
  1,308 ( 0.00%)      pub fn new(hir_owner: LocalDefId) -> TypeckResults<'tcx> {
 15,478 ( 0.00%)          TypeckResults {
      .                       hir_owner,
      .                       type_dependent_defs: Default::default(),
      .                       field_indices: Default::default(),
      .                       user_provided_types: Default::default(),
      .                       user_provided_sigs: Default::default(),
      .                       node_types: Default::default(),
      .                       node_substs: Default::default(),
      .                       adjustments: Default::default(),
-- line 524 ----------------------------------------
-- line 532 ----------------------------------------
      .                       tainted_by_errors: None,
      .                       concrete_opaque_types: Default::default(),
      .                       closure_min_captures: Default::default(),
      .                       closure_fake_reads: Default::default(),
      .                       generator_interior_types: ty::Binder::dummy(Default::default()),
      .                       treat_byte_string_as_slice: Default::default(),
      .                       closure_size_eval: Default::default(),
      .                   }
  1,308 ( 0.00%)      }
      .           
      .               /// Returns the final resolution of a `QPath` in an `Expr` or `Pat` node.
  9,024 ( 0.00%)      pub fn qpath_res(&self, qpath: &hir::QPath<'_>, id: hir::HirId) -> Res {
  6,016 ( 0.00%)          match *qpath {
 17,472 ( 0.00%)              hir::QPath::Resolved(_, ref path) => path.res,
      .                       hir::QPath::TypeRelative(..) | hir::QPath::LangItem(..) => self
      .                           .type_dependent_def(id)
    576 ( 0.00%)                  .map_or(Res::Err, |(kind, def_id)| Res::Def(kind, def_id)),
      .                   }
 15,040 ( 0.00%)      }
      .           
      6 ( 0.00%)      pub fn type_dependent_defs(
      .                   &self,
      .               ) -> LocalTableInContext<'_, Result<(DefKind, DefId), ErrorReported>> {
    860 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.type_dependent_defs }
      6 ( 0.00%)      }
      .           
    346 ( 0.00%)      pub fn type_dependent_def(&self, id: HirId) -> Option<(DefKind, DefId)> {
    826 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
      .                   self.type_dependent_defs.get(&id.local_id).cloned().and_then(|r| r.ok())
    692 ( 0.00%)      }
      .           
  1,536 ( 0.00%)      pub fn type_dependent_def_id(&self, id: HirId) -> Option<DefId> {
      .                   self.type_dependent_def(id).map(|(_, def_id)| def_id)
  1,536 ( 0.00%)      }
      .           
  6,933 ( 0.00%)      pub fn type_dependent_defs_mut(
      .                   &mut self,
      .               ) -> LocalTableInContextMut<'_, Result<(DefKind, DefId), ErrorReported>> {
  6,933 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.type_dependent_defs }
  6,933 ( 0.00%)      }
      .           
      .               pub fn field_indices(&self) -> LocalTableInContext<'_, usize> {
    130 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.field_indices }
     25 ( 0.00%)      }
      .           
      .               pub fn field_indices_mut(&mut self) -> LocalTableInContextMut<'_, usize> {
    228 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.field_indices }
    114 ( 0.00%)      }
      .           
      .               pub fn user_provided_types(&self) -> LocalTableInContext<'_, CanonicalUserType<'tcx>> {
  1,092 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.user_provided_types }
    546 ( 0.00%)      }
      .           
      .               pub fn user_provided_types_mut(
      .                   &mut self,
      .               ) -> LocalTableInContextMut<'_, CanonicalUserType<'tcx>> {
     52 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.user_provided_types }
     26 ( 0.00%)      }
      .           
      .               pub fn node_types(&self) -> LocalTableInContext<'_, Ty<'tcx>> {
 14,580 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.node_types }
  7,290 ( 0.00%)      }
      .           
      .               pub fn node_types_mut(&mut self) -> LocalTableInContextMut<'_, Ty<'tcx>> {
 25,024 ( 0.01%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.node_types }
 12,512 ( 0.00%)      }
      .           
117,000 ( 0.03%)      pub fn node_type(&self, id: hir::HirId) -> Ty<'tcx> {
 19,500 ( 0.01%)          self.node_type_opt(id).unwrap_or_else(|| {
      .                       bug!("node_type: no type for node `{}`", tls::with(|tcx| tcx.hir().node_to_string(id)))
      .                   })
 97,500 ( 0.03%)      }
      .           
 24,767 ( 0.01%)      pub fn node_type_opt(&self, id: hir::HirId) -> Option<Ty<'tcx>> {
 24,767 ( 0.01%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
      .                   self.node_types.get(&id.local_id).cloned()
 49,534 ( 0.01%)      }
      .           
      .               pub fn node_substs_mut(&mut self) -> LocalTableInContextMut<'_, SubstsRef<'tcx>> {
  2,580 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.node_substs }
  1,290 ( 0.00%)      }
      .           
  7,480 ( 0.00%)      pub fn node_substs(&self, id: hir::HirId) -> SubstsRef<'tcx> {
  7,480 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
      .                   self.node_substs.get(&id.local_id).cloned().unwrap_or_else(|| InternalSubsts::empty())
 14,960 ( 0.00%)      }
      .           
  5,589 ( 0.00%)      pub fn node_substs_opt(&self, id: hir::HirId) -> Option<SubstsRef<'tcx>> {
  5,589 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
      .                   self.node_substs.get(&id.local_id).cloned()
 11,178 ( 0.00%)      }
      .           
      .               // Returns the type of a pattern as a monotype. Like @expr_ty, this function
      .               // doesn't provide type parameter substitutions.
      .               pub fn pat_ty(&self, pat: &hir::Pat<'_>) -> Ty<'tcx> {
    732 ( 0.00%)          self.node_type(pat.hir_id)
      .               }
      .           
      .               // Returns the type of an expression as a monotype.
      .               //
      .               // NB (1): This is the PRE-ADJUSTMENT TYPE for the expression.  That is, in
      .               // some cases, we insert `Adjustment` annotations such as auto-deref or
      .               // auto-ref.  The type returned by this function does not consider such
      .               // adjustments.  See `expr_ty_adjusted()` instead.
      .               //
      .               // NB (2): This type doesn't provide type parameter substitutions; e.g., if you
      .               // ask for the type of "id" in "id(3)", it will return "fn(&isize) -> isize"
      .               // instead of "fn(ty) -> T with T = isize".
      .               pub fn expr_ty(&self, expr: &hir::Expr<'_>) -> Ty<'tcx> {
 23,186 ( 0.01%)          self.node_type(expr.hir_id)
      .               }
      .           
      .               pub fn expr_ty_opt(&self, expr: &hir::Expr<'_>) -> Option<Ty<'tcx>> {
 20,956 ( 0.01%)          self.node_type_opt(expr.hir_id)
      .               }
      .           
      .               pub fn adjustments(&self) -> LocalTableInContext<'_, Vec<ty::adjustment::Adjustment<'tcx>>> {
 10,992 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.adjustments }
  5,496 ( 0.00%)      }
      .           
      .               pub fn adjustments_mut(
      .                   &mut self,
      .               ) -> LocalTableInContextMut<'_, Vec<ty::adjustment::Adjustment<'tcx>>> {
 13,626 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.adjustments }
  6,813 ( 0.00%)      }
      .           
 10,304 ( 0.00%)      pub fn expr_adjustments(&self, expr: &hir::Expr<'_>) -> &[ty::adjustment::Adjustment<'tcx>] {
 20,608 ( 0.01%)          validate_hir_id_for_typeck_results(self.hir_owner, expr.hir_id);
      .                   self.adjustments.get(&expr.hir_id.local_id).map_or(&[], |a| &a[..])
 20,608 ( 0.01%)      }
      .           
      .               /// Returns the type of `expr`, considering any `Adjustment`
      .               /// entry recorded for that expression.
    145 ( 0.00%)      pub fn expr_ty_adjusted(&self, expr: &hir::Expr<'_>) -> Ty<'tcx> {
     29 ( 0.00%)          self.expr_adjustments(expr).last().map_or_else(|| self.expr_ty(expr), |adj| adj.target)
     28 ( 0.00%)      }
      .           
      .               pub fn expr_ty_adjusted_opt(&self, expr: &hir::Expr<'_>) -> Option<Ty<'tcx>> {
      .                   self.expr_adjustments(expr).last().map(|adj| adj.target).or_else(|| self.expr_ty_opt(expr))
      .               }
      .           
    854 ( 0.00%)      pub fn is_method_call(&self, expr: &hir::Expr<'_>) -> bool {
      .                   // Only paths and method calls/overloaded operators have
      .                   // entries in type_dependent_defs, ignore the former here.
  1,708 ( 0.00%)          if let hir::ExprKind::Path(_) = expr.kind {
      .                       return false;
      .                   }
      .           
  1,708 ( 0.00%)          matches!(self.type_dependent_defs().get(expr.hir_id), Some(Ok((DefKind::AssocFn, _))))
  1,708 ( 0.00%)      }
      .           
  1,812 ( 0.00%)      pub fn extract_binding_mode(&self, s: &Session, id: HirId, sp: Span) -> Option<BindingMode> {
      .                   self.pat_binding_modes().get(id).copied().or_else(|| {
      .                       s.delay_span_bug(sp, "missing binding mode");
      .                       None
      .                   })
  2,416 ( 0.00%)      }
      .           
      .               pub fn pat_binding_modes(&self) -> LocalTableInContext<'_, BindingMode> {
  1,436 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.pat_binding_modes }
    416 ( 0.00%)      }
      .           
      .               pub fn pat_binding_modes_mut(&mut self) -> LocalTableInContextMut<'_, BindingMode> {
    816 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.pat_binding_modes }
    408 ( 0.00%)      }
      .           
      .               pub fn pat_adjustments(&self) -> LocalTableInContext<'_, Vec<Ty<'tcx>>> {
  1,284 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.pat_adjustments }
    642 ( 0.00%)      }
      .           
      .               pub fn pat_adjustments_mut(&mut self) -> LocalTableInContextMut<'_, Vec<Ty<'tcx>>> {
    428 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.pat_adjustments }
    214 ( 0.00%)      }
      .           
      .               /// For a given closure, returns the iterator of `ty::CapturedPlace`s that are captured
      .               /// by the closure.
    276 ( 0.00%)      pub fn closure_min_captures_flattened(
      .                   &self,
      .                   closure_def_id: DefId,
      .               ) -> impl Iterator<Item = &ty::CapturedPlace<'tcx>> {
      .                   self.closure_min_captures
      .                       .get(&closure_def_id)
      .                       .map(|closure_min_captures| closure_min_captures.values().flat_map(|v| v.iter()))
      .                       .into_iter()
      .                       .flatten()
    345 ( 0.00%)      }
      .           
      .               pub fn closure_kind_origins(&self) -> LocalTableInContext<'_, (Span, HirPlace<'tcx>)> {
    138 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.closure_kind_origins }
     69 ( 0.00%)      }
      .           
      .               pub fn closure_kind_origins_mut(
      .                   &mut self,
      .               ) -> LocalTableInContextMut<'_, (Span, HirPlace<'tcx>)> {
      .                   LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.closure_kind_origins }
      .               }
      .           
      .               pub fn liberated_fn_sigs(&self) -> LocalTableInContext<'_, ty::FnSig<'tcx>> {
    298 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.liberated_fn_sigs }
    149 ( 0.00%)      }
      .           
      .               pub fn liberated_fn_sigs_mut(&mut self) -> LocalTableInContextMut<'_, ty::FnSig<'tcx>> {
    160 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.liberated_fn_sigs }
     80 ( 0.00%)      }
      .           
      .               pub fn fru_field_types(&self) -> LocalTableInContext<'_, Vec<Ty<'tcx>>> {
    138 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.fru_field_types }
     69 ( 0.00%)      }
      .           
      .               pub fn fru_field_types_mut(&mut self) -> LocalTableInContextMut<'_, Vec<Ty<'tcx>>> {
      .                   LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.fru_field_types }
      .               }
      .           
    435 ( 0.00%)      pub fn is_coercion_cast(&self, hir_id: hir::HirId) -> bool {
    145 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, hir_id);
      .                   self.coercion_casts.contains(&hir_id.local_id)
    290 ( 0.00%)      }
      .           
      .               pub fn set_coercion_cast(&mut self, id: ItemLocalId) {
      .                   self.coercion_casts.insert(id);
      .               }
      .           
      .               pub fn coercion_casts(&self) -> &ItemLocalSet {
     69 ( 0.00%)          &self.coercion_casts
     69 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for TypeckResults<'tcx> {
      .               fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {
      .                   let ty::TypeckResults {
      .                       hir_owner,
      .                       ref type_dependent_defs,
      .                       ref field_indices,
-- line 764 ----------------------------------------
-- line 819 ----------------------------------------
      .                   const START_INDEX = 0,
      .               }
      .           }
      .           
      .           /// Mapping of type annotation indices to canonical user type annotations.
      .           pub type CanonicalUserTypeAnnotations<'tcx> =
      .               IndexVec<UserTypeAnnotationIndex, CanonicalUserTypeAnnotation<'tcx>>;
      .           
     46 ( 0.00%)  #[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable, TypeFoldable, Lift)]
      .           pub struct CanonicalUserTypeAnnotation<'tcx> {
      .               pub user_ty: CanonicalUserType<'tcx>,
      .               pub span: Span,
     23 ( 0.00%)      pub inferred_ty: Ty<'tcx>,
      .           }
      .           
      .           /// Canonicalized user type annotation.
      .           pub type CanonicalUserType<'tcx> = Canonical<'tcx, UserType<'tcx>>;
      .           
      .           impl<'tcx> CanonicalUserType<'tcx> {
      .               /// Returns `true` if this represents a substitution of the form `[?0, ?1, ?2]`,
      .               /// i.e., each thing is mapped to a canonical variable with the same index.
     38 ( 0.00%)      pub fn is_identity(&self) -> bool {
     76 ( 0.00%)          match self.value {
      .                       UserType::Ty(_) => false,
      .                       UserType::TypeOf(_, user_substs) => {
     38 ( 0.00%)                  if user_substs.user_self_ty.is_some() {
      .                               return false;
      .                           }
      .           
      .                           iter::zip(user_substs.substs, BoundVar::new(0)..).all(|(kind, cvar)| {
      .                               match kind.unpack() {
     78 ( 0.00%)                          GenericArgKind::Type(ty) => match ty.kind() {
      .                                       ty::Bound(debruijn, b) => {
      .                                           // We only allow a `ty::INNERMOST` index in substitutions.
     39 ( 0.00%)                                  assert_eq!(*debruijn, ty::INNERMOST);
      .                                           cvar == b.var
      .                                       }
      .                                       _ => false,
      .                                   },
      .           
      2 ( 0.00%)                          GenericArgKind::Lifetime(r) => match r {
      .                                       ty::ReLateBound(debruijn, br) => {
      .                                           // We only allow a `ty::INNERMOST` index in substitutions.
      .                                           assert_eq!(*debruijn, ty::INNERMOST);
      .                                           cvar == br.var
      .                                       }
      .                                       _ => false,
      .                                   },
      .           
-- line 867 ----------------------------------------
-- line 872 ----------------------------------------
      .                                           cvar == b
      .                                       }
      .                                       _ => false,
      .                                   },
      .                               }
      .                           })
      .                       }
      .                   }
     76 ( 0.00%)      }
      .           }
      .           
      .           /// A user-given type annotation attached to a constant. These arise
      .           /// from constants that are named via paths, like `Foo::<A>::new` and
      .           /// so forth.
    138 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, TyEncodable, TyDecodable)]
    478 ( 0.00%)  #[derive(HashStable, TypeFoldable, Lift)]
      .           pub enum UserType<'tcx> {
      .               Ty(Ty<'tcx>),
      .           
      .               /// The canonical type is the result of `type_of(def_id)` with the
      .               /// given substitutions applied.
      .               TypeOf(DefId, UserSubsts<'tcx>),
      .           }
      .           
      .           impl<'tcx> CommonTypes<'tcx> {
      .               fn new(interners: &CtxtInterners<'tcx>) -> CommonTypes<'tcx> {
    111 ( 0.00%)          let mk = |ty| interners.intern_ty(ty);
      .           
      .                   CommonTypes {
      .                       unit: mk(Tuple(List::empty())),
      .                       bool: mk(Bool),
      .                       char: mk(Char),
      .                       never: mk(Never),
      .                       isize: mk(Int(ty::IntTy::Isize)),
      .                       i8: mk(Int(ty::IntTy::I8)),
-- line 906 ----------------------------------------
-- line 921 ----------------------------------------
      .           
      .                       trait_object_dummy_self: mk(Infer(ty::FreshTy(0))),
      .                   }
      .               }
      .           }
      .           
      .           impl<'tcx> CommonLifetimes<'tcx> {
      .               fn new(interners: &CtxtInterners<'tcx>) -> CommonLifetimes<'tcx> {
     67 ( 0.00%)          let mk = |r| interners.region.intern(r, |r| Interned(interners.arena.alloc(r))).0;
      .           
      .                   CommonLifetimes {
      5 ( 0.00%)              re_root_empty: mk(RegionKind::ReEmpty(ty::UniverseIndex::ROOT)),
      5 ( 0.00%)              re_static: mk(RegionKind::ReStatic),
      5 ( 0.00%)              re_erased: mk(RegionKind::ReErased),
      .                   }
      .               }
      .           }
      .           
      .           impl<'tcx> CommonConsts<'tcx> {
      .               fn new(interners: &CtxtInterners<'tcx>, types: &CommonTypes<'tcx>) -> CommonConsts<'tcx> {
      6 ( 0.00%)          let mk_const = |c| interners.const_.intern(c, |c| Interned(interners.arena.alloc(c))).0;
      .           
      .                   CommonConsts {
      .                       unit: mk_const(ty::Const {
      .                           val: ty::ConstKind::Value(ConstValue::Scalar(Scalar::ZST)),
      .                           ty: types.unit,
      .                       }),
      .                   }
      .               }
-- line 949 ----------------------------------------
-- line 1045 ----------------------------------------
      .           
      .               /// Stores memory for globals (statics/consts).
      .               pub(crate) alloc_map: Lock<interpret::AllocMap<'tcx>>,
      .           
      .               output_filenames: Arc<OutputFilenames>,
      .           }
      .           
      .           impl<'tcx> TyCtxt<'tcx> {
  3,280 ( 0.00%)      pub fn typeck_opt_const_arg(
      .                   self,
      .                   def: ty::WithOptConstParam<LocalDefId>,
      .               ) -> &'tcx TypeckResults<'tcx> {
  1,312 ( 0.00%)          if let Some(param_did) = def.const_param_did {
      .                       self.typeck_const_arg((def.did, param_did))
      .                   } else {
      .                       self.typeck(def.did)
      .                   }
  2,624 ( 0.00%)      }
      .           
    207 ( 0.00%)      pub fn alloc_steal_thir(self, thir: Thir<'tcx>) -> &'tcx Steal<Thir<'tcx>> {
     69 ( 0.00%)          self.arena.alloc(Steal::new(thir))
    276 ( 0.00%)      }
      .           
  1,180 ( 0.00%)      pub fn alloc_steal_mir(self, mir: Body<'tcx>) -> &'tcx Steal<Body<'tcx>> {
    236 ( 0.00%)          self.arena.alloc(Steal::new(mir))
  1,652 ( 0.00%)      }
      .           
    276 ( 0.00%)      pub fn alloc_steal_promoted(
      .                   self,
      .                   promoted: IndexVec<Promoted, Body<'tcx>>,
      .               ) -> &'tcx Steal<IndexVec<Promoted, Body<'tcx>>> {
     69 ( 0.00%)          self.arena.alloc(Steal::new(promoted))
    345 ( 0.00%)      }
      .           
     63 ( 0.00%)      pub fn alloc_adt_def(
      .                   self,
      .                   did: DefId,
      .                   kind: AdtKind,
      .                   variants: IndexVec<VariantIdx, ty::VariantDef>,
      .                   repr: ReprOptions,
      .               ) -> &'tcx ty::AdtDef {
    112 ( 0.00%)          self.intern_adt_def(ty::AdtDef::new(self, did, kind, variants, repr))
     28 ( 0.00%)      }
      .           
      .               /// Allocates a read-only byte or string literal for `mir::interpret`.
     10 ( 0.00%)      pub fn allocate_bytes(self, bytes: &[u8]) -> interpret::AllocId {
      .                   // Create an allocation that just contains these bytes.
      2 ( 0.00%)          let alloc = interpret::Allocation::from_bytes_byte_aligned_immutable(bytes);
     26 ( 0.00%)          let alloc = self.intern_const_alloc(alloc);
      .                   self.create_memory_alloc(alloc)
     10 ( 0.00%)      }
      .           
      .               /// Returns a range of the start/end indices specified with the
      .               /// `rustc_layout_scalar_valid_range` attribute.
      .               // FIXME(eddyb) this is an awkward spot for this method, maybe move it?
     80 ( 0.00%)      pub fn layout_scalar_valid_range(self, def_id: DefId) -> (Bound<u128>, Bound<u128>) {
     40 ( 0.00%)          let attrs = self.get_attrs(def_id);
    170 ( 0.00%)          let get = |name| {
     40 ( 0.00%)              let attr = match attrs.iter().find(|a| a.has_name(name)) {
      .                           Some(attr) => attr,
      .                           None => return Bound::Unbounded,
      .                       };
      .                       debug!("layout_scalar_valid_range: attr={:?}", attr);
      .                       if let Some(
      .                           &[
      .                               ast::NestedMetaItem::Literal(ast::Lit {
      .                                   kind: ast::LitKind::Int(a, _), ..
-- line 1111 ----------------------------------------
-- line 1114 ----------------------------------------
      .                       ) = attr.meta_item_list().as_deref()
      .                       {
      .                           Bound::Included(a)
      .                       } else {
      .                           self.sess
      .                               .delay_span_bug(attr.span, "invalid rustc_layout_scalar_valid_range attribute");
      .                           Bound::Unbounded
      .                       }
    200 ( 0.00%)          };
     60 ( 0.00%)          (
     60 ( 0.00%)              get(sym::rustc_layout_scalar_valid_range_start),
     30 ( 0.00%)              get(sym::rustc_layout_scalar_valid_range_end),
      .                   )
     80 ( 0.00%)      }
      .           
      .               pub fn lift<T: Lift<'tcx>>(self, value: T) -> Option<T::Lifted> {
      .                   value.lift_to_tcx(self)
      .               }
      .           
      .               /// Creates a type context and call the closure with a `TyCtxt` reference
      .               /// to the context. The closure enforces that the type context and any interned
      .               /// value (types, substs, etc.) can only be used while `ty::tls` has a valid
      .               /// reference to the context, to allow formatting values that need it.
     23 ( 0.00%)      pub fn create_global_ctxt(
      .                   s: &'tcx Session,
      .                   lint_store: Lrc<dyn Any + sync::Send + sync::Sync>,
      .                   arena: &'tcx WorkerLocal<Arena<'tcx>>,
      .                   resolutions: ty::ResolverOutputs,
      .                   krate: &'tcx hir::Crate<'tcx>,
      .                   dep_graph: DepGraph,
      .                   on_disk_cache: Option<&'tcx dyn OnDiskCache<'tcx>>,
      .                   queries: &'tcx dyn query::QueryEngine<'tcx>,
      .                   query_kinds: &'tcx [DepKindStruct],
      .                   crate_name: &str,
      .                   output_filenames: OutputFilenames,
      .               ) -> GlobalCtxt<'tcx> {
      1 ( 0.00%)          let data_layout = TargetDataLayout::parse(&s.target).unwrap_or_else(|err| {
      .                       s.fatal(&err);
      .                   });
      .                   let interners = CtxtInterners::new(arena);
      .                   let common_types = CommonTypes::new(&interners);
      .                   let common_lifetimes = CommonLifetimes::new(&interners);
      .                   let common_consts = CommonConsts::new(&interners, &common_types);
      .           
    127 ( 0.00%)          GlobalCtxt {
      .                       sess: s,
      6 ( 0.00%)              lint_store,
      .                       arena,
      2 ( 0.00%)              interners,
      5 ( 0.00%)              dep_graph,
      4 ( 0.00%)              untracked_resolutions: resolutions,
      2 ( 0.00%)              prof: s.prof.clone(),
      .                       types: common_types,
      .                       lifetimes: common_lifetimes,
      .                       consts: common_consts,
      .                       untracked_crate: krate,
      .                       on_disk_cache,
      .                       queries,
      .                       query_caches: query::QueryCaches::default(),
      .                       query_kinds,
      .                       ty_rcache: Default::default(),
      .                       pred_rcache: Default::default(),
      .                       selection_cache: Default::default(),
      .                       evaluation_cache: Default::default(),
      1 ( 0.00%)              crate_name: Symbol::intern(crate_name),
      .                       data_layout,
      .                       alloc_map: Lock::new(interpret::AllocMap::new()),
      .                       output_filenames: Arc::new(output_filenames),
      .                   }
      9 ( 0.00%)      }
      .           
      .               crate fn query_kind(self, k: DepKind) -> &'tcx DepKindStruct {
      .                   &self.query_kinds[k as usize]
      .               }
      .           
      .               /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` to ensure it gets used.
      .               #[track_caller]
      .               pub fn ty_error(self) -> Ty<'tcx> {
-- line 1191 ----------------------------------------
-- line 1217 ----------------------------------------
      .                   ty: Ty<'tcx>,
      .                   span: S,
      .                   msg: &str,
      .               ) -> &'tcx Const<'tcx> {
      .                   self.sess.delay_span_bug(span, msg);
      .                   self.mk_const(ty::Const { val: ty::ConstKind::Error(DelaySpanBugEmitted(())), ty })
      .               }
      .           
     21 ( 0.00%)      pub fn consider_optimizing<T: Fn() -> String>(self, msg: T) -> bool {
      3 ( 0.00%)          let cname = self.crate_name(LOCAL_CRATE);
     24 ( 0.00%)          self.sess.consider_optimizing(cname.as_str(), msg)
     24 ( 0.00%)      }
      .           
      .               /// Obtain all lang items of this crate and all dependencies (recursively)
155,078 ( 0.04%)      pub fn lang_items(self) -> &'tcx rustc_hir::lang_items::LanguageItems {
      .                   self.get_lang_items(())
199,386 ( 0.05%)      }
      .           
      .               /// Obtain the given diagnostic item's `DefId`. Use `is_diagnostic_item` if you just want to
      .               /// compare against another `DefId`, since `is_diagnostic_item` is cheaper.
      7 ( 0.00%)      pub fn get_diagnostic_item(self, name: Symbol) -> Option<DefId> {
      .                   self.all_diagnostic_items(()).name_to_id.get(&name).copied()
      8 ( 0.00%)      }
      .           
      .               /// Obtain the diagnostic item's name
  2,863 ( 0.00%)      pub fn get_diagnostic_name(self, id: DefId) -> Option<Symbol> {
      .                   self.diagnostic_items(id.krate).id_to_name.get(&id).copied()
  3,272 ( 0.00%)      }
      .           
      .               /// Check whether the diagnostic item with the given `name` has the given `DefId`.
  3,745 ( 0.00%)      pub fn is_diagnostic_item(self, name: Symbol, did: DefId) -> bool {
      .                   self.diagnostic_items(did.krate).name_to_id.get(&name) == Some(&did)
  4,280 ( 0.00%)      }
      .           
    714 ( 0.00%)      pub fn stability(self) -> &'tcx stability::Index<'tcx> {
      .                   self.stability_index(())
    918 ( 0.00%)      }
      .           
 59,745 ( 0.02%)      pub fn features(self) -> &'tcx rustc_feature::Features {
      .                   self.features_query(())
 68,280 ( 0.02%)      }
      .           
      .               pub fn def_key(self, id: DefId) -> rustc_hir::definitions::DefKey {
      .                   // Accessing the DefKey is ok, since it is part of DefPathHash.
    863 ( 0.00%)          if let Some(id) = id.as_local() {
      .                       self.untracked_resolutions.definitions.def_key(id)
      .                   } else {
    120 ( 0.00%)              self.untracked_resolutions.cstore.def_key(id)
      .                   }
      .               }
      .           
      .               /// Converts a `DefId` into its fully expanded `DefPath` (every
      .               /// `DefId` is really just an interned `DefPath`).
      .               ///
      .               /// Note that if `id` is not local to this crate, the result will
      .               ///  be a non-local `DefPath`.
-- line 1272 ----------------------------------------
-- line 1277 ----------------------------------------
      .                   } else {
      .                       self.untracked_resolutions.cstore.def_path(id)
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn def_path_hash(self, def_id: DefId) -> rustc_hir::definitions::DefPathHash {
      .                   // Accessing the DefPathHash is ok, it is incr. comp. stable.
    433 ( 0.00%)          if let Some(def_id) = def_id.as_local() {
      .                       self.untracked_resolutions.definitions.def_path_hash(def_id)
      .                   } else {
     44 ( 0.00%)              self.untracked_resolutions.cstore.def_path_hash(def_id)
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn stable_crate_id(self, crate_num: CrateNum) -> StableCrateId {
      .                   if crate_num == LOCAL_CRATE {
      .                       self.sess.local_stable_crate_id()
      .                   } else {
-- line 1296 ----------------------------------------
-- line 1353 ----------------------------------------
      .                       &(format!("{:08x}", stable_crate_id.to_u64()))[..4],
      .                       self.def_path(def_id).to_string_no_crate_verbose()
      .                   )
      .               }
      .           
      .               /// Note that this is *untracked* and should only be used within the query
      .               /// system if the result is otherwise tracked through queries
      .               pub fn cstore_untracked(self) -> &'tcx ty::CrateStoreDyn {
 13,920 ( 0.00%)          &*self.untracked_resolutions.cstore
  6,960 ( 0.00%)      }
      .           
      .               /// Note that this is *untracked* and should only be used within the query
      .               /// system if the result is otherwise tracked through queries
      .               pub fn definitions_untracked(self) -> &'tcx hir::definitions::Definitions {
      .                   &self.untracked_resolutions.definitions
      .               }
      .           
      .               #[inline(always)]
      .               pub fn create_stable_hashing_context(self) -> StableHashingContext<'tcx> {
     26 ( 0.00%)          let resolutions = &self.gcx.untracked_resolutions;
    129 ( 0.00%)          StableHashingContext::new(self.sess, &resolutions.definitions, &*resolutions.cstore)
      .               }
      .           
      .               #[inline(always)]
      .               pub fn create_no_span_stable_hashing_context(self) -> StableHashingContext<'tcx> {
      .                   let resolutions = &self.gcx.untracked_resolutions;
      .                   StableHashingContext::ignore_spans(
      .                       self.sess,
      .                       &resolutions.definitions,
-- line 1381 ----------------------------------------
-- line 1390 ----------------------------------------
      .               /// If `true`, we should use the MIR-based borrowck, but also
      .               /// fall back on the AST borrowck if the MIR-based one errors.
      .               pub fn migrate_borrowck(self) -> bool {
      .                   self.borrowck_mode().migrate()
      .               }
      .           
      .               /// What mode(s) of borrowck should we run? AST? MIR? both?
      .               /// (Also considers the `#![feature(nll)]` setting.)
    138 ( 0.00%)      pub fn borrowck_mode(self) -> BorrowckMode {
      .                   // Here are the main constraints we need to deal with:
      .                   //
      .                   // 1. An opts.borrowck_mode of `BorrowckMode::Migrate` is
      .                   //    synonymous with no `-Z borrowck=...` flag at all.
      .                   //
      .                   // 2. We want to allow developers on the Nightly channel
      .                   //    to opt back into the "hard error" mode for NLL,
      .                   //    (which they can do via specifying `#![feature(nll)]`
-- line 1406 ----------------------------------------
-- line 1413 ----------------------------------------
      .                   //   errors. (To simplify the code here, it now even overrides
      .                   //   a user's attempt to specify `-Z borrowck=compare`, which
      .                   //   we arguably do not need anymore and should remove.)
      .                   //
      .                   // * Otherwise, if no `-Z borrowck=...` then use migrate mode
      .                   //
      .                   // * Otherwise, use the behavior requested via `-Z borrowck=...`
      .           
    207 ( 0.00%)          if self.features().nll {
      .                       return BorrowckMode::Mir;
      .                   }
      .           
     69 ( 0.00%)          self.sess.opts.borrowck_mode
    276 ( 0.00%)      }
      .           
      .               /// If `true`, we should use lazy normalization for constants, otherwise
      .               /// we still evaluate them eagerly.
      .               #[inline]
      .               pub fn lazy_normalization(self) -> bool {
     37 ( 0.00%)          let features = self.features();
      .                   // Note: We only use lazy normalization for generic const expressions.
     27 ( 0.00%)          features.generic_const_exprs
      .               }
      .           
      .               #[inline]
      .               pub fn local_crate_exports_generics(self) -> bool {
      .                   debug_assert!(self.sess.opts.share_generics());
      .           
      .                   self.sess.crate_types().iter().any(|crate_type| {
      .                       match crate_type {
-- line 1442 ----------------------------------------
-- line 1554 ----------------------------------------
      .                   self.mk_imm_ref(
      .                       self.lifetimes.re_static,
      .                       self.type_of(self.require_lang_item(LangItem::PanicLocation, None))
      .                           .subst(self, self.mk_substs([self.lifetimes.re_static.into()].iter())),
      .                   )
      .               }
      .           
      .               /// Returns a displayable description and article for the given `def_id` (e.g. `("a", "struct")`).
    836 ( 0.00%)      pub fn article_and_description(self, def_id: DefId) -> (&'static str, &'static str) {
    608 ( 0.00%)          match self.def_kind(def_id) {
      .                       DefKind::Generator => match self.generator_kind(def_id).unwrap() {
      .                           rustc_hir::GeneratorKind::Async(..) => ("an", "async closure"),
      .                           rustc_hir::GeneratorKind::Gen => ("a", "generator"),
      .                       },
  1,368 ( 0.00%)              def_kind => (def_kind.article(), def_kind.descr(def_id)),
      .                   }
    684 ( 0.00%)      }
      .           
      .               pub fn type_length_limit(self) -> Limit {
      .                   self.limits(()).type_length_limit
      .               }
      .           
 38,661 ( 0.01%)      pub fn recursion_limit(self) -> Limit {
      .                   self.limits(()).recursion_limit
 44,184 ( 0.01%)      }
      .           
      .               pub fn move_size_limit(self) -> Limit {
      .                   self.limits(()).move_size_limit
      .               }
      .           
    343 ( 0.00%)      pub fn const_eval_limit(self) -> Limit {
      .                   self.limits(()).const_eval_limit
    392 ( 0.00%)      }
      .           
      .               pub fn all_traits(self) -> impl Iterator<Item = DefId> + 'tcx {
      .                   iter::once(LOCAL_CRATE)
      .                       .chain(self.crates(()).iter().copied())
      .                       .flat_map(move |cnum| self.traits_in_crate(cnum).iter().copied())
      .               }
      .           }
      .           
-- line 1594 ----------------------------------------
-- line 1684 ----------------------------------------
      .               /// This is the implicit state of rustc. It contains the current
      .               /// `TyCtxt` and query. It is updated when creating a local interner or
      .               /// executing a new query. Whenever there's a `TyCtxt` value available
      .               /// you should also have access to an `ImplicitCtxt` through the functions
      .               /// in this module.
      .               #[derive(Clone)]
      .               pub struct ImplicitCtxt<'a, 'tcx> {
      .                   /// The current `TyCtxt`.
      1 ( 0.00%)          pub tcx: TyCtxt<'tcx>,
      .           
      .                   /// The current query job, if any. This is updated by `JobOwner::start` in
      .                   /// `ty::query::plumbing` when executing a query.
      .                   pub query: Option<query::QueryJobId<DepKind>>,
      .           
      .                   /// Where to store diagnostics for the current query job, if any.
      .                   /// This is updated by `JobOwner::start` in `ty::query::plumbing` when executing a query.
      .                   pub diagnostics: Option<&'a Lock<ThinVec<Diagnostic>>>,
-- line 1700 ----------------------------------------
-- line 1703 ----------------------------------------
      .                   pub layout_depth: usize,
      .           
      .                   /// The current dep graph task. This is used to add dependencies to queries
      .                   /// when executing them.
      .                   pub task_deps: TaskDepsRef<'a>,
      .               }
      .           
      .               impl<'a, 'tcx> ImplicitCtxt<'a, 'tcx> {
      5 ( 0.00%)          pub fn new(gcx: &'tcx GlobalCtxt<'tcx>) -> Self {
      .                       let tcx = TyCtxt { gcx };
     25 ( 0.00%)              ImplicitCtxt {
      .                           tcx,
      .                           query: None,
      .                           diagnostics: None,
      .                           layout_depth: 0,
      .                           task_deps: TaskDepsRef::Ignore,
      .                       }
      5 ( 0.00%)          }
      .               }
      .           
      .               /// Sets Rayon's thread-local variable, which is preserved for Rayon jobs
      .               /// to `value` during the call to `f`. It is restored to its previous value after.
      .               /// This is used to set the pointer to the new `ImplicitCtxt`.
      .               #[cfg(parallel_compiler)]
      .               #[inline]
      .               fn set_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {
-- line 1728 ----------------------------------------
-- line 1745 ----------------------------------------
      .           
      .               /// Sets TLV to `value` during the call to `f`.
      .               /// It is restored to its previous value after.
      .               /// This is used to set the pointer to the new `ImplicitCtxt`.
      .               #[cfg(not(parallel_compiler))]
      .               #[inline]
      .               fn set_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {
      .                   let old = get_tlv();
 15,523 ( 0.00%)          let _reset = rustc_data_structures::OnDrop(move || TLV.with(|tlv| tlv.set(old)));
      .                   TLV.with(|tlv| tlv.set(value));
      .                   f()
      .               }
      .           
      .               /// Gets the pointer to the current `ImplicitCtxt`.
      .               #[cfg(not(parallel_compiler))]
      .               #[inline]
      .               fn get_tlv() -> usize {
-- line 1761 ----------------------------------------
-- line 1763 ----------------------------------------
      .               }
      .           
      .               /// Sets `context` as the new current `ImplicitCtxt` for the duration of the function `f`.
      .               #[inline]
      .               pub fn enter_context<'a, 'tcx, F, R>(context: &ImplicitCtxt<'a, 'tcx>, f: F) -> R
      .               where
      .                   F: FnOnce(&ImplicitCtxt<'a, 'tcx>) -> R,
      .               {
      1 ( 0.00%)          set_tlv(context as *const _ as usize, || f(&context))
      .               }
      .           
      .               /// Allows access to the current `ImplicitCtxt` in a closure if one is available.
      .               #[inline]
      .               pub fn with_context_opt<F, R>(f: F) -> R
      .               where
      .                   F: for<'a, 'tcx> FnOnce(Option<&ImplicitCtxt<'a, 'tcx>>) -> R,
      .               {
      .                   let context = get_tlv();
 63,743 ( 0.02%)          if context == 0 {
      .                       f(None)
      .                   } else {
      .                       // We could get an `ImplicitCtxt` pointer from another thread.
      .                       // Ensure that `ImplicitCtxt` is `Sync`.
      .                       sync::assert_sync::<ImplicitCtxt<'_, '_>>();
      .           
      .                       unsafe { f(Some(&*(context as *const ImplicitCtxt<'_, '_>))) }
      .                   }
-- line 1789 ----------------------------------------
-- line 1805 ----------------------------------------
      .               /// This will panic if you pass it a `TyCtxt` which is different from the current
      .               /// `ImplicitCtxt`'s `tcx` field.
      .               #[inline]
      .               pub fn with_related_context<'tcx, F, R>(tcx: TyCtxt<'tcx>, f: F) -> R
      .               where
      .                   F: FnOnce(&ImplicitCtxt<'_, 'tcx>) -> R,
      .               {
      .                   with_context(|context| unsafe {
 31,518 ( 0.01%)              assert!(ptr_eq(context.tcx.gcx, tcx.gcx));
      .                       let context: &ImplicitCtxt<'_, '_> = mem::transmute(context);
 31,490 ( 0.01%)              f(context)
      .                   })
      .               }
      .           
      .               /// Allows access to the `TyCtxt` in the current `ImplicitCtxt`.
      .               /// Panics if there is no `ImplicitCtxt` available.
      .               #[inline]
      .               pub fn with<F, R>(f: F) -> R
      .               where
-- line 1823 ----------------------------------------
-- line 1981 ----------------------------------------
      .               fn into_pointer(&self) -> *const () {
      .                   self.0 as *const _ as *const ()
      .               }
      .           }
      .           
      .           #[allow(rustc::usage_of_ty_tykind)]
      .           impl<'tcx> Borrow<TyKind<'tcx>> for Interned<'tcx, TyS<'tcx>> {
      .               fn borrow<'a>(&'a self) -> &'a TyKind<'tcx> {
 20,996 ( 0.01%)          &self.0.kind()
      .               }
      .           }
      .           
      .           impl<'tcx> PartialEq for Interned<'tcx, TyS<'tcx>> {
      .               fn eq(&self, other: &Interned<'tcx, TyS<'tcx>>) -> bool {
      .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
      .                   // `x == y`.
      .                   self.0.kind() == other.0.kind()
-- line 1997 ----------------------------------------
-- line 1998 ----------------------------------------
      .               }
      .           }
      .           
      .           impl<'tcx> Eq for Interned<'tcx, TyS<'tcx>> {}
      .           
      .           impl<'tcx> Hash for Interned<'tcx, TyS<'tcx>> {
      .               fn hash<H: Hasher>(&self, s: &mut H) {
      .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
 21,492 ( 0.01%)          self.0.kind().hash(s)
      .               }
      .           }
      .           
      .           impl<'tcx> Borrow<Binder<'tcx, PredicateKind<'tcx>>> for Interned<'tcx, PredicateInner<'tcx>> {
      .               fn borrow<'a>(&'a self) -> &'a Binder<'tcx, PredicateKind<'tcx>> {
 14,074 ( 0.00%)          &self.0.kind
      .               }
      .           }
      .           
      .           impl<'tcx> PartialEq for Interned<'tcx, PredicateInner<'tcx>> {
      .               fn eq(&self, other: &Interned<'tcx, PredicateInner<'tcx>>) -> bool {
      .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
      .                   // `x == y`.
      .                   self.0.kind == other.0.kind
-- line 2020 ----------------------------------------
-- line 2021 ----------------------------------------
      .               }
      .           }
      .           
      .           impl<'tcx> Eq for Interned<'tcx, PredicateInner<'tcx>> {}
      .           
      .           impl<'tcx> Hash for Interned<'tcx, PredicateInner<'tcx>> {
      .               fn hash<H: Hasher>(&self, s: &mut H) {
      .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
  3,580 ( 0.00%)          self.0.kind.hash(s)
      .               }
      .           }
      .           
      .           impl<'tcx, T> Borrow<[T]> for Interned<'tcx, List<T>> {
      .               fn borrow<'a>(&'a self) -> &'a [T] {
 33,213 ( 0.01%)          &self.0[..]
      .               }
      .           }
      .           
      .           impl<'tcx, T: PartialEq> PartialEq for Interned<'tcx, List<T>> {
      .               fn eq(&self, other: &Interned<'tcx, List<T>>) -> bool {
      .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
      .                   // `x == y`.
      .                   self.0[..] == other.0[..]
-- line 2043 ----------------------------------------
-- line 2044 ----------------------------------------
      .               }
      .           }
      .           
      .           impl<'tcx, T: Eq> Eq for Interned<'tcx, List<T>> {}
      .           
      .           impl<'tcx, T: Hash> Hash for Interned<'tcx, List<T>> {
      .               fn hash<H: Hasher>(&self, s: &mut H) {
      .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
  8,989 ( 0.00%)          self.0[..].hash(s)
      .               }
      .           }
      .           
      .           macro_rules! direct_interners {
      .               ($($name:ident: $method:ident($ty:ty),)+) => {
      .                   $(impl<'tcx> Borrow<$ty> for Interned<'tcx, $ty> {
      .                       fn borrow<'a>(&'a self) -> &'a $ty {
  3,849 ( 0.00%)                  &self.0
      .                       }
      .                   }
      .           
      .                   impl<'tcx> PartialEq for Interned<'tcx, $ty> {
      .                       fn eq(&self, other: &Self) -> bool {
      .                           // The `Borrow` trait requires that `x.borrow() == y.borrow()`
      .                           // equals `x == y`.
      .                           self.0 == other.0
-- line 2068 ----------------------------------------
-- line 2070 ----------------------------------------
      .                   }
      .           
      .                   impl<'tcx> Eq for Interned<'tcx, $ty> {}
      .           
      .                   impl<'tcx> Hash for Interned<'tcx, $ty> {
      .                       fn hash<H: Hasher>(&self, s: &mut H) {
      .                           // The `Borrow` trait requires that `x.borrow().hash(s) ==
      .                           // x.hash(s)`.
  8,235 ( 0.00%)                  self.0.hash(s)
      .                       }
      .                   }
      .           
      .                   impl<'tcx> TyCtxt<'tcx> {
 49,200 ( 0.01%)              pub fn $method(self, v: $ty) -> &'tcx $ty {
 29,222 ( 0.01%)                  self.interners.$name.intern(v, |v| {
  2,495 ( 0.00%)                      Interned(self.interners.arena.alloc(v))
      .                           }).0
 55,179 ( 0.01%)              }
      .                   })+
      .               }
      .           }
      .           
      .           direct_interners! {
      .               region: mk_region(RegionKind),
      .               const_: mk_const(Const<'tcx>),
      .               const_allocation: intern_const_alloc(Allocation),
-- line 2095 ----------------------------------------
-- line 2097 ----------------------------------------
      .               adt_def: intern_adt_def(AdtDef),
      .               stability: intern_stability(attr::Stability),
      .               const_stability: intern_const_stability(attr::ConstStability),
      .           }
      .           
      .           macro_rules! slice_interners {
      .               ($($field:ident: $method:ident($ty:ty)),+ $(,)?) => (
      .                   impl<'tcx> TyCtxt<'tcx> {
369,270 ( 0.10%)              $(pub fn $method(self, v: &[$ty]) -> &'tcx List<$ty> {
      .                           self.interners.$field.intern_ref(v, || {
      .                               Interned(List::from_arena(&*self.arena, v))
      .                           }).0
329,562 ( 0.09%)              })+
      .                   }
      .               );
      .           }
      .           
      .           slice_interners!(
      .               type_list: _intern_type_list(Ty<'tcx>),
      .               substs: _intern_substs(GenericArg<'tcx>),
      .               canonical_var_infos: _intern_canonical_var_infos(CanonicalVarInfo<'tcx>),
-- line 2117 ----------------------------------------
-- line 2188 ----------------------------------------
      .                       self.mk_fn_sig(params_iter, s.output(), s.c_variadic, unsafety, abi::Abi::Rust)
      .                   })
      .               }
      .           
      .               /// Same a `self.mk_region(kind)`, but avoids accessing the interners if
      .               /// `*r == kind`.
      .               #[inline]
      .               pub fn reuse_or_mk_region(self, r: Region<'tcx>, kind: RegionKind) -> Region<'tcx> {
  1,268 ( 0.00%)          if *r == kind { r } else { self.mk_region(kind) }
      .               }
      .           
      .               #[allow(rustc::usage_of_ty_tykind)]
      .               #[inline]
      .               pub fn mk_ty(self, st: TyKind<'tcx>) -> Ty<'tcx> {
173,989 ( 0.04%)          self.interners.intern_ty(st)
      .               }
      .           
      .               #[inline]
      .               pub fn mk_predicate(self, binder: Binder<'tcx, PredicateKind<'tcx>>) -> Predicate<'tcx> {
187,902 ( 0.05%)          let inner = self.interners.intern_predicate(binder);
      .                   Predicate { inner }
      .               }
      .           
      .               #[inline]
 92,992 ( 0.02%)      pub fn reuse_or_mk_predicate(
      .                   self,
      .                   pred: Predicate<'tcx>,
      .                   binder: Binder<'tcx, PredicateKind<'tcx>>,
      .               ) -> Predicate<'tcx> {
  6,895 ( 0.00%)          if pred.kind() != binder { self.mk_predicate(binder) } else { pred }
 92,992 ( 0.02%)      }
      .           
      .               pub fn mk_mach_int(self, tm: IntTy) -> Ty<'tcx> {
    309 ( 0.00%)          match tm {
      .                       IntTy::Isize => self.types.isize,
      .                       IntTy::I8 => self.types.i8,
      .                       IntTy::I16 => self.types.i16,
      .                       IntTy::I32 => self.types.i32,
      .                       IntTy::I64 => self.types.i64,
      .                       IntTy::I128 => self.types.i128,
      .                   }
    309 ( 0.00%)      }
      .           
      .               pub fn mk_mach_uint(self, tm: UintTy) -> Ty<'tcx> {
    587 ( 0.00%)          match tm {
      .                       UintTy::Usize => self.types.usize,
      .                       UintTy::U8 => self.types.u8,
      .                       UintTy::U16 => self.types.u16,
      .                       UintTy::U32 => self.types.u32,
      .                       UintTy::U64 => self.types.u64,
      .                       UintTy::U128 => self.types.u128,
      .                   }
    587 ( 0.00%)      }
      .           
      .               pub fn mk_mach_float(self, tm: FloatTy) -> Ty<'tcx> {
     12 ( 0.00%)          match tm {
      .                       FloatTy::F32 => self.types.f32,
      .                       FloatTy::F64 => self.types.f64,
      .                   }
     12 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn mk_static_str(self) -> Ty<'tcx> {
     56 ( 0.00%)          self.mk_imm_ref(self.lifetimes.re_static, self.types.str_)
      .               }
      .           
      .               #[inline]
      .               pub fn mk_adt(self, def: &'tcx AdtDef, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
      .                   // Take a copy of substs so that we own the vectors inside.
      .                   self.mk_ty(Adt(def, substs))
      .               }
      .           
-- line 2259 ----------------------------------------
-- line 2329 ----------------------------------------
      .               }
      .           
      .               #[inline]
      .               pub fn mk_imm_ptr(self, ty: Ty<'tcx>) -> Ty<'tcx> {
      .                   self.mk_ptr(TypeAndMut { ty, mutbl: hir::Mutability::Not })
      .               }
      .           
      .               #[inline]
     67 ( 0.00%)      pub fn mk_array(self, ty: Ty<'tcx>, n: u64) -> Ty<'tcx> {
      .                   self.mk_ty(Array(ty, ty::Const::from_usize(self, n)))
     72 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn mk_slice(self, ty: Ty<'tcx>) -> Ty<'tcx> {
      .                   self.mk_ty(Slice(ty))
      .               }
      .           
      .               #[inline]
      .               pub fn intern_tup(self, ts: &[Ty<'tcx>]) -> Ty<'tcx> {
  1,888 ( 0.00%)          let kinds: Vec<_> = ts.iter().map(|&t| GenericArg::from(t)).collect();
  3,065 ( 0.00%)          self.mk_ty(Tuple(self.intern_substs(&kinds)))
      .               }
      .           
      .               pub fn mk_tup<I: InternAs<[Ty<'tcx>], Ty<'tcx>>>(self, iter: I) -> I::Output {
    790 ( 0.00%)          iter.intern_with(|ts| {
  8,084 ( 0.00%)              let kinds: Vec<_> = ts.iter().map(|&t| GenericArg::from(t)).collect();
 11,570 ( 0.00%)              self.mk_ty(Tuple(self.intern_substs(&kinds)))
    711 ( 0.00%)          })
      .               }
      .           
      .               #[inline]
      .               pub fn mk_unit(self) -> Ty<'tcx> {
    232 ( 0.00%)          self.types.unit
      .               }
      .           
      .               #[inline]
      .               pub fn mk_diverging_default(self) -> Ty<'tcx> {
      .                   if self.features().never_type_fallback { self.types.never } else { self.types.unit }
      .               }
      .           
      .               #[inline]
      .               pub fn mk_fn_def(self, def_id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
      .                   self.mk_ty(FnDef(def_id, substs))
      .               }
      .           
      .               #[inline]
      .               pub fn mk_fn_ptr(self, fty: PolyFnSig<'tcx>) -> Ty<'tcx> {
      2 ( 0.00%)          self.mk_ty(FnPtr(fty))
      .               }
      .           
      .               #[inline]
      .               pub fn mk_dynamic(
      .                   self,
      .                   obj: &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>>,
      .                   reg: ty::Region<'tcx>,
      .               ) -> Ty<'tcx> {
-- line 2384 ----------------------------------------
-- line 2412 ----------------------------------------
      .           
      .               #[inline]
      .               pub fn mk_ty_var(self, v: TyVid) -> Ty<'tcx> {
      .                   self.mk_ty_infer(TyVar(v))
      .               }
      .           
      .               #[inline]
      .               pub fn mk_const_var(self, v: ConstVid<'tcx>, ty: Ty<'tcx>) -> &'tcx Const<'tcx> {
    330 ( 0.00%)          self.mk_const(ty::Const { val: ty::ConstKind::Infer(InferConst::Var(v)), ty })
      .               }
      .           
      .               #[inline]
      .               pub fn mk_int_var(self, v: IntVid) -> Ty<'tcx> {
      .                   self.mk_ty_infer(IntVar(v))
      .               }
      .           
      .               #[inline]
-- line 2428 ----------------------------------------
-- line 2445 ----------------------------------------
      .                   self.mk_ty(Param(ParamTy { index, name }))
      .               }
      .           
      .               #[inline]
      .               pub fn mk_const_param(self, index: u32, name: Symbol, ty: Ty<'tcx>) -> &'tcx Const<'tcx> {
      .                   self.mk_const(ty::Const { val: ty::ConstKind::Param(ParamConst { index, name }), ty })
      .               }
      .           
    427 ( 0.00%)      pub fn mk_param_from_def(self, param: &ty::GenericParamDef) -> GenericArg<'tcx> {
    305 ( 0.00%)          match param.kind {
      .                       GenericParamDefKind::Lifetime => {
      .                           self.mk_region(ty::ReEarlyBound(param.to_early_bound_region_data())).into()
      .                       }
    122 ( 0.00%)              GenericParamDefKind::Type { .. } => self.mk_ty_param(param.index, param.name).into(),
      .                       GenericParamDefKind::Const { .. } => {
      .                           self.mk_const_param(param.index, param.name, self.type_of(param.def_id)).into()
      .                       }
      .                   }
    427 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn mk_opaque(self, def_id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
      .                   self.mk_ty(Opaque(def_id, substs))
      .               }
      .           
  1,806 ( 0.00%)      pub fn mk_place_field(self, place: Place<'tcx>, f: Field, ty: Ty<'tcx>) -> Place<'tcx> {
  1,806 ( 0.00%)          self.mk_place_elem(place, PlaceElem::Field(f, ty))
  3,612 ( 0.00%)      }
      .           
      .               pub fn mk_place_deref(self, place: Place<'tcx>) -> Place<'tcx> {
      .                   self.mk_place_elem(place, PlaceElem::Deref)
      .               }
      .           
      .               pub fn mk_place_downcast(
      .                   self,
      .                   place: Place<'tcx>,
-- line 2480 ----------------------------------------
-- line 2497 ----------------------------------------
      .           
      .               pub fn mk_place_index(self, place: Place<'tcx>, index: Local) -> Place<'tcx> {
      .                   self.mk_place_elem(place, PlaceElem::Index(index))
      .               }
      .           
      .               /// This method copies `Place`'s projection, add an element and reintern it. Should not be used
      .               /// to build a full `Place` it's just a convenient way to grab a projection and modify it in
      .               /// flight.
 16,254 ( 0.00%)      pub fn mk_place_elem(self, place: Place<'tcx>, elem: PlaceElem<'tcx>) -> Place<'tcx> {
      .                   let mut projection = place.projection.to_vec();
      .                   projection.push(elem);
      .           
      .                   Place { local: place.local, projection: self.intern_place_elems(&projection) }
 18,060 ( 0.00%)      }
      .           
     21 ( 0.00%)      pub fn intern_poly_existential_predicates(
      .                   self,
      .                   eps: &[ty::Binder<'tcx, ExistentialPredicate<'tcx>>],
      .               ) -> &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>> {
      3 ( 0.00%)          assert!(!eps.is_empty());
      .                   assert!(
      .                       eps.array_windows()
     15 ( 0.00%)                  .all(|[a, b]| a.skip_binder().stable_cmp(self, &b.skip_binder())
      .                               != Ordering::Greater)
      .                   );
     12 ( 0.00%)          self._intern_poly_existential_predicates(eps)
     24 ( 0.00%)      }
      .           
      .               pub fn intern_predicates(self, preds: &[Predicate<'tcx>]) -> &'tcx List<Predicate<'tcx>> {
      .                   // FIXME consider asking the input slice to be sorted to avoid
      .                   // re-interning permutations, in which case that would be asserted
      .                   // here.
  1,664 ( 0.00%)          if preds.is_empty() {
      .                       // The macro-generated method below asserts we don't intern an empty slice.
      .                       List::empty()
      .                   } else {
     80 ( 0.00%)              self._intern_predicates(preds)
      .                   }
  3,168 ( 0.00%)      }
      .           
      .               pub fn intern_type_list(self, ts: &[Ty<'tcx>]) -> &'tcx List<Ty<'tcx>> {
  5,136 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_type_list(ts) }
     12 ( 0.00%)      }
      .           
      .               pub fn intern_substs(self, ts: &[GenericArg<'tcx>]) -> &'tcx List<GenericArg<'tcx>> {
 57,783 ( 0.01%)          if ts.is_empty() { List::empty() } else { self._intern_substs(ts) }
  4,542 ( 0.00%)      }
      .           
      .               pub fn intern_projs(self, ps: &[ProjectionKind]) -> &'tcx List<ProjectionKind> {
      .                   if ps.is_empty() { List::empty() } else { self._intern_projs(ps) }
      .               }
      .           
      .               pub fn intern_place_elems(self, ts: &[PlaceElem<'tcx>]) -> &'tcx List<PlaceElem<'tcx>> {
  5,571 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_place_elems(ts) }
  1,498 ( 0.00%)      }
      .           
      .               pub fn intern_canonical_var_infos(
      .                   self,
      .                   ts: &[CanonicalVarInfo<'tcx>],
      .               ) -> CanonicalVarInfos<'tcx> {
  1,411 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_canonical_var_infos(ts) }
    118 ( 0.00%)      }
      .           
      .               pub fn intern_bound_variable_kinds(
      .                   self,
      .                   ts: &[ty::BoundVariableKind],
      .               ) -> &'tcx List<ty::BoundVariableKind> {
    539 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_bound_variable_kinds(ts) }
    872 ( 0.00%)      }
      .           
      .               pub fn mk_fn_sig<I>(
      .                   self,
      .                   inputs: I,
      .                   output: I::Item,
      .                   c_variadic: bool,
      .                   unsafety: hir::Unsafety,
      .                   abi: abi::Abi,
      .               ) -> <I::Item as InternIteratorElement<Ty<'tcx>, ty::FnSig<'tcx>>>::Output
      .               where
      .                   I: Iterator<Item: InternIteratorElement<Ty<'tcx>, ty::FnSig<'tcx>>>,
      .               {
      .                   inputs.chain(iter::once(output)).intern_with(|xs| ty::FnSig {
    261 ( 0.00%)              inputs_and_output: self.intern_type_list(xs),
     62 ( 0.00%)              c_variadic,
     81 ( 0.00%)              unsafety,
     86 ( 0.00%)              abi,
      .                   })
      .               }
      .           
      .               pub fn mk_poly_existential_predicates<
      .                   I: InternAs<
      .                       [ty::Binder<'tcx, ExistentialPredicate<'tcx>>],
      .                       &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>>,
      .                   >,
      .               >(
      .                   self,
      .                   iter: I,
      .               ) -> I::Output {
      9 ( 0.00%)          iter.intern_with(|xs| self.intern_poly_existential_predicates(xs))
      .               }
      .           
      .               pub fn mk_predicates<I: InternAs<[Predicate<'tcx>], &'tcx List<Predicate<'tcx>>>>(
      .                   self,
      .                   iter: I,
      .               ) -> I::Output {
      .                   iter.intern_with(|xs| self.intern_predicates(xs))
      .               }
      .           
      .               pub fn mk_type_list<I: InternAs<[Ty<'tcx>], &'tcx List<Ty<'tcx>>>>(self, iter: I) -> I::Output {
    442 ( 0.00%)          iter.intern_with(|xs| self.intern_type_list(xs))
      .               }
      .           
      .               pub fn mk_substs<I: InternAs<[GenericArg<'tcx>], &'tcx List<GenericArg<'tcx>>>>(
      .                   self,
      .                   iter: I,
      .               ) -> I::Output {
 45,400 ( 0.01%)          iter.intern_with(|xs| self.intern_substs(xs))
      .               }
      .           
      .               pub fn mk_place_elems<I: InternAs<[PlaceElem<'tcx>], &'tcx List<PlaceElem<'tcx>>>>(
      .                   self,
      .                   iter: I,
      .               ) -> I::Output {
      .                   iter.intern_with(|xs| self.intern_place_elems(xs))
      .               }
      .           
  7,824 ( 0.00%)      pub fn mk_substs_trait(self, self_ty: Ty<'tcx>, rest: &[GenericArg<'tcx>]) -> SubstsRef<'tcx> {
      .                   self.mk_substs(iter::once(self_ty.into()).chain(rest.iter().cloned()))
 15,648 ( 0.00%)      }
      .           
      .               pub fn mk_bound_variable_kinds<
      .                   I: InternAs<[ty::BoundVariableKind], &'tcx List<ty::BoundVariableKind>>,
      .               >(
      .                   self,
      .                   iter: I,
      .               ) -> I::Output {
  3,491 ( 0.00%)          iter.intern_with(|xs| self.intern_bound_variable_kinds(xs))
      .               }
      .           
      .               /// Walks upwards from `id` to find a node which might change lint levels with attributes.
      .               /// It stops at `bound` and just returns it if reached.
 73,388 ( 0.02%)      pub fn maybe_lint_level_root_bounded(self, mut id: HirId, bound: HirId) -> HirId {
 73,388 ( 0.02%)          let hir = self.hir();
      .                   loop {
142,932 ( 0.04%)              if id == bound {
      .                           return bound;
      .                       }
      .           
186,094 ( 0.05%)              if hir.attrs(id).iter().any(|attr| Level::from_symbol(attr.name_or_empty()).is_some()) {
      .                           return id;
      .                       }
      .                       let next = hir.get_parent_node(id);
111,480 ( 0.03%)              if next == id {
      .                           bug!("lint traversal reached the root of the crate");
      .                       }
      .                       id = next;
      .                   }
104,840 ( 0.03%)      }
      .           
  3,528 ( 0.00%)      pub fn lint_level_at_node(
      .                   self,
      .                   lint: &'static Lint,
      .                   mut id: hir::HirId,
      .               ) -> (Level, LintLevelSource) {
      .                   let sets = self.lint_levels(());
      .                   loop {
 15,651 ( 0.00%)              if let Some(pair) = sets.level_and_source(lint, id, self.sess) {
      .                           return pair;
      .                       }
  1,053 ( 0.00%)              let next = self.hir().get_parent_node(id);
  3,159 ( 0.00%)              if next == id {
      .                           bug!("lint traversal reached the root of the crate");
      .                       }
      .                       id = next;
      .                   }
  3,528 ( 0.00%)      }
      .           
      .               pub fn struct_span_lint_hir(
      .                   self,
      .                   lint: &'static Lint,
      .                   hir_id: HirId,
      .                   span: impl Into<MultiSpan>,
      .                   decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),
      .               ) {
  2,036 ( 0.00%)          let (level, src) = self.lint_level_at_node(lint, hir_id);
    508 ( 0.00%)          struct_lint_level(self.sess, lint, level, src, Some(span.into()), decorate);
      .               }
      .           
      .               pub fn struct_lint_node(
      .                   self,
      .                   lint: &'static Lint,
      .                   id: HirId,
      .                   decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),
      .               ) {
      .                   let (level, src) = self.lint_level_at_node(lint, id);
      .                   struct_lint_level(self.sess, lint, level, src, None, decorate);
      .               }
      .           
    938 ( 0.00%)      pub fn in_scope_traits(self, id: HirId) -> Option<&'tcx [TraitCandidate]> {
    268 ( 0.00%)          let map = self.in_scope_traits_map(id.owner)?;
      .                   let candidates = map.get(&id.local_id)?;
    268 ( 0.00%)          Some(&*candidates)
  1,072 ( 0.00%)      }
      .           
    238 ( 0.00%)      pub fn named_region(self, id: HirId) -> Option<resolve_lifetime::Region> {
      .                   debug!(?id, "named_region");
      .                   self.named_region_map(id.owner).and_then(|map| map.get(&id.local_id).cloned())
    306 ( 0.00%)      }
      .           
      .               pub fn is_late_bound(self, id: HirId) -> bool {
      .                   self.is_late_bound_map(id.owner)
      .                       .map_or(false, |(owner, set)| owner == id.owner && set.contains(&id.local_id))
      .               }
      .           
    987 ( 0.00%)      pub fn object_lifetime_defaults(self, id: HirId) -> Option<Vec<ObjectLifetimeDefault>> {
      .                   self.object_lifetime_defaults_map(id.owner)
  1,269 ( 0.00%)      }
      .           
    522 ( 0.00%)      pub fn late_bound_vars(self, id: HirId) -> &'tcx List<ty::BoundVariableKind> {
      .                   self.mk_bound_variable_kinds(
      .                       self.late_bound_vars_map(id.owner)
      .                           .and_then(|map| map.get(&id.local_id).cloned())
      .                           .unwrap_or_else(|| {
      .                               bug!("No bound vars found for {:?} ({:?})", self.hir().node_to_string(id), id)
      .                           })
      .                           .iter(),
      .                   )
    522 ( 0.00%)      }
      .           
      .               pub fn lifetime_scope(self, id: HirId) -> Option<LifetimeScopeForPath> {
      .                   self.lifetime_scope_map(id.owner).and_then(|mut map| map.remove(&id.local_id))
      .               }
      .           
      .               /// Whether the `def_id` counts as const fn in the current crate, considering all active
      .               /// feature gates
     40 ( 0.00%)      pub fn is_const_fn(self, def_id: DefId) -> bool {
      4 ( 0.00%)          if self.is_const_fn_raw(def_id) {
      2 ( 0.00%)              match self.lookup_const_stability(def_id) {
      4 ( 0.00%)                  Some(stability) if stability.level.is_unstable() => {
      .                               // has a `rustc_const_unstable` attribute, check whether the user enabled the
      .                               // corresponding feature gate.
      .                               self.features()
      .                                   .declared_lib_features
      .                                   .iter()
      .                                   .any(|&(sym, _)| sym == stability.feature)
      .                           }
      .                           // functions without const stability are either stable user written
      .                           // const fn or the user is using feature gates and we thus don't
      .                           // care what they do
      .                           _ => true,
      .                       }
      .                   } else {
      .                       false
      .                   }
     36 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> TyCtxtAt<'tcx> {
      .               /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` to ensure it gets used.
      .               #[track_caller]
      .               pub fn ty_error(self) -> Ty<'tcx> {
      .                   self.tcx.ty_error_with_message(self.span, "TyKind::Error constructed but no error reported")
      .               }
-- line 2759 ----------------------------------------
-- line 2774 ----------------------------------------
      .           }
      .           
      .           impl<I, T, R, E> InternAs<[T], R> for I
      .           where
      .               E: InternIteratorElement<T, R>,
      .               I: Iterator<Item = E>,
      .           {
      .               type Output = E::Output;
 18,304 ( 0.00%)      fn intern_with<F>(self, f: F) -> Self::Output
      .               where
      .                   F: FnOnce(&[T]) -> R,
      .               {
157,221 ( 0.04%)          E::intern_with(self, f)
 18,513 ( 0.00%)      }
      .           }
      .           
      .           pub trait InternIteratorElement<T, R>: Sized {
      .               type Output;
      .               fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(iter: I, f: F) -> Self::Output;
      .           }
      .           
      .           impl<T, R> InternIteratorElement<T, R> for T {
      .               type Output = R;
 49,959 ( 0.01%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(
      .                   mut iter: I,
      .                   f: F,
      .               ) -> Self::Output {
      .                   // This code is hot enough that it's worth specializing for the most
      .                   // common length lists, to avoid the overhead of `SmallVec` creation.
      .                   // Lengths 0, 1, and 2 typically account for ~95% of cases. If
      .                   // `size_hint` is incorrect a panic will occur via an `unwrap` or an
      .                   // `assert`.
 66,655 ( 0.02%)          match iter.size_hint() {
      .                       (0, Some(0)) => {
      .                           assert!(iter.next().is_none());
      .                           f(&[])
      .                       }
      .                       (1, Some(1)) => {
      .                           let t0 = iter.next().unwrap();
      2 ( 0.00%)                  assert!(iter.next().is_none());
  6,477 ( 0.00%)                  f(&[t0])
      .                       }
      .                       (2, Some(2)) => {
      .                           let t0 = iter.next().unwrap();
      .                           let t1 = iter.next().unwrap();
     26 ( 0.00%)                  assert!(iter.next().is_none());
  8,364 ( 0.00%)                  f(&[t0, t1])
      .                       }
    172 ( 0.00%)              _ => f(&iter.collect::<SmallVec<[_; 8]>>()),
      .                   }
 56,158 ( 0.01%)      }
      .           }
      .           
      .           impl<'a, T, R> InternIteratorElement<T, R> for &'a T
      .           where
      .               T: Clone + 'a,
      .           {
      .               type Output = R;
    290 ( 0.00%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(iter: I, f: F) -> Self::Output {
      .                   // This code isn't hot.
      .                   f(&iter.cloned().collect::<SmallVec<[_; 8]>>())
    232 ( 0.00%)      }
      .           }
      .           
      .           impl<T, R, E> InternIteratorElement<T, R> for Result<T, E> {
      .               type Output = Result<R, E>;
 25,802 ( 0.01%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(
      .                   mut iter: I,
      .                   f: F,
      .               ) -> Self::Output {
      .                   // This code is hot enough that it's worth specializing for the most
      .                   // common length lists, to avoid the overhead of `SmallVec` creation.
      .                   // Lengths 0, 1, and 2 typically account for ~95% of cases. If
      .                   // `size_hint` is incorrect a panic will occur via an `unwrap` or an
      .                   // `assert`, unless a failure happens first, in which case the result
      .                   // will be an error anyway.
 21,556 ( 0.01%)          Ok(match iter.size_hint() {
      .                       (0, Some(0)) => {
      .                           assert!(iter.next().is_none());
      .                           f(&[])
      .                       }
      .                       (1, Some(1)) => {
      .                           let t0 = iter.next().unwrap()?;
      .                           assert!(iter.next().is_none());
    299 ( 0.00%)                  f(&[t0])
      .                       }
      .                       (2, Some(2)) => {
      2 ( 0.00%)                  let t0 = iter.next().unwrap()?;
      2 ( 0.00%)                  let t1 = iter.next().unwrap()?;
      3 ( 0.00%)                  assert!(iter.next().is_none());
  2,776 ( 0.00%)                  f(&[t0, t1])
      .                       }
      .                       _ => f(&iter.collect::<Result<SmallVec<[_; 8]>, _>>()?),
      .                   })
 29,339 ( 0.01%)      }
      .           }
      .           
      .           // We are comparing types with different invariant lifetimes, so `ptr::eq`
      .           // won't work for us.
      .           fn ptr_eq<T, U>(t: *const T, u: *const U) -> bool {
 31,518 ( 0.01%)      t as *const () == u as *const ()
      .           }
      .           
      .           pub fn provide(providers: &mut ty::query::Providers) {
      2 ( 0.00%)      providers.in_scope_traits_map =
      .                   |tcx, id| tcx.hir_crate(()).owners[id].as_ref().map(|owner_info| &owner_info.trait_map);
      3 ( 0.00%)      providers.resolutions = |tcx, ()| &tcx.untracked_resolutions;
      2 ( 0.00%)      providers.module_reexports =
      .                   |tcx, id| tcx.resolutions(()).reexport_map.get(&id).map(|v| &v[..]);
      2 ( 0.00%)      providers.crate_name = |tcx, id| {
      1 ( 0.00%)          assert_eq!(id, LOCAL_CRATE);
      1 ( 0.00%)          tcx.crate_name
      .               };
      2 ( 0.00%)      providers.maybe_unused_trait_import =
      .                   |tcx, id| tcx.resolutions(()).maybe_unused_trait_imports.contains(&id);
      2 ( 0.00%)      providers.maybe_unused_extern_crates =
      .                   |tcx, ()| &tcx.resolutions(()).maybe_unused_extern_crates[..];
      2 ( 0.00%)      providers.names_imported_by_glob_use = |tcx, id| {
      .                   tcx.arena.alloc(tcx.resolutions(()).glob_map.get(&id).cloned().unwrap_or_default())
      .               };
      .           
     11 ( 0.00%)      providers.lookup_stability = |tcx, id| tcx.stability().local_stability(id.expect_local());
      2 ( 0.00%)      providers.lookup_const_stability =
      .                   |tcx, id| tcx.stability().local_const_stability(id.expect_local());
      2 ( 0.00%)      providers.lookup_deprecation_entry =
    800 ( 0.00%)          |tcx, id| tcx.stability().local_deprecation_entry(id.expect_local());
      2 ( 0.00%)      providers.extern_mod_stmt_cnum =
      .                   |tcx, id| tcx.resolutions(()).extern_crate_map.get(&id).cloned();
      3 ( 0.00%)      providers.output_filenames = |tcx, ()| tcx.output_filenames.clone();
      3 ( 0.00%)      providers.features_query = |tcx, ()| tcx.sess.features_untracked();
      2 ( 0.00%)      providers.is_panic_runtime = |tcx, cnum| {
      .                   assert_eq!(cnum, LOCAL_CRATE);
      .                   tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::panic_runtime)
      .               };
      2 ( 0.00%)      providers.is_compiler_builtins = |tcx, cnum| {
      .                   assert_eq!(cnum, LOCAL_CRATE);
      .                   tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::compiler_builtins)
      .               };
      2 ( 0.00%)      providers.has_panic_handler = |tcx, cnum| {
      1 ( 0.00%)          assert_eq!(cnum, LOCAL_CRATE);
      .                   // We want to check if the panic handler was defined in this crate
      3 ( 0.00%)          tcx.lang_items().panic_impl().map_or(false, |did| did.is_local())
      .               };
      .           }

213,959 ( 0.06%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs
--------------------------------------------------------------------------------
Ir               

-- line 91 ----------------------------------------
      .           // maximum of number bytes needed to fill an 8-byte-sized element on which
      .           // SipHash operates. Note that for variable-sized copies which are known to be
      .           // less than 8 bytes, this function will perform more work than necessary unless
      .           // the compiler is able to optimize the extra work away.
      .           #[inline]
      .           unsafe fn copy_nonoverlapping_small(src: *const u8, dst: *mut u8, count: usize) {
      .               debug_assert!(count <= 8);
      .           
  8,677 ( 0.00%)      if count == 8 {
      .                   ptr::copy_nonoverlapping(src, dst, 8);
      .                   return;
      .               }
      .           
      .               let mut i = 0;
 12,834 ( 0.00%)      if i + 3 < count {
      .                   ptr::copy_nonoverlapping(src.add(i), dst.add(i), 4);
      .                   i += 4;
      .               }
      .           
 27,444 ( 0.01%)      if i + 1 < count {
      .                   ptr::copy_nonoverlapping(src.add(i), dst.add(i), 2);
  3,724 ( 0.00%)          i += 2
      .               }
      .           
 12,834 ( 0.00%)      if i < count {
  7,306 ( 0.00%)          *dst.add(i) = *src.add(i);
      .                   i += 1;
      .               }
      .           
      .               debug_assert_eq!(i, count);
      .           }
      .           
      .           // # Implementation
      .           //
-- line 124 ----------------------------------------
-- line 201 ----------------------------------------
      .           
      .                   hasher
      .               }
      .           
      .               // A specialized write function for values with size <= 8.
      .               #[inline]
      .               fn short_write<T>(&mut self, x: T) {
      .                   let size = mem::size_of::<T>();
 98,213 ( 0.03%)          let nbuf = self.nbuf;
      .                   debug_assert!(size <= 8);
      .                   debug_assert!(nbuf < BUFFER_SIZE);
      .                   debug_assert!(nbuf + size < BUFFER_WITH_SPILL_SIZE);
      .           
642,433 ( 0.17%)          if nbuf + size < BUFFER_SIZE {
      .                       unsafe {
      .                           // The memcpy call is optimized away because the size is known.
      .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
      .                           ptr::copy_nonoverlapping(&x as *const _ as *const u8, dst, size);
      .                       }
      .           
204,013 ( 0.05%)              self.nbuf = nbuf + size;
      .           
      .                       return;
      .                   }
      .           
 27,602 ( 0.01%)          unsafe { self.short_write_process_buffer(x) }
      .               }
      .           
      .               // A specialized write function for values with size <= 8 that should only
      .               // be called when the write would cause the buffer to fill.
      .               //
      .               // SAFETY: the write of `x` into `self.buf` starting at byte offset
      .               // `self.nbuf` must cause `self.buf` to become fully initialized (and not
      .               // overflow) if it wasn't already.
      .               #[inline(never)]
  8,980 ( 0.00%)      unsafe fn short_write_process_buffer<T>(&mut self, x: T) {
      .                   let size = mem::size_of::<T>();
  8,980 ( 0.00%)          let nbuf = self.nbuf;
      .                   debug_assert!(size <= 8);
      .                   debug_assert!(nbuf < BUFFER_SIZE);
      .                   debug_assert!(nbuf + size >= BUFFER_SIZE);
      .                   debug_assert!(nbuf + size < BUFFER_WITH_SPILL_SIZE);
      .           
      .                   // Copy first part of input into end of buffer, possibly into spill
      .                   // element. The memcpy call is optimized away because the size is known.
      .                   let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
      .                   ptr::copy_nonoverlapping(&x as *const _ as *const u8, dst, size);
      .           
      .                   // Process buffer.
      .                   for i in 0..BUFFER_CAPACITY {
 89,800 ( 0.02%)              let elem = self.buf.get_unchecked(i).assume_init().to_le();
 71,840 ( 0.02%)              self.state.v3 ^= elem;
      .                       Sip24Rounds::c_rounds(&mut self.state);
 80,820 ( 0.02%)              self.state.v0 ^= elem;
      .                   }
      .           
      .                   // Copy remaining input into start of buffer by copying size - 1
      .                   // elements from spill (at most size - 1 bytes could have overflowed
      .                   // into the spill). The memcpy call is optimized away because the size
      .                   // is known. And the whole copy is optimized away for size == 1.
      .                   let src = self.buf.get_unchecked(BUFFER_SPILL_INDEX) as *const _ as *const u8;
      .                   ptr::copy_nonoverlapping(src, self.buf.as_mut_ptr() as *mut u8, size - 1);
      .           
      .                   // This function should only be called when the write fills the buffer.
      .                   // Therefore, when size == 1, the new `self.nbuf` must be zero. The size
      .                   // is statically known, so the branch is optimized away.
 41,772 ( 0.01%)          self.nbuf = if size == 1 { 0 } else { nbuf + size - BUFFER_SIZE };
 35,920 ( 0.01%)          self.processed += BUFFER_SIZE;
 17,960 ( 0.00%)      }
      .           
      .               // A write function for byte slices.
      .               #[inline]
      .               fn slice_write(&mut self, msg: &[u8]) {
      .                   let length = msg.len();
  5,911 ( 0.00%)          let nbuf = self.nbuf;
      .                   debug_assert!(nbuf < BUFFER_SIZE);
      .           
 41,499 ( 0.01%)          if nbuf + length < BUFFER_SIZE {
      .                       unsafe {
      .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
      .           
 11,868 ( 0.00%)                  if length <= 8 {
      .                               copy_nonoverlapping_small(msg.as_ptr(), dst, length);
      .                           } else {
      .                               // This memcpy is *not* optimized away.
      .                               ptr::copy_nonoverlapping(msg.as_ptr(), dst, length);
      .                           }
      .                       }
      .           
  8,711 ( 0.00%)              self.nbuf = nbuf + length;
      .           
      .                       return;
      .                   }
      .           
  5,170 ( 0.00%)          unsafe { self.slice_write_process_buffer(msg) }
      .               }
      .           
      .               // A write function for byte slices that should only be called when the
      .               // write would cause the buffer to fill.
      .               //
      .               // SAFETY: `self.buf` must be initialized up to the byte offset `self.nbuf`,
      .               // and `msg` must contain enough bytes to initialize the rest of the element
      .               // containing the byte offset `self.nbuf`.
      .               #[inline(never)]
  4,740 ( 0.00%)      unsafe fn slice_write_process_buffer(&mut self, msg: &[u8]) {
      .                   let length = msg.len();
    948 ( 0.00%)          let nbuf = self.nbuf;
      .                   debug_assert!(nbuf < BUFFER_SIZE);
      .                   debug_assert!(nbuf + length >= BUFFER_SIZE);
      .           
      .                   // Always copy first part of input into current element of buffer.
      .                   // This function should only be called when the write fills the buffer,
      .                   // so we know that there is enough input to fill the current element.
  2,844 ( 0.00%)          let valid_in_elem = nbuf % ELEM_SIZE;
    948 ( 0.00%)          let needed_in_elem = ELEM_SIZE - valid_in_elem;
      .           
      .                   let src = msg.as_ptr();
      .                   let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
      .                   copy_nonoverlapping_small(src, dst, needed_in_elem);
      .           
      .                   // Process buffer.
      .           
      .                   // Using `nbuf / ELEM_SIZE + 1` rather than `(nbuf + needed_in_elem) /
      .                   // ELEM_SIZE` to show the compiler that this loop's upper bound is > 0.
      .                   // We know that is true, because last step ensured we have a full
      .                   // element in the buffer.
  1,896 ( 0.00%)          let last = nbuf / ELEM_SIZE + 1;
      .           
      .                   for i in 0..last {
  7,177 ( 0.00%)              let elem = self.buf.get_unchecked(i).assume_init().to_le();
  8,125 ( 0.00%)              self.state.v3 ^= elem;
      .                       Sip24Rounds::c_rounds(&mut self.state);
 14,354 ( 0.00%)              self.state.v0 ^= elem;
      .                   }
      .           
      .                   // Process the remaining element-sized chunks of input.
      .                   let mut processed = needed_in_elem;
  1,896 ( 0.00%)          let input_left = length - processed;
  1,707 ( 0.00%)          let elems_left = input_left / ELEM_SIZE;
      .                   let extra_bytes_left = input_left % ELEM_SIZE;
      .           
      .                   for _ in 0..elems_left {
    710 ( 0.00%)              let elem = (msg.as_ptr().add(processed) as *const u64).read_unaligned().to_le();
    710 ( 0.00%)              self.state.v3 ^= elem;
      .                       Sip24Rounds::c_rounds(&mut self.state);
    710 ( 0.00%)              self.state.v0 ^= elem;
  1,420 ( 0.00%)              processed += ELEM_SIZE;
      .                   }
      .           
      .                   // Copy remaining input into start of buffer.
      .                   let src = msg.as_ptr().add(processed);
      .                   let dst = self.buf.as_mut_ptr() as *mut u8;
      .                   copy_nonoverlapping_small(src, dst, extra_bytes_left);
      .           
    948 ( 0.00%)          self.nbuf = extra_bytes_left;
  4,740 ( 0.00%)          self.processed += nbuf + processed;
  5,688 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn finish128(mut self) -> (u64, u64) {
      .                   debug_assert!(self.nbuf < BUFFER_SIZE);
      .           
      .                   // Process full elements in buffer.
  4,323 ( 0.00%)          let last = self.nbuf / ELEM_SIZE;
      .           
      .                   // Since we're consuming self, avoid updating members for a potential
      .                   // performance gain.
  5,764 ( 0.00%)          let mut state = self.state;
      .           
      .                   for i in 0..last {
  4,031 ( 0.00%)              let elem = unsafe { self.buf.get_unchecked(i).assume_init().to_le() };
  4,031 ( 0.00%)              state.v3 ^= elem;
      .                       Sip24Rounds::c_rounds(&mut state);
  4,031 ( 0.00%)              state.v0 ^= elem;
      .                   }
      .           
      .                   // Get remaining partial element.
  2,882 ( 0.00%)          let elem = if self.nbuf % ELEM_SIZE != 0 {
      .                       unsafe {
      .                           // Ensure element is initialized by writing zero bytes. At most
      .                           // `ELEM_SIZE - 1` are required given the above check. It's safe
      .                           // to write this many because we have the spill and we maintain
      .                           // `self.nbuf` such that this write will start before the spill.
      .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(self.nbuf);
      .                           ptr::write_bytes(dst, 0, ELEM_SIZE - 1);
  1,229 ( 0.00%)                  self.buf.get_unchecked(last).assume_init().to_le()
      .                       }
      .                   } else {
      .                       0
      .                   };
      .           
      .                   // Finalize the hash.
  4,111 ( 0.00%)          let length = self.processed + self.nbuf;
  2,880 ( 0.00%)          let b: u64 = ((length as u64 & 0xff) << 56) | elem;
      .           
  1,440 ( 0.00%)          state.v3 ^= b;
      .                   Sip24Rounds::c_rounds(&mut state);
  1,440 ( 0.00%)          state.v0 ^= b;
      .           
  1,440 ( 0.00%)          state.v2 ^= 0xee;
      .                   Sip24Rounds::d_rounds(&mut state);
  4,306 ( 0.00%)          let _0 = state.v0 ^ state.v1 ^ state.v2 ^ state.v3;
      .           
  1,424 ( 0.00%)          state.v1 ^= 0xdd;
      .                   Sip24Rounds::d_rounds(&mut state);
  1,424 ( 0.00%)          let _1 = state.v0 ^ state.v1 ^ state.v2 ^ state.v3;
      .           
      .                   (_0, _1)
      .               }
      .           }
      .           
      .           impl Hasher for SipHasher128 {
      .               #[inline]
      .               fn write_u8(&mut self, i: u8) {
-- line 414 ----------------------------------------
-- line 471 ----------------------------------------
      .           }
      .           
      .           #[derive(Debug, Clone, Default)]
      .           struct Sip24Rounds;
      .           
      .           impl Sip24Rounds {
      .               #[inline]
      .               fn c_rounds(state: &mut State) {
352,616 ( 0.09%)          compress!(state);
389,263 ( 0.10%)          compress!(state);
      .               }
      .           
      .               #[inline]
      .               fn d_rounds(state: &mut State) {
  8,608 ( 0.00%)          compress!(state);
  8,608 ( 0.00%)          compress!(state);
  8,608 ( 0.00%)          compress!(state);
  7,169 ( 0.00%)          compress!(state);
      .               }
      .           }

 70,438 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs
--------------------------------------------------------------------------------
Ir                 

-- line 84 ----------------------------------------
        .           pub struct SessionGlobals {
        .               symbol_interner: symbol::Interner,
        .               span_interner: Lock<span_encoding::SpanInterner>,
        .               hygiene_data: Lock<hygiene::HygieneData>,
        .               source_map: Lock<Option<Lrc<SourceMap>>>,
        .           }
        .           
        .           impl SessionGlobals {
       12 ( 0.00%)      pub fn new(edition: Edition) -> SessionGlobals {
       50 ( 0.00%)          SessionGlobals {
        2 ( 0.00%)              symbol_interner: symbol::Interner::fresh(),
        .                       span_interner: Lock::new(span_encoding::SpanInterner::default()),
        6 ( 0.00%)              hygiene_data: Lock::new(hygiene::HygieneData::new(edition)),
        .                       source_map: Lock::new(None),
        .                   }
       10 ( 0.00%)      }
        .           }
        .           
        .           #[inline]
        .           pub fn create_session_globals_then<R>(edition: Edition, f: impl FnOnce() -> R) -> R {
        1 ( 0.00%)      assert!(
        .                   !SESSION_GLOBALS.is_set(),
        .                   "SESSION_GLOBALS should never be overwritten! \
        .                    Use another thread if you need another SessionGlobals"
        .               );
        3 ( 0.00%)      let session_globals = SessionGlobals::new(edition);
        7 ( 0.00%)      SESSION_GLOBALS.set(&session_globals, f)
        1 ( 0.00%)  }
        .           
        .           #[inline]
        .           pub fn set_session_globals_then<R>(session_globals: &SessionGlobals, f: impl FnOnce() -> R) -> R {
        .               assert!(
        .                   !SESSION_GLOBALS.is_set(),
        .                   "SESSION_GLOBALS should never be overwritten! \
        .                    Use another thread if you need another SessionGlobals"
        .               );
-- line 119 ----------------------------------------
-- line 120 ----------------------------------------
        .               SESSION_GLOBALS.set(session_globals, f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_default_session_if_not_set_then<R, F>(f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
        4 ( 0.00%)      create_session_if_not_set_then(edition::DEFAULT_EDITION, f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_session_if_not_set_then<R, F>(edition: Edition, f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
        1 ( 0.00%)      if !SESSION_GLOBALS.is_set() {
        3 ( 0.00%)          let session_globals = SessionGlobals::new(edition);
       11 ( 0.00%)          SESSION_GLOBALS.set(&session_globals, || SESSION_GLOBALS.with(f))
        1 ( 0.00%)      } else {
        .                   SESSION_GLOBALS.with(f)
        .               }
        .           }
        .           
        .           #[inline]
        .           pub fn with_session_globals<R, F>(f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
   99,356 ( 0.03%)      SESSION_GLOBALS.with(f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_default_session_globals_then<R>(f: impl FnOnce() -> R) -> R {
        .               create_session_globals_then(edition::DEFAULT_EDITION, f)
        .           }
        .           
        .           // If this ever becomes non thread-local, `decode_syntax_context`
        .           // and `decode_expn_id` will need to be updated to handle concurrent
        .           // deserialization.
        .           scoped_tls::scoped_thread_local!(static SESSION_GLOBALS: SessionGlobals);
        .           
        .           // FIXME: We should use this enum or something like it to get rid of the
        .           // use of magic `/rust/1.x/...` paths across the board.
       35 ( 0.00%)  #[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd)]
      620 ( 0.00%)  #[derive(Decodable)]
        .           pub enum RealFileName {
        .               LocalPath(PathBuf),
        .               /// For remapped paths (namely paths into libstd that have been mapped
        .               /// to the appropriate spot on the local host's file system, and local file
        .               /// system paths that have been remapped with `FilePathMapping`),
        .               Remapped {
        .                   /// `local_path` is the (host-dependent) local path to the file. This is
        .                   /// None if the file was imported from another crate
-- line 173 ----------------------------------------
-- line 179 ----------------------------------------
        .           }
        .           
        .           impl Hash for RealFileName {
        .               fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
        .                   // To prevent #70924 from happening again we should only hash the
        .                   // remapped (virtualized) path if that exists. This is because
        .                   // virtualized paths to sysroot crates (/rust/$hash or /rust/$version)
        .                   // remain stable even if the corresponding local_path changes
    1,784 ( 0.00%)          self.remapped_path_if_available().hash(state)
        .               }
        .           }
        .           
        .           // This is functionally identical to #[derive(Encodable)], with the exception of
        .           // an added assert statement
        .           impl<S: Encoder> Encodable<S> for RealFileName {
        .               fn encode(&self, encoder: &mut S) -> Result<(), S::Error> {
       24 ( 0.00%)          encoder.emit_enum(|encoder| match *self {
        .                       RealFileName::LocalPath(ref local_path) => {
       96 ( 0.00%)                  encoder.emit_enum_variant("LocalPath", 0, 1, |encoder| {
        .                               encoder.emit_enum_variant_arg(true, |encoder| local_path.encode(encoder))?;
        .                               Ok(())
        .                           })
        .                       }
        .           
        .                       RealFileName::Remapped { ref local_path, ref virtual_name } => encoder
        .                           .emit_enum_variant("Remapped", 1, 2, |encoder| {
        .                               // For privacy and build reproducibility, we must not embed host-dependant path in artifacts
-- line 205 ----------------------------------------
-- line 224 ----------------------------------------
        .                           p.as_ref().map(PathBuf::as_path)
        .                       }
        .                   }
        .               }
        .           
        .               /// Returns the path suitable for reading from the file system on the local host,
        .               /// if this information exists.
        .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
        2 ( 0.00%)      pub fn into_local_path(self) -> Option<PathBuf> {
        2 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(p) => Some(p),
        .                       RealFileName::Remapped { local_path: p, virtual_name: _ } => p,
        .                   }
        3 ( 0.00%)      }
        .           
        .               /// Returns the path suitable for embedding into build artifacts. This would still
        .               /// be a local path if it has not been remapped. A remapped path will not correspond
        .               /// to a valid file system path: see `local_path_if_available()` for something that
        .               /// is more likely to return paths into the local host file system.
        .               pub fn remapped_path_if_available(&self) -> &Path {
    1,388 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(p)
        .                       | RealFileName::Remapped { local_path: _, virtual_name: p } => &p,
        .                   }
       13 ( 0.00%)      }
        .           
        .               /// Returns the path suitable for reading from the file system on the local host,
        .               /// if this information exists. Otherwise returns the remapped name.
        .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
        .               pub fn local_path_if_available(&self) -> &Path {
       12 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(path)
        .                       | RealFileName::Remapped { local_path: None, virtual_name: path }
        .                       | RealFileName::Remapped { local_path: Some(path), virtual_name: _ } => path,
        .                   }
        .               }
        .           
        .               pub fn to_string_lossy(&self, display_pref: FileNameDisplayPreference) -> Cow<'_, str> {
       12 ( 0.00%)          match display_pref {
        .                       FileNameDisplayPreference::Local => self.local_path_if_available().to_string_lossy(),
        .                       FileNameDisplayPreference::Remapped => {
        .                           self.remapped_path_if_available().to_string_lossy()
        .                       }
        .                   }
        .               }
        .           }
        .           
        .           /// Differentiates between real files and common virtual files.
    3,688 ( 0.00%)  #[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd, Hash)]
    3,891 ( 0.00%)  #[derive(Decodable, Encodable)]
        .           pub enum FileName {
        .               Real(RealFileName),
        .               /// Call to `quote!`.
        .               QuoteExpansion(u64),
        .               /// Command line.
        .               Anon(u64),
        .               /// Hack in `src/librustc_ast/parse.rs`.
        .               // FIXME(jseyfried)
-- line 281 ----------------------------------------
-- line 288 ----------------------------------------
        .               /// Custom sources for explicit parser calls from plugins and drivers.
        .               Custom(String),
        .               DocTest(PathBuf, isize),
        .               /// Post-substitution inline assembly from LLVM.
        .               InlineAsm(u64),
        .           }
        .           
        .           impl From<PathBuf> for FileName {
       84 ( 0.00%)      fn from(p: PathBuf) -> Self {
       24 ( 0.00%)          assert!(!p.to_string_lossy().ends_with('>'));
       72 ( 0.00%)          FileName::Real(RealFileName::LocalPath(p))
       84 ( 0.00%)      }
        .           }
        .           
        2 ( 0.00%)  #[derive(Clone, Copy, Eq, PartialEq, Hash, Debug)]
        .           pub enum FileNameDisplayPreference {
        .               Remapped,
        .               Local,
        .           }
        .           
        .           pub struct FileNameDisplay<'a> {
        .               inner: &'a FileName,
        .               display_pref: FileNameDisplayPreference,
        .           }
        .           
        .           impl fmt::Display for FileNameDisplay<'_> {
       48 ( 0.00%)      fn fmt(&self, fmt: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        .                   use FileName::*;
       72 ( 0.00%)          match *self.inner {
        .                       Real(ref name) => {
       72 ( 0.00%)                  write!(fmt, "{}", name.to_string_lossy(self.display_pref))
        .                       }
        .                       QuoteExpansion(_) => write!(fmt, "<quote expansion>"),
        .                       MacroExpansion(_) => write!(fmt, "<macro expansion>"),
        .                       Anon(_) => write!(fmt, "<anon>"),
        .                       ProcMacroSourceCode(_) => write!(fmt, "<proc-macro source code>"),
        .                       CfgSpec(_) => write!(fmt, "<cfgspec>"),
        .                       CliCrateAttr(_) => write!(fmt, "<crate attribute>"),
        .                       Custom(ref s) => write!(fmt, "<{}>", s),
        .                       DocTest(ref path, _) => write!(fmt, "{}", path.display()),
        .                       InlineAsm(_) => write!(fmt, "<inline asm>"),
        .                   }
       60 ( 0.00%)      }
        .           }
        .           
        .           impl FileNameDisplay<'_> {
        .               pub fn to_string_lossy(&self) -> Cow<'_, str> {
        .                   match self.inner {
        .                       FileName::Real(ref inner) => inner.to_string_lossy(self.display_pref),
        .                       _ => Cow::from(format!("{}", self)),
        .                   }
        .               }
        .           }
        .           
        .           impl FileName {
        .               pub fn is_real(&self) -> bool {
        .                   use FileName::*;
      650 ( 0.00%)          match *self {
        .                       Real(_) => true,
        .                       Anon(_)
        .                       | MacroExpansion(_)
        .                       | ProcMacroSourceCode(_)
        .                       | CfgSpec(_)
        .                       | CliCrateAttr(_)
        .                       | Custom(_)
        .                       | QuoteExpansion(_)
-- line 353 ----------------------------------------
-- line 357 ----------------------------------------
        .               }
        .           
        .               pub fn prefer_remapped(&self) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref: FileNameDisplayPreference::Remapped }
        .               }
        .           
        .               // This may include transient local filesystem information.
        .               // Must not be embedded in build outputs.
       12 ( 0.00%)      pub fn prefer_local(&self) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref: FileNameDisplayPreference::Local }
       24 ( 0.00%)      }
        .           
        .               pub fn display(&self, display_pref: FileNameDisplayPreference) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref }
        .               }
        .           
        .               pub fn macro_expansion_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
-- line 375 ----------------------------------------
-- line 423 ----------------------------------------
        .           /// that the length of the span is equal to `span.hi - span.lo`; there may be space in the
        .           /// [`BytePos`] range between files.
        .           ///
        .           /// `SpanData` is public because `Span` uses a thread-local interner and can't be
        .           /// sent to other threads, but some pieces of performance infra run in a separate thread.
        .           /// Using `Span` is generally preferred.
        .           #[derive(Clone, Copy, Hash, PartialEq, Eq)]
        .           pub struct SpanData {
        1 ( 0.00%)      pub lo: BytePos,
        1 ( 0.00%)      pub hi: BytePos,
        .               /// Information about where the macro came from, if this piece of
        .               /// code was created by a macro expansion.
        3 ( 0.00%)      pub ctxt: SyntaxContext,
        1 ( 0.00%)      pub parent: Option<LocalDefId>,
        .           }
        .           
        .           // Order spans by position in the file.
        .           impl Ord for SpanData {
        .               fn cmp(&self, other: &Self) -> Ordering {
        .                   let SpanData {
        .                       lo: s_lo,
        .                       hi: s_hi,
-- line 444 ----------------------------------------
-- line 485 ----------------------------------------
        .               }
        .               #[inline]
        .               pub fn with_parent(&self, parent: Option<LocalDefId>) -> Span {
        .                   Span::new(self.lo, self.hi, self.ctxt, parent)
        .               }
        .               /// Returns `true` if this is a dummy span with any hygienic context.
        .               #[inline]
        .               pub fn is_dummy(self) -> bool {
   60,665 ( 0.02%)          self.lo.0 == 0 && self.hi.0 == 0
        .               }
        .               /// Returns `true` if `self` fully encloses `other`.
        .               pub fn contains(self, other: Self) -> bool {
      258 ( 0.00%)          self.lo <= other.lo && other.hi <= self.hi
        .               }
        .           }
        .           
        .           // The interner is pointed to by a thread local value which is only set on the main thread
        .           // with parallelization is disabled. So we don't allow `Span` to transfer between threads
        .           // to avoid panics and other errors, even though it would be memory safe to do so.
        .           #[cfg(not(parallel_compiler))]
        .           impl !Send for Span {}
        .           #[cfg(not(parallel_compiler))]
        .           impl !Sync for Span {}
        .           
        .           impl PartialOrd for Span {
   15,288 ( 0.00%)      fn partial_cmp(&self, rhs: &Self) -> Option<Ordering> {
   11,466 ( 0.00%)          PartialOrd::partial_cmp(&self.data(), &rhs.data())
   15,288 ( 0.00%)      }
        .           }
        .           impl Ord for Span {
        .               fn cmp(&self, rhs: &Self) -> Ordering {
        .                   Ord::cmp(&self.data(), &rhs.data())
        .               }
        .           }
        .           
        .           /// A collection of `Span`s.
-- line 520 ----------------------------------------
-- line 532 ----------------------------------------
        .           }
        .           
        .           impl Span {
        .               #[inline]
        .               pub fn lo(self) -> BytePos {
        .                   self.data().lo
        .               }
        .               #[inline]
   23,733 ( 0.01%)      pub fn with_lo(self, lo: BytePos) -> Span {
        .                   self.data().with_lo(lo)
   15,822 ( 0.00%)      }
        .               #[inline]
      996 ( 0.00%)      pub fn hi(self) -> BytePos {
        .                   self.data().hi
      996 ( 0.00%)      }
        .               #[inline]
    2,835 ( 0.00%)      pub fn with_hi(self, hi: BytePos) -> Span {
        .                   self.data().with_hi(hi)
    1,890 ( 0.00%)      }
        .               #[inline]
        .               pub fn ctxt(self) -> SyntaxContext {
        .                   self.data_untracked().ctxt
        .               }
        .               #[inline]
    1,060 ( 0.00%)      pub fn with_ctxt(self, ctxt: SyntaxContext) -> Span {
        .                   self.data_untracked().with_ctxt(ctxt)
      636 ( 0.00%)      }
        .               #[inline]
        .               pub fn parent(self) -> Option<LocalDefId> {
        .                   self.data().parent
        .               }
        .               #[inline]
        .               pub fn with_parent(self, ctxt: Option<LocalDefId>) -> Span {
        .                   self.data().with_parent(ctxt)
        .               }
-- line 566 ----------------------------------------
-- line 600 ----------------------------------------
        .               /// Returns a new span representing an empty span at the beginning of this span.
        .               #[inline]
        .               pub fn shrink_to_lo(self) -> Span {
        .                   let span = self.data_untracked();
        .                   span.with_hi(span.lo)
        .               }
        .               /// Returns a new span representing an empty span at the end of this span.
        .               #[inline]
      222 ( 0.00%)      pub fn shrink_to_hi(self) -> Span {
        .                   let span = self.data_untracked();
        .                   span.with_lo(span.hi)
      148 ( 0.00%)      }
        .           
        .               #[inline]
        .               /// Returns `true` if `hi == lo`.
        .               pub fn is_empty(self) -> bool {
        .                   let span = self.data_untracked();
        .                   span.hi == span.lo
        .               }
        .           
        .               /// Returns `self` if `self` is not the dummy span, and `other` otherwise.
        .               pub fn substitute_dummy(self, other: Span) -> Span {
        .                   if self.is_dummy() { other } else { self }
        .               }
        .           
        .               /// Returns `true` if `self` fully encloses `other`.
      774 ( 0.00%)      pub fn contains(self, other: Span) -> bool {
        .                   let span = self.data();
        .                   let other = other.data();
        .                   span.contains(other)
      516 ( 0.00%)      }
        .           
        .               /// Returns `true` if `self` touches `other`.
        .               pub fn overlaps(self, other: Span) -> bool {
        .                   let span = self.data();
        .                   let other = other.data();
        .                   span.lo < other.hi && other.lo < span.hi
        .               }
        .           
-- line 638 ----------------------------------------
-- line 671 ----------------------------------------
        .               pub fn find_ancestor_inside(mut self, outer: Span) -> Option<Span> {
        .                   while !outer.contains(self) {
        .                       self = self.parent_callsite()?;
        .                   }
        .                   Some(self)
        .               }
        .           
        .               /// Edition of the crate from which this span came.
    2,793 ( 0.00%)      pub fn edition(self) -> edition::Edition {
        .                   self.ctxt().edition()
    1,862 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn rust_2015(self) -> bool {
      596 ( 0.00%)          self.edition() == edition::Edition::Edition2015
        .               }
        .           
        .               #[inline]
        .               pub fn rust_2018(self) -> bool {
      304 ( 0.00%)          self.edition() >= edition::Edition::Edition2018
        .               }
        .           
        .               #[inline]
        .               pub fn rust_2021(self) -> bool {
      396 ( 0.00%)          self.edition() >= edition::Edition::Edition2021
        .               }
        .           
        .               /// Returns the source callee.
        .               ///
        .               /// Returns `None` if the supplied span has no expansion trace,
        .               /// else returns the `ExpnData` for the macro definition
        .               /// corresponding to the source callsite.
        .               pub fn source_callee(self) -> Option<ExpnData> {
-- line 703 ----------------------------------------
-- line 707 ----------------------------------------
        .                   }
        .                   let expn_data = self.ctxt().outer_expn_data();
        .                   if !expn_data.is_root() { Some(source_callee(expn_data)) } else { None }
        .               }
        .           
        .               /// Checks if a span is "internal" to a macro in which `#[unstable]`
        .               /// items can be used (that is, a macro marked with
        .               /// `#[allow_internal_unstable]`).
      130 ( 0.00%)      pub fn allows_unstable(self, feature: Symbol) -> bool {
       26 ( 0.00%)          self.ctxt()
        .                       .outer_expn_data()
        .                       .allow_internal_unstable
        .                       .map_or(false, |features| features.iter().any(|&f| f == feature))
      104 ( 0.00%)      }
        .           
        .               /// Checks if this span arises from a compiler desugaring of kind `kind`.
    1,869 ( 0.00%)      pub fn is_desugaring(self, kind: DesugaringKind) -> bool {
    1,602 ( 0.00%)          match self.ctxt().outer_expn_data().kind {
        .                       ExpnKind::Desugaring(k) => k == kind,
        .                       _ => false,
        .                   }
    1,335 ( 0.00%)      }
        .           
        .               /// Returns the compiler desugaring that created this span, or `None`
        .               /// if this span is not from a desugaring.
      295 ( 0.00%)      pub fn desugaring_kind(self) -> Option<DesugaringKind> {
      354 ( 0.00%)          match self.ctxt().outer_expn_data().kind {
        .                       ExpnKind::Desugaring(k) => Some(k),
        .                       _ => None,
        .                   }
      236 ( 0.00%)      }
        .           
        .               /// Checks if a span is "internal" to a macro in which `unsafe`
        .               /// can be used without triggering the `unsafe_code` lint.
        .               //  (that is, a macro marked with `#[allow_internal_unsafe]`).
       76 ( 0.00%)      pub fn allows_unsafe(self) -> bool {
       19 ( 0.00%)          self.ctxt().outer_expn_data().allow_internal_unsafe
       76 ( 0.00%)      }
        .           
        .               pub fn macro_backtrace(mut self) -> impl Iterator<Item = ExpnData> {
        .                   let mut prev_span = DUMMY_SP;
        .                   std::iter::from_fn(move || {
        .                       loop {
        .                           let expn_data = self.ctxt().outer_expn_data();
        .                           if expn_data.is_root() {
        .                               return None;
-- line 752 ----------------------------------------
-- line 767 ----------------------------------------
        .           
        .               /// Returns a `Span` that would enclose both `self` and `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///     ^^^^^^^^^^^^^^^^^^^^
        .               /// ```
  117,205 ( 0.03%)      pub fn to(self, end: Span) -> Span {
        .                   let span_data = self.data();
        .                   let end_data = end.data();
        .                   // FIXME(jseyfried): `self.ctxt` should always equal `end.ctxt` here (cf. issue #23480).
        .                   // Return the macro span on its own to avoid weird diagnostic output. It is preferable to
        .                   // have an incomplete span than a completely nonsensical one.
   21,281 ( 0.01%)          if span_data.ctxt != end_data.ctxt {
       29 ( 0.00%)              if span_data.ctxt == SyntaxContext::root() {
        .                           return end;
       29 ( 0.00%)              } else if end_data.ctxt == SyntaxContext::root() {
        .                           return self;
        .                       }
        .                       // Both spans fall within a macro.
        .                       // FIXME(estebank): check if it is the *same* macro.
        .                   }
        .                   Span::new(
        .                       cmp::min(span_data.lo, end_data.lo),
        .                       cmp::max(span_data.hi, end_data.hi),
        .                       if span_data.ctxt == SyntaxContext::root() { end_data.ctxt } else { span_data.ctxt },
   74,410 ( 0.02%)              if span_data.parent == end_data.parent { span_data.parent } else { None },
        .                   )
   95,895 ( 0.02%)      }
        .           
        .               /// Returns a `Span` between the end of `self` to the beginning of `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///         ^^^^^^^^^^^^^
        .               /// ```
       88 ( 0.00%)      pub fn between(self, end: Span) -> Span {
        .                   let span = self.data();
        .                   let end = end.data();
        .                   Span::new(
        .                       span.hi,
        .                       end.lo,
        .                       if end.ctxt == SyntaxContext::root() { end.ctxt } else { span.ctxt },
       56 ( 0.00%)              if span.parent == end.parent { span.parent } else { None },
        .                   )
       64 ( 0.00%)      }
        .           
        .               /// Returns a `Span` from the beginning of `self` until the beginning of `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///     ^^^^^^^^^^^^^^^^^
        .               /// ```
      649 ( 0.00%)      pub fn until(self, end: Span) -> Span {
        .                   // Most of this function's body is copied from `to`.
        .                   // We can't just do `self.to(end.shrink_to_lo())`,
        .                   // because to also does some magic where it uses min/max so
        .                   // it can handle overlapping spans. Some advanced mis-use of
        .                   // `until` with different ctxts makes this visible.
        .                   let span_data = self.data();
        .                   let end_data = end.data();
        .                   // FIXME(jseyfried): `self.ctxt` should always equal `end.ctxt` here (cf. issue #23480).
        .                   // Return the macro span on its own to avoid weird diagnostic output. It is preferable to
        .                   // have an incomplete span than a completely nonsensical one.
      118 ( 0.00%)          if span_data.ctxt != end_data.ctxt {
        .                       if span_data.ctxt == SyntaxContext::root() {
        .                           return end;
        .                       } else if end_data.ctxt == SyntaxContext::root() {
        .                           return self;
        .                       }
        .                       // Both spans fall within a macro.
        .                       // FIXME(estebank): check if it is the *same* macro.
        .                   }
        .                   Span::new(
        .                       span_data.lo,
        .                       end_data.lo,
        .                       if end_data.ctxt == SyntaxContext::root() { end_data.ctxt } else { span_data.ctxt },
      413 ( 0.00%)              if span_data.parent == end_data.parent { span_data.parent } else { None },
        .                   )
      531 ( 0.00%)      }
        .           
        .               pub fn from_inner(self, inner: InnerSpan) -> Span {
        .                   let span = self.data();
        .                   Span::new(
        .                       span.lo + BytePos::from_usize(inner.start),
        .                       span.lo + BytePos::from_usize(inner.end),
        .                       span.ctxt,
        .                       span.parent,
        .                   )
        .               }
        .           
        .               /// Equivalent of `Span::def_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_def_site_ctxt(self, expn_id: ExpnId) -> Span {
      102 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::Opaque)
        .               }
        .           
        .               /// Equivalent of `Span::call_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_call_site_ctxt(self, expn_id: ExpnId) -> Span {
       52 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::Transparent)
        .               }
        .           
        .               /// Equivalent of `Span::mixed_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_mixed_site_ctxt(self, expn_id: ExpnId) -> Span {
        .                   self.with_ctxt_from_mark(expn_id, Transparency::SemiTransparent)
        .               }
        .           
        .               /// Produces a span with the same location as `self` and context produced by a macro with the
        .               /// given ID and transparency, assuming that macro was defined directly and not produced by
        .               /// some other macro (which is the case for built-in and procedural macros).
      924 ( 0.00%)      pub fn with_ctxt_from_mark(self, expn_id: ExpnId, transparency: Transparency) -> Span {
        .                   self.with_ctxt(SyntaxContext::root().apply_mark(expn_id, transparency))
      539 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn apply_mark(self, expn_id: ExpnId, transparency: Transparency) -> Span {
        .                   let span = self.data();
    3,825 ( 0.00%)          span.with_ctxt(span.ctxt.apply_mark(expn_id, transparency))
        .               }
        .           
        .               #[inline]
        .               pub fn remove_mark(&mut self) -> ExpnId {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.remove_mark();
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
-- line 897 ----------------------------------------
-- line 901 ----------------------------------------
        .               pub fn adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.adjust(expn_id);
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
        .           
        .               #[inline]
    4,707 ( 0.00%)      pub fn normalize_to_macros_2_0_and_adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
    3,138 ( 0.00%)          let mut span = self.data();
    2,599 ( 0.00%)          let mark = span.ctxt.normalize_to_macros_2_0_and_adjust(expn_id);
    4,707 ( 0.00%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
    5,214 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn glob_adjust(&mut self, expn_id: ExpnId, glob_span: Span) -> Option<Option<ExpnId>> {
       62 ( 0.00%)          let mut span = self.data();
       93 ( 0.00%)          let mark = span.ctxt.glob_adjust(expn_id, glob_span);
      248 ( 0.00%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
        .           
        .               #[inline]
       18 ( 0.00%)      pub fn reverse_glob_adjust(
        .                   &mut self,
        .                   expn_id: ExpnId,
        .                   glob_span: Span,
        .               ) -> Option<Option<ExpnId>> {
      178 ( 0.00%)          let mut span = self.data();
      342 ( 0.00%)          let mark = span.ctxt.reverse_glob_adjust(expn_id, glob_span);
      682 ( 0.00%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
       20 ( 0.00%)      }
        .           
        .               #[inline]
   11,800 ( 0.00%)      pub fn normalize_to_macros_2_0(self) -> Span {
        .                   let span = self.data();
        .                   span.with_ctxt(span.ctxt.normalize_to_macros_2_0())
   10,325 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn normalize_to_macro_rules(self) -> Span {
        .                   let span = self.data();
        .                   span.with_ctxt(span.ctxt.normalize_to_macro_rules())
        .               }
        .           }
        .           
-- line 948 ----------------------------------------
-- line 958 ----------------------------------------
        .           
        .               /// What label should we attach to this span (if any)?
        .               pub label: Option<String>,
        .           }
        .           
        .           impl Default for Span {
        .               fn default() -> Self {
        .                   DUMMY_SP
        2 ( 0.00%)      }
        .           }
        .           
        .           impl<E: Encoder> Encodable<E> for Span {
        .               default fn encode(&self, s: &mut E) -> Result<(), E::Error> {
        .                   let span = self.data();
        .                   s.emit_struct(false, |s| {
        .                       s.emit_struct_field("lo", true, |s| span.lo.encode(s))?;
        .                       s.emit_struct_field("hi", false, |s| span.hi.encode(s))
-- line 974 ----------------------------------------
-- line 990 ----------------------------------------
        .           /// any spans that are debug-printed during the closure's execution.
        .           ///
        .           /// Normally, the global `TyCtxt` is used to retrieve the `SourceMap`
        .           /// (see `rustc_interface::callbacks::span_debug1`). However, some parts
        .           /// of the compiler (e.g. `rustc_parse`) may debug-print `Span`s before
        .           /// a `TyCtxt` is available. In this case, we fall back to
        .           /// the `SourceMap` provided to this function. If that is not available,
        .           /// we fall back to printing the raw `Span` field values.
        9 ( 0.00%)  pub fn with_source_map<T, F: FnOnce() -> T>(source_map: Lrc<SourceMap>, f: F) -> T {
        .               with_session_globals(|session_globals| {
        2 ( 0.00%)          *session_globals.source_map.borrow_mut() = Some(source_map);
        .               });
        .               struct ClearSourceMap;
        .               impl Drop for ClearSourceMap {
        .                   fn drop(&mut self) {
        .                       with_session_globals(|session_globals| {
        1 ( 0.00%)                  session_globals.source_map.borrow_mut().take();
        .                       });
        .                   }
        .               }
        .           
        .               let _guard = ClearSourceMap;
        4 ( 0.00%)      f()
        8 ( 0.00%)  }
        .           
        .           pub fn debug_with_source_map(
        .               span: Span,
        .               f: &mut fmt::Formatter<'_>,
        .               source_map: &SourceMap,
        .           ) -> fmt::Result {
        .               write!(f, "{} ({:?})", source_map.span_to_diagnostic_string(span), span.ctxt())
        .           }
-- line 1021 ----------------------------------------
-- line 1048 ----------------------------------------
        .           
        .           impl MultiSpan {
        .               #[inline]
        .               pub fn new() -> MultiSpan {
        .                   MultiSpan { primary_spans: vec![], span_labels: vec![] }
        .               }
        .           
        .               pub fn from_span(primary_span: Span) -> MultiSpan {
    1,290 ( 0.00%)          MultiSpan { primary_spans: vec![primary_span], span_labels: vec![] }
        .               }
        .           
        .               pub fn from_spans(mut vec: Vec<Span>) -> MultiSpan {
        .                   vec.sort();
        .                   MultiSpan { primary_spans: vec, span_labels: vec![] }
        .               }
        .           
        .               pub fn push_span_label(&mut self, span: Span, label: String) {
        .                   self.span_labels.push((span, label));
        .               }
        .           
        .               /// Selects the first primary span (if any).
        .               pub fn primary_span(&self) -> Option<Span> {
        .                   self.primary_spans.first().cloned()
       52 ( 0.00%)      }
        .           
        .               /// Returns all primary spans.
        .               pub fn primary_spans(&self) -> &[Span] {
        .                   &self.primary_spans
        .               }
        .           
        .               /// Returns `true` if any of the primary spans are displayable.
        .               pub fn has_primary_spans(&self) -> bool {
-- line 1079 ----------------------------------------
-- line 1139 ----------------------------------------
        .           
        .               /// Returns `true` if any of the span labels is displayable.
        .               pub fn has_span_labels(&self) -> bool {
        .                   self.span_labels.iter().any(|(sp, _)| !sp.is_dummy())
        .               }
        .           }
        .           
        .           impl From<Span> for MultiSpan {
    1,290 ( 0.00%)      fn from(span: Span) -> MultiSpan {
        .                   MultiSpan::from_span(span)
    1,290 ( 0.00%)      }
        .           }
        .           
        .           impl From<Vec<Span>> for MultiSpan {
        .               fn from(spans: Vec<Span>) -> MultiSpan {
        .                   MultiSpan::from_spans(spans)
        .               }
        .           }
        .           
        .           /// Identifies an offset of a multi-byte character in a `SourceFile`.
       66 ( 0.00%)  #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub struct MultiByteChar {
        .               /// The absolute offset of the character in the `SourceMap`.
        .               pub pos: BytePos,
        .               /// The number of bytes, `>= 2`.
        .               pub bytes: u8,
        .           }
        .           
        .           /// Identifies an offset of a non-narrow character in a `SourceFile`.
      268 ( 0.00%)  #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub enum NonNarrowChar {
        .               /// Represents a zero-width character.
        .               ZeroWidth(BytePos),
        .               /// Represents a wide (full-width) character.
        .               Wide(BytePos),
        .               /// Represents a tab character, represented visually with a width of 4 characters.
        .               Tab(BytePos),
        .           }
-- line 1176 ----------------------------------------
-- line 1201 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           impl Add<BytePos> for NonNarrowChar {
        .               type Output = Self;
        .           
        .               fn add(self, rhs: BytePos) -> Self {
      466 ( 0.00%)          match self {
        .                       NonNarrowChar::ZeroWidth(pos) => NonNarrowChar::ZeroWidth(pos + rhs),
        .                       NonNarrowChar::Wide(pos) => NonNarrowChar::Wide(pos + rhs),
        .                       NonNarrowChar::Tab(pos) => NonNarrowChar::Tab(pos + rhs),
        .                   }
        .               }
        .           }
        .           
        .           impl Sub<BytePos> for NonNarrowChar {
        .               type Output = Self;
        .           
      134 ( 0.00%)      fn sub(self, rhs: BytePos) -> Self {
      466 ( 0.00%)          match self {
        .                       NonNarrowChar::ZeroWidth(pos) => NonNarrowChar::ZeroWidth(pos - rhs),
        .                       NonNarrowChar::Wide(pos) => NonNarrowChar::Wide(pos - rhs),
        .                       NonNarrowChar::Tab(pos) => NonNarrowChar::Tab(pos - rhs),
        .                   }
      402 ( 0.00%)      }
        .           }
        .           
        .           /// Identifies an offset of a character that was normalized away from `SourceFile`.
        .           #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub struct NormalizedPos {
        .               /// The absolute offset of the character in the `SourceMap`.
        .               pub pos: BytePos,
        .               /// The difference between original and normalized string at position.
        .               pub diff: u32,
        .           }
        .           
       36 ( 0.00%)  #[derive(PartialEq, Eq, Clone, Debug)]
        .           pub enum ExternalSource {
        .               /// No external source has to be loaded, since the `SourceFile` represents a local crate.
        .               Unneeded,
        .               Foreign {
        .                   kind: ExternalSourceKind,
        .                   /// This SourceFile's byte-offset within the source_map of its original crate.
        .                   original_start_pos: BytePos,
        .                   /// The end of this SourceFile within the source_map of its original crate.
-- line 1246 ----------------------------------------
-- line 1257 ----------------------------------------
        .               AbsentOk,
        .               /// A failed attempt has been made to load the external source.
        .               AbsentErr,
        .               Unneeded,
        .           }
        .           
        .           impl ExternalSource {
        .               pub fn get_source(&self) -> Option<&Lrc<String>> {
      154 ( 0.00%)          match self {
        .                       ExternalSource::Foreign { kind: ExternalSourceKind::Present(ref src), .. } => Some(src),
        .                       _ => None,
        .                   }
        .               }
        .           }
        .           
        .           #[derive(Debug)]
        .           pub struct OffsetOverflowError;
        .           
      626 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash, Encodable, Decodable)]
        .           pub enum SourceFileHashAlgorithm {
        .               Md5,
        .               Sha1,
        .               Sha256,
        .           }
        .           
        .           impl FromStr for SourceFileHashAlgorithm {
        .               type Err = ();
-- line 1283 ----------------------------------------
-- line 1290 ----------------------------------------
        .                       _ => Err(()),
        .                   }
        .               }
        .           }
        .           
        .           rustc_data_structures::impl_stable_hash_via_hash!(SourceFileHashAlgorithm);
        .           
        .           /// The hash of the on-disk source file used for debug info.
       72 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Debug)]
    1,252 ( 0.00%)  #[derive(HashStable_Generic, Encodable, Decodable)]
        .           pub struct SourceFileHash {
        .               pub kind: SourceFileHashAlgorithm,
        .               value: [u8; 32],
        .           }
        .           
        .           impl SourceFileHash {
        .               pub fn new(kind: SourceFileHashAlgorithm, src: &str) -> SourceFileHash {
        .                   let mut hash = SourceFileHash { kind, value: Default::default() };
        .                   let len = hash.hash_len();
        .                   let value = &mut hash.value[..len];
        .                   let data = src.as_bytes();
        .                   match kind {
        .                       SourceFileHashAlgorithm::Md5 => {
       36 ( 0.00%)                  value.copy_from_slice(&Md5::digest(data));
        .                       }
        .                       SourceFileHashAlgorithm::Sha1 => {
        .                           value.copy_from_slice(&Sha1::digest(data));
        .                       }
        .                       SourceFileHashAlgorithm::Sha256 => {
        .                           value.copy_from_slice(&Sha256::digest(data));
        .                       }
        .                   }
-- line 1321 ----------------------------------------
-- line 1329 ----------------------------------------
        .           
        .               /// The bytes of the hash.
        .               pub fn hash_bytes(&self) -> &[u8] {
        .                   let len = self.hash_len();
        .                   &self.value[..len]
        .               }
        .           
        .               fn hash_len(&self) -> usize {
       36 ( 0.00%)          match self.kind {
        .                       SourceFileHashAlgorithm::Md5 => 16,
        .                       SourceFileHashAlgorithm::Sha1 => 20,
        .                       SourceFileHashAlgorithm::Sha256 => 32,
        .                   }
        .               }
        .           }
        .           
        .           /// A single source in the [`SourceMap`].
      696 ( 0.00%)  #[derive(Clone)]
        .           pub struct SourceFile {
        .               /// The name of the file that the source came from. Source that doesn't
        .               /// originate from files has names between angle brackets by convention
        .               /// (e.g., `<anon>`).
        .               pub name: FileName,
        .               /// The complete source code.
       12 ( 0.00%)      pub src: Option<Lrc<String>>,
        .               /// The source code's hash.
        .               pub src_hash: SourceFileHash,
        .               /// The external source code (used for external crates, which will have a `None`
        .               /// value as `self.src`.
        .               pub external_src: Lock<ExternalSource>,
        .               /// The start position of this source in the `SourceMap`.
        .               pub start_pos: BytePos,
        .               /// The end position of this source in the `SourceMap`.
-- line 1361 ----------------------------------------
-- line 1364 ----------------------------------------
        .               pub lines: Vec<BytePos>,
        .               /// Locations of multi-byte characters in the source code.
        .               pub multibyte_chars: Vec<MultiByteChar>,
        .               /// Width of characters that are not narrow in the source code.
        .               pub non_narrow_chars: Vec<NonNarrowChar>,
        .               /// Locations of characters removed during normalization.
        .               pub normalized_pos: Vec<NormalizedPos>,
        .               /// A hash of the filename, used for speeding up hashing in incremental compilation.
       12 ( 0.00%)      pub name_hash: u128,
        .               /// Indicates which crate this `SourceFile` was imported from.
       12 ( 0.00%)      pub cnum: CrateNum,
        .           }
        .           
        .           impl<S: Encoder> Encodable<S> for SourceFile {
        .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
        .                   s.emit_struct(false, |s| {
        .                       s.emit_struct_field("name", true, |s| self.name.encode(s))?;
        .                       s.emit_struct_field("src_hash", false, |s| self.src_hash.encode(s))?;
        .                       s.emit_struct_field("start_pos", false, |s| self.start_pos.encode(s))?;
        .                       s.emit_struct_field("end_pos", false, |s| self.end_pos.encode(s))?;
        .                       s.emit_struct_field("lines", false, |s| {
        .                           let lines = &self.lines[..];
        .                           // Store the length.
        .                           s.emit_u32(lines.len() as u32)?;
        .           
       48 ( 0.00%)                  if !lines.is_empty() {
        .                               // In order to preserve some space, we exploit the fact that
        .                               // the lines list is sorted and individual lines are
        .                               // probably not that long. Because of that we can store lines
        .                               // as a difference list, using as little space as possible
        .                               // for the differences.
        .                               let max_line_length = if lines.len() == 1 {
        .                                   0
        .                               } else {
-- line 1397 ----------------------------------------
-- line 1399 ----------------------------------------
        .                                       .array_windows()
        .                                       .map(|&[fst, snd]| snd - fst)
        .                                       .map(|bp| bp.to_usize())
        .                                       .max()
        .                                       .unwrap()
        .                               };
        .           
        .                               let bytes_per_diff: u8 = match max_line_length {
       24 ( 0.00%)                          0..=0xFF => 1,
        4 ( 0.00%)                          0x100..=0xFFFF => 2,
        .                                   _ => 4,
        .                               };
        .           
        .                               // Encode the number of bytes used per diff.
        .                               bytes_per_diff.encode(s)?;
        .           
        .                               // Encode the first element.
        .                               lines[0].encode(s)?;
        .           
        .                               let diff_iter = lines.array_windows().map(|&[fst, snd]| snd - fst);
        .           
       26 ( 0.00%)                      match bytes_per_diff {
        .                                   1 => {
        .                                       for diff in diff_iter {
        .                                           (diff.0 as u8).encode(s)?
        .                                       }
        .                                   }
        .                                   2 => {
        .                                       for diff in diff_iter {
        .                                           (diff.0 as u16).encode(s)?
-- line 1428 ----------------------------------------
-- line 1436 ----------------------------------------
        .                                   _ => unreachable!(),
        .                               }
        .                           }
        .           
        .                           Ok(())
        .                       })?;
        .                       s.emit_struct_field("multibyte_chars", false, |s| self.multibyte_chars.encode(s))?;
        .                       s.emit_struct_field("non_narrow_chars", false, |s| self.non_narrow_chars.encode(s))?;
       36 ( 0.00%)              s.emit_struct_field("name_hash", false, |s| self.name_hash.encode(s))?;
        .                       s.emit_struct_field("normalized_pos", false, |s| self.normalized_pos.encode(s))?;
      132 ( 0.00%)              s.emit_struct_field("cnum", false, |s| self.cnum.encode(s))
        .                   })
        .               }
        .           }
        .           
        .           impl<D: Decoder> Decodable<D> for SourceFile {
    2,817 ( 0.00%)      fn decode(d: &mut D) -> SourceFile {
        .                   d.read_struct(|d| {
        .                       let name: FileName = d.read_struct_field("name", |d| Decodable::decode(d));
        .                       let src_hash: SourceFileHash =
        .                           d.read_struct_field("src_hash", |d| Decodable::decode(d));
        .                       let start_pos: BytePos = d.read_struct_field("start_pos", |d| Decodable::decode(d));
        .                       let end_pos: BytePos = d.read_struct_field("end_pos", |d| Decodable::decode(d));
        .                       let lines: Vec<BytePos> = d.read_struct_field("lines", |d| {
        .                           let num_lines: u32 = Decodable::decode(d);
      313 ( 0.00%)                  let mut lines = Vec::with_capacity(num_lines as usize);
        .           
        .                           if num_lines > 0 {
        .                               // Read the number of bytes used per diff.
        .                               let bytes_per_diff: u8 = Decodable::decode(d);
        .           
        .                               // Read the first element.
        .                               let mut line_start: BytePos = Decodable::decode(d);
        .                               lines.push(line_start);
        .           
        .                               for _ in 1..num_lines {
  636,706 ( 0.16%)                          let diff = match bytes_per_diff {
        .                                       1 => d.read_u8() as u32,
        .                                       2 => d.read_u16() as u32,
        .                                       4 => d.read_u32(),
        .                                       _ => unreachable!(),
        .                                   };
        .           
        .                                   line_start = line_start + BytePos(diff);
        .           
-- line 1480 ----------------------------------------
-- line 1483 ----------------------------------------
        .                           }
        .           
        .                           lines
        .                       });
        .                       let multibyte_chars: Vec<MultiByteChar> =
        .                           d.read_struct_field("multibyte_chars", |d| Decodable::decode(d));
        .                       let non_narrow_chars: Vec<NonNarrowChar> =
        .                           d.read_struct_field("non_narrow_chars", |d| Decodable::decode(d));
      626 ( 0.00%)              let name_hash: u128 = d.read_struct_field("name_hash", |d| Decodable::decode(d));
        .                       let normalized_pos: Vec<NormalizedPos> =
        .                           d.read_struct_field("normalized_pos", |d| Decodable::decode(d));
        .                       let cnum: CrateNum = d.read_struct_field("cnum", |d| Decodable::decode(d));
    3,443 ( 0.00%)              SourceFile {
    2,504 ( 0.00%)                  name,
        .                           start_pos,
        .                           end_pos,
        .                           src: None,
    1,252 ( 0.00%)                  src_hash,
        .                           // Unused - the metadata decoder will construct
        .                           // a new SourceFile, filling in `external_src` properly
        .                           external_src: Lock::new(ExternalSource::Unneeded),
    1,252 ( 0.00%)                  lines,
    1,252 ( 0.00%)                  multibyte_chars,
    1,252 ( 0.00%)                  non_narrow_chars,
    1,252 ( 0.00%)                  normalized_pos,
        .                           name_hash,
        .                           cnum,
        .                       }
        .                   })
    2,817 ( 0.00%)      }
        .           }
        .           
        .           impl fmt::Debug for SourceFile {
        .               fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   write!(fmt, "SourceFile({:?})", self.name)
        .               }
        .           }
        .           
        .           impl SourceFile {
      132 ( 0.00%)      pub fn new(
        .                   name: FileName,
        .                   mut src: String,
        .                   start_pos: BytePos,
        .                   hash_kind: SourceFileHashAlgorithm,
        .               ) -> Self {
        .                   // Compute the file hash before any normalization.
        .                   let src_hash = SourceFileHash::new(hash_kind, &src);
       36 ( 0.00%)          let normalized_pos = normalize_src(&mut src, start_pos);
        .           
        .                   let name_hash = {
        .                       let mut hasher: StableHasher = StableHasher::new();
       24 ( 0.00%)              name.hash(&mut hasher);
        .                       hasher.finish::<u128>()
        .                   };
       24 ( 0.00%)          let end_pos = start_pos.to_usize() + src.len();
       36 ( 0.00%)          assert!(end_pos <= u32::MAX as usize);
        .           
      144 ( 0.00%)          let (lines, multibyte_chars, non_narrow_chars) =
       24 ( 0.00%)              analyze_source_file::analyze_source_file(&src, start_pos);
        .           
      204 ( 0.00%)          SourceFile {
        .                       name,
        .                       src: Some(Lrc::new(src)),
      132 ( 0.00%)              src_hash,
        .                       external_src: Lock::new(ExternalSource::Unneeded),
        .                       start_pos,
        .                       end_pos: Pos::from_usize(end_pos),
       48 ( 0.00%)              lines,
       48 ( 0.00%)              multibyte_chars,
       48 ( 0.00%)              non_narrow_chars,
       48 ( 0.00%)              normalized_pos,
        .                       name_hash,
        .                       cnum: LOCAL_CRATE,
        .                   }
      108 ( 0.00%)      }
        .           
        .               /// Returns the `BytePos` of the beginning of the current line.
        .               pub fn line_begin_pos(&self, pos: BytePos) -> BytePos {
        .                   let line_index = self.lookup_line(pos).unwrap();
        .                   self.lines[line_index]
        .               }
        .           
        .               /// Add externally loaded source.
        .               /// If the hash of the input doesn't match or no input is supplied via None,
        .               /// it is interpreted as an error and the corresponding enum variant is set.
        .               /// The return value signifies whether some kind of source is present.
      420 ( 0.00%)      pub fn add_external_src<F>(&self, get_src: F) -> bool
        .               where
        .                   F: FnOnce() -> Option<String>,
        .               {
       60 ( 0.00%)          if matches!(
      120 ( 0.00%)              *self.external_src.borrow(),
        .                       ExternalSource::Foreign { kind: ExternalSourceKind::AbsentOk, .. }
        .                   ) {
        .                       let src = get_src();
        .                       let mut external_src = self.external_src.borrow_mut();
        .                       // Check that no-one else have provided the source while we were getting it
        .                       if let ExternalSource::Foreign {
        .                           kind: src_kind @ ExternalSourceKind::AbsentOk, ..
        .                       } = &mut *external_src
-- line 1582 ----------------------------------------
-- line 1592 ----------------------------------------
        .                               *src_kind = ExternalSourceKind::AbsentErr;
        .                           }
        .           
        .                           false
        .                       } else {
        .                           self.src.is_some() || external_src.get_source().is_some()
        .                       }
        .                   } else {
       60 ( 0.00%)              self.src.is_some() || self.external_src.borrow().get_source().is_some()
        .                   }
      540 ( 0.00%)      }
        .           
        .               /// Gets a line from the list of pre-computed line-beginnings.
        .               /// The line number here is 0-based.
        .               pub fn get_line(&self, line_number: usize) -> Option<Cow<'_, str>> {
        .                   fn get_until_newline(src: &str, begin: usize) -> &str {
        .                       // We can't use `lines.get(line_number+1)` because we might
        .                       // be parsing when we call this function and thus the current
        .                       // line is the last one we have line info for.
-- line 1610 ----------------------------------------
-- line 1627 ----------------------------------------
        .                       Some(Cow::Owned(String::from(get_until_newline(src, begin))))
        .                   } else {
        .                       None
        .                   }
        .               }
        .           
        .               pub fn is_real_file(&self) -> bool {
        .                   self.name.is_real()
      325 ( 0.00%)      }
        .           
        .               pub fn is_imported(&self) -> bool {
        .                   self.src.is_none()
    5,997 ( 0.00%)      }
        .           
        .               pub fn count_lines(&self) -> usize {
        .                   self.lines.len()
        .               }
        .           
        .               /// Finds the line containing the given position. The return value is the
        .               /// index into the `lines` array of this `SourceFile`, not the 1-based line
        .               /// number. If the source_file is empty or the position is located before the
        .               /// first line, `None` is returned.
        .               pub fn lookup_line(&self, pos: BytePos) -> Option<usize> {
    3,012 ( 0.00%)          match self.lines.binary_search(&pos) {
        .                       Ok(idx) => Some(idx),
        .                       Err(0) => None,
        .                       Err(idx) => Some(idx - 1),
        .                   }
        .               }
        .           
        .               pub fn line_bounds(&self, line_index: usize) -> Range<BytePos> {
    7,262 ( 0.00%)          if self.is_empty() {
        .                       return self.start_pos..self.end_pos;
        .                   }
        .           
    4,862 ( 0.00%)          assert!(line_index < self.lines.len());
    6,990 ( 0.00%)          if line_index == (self.lines.len() - 1) {
       92 ( 0.00%)              self.lines[line_index]..self.end_pos
        .                   } else {
    4,590 ( 0.00%)              self.lines[line_index]..self.lines[line_index + 1]
        .                   }
        .               }
        .           
        .               /// Returns whether or not the file contains the given `SourceMap` byte
        .               /// position. The position one past the end of the file is considered to be
        .               /// contained by the file. This implies that files for which `is_empty`
        .               /// returns true still contain one byte position according to this function.
        .               #[inline]
-- line 1674 ----------------------------------------
-- line 1692 ----------------------------------------
        .                       Err(i) if i == 0 => 0,
        .                       Err(i) => self.normalized_pos[i - 1].diff,
        .                   };
        .           
        .                   BytePos::from_u32(pos.0 - self.start_pos.0 + diff)
        .               }
        .           
        .               /// Converts an absolute `BytePos` to a `CharPos` relative to the `SourceFile`.
        2 ( 0.00%)      pub fn bytepos_to_file_charpos(&self, bpos: BytePos) -> CharPos {
        .                   // The number of extra bytes due to multibyte chars in the `SourceFile`.
        .                   let mut total_extra_bytes = 0;
        .           
        6 ( 0.00%)          for mbc in self.multibyte_chars.iter() {
        .                       debug!("{}-byte char at {:?}", mbc.bytes, mbc.pos);
        4 ( 0.00%)              if mbc.pos < bpos {
        .                           // Every character is at least one byte, so we only
        .                           // count the actual extra bytes.
        .                           total_extra_bytes += mbc.bytes as u32 - 1;
        .                           // We should never see a byte position in the middle of a
        .                           // character.
        .                           assert!(bpos.to_u32() >= mbc.pos.to_u32() + mbc.bytes as u32);
        .                       } else {
        .                           break;
        .                       }
        .                   }
        .           
       12 ( 0.00%)          assert!(self.start_pos.to_u32() + total_extra_bytes <= bpos.to_u32());
       10 ( 0.00%)          CharPos(bpos.to_usize() - self.start_pos.to_usize() - total_extra_bytes as usize)
        4 ( 0.00%)      }
        .           
        .               /// Looks up the file's (1-based) line number and (0-based `CharPos`) column offset, for a
        .               /// given `BytePos`.
        7 ( 0.00%)      pub fn lookup_file_pos(&self, pos: BytePos) -> (usize, CharPos) {
        2 ( 0.00%)          let chpos = self.bytepos_to_file_charpos(pos);
        .                   match self.lookup_line(pos) {
        .                       Some(a) => {
        .                           let line = a + 1; // Line numbers start at 1
        1 ( 0.00%)                  let linebpos = self.lines[a];
        2 ( 0.00%)                  let linechpos = self.bytepos_to_file_charpos(linebpos);
        .                           let col = chpos - linechpos;
        .                           debug!("byte pos {:?} is on the line at byte pos {:?}", pos, linebpos);
        .                           debug!("char pos {:?} is on the line at char pos {:?}", chpos, linechpos);
        .                           debug!("byte is on line: {}", line);
        1 ( 0.00%)                  assert!(chpos >= linechpos);
        .                           (line, col)
        .                       }
        .                       None => (0, chpos),
        .                   }
        8 ( 0.00%)      }
        .           
        .               /// Looks up the file's (1-based) line number, (0-based `CharPos`) column offset, and (0-based)
        .               /// column offset when displayed, for a given `BytePos`.
        8 ( 0.00%)      pub fn lookup_file_pos_with_col_display(&self, pos: BytePos) -> (usize, CharPos, usize) {
        3 ( 0.00%)          let (line, col_or_chpos) = self.lookup_file_pos(pos);
        2 ( 0.00%)          if line > 0 {
        .                       let col = col_or_chpos;
        1 ( 0.00%)              let linebpos = self.lines[line - 1];
        .                       let col_display = {
        .                           let start_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&linebpos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let end_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&pos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let special_chars = end_width_idx - start_width_idx;
        .                           let non_narrow: usize = self.non_narrow_chars[start_width_idx..end_width_idx]
        .                               .iter()
        .                               .map(|x| x.width())
        .                               .sum();
        5 ( 0.00%)                  col.0 - special_chars + non_narrow
        .                       };
        .                       (line, col, col_display)
        .                   } else {
        .                       let chpos = col_or_chpos;
        .                       let col_display = {
        .                           let end_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&pos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let non_narrow: usize =
        .                               self.non_narrow_chars[0..end_width_idx].iter().map(|x| x.width()).sum();
        .                           chpos.0 - end_width_idx + non_narrow
        .                       };
        .                       (0, chpos, col_display)
        .                   }
        7 ( 0.00%)      }
        .           }
        .           
        .           /// Normalizes the source code and records the normalizations.
      120 ( 0.00%)  fn normalize_src(src: &mut String, start_pos: BytePos) -> Vec<NormalizedPos> {
        .               let mut normalized_pos = vec![];
        .               remove_bom(src, &mut normalized_pos);
        .               normalize_newlines(src, &mut normalized_pos);
        .           
        .               // Offset all the positions by start_pos to match the final file positions.
        .               for np in &mut normalized_pos {
        .                   np.pos.0 += start_pos.0;
        .               }
        .           
        .               normalized_pos
      108 ( 0.00%)  }
        .           
        .           /// Removes UTF-8 BOM, if any.
        .           fn remove_bom(src: &mut String, normalized_pos: &mut Vec<NormalizedPos>) {
       12 ( 0.00%)      if src.starts_with('\u{feff}') {
        .                   src.drain(..3);
        .                   normalized_pos.push(NormalizedPos { pos: BytePos(0), diff: 3 });
        .               }
        .           }
        .           
        .           /// Replaces `\r\n` with `\n` in-place in `src`.
        .           ///
        .           /// Returns error if there's a lone `\r` in the string.
        .           fn normalize_newlines(src: &mut String, normalized_pos: &mut Vec<NormalizedPos>) {
       12 ( 0.00%)      if !src.as_bytes().contains(&b'\r') {
        .                   return;
        .               }
        .           
        .               // We replace `\r\n` with `\n` in-place, which doesn't break utf-8 encoding.
        .               // While we *can* call `as_mut_vec` and do surgery on the live string
        .               // directly, let's rather steal the contents of `src`. This makes the code
        .               // safe even if a panic occurs.
        .           
-- line 1816 ----------------------------------------
-- line 1877 ----------------------------------------
        .               (
        .                   $(
        .                       $(#[$attr:meta])*
        .                       $vis:vis struct $ident:ident($inner_vis:vis $inner_ty:ty);
        .                   )*
        .               ) => {
        .                   $(
        .                       $(#[$attr])*
   19,836 ( 0.01%)              $vis struct $ident($inner_vis $inner_ty);
        .           
        .                       impl Pos for $ident {
        .                           #[inline(always)]
        .                           fn from_usize(n: usize) -> $ident {
    1,856 ( 0.00%)                      $ident(n as $inner_ty)
        .                           }
        .           
        .                           #[inline(always)]
        .                           fn to_usize(&self) -> usize {
   35,473 ( 0.01%)                      self.0 as usize
        .                           }
        .           
        .                           #[inline(always)]
        .                           fn from_u32(n: u32) -> $ident {
        .                               $ident(n as $inner_ty)
        .                           }
        .           
        .                           #[inline(always)]
-- line 1903 ----------------------------------------
-- line 1906 ----------------------------------------
        .                           }
        .                       }
        .           
        .                       impl Add for $ident {
        .                           type Output = $ident;
        .           
        .                           #[inline(always)]
        .                           fn add(self, rhs: $ident) -> $ident {
1,073,843 ( 0.28%)                      $ident(self.0 + rhs.0)
        .                           }
        .                       }
        .           
        .                       impl Sub for $ident {
        .                           type Output = $ident;
        .           
        .                           #[inline(always)]
        .                           fn sub(self, rhs: $ident) -> $ident {
  750,123 ( 0.19%)                      $ident(self.0 - rhs.0)
        .                           }
        .                       }
        .                   )*
        .               };
        .           }
        .           
        .           impl_pos! {
        .               /// A byte offset.
-- line 1931 ----------------------------------------
-- line 1946 ----------------------------------------
        .           impl<S: rustc_serialize::Encoder> Encodable<S> for BytePos {
        .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
        .                   s.emit_u32(self.0)
        .               }
        .           }
        .           
        .           impl<D: rustc_serialize::Decoder> Decodable<D> for BytePos {
        .               fn decode(d: &mut D) -> BytePos {
   69,338 ( 0.02%)          BytePos(d.read_u32())
        .               }
        .           }
        .           
        .           // _____________________________________________________________________________
        .           // Loc, SourceFileAndLine, SourceFileAndBytePos
        .           //
        .           
        .           /// A source code location used for error reporting.
-- line 1962 ----------------------------------------
-- line 2079 ----------------------------------------
        .               /// offsets into the `SourceMap`). Instead, we hash the (file name, line, column)
        .               /// triple, which stays the same even if the containing `SourceFile` has moved
        .               /// within the `SourceMap`.
        .               ///
        .               /// Also note that we are hashing byte offsets for the column, not unicode
        .               /// codepoint offsets. For the purpose of the hash that's sufficient.
        .               /// Also, hashing filenames is expensive so we avoid doing it twice when the
        .               /// span starts and ends in the same file, which is almost always the case.
  100,352 ( 0.03%)      fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {
        .                   const TAG_VALID_SPAN: u8 = 0;
        .                   const TAG_INVALID_SPAN: u8 = 1;
        .                   const TAG_RELATIVE_SPAN: u8 = 2;
        .           
   16,132 ( 0.00%)          if !ctx.hash_spans() {
        .                       return;
        .                   }
        .           
   84,220 ( 0.02%)          let span = self.data_untracked();
   37,620 ( 0.01%)          span.ctxt.hash_stable(ctx, hasher);
   43,008 ( 0.01%)          span.parent.hash_stable(ctx, hasher);
        .           
   28,933 ( 0.01%)          if span.is_dummy() {
        .                       Hash::hash(&TAG_INVALID_SPAN, hasher);
        .                       return;
        .                   }
        .           
   28,150 ( 0.01%)          if let Some(parent) = span.parent {
        .                       let def_span = ctx.def_span(parent).data_untracked();
        .                       if def_span.contains(span) {
        .                           // This span is enclosed in a definition: only hash the relative position.
        .                           Hash::hash(&TAG_RELATIVE_SPAN, hasher);
        .                           (span.lo - def_span.lo).to_u32().hash_stable(ctx, hasher);
        .                           (span.hi - def_span.lo).to_u32().hash_stable(ctx, hasher);
        .                           return;
        .                       }
        .                   }
        .           
        .                   // If this is not an empty or invalid span, we want to hash the last
        .                   // position that belongs to it, as opposed to hashing the first
        .                   // position past it.
   56,300 ( 0.01%)          let (file, line_lo, col_lo, line_hi, col_hi) = match ctx.span_data_to_lines_and_cols(&span)
        .                   {
   28,150 ( 0.01%)              Some(pos) => pos,
        .                       None => {
        .                           Hash::hash(&TAG_INVALID_SPAN, hasher);
        .                           return;
        .                       }
        .                   };
        .           
        .                   Hash::hash(&TAG_VALID_SPAN, hasher);
        .                   // We truncate the stable ID hash and line and column numbers. The chances
-- line 2129 ----------------------------------------
-- line 2134 ----------------------------------------
        .                   // hash only the length, for example, then two otherwise equal spans with
        .                   // different end locations will have the same hash. This can cause a problem
        .                   // during incremental compilation wherein a previous result for a query that
        .                   // depends on the end location of a span will be incorrectly reused when the
        .                   // end location of the span it depends on has changed (see issue #74890). A
        .                   // similar analysis applies if some query depends specifically on the length
        .                   // of the span, but we only hash the end location. So hash both.
        .           
   14,075 ( 0.00%)          let col_lo_trunc = (col_lo.0 as u64) & 0xFF;
        .                   let line_lo_trunc = ((line_lo as u64) & 0xFF_FF_FF) << 8;
        .                   let col_hi_trunc = (col_hi.0 as u64) & 0xFF << 32;
        .                   let line_hi_trunc = ((line_hi as u64) & 0xFF_FF_FF) << 40;
        .                   let col_line = col_lo_trunc | line_lo_trunc | col_hi_trunc | line_hi_trunc;
   14,075 ( 0.00%)          let len = (span.hi - span.lo).0;
        .                   Hash::hash(&col_line, hasher);
        .                   Hash::hash(&len, hasher);
  114,688 ( 0.03%)      }
        .           }

  994,466 ( 0.26%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/bitmask.rs
--------------------------------------------------------------------------------
Ir                 

-- line 17 ----------------------------------------
        .           pub struct BitMask(pub BitMaskWord);
        .           
        .           #[allow(clippy::use_self)]
        .           impl BitMask {
        .               /// Returns a new `BitMask` with all bits inverted.
        .               #[inline]
        .               #[must_use]
        .               pub fn invert(self) -> Self {
   26,621 ( 0.01%)          BitMask(self.0 ^ BITMASK_MASK)
        .               }
        .           
        .               /// Flip the bit in the mask for the entry at the given index.
        .               ///
        .               /// Returns the bit's previous state.
        .               #[inline]
        .               #[allow(clippy::cast_ptr_alignment)]
        .               #[cfg(feature = "raw")]
-- line 33 ----------------------------------------
-- line 38 ----------------------------------------
        .                   // The bit was set if the bit is now 0.
        .                   self.0 & mask == 0
        .               }
        .           
        .               /// Returns a new `BitMask` with the lowest bit removed.
        .               #[inline]
        .               #[must_use]
        .               pub fn remove_lowest_bit(self) -> Self {
   19,200 ( 0.00%)          BitMask(self.0 & (self.0 - 1))
        .               }
        .               /// Returns whether the `BitMask` has at least one set bit.
        .               #[inline]
        .               pub fn any_bit_set(self) -> bool {
  276,554 ( 0.07%)          self.0 != 0
        .               }
        .           
        .               /// Returns the first set bit in the `BitMask`, if there is one.
        .               #[inline]
        .               pub fn lowest_set_bit(self) -> Option<usize> {
3,021,135 ( 0.78%)          if self.0 == 0 {
        .                       None
        .                   } else {
        .                       Some(unsafe { self.lowest_set_bit_nonzero() })
        .                   }
        .               }
        .           
        .               /// Returns the first set bit in the `BitMask`, if there is one. The
        .               /// bitmask must not be empty.
        .               #[inline]
        .               #[cfg(feature = "nightly")]
        .               pub unsafe fn lowest_set_bit_nonzero(self) -> usize {
    2,791 ( 0.00%)          intrinsics::cttz_nonzero(self.0) as usize / BITMASK_STRIDE
        .               }
        .               #[inline]
        .               #[cfg(not(feature = "nightly"))]
        .               pub unsafe fn lowest_set_bit_nonzero(self) -> usize {
        .                   self.trailing_zeros()
        .               }
        .           
        .               /// Returns the number of trailing zeroes in the `BitMask`.
-- line 77 ----------------------------------------
-- line 110 ----------------------------------------
        .           /// bits.
        .           pub struct BitMaskIter(BitMask);
        .           
        .           impl Iterator for BitMaskIter {
        .               type Item = usize;
        .           
        .               #[inline]
        .               fn next(&mut self) -> Option<usize> {
  442,428 ( 0.11%)          let bit = self.0.lowest_set_bit()?;
        .                   self.0 = self.0.remove_lowest_bit();
        .                   Some(bit)
        .               }
        .           }

   16,461 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/bitmask.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.7.0/src/lib.rs
--------------------------------------------------------------------------------
Ir               

-- line 294 ----------------------------------------
      .           #[allow(deprecated)]
      .           impl From<LayoutErr> for CollectionAllocErr {
      .               fn from(_: LayoutErr) -> Self {
      .                   CollectionAllocErr::CapacityOverflow
      .               }
      .           }
      .           
      .           fn infallible<T>(result: Result<T, CollectionAllocErr>) -> T {
 57,800 ( 0.01%)      match result {
      .                   Ok(x) => x,
      .                   Err(CollectionAllocErr::CapacityOverflow) => panic!("capacity overflow"),
      .                   Err(CollectionAllocErr::AllocErr { layout }) => alloc::alloc::handle_alloc_error(layout),
      .               }
      .           }
      .           
      .           /// FIXME: use `Layout::array` when we require a Rust version where it’s stable
      .           /// https://github.com/rust-lang/rust/issues/55724
-- line 310 ----------------------------------------
-- line 422 ----------------------------------------
      .           #[cfg(feature = "union")]
      .           impl<A: Array> SmallVecData<A> {
      .               #[inline]
      .               unsafe fn inline(&self) -> *const A::Item {
      .                   self.inline.as_ptr() as *const A::Item
      .               }
      .               #[inline]
      .               unsafe fn inline_mut(&mut self) -> *mut A::Item {
  7,964 ( 0.00%)          self.inline.as_mut_ptr() as *mut A::Item
      .               }
      .               #[inline]
      .               fn from_inline(inline: MaybeUninit<A>) -> SmallVecData<A> {
      .                   SmallVecData {
      .                       inline: core::mem::ManuallyDrop::new(inline),
      .                   }
      .               }
      .               #[inline]
      .               unsafe fn into_inline(self) -> MaybeUninit<A> {
      .                   core::mem::ManuallyDrop::into_inner(self.inline)
      .               }
      .               #[inline]
      .               unsafe fn heap(&self) -> (*mut A::Item, usize) {
    725 ( 0.00%)          self.heap
      .               }
      .               #[inline]
      .               unsafe fn heap_mut(&mut self) -> &mut (*mut A::Item, usize) {
      .                   &mut self.heap
      .               }
      .               #[inline]
      .               fn from_heap(ptr: *mut A::Item, len: usize) -> SmallVecData<A> {
      .                   SmallVecData { heap: (ptr, len) }
-- line 452 ----------------------------------------
-- line 557 ----------------------------------------
      .               #[inline]
      .               pub fn new() -> SmallVec<A> {
      .                   // Try to detect invalid custom implementations of `Array`. Hopefully,
      .                   // this check should be optimized away entirely for valid ones.
      .                   assert!(
      .                       mem::size_of::<A>() == A::size() * mem::size_of::<A::Item>()
      .                           && mem::align_of::<A>() >= mem::align_of::<A::Item>()
      .                   );
 58,860 ( 0.02%)          SmallVec {
      .                       capacity: 0,
      .                       data: SmallVecData::from_inline(MaybeUninit::uninit()),
      .                   }
      .               }
      .           
      .               /// Construct an empty vector with enough capacity pre-allocated to store at least `n`
      .               /// elements.
      .               ///
-- line 573 ----------------------------------------
-- line 635 ----------------------------------------
      .               /// let small_vec: SmallVec<_> = SmallVec::from_buf(buf);
      .               ///
      .               /// assert_eq!(&*small_vec, &[1, 2, 3, 4, 5]);
      .               /// ```
      .               #[inline]
      .               pub fn from_buf(buf: A) -> SmallVec<A> {
      .                   SmallVec {
      .                       capacity: A::size(),
    994 ( 0.00%)              data: SmallVecData::from_inline(MaybeUninit::new(buf)),
      .                   }
      .               }
      .           
      .               /// Constructs a new `SmallVec` on the stack from an `A` without
      .               /// copying elements. Also sets the length, which must be less or
      .               /// equal to the size of `buf`.
      .               ///
      .               /// ```rust
-- line 651 ----------------------------------------
-- line 653 ----------------------------------------
      .               ///
      .               /// let buf = [1, 2, 3, 4, 5, 0, 0, 0];
      .               /// let small_vec: SmallVec<_> = SmallVec::from_buf_and_len(buf, 5);
      .               ///
      .               /// assert_eq!(&*small_vec, &[1, 2, 3, 4, 5]);
      .               /// ```
      .               #[inline]
      .               pub fn from_buf_and_len(buf: A, len: usize) -> SmallVec<A> {
     12 ( 0.00%)          assert!(len <= A::size());
     36 ( 0.00%)          unsafe { SmallVec::from_buf_and_len_unchecked(MaybeUninit::new(buf), len) }
      .               }
      .           
      .               /// Constructs a new `SmallVec` on the stack from an `A` without
      .               /// copying elements. Also sets the length. The user is responsible
      .               /// for ensuring that `len <= A::size()`.
      .               ///
      .               /// ```rust
      .               /// use smallvec::SmallVec;
-- line 670 ----------------------------------------
-- line 674 ----------------------------------------
      .               /// let small_vec: SmallVec<_> = unsafe {
      .               ///     SmallVec::from_buf_and_len_unchecked(MaybeUninit::new(buf), 5)
      .               /// };
      .               ///
      .               /// assert_eq!(&*small_vec, &[1, 2, 3, 4, 5]);
      .               /// ```
      .               #[inline]
      .               pub unsafe fn from_buf_and_len_unchecked(buf: MaybeUninit<A>, len: usize) -> SmallVec<A> {
      6 ( 0.00%)          SmallVec {
      .                       capacity: len,
      .                       data: SmallVecData::from_inline(buf),
      .                   }
      .               }
      .           
      .               /// Sets the length of a vector.
      .               ///
      .               /// This will explicitly set the size of the vector, without actually
      .               /// modifying its buffers, so it is up to the caller to ensure that the
      .               /// vector is actually the specified size.
      .               pub unsafe fn set_len(&mut self, new_len: usize) {
      .                   let (_, len_ptr, _) = self.triple_mut();
 10,706 ( 0.00%)          *len_ptr = new_len;
      .               }
      .           
      .               /// The maximum number of elements this vector can hold inline
      .               #[inline]
      .               fn inline_capacity() -> usize {
      .                   if mem::size_of::<A::Item>() > 0 {
      .                       A::size()
      .                   } else {
-- line 703 ----------------------------------------
-- line 725 ----------------------------------------
      .               #[inline]
      .               pub fn len(&self) -> usize {
      .                   self.triple().1
      .               }
      .           
      .               /// Returns `true` if the vector is empty
      .               #[inline]
      .               pub fn is_empty(&self) -> bool {
  8,542 ( 0.00%)          self.len() == 0
      .               }
      .           
      .               /// The number of items the vector can hold without reallocating
      .               #[inline]
      .               pub fn capacity(&self) -> usize {
      .                   self.triple().2
      .               }
      .           
      .               /// Returns a tuple with (data ptr, len, capacity)
      .               /// Useful to get all SmallVec properties with a single check of the current storage variant.
      .               #[inline]
      .               fn triple(&self) -> (*const A::Item, usize, usize) {
      .                   unsafe {
505,669 ( 0.13%)              if self.spilled() {
      .                           let (ptr, len) = self.data.heap();
      .                           (ptr, len, self.capacity)
      .                       } else {
      .                           (self.data.inline(), self.capacity, Self::inline_capacity())
      .                       }
      .                   }
      .               }
      .           
      .               /// Returns a tuple with (data ptr, len ptr, capacity)
      .               #[inline]
      .               fn triple_mut(&mut self) -> (*mut A::Item, &mut usize, usize) {
      .                   unsafe {
688,838 ( 0.18%)              if self.spilled() {
  9,047 ( 0.00%)                  let &mut (ptr, ref mut len_ptr) = self.data.heap_mut();
      .                           (ptr, len_ptr, self.capacity)
      .                       } else {
      .                           (
      .                               self.data.inline_mut(),
      .                               &mut self.capacity,
      .                               Self::inline_capacity(),
      .                           )
      .                       }
      .                   }
      .               }
      .           
      .               /// Returns `true` if the data has spilled into a separate heap-allocated buffer.
      .               #[inline]
      .               pub fn spilled(&self) -> bool {
820,157 ( 0.21%)          self.capacity > Self::inline_capacity()
      .               }
      .           
      .               /// Creates a draining iterator that removes the specified range in the vector
      .               /// and yields the removed items.
      .               ///
      .               /// Note 1: The element range is removed even if the iterator is only
      .               /// partially consumed or not consumed at all.
      .               ///
-- line 784 ----------------------------------------
-- line 821 ----------------------------------------
      .                           iter: range_slice.iter(),
      .                           vec: NonNull::from(self),
      .                       }
      .                   }
      .               }
      .           
      .               /// Append an item to the vector.
      .               #[inline]
  9,755 ( 0.00%)      pub fn push(&mut self, value: A::Item) {
      .                   unsafe {
      .                       let (mut ptr, mut len, cap) = self.triple_mut();
 96,250 ( 0.02%)              if *len == cap {
     24 ( 0.00%)                  self.reserve(1);
    487 ( 0.00%)                  let &mut (heap_ptr, ref mut heap_len) = self.data.heap_mut();
      .                           ptr = heap_ptr;
      .                           len = heap_len;
      .                       }
    374 ( 0.00%)              ptr::write(ptr.add(*len), value);
170,491 ( 0.04%)              *len += 1;
      .                   }
  7,804 ( 0.00%)      }
      .           
      .               /// Remove an item from the end of the vector and return it, or None if empty.
      .               #[inline]
      .               pub fn pop(&mut self) -> Option<A::Item> {
      .                   unsafe {
      .                       let (ptr, len_ptr, _) = self.triple_mut();
 52,748 ( 0.01%)              if *len_ptr == 0 {
      .                           return None;
      .                       }
 13,171 ( 0.00%)              let last_index = *len_ptr - 1;
 13,290 ( 0.00%)              *len_ptr = last_index;
 12,330 ( 0.00%)              Some(ptr::read(ptr.add(last_index)))
      .                   }
     50 ( 0.00%)      }
      .           
      .               /// Moves all the elements of `other` into `self`, leaving `other` empty.
      .               ///
      .               /// # Example
      .               ///
      .               /// ```
      .               /// # use smallvec::{SmallVec, smallvec};
      .               /// let mut v0: SmallVec<[u8; 16]> = smallvec![1, 2, 3];
-- line 863 ----------------------------------------
-- line 879 ----------------------------------------
      .               /// or if the capacity computation overflows `usize`.
      .               pub fn grow(&mut self, new_cap: usize) {
      .                   infallible(self.try_grow(new_cap))
      .               }
      .           
      .               /// Re-allocate to set the capacity to `max(new_cap, inline_size())`.
      .               ///
      .               /// Panics if `new_cap` is less than the vector's length
  2,028 ( 0.00%)      pub fn try_grow(&mut self, new_cap: usize) -> Result<(), CollectionAllocErr> {
      .                   unsafe {
      4 ( 0.00%)              let (ptr, &mut len, cap) = self.triple_mut();
      .                       let unspilled = !self.spilled();
  1,054 ( 0.00%)              assert!(new_cap >= len);
  1,054 ( 0.00%)              if new_cap <= self.inline_size() {
      .                           if unspilled {
      .                               return Ok(());
      .                           }
      .                           self.data = SmallVecData::from_inline(MaybeUninit::uninit());
      .                           ptr::copy_nonoverlapping(ptr, self.data.inline_mut(), len);
      .                           self.capacity = len;
      .                           deallocate(ptr, cap);
  1,054 ( 0.00%)              } else if new_cap != cap {
    996 ( 0.00%)                  let layout = layout_array::<A::Item>(new_cap)?;
      .                           debug_assert!(layout.size() > 0);
      .                           let new_alloc;
    527 ( 0.00%)                  if unspilled {
      .                               new_alloc = NonNull::new(alloc::alloc::alloc(layout))
      .                                   .ok_or(CollectionAllocErr::AllocErr { layout })?
      .                                   .cast()
      .                                   .as_ptr();
      .                               ptr::copy_nonoverlapping(ptr, new_alloc, len);
      .                           } else {
      .                               // This should never fail since the same succeeded
      .                               // when previously allocating `ptr`.
    181 ( 0.00%)                      let old_layout = layout_array::<A::Item>(cap)?;
      .           
      .                               let new_ptr = alloc::alloc::realloc(ptr as *mut u8, old_layout, layout.size());
      .                               new_alloc = NonNull::new(new_ptr)
      .                                   .ok_or(CollectionAllocErr::AllocErr { layout })?
      .                                   .cast()
      .                                   .as_ptr();
      .                           }
  1,054 ( 0.00%)                  self.data = SmallVecData::from_heap(new_alloc, len);
  1,715 ( 0.00%)                  self.capacity = new_cap;
      .                       }
      .                       Ok(())
      .                   }
  2,032 ( 0.00%)      }
      .           
      .               /// Reserve capacity for `additional` more elements to be inserted.
      .               ///
      .               /// May reserve more space to avoid frequent reallocations.
      .               ///
      .               /// Panics if the capacity computation overflows `usize`.
      .               #[inline]
 13,358 ( 0.00%)      pub fn reserve(&mut self, additional: usize) {
 61,033 ( 0.02%)          infallible(self.try_reserve(additional))
 15,080 ( 0.00%)      }
      .           
      .               /// Reserve capacity for `additional` more elements to be inserted.
      .               ///
      .               /// May reserve more space to avoid frequent reallocations.
247,386 ( 0.06%)      pub fn try_reserve(&mut self, additional: usize) -> Result<(), CollectionAllocErr> {
      .                   // prefer triple_mut() even if triple() would work
      .                   // so that the optimizer removes duplicated calls to it
      .                   // from callers like insert()
    186 ( 0.00%)          let (_, &mut len, cap) = self.triple_mut();
187,330 ( 0.05%)          if cap - len >= additional {
      .                       return Ok(());
      .                   }
      .                   let new_cap = len
      .                       .checked_add(additional)
      .                       .and_then(usize::checked_next_power_of_two)
      .                       .ok_or(CollectionAllocErr::CapacityOverflow)?;
    164 ( 0.00%)          self.try_grow(new_cap)
259,023 ( 0.07%)      }
      .           
      .               /// Reserve the minimum capacity for `additional` more elements to be inserted.
      .               ///
      .               /// Panics if the new capacity overflows `usize`.
      .               pub fn reserve_exact(&mut self, additional: usize) {
      .                   infallible(self.try_reserve_exact(additional))
      .               }
      .           
      .               /// Reserve the minimum capacity for `additional` more elements to be inserted.
      .               pub fn try_reserve_exact(&mut self, additional: usize) -> Result<(), CollectionAllocErr> {
      .                   let (_, &mut len, cap) = self.triple_mut();
 13,194 ( 0.00%)          if cap - len >= additional {
      .                       return Ok(());
      .                   }
      .                   let new_cap = len
      .                       .checked_add(additional)
      .                       .ok_or(CollectionAllocErr::CapacityOverflow)?;
    188 ( 0.00%)          self.try_grow(new_cap)
    188 ( 0.00%)      }
      .           
      .               /// Shrink the capacity of the vector as much as possible.
      .               ///
      .               /// When possible, this will move data from an external heap buffer to the vector's inline
      .               /// storage.
      .               pub fn shrink_to_fit(&mut self) {
      .                   if !self.spilled() {
      .                       return;
-- line 981 ----------------------------------------
-- line 999 ----------------------------------------
      .               /// If `len` is greater than or equal to the vector's current length, this has no
      .               /// effect.
      .               ///
      .               /// This does not re-allocate.  If you want the vector's capacity to shrink, call
      .               /// `shrink_to_fit` after truncating.
      .               pub fn truncate(&mut self, len: usize) {
      .                   unsafe {
      .                       let (ptr, len_ptr, _) = self.triple_mut();
  2,920 ( 0.00%)              while len < *len_ptr {
      .                           let last_index = *len_ptr - 1;
      .                           *len_ptr = last_index;
      .                           ptr::drop_in_place(ptr.add(last_index));
      .                       }
      .                   }
      .               }
      .           
      .               /// Extracts a slice containing the entire vector.
-- line 1015 ----------------------------------------
-- line 1047 ----------------------------------------
      .           
      .               /// Remove and return the element at position `index`, shifting all elements after it to the
      .               /// left.
      .               ///
      .               /// Panics if `index` is out of bounds.
      .               pub fn remove(&mut self, index: usize) -> A::Item {
      .                   unsafe {
      .                       let (mut ptr, len_ptr, _) = self.triple_mut();
     10 ( 0.00%)              let len = *len_ptr;
     54 ( 0.00%)              assert!(index < len);
  5,072 ( 0.00%)              *len_ptr = len - 1;
      .                       ptr = ptr.add(index);
      .                       let item = ptr::read(ptr);
     36 ( 0.00%)              ptr::copy(ptr.add(1), ptr, len - index - 1);
      .                       item
      .                   }
      .               }
      .           
      .               /// Insert an element at position `index`, shifting all elements after it to the right.
      .               ///
      .               /// Panics if `index` is out of bounds.
    174 ( 0.00%)      pub fn insert(&mut self, index: usize, element: A::Item) {
      .                   self.reserve(1);
      .           
      .                   unsafe {
      .                       let (mut ptr, len_ptr, _) = self.triple_mut();
     16 ( 0.00%)              let len = *len_ptr;
     32 ( 0.00%)              assert!(index <= len);
     64 ( 0.00%)              *len_ptr = len + 1;
      .                       ptr = ptr.add(index);
     32 ( 0.00%)              ptr::copy(ptr, ptr.add(1), len - index);
      .                       ptr::write(ptr, element);
      .                   }
    113 ( 0.00%)      }
      .           
      .               /// Insert multiple elements at position `index`, shifting all following elements toward the
      .               /// back.
      .               pub fn insert_many<I: IntoIterator<Item = A::Item>>(&mut self, index: usize, iterable: I) {
      .                   let mut iter = iterable.into_iter();
      .                   if index == self.len() {
      .                       return self.extend(iter);
      .                   }
-- line 1088 ----------------------------------------
-- line 1201 ----------------------------------------
      .                   }
      .               }
      .           
      .               /// Retains only the elements specified by the predicate.
      .               ///
      .               /// In other words, remove all elements `e` such that `f(&e)` returns `false`.
      .               /// This method operates in place and preserves the order of the retained
      .               /// elements.
  8,928 ( 0.00%)      pub fn retain<F: FnMut(&mut A::Item) -> bool>(&mut self, mut f: F) {
      .                   let mut del = 0;
      .                   let len = self.len();
      .                   for i in 0..len {
  1,320 ( 0.00%)              if !f(&mut self[i]) {
    100 ( 0.00%)                  del += 1;
    280 ( 0.00%)              } else if del > 0 {
      .                           self.swap(i - del, i);
      .                       }
      .                   }
  1,984 ( 0.00%)          self.truncate(len - del);
  7,936 ( 0.00%)      }
      .           
      .               /// Removes consecutive duplicate elements.
      .               pub fn dedup(&mut self)
      .               where
      .                   A::Item: PartialEq<A::Item>,
      .               {
      .                   self.dedup_by(|a, b| a == b);
      .               }
-- line 1228 ----------------------------------------
-- line 1418 ----------------------------------------
      .                           capacity: len,
      .                           data: SmallVecData::from_inline(unsafe {
      .                               let mut data: MaybeUninit<A> = MaybeUninit::uninit();
      .                               ptr::copy_nonoverlapping(
      .                                   slice.as_ptr(),
      .                                   data.as_mut_ptr() as *mut A::Item,
      .                                   len,
      .                               );
      9 ( 0.00%)                      data
      .                           }),
      .                       }
      .                   } else {
      .                       let mut b = slice.to_vec();
      .                       let (ptr, cap) = (b.as_mut_ptr(), b.capacity());
      .                       mem::forget(b);
      .                       SmallVec {
      .                           capacity: cap,
-- line 1434 ----------------------------------------
-- line 1436 ----------------------------------------
      .                       }
      .                   }
      .               }
      .           
      .               /// Copy elements from a slice into the vector at position `index`, shifting any following
      .               /// elements toward the back.
      .               ///
      .               /// For slices of `Copy` types, this is more efficient than `insert`.
 28,268 ( 0.01%)      pub fn insert_from_slice(&mut self, index: usize, slice: &[A::Item]) {
      .                   self.reserve(slice.len());
      .           
      .                   let len = self.len();
  8,781 ( 0.00%)          assert!(index <= len);
      .           
      .                   unsafe {
      .                       let slice_ptr = slice.as_ptr();
      .                       let ptr = self.as_mut_ptr().add(index);
      .                       ptr::copy(ptr, ptr.add(slice.len()), len - index);
      .                       ptr::copy_nonoverlapping(slice_ptr, ptr, slice.len());
  5,854 ( 0.00%)              self.set_len(len + slice.len());
      .                   }
 23,416 ( 0.01%)      }
      .           
      .               /// Copy elements from a slice and append them to the vector.
      .               ///
      .               /// For slices of `Copy` types, this is more efficient than `extend`.
      .               #[inline]
      .               pub fn extend_from_slice(&mut self, slice: &[A::Item]) {
      .                   let len = self.len();
  6,989 ( 0.00%)          self.insert_from_slice(len, slice);
      .               }
      .           }
      .           
      .           impl<A: Array> SmallVec<A>
      .           where
      .               A::Item: Clone,
      .           {
      .               /// Resizes the vector so that its length is equal to `len`.
-- line 1473 ----------------------------------------
-- line 1522 ----------------------------------------
      .                   }
      .               }
      .           }
      .           
      .           impl<A: Array> ops::DerefMut for SmallVec<A> {
      .               #[inline]
      .               fn deref_mut(&mut self) -> &mut [A::Item] {
      .                   unsafe {
  1,142 ( 0.00%)              let (ptr, &mut len, _) = self.triple_mut();
      .                       slice::from_raw_parts_mut(ptr, len)
      .                   }
      .               }
      .           }
      .           
      .           impl<A: Array> AsRef<[A::Item]> for SmallVec<A> {
      .               #[inline]
      .               fn as_ref(&self) -> &[A::Item] {
-- line 1538 ----------------------------------------
-- line 1716 ----------------------------------------
      .                   SmallVec::extend_from_slice(self, other)
      .               }
      .           }
      .           
      .           impl<A: Array> FromIterator<A::Item> for SmallVec<A> {
      .               #[inline]
      .               fn from_iter<I: IntoIterator<Item = A::Item>>(iterable: I) -> SmallVec<A> {
      .                   let mut v = SmallVec::new();
 86,258 ( 0.02%)          v.extend(iterable);
      .                   v
      .               }
      .           }
      .           
      .           impl<A: Array> Extend<A::Item> for SmallVec<A> {
303,253 ( 0.08%)      fn extend<I: IntoIterator<Item = A::Item>>(&mut self, iterable: I) {
 27,419 ( 0.01%)          let mut iter = iterable.into_iter();
      .                   let (lower_size_bound, _) = iter.size_hint();
  2,148 ( 0.00%)          self.reserve(lower_size_bound);
      .           
      .                   unsafe {
      .                       let (ptr, len_ptr, cap) = self.triple_mut();
      .                       let mut len = SetLenOnDrop::new(len_ptr);
124,411 ( 0.03%)              while len.get() < cap {
 20,764 ( 0.01%)                  if let Some(out) = iter.next() {
      .                               ptr::write(ptr.add(len.get()), out);
      .                               len.increment_len(1);
      .                           } else {
      .                               return;
      .                           }
      .                       }
      .                   }
      .           
 18,349 ( 0.00%)          for elem in iter {
     32 ( 0.00%)              self.push(elem);
      .                   }
254,214 ( 0.07%)      }
      .           }
      .           
      .           impl<A: Array> fmt::Debug for SmallVec<A>
      .           where
      .               A::Item: fmt::Debug,
      .           {
      .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      .                   f.debug_list().entries(self.iter()).finish()
-- line 1759 ----------------------------------------
-- line 1764 ----------------------------------------
      .               #[inline]
      .               fn default() -> SmallVec<A> {
      .                   SmallVec::new()
      .               }
      .           }
      .           
      .           #[cfg(feature = "may_dangle")]
      .           unsafe impl<#[may_dangle] A: Array> Drop for SmallVec<A> {
 70,426 ( 0.02%)      fn drop(&mut self) {
      .                   unsafe {
173,675 ( 0.04%)              if self.spilled() {
      .                           let (ptr, len) = self.data.heap();
      .                           Vec::from_raw_parts(ptr, len, self.capacity);
      .                       } else {
      .                           ptr::drop_in_place(&mut self[..]);
      .                       }
      .                   }
 78,039 ( 0.02%)      }
      .           }
      .           
      .           #[cfg(not(feature = "may_dangle"))]
      .           impl<A: Array> Drop for SmallVec<A> {
      .               fn drop(&mut self) {
      .                   unsafe {
      .                       if self.spilled() {
      .                           let (ptr, len) = self.data.heap();
-- line 1789 ----------------------------------------
-- line 1888 ----------------------------------------
      .               A::Item: Clone,
      .           {
      .               fn clone(&self) -> IntoIter<A> {
      .                   SmallVec::from(self.as_slice()).into_iter()
      .               }
      .           }
      .           
      .           impl<A: Array> Drop for IntoIter<A> {
     54 ( 0.00%)      fn drop(&mut self) {
  5,804 ( 0.00%)          for _ in self {}
     48 ( 0.00%)      }
      .           }
      .           
      .           impl<A: Array> Iterator for IntoIter<A> {
      .               type Item = A::Item;
      .           
      .               #[inline]
      .               fn next(&mut self) -> Option<A::Item> {
 49,476 ( 0.01%)          if self.current == self.end {
      .                       None
      .                   } else {
      .                       unsafe {
      .                           let current = self.current;
 23,714 ( 0.01%)                  self.current += 1;
    255 ( 0.00%)                  Some(ptr::read(self.data.as_ptr().add(current)))
      .                       }
      .                   }
      .               }
      .           
      .               #[inline]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
  3,174 ( 0.00%)          let size = self.end - self.current;
      .                   (size, Some(size))
      .               }
      .           }
      .           
      .           impl<A: Array> DoubleEndedIterator for IntoIter<A> {
      .               #[inline]
      .               fn next_back(&mut self) -> Option<A::Item> {
      .                   if self.current == self.end {
-- line 1927 ----------------------------------------
-- line 1955 ----------------------------------------
      .           impl<A: Array> IntoIterator for SmallVec<A> {
      .               type IntoIter = IntoIter<A>;
      .               type Item = A::Item;
      .               fn into_iter(mut self) -> Self::IntoIter {
      .                   unsafe {
      .                       // Set SmallVec len to zero as `IntoIter` drop handles dropping of the elements
      .                       let len = self.len();
      .                       self.set_len(0);
  6,566 ( 0.00%)              IntoIter {
 34,368 ( 0.01%)                  data: self,
      .                           current: 0,
      .                           end: len,
      .                       }
      .                   }
      .               }
      .           }
      .           
      .           impl<'a, A: Array> IntoIterator for &'a SmallVec<A> {
-- line 1972 ----------------------------------------
-- line 2000 ----------------------------------------
      .               len: &'a mut usize,
      .               local_len: usize,
      .           }
      .           
      .           impl<'a> SetLenOnDrop<'a> {
      .               #[inline]
      .               fn new(len: &'a mut usize) -> Self {
      .                   SetLenOnDrop {
 32,341 ( 0.01%)              local_len: *len,
      .                       len,
      .                   }
      .               }
      .           
      .               #[inline]
      .               fn get(&self) -> usize {
      .                   self.local_len
      .               }
      .           
      .               #[inline]
      .               fn increment_len(&mut self, increment: usize) {
 13,073 ( 0.00%)          self.local_len += increment;
      .               }
      .           }
      .           
      .           impl<'a> Drop for SetLenOnDrop<'a> {
      .               #[inline]
      .               fn drop(&mut self) {
 38,122 ( 0.01%)          *self.len = self.local_len;
      .               }
      .           }
      .           
      .           #[cfg(feature = "const_new")]
      .           impl<T, const N: usize> SmallVec<[T; N]> {
      .               /// Construct an empty vector.
      .               ///
      .               /// This is a `const` version of [`SmallVec::new`] that is enabled by the feature `const_new`, with the limitation that it only works for arrays.
-- line 2035 ----------------------------------------

559,045 ( 0.14%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.7.0/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs
--------------------------------------------------------------------------------
Ir                 

-- line 57 ----------------------------------------
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
        .                   ///
        .                   /// ```
        .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::from_str_radix(\"A\", 16), Ok(10));")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
    3,476 ( 0.00%)          pub fn from_str_radix(src: &str, radix: u32) -> Result<Self, ParseIntError> {
    1,738 ( 0.00%)              from_str_radix(src, radix)
    5,214 ( 0.00%)          }
        .           
        .                   /// Returns the number of ones in the binary representation of `self`.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
        .                   ///
        .                   /// ```
-- line 75 ----------------------------------------
-- line 80 ----------------------------------------
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
        .                   #[doc(alias = "popcount")]
        .                   #[doc(alias = "popcnt")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn count_ones(self) -> u32 {
   18,165 ( 0.00%)              intrinsics::ctpop(self as $ActualT) as u32
        .                   }
        .           
        .                   /// Returns the number of zeros in the binary representation of `self`.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
        .                   ///
-- line 96 ----------------------------------------
-- line 118 ----------------------------------------
        .                   /// assert_eq!(n.leading_zeros(), 2);
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn leading_zeros(self) -> u32 {
   90,134 ( 0.02%)              intrinsics::ctlz(self as $ActualT) as u32
        .                   }
        .           
        .                   /// Returns the number of trailing zeros in the binary representation
        .                   /// of `self`.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 134 ----------------------------------------
-- line 139 ----------------------------------------
        .                   /// assert_eq!(n.trailing_zeros(), 3);
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn trailing_zeros(self) -> u32 {
  101,255 ( 0.03%)              intrinsics::cttz(self) as u32
        .                   }
        .           
        .                   /// Returns the number of leading ones in the binary representation of `self`.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
        .                   ///
-- line 155 ----------------------------------------
-- line 204 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(n.rotate_left(", $rot, "), m);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn rotate_left(self, n: u32) -> Self {
1,812,982 ( 0.47%)              intrinsics::rotate_left(self, n as $SelfT)
        .                   }
        .           
        .                   /// Shifts the bits to the right by a specified amount, `n`,
        .                   /// wrapping the truncated bits to the beginning of the resulting
        .                   /// integer.
        .                   ///
        .                   /// Please note this isn't the same operation as the `>>` shifting operator!
        .                   ///
-- line 220 ----------------------------------------
-- line 456 ----------------------------------------
        .                   )]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
        .                   #[inline(always)]
        .                   pub const unsafe fn unchecked_add(self, rhs: Self) -> Self {
        .                       // SAFETY: the caller must uphold the safety contract for
        .                       // `unchecked_add`.
  207,174 ( 0.05%)              unsafe { intrinsics::unchecked_add(self, rhs) }
        .                   }
        .           
        .                   /// Checked addition with a signed integer. Computes `self + rhs`,
        .                   /// returning `None` if overflow occurred.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 472 ----------------------------------------
-- line 525 ----------------------------------------
        .                   )]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
        .                   #[inline(always)]
        .                   pub const unsafe fn unchecked_sub(self, rhs: Self) -> Self {
        .                       // SAFETY: the caller must uphold the safety contract for
        .                       // `unchecked_sub`.
   10,106 ( 0.00%)              unsafe { intrinsics::unchecked_sub(self, rhs) }
        .                   }
        .           
        .                   /// Checked integer multiplication. Computes `self * rhs`, returning
        .                   /// `None` if overflow occurred.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 541 ----------------------------------------
-- line 1035 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.saturating_add(127), ", stringify!($SelfT), "::MAX);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
        .                   #[inline(always)]
        .                   pub const fn saturating_add(self, rhs: Self) -> Self {
   33,006 ( 0.01%)              intrinsics::saturating_add(self, rhs)
        .                   }
        .           
        .                   /// Saturating addition with a signed integer. Computes `self + rhs`,
        .                   /// saturating at the numeric bounds instead of overflowing.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 1051 ----------------------------------------
-- line 1084 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(13", stringify!($SelfT), ".saturating_sub(127), 0);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
        .                   #[inline(always)]
        .                   pub const fn saturating_sub(self, rhs: Self) -> Self {
   16,842 ( 0.00%)              intrinsics::saturating_sub(self, rhs)
        .                   }
        .           
        .                   /// Saturating integer multiplication. Computes `self * rhs`,
        .                   /// saturating at the numeric bounds instead of overflowing.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 1100 ----------------------------------------
-- line 1175 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(200", stringify!($SelfT), ".wrapping_add(", stringify!($SelfT), "::MAX), 199);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn wrapping_add(self, rhs: Self) -> Self {
1,082,210 ( 0.28%)              intrinsics::wrapping_add(self, rhs)
        .                   }
        .           
        .                   /// Wrapping (modular) addition with a signed integer. Computes
        .                   /// `self + rhs`, wrapping around at the boundary of the type.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 1191 ----------------------------------------
-- line 1217 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(100", stringify!($SelfT), ".wrapping_sub(", stringify!($SelfT), "::MAX), 101);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn wrapping_sub(self, rhs: Self) -> Self {
  385,153 ( 0.10%)              intrinsics::wrapping_sub(self, rhs)
        .                   }
        .           
        .                   /// Wrapping (modular) multiplication. Computes `self *
        .                   /// rhs`, wrapping around at the boundary of the type.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 1233 ----------------------------------------
-- line 1240 ----------------------------------------
        .                   /// assert_eq!(25u8.wrapping_mul(12), 44);
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn wrapping_mul(self, rhs: Self) -> Self {
1,373,917 ( 0.36%)              intrinsics::wrapping_mul(self, rhs)
        .                   }
        .           
        .                   /// Wrapping (modular) division. Computes `self / rhs`.
        .                   /// Wrapped division on unsigned types is just normal division.
        .                   /// There's no way wrapping could ever happen.
        .                   /// This function exists, so that all operations
        .                   /// are accounted for in the wrapping operations.
        .                   ///
-- line 1256 ----------------------------------------
-- line 1492 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.overflowing_add(1), (0, true));")]
        .                   /// ```
        .                   #[stable(feature = "wrapping", since = "1.7.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn overflowing_add(self, rhs: Self) -> (Self, bool) {
  271,396 ( 0.07%)              let (a, b) = intrinsics::add_with_overflow(self as $ActualT, rhs as $ActualT);
        .                       (a as Self, b)
        .                   }
        .           
        .                   /// Calculates `self + rhs + carry` without the ability to overflow.
        .                   ///
        .                   /// Performs "ternary addition" which takes in an extra bit to add, and may return an
        .                   /// additional bit of overflow. This allows for chaining together multiple additions
        .                   /// to create "big integers" which represent larger values.
-- line 1508 ----------------------------------------
-- line 1588 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(0", stringify!($SelfT), ".overflowing_sub(1), (", stringify!($SelfT), "::MAX, true));")]
        .                   /// ```
        .                   #[stable(feature = "wrapping", since = "1.7.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn overflowing_sub(self, rhs: Self) -> (Self, bool) {
   35,717 ( 0.01%)              let (a, b) = intrinsics::sub_with_overflow(self as $ActualT, rhs as $ActualT);
        .                       (a as Self, b)
        .                   }
        .           
        .                   /// Calculates `self - rhs - borrow` without the ability to overflow.
        .                   ///
        .                   /// Performs "ternary subtraction" which takes in an extra bit to subtract, and may return
        .                   /// an additional bit of overflow. This allows for chaining together multiple subtractions
        .                   /// to create "big integers" which represent larger values.
-- line 1604 ----------------------------------------
-- line 1674 ----------------------------------------
        .                   /// assert_eq!(1_000_000_000u32.overflowing_mul(10), (1410065408, true));
        .                   /// ```
        .                   #[stable(feature = "wrapping", since = "1.7.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                     without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn overflowing_mul(self, rhs: Self) -> (Self, bool) {
  465,068 ( 0.12%)              let (a, b) = intrinsics::mul_with_overflow(self as $ActualT, rhs as $ActualT);
        .                       (a as Self, b)
        .                   }
        .           
        .                   /// Calculates the divisor when `self` is divided by `rhs`.
        .                   ///
        .                   /// Returns a tuple of the divisor along with a boolean indicating
        .                   /// whether an arithmetic overflow would occur. Note that for unsigned
        .                   /// integers overflow never occurs, so the second value is always
-- line 1690 ----------------------------------------
-- line 2132 ----------------------------------------
        .                   #[doc = concat!("assert!(16", stringify!($SelfT), ".is_power_of_two());")]
        .                   #[doc = concat!("assert!(!10", stringify!($SelfT), ".is_power_of_two());")]
        .                   /// ```
        .                   #[must_use]
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_is_power_of_two", since = "1.32.0")]
        .                   #[inline(always)]
        .                   pub const fn is_power_of_two(self) -> bool {
       48 ( 0.00%)              self.count_ones() == 1
        .                   }
        .           
        .                   // Returns one less than next power of two.
        .                   // (For 8u8 next power of two is 8u8 and for 6u8 it is 8u8)
        .                   //
        .                   // 8u8.one_less_than_next_power_of_two() == 7
        .                   // 6u8.one_less_than_next_power_of_two() == 7
        .                   //
        .                   // This method cannot overflow, as in the `next_power_of_two`
        .                   // overflow cases it instead ends up returning the maximum value
        .                   // of the type, and can return 0 for 0.
        .                   #[inline]
        .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
        .                   const fn one_less_than_next_power_of_two(self) -> Self {
      704 ( 0.00%)              if self <= 1 { return 0; }
        .           
    2,987 ( 0.00%)              let p = self - 1;
        .                       // SAFETY: Because `p > 0`, it cannot consist entirely of leading zeros.
        .                       // That means the shift is always in-bounds, and some processors
        .                       // (such as intel pre-haswell) have more efficient ctlz
        .                       // intrinsics when the argument is non-zero.
    8,921 ( 0.00%)              let z = unsafe { intrinsics::ctlz_nonzero(p) };
    3,027 ( 0.00%)              <$SelfT>::MAX >> z
        .                   }
        .           
        .                   /// Returns the smallest power of two greater than or equal to `self`.
        .                   ///
        .                   /// When return value overflows (i.e., `self > (1 << (N-1))` for type
        .                   /// `uN`), it panics in debug mode and the return value is wrapped to 0 in
        .                   /// release mode (the only situation in which method can return 0).
        .                   ///
-- line 2171 ----------------------------------------
-- line 2179 ----------------------------------------
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline]
        .                   #[rustc_inherit_overflow_checks]
        .                   pub const fn next_power_of_two(self) -> Self {
    5,270 ( 0.00%)              self.one_less_than_next_power_of_two() + 1
        .                   }
        .           
        .                   /// Returns the smallest power of two greater than or equal to `n`. If
        .                   /// the next power of two is greater than the type's maximum value,
        .                   /// `None` is returned, otherwise the power of two is wrapped in `Some`.
        .                   ///
        .                   /// # Examples
        .                   ///
-- line 2195 ----------------------------------------

   16,399 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs
--------------------------------------------------------------------------------
Ir               

-- line 17 ----------------------------------------
      .                   #[inline]
      .                   pub fn $fn_name(
      .                       out: &mut [::std::mem::MaybeUninit<u8>; max_leb128_len!($int_ty)],
      .                       mut value: $int_ty,
      .                   ) -> &[u8] {
      .                       let mut i = 0;
      .           
      .                       loop {
188,412 ( 0.05%)                  if value < 0x80 {
      .                               unsafe {
 57,733 ( 0.01%)                          *out.get_unchecked_mut(i).as_mut_ptr() = value as u8;
      .                               }
      .           
 88,729 ( 0.02%)                      i += 1;
      .                               break;
      .                           } else {
      .                               unsafe {
114,496 ( 0.03%)                          *out.get_unchecked_mut(i).as_mut_ptr() = ((value & 0x7f) | 0x80) as u8;
      .                               }
      .           
 66,122 ( 0.02%)                      value >>= 7;
      .                               i += 1;
      .                           }
      .                       }
      .           
      .                       unsafe { ::std::mem::MaybeUninit::slice_assume_init_ref(&out.get_unchecked(..i)) }
      .                   }
      .               };
      .           }
-- line 45 ----------------------------------------
-- line 53 ----------------------------------------
      .           macro_rules! impl_read_unsigned_leb128 {
      .               ($fn_name:ident, $int_ty:ty) => {
      .                   #[inline]
      .                   pub fn $fn_name(slice: &[u8], position: &mut usize) -> $int_ty {
      .                       // The first iteration of this loop is unpeeled. This is a
      .                       // performance win because this code is hot and integer values less
      .                       // than 128 are very common, typically occurring 50-80% or more of
      .                       // the time, even for u64 and u128.
756,740 ( 0.20%)              let byte = slice[*position];
378,370 ( 0.10%)              *position += 1;
378,370 ( 0.10%)              if (byte & 0x80) == 0 {
      2 ( 0.00%)                  return byte as $int_ty;
      .                       }
    626 ( 0.00%)              let mut result = (byte & 0x7F) as $int_ty;
      .                       let mut shift = 7;
      .                       loop {
276,639 ( 0.07%)                  let byte = slice[*position];
181,109 ( 0.05%)                  *position += 1;
184,426 ( 0.05%)                  if (byte & 0x80) == 0 {
133,279 ( 0.03%)                      result |= (byte as $int_ty) << shift;
      .                               return result;
      .                           } else {
      .                               result |= ((byte & 0x7F) as $int_ty) << shift;
      .                           }
      .                           shift += 7;
      .                       }
      .                   }
      .               };
-- line 80 ----------------------------------------

328,082 ( 0.08%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs
--------------------------------------------------------------------------------
Ir                 

-- line 14 ----------------------------------------
        .           
        .           pub type EncodeResult = Result<(), !>;
        .           
        .           pub struct Encoder {
        .               pub data: Vec<u8>,
        .           }
        .           
        .           impl Encoder {
        1 ( 0.00%)      pub fn new(data: Vec<u8>) -> Encoder {
        4 ( 0.00%)          Encoder { data }
        1 ( 0.00%)      }
        .           
        1 ( 0.00%)      pub fn into_inner(self) -> Vec<u8> {
        4 ( 0.00%)          self.data
        1 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn position(&self) -> usize {
    2,127 ( 0.00%)          self.data.len()
        .               }
        .           }
        .           
        .           macro_rules! write_leb128 {
        .               ($enc:expr, $value:expr, $int_ty:ty, $fun:ident) => {{
        .                   const MAX_ENCODED_LEN: usize = max_leb128_len!($int_ty);
        .                   let old_len = $enc.data.len();
        .           
-- line 40 ----------------------------------------
-- line 67 ----------------------------------------
        .           
        .               #[inline]
        .               fn emit_unit(&mut self) -> EncodeResult {
        .                   Ok(())
        .               }
        .           
        .               #[inline]
        .               fn emit_usize(&mut self, v: usize) -> EncodeResult {
  185,234 ( 0.05%)          write_leb128!(self, v, usize, write_usize_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u128(&mut self, v: u128) -> EncodeResult {
    9,625 ( 0.00%)          write_leb128!(self, v, u128, write_u128_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u64(&mut self, v: u64) -> EncodeResult {
      168 ( 0.00%)          write_leb128!(self, v, u64, write_u64_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u32(&mut self, v: u32) -> EncodeResult {
  175,948 ( 0.05%)          write_leb128!(self, v, u32, write_u32_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u16(&mut self, v: u16) -> EncodeResult {
        .                   self.data.extend_from_slice(&v.to_le_bytes());
        .                   Ok(())
        .               }
        .           
-- line 98 ----------------------------------------
-- line 131 ----------------------------------------
        .               #[inline]
        .               fn emit_i8(&mut self, v: i8) -> EncodeResult {
        .                   let as_u8: u8 = unsafe { std::mem::transmute(v) };
        .                   self.emit_u8(as_u8)
        .               }
        .           
        .               #[inline]
        .               fn emit_bool(&mut self, v: bool) -> EncodeResult {
    1,092 ( 0.00%)          self.emit_u8(if v { 1 } else { 0 })
        .               }
        .           
        .               #[inline]
        .               fn emit_f64(&mut self, v: f64) -> EncodeResult {
        .                   let as_u64: u64 = v.to_bits();
        .                   self.emit_u64(as_u64)
        .               }
        .           
-- line 147 ----------------------------------------
-- line 549 ----------------------------------------
        .               #[inline]
        .               pub fn advance(&mut self, bytes: usize) {
        .                   self.position += bytes;
        .               }
        .           
        .               #[inline]
        .               pub fn read_raw_bytes(&mut self, bytes: usize) -> &'a [u8] {
        .                   let start = self.position;
        3 ( 0.00%)          self.position += bytes;
        3 ( 0.00%)          &self.data[start..self.position]
        .               }
        .           }
        .           
        .           macro_rules! read_leb128 {
        .               ($dec:expr, $fun:ident) => {{ leb128::$fun($dec.data, &mut $dec.position) }};
        .           }
        .           
        .           impl<'a> serialize::Decoder for Decoder<'a> {
        .               #[inline]
        .               fn read_unit(&mut self) -> () {
        .                   ()
        .               }
        .           
        .               #[inline]
        .               fn read_u128(&mut self) -> u128 {
      314 ( 0.00%)          read_leb128!(self, read_u128_leb128)
        .               }
        .           
        .               #[inline]
        .               fn read_u64(&mut self) -> u64 {
      570 ( 0.00%)          read_leb128!(self, read_u64_leb128)
        .               }
        .           
        .               #[inline]
   22,106 ( 0.01%)      fn read_u32(&mut self) -> u32 {
   83,802 ( 0.02%)          read_leb128!(self, read_u32_leb128)
   44,212 ( 0.01%)      }
        .           
        .               #[inline]
        .               fn read_u16(&mut self) -> u16 {
  561,386 ( 0.15%)          let bytes = [self.data[self.position], self.data[self.position + 1]];
   80,198 ( 0.02%)          let value = u16::from_le_bytes(bytes);
  160,396 ( 0.04%)          self.position += 2;
        .                   value
        .               }
        .           
        .               #[inline]
        .               fn read_u8(&mut self) -> u8 {
1,105,644 ( 0.29%)          let value = self.data[self.position];
  219,914 ( 0.06%)          self.position += 1;
        .                   value
        .               }
        .           
        .               #[inline]
  104,103 ( 0.03%)      fn read_usize(&mut self) -> usize {
  104,499 ( 0.03%)          read_leb128!(self, read_usize_leb128)
  208,206 ( 0.05%)      }
        .           
        .               #[inline]
        .               fn read_i128(&mut self) -> i128 {
        .                   read_leb128!(self, read_i128_leb128)
        .               }
        .           
        .               #[inline]
        .               fn read_i64(&mut self) -> i64 {
-- line 613 ----------------------------------------
-- line 637 ----------------------------------------
        .               #[inline]
        .               fn read_isize(&mut self) -> isize {
        .                   read_leb128!(self, read_isize_leb128)
        .               }
        .           
        .               #[inline]
        .               fn read_bool(&mut self) -> bool {
        .                   let value = self.read_u8();
   18,312 ( 0.00%)          value != 0
        .               }
        .           
        .               #[inline]
        .               fn read_f64(&mut self) -> f64 {
        .                   let bits = self.read_u64();
        .                   f64::from_bits(bits)
        .               }
        .           
-- line 653 ----------------------------------------
-- line 660 ----------------------------------------
        .               #[inline]
        .               fn read_char(&mut self) -> char {
        .                   let bits = self.read_u32();
        .                   std::char::from_u32(bits).unwrap()
        .               }
        .           
        .               #[inline]
        .               fn read_str(&mut self) -> Cow<'_, str> {
   15,160 ( 0.00%)          let len = self.read_usize();
  100,620 ( 0.03%)          let sentinel = self.data[self.position + len];
   25,452 ( 0.01%)          assert!(sentinel == STR_SENTINEL);
        .                   let s = unsafe {
        .                       std::str::from_utf8_unchecked(&self.data[self.position..self.position + len])
        .                   };
   63,630 ( 0.02%)          self.position += len + 1;
    8,490 ( 0.00%)          Cow::Borrowed(s)
        .               }
        .           
        .               #[inline]
        .               fn read_raw_bytes_into(&mut self, s: &mut [u8]) {
       54 ( 0.00%)          let start = self.position;
    1,182 ( 0.00%)          self.position += s.len();
       54 ( 0.00%)          s.copy_from_slice(&self.data[start..self.position]);
        .               }
        .           }
        .           
        .           // Specializations for contiguous byte sequences follow. The default implementations for slices
        .           // encode and decode each element individually. This isn't necessary for `u8` slices when using
        .           // opaque encoders and decoders, because each `u8` is unchanged by encoding and decoding.
        .           // Therefore, we can use more efficient implementations that process the entire sequence at once.
        .           
-- line 690 ----------------------------------------

  388,413 ( 0.10%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lexer/src/lib.rs
--------------------------------------------------------------------------------
Ir               

-- line 38 ----------------------------------------
      .           #[derive(Debug)]
      .           pub struct Token {
      .               pub kind: TokenKind,
      .               pub len: usize,
      .           }
      .           
      .           impl Token {
      .               fn new(kind: TokenKind, len: usize) -> Token {
153,495 ( 0.04%)          Token { kind, len }
      .               }
      .           }
      .           
      .           /// Enum representing common lexeme types.
      .           // perf note: Changing all `usize` to `u32` doesn't change performance. See #77629
 26,930 ( 0.01%)  #[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
      .           pub enum TokenKind {
      .               // Multi-char tokens:
      .               /// "// comment"
      .               LineComment { doc_style: Option<DocStyle> },
      .               /// `/* block comment */`
      .               ///
      .               /// Block comments can be recursive, so the sequence like `/* /* */`
      .               /// will not be considered terminated and will result in a parsing error.
-- line 60 ----------------------------------------
-- line 192 ----------------------------------------
      .               /// Literal starts with "0x".
      .               Hexadecimal,
      .               /// Literal doesn't contain a prefix.
      .               Decimal,
      .           }
      .           
      .           /// `rustc` allows files to have a shebang, e.g. "#!/usr/bin/rustrun",
      .           /// but shebang isn't a part of rust syntax.
     84 ( 0.00%)  pub fn strip_shebang(input: &str) -> Option<usize> {
      .               // Shebang must start with `#!` literally, without any preceding whitespace.
      .               // For simplicity we consider any line starting with `#!` a shebang,
      .               // regardless of restrictions put on shebangs by specific platforms.
      .               if let Some(input_tail) = input.strip_prefix("#!") {
      .                   // Ok, this is a shebang but if the next non-whitespace token is `[`,
      .                   // then it may be valid Rust code, so consider it Rust code.
      .                   let next_non_whitespace_token = tokenize(input_tail).map(|tok| tok.kind).find(|tok| {
      .                       !matches!(
-- line 208 ----------------------------------------
-- line 213 ----------------------------------------
      .                       )
      .                   });
      .                   if next_non_whitespace_token != Some(TokenKind::OpenBracket) {
      .                       // No other choice than to consider this a shebang.
      .                       return Some(2 + input_tail.lines().next().unwrap_or_default().len());
      .                   }
      .               }
      .               None
     96 ( 0.00%)  }
      .           
      .           /// Parses the first token from the provided input string.
 51,165 ( 0.01%)  pub fn first_token(input: &str) -> Token {
      .               debug_assert!(!input.is_empty());
 17,055 ( 0.00%)      Cursor::new(input).advance_token()
 68,220 ( 0.02%)  }
      .           
      .           /// Creates an iterator that produces tokens from the input string.
      .           pub fn tokenize(input: &str) -> impl Iterator<Item = Token> + '_ {
      .               let mut cursor = Cursor::new(input);
      .               std::iter::from_fn(move || {
      .                   if cursor.is_eof() {
      .                       None
      .                   } else {
-- line 235 ----------------------------------------
-- line 243 ----------------------------------------
      .           /// See [Rust language reference](https://doc.rust-lang.org/reference/whitespace.html)
      .           /// for definitions of these classes.
      .           pub fn is_whitespace(c: char) -> bool {
      .               // This is Pattern_White_Space.
      .               //
      .               // Note that this set is stable (ie, it doesn't change with different
      .               // Unicode versions), so it's ok to just hard-code the values.
      .           
 41,764 ( 0.01%)      matches!(
      .                   c,
      .                   // Usual ASCII suspects
      .                   '\u{0009}'   // \t
      .                   | '\u{000A}' // \n
      .                   | '\u{000B}' // vertical tab
      .                   | '\u{000C}' // form feed
      .                   | '\u{000D}' // \r
      .                   | '\u{0020}' // space
-- line 259 ----------------------------------------
-- line 271 ----------------------------------------
      .               )
      .           }
      .           
      .           /// True if `c` is valid as a first character of an identifier.
      .           /// See [Rust language reference](https://doc.rust-lang.org/reference/identifiers.html) for
      .           /// a formal definition of valid identifier name.
      .           pub fn is_id_start(c: char) -> bool {
      .               // This is XID_Start OR '_' (which formally is not a XID_Start).
  3,668 ( 0.00%)      c == '_' || unicode_xid::UnicodeXID::is_xid_start(c)
      .           }
      .           
      .           /// True if `c` is valid as a non-first character of an identifier.
      .           /// See [Rust language reference](https://doc.rust-lang.org/reference/identifiers.html) for
      .           /// a formal definition of valid identifier name.
      .           pub fn is_id_continue(c: char) -> bool {
      .               unicode_xid::UnicodeXID::is_xid_continue(c)
      .           }
-- line 287 ----------------------------------------
-- line 293 ----------------------------------------
      .                   is_id_start(start) && chars.all(is_id_continue)
      .               } else {
      .                   false
      .               }
      .           }
      .           
      .           impl Cursor<'_> {
      .               /// Parses a token from the input string.
136,440 ( 0.04%)      fn advance_token(&mut self) -> Token {
      .                   let first_char = self.bump().unwrap();
 57,890 ( 0.01%)          let token_kind = match first_char {
      .                       // Slash, comment or block comment.
  1,930 ( 0.00%)              '/' => match self.first() {
      .                           '/' => self.line_comment(),
      .                           '*' => self.block_comment(),
     64 ( 0.00%)                  _ => Slash,
      .                       },
      .           
      .                       // Whitespace sequence.
      .                       c if is_whitespace(c) => self.whitespace(),
      .           
      .                       // Raw identifier, raw string literal or identifier.
    440 ( 0.00%)              'r' => match (self.first(), self.second()) {
      .                           ('#', c1) if is_id_start(c1) => self.raw_ident(),
      .                           ('#', _) | ('"', _) => {
      .                               let (n_hashes, err) = self.raw_double_quoted_string(1);
      .                               let suffix_start = self.len_consumed();
      .                               if err.is_none() {
      .                                   self.eat_literal_suffix();
      .                               }
      .                               let kind = RawStr { n_hashes, err };
      .                               Literal { kind, suffix_start }
      .                           }
      .                           _ => self.ident_or_unknown_prefix(),
      .                       },
      .           
      .                       // Byte literal, byte string literal, raw byte string literal or identifier.
    540 ( 0.00%)              'b' => match (self.first(), self.second()) {
      .                           ('\'', _) => {
      .                               self.bump();
     90 ( 0.00%)                      let terminated = self.single_quoted_string();
      .                               let suffix_start = self.len_consumed();
     60 ( 0.00%)                      if terminated {
      .                                   self.eat_literal_suffix();
      .                               }
      .                               let kind = Byte { terminated };
     60 ( 0.00%)                      Literal { kind, suffix_start }
      .                           }
      .                           ('"', _) => {
      .                               self.bump();
      9 ( 0.00%)                      let terminated = self.double_quoted_string();
      .                               let suffix_start = self.len_consumed();
      6 ( 0.00%)                      if terminated {
      .                                   self.eat_literal_suffix();
      .                               }
      .                               let kind = ByteStr { terminated };
      6 ( 0.00%)                      Literal { kind, suffix_start }
      .                           }
      .                           ('r', '"') | ('r', '#') => {
      .                               self.bump();
      .                               let (n_hashes, err) = self.raw_double_quoted_string(2);
      .                               let suffix_start = self.len_consumed();
      .                               if err.is_none() {
      .                                   self.eat_literal_suffix();
      .                               }
-- line 357 ----------------------------------------
-- line 361 ----------------------------------------
      .                           _ => self.ident_or_unknown_prefix(),
      .                       },
      .           
      .                       // Identifier (this should be checked after other variant that can
      .                       // start as identifier).
      .                       c if is_id_start(c) => self.ident_or_unknown_prefix(),
      .           
      .                       // Numeric literal.
 24,636 ( 0.01%)              c @ '0'..='9' => {
      .                           let literal_kind = self.number(c);
      .                           let suffix_start = self.len_consumed();
      .                           self.eat_literal_suffix();
  8,720 ( 0.00%)                  TokenKind::Literal { kind: literal_kind, suffix_start }
      .                       }
      .           
      .                       // One-symbol tokens.
    768 ( 0.00%)              ';' => Semi,
  3,116 ( 0.00%)              ',' => Comma,
    318 ( 0.00%)              '.' => Dot,
  2,240 ( 0.00%)              '(' => OpenParen,
  2,240 ( 0.00%)              ')' => CloseParen,
    382 ( 0.00%)              '{' => OpenBrace,
    382 ( 0.00%)              '}' => CloseBrace,
    148 ( 0.00%)              '[' => OpenBracket,
    148 ( 0.00%)              ']' => CloseBracket,
      .                       '@' => At,
    134 ( 0.00%)              '#' => Pound,
      .                       '~' => Tilde,
      .                       '?' => Question,
    608 ( 0.00%)              ':' => Colon,
      .                       '$' => Dollar,
    948 ( 0.00%)              '=' => Eq,
     98 ( 0.00%)              '!' => Bang,
    158 ( 0.00%)              '<' => Lt,
    252 ( 0.00%)              '>' => Gt,
    256 ( 0.00%)              '-' => Minus,
    138 ( 0.00%)              '&' => And,
     44 ( 0.00%)              '|' => Or,
    248 ( 0.00%)              '+' => Plus,
    162 ( 0.00%)              '*' => Star,
      .                       '^' => Caret,
     34 ( 0.00%)              '%' => Percent,
      .           
      .                       // Lifetime or character literal.
      9 ( 0.00%)              '\'' => self.lifetime_or_char(),
      .           
      .                       // String literal.
      .                       '"' => {
    162 ( 0.00%)                  let terminated = self.double_quoted_string();
      .                           let suffix_start = self.len_consumed();
    108 ( 0.00%)                  if terminated {
      .                               self.eat_literal_suffix();
      .                           }
      .                           let kind = Str { terminated };
    108 ( 0.00%)                  Literal { kind, suffix_start }
      .                       }
      .                       // Identifier starting with an emoji. Only lexed for graceful error recovery.
      .                       c if !c.is_ascii() && unic_emoji_char::is_emoji(c) => {
      .                           self.fake_ident_or_unknown_prefix()
      .                       }
      .                       _ => Unknown,
      .                   };
      .                   Token::new(token_kind, self.len_consumed())
153,495 ( 0.04%)      }
      .           
      .               fn line_comment(&mut self) -> TokenKind {
      .                   debug_assert!(self.prev() == '/' && self.first() == '/');
      .                   self.bump();
      .           
  1,558 ( 0.00%)          let doc_style = match self.first() {
      .                       // `//!` is an inner line doc comment.
      .                       '!' => Some(DocStyle::Inner),
      .                       // `////` (more than 3 slashes) is not considered a doc comment.
    351 ( 0.00%)              '/' if self.second() != '/' => Some(DocStyle::Outer),
      .                       _ => None,
      .                   };
      .           
 19,747 ( 0.01%)          self.eat_while(|c| c != '\n');
  1,344 ( 0.00%)          LineComment { doc_style }
      .               }
      .           
      .               fn block_comment(&mut self) -> TokenKind {
      .                   debug_assert!(self.prev() == '/' && self.first() == '*');
      .                   self.bump();
      .           
     20 ( 0.00%)          let doc_style = match self.first() {
      .                       // `/*!` is an inner block doc comment.
      .                       '!' => Some(DocStyle::Inner),
      .                       // `/***` (more than 2 stars) is not considered a doc comment.
      .                       // `/**/` is not considered a doc comment.
      .                       '*' if !matches!(self.second(), '*' | '/') => Some(DocStyle::Outer),
      .                       _ => None,
      .                   };
      .           
      .                   let mut depth = 1usize;
    460 ( 0.00%)          while let Some(c) = self.bump() {
      .                       match c {
      .                           '/' if self.first() == '*' => {
      .                               self.bump();
      .                               depth += 1;
      .                           }
     10 ( 0.00%)                  '*' if self.first() == '/' => {
      .                               self.bump();
     10 ( 0.00%)                      depth -= 1;
     10 ( 0.00%)                      if depth == 0 {
      .                                   // This block comment is closed, so for a construction like "/* */ */"
      .                                   // there will be a successfully parsed block comment "/* */"
      .                                   // and " */" will be processed separately.
      .                                   break;
      .                               }
      .                           }
      .                           _ => (),
      .                       }
      .                   }
      .           
     25 ( 0.00%)          BlockComment { doc_style, terminated: depth == 0 }
      .               }
      .           
      .               fn whitespace(&mut self) -> TokenKind {
      .                   debug_assert!(is_whitespace(self.prev()));
      .                   self.eat_while(is_whitespace);
  5,632 ( 0.00%)          Whitespace
      .               }
      .           
      .               fn raw_ident(&mut self) -> TokenKind {
      .                   debug_assert!(self.prev() == 'r' && self.first() == '#' && is_id_start(self.second()));
      .                   // Eat "#" symbol.
      .                   self.bump();
      .                   // Eat the identifier part of RawIdent.
      .                   self.eat_identifier();
      .                   RawIdent
      .               }
      .           
 13,465 ( 0.00%)      fn ident_or_unknown_prefix(&mut self) -> TokenKind {
      .                   debug_assert!(is_id_start(self.prev()));
      .                   // Start is already eaten, eat the rest of identifier.
  5,386 ( 0.00%)          self.eat_while(is_id_continue);
      .                   // Known prefixes must have been handled earlier. So if
      .                   // we see a prefix here, it is definitely an unknown prefix.
  5,386 ( 0.00%)          match self.first() {
      .                       '#' | '"' | '\'' => UnknownPrefix,
  2,693 ( 0.00%)              c if !c.is_ascii() && unic_emoji_char::is_emoji(c) => {
      .                           self.fake_ident_or_unknown_prefix()
      .                       }
  2,693 ( 0.00%)              _ => Ident,
      .                   }
 10,772 ( 0.00%)      }
      .           
      .               fn fake_ident_or_unknown_prefix(&mut self) -> TokenKind {
      .                   // Start is already eaten, eat the rest of identifier.
      .                   self.eat_while(|c| {
      .                       unicode_xid::UnicodeXID::is_xid_continue(c)
      .                           || (!c.is_ascii() && unic_emoji_char::is_emoji(c))
      .                           || c == '\u{200d}'
      .                   });
-- line 515 ----------------------------------------
-- line 519 ----------------------------------------
      .                       '#' | '"' | '\'' => UnknownPrefix,
      .                       _ => InvalidIdent,
      .                   }
      .               }
      .           
      .               fn number(&mut self, first_digit: char) -> LiteralKind {
      .                   debug_assert!('0' <= self.prev() && self.prev() <= '9');
      .                   let mut base = Base::Decimal;
  3,488 ( 0.00%)          if first_digit == '0' {
      .                       // Attempt to parse encoding base.
    442 ( 0.00%)              let has_digits = match self.first() {
      .                           'b' => {
      .                               base = Base::Binary;
      .                               self.bump();
      .                               self.eat_decimal_digits()
      .                           }
      .                           'o' => {
      .                               base = Base::Octal;
      .                               self.bump();
-- line 537 ----------------------------------------
-- line 538 ----------------------------------------
      .                               self.eat_decimal_digits()
      .                           }
      .                           'x' => {
      .                               base = Base::Hexadecimal;
      .                               self.bump();
      .                               self.eat_hexadecimal_digits()
      .                           }
      .                           // Not a base prefix.
    264 ( 0.00%)                  '0'..='9' | '_' | '.' | 'e' | 'E' => {
      .                               self.eat_decimal_digits();
      .                               true
      .                           }
      .                           // Just a 0.
      .                           _ => return Int { base, empty_int: false },
      .                       };
      .                       // Base prefix was provided, but there were no digits
      .                       // after it, e.g. "0x".
-- line 554 ----------------------------------------
-- line 555 ----------------------------------------
      .                       if !has_digits {
      .                           return Int { base, empty_int: true };
      .                       }
      .                   } else {
      .                       // No base prefix, parse number in the usual way.
      .                       self.eat_decimal_digits();
      .                   };
      .           
  9,928 ( 0.00%)          match self.first() {
      .                       // Don't be greedy if this is actually an
      .                       // integer literal followed by field/method access or a range pattern
      .                       // (`0..2` and `12.foo()`)
      4 ( 0.00%)              '.' if self.second() != '.' && !is_id_start(self.second()) => {
      .                           // might have stuff after the ., and if it does, it needs to start
      .                           // with a number
      .                           self.bump();
      .                           let mut empty_exponent = false;
      .                           if self.first().is_digit(10) {
      .                               self.eat_decimal_digits();
      .                               match self.first() {
      .                                   'e' | 'E' => {
-- line 575 ----------------------------------------
-- line 585 ----------------------------------------
      .                           self.bump();
      .                           let empty_exponent = !self.eat_float_exponent();
      .                           Float { base, empty_exponent }
      .                       }
      .                       _ => Int { base, empty_int: false },
      .                   }
      .               }
      .           
     21 ( 0.00%)      fn lifetime_or_char(&mut self) -> TokenKind {
      .                   debug_assert!(self.prev() == '\'');
      .           
      6 ( 0.00%)          let can_be_a_lifetime = if self.second() == '\'' {
      .                       // It's surely not a lifetime.
      .                       false
      .                   } else {
      .                       // If the first symbol is valid for identifier, it can be a lifetime.
      .                       // Also check if it's a number for a better error reporting (so '0 will
      .                       // be reported as invalid lifetime and not as unterminated char literal).
      .                       is_id_start(self.first()) || self.first().is_digit(10)
      .                   };
-- line 604 ----------------------------------------
-- line 617 ----------------------------------------
      .                   // length greater than 1.
      .           
      .                   let starts_with_number = self.first().is_digit(10);
      .           
      .                   // Skip the literal contents.
      .                   // First symbol can be a number (which isn't a valid identifier start),
      .                   // so skip it without any checks.
      .                   self.bump();
      6 ( 0.00%)          self.eat_while(is_id_continue);
      .           
      .                   // Check if after skipping literal contents we've met a closing
      .                   // single quote (which means that user attempted to create a
      .                   // string with single quotes).
      6 ( 0.00%)          if self.first() == '\'' {
      .                       self.bump();
      .                       let kind = Char { terminated: true };
      .                       Literal { kind, suffix_start: self.len_consumed() }
      .                   } else {
      6 ( 0.00%)              Lifetime { starts_with_number }
      .                   }
     18 ( 0.00%)      }
      .           
      .               fn single_quoted_string(&mut self) -> bool {
      .                   debug_assert!(self.prev() == '\'');
      .                   // Check if it's a one-symbol literal.
    120 ( 0.00%)          if self.second() == '\'' && self.first() != '\\' {
      .                       self.bump();
      .                       self.bump();
      .                       return true;
      .                   }
      .           
      .                   // Literal has more than one symbol.
      .           
      .                   // Parse until either quotes are terminated or error is detected.
-- line 650 ----------------------------------------
-- line 670 ----------------------------------------
      .                           // Skip the character.
      .                           _ => {
      .                               self.bump();
      .                           }
      .                       }
      .                   }
      .                   // String was not terminated.
      .                   false
     30 ( 0.00%)      }
      .           
      .               /// Eats double-quoted string and returns true
      .               /// if string is terminated.
      .               fn double_quoted_string(&mut self) -> bool {
      .                   debug_assert!(self.prev() == '"');
      .                   while let Some(c) = self.bump() {
  2,763 ( 0.00%)              match c {
      .                           '"' => {
      .                               return true;
      .                           }
     20 ( 0.00%)                  '\\' if self.first() == '\\' || self.first() == '"' => {
      .                               // Bump again to skip escaped character.
      .                               self.bump();
      .                           }
      .                           _ => (),
      .                       }
      .                   }
      .                   // End of file reached.
      .                   false
     57 ( 0.00%)      }
      .           
      .               /// Eats the double-quoted string and returns `n_hashes` and an error if encountered.
      .               fn raw_double_quoted_string(&mut self, prefix_len: usize) -> (u16, Option<RawStrError>) {
      .                   // Wrap the actual function to handle the error with too many hashes.
      .                   // This way, it eats the whole raw string.
      .                   let (n_hashes, err) = self.raw_string_unvalidated(prefix_len);
      .                   // Only up to 65535 `#`s are allowed in raw strings
      .                   match u16::try_from(n_hashes) {
-- line 706 ----------------------------------------
-- line 773 ----------------------------------------
      .                           max_hashes = n_end_hashes;
      .                       }
      .                   }
      .               }
      .           
      .               fn eat_decimal_digits(&mut self) -> bool {
      .                   let mut has_digits = false;
      .                   loop {
 51,794 ( 0.01%)              match self.first() {
      .                           '_' => {
      .                               self.bump();
      .                           }
 77,652 ( 0.02%)                  '0'..='9' => {
      .                               has_digits = true;
      .                               self.bump();
      .                           }
      .                           _ => break,
      .                       }
      .                   }
      .                   has_digits
  3,300 ( 0.00%)      }
      .           
      .               fn eat_hexadecimal_digits(&mut self) -> bool {
      .                   let mut has_digits = false;
      .                   loop {
    156 ( 0.00%)              match self.first() {
      .                           '_' => {
      .                               self.bump();
      .                           }
    315 ( 0.00%)                  '0'..='9' | 'a'..='f' | 'A'..='F' => {
      .                               has_digits = true;
      .                               self.bump();
      .                           }
      .                           _ => break,
      .                       }
      .                   }
      .                   has_digits
     12 ( 0.00%)      }
      .           
      .               /// Eats the float exponent. Returns true if at least one digit was met,
      .               /// and returns false otherwise.
      .               fn eat_float_exponent(&mut self) -> bool {
      .                   debug_assert!(self.prev() == 'e' || self.prev() == 'E');
      .                   if self.first() == '-' || self.first() == '+' {
      .                       self.bump();
      .                   }
      .                   self.eat_decimal_digits()
      .               }
      .           
      .               // Eats the suffix of the literal, e.g. "_u8".
      .               fn eat_literal_suffix(&mut self) {
  3,662 ( 0.00%)          self.eat_identifier();
      .               }
      .           
      .               // Eats the identifier.
  5,493 ( 0.00%)      fn eat_identifier(&mut self) {
      .                   if !is_id_start(self.first()) {
      .                       return;
      .                   }
      .                   self.bump();
      .           
    120 ( 0.00%)          self.eat_while(is_id_continue);
  7,228 ( 0.00%)      }
      .           }

259,075 ( 0.07%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lexer/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/obligation_forest/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 121 ----------------------------------------
      .           #[derive(Debug)]
      .           pub enum ProcessResult<O, E> {
      .               Unchanged,
      .               Changed(Vec<O>),
      .               Error(E),
      .           }
      .           
      .           #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
  5,296 ( 0.00%)  struct ObligationTreeId(usize);
      .           
      .           type ObligationTreeIdGenerator =
      .               std::iter::Map<std::ops::RangeFrom<usize>, fn(usize) -> ObligationTreeId>;
      .           
      .           pub struct ObligationForest<O: ForestObligation> {
      .               /// The list of obligations. In between calls to `process_obligations`,
      .               /// this list only contains nodes in the `Pending` or `Waiting` state.
      .               ///
-- line 137 ----------------------------------------
-- line 181 ----------------------------------------
      .               has_parent: bool,
      .           
      .               /// Identifier of the obligation tree to which this node belongs.
      .               obligation_tree_id: ObligationTreeId,
      .           }
      .           
      .           impl<O> Node<O> {
      .               fn new(parent: Option<usize>, obligation: O, obligation_tree_id: ObligationTreeId) -> Node<O> {
 59,312 ( 0.02%)          Node {
      .                       obligation,
      .                       state: Cell::new(NodeState::Pending),
  6,884 ( 0.00%)              dependents: if let Some(parent_index) = parent { vec![parent_index] } else { vec![] },
      .                       has_parent: parent.is_some(),
      .                       obligation_tree_id,
      .                   }
      .               }
      .           }
      .           
      .           /// The state of one node in some tree within the forest. This represents the
      .           /// current state of processing for the obligation (of type `O`) associated
-- line 200 ----------------------------------------
-- line 223 ----------------------------------------
      .           ///  |     compress()
      .           ///  v
      .           /// (Removed)
      .           /// ```
      .           /// The `Error` state can be introduced in several places, via `error_at()`.
      .           ///
      .           /// Outside of `ObligationForest` methods, nodes should be either `Pending` or
      .           /// `Waiting`.
 84,141 ( 0.02%)  #[derive(Debug, Copy, Clone, PartialEq, Eq)]
      .           enum NodeState {
      .               /// This obligation has not yet been selected successfully. Cannot have
      .               /// subobligations.
      .               Pending,
      .           
      .               /// This obligation was selected successfully, but may or may not have
      .               /// subobligations.
      .               Success,
-- line 239 ----------------------------------------
-- line 279 ----------------------------------------
      .               pub stalled: bool,
      .           }
      .           
      .           impl<O, E> OutcomeTrait for Outcome<O, E> {
      .               type Error = Error<O, E>;
      .               type Obligation = O;
      .           
      .               fn new() -> Self {
 12,320 ( 0.00%)          Self { stalled: true, errors: vec![] }
      .               }
      .           
      .               fn mark_not_stalled(&mut self) {
  3,694 ( 0.00%)          self.stalled = false;
      .               }
      .           
      .               fn is_stalled(&self) -> bool {
  3,231 ( 0.00%)          self.stalled
      .               }
      .           
      .               fn record_completed(&mut self, _outcome: &Self::Obligation) {
      .                   // do nothing
      .               }
      .           
      .               fn record_error(&mut self, error: Self::Error) {
      .                   self.errors.push(error)
-- line 303 ----------------------------------------
-- line 306 ----------------------------------------
      .           
      .           #[derive(Debug, PartialEq, Eq)]
      .           pub struct Error<O, E> {
      .               pub error: E,
      .               pub backtrace: Vec<O>,
      .           }
      .           
      .           impl<O: ForestObligation> ObligationForest<O> {
  1,776 ( 0.00%)      pub fn new() -> ObligationForest<O> {
 21,312 ( 0.01%)          ObligationForest {
      .                       nodes: vec![],
      .                       done_cache: Default::default(),
      .                       active_cache: Default::default(),
      .                       reused_node_vec: vec![],
      .                       obligation_tree_id_generator: (0..).map(ObligationTreeId),
      .                       error_cache: Default::default(),
      .                   }
  1,776 ( 0.00%)      }
      .           
      .               /// Returns the total number of nodes in the forest that have not
      .               /// yet been fully resolved.
      .               pub fn len(&self) -> usize {
      .                   self.nodes.len()
      .               }
      .           
      .               /// Registers an obligation.
      .               pub fn register_obligation(&mut self, obligation: O) {
      .                   // Ignore errors here - there is no guarantee of success.
 58,201 ( 0.02%)          let _ = self.register_obligation_at(obligation, None);
      .               }
      .           
      .               // Returns Err(()) if we already know this obligation failed.
 62,260 ( 0.02%)      fn register_obligation_at(&mut self, obligation: O, parent: Option<usize>) -> Result<(), ()> {
 11,320 ( 0.00%)          let cache_key = obligation.as_cache_key();
 11,320 ( 0.00%)          if self.done_cache.contains(&cache_key) {
      .                       debug!("register_obligation_at: ignoring already done obligation: {:?}", obligation);
      .                       return Ok(());
      .                   }
      .           
 27,258 ( 0.01%)          match self.active_cache.entry(cache_key) {
      .                       Entry::Occupied(o) => {
  1,672 ( 0.00%)                  let node = &mut self.nodes[*o.get()];
  1,672 ( 0.00%)                  if let Some(parent_index) = parent {
      .                               // If the node is already in `active_cache`, it has already
      .                               // had its chance to be marked with a parent. So if it's
      .                               // not already present, just dump `parent` into the
      .                               // dependents as a non-parent.
    165 ( 0.00%)                      if !node.dependents.contains(&parent_index) {
      .                                   node.dependents.push(parent_index);
      .                               }
      .                           }
  2,508 ( 0.00%)                  if let NodeState::Error = node.state.get() { Err(()) } else { Ok(()) }
      .                       }
 11,121 ( 0.00%)              Entry::Vacant(v) => {
 22,242 ( 0.01%)                  let obligation_tree_id = match parent {
  2,118 ( 0.00%)                      Some(parent_index) => self.nodes[parent_index].obligation_tree_id,
      .                               None => self.obligation_tree_id_generator.next().unwrap(),
      .                           };
      .           
      .                           let already_failed = parent.is_some()
      .                               && self
      .                                   .error_cache
      .                                   .get(&obligation_tree_id)
      .                                   .map_or(false, |errors| errors.contains(v.key()));
      .           
      .                           if already_failed {
      .                               Err(())
      .                           } else {
  3,707 ( 0.00%)                      let new_index = self.nodes.len();
      .                               v.insert(new_index);
      .                               self.nodes.push(Node::new(parent, obligation, obligation_tree_id));
      .                               Ok(())
      .                           }
      .                       }
      .                   }
 50,940 ( 0.01%)      }
      .           
      .               /// Converts all remaining obligations to the given error.
 15,330 ( 0.00%)      pub fn to_errors<E: Clone>(&mut self, error: E) -> Vec<Error<O, E>> {
      .                   let errors = self
      .                       .nodes
      .                       .iter()
      .                       .enumerate()
      .                       .filter(|(_index, node)| node.state.get() == NodeState::Pending)
      .                       .map(|(index, _node)| Error { error: error.clone(), backtrace: self.error_at(index) })
      .                       .collect();
      .           
  4,380 ( 0.00%)          self.compress(|_| assert!(false));
      .                   errors
 13,140 ( 0.00%)      }
      .           
      .               /// Returns the set of obligations that are in a pending state.
      .               pub fn map_pending_obligations<P, F>(&self, f: F) -> Vec<P>
      .               where
      .                   F: Fn(&O) -> P,
      .               {
      .                   self.nodes
      .                       .iter()
-- line 403 ----------------------------------------
-- line 414 ----------------------------------------
      .                       .insert(node.obligation.as_cache_key());
      .               }
      .           
      .               /// Performs a pass through the obligation list. This must
      .               /// be called in a loop until `outcome.stalled` is false.
      .               ///
      .               /// This _cannot_ be unrolled (presently, at least).
      .               #[inline(never)]
 55,440 ( 0.01%)      pub fn process_obligations<P, OUT>(&mut self, processor: &mut P) -> OUT
      .               where
      .                   P: ObligationProcessor<Obligation = O>,
      .                   OUT: OutcomeTrait<Obligation = O, Error = Error<O, P::Error>>,
      .               {
      .                   let mut outcome = OUT::new();
      .           
      .                   // Note that the loop body can append new nodes, and those new nodes
      .                   // will then be processed by subsequent iterations of the loop.
      .                   //
      .                   // We can't use an iterator for the loop because `self.nodes` is
      .                   // appended to and the borrow checker would complain. We also can't use
      .                   // `for index in 0..self.nodes.len() { ... }` because the range would
      .                   // be computed with the initial length, and we would miss the appended
      .                   // nodes. Therefore we use a `while` loop.
      .                   let mut index = 0;
 42,012 ( 0.01%)          while let Some(node) = self.nodes.get_mut(index) {
      .                       // `processor.process_obligation` can modify the predicate within
      .                       // `node.obligation`, and that predicate is the key used for
      .                       // `self.active_cache`. This means that `self.active_cache` can get
      .                       // out of sync with `nodes`. It's not very common, but it does
      .                       // happen, and code in `compress` has to allow for it.
 71,704 ( 0.02%)              if node.state.get() != NodeState::Pending {
  1,715 ( 0.00%)                  index += 1;
      .                           continue;
      .                       }
      .           
 23,783 ( 0.01%)              match processor.process_obligation(&mut node.obligation) {
      .                           ProcessResult::Unchanged => {
      .                               // No change in state.
      .                           }
 14,776 ( 0.00%)                  ProcessResult::Changed(children) => {
      .                               // We are not (yet) stalled.
      .                               outcome.mark_not_stalled();
      .                               node.state.set(NodeState::Success);
      .           
 17,142 ( 0.00%)                      for child in children {
 20,111 ( 0.01%)                          let st = self.register_obligation_at(child, Some(index));
  2,366 ( 0.00%)                          if let Err(()) = st {
      .                                       // Error already reported - propagate it
      .                                       // to our node.
      .                                       self.error_at(index);
      .                                   }
      .                               }
      .                           }
      .                           ProcessResult::Error(err) => {
      .                               outcome.mark_not_stalled();
      .                               outcome.record_error(Error { error: err, backtrace: self.error_at(index) });
      .                           }
      .                       }
 68,274 ( 0.02%)              index += 1;
      .                   }
      .           
      .                   // There's no need to perform marking, cycle processing and compression when nothing
      .                   // changed.
  3,231 ( 0.00%)          if !outcome.is_stalled() {
      .                       self.mark_successes();
      .                       self.process_cycles(processor);
  2,722 ( 0.00%)              self.compress(|obl| outcome.record_completed(obl));
      .                   }
      .           
      .                   outcome
 55,440 ( 0.01%)      }
      .           
      .               /// Returns a vector of obligations for `p` and all of its
      .               /// ancestors, putting them into the error state in the process.
      .               fn error_at(&self, mut index: usize) -> Vec<O> {
      .                   let mut error_stack: Vec<usize> = vec![];
      .                   let mut trace = vec![];
      .           
      .                   loop {
-- line 492 ----------------------------------------
-- line 516 ----------------------------------------
      .                   trace
      .               }
      .           
      .               /// Mark all `Waiting` nodes as `Success`, except those that depend on a
      .               /// pending node.
      .               fn mark_successes(&self) {
      .                   // Convert all `Waiting` nodes to `Success`.
      .                   for node in &self.nodes {
 31,131 ( 0.01%)              if node.state.get() == NodeState::Waiting {
      .                           node.state.set(NodeState::Success);
      .                       }
      .                   }
      .           
      .                   // Convert `Success` nodes that depend on a pending node back to
      .                   // `Waiting`.
      .                   for node in &self.nodes {
 14,210 ( 0.00%)              if node.state.get() == NodeState::Pending {
      .                           // This call site is hot.
      .                           self.inlined_mark_dependents_as_waiting(node);
      .                       }
      .                   }
      .               }
      .           
      .               // This always-inlined function is for the hot call site.
      .               #[inline(always)]
      .               fn inlined_mark_dependents_as_waiting(&self, node: &Node<O>) {
    869 ( 0.00%)          for &index in node.dependents.iter() {
      .                       let node = &self.nodes[index];
    869 ( 0.00%)              let state = node.state.get();
    869 ( 0.00%)              if state == NodeState::Success {
      .                           // This call site is cold.
  1,491 ( 0.00%)                  self.uninlined_mark_dependents_as_waiting(node);
      .                       } else {
      .                           debug_assert!(state == NodeState::Waiting || state == NodeState::Error)
      .                       }
      .                   }
      .               }
      .           
      .               // This never-inlined function is for the cold call site.
      .               #[inline(never)]
  3,479 ( 0.00%)      fn uninlined_mark_dependents_as_waiting(&self, node: &Node<O>) {
      .                   // Mark node Waiting in the cold uninlined code instead of the hot inlined
      .                   node.state.set(NodeState::Waiting);
      .                   self.inlined_mark_dependents_as_waiting(node)
  3,976 ( 0.00%)      }
      .           
      .               /// Report cycles between all `Success` nodes, and convert all `Success`
      .               /// nodes to `Done`. This must be called after `mark_successes`.
      .               fn process_cycles<P>(&mut self, processor: &mut P)
      .               where
      .                   P: ObligationProcessor<Obligation = O>,
      .               {
  1,361 ( 0.00%)          let mut stack = std::mem::take(&mut self.reused_node_vec);
      .                   for (index, node) in self.nodes.iter().enumerate() {
      .                       // For some benchmarks this state test is extremely hot. It's a win
      .                       // to handle the no-op cases immediately to avoid the cost of the
      .                       // function call.
 14,210 ( 0.00%)              if node.state.get() == NodeState::Success {
 18,220 ( 0.00%)                  self.find_cycles_from_node(&mut stack, processor, index);
      .                       }
      .                   }
      .           
      .                   debug_assert!(stack.is_empty());
 10,888 ( 0.00%)          self.reused_node_vec = stack;
      .               }
      .           
 42,822 ( 0.01%)      fn find_cycles_from_node<P>(&self, stack: &mut Vec<usize>, processor: &mut P, index: usize)
      .               where
      .                   P: ObligationProcessor<Obligation = O>,
      .               {
      .                   let node = &self.nodes[index];
  9,516 ( 0.00%)          if node.state.get() == NodeState::Success {
    100 ( 0.00%)              match stack.iter().rposition(|&n| n == index) {
      .                           None => {
      .                               stack.push(index);
  1,114 ( 0.00%)                      for &dep_index in node.dependents.iter() {
  4,456 ( 0.00%)                          self.find_cycles_from_node(stack, processor, dep_index);
      .                               }
      .                               stack.pop();
      .                               node.state.set(NodeState::Done);
      .                           }
      .                           Some(rpos) => {
      .                               // Cycle detected.
      .                               processor.process_backedge(
      .                                   stack[rpos..].iter().map(|&i| &self.nodes[i].obligation),
      .                                   PhantomData,
      .                               );
      .                           }
      .                       }
      .                   }
 38,064 ( 0.01%)      }
      .           
      .               /// Compresses the vector, removing all popped nodes. This adjusts the
      .               /// indices and hence invalidates any outstanding indices. `process_cycles`
      .               /// must be run beforehand to remove any cycles on `Success` nodes.
      .               #[inline(never)]
 26,218 ( 0.01%)      fn compress(&mut self, mut outcome_cb: impl FnMut(&O)) {
  3,551 ( 0.00%)          let orig_nodes_len = self.nodes.len();
      .                   let mut node_rewrites: Vec<_> = std::mem::take(&mut self.reused_node_vec);
      .                   debug_assert!(node_rewrites.is_empty());
      .                   node_rewrites.extend(0..orig_nodes_len);
      .                   let mut dead_nodes = 0;
      .           
      .                   // Move removable nodes to the end, preserving the order of the
      .                   // remaining nodes.
      .                   //
      .                   // LOOP INVARIANT:
      .                   //     self.nodes[0..index - dead_nodes] are the first remaining nodes
      .                   //     self.nodes[index - dead_nodes..index] are all dead
      .                   //     self.nodes[index..] are unchanged
      .                   for index in 0..orig_nodes_len {
      .                       let node = &self.nodes[index];
 76,494 ( 0.02%)              match node.state.get() {
      .                           NodeState::Pending | NodeState::Waiting => {
 21,032 ( 0.01%)                      if dead_nodes > 0 {
  5,010 ( 0.00%)                          self.nodes.swap(index, index - dead_nodes);
  8,350 ( 0.00%)                          node_rewrites[index] -= dead_nodes;
      .                               }
      .                           }
      .                           NodeState::Done => {
      .                               // This lookup can fail because the contents of
      .                               // `self.active_cache` are not guaranteed to match those of
      .                               // `self.nodes`. See the comment in `process_obligation`
      .                               // for more details.
 12,727 ( 0.00%)                      if let Some((predicate, _)) =
 11,082 ( 0.00%)                          self.active_cache.remove_entry(&node.obligation.as_cache_key())
      .                               {
      .                                   self.done_cache.insert(predicate);
      .                               } else {
      .                                   self.done_cache.insert(node.obligation.as_cache_key().clone());
      .                               }
      .                               // Extract the success stories.
      .                               outcome_cb(&node.obligation);
  7,388 ( 0.00%)                      node_rewrites[index] = orig_nodes_len;
  7,388 ( 0.00%)                      dead_nodes += 1;
      .                           }
      .                           NodeState::Error => {
      .                               // We *intentionally* remove the node from the cache at this point. Otherwise
      .                               // tests must come up with a different type on every type error they
      .                               // check against.
      .                               self.active_cache.remove(&node.obligation.as_cache_key());
      .                               self.insert_into_error_cache(index);
      .                               node_rewrites[index] = orig_nodes_len;
-- line 658 ----------------------------------------
-- line 659 ----------------------------------------
      .                               dead_nodes += 1;
      .                           }
      .                           NodeState::Success => unreachable!(),
      .                       }
      .                   }
      .           
      .                   if dead_nodes > 0 {
      .                       // Remove the dead nodes and rewrite indices.
  2,158 ( 0.00%)              self.nodes.truncate(orig_nodes_len - dead_nodes);
  1,079 ( 0.00%)              self.apply_rewrites(&node_rewrites);
      .                   }
      .           
      .                   node_rewrites.truncate(0);
 14,204 ( 0.00%)          self.reused_node_vec = node_rewrites;
 28,408 ( 0.01%)      }
      .           
      .               #[inline(never)]
  9,711 ( 0.00%)      fn apply_rewrites(&mut self, node_rewrites: &[usize]) {
      .                   let orig_nodes_len = node_rewrites.len();
      .           
      .                   for node in &mut self.nodes {
      .                       let mut i = 0;
  6,748 ( 0.00%)              while let Some(dependent) = node.dependents.get_mut(i) {
    884 ( 0.00%)                  let new_index = node_rewrites[*dependent];
    442 ( 0.00%)                  if new_index >= orig_nodes_len {
      .                               node.dependents.swap_remove(i);
      .                               if i == 0 && node.has_parent {
      .                                   // We just removed the parent.
      .                                   node.has_parent = false;
      .                               }
      .                           } else {
    221 ( 0.00%)                      *dependent = new_index;
    442 ( 0.00%)                      i += 1;
      .                           }
      .                       }
      .                   }
      .           
      .                   // This updating of `self.active_cache` is necessary because the
      .                   // removal of nodes within `compress` can fail. See above.
      .                   self.active_cache.retain(|_predicate, index| {
 34,304 ( 0.01%)              let new_index = node_rewrites[*index];
 17,152 ( 0.00%)              if new_index >= orig_nodes_len {
      .                           false
      .                       } else {
  6,527 ( 0.00%)                  *index = new_index;
      .                           true
      .                       }
      .                   });
  8,632 ( 0.00%)      }
      .           }

152,157 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/obligation_forest/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_borrowck/src/type_check/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 118 ----------------------------------------
      .           /// - `promoted` -- map of promoted constants within `body`
      .           /// - `universal_regions` -- the universal regions from `body`s function signature
      .           /// - `location_table` -- MIR location map of `body`
      .           /// - `borrow_set` -- information about borrows occurring in `body`
      .           /// - `all_facts` -- when using Polonius, this is the generated set of Polonius facts
      .           /// - `flow_inits` -- results of a maybe-init dataflow analysis
      .           /// - `move_data` -- move-data constructed when performing the maybe-init dataflow analysis
      .           /// - `elements` -- MIR region map
    828 ( 0.00%)  pub(crate) fn type_check<'mir, 'tcx>(
      .               infcx: &InferCtxt<'_, 'tcx>,
      .               param_env: ty::ParamEnv<'tcx>,
      .               body: &Body<'tcx>,
      .               promoted: &IndexVec<Promoted, Body<'tcx>>,
      .               universal_regions: &Rc<UniversalRegions<'tcx>>,
      .               location_table: &LocationTable,
      .               borrow_set: &BorrowSet<'tcx>,
      .               all_facts: &mut Option<AllFacts>,
      .               flow_inits: &mut ResultsCursor<'mir, 'tcx, MaybeInitializedPlaces<'mir, 'tcx>>,
      .               move_data: &MoveData<'tcx>,
      .               elements: &Rc<RegionValueElements>,
      .               upvars: &[Upvar<'tcx>],
      .           ) -> MirTypeckResults<'tcx> {
    621 ( 0.00%)      let implicit_region_bound = infcx.tcx.mk_region(ty::ReVar(universal_regions.fr_fn_body));
      .               let mut universe_causes = FxHashMap::default();
      .               universe_causes.insert(ty::UniverseIndex::from_u32(0), UniverseInfo::other());
  1,518 ( 0.00%)      let mut constraints = MirTypeckRegionConstraints {
      .                   placeholder_indices: PlaceholderIndices::default(),
      .                   placeholder_index_to_region: IndexVec::default(),
     69 ( 0.00%)          liveness_constraints: LivenessValues::new(elements.clone()),
      .                   outlives_constraints: OutlivesConstraintSet::default(),
      .                   member_constraints: MemberConstraintSet::default(),
      .                   closure_bounds_mapping: Default::default(),
      .                   type_tests: Vec::default(),
    276 ( 0.00%)          universe_causes,
      .               };
      .           
      .               let CreateResult {
    138 ( 0.00%)          universal_region_relations,
    276 ( 0.00%)          region_bound_pairs,
    276 ( 0.00%)          normalized_inputs_and_output,
    345 ( 0.00%)      } = free_region_relations::create(
      .                   infcx,
      .                   param_env,
      .                   Some(implicit_region_bound),
      .                   universal_regions,
      .                   &mut constraints,
      .               );
      .           
    138 ( 0.00%)      for u in ty::UniverseIndex::ROOT..infcx.universe() {
      .                   let info = UniverseInfo::other();
      .                   constraints.universe_causes.insert(u, info);
      .               }
      .           
    621 ( 0.00%)      let mut borrowck_context = BorrowCheckContext {
     69 ( 0.00%)          universal_regions,
      .                   location_table,
      .                   borrow_set,
      .                   all_facts,
      .                   constraints: &mut constraints,
      .                   upvars,
      .               };
      .           
      .               let opaque_type_values = type_check_internal(
-- line 180 ----------------------------------------
-- line 243 ----------------------------------------
      .                               } else {
      .                                   Some((opaque_type_key, decl))
      .                               }
      .                           })
      .                           .collect()
      .                   },
      .               );
      .           
    828 ( 0.00%)      MirTypeckResults { constraints, universal_region_relations, opaque_type_values }
    552 ( 0.00%)  }
      .           
      .           #[instrument(
      .               skip(infcx, body, promoted, region_bound_pairs, borrowck_context, extra),
      .               level = "debug"
      .           )]
      .           fn type_check_internal<'a, 'tcx, R>(
      .               infcx: &'a InferCtxt<'a, 'tcx>,
      .               param_env: ty::ParamEnv<'tcx>,
-- line 260 ----------------------------------------
-- line 270 ----------------------------------------
      .                   body,
      .                   param_env,
      .                   region_bound_pairs,
      .                   implicit_region_bound,
      .                   borrowck_context,
      .               );
      .               let errors_reported = {
      .                   let mut verifier = TypeVerifier::new(&mut checker, body, promoted);
     69 ( 0.00%)          verifier.visit_body(&body);
     69 ( 0.00%)          verifier.errors_reported
      .               };
      .           
     69 ( 0.00%)      if !errors_reported {
      .                   // if verifier failed, don't do further checks to avoid ICEs
     69 ( 0.00%)          checker.typeck_mir(body);
      .               }
      .           
    897 ( 0.00%)      extra(checker)
      .           }
      .           
      .           fn translate_outlives_facts(typeck: &mut TypeChecker<'_, '_>) {
      .               let cx = &mut typeck.borrowck_context;
    276 ( 0.00%)      if let Some(facts) = cx.all_facts {
      .                   let _prof_timer = typeck.infcx.tcx.prof.generic_activity("polonius_fact_generation");
      .                   let location_table = cx.location_table;
      .                   facts.subset_base.extend(cx.constraints.outlives_constraints.outlives().iter().flat_map(
      .                       |constraint: &OutlivesConstraint<'_>| {
      .                           if let Some(from_location) = constraint.locations.from_location() {
      .                               Either::Left(iter::once((
      .                                   constraint.sup,
      .                                   constraint.sub,
-- line 300 ----------------------------------------
-- line 334 ----------------------------------------
      .               body: &'b Body<'tcx>,
      .               promoted: &'b IndexVec<Promoted, Body<'tcx>>,
      .               last_span: Span,
      .               errors_reported: bool,
      .           }
      .           
      .           impl<'a, 'b, 'tcx> Visitor<'tcx> for TypeVerifier<'a, 'b, 'tcx> {
      .               fn visit_span(&mut self, span: &Span) {
 58,874 ( 0.02%)          if !span.is_dummy() {
 14,693 ( 0.00%)              self.last_span = *span;
      .                   }
      .               }
      .           
 76,395 ( 0.02%)      fn visit_place(&mut self, place: &Place<'tcx>, context: PlaceContext, location: Location) {
      .                   self.sanitize_place(place, location, context);
 55,560 ( 0.01%)      }
      .           
 32,124 ( 0.01%)      fn visit_constant(&mut self, constant: &Constant<'tcx>, location: Location) {
      .                   self.super_constant(constant, location);
 21,416 ( 0.01%)          let ty = self.sanitize_type(constant, constant.literal.ty());
      .           
 24,093 ( 0.01%)          self.cx.infcx.tcx.for_each_free_region(&ty, |live_region| {
      .                       let live_region_vid =
      .                           self.cx.borrowck_context.universal_regions.to_region_vid(live_region);
    126 ( 0.00%)              self.cx
      .                           .borrowck_context
      .                           .constraints
      .                           .liveness_constraints
    126 ( 0.00%)                  .add_element(live_region_vid, location);
      .                   });
      .           
 10,708 ( 0.00%)          if let Some(annotation_index) = constant.user_ty {
     27 ( 0.00%)              if let Err(terr) = self.cx.relate_type_and_user_type(
      6 ( 0.00%)                  constant.literal.ty(),
      .                           ty::Variance::Invariant,
      6 ( 0.00%)                  &UserTypeProjection { base: annotation_index, projs: vec![] },
      6 ( 0.00%)                  location.to_locations(),
      .                           ConstraintCategory::Boring,
      .                       ) {
      .                           let annotation = &self.cx.user_type_annotations[annotation_index];
      .                           span_mirbug!(
      .                               self,
      .                               constant,
      .                               "bad constant user type {:?} vs {:?}: {:?}",
      .                               annotation,
      .                               constant.literal.ty(),
      .                               terr,
      .                           );
      .                       }
      .                   } else {
      .                       let tcx = self.tcx();
  8,022 ( 0.00%)              let maybe_uneval = match constant.literal {
  8,022 ( 0.00%)                  ConstantKind::Ty(ct) => match ct.val {
    136 ( 0.00%)                      ty::ConstKind::Unevaluated(uv) => Some(uv),
      .                               _ => None,
      .                           },
      .                           _ => None,
      .                       };
    272 ( 0.00%)              if let Some(uv) = maybe_uneval {
    272 ( 0.00%)                  if let Some(promoted) = uv.promoted {
      .                               let check_err = |verifier: &mut TypeVerifier<'a, 'b, 'tcx>,
      .                                                promoted: &Body<'tcx>,
      .                                                ty,
      .                                                san_ty| {
      .                                   if let Err(terr) = verifier.cx.eq_types(
      .                                       ty,
      .                                       san_ty,
      .                                       location.to_locations(),
-- line 401 ----------------------------------------
-- line 415 ----------------------------------------
      .                               if !self.errors_reported {
      .                                   let promoted_body = &self.promoted[promoted];
      .                                   self.sanitize_promoted(promoted_body, location);
      .           
      .                                   let promoted_ty = promoted_body.return_ty();
      .                                   check_err(self, promoted_body, ty, promoted_ty);
      .                               }
      .                           } else {
    952 ( 0.00%)                      if let Err(terr) = self.cx.fully_perform_op(
    272 ( 0.00%)                          location.to_locations(),
      .                                   ConstraintCategory::Boring,
    952 ( 0.00%)                          self.cx.param_env.and(type_op::ascribe_user_type::AscribeUserType::new(
    272 ( 0.00%)                              constant.literal.ty(),
      .                                       uv.def.did,
    544 ( 0.00%)                              UserSubsts { substs: uv.substs, user_self_ty: None },
      .                                   )),
      .                               ) {
      .                                   span_mirbug!(
      .                                       self,
      .                                       constant,
      .                                       "bad constant type {:?} ({:?})",
      .                                       constant,
      .                                       terr
      .                                   );
      .                               }
      .                           }
 10,152 ( 0.00%)              } else if let Some(static_def_id) = constant.check_static_ptr(tcx) {
      .                           let unnormalized_ty = tcx.type_of(static_def_id);
     38 ( 0.00%)                  let locations = location.to_locations();
    133 ( 0.00%)                  let normalized_ty = self.cx.normalize(unnormalized_ty, locations);
     95 ( 0.00%)                  let literal_ty = constant.literal.ty().builtin_deref(true).unwrap().ty;
      .           
     57 ( 0.00%)                  if let Err(terr) = self.cx.eq_types(
      .                               literal_ty,
      .                               normalized_ty,
      .                               locations,
      .                               ConstraintCategory::Boring,
      .                           ) {
      .                               span_mirbug!(self, constant, "bad static type {:?} ({:?})", constant, terr);
      .                           }
      .                       }
      .           
 11,452 ( 0.00%)              if let ty::FnDef(def_id, substs) = *constant.literal.ty().kind() {
    504 ( 0.00%)                  let instantiated_predicates = tcx.predicates_of(def_id).instantiate(tcx, substs);
    504 ( 0.00%)                  self.cx.normalize_and_prove_instantiated_predicates(
      .                               def_id,
  1,512 ( 0.00%)                      instantiated_predicates,
    504 ( 0.00%)                      location.to_locations(),
      .                           );
      .                       }
      .                   }
 21,416 ( 0.01%)      }
      .           
 29,986 ( 0.01%)      fn visit_rvalue(&mut self, rvalue: &Rvalue<'tcx>, location: Location) {
      .                   self.super_rvalue(rvalue, location);
  8,178 ( 0.00%)          let rval_ty = rvalue.ty(self.body, self.tcx());
 32,712 ( 0.01%)          self.sanitize_type(rvalue, rval_ty);
      .               }
      .           
 28,220 ( 0.01%)      fn visit_local_decl(&mut self, local: Local, local_decl: &LocalDecl<'tcx>) {
      .                   self.super_local_decl(local, local_decl);
 14,110 ( 0.00%)          self.sanitize_type(local_decl, local_decl.ty);
      .           
  8,466 ( 0.00%)          if let Some(user_ty) = &local_decl.user_ty {
     10 ( 0.00%)              for (user_ty, span) in user_ty.projections_and_spans() {
     50 ( 0.00%)                  let ty = if !local_decl.is_nonref_binding() {
      .                               // If we have a binding of the form `let ref x: T = ..`
      .                               // then remove the outermost reference so we can check the
      .                               // type annotation for the remaining type.
      .                               if let ty::Ref(_, rty, _) = local_decl.ty.kind() {
      .                                   rty
      .                               } else {
      .                                   bug!("{:?} with ref binding has wrong type {}", local, local_decl.ty);
      .                               }
      .                           } else {
      .                               local_decl.ty
      .                           };
      .           
     80 ( 0.00%)                  if let Err(terr) = self.cx.relate_type_and_user_type(
      .                               ty,
      .                               ty::Variance::Invariant,
      .                               user_ty,
     30 ( 0.00%)                      Locations::All(*span),
      .                               ConstraintCategory::TypeAnnotation,
      .                           ) {
      .                               span_mirbug!(
      .                                   self,
      .                                   local,
      .                                   "bad user type on variable {:?}: {:?} != {:?} ({:?})",
      .                                   local,
      .                                   local_decl.ty,
      .                                   local_decl.user_ty,
      .                                   terr,
      .                               );
      .                           }
      .                       }
      .                   }
 22,576 ( 0.01%)      }
      .           
    483 ( 0.00%)      fn visit_body(&mut self, body: &Body<'tcx>) {
    207 ( 0.00%)          self.sanitize_type(&"return type", body.return_ty());
      .                   for local_decl in &body.local_decls {
 14,110 ( 0.00%)              self.sanitize_type(local_decl, local_decl.ty);
      .                   }
    138 ( 0.00%)          if self.errors_reported {
      .                       return;
      .                   }
      .                   self.super_body(body);
    552 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {
      .               fn new(
      .                   cx: &'a mut TypeChecker<'b, 'tcx>,
      .                   body: &'b Body<'tcx>,
      .                   promoted: &'b IndexVec<Promoted, Body<'tcx>>,
      .               ) -> Self {
    621 ( 0.00%)          TypeVerifier { body, promoted, cx, last_span: body.span, errors_reported: false }
      .               }
      .           
      .               fn tcx(&self) -> TyCtxt<'tcx> {
 23,191 ( 0.01%)          self.cx.infcx.tcx
      .               }
      .           
116,150 ( 0.03%)      fn sanitize_type(&mut self, parent: &dyn fmt::Debug, ty: Ty<'tcx>) -> Ty<'tcx> {
 23,230 ( 0.01%)          if ty.has_escaping_bound_vars() || ty.references_error() {
      .                       span_mirbug_and_err!(self, parent, "bad type {:?}", ty)
      .                   } else {
      .                       ty
      .                   }
 81,305 ( 0.02%)      }
      .           
      .               /// Checks that the types internal to the `place` match up with
      .               /// what would be expected.
      .               fn sanitize_place(
      .                   &mut self,
      .                   place: &Place<'tcx>,
      .                   location: Location,
      .                   context: PlaceContext,
      .               ) -> PlaceTy<'tcx> {
      .                   debug!("sanitize_place: {:?}", place);
      .           
 27,780 ( 0.01%)          let mut place_ty = PlaceTy::from_ty(self.body.local_decls[place.local].ty);
      .           
  8,105 ( 0.00%)          for elem in place.projection.iter() {
    580 ( 0.00%)              if place_ty.variant_index.is_none() {
    576 ( 0.00%)                  if place_ty.ty.references_error() {
      .                               assert!(self.errors_reported);
      .                               return PlaceTy::from_ty(self.tcx().ty_error());
      .                           }
      .                       }
      .                       place_ty = self.sanitize_projection(place_ty, elem, place, location);
      .                   }
      .           
 21,428 ( 0.01%)          if let PlaceContext::NonMutatingUse(NonMutatingUseContext::Copy) = context {
      .                       let tcx = self.tcx();
      .                       let trait_ref = ty::TraitRef {
 10,580 ( 0.00%)                  def_id: tcx.require_lang_item(LangItem::Copy, Some(self.last_span)),
  5,290 ( 0.00%)                  substs: tcx.mk_substs_trait(place_ty.ty, &[]),
      .                       };
      .           
      .                       // To have a `Copy` operand, the type `T` of the
      .                       // value must be `Copy`. Note that we prove that `T: Copy`,
      .                       // rather than using the `is_copy_modulo_regions`
      .                       // test. This is important because
      .                       // `is_copy_modulo_regions` ignores the resulting region
      .                       // obligations and assumes they pass. This can result in
      .                       // bounds from `Copy` impls being unsoundly ignored (e.g.,
      .                       // #29149). Note that we decide to use `Copy` before knowing
      .                       // whether the bounds fully apply: in effect, the rule is
      .                       // that if a value of some type could implement `Copy`, then
      .                       // it must.
  3,174 ( 0.00%)              self.cx.prove_trait_ref(
      .                           trait_ref,
      .                           location.to_locations(),
      .                           ConstraintCategory::CopyBound,
      .                       );
      .                   }
      .           
      .                   place_ty
      .               }
-- line 595 ----------------------------------------
-- line 683 ----------------------------------------
      .                   &mut self,
      .                   base: PlaceTy<'tcx>,
      .                   pi: PlaceElem<'tcx>,
      .                   place: &Place<'tcx>,
      .                   location: Location,
      .               ) -> PlaceTy<'tcx> {
      .                   debug!("sanitize_projection: {:?} {:?} {:?}", base, pi, place);
      .                   let tcx = self.tcx();
    580 ( 0.00%)          let base_ty = base.ty;
  2,900 ( 0.00%)          match pi {
      .                       ProjectionElem::Deref => {
    231 ( 0.00%)                  let deref_ty = base_ty.builtin_deref(true);
      .                           PlaceTy::from_ty(deref_ty.map(|t| t.ty).unwrap_or_else(|| {
      .                               span_mirbug_and_err!(self, place, "deref of non-pointer {:?}", base_ty)
      .                           }))
      .                       }
      .                       ProjectionElem::Index(i) => {
      .                           let index_ty = Place::from(i).ty(self.body, tcx).ty;
      .                           if index_ty != tcx.types.usize {
      .                               PlaceTy::from_ty(span_mirbug_and_err!(self, i, "index by non-usize {:?}", i))
-- line 702 ----------------------------------------
-- line 720 ----------------------------------------
      .                               }
      .                               ty::Slice(..) => {
      .                                   assert!(from_end, "slice subslices should use from_end");
      .                                   base_ty
      .                               }
      .                               _ => span_mirbug_and_err!(self, place, "slice of non-array {:?}", base_ty),
      .                           })
      .                       }
     12 ( 0.00%)              ProjectionElem::Downcast(maybe_name, index) => match base_ty.kind() {
     12 ( 0.00%)                  ty::Adt(adt_def, _substs) if adt_def.is_enum() => {
     12 ( 0.00%)                      if index.as_usize() >= adt_def.variants.len() {
      .                                   PlaceTy::from_ty(span_mirbug_and_err!(
      .                                       self,
      .                                       place,
      .                                       "cast to variant #{:?} but enum only has {:?}",
      .                                       index,
      .                                       adt_def.variants.len()
      .                                   ))
      .                               } else {
-- line 738 ----------------------------------------
-- line 752 ----------------------------------------
      .                                   )
      .                               } else {
      .                                   span_mirbug_and_err!(self, place, "can't downcast {:?}", base_ty)
      .                               };
      .                               PlaceTy::from_ty(ty)
      .                           }
      .                       },
      .                       ProjectionElem::Field(field, fty) => {
  2,495 ( 0.00%)                  let fty = self.sanitize_type(place, fty);
  6,986 ( 0.00%)                  let fty = self.cx.normalize(fty, location);
      .                           match self.field_ty(place, base, field, location) {
      .                               Ok(ty) => {
  3,992 ( 0.00%)                          let ty = self.cx.normalize(ty, location);
    998 ( 0.00%)                          if let Err(terr) = self.cx.eq_types(
      .                                       ty,
      .                                       fty,
      .                                       location.to_locations(),
      .                                       ConstraintCategory::Boring,
      .                                   ) {
      .                                       span_mirbug!(
      .                                           self,
      .                                           place,
-- line 773 ----------------------------------------
-- line 800 ----------------------------------------
      .                   &mut self,
      .                   parent: &dyn fmt::Debug,
      .                   base_ty: PlaceTy<'tcx>,
      .                   field: Field,
      .                   location: Location,
      .               ) -> Result<Ty<'tcx>, FieldAccessError> {
      .                   let tcx = self.tcx();
      .           
    499 ( 0.00%)          let (variant, substs) = match base_ty {
     16 ( 0.00%)              PlaceTy { ty, variant_index: Some(variant_index) } => match *ty.kind() {
      8 ( 0.00%)                  ty::Adt(adt_def, substs) => (&adt_def.variants[variant_index], substs),
      .                           ty::Generator(def_id, substs, _) => {
      .                               let mut variants = substs.as_generator().state_tys(def_id, tcx);
      .                               let mut variant = match variants.nth(variant_index.into()) {
      .                                   Some(v) => v,
      .                                   None => bug!(
      .                                       "variant_index of generator out of range: {:?}/{:?}",
      .                                       variant_index,
      .                                       substs.as_generator().state_tys(def_id, tcx).count()
-- line 818 ----------------------------------------
-- line 820 ----------------------------------------
      .                               };
      .                               return match variant.nth(field.index()) {
      .                                   Some(ty) => Ok(ty),
      .                                   None => Err(FieldAccessError::OutOfRange { field_count: variant.count() }),
      .                               };
      .                           }
      .                           _ => bug!("can't have downcast of non-adt non-generator type"),
      .                       },
  1,980 ( 0.00%)              PlaceTy { ty, variant_index: None } => match *ty.kind() {
     68 ( 0.00%)                  ty::Adt(adt_def, substs) if !adt_def.is_enum() => {
      .                               (&adt_def.variants[VariantIdx::new(0)], substs)
      .                           }
      .                           ty::Closure(_, substs) => {
      .                               return match substs
      .                                   .as_closure()
      .                                   .tupled_upvars_ty()
      .                                   .tuple_element_ty(field.index())
      .                               {
-- line 837 ----------------------------------------
-- line 846 ----------------------------------------
      .                               // accessible without a variant index.
      .                               return match substs.as_generator().prefix_tys().nth(field.index()) {
      .                                   Some(ty) => Ok(ty),
      .                                   None => Err(FieldAccessError::OutOfRange {
      .                                       field_count: substs.as_generator().prefix_tys().count(),
      .                                   }),
      .                               };
      .                           }
    478 ( 0.00%)                  ty::Tuple(tys) => {
    478 ( 0.00%)                      return match tys.get(field.index()) {
  1,912 ( 0.00%)                          Some(&ty) => Ok(ty.expect_ty()),
      .                                   None => Err(FieldAccessError::OutOfRange { field_count: tys.len() }),
      .                               };
      .                           }
      .                           _ => {
      .                               return Ok(span_mirbug_and_err!(
      .                                   self,
      .                                   parent,
      .                                   "can't project out of {:?}",
      .                                   base_ty
      .                               ));
      .                           }
      .                       },
      .                   };
      .           
     21 ( 0.00%)          if let Some(field) = variant.fields.get(field.index()) {
    210 ( 0.00%)              Ok(self.cx.normalize(field.ty(tcx, substs), location))
      .                   } else {
      .                       Err(FieldAccessError::OutOfRange { field_count: variant.fields.len() })
      .                   }
      .               }
      .           }
      .           
      .           /// The MIR type checker. Visits the MIR and enforces all the
      .           /// constraints needed for it to be valid and well-typed. Along the
-- line 880 ----------------------------------------
-- line 965 ----------------------------------------
      .                   }
      .               }
      .           }
      .           
      .           /// The `Locations` type summarizes *where* region constraints are
      .           /// required to hold. Normally, this is at a particular point which
      .           /// created the obligation, but for constraints that the user gave, we
      .           /// want the constraint to hold at all points.
    438 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
      .           pub enum Locations {
      .               /// Indicates that a type constraint should always be true. This
      .               /// is particularly important in the new borrowck analysis for
      .               /// things like the type of the return slot. Consider this
      .               /// example:
      .               ///
      .               /// ```
      .               /// fn foo<'a>(x: &'a u32) -> &'a u32 {
-- line 981 ----------------------------------------
-- line 1036 ----------------------------------------
      .               fn new(
      .                   infcx: &'a InferCtxt<'a, 'tcx>,
      .                   body: &'a Body<'tcx>,
      .                   param_env: ty::ParamEnv<'tcx>,
      .                   region_bound_pairs: &'a RegionBoundPairs<'tcx>,
      .                   implicit_region_bound: ty::Region<'tcx>,
      .                   borrowck_context: &'a mut BorrowCheckContext<'a, 'tcx>,
      .               ) -> Self {
    897 ( 0.00%)          let mut checker = Self {
      .                       infcx,
      .                       last_span: DUMMY_SP,
      .                       body,
     69 ( 0.00%)              user_type_annotations: &body.user_type_annotations,
      .                       param_env,
      .                       region_bound_pairs,
      .                       implicit_region_bound,
      .                       borrowck_context,
      .                       reported_errors: Default::default(),
      .                   };
      .                   checker.check_user_type_annotations();
      .                   checker
      .               }
      .           
      .               fn unsized_feature_enabled(&self) -> bool {
  5,642 ( 0.00%)          let features = self.tcx().features();
 11,284 ( 0.00%)          features.unsized_locals || features.unsized_fn_params
      .               }
      .           
      .               /// Equate the inferred type and the annotated type for user type annotations
      .               fn check_user_type_annotations(&mut self) {
      .                   debug!(
      .                       "check_user_type_annotations: user_type_annotations={:?}",
      .                       self.user_type_annotations
      .                   );
     23 ( 0.00%)          for user_annotation in self.user_type_annotations {
     46 ( 0.00%)              let CanonicalUserTypeAnnotation { span, ref user_ty, inferred_ty } = *user_annotation;
    138 ( 0.00%)              let inferred_ty = self.normalize(inferred_ty, Locations::All(span));
     46 ( 0.00%)              let annotation = self.instantiate_canonical_with_fresh_inference_vars(span, user_ty);
     46 ( 0.00%)              match annotation {
     40 ( 0.00%)                  UserType::Ty(mut ty) => {
    120 ( 0.00%)                      ty = self.normalize(ty, Locations::All(span));
      .           
     40 ( 0.00%)                      if let Err(terr) = self.eq_types(
      .                                   ty,
     20 ( 0.00%)                          inferred_ty,
      .                                   Locations::All(span),
      .                                   ConstraintCategory::BoringNoLocation,
      .                               ) {
      .                                   span_mirbug!(
      .                                       self,
      .                                       user_annotation,
      .                                       "bad user type ({:?} = {:?}): {:?}",
      .                                       ty,
      .                                       inferred_ty,
      .                                       terr
      .                                   );
      .                               }
      .           
    140 ( 0.00%)                      self.prove_predicate(
     60 ( 0.00%)                          ty::Binder::dummy(ty::PredicateKind::WellFormed(inferred_ty.into()))
      .                                       .to_predicate(self.tcx()),
     40 ( 0.00%)                          Locations::All(span),
      .                                   ConstraintCategory::TypeAnnotation,
      .                               );
      .                           }
     24 ( 0.00%)                  UserType::TypeOf(def_id, user_substs) => {
     27 ( 0.00%)                      if let Err(terr) = self.fully_perform_op(
      6 ( 0.00%)                          Locations::All(span),
      .                                   ConstraintCategory::BoringNoLocation,
     15 ( 0.00%)                          self.param_env.and(type_op::ascribe_user_type::AscribeUserType::new(
      3 ( 0.00%)                              inferred_ty,
      .                                       def_id,
      6 ( 0.00%)                              user_substs,
      .                                   )),
      .                               ) {
      .                                   span_mirbug!(
      .                                       self,
      .                                       user_annotation,
      .                                       "bad user type AscribeUserType({:?}, {:?} {:?}, type_of={:?}): {:?}",
      .                                       inferred_ty,
      .                                       def_id,
-- line 1116 ----------------------------------------
-- line 1128 ----------------------------------------
      .               fn push_region_constraints(
      .                   &mut self,
      .                   locations: Locations,
      .                   category: ConstraintCategory,
      .                   data: &QueryRegionConstraints<'tcx>,
      .               ) {
      .                   debug!("constraints generated: {:#?}", data);
      .           
    108 ( 0.00%)          constraint_conversion::ConstraintConversion::new(
      .                       self.infcx,
    216 ( 0.00%)              self.borrowck_context.universal_regions,
    108 ( 0.00%)              self.region_bound_pairs,
      .                       Some(self.implicit_region_bound),
     12 ( 0.00%)              self.param_env,
      .                       locations,
      .                       category,
    108 ( 0.00%)              &mut self.borrowck_context.constraints,
      .                   )
      .                   .convert_all(data);
      .               }
      .           
      .               /// Try to relate `sub <: sup`
      .               fn sub_types(
      .                   &mut self,
      .                   sub: Ty<'tcx>,
      .                   sup: Ty<'tcx>,
      .                   locations: Locations,
      .                   category: ConstraintCategory,
      .               ) -> Fallible<()> {
      .                   // Use this order of parameters because the sup type is usually the
      .                   // "expected" type in diagnostics.
 52,204 ( 0.01%)          self.relate_types(sup, ty::Variance::Contravariant, sub, locations, category)
      .               }
      .           
      .               #[instrument(skip(self, category), level = "debug")]
      .               fn eq_types(
      .                   &mut self,
      .                   expected: Ty<'tcx>,
      .                   found: Ty<'tcx>,
      .                   locations: Locations,
      .                   category: ConstraintCategory,
      .               ) -> Fallible<()> {
  7,741 ( 0.00%)          self.relate_types(expected, ty::Variance::Invariant, found, locations, category)
      .               }
      .           
    221 ( 0.00%)      #[instrument(skip(self), level = "debug")]
      .               fn relate_type_and_user_type(
      .                   &mut self,
      .                   a: Ty<'tcx>,
      .                   v: ty::Variance,
      .                   user_ty: &UserTypeProjection,
      .                   locations: Locations,
      .                   category: ConstraintCategory,
      .               ) -> Fallible<()> {
     60 ( 0.00%)          let annotated_type = self.user_type_annotations[user_ty.base].inferred_ty;
      .                   let mut curr_projected_ty = PlaceTy::from_ty(annotated_type);
      .           
     45 ( 0.00%)          let tcx = self.infcx.tcx;
      .           
      .                   for proj in &user_ty.projs {
      .                       let projected_ty = curr_projected_ty.projection_ty_core(
      .                           tcx,
      .                           self.param_env,
      .                           proj,
      .                           |this, field, &()| {
      .                               let ty = this.field_ty(tcx, field);
-- line 1193 ----------------------------------------
-- line 1197 ----------------------------------------
      .                       curr_projected_ty = projected_ty;
      .                   }
      .                   debug!(
      .                       "user_ty base: {:?} freshened: {:?} projs: {:?} yields: {:?}",
      .                       user_ty.base, annotated_type, user_ty.projs, curr_projected_ty
      .                   );
      .           
      .                   let ty = curr_projected_ty.ty;
    246 ( 0.00%)          self.relate_types(ty, v.xform(ty::Variance::Contravariant), a, locations, category)?;
      .           
      .                   Ok(())
      .               }
      .           
      .               /// Equates a type `anon_ty` that may contain opaque types whose
      .               /// values are to be inferred by the MIR.
      .               ///
      .               /// The type `revealed_ty` contains the same type as `anon_ty`, but with the
-- line 1213 ----------------------------------------
-- line 1231 ----------------------------------------
      .               ///
      .               /// In terms of our function parameters:
      .               ///
      .               /// * `anon_ty` would be `Box<Foo<T>>` where `Foo<T>` is an opaque type
      .               ///   scoped to this function (note that it is parameterized by the
      .               ///   generics of `foo`). Note that `anon_ty` is not just the opaque type,
      .               ///   but the entire return type (which may contain opaque types within it).
      .               /// * `revealed_ty` would be `Box<(T, u32)>`
  1,311 ( 0.00%)      #[instrument(skip(self), level = "debug")]
      .               fn eq_opaque_type_and_type(
      .                   &mut self,
      .                   revealed_ty: Ty<'tcx>,
      .                   anon_ty: Ty<'tcx>,
      .                   locations: Locations,
      .                   category: ConstraintCategory,
      .               ) -> Fallible<()> {
      .                   // Fast path for the common case.
     69 ( 0.00%)          if !anon_ty.has_opaque_types() {
    138 ( 0.00%)              if let Err(terr) = self.eq_types(anon_ty, revealed_ty, locations, category) {
      .                           span_mirbug!(
      .                               self,
      .                               locations,
      .                               "eq_opaque_type_and_type: `{:?}=={:?}` failed with `{:?}`",
      .                               revealed_ty,
      .                               anon_ty,
      .                               terr
      .                           );
-- line 1257 ----------------------------------------
-- line 1328 ----------------------------------------
      .                               || "opaque_type_map".to_string(),
      .                           ),
      .                       )?;
      .                   }
      .                   Ok(())
      .               }
      .           
      .               fn tcx(&self) -> TyCtxt<'tcx> {
 47,121 ( 0.01%)          self.infcx.tcx
      .               }
      .           
      .               #[instrument(skip(self, body, location), level = "debug")]
      .               fn check_stmt(&mut self, body: &Body<'tcx>, stmt: &Statement<'tcx>, location: Location) {
      .                   let tcx = self.tcx();
 30,360 ( 0.01%)          match stmt.kind {
  2,726 ( 0.00%)              StatementKind::Assign(box (ref place, ref rv)) => {
      .                           // Assignments to temporaries are not "interesting";
      .                           // they are not caused by the user, but rather artifacts
      .                           // of lowering. Assignments to other sorts of places *are* interesting
      .                           // though.
 10,840 ( 0.00%)                  let category = match place.as_local() {
      .                               Some(RETURN_PLACE) => {
    210 ( 0.00%)                          let defining_ty = &self.borrowck_context.universal_regions.defining_ty;
    105 ( 0.00%)                          if defining_ty.is_const() {
    116 ( 0.00%)                              if tcx.is_static(defining_ty.def_id()) {
      .                                           ConstraintCategory::UseAsStatic
      .                                       } else {
      .                                           ConstraintCategory::UseAsConst
      .                                       }
      .                                   } else {
      .                                       ConstraintCategory::Return(ReturnConstraint::Normal)
      .                                   }
      .                               }
      .                               Some(l)
  3,457 ( 0.00%)                          if matches!(
  5,395 ( 0.00%)                              body.local_decls[l].local_info,
      .                                       Some(box LocalInfo::AggregateTemp)
      .                                   ) =>
      .                               {
      .                                   ConstraintCategory::Usage
      .                               }
      .                               Some(l) if !body.local_decls[l].is_user_variable() => {
      .                                   ConstraintCategory::Boring
      .                               }
-- line 1371 ----------------------------------------
-- line 1373 ----------------------------------------
      .                           };
      .                           debug!(
      .                               "assignment category: {:?} {:?}",
      .                               category,
      .                               place.as_local().map(|l| &body.local_decls[l])
      .                           );
      .           
      .                           let place_ty = place.ty(body, tcx).ty;
 32,712 ( 0.01%)                  let place_ty = self.normalize(place_ty, location);
  2,726 ( 0.00%)                  let rv_ty = rv.ty(body, tcx);
 16,356 ( 0.00%)                  let rv_ty = self.normalize(rv_ty, location);
  5,452 ( 0.00%)                  if let Err(terr) =
      .                               self.sub_types(rv_ty, place_ty, location.to_locations(), category)
      .                           {
      .                               span_mirbug!(
      .                                   self,
      .                                   stmt,
      .                                   "bad assignment ({:?} = {:?}): {:?}",
      .                                   place_ty,
      .                                   rv_ty,
      .                                   terr
      .                               );
      .                           }
      .           
      7 ( 0.00%)                  if let Some(annotation_index) = self.rvalue_user_ty(rv) {
      .                               if let Err(terr) = self.relate_type_and_user_type(
      .                                   rv_ty,
      .                                   ty::Variance::Invariant,
      .                                   &UserTypeProjection { base: annotation_index, projs: vec![] },
      .                                   location.to_locations(),
      .                                   ConstraintCategory::Boring,
      .                               ) {
      .                                   let annotation = &self.user_type_annotations[annotation_index];
-- line 1405 ----------------------------------------
-- line 1409 ----------------------------------------
      .                                       "bad user type on rvalue ({:?} = {:?}): {:?}",
      .                                       annotation,
      .                                       rv_ty,
      .                                       terr
      .                                   );
      .                               }
      .                           }
      .           
 19,082 ( 0.00%)                  self.check_rvalue(body, rv, location);
  2,726 ( 0.00%)                  if !self.unsized_feature_enabled() {
      .                               let trait_ref = ty::TraitRef {
 29,986 ( 0.01%)                          def_id: tcx.require_lang_item(LangItem::Sized, Some(self.last_span)),
 13,630 ( 0.00%)                          substs: tcx.mk_substs_trait(place_ty, &[]),
      .                               };
  8,178 ( 0.00%)                      self.prove_trait_ref(
      .                                   trait_ref,
      .                                   location.to_locations(),
      .                                   ConstraintCategory::SizedBound,
      .                               );
      .                           }
      .                       }
      .                       StatementKind::SetDiscriminant { ref place, variant_index } => {
      .                           let place_type = place.ty(body, tcx).ty;
-- line 1431 ----------------------------------------
-- line 1444 ----------------------------------------
      .                               span_bug!(
      .                                   stmt.source_info.span,
      .                                   "bad set discriminant ({:?} = {:?}): value of of range",
      .                                   place,
      .                                   variant_index
      .                               );
      .                           };
      .                       }
      2 ( 0.00%)              StatementKind::AscribeUserType(box (ref place, ref projection), variance) => {
      2 ( 0.00%)                  let place_ty = place.ty(body, tcx).ty;
      .                           if let Err(terr) = self.relate_type_and_user_type(
      .                               place_ty,
      .                               variance,
      .                               projection,
      8 ( 0.00%)                      Locations::All(stmt.source_info.span),
      .                               ConstraintCategory::TypeAnnotation,
      .                           ) {
      .                               let annotation = &self.user_type_annotations[projection.base];
      .                               span_mirbug!(
      .                                   self,
      .                                   stmt,
      .                                   "bad type assert ({:?} <: {:?} with projections {:?}): {:?}",
      .                                   place_ty,
-- line 1466 ----------------------------------------
-- line 1488 ----------------------------------------
      .               #[instrument(skip(self, body, term_location), level = "debug")]
      .               fn check_terminator(
      .                   &mut self,
      .                   body: &Body<'tcx>,
      .                   term: &Terminator<'tcx>,
      .                   term_location: Location,
      .               ) {
      .                   let tcx = self.tcx();
  5,600 ( 0.00%)          match term.kind {
      .                       TerminatorKind::Goto { .. }
      .                       | TerminatorKind::Resume
      .                       | TerminatorKind::Abort
      .                       | TerminatorKind::Return
      .                       | TerminatorKind::GeneratorDrop
      .                       | TerminatorKind::Unreachable
      .                       | TerminatorKind::Drop { .. }
      .                       | TerminatorKind::FalseEdge { .. }
-- line 1504 ----------------------------------------
-- line 1520 ----------------------------------------
      .                                   term,
      .                                   "bad DropAndReplace ({:?} = {:?}): {:?}",
      .                                   place_ty,
      .                                   rv_ty,
      .                                   terr
      .                               );
      .                           }
      .                       }
    652 ( 0.00%)              TerminatorKind::SwitchInt { ref discr, switch_ty, .. } => {
    489 ( 0.00%)                  self.check_operand(discr, term_location);
      .           
    163 ( 0.00%)                  let discr_ty = discr.ty(body, tcx);
    326 ( 0.00%)                  if let Err(terr) = self.sub_types(
      .                               discr_ty,
      .                               switch_ty,
      .                               term_location.to_locations(),
      .                               ConstraintCategory::Assignment,
      .                           ) {
      .                               span_mirbug!(
      .                                   self,
      .                                   term,
      .                                   "bad SwitchInt ({:?} on {:?}): {:?}",
      .                                   switch_ty,
      .                                   discr_ty,
      .                                   terr
      .                               );
      .                           }
    318 ( 0.00%)                  if !switch_ty.is_integral() && !switch_ty.is_char() && !switch_ty.is_bool() {
      .                               span_mirbug!(self, term, "bad SwitchInt discr ty {:?}", switch_ty);
      .                           }
      .                           // FIXME: check the values
      .                       }
  1,530 ( 0.00%)              TerminatorKind::Call { ref func, ref args, ref destination, from_hir_call, .. } => {
  1,275 ( 0.00%)                  self.check_operand(func, term_location);
      .                           for arg in args {
  2,175 ( 0.00%)                      self.check_operand(arg, term_location);
      .                           }
      .           
    255 ( 0.00%)                  let func_ty = func.ty(body, tcx);
      .                           debug!("check_terminator: call, func_ty={:?}", func_ty);
  1,020 ( 0.00%)                  let sig = match func_ty.kind() {
  1,020 ( 0.00%)                      ty::FnDef(..) | ty::FnPtr(_) => func_ty.fn_sig(tcx),
      .                               _ => {
      .                                   span_mirbug!(self, term, "call to non-function {:?}", func_ty);
      .                                   return;
      .                               }
      .                           };
  2,550 ( 0.00%)                  let (sig, map) = self.infcx.replace_bound_vars_with_fresh_vars(
    765 ( 0.00%)                      term.source_info.span,
      .                               LateBoundRegionConversionTime::FnCall,
      .                               sig,
      .                           );
    510 ( 0.00%)                  let sig = self.normalize(sig, term_location);
  1,020 ( 0.00%)                  self.check_call_dest(body, term, &sig, destination, term_location);
      .           
      .                           self.prove_predicates(
    255 ( 0.00%)                      sig.inputs_and_output
      .                                   .iter()
  1,380 ( 0.00%)                          .map(|ty| ty::Binder::dummy(ty::PredicateKind::WellFormed(ty.into()))),
      .                               term_location.to_locations(),
      .                               ConstraintCategory::Boring,
      .                           );
      .           
      .                           // The ordinary liveness rules will ensure that all
      .                           // regions in the type of the callee are live here. We
      .                           // then further constrain the late-bound regions that
      .                           // were instantiated at the call site to be live as
      .                           // well. The resulting is that all the input (and
      .                           // output) types in the signature must be live, since
      .                           // all the inputs that fed into it were live.
  1,608 ( 0.00%)                  for &late_bound_region in map.values() {
      .                               let region_vid =
     78 ( 0.00%)                          self.borrowck_context.universal_regions.to_region_vid(late_bound_region);
     78 ( 0.00%)                      self.borrowck_context
      .                                   .constraints
      .                                   .liveness_constraints
      .                                   .add_element(region_vid, term_location);
      .                           }
      .           
    510 ( 0.00%)                  self.check_call_inputs(body, term, &sig, args, term_location, from_hir_call);
      .                       }
    592 ( 0.00%)              TerminatorKind::Assert { ref cond, ref msg, .. } => {
    888 ( 0.00%)                  self.check_operand(cond, term_location);
      .           
    592 ( 0.00%)                  let cond_ty = cond.ty(body, tcx);
    296 ( 0.00%)                  if cond_ty != tcx.types.bool {
      .                               span_mirbug!(self, term, "bad Assert ({:?}, not bool", cond_ty);
      .                           }
      .           
    592 ( 0.00%)                  if let AssertKind::BoundsCheck { ref len, ref index } = *msg {
      .                               if len.ty(body, tcx) != tcx.types.usize {
      .                                   span_mirbug!(self, len, "bounds-check length non-usize {:?}", len)
      .                               }
      .                               if index.ty(body, tcx) != tcx.types.usize {
      .                                   span_mirbug!(self, index, "bounds-check index non-usize {:?}", index)
      .                               }
      .                           }
      .                       }
-- line 1617 ----------------------------------------
-- line 1647 ----------------------------------------
      .                   &mut self,
      .                   body: &Body<'tcx>,
      .                   term: &Terminator<'tcx>,
      .                   sig: &ty::FnSig<'tcx>,
      .                   destination: &Option<(Place<'tcx>, BasicBlock)>,
      .                   term_location: Location,
      .               ) {
      .                   let tcx = self.tcx();
  1,020 ( 0.00%)          match *destination {
      .                       Some((ref dest, _target_block)) => {
      .                           let dest_ty = dest.ty(body, tcx).ty;
  1,380 ( 0.00%)                  let dest_ty = self.normalize(dest_ty, term_location);
  1,150 ( 0.00%)                  let category = match dest.as_local() {
      .                               Some(RETURN_PLACE) => {
     49 ( 0.00%)                          if let BorrowCheckContext {
      .                                       universal_regions:
      .                                           UniversalRegions {
      .                                               defining_ty:
      .                                                   DefiningTy::Const(def_id, _)
      .                                                   | DefiningTy::InlineConst(def_id, _),
      .                                               ..
      .                                           },
      .                                       ..
-- line 1669 ----------------------------------------
-- line 1673 ----------------------------------------
      .                                           ConstraintCategory::UseAsStatic
      .                                       } else {
      .                                           ConstraintCategory::UseAsConst
      .                                       }
      .                                   } else {
      .                                       ConstraintCategory::Return(ReturnConstraint::Normal)
      .                                   }
      .                               }
    114 ( 0.00%)                      Some(l) if !body.local_decls[l].is_user_variable() => {
      .                                   ConstraintCategory::Boring
      .                               }
      .                               _ => ConstraintCategory::Assignment,
      .                           };
      .           
      .                           let locations = term_location.to_locations();
      .           
  1,610 ( 0.00%)                  if let Err(terr) = self.sub_types(sig.output(), dest_ty, locations, category) {
      .                               span_mirbug!(
      .                                   self,
      .                                   term,
      .                                   "call dest mismatch ({:?} <- {:?}): {:?}",
      .                                   dest_ty,
      .                                   sig.output(),
      .                                   terr
      .                               );
      .                           }
      .           
      .                           // When `unsized_fn_params` and `unsized_locals` are both not enabled,
      .                           // this check is done at `check_local`.
    230 ( 0.00%)                  if self.unsized_feature_enabled() {
      .                               let span = term.source_info.span;
      .                               self.ensure_place_sized(dest_ty, span);
      .                           }
      .                       }
      .                       None => {
     25 ( 0.00%)                  if !self
      .                               .tcx()
     75 ( 0.00%)                      .conservative_is_privately_uninhabited(self.param_env.and(sig.output()))
      .                           {
      .                               span_mirbug!(self, term, "call to converging function {:?} w/o dest", sig);
      .                           }
      .                       }
      .                   }
      .               }
      .           
      .               fn check_call_inputs(
-- line 1718 ----------------------------------------
-- line 1720 ----------------------------------------
      .                   body: &Body<'tcx>,
      .                   term: &Terminator<'tcx>,
      .                   sig: &ty::FnSig<'tcx>,
      .                   args: &[Operand<'tcx>],
      .                   term_location: Location,
      .                   from_hir_call: bool,
      .               ) {
      .                   debug!("check_call_inputs({:?}, {:?})", sig, args);
  1,785 ( 0.00%)          if args.len() < sig.inputs().len() || (args.len() > sig.inputs().len() && !sig.c_variadic) {
      .                       span_mirbug!(self, term, "call to {:?} with wrong # of args", sig);
      .                   }
  1,380 ( 0.00%)          for (n, (fn_arg, op_arg)) in iter::zip(sig.inputs(), args).enumerate() {
      .                       let op_arg_ty = op_arg.ty(body, self.tcx());
  1,740 ( 0.00%)              let op_arg_ty = self.normalize(op_arg_ty, term_location);
      .                       let category = if from_hir_call {
      .                           ConstraintCategory::CallArgument
      .                       } else {
      .                           ConstraintCategory::Boring
      .                       };
    870 ( 0.00%)              if let Err(terr) =
    870 ( 0.00%)                  self.sub_types(op_arg_ty, fn_arg, term_location.to_locations(), category)
      .                       {
      .                           span_mirbug!(
      .                               self,
      .                               term,
      .                               "bad arg #{:?} ({:?} <- {:?}): {:?}",
      .                               n,
      .                               fn_arg,
      .                               op_arg_ty,
      .                               terr
      .                           );
      .                       }
      .                   }
      .               }
      .           
      .               fn check_iscleanup(&mut self, body: &Body<'tcx>, block_data: &BasicBlockData<'tcx>) {
    675 ( 0.00%)          let is_cleanup = block_data.is_cleanup;
  3,360 ( 0.00%)          self.last_span = block_data.terminator().source_info.span;
  6,720 ( 0.00%)          match block_data.terminator().kind {
    274 ( 0.00%)              TerminatorKind::Goto { target } => {
  1,096 ( 0.00%)                  self.assert_iscleanup(body, block_data, target, is_cleanup)
      .                       }
    163 ( 0.00%)              TerminatorKind::SwitchInt { ref targets, .. } => {
    163 ( 0.00%)                  for target in targets.all_targets() {
  1,980 ( 0.00%)                      self.assert_iscleanup(body, block_data, *target, is_cleanup);
      .                           }
      .                       }
      .                       TerminatorKind::Resume => {
     42 ( 0.00%)                  if !is_cleanup {
      .                               span_mirbug!(self, block_data, "resume on non-cleanup block!")
      .                           }
      .                       }
      .                       TerminatorKind::Abort => {
      .                           if !is_cleanup {
      .                               span_mirbug!(self, block_data, "abort on non-cleanup block!")
      .                           }
      .                       }
      .                       TerminatorKind::Return => {
     69 ( 0.00%)                  if is_cleanup {
      .                               span_mirbug!(self, block_data, "return on cleanup block")
      .                           }
      .                       }
      .                       TerminatorKind::GeneratorDrop { .. } => {
      .                           if is_cleanup {
      .                               span_mirbug!(self, block_data, "generator_drop in cleanup block")
      .                           }
      .                       }
-- line 1786 ----------------------------------------
-- line 1792 ----------------------------------------
      .                           if let Some(drop) = drop {
      .                               self.assert_iscleanup(body, block_data, drop, is_cleanup);
      .                           }
      .                       }
      .                       TerminatorKind::Unreachable => {}
      .                       TerminatorKind::Drop { target, unwind, .. }
      .                       | TerminatorKind::DropAndReplace { target, unwind, .. }
      .                       | TerminatorKind::Assert { target, cleanup: unwind, .. } => {
  1,480 ( 0.00%)                  self.assert_iscleanup(body, block_data, target, is_cleanup);
    592 ( 0.00%)                  if let Some(unwind) = unwind {
    296 ( 0.00%)                      if is_cleanup {
      .                                   span_mirbug!(self, block_data, "unwind on cleanup block")
      .                               }
      .                               self.assert_iscleanup(body, block_data, unwind, true);
      .                           }
      .                       }
    255 ( 0.00%)              TerminatorKind::Call { ref destination, cleanup, .. } => {
  1,200 ( 0.00%)                  if let &Some((_, target)) = destination {
    460 ( 0.00%)                      self.assert_iscleanup(body, block_data, target, is_cleanup);
      .                           }
    765 ( 0.00%)                  if let Some(cleanup) = cleanup {
    255 ( 0.00%)                      if is_cleanup {
      .                                   span_mirbug!(self, block_data, "cleanup on cleanup block")
      .                               }
      .                               self.assert_iscleanup(body, block_data, cleanup, true);
      .                           }
      .                       }
      8 ( 0.00%)              TerminatorKind::FalseEdge { real_target, imaginary_target } => {
     24 ( 0.00%)                  self.assert_iscleanup(body, block_data, real_target, is_cleanup);
     20 ( 0.00%)                  self.assert_iscleanup(body, block_data, imaginary_target, is_cleanup);
      .                       }
     26 ( 0.00%)              TerminatorKind::FalseUnwind { real_target, unwind } => {
     65 ( 0.00%)                  self.assert_iscleanup(body, block_data, real_target, is_cleanup);
     26 ( 0.00%)                  if let Some(unwind) = unwind {
     13 ( 0.00%)                      if is_cleanup {
      .                                   span_mirbug!(self, block_data, "cleanup in cleanup block via false unwind");
      .                               }
      .                               self.assert_iscleanup(body, block_data, unwind, true);
      .                           }
      .                       }
      .                       TerminatorKind::InlineAsm { destination, cleanup, .. } => {
      .                           if let Some(target) = destination {
      .                               self.assert_iscleanup(body, block_data, target, is_cleanup);
-- line 1834 ----------------------------------------
-- line 1838 ----------------------------------------
      .                                   span_mirbug!(self, block_data, "cleanup on cleanup block")
      .                               }
      .                               self.assert_iscleanup(body, block_data, cleanup, true);
      .                           }
      .                       }
      .                   }
      .               }
      .           
 15,435 ( 0.00%)      fn assert_iscleanup(
      .                   &mut self,
      .                   body: &Body<'tcx>,
      .                   ctxt: &dyn fmt::Debug,
      .                   bb: BasicBlock,
      .                   iscleanuppad: bool,
      .               ) {
 10,290 ( 0.00%)          if body[bb].is_cleanup != iscleanuppad {
      .                       span_mirbug!(self, ctxt, "cleanuppad mismatch: {:?} should be {:?}", bb, iscleanuppad);
      .                   }
  8,575 ( 0.00%)      }
      .           
      .               fn check_local(&mut self, body: &Body<'tcx>, local: Local, local_decl: &LocalDecl<'tcx>) {
      .                   match body.local_kind(local) {
      .                       LocalKind::ReturnPointer | LocalKind::Arg => {
      .                           // return values of normal functions are required to be
      .                           // sized by typeck, but return values of ADT constructors are
      .                           // not because we don't include a `Self: Sized` bounds on them.
      .                           //
-- line 1864 ----------------------------------------
-- line 1866 ----------------------------------------
      .                           // - maybe we should make that a warning.
      .                           return;
      .                       }
      .                       LocalKind::Var | LocalKind::Temp => {}
      .                   }
      .           
      .                   // When `unsized_fn_params` or `unsized_locals` is enabled, only function calls
      .                   // and nullary ops are checked in `check_call_dest`.
  2,686 ( 0.00%)          if !self.unsized_feature_enabled() {
  5,372 ( 0.00%)              let span = local_decl.source_info.span;
  2,686 ( 0.00%)              let ty = local_decl.ty;
  5,372 ( 0.00%)              self.ensure_place_sized(ty, span);
      .                   }
      .               }
      .           
 24,174 ( 0.01%)      fn ensure_place_sized(&mut self, ty: Ty<'tcx>, span: Span) {
      .                   let tcx = self.tcx();
      .           
      .                   // Erase the regions from `ty` to get a global type.  The
      .                   // `Sized` bound in no way depends on precise regions, so this
      .                   // shouldn't affect `is_sized`.
      .                   let erased_ty = tcx.erase_regions(ty);
 16,116 ( 0.00%)          if !erased_ty.is_sized(tcx.at(span), self.param_env) {
      .                       // in current MIR construction, all non-control-flow rvalue
      .                       // expressions evaluate through `as_temp` or `into` a return
      .                       // slot or local, so to find all unsized rvalues it is enough
      .                       // to check all temps, return slots and locals.
      .                       if self.reported_errors.replace((ty, span)).is_none() {
      .                           let mut diag = struct_span_err!(
      .                               self.tcx().sess,
      .                               span,
-- line 1896 ----------------------------------------
-- line 1901 ----------------------------------------
      .                           );
      .           
      .                           // While this is located in `nll::typeck` this error is not
      .                           // an NLL error, it's a required check to prevent creation
      .                           // of unsized rvalues in a call expression.
      .                           diag.emit();
      .                       }
      .                   }
 16,116 ( 0.00%)      }
      .           
      .               fn aggregate_field_ty(
      .                   &mut self,
      .                   ak: &AggregateKind<'tcx>,
      .                   field_index: usize,
      .                   location: Location,
      .               ) -> Result<Ty<'tcx>, FieldAccessError> {
      .                   let tcx = self.tcx();
      .           
  3,405 ( 0.00%)          match *ak {
    117 ( 0.00%)              AggregateKind::Adt(adt_did, variant_index, substs, _, active_field_index) => {
      .                           let def = tcx.adt_def(adt_did);
      .                           let variant = &def.variants[variant_index];
      .                           let adj_field_index = active_field_index.unwrap_or(field_index);
     13 ( 0.00%)                  if let Some(field) = variant.fields.get(adj_field_index) {
    117 ( 0.00%)                      Ok(self.normalize(field.ty(tcx, substs), location))
      .                           } else {
      .                               Err(FieldAccessError::OutOfRange { field_count: variant.fields.len() })
      .                           }
      .                       }
      .                       AggregateKind::Closure(_, substs) => {
      .                           match substs.as_closure().upvar_tys().nth(field_index) {
      .                               Some(ty) => Ok(ty),
      .                               None => Err(FieldAccessError::OutOfRange {
-- line 1933 ----------------------------------------
-- line 1941 ----------------------------------------
      .                           // aggregate rvalues.
      .                           match substs.as_generator().prefix_tys().nth(field_index) {
      .                               Some(ty) => Ok(ty),
      .                               None => Err(FieldAccessError::OutOfRange {
      .                                   field_count: substs.as_generator().prefix_tys().count(),
      .                               }),
      .                           }
      .                       }
    668 ( 0.00%)              AggregateKind::Array(ty) => Ok(ty),
      .                       AggregateKind::Tuple => {
      .                           unreachable!("This should have been covered in check_rvalues");
      .                       }
      .                   }
      .               }
      .           
 39,788 ( 0.01%)      fn check_operand(&mut self, op: &Operand<'tcx>, location: Location) {
 11,368 ( 0.00%)          if let Operand::Constant(constant) = op {
  7,329 ( 0.00%)              let maybe_uneval = match constant.literal {
  7,329 ( 0.00%)                  ConstantKind::Ty(ct) => match ct.val {
     44 ( 0.00%)                      ty::ConstKind::Unevaluated(uv) => Some(uv),
      .                               _ => None,
      .                           },
      .                           _ => None,
      .                       };
     88 ( 0.00%)              if let Some(uv) = maybe_uneval {
     44 ( 0.00%)                  if uv.promoted.is_none() {
      .                               let tcx = self.tcx();
    308 ( 0.00%)                      let def_id = uv.def.def_id_for_type_of();
    176 ( 0.00%)                      if tcx.def_kind(def_id) == DefKind::InlineConst {
      .                                   let predicates = self.prove_closure_bounds(
      .                                       tcx,
      .                                       def_id.expect_local(),
      .                                       uv.substs,
      .                                       location,
      .                                   );
      .                                   self.normalize_and_prove_instantiated_predicates(
      .                                       def_id,
      .                                       predicates,
      .                                       location.to_locations(),
      .                                   );
      .                               }
      .                           }
      .                       }
      .                   }
 45,472 ( 0.01%)      }
      .           
 35,438 ( 0.01%)      fn check_rvalue(&mut self, body: &Body<'tcx>, rvalue: &Rvalue<'tcx>, location: Location) {
      .                   let tcx = self.tcx();
      .           
 14,750 ( 0.00%)          match rvalue {
      .                       Rvalue::Aggregate(ak, ops) => {
      .                           for op in ops {
 10,125 ( 0.00%)                      self.check_operand(op, location);
      .                           }
  1,362 ( 0.00%)                  self.check_aggregate_rvalue(&body, rvalue, ak, ops, location)
      .                       }
      .           
      3 ( 0.00%)              Rvalue::Repeat(operand, len) => {
      4 ( 0.00%)                  self.check_operand(operand, location);
      .           
      .                           // If the length cannot be evaluated we must assume that the length can be larger
      .                           // than 1.
      .                           // If the length is larger than 1, the repeat expression will need to copy the
      .                           // element, so we require the `Copy` trait.
      5 ( 0.00%)                  if len.try_eval_usize(tcx, self.param_env).map_or(true, |len| len > 1) {
      2 ( 0.00%)                      match operand {
      .                                   Operand::Copy(..) | Operand::Constant(..) => {
      .                                       // These are always okay: direct use of a const, or a value that can evidently be copied.
      .                                   }
      .                                   Operand::Move(place) => {
      .                                       // Make sure that repeated elements implement `Copy`.
      5 ( 0.00%)                              let span = body.source_info(location).span;
      .                                       let ty = operand.ty(body, tcx);
      7 ( 0.00%)                              if !self.infcx.type_is_copy_modulo_regions(self.param_env, ty, span) {
      .                                           let ccx = ConstCx::new_with_param_env(tcx, body, self.param_env);
      .                                           let is_const_fn =
      .                                               is_const_fn_in_array_repeat_expression(&ccx, &place, &body);
      .           
      .                                           debug!("check_rvalue: is_const_fn={:?}", is_const_fn);
      .           
      .                                           let def_id = body.source.def_id().expect_local();
      .                                           let obligation = traits::Obligation::new(
-- line 2022 ----------------------------------------
-- line 2071 ----------------------------------------
      .           
      .                           self.prove_trait_ref(
      .                               trait_ref,
      .                               location.to_locations(),
      .                               ConstraintCategory::SizedBound,
      .                           );
      .                       }
      .           
    668 ( 0.00%)              Rvalue::Cast(cast_kind, op, ty) => {
    668 ( 0.00%)                  self.check_operand(op, location);
      .           
    761 ( 0.00%)                  match cast_kind {
      .                               CastKind::Pointer(PointerCast::ReifyFnPointer) => {
      .                                   let fn_sig = op.ty(body, tcx).fn_sig(tcx);
      .           
      .                                   // The type that we see in the fcx is like
      .                                   // `foo::<'a, 'b>`, where `foo` is the path to a
      .                                   // function definition. When we extract the
      .                                   // signature, it comes from the `fn_sig` query,
      .                                   // and hence may contain unnormalized results.
-- line 2090 ----------------------------------------
-- line 2158 ----------------------------------------
      .                                           ty_fn_ptr_from,
      .                                           ty,
      .                                           terr
      .                                       );
      .                                   }
      .                               }
      .           
      .                               CastKind::Pointer(PointerCast::Unsize) => {
     72 ( 0.00%)                          let &ty = ty;
      .                                   let trait_ref = ty::TraitRef {
    264 ( 0.00%)                              def_id: tcx
     24 ( 0.00%)                                  .require_lang_item(LangItem::CoerceUnsized, Some(self.last_span)),
    288 ( 0.00%)                              substs: tcx.mk_substs_trait(op.ty(body, tcx), &[ty.into()]),
      .                                   };
      .           
    216 ( 0.00%)                          self.prove_trait_ref(
      .                                       trait_ref,
      .                                       location.to_locations(),
      .                                       ConstraintCategory::Cast,
      .                                   );
      .                               }
      .           
      .                               CastKind::Pointer(PointerCast::MutToConstPointer) => {
     18 ( 0.00%)                          let ty_from = match op.ty(body, tcx).kind() {
      .                                       ty::RawPtr(ty::TypeAndMut {
      .                                           ty: ty_from,
      .                                           mutbl: hir::Mutability::Mut,
      2 ( 0.00%)                              }) => ty_from,
      .                                       _ => {
      .                                           span_mirbug!(
      .                                               self,
      .                                               rvalue,
      .                                               "unexpected base type for cast {:?}",
      .                                               ty,
      .                                           );
      .                                           return;
      .                                       }
      .                                   };
     12 ( 0.00%)                          let ty_to = match ty.kind() {
      .                                       ty::RawPtr(ty::TypeAndMut {
      .                                           ty: ty_to,
      .                                           mutbl: hir::Mutability::Not,
      2 ( 0.00%)                              }) => ty_to,
      .                                       _ => {
      .                                           span_mirbug!(
      .                                               self,
      .                                               rvalue,
      .                                               "unexpected target type for cast {:?}",
      .                                               ty,
      .                                           );
      .                                           return;
      .                                       }
      .                                   };
      4 ( 0.00%)                          if let Err(terr) = self.sub_types(
      2 ( 0.00%)                              ty_from,
      2 ( 0.00%)                              ty_to,
      .                                       location.to_locations(),
      .                                       ConstraintCategory::Cast,
      .                                   ) {
      .                                       span_mirbug!(
      .                                           self,
      .                                           rvalue,
      .                                           "relating {:?} with {:?} yields {:?}",
      .                                           ty_from,
-- line 2221 ----------------------------------------
-- line 2290 ----------------------------------------
      .                                           ty_elem,
      .                                           ty_to,
      .                                           terr
      .                                       )
      .                                   }
      .                               }
      .           
      .                               CastKind::Misc => {
    141 ( 0.00%)                          let ty_from = op.ty(body, tcx);
    564 ( 0.00%)                          let cast_ty_from = CastTy::from_ty(ty_from);
    423 ( 0.00%)                          let cast_ty_to = CastTy::from_ty(ty);
  1,833 ( 0.00%)                          match (cast_ty_from, cast_ty_to) {
      .                                       (None, _)
      .                                       | (_, None | Some(CastTy::FnPtr))
      .                                       | (Some(CastTy::Float), Some(CastTy::Ptr(_)))
      .                                       | (Some(CastTy::Ptr(_) | CastTy::FnPtr), Some(CastTy::Float)) => {
      .                                           span_mirbug!(self, rvalue, "Invalid cast {:?} -> {:?}", ty_from, ty,)
      .                                       }
      .                                       (
      .                                           Some(CastTy::Int(_)),
-- line 2309 ----------------------------------------
-- line 2312 ----------------------------------------
      .                                       | (Some(CastTy::Float), Some(CastTy::Int(_) | CastTy::Float))
      .                                       | (Some(CastTy::Ptr(_)), Some(CastTy::Int(_) | CastTy::Ptr(_)))
      .                                       | (Some(CastTy::FnPtr), Some(CastTy::Int(_) | CastTy::Ptr(_))) => (),
      .                                   }
      .                               }
      .                           }
      .                       }
      .           
     46 ( 0.00%)              Rvalue::Ref(region, _borrow_kind, borrowed_place) => {
    276 ( 0.00%)                  self.add_reborrow_constraint(&body, location, region, borrowed_place);
      .                       }
      .           
      .                       Rvalue::BinaryOp(
      .                           BinOp::Eq | BinOp::Ne | BinOp::Lt | BinOp::Le | BinOp::Gt | BinOp::Ge,
    615 ( 0.00%)                  box (left, right),
      .                       ) => {
  1,025 ( 0.00%)                  self.check_operand(left, location);
  1,025 ( 0.00%)                  self.check_operand(right, location);
      .           
    205 ( 0.00%)                  let ty_left = left.ty(body, tcx);
    615 ( 0.00%)                  match ty_left.kind() {
      .                               // Types with regions are comparable if they have a common super-type.
      .                               ty::RawPtr(_) | ty::FnPtr(_) => {
      .                                   let ty_right = right.ty(body, tcx);
      .                                   let common_ty = self.infcx.next_ty_var(TypeVariableOrigin {
      .                                       kind: TypeVariableOriginKind::MiscVariable,
      .                                       span: body.source_info(location).span,
      .                                   });
      .                                   self.sub_types(
-- line 2340 ----------------------------------------
-- line 2360 ----------------------------------------
      .                                           ty_right,
      .                                           terr
      .                                       )
      .                                   }
      .                               }
      .                               // For types with no regions we can just check that the
      .                               // both operands have the same type.
      .                               ty::Int(_) | ty::Uint(_) | ty::Bool | ty::Char | ty::Float(_)
  1,025 ( 0.00%)                          if ty_left == right.ty(body, tcx) => {}
      .                               // Other types are compared by trait methods, not by
      .                               // `Rvalue::BinaryOp`.
      .                               _ => span_mirbug!(
      .                                   self,
      .                                   rvalue,
      .                                   "unexpected comparison types {:?} and {:?}",
      .                                   ty_left,
      .                                   right.ty(body, tcx)
      .                               ),
      .                           }
      .                       }
      .           
      .                       Rvalue::Use(operand) | Rvalue::UnaryOp(_, operand) => {
  2,624 ( 0.00%)                  self.check_operand(operand, location);
      .                       }
      .           
      .                       Rvalue::BinaryOp(_, box (left, right))
      .                       | Rvalue::CheckedBinaryOp(_, box (left, right)) => {
  1,240 ( 0.00%)                  self.check_operand(left, location);
    620 ( 0.00%)                  self.check_operand(right, location);
      .                       }
      .           
      .                       Rvalue::AddressOf(..)
      .                       | Rvalue::ThreadLocalRef(..)
      .                       | Rvalue::Len(..)
      .                       | Rvalue::Discriminant(..) => {}
      .                   }
  8,832 ( 0.00%)      }
      .           
      .               /// If this rvalue supports a user-given type annotation, then
      .               /// extract and return it. This represents the final type of the
      .               /// rvalue and will be unified with the inferred type.
      .               fn rvalue_user_ty(&self, rvalue: &Rvalue<'tcx>) -> Option<UserTypeAnnotationIndex> {
 10,904 ( 0.00%)          match rvalue {
      .                       Rvalue::Use(_)
      .                       | Rvalue::ThreadLocalRef(_)
      .                       | Rvalue::Repeat(..)
      .                       | Rvalue::Ref(..)
      .                       | Rvalue::AddressOf(..)
      .                       | Rvalue::Len(..)
      .                       | Rvalue::Cast(..)
      .                       | Rvalue::ShallowInitBox(..)
      .                       | Rvalue::BinaryOp(..)
      .                       | Rvalue::CheckedBinaryOp(..)
      .                       | Rvalue::NullaryOp(..)
      .                       | Rvalue::UnaryOp(..)
      .                       | Rvalue::Discriminant(..) => None,
      .           
  2,043 ( 0.00%)              Rvalue::Aggregate(aggregate, _) => match **aggregate {
     21 ( 0.00%)                  AggregateKind::Adt(_, _, _, user_ty, _) => user_ty,
      .                           AggregateKind::Array(_) => None,
      .                           AggregateKind::Tuple => None,
      .                           AggregateKind::Closure(_, _) => None,
      .                           AggregateKind::Generator(_, _, _) => None,
      .                       },
      .                   }
      .               }
      .           
-- line 2426 ----------------------------------------
-- line 2431 ----------------------------------------
      .                   aggregate_kind: &AggregateKind<'tcx>,
      .                   operands: &[Operand<'tcx>],
      .                   location: Location,
      .               ) {
      .                   let tcx = self.tcx();
      .           
      .                   self.prove_aggregate_predicates(aggregate_kind, location);
      .           
    681 ( 0.00%)          if *aggregate_kind == AggregateKind::Tuple {
      .                       // tuple rvalue field type is always the type of the op. Nothing to check here.
      .                       return;
      .                   }
      .           
    681 ( 0.00%)          for (i, operand) in operands.iter().enumerate() {
      .                       let field_ty = match self.aggregate_field_ty(aggregate_kind, i, location) {
  1,362 ( 0.00%)                  Ok(field_ty) => field_ty,
      .                           Err(FieldAccessError::OutOfRange { field_count }) => {
      .                               span_mirbug!(
      .                                   self,
      .                                   rvalue,
      .                                   "accessed field #{} but variant only has {}",
      .                                   i,
      .                                   field_count
      .                               );
      .                               continue;
      .                           }
      .                       };
      .                       let operand_ty = operand.ty(body, tcx);
  4,086 ( 0.00%)              let operand_ty = self.normalize(operand_ty, location);
      .           
  1,362 ( 0.00%)              if let Err(terr) = self.sub_types(
      .                           operand_ty,
    681 ( 0.00%)                  field_ty,
      .                           location.to_locations(),
      .                           ConstraintCategory::Boring,
      .                       ) {
      .                           span_mirbug!(
      .                               self,
      .                               rvalue,
      .                               "{:?} is not a subtype of {:?}: {:?}",
      .                               operand_ty,
-- line 2471 ----------------------------------------
-- line 2486 ----------------------------------------
      .               fn add_reborrow_constraint(
      .                   &mut self,
      .                   body: &Body<'tcx>,
      .                   location: Location,
      .                   borrow_region: ty::Region<'tcx>,
      .                   borrowed_place: &Place<'tcx>,
      .               ) {
      .                   // These constraints are only meaningful during borrowck:
     46 ( 0.00%)          let BorrowCheckContext { borrow_set, location_table, all_facts, constraints, .. } =
      .                       self.borrowck_context;
      .           
      .                   // In Polonius mode, we also push a `loan_issued_at` fact
      .                   // linking the loan to the region (in some cases, though,
      .                   // there is no loan associated with this borrow expression --
      .                   // that occurs when we are borrowing an unsafe place, for
      .                   // example).
    276 ( 0.00%)          if let Some(all_facts) = all_facts {
      .                       let _prof_timer = self.infcx.tcx.prof.generic_activity("polonius_fact_generation");
      .                       if let Some(borrow_index) = borrow_set.get_index_of(&location) {
      .                           let region_vid = borrow_region.to_region_vid();
      .                           all_facts.loan_issued_at.push((
      .                               region_vid,
      .                               borrow_index,
      .                               location_table.mid_index(location),
      .                           ));
-- line 2510 ----------------------------------------
-- line 2516 ----------------------------------------
      .                   // *p`, where the `p` has type `&'b mut Foo`, for example, we
      .                   // need to ensure that `'b: 'a`.
      .           
      .                   debug!(
      .                       "add_reborrow_constraint({:?}, {:?}, {:?})",
      .                       location, borrow_region, borrowed_place
      .                   );
      .           
     46 ( 0.00%)          let mut cursor = borrowed_place.projection.as_ref();
     46 ( 0.00%)          let tcx = self.infcx.tcx;
     92 ( 0.00%)          let field = path_utils::is_upvar_field_projection(
      .                       tcx,
     92 ( 0.00%)              &self.borrowck_context.upvars,
      .                       borrowed_place.as_ref(),
      .                       body,
      .                   );
     92 ( 0.00%)          let category = if let Some(field) = field {
      .                       let var_hir_id = self.borrowck_context.upvars[field.index()].place.get_root_variable();
      .                       // FIXME(project-rfc-2229#8): Use Place for better diagnostics
      .                       ConstraintCategory::ClosureUpvar(var_hir_id)
      .                   } else {
      .                       ConstraintCategory::Boring
      .                   };
      .           
    253 ( 0.00%)          while let [proj_base @ .., elem] = cursor {
      .                       cursor = proj_base;
      .           
      .                       debug!("add_reborrow_constraint - iteration {:?}", elem);
      .           
    272 ( 0.00%)              match elem {
      .                           ProjectionElem::Deref => {
     76 ( 0.00%)                      let base_ty = Place::ty_from(borrowed_place.local, proj_base, body, tcx).ty;
      .           
      .                               debug!("add_reborrow_constraint - base_ty = {:?}", base_ty);
    190 ( 0.00%)                      match base_ty.kind() {
      .                                   ty::Ref(ref_region, _, mutbl) => {
     38 ( 0.00%)                              constraints.outlives_constraints.push(OutlivesConstraint {
     76 ( 0.00%)                                  sup: ref_region.to_region_vid(),
      .                                           sub: borrow_region.to_region_vid(),
      .                                           locations: location.to_locations(),
      .                                           category,
      .                                           variance_info: ty::VarianceDiagInfo::default(),
      .                                       });
      .           
    106 ( 0.00%)                              match mutbl {
      .                                           hir::Mutability::Not => {
      .                                               // Immutable reference. We don't need the base
      .                                               // to be valid for the entire lifetime of
      .                                               // the borrow.
      .                                               break;
      .                                           }
      .                                           hir::Mutability::Mut => {
      .                                               // Mutable reference. We *do* need the base
-- line 2568 ----------------------------------------
-- line 2617 ----------------------------------------
      .               ) {
      .                   let tcx = self.tcx();
      .           
      .                   debug!(
      .                       "prove_aggregate_predicates(aggregate_kind={:?}, location={:?})",
      .                       aggregate_kind, location
      .                   );
      .           
  7,512 ( 0.00%)          let (def_id, instantiated_predicates) = match aggregate_kind {
      .                       AggregateKind::Adt(adt_did, _, substs, _, _) => {
     56 ( 0.00%)                  (*adt_did, tcx.predicates_of(*adt_did).instantiate(tcx, substs))
      .                       }
      .           
      .                       // For closures, we have some **extra requirements** we
      .                       //
      .                       // have to check. In particular, in their upvars and
      .                       // signatures, closures often reference various regions
      .                       // from the surrounding function -- we call those the
      .                       // closure's free regions. When we borrow-check (and hence
-- line 2635 ----------------------------------------
-- line 2648 ----------------------------------------
      .                       // these extra requirements are basically like where
      .                       // clauses on the struct.
      .                       AggregateKind::Closure(def_id, substs)
      .                       | AggregateKind::Generator(def_id, substs, _) => {
      .                           (*def_id, self.prove_closure_bounds(tcx, def_id.expect_local(), substs, location))
      .                       }
      .           
      .                       AggregateKind::Array(_) | AggregateKind::Tuple => {
  1,348 ( 0.00%)                  (CRATE_DEF_ID.to_def_id(), ty::InstantiatedPredicates::empty())
      .                       }
      .                   };
      .           
    681 ( 0.00%)          self.normalize_and_prove_instantiated_predicates(
      .                       def_id,
  2,043 ( 0.00%)              instantiated_predicates,
      .                       location.to_locations(),
      .                   );
      .               }
      .           
      .               fn prove_closure_bounds(
      .                   &mut self,
      .                   tcx: TyCtxt<'tcx>,
      .                   def_id: LocalDefId,
-- line 2670 ----------------------------------------
-- line 2728 ----------------------------------------
      .                           ConstraintCategory::ClosureBounds,
      .                           &closure_constraints,
      .                       );
      .                   }
      .           
      .                   tcx.predicates_of(def_id).instantiate(tcx, substs)
      .               }
      .           
  1,035 ( 0.00%)      #[instrument(skip(self, body), level = "debug")]
      .               fn typeck_mir(&mut self, body: &Body<'tcx>) {
    276 ( 0.00%)          self.last_span = body.span;
      .                   debug!(?body.span);
      .           
      .                   for (local, local_decl) in body.local_decls.iter_enumerated() {
      .                       self.check_local(&body, local, local_decl);
      .                   }
      .           
      .                   for (block, block_data) in body.basic_blocks().iter_enumerated() {
      .                       let mut location = Location { block, statement_index: 0 };
      .                       for stmt in &block_data.statements {
 30,360 ( 0.01%)                  if !stmt.source_info.span.is_dummy() {
 30,360 ( 0.01%)                      self.last_span = stmt.source_info.span;
      .                           }
      .                           self.check_stmt(body, stmt, location);
  2,102 ( 0.00%)                  location.statement_index += 1;
      .                       }
      .           
      .                       self.check_terminator(&body, block_data.terminator(), location);
      .                       self.check_iscleanup(&body, block_data);
      .                   }
      .               }
      .           }
      .           
-- line 2760 ----------------------------------------
-- line 2765 ----------------------------------------
      .           impl NormalizeLocation for Locations {
      .               fn to_locations(self) -> Locations {
      .                   self
      .               }
      .           }
      .           
      .           impl NormalizeLocation for Location {
      .               fn to_locations(self) -> Locations {
 29,331 ( 0.01%)          Locations::Single(self)
      .               }
      .           }
      .           
      .           #[derive(Debug, Default)]
      .           struct ObligationAccumulator<'tcx> {
      .               obligations: PredicateObligations<'tcx>,
      .           }
      .           
-- line 2781 ----------------------------------------

 64,045 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_borrowck/src/type_check/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs
--------------------------------------------------------------------------------
Ir                 

-- line 70 ----------------------------------------
        .           
        .                   impl<'a, T> $name<'a, T> {
        .                       // Helper function for creating a slice from the iterator.
        .                       #[inline(always)]
        .                       fn make_slice(&self) -> &'a [T] {
        .                           // SAFETY: the iterator was created from a slice with pointer
        .                           // `self.ptr` and length `len!(self)`. This guarantees that all
        .                           // the prerequisites for `from_raw_parts` are fulfilled.
   21,985 ( 0.01%)                  unsafe { from_raw_parts(self.ptr.as_ptr(), len!(self)) }
        .                       }
        .           
        .                       // Helper function for moving the start of the iterator forwards by `offset` elements,
        .                       // returning the old start.
        .                       // Unsafe because the offset must not exceed `self.len()`.
        .                       #[inline(always)]
        .                       unsafe fn post_inc_start(&mut self, offset: isize) -> * $raw_mut T {
        .                           if mem::size_of::<T>() == 0 {
        .                               zst_shrink!(self, offset);
        .                               self.ptr.as_ptr()
        .                           } else {
        .                               let old = self.ptr.as_ptr();
        .                               // SAFETY: the caller guarantees that `offset` doesn't exceed `self.len()`,
        .                               // so this new pointer is inside `self` and thus guaranteed to be non-null.
  136,957 ( 0.04%)                      self.ptr = unsafe { NonNull::new_unchecked(self.ptr.as_ptr().offset(offset)) };
        .                               old
        .                           }
        .                       }
        .           
        .                       // Helper function for moving the end of the iterator backwards by `offset` elements,
        .                       // returning the new end.
        .                       // Unsafe because the offset must not exceed `self.len()`.
        .                       #[inline(always)]
-- line 101 ----------------------------------------
-- line 102 ----------------------------------------
        .                       unsafe fn pre_dec_end(&mut self, offset: isize) -> * $raw_mut T {
        .                           if mem::size_of::<T>() == 0 {
        .                               zst_shrink!(self, offset);
        .                               self.ptr.as_ptr()
        .                           } else {
        .                               // SAFETY: the caller guarantees that `offset` doesn't exceed `self.len()`,
        .                               // which is guaranteed to not overflow an `isize`. Also, the resulting pointer
        .                               // is in bounds of `slice`, which fulfills the other requirements for `offset`.
        3 ( 0.00%)                      self.end = unsafe { self.end.offset(-offset) };
        .                               self.end
        .                           }
        .                       }
        .                   }
        .           
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   impl<T> ExactSizeIterator for $name<'_, T> {
        .                       #[inline(always)]
        .                       fn len(&self) -> usize {
   14,298 ( 0.00%)                  len!(self)
        .                       }
        .           
        .                       #[inline(always)]
        .                       fn is_empty(&self) -> bool {
        .                           is_empty!(self)
        .                       }
        .                   }
        .           
-- line 128 ----------------------------------------
-- line 134 ----------------------------------------
        .                       fn next(&mut self) -> Option<$elem> {
        .                           // could be implemented with slices, but this avoids bounds checks
        .           
        .                           // SAFETY: `assume` calls are safe since a slice's start pointer
        .                           // must be non-null, and slices over non-ZSTs must also have a
        .                           // non-null end pointer. The call to `next_unchecked!` is safe
        .                           // since we check if the iterator is empty first.
        .                           unsafe {
   27,138 ( 0.01%)                      assume(!self.ptr.as_ptr().is_null());
        .                               if mem::size_of::<T>() != 0 {
   18,315 ( 0.00%)                          assume(!self.end.is_null());
        .                               }
7,189,865 ( 1.86%)                      if is_empty!(self) {
        .                                   None
        .                               } else {
        4 ( 0.00%)                          Some(next_unchecked!(self))
        .                               }
        .                           }
        .                       }
        .           
        .                       #[inline]
        .                       fn size_hint(&self) -> (usize, Option<usize>) {
  198,821 ( 0.05%)                  let exact = len!(self);
        .                           (exact, Some(exact))
        .                       }
        .           
        .                       #[inline]
        .                       fn count(self) -> usize {
        .                           len!(self)
        .                       }
        .           
        .                       #[inline]
        .                       fn nth(&mut self, n: usize) -> Option<$elem> {
    1,377 ( 0.00%)                  if n >= len!(self) {
        .                               // This iterator is now empty.
        .                               if mem::size_of::<T>() == 0 {
        .                                   // We have to do it this way as `ptr` may never be 0, but `end`
        .                                   // could be (due to wrapping).
        .                                   self.end = self.ptr.as_ptr();
        .                               } else {
        .                                   // SAFETY: end can't be 0 if T isn't ZST because ptr isn't 0 and end >= ptr
        .                                   unsafe {
-- line 175 ----------------------------------------
-- line 203 ----------------------------------------
        .                       // faster to compile.
        .                       #[inline]
        .                       fn for_each<F>(mut self, mut f: F)
        .                       where
        .                           Self: Sized,
        .                           F: FnMut(Self::Item),
        .                       {
        .                           while let Some(x) = self.next() {
      298 ( 0.00%)                      f(x);
        .                           }
        .                       }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile.
        .                       #[inline]
        .                       fn all<F>(&mut self, mut f: F) -> bool
        .                       where
        .                           Self: Sized,
        .                           F: FnMut(Self::Item) -> bool,
        .                       {
        .                           while let Some(x) = self.next() {
    1,606 ( 0.00%)                      if !f(x) {
        .                                   return false;
        .                               }
        .                           }
        .                           true
        .                       }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile.
        .                       #[inline]
        .                       fn any<F>(&mut self, mut f: F) -> bool
        .                       where
        .                           Self: Sized,
        .                           F: FnMut(Self::Item) -> bool,
        .                       {
  123,807 ( 0.03%)                  while let Some(x) = self.next() {
   87,260 ( 0.02%)                      if f(x) {
        .                                   return true;
        .                               }
        .                           }
        .                           false
        .                       }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile.
        .                       #[inline]
        .                       fn find<P>(&mut self, mut predicate: P) -> Option<Self::Item>
        .                       where
        .                           Self: Sized,
        .                           P: FnMut(&Self::Item) -> bool,
        .                       {
    4,286 ( 0.00%)                  while let Some(x) = self.next() {
    6,077 ( 0.00%)                      if predicate(&x) {
        .                                   return Some(x);
        .                               }
        .                           }
        .                           None
       48 ( 0.00%)              }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile.
        .                       #[inline]
        .                       fn find_map<B, F>(&mut self, mut f: F) -> Option<B>
        .                       where
        .                           Self: Sized,
        .                           F: FnMut(Self::Item) -> Option<B>,
        .                       {
    3,964 ( 0.00%)                  while let Some(x) = self.next() {
   22,758 ( 0.01%)                      if let Some(y) = f(x) {
      465 ( 0.00%)                          return Some(y);
        .                               }
        .                           }
        .                           None
      645 ( 0.00%)              }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile. Also, the `assume` avoids a bounds check.
        .                       #[inline]
        .                       #[rustc_inherit_overflow_checks]
        .                       fn position<P>(&mut self, mut predicate: P) -> Option<usize> where
        .                           Self: Sized,
        .                           P: FnMut(Self::Item) -> bool,
        .                       {
        .                           let n = len!(self);
        .                           let mut i = 0;
        .                           while let Some(x) = self.next() {
  149,949 ( 0.04%)                      if predicate(x) {
        .                                   // SAFETY: we are guaranteed to be in bounds by the loop invariant:
        .                                   // when `i >= n`, `self.next()` returns `None` and the loop breaks.
        .                                   unsafe { assume(i < n) };
        .                                   return Some(i);
        .                               }
        .                               i += 1;
        .                           }
        .                           None
-- line 303 ----------------------------------------
-- line 308 ----------------------------------------
        .                       // faster to compile. Also, the `assume` avoids a bounds check.
        .                       #[inline]
        .                       fn rposition<P>(&mut self, mut predicate: P) -> Option<usize> where
        .                           P: FnMut(Self::Item) -> bool,
        .                           Self: Sized + ExactSizeIterator + DoubleEndedIterator
        .                       {
        .                           let n = len!(self);
        .                           let mut i = n;
    2,361 ( 0.00%)                  while let Some(x) = self.next_back() {
   29,315 ( 0.01%)                      i -= 1;
   23,731 ( 0.01%)                      if predicate(x) {
        .                                   // SAFETY: `i` must be lower than `n` since it starts at `n`
        .                                   // and is only decreasing.
        .                                   unsafe { assume(i < n) };
        .                                   return Some(i);
        .                               }
        .                           }
        .                           None
        .                       }
-- line 326 ----------------------------------------
-- line 332 ----------------------------------------
        .                           // the returned references is guaranteed to refer to an element
        .                           // of the slice and thus guaranteed to be valid.
        .                           //
        .                           // Also note that the caller also guarantees that we're never
        .                           // called with the same index again, and that no other methods
        .                           // that will access this subslice are called, so it is valid
        .                           // for the returned reference to be mutable in the case of
        .                           // `IterMut`
    9,362 ( 0.00%)                  unsafe { & $( $mut_ )? * self.ptr.as_ptr().add(idx) }
        .                       }
        .           
        .                       $($extra)*
        .                   }
        .           
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   impl<'a, T> DoubleEndedIterator for $name<'a, T> {
        .                       #[inline]
-- line 348 ----------------------------------------
-- line 351 ----------------------------------------
        .           
        .                           // SAFETY: `assume` calls are safe since a slice's start pointer must be non-null,
        .                           // and slices over non-ZSTs must also have a non-null end pointer.
        .                           // The call to `next_back_unchecked!` is safe since we check if the iterator is
        .                           // empty first.
        .                           unsafe {
        .                               assume(!self.ptr.as_ptr().is_null());
        .                               if mem::size_of::<T>() != 0 {
        4 ( 0.00%)                          assume(!self.end.is_null());
        .                               }
  156,716 ( 0.04%)                      if is_empty!(self) {
        .                                   None
        .                               } else {
        .                                   Some(next_back_unchecked!(self))
        .                               }
        .                           }
        .                       }
        .           
        .                       #[inline]
-- line 369 ----------------------------------------

1,364,161 ( 0.35%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 26 ----------------------------------------
      .           pub struct UnmatchedBrace {
      .               pub expected_delim: token::DelimToken,
      .               pub found_delim: Option<token::DelimToken>,
      .               pub found_span: Span,
      .               pub unclosed_span: Option<Span>,
      .               pub candidate_span: Option<Span>,
      .           }
      .           
    168 ( 0.00%)  crate fn parse_token_trees<'a>(
      .               sess: &'a ParseSess,
      .               src: &'a str,
      .               start_pos: BytePos,
      .               override_span: Option<Span>,
      .           ) -> (PResult<'a, TokenStream>, Vec<UnmatchedBrace>) {
      .               StringReader { sess, start_pos, pos: start_pos, end_src_index: src.len(), src, override_span }
      .                   .into_token_trees()
    108 ( 0.00%)  }
      .           
      .           struct StringReader<'a> {
      .               sess: &'a ParseSess,
      .               /// Initial position, read-only.
      .               start_pos: BytePos,
      .               /// The absolute offset within the source_map of the current character.
      .               pos: BytePos,
      .               /// Stop reading src at this index.
-- line 50 ----------------------------------------
-- line 51 ----------------------------------------
      .               end_src_index: usize,
      .               /// Source text to tokenize.
      .               src: &'a str,
      .               override_span: Option<Span>,
      .           }
      .           
      .           impl<'a> StringReader<'a> {
      .               fn mk_sp(&self, lo: BytePos, hi: BytePos) -> Span {
 13,885 ( 0.00%)          self.override_span.unwrap_or_else(|| Span::with_root_ctxt(lo, hi))
      .               }
      .           
      .               /// Returns the next token, and info about preceding whitespace, if any.
 78,260 ( 0.02%)      fn next_token(&mut self) -> (Spacing, Token) {
      .                   let mut spacing = Spacing::Joint;
      .           
      .                   // Skip `#!` at the start of the file
 22,360 ( 0.01%)          let start_src_index = self.src_index(self.pos);
 33,540 ( 0.01%)          let text: &str = &self.src[start_src_index..self.end_src_index];
      .                   let is_beginning_of_file = self.pos == self.start_pos;
 11,180 ( 0.00%)          if is_beginning_of_file {
     48 ( 0.00%)              if let Some(shebang_len) = rustc_lexer::strip_shebang(text) {
      .                           self.pos = self.pos + BytePos::from_usize(shebang_len);
      .                           spacing = Spacing::Alone;
      .                       }
      .                   }
      .           
      .                   // Skip trivial (whitespace & comments) tokens
      .                   loop {
 22,954 ( 0.01%)              let start_src_index = self.src_index(self.pos);
 51,201 ( 0.01%)              let text: &str = &self.src[start_src_index..self.end_src_index];
      .           
 17,067 ( 0.00%)              if text.is_empty() {
      .                           let span = self.mk_sp(self.pos, self.pos);
     60 ( 0.00%)                  return (spacing, Token::new(token::Eof, span));
      .                       }
      .           
 51,165 ( 0.01%)              let token = rustc_lexer::first_token(text);
      .           
 34,110 ( 0.01%)              let start = self.pos;
 17,055 ( 0.00%)              self.pos = self.pos + BytePos::from_usize(token.len);
      .           
      .                       debug!("next_token: {:?}({:?})", token.kind, self.str_from(start));
      .           
137,232 ( 0.04%)              match self.cook_lexer_token(token.kind, start) {
 89,344 ( 0.02%)                  Some(kind) => {
      .                               let span = self.mk_sp(start, self.pos);
 67,008 ( 0.02%)                      return (spacing, Token::new(kind, span));
      .                           }
      .                           None => spacing = Spacing::Alone,
      .                       }
      .                   }
100,620 ( 0.03%)      }
      .           
      .               /// Report a fatal lexical error with a given span.
      .               fn fatal_span(&self, sp: Span, m: &str) -> FatalError {
      .                   self.sess.span_diagnostic.span_fatal(sp, m)
      .               }
      .           
      .               /// Report a lexical error with a given span.
      .               fn err_span(&self, sp: Span, m: &str) {
-- line 110 ----------------------------------------
-- line 130 ----------------------------------------
      .               ) -> DiagnosticBuilder<'a> {
      .                   self.sess
      .                       .span_diagnostic
      .                       .struct_span_fatal(self.mk_sp(from_pos, to_pos), &format!("{}: {}", m, escaped_char(c)))
      .               }
      .           
      .               /// Detect usages of Unicode codepoints changing the direction of the text on screen and loudly
      .               /// complain about it.
  1,785 ( 0.00%)      fn lint_unicode_text_flow(&self, start: BytePos) {
      .                   // Opening delimiter of the length 2 is not included into the comment text.
      .                   let content_start = start + BytePos(2);
      .                   let content = self.str_from(content_start);
      .                   if contains_text_flow_control_chars(content) {
      .                       let span = self.mk_sp(start, self.pos);
      .                       self.sess.buffer_lint_with_diagnostic(
      .                           &TEXT_DIRECTION_CODEPOINT_IN_COMMENT,
      .                           span,
      .                           ast::CRATE_NODE_ID,
      .                           "unicode codepoint changing visible direction of text present in comment",
      .                           BuiltinLintDiagnostics::UnicodeTextFlow(span, content.to_string()),
      .                       );
      .                   }
  2,040 ( 0.00%)      }
      .           
      .               /// Turns simple `rustc_lexer::TokenKind` enum into a rich
      .               /// `rustc_ast::TokenKind`. This turns strings into interned
      .               /// symbols and runs additional validation.
      .               fn cook_lexer_token(&self, token: rustc_lexer::TokenKind, start: BytePos) -> Option<TokenKind> {
 85,275 ( 0.02%)          Some(match token {
    448 ( 0.00%)              rustc_lexer::TokenKind::LineComment { doc_style } => {
      .                           // Skip non-doc comments
  1,490 ( 0.00%)                  let doc_style = if let Some(doc_style) = doc_style {
      .                               doc_style
      .                           } else {
      .                               self.lint_unicode_text_flow(start);
      .                               return None;
      .                           };
      .           
      .                           // Opening delimiter of the length 3 is not included into the symbol.
      .                           let content_start = start + BytePos(3);
      .                           let content = self.str_from(content_start);
    990 ( 0.00%)                  self.cook_doc_comment(content_start, content, CommentKind::Line, doc_style)
      .                       }
     10 ( 0.00%)              rustc_lexer::TokenKind::BlockComment { doc_style, terminated } => {
      5 ( 0.00%)                  if !terminated {
      .                               let msg = match doc_style {
      .                                   Some(_) => "unterminated block doc-comment",
      .                                   None => "unterminated block comment",
      .                               };
      .                               let last_bpos = self.pos;
      .                               self.sess.span_diagnostic.span_fatal_with_code(
      .                                   self.mk_sp(start, last_bpos),
      .                                   msg,
      .                                   error_code!(E0758),
      .                               );
      .                           }
      .           
      .                           // Skip non-doc comments
      5 ( 0.00%)                  let doc_style = if let Some(doc_style) = doc_style {
      .                               doc_style
      .                           } else {
      .                               self.lint_unicode_text_flow(start);
      .                               return None;
      .                           };
      .           
      .                           // Opening delimiter of the length 3 and closing delimiter of the length 2
      .                           // are not included into the symbol.
-- line 196 ----------------------------------------
-- line 198 ----------------------------------------
      .                           let content_end = self.pos - BytePos(if terminated { 2 } else { 0 });
      .                           let content = self.str_from_to(content_start, content_end);
      .                           self.cook_doc_comment(content_start, content, CommentKind::Block, doc_style)
      .                       }
      .                       rustc_lexer::TokenKind::Whitespace => return None,
      .                       rustc_lexer::TokenKind::Ident
      .                       | rustc_lexer::TokenKind::RawIdent
      .                       | rustc_lexer::TokenKind::UnknownPrefix => {
 10,772 ( 0.00%)                  let is_raw_ident = token == rustc_lexer::TokenKind::RawIdent;
 13,465 ( 0.00%)                  let is_unknown_prefix = token == rustc_lexer::TokenKind::UnknownPrefix;
      .                           let mut ident_start = start;
  5,386 ( 0.00%)                  if is_raw_ident {
      .                               ident_start = ident_start + BytePos(2);
      .                           }
  8,079 ( 0.00%)                  if is_unknown_prefix {
      .                               self.report_unknown_prefix(start);
      .                           }
 13,465 ( 0.00%)                  let sym = nfc_normalize(self.str_from(ident_start));
      .                           let span = self.mk_sp(start, self.pos);
 10,772 ( 0.00%)                  self.sess.symbol_gallery.insert(sym, span);
  5,386 ( 0.00%)                  if is_raw_ident {
      .                               if !sym.can_be_raw() {
      .                                   self.err_span(span, &format!("`{}` cannot be a raw identifier", sym));
      .                               }
      .                               self.sess.raw_identifier_spans.borrow_mut().push(span);
      .                           }
 18,851 ( 0.00%)                  token::Ident(sym, is_raw_ident)
      .                       }
      .                       rustc_lexer::TokenKind::InvalidIdent
      .                           // Do not recover an identifier with emoji if the codepoint is a confusable
      .                           // with a recoverable substitution token, like `➖`.
      .                           if UNICODE_ARRAY
      .                               .iter()
      .                               .find(|&&(c, _, _)| {
      .                                   let sym = self.str_from(start);
-- line 232 ----------------------------------------
-- line 234 ----------------------------------------
      .                               })
      .                               .is_none() =>
      .                       {
      .                           let sym = nfc_normalize(self.str_from(start));
      .                           let span = self.mk_sp(start, self.pos);
      .                           self.sess.bad_unicode_identifiers.borrow_mut().entry(sym).or_default().push(span);
      .                           token::Ident(sym, false)
      .                       }
 29,296 ( 0.01%)              rustc_lexer::TokenKind::Literal { kind, suffix_start } => {
      .                           let suffix_start = start + BytePos(suffix_start as u32);
      .                           let (kind, symbol) = self.cook_lexer_literal(start, suffix_start, kind);
  5,493 ( 0.00%)                  let suffix = if suffix_start < self.pos {
      .                               let string = self.str_from(suffix_start);
      .                               if string == "_" {
      .                                   self.sess
      .                                       .span_diagnostic
      .                                       .struct_span_warn(
      .                                           self.mk_sp(suffix_start, self.pos),
      .                                           "underscore literal suffix is not allowed",
      .                                       )
-- line 253 ----------------------------------------
-- line 259 ----------------------------------------
      .                                       .note(
      .                                           "see issue #42326 \
      .                                            <https://github.com/rust-lang/rust/issues/42326> \
      .                                            for more information",
      .                                       )
      .                                       .emit();
      .                                   None
      .                               } else {
    120 ( 0.00%)                          Some(Symbol::intern(string))
      .                               }
      .                           } else {
      .                               None
      .                           };
 14,648 ( 0.00%)                  token::Literal(token::Lit { kind, symbol, suffix })
      .                       }
      6 ( 0.00%)              rustc_lexer::TokenKind::Lifetime { starts_with_number } => {
      .                           // Include the leading `'` in the real identifier, for macro
      .                           // expansion purposes. See #12512 for the gory details of why
      .                           // this is necessary.
      .                           let lifetime_name = self.str_from(start);
      3 ( 0.00%)                  if starts_with_number {
      .                               self.err_span_(start, self.pos, "lifetimes cannot start with a number");
      .                           }
      9 ( 0.00%)                  let ident = Symbol::intern(lifetime_name);
     12 ( 0.00%)                  token::Lifetime(ident)
      .                       }
      .                       rustc_lexer::TokenKind::Semi => token::Semi,
      .                       rustc_lexer::TokenKind::Comma => token::Comma,
      .                       rustc_lexer::TokenKind::Dot => token::Dot,
      .                       rustc_lexer::TokenKind::OpenParen => token::OpenDelim(token::Paren),
      .                       rustc_lexer::TokenKind::CloseParen => token::CloseDelim(token::Paren),
      .                       rustc_lexer::TokenKind::OpenBrace => token::OpenDelim(token::Brace),
      .                       rustc_lexer::TokenKind::CloseBrace => token::CloseDelim(token::Brace),
-- line 291 ----------------------------------------
-- line 324 ----------------------------------------
      .                               err.help("source files must contain UTF-8 encoded text, unexpected null bytes might occur when a different encoding is used");
      .                           }
      .                           err.emit();
      .                           token?
      .                       }
      .                   })
      .               }
      .           
  2,376 ( 0.00%)      fn cook_doc_comment(
      .                   &self,
      .                   content_start: BytePos,
      .                   content: &str,
      .                   comment_kind: CommentKind,
      .                   doc_style: DocStyle,
      .               ) -> TokenKind {
    198 ( 0.00%)          if content.contains('\r') {
      .                       for (idx, _) in content.char_indices().filter(|&(_, c)| c == '\r') {
      .                           self.err_span_(
      .                               content_start + BytePos(idx as u32),
      .                               content_start + BytePos(idx as u32 + 1),
      .                               match comment_kind {
      .                                   CommentKind::Line => "bare CR not allowed in doc-comment",
      .                                   CommentKind::Block => "bare CR not allowed in block doc-comment",
      .                               },
-- line 347 ----------------------------------------
-- line 349 ----------------------------------------
      .                       }
      .                   }
      .           
      .                   let attr_style = match doc_style {
      .                       DocStyle::Outer => AttrStyle::Outer,
      .                       DocStyle::Inner => AttrStyle::Inner,
      .                   };
      .           
    594 ( 0.00%)          token::DocComment(comment_kind, attr_style, Symbol::intern(content))
  2,970 ( 0.00%)      }
      .           
      .               fn cook_lexer_literal(
      .                   &self,
      .                   start: BytePos,
      .                   suffix_start: BytePos,
      .                   kind: rustc_lexer::LiteralKind,
      .               ) -> (token::LitKind, Symbol) {
      .                   // prefix means `"` or `br"` or `r###"`, ...
-- line 366 ----------------------------------------
-- line 370 ----------------------------------------
      .                               self.sess.span_diagnostic.span_fatal_with_code(
      .                                   self.mk_sp(start, suffix_start),
      .                                   "unterminated character literal",
      .                                   error_code!(E0762),
      .                               )
      .                           }
      .                           (token::Char, Mode::Char, 1, 1) // ' '
      .                       }
     30 ( 0.00%)              rustc_lexer::LiteralKind::Byte { terminated } => {
     30 ( 0.00%)                  if !terminated {
      .                               self.sess.span_diagnostic.span_fatal_with_code(
      .                                   self.mk_sp(start + BytePos(1), suffix_start),
      .                                   "unterminated byte constant",
      .                                   error_code!(E0763),
      .                               )
      .                           }
      .                           (token::Byte, Mode::Byte, 2, 1) // b' '
      .                       }
     54 ( 0.00%)              rustc_lexer::LiteralKind::Str { terminated } => {
     54 ( 0.00%)                  if !terminated {
      .                               self.sess.span_diagnostic.span_fatal_with_code(
      .                                   self.mk_sp(start, suffix_start),
      .                                   "unterminated double quote string",
      .                                   error_code!(E0765),
      .                               )
      .                           }
      .                           (token::Str, Mode::Str, 1, 1) // " "
      .                       }
      3 ( 0.00%)              rustc_lexer::LiteralKind::ByteStr { terminated } => {
      3 ( 0.00%)                  if !terminated {
      .                               self.sess.span_diagnostic.span_fatal_with_code(
      .                                   self.mk_sp(start + BytePos(1), suffix_start),
      .                                   "unterminated double quote byte string",
      .                                   error_code!(E0766),
      .                               )
      .                           }
      .                           (token::ByteStr, Mode::ByteStr, 2, 1) // b" "
      .                       }
-- line 407 ----------------------------------------
-- line 410 ----------------------------------------
      .                           let n = u32::from(n_hashes);
      .                           (token::StrRaw(n_hashes), Mode::RawStr, 2 + n, 1 + n) // r##" "##
      .                       }
      .                       rustc_lexer::LiteralKind::RawByteStr { n_hashes, err } => {
      .                           self.report_raw_str_error(start, err);
      .                           let n = u32::from(n_hashes);
      .                           (token::ByteStrRaw(n_hashes), Mode::RawByteStr, 3 + n, 1 + n) // br##" "##
      .                       }
  3,488 ( 0.00%)              rustc_lexer::LiteralKind::Int { base, empty_int } => {
  1,744 ( 0.00%)                  return if empty_int {
      .                               self.sess
      .                                   .span_diagnostic
      .                                   .struct_span_err_with_code(
      .                                       self.mk_sp(start, suffix_start),
      .                                       "no valid digits found for number",
      .                                       error_code!(E0768),
      .                                   )
      .                                   .emit();
      .                               (token::Integer, sym::integer(0))
      .                           } else {
      .                               self.validate_int_literal(base, start, suffix_start);
  5,232 ( 0.00%)                      (token::Integer, self.symbol_from_to(start, suffix_start))
      .                           };
      .                       }
      .                       rustc_lexer::LiteralKind::Float { base, empty_exponent } => {
      .                           if empty_exponent {
      .                               self.err_span_(start, self.pos, "expected at least one digit in exponent");
      .                           }
      .           
      .                           match base {
-- line 439 ----------------------------------------
-- line 452 ----------------------------------------
      .                           }
      .           
      .                           let id = self.symbol_from_to(start, suffix_start);
      .                           return (token::Float, id);
      .                       }
      .                   };
      .                   let content_start = start + BytePos(prefix_len);
      .                   let content_end = suffix_start - BytePos(postfix_len);
    261 ( 0.00%)          let id = self.symbol_from_to(content_start, content_end);
      .                   self.validate_literal_escape(mode, content_start, content_end, prefix_len, postfix_len);
      .                   (lit_kind, id)
      .               }
      .           
      .               #[inline]
      .               fn src_index(&self, pos: BytePos) -> usize {
      .                   (pos - self.start_pos).to_usize()
      .               }
      .           
      .               /// Slice of the source text from `start` up to but excluding `self.pos`,
      .               /// meaning the slice does not include the character `self.ch`.
      .               fn str_from(&self, start: BytePos) -> &str {
 20,748 ( 0.01%)          self.str_from_to(start, self.pos)
      .               }
      .           
      .               /// As symbol_from, with an explicit endpoint.
      .               fn symbol_from_to(&self, start: BytePos, end: BytePos) -> Symbol {
      .                   debug!("taking an ident from {:?} to {:?}", start, end);
 13,252 ( 0.00%)          Symbol::intern(self.str_from_to(start, end))
      .               }
      .           
      .               /// Slice of the source text spanning from `start` up to but excluding `end`.
  5,091 ( 0.00%)      fn str_from_to(&self, start: BytePos, end: BytePos) -> &str {
      .                   &self.src[self.src_index(start)..self.src_index(end)]
 20,364 ( 0.01%)      }
      .           
      .               fn report_raw_str_error(&self, start: BytePos, opt_err: Option<RawStrError>) {
      .                   match opt_err {
      .                       Some(RawStrError::InvalidStarter { bad_char }) => {
      .                           self.report_non_started_raw_string(start, bad_char)
      .                       }
      .                       Some(RawStrError::NoTerminator { expected, found, possible_terminator_offset }) => self
      .                           .report_unterminated_raw_string(start, expected, possible_terminator_offset, found),
-- line 493 ----------------------------------------
-- line 609 ----------------------------------------
      .               fn validate_literal_escape(
      .                   &self,
      .                   mode: Mode,
      .                   content_start: BytePos,
      .                   content_end: BytePos,
      .                   prefix_len: u32,
      .                   postfix_len: u32,
      .               ) {
    522 ( 0.00%)          let lit_content = self.str_from_to(content_start, content_end);
  6,994 ( 0.00%)          unescape::unescape_literal(lit_content, mode, &mut |range, result| {
      .                       // Here we only check for errors. The actual unescaping is done later.
  1,270 ( 0.00%)              if let Err(err) = result {
      .                           let span_with_quotes = self
      .                               .mk_sp(content_start - BytePos(prefix_len), content_end + BytePos(postfix_len));
      .                           let (start, end) = (range.start as u32, range.end as u32);
      .                           let lo = content_start + BytePos(start);
      .                           let hi = lo + BytePos(end - start);
      .                           let span = self.mk_sp(lo, hi);
      .                           emit_unescape_error(
      .                               &self.sess.span_diagnostic,
-- line 628 ----------------------------------------
-- line 629 ----------------------------------------
      .                               lit_content,
      .                               span_with_quotes,
      .                               span,
      .                               mode,
      .                               range,
      .                               err,
      .                           );
      .                       }
  5,715 ( 0.00%)          });
      .               }
      .           
      .               fn validate_int_literal(&self, base: Base, content_start: BytePos, content_end: BytePos) {
  6,976 ( 0.00%)          let base = match base {
      .                       Base::Binary => 2,
      .                       Base::Octal => 8,
      .                       _ => return,
      .                   };
      .                   let s = self.str_from_to(content_start + BytePos(2), content_end);
      .                   for (idx, c) in s.char_indices() {
      .                       let idx = idx as u32;
      .                       if c != '_' && c.to_digit(base).is_none() {
-- line 649 ----------------------------------------
-- line 650 ----------------------------------------
      .                           let lo = content_start + BytePos(2 + idx);
      .                           let hi = content_start + BytePos(2 + idx + c.len_utf8() as u32);
      .                           self.err_span_(lo, hi, &format!("invalid digit for a base {} literal", base));
      .                       }
      .                   }
      .               }
      .           }
      .           
 24,237 ( 0.01%)  pub fn nfc_normalize(string: &str) -> Symbol {
      .               use unicode_normalization::{is_nfc_quick, IsNormalized, UnicodeNormalization};
  5,386 ( 0.00%)      match is_nfc_quick(string.chars()) {
 26,930 ( 0.01%)          IsNormalized::Yes => Symbol::intern(string),
      .                   _ => {
      .                       let normalized_str: String = string.chars().nfc().collect();
      .                       Symbol::intern(&normalized_str)
      .                   }
      .               }
      .           }

 54,752 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fold.rs
--------------------------------------------------------------------------------
Ir               

-- line 46 ----------------------------------------
      .           ///
      .           /// To implement this conveniently, use the derive macro located in `rustc_macros`.
      .           pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {
      .               /// Consumers may find this more convenient to use with infallible folders than
      .               /// [`try_super_fold_with`][`TypeFoldable::try_super_fold_with`], to which the
      .               /// provided default definition delegates.  Implementors **should not** override
      .               /// this provided default definition, to ensure that the two methods are coherent
      .               /// (provide a definition of `try_super_fold_with` instead).
415,877 ( 0.11%)      fn super_fold_with<F: TypeFolder<'tcx, Error = !>>(self, folder: &mut F) -> Self {
  9,138 ( 0.00%)          self.try_super_fold_with(folder).into_ok()
425,015 ( 0.11%)      }
      .               /// Consumers may find this more convenient to use with infallible folders than
      .               /// [`try_fold_with`][`TypeFoldable::try_fold_with`], to which the provided
      .               /// default definition delegates.  Implementors **should not** override this
      .               /// provided default definition, to ensure that the two methods are coherent
      .               /// (provide a definition of `try_fold_with` instead).
 29,678 ( 0.01%)      fn fold_with<F: TypeFolder<'tcx, Error = !>>(self, folder: &mut F) -> Self {
 13,508 ( 0.00%)          self.try_fold_with(folder).into_ok()
 26,996 ( 0.01%)      }
      .           
      .               fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(
      .                   self,
      .                   folder: &mut F,
      .               ) -> Result<Self, F::Error>;
      .           
316,469 ( 0.08%)      fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {
 93,640 ( 0.02%)          self.try_super_fold_with(folder)
337,358 ( 0.09%)      }
      .           
      .               fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy>;
 60,614 ( 0.02%)      fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
 42,910 ( 0.01%)          self.super_visit_with(visitor)
 36,108 ( 0.01%)      }
      .           
      .               /// Returns `true` if `self` has any late-bound regions that are either
      .               /// bound by `binder` or bound by some binder outside of `binder`.
      .               /// If `binder` is `ty::INNERMOST`, this indicates whether
      .               /// there are any late-bound regions that appear free.
      .               fn has_vars_bound_at_or_above(&self, binder: ty::DebruijnIndex) -> bool {
 29,232 ( 0.01%)          self.visit_with(&mut HasEscapingVarsVisitor { outer_index: binder }).is_break()
      .               }
      .           
      .               /// Returns `true` if this `self` has any regions that escape `binder` (and
      .               /// hence are not bound by it).
      .               fn has_vars_bound_above(&self, binder: ty::DebruijnIndex) -> bool {
      .                   self.has_vars_bound_at_or_above(binder.shifted_in(1))
      .               }
      .           
105,675 ( 0.03%)      fn has_escaping_bound_vars(&self) -> bool {
  4,435 ( 0.00%)          self.has_vars_bound_at_or_above(ty::INNERMOST)
105,711 ( 0.03%)      }
      .           
  2,386 ( 0.00%)      #[instrument(level = "trace")]
      .               fn has_type_flags(&self, flags: TypeFlags) -> bool {
  4,569 ( 0.00%)          self.visit_with(&mut HasTypeFlagsVisitor { flags }).break_value() == Some(FoundFlags)
      .               }
      .               fn has_projections(&self) -> bool {
    296 ( 0.00%)          self.has_type_flags(TypeFlags::HAS_PROJECTION)
      .               }
      .               fn has_opaque_types(&self) -> bool {
      .                   self.has_type_flags(TypeFlags::HAS_TY_OPAQUE)
      .               }
  1,832 ( 0.00%)      fn references_error(&self) -> bool {
      .                   self.has_type_flags(TypeFlags::HAS_ERROR)
  1,832 ( 0.00%)      }
      .               fn has_param_types_or_consts(&self) -> bool {
     24 ( 0.00%)          self.has_type_flags(TypeFlags::HAS_TY_PARAM | TypeFlags::HAS_CT_PARAM)
      .               }
      .               fn has_infer_regions(&self) -> bool {
      .                   self.has_type_flags(TypeFlags::HAS_RE_INFER)
      .               }
      .               fn has_infer_types(&self) -> bool {
      .                   self.has_type_flags(TypeFlags::HAS_TY_INFER)
      .               }
      .               fn has_infer_types_or_consts(&self) -> bool {
 21,896 ( 0.01%)          self.has_type_flags(TypeFlags::HAS_TY_INFER | TypeFlags::HAS_CT_INFER)
      .               }
  2,742 ( 0.00%)      fn needs_infer(&self) -> bool {
 11,614 ( 0.00%)          self.has_type_flags(TypeFlags::NEEDS_INFER)
  2,764 ( 0.00%)      }
      .               fn has_placeholders(&self) -> bool {
      .                   self.has_type_flags(
      .                       TypeFlags::HAS_RE_PLACEHOLDER
      .                           | TypeFlags::HAS_TY_PLACEHOLDER
      .                           | TypeFlags::HAS_CT_PLACEHOLDER,
      .                   )
      .               }
      .               fn needs_subst(&self) -> bool {
-- line 133 ----------------------------------------
-- line 147 ----------------------------------------
      .               fn has_erasable_regions(&self) -> bool {
      .                   self.has_type_flags(TypeFlags::HAS_FREE_REGIONS)
      .               }
      .           
      .               /// Indicates whether this value references only 'global'
      .               /// generic parameters that are the same regardless of what fn we are
      .               /// in. This is used for caching.
      .               fn is_global(&self) -> bool {
  5,765 ( 0.00%)          !self.has_type_flags(TypeFlags::HAS_FREE_LOCAL_NAMES)
      .               }
      .           
      .               /// True if there are any late-bound regions
      .               fn has_late_bound_regions(&self) -> bool {
      .                   self.has_type_flags(TypeFlags::HAS_RE_LATE_BOUND)
      .               }
      .           
      .               /// Indicates whether this value still has parameters/placeholders/inference variables
-- line 163 ----------------------------------------
-- line 194 ----------------------------------------
      .           
      .               fn tcx<'a>(&'a self) -> TyCtxt<'tcx>;
      .           
      .               fn fold_binder<T>(&mut self, t: Binder<'tcx, T>) -> Binder<'tcx, T>
      .               where
      .                   T: TypeFoldable<'tcx>,
      .                   Self: TypeFolder<'tcx, Error = !>,
      .               {
 93,283 ( 0.02%)          t.super_fold_with(self)
      .               }
      .           
      .               fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx>
      .               where
      .                   Self: TypeFolder<'tcx, Error = !>,
      .               {
 23,958 ( 0.01%)          t.super_fold_with(self)
      .               }
      .           
      .               fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx>
      .               where
      .                   Self: TypeFolder<'tcx, Error = !>,
      .               {
      .                   r.super_fold_with(self)
      .               }
      .           
      .               fn fold_const(&mut self, c: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx>
      .               where
      .                   Self: TypeFolder<'tcx, Error = !>,
      .               {
  5,369 ( 0.00%)          c.super_fold_with(self)
      .               }
      .           
      .               fn fold_predicate(&mut self, p: ty::Predicate<'tcx>) -> ty::Predicate<'tcx>
      .               where
      .                   Self: TypeFolder<'tcx, Error = !>,
      .               {
      .                   p.super_fold_with(self)
      .               }
-- line 231 ----------------------------------------
-- line 247 ----------------------------------------
      .           /// A blanket implementation of this trait (that defers to the relevant
      .           /// method of [`TypeFolder`]) is provided for all infallible folders in
      .           /// order to ensure the two APIs are coherent.
      .           pub trait FallibleTypeFolder<'tcx>: TypeFolder<'tcx> {
      .               fn try_fold_binder<T>(&mut self, t: Binder<'tcx, T>) -> Result<Binder<'tcx, T>, Self::Error>
      .               where
      .                   T: TypeFoldable<'tcx>,
      .               {
    470 ( 0.00%)          t.try_super_fold_with(self)
      .               }
      .           
      .               fn try_fold_ty(&mut self, t: Ty<'tcx>) -> Result<Ty<'tcx>, Self::Error> {
      .                   t.try_super_fold_with(self)
      .               }
      .           
      .               fn try_fold_region(&mut self, r: ty::Region<'tcx>) -> Result<ty::Region<'tcx>, Self::Error> {
      .                   r.try_super_fold_with(self)
-- line 263 ----------------------------------------
-- line 269 ----------------------------------------
      .               ) -> Result<&'tcx ty::Const<'tcx>, Self::Error> {
      .                   c.try_super_fold_with(self)
      .               }
      .           
      .               fn try_fold_predicate(
      .                   &mut self,
      .                   p: ty::Predicate<'tcx>,
      .               ) -> Result<ty::Predicate<'tcx>, Self::Error> {
    194 ( 0.00%)          p.try_super_fold_with(self)
      .               }
      .           
      .               fn try_fold_mir_const(
      .                   &mut self,
      .                   c: mir::ConstantKind<'tcx>,
      .               ) -> Result<mir::ConstantKind<'tcx>, Self::Error> {
      .                   bug!("most type folders should not be folding MIR datastructures: {:?}", c)
      .               }
-- line 285 ----------------------------------------
-- line 286 ----------------------------------------
      .           }
      .           
      .           // Blanket implementation of fallible trait for infallible folders
      .           // delegates to infallible methods to prevent incoherence
      .           impl<'tcx, F> FallibleTypeFolder<'tcx> for F
      .           where
      .               F: TypeFolder<'tcx, Error = !>,
      .           {
  6,412 ( 0.00%)      fn try_fold_binder<T>(&mut self, t: Binder<'tcx, T>) -> Result<Binder<'tcx, T>, Self::Error>
      .               where
      .                   T: TypeFoldable<'tcx>,
      .               {
 11,337 ( 0.00%)          Ok(self.fold_binder(t))
  9,558 ( 0.00%)      }
      .           
    495 ( 0.00%)      fn try_fold_ty(&mut self, t: Ty<'tcx>) -> Result<Ty<'tcx>, Self::Error> {
258,896 ( 0.07%)          Ok(self.fold_ty(t))
    242 ( 0.00%)      }
      .           
      .               fn try_fold_region(&mut self, r: ty::Region<'tcx>) -> Result<ty::Region<'tcx>, Self::Error> {
  8,372 ( 0.00%)          Ok(self.fold_region(r))
      .               }
      .           
    150 ( 0.00%)      fn try_fold_const(
      .                   &mut self,
      .                   c: &'tcx ty::Const<'tcx>,
      .               ) -> Result<&'tcx ty::Const<'tcx>, Self::Error> {
  6,701 ( 0.00%)          Ok(self.fold_const(c))
     80 ( 0.00%)      }
      .           
      .               fn try_fold_predicate(
      .                   &mut self,
      .                   p: ty::Predicate<'tcx>,
      .               ) -> Result<ty::Predicate<'tcx>, Self::Error> {
      .                   Ok(self.fold_predicate(p))
      .               }
      .           
-- line 322 ----------------------------------------
-- line 342 ----------------------------------------
      .                   t.super_visit_with(self)
      .               }
      .           
      .               fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {
      .                   r.super_visit_with(self)
      .               }
      .           
      .               fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {
      9 ( 0.00%)          c.super_visit_with(self)
      .               }
      .           
      .               fn visit_unevaluated_const(&mut self, uv: ty::Unevaluated<'tcx>) -> ControlFlow<Self::BreakTy> {
      .                   uv.super_visit_with(self)
      .               }
      .           
      .               fn visit_predicate(&mut self, p: ty::Predicate<'tcx>) -> ControlFlow<Self::BreakTy> {
      .                   p.super_visit_with(self)
-- line 358 ----------------------------------------
-- line 380 ----------------------------------------
      .               G: FnMut(ty::Region<'tcx>) -> ty::Region<'tcx>,
      .               H: FnMut(&'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx>,
      .           {
      .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
      .                   self.tcx
      .               }
      .           
      .               fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {
    128 ( 0.00%)          let t = ty.super_fold_with(self);
      .                   (self.ty_op)(t)
      .               }
      .           
      .               fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
      .                   let r = r.super_fold_with(self);
      .                   (self.lt_op)(r)
      .               }
      .           
-- line 396 ----------------------------------------
-- line 415 ----------------------------------------
      .               ) -> T
      .               where
      .                   T: TypeFoldable<'tcx>,
      .               {
      .                   value.fold_with(&mut RegionFolder::new(self, skipped_regions, &mut f))
      .               }
      .           
      .               /// Invoke `callback` on every region appearing free in `value`.
     62 ( 0.00%)      pub fn for_each_free_region(
      .                   self,
      .                   value: &impl TypeFoldable<'tcx>,
      .                   mut callback: impl FnMut(ty::Region<'tcx>),
      .               ) {
      .                   self.any_free_region_meets(value, |r| {
    664 ( 0.00%)              callback(r);
      .                       false
      .                   });
     53 ( 0.00%)      }
      .           
      .               /// Returns `true` if `callback` returns true for every region appearing free in `value`.
      .               pub fn all_free_regions_meet(
      .                   self,
      .                   value: &impl TypeFoldable<'tcx>,
      .                   mut callback: impl FnMut(ty::Region<'tcx>) -> bool,
      .               ) -> bool {
    109 ( 0.00%)          !self.any_free_region_meets(value, |r| !callback(r))
      .               }
      .           
      .               /// Returns `true` if `callback` returns true for some region appearing free in `value`.
      .               pub fn any_free_region_meets(
      .                   self,
      .                   value: &impl TypeFoldable<'tcx>,
      .                   callback: impl FnMut(ty::Region<'tcx>) -> bool,
      .               ) -> bool {
-- line 448 ----------------------------------------
-- line 479 ----------------------------------------
      .                           t: &Binder<'tcx, T>,
      .                       ) -> ControlFlow<Self::BreakTy> {
      .                           self.outer_index.shift_in(1);
      .                           let result = t.as_ref().skip_binder().visit_with(self);
      .                           self.outer_index.shift_out(1);
      .                           result
      .                       }
      .           
    455 ( 0.00%)              fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {
    953 ( 0.00%)                  match *r {
      .                               ty::ReLateBound(debruijn, _) if debruijn < self.outer_index => {
      .                                   ControlFlow::CONTINUE
      .                               }
      .                               _ => {
      .                                   if (self.callback)(r) {
      .                                       ControlFlow::BREAK
      .                                   } else {
      .                                       ControlFlow::CONTINUE
      .                                   }
      .                               }
      .                           }
    637 ( 0.00%)              }
      .           
      .                       fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {
      .                           // We're only interested in types involving regions
  6,454 ( 0.00%)                  if ty.flags().intersects(TypeFlags::HAS_FREE_REGIONS) {
    663 ( 0.00%)                      ty.super_visit_with(self)
      .                           } else {
      .                               ControlFlow::CONTINUE
      .                           }
      .                       }
      .                   }
      .           
 21,714 ( 0.01%)          value.visit_with(&mut RegionVisitor { outer_index: ty::INNERMOST, callback }).is_break()
      .               }
      .           }
      .           
      .           /// Folds over the substructure of a type, visiting its component
      .           /// types and all regions that occur *free* within it.
      .           ///
      .           /// That is, `Ty` can contain function or method types that bind
      .           /// regions at the call site (`ReLateBound`), and occurrences of
-- line 520 ----------------------------------------
-- line 540 ----------------------------------------
      .           
      .           impl<'a, 'tcx> RegionFolder<'a, 'tcx> {
      .               #[inline]
      .               pub fn new(
      .                   tcx: TyCtxt<'tcx>,
      .                   skipped_regions: &'a mut bool,
      .                   fold_region_fn: &'a mut dyn FnMut(ty::Region<'tcx>, ty::DebruijnIndex) -> ty::Region<'tcx>,
      .               ) -> RegionFolder<'a, 'tcx> {
 53,046 ( 0.01%)          RegionFolder { tcx, skipped_regions, current_index: ty::INNERMOST, fold_region_fn }
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> TypeFolder<'tcx> for RegionFolder<'a, 'tcx> {
      .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
  2,701 ( 0.00%)          self.tcx
  2,701 ( 0.00%)      }
      .           
      .               fn fold_binder<T: TypeFoldable<'tcx>>(
      .                   &mut self,
      .                   t: ty::Binder<'tcx, T>,
      .               ) -> ty::Binder<'tcx, T> {
    120 ( 0.00%)          self.current_index.shift_in(1);
      .                   let t = t.super_fold_with(self);
    120 ( 0.00%)          self.current_index.shift_out(1);
      .                   t
      .               }
      .           
     14 ( 0.00%)      #[instrument(skip(self), level = "debug")]
      .               fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
    522 ( 0.00%)          match *r {
     14 ( 0.00%)              ty::ReLateBound(debruijn, _) if debruijn < self.current_index => {
      .                           debug!(?self.current_index, "skipped bound region");
     14 ( 0.00%)                  *self.skipped_regions = true;
      .                           r
      .                       }
      .                       _ => {
      .                           debug!(?self.current_index, "folding free region");
  1,524 ( 0.00%)                  (self.fold_region_fn)(r, self.current_index)
      .                       }
      .                   }
      .               }
      .           }
      .           
      .           ///////////////////////////////////////////////////////////////////////////
      .           // Bound vars replacer
      .           
-- line 585 ----------------------------------------
-- line 592 ----------------------------------------
      .               current_index: ty::DebruijnIndex,
      .           
      .               fld_r: Option<&'a mut (dyn FnMut(ty::BoundRegion) -> ty::Region<'tcx> + 'a)>,
      .               fld_t: Option<&'a mut (dyn FnMut(ty::BoundTy) -> Ty<'tcx> + 'a)>,
      .               fld_c: Option<&'a mut (dyn FnMut(ty::BoundVar, Ty<'tcx>) -> &'tcx ty::Const<'tcx> + 'a)>,
      .           }
      .           
      .           impl<'a, 'tcx> BoundVarReplacer<'a, 'tcx> {
  1,530 ( 0.00%)      fn new(
      .                   tcx: TyCtxt<'tcx>,
      .                   fld_r: Option<&'a mut (dyn FnMut(ty::BoundRegion) -> ty::Region<'tcx> + 'a)>,
      .                   fld_t: Option<&'a mut (dyn FnMut(ty::BoundTy) -> Ty<'tcx> + 'a)>,
      .                   fld_c: Option<&'a mut (dyn FnMut(ty::BoundVar, Ty<'tcx>) -> &'tcx ty::Const<'tcx> + 'a)>,
      .               ) -> Self {
  5,355 ( 0.00%)          BoundVarReplacer { tcx, current_index: ty::INNERMOST, fld_r, fld_t, fld_c }
    765 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'tcx> TypeFolder<'tcx> for BoundVarReplacer<'a, 'tcx> {
      .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
  1,073 ( 0.00%)          self.tcx
    523 ( 0.00%)      }
      .           
      .               fn fold_binder<T: TypeFoldable<'tcx>>(
      .                   &mut self,
      .                   t: ty::Binder<'tcx, T>,
      .               ) -> ty::Binder<'tcx, T> {
  1,192 ( 0.00%)          self.current_index.shift_in(1);
    590 ( 0.00%)          let t = t.super_fold_with(self);
    942 ( 0.00%)          self.current_index.shift_out(1);
      .                   t
      .               }
      .           
  5,890 ( 0.00%)      fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {
  3,442 ( 0.00%)          match *t.kind() {
    370 ( 0.00%)              ty::Bound(debruijn, bound_ty) if debruijn == self.current_index => {
     74 ( 0.00%)                  if let Some(fld_t) = self.fld_t.as_mut() {
      .                               let ty = fld_t(bound_ty);
     74 ( 0.00%)                      return ty::fold::shift_vars(self.tcx, &ty, self.current_index.as_u32());
      .                           }
      .                       }
  3,294 ( 0.00%)              _ if t.has_vars_bound_at_or_above(self.current_index) => {
  3,801 ( 0.00%)                  return t.super_fold_with(self);
      .                       }
      .                       _ => {}
      .                   }
      .                   t
  3,810 ( 0.00%)      }
      .           
  1,888 ( 0.00%)      fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
  2,016 ( 0.00%)          match *r {
  1,992 ( 0.00%)              ty::ReLateBound(debruijn, br) if debruijn == self.current_index => {
    996 ( 0.00%)                  if let Some(fld_r) = self.fld_r.as_mut() {
      .                               let region = fld_r(br);
  1,992 ( 0.00%)                      return if let ty::ReLateBound(debruijn1, br) = *region {
      .                                   // If the callback returns a late-bound region,
      .                                   // that region should always use the INNERMOST
      .                                   // debruijn index. Then we adjust it to the
      .                                   // correct depth.
      .                                   assert_eq!(debruijn1, ty::INNERMOST);
      .                                   self.tcx.mk_region(ty::ReLateBound(debruijn, br))
      .                               } else {
      .                                   region
      .                               };
      .                           }
      .                       }
      .                       _ => {}
      .                   }
      .                   r
  1,888 ( 0.00%)      }
      .           
      .               fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
      .                   match *ct {
      .                       ty::Const { val: ty::ConstKind::Bound(debruijn, bound_const), ty }
      .                           if debruijn == self.current_index =>
      .                       {
      .                           if let Some(fld_c) = self.fld_c.as_mut() {
      .                               let ct = fld_c(bound_const, ty);
-- line 669 ----------------------------------------
-- line 697 ----------------------------------------
      .                   mut fld_r: F,
      .               ) -> (T, BTreeMap<ty::BoundRegion, ty::Region<'tcx>>)
      .               where
      .                   F: FnMut(ty::BoundRegion) -> ty::Region<'tcx>,
      .                   T: TypeFoldable<'tcx>,
      .               {
      .                   let mut region_map = BTreeMap::new();
      .                   let mut real_fld_r =
  3,569 ( 0.00%)              |br: ty::BoundRegion| *region_map.entry(br).or_insert_with(|| fld_r(br));
    206 ( 0.00%)          let value = value.skip_binder();
  1,050 ( 0.00%)          let value = if !value.has_escaping_bound_vars() {
  1,626 ( 0.00%)              value
      .                   } else {
    400 ( 0.00%)              let mut replacer = BoundVarReplacer::new(self, Some(&mut real_fld_r), None, None);
      .                       value.fold_with(&mut replacer)
      .                   };
  5,289 ( 0.00%)          (value, region_map)
      .               }
      .           
      .               /// Replaces all escaping bound vars. The `fld_r` closure replaces escaping
      .               /// bound regions; the `fld_t` closure replaces escaping bound types and the `fld_c`
      .               /// closure replaces escaping bound consts.
  4,707 ( 0.00%)      pub fn replace_escaping_bound_vars<T, F, G, H>(
      .                   self,
      .                   value: T,
      .                   mut fld_r: F,
      .                   mut fld_t: G,
      .                   mut fld_c: H,
      .               ) -> T
      .               where
      .                   F: FnMut(ty::BoundRegion) -> ty::Region<'tcx>,
      .                   G: FnMut(ty::BoundTy) -> Ty<'tcx>,
      .                   H: FnMut(ty::BoundVar, Ty<'tcx>) -> &'tcx ty::Const<'tcx>,
      .                   T: TypeFoldable<'tcx>,
      .               {
  1,182 ( 0.00%)          if !value.has_escaping_bound_vars() {
  9,827 ( 0.00%)              value
      .                   } else {
      .                       let mut replacer =
  8,405 ( 0.00%)                  BoundVarReplacer::new(self, Some(&mut fld_r), Some(&mut fld_t), Some(&mut fld_c));
    534 ( 0.00%)              value.fold_with(&mut replacer)
      .                   }
  3,238 ( 0.00%)      }
      .           
      .               /// Replaces all types or regions bound by the given `Binder`. The `fld_r`
      .               /// closure replaces bound regions while the `fld_t` closure replaces bound
      .               /// types.
 40,811 ( 0.01%)      pub fn replace_bound_vars<T, F, G, H>(
      .                   self,
      .                   value: Binder<'tcx, T>,
      .                   mut fld_r: F,
      .                   fld_t: G,
      .                   fld_c: H,
      .               ) -> (T, BTreeMap<ty::BoundRegion, ty::Region<'tcx>>)
      .               where
      .                   F: FnMut(ty::BoundRegion) -> ty::Region<'tcx>,
      .                   G: FnMut(ty::BoundTy) -> Ty<'tcx>,
      .                   H: FnMut(ty::BoundVar, Ty<'tcx>) -> &'tcx ty::Const<'tcx>,
      .                   T: TypeFoldable<'tcx>,
      .               {
      .                   let mut region_map = BTreeMap::new();
  8,709 ( 0.00%)          let real_fld_r = |br: ty::BoundRegion| *region_map.entry(br).or_insert_with(|| fld_r(br));
 41,540 ( 0.01%)          let value = self.replace_escaping_bound_vars(value.skip_binder(), real_fld_r, fld_t, fld_c);
 44,694 ( 0.01%)          (value, region_map)
 27,292 ( 0.01%)      }
      .           
      .               /// Replaces any late-bound regions bound in `value` with
      .               /// free variants attached to `all_outlive_scope`.
  1,133 ( 0.00%)      pub fn liberate_late_bound_regions<T>(
      .                   self,
      .                   all_outlive_scope: DefId,
      .                   value: ty::Binder<'tcx, T>,
      .               ) -> T
      .               where
      .                   T: TypeFoldable<'tcx>,
      .               {
      .                   self.replace_late_bound_regions(value, |br| {
    182 ( 0.00%)              self.mk_region(ty::ReFree(ty::FreeRegion {
     28 ( 0.00%)                  scope: all_outlive_scope,
      .                           bound_region: br.kind,
      .                       }))
      .                   })
      .                   .0
    618 ( 0.00%)      }
      .           
      .               pub fn shift_bound_var_indices<T>(self, bound_vars: usize, value: T) -> T
      .               where
      .                   T: TypeFoldable<'tcx>,
      .               {
      .                   self.replace_escaping_bound_vars(
  1,305 ( 0.00%)              value,
      .                       |r| {
      .                           self.mk_region(ty::ReLateBound(
      .                               ty::INNERMOST,
      .                               ty::BoundRegion {
      .                                   var: ty::BoundVar::from_usize(r.var.as_usize() + bound_vars),
      .                                   kind: r.kind,
      .                               },
      .                           ))
-- line 795 ----------------------------------------
-- line 843 ----------------------------------------
      .               fn collect_late_bound_regions<T>(
      .                   self,
      .                   value: &Binder<'tcx, T>,
      .                   just_constraint: bool,
      .               ) -> FxHashSet<ty::BoundRegionKind>
      .               where
      .                   T: TypeFoldable<'tcx>,
      .               {
    172 ( 0.00%)          let mut collector = LateBoundRegionsCollector::new(just_constraint);
      .                   let result = value.as_ref().skip_binder().visit_with(&mut collector);
      .                   assert!(result.is_continue()); // should never have stopped early
    344 ( 0.00%)          collector.regions
      .               }
      .           
      .               /// Replaces any late-bound regions bound in `value` with `'erased`. Useful in codegen but also
      .               /// method lookup and a few other places where precise region relationships are not required.
      .               pub fn erase_late_bound_regions<T>(self, value: Binder<'tcx, T>) -> T
      .               where
      .                   T: TypeFoldable<'tcx>,
      .               {
    136 ( 0.00%)          self.replace_late_bound_regions(value, |_| self.lifetimes.re_erased).0
      .               }
      .           
      .               /// Rewrite any late-bound regions so that they are anonymous. Region numbers are
      .               /// assigned starting at 0 and increasing monotonically in the order traversed
      .               /// by the fold operation.
      .               ///
      .               /// The chief purpose of this function is to canonicalize regions so that two
      .               /// `FnSig`s or `TraitRef`s which are equivalent up to region naming will become
      .               /// structurally identical. For example, `for<'a, 'b> fn(&'a isize, &'b isize)` and
      .               /// `for<'a, 'b> fn(&'b isize, &'a isize)` will become identical after anonymization.
  1,897 ( 0.00%)      pub fn anonymize_late_bound_regions<T>(self, sig: Binder<'tcx, T>) -> Binder<'tcx, T>
      .               where
      .                   T: TypeFoldable<'tcx>,
      .               {
  1,355 ( 0.00%)          let mut counter = 0;
      .                   let inner = self
      .                       .replace_late_bound_regions(sig, |_| {
      .                           let br = ty::BoundRegion {
      .                               var: ty::BoundVar::from_u32(counter),
      .                               kind: ty::BrAnon(counter),
      .                           };
      .                           let r = self.mk_region(ty::ReLateBound(ty::INNERMOST, br));
      .                           counter += 1;
      .                           r
      .                       })
      .                       .0;
    271 ( 0.00%)          let bound_vars = self.mk_bound_variable_kinds(
    813 ( 0.00%)              (0..counter).map(|i| ty::BoundVariableKind::Region(ty::BrAnon(i))),
      .                   );
  1,626 ( 0.00%)          Binder::bind_with_vars(inner, bound_vars)
  1,626 ( 0.00%)      }
      .           }
      .           
      .           pub struct ValidateBoundVars<'tcx> {
      .               bound_vars: &'tcx ty::List<ty::BoundVariableKind>,
      .               binder_index: ty::DebruijnIndex,
      .               // We may encounter the same variable at different levels of binding, so
      .               // this can't just be `Ty`
      .               visited: SsoHashSet<(ty::DebruijnIndex, Ty<'tcx>)>,
-- line 902 ----------------------------------------
-- line 1004 ----------------------------------------
      .               tcx: TyCtxt<'tcx>,
      .               current_index: ty::DebruijnIndex,
      .               amount: u32,
      .           }
      .           
      .           impl<'tcx> Shifter<'tcx> {
      .               pub fn new(tcx: TyCtxt<'tcx>, amount: u32) -> Self {
      .                   Shifter { tcx, current_index: ty::INNERMOST, amount }
    148 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> TypeFolder<'tcx> for Shifter<'tcx> {
      .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
      .                   self.tcx
      .               }
      .           
      .               fn fold_binder<T: TypeFoldable<'tcx>>(
-- line 1020 ----------------------------------------
-- line 1038 ----------------------------------------
      .                               self.tcx.mk_region(shifted)
      .                           }
      .                       }
      .                       _ => r,
      .                   }
      .               }
      .           
      .               fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {
    148 ( 0.00%)          match *ty.kind() {
      .                       ty::Bound(debruijn, bound_ty) => {
      .                           if self.amount == 0 || debruijn < self.current_index {
      .                               ty
      .                           } else {
      .                               let debruijn = debruijn.shifted_in(self.amount);
      .                               self.tcx.mk_ty(ty::Bound(debruijn, bound_ty))
      .                           }
      .                       }
      .           
    222 ( 0.00%)              _ => ty.super_fold_with(self),
      .                   }
      .               }
      .           
      .               fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
      .                   if let ty::Const { val: ty::ConstKind::Bound(debruijn, bound_ct), ty } = *ct {
      .                       if self.amount == 0 || debruijn < self.current_index {
      .                           ct
      .                       } else {
-- line 1064 ----------------------------------------
-- line 1085 ----------------------------------------
      .           }
      .           
      .           pub fn shift_vars<'tcx, T>(tcx: TyCtxt<'tcx>, value: T, amount: u32) -> T
      .           where
      .               T: TypeFoldable<'tcx>,
      .           {
      .               debug!("shift_vars(value={:?}, amount={})", value, amount);
      .           
    148 ( 0.00%)      value.fold_with(&mut Shifter::new(tcx, amount))
      .           }
      .           
      .           #[derive(Debug, PartialEq, Eq, Copy, Clone)]
      .           struct FoundEscapingVars;
      .           
      .           /// An "escaping var" is a bound var whose binder is not part of `t`. A bound var can be a
      .           /// bound region or a bound type.
      .           ///
-- line 1101 ----------------------------------------
-- line 1128 ----------------------------------------
      .           
      .           impl<'tcx> TypeVisitor<'tcx> for HasEscapingVarsVisitor {
      .               type BreakTy = FoundEscapingVars;
      .           
      .               fn visit_binder<T: TypeFoldable<'tcx>>(
      .                   &mut self,
      .                   t: &Binder<'tcx, T>,
      .               ) -> ControlFlow<Self::BreakTy> {
    378 ( 0.00%)          self.outer_index.shift_in(1);
      .                   let result = t.super_visit_with(self);
    509 ( 0.00%)          self.outer_index.shift_out(1);
      .                   result
      .               }
      .           
      .               #[inline]
      .               fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {
      .                   // If the outer-exclusive-binder is *strictly greater* than
      .                   // `outer_index`, that means that `t` contains some content
      .                   // bound at `outer_index` or above (because
-- line 1146 ----------------------------------------
-- line 1160 ----------------------------------------
      .                   // visited.
      .                   if r.bound_at_or_above_binder(self.outer_index) {
      .                       ControlFlow::Break(FoundEscapingVars)
      .                   } else {
      .                       ControlFlow::CONTINUE
      .                   }
      .               }
      .           
     12 ( 0.00%)      fn visit_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {
      .                   // we don't have a `visit_infer_const` callback, so we have to
      .                   // hook in here to catch this case (annoying...), but
      .                   // otherwise we do want to remember to visit the rest of the
      .                   // const, as it has types/regions embedded in a lot of other
      .                   // places.
     18 ( 0.00%)          match ct.val {
      .                       ty::ConstKind::Bound(debruijn, _) if debruijn >= self.outer_index => {
      .                           ControlFlow::Break(FoundEscapingVars)
      .                       }
      .                       _ => ct.super_visit_with(self),
      .                   }
     12 ( 0.00%)      }
      .           
      .               #[inline]
      .               fn visit_predicate(&mut self, predicate: ty::Predicate<'tcx>) -> ControlFlow<Self::BreakTy> {
      .                   if predicate.inner.outer_exclusive_binder > self.outer_index {
      .                       ControlFlow::Break(FoundEscapingVars)
      .                   } else {
      .                       ControlFlow::CONTINUE
      .                   }
-- line 1188 ----------------------------------------
-- line 1210 ----------------------------------------
      .               #[instrument(level = "trace")]
      .               fn visit_ty(&mut self, t: Ty<'_>) -> ControlFlow<Self::BreakTy> {
      .                   debug!(
      .                       "HasTypeFlagsVisitor: t={:?} t.flags={:?} self.flags={:?}",
      .                       t,
      .                       t.flags(),
      .                       self.flags
      .                   );
 56,364 ( 0.01%)          if t.flags().intersects(self.flags) {
      .                       ControlFlow::Break(FoundFlags)
      .                   } else {
      .                       ControlFlow::CONTINUE
      .                   }
      .               }
      .           
      .               #[inline]
      .               #[instrument(skip(self), level = "trace")]
      .               fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {
     88 ( 0.00%)          let flags = r.type_flags();
      .                   trace!(r.flags=?flags);
      .                   if flags.intersects(self.flags) {
      .                       ControlFlow::Break(FoundFlags)
      .                   } else {
      .                       ControlFlow::CONTINUE
      .                   }
      .               }
      .           
      .               #[inline]
      .               #[instrument(level = "trace")]
      .               fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {
  5,716 ( 0.00%)          let flags = FlagComputation::for_const(c);
      .                   trace!(r.flags=?flags);
    496 ( 0.00%)          if flags.intersects(self.flags) {
      .                       ControlFlow::Break(FoundFlags)
      .                   } else {
      .                       ControlFlow::CONTINUE
      .                   }
      .               }
      .           
      .               #[inline]
      .               #[instrument(level = "trace")]
      .               fn visit_unevaluated_const(&mut self, uv: ty::Unevaluated<'tcx>) -> ControlFlow<Self::BreakTy> {
    804 ( 0.00%)          let flags = FlagComputation::for_unevaluated_const(uv);
      .                   trace!(r.flags=?flags);
      .                   if flags.intersects(self.flags) {
      .                       ControlFlow::Break(FoundFlags)
      .                   } else {
      .                       ControlFlow::CONTINUE
      .                   }
      .               }
      .           
-- line 1260 ----------------------------------------
-- line 1285 ----------------------------------------
      .               /// them constraints `'a == 'b`. But if you have `<&'a u32 as
      .               /// Trait>::Foo` and `<&'b u32 as Trait>::Foo`, normalizing those
      .               /// types may mean that `'a` and `'b` don't appear in the results,
      .               /// so they are not considered *constrained*.
      .               just_constrained: bool,
      .           }
      .           
      .           impl LateBoundRegionsCollector {
     86 ( 0.00%)      fn new(just_constrained: bool) -> Self {
    602 ( 0.00%)          LateBoundRegionsCollector {
      .                       current_index: ty::INNERMOST,
      .                       regions: Default::default(),
      .                       just_constrained,
      .                   }
     86 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> TypeVisitor<'tcx> for LateBoundRegionsCollector {
      .               fn visit_binder<T: TypeFoldable<'tcx>>(
      .                   &mut self,
      .                   t: &Binder<'tcx, T>,
      .               ) -> ControlFlow<Self::BreakTy> {
      .                   self.current_index.shift_in(1);
      .                   let result = t.super_visit_with(self);
      .                   self.current_index.shift_out(1);
      .                   result
      .               }
      .           
    342 ( 0.00%)      fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {
      .                   // if we are only looking for "constrained" region, we have to
      .                   // ignore the inputs to a projection, as they may not appear
      .                   // in the normalized form
    236 ( 0.00%)          if self.just_constrained {
    300 ( 0.00%)              if let ty::Projection(..) | ty::Opaque(..) = t.kind() {
      .                           return ControlFlow::CONTINUE;
      .                       }
      .                   }
      .           
    240 ( 0.00%)          t.super_visit_with(self)
    228 ( 0.00%)      }
      .           
      .               fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {
      .                   // if we are only looking for "constrained" region, we have to
      .                   // ignore the inputs of an unevaluated const, as they may not appear
      .                   // in the normalized form
      .                   if self.just_constrained {
      .                       if let ty::ConstKind::Unevaluated(..) = c.val {
      .                           return ControlFlow::CONTINUE;
      .                       }
      .                   }
      .           
      .                   c.super_visit_with(self)
      .               }
      .           
      .               fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {
     41 ( 0.00%)          if let ty::ReLateBound(debruijn, br) = *r {
      7 ( 0.00%)              if debruijn == self.current_index {
      .                           self.regions.insert(br.kind);
      .                       }
      .                   }
      .                   ControlFlow::CONTINUE
      .               }
      .           }

 30,781 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fold.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 141 ----------------------------------------
      .               /// ```
      .               /// let a = [1, 2, 3];
      .               /// assert!(!a.is_empty());
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_stable(feature = "const_slice_is_empty", since = "1.39.0")]
      .               #[inline]
      .               pub const fn is_empty(&self) -> bool {
138,159 ( 0.04%)          self.len() == 0
      .               }
      .           
      .               /// Returns the first element of the slice, or `None` if it is empty.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let v = [10, 40, 30];
-- line 157 ----------------------------------------
-- line 159 ----------------------------------------
      .               ///
      .               /// let w: &[i32] = &[];
      .               /// assert_eq!(None, w.first());
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
      .               #[inline]
      .               pub const fn first(&self) -> Option<&T> {
    982 ( 0.00%)          if let [first, ..] = self { Some(first) } else { None }
      .               }
      .           
      .               /// Returns a mutable pointer to the first element of the slice, or `None` if it is empty.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let x = &mut [0, 1, 2];
-- line 175 ----------------------------------------
-- line 178 ----------------------------------------
      .               ///     *first = 5;
      .               /// }
      .               /// assert_eq!(x, &[5, 1, 2]);
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_unstable(feature = "const_slice_first_last", issue = "83570")]
      .               #[inline]
      .               pub const fn first_mut(&mut self) -> Option<&mut T> {
     32 ( 0.00%)          if let [first, ..] = self { Some(first) } else { None }
      .               }
      .           
      .               /// Returns the first and all the rest of the elements of the slice, or `None` if it is empty.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let x = &[0, 1, 2];
-- line 194 ----------------------------------------
-- line 237 ----------------------------------------
      .               ///     assert_eq!(last, &2);
      .               ///     assert_eq!(elements, &[0, 1]);
      .               /// }
      .               /// ```
      .               #[stable(feature = "slice_splits", since = "1.5.0")]
      .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
      .               #[inline]
      .               pub const fn split_last(&self) -> Option<(&T, &[T])> {
    885 ( 0.00%)          if let [init @ .., last] = self { Some((last, init)) } else { None }
      .               }
      .           
      .               /// Returns the last and all the rest of the elements of the slice, or `None` if it is empty.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let x = &mut [0, 1, 2];
-- line 253 ----------------------------------------
-- line 276 ----------------------------------------
      .               ///
      .               /// let w: &[i32] = &[];
      .               /// assert_eq!(None, w.last());
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
      .               #[inline]
      .               pub const fn last(&self) -> Option<&T> {
102,279 ( 0.03%)          if let [.., last] = self { Some(last) } else { None }
      .               }
      .           
      .               /// Returns a mutable pointer to the last item in the slice.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let x = &mut [0, 1, 2];
-- line 292 ----------------------------------------
-- line 295 ----------------------------------------
      .               ///     *last = 10;
      .               /// }
      .               /// assert_eq!(x, &[0, 1, 10]);
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_unstable(feature = "const_slice_first_last", issue = "83570")]
      .               #[inline]
      .               pub const fn last_mut(&mut self) -> Option<&mut T> {
 60,753 ( 0.02%)          if let [.., last] = self { Some(last) } else { None }
      .               }
      .           
      .               /// Returns a reference to an element or subslice depending on the type of
      .               /// index.
      .               ///
      .               /// - If given a position, returns a reference to the element at that
      .               ///   position or `None` if out of bounds.
      .               /// - If given a range, returns the subslice corresponding to that range,
-- line 311 ----------------------------------------
-- line 448 ----------------------------------------
      .               /// }
      .               /// ```
      .               ///
      .               /// [`as_mut_ptr`]: slice::as_mut_ptr
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_stable(feature = "const_slice_as_ptr", since = "1.32.0")]
      .               #[inline]
      .               pub const fn as_ptr(&self) -> *const T {
110,086 ( 0.03%)          self as *const [T] as *const T
      .               }
      .           
      .               /// Returns an unsafe mutable pointer to the slice's buffer.
      .               ///
      .               /// The caller must ensure that the slice outlives the pointer this
      .               /// function returns, or else it will end up pointing to garbage.
      .               ///
      .               /// Modifying the container referenced by this slice may cause its buffer
-- line 464 ----------------------------------------
-- line 476 ----------------------------------------
      .               ///     }
      .               /// }
      .               /// assert_eq!(x, &[3, 4, 6]);
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_unstable(feature = "const_ptr_offset", issue = "71499")]
      .               #[inline]
      .               pub const fn as_mut_ptr(&mut self) -> *mut T {
     12 ( 0.00%)          self as *mut [T] as *mut T
      .               }
      .           
      .               /// Returns the two raw pointers spanning the slice.
      .               ///
      .               /// The returned range is half-open, which means that the end pointer
      .               /// points *one past* the last element of the slice. This way, an empty
      .               /// slice is represented by two equal pointers, and the difference between
      .               /// the two pointers represents the size of the slice.
-- line 492 ----------------------------------------
-- line 582 ----------------------------------------
      .               /// v.swap(2, 4);
      .               /// assert!(v == ["a", "b", "e", "d", "c"]);
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_unstable(feature = "const_swap", issue = "83163")]
      .               #[inline]
      .               #[track_caller]
      .               pub const fn swap(&mut self, a: usize, b: usize) {
  5,896 ( 0.00%)          let _ = &self[a];
  9,472 ( 0.00%)          let _ = &self[b];
      .           
      .                   // SAFETY: we just checked that both `a` and `b` are in bounds
      .                   unsafe { self.swap_unchecked(a, b) }
      .               }
      .           
      .               /// Swaps two elements in the slice, without doing bounds checking.
      .               ///
      .               /// For a safe alternative see [`swap`].
-- line 599 ----------------------------------------
-- line 677 ----------------------------------------
      .           
      .                       // Because this function is first compiled in isolation,
      .                       // this check tells LLVM that the indexing below is
      .                       // in-bounds.  Then after inlining -- once the actual
      .                       // lengths of the slices are known -- it's removed.
      .                       let (a, b) = (&mut a[..n], &mut b[..n]);
      .           
      .                       for i in 0..n {
    281 ( 0.00%)                  mem::swap(&mut a[i], &mut b[n - 1 - i]);
      .                       }
      .                   }
      .               }
      .           
      .               /// Returns an iterator over the slice.
      .               ///
      .               /// # Examples
      .               ///
-- line 693 ----------------------------------------
-- line 1499 ----------------------------------------
      .               ///     assert_eq!(left, [1, 2, 3, 4, 5, 6]);
      .               ///     assert_eq!(right, []);
      .               /// }
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[inline]
      .               #[track_caller]
      .               pub fn split_at(&self, mid: usize) -> (&[T], &[T]) {
     18 ( 0.00%)          assert!(mid <= self.len());
      .                   // SAFETY: `[ptr; mid]` and `[mid; len]` are inside `self`, which
      .                   // fulfills the requirements of `from_raw_parts_mut`.
      .                   unsafe { self.split_at_unchecked(mid) }
      .               }
      .           
      .               /// Divides one mutable slice into two at an index.
      .               ///
      .               /// The first will contain all indices from `[0, mid)` (excluding
-- line 1515 ----------------------------------------
-- line 1530 ----------------------------------------
      .               /// left[1] = 2;
      .               /// right[1] = 4;
      .               /// assert_eq!(v, [1, 2, 3, 4, 5, 6]);
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[inline]
      .               #[track_caller]
      .               pub fn split_at_mut(&mut self, mid: usize) -> (&mut [T], &mut [T]) {
  2,326 ( 0.00%)          assert!(mid <= self.len());
      .                   // SAFETY: `[ptr; mid]` and `[mid; len]` are inside `self`, which
      .                   // fulfills the requirements of `from_raw_parts_mut`.
      .                   unsafe { self.split_at_mut_unchecked(mid) }
      .               }
      .           
      .               /// Divides one slice into two at an index, without doing bounds checking.
      .               ///
      .               /// The first will contain all indices from `[0, mid)` (excluding
-- line 1546 ----------------------------------------
-- line 1628 ----------------------------------------
      .               pub unsafe fn split_at_mut_unchecked(&mut self, mid: usize) -> (&mut [T], &mut [T]) {
      .                   let len = self.len();
      .                   let ptr = self.as_mut_ptr();
      .           
      .                   // SAFETY: Caller has to check that `0 <= mid <= self.len()`.
      .                   //
      .                   // `[ptr; mid]` and `[mid; len]` are not overlapping, so returning a mutable reference
      .                   // is fine.
    369 ( 0.00%)          unsafe { (from_raw_parts_mut(ptr, mid), from_raw_parts_mut(ptr.add(mid), len - mid)) }
      .               }
      .           
      .               /// Divides one slice into an array and a remainder slice at an index.
      .               ///
      .               /// The array will contain all indices from `[0, N)` (excluding
      .               /// the index `N` itself) and the slice will contain all
      .               /// indices from `[N, len)` (excluding the index `len` itself).
      .               ///
-- line 1644 ----------------------------------------
-- line 2113 ----------------------------------------
      .               /// assert!(!v.iter().any(|e| e == "hi"));
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[inline]
      .               pub fn contains(&self, x: &T) -> bool
      .               where
      .                   T: PartialEq,
      .               {
      4 ( 0.00%)          cmp::SliceContains::slice_contains(x, self)
      .               }
      .           
      .               /// Returns `true` if `needle` is a prefix of the slice.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let v = [10, 40, 30];
-- line 2129 ----------------------------------------
-- line 2142 ----------------------------------------
      .               /// assert!(v.starts_with(&[]));
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               pub fn starts_with(&self, needle: &[T]) -> bool
      .               where
      .                   T: PartialEq,
      .               {
      .                   let n = needle.len();
 21,447 ( 0.01%)          self.len() >= n && needle == &self[..n]
      .               }
      .           
      .               /// Returns `true` if `needle` is a suffix of the slice.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let v = [10, 40, 30];
-- line 2158 ----------------------------------------
-- line 2171 ----------------------------------------
      .               /// assert!(v.ends_with(&[]));
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               pub fn ends_with(&self, needle: &[T]) -> bool
      .               where
      .                   T: PartialEq,
      .               {
      .                   let (m, n) = (self.len(), needle.len());
    372 ( 0.00%)          m >= n && needle == &self[m - n..]
      .               }
      .           
      .               /// Returns a subslice with the prefix removed.
      .               ///
      .               /// If the slice starts with `prefix`, returns the subslice after the prefix, wrapped in `Some`.
      .               /// If `prefix` is empty, simply returns the original slice.
      .               ///
      .               /// If the slice does not start with `prefix`, returns `None`.
-- line 2187 ----------------------------------------
-- line 2293 ----------------------------------------
      .               /// s.insert(idx, num);
      .               /// assert_eq!(s, [0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 42, 55]);
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               pub fn binary_search(&self, x: &T) -> Result<usize, usize>
      .               where
      .                   T: Ord,
      .               {
      3 ( 0.00%)          self.binary_search_by(|p| p.cmp(x))
      .               }
      .           
      .               /// Binary searches this sorted slice with a comparator function.
      .               ///
      .               /// The comparator function should implement an order consistent
      .               /// with the sort order of the underlying slice, returning an
      .               /// order code that indicates whether its argument is `Less`,
      .               /// `Equal` or `Greater` the desired target.
-- line 2309 ----------------------------------------
-- line 2345 ----------------------------------------
      .               #[inline]
      .               pub fn binary_search_by<'a, F>(&'a self, mut f: F) -> Result<usize, usize>
      .               where
      .                   F: FnMut(&'a T) -> Ordering,
      .               {
      .                   let mut size = self.len();
      .                   let mut left = 0;
      .                   let mut right = size;
413,089 ( 0.11%)          while left < right {
439,058 ( 0.11%)              let mid = left + size / 2;
      .           
      .                       // SAFETY: the call is made safe by the following invariants:
      .                       // - `mid >= 0`
      .                       // - `mid < size`: `mid` is limited by `[left; right)` bound.
 92,188 ( 0.02%)              let cmp = f(unsafe { self.get_unchecked(mid) });
      .           
      .                       // The reason why we use if/else control flow rather than match
      .                       // is because match reorders comparison operations, which is perf sensitive.
      .                       // This is x86 asm for u8: https://rust.godbolt.org/z/8Y8Pra.
123,674 ( 0.03%)              if cmp == Less {
176,712 ( 0.05%)                  left = mid + 1;
 66,797 ( 0.02%)              } else if cmp == Greater {
      .                           right = mid;
      .                       } else {
      .                           // SAFETY: same as the `get_unchecked` above
      .                           unsafe { crate::intrinsics::assume(mid < self.len()) };
      .                           return Ok(mid);
      .                       }
      .           
372,000 ( 0.10%)              size = right - left;
      .                   }
      .                   Err(left)
      .               }
      .           
      .               /// Binary searches this sorted slice with a key extraction function.
      .               ///
      .               /// Assumes that the slice is sorted by the key, for instance with
      .               /// [`sort_by_key`] using the same key extraction function.
-- line 2382 ----------------------------------------
-- line 3203 ----------------------------------------
      .                   #[track_caller]
      .                   fn len_mismatch_fail(dst_len: usize, src_len: usize) -> ! {
      .                       panic!(
      .                           "source slice length ({}) does not match destination slice length ({})",
      .                           src_len, dst_len,
      .                       );
      .                   }
      .           
 18,034 ( 0.00%)          if self.len() != src.len() {
      .                       len_mismatch_fail(self.len(), src.len());
      .                   }
      .           
      .                   // SAFETY: `self` is valid for `self.len()` elements by definition, and `src` was
      .                   // checked to have the same length. The slices cannot overlap because
      .                   // mutable references are exclusive.
      .                   unsafe {
      .                       ptr::copy_nonoverlapping(src.as_ptr(), self.as_mut_ptr(), self.len());
-- line 3219 ----------------------------------------
-- line 3382 ----------------------------------------
      .                   }
      .                   let gcd: usize = gcd(mem::size_of::<T>(), mem::size_of::<U>());
      .                   let ts: usize = mem::size_of::<U>() / gcd;
      .                   let us: usize = mem::size_of::<T>() / gcd;
      .           
      .                   // Armed with this knowledge, we can find how many `U`s we can fit!
      .                   let us_len = self.len() / ts * us;
      .                   // And how many `T`s will be in the trailing slice!
  1,264 ( 0.00%)          let ts_len = self.len() % ts;
      .                   (us_len, ts_len)
      .               }
      .           
      .               /// Transmute the slice to a slice of another type, ensuring alignment of the types is
      .               /// maintained.
      .               ///
      .               /// This method splits the slice into three distinct slices: prefix, correctly aligned middle
      .               /// slice of a new type, and the suffix slice. The method may make the middle slice the greatest
-- line 3398 ----------------------------------------
-- line 3429 ----------------------------------------
      .                       return (self, &[], &[]);
      .                   }
      .           
      .                   // First, find at what point do we split between the first and 2nd slice. Easy with
      .                   // ptr.align_offset.
      .                   let ptr = self.as_ptr();
      .                   // SAFETY: See the `align_to_mut` method for the detailed safety comment.
      .                   let offset = unsafe { crate::ptr::align_offset(ptr, mem::align_of::<U>()) };
  1,264 ( 0.00%)          if offset > self.len() {
      .                       (self, &[], &[])
      .                   } else {
      .                       let (left, rest) = self.split_at(offset);
      .                       let (us_len, ts_len) = rest.align_to_offsets::<U>();
      .                       // SAFETY: now `rest` is definitely aligned, so `from_raw_parts` below is okay,
      .                       // since the caller guarantees that we can transmute `T` to `U` safely.
      .                       unsafe {
      .                           (
      .                               left,
      .                               from_raw_parts(rest.as_ptr() as *const U, us_len),
  1,264 ( 0.00%)                      from_raw_parts(rest.as_ptr().add(rest.len() - ts_len), ts_len),
      .                           )
      .                       }
      .                   }
      .               }
      .           
      .               /// Transmute the slice to a slice of another type, ensuring alignment of the types is
      .               /// maintained.
      .               ///
-- line 3456 ----------------------------------------

404,145 ( 0.10%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_borrowck/src/lib.rs
--------------------------------------------------------------------------------
Ir               

-- line 97 ----------------------------------------
      .           
      .               /// If true, the capture is behind a reference.
      .               by_ref: bool,
      .           }
      .           
      .           const DEREF_PROJECTION: &[PlaceElem<'_>; 1] = &[ProjectionElem::Deref];
      .           
      .           pub fn provide(providers: &mut Providers) {
      4 ( 0.00%)      *providers = Providers {
      .                   mir_borrowck: |tcx, did| {
     69 ( 0.00%)              if let Some(def) = ty::WithOptConstParam::try_lookup(did, tcx) {
      .                           tcx.mir_borrowck_const_arg(def)
      .                       } else {
    276 ( 0.00%)                  mir_borrowck(tcx, ty::WithOptConstParam::unknown(did))
      .                       }
      .                   },
      .                   mir_borrowck_const_arg: |tcx, (did, param_did)| {
      .                       mir_borrowck(tcx, ty::WithOptConstParam { did, const_param_did: Some(param_did) })
      .                   },
      .                   ..*providers
      .               };
      1 ( 0.00%)  }
      .           
    690 ( 0.00%)  fn mir_borrowck<'tcx>(
      .               tcx: TyCtxt<'tcx>,
      .               def: ty::WithOptConstParam<LocalDefId>,
      .           ) -> &'tcx BorrowCheckResult<'tcx> {
      .               let (input_body, promoted) = tcx.mir_promoted(def);
      .               debug!("run query mir_borrowck: {}", tcx.def_path_str(def.did.to_def_id()));
      .           
    897 ( 0.00%)      let opt_closure_req = tcx.infer_ctxt().with_opaque_type_inference(def.did).enter(|infcx| {
      .                   let input_body: &Body<'_> = &input_body.borrow();
      .                   let promoted: &IndexVec<_, _> = &promoted.borrow();
    966 ( 0.00%)          do_mir_borrowck(&infcx, input_body, promoted, false).0
    276 ( 0.00%)      });
      .               debug!("mir_borrowck done");
      .           
     69 ( 0.00%)      tcx.arena.alloc(opt_closure_req)
    552 ( 0.00%)  }
      .           
      .           /// Perform the actual borrow checking.
      .           ///
      .           /// If `return_body_with_facts` is true, then return the body with non-erased
      .           /// region ids on which the borrow checking was performed together with Polonius
      .           /// facts.
  1,518 ( 0.00%)  #[instrument(skip(infcx, input_body, input_promoted), level = "debug")]
      .           fn do_mir_borrowck<'a, 'tcx>(
      .               infcx: &InferCtxt<'a, 'tcx>,
      .               input_body: &Body<'tcx>,
      .               input_promoted: &IndexVec<Promoted, Body<'tcx>>,
      .               return_body_with_facts: bool,
      .           ) -> (BorrowCheckResult<'tcx>, Option<Box<BodyWithBorrowckFacts<'tcx>>>) {
    690 ( 0.00%)      let def = input_body.source.with_opt_param().as_local().unwrap();
      .           
      .               debug!(?def);
      .           
    138 ( 0.00%)      let tcx = infcx.tcx;
      .               let param_env = tcx.param_env(def.did);
     69 ( 0.00%)      let id = tcx.hir().local_def_id_to_hir_id(def.did);
      .           
    138 ( 0.00%)      let mut local_names = IndexVec::from_elem(None, &input_body.local_decls);
      .               for var_debug_info in &input_body.var_debug_info {
    729 ( 0.00%)          if let VarDebugInfoContents::Place(place) = var_debug_info.value {
    408 ( 0.00%)              if let Some(local) = place.as_local() {
    612 ( 0.00%)                  if let Some(prev_name) = local_names[local] {
      .                               if var_debug_info.name != prev_name {
      .                                   span_bug!(
      .                                       var_debug_info.source_info.span,
      .                                       "local {:?} has many names (`{}` vs `{}`)",
      .                                       local,
      .                                       prev_name,
      .                                       var_debug_info.name
      .                                   );
      .                               }
      .                           }
    612 ( 0.00%)                  local_names[local] = Some(var_debug_info.name);
      .                       }
      .                   }
      .               }
      .           
      .               // Gather the upvars of a closure, if any.
    276 ( 0.00%)      let tables = tcx.typeck_opt_const_arg(def);
    138 ( 0.00%)      if let Some(ErrorReported) = tables.tainted_by_errors {
      .                   infcx.set_tainted_by_errors();
      .               }
    276 ( 0.00%)      let upvars: Vec<_> = tables
      .                   .closure_min_captures_flattened(def.did.to_def_id())
      .                   .map(|captured_place| {
      .                       let capture = captured_place.info.capture_kind;
      .                       let by_ref = match capture {
      .                           ty::UpvarCapture::ByValue => false,
      .                           ty::UpvarCapture::ByRef(..) => true,
      .                       };
      .                       Upvar { place: captured_place.clone(), by_ref }
      .                   })
      .                   .collect();
      .           
      .               // Replace all regions with fresh inference variables. This
      .               // requires first making our own copy of the MIR. This copy will
      .               // be modified (in place) to contain non-lexical lifetimes. It
      .               // will have a lifetime tied to the inference context.
    138 ( 0.00%)      let mut body_owned = input_body.clone();
      .               let mut promoted = input_promoted.clone();
      .               let free_regions =
    207 ( 0.00%)          nll::replace_regions_in_mir(infcx, param_env, &mut body_owned, &mut promoted);
      .               let body = &body_owned; // no further changes
      .           
     69 ( 0.00%)      let location_table_owned = LocationTable::new(body);
      .               let location_table = &location_table_owned;
      .           
      .               let mut errors_buffer = Vec::new();
    207 ( 0.00%)      let (move_data, move_errors): (MoveData<'tcx>, Vec<(Place<'tcx>, MoveError<'tcx>)>) =
    483 ( 0.00%)          match MoveData::gather_moves(&body, tcx, param_env) {
    414 ( 0.00%)              Ok(move_data) => (move_data, Vec::new()),
      .                       Err((move_data, move_errors)) => (move_data, move_errors),
      .                   };
      .               let promoted_errors = promoted
      .                   .iter_enumerated()
      .                   .map(|(idx, body)| (idx, MoveData::gather_moves(&body, tcx, param_env)));
      .           
    414 ( 0.00%)      let mdpe = MoveDataParamEnv { move_data, param_env };
      .           
    552 ( 0.00%)      let mut flow_inits = MaybeInitializedPlaces::new(tcx, &body, &mdpe)
     69 ( 0.00%)          .into_engine(tcx, &body)
      .                   .pass_name("borrowck")
      .                   .iterate_to_fixpoint()
      .                   .into_results_cursor(&body);
      .           
    828 ( 0.00%)      let locals_are_invalidated_at_exit = tcx.hir().body_owner_kind(id).is_fn_or_closure();
      .               let borrow_set =
    690 ( 0.00%)          Rc::new(BorrowSet::build(tcx, body, locals_are_invalidated_at_exit, &mdpe.move_data));
      .           
    345 ( 0.00%)      let use_polonius = return_body_with_facts || infcx.tcx.sess.opts.debugging_opts.polonius;
      .           
      .               // Compute non-lexical lifetimes.
      .               let nll::NllOutput {
    207 ( 0.00%)          regioncx,
    276 ( 0.00%)          opaque_type_values,
    138 ( 0.00%)          polonius_input,
    207 ( 0.00%)          polonius_output,
    276 ( 0.00%)          opt_closure_req,
    690 ( 0.00%)          nll_errors,
  1,242 ( 0.00%)      } = nll::compute_regions(
      .                   infcx,
  1,104 ( 0.00%)          free_regions,
      .                   body,
      .                   &promoted,
      .                   location_table,
      .                   param_env,
      .                   &mut flow_inits,
      .                   &mdpe.move_data,
      .                   &borrow_set,
      .                   &upvars,
      .                   use_polonius,
      .               );
      .           
      .               // Dump MIR results into a file, if that is enabled. This let us
      .               // write unit-tests, as well as helping with debugging.
    207 ( 0.00%)      nll::dump_mir_results(infcx, &body, &regioncx, &opt_closure_req);
      .           
      .               // We also have a `#[rustc_regions]` annotation that causes us to dump
      .               // information.
    138 ( 0.00%)      nll::dump_annotation(
      .                   infcx,
      .                   &body,
      .                   &regioncx,
      .                   &opt_closure_req,
      .                   &opaque_type_values,
      .                   &mut errors_buffer,
      .               );
      .           
      .               // The various `flow_*` structures can be large. We drop `flow_inits` here
      .               // so it doesn't overlap with the others below. This reduces peak memory
      .               // usage significantly on some benchmarks.
  1,104 ( 0.00%)      drop(flow_inits);
      .           
     69 ( 0.00%)      let regioncx = Rc::new(regioncx);
      .           
    414 ( 0.00%)      let flow_borrows = Borrows::new(tcx, body, &regioncx, &borrow_set)
     69 ( 0.00%)          .into_engine(tcx, body)
      .                   .pass_name("borrowck")
      .                   .iterate_to_fixpoint();
    414 ( 0.00%)      let flow_uninits = MaybeUninitializedPlaces::new(tcx, body, &mdpe)
     69 ( 0.00%)          .into_engine(tcx, body)
      .                   .pass_name("borrowck")
      .                   .iterate_to_fixpoint();
    414 ( 0.00%)      let flow_ever_inits = EverInitializedPlaces::new(tcx, body, &mdpe)
     69 ( 0.00%)          .into_engine(tcx, body)
      .                   .pass_name("borrowck")
      .                   .iterate_to_fixpoint();
      .           
    138 ( 0.00%)      let movable_generator = !matches!(
    414 ( 0.00%)          tcx.hir().get(id),
      .                   Node::Expr(&hir::Expr {
      .                       kind: hir::ExprKind::Closure(.., Some(hir::Movability::Static)),
      .                       ..
      .                   })
      .               );
      .           
      .               for (idx, move_data_results) in promoted_errors {
      .                   let promoted_body = &promoted[idx];
-- line 297 ----------------------------------------
-- line 325 ----------------------------------------
      .                       };
      .                       promoted_mbcx.report_move_errors(move_errors);
      .                       errors_buffer = promoted_mbcx.errors_buffer;
      .                   };
      .               }
      .           
      .               let dominators = body.dominators();
      .           
  3,105 ( 0.00%)      let mut mbcx = MirBorrowckCtxt {
      .                   infcx,
      .                   param_env,
      .                   body,
      .                   move_data: &mdpe.move_data,
      .                   location_table,
      .                   movable_generator,
      .                   locals_are_invalidated_at_exit,
      .                   fn_self_span_reported: Default::default(),
      .                   access_place_error_reported: Default::default(),
      .                   reservation_error_reported: Default::default(),
      .                   reservation_warnings: Default::default(),
      .                   move_error_reported: BTreeMap::new(),
      .                   uninitialized_error_reported: Default::default(),
    276 ( 0.00%)          errors_buffer,
     69 ( 0.00%)          regioncx: Rc::clone(&regioncx),
      .                   used_mut: Default::default(),
      .                   used_mut_upvars: SmallVec::new(),
     69 ( 0.00%)          borrow_set: Rc::clone(&borrow_set),
    414 ( 0.00%)          dominators,
    276 ( 0.00%)          upvars,
    276 ( 0.00%)          local_names,
      .                   region_names: RefCell::default(),
      .                   next_region_name: RefCell::new(1),
      .                   polonius_output,
      .               };
      .           
      .               // Compute and report region errors, if any.
    207 ( 0.00%)      mbcx.report_region_errors(nll_errors);
      .           
      .               let results = BorrowckResults {
    414 ( 0.00%)          ever_inits: flow_ever_inits,
    552 ( 0.00%)          uninits: flow_uninits,
    759 ( 0.00%)          borrows: flow_borrows,
      .               };
      .           
    414 ( 0.00%)      mbcx.report_move_errors(move_errors);
      .           
     69 ( 0.00%)      rustc_mir_dataflow::visit_results(
      .                   body,
     69 ( 0.00%)          traversal::reverse_postorder(body).map(|(bb, _)| bb),
      .                   &results,
      .                   &mut mbcx,
      .               );
      .           
      .               // Convert any reservation warnings into lints.
      .               let reservation_warnings = mem::take(&mut mbcx.reservation_warnings);
      .               for (_, (place, span, location, bk, borrow)) in reservation_warnings {
      .                   let mut initial_diag = mbcx.report_conflicting_borrow(location, (place, span), bk, &borrow);
-- line 381 ----------------------------------------
-- line 406 ----------------------------------------
      .               // For each non-user used mutable variable, check if it's been assigned from
      .               // a user-declared local. If so, then put that local into the used_mut set.
      .               // Note that this set is expected to be small - only upvars from closures
      .               // would have a chance of erroneously adding non-user-defined mutable vars
      .               // to the set.
      .               let temporary_used_locals: FxHashSet<Local> = mbcx
      .                   .used_mut
      .                   .iter()
     69 ( 0.00%)          .filter(|&local| !mbcx.body.local_decls[*local].is_user_variable())
      .                   .cloned()
      .                   .collect();
      .               // For the remaining unused locals that are marked as mutable, we avoid linting any that
      .               // were never initialized. These locals may have been removed as unreachable code; or will be
      .               // linted as unused variables.
      .               let unused_mut_locals =
     69 ( 0.00%)          mbcx.body.mut_vars_iter().filter(|local| !mbcx.used_mut.contains(local)).collect();
    276 ( 0.00%)      mbcx.gather_used_muts(temporary_used_locals, unused_mut_locals);
      .           
      .               debug!("mbcx.used_mut: {:?}", mbcx.used_mut);
    276 ( 0.00%)      let used_mut = mbcx.used_mut;
     69 ( 0.00%)      for local in mbcx.body.mut_vars_and_args_iter().filter(|local| !used_mut.contains(local)) {
      .                   let local_decl = &mbcx.body.local_decls[local];
      .                   let lint_root = match &mbcx.body.source_scopes[local_decl.source_info.scope].local_data {
      .                       ClearCrossCrate::Set(data) => data.lint_root,
      .                       _ => continue,
      .                   };
      .           
      .                   // Skip over locals that begin with an underscore or have no name
      .                   match mbcx.local_names[local] {
-- line 434 ----------------------------------------
-- line 455 ----------------------------------------
      .                               String::new(),
      .                               Applicability::MachineApplicable,
      .                           )
      .                           .emit();
      .                   })
      .               }
      .           
      .               // Buffer any move errors that we collected and de-duplicated.
    621 ( 0.00%)      for (_, (_, diag)) in mbcx.move_error_reported {
      .                   diag.buffer(&mut mbcx.errors_buffer);
      .               }
      .           
     69 ( 0.00%)      if !mbcx.errors_buffer.is_empty() {
      .                   mbcx.errors_buffer.sort_by_key(|diag| diag.sort_span);
      .           
      .                   for diag in mbcx.errors_buffer.drain(..) {
      .                       mbcx.infcx.tcx.sess.diagnostic().emit_diagnostic(&diag);
      .                   }
      .               }
      .           
      .               let result = BorrowCheckResult {
    276 ( 0.00%)          concrete_opaque_types: opaque_type_values,
    345 ( 0.00%)          closure_requirements: opt_closure_req,
    414 ( 0.00%)          used_mut_upvars: mbcx.used_mut_upvars,
      .               };
      .           
    138 ( 0.00%)      let body_with_facts = if return_body_with_facts {
      .                   let output_facts = mbcx.polonius_output.expect("Polonius output was not computed");
      .                   Some(Box::new(BodyWithBorrowckFacts {
      .                       body: body_owned,
      .                       input_facts: *polonius_input.expect("Polonius input facts were not generated"),
      .                       output_facts,
      .                       location_table: location_table_owned,
      .                   }))
      .               } else {
      .                   None
      .               };
      .           
      .               debug!("do_mir_borrowck: result = {:#?}", result);
      .           
    966 ( 0.00%)      (result, body_with_facts)
    828 ( 0.00%)  }
      .           
      .           /// A `Body` with information computed by the borrow checker. This struct is
      .           /// intended to be consumed by compiler consumers.
      .           ///
      .           /// We need to include the MIR body here because the region identifiers must
      .           /// match the ones in the Polonius facts.
      .           pub struct BodyWithBorrowckFacts<'tcx> {
      .               /// A mir body that contains region identifiers.
-- line 504 ----------------------------------------
-- line 608 ----------------------------------------
      .           // Check that:
      .           // 1. assignments are always made to mutable locations (FIXME: does that still really go here?)
      .           // 2. loans made in overlapping scopes do not conflict
      .           // 3. assignments do not affect things loaned out as immutable
      .           // 4. moves do not affect things loaned out in any way
      .           impl<'cx, 'tcx> rustc_mir_dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtxt<'cx, 'tcx> {
      .               type FlowState = Flows<'cx, 'tcx>;
      .           
 68,310 ( 0.02%)      fn visit_statement_before_primary_effect(
      .                   &mut self,
      .                   flow_state: &Flows<'cx, 'tcx>,
      .                   stmt: &'cx Statement<'tcx>,
      .                   location: Location,
      .               ) {
      .                   debug!("MirBorrowckCtxt::process_statement({:?}, {:?}): {:?}", location, stmt, flow_state);
      .                   let span = stmt.source_info.span;
      .           
      .                   self.check_activations(location, span, flow_state);
      .           
 37,950 ( 0.01%)          match &stmt.kind {
  5,452 ( 0.00%)              StatementKind::Assign(box (lhs, ref rhs)) => {
      .                           self.consume_rvalue(location, (rhs, span), flow_state);
      .           
 10,904 ( 0.00%)                  self.mutate_place(location, (*lhs, span), Shallow(None), flow_state);
      .                       }
    125 ( 0.00%)              StatementKind::FakeRead(box (_, ref place)) => {
      .                           // Read for match doesn't access any memory and is used to
      .                           // assert that a place is safe and live. So we don't have to
      .                           // do any checks here.
      .                           //
      .                           // FIXME: Remove check that the place is initialized. This is
      .                           // needed for now because matches don't have never patterns yet.
      .                           // So this is the only place we prevent
      .                           //      let x: !;
      .                           //      match x {};
      .                           // from compiling.
    500 ( 0.00%)                  self.check_if_path_or_subpath_is_moved(
      .                               location,
      .                               InitializationRequiringAction::Use,
  1,125 ( 0.00%)                      (place.as_ref(), span),
      .                               flow_state,
      .                           );
      .                       }
      .                       StatementKind::SetDiscriminant { place, variant_index: _ } => {
      .                           self.mutate_place(location, (**place, span), Shallow(None), flow_state);
      .                       }
      .                       StatementKind::CopyNonOverlapping(box rustc_middle::mir::CopyNonOverlapping {
      .                           ..
-- line 655 ----------------------------------------
-- line 663 ----------------------------------------
      .                       | StatementKind::Coverage(..)
      .                       | StatementKind::AscribeUserType(..)
      .                       | StatementKind::Retag { .. }
      .                       | StatementKind::StorageLive(..) => {
      .                           // `Nop`, `AscribeUserType`, `Retag`, and `StorageLive` are irrelevant
      .                           // to borrow check.
      .                       }
      .                       StatementKind::StorageDead(local) => {
 14,286 ( 0.00%)                  self.access_place(
      .                               location,
 26,191 ( 0.01%)                      (Place::from(*local), span),
      .                               (Shallow(None), Write(WriteKind::StorageDeadOrDrop)),
      .                               LocalMutationIsAllowed::Yes,
      .                               flow_state,
      .                           );
      .                       }
      .                   }
 60,720 ( 0.02%)      }
      .           
  8,960 ( 0.00%)      fn visit_terminator_before_primary_effect(
      .                   &mut self,
      .                   flow_state: &Flows<'cx, 'tcx>,
      .                   term: &'cx Terminator<'tcx>,
      .                   loc: Location,
      .               ) {
      .                   debug!("MirBorrowckCtxt::process_terminator({:?}, {:?}): {:?}", loc, term, flow_state);
      .                   let span = term.source_info.span;
      .           
      .                   self.check_activations(loc, span, flow_state);
      .           
  5,600 ( 0.00%)          match term.kind {
    652 ( 0.00%)              TerminatorKind::SwitchInt { ref discr, switch_ty: _, targets: _ } => {
    652 ( 0.00%)                  self.consume_operand(loc, (discr, span), flow_state);
      .                       }
      .                       TerminatorKind::Drop { place, target: _, unwind: _ } => {
      .                           debug!(
      .                               "visit_terminator_drop \
      .                                loc: {:?} term: {:?} place: {:?} span: {:?}",
      .                               loc, term, place, span
      .                           );
      .           
-- line 703 ----------------------------------------
-- line 714 ----------------------------------------
      .                           value: ref new_value,
      .                           target: _,
      .                           unwind: _,
      .                       } => {
      .                           self.mutate_place(loc, (drop_place, span), Deep, flow_state);
      .                           self.consume_operand(loc, (new_value, span), flow_state);
      .                       }
      .                       TerminatorKind::Call {
    765 ( 0.00%)                  ref func,
      .                           ref args,
      .                           ref destination,
      .                           cleanup: _,
      .                           from_hir_call: _,
      .                           fn_span: _,
      .                       } => {
  2,040 ( 0.00%)                  self.consume_operand(loc, (func, span), flow_state);
      .                           for arg in args {
  2,610 ( 0.00%)                      self.consume_operand(loc, (arg, span), flow_state);
      .                           }
    995 ( 0.00%)                  if let Some((dest, _ /*bb*/)) = *destination {
  2,760 ( 0.00%)                      self.mutate_place(loc, (dest, span), Deep, flow_state);
      .                           }
      .                       }
  1,776 ( 0.00%)              TerminatorKind::Assert { ref cond, expected: _, ref msg, target: _, cleanup: _ } => {
    296 ( 0.00%)                  self.consume_operand(loc, (cond, span), flow_state);
      .                           use rustc_middle::mir::AssertKind;
    592 ( 0.00%)                  if let AssertKind::BoundsCheck { ref len, ref index } = *msg {
      .                               self.consume_operand(loc, (len, span), flow_state);
      .                               self.consume_operand(loc, (index, span), flow_state);
      .                           }
      .                       }
      .           
      .                       TerminatorKind::Yield { ref value, resume: _, resume_arg, drop: _ } => {
      .                           self.consume_operand(loc, (value, span), flow_state);
      .                           self.mutate_place(loc, (resume_arg, span), Deep, flow_state);
-- line 748 ----------------------------------------
-- line 790 ----------------------------------------
      .                       | TerminatorKind::Resume
      .                       | TerminatorKind::Return
      .                       | TerminatorKind::GeneratorDrop
      .                       | TerminatorKind::FalseEdge { real_target: _, imaginary_target: _ }
      .                       | TerminatorKind::FalseUnwind { real_target: _, unwind: _ } => {
      .                           // no data used, thus irrelevant to borrowck
      .                       }
      .                   }
  7,656 ( 0.00%)      }
      .           
  7,840 ( 0.00%)      fn visit_terminator_after_primary_effect(
      .                   &mut self,
      .                   flow_state: &Flows<'cx, 'tcx>,
      .                   term: &'cx Terminator<'tcx>,
      .                   loc: Location,
      .               ) {
  1,120 ( 0.00%)          let span = term.source_info.span;
      .           
  4,480 ( 0.00%)          match term.kind {
      .                       TerminatorKind::Yield { value: _, resume: _, resume_arg: _, drop: _ } => {
      .                           if self.movable_generator {
      .                               // Look for any active borrows to locals
      .                               let borrow_set = self.borrow_set.clone();
      .                               for i in flow_state.borrows.iter() {
      .                                   let borrow = &borrow_set[i];
      .                                   self.check_for_local_borrow(borrow, span);
      .                               }
-- line 816 ----------------------------------------
-- line 817 ----------------------------------------
      .                           }
      .                       }
      .           
      .                       TerminatorKind::Resume | TerminatorKind::Return | TerminatorKind::GeneratorDrop => {
      .                           // Returning from the function implicitly kills storage for all locals and statics.
      .                           // Often, the storage will already have been killed by an explicit
      .                           // StorageDead, but we don't always emit those (notably on unwind paths),
      .                           // so this "extra check" serves as a kind of backup.
    222 ( 0.00%)                  let borrow_set = self.borrow_set.clone();
      .                           for i in flow_state.borrows.iter() {
      .                               let borrow = &borrow_set[i];
      .                               self.check_for_invalidation_at_exit(loc, borrow, span);
      .                           }
      .                       }
      .           
      .                       TerminatorKind::Abort
      .                       | TerminatorKind::Assert { .. }
-- line 833 ----------------------------------------
-- line 836 ----------------------------------------
      .                       | TerminatorKind::DropAndReplace { .. }
      .                       | TerminatorKind::FalseEdge { real_target: _, imaginary_target: _ }
      .                       | TerminatorKind::FalseUnwind { real_target: _, unwind: _ }
      .                       | TerminatorKind::Goto { .. }
      .                       | TerminatorKind::SwitchInt { .. }
      .                       | TerminatorKind::Unreachable
      .                       | TerminatorKind::InlineAsm { .. } => {}
      .                   }
  8,960 ( 0.00%)      }
      .           }
      .           
      .           use self::AccessDepth::{Deep, Shallow};
      .           use self::ReadOrWrite::{Activation, Read, Reservation, Write};
      .           
      .           #[derive(Copy, Clone, PartialEq, Eq, Debug)]
      .           enum ArtificialField {
      .               ArrayLength,
-- line 852 ----------------------------------------
-- line 913 ----------------------------------------
      .           /// When checking permissions for a place access, this flag is used to indicate that an immutable
      .           /// local place can be mutated.
      .           //
      .           // FIXME: @nikomatsakis suggested that this flag could be removed with the following modifications:
      .           // - Merge `check_access_permissions()` and `check_if_reassignment_to_immutable_state()`.
      .           // - Split `is_mutable()` into `is_assignable()` (can be directly assigned) and
      .           //   `is_declared_mutable()`.
      .           // - Take flow state into consideration in `is_assignable()` for local variables.
  2,633 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Debug)]
      .           enum LocalMutationIsAllowed {
      .               Yes,
      .               /// We want use of immutable upvars to cause a "write to immutable upvar"
      .               /// error, not an "reassignment" error.
      .               ExceptUpvars,
      .               No,
      .           }
      .           
-- line 929 ----------------------------------------
-- line 970 ----------------------------------------
      .               }
      .           
      .               /// Checks an access to the given place to see if it is allowed. Examines the set of borrows
      .               /// that are in scope, as well as which paths have been initialized, to ensure that (a) the
      .               /// place is initialized and (b) it is not borrowed in some way that would prevent this
      .               /// access.
      .               ///
      .               /// Returns `true` if an error is reported.
133,328 ( 0.03%)      fn access_place(
      .                   &mut self,
      .                   location: Location,
      .                   place_span: (Place<'tcx>, Span),
      .                   kind: (AccessDepth, ReadOrWrite),
      .                   is_local_mutation_allowed: LocalMutationIsAllowed,
      .                   flow_state: &Flows<'cx, 'tcx>,
      .               ) {
      .                   let (sd, rw) = kind;
      .           
 33,332 ( 0.01%)          if let Activation(_, borrow_index) = rw {
     20 ( 0.00%)              if self.reservation_error_reported.contains(&place_span.0) {
      .                           debug!(
      .                               "skipping access_place for activation of invalid reservation \
      .                                place: {:?} borrow_index: {:?}",
      .                               place_span.0, borrow_index
      .                           );
      .                           return;
      .                       }
      .                   }
      .           
      .                   // Check is_empty() first because it's the common case, and doing that
      .                   // way we avoid the clone() call.
  8,333 ( 0.00%)          if !self.access_place_error_reported.is_empty()
      .                       && self.access_place_error_reported.contains(&(place_span.0, place_span.1))
      .                   {
      .                       debug!(
      .                           "access_place: suppressing error place_span=`{:?}` kind=`{:?}`",
      .                           place_span, kind
      .                       );
      .                       return;
      .                   }
      .           
 49,998 ( 0.01%)          let mutability_error = self.check_access_permissions(
 33,332 ( 0.01%)              place_span,
      .                       rw,
      .                       is_local_mutation_allowed,
      .                       flow_state,
      .                       location,
      .                   );
      .                   let conflict_error =
 91,663 ( 0.02%)              self.check_access_for_conflict(location, place_span, sd, rw, flow_state);
      .           
 24,999 ( 0.01%)          if let (Activation(_, borrow_idx), true) = (kind.1, conflict_error) {
      .                       // Suppress this warning when there's an error being emitted for the
      .                       // same borrow: fixing the error is likely to fix the warning.
      .                       self.reservation_warnings.remove(&borrow_idx);
      .                   }
      .           
 24,999 ( 0.01%)          if conflict_error || mutability_error {
      .                       debug!("access_place: logging error place_span=`{:?}` kind=`{:?}`", place_span, kind);
      .           
      .                       self.access_place_error_reported.insert((place_span.0, place_span.1));
      .                   }
 66,664 ( 0.02%)      }
      .           
      .               fn check_access_for_conflict(
      .                   &mut self,
      .                   location: Location,
      .                   place_span: (Place<'tcx>, Span),
      .                   sd: AccessDepth,
      .                   rw: ReadOrWrite,
      .                   flow_state: &Flows<'cx, 'tcx>,
      .               ) -> bool {
      .                   debug!(
      .                       "check_access_for_conflict(location={:?}, place_span={:?}, sd={:?}, rw={:?})",
      .                       location, place_span, sd, rw,
      .                   );
      .           
  8,333 ( 0.00%)          let mut error_reported = false;
 24,999 ( 0.01%)          let tcx = self.infcx.tcx;
      .                   let body = self.body;
 16,666 ( 0.00%)          let borrow_set = self.borrow_set.clone();
      .           
      .                   // Use polonius output if it has been enabled.
 16,666 ( 0.00%)          let polonius_output = self.polonius_output.clone();
      .                   let borrows_in_scope = if let Some(polonius) = &polonius_output {
      .                       let location = self.location_table.start_index(location);
      .                       Either::Left(polonius.errors_at(location).iter().copied())
      .                   } else {
      .                       Either::Right(flow_state.borrows.iter())
      .                   };
      .           
108,329 ( 0.03%)          each_borrow_involving_path(
      .                       self,
      .                       tcx,
      .                       body,
      .                       location,
 49,998 ( 0.01%)              (sd, place_span.0),
      .                       &borrow_set,
 49,998 ( 0.01%)              borrows_in_scope,
 91,793 ( 0.02%)              |this, borrow_index, borrow| match (rw, borrow.kind) {
      .                           // Obviously an activation is compatible with its own
      .                           // reservation (or even prior activating uses of same
      .                           // borrow); so don't check if they interfere.
      .                           //
      .                           // NOTE: *reservations* do conflict with themselves;
      .                           // thus aren't injecting unsoundenss w/ this check.)
     10 ( 0.00%)                  (Activation(_, activating), _) if activating == borrow_index => {
      .                               debug!(
      .                                   "check_access_for_conflict place_span: {:?} sd: {:?} rw: {:?} \
      .                                    skipping {:?} b/c activation of same borrow_index",
      .                                   place_span,
      .                                   sd,
      .                                   rw,
      .                                   (borrow_index, borrow),
      .                               );
-- line 1084 ----------------------------------------
-- line 1179 ----------------------------------------
      .                                   }
      .                               }
      .                               Control::Break
      .                           }
      .                       },
      .                   );
      .           
      .                   error_reported
 24,999 ( 0.01%)      }
      .           
 29,560 ( 0.01%)      fn mutate_place(
      .                   &mut self,
      .                   location: Location,
      .                   place_span: (Place<'tcx>, Span),
      .                   kind: AccessDepth,
      .                   flow_state: &Flows<'cx, 'tcx>,
      .               ) {
      .                   // Write of P[i] or *P requires P init'd.
 26,604 ( 0.01%)          self.check_if_assigned_path_is_moved(location, place_span, flow_state);
      .           
      .                   // Special case: you can assign an immutable local variable
      .                   // (e.g., `x = ...`) so long as it has never been initialized
      .                   // before (at this point in the flow).
  2,956 ( 0.00%)          if let Some(local) = place_span.0.as_local() {
 11,696 ( 0.00%)              if let Mutability::Not = self.body.local_decls[local].mutability {
      .                           // check for reassignments to immutable local variables
      .                           self.check_if_reassignment_to_immutable_state(
      .                               location, local, place_span, flow_state,
      .                           );
      .                           return;
      .                       }
      .                   }
      .           
      .                   // Otherwise, use the normal access permission rules.
 31,812 ( 0.01%)          self.access_place(
      .                       location,
 10,604 ( 0.00%)              place_span,
      .                       (kind, Write(WriteKind::Mutate)),
      .                       LocalMutationIsAllowed::No,
      .                       flow_state,
      .                   );
 23,648 ( 0.01%)      }
      .           
      .               fn consume_rvalue(
      .                   &mut self,
      .                   location: Location,
      .                   (rvalue, span): (&'cx Rvalue<'tcx>, Span),
      .                   flow_state: &Flows<'cx, 'tcx>,
      .               ) {
 16,356 ( 0.00%)          match *rvalue {
    138 ( 0.00%)              Rvalue::Ref(_ /*rgn*/, bk, place) => {
    524 ( 0.00%)                  let access_kind = match bk {
      .                               BorrowKind::Shallow => {
      .                                   (Shallow(Some(ArtificialField::ShallowBorrow)), Read(ReadKind::Borrow(bk)))
      .                               }
      .                               BorrowKind::Shared => (Deep, Read(ReadKind::Borrow(bk))),
      .                               BorrowKind::Unique | BorrowKind::Mut { .. } => {
      .                                   let wk = WriteKind::MutableBorrow(bk);
     28 ( 0.00%)                          if allow_two_phase_borrow(bk) {
      .                                       (Deep, Reservation(wk))
      .                                   } else {
      .                                       (Deep, Write(wk))
      .                                   }
      .                               }
      .                           };
      .           
    966 ( 0.00%)                  self.access_place(
      .                               location,
    184 ( 0.00%)                      (place, span),
      .                               access_kind,
      .                               LocalMutationIsAllowed::No,
      .                               flow_state,
      .                           );
      .           
      .                           let action = if bk == BorrowKind::Shallow {
      .                               InitializationRequiringAction::MatchOn
      .                           } else {
      .                               InitializationRequiringAction::Borrow
      .                           };
      .           
    322 ( 0.00%)                  self.check_if_path_or_subpath_is_moved(
      .                               location,
      .                               action,
    322 ( 0.00%)                      (place.as_ref(), span),
      .                               flow_state,
      .                           );
      .                       }
      .           
      .                       Rvalue::AddressOf(mutability, place) => {
      .                           let access_kind = match mutability {
      .                               Mutability::Mut => (
      .                                   Deep,
-- line 1270 ----------------------------------------
-- line 1302 ----------------------------------------
      .                       }
      .           
      .                       Rvalue::Len(place) | Rvalue::Discriminant(place) => {
      .                           let af = match *rvalue {
      .                               Rvalue::Len(..) => Some(ArtificialField::ArrayLength),
      .                               Rvalue::Discriminant(..) => None,
      .                               _ => unreachable!(),
      .                           };
     64 ( 0.00%)                  self.access_place(
      .                               location,
     16 ( 0.00%)                      (place, span),
      .                               (Shallow(af), Read(ReadKind::Copy)),
      .                               LocalMutationIsAllowed::No,
      .                               flow_state,
      .                           );
     28 ( 0.00%)                  self.check_if_path_or_subpath_is_moved(
      .                               location,
      .                               InitializationRequiringAction::Use,
     28 ( 0.00%)                      (place.as_ref(), span),
      .                               flow_state,
      .                           );
      .                       }
      .           
      .                       Rvalue::BinaryOp(_bin_op, box (ref operand1, ref operand2))
      .                       | Rvalue::CheckedBinaryOp(_bin_op, box (ref operand1, ref operand2)) => {
  5,150 ( 0.00%)                  self.consume_operand(location, (operand1, span), flow_state);
  3,605 ( 0.00%)                  self.consume_operand(location, (operand2, span), flow_state);
      .                       }
      .           
      .                       Rvalue::NullaryOp(_op, _ty) => {
      .                           // nullary ops take no dynamic input; no borrowck effect.
      .                       }
      .           
      .                       Rvalue::Aggregate(ref aggregate_kind, ref operands) => {
      .                           // We need to report back the list of mutable upvars that were
      .                           // moved into the closure and subsequently used by the closure,
      .                           // in order to populate our used_mut set.
  2,043 ( 0.00%)                  match **aggregate_kind {
      .                               AggregateKind::Closure(def_id, _) | AggregateKind::Generator(def_id, _, _) => {
      .                                   let BorrowCheckResult { used_mut_upvars, .. } =
      .                                       self.infcx.tcx.mir_borrowck(def_id.expect_local());
      .                                   debug!("{:?} used_mut_upvars={:?}", def_id, used_mut_upvars);
      .                                   for field in used_mut_upvars {
      .                                       self.propagate_closure_used_mut_upvar(&operands[field.index()]);
      .                                   }
      .                               }
-- line 1347 ----------------------------------------
-- line 1448 ----------------------------------------
      .                               }
      .                               _ => propagate_closure_used_mut_place(self, place),
      .                           }
      .                       }
      .                       Operand::Constant(..) => {}
      .                   }
      .               }
      .           
 43,908 ( 0.01%)      fn consume_operand(
      .                   &mut self,
      .                   location: Location,
      .                   (operand, span): (&'cx Operand<'tcx>, Span),
      .                   flow_state: &Flows<'cx, 'tcx>,
      .               ) {
 30,542 ( 0.01%)          match *operand {
  2,946 ( 0.00%)              Operand::Copy(place) => {
      .                           // copy of place: check if this is "copy of frozen path"
      .                           // (FIXME: see check_loans.rs)
  5,892 ( 0.00%)                  self.access_place(
      .                               location,
  4,910 ( 0.00%)                      (place, span),
      .                               (Deep, Read(ReadKind::Copy)),
      .                               LocalMutationIsAllowed::No,
      .                               flow_state,
      .                           );
      .           
      .                           // Finally, check if path was already moved.
      .                           self.check_if_path_or_subpath_is_moved(
      .                               location,
      .                               InitializationRequiringAction::Use,
      .                               (place.as_ref(), span),
      .                               flow_state,
      .                           );
      .                       }
  6,777 ( 0.00%)              Operand::Move(place) => {
      .                           // move of place: check if this is move of already borrowed path
 19,935 ( 0.01%)                  self.access_place(
      .                               location,
 11,295 ( 0.00%)                      (place, span),
      .                               (Deep, Write(WriteKind::Move)),
      .                               LocalMutationIsAllowed::Yes,
      .                               flow_state,
      .                           );
      .           
      .                           // Finally, check if path was already moved.
  5,496 ( 0.00%)                  self.check_if_path_or_subpath_is_moved(
      .                               location,
      .                               InitializationRequiringAction::Use,
  4,122 ( 0.00%)                      (place.as_ref(), span),
      .                               flow_state,
      .                           );
      .                       }
      .                       Operand::Constant(_) => {}
      .                   }
 29,272 ( 0.01%)      }
      .           
      .               /// Checks whether a borrow of this place is invalidated when the function
      .               /// exits
      .               fn check_for_invalidation_at_exit(
      .                   &mut self,
      .                   location: Location,
      .                   borrow: &BorrowData<'tcx>,
      .                   span: Span,
      .               ) {
      .                   debug!("check_for_invalidation_at_exit({:?})", borrow);
      2 ( 0.00%)          let place = borrow.borrowed_place;
      .                   let mut root_place = PlaceRef { local: place.local, projection: &[] };
      .           
      .                   // FIXME(nll-rfc#40): do more precise destructor tracking here. For now
      .                   // we just know that all locals are dropped at function exit (otherwise
      .                   // we'll have a memory leak) and assume that all statics have a destructor.
      .                   //
      .                   // FIXME: allow thread-locals to borrow other thread locals?
      .           
      .                   let (might_be_alive, will_be_dropped) =
     14 ( 0.00%)              if self.body.local_decls[root_place.local].is_ref_to_thread_local() {
      .                           // Thread-locals might be dropped after the function exits
      .                           // We have to dereference the outer reference because
      .                           // borrows don't conflict behind shared references.
      .                           root_place.projection = DEREF_PROJECTION;
      .                           (true, true)
      .                       } else {
      .                           (false, self.locals_are_invalidated_at_exit)
      .                       };
      .           
     10 ( 0.00%)          if !will_be_dropped {
      .                       debug!("place_is_invalidated_at_exit({:?}) - won't be dropped", place);
      .                       return;
      .                   }
      .           
      .                   let sd = if might_be_alive { Deep } else { Shallow(None) };
      .           
     24 ( 0.00%)          if places_conflict::borrow_conflicts_with_place(
      4 ( 0.00%)              self.infcx.tcx,
      .                       &self.body,
      .                       place,
      .                       borrow.kind,
      8 ( 0.00%)              root_place,
      .                       sd,
      .                       places_conflict::PlaceConflictBias::Overlap,
      .                   ) {
      .                       debug!("check_for_invalidation_at_exit({:?}): INVALID", place);
      .                       // FIXME: should be talking about the region lifetime instead
      .                       // of just a span here.
      .                       let span = self.infcx.tcx.sess.source_map().end_point(span);
      .                       self.report_borrowed_value_does_not_live_long_enough(
-- line 1553 ----------------------------------------
-- line 1573 ----------------------------------------
      .                       err.buffer(&mut self.errors_buffer);
      .                   }
      .               }
      .           
      .               fn check_activations(&mut self, location: Location, span: Span, flow_state: &Flows<'cx, 'tcx>) {
      .                   // Two-phase borrow support: For each activation that is newly
      .                   // generated at this statement, check if it interferes with
      .                   // another borrow.
 17,420 ( 0.00%)          let borrow_set = self.borrow_set.clone();
 33,730 ( 0.01%)          for &borrow_index in borrow_set.activations_at_location(location) {
      .                       let borrow = &borrow_set[borrow_index];
      .           
      .                       // only mutable borrows should be 2-phase
     50 ( 0.00%)              assert!(match borrow.kind {
      .                           BorrowKind::Shared | BorrowKind::Shallow => false,
      .                           BorrowKind::Unique | BorrowKind::Mut { .. } => true,
      .                       });
      .           
    120 ( 0.00%)              self.access_place(
      .                           location,
     60 ( 0.00%)                  (borrow.borrowed_place, span),
     90 ( 0.00%)                  (Deep, Activation(WriteKind::MutableBorrow(borrow.kind), borrow_index)),
      .                           LocalMutationIsAllowed::No,
      .                           flow_state,
      .                       );
      .                       // We do not need to call `check_if_path_or_subpath_is_moved`
      .                       // again, as we already called it when we made the
      .                       // initial reservation.
      .                   }
      .               }
-- line 1602 ----------------------------------------
-- line 1606 ----------------------------------------
      .                   location: Location,
      .                   local: Local,
      .                   place_span: (Place<'tcx>, Span),
      .                   flow_state: &Flows<'cx, 'tcx>,
      .               ) {
      .                   debug!("check_if_reassignment_to_immutable_state({:?})", local);
      .           
      .                   // Check if any of the initializiations of `local` have happened yet:
  1,830 ( 0.00%)          if let Some(init_index) = self.is_local_ever_initialized(local, flow_state) {
      .                       // And, if so, report an error.
      .                       let init = &self.move_data.inits[init_index];
      .                       let span = init.span(&self.body);
      .                       self.report_illegal_reassignment(location, place_span, span, place_span.0);
      .                   }
      .               }
      .           
 44,824 ( 0.01%)      fn check_if_full_path_is_moved(
      .                   &mut self,
      .                   location: Location,
      .                   desired_action: InitializationRequiringAction,
      .                   place_span: (PlaceRef<'tcx>, Span),
      .                   flow_state: &Flows<'cx, 'tcx>,
      .               ) {
      .                   let maybe_uninits = &flow_state.uninits;
      .           
-- line 1630 ----------------------------------------
-- line 1660 ----------------------------------------
      .                   // Therefore, if we seek out the *closest* prefix for which we
      .                   // have a MovePath, that should capture the initialization
      .                   // state for the place scenario.
      .                   //
      .                   // This code covers scenarios 1, 2, and 3.
      .           
      .                   debug!("check_if_full_path_is_moved place: {:?}", place_span.0);
      .                   let (prefix, mpi) = self.move_path_closest_to(place_span.0);
  3,448 ( 0.00%)          if maybe_uninits.contains(mpi) {
      .                       self.report_use_of_moved_or_uninitialized(
      .                           location,
      .                           desired_action,
      .                           (prefix, place_span.0, place_span.1),
      .                           mpi,
      .                       );
      .                   } // Only query longest prefix with a MovePath, not further
      .                   // ancestors; dataflow recurs on children when parents
      .                   // move (to support partial (re)inits).
      .                   //
      .                   // (I.e., querying parents breaks scenario 7; but may want
      .                   // to do such a query based on partial-init feature-gate.)
 27,584 ( 0.01%)      }
      .           
      .               /// Subslices correspond to multiple move paths, so we iterate through the
      .               /// elements of the base array. For each element we check
      .               ///
      .               /// * Does this element overlap with our slice.
      .               /// * Is any part of it uninitialized.
      .               fn check_if_subslice_element_is_moved(
      .                   &mut self,
-- line 1689 ----------------------------------------
-- line 1719 ----------------------------------------
      .                                       return; // don't bother finding other problems.
      .                                   }
      .                               }
      .                           }
      .                       }
      .                   }
      .               }
      .           
 37,576 ( 0.01%)      fn check_if_path_or_subpath_is_moved(
      .                   &mut self,
      .                   location: Location,
      .                   desired_action: InitializationRequiringAction,
      .                   place_span: (PlaceRef<'tcx>, Span),
      .                   flow_state: &Flows<'cx, 'tcx>,
      .               ) {
  6,832 ( 0.00%)          let maybe_uninits = &flow_state.uninits;
      .           
      .                   // Bad scenarios:
      .                   //
      .                   // 1. Move of `a.b.c`, use of `a` or `a.b`
      .                   //    partial initialization support, one might have `a.x`
      .                   //    initialized but not `a.b`.
      .                   // 2. All bad scenarios from `check_if_full_path_is_moved`
      .                   //
-- line 1742 ----------------------------------------
-- line 1743 ----------------------------------------
      .                   // OK scenarios:
      .                   //
      .                   // 3. Move of `a.b.c`, use of `a.b.d`
      .                   // 4. Uninitialized `a.x`, initialized `a.b`, use of `a.b`
      .                   // 5. Copied `(a.b: &_)`, use of `*(a.b).c`; note that `a.b`
      .                   //    must have been initialized for the use to be sound.
      .                   // 6. Move of `a.b.c` then reinit of `a.b.c.d`, use of `a.b.c.d`
      .           
 23,912 ( 0.01%)          self.check_if_full_path_is_moved(location, desired_action, place_span, flow_state);
      .           
  2,148 ( 0.00%)          if let Some((place_base, ProjectionElem::Subslice { from, to, from_end: false })) =
  3,416 ( 0.00%)              place_span.0.last_projection()
      .                   {
      .                       let place_ty = place_base.ty(self.body(), self.infcx.tcx);
      .                       if let ty::Array(..) = place_ty.ty.kind() {
      .                           self.check_if_subslice_element_is_moved(
      .                               location,
      .                               desired_action,
      .                               (place_base, place_span.1),
      .                               maybe_uninits,
-- line 1762 ----------------------------------------
-- line 1772 ----------------------------------------
      .                   //
      .                   // (Distinct from handling of scenarios 1+2+4 above because
      .                   // `place` does not interfere with suffixes of its prefixes,
      .                   // e.g., `a.b.c` does not interfere with `a.b.d`)
      .                   //
      .                   // This code covers scenario 1.
      .           
      .                   debug!("check_if_path_or_subpath_is_moved place: {:?}", place_span.0);
 13,664 ( 0.00%)          if let Some(mpi) = self.move_path_for_place(place_span.0) {
 13,396 ( 0.00%)              let uninit_mpi = self
      .                           .move_data
      .                           .find_in_move_path_or_its_descendants(mpi, |mpi| maybe_uninits.contains(mpi));
      .           
  6,698 ( 0.00%)              if let Some(uninit_mpi) = uninit_mpi {
      .                           self.report_use_of_moved_or_uninitialized(
      .                               location,
      .                               desired_action,
      .                               (place_span.0, place_span.0, place_span.1),
      .                               uninit_mpi,
      .                           );
      .                           return; // don't bother finding other problems.
      .                       }
      .                   }
 27,328 ( 0.01%)      }
      .           
      .               /// Currently MoveData does not store entries for all places in
      .               /// the input MIR. For example it will currently filter out
      .               /// places that are Copy; thus we do not track places of shared
      .               /// reference type. This routine will walk up a place along its
      .               /// prefixes, searching for a foundational place that *is*
      .               /// tracked in the MoveData.
      .               ///
      .               /// An Err result includes a tag indicated why the search failed.
      .               /// Currently this can only occur if the place is built off of a
      .               /// static variable, as we do not track those in the MoveData.
      .               fn move_path_closest_to(&mut self, place: PlaceRef<'tcx>) -> (PlaceRef<'tcx>, MovePathIndex) {
 44,824 ( 0.01%)          match self.move_data.rev_lookup.find(place) {
      .                       LookupResult::Parent(Some(mpi)) | LookupResult::Exact(mpi) => {
      .                           (self.move_data.move_paths[mpi].place.as_ref(), mpi)
      .                       }
      .                       LookupResult::Parent(None) => panic!("should have move path for every Local"),
      .                   }
      .               }
      .           
      .               fn move_path_for_place(&mut self, place: PlaceRef<'tcx>) -> Option<MovePathIndex> {
      .                   // If returns None, then there is no move path corresponding
      .                   // to a direct owner of `place` (which means there is nothing
      .                   // that borrowck tracks for its analysis).
      .           
 30,744 ( 0.01%)          match self.move_data.rev_lookup.find(place) {
      .                       LookupResult::Parent(_) => None,
      .                       LookupResult::Exact(mpi) => Some(mpi),
      .                   }
      .               }
      .           
      .               fn check_if_assigned_path_is_moved(
      .                   &mut self,
      .                   location: Location,
      .                   (place, span): (Place<'tcx>, Span),
      .                   flow_state: &Flows<'cx, 'tcx>,
      .               ) {
      .                   debug!("check_if_assigned_path_is_moved place: {:?}", place);
      .           
      .                   // None case => assigning to `x` does not require `x` be initialized.
     32 ( 0.00%)          for (place_base, elem) in place.iter_projections().rev() {
    128 ( 0.00%)              match elem {
      .                           ProjectionElem::Index(_/*operand*/) |
      .                           ProjectionElem::ConstantIndex { .. } |
      .                           // assigning to P[i] requires P to be valid.
      .                           ProjectionElem::Downcast(_/*adt_def*/, _/*variant_idx*/) =>
      .                           // assigning to (P->variant) is okay if assigning to `P` is okay
      .                           //
      .                           // FIXME: is this true even if P is an adt with a dtor?
      .                           { }
      .           
      .                           // assigning to (*P) requires P to be initialized
      .                           ProjectionElem::Deref => {
    224 ( 0.00%)                      self.check_if_full_path_is_moved(
      .                                   location, InitializationRequiringAction::Use,
    192 ( 0.00%)                          (place_base, span), flow_state);
      .                               // (base initialized; no need to
      .                               // recur further)
      .                               break;
      .                           }
      .           
      .                           ProjectionElem::Subslice { .. } => {
      .                               panic!("we don't allow assignments to subslices, location: {:?}",
      .                                      location);
-- line 1859 ----------------------------------------
-- line 1979 ----------------------------------------
      .                   }
      .               }
      .           
      .               /// Checks the permissions for the given place and read or write kind
      .               ///
      .               /// Returns `true` if an error is reported.
      .               fn check_access_permissions(
      .                   &mut self,
 16,666 ( 0.00%)          (place, span): (Place<'tcx>, Span),
      .                   kind: ReadOrWrite,
      .                   is_local_mutation_allowed: LocalMutationIsAllowed,
      .                   flow_state: &Flows<'cx, 'tcx>,
      .                   location: Location,
      .               ) -> bool {
      .                   debug!(
      .                       "check_access_permissions({:?}, {:?}, is_local_mutation_allowed: {:?})",
      .                       place, kind, is_local_mutation_allowed
      .                   );
      .           
      .                   let error_access;
      .                   let the_place_err;
      .           
131,437 ( 0.03%)          match kind {
      .                       Reservation(WriteKind::MutableBorrow(
      .                           borrow_kind @ (BorrowKind::Unique | BorrowKind::Mut { .. }),
      .                       ))
      .                       | Write(WriteKind::MutableBorrow(
      .                           borrow_kind @ (BorrowKind::Unique | BorrowKind::Mut { .. }),
      .                       )) => {
    140 ( 0.00%)                  let is_local_mutation_allowed = match borrow_kind {
      .                               BorrowKind::Unique => LocalMutationIsAllowed::Yes,
      .                               BorrowKind::Mut { .. } => is_local_mutation_allowed,
      .                               BorrowKind::Shared | BorrowKind::Shallow => unreachable!(),
      .                           };
     98 ( 0.00%)                  match self.is_mutable(place.as_ref(), is_local_mutation_allowed) {
      .                               Ok(root_place) => {
      .                                   self.add_used_mut(root_place, flow_state);
      .                                   return false;
      .                               }
      .                               Err(place_err) => {
      .                                   error_access = AccessKind::MutableBorrow;
      .                                   the_place_err = place_err;
      .                               }
      .                           }
      .                       }
      .                       Reservation(WriteKind::Mutate) | Write(WriteKind::Mutate) => {
 18,557 ( 0.00%)                  match self.is_mutable(place.as_ref(), is_local_mutation_allowed) {
      .                               Ok(root_place) => {
      .                                   self.add_used_mut(root_place, flow_state);
      .                                   return false;
      .                               }
      .                               Err(place_err) => {
      .                                   error_access = AccessKind::Mutate;
      .                                   the_place_err = place_err;
      .                               }
-- line 2033 ----------------------------------------
-- line 2041 ----------------------------------------
      .                           | WriteKind::MutableBorrow(BorrowKind::Shallow),
      .                       )
      .                       | Write(
      .                           WriteKind::Move
      .                           | WriteKind::StorageDeadOrDrop
      .                           | WriteKind::MutableBorrow(BorrowKind::Shared)
      .                           | WriteKind::MutableBorrow(BorrowKind::Shallow),
      .                       ) => {
  9,280 ( 0.00%)                  if let (Err(_), true) = (
 32,480 ( 0.01%)                      self.is_mutable(place.as_ref(), is_local_mutation_allowed),
      .                               self.errors_buffer.is_empty(),
      .                           ) {
      .                               // rust-lang/rust#46908: In pure NLL mode this code path should be
      .                               // unreachable, but we use `delay_span_bug` because we can hit this when
      .                               // dereferencing a non-Copy raw pointer *and* have `-Ztreat-err-as-bug`
      .                               // enabled. We don't want to ICE for that case, as other errors will have
      .                               // been emitted (#52262).
      .                               self.infcx.tcx.sess.delay_span_bug(
-- line 2058 ----------------------------------------
-- line 2094 ----------------------------------------
      .                   if previously_initialized {
      .                       self.report_mutability_error(place, span, the_place_err, error_access, location);
      .                       true
      .                   } else {
      .                       false
      .                   }
      .               }
      .           
 14,660 ( 0.00%)      fn is_local_ever_initialized(
      .                   &self,
      .                   local: Local,
      .                   flow_state: &Flows<'cx, 'tcx>,
      .               ) -> Option<InitIndex> {
  8,796 ( 0.00%)          let mpi = self.move_data.rev_lookup.find_local(local);
  2,932 ( 0.00%)          let ii = &self.move_data.init_path_map[mpi];
 12,520 ( 0.00%)          for &index in ii {
  7,448 ( 0.00%)              if flow_state.ever_inits.contains(index) {
      .                           return Some(index);
      .                       }
      .                   }
      .                   None
 11,728 ( 0.00%)      }
      .           
      .               /// Adds the place into the used mutable variables set
 10,660 ( 0.00%)      fn add_used_mut(&mut self, root_place: RootPlace<'tcx>, flow_state: &Flows<'cx, 'tcx>) {
     64 ( 0.00%)          match root_place {
  7,995 ( 0.00%)              RootPlace { place_local: local, place_projection: [], is_local_mutation_allowed } => {
      .                           // If the local may have been initialized, and it is now currently being
      .                           // mutated, then it is justified to be annotated with the `mut`
      .                           // keyword, since the mutation may be a possible reassignment.
  5,260 ( 0.00%)                  if is_local_mutation_allowed != LocalMutationIsAllowed::Yes
  7,881 ( 0.00%)                      && self.is_local_ever_initialized(local, flow_state).is_some()
      .                           {
      .                               self.used_mut.insert(local);
      .                           }
      .                       }
      .                       RootPlace {
      .                           place_local: _,
      .                           place_projection: _,
      .                           is_local_mutation_allowed: LocalMutationIsAllowed::Yes,
      .                       } => {}
      .                       RootPlace {
     32 ( 0.00%)                  place_local,
     32 ( 0.00%)                  place_projection: place_projection @ [.., _],
      .                           is_local_mutation_allowed: _,
      .                       } => {
     64 ( 0.00%)                  if let Some(field) = self.is_upvar_field_projection(PlaceRef {
      .                               local: place_local,
      .                               projection: place_projection,
      .                           }) {
      .                               self.used_mut_upvars.push(field);
      .                           }
      .                       }
      .                   }
 10,080 ( 0.00%)      }
      .           
      .               /// Whether this value can be written or borrowed mutably.
      .               /// Returns the root place if the place passed in is a projection.
 85,602 ( 0.02%)      fn is_mutable(
      .                   &self,
      .                   place: PlaceRef<'tcx>,
      .                   is_local_mutation_allowed: LocalMutationIsAllowed,
      .               ) -> Result<RootPlace<'tcx>, PlaceRef<'tcx>> {
      .                   debug!("is_mutable: place={:?}, is_local...={:?}", place, is_local_mutation_allowed);
 24,364 ( 0.01%)          match place.last_projection() {
      .                       None => {
  7,273 ( 0.00%)                  let local = &self.body.local_decls[place.local];
 21,819 ( 0.01%)                  match local.mutability {
    568 ( 0.00%)                      Mutability::Not => match is_local_mutation_allowed {
  1,704 ( 0.00%)                          LocalMutationIsAllowed::Yes => Ok(RootPlace {
      .                                       place_local: place.local,
      .                                       place_projection: place.projection,
      .                                       is_local_mutation_allowed: LocalMutationIsAllowed::Yes,
      .                                   }),
      .                                   LocalMutationIsAllowed::ExceptUpvars => Ok(RootPlace {
      .                                       place_local: place.local,
      .                                       place_projection: place.projection,
      .                                       is_local_mutation_allowed: LocalMutationIsAllowed::ExceptUpvars,
      .                                   }),
      .                                   LocalMutationIsAllowed::No => Err(place),
      .                               },
 13,978 ( 0.00%)                      Mutability::Mut => Ok(RootPlace {
      .                                   place_local: place.local,
      .                                   place_projection: place.projection,
      .                                   is_local_mutation_allowed,
      .                               }),
      .                           }
      .                       }
      .                       Some((place_base, elem)) => {
  1,527 ( 0.00%)                  match elem {
      .                               ProjectionElem::Deref => {
     76 ( 0.00%)                          let base_ty = place_base.ty(self.body(), self.infcx.tcx).ty;
      .           
      .                                   // Check the kind of deref to decide
    132 ( 0.00%)                          match base_ty.kind() {
      .                                       ty::Ref(_, _, mutbl) => {
     12 ( 0.00%)                                  match mutbl {
      .                                               // Shared borrowed data is never mutable
      .                                               hir::Mutability::Not => Err(place),
      .                                               // Mutably borrowed data is mutable, but only if we have a
      .                                               // unique path to the `&mut`
      .                                               hir::Mutability::Mut => {
     12 ( 0.00%)                                          let mode = match self.is_upvar_field_projection(place) {
      .                                                       Some(field) if self.upvars[field.index()].by_ref => {
      .                                                           is_local_mutation_allowed
      .                                                       }
      .                                                       _ => LocalMutationIsAllowed::Yes,
      .                                                   };
      .           
     36 ( 0.00%)                                          self.is_mutable(place_base, mode)
      .                                               }
      .                                           }
      .                                       }
      .                                       ty::RawPtr(tnm) => {
     64 ( 0.00%)                                  match tnm.mutbl {
      .                                               // `*const` raw pointers are not mutable
      .                                               hir::Mutability::Not => Err(place),
      .                                               // `*mut` raw pointers are always mutable, regardless of
      .                                               // context. The users have to check by themselves.
      .                                               hir::Mutability::Mut => Ok(RootPlace {
      .                                                   place_local: place.local,
      .                                                   place_projection: place.projection,
      .                                                   is_local_mutation_allowed,
-- line 2216 ----------------------------------------
-- line 2228 ----------------------------------------
      .                               // All other projections are owned by their base path, so mutable if
      .                               // base path is mutable
      .                               ProjectionElem::Field(..)
      .                               | ProjectionElem::Index(..)
      .                               | ProjectionElem::ConstantIndex { .. }
      .                               | ProjectionElem::Subslice { .. }
      .                               | ProjectionElem::Downcast(..) => {
      .                                   let upvar_field_projection = self.is_upvar_field_projection(place);
    942 ( 0.00%)                          if let Some(field) = upvar_field_projection {
      .                                       let upvar = &self.upvars[field.index()];
      .                                       debug!(
      .                                           "is_mutable: upvar.mutability={:?} local_mutation_is_allowed={:?} \
      .                                            place={:?}, place_base={:?}",
      .                                           upvar, is_local_mutation_allowed, place, place_base
      .                                       );
      .                                       match (upvar.place.mutability, is_local_mutation_allowed) {
      .                                           (
-- line 2244 ----------------------------------------
-- line 2285 ----------------------------------------
      .                                       }
      .                                   } else {
      .                                       self.is_mutable(place_base, is_local_mutation_allowed)
      .                                   }
      .                               }
      .                           }
      .                       }
      .                   }
 62,256 ( 0.02%)      }
      .           
      .               /// If `place` is a field projection, and the field is being projected from a closure type,
      .               /// then returns the index of the field being projected. Note that this closure will always
      .               /// be `self` in the current MIR, because that is the only time we directly access the fields
      .               /// of a closure type.
      .               fn is_upvar_field_projection(&self, place_ref: PlaceRef<'tcx>) -> Option<Field> {
  4,549 ( 0.00%)          path_utils::is_upvar_field_projection(self.infcx.tcx, &self.upvars, place_ref, self.body())
      .               }
      .           }
      .           
      .           /// The degree of overlap between 2 places for borrow-checking.
      .           enum Overlap {
      .               /// The places might partially overlap - in this case, we give
      .               /// up and say that they might conflict. This occurs when
      .               /// different fields of a union are borrowed. For example,
-- line 2308 ----------------------------------------

283,575 ( 0.07%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_borrowck/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs
--------------------------------------------------------------------------------
Ir               

-- line 23 ----------------------------------------
      .           use std::cmp::Ordering;
      .           use std::marker::PhantomData;
      .           use std::ops::Range;
      .           use ty::util::IntTypeExt;
      .           
      .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
      .           #[derive(HashStable, TypeFoldable, Lift)]
      .           pub struct TypeAndMut<'tcx> {
  2,148 ( 0.00%)      pub ty: Ty<'tcx>,
 10,740 ( 0.00%)      pub mutbl: hir::Mutability,
      .           }
      .           
      .           #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, TyEncodable, TyDecodable, Copy)]
      .           #[derive(HashStable)]
      .           /// A "free" region `fr` can be interpreted as "some region
      .           /// at least as big as the scope `fr.scope`".
      .           pub struct FreeRegion {
    148 ( 0.00%)      pub scope: DefId,
    372 ( 0.00%)      pub bound_region: BoundRegionKind,
      .           }
      .           
  4,151 ( 0.00%)  #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, TyEncodable, TyDecodable, Copy)]
      .           #[derive(HashStable)]
      .           pub enum BoundRegionKind {
      .               /// An anonymous region parameter for a given fn (&T)
    155 ( 0.00%)      BrAnon(u32),
      .           
      .               /// Named region parameters for functions (a in &'a T)
      .               ///
      .               /// The `DefId` is needed to distinguish free regions in
      .               /// the event of shadowing.
      .               BrNamed(DefId, Symbol),
      .           
      .               /// Anonymous region for the implicit env pointer parameter
      .               /// to a closure
      .               BrEnv,
      .           }
      .           
     24 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable, Debug, PartialOrd, Ord)]
      .           #[derive(HashStable)]
      .           pub struct BoundRegion {
    958 ( 0.00%)      pub var: BoundVar,
    624 ( 0.00%)      pub kind: BoundRegionKind,
      .           }
      .           
      .           impl BoundRegionKind {
      .               pub fn is_named(&self) -> bool {
      .                   match *self {
      .                       BoundRegionKind::BrNamed(_, name) => name != kw::UnderscoreLifetime,
      .                       _ => false,
      .                   }
      .               }
      .           }
      .           
      .           /// Defines the kinds of types.
      .           ///
      .           /// N.B., if you change this, you'll probably want to change the corresponding
      .           /// AST structure in `rustc_ast/src/ast.rs` as well.
712,142 ( 0.18%)  #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable, Debug)]
      .           #[derive(HashStable)]
      .           #[rustc_diagnostic_item = "TyKind"]
      .           pub enum TyKind<'tcx> {
      .               /// The primitive boolean type. Written as `bool`.
      .               Bool,
      .           
      .               /// The primitive character type; holds a Unicode scalar value
      .               /// (a non-surrogate code point). Written as `char`.
-- line 89 ----------------------------------------
-- line 99 ----------------------------------------
      .               Float(ty::FloatTy),
      .           
      .               /// Algebraic data types (ADT). For example: structures, enumerations and unions.
      .               ///
      .               /// InternalSubsts here, possibly against intuition, *may* contain `Param`s.
      .               /// That is, even after substitution it is possible that there are type
      .               /// variables. This happens when the `Adt` corresponds to an ADT
      .               /// definition and not a concrete use of it.
 10,973 ( 0.00%)      Adt(&'tcx AdtDef, SubstsRef<'tcx>),
      .           
      .               /// An unsized FFI type that is opaque to Rust. Written as `extern type T`.
      .               Foreign(DefId),
      .           
      .               /// The pointee of a string slice. Written as `str`.
      .               Str,
      .           
      .               /// An array with the given length. Written as `[T; n]`.
  1,557 ( 0.00%)      Array(Ty<'tcx>, &'tcx ty::Const<'tcx>),
      .           
      .               /// The pointee of an array slice. Written as `[T]`.
      .               Slice(Ty<'tcx>),
      .           
      .               /// A raw pointer. Written as `*mut T` or `*const T`
      .               RawPtr(TypeAndMut<'tcx>),
      .           
      .               /// A reference; a pointer with an associated lifetime. Written as
      .               /// `&'a mut T` or `&'a T`.
 44,372 ( 0.01%)      Ref(Region<'tcx>, Ty<'tcx>, hir::Mutability),
      .           
      .               /// The anonymous type of a function declaration/definition. Each
      .               /// function has a unique type, which is output (for a function
      .               /// named `foo` returning an `i32`) as `fn() -> i32 {foo}`.
      .               ///
      .               /// For example the type of `bar` here:
      .               ///
      .               /// ```rust
-- line 134 ----------------------------------------
-- line 143 ----------------------------------------
      .               ///
      .               /// ```rust
      .               /// fn foo() -> i32 { 1 }
      .               /// let bar: fn() -> i32 = foo;
      .               /// ```
      .               FnPtr(PolyFnSig<'tcx>),
      .           
      .               /// A trait object. Written as `dyn for<'b> Trait<'b, Assoc = u32> + Send + 'a`.
      3 ( 0.00%)      Dynamic(&'tcx List<Binder<'tcx, ExistentialPredicate<'tcx>>>, ty::Region<'tcx>),
      .           
      .               /// The anonymous type of a closure. Used to represent the type of
      .               /// `|a| a`.
      .               Closure(DefId, SubstsRef<'tcx>),
      .           
      .               /// The anonymous type of a generator. Used to represent the type of
      .               /// `|a| yield a`.
      .               Generator(DefId, SubstsRef<'tcx>, hir::Movability),
-- line 159 ----------------------------------------
-- line 180 ----------------------------------------
      .               /// The substitutions are for the generics of the function in question.
      .               /// After typeck, the concrete type can be found in the `types` map.
      .               Opaque(DefId, SubstsRef<'tcx>),
      .           
      .               /// A type parameter; for example, `T` in `fn f<T>(x: T) {}`.
      .               Param(ParamTy),
      .           
      .               /// Bound type variable, used only when preparing a trait query.
    536 ( 0.00%)      Bound(ty::DebruijnIndex, BoundTy),
      .           
      .               /// A placeholder type - universally quantified higher-ranked type.
      .               Placeholder(ty::PlaceholderType),
      .           
      .               /// A type variable used during type checking.
      .               Infer(InferTy),
      .           
      .               /// A placeholder for a type which could not be computed; this is
-- line 196 ----------------------------------------
-- line 760 ----------------------------------------
      .               }
      .           
      .               /// Returns the type of this inline const.
      .               pub fn ty(self) -> Ty<'tcx> {
      .                   self.split().ty.expect_ty()
      .               }
      .           }
      .           
     60 ( 0.00%)  #[derive(Debug, Copy, Clone, PartialEq, PartialOrd, Ord, Eq, Hash, TyEncodable, TyDecodable)]
      .           #[derive(HashStable, TypeFoldable)]
      .           pub enum ExistentialPredicate<'tcx> {
      .               /// E.g., `Iterator`.
      .               Trait(ExistentialTraitRef<'tcx>),
      .               /// E.g., `Iterator::Item = T`.
      .               Projection(ExistentialProjection<'tcx>),
      .               /// E.g., `Send`.
      .               AutoTrait(DefId),
      .           }
      .           
      .           impl<'tcx> ExistentialPredicate<'tcx> {
      .               /// Compares via an ordering that will not change if modules are reordered or other changes are
      .               /// made to the tree. In particular, this ordering is preserved across incremental compilations.
     15 ( 0.00%)      pub fn stable_cmp(&self, tcx: TyCtxt<'tcx>, other: &Self) -> Ordering {
      .                   use self::ExistentialPredicate::*;
     16 ( 0.00%)          match (*self, *other) {
      .                       (Trait(_), Trait(_)) => Ordering::Equal,
      .                       (Projection(ref a), Projection(ref b)) => {
      .                           tcx.def_path_hash(a.item_def_id).cmp(&tcx.def_path_hash(b.item_def_id))
      .                       }
      .                       (AutoTrait(ref a), AutoTrait(ref b)) => {
      .                           tcx.def_path_hash(*a).cmp(&tcx.def_path_hash(*b))
      .                       }
      .                       (Trait(_), _) => Ordering::Less,
      .                       (Projection(_), Trait(_)) => Ordering::Greater,
      .                       (Projection(_), _) => Ordering::Less,
      .                       (AutoTrait(_), _) => Ordering::Greater,
      .                   }
     18 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> Binder<'tcx, ExistentialPredicate<'tcx>> {
      .               pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::Predicate<'tcx> {
      .                   use crate::ty::ToPredicate;
      .                   match self.skip_binder() {
      .                       ExistentialPredicate::Trait(tr) => {
      .                           self.rebind(tr).with_self_ty(tcx, self_ty).without_const().to_predicate(tcx)
-- line 805 ----------------------------------------
-- line 886 ----------------------------------------
      .           ///     T: Foo<U>
      .           ///
      .           /// This would be represented by a trait-reference where the `DefId` is the
      .           /// `DefId` for the trait `Foo` and the substs define `T` as parameter 0,
      .           /// and `U` as parameter 1.
      .           ///
      .           /// Trait references also appear in object types like `Foo<U>`, but in
      .           /// that case the `Self` parameter is absent from the substitutions.
  5,067 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
 79,528 ( 0.02%)  #[derive(HashStable, TypeFoldable)]
      .           pub struct TraitRef<'tcx> {
      4 ( 0.00%)      pub def_id: DefId,
 73,868 ( 0.02%)      pub substs: SubstsRef<'tcx>,
      .           }
      .           
      .           impl<'tcx> TraitRef<'tcx> {
    535 ( 0.00%)      pub fn new(def_id: DefId, substs: SubstsRef<'tcx>) -> TraitRef<'tcx> {
      .                   TraitRef { def_id, substs }
  2,140 ( 0.00%)      }
      .           
      .               /// Returns a `TraitRef` of the form `P0: Foo<P1..Pn>` where `Pi`
      .               /// are the parameters defined on trait.
    261 ( 0.00%)      pub fn identity(tcx: TyCtxt<'tcx>, def_id: DefId) -> Binder<'tcx, TraitRef<'tcx>> {
    116 ( 0.00%)          ty::Binder::dummy(TraitRef {
      .                       def_id,
    174 ( 0.00%)              substs: InternalSubsts::identity_for_item(tcx, def_id),
      .                   })
    232 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn self_ty(&self) -> Ty<'tcx> {
      .                   self.substs.type_at(0)
      .               }
      .           
     24 ( 0.00%)      pub fn from_method(
      .                   tcx: TyCtxt<'tcx>,
      .                   trait_id: DefId,
      .                   substs: SubstsRef<'tcx>,
      .               ) -> ty::TraitRef<'tcx> {
      .                   let defs = tcx.generics_of(trait_id);
      .           
      3 ( 0.00%)          ty::TraitRef { def_id: trait_id, substs: tcx.intern_substs(&substs[..defs.params.len()]) }
     33 ( 0.00%)      }
      .           }
      .           
      .           pub type PolyTraitRef<'tcx> = Binder<'tcx, TraitRef<'tcx>>;
      .           
      .           impl<'tcx> PolyTraitRef<'tcx> {
      .               pub fn self_ty(&self) -> Binder<'tcx, Ty<'tcx>> {
      .                   self.map_bound_ref(|tr| tr.self_ty())
      .               }
      .           
      .               pub fn def_id(&self) -> DefId {
     45 ( 0.00%)          self.skip_binder().def_id
     15 ( 0.00%)      }
      .           
    501 ( 0.00%)      pub fn to_poly_trait_predicate(&self) -> ty::PolyTraitPredicate<'tcx> {
  1,002 ( 0.00%)          self.map_bound(|trait_ref| ty::TraitPredicate {
      .                       trait_ref,
      .                       constness: ty::BoundConstness::NotConst,
      .                       polarity: ty::ImplPolarity::Positive,
      .                   })
    501 ( 0.00%)      }
      .           }
      .           
      .           /// An existential reference to a trait, where `Self` is erased.
      .           /// For example, the trait object `Trait<'a, 'b, X, Y>` is:
      .           ///
      .           ///     exists T. T: Trait<'a, 'b, X, Y>
      .           ///
      .           /// The substitutions don't include the erased `Self`, only trait
      .           /// type and lifetime parameters (`[X, Y]` and `['a, 'b]` above).
     12 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
      .           #[derive(HashStable, TypeFoldable)]
      .           pub struct ExistentialTraitRef<'tcx> {
      .               pub def_id: DefId,
      .               pub substs: SubstsRef<'tcx>,
      .           }
      .           
      .           impl<'tcx> ExistentialTraitRef<'tcx> {
      .               pub fn erase_self_ty(
-- line 966 ----------------------------------------
-- line 999 ----------------------------------------
      .               /// we convert the principal trait-ref into a normal trait-ref,
      .               /// you must give *some* self type. A common choice is `mk_err()`
      .               /// or some placeholder type.
      .               pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::PolyTraitRef<'tcx> {
      .                   self.map_bound(|trait_ref| trait_ref.with_self_ty(tcx, self_ty))
      .               }
      .           }
      .           
  1,061 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
      .           #[derive(HashStable)]
      .           pub enum BoundVariableKind {
      .               Ty(BoundTyKind),
      .               Region(BoundRegionKind),
      .               Const,
      .           }
      .           
      .           /// Binder is a binder for higher-ranked lifetimes or types. It is part of the
-- line 1015 ----------------------------------------
-- line 1016 ----------------------------------------
      .           /// compiler's representation for things like `for<'a> Fn(&'a isize)`
      .           /// (which would be represented by the type `PolyTraitRef ==
      .           /// Binder<'tcx, TraitRef>`). Note that when we instantiate,
      .           /// erase, or otherwise "discharge" these bound vars, we change the
      .           /// type from `Binder<'tcx, T>` to just `T` (see
      .           /// e.g., `liberate_late_bound_regions`).
      .           ///
      .           /// `Decodable` and `Encodable` are implemented for `Binder<T>` using the `impl_binder_encode_decode!` macro.
    276 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
 43,592 ( 0.01%)  pub struct Binder<'tcx, T>(T, &'tcx List<BoundVariableKind>);
      .           
      .           impl<'tcx, T> Binder<'tcx, T>
      .           where
      .               T: TypeFoldable<'tcx>,
      .           {
      .               /// Wraps `value` in a binder, asserting that `value` does not
      .               /// contain any bound vars that would be bound by the
      .               /// binder. This is commonly used to 'inject' a value T into a
      .               /// different binding level.
  5,285 ( 0.00%)      pub fn dummy(value: T) -> Binder<'tcx, T> {
 26,177 ( 0.01%)          assert!(!value.has_escaping_bound_vars());
 58,635 ( 0.02%)          Binder(value, ty::List::empty())
  5,285 ( 0.00%)      }
      .           
      .               pub fn bind_with_vars(value: T, vars: &'tcx List<BoundVariableKind>) -> Binder<'tcx, T> {
      .                   if cfg!(debug_assertions) {
      .                       let mut validator = ValidateBoundVars::new(vars);
      .                       value.visit_with(&mut validator);
      .                   }
  1,238 ( 0.00%)          Binder(value, vars)
      .               }
      .           }
      .           
      .           impl<'tcx, T> Binder<'tcx, T> {
      .               /// Skips the binder and returns the "bound" value. This is a
      .               /// risky thing to do because it's easy to get confused about
      .               /// De Bruijn indices and the like. It is usually better to
      .               /// discharge the binder using `no_bound_vars` or
-- line 1053 ----------------------------------------
-- line 1059 ----------------------------------------
      .               /// accounting.
      .               ///
      .               /// Some examples where `skip_binder` is reasonable:
      .               ///
      .               /// - extracting the `DefId` from a PolyTraitRef;
      .               /// - comparing the self type of a PolyTraitRef to see if it is equal to
      .               ///   a type parameter `X`, since the type `X` does not reference any regions
      .               pub fn skip_binder(self) -> T {
130,573 ( 0.03%)          self.0
      .               }
      .           
      .               pub fn bound_vars(&self) -> &'tcx List<BoundVariableKind> {
     87 ( 0.00%)          self.1
      .               }
      .           
      .               pub fn as_ref(&self) -> Binder<'tcx, &T> {
    103 ( 0.00%)          Binder(&self.0, self.1)
      .               }
      .           
      .               pub fn map_bound_ref_unchecked<F, U>(&self, f: F) -> Binder<'tcx, U>
      .               where
      .                   F: FnOnce(&T) -> U,
      .               {
      .                   let value = f(&self.0);
      .                   Binder(value, self.1)
-- line 1083 ----------------------------------------
-- line 1089 ----------------------------------------
      .               {
      .                   self.as_ref().map_bound(f)
      .               }
      .           
      .               pub fn map_bound<F, U: TypeFoldable<'tcx>>(self, f: F) -> Binder<'tcx, U>
      .               where
      .                   F: FnOnce(T) -> U,
      .               {
  1,678 ( 0.00%)          let value = f(self.0);
      .                   if cfg!(debug_assertions) {
      .                       let mut validator = ValidateBoundVars::new(self.1);
      .                       value.visit_with(&mut validator);
      .                   }
 60,677 ( 0.02%)          Binder(value, self.1)
      .               }
      .           
      .               pub fn try_map_bound<F, U: TypeFoldable<'tcx>, E>(self, f: F) -> Result<Binder<'tcx, U>, E>
      .               where
      .                   F: FnOnce(T) -> Result<U, E>,
      .               {
      .                   let value = f(self.0)?;
      .                   if cfg!(debug_assertions) {
      .                       let mut validator = ValidateBoundVars::new(self.1);
      .                       value.visit_with(&mut validator);
      .                   }
    141 ( 0.00%)          Ok(Binder(value, self.1))
      .               }
      .           
      .               /// Wraps a `value` in a binder, using the same bound variables as the
      .               /// current `Binder`. This should not be used if the new value *changes*
      .               /// the bound variables. Note: the (old or new) value itself does not
      .               /// necessarily need to *name* all the bound variables.
      .               ///
      .               /// This currently doesn't do anything different than `bind`, because we
-- line 1122 ----------------------------------------
-- line 1126 ----------------------------------------
      .               pub fn rebind<U>(&self, value: U) -> Binder<'tcx, U>
      .               where
      .                   U: TypeFoldable<'tcx>,
      .               {
      .                   if cfg!(debug_assertions) {
      .                       let mut validator = ValidateBoundVars::new(self.bound_vars());
      .                       value.visit_with(&mut validator);
      .                   }
    311 ( 0.00%)          Binder(value, self.1)
      .               }
      .           
      .               /// Unwraps and returns the value within, but only if it contains
      .               /// no bound vars at all. (In other words, if this binder --
      .               /// and indeed any enclosing binder -- doesn't bind anything at
      .               /// all.) Otherwise, returns `None`.
      .               ///
      .               /// (One could imagine having a method that just unwraps a single
-- line 1142 ----------------------------------------
-- line 1143 ----------------------------------------
      .               /// binder, but permits late-bound vars bound by enclosing
      .               /// binders, but that would require adjusting the debruijn
      .               /// indices, and given the shallow binding structure we often use,
      .               /// would not be that useful.)
      .               pub fn no_bound_vars(self) -> Option<T>
      .               where
      .                   T: TypeFoldable<'tcx>,
      .               {
 17,831 ( 0.00%)          if self.0.has_escaping_bound_vars() { None } else { Some(self.skip_binder()) }
      .               }
      .           
      .               /// Splits the contents into two things that share the same binder
      .               /// level as the original, returning two distinct binders.
      .               ///
      .               /// `f` should consider bound regions at depth 1 to be free, and
      .               /// anything it produces with bound regions at depth 1 will be
      .               /// bound in the resulting return values.
-- line 1159 ----------------------------------------
-- line 1170 ----------------------------------------
      .               pub fn transpose(self) -> Option<Binder<'tcx, T>> {
      .                   let bound_vars = self.1;
      .                   self.0.map(|v| Binder(v, bound_vars))
      .               }
      .           }
      .           
      .           /// Represents the projection of an associated type. In explicit UFCS
      .           /// form this would be written `<T as Trait<..>>::N`.
     48 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
  6,630 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
      .           pub struct ProjectionTy<'tcx> {
      .               /// The parameters of the associated item.
  5,193 ( 0.00%)      pub substs: SubstsRef<'tcx>,
      .           
      .               /// The `DefId` of the `TraitItem` for the associated type `N`.
      .               ///
      .               /// Note that this is not the `DefId` of the `TraitRef` containing this
      .               /// associated type, which is in `tcx.associated_item(item_def_id).container`.
  3,709 ( 0.00%)      pub item_def_id: DefId,
      .           }
      .           
      .           impl<'tcx> ProjectionTy<'tcx> {
  3,465 ( 0.00%)      pub fn trait_def_id(&self, tcx: TyCtxt<'tcx>) -> DefId {
    990 ( 0.00%)          tcx.associated_item(self.item_def_id).container.id()
  3,960 ( 0.00%)      }
      .           
      .               /// Extracts the underlying trait reference and own substs from this projection.
      .               /// For example, if this is a projection of `<T as StreamingIterator>::Item<'a>`,
      .               /// then this function would return a `T: Iterator` trait reference and `['a]` as the own substs
     84 ( 0.00%)      pub fn trait_ref_and_own_substs(
      .                   &self,
      .                   tcx: TyCtxt<'tcx>,
      .               ) -> (ty::TraitRef<'tcx>, &'tcx [ty::GenericArg<'tcx>]) {
     36 ( 0.00%)          let def_id = tcx.associated_item(self.item_def_id).container.id();
      .                   let trait_generics = tcx.generics_of(def_id);
     60 ( 0.00%)          (
      .                       ty::TraitRef { def_id, substs: self.substs.truncate_to(tcx, trait_generics) },
      .                       &self.substs[trait_generics.count()..],
      .                   )
    108 ( 0.00%)      }
      .           
      .               /// Extracts the underlying trait reference from this projection.
      .               /// For example, if this is a projection of `<T as Iterator>::Item`,
      .               /// then this function would return a `T: Iterator` trait reference.
      .               ///
      .               /// WARNING: This will drop the substs for generic associated types
      .               /// consider calling [Self::trait_ref_and_own_substs] to get those
      .               /// as well.
  4,455 ( 0.00%)      pub fn trait_ref(&self, tcx: TyCtxt<'tcx>) -> ty::TraitRef<'tcx> {
    495 ( 0.00%)          let def_id = self.trait_def_id(tcx);
    495 ( 0.00%)          ty::TraitRef { def_id, substs: self.substs.truncate_to(tcx, tcx.generics_of(def_id)) }
  5,445 ( 0.00%)      }
      .           
    990 ( 0.00%)      pub fn self_ty(&self) -> Ty<'tcx> {
  2,970 ( 0.00%)          self.substs.type_at(0)
  1,980 ( 0.00%)      }
      .           }
      .           
      .           #[derive(Copy, Clone, Debug, TypeFoldable)]
      .           pub struct GenSig<'tcx> {
      .               pub resume_ty: Ty<'tcx>,
      .               pub yield_ty: Ty<'tcx>,
      .               pub return_ty: Ty<'tcx>,
      .           }
-- line 1233 ----------------------------------------
-- line 1235 ----------------------------------------
      .           pub type PolyGenSig<'tcx> = Binder<'tcx, GenSig<'tcx>>;
      .           
      .           /// Signature of a function type, which we have arbitrarily
      .           /// decided to use to refer to the input/output types.
      .           ///
      .           /// - `inputs`: is the list of arguments and their modes.
      .           /// - `output`: is the return type.
      .           /// - `c_variadic`: indicates whether this is a C-variadic function.
  5,522 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
  4,294 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
      .           pub struct FnSig<'tcx> {
  1,531 ( 0.00%)      pub inputs_and_output: &'tcx List<Ty<'tcx>>,
 10,904 ( 0.00%)      pub c_variadic: bool,
  2,635 ( 0.00%)      pub unsafety: hir::Unsafety,
  8,827 ( 0.00%)      pub abi: abi::Abi,
      .           }
      .           
      .           impl<'tcx> FnSig<'tcx> {
  3,386 ( 0.00%)      pub fn inputs(&self) -> &'tcx [Ty<'tcx>] {
 16,607 ( 0.00%)          &self.inputs_and_output[..self.inputs_and_output.len() - 1]
  6,772 ( 0.00%)      }
      .           
  2,354 ( 0.00%)      pub fn output(&self) -> Ty<'tcx> {
 18,629 ( 0.00%)          self.inputs_and_output[self.inputs_and_output.len() - 1]
  4,708 ( 0.00%)      }
      .           
      .               // Creates a minimal `FnSig` to be used when encountering a `TyKind::Error` in a fallible
      .               // method.
      .               fn fake() -> FnSig<'tcx> {
      .                   FnSig {
      .                       inputs_and_output: List::empty(),
      .                       c_variadic: false,
      .                       unsafety: hir::Unsafety::Normal,
-- line 1267 ----------------------------------------
-- line 1270 ----------------------------------------
      .               }
      .           }
      .           
      .           pub type PolyFnSig<'tcx> = Binder<'tcx, FnSig<'tcx>>;
      .           
      .           impl<'tcx> PolyFnSig<'tcx> {
      .               #[inline]
      .               pub fn inputs(&self) -> Binder<'tcx, &'tcx [Ty<'tcx>]> {
    313 ( 0.00%)          self.map_bound_ref_unchecked(|fn_sig| fn_sig.inputs())
      .               }
      .               #[inline]
      .               pub fn input(&self, index: usize) -> ty::Binder<'tcx, Ty<'tcx>> {
  1,449 ( 0.00%)          self.map_bound_ref(|fn_sig| fn_sig.inputs()[index])
      .               }
      .               pub fn inputs_and_output(&self) -> ty::Binder<'tcx, &'tcx List<Ty<'tcx>>> {
      .                   self.map_bound_ref(|fn_sig| fn_sig.inputs_and_output)
     40 ( 0.00%)      }
      .               #[inline]
      .               pub fn output(&self) -> ty::Binder<'tcx, Ty<'tcx>> {
    681 ( 0.00%)          self.map_bound_ref(|fn_sig| fn_sig.output())
      .               }
      .               pub fn c_variadic(&self) -> bool {
     80 ( 0.00%)          self.skip_binder().c_variadic
     40 ( 0.00%)      }
      .               pub fn unsafety(&self) -> hir::Unsafety {
    510 ( 0.00%)          self.skip_binder().unsafety
    255 ( 0.00%)      }
      .               pub fn abi(&self) -> abi::Abi {
  1,280 ( 0.00%)          self.skip_binder().abi
    320 ( 0.00%)      }
      .           }
      .           
      .           pub type CanonicalPolyFnSig<'tcx> = Canonical<'tcx, Binder<'tcx, FnSig<'tcx>>>;
      .           
      8 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
      .           #[derive(HashStable)]
      .           pub struct ParamTy {
     30 ( 0.00%)      pub index: u32,
      .               pub name: Symbol,
      .           }
      .           
      .           impl<'tcx> ParamTy {
      4 ( 0.00%)      pub fn new(index: u32, name: Symbol) -> ParamTy {
      .                   ParamTy { index, name }
      2 ( 0.00%)      }
      .           
      .               pub fn for_def(def: &ty::GenericParamDef) -> ParamTy {
      .                   ParamTy::new(def.index, def.name)
      .               }
      .           
      .               #[inline]
      .               pub fn to_ty(self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
      .                   tcx.mk_ty_param(self.index, self.name)
      .               }
      .           }
      .           
      .           #[derive(Copy, Clone, Hash, TyEncodable, TyDecodable, Eq, PartialEq, Ord, PartialOrd)]
      .           #[derive(HashStable)]
      .           pub struct ParamConst {
     56 ( 0.00%)      pub index: u32,
     56 ( 0.00%)      pub name: Symbol,
      .           }
      .           
      .           impl ParamConst {
      .               pub fn new(index: u32, name: Symbol) -> ParamConst {
      .                   ParamConst { index, name }
      .               }
      .           
      .               pub fn for_def(def: &ty::GenericParamDef) -> ParamConst {
-- line 1338 ----------------------------------------
-- line 1440 ----------------------------------------
      .           /// the inference variable is supposed to satisfy the relation
      .           /// *for every value of the placeholder region*. To ensure that doesn't
      .           /// happen, you can use `leak_check`. This is more clearly explained
      .           /// by the [rustc dev guide].
      .           ///
      .           /// [1]: https://smallcultfollowing.com/babysteps/blog/2013/10/29/intermingled-parameter-lists/
      .           /// [2]: https://smallcultfollowing.com/babysteps/blog/2013/11/04/intermingled-parameter-lists/
      .           /// [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/traits/hrtb.html
137,803 ( 0.04%)  #[derive(Clone, PartialEq, Eq, Hash, Copy, TyEncodable, TyDecodable, PartialOrd, Ord)]
      8 ( 0.00%)  pub enum RegionKind {
      .               /// Region bound in a type or fn declaration which will be
      .               /// substituted 'early' -- that is, at the same time when type
      .               /// parameters are substituted.
      .               ReEarlyBound(EarlyBoundRegion),
      .           
      .               /// Region bound in a function scope, which will be substituted when the
      .               /// function is called.
  1,248 ( 0.00%)      ReLateBound(ty::DebruijnIndex, BoundRegion),
      .           
      .               /// When checking a function body, the types of all arguments and so forth
      .               /// that refer to bound region parameters are modified to refer to free
      .               /// region parameters.
      .               ReFree(FreeRegion),
      .           
      .               /// Static data that has an "infinite" lifetime. Top in the region lattice.
      .               ReStatic,
-- line 1465 ----------------------------------------
-- line 1478 ----------------------------------------
      .               /// regions visible from `U`, but not less than regions not visible
      .               /// from `U`.
      .               ReEmpty(ty::UniverseIndex),
      .           
      .               /// Erased region, used by trait selection, in MIR and during codegen.
      .               ReErased,
      .           }
      .           
  4,320 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable, Debug, PartialOrd, Ord)]
      .           pub struct EarlyBoundRegion {
    352 ( 0.00%)      pub def_id: DefId,
  3,440 ( 0.00%)      pub index: u32,
     82 ( 0.00%)      pub name: Symbol,
      .           }
      .           
      .           /// A **`const`** **v**ariable **ID**.
      .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
      .           pub struct ConstVid<'tcx> {
    243 ( 0.00%)      pub index: u32,
    105 ( 0.00%)      pub phantom: PhantomData<&'tcx ()>,
      .           }
      .           
      .           rustc_index::newtype_index! {
      .               /// A **region** (lifetime) **v**ariable **ID**.
      .               pub struct RegionVid {
      .                   DEBUG_FORMAT = custom,
      .               }
      .           }
-- line 1505 ----------------------------------------
-- line 1513 ----------------------------------------
      .           rustc_index::newtype_index! {
      .               pub struct BoundVar { .. }
      .           }
      .           
      .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
      .           #[derive(HashStable)]
      .           pub struct BoundTy {
      .               pub var: BoundVar,
    536 ( 0.00%)      pub kind: BoundTyKind,
      .           }
      .           
  9,157 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
      .           #[derive(HashStable)]
      .           pub enum BoundTyKind {
      .               Anon,
      .               Param(Symbol),
      .           }
      .           
      .           impl From<BoundVar> for BoundTy {
      .               fn from(var: BoundVar) -> Self {
-- line 1532 ----------------------------------------
-- line 1626 ----------------------------------------
      .           
      .               #[inline]
      .               pub fn is_placeholder(&self) -> bool {
      .                   matches!(*self, ty::RePlaceholder(..))
      .               }
      .           
      .               #[inline]
      .               pub fn bound_at_or_above_binder(&self, index: ty::DebruijnIndex) -> bool {
  1,754 ( 0.00%)          match *self {
      .                       ty::ReLateBound(debruijn, _) => debruijn >= index,
      .                       _ => false,
      .                   }
      .               }
      .           
      .               pub fn type_flags(&self) -> TypeFlags {
      .                   let mut flags = TypeFlags::empty();
      .           
  9,027 ( 0.00%)          match *self {
      .                       ty::ReVar(..) => {
      .                           flags = flags | TypeFlags::HAS_FREE_REGIONS;
      .                           flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;
      .                           flags = flags | TypeFlags::HAS_RE_INFER;
      .                       }
      .                       ty::RePlaceholder(..) => {
      .                           flags = flags | TypeFlags::HAS_FREE_REGIONS;
      .                           flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;
-- line 1651 ----------------------------------------
-- line 1669 ----------------------------------------
      .                       ty::ReErased => {
      .                           flags = flags | TypeFlags::HAS_RE_ERASED;
      .                       }
      .                   }
      .           
      .                   debug!("type_flags({:?}) = {:?}", self, flags);
      .           
      .                   flags
     45 ( 0.00%)      }
      .           
      .               /// Given an early-bound or free region, returns the `DefId` where it was bound.
      .               /// For example, consider the regions in this snippet of code:
      .               ///
      .               /// ```
      .               /// impl<'a> Foo {
      .               ///      ^^ -- early bound, declared on an impl
      .               ///
-- line 1685 ----------------------------------------
-- line 1713 ----------------------------------------
      .           
      .               #[inline(always)]
      .               pub fn flags(&self) -> TypeFlags {
      .                   self.flags
      .               }
      .           
      .               #[inline]
      .               pub fn is_unit(&self) -> bool {
  1,172 ( 0.00%)          match self.kind() {
    466 ( 0.00%)              Tuple(ref tys) => tys.is_empty(),
      .                       _ => false,
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn is_never(&self) -> bool {
 18,718 ( 0.00%)          matches!(self.kind(), Never)
      .               }
      .           
      .               #[inline]
      .               pub fn is_primitive(&self) -> bool {
      .                   self.kind().is_primitive()
      .               }
      .           
      .               #[inline]
-- line 1737 ----------------------------------------
-- line 1741 ----------------------------------------
      .           
      .               #[inline]
      .               pub fn is_ref(&self) -> bool {
      .                   matches!(self.kind(), Ref(..))
      .               }
      .           
      .               #[inline]
      .               pub fn is_ty_var(&self) -> bool {
 18,996 ( 0.00%)          matches!(self.kind(), Infer(TyVar(_)))
      .               }
      .           
      .               #[inline]
      .               pub fn ty_vid(&self) -> Option<ty::TyVid> {
  7,956 ( 0.00%)          match self.kind() {
  1,331 ( 0.00%)              &Infer(TyVar(vid)) => Some(vid),
      .                       _ => None,
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn is_ty_infer(&self) -> bool {
      .                   matches!(self.kind(), Infer(_))
      .               }
-- line 1763 ----------------------------------------
-- line 1764 ----------------------------------------
      .           
      .               #[inline]
      .               pub fn is_phantom_data(&self) -> bool {
      .                   if let Adt(def, _) = self.kind() { def.is_phantom_data() } else { false }
      .               }
      .           
      .               #[inline]
      .               pub fn is_bool(&self) -> bool {
     12 ( 0.00%)          *self.kind() == Bool
      .               }
      .           
      .               /// Returns `true` if this type is a `str`.
      .               #[inline]
      .               pub fn is_str(&self) -> bool {
      .                   *self.kind() == Str
      .               }
      .           
-- line 1780 ----------------------------------------
-- line 1791 ----------------------------------------
      .                   match self.kind() {
      .                       RawPtr(TypeAndMut { ty, .. }) | Ref(_, ty, _) => matches!(ty.kind(), Slice(_) | Str),
      .                       _ => false,
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn is_array(&self) -> bool {
      5 ( 0.00%)          matches!(self.kind(), Array(..))
      .               }
      .           
      .               #[inline]
      .               pub fn is_simd(&self) -> bool {
      .                   match self.kind() {
      .                       Adt(def, _) => def.repr.simd(),
      .                       _ => false,
      .                   }
      .               }
      .           
      4 ( 0.00%)      pub fn sequence_element_type(&self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
      8 ( 0.00%)          match self.kind() {
      .                       Array(ty, _) | Slice(ty) => ty,
      .                       Str => tcx.mk_mach_uint(ty::UintTy::U8),
      .                       _ => bug!("`sequence_element_type` called on non-sequence value: {}", self),
      .                   }
      4 ( 0.00%)      }
      .           
      .               pub fn simd_size_and_type(&self, tcx: TyCtxt<'tcx>) -> (u64, Ty<'tcx>) {
      .                   match self.kind() {
      .                       Adt(def, substs) => {
      .                           assert!(def.repr.simd(), "`simd_size_and_type` called on non-SIMD type");
      .                           let variant = def.non_enum_variant();
      .                           let f0_ty = variant.fields[0].ty(tcx, substs);
      .           
-- line 1824 ----------------------------------------
-- line 1838 ----------------------------------------
      .                           }
      .                       }
      .                       _ => bug!("`simd_size_and_type` called on invalid type"),
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn is_region_ptr(&self) -> bool {
    141 ( 0.00%)          matches!(self.kind(), Ref(..))
      .               }
      .           
      .               #[inline]
      .               pub fn is_mutable_ptr(&self) -> bool {
      .                   matches!(
      .                       self.kind(),
      .                       RawPtr(TypeAndMut { mutbl: hir::Mutability::Mut, .. })
      .                           | Ref(_, _, hir::Mutability::Mut)
-- line 1854 ----------------------------------------
-- line 1861 ----------------------------------------
      .                   match self.kind() {
      .                       Ref(_, _, mutability) => Some(*mutability),
      .                       _ => None,
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn is_unsafe_ptr(&self) -> bool {
     84 ( 0.00%)          matches!(self.kind(), RawPtr(_))
      .               }
      .           
      .               /// Tests if this is any kind of primitive pointer type (reference, raw pointer, fn pointer).
      .               #[inline]
      .               pub fn is_any_ptr(&self) -> bool {
      .                   self.is_region_ptr() || self.is_unsafe_ptr() || self.is_fn_ptr()
      .               }
      .           
      .               #[inline]
      .               pub fn is_box(&self) -> bool {
 12,378 ( 0.00%)          match self.kind() {
     80 ( 0.00%)              Adt(def, _) => def.is_box(),
      .                       _ => false,
      .                   }
      .               }
      .           
      .               /// Panics if called on any type other than `Box<T>`.
      .               pub fn boxed_ty(&self) -> Ty<'tcx> {
      .                   match self.kind() {
      .                       Adt(def, substs) if def.is_box() => substs.type_at(0),
-- line 1889 ----------------------------------------
-- line 1891 ----------------------------------------
      .                   }
      .               }
      .           
      .               /// A scalar type is one that denotes an atomic datum, with no sub-components.
      .               /// (A RawPtr is scalar because it represents a non-managed pointer, so its
      .               /// contents are abstract to rustc.)
      .               #[inline]
      .               pub fn is_scalar(&self) -> bool {
  1,309 ( 0.00%)          matches!(
  2,872 ( 0.00%)              self.kind(),
      .                       Bool | Char
      .                           | Int(_)
      .                           | Float(_)
      .                           | Uint(_)
      .                           | FnDef(..)
      .                           | FnPtr(_)
      .                           | RawPtr(_)
      .                           | Infer(IntVar(_) | FloatVar(_))
-- line 1908 ----------------------------------------
-- line 1922 ----------------------------------------
      .           
      .               #[inline]
      .               pub fn is_enum(&self) -> bool {
      .                   matches!(self.kind(), Adt(adt_def, _) if adt_def.is_enum())
      .               }
      .           
      .               #[inline]
      .               pub fn is_union(&self) -> bool {
  1,385 ( 0.00%)          matches!(self.kind(), Adt(adt_def, _) if adt_def.is_union())
      .               }
      .           
      .               #[inline]
      .               pub fn is_closure(&self) -> bool {
    948 ( 0.00%)          matches!(self.kind(), Closure(..))
      .               }
      .           
      .               #[inline]
      .               pub fn is_generator(&self) -> bool {
  1,422 ( 0.00%)          matches!(self.kind(), Generator(..))
      .               }
      .           
      .               #[inline]
      .               pub fn is_integral(&self) -> bool {
  6,254 ( 0.00%)          matches!(self.kind(), Infer(IntVar(_)) | Int(_) | Uint(_))
      .               }
      .           
      .               #[inline]
      .               pub fn is_fresh_ty(&self) -> bool {
      .                   matches!(self.kind(), Infer(FreshTy(_)))
      .               }
      .           
      .               #[inline]
      .               pub fn is_fresh(&self) -> bool {
    304 ( 0.00%)          matches!(self.kind(), Infer(FreshTy(_) | FreshIntTy(_) | FreshFloatTy(_)))
      .               }
      .           
      .               #[inline]
      .               pub fn is_char(&self) -> bool {
      .                   matches!(self.kind(), Char)
      .               }
      .           
      .               #[inline]
      .               pub fn is_numeric(&self) -> bool {
      .                   self.is_integral() || self.is_floating_point()
      .               }
      .           
      .               #[inline]
      .               pub fn is_signed(&self) -> bool {
     71 ( 0.00%)          matches!(self.kind(), Int(_))
      .               }
      .           
      .               #[inline]
      .               pub fn is_ptr_sized_integral(&self) -> bool {
    918 ( 0.00%)          matches!(self.kind(), Int(ty::IntTy::Isize) | Uint(ty::UintTy::Usize))
      .               }
      .           
      .               #[inline]
      .               pub fn has_concrete_skeleton(&self) -> bool {
      .                   !matches!(self.kind(), Param(_) | Infer(_) | Error(_))
      .               }
      .           
      .               /// Returns the type and mutability of `*ty`.
      .               ///
      .               /// The parameter `explicit` indicates if this is an *explicit* dereference.
      .               /// Some types -- notably unsafe ptrs -- can only be dereferenced explicitly.
    969 ( 0.00%)      pub fn builtin_deref(&self, explicit: bool) -> Option<TypeAndMut<'tcx>> {
  6,377 ( 0.00%)          match self.kind() {
      4 ( 0.00%)              Adt(def, _) if def.is_box() => {
      .                           Some(TypeAndMut { ty: self.boxed_ty(), mutbl: hir::Mutability::Not })
      .                       }
    572 ( 0.00%)              Ref(_, ty, mutbl) => Some(TypeAndMut { ty, mutbl: *mutbl }),
    492 ( 0.00%)              RawPtr(mt) if explicit => Some(*mt),
      .                       _ => None,
      .                   }
  1,938 ( 0.00%)      }
      .           
      .               /// Returns the type of `ty[i]`.
      .               pub fn builtin_index(&self) -> Option<Ty<'tcx>> {
      .                   match self.kind() {
      .                       Array(ty, _) | Slice(ty) => Some(ty),
      .                       _ => None,
      .                   }
      .               }
      .           
  5,240 ( 0.00%)      pub fn fn_sig(&self, tcx: TyCtxt<'tcx>) -> PolyFnSig<'tcx> {
  2,620 ( 0.00%)          match self.kind() {
  1,965 ( 0.00%)              FnDef(def_id, substs) => tcx.fn_sig(*def_id).subst(tcx, substs),
      .                       FnPtr(f) => *f,
      .                       Error(_) => {
      .                           // ignore errors (#54954)
      .                           ty::Binder::dummy(FnSig::fake())
      .                       }
      .                       Closure(..) => bug!(
      .                           "to get the signature of a closure, use `substs.as_closure().sig()` not `fn_sig()`",
      .                       ),
      .                       _ => bug!("Ty::fn_sig() called on non-fn type: {:?}", self),
      .                   }
  5,895 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn is_fn(&self) -> bool {
      .                   matches!(self.kind(), FnDef(..) | FnPtr(_))
      .               }
      .           
      .               #[inline]
      .               pub fn is_fn_ptr(&self) -> bool {
-- line 2027 ----------------------------------------
-- line 2030 ----------------------------------------
      .           
      .               #[inline]
      .               pub fn is_impl_trait(&self) -> bool {
      .                   matches!(self.kind(), Opaque(..))
      .               }
      .           
      .               #[inline]
      .               pub fn ty_adt_def(&self) -> Option<&'tcx AdtDef> {
  2,234 ( 0.00%)          match self.kind() {
      .                       Adt(adt, _) => Some(adt),
      .                       _ => None,
      .                   }
      .               }
      .           
      .               /// Iterates over tuple fields.
      .               /// Panics when called on anything but a tuple.
      3 ( 0.00%)      pub fn tuple_fields(&self) -> impl DoubleEndedIterator<Item = Ty<'tcx>> {
  1,592 ( 0.00%)          match self.kind() {
    804 ( 0.00%)              Tuple(substs) => substs.iter().map(|field| field.expect_ty()),
      .                       _ => bug!("tuple_fields called on non-tuple"),
      .                   }
      6 ( 0.00%)      }
      .           
      .               /// Get the `i`-th element of a tuple.
      .               /// Panics when called on anything but a tuple.
      .               pub fn tuple_element_ty(&self, i: usize) -> Option<Ty<'tcx>> {
      .                   match self.kind() {
      .                       Tuple(substs) => substs.iter().nth(i).map(|field| field.expect_ty()),
      .                       _ => bug!("tuple_fields called on non-tuple"),
      .                   }
-- line 2059 ----------------------------------------
-- line 2095 ----------------------------------------
      .                       TyKind::Generator(def_id, substs, _) => {
      .                           Some(substs.as_generator().discriminant_for_variant(*def_id, tcx, variant_index))
      .                       }
      .                       _ => None,
      .                   }
      .               }
      .           
      .               /// Returns the type of the discriminant of this type.
     80 ( 0.00%)      pub fn discriminant_ty(&'tcx self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
     40 ( 0.00%)          match self.kind() {
     64 ( 0.00%)              ty::Adt(adt, _) if adt.is_enum() => adt.repr.discr_type().to_ty(tcx),
      .                       ty::Generator(_, substs, _) => substs.as_generator().discr_ty(tcx),
      .           
      .                       ty::Param(_) | ty::Projection(_) | ty::Opaque(..) | ty::Infer(ty::TyVar(_)) => {
      .                           let assoc_items = tcx.associated_item_def_ids(
      .                               tcx.require_lang_item(hir::LangItem::DiscriminantKind, None),
      .                           );
      .                           tcx.mk_projection(assoc_items[0], tcx.intern_substs(&[self.into()]))
      .                       }
-- line 2113 ----------------------------------------
-- line 2135 ----------------------------------------
      .                       | ty::Infer(IntVar(_) | FloatVar(_)) => tcx.types.u8,
      .           
      .                       ty::Bound(..)
      .                       | ty::Placeholder(_)
      .                       | ty::Infer(FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
      .                           bug!("`discriminant_ty` applied to unexpected type: {:?}", self)
      .                       }
      .                   }
     64 ( 0.00%)      }
      .           
      .               /// Returns the type of metadata for (potentially fat) pointers to this type.
      .               pub fn ptr_metadata_ty(
      .                   &'tcx self,
      .                   tcx: TyCtxt<'tcx>,
      .                   normalize: impl FnMut(Ty<'tcx>) -> Ty<'tcx>,
      .               ) -> Ty<'tcx> {
      .                   let tail = tcx.struct_tail_with_normalize(self, normalize);
-- line 2151 ----------------------------------------
-- line 2229 ----------------------------------------
      .               /// Returning true means the type is known to be sized. Returning
      .               /// `false` means nothing -- could be sized, might not be.
      .               ///
      .               /// Note that we could never rely on the fact that a type such as `[_]` is
      .               /// trivially `!Sized` because we could be in a type environment with a
      .               /// bound such as `[_]: Copy`. A function with such a bound obviously never
      .               /// can be called, but that doesn't mean it shouldn't typecheck. This is why
      .               /// this method doesn't return `Option<bool>`.
 82,647 ( 0.02%)      pub fn is_trivially_sized(&self, tcx: TyCtxt<'tcx>) -> bool {
 55,098 ( 0.01%)          match self.kind() {
      .                       ty::Infer(ty::IntVar(_) | ty::FloatVar(_))
      .                       | ty::Uint(_)
      .                       | ty::Int(_)
      .                       | ty::Bool
      .                       | ty::Float(_)
      .                       | ty::FnDef(..)
      .                       | ty::FnPtr(_)
      .                       | ty::RawPtr(..)
-- line 2246 ----------------------------------------
-- line 2250 ----------------------------------------
      .                       | ty::GeneratorWitness(..)
      .                       | ty::Array(..)
      .                       | ty::Closure(..)
      .                       | ty::Never
      .                       | ty::Error(_) => true,
      .           
      .                       ty::Str | ty::Slice(_) | ty::Dynamic(..) | ty::Foreign(..) => false,
      .           
  9,379 ( 0.00%)              ty::Tuple(tys) => tys.iter().all(|ty| ty.expect_ty().is_trivially_sized(tcx)),
      .           
    129 ( 0.00%)              ty::Adt(def, _substs) => def.sized_constraint(tcx).is_empty(),
      .           
      .                       ty::Projection(_) | ty::Param(_) | ty::Opaque(..) => false,
      .           
      .                       ty::Infer(ty::TyVar(_)) => false,
      .           
      .                       ty::Bound(..)
      .                       | ty::Placeholder(..)
      .                       | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
      .                           bug!("`is_trivially_sized` applied to unexpected type: {:?}", self)
      .                       }
      .                   }
 82,647 ( 0.02%)      }
      .           }
      .           
      .           /// Extra information about why we ended up with a particular variance.
      .           /// This is only used to add more information to error messages, and
      .           /// has no effect on soundness. While choosing the 'wrong' `VarianceDiagInfo`
      .           /// may lead to confusing notes in error messages, it will never cause
      .           /// a miscompilation or unsoundness.
      .           ///
-- line 2280 ----------------------------------------
-- line 2295 ----------------------------------------
      .                   /// (e.g. `0` for `*mut T`, `1` for `MyStruct<'CovariantParam, 'InvariantParam>`)
      .                   param_index: u32,
      .               },
      .           }
      .           
      .           impl<'tcx> VarianceDiagInfo<'tcx> {
      .               /// Mirrors `Variance::xform` - used to 'combine' the existing
      .               /// and new `VarianceDiagInfo`s when our variance changes.
    740 ( 0.00%)      pub fn xform(self, other: VarianceDiagInfo<'tcx>) -> VarianceDiagInfo<'tcx> {
      .                   // For now, just use the first `VarianceDiagInfo::Invariant` that we see
  1,110 ( 0.00%)          match self {
      .                       VarianceDiagInfo::None => other,
      .                       VarianceDiagInfo::Invariant { .. } => self,
      .                   }
    370 ( 0.00%)      }
      .           }

729,138 ( 0.19%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/into_iter.rs
--------------------------------------------------------------------------------
Ir               

-- line 51 ----------------------------------------
      .               /// let vec = vec!['a', 'b', 'c'];
      .               /// let mut into_iter = vec.into_iter();
      .               /// assert_eq!(into_iter.as_slice(), &['a', 'b', 'c']);
      .               /// let _ = into_iter.next().unwrap();
      .               /// assert_eq!(into_iter.as_slice(), &['b', 'c']);
      .               /// ```
      .               #[stable(feature = "vec_into_iter_as_slice", since = "1.15.0")]
      .               pub fn as_slice(&self) -> &[T] {
  1,092 ( 0.00%)          unsafe { slice::from_raw_parts(self.ptr, self.len()) }
      .               }
      .           
      .               /// Returns the remaining items of this iterator as a mutable slice.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let vec = vec!['a', 'b', 'c'];
-- line 67 ----------------------------------------
-- line 80 ----------------------------------------
      .               /// Returns a reference to the underlying allocator.
      .               #[unstable(feature = "allocator_api", issue = "32838")]
      .               #[inline]
      .               pub fn allocator(&self) -> &A {
      .                   &self.alloc
      .               }
      .           
      .               fn as_raw_mut_slice(&mut self) -> *mut [T] {
127,203 ( 0.03%)          ptr::slice_from_raw_parts_mut(self.ptr as *mut T, self.len())
      .               }
      .           
      .               /// Drops remaining elements and relinquishes the backing allocation.
      .               ///
      .               /// This is roughly equivalent to the following, but more efficient
      .               ///
      .               /// ```
      .               /// # let mut into_iter = Vec::<u8>::with_capacity(10).into_iter();
-- line 96 ----------------------------------------
-- line 99 ----------------------------------------
      .               /// ```
      .               #[cfg(not(no_global_oom_handling))]
      .               pub(super) fn forget_allocation_drop_remaining(&mut self) {
      .                   let remaining = self.as_raw_mut_slice();
      .           
      .                   // overwrite the individual fields instead of creating a new
      .                   // struct and then overwriting &mut self.
      .                   // this creates less assembly
     77 ( 0.00%)          self.cap = 0;
    154 ( 0.00%)          self.buf = unsafe { NonNull::new_unchecked(RawVec::NEW.ptr()) };
     81 ( 0.00%)          self.ptr = self.buf.as_ptr();
    146 ( 0.00%)          self.end = self.buf.as_ptr();
      .           
      .                   unsafe {
      .                       ptr::drop_in_place(remaining);
      .                   }
      .               }
      .           }
      .           
      .           #[stable(feature = "vec_intoiter_as_ref", since = "1.46.0")]
-- line 118 ----------------------------------------
-- line 128 ----------------------------------------
      .           unsafe impl<T: Sync, A: Allocator + Sync> Sync for IntoIter<T, A> {}
      .           
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           impl<T, A: Allocator> Iterator for IntoIter<T, A> {
      .               type Item = T;
      .           
      .               #[inline]
      .               fn next(&mut self) -> Option<T> {
220,774 ( 0.06%)          if self.ptr as *const _ == self.end {
 16,701 ( 0.00%)              None
     72 ( 0.00%)          } else if mem::size_of::<T>() == 0 {
      .                       // purposefully don't use 'ptr.offset' because for
      .                       // vectors with 0-size elements this would return the
      .                       // same pointer.
      .                       self.ptr = unsafe { arith_offset(self.ptr as *const i8, 1) as *mut T };
      .           
      .                       // Make up a value of this ZST.
      .                       Some(unsafe { mem::zeroed() })
      .                   } else {
      .                       let old = self.ptr;
 21,511 ( 0.01%)              self.ptr = unsafe { self.ptr.offset(1) };
      .           
 16,993 ( 0.00%)              Some(unsafe { ptr::read(old) })
      .                   }
      .               }
      .           
      .               #[inline]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
      .                   let exact = if mem::size_of::<T>() == 0 {
      .                       (self.end as usize).wrapping_sub(self.ptr as usize)
      .                   } else {
      .                       unsafe { self.end.offset_from(self.ptr) as usize }
      .                   };
      3 ( 0.00%)          (exact, Some(exact))
      .               }
      .           
      .               #[inline]
      .               fn advance_by(&mut self, n: usize) -> Result<(), usize> {
      .                   let step_size = self.len().min(n);
      .                   let to_drop = ptr::slice_from_raw_parts_mut(self.ptr as *mut T, step_size);
      .                   if mem::size_of::<T>() == 0 {
      .                       // SAFETY: due to unchecked casts of unsigned amounts to signed offsets the wraparound
-- line 169 ----------------------------------------
-- line 181 ----------------------------------------
      .                   if step_size < n {
      .                       return Err(step_size);
      .                   }
      .                   Ok(())
      .               }
      .           
      .               #[inline]
      .               fn count(self) -> usize {
      2 ( 0.00%)          self.len()
      .               }
      .           
      .               #[doc(hidden)]
      .               unsafe fn __iterator_get_unchecked(&mut self, i: usize) -> Self::Item
      .               where
      .                   Self: TrustedRandomAccessNoCoerce,
      .               {
      .                   // SAFETY: the caller must guarantee that `i` is in bounds of the
-- line 197 ----------------------------------------
-- line 207 ----------------------------------------
      .                   }
      .               }
      .           }
      .           
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           impl<T, A: Allocator> DoubleEndedIterator for IntoIter<T, A> {
      .               #[inline]
      .               fn next_back(&mut self) -> Option<T> {
  4,056 ( 0.00%)          if self.end == self.ptr {
      .                       None
      .                   } else if mem::size_of::<T>() == 0 {
      .                       // See above for why 'ptr.offset' isn't used
      .                       self.end = unsafe { arith_offset(self.end as *const i8, -1) as *mut T };
      .           
      .                       // Make up a value of this ZST.
      .                       Some(unsafe { mem::zeroed() })
      .                   } else {
    409 ( 0.00%)              self.end = unsafe { self.end.offset(-1) };
      .           
    227 ( 0.00%)              Some(unsafe { ptr::read(self.end) })
      .                   }
      .               }
      .           
      .               #[inline]
      .               fn advance_back_by(&mut self, n: usize) -> Result<(), usize> {
      .                   let step_size = self.len().min(n);
      .                   if mem::size_of::<T>() == 0 {
      .                       // SAFETY: same as for advance_by()
-- line 234 ----------------------------------------
-- line 295 ----------------------------------------
      .               #[cfg(test)]
      .               fn clone(&self) -> Self {
      .                   crate::slice::to_vec(self.as_slice(), self.alloc.clone()).into_iter()
      .               }
      .           }
      .           
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           unsafe impl<#[may_dangle] T, A: Allocator> Drop for IntoIter<T, A> {
396,786 ( 0.10%)      fn drop(&mut self) {
      .                   struct DropGuard<'a, T, A: Allocator>(&'a mut IntoIter<T, A>);
      .           
      .                   impl<T, A: Allocator> Drop for DropGuard<'_, T, A> {
      .                       fn drop(&mut self) {
      .                           unsafe {
      .                               // `IntoIter::alloc` is not used anymore after this
      .                               let alloc = ptr::read(&self.0.alloc);
      .                               // RawVec handles deallocation
 69,647 ( 0.02%)                      let _ = RawVec::from_raw_parts_in(self.0.buf.as_ptr(), self.0.cap, alloc);
      .                           }
      .                       }
      .                   }
      .           
      .                   let guard = DropGuard(self);
      .                   // destroy the remaining elements
      .                   unsafe {
      1 ( 0.00%)              ptr::drop_in_place(guard.0.as_raw_mut_slice());
      .                   }
      .                   // now `guard` will be dropped and do the rest
365,136 ( 0.09%)      }
      .           }
      .           
      .           #[unstable(issue = "none", feature = "inplace_iteration")]
      .           #[doc(hidden)]
      .           unsafe impl<T, A: Allocator> InPlaceIterable for IntoIter<T, A> {}
      .           
      .           #[unstable(issue = "none", feature = "inplace_iteration")]
      .           #[doc(hidden)]
-- line 331 ----------------------------------------

 87,300 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/into_iter.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 111 ----------------------------------------
        .           const EMPTY: u8 = 0b1111_1111;
        .           
        .           /// Control byte value for a deleted bucket.
        .           const DELETED: u8 = 0b1000_0000;
        .           
        .           /// Checks whether a control byte represents a full bucket (top bit is clear).
        .           #[inline]
        .           fn is_full(ctrl: u8) -> bool {
  392,023 ( 0.10%)      ctrl & 0x80 == 0
        .           }
        .           
        .           /// Checks whether a control byte represents a special value (top bit is set).
        .           #[inline]
        .           fn is_special(ctrl: u8) -> bool {
        .               ctrl & 0x80 != 0
        .           }
        .           
        .           /// Checks whether a special control value is EMPTY (just check 1 bit).
        .           #[inline]
        .           fn special_is_empty(ctrl: u8) -> bool {
        .               debug_assert!(is_special(ctrl));
   26,514 ( 0.01%)      ctrl & 0x01 != 0
        .           }
        .           
        .           /// Primary hash function, used to select the initial bucket to probe from.
        .           #[inline]
        .           #[allow(clippy::cast_possible_truncation)]
        .           fn h1(hash: u64) -> usize {
        .               // On 32-bit platforms we simply ignore the higher hash bits.
        .               hash as usize
-- line 140 ----------------------------------------
-- line 143 ----------------------------------------
        .           /// Secondary hash function, saved in the low 7 bits of the control byte.
        .           #[inline]
        .           #[allow(clippy::cast_possible_truncation)]
        .           fn h2(hash: u64) -> u8 {
        .               // Grab the top 7 bits of the hash. While the hash is normally a full 64-bit
        .               // value, some hash functions (such as FxHash) produce a usize result
        .               // instead, which means that the top 32 bits are 0 on 32-bit platforms.
        .               let hash_len = usize::min(mem::size_of::<usize>(), mem::size_of::<u64>());
5,928,413 ( 1.53%)      let top7 = hash >> (hash_len * 8 - 7);
        .               (top7 & 0x7f) as u8 // truncation
        .           }
        .           
        .           /// Probe sequence based on triangular numbers, which is guaranteed (since our
        .           /// table size is a power of two) to visit every group of elements exactly once.
        .           ///
        .           /// A triangular probe has us jump by 1 more group every time. So first we
        .           /// jump by 1 group (meaning we just continue our linear scan), then 2 groups
-- line 159 ----------------------------------------
-- line 170 ----------------------------------------
        .               #[inline]
        .               fn move_next(&mut self, bucket_mask: usize) {
        .                   // We should have found an empty bucket by now and ended the probe.
        .                   debug_assert!(
        .                       self.stride <= bucket_mask,
        .                       "Went past end of probe sequence"
        .                   );
        .           
   40,826 ( 0.01%)          self.stride += Group::WIDTH;
   40,826 ( 0.01%)          self.pos += self.stride;
   35,157 ( 0.01%)          self.pos &= bucket_mask;
        .               }
        .           }
        .           
        .           /// Returns the number of buckets needed to hold the given number of items,
        .           /// taking the maximum load factor into account.
        .           ///
        .           /// Returns `None` if an overflow occurs.
        .           // Workaround for emscripten bug emscripten-core/emscripten-fastcomp#258
        .           #[cfg_attr(target_os = "emscripten", inline(never))]
        .           #[cfg_attr(not(target_os = "emscripten"), inline)]
        .           fn capacity_to_buckets(cap: usize) -> Option<usize> {
        .               debug_assert_ne!(cap, 0);
        .           
        .               // For small tables we require at least 1 empty bucket so that lookups are
        .               // guaranteed to terminate if an element doesn't exist in the table.
   20,868 ( 0.01%)      if cap < 8 {
        .                   // We don't bother with a table size of 2 buckets since that can only
        .                   // hold a single element. Instead we skip directly to a 4 bucket table
        .                   // which can hold 3 elements.
   42,440 ( 0.01%)          return Some(if cap < 4 { 4 } else { 8 });
        .               }
        .           
        .               // Otherwise require 1/8 buckets to be empty (87.5% load)
        .               //
        .               // Be careful when modifying this, calculate_layout relies on the
        .               // overflow check here.
   11,676 ( 0.00%)      let adjusted_cap = cap.checked_mul(8)? / 7;
        .           
        .               // Any overflows will have been caught by the checked_mul. Also, any
        .               // rounding errors from the division above will be cleaned up by
        .               // next_power_of_two (which can't overflow because of the previous division).
        .               Some(adjusted_cap.next_power_of_two())
        .           }
        .           
        .           /// Returns the maximum effective capacity for the given bucket mask, taking
        .           /// the maximum load factor into account.
        .           #[inline]
        .           fn bucket_mask_to_capacity(bucket_mask: usize) -> usize {
   48,960 ( 0.01%)      if bucket_mask < 8 {
        .                   // For tables with 1/2/4/8 buckets, we always reserve one empty slot.
        .                   // Keep in mind that the bucket mask is one less than the bucket count.
        .                   bucket_mask
        .               } else {
        .                   // For larger tables we reserve 12.5% of the slots as empty.
   16,374 ( 0.00%)          ((bucket_mask + 1) / 8) * 7
        .               }
        .           }
        .           
        .           /// Helper which allows the max calculation for ctrl_align to be statically computed for each T
        .           /// while keeping the rest of `calculate_layout_for` independent of `T`
        .           #[derive(Copy, Clone)]
        .           struct TableLayout {
        .               size: usize,
-- line 233 ----------------------------------------
-- line 246 ----------------------------------------
        .           
        .               #[inline]
        .               fn calculate_layout_for(self, buckets: usize) -> Option<(Layout, usize)> {
        .                   debug_assert!(buckets.is_power_of_two());
        .           
        .                   let TableLayout { size, ctrl_align } = self;
        .                   // Manual layout calculation since Layout methods are not yet stable.
        .                   let ctrl_offset =
   46,702 ( 0.01%)              size.checked_mul(buckets)?.checked_add(ctrl_align - 1)? & !(ctrl_align - 1);
   59,317 ( 0.02%)          let len = ctrl_offset.checked_add(buckets + Group::WIDTH)?;
        .           
        .                   Some((
        .                       unsafe { Layout::from_size_align_unchecked(len, ctrl_align) },
        .                       ctrl_offset,
        .                   ))
        .               }
        .           }
        .           
-- line 263 ----------------------------------------
-- line 337 ----------------------------------------
        .                   }
        .               }
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub unsafe fn drop(&self) {
        .                   self.as_ptr().drop_in_place();
        .               }
        .               #[inline]
        .               pub unsafe fn read(&self) -> T {
       76 ( 0.00%)          self.as_ptr().read()
        .               }
        .               #[inline]
        .               pub unsafe fn write(&self, val: T) {
        .                   self.as_ptr().write(val);
        .               }
        .               #[inline]
        .               pub unsafe fn as_ref<'a>(&self) -> &'a T {
        .                   &*self.as_ptr()
-- line 353 ----------------------------------------
-- line 422 ----------------------------------------
        .               /// Creates a new empty hash table without allocating any memory, using the
        .               /// given allocator.
        .               ///
        .               /// In effect this returns a table with exactly 1 bucket. However we can
        .               /// leave the data pointer dangling since that bucket is never written to
        .               /// due to our load factor forcing us to always have at least 1 free bucket.
        .               #[inline]
        .               pub fn new_in(alloc: A) -> Self {
      630 ( 0.00%)          Self {
        .                       table: RawTableInner::new_in(alloc),
        .                       marker: PhantomData,
        .                   }
        .               }
        .           
        .               /// Allocates a new hash table with the given number of buckets.
        .               ///
        .               /// The control bytes are left uninitialized.
-- line 438 ----------------------------------------
-- line 440 ----------------------------------------
        .               unsafe fn new_uninitialized(
        .                   alloc: A,
        .                   buckets: usize,
        .                   fallibility: Fallibility,
        .               ) -> Result<Self, TryReserveError> {
        .                   debug_assert!(buckets.is_power_of_two());
        .           
        .                   Ok(Self {
       85 ( 0.00%)              table: RawTableInner::new_uninitialized(
        .                           alloc,
        .                           TableLayout::new::<T>(),
        .                           buckets,
        .                           fallibility,
        .                       )?,
        .                       marker: PhantomData,
        .                   })
        .               }
-- line 456 ----------------------------------------
-- line 458 ----------------------------------------
        .               /// Attempts to allocate a new hash table with at least enough capacity
        .               /// for inserting the given number of elements without reallocating.
        .               fn fallible_with_capacity(
        .                   alloc: A,
        .                   capacity: usize,
        .                   fallibility: Fallibility,
        .               ) -> Result<Self, TryReserveError> {
        .                   Ok(Self {
    5,175 ( 0.00%)              table: RawTableInner::fallible_with_capacity(
        .                           alloc,
        .                           TableLayout::new::<T>(),
        .                           capacity,
        .                           fallibility,
        .                       )?,
        .                       marker: PhantomData,
        .                   })
        .               }
-- line 474 ----------------------------------------
-- line 527 ----------------------------------------
        .                   debug_assert_ne!(self.table.bucket_mask, 0);
        .                   debug_assert!(index < self.buckets());
        .                   Bucket::from_base_index(self.data_end(), index)
        .               }
        .           
        .               /// Erases an element from the table without dropping it.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[deprecated(since = "0.8.1", note = "use erase or remove instead")]
    3,694 ( 0.00%)      pub unsafe fn erase_no_drop(&mut self, item: &Bucket<T>) {
    3,694 ( 0.00%)          let index = self.bucket_index(item);
        .                   self.table.erase(index);
    7,388 ( 0.00%)      }
        .           
        .               /// Erases an element from the table, dropping it in place.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[allow(clippy::needless_pass_by_value)]
        .               #[allow(deprecated)]
        .               pub unsafe fn erase(&mut self, item: Bucket<T>) {
        .                   // Erase the element from the table first since drop might panic.
    4,098 ( 0.00%)          self.erase_no_drop(&item);
        .                   item.drop();
        .               }
        .           
        .               /// Finds and erases an element from the table, dropping it in place.
        .               /// Returns true if an element was found.
        .               #[cfg(feature = "raw")]
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn erase_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> bool {
-- line 554 ----------------------------------------
-- line 563 ----------------------------------------
        .                   }
        .               }
        .           
        .               /// Removes an element from the table, returning it.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[allow(clippy::needless_pass_by_value)]
        .               #[allow(deprecated)]
        .               pub unsafe fn remove(&mut self, item: Bucket<T>) -> T {
    3,290 ( 0.00%)          self.erase_no_drop(&item);
       50 ( 0.00%)          item.read()
        .               }
        .           
        .               /// Finds and removes an element from the table, returning it.
        .               #[cfg_attr(feature = "inline-more", inline)]
  165,265 ( 0.04%)      pub fn remove_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<T> {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
       88 ( 0.00%)          match self.find(hash, eq) {
    3,369 ( 0.00%)              Some(bucket) => Some(unsafe { self.remove(bucket) }),
   52,446 ( 0.01%)              None => None,
        .                   }
  242,229 ( 0.06%)      }
        .           
        .               /// Marks all table buckets as empty without dropping their contents.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn clear_no_drop(&mut self) {
        .                   self.table.clear_no_drop();
        .               }
        .           
        .               /// Removes all elements from the table without freeing the backing memory.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn clear(&mut self) {
        .                   // Ensure that the table is reset even if one of the drops panic
        .                   let mut self_ = guard(self, |self_| self_.clear_no_drop());
        .                   unsafe {
        1 ( 0.00%)              self_.drop_elements();
        .                   }
        .               }
        .           
        7 ( 0.00%)      unsafe fn drop_elements(&mut self) {
    1,222 ( 0.00%)          if mem::needs_drop::<T>() && !self.is_empty() {
        .                       for item in self.iter() {
        .                           item.drop();
        .                       }
        .                   }
        8 ( 0.00%)      }
        .           
        .               /// Shrinks the table to fit `max(self.len(), min_size)` elements.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn shrink_to(&mut self, min_size: usize, hasher: impl Fn(&T) -> u64) {
        .                   // Calculate the minimal number of elements that we need to reserve
        .                   // space for.
        .                   let min_size = usize::max(self.table.items, min_size);
        .                   if min_size == 0 {
-- line 615 ----------------------------------------
-- line 642 ----------------------------------------
        .                       }
        .                   }
        .               }
        .           
        .               /// Ensures that at least `additional` items can be inserted into the table
        .               /// without reallocation.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn reserve(&mut self, additional: usize, hasher: impl Fn(&T) -> u64) {
   67,645 ( 0.02%)          if additional > self.table.growth_left {
        .                       // Avoid `Result::unwrap_or_else` because it bloats LLVM IR.
   36,658 ( 0.01%)              if self
        .                           .reserve_rehash(additional, hasher, Fallibility::Infallible)
        .                           .is_err()
        .                       {
        .                           unsafe { hint::unreachable_unchecked() }
        .                       }
        .                   }
        .               }
        .           
-- line 660 ----------------------------------------
-- line 671 ----------------------------------------
        .                   } else {
        .                       Ok(())
        .                   }
        .               }
        .           
        .               /// Out-of-line slow path for `reserve` and `try_reserve`.
        .               #[cold]
        .               #[inline(never)]
   78,582 ( 0.02%)      fn reserve_rehash(
        .                   &mut self,
        .                   additional: usize,
        .                   hasher: impl Fn(&T) -> u64,
        .                   fallibility: Fallibility,
        .               ) -> Result<(), TryReserveError> {
        .                   unsafe {
        .                       self.table.reserve_rehash_inner(
        .                           additional,
-- line 687 ----------------------------------------
-- line 690 ----------------------------------------
        .                           TableLayout::new::<T>(),
        .                           if mem::needs_drop::<T>() {
        .                               Some(mem::transmute(ptr::drop_in_place::<T> as unsafe fn(*mut T)))
        .                           } else {
        .                               None
        .                           },
        .                       )
        .                   }
   54,608 ( 0.01%)      }
        .           
        .               /// Allocates a new table of a different size and moves the contents of the
        .               /// current table into it.
        .               fn resize(
        .                   &mut self,
        .                   capacity: usize,
        .                   hasher: impl Fn(&T) -> u64,
        .                   fallibility: Fallibility,
-- line 706 ----------------------------------------
-- line 714 ----------------------------------------
        .                       )
        .                   }
        .               }
        .           
        .               /// Inserts a new element into the table, and returns its raw bucket.
        .               ///
        .               /// This does not check if the given element already exists in the table.
        .               #[cfg_attr(feature = "inline-more", inline)]
  507,496 ( 0.13%)      pub fn insert(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> Bucket<T> {
        .                   unsafe {
        .                       let mut index = self.table.find_insert_slot(hash);
        .           
        .                       // We can avoid growing the table once we have reached our load
        .                       // factor if we are replacing a tombstone. This works since the
        .                       // number of EMPTY slots does not change in this case.
      725 ( 0.00%)              let old_ctrl = *self.table.ctrl(index);
  361,551 ( 0.09%)              if unlikely(self.table.growth_left == 0 && special_is_empty(old_ctrl)) {
        .                           self.reserve(1, hasher);
        .                           index = self.table.find_insert_slot(hash);
        .                       }
        .           
        .                       self.table.record_item_insert_at(index, old_ctrl, hash);
        .           
        .                       let bucket = self.bucket(index);
        2 ( 0.00%)              bucket.write(value);
        .                       bucket
        .                   }
  373,668 ( 0.10%)      }
        .           
        .               /// Attempts to insert a new element without growing the table and return its raw bucket.
        .               ///
        .               /// Returns an `Err` containing the given element if inserting it would require growing the
        .               /// table.
        .               ///
        .               /// This does not check if the given element already exists in the table.
        .               #[cfg(feature = "raw")]
-- line 749 ----------------------------------------
-- line 760 ----------------------------------------
        .                       }
        .                   }
        .               }
        .           
        .               /// Inserts a new element into the table, and returns a mutable reference to it.
        .               ///
        .               /// This does not check if the given element already exists in the table.
        .               #[cfg_attr(feature = "inline-more", inline)]
  118,128 ( 0.03%)      pub fn insert_entry(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> &mut T {
        4 ( 0.00%)          unsafe { self.insert(hash, value, hasher).as_mut() }
   88,596 ( 0.02%)      }
        .           
        .               /// Inserts a new element into the table, without growing the table.
        .               ///
        .               /// There must be enough space in the table to insert the new element.
        .               ///
        .               /// This does not check if the given element already exists in the table.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[cfg(any(feature = "raw", feature = "rustc-internal-api"))]
      793 ( 0.00%)      pub unsafe fn insert_no_grow(&mut self, hash: u64, value: T) -> Bucket<T> {
   73,749 ( 0.02%)          let (index, old_ctrl) = self.table.prepare_insert_slot(hash);
    4,608 ( 0.00%)          let bucket = self.table.bucket(index);
        .           
        .                   // If we are replacing a DELETED entry then we don't need to update
        .                   // the load counter.
  154,773 ( 0.04%)          self.table.growth_left -= special_is_empty(old_ctrl) as usize;
        .           
        .                   bucket.write(value);
  124,292 ( 0.03%)          self.table.items += 1;
        .                   bucket
    1,572 ( 0.00%)      }
        .           
        .               /// Temporary removes a bucket, applying the given function to the removed
        .               /// element and optionally put back the returned value in the same bucket.
        .               ///
        .               /// Returns `true` if the bucket still contains an element
        .               ///
        .               /// This does not check if the given bucket is actually occupied.
        .               #[cfg_attr(feature = "inline-more", inline)]
-- line 798 ----------------------------------------
-- line 813 ----------------------------------------
        .                       true
        .                   } else {
        .                       false
        .                   }
        .               }
        .           
        .               /// Searches for an element in the table.
        .               #[inline]
       80 ( 0.00%)      pub fn find(&self, hash: u64, mut eq: impl FnMut(&T) -> bool) -> Option<Bucket<T>> {
    5,541 ( 0.00%)          let result = self.table.find_inner(hash, &mut |index| unsafe {
    2,750 ( 0.00%)              eq(self.bucket(index).as_ref())
    2,127 ( 0.00%)          });
        .           
        .                   // Avoid `Option::map` because it bloats LLVM IR.
        .                   match result {
      398 ( 0.00%)              Some(index) => Some(unsafe { self.bucket(index) }),
        .                       None => None,
        .                   }
       80 ( 0.00%)      }
        .           
        .               /// Gets a reference to an element in the table.
        .               #[inline]
        .               pub fn get(&self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&T> {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
    3,612 ( 0.00%)          match self.find(hash, eq) {
        .                       Some(bucket) => Some(unsafe { bucket.as_ref() }),
        .                       None => None,
        .                   }
        .               }
        .           
        .               /// Gets a mutable reference to an element in the table.
        .               #[inline]
        .               pub fn get_mut(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&mut T> {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
       84 ( 0.00%)          match self.find(hash, eq) {
        .                       Some(bucket) => Some(unsafe { bucket.as_mut() }),
        .                       None => None,
        .                   }
        .               }
        .           
        .               /// Attempts to get mutable references to `N` entries in the table at once.
        .               ///
        .               /// Returns an array of length `N` with the results of each query.
-- line 855 ----------------------------------------
-- line 920 ----------------------------------------
        .               #[inline]
        .               pub fn len(&self) -> usize {
        .                   self.table.items
        .               }
        .           
        .               /// Returns `true` if the table contains no elements.
        .               #[inline]
        .               pub fn is_empty(&self) -> bool {
  264,848 ( 0.07%)          self.len() == 0
        .               }
        .           
        .               /// Returns the number of buckets in the table.
        .               #[inline]
        .               pub fn buckets(&self) -> usize {
        .                   self.table.bucket_mask + 1
        .               }
        .           
-- line 936 ----------------------------------------
-- line 938 ----------------------------------------
        .               /// the caller to ensure that the `RawTable` outlives the `RawIter`.
        .               /// Because we cannot make the `next` method unsafe on the `RawIter`
        .               /// struct, we have to make the `iter` method unsafe.
        .               #[inline]
        .               pub unsafe fn iter(&self) -> RawIter<T> {
        .                   let data = Bucket::from_base_index(self.data_end(), 0);
        .                   RawIter {
        .                       iter: RawIterRange::new(self.table.ctrl.as_ptr(), data, self.table.buckets()),
   40,441 ( 0.01%)              items: self.table.items,
        .                   }
        .               }
        .           
        .               /// Returns an iterator over occupied buckets that could match a given hash.
        .               ///
        .               /// `RawTable` only stores 7 bits of the hash value, so this iterator may
        .               /// return items that have a hash value different than the one provided. You
        .               /// should always validate the returned values before using them.
-- line 954 ----------------------------------------
-- line 995 ----------------------------------------
        .               /// Iteration starts at the provided iterator's current location.
        .               ///
        .               /// It is up to the caller to ensure that the iterator is valid for this
        .               /// `RawTable` and covers all items that remain in the table.
        .               pub unsafe fn into_iter_from(self, iter: RawIter<T>) -> RawIntoIter<T, A> {
        .                   debug_assert_eq!(iter.len(), self.len());
        .           
        .                   let alloc = self.table.alloc.clone();
    1,460 ( 0.00%)          let allocation = self.into_allocation();
    1,095 ( 0.00%)          RawIntoIter {
    1,825 ( 0.00%)              iter,
        .                       allocation,
        .                       marker: PhantomData,
        .                       alloc,
        .                   }
        .               }
        .           
        .               /// Converts the table into a raw allocation. The contents of the table
        .               /// should be dropped using a `RawIter` before freeing the allocation.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub(crate) fn into_allocation(self) -> Option<(NonNull<u8>, Layout)> {
      533 ( 0.00%)          let alloc = if self.table.is_empty_singleton() {
        .                       None
        .                   } else {
        .                       // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
        .                       let (layout, ctrl_offset) = match calculate_layout::<T>(self.table.buckets()) {
        .                           Some(lco) => lco,
        .                           None => unsafe { hint::unreachable_unchecked() },
        .                       };
        .                       Some((
       64 ( 0.00%)                  unsafe { NonNull::new_unchecked(self.table.ctrl.as_ptr().sub(ctrl_offset)) },
        .                           layout,
        .                       ))
        .                   };
        .                   mem::forget(self);
        .                   alloc
        .               }
        .           }
        .           
-- line 1033 ----------------------------------------
-- line 1042 ----------------------------------------
        .               T: Sync,
        .               A: Sync,
        .           {
        .           }
        .           
        .           impl<A> RawTableInner<A> {
        .               #[inline]
        .               const fn new_in(alloc: A) -> Self {
  172,622 ( 0.04%)          Self {
        .                       // Be careful to cast the entire slice to a raw pointer.
        .                       ctrl: unsafe { NonNull::new_unchecked(Group::static_empty() as *const _ as *mut u8) },
        .                       bucket_mask: 0,
        .                       items: 0,
        .                       growth_left: 0,
        .                       alloc,
        .                   }
        .               }
        .           }
        .           
        .           impl<A: Allocator + Clone> RawTableInner<A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
   83,501 ( 0.02%)      unsafe fn new_uninitialized(
        .                   alloc: A,
        .                   table_layout: TableLayout,
        .                   buckets: usize,
        .                   fallibility: Fallibility,
        .               ) -> Result<Self, TryReserveError> {
        .                   debug_assert!(buckets.is_power_of_two());
        .           
        .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
-- line 1071 ----------------------------------------
-- line 1078 ----------------------------------------
        .                   // exceed `isize::MAX`. We can skip this check on 64-bit systems since
        .                   // such allocations will never succeed anyways.
        .                   //
        .                   // This mirrors what Vec does in the standard library.
        .                   if mem::size_of::<usize>() < 8 && layout.size() > isize::MAX as usize {
        .                       return Err(fallibility.capacity_overflow());
        .                   }
        .           
   19,198 ( 0.00%)          let ptr: NonNull<u8> = match do_alloc(&alloc, layout) {
        .                       Ok(block) => block.cast(),
        .                       Err(_) => return Err(fallibility.alloc_err(layout)),
        .                   };
        .           
        .                   let ctrl = NonNull::new_unchecked(ptr.as_ptr().add(ctrl_offset));
   46,986 ( 0.01%)          Ok(Self {
        .                       ctrl,
   18,282 ( 0.00%)              bucket_mask: buckets - 1,
        .                       items: 0,
        .                       growth_left: bucket_mask_to_capacity(buckets - 1),
        .                       alloc,
        .                   })
   60,888 ( 0.02%)      }
        .           
        .               #[inline]
   11,137 ( 0.00%)      fn fallible_with_capacity(
        .                   alloc: A,
        .                   table_layout: TableLayout,
        .                   capacity: usize,
        .                   fallibility: Fallibility,
        .               ) -> Result<Self, TryReserveError> {
    2,836 ( 0.00%)          if capacity == 0 {
    2,701 ( 0.00%)              Ok(Self::new_in(alloc))
        .                   } else {
        .                       unsafe {
        .                           let buckets =
        .                               capacity_to_buckets(capacity).ok_or_else(|| fallibility.capacity_overflow())?;
        .           
   38,182 ( 0.01%)                  let result = Self::new_uninitialized(alloc, table_layout, buckets, fallibility)?;
        .                           result.ctrl(0).write_bytes(EMPTY, result.num_ctrl_bytes());
        .           
    5,184 ( 0.00%)                  Ok(result)
        .                       }
        .                   }
   11,137 ( 0.00%)      }
        .           
        .               /// Searches for an empty or deleted bucket which is suitable for inserting
        .               /// a new element and sets the hash for that slot.
        .               ///
        .               /// There must be at least 1 empty bucket in the table.
        .               #[inline]
   25,734 ( 0.01%)      unsafe fn prepare_insert_slot(&self, hash: u64) -> (usize, u8) {
        .                   let index = self.find_insert_slot(hash);
   25,734 ( 0.01%)          let old_ctrl = *self.ctrl(index);
        .                   self.set_ctrl_h2(index, hash);
        .                   (index, old_ctrl)
   51,468 ( 0.01%)      }
        .           
        .               /// Searches for an empty or deleted bucket which is suitable for inserting
        .               /// a new element.
        .               ///
        .               /// There must be at least 1 empty bucket in the table.
        .               #[inline]
        .               fn find_insert_slot(&self, hash: u64) -> usize {
        .                   let mut probe_seq = self.probe_seq(hash);
        .                   loop {
        .                       unsafe {
        .                           let group = Group::load(self.ctrl(probe_seq.pos));
  250,402 ( 0.06%)                  if let Some(bit) = group.match_empty_or_deleted().lowest_set_bit() {
  734,530 ( 0.19%)                      let result = (probe_seq.pos + bit) & self.bucket_mask;
        .           
        .                               // In tables smaller than the group width, trailing control
        .                               // bytes outside the range of the table are filled with
        .                               // EMPTY entries. These will unfortunately trigger a
        .                               // match, but once masked may point to a full bucket that
        .                               // is already occupied. We detect this situation here and
        .                               // perform a second scan starting at the beginning of the
        .                               // table. This second scan is guaranteed to find an empty
        .                               // slot (due to the load factor) before hitting the trailing
        .                               // control bytes (containing EMPTY).
  335,176 ( 0.09%)                      if unlikely(is_full(*self.ctrl(result))) {
        .                                   debug_assert!(self.bucket_mask < Group::WIDTH);
        .                                   debug_assert_ne!(probe_seq.pos, 0);
        .                                   return Group::load_aligned(self.ctrl(0))
        .                                       .match_empty_or_deleted()
        .                                       .lowest_set_bit_nonzero();
        .                               }
        .           
        .                               return result;
-- line 1165 ----------------------------------------
-- line 1171 ----------------------------------------
        .           
        .               /// Searches for an element in the table. This uses dynamic dispatch to reduce the amount of
        .               /// code generated, but it is eliminated by LLVM optimizations.
        .               #[inline]
        .               fn find_inner(&self, hash: u64, eq: &mut dyn FnMut(usize) -> bool) -> Option<usize> {
        .                   let h2_hash = h2(hash);
        .                   let mut probe_seq = self.probe_seq(hash);
        .           
   10,580 ( 0.00%)          loop {
        .                       let group = unsafe { Group::load(self.ctrl(probe_seq.pos)) };
        .           
  744,417 ( 0.19%)              for bit in group.match_byte(h2_hash) {
1,350,372 ( 0.35%)                  let index = (probe_seq.pos + bit) & self.bucket_mask;
        .           
  819,297 ( 0.21%)                  if likely(eq(index)) {
        .                               return Some(index);
        .                           }
        .                       }
        .           
  263,503 ( 0.07%)              if likely(group.match_empty().any_bit_set()) {
        .                           return None;
        .                       }
        .           
        .                       probe_seq.move_next(self.bucket_mask);
        .                   }
        .               }
        .           
        .               #[allow(clippy::mut_mut)]
-- line 1198 ----------------------------------------
-- line 1225 ----------------------------------------
        .                   Bucket::from_base_index(self.data_end(), index)
        .               }
        .           
        .               #[inline]
        .               unsafe fn bucket_ptr(&self, index: usize, size_of: usize) -> *mut u8 {
        .                   debug_assert_ne!(self.bucket_mask, 0);
        .                   debug_assert!(index < self.buckets());
        .                   let base: *mut u8 = self.data_end().as_ptr();
  978,512 ( 0.25%)          base.sub((index + 1) * size_of)
        .               }
        .           
        .               #[inline]
        .               unsafe fn data_end<T>(&self) -> NonNull<T> {
        .                   NonNull::new_unchecked(self.ctrl.as_ptr().cast())
        .               }
        .           
        .               /// Returns an iterator-like object for a probe sequence on the table.
        .               ///
        .               /// This iterator never terminates, but is guaranteed to visit each bucket
        .               /// group exactly once. The loop using `probe_seq` must terminate upon
        .               /// reaching a group containing an empty bucket.
        .               #[inline]
        .               fn probe_seq(&self, hash: u64) -> ProbeSeq {
        .                   ProbeSeq {
4,208,176 ( 1.09%)              pos: h1(hash) & self.bucket_mask,
        .                       stride: 0,
        .                   }
        .               }
        .           
        .               /// Returns the index of a bucket for which a value must be inserted if there is enough rooom
        .               /// in the table, otherwise returns error
        .               #[cfg(feature = "raw")]
        .               #[inline]
-- line 1257 ----------------------------------------
-- line 1263 ----------------------------------------
        .                   } else {
        .                       self.record_item_insert_at(index, old_ctrl, hash);
        .                       Ok(index)
        .                   }
        .               }
        .           
        .               #[inline]
        .               unsafe fn record_item_insert_at(&mut self, index: usize, old_ctrl: u8, hash: u64) {
  451,895 ( 0.12%)          self.growth_left -= special_is_empty(old_ctrl) as usize;
        .                   self.set_ctrl_h2(index, hash);
  361,516 ( 0.09%)          self.items += 1;
        .               }
        .           
        .               #[inline]
        .               fn is_in_same_group(&self, i: usize, new_i: usize, hash: u64) -> bool {
        .                   let probe_seq_pos = self.probe_seq(hash).pos;
        .                   let probe_index =
        .                       |pos: usize| (pos.wrapping_sub(probe_seq_pos) & self.bucket_mask) / Group::WIDTH;
        .                   probe_index(i) == probe_index(new_i)
-- line 1281 ----------------------------------------
-- line 1312 ----------------------------------------
        .                   // replicate the buckets at the end of the trailing group. For example
        .                   // with 2 buckets and a group size of 4, the control bytes will look
        .                   // like this:
        .                   //
        .                   //     Real    |             Replicated
        .                   // ---------------------------------------------
        .                   // | [A] | [B] | [EMPTY] | [EMPTY] | [A] | [B] |
        .                   // ---------------------------------------------
  717,621 ( 0.19%)          let index2 = ((index.wrapping_sub(Group::WIDTH)) & self.bucket_mask) + Group::WIDTH;
        .           
  239,207 ( 0.06%)          *self.ctrl(index) = ctrl;
  239,302 ( 0.06%)          *self.ctrl(index2) = ctrl;
        .               }
        .           
        .               /// Returns a pointer to a control byte.
        .               #[inline]
        .               unsafe fn ctrl(&self, index: usize) -> *mut u8 {
        .                   debug_assert!(index < self.num_ctrl_bytes());
        .                   self.ctrl.as_ptr().add(index)
        .               }
        .           
        .               #[inline]
        .               fn buckets(&self) -> usize {
   86,821 ( 0.02%)          self.bucket_mask + 1
        .               }
        .           
        .               #[inline]
        .               fn num_ctrl_bytes(&self) -> usize {
   43,336 ( 0.01%)          self.bucket_mask + 1 + Group::WIDTH
        .               }
        .           
        .               #[inline]
        .               fn is_empty_singleton(&self) -> bool {
  295,578 ( 0.08%)          self.bucket_mask == 0
        .               }
        .           
        .               #[allow(clippy::mut_mut)]
        .               #[inline]
        .               unsafe fn prepare_resize(
        .                   &self,
        .                   table_layout: TableLayout,
        .                   capacity: usize,
        .                   fallibility: Fallibility,
        .               ) -> Result<crate::scopeguard::ScopeGuard<Self, impl FnMut(&mut Self)>, TryReserveError> {
        .                   debug_assert!(self.items <= capacity);
        .           
        .                   // Allocate and initialize the new table.
      321 ( 0.00%)          let mut new_table = RawTableInner::fallible_with_capacity(
        .                       self.alloc.clone(),
        .                       table_layout,
        .                       capacity,
        .                       fallibility,
        .                   )?;
   22,769 ( 0.01%)          new_table.growth_left -= self.items;
        .                   new_table.items = self.items;
        .           
        .                   // The hash function may panic, in which case we simply free the new
        .                   // table without dropping any elements that may have been copied into
        .                   // it.
        .                   //
        .                   // This guard is also used to free the old table on success, see
        .                   // the comment at the bottom of this function.
        .                   Ok(guard(new_table, move |self_| {
    9,677 ( 0.00%)              if !self_.is_empty_singleton() {
        .                           self_.free_buckets(table_layout);
        .                       }
        .                   }))
        .               }
        .           
        .               /// Reserves or rehashes to make room for `additional` more elements.
        .               ///
        .               /// This uses dynamic dispatch to reduce the amount of
-- line 1383 ----------------------------------------
-- line 1388 ----------------------------------------
        .                   &mut self,
        .                   additional: usize,
        .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
        .                   fallibility: Fallibility,
        .                   layout: TableLayout,
        .                   drop: Option<fn(*mut u8)>,
        .               ) -> Result<(), TryReserveError> {
        .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
   19,355 ( 0.01%)          let new_items = match self.items.checked_add(additional) {
        .                       Some(new_items) => new_items,
        .                       None => return Err(fallibility.capacity_overflow()),
        .                   };
   19,354 ( 0.01%)          let full_capacity = bucket_mask_to_capacity(self.bucket_mask);
   42,252 ( 0.01%)          if new_items <= full_capacity / 2 {
        .                       // Rehash in-place without re-allocating if we have plenty of spare
        .                       // capacity that is locked up due to DELETED entries.
        .                       self.rehash_in_place(hasher, layout.size, drop);
        .                       Ok(())
        .                   } else {
        .                       // Otherwise, conservatively resize to at least the next size up
        .                       // to avoid churning deletes into frequent rehashes.
        .                       self.resize_inner(
    9,677 ( 0.00%)                  usize::max(new_items, full_capacity + 1),
        .                           hasher,
        .                           fallibility,
        .                           layout,
        .                       )
        .                   }
        .               }
        .           
        .               /// Allocates a new table of a different size and moves the contents of the
-- line 1418 ----------------------------------------
-- line 1424 ----------------------------------------
        .               #[inline(always)]
        .               unsafe fn resize_inner(
        .                   &mut self,
        .                   capacity: usize,
        .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
        .                   fallibility: Fallibility,
        .                   layout: TableLayout,
        .               ) -> Result<(), TryReserveError> {
      800 ( 0.00%)          let mut new_table = self.prepare_resize(layout, capacity, fallibility)?;
        .           
        .                   // Copy all elements to the new table.
        .                   for i in 0..self.buckets() {
  147,226 ( 0.04%)              if !is_full(*self.ctrl(i)) {
        .                           continue;
        .                       }
        .           
        .                       // This may panic.
        .                       let hash = hasher(self, i);
        .           
        .                       // We can use a simpler version of insert() here since:
        .                       // - there are no DELETED entries.
-- line 1444 ----------------------------------------
-- line 1454 ----------------------------------------
        .                   }
        .           
        .                   // We successfully copied all elements without panicking. Now replace
        .                   // self with the new table. The old table will have its memory freed but
        .                   // the items will not be dropped (since they have been moved into the
        .                   // new table).
        .                   mem::swap(self, &mut new_table);
        .           
    9,677 ( 0.00%)          Ok(())
        .               }
        .           
        .               /// Rehashes the contents of the table in place (i.e. without changing the
        .               /// allocation).
        .               ///
        .               /// If `hasher` panics then some the table's contents may be lost.
        .               ///
        .               /// This uses dynamic dispatch to reduce the amount of
-- line 1470 ----------------------------------------
-- line 1554 ----------------------------------------
        .               #[inline]
        .               unsafe fn free_buckets(&mut self, table_layout: TableLayout) {
        .                   // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
        .                   let (layout, ctrl_offset) = match table_layout.calculate_layout_for(self.buckets()) {
        .                       Some(lco) => lco,
        .                       None => hint::unreachable_unchecked(),
        .                   };
        .                   self.alloc.deallocate(
    7,270 ( 0.00%)              NonNull::new_unchecked(self.ctrl.as_ptr().sub(ctrl_offset)),
        .                       layout,
        .                   );
        .               }
        .           
        .               /// Marks all table buckets as empty without dropping their contents.
        .               #[inline]
        .               fn clear_no_drop(&mut self) {
      469 ( 0.00%)          if !self.is_empty_singleton() {
        .                       unsafe {
        .                           self.ctrl(0).write_bytes(EMPTY, self.num_ctrl_bytes());
        .                       }
        .                   }
      719 ( 0.00%)          self.items = 0;
      469 ( 0.00%)          self.growth_left = bucket_mask_to_capacity(self.bucket_mask);
        .               }
        .           
        .               #[inline]
        .               unsafe fn erase(&mut self, index: usize) {
        .                   debug_assert!(is_full(*self.ctrl(index)));
   22,397 ( 0.01%)          let index_before = index.wrapping_sub(Group::WIDTH) & self.bucket_mask;
        .                   let empty_before = Group::load(self.ctrl(index_before)).match_empty();
        .                   let empty_after = Group::load(self.ctrl(index)).match_empty();
        .           
        .                   // If we are inside a continuous block of Group::WIDTH full or deleted
        .                   // cells then a probe window may have seen a full block when trying to
        .                   // insert. We therefore need to keep that block non-empty so that
        .                   // lookups will continue searching to the next probe window.
        .                   //
        .                   // Note that in this context `leading_zeros` refers to the bytes at the
        .                   // end of a group, while `trailing_zeros` refers to the bytes at the
        .                   // beginning of a group.
   89,588 ( 0.02%)          let ctrl = if empty_before.leading_zeros() + empty_after.trailing_zeros() >= Group::WIDTH {
        .                       DELETED
        .                   } else {
  109,820 ( 0.03%)              self.growth_left += 1;
        .                       EMPTY
        .                   };
        .                   self.set_ctrl(index, ctrl);
   89,588 ( 0.02%)          self.items -= 1;
        .               }
        .           }
        .           
        .           impl<T: Clone, A: Allocator + Clone> Clone for RawTable<T, A> {
    1,696 ( 0.00%)      fn clone(&self) -> Self {
      228 ( 0.00%)          if self.table.is_empty_singleton() {
        .                       Self::new_in(self.table.alloc.clone())
        .                   } else {
        .                       unsafe {
        .                           let mut new_table = ManuallyDrop::new(
        .                               // Avoid `Result::ok_or_else` because it bloats LLVM IR.
        .                               match Self::new_uninitialized(
        .                                   self.table.alloc.clone(),
        .                                   self.table.buckets(),
-- line 1615 ----------------------------------------
-- line 1624 ----------------------------------------
        .                               // We need to free the memory allocated for the new table.
        .                               new_table.free_buckets();
        .                           });
        .           
        .                           // Return the newly created table.
        .                           ManuallyDrop::into_inner(new_table)
        .                       }
        .                   }
    1,908 ( 0.00%)      }
        .           
        .               fn clone_from(&mut self, source: &Self) {
        .                   if source.table.is_empty_singleton() {
        .                       *self = Self::new_in(self.table.alloc.clone());
        .                   } else {
        .                       unsafe {
        .                           // First, drop all our elements without clearing the control bytes.
        .                           self.drop_elements();
-- line 1640 ----------------------------------------
-- line 1687 ----------------------------------------
        .                       .table
        .                       .ctrl(0)
        .                       .copy_to_nonoverlapping(self.table.ctrl(0), self.table.num_ctrl_bytes());
        .                   source
        .                       .data_start()
        .                       .copy_to_nonoverlapping(self.data_start(), self.table.buckets());
        .           
        .                   self.table.items = source.table.items;
       34 ( 0.00%)          self.table.growth_left = source.table.growth_left;
        .               }
        .           }
        .           
        .           impl<T: Clone, A: Allocator + Clone> RawTable<T, A> {
        .               /// Common code for clone and clone_from. Assumes `self.buckets() == source.buckets()`.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               unsafe fn clone_from_impl(&mut self, source: &Self, mut on_panic: impl FnMut(&mut Self)) {
        .                   // Copy the control bytes unchanged. We do this in a single pass
-- line 1703 ----------------------------------------
-- line 1790 ----------------------------------------
        .               fn default() -> Self {
        .                   Self::new_in(Default::default())
        .               }
        .           }
        .           
        .           #[cfg(feature = "nightly")]
        .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawTable<T, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
  132,441 ( 0.03%)      fn drop(&mut self) {
  127,775 ( 0.03%)          if !self.table.is_empty_singleton() {
        .                       unsafe {
        .                           self.drop_elements();
        .                           self.free_buckets();
        .                       }
        .                   }
  150,852 ( 0.04%)      }
        .           }
        .           #[cfg(not(feature = "nightly"))]
        .           impl<T, A: Allocator + Clone> Drop for RawTable<T, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn drop(&mut self) {
        .                   if !self.table.is_empty_singleton() {
        .                       unsafe {
        .                           self.drop_elements();
-- line 1813 ----------------------------------------
-- line 1817 ----------------------------------------
        .               }
        .           }
        .           
        .           impl<T, A: Allocator + Clone> IntoIterator for RawTable<T, A> {
        .               type Item = T;
        .               type IntoIter = RawIntoIter<T, A>;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
    1,460 ( 0.00%)      fn into_iter(self) -> RawIntoIter<T, A> {
        .                   unsafe {
        .                       let iter = self.iter();
        .                       self.into_iter_from(iter)
        .                   }
    1,825 ( 0.00%)      }
        .           }
        .           
        .           /// Iterator over a sub-range of a table. Unlike `RawIter` this iterator does
        .           /// not track an item count.
        .           pub(crate) struct RawIterRange<T> {
        .               // Mask of full buckets in the current group. Bits are cleared from this
        .               // mask as each element is processed.
        .               current_group: BitMask,
-- line 1838 ----------------------------------------
-- line 1934 ----------------------------------------
        .           
        .           impl<T> Iterator for RawIterRange<T> {
        .               type Item = Bucket<T>;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn next(&mut self) -> Option<Bucket<T>> {
        .                   unsafe {
        .                       loop {
   65,124 ( 0.02%)                  if let Some(index) = self.current_group.lowest_set_bit() {
    8,456 ( 0.00%)                      self.current_group = self.current_group.remove_lowest_bit();
   14,834 ( 0.00%)                      return Some(self.data.next_n(index));
        .                           }
        .           
   61,690 ( 0.02%)                  if self.next_ctrl >= self.end {
        .                               return None;
        .                           }
        .           
        .                           // We might read past self.end up to the next group boundary,
        .                           // but this is fine because it only occurs on tables smaller
        .                           // than the group size where the trailing control bytes are all
        .                           // EMPTY. On larger tables self.end is guaranteed to be aligned
        .                           // to the group size (since tables are power-of-two sized).
    1,106 ( 0.00%)                  self.current_group = Group::load_aligned(self.next_ctrl).match_full();
    1,572 ( 0.00%)                  self.data = self.data.next_n(Group::WIDTH);
    1,524 ( 0.00%)                  self.next_ctrl = self.next_ctrl.add(Group::WIDTH);
        .                       }
        .                   }
        .               }
        .           
        .               #[inline]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   // We don't have an item count, so just guess based on the range size.
        .                   (
-- line 1966 ----------------------------------------
-- line 2102 ----------------------------------------
        .                           }
        .                       } else {
        .                           // We must have already iterated past the removed item.
        .                       }
        .                   }
        .               }
        .           
        .               unsafe fn drop_elements(&mut self) {
      351 ( 0.00%)          if mem::needs_drop::<T>() && self.len() != 0 {
        .                       for item in self {
        .                           item.drop();
        .                       }
        .                   }
        .               }
        .           }
        .           
        .           impl<T> Clone for RawIter<T> {
-- line 2118 ----------------------------------------
-- line 2124 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           impl<T> Iterator for RawIter<T> {
        .               type Item = Bucket<T>;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
   10,299 ( 0.00%)      fn next(&mut self) -> Option<Bucket<T>> {
   39,306 ( 0.01%)          if let Some(b) = self.iter.next() {
   88,650 ( 0.02%)              self.items -= 1;
        .                       Some(b)
        .                   } else {
        .                       // We don't check against items == 0 here to allow the
        .                       // compiler to optimize away the item count entirely if the
        .                       // iterator length is never queried.
        .                       debug_assert_eq!(self.items, 0);
        .                       None
        .                   }
   20,598 ( 0.01%)      }
        .           
        .               #[inline]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   (self.items, Some(self.items))
        .               }
        .           }
        .           
        .           impl<T> ExactSizeIterator for RawIter<T> {}
-- line 2151 ----------------------------------------
-- line 2177 ----------------------------------------
        .               T: Sync,
        .               A: Sync,
        .           {
        .           }
        .           
        .           #[cfg(feature = "nightly")]
        .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
      700 ( 0.00%)      fn drop(&mut self) {
        .                   unsafe {
        .                       // Drop all remaining elements
        .                       self.iter.drop_elements();
        .           
        .                       // Free the table
    2,386 ( 0.00%)              if let Some((ptr, layout)) = self.allocation {
        .                           self.alloc.deallocate(ptr, layout);
        .                       }
        .                   }
      314 ( 0.00%)      }
        .           }
        .           #[cfg(not(feature = "nightly"))]
        .           impl<T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn drop(&mut self) {
        .                   unsafe {
        .                       // Drop all remaining elements
        .                       self.iter.drop_elements();
-- line 2203 ----------------------------------------
-- line 2209 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           impl<T, A: Allocator + Clone> Iterator for RawIntoIter<T, A> {
        .               type Item = T;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
       73 ( 0.00%)      fn next(&mut self) -> Option<T> {
        6 ( 0.00%)          unsafe { Some(self.iter.next()?.read()) }
      146 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        2 ( 0.00%)          self.iter.size_hint()
        .               }
        .           }
        .           
        .           impl<T, A: Allocator + Clone> ExactSizeIterator for RawIntoIter<T, A> {}
        .           impl<T, A: Allocator + Clone> FusedIterator for RawIntoIter<T, A> {}
        .           
        .           /// Iterator which consumes elements without freeing the table storage.
        .           pub struct RawDrain<'a, T, A: Allocator + Clone = Global> {
-- line 2231 ----------------------------------------
-- line 2259 ----------------------------------------
        .           where
        .               T: Sync,
        .               A: Sync,
        .           {
        .           }
        .           
        .           impl<T, A: Allocator + Clone> Drop for RawDrain<'_, T, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
      208 ( 0.00%)      fn drop(&mut self) {
        .                   unsafe {
        .                       // Drop all remaining elements. Note that this may panic.
        .                       self.iter.drop_elements();
        .           
        .                       // Reset the contents of the table now that all elements have been
        .                       // dropped.
        .                       self.table.clear_no_drop();
        .           
        .                       // Move the now empty table back to its original location.
       26 ( 0.00%)              self.orig_table
        .                           .as_ptr()
        .                           .copy_from_nonoverlapping(&*self.table, 1);
        .                   }
      208 ( 0.00%)      }
        .           }
        .           
        .           impl<T, A: Allocator + Clone> Iterator for RawDrain<'_, T, A> {
        .               type Item = T;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn next(&mut self) -> Option<T> {
        .                   unsafe {
-- line 2289 ----------------------------------------

2,337,765 ( 0.60%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/fulfill.rs
--------------------------------------------------------------------------------
Ir               

-- line 33 ----------------------------------------
      .           
      .           impl<'tcx> ForestObligation for PendingPredicateObligation<'tcx> {
      .               /// Note that we include both the `ParamEnv` and the `Predicate`,
      .               /// as the `ParamEnv` can influence whether fulfillment succeeds
      .               /// or fails.
      .               type CacheKey = ty::ParamEnvAnd<'tcx, ty::Predicate<'tcx>>;
      .           
      .               fn as_cache_key(&self) -> Self::CacheKey {
 34,209 ( 0.01%)          self.obligation.param_env.and(self.obligation.predicate)
      .               }
      .           }
      .           
      .           /// The fulfillment context is used to drive trait resolution. It
      .           /// consists of a list of obligations that must be (eventually)
      .           /// satisfied. The job is to track which are satisfied, which yielded
      .           /// errors, and which are still pending. At any point, users can call
      .           /// `select_where_possible`, and the fulfillment context will try to do
-- line 49 ----------------------------------------
-- line 95 ----------------------------------------
      .           }
      .           
      .           // `PendingPredicateObligation` is used a lot. Make sure it doesn't unintentionally get bigger.
      .           #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
      .           static_assert_size!(PendingPredicateObligation<'_>, 72);
      .           
      .           impl<'a, 'tcx> FulfillmentContext<'tcx> {
      .               /// Creates a new fulfillment context.
    324 ( 0.00%)      pub fn new() -> FulfillmentContext<'tcx> {
  5,898 ( 0.00%)          FulfillmentContext {
    945 ( 0.00%)              predicates: ObligationForest::new(),
      .                       relationships: FxHashMap::default(),
      .                       register_region_obligations: true,
      .                       usable_in_snapshot: false,
      .                   }
    324 ( 0.00%)      }
      .           
      .               pub fn new_in_snapshot() -> FulfillmentContext<'tcx> {
      .                   FulfillmentContext {
      .                       predicates: ObligationForest::new(),
      .                       relationships: FxHashMap::default(),
      .                       register_region_obligations: true,
      .                       usable_in_snapshot: true,
      .                   }
      .               }
      .           
      .               pub fn new_ignoring_regions() -> FulfillmentContext<'tcx> {
  3,328 ( 0.00%)          FulfillmentContext {
    832 ( 0.00%)              predicates: ObligationForest::new(),
      .                       relationships: FxHashMap::default(),
      .                       register_region_obligations: false,
      .                       usable_in_snapshot: false,
      .                   }
      .               }
      .           
      .               /// Attempts to select obligations using `selcx`.
      .               fn select(&mut self, selcx: &mut SelectionContext<'a, 'tcx>) -> Vec<FulfillmentError<'tcx>> {
  9,598 ( 0.00%)          let span = debug_span!("select", obligation_forest_size = ?self.predicates.len());
      .                   let _enter = span.enter();
      .           
      .                   let mut errors = Vec::new();
      .           
      .                   loop {
      .                       debug!("select: starting another iteration");
      .           
      .                       // Process pending obligations.
      .                       let outcome: Outcome<_, _> =
 43,120 ( 0.01%)                  self.predicates.process_obligations(&mut FulfillProcessor {
      .                               selcx,
  6,160 ( 0.00%)                      register_region_obligations: self.register_region_obligations,
      .                           });
      .                       debug!("select: outcome={:#?}", outcome);
      .           
      .                       // FIXME: if we kept the original cache key, we could mark projection
      .                       // obligations as complete for the projection cache here.
      .           
      .                       errors.extend(outcome.errors.into_iter().map(to_fulfillment_error));
      .           
      .                       // If nothing new was added, no need to keep looping.
 12,320 ( 0.00%)              if outcome.stalled {
      .                           break;
      .                       }
      .                   }
      .           
      .                   debug!(
      .                       "select({} predicates remaining, {} errors) done",
      .                       self.predicates.len(),
      .                       errors.len()
-- line 162 ----------------------------------------
-- line 198 ----------------------------------------
      .                   );
      .                   self.register_predicate_obligations(infcx, obligations);
      .           
      .                   debug!(?normalized_ty);
      .           
      .                   normalized_ty
      .               }
      .           
 26,862 ( 0.01%)      fn register_predicate_obligation(
      .                   &mut self,
      .                   infcx: &InferCtxt<'_, 'tcx>,
      .                   obligation: PredicateObligation<'tcx>,
      .               ) {
      .                   // this helps to reduce duplicate errors, as well as making
      .                   // debug output much nicer to read and so on.
 13,431 ( 0.00%)          let obligation = infcx.resolve_vars_if_possible(obligation);
      .           
      .                   debug!(?obligation, "register_predicate_obligation");
      .           
 26,862 ( 0.01%)          assert!(!infcx.is_in_snapshot() || self.usable_in_snapshot);
      .           
 13,431 ( 0.00%)          super::relationships::update(self, infcx, &obligation);
      .           
      .                   self.predicates
      .                       .register_obligation(PendingPredicateObligation { obligation, stalled_on: vec![] });
 22,385 ( 0.01%)      }
      .           
 17,520 ( 0.00%)      fn select_all_or_error(&mut self, infcx: &InferCtxt<'_, 'tcx>) -> Vec<FulfillmentError<'tcx>> {
      .                   {
  2,190 ( 0.00%)              let errors = self.select_where_possible(infcx);
  2,190 ( 0.00%)              if !errors.is_empty() {
      .                           return errors;
      .                       }
      .                   }
      .           
 10,950 ( 0.00%)          self.predicates.to_errors(CodeAmbiguity).into_iter().map(to_fulfillment_error).collect()
 15,330 ( 0.00%)      }
      .           
 47,990 ( 0.01%)      fn select_where_possible(
      .                   &mut self,
      .                   infcx: &InferCtxt<'_, 'tcx>,
      .               ) -> Vec<FulfillmentError<'tcx>> {
      .                   let mut selcx = SelectionContext::new(infcx);
      .                   self.select(&mut selcx)
 43,191 ( 0.01%)      }
      .           
     48 ( 0.00%)      fn pending_obligations(&self) -> Vec<PredicateObligation<'tcx>> {
      .                   self.predicates.map_pending_obligations(|o| o.obligation.clone())
     64 ( 0.00%)      }
      .           
      .               fn relationships(&mut self) -> &mut FxHashMap<ty::TyVid, ty::FoundRelationships> {
     16 ( 0.00%)          &mut self.relationships
     16 ( 0.00%)      }
      .           }
      .           
      .           struct FulfillProcessor<'a, 'b, 'tcx> {
      .               selcx: &'a mut SelectionContext<'b, 'tcx>,
      .               register_region_obligations: bool,
      .           }
      .           
      .           fn mk_pending(os: Vec<PredicateObligation<'_>>) -> Vec<PendingPredicateObligation<'_>> {
-- line 258 ----------------------------------------
-- line 275 ----------------------------------------
      .               #[inline(always)]
      .               fn process_obligation(
      .                   &mut self,
      .                   pending_obligation: &mut Self::Obligation,
      .               ) -> ProcessResult<Self::Obligation, Self::Error> {
      .                   // If we were stalled on some unresolved variables, first check whether
      .                   // any of them have been resolved; if not, don't bother doing more work
      .                   // yet.
193,701 ( 0.05%)          let change = match pending_obligation.stalled_on.len() {
      .                       // Match arms are in order of frequency, which matters because this
      .                       // code is so hot. 1 and 0 dominate; 2+ is fairly rare.
      .                       1 => {
 90,864 ( 0.02%)                  let infer_var = pending_obligation.stalled_on[0];
 30,288 ( 0.01%)                  self.selcx.infcx().ty_or_const_infer_var_changed(infer_var)
      .                       }
      .                       0 => {
      .                           // In this case we haven't changed, but wish to make a change.
      .                           true
      .                       }
      .                       _ => {
      .                           // This `for` loop was once a call to `all()`, but this lower-level
      .                           // form was a perf win. See #64545 for details.
    426 ( 0.00%)                  (|| {
    738 ( 0.00%)                      for &infer_var in &pending_obligation.stalled_on {
    142 ( 0.00%)                          if self.selcx.infcx().ty_or_const_infer_var_changed(infer_var) {
      .                                       return true;
      .                                   }
      .                               }
      .                               false
      .                           })()
      .                       }
      .                   };
      .           
  1,934 ( 0.00%)          if !change {
      .                       debug!(
      .                           "process_predicate: pending obligation {:?} still stalled on {:?}",
      .                           self.selcx.infcx().resolve_vars_if_possible(pending_obligation.obligation.clone()),
      .                           pending_obligation.stalled_on
      .                       );
      .                       return ProcessResult::Unchanged;
      .                   }
      .           
 16,395 ( 0.00%)          self.progress_changed_obligations(pending_obligation)
      .               }
      .           
      .               fn process_backedge<'c, I>(
      .                   &mut self,
      .                   cycle: I,
      .                   _marker: PhantomData<&'c PendingPredicateObligation<'tcx>>,
      .               ) where
      .                   I: Clone + Iterator<Item = &'c PendingPredicateObligation<'tcx>>,
-- line 325 ----------------------------------------
-- line 333 ----------------------------------------
      .               }
      .           }
      .           
      .           impl<'a, 'b, 'tcx> FulfillProcessor<'a, 'b, 'tcx> {
      .               // The code calling this method is extremely hot and only rarely
      .               // actually uses this, so move this part of the code
      .               // out of that loop.
      .               #[inline(never)]
 54,650 ( 0.01%)      fn progress_changed_obligations(
      .                   &mut self,
      .                   pending_obligation: &mut PendingPredicateObligation<'tcx>,
      .               ) -> ProcessResult<PendingPredicateObligation<'tcx>, FulfillmentErrorCode<'tcx>> {
      .                   pending_obligation.stalled_on.truncate(0);
      .           
      .                   let obligation = &mut pending_obligation.obligation;
      .           
 16,395 ( 0.00%)          if obligation.predicate.has_infer_types_or_consts() {
  4,338 ( 0.00%)              obligation.predicate =
 13,014 ( 0.00%)                  self.selcx.infcx().resolve_vars_if_possible(obligation.predicate);
      .                   }
      .           
      .                   debug!(?obligation, ?obligation.cause, "process_obligation");
      .           
      .                   let infcx = self.selcx.infcx();
      .           
  2,254 ( 0.00%)          let binder = obligation.predicate.kind();
 38,255 ( 0.01%)          match binder.no_bound_vars() {
      .                       None => match binder.skip_binder() {
      .                           // Evaluation will discard candidates using the leak check.
      .                           // This means we need to pass it the bound version of our
      .                           // predicate.
      .                           ty::PredicateKind::Trait(trait_ref) => {
      .                               let trait_obligation = obligation.with(binder.rebind(trait_ref));
      .           
      .                               self.process_trait_obligation(
-- line 367 ----------------------------------------
-- line 397 ----------------------------------------
      .                           ty::PredicateKind::TypeWellFormedFromEnv(..) => {
      .                               bug!("TypeWellFormedFromEnv is only used for Chalk")
      .                           }
      .                       },
      .                       Some(pred) => match pred {
      .                           ty::PredicateKind::Trait(data) => {
      .                               let trait_obligation = obligation.with(Binder::dummy(data));
      .           
 11,315 ( 0.00%)                      self.process_trait_obligation(
      .                                   obligation,
 49,786 ( 0.01%)                          trait_obligation,
      .                                   &mut pending_obligation.stalled_on,
      .                               )
      .                           }
      .           
      .                           ty::PredicateKind::RegionOutlives(data) => {
     30 ( 0.00%)                      match infcx.region_outlives_predicate(&obligation.cause, Binder::dummy(data)) {
     20 ( 0.00%)                          Ok(()) => ProcessResult::Changed(vec![]),
      .                                   Err(_) => ProcessResult::Error(CodeSelectionError(Unimplemented)),
      .                               }
      .                           }
      .           
      .                           ty::PredicateKind::TypeOutlives(ty::OutlivesPredicate(t_a, r_b)) => {
    824 ( 0.00%)                      if self.register_region_obligations {
  2,060 ( 0.00%)                          self.selcx.infcx().register_region_obligation_with_cause(
      .                                       t_a,
      .                                       r_b,
      .                                       &obligation.cause,
      .                                   );
      .                               }
      .                               ProcessResult::Changed(vec![])
      .                           }
      .           
      .                           ty::PredicateKind::Projection(ref data) => {
      .                               let project_obligation = obligation.with(Binder::dummy(*data));
      .           
  2,950 ( 0.00%)                      self.process_projection_obligation(
      .                                   obligation,
  8,850 ( 0.00%)                          project_obligation,
      .                                   &mut pending_obligation.stalled_on,
      .                               )
      .                           }
      .           
      .                           ty::PredicateKind::ObjectSafe(trait_def_id) => {
      .                               if !self.selcx.tcx().is_object_safe(trait_def_id) {
      .                                   ProcessResult::Error(CodeSelectionError(Unimplemented))
      .                               } else {
-- line 443 ----------------------------------------
-- line 454 ----------------------------------------
      .                                           ProcessResult::Error(CodeSelectionError(Unimplemented))
      .                                       }
      .                                   }
      .                                   None => ProcessResult::Unchanged,
      .                               }
      .                           }
      .           
      .                           ty::PredicateKind::WellFormed(arg) => {
 15,099 ( 0.00%)                      match wf::obligations(
      .                                   self.selcx.infcx(),
  4,314 ( 0.00%)                          obligation.param_env,
  4,314 ( 0.00%)                          obligation.cause.body_id,
  6,471 ( 0.00%)                          obligation.recursion_depth + 1,
      .                                   arg,
      .                                   obligation.cause.span,
      .                               ) {
      .                                   None => {
  2,512 ( 0.00%)                              pending_obligation.stalled_on =
  4,396 ( 0.00%)                                  vec![TyOrConstInferVar::maybe_from_generic_arg(arg).unwrap()];
  1,256 ( 0.00%)                              ProcessResult::Unchanged
      .                                   }
  4,587 ( 0.00%)                          Some(os) => ProcessResult::Changed(mk_pending(os)),
      .                               }
      .                           }
      .           
      .                           ty::PredicateKind::Subtype(subtype) => {
    104 ( 0.00%)                      match self.selcx.infcx().subtype_predicate(
      .                                   &obligation.cause,
      .                                   obligation.param_env,
      .                                   Binder::dummy(subtype),
      .                               ) {
      .                                   None => {
      .                                       // None means that both are unresolved.
     65 ( 0.00%)                              pending_obligation.stalled_on = vec![
     13 ( 0.00%)                                  TyOrConstInferVar::maybe_from_ty(subtype.a).unwrap(),
     26 ( 0.00%)                                  TyOrConstInferVar::maybe_from_ty(subtype.b).unwrap(),
      .                                       ];
      .                                       ProcessResult::Unchanged
      .                                   }
      .                                   Some(Ok(ok)) => ProcessResult::Changed(mk_pending(ok.obligations)),
      .                                   Some(Err(err)) => {
      .                                       let expected_found =
      .                                           ExpectedFound::new(subtype.a_is_expected, subtype.a, subtype.b);
      .                                       ProcessResult::Error(FulfillmentErrorCode::CodeSubtypeError(
-- line 497 ----------------------------------------
-- line 498 ----------------------------------------
      .                                           expected_found,
      .                                           err,
      .                                       ))
      .                                   }
      .                               }
      .                           }
      .           
      .                           ty::PredicateKind::Coerce(coerce) => {
    200 ( 0.00%)                      match self.selcx.infcx().coerce_predicate(
      .                                   &obligation.cause,
      .                                   obligation.param_env,
      .                                   Binder::dummy(coerce),
      .                               ) {
      .                                   None => {
      .                                       // None means that both are unresolved.
      .                                       pending_obligation.stalled_on = vec![
      .                                           TyOrConstInferVar::maybe_from_ty(coerce.a).unwrap(),
-- line 514 ----------------------------------------
-- line 639 ----------------------------------------
      .                                   }
      .                               }
      .                           }
      .                           ty::PredicateKind::TypeWellFormedFromEnv(..) => {
      .                               bug!("TypeWellFormedFromEnv is only used for Chalk")
      .                           }
      .                       },
      .                   }
 49,185 ( 0.01%)      }
      .           
 42,997 ( 0.01%)      #[instrument(level = "debug", skip(self, obligation, stalled_on))]
      .               fn process_trait_obligation(
      .                   &mut self,
      .                   obligation: &PredicateObligation<'tcx>,
      .                   trait_obligation: TraitObligation<'tcx>,
      .                   stalled_on: &mut Vec<TyOrConstInferVar<'tcx>>,
      .               ) -> ProcessResult<PendingPredicateObligation<'tcx>, FulfillmentErrorCode<'tcx>> {
  2,263 ( 0.00%)          let infcx = self.selcx.infcx();
  6,789 ( 0.00%)          if obligation.predicate.is_global() {
      .                       // no type variables present, can use evaluation for better caching.
      .                       // FIXME: consider caching errors too.
  2,346 ( 0.00%)              if infcx.predicate_must_hold_considering_regions(obligation) {
      .                           debug!(
      .                               "selecting trait at depth {} evaluated to holds",
      .                               obligation.recursion_depth
      .                           );
  2,346 ( 0.00%)                  return ProcessResult::Changed(vec![]);
      .                       }
      .                   }
      .           
  7,630 ( 0.00%)          match self.selcx.select(&trait_obligation) {
      .                       Ok(Some(impl_source)) => {
      .                           debug!("selecting trait at depth {} yielded Ok(Some)", obligation.recursion_depth);
  4,734 ( 0.00%)                  ProcessResult::Changed(mk_pending(impl_source.nested_obligations()))
      .                       }
      .                       Ok(None) => {
      .                           debug!("selecting trait at depth {} yielded Ok(None)", obligation.recursion_depth);
      .           
      .                           // This is a bit subtle: for the most part, the
      .                           // only reason we can fail to make progress on
      .                           // trait selection is because we don't have enough
      .                           // information about the types in the trait.
      .                           stalled_on.clear();
      .                           stalled_on.extend(substs_infer_vars(
      .                               self.selcx,
    827 ( 0.00%)                      trait_obligation.predicate.map_bound(|pred| pred.trait_ref.substs),
      .                           ));
      .           
      .                           debug!(
      .                               "process_predicate: pending obligation {:?} now stalled on {:?}",
      .                               infcx.resolve_vars_if_possible(obligation.clone()),
      .                               stalled_on
      .                           );
      .           
    827 ( 0.00%)                  ProcessResult::Unchanged
      .                       }
      .                       Err(selection_err) => {
      .                           debug!("selecting trait at depth {} yielded Err", obligation.recursion_depth);
      .           
      .                           ProcessResult::Error(CodeSelectionError(selection_err))
      .                       }
      .                   }
      .               }
      .           
  6,490 ( 0.00%)      fn process_projection_obligation(
      .                   &mut self,
      .                   obligation: &PredicateObligation<'tcx>,
      .                   project_obligation: PolyProjectionObligation<'tcx>,
      .                   stalled_on: &mut Vec<TyOrConstInferVar<'tcx>>,
      .               ) -> ProcessResult<PendingPredicateObligation<'tcx>, FulfillmentErrorCode<'tcx>> {
    590 ( 0.00%)          let tcx = self.selcx.tcx();
      .           
  1,770 ( 0.00%)          if obligation.predicate.is_global() {
      .                       // no type variables present, can use evaluation for better caching.
      .                       // FIXME: consider caching errors too.
    300 ( 0.00%)              if self.selcx.infcx().predicate_must_hold_considering_regions(obligation) {
    900 ( 0.00%)                  if let Some(key) = ProjectionCacheKey::from_poly_projection_predicate(
      .                               &mut self.selcx,
  1,050 ( 0.00%)                      project_obligation.predicate,
      .                           ) {
      .                               // If `predicate_must_hold_considering_regions` succeeds, then we've
      .                               // evaluated all sub-obligations. We can therefore mark the 'root'
      .                               // obligation as complete, and skip evaluating sub-obligations.
    900 ( 0.00%)                      self.selcx
      .                                   .infcx()
      .                                   .inner
      .                                   .borrow_mut()
      .                                   .projection_cache()
      .                                   .complete(key, EvaluationResult::EvaluatedToOk);
      .                           }
    300 ( 0.00%)                  return ProcessResult::Changed(vec![]);
      .                       } else {
      .                           tracing::debug!("Does NOT hold: {:?}", obligation);
      .                       }
      .                   }
      .           
  3,080 ( 0.00%)          match project::poly_project_and_unify_type(self.selcx, &project_obligation) {
      .                       Ok(Ok(Some(os))) => ProcessResult::Changed(mk_pending(os)),
      .                       Ok(Ok(None)) => {
      .                           stalled_on.clear();
      .                           stalled_on.extend(substs_infer_vars(
      .                               self.selcx,
    303 ( 0.00%)                      project_obligation.predicate.map_bound(|pred| pred.projection_ty.substs),
      .                           ));
    303 ( 0.00%)                  ProcessResult::Unchanged
      .                       }
      .                       // Let the caller handle the recursion
      .                       Ok(Err(project::InProgress)) => ProcessResult::Changed(mk_pending(vec![
      .                           project_obligation.with(project_obligation.predicate.to_predicate(tcx)),
      .                       ])),
      .                       Err(e) => ProcessResult::Error(CodeProjectionError(e)),
      .                   }
  4,720 ( 0.00%)      }
      .           }
      .           
      .           /// Returns the set of inference variables contained in `substs`.
      .           fn substs_infer_vars<'a, 'tcx>(
      .               selcx: &mut SelectionContext<'a, 'tcx>,
      .               substs: ty::Binder<'tcx, SubstsRef<'tcx>>,
      .           ) -> impl Iterator<Item = TyOrConstInferVar<'tcx>> {
      .               selcx
      .                   .infcx()
      .                   .resolve_vars_if_possible(substs)
      .                   .skip_binder() // ok because this check doesn't care about regions
      .                   .iter()
      .                   .filter(|arg| arg.has_infer_types_or_consts())
      .                   .flat_map(|arg| {
  5,840 ( 0.00%)              let mut walker = arg.walk();
 10,512 ( 0.00%)              while let Some(c) = walker.next() {
  1,168 ( 0.00%)                  if !c.has_infer_types_or_consts() {
      .                               walker.visited.remove(&c);
      .                               walker.skip_current_subtree();
      .                           }
      .                       }
      .                       walker.visited.into_iter()
      .                   })
      .                   .filter_map(TyOrConstInferVar::maybe_from_generic_arg)
      .           }
-- line 776 ----------------------------------------

191,540 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/fulfill.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs
--------------------------------------------------------------------------------
Ir               

-- line 176 ----------------------------------------
      .               }
      .               fn sess(self) -> Option<&'tcx Session> {
      .                   None
      .               }
      .               fn tcx(self) -> Option<TyCtxt<'tcx>> {
      .                   None
      .               }
      .           
  2,982 ( 0.00%)      fn decoder(self, pos: usize) -> DecodeContext<'a, 'tcx> {
    994 ( 0.00%)          let tcx = self.tcx();
154,193 ( 0.04%)          DecodeContext {
 16,389 ( 0.00%)              opaque: opaque::Decoder::new(self.blob(), pos),
    994 ( 0.00%)              cdata: self.cdata(),
      .                       blob: self.blob(),
  5,340 ( 0.00%)              sess: self.sess().or(tcx.map(|tcx| tcx.sess)),
      .                       tcx,
      .                       last_source_file_index: 0,
      .                       lazy_state: LazyState::NoNode,
      .                       alloc_decoding_session: self
      .                           .cdata()
 14,440 ( 0.00%)                  .map(|cdata| cdata.cdata.alloc_decoding_state.new_decoding_session()),
      .                   }
  2,982 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Metadata<'a, 'tcx> for &'a MetadataBlob {
      .               #[inline]
      .               fn blob(self) -> &'a MetadataBlob {
      .                   self
      .               }
      .           }
-- line 206 ----------------------------------------
-- line 255 ----------------------------------------
      .               }
      .               #[inline]
      .               fn tcx(self) -> Option<TyCtxt<'tcx>> {
      .                   Some(self.1)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, T: Decodable<DecodeContext<'a, 'tcx>>> Lazy<T> {
 13,612 ( 0.00%)      fn decode<M: Metadata<'a, 'tcx>>(self, metadata: M) -> T {
 12,076 ( 0.00%)          let mut dcx = metadata.decoder(self.position.get());
 45,011 ( 0.01%)          dcx.lazy_state = LazyState::NodeStart(self.position);
 17,345 ( 0.00%)          T::decode(&mut dcx)
 17,354 ( 0.00%)      }
      .           }
      .           
      .           impl<'a: 'x, 'tcx: 'x, 'x, T: Decodable<DecodeContext<'a, 'tcx>>> Lazy<[T]> {
      .               fn decode<M: Metadata<'a, 'tcx>>(
      .                   self,
      .                   metadata: M,
      .               ) -> impl ExactSizeIterator<Item = T> + Captures<'a> + Captures<'tcx> + 'x {
      .                   let mut dcx = metadata.decoder(self.position.get());
      .                   dcx.lazy_state = LazyState::NodeStart(self.position);
 15,406 ( 0.00%)          (0..self.meta).map(move |_| T::decode(&mut dcx))
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> DecodeContext<'a, 'tcx> {
      .               #[inline]
      .               fn tcx(&self) -> TyCtxt<'tcx> {
      .                   debug_assert!(self.tcx.is_some(), "missing TyCtxt in DecodeContext");
      .                   self.tcx.unwrap()
-- line 285 ----------------------------------------
-- line 292 ----------------------------------------
      .           
      .               #[inline]
      .               pub fn cdata(&self) -> CrateMetadataRef<'a> {
      .                   debug_assert!(self.cdata.is_some(), "missing CrateMetadata in DecodeContext");
      .                   self.cdata.unwrap()
      .               }
      .           
      .               fn map_encoded_cnum_to_current(&self, cnum: CrateNum) -> CrateNum {
 43,677 ( 0.01%)          if cnum == LOCAL_CRATE { self.cdata().cnum } else { self.cdata().cnum_map[cnum] }
      .               }
      .           
 11,746 ( 0.00%)      fn read_lazy_with_meta<T: ?Sized + LazyMeta>(&mut self, meta: T::Meta) -> Lazy<T> {
      .                   let distance = self.read_usize();
 10,252 ( 0.00%)          let position = match self.lazy_state {
      .                       LazyState::NoNode => bug!("read_lazy_with_meta: outside of a metadata node"),
  2,514 ( 0.00%)              LazyState::NodeStart(start) => {
      .                           let start = start.get();
  5,028 ( 0.00%)                  assert!(distance <= start);
      .                           start - distance
      .                       }
  1,626 ( 0.00%)              LazyState::Previous(last_pos) => last_pos.get() + distance,
      .                   };
  6,112 ( 0.00%)          self.lazy_state = LazyState::Previous(NonZeroUsize::new(position).unwrap());
      .                   Lazy::from_position_and_meta(NonZeroUsize::new(position).unwrap(), meta)
 11,746 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn read_raw_bytes(&mut self, len: usize) -> &'a [u8] {
      .                   self.opaque.read_raw_bytes(len)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> TyDecoder<'tcx> for DecodeContext<'a, 'tcx> {
-- line 324 ----------------------------------------
-- line 326 ----------------------------------------
      .           
      .               #[inline]
      .               fn tcx(&self) -> TyCtxt<'tcx> {
      .                   self.tcx.expect("missing TyCtxt in DecodeContext")
      .               }
      .           
      .               #[inline]
      .               fn peek_byte(&self) -> u8 {
 30,565 ( 0.01%)          self.opaque.data[self.opaque.position()]
      .               }
      .           
      .               #[inline]
      .               fn position(&self) -> usize {
      .                   self.opaque.position()
      .               }
      .           
 25,480 ( 0.01%)      fn cached_ty_for_shorthand<F>(&mut self, shorthand: usize, or_insert_with: F) -> Ty<'tcx>
      .               where
      .                   F: FnOnce(&mut Self) -> Ty<'tcx>,
      .               {
  3,640 ( 0.00%)          let tcx = self.tcx();
      .           
  3,640 ( 0.00%)          let key = ty::CReaderCacheKey { cnum: Some(self.cdata().cnum), pos: shorthand };
      .           
 10,792 ( 0.00%)          if let Some(&ty) = tcx.ty_rcache.borrow().get(&key) {
      .                       return ty;
      .                   }
      .           
    942 ( 0.00%)          let ty = or_insert_with(self);
      .                   tcx.ty_rcache.borrow_mut().insert(key, ty);
      .                   ty
 32,760 ( 0.01%)      }
      .           
      .               fn with_position<F, R>(&mut self, pos: usize, f: F) -> R
      .               where
      .                   F: FnOnce(&mut Self) -> R,
      .               {
      .                   let new_opaque = opaque::Decoder::new(self.opaque.data, pos);
      .                   let old_opaque = mem::replace(&mut self.opaque, new_opaque);
      .                   let old_state = mem::replace(&mut self.lazy_state, LazyState::NoNode);
      .                   let r = f(self);
  4,950 ( 0.00%)          self.opaque = old_opaque;
    990 ( 0.00%)          self.lazy_state = old_state;
      .                   r
      .               }
      .           
      .               fn decode_alloc_id(&mut self) -> rustc_middle::mir::interpret::AllocId {
      .                   if let Some(alloc_decoding_session) = self.alloc_decoding_session {
      .                       alloc_decoding_session.decode_alloc_id(self)
      .                   } else {
      .                       bug!("Attempting to decode interpret::AllocId without CrateMetadata")
      .                   }
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for CrateNum {
      .               fn decode(d: &mut DecodeContext<'a, 'tcx>) -> CrateNum {
 18,891 ( 0.00%)          let cnum = CrateNum::from_u32(d.read_u32());
      .                   d.map_encoded_cnum_to_current(cnum)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for DefIndex {
    140 ( 0.00%)      fn decode(d: &mut DecodeContext<'a, 'tcx>) -> DefIndex {
 47,435 ( 0.01%)          DefIndex::from_u32(d.read_u32())
    280 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for ExpnIndex {
      .               fn decode(d: &mut DecodeContext<'a, 'tcx>) -> ExpnIndex {
      .                   ExpnIndex::from_u32(d.read_u32())
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for SyntaxContext {
 48,000 ( 0.01%)      fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> SyntaxContext {
 12,000 ( 0.00%)          let cdata = decoder.cdata();
 12,000 ( 0.00%)          let sess = decoder.sess.unwrap();
 24,000 ( 0.01%)          let cname = cdata.root.name;
      .                   rustc_span::hygiene::decode_syntax_context(decoder, &cdata.hygiene_context, |_, id| {
      .                       debug!("SpecializedDecoder<SyntaxContext>: decoding {}", id);
  1,256 ( 0.00%)              cdata
      .                           .root
      .                           .syntax_contexts
      .                           .get(cdata, id)
      .                           .unwrap_or_else(|| panic!("Missing SyntaxContext {:?} for crate {:?}", id, cname))
      .                           .decode((cdata, sess))
      .                   })
 60,000 ( 0.02%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for ExpnId {
  5,873 ( 0.00%)      fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> ExpnId {
    839 ( 0.00%)          let local_cdata = decoder.cdata();
    839 ( 0.00%)          let sess = decoder.sess.unwrap();
      .           
      .                   let cnum = CrateNum::decode(decoder);
      .                   let index = u32::decode(decoder);
      .           
      .                   let expn_id = rustc_span::hygiene::decode_expn_id(cnum, index, |expn_id| {
      .                       let ExpnId { krate: cnum, local_id: index } = expn_id;
      .                       // Lookup local `ExpnData`s in our own crate data. Foreign `ExpnData`s
      .                       // are stored in the owning crate, to avoid duplication.
      .                       debug_assert_ne!(cnum, LOCAL_CRATE);
    322 ( 0.00%)              let crate_data = if cnum == local_cdata.cnum {
      .                           local_cdata
      .                       } else {
      .                           local_cdata.cstore.get_crate_data(cnum)
      .                       };
  1,610 ( 0.00%)              let expn_data = crate_data
      .                           .root
      .                           .expn_data
      .                           .get(crate_data, index)
      .                           .unwrap()
      .                           .decode((crate_data, sess));
  1,610 ( 0.00%)              let expn_hash = crate_data
      .                           .root
      .                           .expn_hashes
      .                           .get(crate_data, index)
      .                           .unwrap()
      .                           .decode((crate_data, sess));
  3,220 ( 0.00%)              (expn_data, expn_hash)
      .                   });
      .                   expn_id
  6,712 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for Span {
 88,464 ( 0.02%)      fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Span {
 11,058 ( 0.00%)          let ctxt = SyntaxContext::decode(decoder);
      .                   let tag = u8::decode(decoder);
      .           
 22,116 ( 0.01%)          if tag == TAG_PARTIAL_SPAN {
      .                       return DUMMY_SP.with_ctxt(ctxt);
      .                   }
      .           
      .                   debug_assert!(tag == TAG_VALID_SPAN_LOCAL || tag == TAG_VALID_SPAN_FOREIGN);
      .           
      .                   let lo = BytePos::decode(decoder);
      .                   let len = BytePos::decode(decoder);
      .                   let hi = lo + len;
      .           
 33,162 ( 0.01%)          let Some(sess) = decoder.sess else {
      .                       bug!("Cannot decode Span without Session.")
      .                   };
      .           
      .                   // There are two possibilities here:
      .                   // 1. This is a 'local span', which is located inside a `SourceFile`
      .                   // that came from this crate. In this case, we use the source map data
      .                   // encoded in this crate. This branch should be taken nearly all of the time.
      .                   // 2. This is a 'foreign span', which is located inside a `SourceFile`
-- line 476 ----------------------------------------
-- line 492 ----------------------------------------
      .                   // a transitive dependency.
      .                   //
      .                   // When we encode a foreign span, we adjust its 'lo' and 'high' values
      .                   // to be based on the *foreign* crate (e.g. crate C), not the crate
      .                   // we are writing metadata for (e.g. crate B). This allows us to
      .                   // treat the 'local' and 'foreign' cases almost identically during deserialization:
      .                   // we can call `imported_source_files` for the proper crate, and binary search
      .                   // through the returned slice using our span.
 24,690 ( 0.01%)          let imported_source_files = if tag == TAG_VALID_SPAN_LOCAL {
      .                       decoder.cdata().imported_source_files(sess)
      .                   } else {
      .                       // When we encode a proc-macro crate, all `Span`s should be encoded
      .                       // with `TAG_VALID_SPAN_LOCAL`
      .                       if decoder.cdata().root.is_proc_macro_crate() {
      .                           // Decode `CrateNum` as u32 - using `CrateNum::decode` will ICE
      .                           // since we don't have `cnum_map` populated.
      .                           let cnum = u32::decode(decoder);
-- line 508 ----------------------------------------
-- line 527 ----------------------------------------
      .           
      .                       let foreign_data = decoder.cdata().cstore.get_crate_data(cnum);
      .                       foreign_data.imported_source_files(sess)
      .                   };
      .           
      .                   let source_file = {
      .                       // Optimize for the case that most spans within a translated item
      .                       // originate from the same source_file.
 33,162 ( 0.01%)              let last_source_file = &imported_source_files[decoder.last_source_file_index];
      .           
 44,022 ( 0.01%)              if lo >= last_source_file.original_start_pos && lo <= last_source_file.original_end_pos
      .                       {
      .                           last_source_file
      .                       } else {
      .                           let index = imported_source_files
      .                               .binary_search_by_key(&lo, |source_file| source_file.original_start_pos)
  5,160 ( 0.00%)                      .unwrap_or_else(|index| index - 1);
      .           
      .                           // Don't try to cache the index for foreign spans,
      .                           // as this would require a map from CrateNums to indices
  2,582 ( 0.00%)                  if tag == TAG_VALID_SPAN_LOCAL {
  2,582 ( 0.00%)                      decoder.last_source_file_index = index;
      .                           }
  5,164 ( 0.00%)                  &imported_source_files[index]
      .                       }
      .                   };
      .           
      .                   // Make sure our binary search above is correct.
      .                   debug_assert!(
      .                       lo >= source_file.original_start_pos && lo <= source_file.original_end_pos,
      .                       "Bad binary search: lo={:?} source_file.original_start_pos={:?} source_file.original_end_pos={:?}",
      .                       lo,
-- line 558 ----------------------------------------
-- line 565 ----------------------------------------
      .                       hi >= source_file.original_start_pos && hi <= source_file.original_end_pos,
      .                       "Bad binary search: hi={:?} source_file.original_start_pos={:?} source_file.original_end_pos={:?}",
      .                       hi,
      .                       source_file.original_start_pos,
      .                       source_file.original_end_pos
      .                   );
      .           
      .                   let lo =
 44,216 ( 0.01%)              (lo + source_file.translated_source_file.start_pos) - source_file.original_start_pos;
      .                   let hi =
      .                       (hi + source_file.translated_source_file.start_pos) - source_file.original_start_pos;
      .           
      .                   // Do not try to decode parent for foreign spans.
      .                   Span::new(lo, hi, ctxt, None)
 99,522 ( 0.03%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for &'tcx [thir::abstract_const::Node<'tcx>] {
      .               fn decode(d: &mut DecodeContext<'a, 'tcx>) -> Self {
      .                   ty::codec::RefDecodable::decode(d)
      .               }
      .           }
      .           
-- line 587 ----------------------------------------
-- line 590 ----------------------------------------
      .                   ty::codec::RefDecodable::decode(d)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, T: Decodable<DecodeContext<'a, 'tcx>>> Decodable<DecodeContext<'a, 'tcx>>
      .               for Lazy<T>
      .           {
      .               fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Self {
  3,631 ( 0.00%)          decoder.read_lazy_with_meta(())
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, T: Decodable<DecodeContext<'a, 'tcx>>> Decodable<DecodeContext<'a, 'tcx>>
      .               for Lazy<[T]>
      .           {
      .               fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Self {
      .                   let len = decoder.read_usize();
  7,076 ( 0.00%)          if len == 0 { Lazy::empty() } else { decoder.read_lazy_with_meta(len) }
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, I: Idx, T: Decodable<DecodeContext<'a, 'tcx>>> Decodable<DecodeContext<'a, 'tcx>>
      .               for Lazy<Table<I, T>>
      .           where
      .               Option<T>: FixedSizeEncoding,
      .           {
      .               fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Self {
      .                   let len = decoder.read_usize();
  1,521 ( 0.00%)          decoder.read_lazy_with_meta(len)
      .               }
      .           }
      .           
      .           implement_ty_decoder!(DecodeContext<'a, 'tcx>);
      .           
      .           impl<'tcx> MetadataBlob {
      .               crate fn new(metadata_ref: MetadataRef) -> MetadataBlob {
      .                   MetadataBlob(Lrc::new(metadata_ref))
-- line 626 ----------------------------------------
-- line 630 ----------------------------------------
      .                   self.blob().starts_with(METADATA_HEADER)
      .               }
      .           
      .               crate fn get_rustc_version(&self) -> String {
      .                   Lazy::<String>::from_position(NonZeroUsize::new(METADATA_HEADER.len() + 4).unwrap())
      .                       .decode(self)
      .               }
      .           
     27 ( 0.00%)      crate fn get_root(&self) -> CrateRoot<'tcx> {
      9 ( 0.00%)          let slice = &self.blob()[..];
      .                   let offset = METADATA_HEADER.len();
     45 ( 0.00%)          let pos = (((slice[offset + 0] as u32) << 24)
     18 ( 0.00%)              | ((slice[offset + 1] as u32) << 16)
     36 ( 0.00%)              | ((slice[offset + 2] as u32) << 8)
     27 ( 0.00%)              | ((slice[offset + 3] as u32) << 0)) as usize;
      .                   Lazy::<CrateRoot<'tcx>>::from_position(NonZeroUsize::new(pos).unwrap()).decode(self)
     45 ( 0.00%)      }
      .           
      .               crate fn list_crate_metadata(&self, out: &mut dyn io::Write) -> io::Result<()> {
      .                   let root = self.get_root();
      .                   writeln!(out, "Crate info:")?;
      .                   writeln!(out, "name {}{}", root.name, root.extra_filename)?;
      .                   writeln!(out, "hash {} stable_crate_id {:?}", root.hash, root.stable_crate_id)?;
      .                   writeln!(out, "proc_macro {:?}", root.proc_macro_data.is_some())?;
      .                   writeln!(out, "=External Dependencies=")?;
-- line 654 ----------------------------------------
-- line 666 ----------------------------------------
      .                   }
      .                   write!(out, "\n")?;
      .                   Ok(())
      .               }
      .           }
      .           
      .           impl CrateRoot<'_> {
      .               crate fn is_proc_macro_crate(&self) -> bool {
      6 ( 0.00%)          self.proc_macro_data.is_some()
      .               }
      .           
      .               crate fn name(&self) -> Symbol {
      4 ( 0.00%)          self.name
      .               }
      .           
      .               crate fn hash(&self) -> Svh {
      3 ( 0.00%)          self.hash
      .               }
      .           
      .               crate fn stable_crate_id(&self) -> StableCrateId {
      6 ( 0.00%)          self.stable_crate_id
      .               }
      .           
      .               crate fn triple(&self) -> &TargetTriple {
      .                   &self.triple
      .               }
      .           
      .               crate fn decode_crate_deps<'a>(
      .                   &self,
      .                   metadata: &'a MetadataBlob,
      .               ) -> impl ExactSizeIterator<Item = CrateDep> + Captures<'a> {
      6 ( 0.00%)          self.crate_deps.decode(metadata)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> CrateMetadataRef<'a> {
      .               fn raw_proc_macro(self, id: DefIndex) -> &'a ProcMacro {
      .                   // DefIndex's in root.proc_macro_data have a one-to-one correspondence
      .                   // with items in 'raw_proc_macros'.
      .                   let pos = self
-- line 705 ----------------------------------------
-- line 709 ----------------------------------------
      .                       .unwrap()
      .                       .macros
      .                       .decode(self)
      .                       .position(|i| i == id)
      .                       .unwrap();
      .                   &self.raw_proc_macros.unwrap()[pos]
      .               }
      .           
 20,493 ( 0.01%)      fn opt_item_ident(self, item_index: DefIndex, sess: &Session) -> Option<Ident> {
 15,304 ( 0.00%)          let name = self.def_key(item_index).disambiguated_data.data.get_opt_name()?;
  7,833 ( 0.00%)          let span = match self.root.tables.ident_span.get(self, item_index) {
      .                       Some(lazy_span) => lazy_span.decode((self, sess)),
      .                       None => {
      .                           // FIXME: this weird case of a name with no span is specific to `extern crate`
      .                           // items, which are supposed to be treated like `use` items and only be encoded
      .                           // to metadata as `Export`s, return `None` because that's what all the callers
      .                           // expect in this case.
     18 ( 0.00%)                  assert_eq!(self.def_kind(item_index), DefKind::ExternCrate);
      .                           return None;
      .                       }
      .                   };
      .                   Some(Ident::new(name, span))
 26,242 ( 0.01%)      }
      .           
    121 ( 0.00%)      fn item_ident(self, item_index: DefIndex, sess: &Session) -> Ident {
  4,025 ( 0.00%)          self.opt_item_ident(item_index, sess).expect("no encoded ident for item")
    242 ( 0.00%)      }
      .           
      .               fn maybe_kind(self, item_id: DefIndex) -> Option<EntryKind> {
  3,928 ( 0.00%)          self.root.tables.kind.get(self, item_id).map(|k| k.decode(self))
      .               }
      .           
 15,712 ( 0.00%)      fn kind(self, item_id: DefIndex) -> EntryKind {
      .                   self.maybe_kind(item_id).unwrap_or_else(|| {
      .                       bug!(
      .                           "CrateMetadata::kind({:?}): id not found, in crate {:?} with number {}",
      .                           item_id,
      .                           self.root.name,
      .                           self.cnum,
      .                       )
      .                   })
 11,784 ( 0.00%)      }
      .           
  5,446 ( 0.00%)      fn def_kind(self, item_id: DefIndex) -> DefKind {
  5,087 ( 0.00%)          self.root.tables.def_kind.get(self, item_id).map(|k| k.decode(self)).unwrap_or_else(|| {
      .                       bug!(
      .                           "CrateMetadata::def_kind({:?}): id not found, in crate {:?} with number {}",
      .                           item_id,
      .                           self.root.name,
      .                           self.cnum,
      .                       )
      .                   })
  3,112 ( 0.00%)      }
      .           
  1,089 ( 0.00%)      fn get_span(self, index: DefIndex, sess: &Session) -> Span {
  3,268 ( 0.00%)          self.root
      .                       .tables
      .                       .span
      .                       .get(self, index)
      .                       .unwrap_or_else(|| panic!("Missing span for {:?}", index))
      .                       .decode((self, sess))
    605 ( 0.00%)      }
      .           
      .               fn load_proc_macro(self, id: DefIndex, sess: &Session) -> SyntaxExtension {
      .                   let (name, kind, helper_attrs) = match *self.raw_proc_macro(id) {
      .                       ProcMacro::CustomDerive { trait_name, attributes, client } => {
      .                           let helper_attrs =
      .                               attributes.iter().cloned().map(Symbol::intern).collect::<Vec<_>>();
      .                           (
      .                               trait_name,
-- line 778 ----------------------------------------
-- line 795 ----------------------------------------
      .                       self.get_span(id, sess),
      .                       helper_attrs,
      .                       self.root.edition,
      .                       Symbol::intern(name),
      .                       &attrs,
      .                   )
      .               }
      .           
    390 ( 0.00%)      fn get_trait_def(self, item_id: DefIndex, sess: &Session) -> ty::TraitDef {
    120 ( 0.00%)          match self.kind(item_id) {
     30 ( 0.00%)              EntryKind::Trait(data) => {
    180 ( 0.00%)                  let data = data.decode((self, sess));
    480 ( 0.00%)                  ty::TraitDef::new(
      .                               self.local_def_id(item_id),
     60 ( 0.00%)                      data.unsafety,
     60 ( 0.00%)                      data.paren_sugar,
     60 ( 0.00%)                      data.has_auto_impl,
     60 ( 0.00%)                      data.is_marker,
     30 ( 0.00%)                      data.skip_array_during_method_dispatch,
     30 ( 0.00%)                      data.specialization_kind,
    120 ( 0.00%)                      self.def_path_hash(item_id),
     30 ( 0.00%)                      data.must_implement_one_of,
      .                           )
      .                       }
      .                       EntryKind::TraitAlias => ty::TraitDef::new(
      .                           self.local_def_id(item_id),
      .                           hir::Unsafety::Normal,
      .                           false,
      .                           false,
      .                           false,
      .                           false,
      .                           ty::trait_def::TraitSpecializationKind::None,
      .                           self.def_path_hash(item_id),
      .                           None,
      .                       ),
      .                       _ => bug!("def-index does not refer to trait or trait alias"),
      .                   }
    270 ( 0.00%)      }
      .           
     45 ( 0.00%)      fn get_variant(
      .                   self,
      .                   kind: &EntryKind,
      .                   index: DefIndex,
      .                   parent_did: DefId,
      .                   sess: &Session,
      .               ) -> ty::VariantDef {
     20 ( 0.00%)          let data = match kind {
      .                       EntryKind::Variant(data) | EntryKind::Struct(data, _) | EntryKind::Union(data, _) => {
     25 ( 0.00%)                  data.decode(self)
      .                       }
      .                       _ => bug!(),
      .                   };
      .           
     18 ( 0.00%)          let adt_kind = match kind {
      .                       EntryKind::Variant(_) => ty::AdtKind::Enum,
      .                       EntryKind::Struct(..) => ty::AdtKind::Struct,
      .                       EntryKind::Union(..) => ty::AdtKind::Union,
      .                       _ => bug!(),
      .                   };
      .           
      .                   let variant_did =
      .                       if adt_kind == ty::AdtKind::Enum { Some(self.local_def_id(index)) } else { None };
     10 ( 0.00%)          let ctor_did = data.ctor.map(|index| self.local_def_id(index));
      .           
    110 ( 0.00%)          ty::VariantDef::new(
      .                       self.item_ident(index, sess).name,
      .                       variant_did,
      .                       ctor_did,
     20 ( 0.00%)              data.discr,
     30 ( 0.00%)              self.root
      .                           .tables
      .                           .children
      .                           .get(self, index)
      .                           .unwrap_or_else(Lazy::empty)
      .                           .decode(self)
      .                           .map(|index| ty::FieldDef {
      6 ( 0.00%)                      did: self.local_def_id(index),
     12 ( 0.00%)                      name: self.item_ident(index, sess).name,
     12 ( 0.00%)                      vis: self.get_visibility(index),
      .                           })
      .                           .collect(),
      .                       data.ctor_kind,
      .                       adt_kind,
      .                       parent_did,
      .                       false,
      5 ( 0.00%)              data.is_non_exhaustive,
      .                   )
     45 ( 0.00%)      }
      .           
     60 ( 0.00%)      fn get_adt_def(self, item_id: DefIndex, tcx: TyCtxt<'tcx>) -> &'tcx ty::AdtDef {
     16 ( 0.00%)          let kind = self.kind(item_id);
      8 ( 0.00%)          let did = self.local_def_id(item_id);
      .           
     20 ( 0.00%)          let (adt_kind, repr) = match kind {
      .                       EntryKind::Enum(repr) => (ty::AdtKind::Enum, repr),
      .                       EntryKind::Struct(_, repr) => (ty::AdtKind::Struct, repr),
      .                       EntryKind::Union(_, repr) => (ty::AdtKind::Union, repr),
      .                       _ => bug!("get_adt_def called on a non-ADT {:?}", did),
      .                   };
      .           
      .                   let variants = if let ty::AdtKind::Enum = adt_kind {
      5 ( 0.00%)              self.root
      .                           .tables
      .                           .children
      .                           .get(self, item_id)
      .                           .unwrap_or_else(Lazy::empty)
      .                           .decode(self)
     34 ( 0.00%)                  .map(|index| self.get_variant(&self.kind(index), index, did, tcx.sess))
      .                           .collect()
      .                   } else {
     24 ( 0.00%)              std::iter::once(self.get_variant(&kind, item_id, did, tcx.sess)).collect()
      .                   };
      .           
     61 ( 0.00%)          tcx.alloc_adt_def(did, adt_kind, variants, repr)
     28 ( 0.00%)      }
      .           
      .               fn get_explicit_predicates(
      .                   self,
      .                   item_id: DefIndex,
      .                   tcx: TyCtxt<'tcx>,
      .               ) -> ty::GenericPredicates<'tcx> {
  1,910 ( 0.00%)          self.root.tables.explicit_predicates.get(self, item_id).unwrap().decode((self, tcx))
      .               }
      .           
      .               fn get_inferred_outlives(
      .                   self,
      .                   item_id: DefIndex,
      .                   tcx: TyCtxt<'tcx>,
      .               ) -> &'tcx [(ty::Predicate<'tcx>, Span)] {
  1,910 ( 0.00%)          self.root
      .                       .tables
      .                       .inferred_outlives
      .                       .get(self, item_id)
      .                       .map(|predicates| tcx.arena.alloc_from_iter(predicates.decode((self, tcx))))
      .                       .unwrap_or_default()
      .               }
      .           
      .               fn get_super_predicates(
      .                   self,
      .                   item_id: DefIndex,
      .                   tcx: TyCtxt<'tcx>,
      .               ) -> ty::GenericPredicates<'tcx> {
     30 ( 0.00%)          self.root.tables.super_predicates.get(self, item_id).unwrap().decode((self, tcx))
      .               }
      .           
      .               fn get_explicit_item_bounds(
      .                   self,
      .                   item_id: DefIndex,
      .                   tcx: TyCtxt<'tcx>,
      .               ) -> &'tcx [(ty::Predicate<'tcx>, Span)] {
      .                   self.root
-- line 945 ----------------------------------------
-- line 946 ----------------------------------------
      .                       .tables
      .                       .explicit_item_bounds
      .                       .get(self, item_id)
      .                       .map(|bounds| tcx.arena.alloc_from_iter(bounds.decode((self, tcx))))
      .                       .unwrap_or_default()
      .               }
      .           
      .               fn get_generics(self, item_id: DefIndex, sess: &Session) -> ty::Generics {
  6,200 ( 0.00%)          self.root.tables.generics.get(self, item_id).unwrap().decode((self, sess))
      .               }
      .           
      .               fn get_type(self, id: DefIndex, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
  2,795 ( 0.00%)          self.root
      .                       .tables
      .                       .ty
      .                       .get(self, id)
      .                       .unwrap_or_else(|| panic!("Not a type: {:?}", id))
      .                       .decode((self, tcx))
      .               }
      .           
      .               fn get_stability(self, id: DefIndex) -> Option<attr::Stability> {
    165 ( 0.00%)          self.root.tables.stability.get(self, id).map(|stab| stab.decode(self))
      .               }
      .           
      .               fn get_const_stability(self, id: DefIndex) -> Option<attr::ConstStability> {
      5 ( 0.00%)          self.root.tables.const_stability.get(self, id).map(|stab| stab.decode(self))
      .               }
      .           
      .               fn get_deprecation(self, id: DefIndex) -> Option<attr::Deprecation> {
    150 ( 0.00%)          self.root.tables.deprecation.get(self, id).map(|depr| depr.decode(self))
      .               }
      .           
    114 ( 0.00%)      fn get_visibility(self, id: DefIndex) -> ty::Visibility {
  4,236 ( 0.00%)          self.root.tables.visibility.get(self, id).unwrap().decode(self)
     76 ( 0.00%)      }
      .           
      .               fn get_impl_data(self, id: DefIndex) -> ImplData {
  5,196 ( 0.00%)          match self.kind(id) {
  4,330 ( 0.00%)              EntryKind::Impl(data) => data.decode(self),
      .                       _ => bug!(),
      .                   }
      .               }
      .           
      .               fn get_parent_impl(self, id: DefIndex) -> Option<DefId> {
  1,746 ( 0.00%)          self.get_impl_data(id).parent_impl
      .               }
      .           
      .               fn get_impl_polarity(self, id: DefIndex) -> ty::ImplPolarity {
    284 ( 0.00%)          self.get_impl_data(id).polarity
      .               }
      .           
      .               fn get_impl_defaultness(self, id: DefIndex) -> hir::Defaultness {
      .                   self.get_impl_data(id).defaultness
      .               }
      .           
      .               fn get_impl_constness(self, id: DefIndex) -> hir::Constness {
      .                   self.get_impl_data(id).constness
      .               }
      .           
      .               fn get_trait_item_def_id(self, id: DefIndex) -> Option<DefId> {
  3,665 ( 0.00%)          self.root.tables.trait_item_def_id.get(self, id).map(|d| d.decode(self))
      .               }
      .           
      .               fn get_coerce_unsized_info(self, id: DefIndex) -> Option<ty::adjustment::CoerceUnsizedInfo> {
      .                   self.get_impl_data(id).coerce_unsized_info
      .               }
      .           
      .               fn get_impl_trait(self, id: DefIndex, tcx: TyCtxt<'tcx>) -> Option<ty::TraitRef<'tcx>> {
 20,147 ( 0.01%)          self.root.tables.impl_trait_ref.get(self, id).map(|tr| tr.decode((self, tcx)))
      .               }
      .           
      .               fn get_expn_that_defined(self, id: DefIndex, sess: &Session) -> ExpnId {
  1,015 ( 0.00%)          self.root.tables.expn_that_defined.get(self, id).unwrap().decode((self, sess))
      .               }
      .           
      .               fn get_const_param_default(
      .                   self,
      .                   tcx: TyCtxt<'tcx>,
      .                   id: DefIndex,
      .               ) -> rustc_middle::ty::Const<'tcx> {
      .                   self.root.tables.const_defaults.get(self, id).unwrap().decode((self, tcx))
-- line 1026 ----------------------------------------
-- line 1028 ----------------------------------------
      .           
      .               /// Iterates over all the stability attributes in the given crate.
      .               fn get_lib_features(self, tcx: TyCtxt<'tcx>) -> &'tcx [(Symbol, Option<Symbol>)] {
      .                   tcx.arena.alloc_from_iter(self.root.lib_features.decode(self))
      .               }
      .           
      .               /// Iterates over the language items in the given crate.
      .               fn get_lang_items(self, tcx: TyCtxt<'tcx>) -> &'tcx [(DefId, usize)] {
      9 ( 0.00%)          tcx.arena.alloc_from_iter(
      6 ( 0.00%)              self.root
      .                           .lang_items
      .                           .decode(self)
    508 ( 0.00%)                  .map(|(def_index, index)| (self.local_def_id(def_index), index)),
      .                   )
      .               }
      .           
      .               /// Iterates over the diagnostic items in the given crate.
      .               fn get_diagnostic_items(self) -> DiagnosticItems {
      .                   let mut id_to_name = FxHashMap::default();
      6 ( 0.00%)          let name_to_id = self
      .                       .root
      .                       .diagnostic_items
      .                       .decode(self)
      .                       .map(|(name, def_index)| {
     91 ( 0.00%)                  let id = self.local_def_id(def_index);
     91 ( 0.00%)                  id_to_name.insert(id, name);
      .                           (name, id)
      .                       })
      .                       .collect();
     27 ( 0.00%)          DiagnosticItems { id_to_name, name_to_id }
      .               }
      .           
      .               /// Iterates over all named children of the given module,
      .               /// including both proper items and reexports.
      .               /// Module here is understood in name resolution sense - it can be a `mod` item,
      .               /// or a crate root, or an enum, or a trait.
      .               fn for_each_module_child(
      .                   self,
      .                   id: DefIndex,
      .                   mut callback: impl FnMut(ModChild),
      .                   sess: &Session,
      .               ) {
    132 ( 0.00%)          if let Some(data) = &self.root.proc_macro_data {
      .                       // If we are loading as a proc macro, we want to return
      .                       // the view of this crate as a proc macro crate.
      .                       if id == CRATE_DEF_INDEX {
      .                           for def_index in data.macros.decode(self) {
      .                               let raw_macro = self.raw_proc_macro(def_index);
      .                               let res = Res::Def(
      .                                   DefKind::Macro(macro_kind(raw_macro)),
      .                                   self.local_def_id(def_index),
-- line 1078 ----------------------------------------
-- line 1085 ----------------------------------------
      .                                   span: ident.span,
      .                               });
      .                           }
      .                       }
      .                       return;
      .                   }
      .           
      .                   // Iterate over all children.
    264 ( 0.00%)          if let Some(children) = self.root.tables.children.get(self, id) {
    528 ( 0.00%)              for child_index in children.decode((self, sess)) {
  6,522 ( 0.00%)                  if let Some(ident) = self.opt_item_ident(child_index, sess) {
    903 ( 0.00%)                      let kind = self.def_kind(child_index);
    602 ( 0.00%)                      if matches!(kind, DefKind::Macro(..)) {
      .                                   // FIXME: Macros are currently encoded twice, once as items and once as
      .                                   // reexports. We ignore the items here and only use the reexports.
      .                                   continue;
      .                               }
      .                               let def_id = self.local_def_id(child_index);
      .                               let res = Res::Def(kind, def_id);
      .                               let vis = self.get_visibility(child_index);
      .                               let span = self.get_span(child_index, sess);
      .           
      .                               callback(ModChild { ident, res, vis, span });
      .           
      .                               // For non-re-export structs and variants add their constructors to children.
      .                               // Re-export lists automatically contain constructors when necessary.
  1,188 ( 0.00%)                      match kind {
      .                                   DefKind::Struct => {
     10 ( 0.00%)                              if let Some((ctor_def_id, ctor_kind)) =
      .                                           self.get_ctor_def_id_and_kind(child_index)
      .                                       {
      .                                           let ctor_res =
      .                                               Res::Def(DefKind::Ctor(CtorOf::Struct, ctor_kind), ctor_def_id);
      .                                           let vis = self.get_visibility(ctor_def_id.index);
      .                                           callback(ModChild { ident, res: ctor_res, vis, span });
      .                                       }
      .                                   }
-- line 1121 ----------------------------------------
-- line 1144 ----------------------------------------
      .                                       callback(ModChild { ident, res: ctor_res, vis, span });
      .                                   }
      .                                   _ => {}
      .                               }
      .                           }
      .                       }
      .                   }
      .           
    345 ( 0.00%)          match self.kind(id) {
     18 ( 0.00%)              EntryKind::Mod(exports) => {
    668 ( 0.00%)                  for exp in exports.decode((self, sess)) {
      .                               callback(exp);
      .                           }
      .                       }
      .                       EntryKind::Enum(..) | EntryKind::Trait(..) => {}
      .                       _ => bug!("`for_each_module_child` is called on a non-module: {:?}", self.def_kind(id)),
      .                   }
      .               }
      .           
-- line 1162 ----------------------------------------
-- line 1164 ----------------------------------------
      .                   self.root.tables.mir_for_ctfe.get(self, id).is_some()
      .               }
      .           
      .               fn is_item_mir_available(self, id: DefIndex) -> bool {
      .                   self.root.tables.mir.get(self, id).is_some()
      .               }
      .           
      .               fn module_expansion(self, id: DefIndex, sess: &Session) -> ExpnId {
  1,225 ( 0.00%)          match self.kind(id) {
      .                       EntryKind::Mod(_) | EntryKind::Enum(_) | EntryKind::Trait(_) => {
      .                           self.get_expn_that_defined(id, sess)
      .                       }
      .                       _ => panic!("Expected module, found {:?}", self.local_def_id(id)),
      .                   }
      .               }
      .           
      .               fn get_optimized_mir(self, tcx: TyCtxt<'tcx>, id: DefIndex) -> Body<'tcx> {
-- line 1180 ----------------------------------------
-- line 1242 ----------------------------------------
      .                           qualif,
      .                           _,
      .                       ) => qualif,
      .                       _ => bug!("mir_const_qualif: unexpected kind"),
      .                   }
      .               }
      .           
      .               fn get_fn_has_self_parameter(self, id: DefIndex) -> bool {
    535 ( 0.00%)          match self.kind(id) {
    428 ( 0.00%)              EntryKind::AssocFn(data) => data.decode(self).has_self,
      .                       _ => false,
      .                   }
      .               }
      .           
      .               fn get_associated_item_def_ids(self, tcx: TyCtxt<'tcx>, id: DefIndex) -> &'tcx [DefId] {
    518 ( 0.00%)          if let Some(children) = self.root.tables.children.get(self, id) {
    222 ( 0.00%)              tcx.arena.alloc_from_iter(
     74 ( 0.00%)                  children.decode((self, tcx.sess)).map(|child_index| self.local_def_id(child_index)),
      .                       )
      .                   } else {
      .                       &[]
      .                   }
      .               }
      .           
  7,692 ( 0.00%)      fn get_associated_item(self, id: DefIndex, sess: &Session) -> ty::AssocItem {
  4,487 ( 0.00%)          let def_key = self.def_key(id);
      .                   let parent = self.local_def_id(def_key.parent.unwrap());
      .                   let ident = self.item_ident(id, sess);
      .           
  4,731 ( 0.00%)          let (kind, container, has_self) = match self.kind(id) {
    136 ( 0.00%)              EntryKind::AssocConst(container, _, _) => (ty::AssocKind::Const, container, false),
    553 ( 0.00%)              EntryKind::AssocFn(data) => {
      .                           let data = data.decode(self);
  3,871 ( 0.00%)                  (ty::AssocKind::Fn, data.container, data.has_self)
      .                       }
    108 ( 0.00%)              EntryKind::AssocType(container) => (ty::AssocKind::Type, container, false),
      .                       _ => bug!("cannot get associated-item of `{:?}`", def_key),
      .                   };
      .           
 11,538 ( 0.00%)          ty::AssocItem {
      .                       name: ident.name,
      .                       kind,
      .                       vis: self.get_visibility(id),
      .                       defaultness: container.defaultness(),
      .                       def_id: self.local_def_id(id),
      .                       trait_item_def_id: self.get_trait_item_def_id(id),
      .                       container: container.with_def_id(parent),
      .                       fn_has_self_parameter: has_self,
      .                   }
  5,769 ( 0.00%)      }
      .           
      .               fn get_item_variances(self, id: DefIndex) -> impl Iterator<Item = ty::Variance> + 'a {
     15 ( 0.00%)          self.root.tables.variances.get(self, id).unwrap_or_else(Lazy::empty).decode(self)
      .               }
      .           
      .               fn get_ctor_def_id_and_kind(self, node_id: DefIndex) -> Option<(DefId, CtorKind)> {
    615 ( 0.00%)          match self.kind(node_id) {
      .                       EntryKind::Struct(data, _) | EntryKind::Variant(data) => {
    265 ( 0.00%)                  let vdata = data.decode(self);
    241 ( 0.00%)                  vdata.ctor.map(|index| (self.local_def_id(index), vdata.ctor_kind))
      .                       }
      .                       _ => None,
      .                   }
    375 ( 0.00%)      }
      .           
  1,092 ( 0.00%)      fn get_item_attrs(
      .                   self,
      .                   id: DefIndex,
      .                   sess: &'a Session,
      .               ) -> impl Iterator<Item = ast::Attribute> + 'a {
    441 ( 0.00%)          self.root
      .                       .tables
      .                       .attributes
      .                       .get(self, id)
      .                       .unwrap_or_else(|| {
      .                           // Structure and variant constructors don't have any attributes encoded for them,
      .                           // but we assume that someone passing a constructor ID actually wants to look at
      .                           // the attributes on the corresponding struct or variant.
      .                           let def_key = self.def_key(id);
-- line 1320 ----------------------------------------
-- line 1322 ----------------------------------------
      .                           let parent_id = def_key.parent.expect("no parent for a constructor");
      .                           self.root
      .                               .tables
      .                               .attributes
      .                               .get(self, parent_id)
      .                               .expect("no encoded attributes for a structure or variant")
      .                       })
      .                       .decode((self, sess))
    819 ( 0.00%)      }
      .           
      .               fn get_struct_field_names(
      .                   self,
      .                   id: DefIndex,
      .                   sess: &'a Session,
      .               ) -> impl Iterator<Item = Spanned<Symbol>> + 'a {
    390 ( 0.00%)          self.root
      .                       .tables
      .                       .children
      .                       .get(self, id)
      .                       .unwrap_or_else(Lazy::empty)
      .                       .decode(self)
  1,210 ( 0.00%)              .map(move |index| respan(self.get_span(index, sess), self.item_ident(index, sess).name))
      .               }
      .           
      .               fn get_struct_field_visibilities(self, id: DefIndex) -> impl Iterator<Item = Visibility> + 'a {
    145 ( 0.00%)          self.root
      .                       .tables
      .                       .children
      .                       .get(self, id)
      .                       .unwrap_or_else(Lazy::empty)
      .                       .decode(self)
     38 ( 0.00%)              .map(move |field_index| self.get_visibility(field_index))
      .               }
      .           
      .               fn get_inherent_implementations_for_type(
      .                   self,
      .                   tcx: TyCtxt<'tcx>,
      .                   id: DefIndex,
      .               ) -> &'tcx [DefId] {
      4 ( 0.00%)          tcx.arena.alloc_from_iter(
      5 ( 0.00%)              self.root
      .                           .tables
      .                           .inherent_impls
      .                           .get(self, id)
      .                           .unwrap_or_else(Lazy::empty)
      .                           .decode(self)
    637 ( 0.00%)                  .map(|index| self.local_def_id(index)),
      .                   )
      .               }
      .           
      .               fn get_traits(self) -> impl Iterator<Item = DefId> + 'a {
      .                   self.root.traits.decode(self).map(move |index| self.local_def_id(index))
      .               }
      .           
      .               fn get_trait_impls(self) -> impl Iterator<Item = (DefId, DefId, Option<SimplifiedType>)> + 'a {
-- line 1376 ----------------------------------------
-- line 1380 ----------------------------------------
      .                           index: *trait_index,
      .                       };
      .                       impls.decode(self).map(move |(impl_index, simplified_self_ty)| {
      .                           (trait_def_id, self.local_def_id(impl_index), simplified_self_ty)
      .                       })
      .                   })
      .               }
      .           
    864 ( 0.00%)      fn get_implementations_of_trait(
      .                   self,
      .                   tcx: TyCtxt<'tcx>,
      .                   trait_def_id: DefId,
      .               ) -> &'tcx [(DefId, Option<SimplifiedType>)] {
     96 ( 0.00%)          if self.trait_impls.is_empty() {
      .                       return &[];
      .                   }
      .           
      .                   // Do a reverse lookup beforehand to avoid touching the crate_num
      .                   // hash map in the loop below.
    128 ( 0.00%)          let key = match self.reverse_translate_def_id(trait_def_id) {
      .                       Some(def_id) => (def_id.krate.as_u32(), def_id.index),
      .                       None => return &[],
      .                   };
      .           
      .                   if let Some(impls) = self.trait_impls.get(&key) {
    136 ( 0.00%)              tcx.arena.alloc_from_iter(
     68 ( 0.00%)                  impls
      .                               .decode(self)
  5,253 ( 0.00%)                      .map(|(idx, simplified_self_ty)| (self.local_def_id(idx), simplified_self_ty)),
      .                       )
      .                   } else {
      .                       &[]
      .                   }
    768 ( 0.00%)      }
      .           
      .               fn get_trait_of_item(self, id: DefIndex) -> Option<DefId> {
     64 ( 0.00%)          let def_key = self.def_key(id);
     80 ( 0.00%)          match def_key.disambiguated_data.data {
      .                       DefPathData::TypeNs(..) | DefPathData::ValueNs(..) => (),
      .                       // Not an associated item
      .                       _ => return None,
      .                   }
    144 ( 0.00%)          def_key.parent.and_then(|parent_index| match self.kind(parent_index) {
      .                       EntryKind::Trait(_) | EntryKind::TraitAlias => Some(self.local_def_id(parent_index)),
      .                       _ => None,
      .                   })
      .               }
      .           
      .               fn get_native_libraries(self, sess: &'a Session) -> impl Iterator<Item = NativeLib> + 'a {
      6 ( 0.00%)          self.root.native_libraries.decode((self, sess))
      .               }
      .           
      .               fn get_proc_macro_quoted_span(self, index: usize, sess: &Session) -> Span {
      .                   self.root
      .                       .tables
      .                       .proc_macro_quoted_spans
      .                       .get(self, index)
      .                       .unwrap_or_else(|| panic!("Missing proc macro quoted span: {:?}", index))
-- line 1437 ----------------------------------------
-- line 1450 ----------------------------------------
      .                       self.root.dylib_dependency_formats.decode(self).enumerate().flat_map(|(i, link)| {
      .                           let cnum = CrateNum::new(i + 1);
      .                           link.map(|link| (self.cnum_map[cnum], link))
      .                       }),
      .                   )
      .               }
      .           
      .               fn get_missing_lang_items(self, tcx: TyCtxt<'tcx>) -> &'tcx [lang_items::LangItem] {
     15 ( 0.00%)          tcx.arena.alloc_from_iter(self.root.lang_items_missing.decode(self))
      .               }
      .           
      .               fn get_fn_param_names(self, tcx: TyCtxt<'tcx>, id: DefIndex) -> &'tcx [Ident] {
      .                   let param_names = match self.kind(id) {
      .                       EntryKind::Fn(data) | EntryKind::ForeignFn(data) => data.decode(self).param_names,
      .                       EntryKind::AssocFn(data) => data.decode(self).fn_data.param_names,
      .                       _ => Lazy::empty(),
      .                   };
-- line 1466 ----------------------------------------
-- line 1479 ----------------------------------------
      .                       EntryKind::AnonConst(_, data)
      .                       | EntryKind::Const(_, data)
      .                       | EntryKind::AssocConst(_, _, data) => data.decode(self).0,
      .                       _ => bug!(),
      .                   }
      .               }
      .           
      .               fn get_macro(self, id: DefIndex, sess: &Session) -> MacroDef {
     18 ( 0.00%)          match self.kind(id) {
      3 ( 0.00%)              EntryKind::MacroDef(macro_def) => macro_def.decode((self, sess)),
      .                       _ => bug!(),
      .                   }
      .               }
      .           
      .               // This replicates some of the logic of the crate-local `is_const_fn_raw` query, because we
      .               // don't serialize constness for tuple variant and tuple struct constructors.
      .               fn is_const_fn_raw(self, id: DefIndex) -> bool {
     18 ( 0.00%)          let constness = match self.kind(id) {
      2 ( 0.00%)              EntryKind::AssocFn(data) => data.decode(self).fn_data.constness,
      6 ( 0.00%)              EntryKind::Fn(data) => data.decode(self).constness,
      .                       EntryKind::ForeignFn(data) => data.decode(self).constness,
      .                       EntryKind::Variant(..) | EntryKind::Struct(..) => hir::Constness::Const,
      .                       _ => hir::Constness::NotConst,
      .                   };
      .                   constness == hir::Constness::Const
      .               }
      .           
      .               fn asyncness(self, id: DefIndex) -> hir::IsAsync {
-- line 1506 ----------------------------------------
-- line 1532 ----------------------------------------
      .               fn generator_kind(self, id: DefIndex) -> Option<hir::GeneratorKind> {
      .                   match self.kind(id) {
      .                       EntryKind::Generator(data) => Some(data),
      .                       _ => None,
      .                   }
      .               }
      .           
      .               fn fn_sig(self, id: DefIndex, tcx: TyCtxt<'tcx>) -> ty::PolyFnSig<'tcx> {
    235 ( 0.00%)          self.root.tables.fn_sig.get(self, id).unwrap().decode((self, tcx))
      .               }
      .           
      .               #[inline]
 21,413 ( 0.01%)      fn def_key(self, index: DefIndex) -> DefKey {
  6,118 ( 0.00%)          *self
      .                       .def_key_cache
      .                       .lock()
      .                       .entry(index)
  9,455 ( 0.00%)              .or_insert_with(|| self.root.tables.def_keys.get(self, index).unwrap().decode(self))
 24,472 ( 0.01%)      }
      .           
      .               // Returns the path leading to the thing with this `id`.
      .               fn def_path(self, id: DefIndex) -> DefPath {
      .                   debug!("def_path(cnum={:?}, id={:?})", self.cnum, id);
      .                   DefPath::make(self.cnum, id, |parent| self.def_key(parent))
      .               }
      .           
      .               fn def_path_hash_unlocked(
      .                   self,
      .                   index: DefIndex,
      .                   def_path_hashes: &mut FxHashMap<DefIndex, DefPathHash>,
      .               ) -> DefPathHash {
    758 ( 0.00%)          *def_path_hashes.entry(index).or_insert_with(|| {
    270 ( 0.00%)              self.root.tables.def_path_hashes.get(self, index).unwrap().decode(self)
      .                   })
      .               }
      .           
      .               #[inline]
  2,653 ( 0.00%)      fn def_path_hash(self, index: DefIndex) -> DefPathHash {
      .                   let mut def_path_hashes = self.def_path_hash_cache.lock();
      .                   self.def_path_hash_unlocked(index, &mut def_path_hashes)
  3,032 ( 0.00%)      }
      .           
      .               #[inline]
      .               fn def_path_hash_to_def_index(self, hash: DefPathHash) -> DefIndex {
      .                   self.def_path_hash_map.def_path_hash_to_def_index(&hash)
      .               }
      .           
      .               fn expn_hash_to_expn_id(self, sess: &Session, index_guess: u32, hash: ExpnHash) -> ExpnId {
      .                   debug_assert_eq!(ExpnId::from_hash(hash), None);
-- line 1580 ----------------------------------------
-- line 1635 ----------------------------------------
      .               /// Proc macro crates don't currently export spans, so this function does not have
      .               /// to work for them.
      .               fn imported_source_files(self, sess: &Session) -> &'a [ImportedSourceFile] {
      .                   // Translate the virtual `/rustc/$hash` prefix back to a real directory
      .                   // that should hold actual sources, where possible.
      .                   //
      .                   // NOTE: if you update this, you might need to also update bootstrap's code for generating
      .                   // the `rust-src` component in `Src::run` in `src/bootstrap/dist.rs`.
 22,108 ( 0.01%)          let virtual_rust_source_base_dir = option_env!("CFG_VIRTUAL_RUST_SOURCE_BASE_DIR")
      .                       .map(Path::new)
      .                       .filter(|_| {
      .                           // Only spend time on further checks if we have what to translate *to*.
      .                           sess.opts.real_rust_source_base_dir.is_some()
      .                       })
      .                       .filter(|virtual_dir| {
      .                           // Don't translate away `/rustc/$hash` if we're still remapping to it,
      .                           // since that means we're still building `std`/`rustc` that need it,
      .                           // and we don't want the real path to leak into codegen/debuginfo.
      .                           !sess.opts.remap_path_prefix.iter().any(|(_from, to)| to == virtual_dir)
      .                       });
 22,108 ( 0.01%)          let try_to_translate_virtual_to_real = |name: &mut rustc_span::FileName| {
      .                       debug!(
      .                           "try_to_translate_virtual_to_real(name={:?}): \
      .                            virtual_rust_source_base_dir={:?}, real_rust_source_base_dir={:?}",
      .                           name, virtual_rust_source_base_dir, sess.opts.real_rust_source_base_dir,
      .                       );
      .           
  1,565 ( 0.00%)              if let Some(virtual_dir) = virtual_rust_source_base_dir {
      .                           if let Some(real_dir) = &sess.opts.real_rust_source_base_dir {
      .                               if let rustc_span::FileName::Real(old_name) = name {
      .                                   if let rustc_span::RealFileName::Remapped { local_path: _, virtual_name } =
      .                                       old_name
      .                                   {
      .                                       if let Ok(rest) = virtual_name.strip_prefix(virtual_dir) {
      .                                           let virtual_name = virtual_name.clone();
      .           
-- line 1670 ----------------------------------------
-- line 1709 ----------------------------------------
      .                                           *old_name = new_name;
      .                                       }
      .                                   }
      .                               }
      .                           }
      .                       }
      .                   };
      .           
 22,108 ( 0.01%)          self.cdata.source_map_import_info.get_or_init(|| {
      9 ( 0.00%)              let external_source_map = self.root.source_map.decode(self);
      .           
      .                       external_source_map
      .                           .map(|source_file_to_import| {
      .                               // We can't reuse an existing SourceFile, so allocate a new one
      .                               // containing the information we need.
      .                               let rustc_span::SourceFile {
  6,573 ( 0.00%)                          mut name,
  1,878 ( 0.00%)                          src_hash,
    313 ( 0.00%)                          start_pos,
    626 ( 0.00%)                          end_pos,
  1,565 ( 0.00%)                          mut lines,
  1,565 ( 0.00%)                          mut multibyte_chars,
  1,878 ( 0.00%)                          mut non_narrow_chars,
  1,565 ( 0.00%)                          mut normalized_pos,
  1,878 ( 0.00%)                          name_hash,
      .                                   ..
      .                               } = source_file_to_import;
      .           
      .                               // If this file is under $sysroot/lib/rustlib/src/ but has not been remapped
      .                               // during rust bootstrapping by `remap-debuginfo = true`, and the user
      .                               // wish to simulate that behaviour by -Z simulate-remapped-rust-src-base,
      .                               // then we change `name` to a similar state as if the rust was bootstrapped
      .                               // with `remap-debuginfo = true`.
      .                               // This is useful for testing so that tests about the effects of
      .                               // `try_to_translate_virtual_to_real` don't have to worry about how the
      .                               // compiler is bootstrapped.
    626 ( 0.00%)                      if let Some(virtual_dir) =
      .                                   &sess.opts.debugging_opts.simulate_remapped_rust_src_base
      .                               {
      .                                   if let Some(real_dir) = &sess.opts.real_rust_source_base_dir {
      .                                       if let rustc_span::FileName::Real(ref mut old_name) = name {
      .                                           if let rustc_span::RealFileName::LocalPath(local) = old_name {
      .                                               if let Ok(rest) = local.strip_prefix(real_dir) {
      .                                                   *old_name = rustc_span::RealFileName::Remapped {
      .                                                       local_path: None,
-- line 1753 ----------------------------------------
-- line 1767 ----------------------------------------
      .                               let source_length = (end_pos - start_pos).to_usize();
      .           
      .                               // Translate line-start positions and multibyte character
      .                               // position into frame of reference local to file.
      .                               // `SourceMap::new_imported_source_file()` will then translate those
      .                               // coordinates to their new global frame of reference when the
      .                               // offset of the SourceFile is known.
      .                               for pos in &mut lines {
476,936 ( 0.12%)                          *pos = *pos - start_pos;
      .                               }
      .                               for mbc in &mut multibyte_chars {
  1,136 ( 0.00%)                          mbc.pos = mbc.pos - start_pos;
      .                               }
      .                               for swc in &mut non_narrow_chars {
    804 ( 0.00%)                          *swc = *swc - start_pos;
      .                               }
      .                               for np in &mut normalized_pos {
      .                                   np.pos = np.pos - start_pos;
      .                               }
      .           
  5,634 ( 0.00%)                      let local_version = sess.source_map().new_imported_source_file(
  4,069 ( 0.00%)                          name,
  2,191 ( 0.00%)                          src_hash,
      .                                   name_hash,
      .                                   source_length,
    626 ( 0.00%)                          self.cnum,
  1,565 ( 0.00%)                          lines,
  1,878 ( 0.00%)                          multibyte_chars,
  1,565 ( 0.00%)                          non_narrow_chars,
  1,252 ( 0.00%)                          normalized_pos,
      .                                   start_pos,
      .                                   end_pos,
      .                               );
      .                               debug!(
      .                                   "CrateMetaData::imported_source_files alloc \
      .                                    source_file {:?} original (start_pos {:?} end_pos {:?}) \
      .                                    translated (start_pos {:?} end_pos {:?})",
      .                                   local_version.name,
-- line 1804 ----------------------------------------
-- line 1808 ----------------------------------------
      .                                   local_version.end_pos
      .                               );
      .           
      .                               ImportedSourceFile {
      .                                   original_start_pos: start_pos,
      .                                   original_end_pos: end_pos,
      .                                   translated_source_file: local_version,
      .                               }
    939 ( 0.00%)                  })
      .                           .collect()
      .                   })
      .               }
      .           }
      .           
      .           impl CrateMetadata {
     36 ( 0.00%)      crate fn new(
      .                   sess: &Session,
      .                   blob: MetadataBlob,
      .                   root: CrateRoot<'static>,
      .                   raw_proc_macros: Option<&'static [ProcMacro]>,
      .                   cnum: CrateNum,
      .                   cnum_map: CrateNumMap,
      .                   dep_kind: CrateDepKind,
      .                   source: CrateSource,
      .                   private_dep: bool,
      .                   host_hash: Option<Svh>,
      .               ) -> CrateMetadata {
      9 ( 0.00%)          let trait_impls = root
      .                       .impls
      .                       .decode((&blob, sess))
      .                       .map(|trait_impls| (trait_impls.trait_id, trait_impls.impls))
      .                       .collect();
      .                   let alloc_decoding_state =
      9 ( 0.00%)              AllocDecodingState::new(root.interpret_alloc_index.decode(&blob).collect());
      .                   let dependencies = Lock::new(cnum_map.iter().cloned().collect());
      .           
      .                   // Pre-decode the DefPathHash->DefIndex table. This is a cheap operation
      .                   // that does not copy any data. It just does some data verification.
      3 ( 0.00%)          let def_path_hash_map = root.def_path_hash_map.decode(&blob);
      .           
     69 ( 0.00%)          CrateMetadata {
      3 ( 0.00%)              blob,
      9 ( 0.00%)              root,
     12 ( 0.00%)              trait_impls,
      .                       raw_proc_macros,
      .                       source_map_import_info: OnceCell::new(),
     12 ( 0.00%)              def_path_hash_map,
      .                       expn_hash_map: Default::default(),
     21 ( 0.00%)              alloc_decoding_state,
      .                       cnum,
     12 ( 0.00%)              cnum_map,
     15 ( 0.00%)              dependencies,
      .                       dep_kind: Lock::new(dep_kind),
     36 ( 0.00%)              source,
      .                       private_dep,
      .                       host_hash,
      .                       extern_crate: Lock::new(None),
      .                       hygiene_context: Default::default(),
      .                       def_key_cache: Default::default(),
      .                       def_path_hash_cache: Default::default(),
      .                   }
     27 ( 0.00%)      }
      .           
      .               crate fn dependencies(&self) -> LockGuard<'_, Vec<CrateNum>> {
      .                   self.dependencies.borrow()
      .               }
      .           
      .               crate fn add_dependency(&self, cnum: CrateNum) {
      .                   self.dependencies.borrow_mut().push(cnum);
      .               }
      .           
      .               crate fn update_extern_crate(&self, new_extern_crate: ExternCrate) -> bool {
      .                   let mut extern_crate = self.extern_crate.borrow_mut();
      .                   let update = Some(new_extern_crate.rank()) > extern_crate.as_ref().map(ExternCrate::rank);
      .                   if update {
     15 ( 0.00%)              *extern_crate = Some(new_extern_crate);
      .                   }
      .                   update
      .               }
      .           
      .               crate fn source(&self) -> &CrateSource {
    120 ( 0.00%)          &self.source
      .               }
      .           
      .               crate fn dep_kind(&self) -> CrateDepKind {
      .                   *self.dep_kind.lock()
      .               }
      .           
      .               crate fn update_dep_kind(&self, f: impl FnOnce(CrateDepKind) -> CrateDepKind) {
     32 ( 0.00%)          self.dep_kind.with_lock(|dep_kind| *dep_kind = f(*dep_kind))
      .               }
      .           
      .               crate fn panic_strategy(&self) -> PanicStrategy {
      .                   self.root.panic_strategy
      .               }
      .           
      .               crate fn needs_panic_runtime(&self) -> bool {
      .                   self.root.needs_panic_runtime
-- line 1905 ----------------------------------------
-- line 1909 ----------------------------------------
      .                   self.root.panic_runtime
      .               }
      .           
      .               crate fn is_profiler_runtime(&self) -> bool {
      .                   self.root.profiler_runtime
      .               }
      .           
      .               crate fn needs_allocator(&self) -> bool {
      3 ( 0.00%)          self.root.needs_allocator
      .               }
      .           
      .               crate fn has_global_allocator(&self) -> bool {
      .                   self.root.has_global_allocator
      .               }
      .           
      .               crate fn has_default_lib_allocator(&self) -> bool {
      .                   self.root.has_default_lib_allocator
      .               }
      .           
      .               crate fn is_proc_macro_crate(&self) -> bool {
      .                   self.root.is_proc_macro_crate()
      .               }
      .           
      .               crate fn name(&self) -> Symbol {
     31 ( 0.00%)          self.root.name
      .               }
      .           
      .               crate fn stable_crate_id(&self) -> StableCrateId {
      .                   self.root.stable_crate_id
      .               }
      .           
      .               crate fn hash(&self) -> Svh {
      .                   self.root.hash
      .               }
      .           
      .               fn num_def_ids(&self) -> usize {
      .                   self.root.tables.def_keys.size()
      .               }
      .           
      .               fn local_def_id(&self, index: DefIndex) -> DefId {
  9,637 ( 0.00%)          DefId { krate: self.cnum, index }
      .               }
      .           
      .               // Translate a DefId from the current compilation environment to a DefId
      .               // for an external crate.
      .               fn reverse_translate_def_id(&self, did: DefId) -> Option<DefId> {
      .                   for (local, &global) in self.cnum_map.iter_enumerated() {
    160 ( 0.00%)              if global == did.krate {
      .                           return Some(DefId { krate: local, index: did.index });
      .                       }
      .                   }
      .           
      .                   None
      .               }
      .           }
      .           
-- line 1964 ----------------------------------------

219,136 ( 0.06%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/query/type_op/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 72 ----------------------------------------
      .               /// it might do things like invoke `sub_regions`, which would be
      .               /// bad, because it would create subregion relationships that are
      .               /// not captured in the return value.
      .               fn perform_query(
      .                   tcx: TyCtxt<'tcx>,
      .                   canonicalized: Canonicalized<'tcx, ParamEnvAnd<'tcx, Self>>,
      .               ) -> Fallible<CanonicalizedQueryResponse<'tcx, Self::QueryResponse>>;
      .           
131,184 ( 0.03%)      fn fully_perform_into(
      .                   query_key: ParamEnvAnd<'tcx, Self>,
      .                   infcx: &InferCtxt<'_, 'tcx>,
      .                   output_query_region_constraints: &mut QueryRegionConstraints<'tcx>,
      .               ) -> Fallible<(
      .                   Self::QueryResponse,
      .                   Option<Canonical<'tcx, ParamEnvAnd<'tcx, Self>>>,
      .                   PredicateObligations<'tcx>,
      .                   Certainty,
      .               )> {
 34,318 ( 0.01%)          if let Some(result) = QueryTypeOp::try_fast_path(infcx.tcx, &query_key) {
 55,146 ( 0.01%)              return Ok((result, None, vec![], Certainty::Proven));
      .                   }
      .           
      .                   // FIXME(#33684) -- We need to use
      .                   // `canonicalize_query_keep_static` here because of things
      .                   // like the subtype query, which go awry around
      .                   // `'static` otherwise.
  4,226 ( 0.00%)          let mut canonical_var_values = OriginalQueryValues::default();
    139 ( 0.00%)          let old_param_env = query_key.param_env;
      .                   let canonical_self =
  2,786 ( 0.00%)              infcx.canonicalize_query_keep_static(query_key, &mut canonical_var_values);
 21,532 ( 0.01%)          let canonical_result = Self::perform_query(infcx.tcx, canonical_self)?;
      .           
 26,210 ( 0.01%)          let InferOk { value, obligations } = infcx
      .                       .instantiate_nll_query_response_and_region_obligations(
      .                           &ObligationCause::dummy(),
      .                           old_param_env,
      .                           &canonical_var_values,
      .                           canonical_result,
      .                           output_query_region_constraints,
      .                       )?;
      .           
 32,286 ( 0.01%)          Ok((value, Some(canonical_self), obligations, canonical_result.value.certainty))
115,398 ( 0.03%)      }
      .           }
      .           
      .           impl<'tcx, Q> TypeOp<'tcx> for ParamEnvAnd<'tcx, Q>
      .           where
      .               Q: QueryTypeOp<'tcx>,
      .           {
      .               type Output = Q::QueryResponse;
      .           
106,976 ( 0.03%)      fn fully_perform(self, infcx: &InferCtxt<'_, 'tcx>) -> Fallible<TypeOpOutput<'tcx, Self>> {
      .                   let mut region_constraints = QueryRegionConstraints::default();
 83,225 ( 0.02%)          let (output, canonicalized_query, mut obligations, _) =
 16,802 ( 0.00%)              Q::fully_perform_into(self, infcx, &mut region_constraints)?;
      .           
      .                   // Typically, instantiating NLL query results does not
      .                   // create obligations. However, in some cases there
      .                   // are unresolved type variables, and unify them *can*
      .                   // create obligations. In that case, we have to go
      .                   // fulfill them. We do this via a (recursive) query.
 13,372 ( 0.00%)          while !obligations.is_empty() {
      .                       trace!("{:#?}", obligations);
      .                       let mut progress = false;
      .                       for obligation in std::mem::take(&mut obligations) {
      .                           let obligation = infcx.resolve_vars_if_possible(obligation);
      .                           match ProvePredicate::fully_perform_into(
      .                               obligation.param_env.and(ProvePredicate::new(obligation.predicate)),
      .                               infcx,
      .                               &mut region_constraints,
-- line 141 ----------------------------------------
-- line 153 ----------------------------------------
      .                       if !progress {
      .                           return Err(NoSolution);
      .                       }
      .                   }
      .           
      .                   // Promote the final query-region-constraints into a
      .                   // (optional) ref-counted vector:
      .                   let region_constraints =
 53,488 ( 0.01%)              if region_constraints.is_empty() { None } else { Some(Rc::new(region_constraints)) };
      .           
165,802 ( 0.04%)          Ok(TypeOpOutput { output, constraints: region_constraints, canonicalized_query })
133,720 ( 0.03%)      }
      .           }

 97,550 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/query/type_op/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_dataflow/src/drop_flag_effects.rs
--------------------------------------------------------------------------------
Ir               

-- line 48 ----------------------------------------
      .           //
      .           // FIXME: we have to do something for moving slice patterns.
      .           fn place_contents_drop_state_cannot_differ<'tcx>(
      .               tcx: TyCtxt<'tcx>,
      .               body: &Body<'tcx>,
      .               place: mir::Place<'tcx>,
      .           ) -> bool {
      .               let ty = place.ty(body, tcx).ty;
189,188 ( 0.05%)      match ty.kind() {
      .                   ty::Array(..) => {
      .                       debug!(
      .                           "place_contents_drop_state_cannot_differ place: {:?} ty: {:?} => false",
      .                           place, ty
      .                       );
      .                       false
      .                   }
      .                   ty::Slice(..) | ty::Ref(..) | ty::RawPtr(..) => {
      .                       debug!(
      .                           "place_contents_drop_state_cannot_differ place: {:?} ty: {:?} refd => true",
      .                           place, ty
      .                       );
      .                       true
      .                   }
  1,917 ( 0.00%)          ty::Adt(def, _) if (def.has_dtor(tcx) && !def.is_box()) || def.is_union() => {
      .                       debug!(
      .                           "place_contents_drop_state_cannot_differ place: {:?} ty: {:?} Drop => true",
      .                           place, ty
      .                       );
      .                       true
      .                   }
      .                   _ => false,
      .               }
-- line 79 ----------------------------------------
-- line 83 ----------------------------------------
      .               tcx: TyCtxt<'tcx>,
      .               body: &Body<'tcx>,
      .               move_data: &MoveData<'tcx>,
      .               lookup_result: LookupResult,
      .               each_child: F,
      .           ) where
      .               F: FnMut(MovePathIndex),
      .           {
  1,316 ( 0.00%)      match lookup_result {
      .                   LookupResult::Parent(..) => {
      .                       // access to untracked value - do not touch children
      .                   }
      .                   LookupResult::Exact(e) => on_all_children_bits(tcx, body, move_data, e, each_child),
      .               }
      .           }
      .           
      .           pub fn on_all_children_bits<'tcx, F>(
-- line 99 ----------------------------------------
-- line 100 ----------------------------------------
      .               tcx: TyCtxt<'tcx>,
      .               body: &Body<'tcx>,
      .               move_data: &MoveData<'tcx>,
      .               move_path_index: MovePathIndex,
      .               mut each_child: F,
      .           ) where
      .               F: FnMut(MovePathIndex),
      .           {
258,064 ( 0.07%)      fn is_terminal_path<'tcx>(
      .                   tcx: TyCtxt<'tcx>,
      .                   body: &Body<'tcx>,
      .                   move_data: &MoveData<'tcx>,
      .                   path: MovePathIndex,
      .               ) -> bool {
 64,516 ( 0.02%)          place_contents_drop_state_cannot_differ(tcx, body, move_data.move_paths[path].place)
258,064 ( 0.07%)      }
      .           
316,691 ( 0.08%)      fn on_all_children_bits<'tcx, F>(
      .                   tcx: TyCtxt<'tcx>,
      .                   body: &Body<'tcx>,
      .                   move_data: &MoveData<'tcx>,
      .                   move_path_index: MovePathIndex,
      .                   each_child: &mut F,
      .               ) where
      .                   F: FnMut(MovePathIndex),
      .               {
 12,308 ( 0.00%)          each_child(move_path_index);
      .           
225,806 ( 0.06%)          if is_terminal_path(tcx, body, move_data, move_path_index) {
      .                       return;
      .                   }
      .           
 30,020 ( 0.01%)          let mut next_child_index = move_data.move_paths[move_path_index].first_child;
 64,137 ( 0.02%)          while let Some(child_index) = next_child_index {
  8,556 ( 0.00%)              on_all_children_bits(tcx, body, move_data, child_index, each_child);
  1,426 ( 0.00%)              next_child_index = move_data.move_paths[child_index].next_sibling;
      .                   }
253,974 ( 0.07%)      }
188,620 ( 0.05%)      on_all_children_bits(tcx, body, move_data, move_path_index, &mut each_child);
      .           }
      .           
      .           pub fn on_all_drop_children_bits<'tcx, F>(
      .               tcx: TyCtxt<'tcx>,
      .               body: &Body<'tcx>,
      .               ctxt: &MoveDataParamEnv<'tcx>,
      .               path: MovePathIndex,
      .               mut each_child: F,
-- line 146 ----------------------------------------
-- line 156 ----------------------------------------
      .                   if erased_ty.needs_drop(tcx, ctxt.param_env) {
      .                       each_child(child);
      .                   } else {
      .                       debug!("on_all_drop_children_bits - skipping")
      .                   }
      .               })
      .           }
      .           
  2,823 ( 0.00%)  pub fn drop_flag_effects_for_function_entry<'tcx, F>(
      .               tcx: TyCtxt<'tcx>,
      .               body: &Body<'tcx>,
      .               ctxt: &MoveDataParamEnv<'tcx>,
      .               mut callback: F,
      .           ) where
      .               F: FnMut(MovePathIndex, DropFlagState),
      .           {
      .               let move_data = &ctxt.move_data;
    254 ( 0.00%)      for arg in body.args_iter() {
    268 ( 0.00%)          let place = mir::Place::from(arg);
    402 ( 0.00%)          let lookup_result = move_data.rev_lookup.find(place.as_ref());
      .                   on_lookup_result_bits(tcx, body, move_data, lookup_result, |mpi| {
    134 ( 0.00%)              callback(mpi, DropFlagState::Present)
      .                   });
      .               }
  2,032 ( 0.00%)  }
      .           
388,044 ( 0.10%)  pub fn drop_flag_effects_for_location<'tcx, F>(
      .               tcx: TyCtxt<'tcx>,
      .               body: &Body<'tcx>,
      .               ctxt: &MoveDataParamEnv<'tcx>,
      .               loc: Location,
      .               mut callback: F,
      .           ) where
      .               F: FnMut(MovePathIndex, DropFlagState),
      .           {
      .               let move_data = &ctxt.move_data;
      .               debug!("drop_flag_effects_for_location({:?})", loc);
      .           
      .               // first, move out of the RHS
 26,130 ( 0.01%)      for mi in &move_data.loc_map[loc] {
 75,795 ( 0.02%)          let path = mi.move_path_index(move_data);
      .                   debug!("moving out of path {:?}", move_data.move_paths[path]);
      .           
 19,284 ( 0.00%)          on_all_children_bits(tcx, body, move_data, path, |mpi| callback(mpi, DropFlagState::Absent))
      .               }
      .           
      .               debug!("drop_flag_effects: assignment for location({:?})", loc);
      .           
 12,308 ( 0.00%)      for_location_inits(tcx, body, move_data, loc, |mpi| callback(mpi, DropFlagState::Present));
275,248 ( 0.07%)  }
      .           
      .           pub fn for_location_inits<'tcx, F>(
      .               tcx: TyCtxt<'tcx>,
      .               body: &Body<'tcx>,
      .               move_data: &MoveData<'tcx>,
      .               loc: Location,
      .               mut callback: F,
      .           ) where
      .               F: FnMut(MovePathIndex),
      .           {
 26,130 ( 0.01%)      for ii in &move_data.init_loc_map[loc] {
 46,288 ( 0.01%)          let init = move_data.inits[*ii];
 24,524 ( 0.01%)          match init.kind {
      .                       InitKind::Deep => {
      .                           let path = init.path;
      .           
      .                           on_all_children_bits(tcx, body, move_data, path, &mut callback)
      .                       }
      .                       InitKind::Shallow => {
      .                           let mpi = init.path;
      .                           callback(mpi);
-- line 226 ----------------------------------------
-- line 230 ----------------------------------------
      .               }
      .           }
      .           
      .           /// Calls `handle_inactive_variant` for each descendant move path of `enum_place` that contains a
      .           /// `Downcast` to a variant besides the `active_variant`.
      .           ///
      .           /// NOTE: If there are no move paths corresponding to an inactive variant,
      .           /// `handle_inactive_variant` will not be called for that variant.
    192 ( 0.00%)  pub(crate) fn on_all_inactive_variants<'tcx>(
      .               tcx: TyCtxt<'tcx>,
      .               body: &mir::Body<'tcx>,
      .               move_data: &MoveData<'tcx>,
      .               enum_place: mir::Place<'tcx>,
      .               active_variant: VariantIdx,
      .               mut handle_inactive_variant: impl FnMut(MovePathIndex),
      .           ) {
     80 ( 0.00%)      let enum_mpi = match move_data.rev_lookup.find(enum_place.as_ref()) {
      .                   LookupResult::Exact(mpi) => mpi,
      .                   LookupResult::Parent(_) => return,
      .               };
      .           
      .               let enum_path = &move_data.move_paths[enum_mpi];
     48 ( 0.00%)      for (variant_mpi, variant_path) in enum_path.children(&move_data.move_paths) {
      .                   // Because of the way we build the `MoveData` tree, each child should have exactly one more
      .                   // projection than `enum_place`. This additional projection must be a downcast since the
      .                   // base is an enum.
      .                   let (downcast, base_proj) = variant_path.place.projection.split_last().unwrap();
      .                   assert_eq!(enum_place.projection.len(), base_proj.len());
      .           
      .                   let variant_idx = match *downcast {
      .                       mir::ProjectionElem::Downcast(_, idx) => idx,
-- line 260 ----------------------------------------
-- line 262 ----------------------------------------
      .                   };
      .           
      .                   if variant_idx != active_variant {
      .                       on_all_children_bits(tcx, body, move_data, variant_mpi, |mpi| {
      .                           handle_inactive_variant(mpi)
      .                       });
      .                   }
      .               }
    128 ( 0.00%)  }

178,426 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_dataflow/src/drop_flag_effects.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/../../stdarch/crates/core_arch/src/x86/sse2.rs
--------------------------------------------------------------------------------
Ir                 

-- line 94 ----------------------------------------
        .           /// Adds packed 32-bit integers in `a` and `b`.
        .           ///
        .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_add_epi32)
        .           #[inline]
        .           #[target_feature(enable = "sse2")]
        .           #[cfg_attr(test, assert_instr(paddd))]
        .           #[stable(feature = "simd_x86", since = "1.27.0")]
        .           pub unsafe fn _mm_add_epi32(a: __m128i, b: __m128i) -> __m128i {
       17 ( 0.00%)      transmute(simd_add(a.as_i32x4(), b.as_i32x4()))
        .           }
        .           
        .           /// Adds packed 64-bit integers in `a` and `b`.
        .           ///
        .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_add_epi64)
        .           #[inline]
        .           #[target_feature(enable = "sse2")]
        .           #[cfg_attr(test, assert_instr(paddq))]
-- line 110 ----------------------------------------
-- line 790 ----------------------------------------
        .           /// Compares packed 8-bit integers in `a` and `b` for equality.
        .           ///
        .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_cmpeq_epi8)
        .           #[inline]
        .           #[target_feature(enable = "sse2")]
        .           #[cfg_attr(test, assert_instr(pcmpeqb))]
        .           #[stable(feature = "simd_x86", since = "1.27.0")]
        .           pub unsafe fn _mm_cmpeq_epi8(a: __m128i, b: __m128i) -> __m128i {
   71,755 ( 0.02%)      transmute::<i8x16, _>(simd_eq(a.as_i8x16(), b.as_i8x16()))
        .           }
        .           
        .           /// Compares packed 16-bit integers in `a` and `b` for equality.
        .           ///
        .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_cmpeq_epi16)
        .           #[inline]
        .           #[target_feature(enable = "sse2")]
        .           #[cfg_attr(test, assert_instr(pcmpeqw))]
-- line 806 ----------------------------------------
-- line 856 ----------------------------------------
        .           /// Compares packed 8-bit integers in `a` and `b` for less-than.
        .           ///
        .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_cmplt_epi8)
        .           #[inline]
        .           #[target_feature(enable = "sse2")]
        .           #[cfg_attr(test, assert_instr(pcmpgtb))]
        .           #[stable(feature = "simd_x86", since = "1.27.0")]
        .           pub unsafe fn _mm_cmplt_epi8(a: __m128i, b: __m128i) -> __m128i {
   10,426 ( 0.00%)      transmute::<i8x16, _>(simd_lt(a.as_i8x16(), b.as_i8x16()))
        .           }
        .           
        .           /// Compares packed 16-bit integers in `a` and `b` for less-than.
        .           ///
        .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_cmplt_epi16)
        .           #[inline]
        .           #[target_feature(enable = "sse2")]
        .           #[cfg_attr(test, assert_instr(pcmpgtw))]
-- line 872 ----------------------------------------
-- line 1174 ----------------------------------------
        .           /// `mem_addr` must be aligned on a 16-byte boundary.
        .           ///
        .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_load_si128)
        .           #[inline]
        .           #[target_feature(enable = "sse2")]
        .           #[cfg_attr(test, assert_instr(movaps))]
        .           #[stable(feature = "simd_x86", since = "1.27.0")]
        .           pub unsafe fn _mm_load_si128(mem_addr: *const __m128i) -> __m128i {
   28,387 ( 0.01%)      *mem_addr
        .           }
        .           
        .           /// Loads 128-bits of integer data from memory into a new vector.
        .           ///
        .           /// `mem_addr` does not need to be aligned on any particular boundary.
        .           ///
        .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_loadu_si128)
        .           #[inline]
-- line 1190 ----------------------------------------
-- line 1237 ----------------------------------------
        .           /// `mem_addr` does not need to be aligned on any particular boundary.
        .           ///
        .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_storeu_si128)
        .           #[inline]
        .           #[target_feature(enable = "sse2")]
        .           #[cfg_attr(test, assert_instr(movups))] // FIXME movdqu expected
        .           #[stable(feature = "simd_x86", since = "1.27.0")]
        .           pub unsafe fn _mm_storeu_si128(mem_addr: *mut __m128i, a: __m128i) {
       16 ( 0.00%)      storeudq(mem_addr as *mut i8, a);
        .           }
        .           
        .           /// Stores the lower 64-bit integer `a` to a memory location.
        .           ///
        .           /// `mem_addr` does not need to be aligned on any particular boundary.
        .           ///
        .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_storel_epi64)
        .           #[inline]
-- line 1253 ----------------------------------------
-- line 1373 ----------------------------------------
        .           /// Returns a mask of the most significant bit of each element in `a`.
        .           ///
        .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_movemask_epi8)
        .           #[inline]
        .           #[target_feature(enable = "sse2")]
        .           #[cfg_attr(test, assert_instr(pmovmskb))]
        .           #[stable(feature = "simd_x86", since = "1.27.0")]
        .           pub unsafe fn _mm_movemask_epi8(a: __m128i) -> i32 {
3,787,950 ( 0.98%)      pmovmskb(a.as_i8x16())
        .           }
        .           
        .           /// Shuffles 32-bit integers in `a` using the control in `IMM8`.
        .           ///
        .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_shuffle_epi32)
        .           #[inline]
        .           #[target_feature(enable = "sse2")]
        .           #[cfg_attr(test, assert_instr(pshufd, IMM8 = 9))]
-- line 1389 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/walk.rs
--------------------------------------------------------------------------------
Ir               

-- line 20 ----------------------------------------
      .           ///
      .           /// It's very easy to produce a deeply
      .           /// nested type tree with a lot of
      .           /// identical subtrees. In order to work efficiently
      .           /// in this situation walker only visits each type once.
      .           /// It maintains a set of visited types and
      .           /// skips any types that are already there.
      .           impl<'tcx> TypeWalker<'tcx> {
  7,820 ( 0.00%)      pub fn new(root: GenericArg<'tcx>) -> Self {
 31,280 ( 0.01%)          Self { stack: smallvec![root], last_subtree: 1, visited: SsoHashSet::new() }
  7,820 ( 0.00%)      }
      .           
      .               /// Skips the subtree corresponding to the last type
      .               /// returned by `next()`.
      .               ///
      .               /// Example: Imagine you are walking `Foo<Bar<i32>, usize>`.
      .               ///
      .               /// ```
      .               /// let mut iter: TypeWalker = ...;
-- line 38 ----------------------------------------
-- line 44 ----------------------------------------
      .               pub fn skip_current_subtree(&mut self) {
      .                   self.stack.truncate(self.last_subtree);
      .               }
      .           }
      .           
      .           impl<'tcx> Iterator for TypeWalker<'tcx> {
      .               type Item = GenericArg<'tcx>;
      .           
173,070 ( 0.04%)      fn next(&mut self) -> Option<GenericArg<'tcx>> {
      .                   debug!("next(): stack={:?}", self.stack);
      .                   loop {
 24,660 ( 0.01%)              let next = self.stack.pop()?;
 12,330 ( 0.00%)              self.last_subtree = self.stack.len();
 24,660 ( 0.01%)              if self.visited.insert(next) {
 34,230 ( 0.01%)                  push_inner(&mut self.stack, next);
      .                           debug!("next: stack={:?}", self.stack);
      .                           return Some(next);
      .                       }
      .                   }
134,610 ( 0.03%)      }
      .           }
      .           
      .           impl<'tcx> GenericArg<'tcx> {
      .               /// Iterator that walks `self` and any types reachable from
      .               /// `self`, in depth-first order. Note that just walks the types
      .               /// that appear in `self`, it does not descend into the fields of
      .               /// structs or variants. For example:
      .               ///
      .               /// ```text
      .               /// isize => { isize }
      .               /// Foo<Bar<isize>> => { Foo<Bar<isize>>, Bar<isize>, isize }
      .               /// [isize] => { [isize], isize }
      .               /// ```
  5,452 ( 0.00%)      pub fn walk(self) -> TypeWalker<'tcx> {
  2,726 ( 0.00%)          TypeWalker::new(self)
  8,178 ( 0.00%)      }
      .           
      .               /// Iterator that walks the immediate children of `self`. Hence
      .               /// `Foo<Bar<i32>, u32>` yields the sequence `[Bar<i32>, u32]`
      .               /// (but not `i32`, like `walk`).
      .               ///
      .               /// Iterator only walks items once.
      .               /// It accepts visited set, updates it with all visited types
      .               /// and skips any types that are already there.
  4,960 ( 0.00%)      pub fn walk_shallow(
      .                   self,
      .                   visited: &mut SsoHashSet<GenericArg<'tcx>>,
      .               ) -> impl Iterator<Item = GenericArg<'tcx>> {
      .                   let mut stack = SmallVec::new();
    992 ( 0.00%)          push_inner(&mut stack, self);
  1,984 ( 0.00%)          stack.retain(|a| visited.insert(*a));
 10,912 ( 0.00%)          stack.into_iter()
  4,960 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> super::TyS<'tcx> {
      .               /// Iterator that walks `self` and any types reachable from
      .               /// `self`, in depth-first order. Note that just walks the types
      .               /// that appear in `self`, it does not descend into the fields of
      .               /// structs or variants. For example:
      .               ///
      .               /// ```text
      .               /// isize => { isize }
      .               /// Foo<Bar<isize>> => { Foo<Bar<isize>>, Bar<isize>, isize }
      .               /// [isize] => { [isize], isize }
      .               /// ```
 10,188 ( 0.00%)      pub fn walk(&'tcx self) -> TypeWalker<'tcx> {
  5,094 ( 0.00%)          TypeWalker::new(self.into())
 15,282 ( 0.00%)      }
      .           }
      .           
      .           /// We push `GenericArg`s on the stack in reverse order so as to
      .           /// maintain a pre-order traversal. As of the time of this
      .           /// writing, the fact that the traversal is pre-order is not
      .           /// known to be significant to any code, but it seems like the
      .           /// natural order one would expect (basically, the order of the
      .           /// types as they are written).
 74,412 ( 0.02%)  fn push_inner<'tcx>(stack: &mut TypeWalkerStack<'tcx>, parent: GenericArg<'tcx>) {
      .               match parent.unpack() {
 59,345 ( 0.02%)          GenericArgKind::Type(parent_ty) => match *parent_ty.kind() {
      .                       ty::Bool
      .                       | ty::Char
      .                       | ty::Int(_)
      .                       | ty::Uint(_)
      .                       | ty::Float(_)
      .                       | ty::Str
      .                       | ty::Infer(_)
      .                       | ty::Param(_)
      .                       | ty::Never
      .                       | ty::Error(_)
      .                       | ty::Placeholder(..)
      .                       | ty::Bound(..)
      .                       | ty::Foreign(..) => {}
      .           
     78 ( 0.00%)              ty::Array(ty, len) => {
    117 ( 0.00%)                  stack.push(len.into());
      .                           stack.push(ty.into());
      .                       }
      .                       ty::Slice(ty) => {
      .                           stack.push(ty.into());
      .                       }
      .                       ty::RawPtr(mt) => {
      .                           stack.push(mt.ty.into());
      .                       }
    994 ( 0.00%)              ty::Ref(lt, ty, _) => {
    994 ( 0.00%)                  stack.push(ty.into());
      .                           stack.push(lt.into());
      .                       }
      .                       ty::Projection(data) => {
      .                           stack.extend(data.substs.iter().rev());
      .                       }
      .                       ty::Dynamic(obj, lt) => {
      .                           stack.push(lt.into());
      .                           stack.extend(obj.iter().rev().flat_map(|predicate| {
-- line 157 ----------------------------------------
-- line 170 ----------------------------------------
      .                                   ty::Term::Const(ct) => ct.into(),
      .                               }))
      .                           }));
      .                       }
      .                       ty::Adt(_, substs)
      .                       | ty::Opaque(_, substs)
      .                       | ty::Closure(_, substs)
      .                       | ty::Generator(_, substs, _)
  1,185 ( 0.00%)              | ty::Tuple(substs)
      .                       | ty::FnDef(_, substs) => {
      .                           stack.extend(substs.iter().rev());
      .                       }
      .                       ty::GeneratorWitness(ts) => {
      .                           stack.extend(ts.skip_binder().iter().rev().map(|ty| ty.into()));
      .                       }
  1,060 ( 0.00%)              ty::FnPtr(sig) => {
  3,710 ( 0.00%)                  stack.push(sig.skip_binder().output().into());
  4,240 ( 0.00%)                  stack.extend(sig.skip_binder().inputs().iter().copied().rev().map(|ty| ty.into()));
      .                       }
      .                   },
      .                   GenericArgKind::Lifetime(_) => {}
      .                   GenericArgKind::Const(parent_ct) => {
      .                       stack.push(parent_ct.ty.into());
     80 ( 0.00%)              match parent_ct.val {
      .                           ty::ConstKind::Infer(_)
      .                           | ty::ConstKind::Param(_)
      .                           | ty::ConstKind::Placeholder(_)
      .                           | ty::ConstKind::Bound(..)
      .                           | ty::ConstKind::Value(_)
      .                           | ty::ConstKind::Error(_) => {}
      .           
      .                           ty::ConstKind::Unevaluated(ct) => {
      .                               stack.extend(ct.substs.iter().rev());
      .                           }
      .                       }
      .                   }
      .               }
 49,915 ( 0.01%)  }

 26,333 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/walk.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/undo_log.rs
--------------------------------------------------------------------------------
Ir               

-- line 28 ----------------------------------------
      .               PushRegionObligation,
      .           }
      .           
      .           macro_rules! impl_from {
      .               ($($ctor: ident ($ty: ty),)*) => {
      .                   $(
      .                   impl<'tcx> From<$ty> for UndoLog<'tcx> {
      .                       fn from(x: $ty) -> Self {
    383 ( 0.00%)                  UndoLog::$ctor(x.into())
      .                       }
      .                   }
      .                   )*
      .               }
      .           }
      .           
      .           // Upcast from a single kind of "undoable action" to the general enum
      .           impl_from! {
-- line 44 ----------------------------------------
-- line 57 ----------------------------------------
      .               ConstUnificationTable(sv::UndoLog<ut::Delegate<ty::ConstVid<'tcx>>>),
      .           
      .               RegionUnificationTable(sv::UndoLog<ut::Delegate<RegionVidKey<'tcx>>>),
      .               ProjectionCache(traits::UndoLog<'tcx>),
      .           }
      .           
      .           /// The Rollback trait defines how to rollback a particular action.
      .           impl<'tcx> Rollback<UndoLog<'tcx>> for InferCtxtInner<'tcx> {
 67,710 ( 0.02%)      fn reverse(&mut self, undo: UndoLog<'tcx>) {
112,850 ( 0.03%)          match undo {
192,290 ( 0.05%)              UndoLog::TypeVariables(undo) => self.type_variable_storage.reverse(undo),
    118 ( 0.00%)              UndoLog::ConstUnificationTable(undo) => self.const_unification_storage.reverse(undo),
    560 ( 0.00%)              UndoLog::IntUnificationTable(undo) => self.int_unification_storage.reverse(undo),
      .                       UndoLog::FloatUnificationTable(undo) => self.float_unification_storage.reverse(undo),
      .                       UndoLog::RegionConstraintCollector(undo) => {
 10,913 ( 0.00%)                  self.region_constraint_storage.as_mut().unwrap().reverse(undo)
      .                       }
      .                       UndoLog::RegionUnificationTable(undo) => {
  2,704 ( 0.00%)                  self.region_constraint_storage.as_mut().unwrap().unification_table.reverse(undo)
      .                       }
      .                       UndoLog::ProjectionCache(undo) => self.projection_cache.reverse(undo),
      .                       UndoLog::PushRegionObligation => {
      .                           self.region_obligations.pop();
      .                       }
      .                   }
 90,280 ( 0.02%)      }
      .           }
      .           
      .           /// The combined undo log for all the various unification tables. For each change to the storage
      .           /// for any kind of inference variable, we record an UndoLog entry in the vector here.
      .           pub(crate) struct InferCtxtUndoLogs<'tcx> {
      .               logs: Vec<UndoLog<'tcx>>,
      .               num_open_snapshots: usize,
      .           }
      .           
      .           impl Default for InferCtxtUndoLogs<'_> {
      .               fn default() -> Self {
  4,148 ( 0.00%)          Self { logs: Default::default(), num_open_snapshots: Default::default() }
      .               }
      .           }
      .           
      .           /// The UndoLogs trait defines how we undo a particular kind of action (of type T). We can undo any
      .           /// action that is convertable into an UndoLog (per the From impls above).
      .           impl<'tcx, T> UndoLogs<T> for InferCtxtUndoLogs<'tcx>
      .           where
      .               UndoLog<'tcx>: From<T>,
-- line 102 ----------------------------------------
-- line 103 ----------------------------------------
      .           {
      .               #[inline]
      .               fn num_open_snapshots(&self) -> usize {
      .                   self.num_open_snapshots
      .               }
      .           
      .               #[inline]
      .               fn push(&mut self, undo: T) {
  9,689 ( 0.00%)          if self.in_snapshot() {
  3,064 ( 0.00%)              self.logs.push(undo.into())
      .                   }
      .               }
      .           
      .               fn clear(&mut self) {
      .                   self.logs.clear();
      .                   self.num_open_snapshots = 0;
      .               }
      .           
-- line 120 ----------------------------------------
-- line 125 ----------------------------------------
      .               {
      .                   if self.in_snapshot() {
      .                       self.logs.extend(undos.into_iter().map(UndoLog::from))
      .                   }
      .               }
      .           }
      .           
      .           impl<'tcx> InferCtxtInner<'tcx> {
 51,924 ( 0.01%)      pub fn rollback_to(&mut self, snapshot: Snapshot<'tcx>) {
      .                   debug!("rollback_to({})", snapshot.undo_len);
      .                   self.undo_log.assert_open_snapshot(&snapshot);
      .           
 85,018 ( 0.02%)          while self.undo_log.logs.len() > snapshot.undo_len {
      .                       let undo = self.undo_log.logs.pop().unwrap();
270,840 ( 0.07%)              self.reverse(undo);
      .                   }
      .           
 21,460 ( 0.01%)          if self.undo_log.num_open_snapshots == 1 {
      .                       // The root snapshot. It's safe to clear the undo log because
      .                       // there's no snapshot further out that we might need to roll back
      .                       // to.
  3,682 ( 0.00%)              assert!(snapshot.undo_len == 0);
      .                       self.undo_log.logs.clear();
      .                   }
      .           
 27,803 ( 0.01%)          self.undo_log.num_open_snapshots -= 1;
 60,578 ( 0.02%)      }
      .           
      .               pub fn commit(&mut self, snapshot: Snapshot<'tcx>) {
      .                   debug!("commit({})", snapshot.undo_len);
      .           
 60,024 ( 0.02%)          if self.undo_log.num_open_snapshots == 1 {
      .                       // The root snapshot. It's safe to clear the undo log because
      .                       // there's no snapshot further out that we might need to roll back
      .                       // to.
 12,268 ( 0.00%)              assert!(snapshot.undo_len == 0);
      .                       self.undo_log.logs.clear();
      .                   }
      .           
 66,158 ( 0.02%)          self.undo_log.num_open_snapshots -= 1;
      .               }
      .           }
      .           
      .           impl<'tcx> InferCtxtUndoLogs<'tcx> {
      .               pub fn start_snapshot(&mut self) -> Snapshot<'tcx> {
114,648 ( 0.03%)          self.num_open_snapshots += 1;
      .                   Snapshot { undo_len: self.logs.len(), _marker: PhantomData }
      .               }
      .           
      .               pub(crate) fn region_constraints_in_snapshot(
      .                   &self,
      .                   s: &Snapshot<'tcx>,
      .               ) -> impl Iterator<Item = &'_ region_constraints::UndoLog<'tcx>> + Clone {
  2,606 ( 0.00%)          self.logs[s.undo_len..].iter().filter_map(|log| match log {
      .                       UndoLog::RegionConstraintCollector(log) => Some(log),
      .                       _ => None,
      .                   })
      .               }
      .           
      .               pub(crate) fn region_constraints(
      .                   &self,
      .               ) -> impl Iterator<Item = &'_ region_constraints::UndoLog<'tcx>> + Clone {
-- line 186 ----------------------------------------
-- line 187 ----------------------------------------
      .                   self.logs.iter().filter_map(|log| match log {
      .                       UndoLog::RegionConstraintCollector(log) => Some(log),
      .                       _ => None,
      .                   })
      .               }
      .           
      .               fn assert_open_snapshot(&self, snapshot: &Snapshot<'tcx>) {
      .                   // Failures here may indicate a failure to follow a stack discipline.
 25,962 ( 0.01%)          assert!(self.logs.len() >= snapshot.undo_len);
 25,962 ( 0.01%)          assert!(self.num_open_snapshots > 0);
      .               }
      .           }
      .           
      .           impl<'tcx> std::ops::Index<usize> for InferCtxtUndoLogs<'tcx> {
      .               type Output = UndoLog<'tcx>;
      .           
      .               fn index(&self, key: usize) -> &Self::Output {
      .                   &self.logs[key]
-- line 204 ----------------------------------------

 38,138 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/undo_log.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/freshen.rs
--------------------------------------------------------------------------------
Ir               

-- line 47 ----------------------------------------
      .               const_freshen_count: u32,
      .               ty_freshen_map: FxHashMap<ty::InferTy, Ty<'tcx>>,
      .               const_freshen_map: FxHashMap<ty::InferConst<'tcx>, &'tcx ty::Const<'tcx>>,
      .               keep_static: bool,
      .           }
      .           
      .           impl<'a, 'tcx> TypeFreshener<'a, 'tcx> {
      .               pub fn new(infcx: &'a InferCtxt<'a, 'tcx>, keep_static: bool) -> TypeFreshener<'a, 'tcx> {
 91,930 ( 0.02%)          TypeFreshener {
      .                       infcx,
      .                       ty_freshen_count: 0,
      .                       const_freshen_count: 0,
      .                       ty_freshen_map: Default::default(),
      .                       const_freshen_map: Default::default(),
      .                       keep_static,
      .                   }
      .               }
      .           
 63,040 ( 0.02%)      fn freshen_ty<F>(
      .                   &mut self,
      .                   opt_ty: Option<Ty<'tcx>>,
      .                   key: ty::InferTy,
      .                   freshener: F,
      .               ) -> Ty<'tcx>
      .               where
      .                   F: FnOnce(u32) -> ty::InferTy,
      .               {
 15,760 ( 0.00%)          if let Some(ty) = opt_ty {
      .                       return ty.fold_with(self);
      .                   }
      .           
  6,432 ( 0.00%)          match self.ty_freshen_map.entry(key) {
    384 ( 0.00%)              Entry::Occupied(entry) => *entry.get(),
      .                       Entry::Vacant(entry) => {
  2,832 ( 0.00%)                  let index = self.ty_freshen_count;
 11,328 ( 0.00%)                  self.ty_freshen_count += 1;
  5,664 ( 0.00%)                  let t = self.infcx.tcx.mk_ty_infer(freshener(index));
      .                           entry.insert(t);
      .                           t
      .                       }
      .                   }
 28,944 ( 0.01%)      }
      .           
      .               fn freshen_const<F>(
      .                   &mut self,
      .                   opt_ct: Option<&'tcx ty::Const<'tcx>>,
      .                   key: ty::InferConst<'tcx>,
      .                   freshener: F,
      .                   ty: Ty<'tcx>,
      .               ) -> &'tcx ty::Const<'tcx>
-- line 96 ----------------------------------------
-- line 111 ----------------------------------------
      .                           ct
      .                       }
      .                   }
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> TypeFolder<'tcx> for TypeFreshener<'a, 'tcx> {
      .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
 16,300 ( 0.00%)          self.infcx.tcx
  7,796 ( 0.00%)      }
      .           
      .               fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
  1,248 ( 0.00%)          match *r {
      .                       ty::ReLateBound(..) => {
      .                           // leave bound regions alone
      .                           r
      .                       }
      .           
      .                       ty::ReEarlyBound(..)
      .                       | ty::ReFree(_)
      .                       | ty::ReVar(_)
      .                       | ty::RePlaceholder(..)
      .                       | ty::ReEmpty(_)
      .                       | ty::ReErased => {
      .                           // replace all free regions with 'erased
      .                           self.tcx().lifetimes.re_erased
      .                       }
      .                       ty::ReStatic => {
     10 ( 0.00%)                  if self.keep_static {
      .                               r
      .                           } else {
      .                               self.tcx().lifetimes.re_erased
      .                           }
      .                       }
      .                   }
      .               }
      .           
123,516 ( 0.03%)      fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {
 61,758 ( 0.02%)          if !t.needs_infer() && !t.has_erasable_regions() {
      .                       return t;
      .                   }
      .           
      .                   let tcx = self.infcx.tcx;
      .           
 79,856 ( 0.02%)          match *t.kind() {
  7,330 ( 0.00%)              ty::Infer(ty::TyVar(v)) => {
 58,640 ( 0.02%)                  let opt_ty = self.infcx.inner.borrow_mut().type_variables().probe(v).known();
 65,970 ( 0.02%)                  self.freshen_ty(opt_ty, ty::TyVar(v), ty::FreshTy)
      .                       }
      .           
  2,200 ( 0.00%)              ty::Infer(ty::IntVar(v)) => self.freshen_ty(
  4,400 ( 0.00%)                  self.infcx
      .                               .inner
      .                               .borrow_mut()
      .                               .int_unification_table()
      .                               .probe_value(v)
      .                               .map(|v| v.to_type(tcx)),
      .                           ty::IntVar(v),
      .                           ty::FreshIntTy,
      .                       ),
-- line 170 ----------------------------------------
-- line 210 ----------------------------------------
      .                       | ty::Dynamic(..)
      .                       | ty::Never
      .                       | ty::Tuple(..)
      .                       | ty::Projection(..)
      .                       | ty::Foreign(..)
      .                       | ty::Param(..)
      .                       | ty::Closure(..)
      .                       | ty::GeneratorWitness(..)
  2,816 ( 0.00%)              | ty::Opaque(..) => t.super_fold_with(self),
      .           
      .                       ty::Placeholder(..) | ty::Bound(..) => bug!("unexpected type {:?}", t),
      .                   }
 90,328 ( 0.02%)      }
      .           
      .               fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
      .                   match ct.val {
      .                       ty::ConstKind::Infer(ty::InferConst::Var(v)) => {
      .                           let opt_ct = self
      .                               .infcx
      .                               .inner
      .                               .borrow_mut()
-- line 230 ----------------------------------------

 36,168 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/freshen.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_build/src/thir/cx/expr.rs
--------------------------------------------------------------------------------
Ir               

-- line 18 ----------------------------------------
      .           use rustc_middle::ty::{self, AdtKind, Ty, UpvarSubsts, UserType};
      .           use rustc_span::def_id::DefId;
      .           use rustc_span::Span;
      .           use rustc_target::abi::VariantIdx;
      .           
      .           impl<'tcx> Cx<'tcx> {
      .               crate fn mirror_expr(&mut self, expr: &'tcx hir::Expr<'tcx>) -> ExprId {
      .                   // `mirror_expr` is recursing very deep. Make sure the stack doesn't overflow.
 16,362 ( 0.00%)          ensure_sufficient_stack(|| self.mirror_expr_inner(expr))
      .               }
      .           
    254 ( 0.00%)      crate fn mirror_exprs(&mut self, exprs: &'tcx [hir::Expr<'tcx>]) -> Box<[ExprId]> {
  7,341 ( 0.00%)          exprs.iter().map(|expr| self.mirror_expr_inner(expr)).collect()
    508 ( 0.00%)      }
      .           
 45,324 ( 0.01%)      pub(super) fn mirror_expr_inner(&mut self, hir_expr: &'tcx hir::Expr<'tcx>) -> ExprId {
 35,252 ( 0.01%)          let temp_lifetime = self.region_scope_tree.temporary_scope(hir_expr.hir_id.local_id);
      .                   let expr_scope =
      .                       region::Scope { id: hir_expr.hir_id.local_id, data: region::ScopeData::Node };
      .           
      .                   debug!("Expr::make_mirror(): id={}, span={:?}", hir_expr.hir_id, hir_expr.span);
      .           
 20,144 ( 0.01%)          let mut expr = self.make_mirror_unadjusted(hir_expr);
      .           
 30,216 ( 0.01%)          let adjustment_span = match self.adjustment_span {
  1,792 ( 0.00%)              Some((hir_id, span)) if hir_id == hir_expr.hir_id => Some(span),
      .                       _ => None,
      .                   };
      .           
      .                   // Now apply adjustments, if any.
 20,144 ( 0.01%)          for adjustment in self.typeck_results.expr_adjustments(hir_expr) {
      .                       debug!("make_mirror: expr={:?} applying adjustment={:?}", expr, adjustment);
    380 ( 0.00%)              let span = expr.span;
    945 ( 0.00%)              expr =
  2,430 ( 0.00%)                  self.apply_adjustment(hir_expr, expr, adjustment, adjustment_span.unwrap_or(span));
      .                   }
      .           
      .                   // Next, wrap this up in the expr's scope.
 65,468 ( 0.02%)          expr = Expr {
      .                       temp_lifetime,
  4,941 ( 0.00%)              ty: expr.ty,
  5,036 ( 0.00%)              span: hir_expr.span,
      .                       kind: ExprKind::Scope {
      .                           region_scope: expr_scope,
 90,648 ( 0.02%)                  value: self.thir.exprs.push(expr),
 10,072 ( 0.00%)                  lint_level: LintLevel::Explicit(hir_expr.hir_id),
      .                       },
      .                   };
      .           
      .                   // Finally, create a destruction scope, if any.
 15,108 ( 0.00%)          if let Some(region_scope) =
 10,072 ( 0.00%)              self.region_scope_tree.opt_destruction_scope(hir_expr.hir_id.local_id)
      .                   {
  5,232 ( 0.00%)              expr = Expr {
      .                           temp_lifetime,
      .                           ty: expr.ty,
    436 ( 0.00%)                  span: hir_expr.span,
      .                           kind: ExprKind::Scope {
      .                               region_scope,
  6,104 ( 0.00%)                      value: self.thir.exprs.push(expr),
      .                               lint_level: LintLevel::Inherited,
      .                           },
      .                       };
      .                   }
      .           
      .                   // OK, all done!
110,792 ( 0.03%)          self.thir.exprs.push(expr)
 45,324 ( 0.01%)      }
      .           
      .               fn apply_adjustment(
      .                   &mut self,
      .                   hir_expr: &'tcx hir::Expr<'tcx>,
      .                   mut expr: Expr<'tcx>,
      .                   adjustment: &Adjustment<'tcx>,
      .                   mut span: Span,
      .               ) -> Expr<'tcx> {
    270 ( 0.00%)          let Expr { temp_lifetime, .. } = expr;
      .           
      .                   // Adjust the span from the block, to the last expression of the
      .                   // block. This is a better span when returning a mutable reference
      .                   // with too short a lifetime. The error message will use the span
      .                   // from the assignment to the return place, which should only point
      .                   // at the returned value, not the entire function body.
      .                   //
      .                   // fn return_short_lived<'a>(x: &'a mut i32) -> &'static mut i32 {
      .                   //      x
      .                   //   // ^ error message points at this expression.
      .                   // }
      .                   let mut adjust_span = |expr: &mut Expr<'tcx>| {
     94 ( 0.00%)              if let ExprKind::Block { body } = &expr.kind {
      .                           if let Some(last_expr) = body.expr {
      .                               span = self.thir[last_expr].span;
      .                               expr.span = span;
      .                           }
      .                       }
      .                   };
      .           
  1,153 ( 0.00%)          let kind = match adjustment.kind {
      .                       Adjust::Pointer(PointerCast::Unsize) => {
      .                           adjust_span(&mut expr);
    408 ( 0.00%)                  ExprKind::Pointer { cast: PointerCast::Unsize, source: self.thir.exprs.push(expr) }
      .                       }
     34 ( 0.00%)              Adjust::Pointer(cast) => ExprKind::Pointer { cast, source: self.thir.exprs.push(expr) },
    748 ( 0.00%)              Adjust::NeverToAny => ExprKind::NeverToAny { source: self.thir.exprs.push(expr) },
      .                       Adjust::Deref(None) => {
      .                           adjust_span(&mut expr);
    391 ( 0.00%)                  ExprKind::Deref { arg: self.thir.exprs.push(expr) }
      .                       }
      .                       Adjust::Deref(Some(deref)) => {
      .                           // We don't need to do call adjust_span here since
      .                           // deref coercions always start with a built-in deref.
      .                           let call = deref.method_call(self.tcx(), expr.ty);
      .           
      .                           expr = Expr {
      .                               temp_lifetime,
-- line 132 ----------------------------------------
-- line 139 ----------------------------------------
      .                                   arg: self.thir.exprs.push(expr),
      .                               },
      .                           };
      .           
      .                           let expr = Box::new([self.thir.exprs.push(expr)]);
      .           
      .                           self.overloaded_place(hir_expr, adjustment.target, Some(call), expr, deref.span)
      .                       }
    168 ( 0.00%)              Adjust::Borrow(AutoBorrow::Ref(_, m)) => ExprKind::Borrow {
      .                           borrow_kind: m.to_borrow_kind(),
    588 ( 0.00%)                  arg: self.thir.exprs.push(expr),
      .                       },
      .                       Adjust::Borrow(AutoBorrow::RawPtr(mutability)) => {
      .                           ExprKind::AddressOf { mutability, arg: self.thir.exprs.push(expr) }
      .                       }
      .                   };
      .           
  2,565 ( 0.00%)          Expr { temp_lifetime, ty: adjustment.target, span, kind }
      .               }
      .           
 50,360 ( 0.01%)      fn make_mirror_unadjusted(&mut self, expr: &'tcx hir::Expr<'tcx>) -> Expr<'tcx> {
 20,144 ( 0.01%)          let expr_ty = self.typeck_results().expr_ty(expr);
  5,036 ( 0.00%)          let expr_span = expr.span;
 25,180 ( 0.01%)          let temp_lifetime = self.region_scope_tree.temporary_scope(expr.hir_id.local_id);
      .           
 30,604 ( 0.01%)          let kind = match expr.kind {
      .                       // Here comes the interesting stuff:
    384 ( 0.00%)              hir::ExprKind::MethodCall(segment, ref args, fn_span) => {
      .                           // Rewrite a.b(c) into UFCS form like Trait::b(a, c)
    896 ( 0.00%)                  let expr = self.method_callee(expr, segment.ident.span, None);
      .                           // When we apply adjustments to the receiver, use the span of
      .                           // the overall method call for better diagnostics. args[0]
      .                           // is guaranteed to exist, since a method call always has a receiver.
    512 ( 0.00%)                  let old_adjustment_span = self.adjustment_span.replace((args[0].hir_id, expr_span));
      .                           tracing::info!("Using method span: {:?}", expr.span);
    128 ( 0.00%)                  let args = self.mirror_exprs(args);
    256 ( 0.00%)                  self.adjustment_span = old_adjustment_span;
    896 ( 0.00%)                  ExprKind::Call {
    128 ( 0.00%)                      ty: expr.ty,
  1,792 ( 0.00%)                      fun: self.thir.exprs.push(expr),
      .                               args,
      .                               from_hir_call: true,
      .                               fn_span,
      .                           }
      .                       }
      .           
      .                       hir::ExprKind::Call(ref fun, ref args) => {
    508 ( 0.00%)                  if self.typeck_results().is_method_call(expr) {
      .                               // The callee is something implementing Fn, FnMut, or FnOnce.
      .                               // Find the actual method implementation being called and
      .                               // build the appropriate UFCS call expression with the
      .                               // callee-object as expr parameter.
      .           
      .                               // rewrite f(u, v) into FnOnce::call_once(f, (u, v))
      .           
      .                               let method = self.method_callee(expr, fun.span, None);
-- line 194 ----------------------------------------
-- line 206 ----------------------------------------
      .                                   ty: method.ty,
      .                                   fun: self.thir.exprs.push(method),
      .                                   args: Box::new([self.mirror_expr(fun), tupled_args]),
      .                                   from_hir_call: true,
      .                                   fn_span: expr.span,
      .                               }
      .                           } else {
      .                               let adt_data =
    635 ( 0.00%)                          if let hir::ExprKind::Path(hir::QPath::Resolved(_, ref path)) = fun.kind {
      .                                       // Tuple-like ADTs are represented as ExprKind::Call. We convert them here.
    240 ( 0.00%)                              expr_ty.ty_adt_def().and_then(|adt_def| match path.res {
      .                                           Res::Def(DefKind::Ctor(_, CtorKind::Fn), ctor_id) => {
      .                                               Some((adt_def, adt_def.variant_index_with_ctor_id(ctor_id)))
      .                                           }
      .                                           Res::SelfCtor(..) => Some((adt_def, VariantIdx::new(0))),
      .                                           _ => None,
      .                                       })
      .                                   } else {
      .                                       None
      .                                   };
    226 ( 0.00%)                      if let Some((adt_def, index)) = adt_data {
      .                                   let substs = self.typeck_results().node_substs(fun.hir_id);
      .                                   let user_provided_types = self.typeck_results().user_provided_types();
      .                                   let user_ty =
      .                                       user_provided_types.get(fun.hir_id).copied().map(|mut u_ty| {
      .                                           if let UserType::TypeOf(ref mut did, _) = &mut u_ty.value {
      .                                               *did = adt_def.did;
      .                                           }
      .                                           u_ty
-- line 234 ----------------------------------------
-- line 247 ----------------------------------------
      .                                       adt_def,
      .                                       substs,
      .                                       variant_index: index,
      .                                       fields: field_refs,
      .                                       user_ty,
      .                                       base: None,
      .                                   }))
      .                               } else {
    508 ( 0.00%)                          ExprKind::Call {
    748 ( 0.00%)                              ty: self.typeck_results().node_type(fun.hir_id),
    127 ( 0.00%)                              fun: self.mirror_expr(fun),
    508 ( 0.00%)                              args: self.mirror_exprs(args),
      .                                       from_hir_call: true,
    127 ( 0.00%)                              fn_span: expr.span,
      .                                   }
      .                               }
      .                           }
      .                       }
      .           
      .                       hir::ExprKind::AddrOf(hir::BorrowKind::Ref, mutbl, ref arg) => {
     20 ( 0.00%)                  ExprKind::Borrow { borrow_kind: mutbl.to_borrow_kind(), arg: self.mirror_expr(arg) }
      .                       }
      .           
      .                       hir::ExprKind::AddrOf(hir::BorrowKind::Raw, mutability, ref arg) => {
      .                           ExprKind::AddressOf { mutability, arg: self.mirror_expr(arg) }
      .                       }
      .           
  2,996 ( 0.00%)              hir::ExprKind::Block(ref blk, _) => ExprKind::Block { body: self.mirror_block(blk) },
      .           
      .                       hir::ExprKind::Assign(ref lhs, ref rhs, _) => {
    546 ( 0.00%)                  ExprKind::Assign { lhs: self.mirror_expr(lhs), rhs: self.mirror_expr(rhs) }
      .                       }
      .           
     35 ( 0.00%)              hir::ExprKind::AssignOp(op, ref lhs, ref rhs) => {
    140 ( 0.00%)                  if self.typeck_results().is_method_call(expr) {
      .                               let lhs = self.mirror_expr(lhs);
      .                               let rhs = self.mirror_expr(rhs);
      .                               self.overloaded_operator(expr, Box::new([lhs, rhs]))
      .                           } else {
    175 ( 0.00%)                      ExprKind::AssignOp {
    105 ( 0.00%)                          op: bin_op(op.node),
     35 ( 0.00%)                          lhs: self.mirror_expr(lhs),
     35 ( 0.00%)                          rhs: self.mirror_expr(rhs),
      .                               }
      .                           }
      .                       }
      .           
  1,814 ( 0.00%)              hir::ExprKind::Lit(ref lit) => ExprKind::Literal {
  7,256 ( 0.00%)                  literal: self.const_eval_literal(&lit.node, expr_ty, lit.span, false),
      .                           user_ty: None,
      .                           const_id: None,
      .                       },
      .           
    441 ( 0.00%)              hir::ExprKind::Binary(op, ref lhs, ref rhs) => {
  1,764 ( 0.00%)                  if self.typeck_results().is_method_call(expr) {
      .                               let lhs = self.mirror_expr(lhs);
      .                               let rhs = self.mirror_expr(rhs);
      .                               self.overloaded_operator(expr, Box::new([lhs, rhs]))
      .                           } else {
      .                               // FIXME overflow
  1,732 ( 0.00%)                      match op.node {
     64 ( 0.00%)                          hir::BinOpKind::And => ExprKind::LogicalOp {
      .                                       op: LogicalOp::And,
     16 ( 0.00%)                              lhs: self.mirror_expr(lhs),
     16 ( 0.00%)                              rhs: self.mirror_expr(rhs),
      .                                   },
     40 ( 0.00%)                          hir::BinOpKind::Or => ExprKind::LogicalOp {
      .                                       op: LogicalOp::Or,
     10 ( 0.00%)                              lhs: self.mirror_expr(lhs),
     10 ( 0.00%)                              rhs: self.mirror_expr(rhs),
      .                                   },
      .                                   _ => {
  1,660 ( 0.00%)                              let op = bin_op(op.node);
  2,075 ( 0.00%)                              ExprKind::Binary {
      .                                           op,
    415 ( 0.00%)                                  lhs: self.mirror_expr(lhs),
    415 ( 0.00%)                                  rhs: self.mirror_expr(rhs),
      .                                       }
      .                                   }
      .                               }
      .                           }
      .                       }
      .           
      .                       hir::ExprKind::Index(ref lhs, ref index) => {
      .                           if self.typeck_results().is_method_call(expr) {
-- line 331 ----------------------------------------
-- line 333 ----------------------------------------
      .                               let index = self.mirror_expr(index);
      .                               self.overloaded_place(expr, expr_ty, None, Box::new([lhs, index]), expr.span)
      .                           } else {
      .                               ExprKind::Index { lhs: self.mirror_expr(lhs), index: self.mirror_expr(index) }
      .                           }
      .                       }
      .           
      .                       hir::ExprKind::Unary(hir::UnOp::Deref, ref arg) => {
    175 ( 0.00%)                  if self.typeck_results().is_method_call(expr) {
      .                               let arg = self.mirror_expr(arg);
      .                               self.overloaded_place(expr, expr_ty, None, Box::new([arg]), expr.span)
      .                           } else {
    105 ( 0.00%)                      ExprKind::Deref { arg: self.mirror_expr(arg) }
      .                           }
      .                       }
      .           
      .                       hir::ExprKind::Unary(hir::UnOp::Not, ref arg) => {
    145 ( 0.00%)                  if self.typeck_results().is_method_call(expr) {
      .                               let arg = self.mirror_expr(arg);
      .                               self.overloaded_operator(expr, Box::new([arg]))
      .                           } else {
     87 ( 0.00%)                      ExprKind::Unary { op: UnOp::Not, arg: self.mirror_expr(arg) }
      .                           }
      .                       }
      .           
      .                       hir::ExprKind::Unary(hir::UnOp::Neg, ref arg) => {
    104 ( 0.00%)                  if self.typeck_results().is_method_call(expr) {
      .                               let arg = self.mirror_expr(arg);
      .                               self.overloaded_operator(expr, Box::new([arg]))
     94 ( 0.00%)                  } else if let hir::ExprKind::Lit(ref lit) = arg.kind {
      .                               ExprKind::Literal {
     80 ( 0.00%)                          literal: self.const_eval_literal(&lit.node, expr_ty, lit.span, true),
      .                                   user_ty: None,
      .                                   const_id: None,
      .                               }
      .                           } else {
     30 ( 0.00%)                      ExprKind::Unary { op: UnOp::Neg, arg: self.mirror_expr(arg) }
      .                           }
      .                       }
      .           
     14 ( 0.00%)              hir::ExprKind::Struct(ref qpath, ref fields, ref base) => match expr_ty.kind() {
     14 ( 0.00%)                  ty::Adt(adt, substs) => match adt.adt_kind() {
      .                               AdtKind::Struct | AdtKind::Union => {
     21 ( 0.00%)                          let user_provided_types = self.typeck_results().user_provided_types();
     28 ( 0.00%)                          let user_ty = user_provided_types.get(expr.hir_id).copied();
      .                                   debug!("make_mirror_unadjusted: (struct/union) user_ty={:?}", user_ty);
     28 ( 0.00%)                          ExprKind::Adt(Box::new(Adt {
     14 ( 0.00%)                              adt_def: adt,
      .                                       variant_index: VariantIdx::new(0),
     14 ( 0.00%)                              substs,
      .                                       user_ty,
     14 ( 0.00%)                              fields: self.field_refs(fields),
     28 ( 0.00%)                              base: base.as_ref().map(|base| FruInfo {
      .                                           base: self.mirror_expr(base),
      .                                           field_types: self.typeck_results().fru_field_types()[expr.hir_id]
      .                                               .iter()
      .                                               .copied()
      .                                               .collect(),
      .                                       }),
      .                                   }))
      .                               }
-- line 393 ----------------------------------------
-- line 454 ----------------------------------------
      .                                   })
      .                                   .collect(),
      .                               None => Vec::new(),
      .                           };
      .           
      .                           ExprKind::Closure { closure_id: def_id, substs, upvars, movability, fake_reads }
      .                       }
      .           
    938 ( 0.00%)              hir::ExprKind::Path(ref qpath) => {
  3,752 ( 0.00%)                  let res = self.typeck_results().qpath_res(qpath, expr.hir_id);
  3,752 ( 0.00%)                  self.convert_path_expr(expr, res)
      .                       }
      .           
      .                       hir::ExprKind::InlineAsm(ref asm) => ExprKind::InlineAsm {
      .                           template: asm.template,
      .                           operands: asm
      .                               .operands
      .                               .iter()
      .                               .map(|(op, _op_sp)| {
-- line 472 ----------------------------------------
-- line 572 ----------------------------------------
      .                       hir::ExprKind::ConstBlock(ref anon_const) => {
      .                           let anon_const_def_id = self.tcx.hir().local_def_id(anon_const.hir_id);
      .                           let value = ty::Const::from_inline_const(self.tcx, anon_const_def_id);
      .           
      .                           ExprKind::ConstBlock { value }
      .                       }
      .                       // Now comes the rote stuff:
      .                       hir::ExprKind::Repeat(ref v, _) => {
      3 ( 0.00%)                  let ty = self.typeck_results().expr_ty(expr);
      2 ( 0.00%)                  let count = match ty.kind() {
      .                               ty::Array(_, ct) => ct,
      .                               _ => span_bug!(expr.span, "unexpected repeat expr ty: {:?}", ty),
      .                           };
      .           
      6 ( 0.00%)                  ExprKind::Repeat { value: self.mirror_expr(v), count }
      .                       }
      .                       hir::ExprKind::Ret(ref v) => {
      6 ( 0.00%)                  ExprKind::Return { value: v.as_ref().map(|v| self.mirror_expr(v)) }
      .                       }
     39 ( 0.00%)              hir::ExprKind::Break(dest, ref value) => match dest.target_id {
     65 ( 0.00%)                  Ok(target_id) => ExprKind::Break {
      .                               label: region::Scope { id: target_id.local_id, data: region::ScopeData::Node },
      .                               value: value.as_ref().map(|value| self.mirror_expr(value)),
      .                           },
      .                           Err(err) => bug!("invalid loop id for break: {}", err),
      .                       },
      .                       hir::ExprKind::Continue(dest) => match dest.target_id {
      .                           Ok(loop_id) => ExprKind::Continue {
      .                               label: region::Scope { id: loop_id.local_id, data: region::ScopeData::Node },
      .                           },
      .                           Err(err) => bug!("invalid loop id for continue: {}", err),
      .                       },
      .                       hir::ExprKind::Let(let_expr) => ExprKind::Let {
      .                           expr: self.mirror_expr(let_expr.init),
      .                           pat: self.pattern_from_hir(let_expr.pat),
      .                       },
  1,463 ( 0.00%)              hir::ExprKind::If(cond, then, else_opt) => ExprKind::If {
      .                           if_then_scope: region::Scope {
    133 ( 0.00%)                      id: then.hir_id.local_id,
      .                               data: region::ScopeData::IfThen,
      .                           },
      .                           cond: self.mirror_expr(cond),
      .                           then: self.mirror_expr(then),
      .                           else_opt: else_opt.map(|el| self.mirror_expr(el)),
      .                       },
     40 ( 0.00%)              hir::ExprKind::Match(ref discr, ref arms, _) => ExprKind::Match {
      8 ( 0.00%)                  scrutinee: self.mirror_expr(discr),
     44 ( 0.00%)                  arms: arms.iter().map(|a| self.convert_arm(a)).collect(),
      .                       },
      .                       hir::ExprKind::Loop(ref body, ..) => {
     65 ( 0.00%)                  let block_ty = self.typeck_results().node_type(body.hir_id);
     78 ( 0.00%)                  let temp_lifetime = self.region_scope_tree.temporary_scope(body.hir_id.local_id);
     52 ( 0.00%)                  let block = self.mirror_block(body);
    195 ( 0.00%)                  let body = self.thir.exprs.push(Expr {
      .                               ty: block_ty,
      .                               temp_lifetime,
     13 ( 0.00%)                      span: block.span,
    104 ( 0.00%)                      kind: ExprKind::Block { body: block },
      .                           });
     39 ( 0.00%)                  ExprKind::Loop { body }
      .                       }
     84 ( 0.00%)              hir::ExprKind::Field(ref source, ..) => ExprKind::Field {
     21 ( 0.00%)                  lhs: self.mirror_expr(source),
    126 ( 0.00%)                  name: Field::new(self.tcx.field_index(expr.hir_id, self.typeck_results)),
      .                       },
      .                       hir::ExprKind::Cast(ref source, ref cast_ty) => {
      .                           // Check for a user-given type annotation on this `cast`
    580 ( 0.00%)                  let user_provided_types = self.typeck_results.user_provided_types();
    870 ( 0.00%)                  let user_ty = user_provided_types.get(cast_ty.hir_id);
      .           
      .                           debug!(
      .                               "cast({:?}) has ty w/ hir_id {:?} and user provided ty {:?}",
      .                               expr, cast_ty.hir_id, user_ty,
      .                           );
      .           
      .                           // Check to see if this cast is a "coercion cast", where the cast is actually done
      .                           // using a coercion (or is a no-op).
    870 ( 0.00%)                  let cast = if self.typeck_results().is_coercion_cast(source.hir_id) {
      .                               // Convert the lexpr to a vexpr.
      4 ( 0.00%)                      ExprKind::Use { source: self.mirror_expr(source) }
    423 ( 0.00%)                  } else if self.typeck_results().expr_ty(source).is_region_ptr() {
      .                               // Special cased so that we can type check that the element
      .                               // type of the source matches the pointed to type of the
      .                               // destination.
      .                               ExprKind::Pointer {
      .                                   source: self.mirror_expr(source),
      .                                   cast: PointerCast::ArrayToPointer,
      .                               }
      .                           } else {
-- line 660 ----------------------------------------
-- line 664 ----------------------------------------
      .                               // enum's layout (or its tag type) to compute it during const eval
      .                               // Example:
      .                               // enum Foo {
      .                               //     A,
      .                               //     B = A as isize + 4,
      .                               // }
      .                               // The correct solution would be to add symbolic computations to miri,
      .                               // so we wouldn't have to compute and store the actual value
    525 ( 0.00%)                      let var = if let hir::ExprKind::Path(ref qpath) = source.kind {
    612 ( 0.00%)                          let res = self.typeck_results().qpath_res(qpath, source.hir_id);
    714 ( 0.00%)                          self.typeck_results().node_type(source.hir_id).ty_adt_def().and_then(
      .                                       |adt_def| match res {
      .                                           Res::Def(
      .                                               DefKind::Ctor(CtorOf::Variant, CtorKind::Const),
      .                                               variant_ctor_id,
      .                                           ) => {
      .                                               let idx = adt_def.variant_index_with_ctor_id(variant_ctor_id);
      .                                               let (d, o) = adt_def.discriminant_def_for_variant(idx);
      .                                               use rustc_middle::ty::util::IntTypeExt;
-- line 682 ----------------------------------------
-- line 683 ----------------------------------------
      .                                               let ty = adt_def.repr.discr_type();
      .                                               let ty = ty.to_ty(self.tcx());
      .                                               Some((d, o, ty))
      .                                           }
      .                                           _ => None,
      .                                       },
      .                                   )
      .                               } else {
     78 ( 0.00%)                          None
      .                               };
      .           
    306 ( 0.00%)                      let source = if let Some((did, offset, var_ty)) = var {
      .                                   let mk_const = |literal| Expr {
      .                                       temp_lifetime,
      .                                       ty: var_ty,
      .                                       span: expr.span,
      .                                       kind: ExprKind::Literal { literal, user_ty: None, const_id: None },
      .                                   };
      .                                   let offset = self.thir.exprs.push(mk_const(ty::Const::from_bits(
      .                                       self.tcx,
-- line 702 ----------------------------------------
-- line 723 ----------------------------------------
      .                                               ty: var_ty,
      .                                               span: expr.span,
      .                                               kind: bin,
      .                                           })
      .                                       }
      .                                       None => offset,
      .                                   }
      .                               } else {
    102 ( 0.00%)                          self.mirror_expr(source)
      .                               };
      .           
      .                               ExprKind::Cast { source: source }
      .                           };
      .           
    290 ( 0.00%)                  if let Some(user_ty) = user_ty {
      .                               // NOTE: Creating a new Expr and wrapping a Cast inside of it may be
      .                               //       inefficient, revisit this when performance becomes an issue.
      .                               let cast_expr = self.thir.exprs.push(Expr {
      .                                   temp_lifetime,
      .                                   ty: expr_ty,
      .                                   span: expr.span,
      .                                   kind: cast,
      .                               });
      .                               debug!("make_mirror_unadjusted: (cast) user_ty={:?}", user_ty);
      .           
      .                               ExprKind::ValueTypeAscription { source: cast_expr, user_ty: Some(*user_ty) }
      .                           } else {
    580 ( 0.00%)                      cast
      .                           }
      .                       }
      .                       hir::ExprKind::Type(ref source, ref ty) => {
      .                           let user_provided_types = self.typeck_results.user_provided_types();
      .                           let user_ty = user_provided_types.get(ty.hir_id).copied();
      .                           debug!("make_mirror_unadjusted: (type) user_ty={:?}", user_ty);
      .                           let mirrored = self.mirror_expr(source);
      .                           if source.is_syntactic_place_expr() {
      .                               ExprKind::PlaceTypeAscription { source: mirrored, user_ty }
      .                           } else {
      .                               ExprKind::ValueTypeAscription { source: mirrored, user_ty }
      .                           }
      .                       }
      .                       hir::ExprKind::DropTemps(ref source) => {
    548 ( 0.00%)                  ExprKind::Use { source: self.mirror_expr(source) }
      .                       }
      .                       hir::ExprKind::Box(ref value) => ExprKind::Box { value: self.mirror_expr(value) },
      .                       hir::ExprKind::Array(ref fields) => {
     10 ( 0.00%)                  ExprKind::Array { fields: self.mirror_exprs(fields) }
      .                       }
  3,360 ( 0.00%)              hir::ExprKind::Tup(ref fields) => ExprKind::Tuple { fields: self.mirror_exprs(fields) },
      .           
      .                       hir::ExprKind::Yield(ref v, _) => ExprKind::Yield { value: self.mirror_expr(v) },
      .                       hir::ExprKind::Err => unreachable!(),
      .                   };
      .           
171,224 ( 0.04%)          Expr { temp_lifetime, ty: expr_ty, span: expr.span, kind }
 40,288 ( 0.01%)      }
      .           
  2,691 ( 0.00%)      fn user_substs_applied_to_res(
      .                   &mut self,
      .                   hir_id: hir::HirId,
      .                   res: Res,
      .               ) -> Option<ty::CanonicalUserType<'tcx>> {
      .                   debug!("user_substs_applied_to_res: res={:?}", res);
  1,794 ( 0.00%)          let user_provided_type = match res {
      .                       // A reference to something callable -- e.g., a fn, method, or
      .                       // a tuple-struct or tuple-variant. This has the type of a
      .                       // `Fn` but with the user-given substitutions.
      .                       Res::Def(DefKind::Fn, _)
      .                       | Res::Def(DefKind::AssocFn, _)
      .                       | Res::Def(DefKind::Ctor(_, CtorKind::Fn), _)
      .                       | Res::Def(DefKind::Const, _)
      .                       | Res::Def(DefKind::AssocConst, _) => {
  2,093 ( 0.00%)                  self.typeck_results().user_provided_types().get(hir_id).copied()
      .                       }
      .           
      .                       // A unit struct/variant which is used as a value (e.g.,
      .                       // `None`). This has the type of the enum/struct that defines
      .                       // this variant -- but with the substitutions given by the
      .                       // user.
      .                       Res::Def(DefKind::Ctor(_, CtorKind::Const), _) => {
      .                           self.user_substs_applied_to_ty_of_hir_id(hir_id)
-- line 803 ----------------------------------------
-- line 805 ----------------------------------------
      .           
      .                       // `Self` is used in expression as a tuple struct constructor or a unit struct constructor
      .                       Res::SelfCtor(_) => self.user_substs_applied_to_ty_of_hir_id(hir_id),
      .           
      .                       _ => bug!("user_substs_applied_to_res: unexpected res {:?} at {:?}", res, hir_id),
      .                   };
      .                   debug!("user_substs_applied_to_res: user_provided_type={:?}", user_provided_type);
      .                   user_provided_type
  1,794 ( 0.00%)      }
      .           
  1,664 ( 0.00%)      fn method_callee(
      .                   &mut self,
      .                   expr: &hir::Expr<'_>,
      .                   span: Span,
      .                   overloaded_callee: Option<(DefId, SubstsRef<'tcx>)>,
      .               ) -> Expr<'tcx> {
    768 ( 0.00%)          let temp_lifetime = self.region_scope_tree.temporary_scope(expr.hir_id.local_id);
  1,024 ( 0.00%)          let (def_id, substs, user_ty) = match overloaded_callee {
      .                       Some((def_id, substs)) => (def_id, substs, None),
      .                       None => {
      .                           let (kind, def_id) =
  1,152 ( 0.00%)                      self.typeck_results().type_dependent_def(expr.hir_id).unwrap_or_else(|| {
      .                                   span_bug!(expr.span, "no type-dependent def for method callee")
      .                               });
  1,920 ( 0.00%)                  let user_ty = self.user_substs_applied_to_res(expr.hir_id, Res::Def(kind, def_id));
      .                           debug!("method_callee: user_ty={:?}", user_ty);
  1,920 ( 0.00%)                  (def_id, self.typeck_results().node_substs(expr.hir_id), user_ty)
      .                       }
      .                   };
      .                   let ty = self.tcx().mk_fn_def(def_id, substs);
  1,664 ( 0.00%)          Expr {
      .                       temp_lifetime,
      .                       ty,
      .                       span,
      .                       kind: ExprKind::Literal {
      .                           literal: ty::Const::zero_sized(self.tcx(), ty),
    768 ( 0.00%)                  user_ty,
      .                           const_id: None,
      .                       },
      .                   }
  1,024 ( 0.00%)      }
      .           
    108 ( 0.00%)      fn convert_arm(&mut self, arm: &'tcx hir::Arm<'tcx>) -> ArmId {
     96 ( 0.00%)          let arm = Arm {
     36 ( 0.00%)              pattern: self.pattern_from_hir(&arm.pat),
      .                       guard: arm.guard.as_ref().map(|g| match g {
      .                           hir::Guard::If(ref e) => Guard::If(self.mirror_expr(e)),
      .                           hir::Guard::IfLet(ref pat, ref e) => {
      .                               Guard::IfLet(self.pattern_from_hir(pat), self.mirror_expr(e))
      .                           }
      .                       }),
     12 ( 0.00%)              body: self.mirror_expr(arm.body),
     24 ( 0.00%)              lint_level: LintLevel::Explicit(arm.hir_id),
      .                       scope: region::Scope { id: arm.hir_id.local_id, data: region::ScopeData::Node },
     12 ( 0.00%)              span: arm.span,
      .                   };
    180 ( 0.00%)          self.thir.arms.push(arm)
    108 ( 0.00%)      }
      .           
      .               fn convert_path_expr(&mut self, expr: &'tcx hir::Expr<'tcx>, res: Res) -> ExprKind<'tcx> {
  6,566 ( 0.00%)          let substs = self.typeck_results().node_substs(expr.hir_id);
  6,566 ( 0.00%)          match res {
      .                       // A regular function, constructor function or a constant.
      .                       Res::Def(DefKind::Fn, _)
      .                       | Res::Def(DefKind::AssocFn, _)
      .                       | Res::Def(DefKind::Ctor(_, CtorKind::Fn), _)
      .                       | Res::SelfCtor(..) => {
  1,270 ( 0.00%)                  let user_ty = self.user_substs_applied_to_res(expr.hir_id, res);
      .                           debug!("convert_path_expr: user_ty={:?}", user_ty);
    127 ( 0.00%)                  ExprKind::Literal {
      .                               literal: ty::Const::zero_sized(
    254 ( 0.00%)                          self.tcx,
    381 ( 0.00%)                          self.typeck_results().node_type(expr.hir_id),
      .                               ),
  1,016 ( 0.00%)                      user_ty,
      .                               const_id: None,
      .                           }
      .                       }
      .           
      .                       Res::Def(DefKind::ConstParam, def_id) => {
      .                           let hir_id = self.tcx.hir().local_def_id_to_hir_id(def_id.expect_local());
      .                           let item_id = self.tcx.hir().get_parent_node(hir_id);
      .                           let item_def_id = self.tcx.hir().local_def_id(item_id);
-- line 887 ----------------------------------------
-- line 895 ----------------------------------------
      .                                   ty: self.typeck_results().node_type(expr.hir_id),
      .                               }),
      .                               user_ty: None,
      .                               const_id: Some(def_id),
      .                           }
      .                       }
      .           
      .                       Res::Def(DefKind::Const, def_id) | Res::Def(DefKind::AssocConst, def_id) => {
    396 ( 0.00%)                  let user_ty = self.user_substs_applied_to_res(expr.hir_id, res);
      .                           debug!("convert_path_expr: (const) user_ty={:?}", user_ty);
    220 ( 0.00%)                  ExprKind::Literal {
    528 ( 0.00%)                      literal: self.tcx.mk_const(ty::Const {
      .                                   val: ty::ConstKind::Unevaluated(ty::Unevaluated::new(
      .                                       ty::WithOptConstParam::unknown(def_id),
      .                                       substs,
      .                                   )),
    132 ( 0.00%)                          ty: self.typeck_results().node_type(expr.hir_id),
      .                               }),
    352 ( 0.00%)                      user_ty,
      .                               const_id: Some(def_id),
      .                           }
      .                       }
      .           
      .                       Res::Def(DefKind::Ctor(_, CtorKind::Const), def_id) => {
      .                           let user_provided_types = self.typeck_results.user_provided_types();
      .                           let user_provided_type = user_provided_types.get(expr.hir_id).copied();
      .                           debug!("convert_path_expr: user_provided_type={:?}", user_provided_type);
-- line 921 ----------------------------------------
-- line 932 ----------------------------------------
      .                                   base: None,
      .                               })),
      .                               _ => bug!("unexpected ty: {:?}", ty),
      .                           }
      .                       }
      .           
      .                       // We encode uses of statics as a `*&STATIC` where the `&STATIC` part is
      .                       // a constant reference (or constant raw pointer for `static mut`) in MIR
     38 ( 0.00%)              Res::Def(DefKind::Static, id) => {
    114 ( 0.00%)                  let ty = self.tcx.static_ptr_ty(id);
    114 ( 0.00%)                  let temp_lifetime = self.region_scope_tree.temporary_scope(expr.hir_id.local_id);
    114 ( 0.00%)                  let kind = if self.tcx.is_thread_local_static(id) {
      .                               ExprKind::ThreadLocalRef(id)
      .                           } else {
     76 ( 0.00%)                      let ptr = self.tcx.create_static_alloc(id);
      .                               ExprKind::StaticRef {
      .                                   literal: ty::Const::from_scalar(
      .                                       self.tcx,
      .                                       Scalar::from_pointer(ptr.into(), &self.tcx),
      .                                       ty,
      .                                   ),
      .                                   def_id: id,
      .                               }
      .                           };
     57 ( 0.00%)                  ExprKind::Deref {
    209 ( 0.00%)                      arg: self.thir.exprs.push(Expr { ty, temp_lifetime, span: expr.span, kind }),
      .                           }
      .                       }
      .           
  5,984 ( 0.00%)              Res::Local(var_hir_id) => self.convert_var(var_hir_id),
      .           
      .                       _ => span_bug!(expr.span, "res `{:?}` not yet implemented", res),
      .                   }
      .               }
      .           
  7,480 ( 0.00%)      fn convert_var(&mut self, var_hir_id: hir::HirId) -> ExprKind<'tcx> {
      .                   // We want upvars here not captures.
      .                   // Captures will be handled in MIR.
      .                   let is_upvar = self
      .                       .tcx
      .                       .upvars_mentioned(self.body_owner)
      .                       .map_or(false, |upvars| upvars.contains_key(&var_hir_id));
      .           
      .                   debug!(
      .                       "convert_var({:?}): is_upvar={}, body_owner={:?}",
      .                       var_hir_id, is_upvar, self.body_owner
      .                   );
      .           
      .                   if is_upvar {
      .                       ExprKind::UpvarRef { closure_def_id: self.body_owner, var_hir_id }
      .                   } else {
  2,244 ( 0.00%)              ExprKind::VarRef { id: var_hir_id }
      .                   }
  5,984 ( 0.00%)      }
      .           
      .               fn overloaded_operator(
      .                   &mut self,
      .                   expr: &'tcx hir::Expr<'tcx>,
      .                   args: Box<[ExprId]>,
      .               ) -> ExprKind<'tcx> {
      .                   let fun = self.method_callee(expr, expr.span, None);
      .                   let fun = self.thir.exprs.push(fun);
-- line 993 ----------------------------------------
-- line 1121 ----------------------------------------
      .                   }
      .               }
      .           
      .               /// Converts a list of named fields (i.e., for struct-like struct/enum ADTs) into FieldExpr.
      .               fn field_refs(&mut self, fields: &'tcx [hir::ExprField<'tcx>]) -> Box<[FieldExpr]> {
      .                   fields
      .                       .iter()
      .                       .map(|field| FieldExpr {
     39 ( 0.00%)                  name: Field::new(self.tcx.field_index(field.hir_id, self.typeck_results)),
      .                           expr: self.mirror_expr(field.expr),
      .                       })
      .                       .collect()
      .               }
      .           }
      .           
      .           trait ToBorrowKind {
      .               fn to_borrow_kind(&self) -> BorrowKind;
      .           }
      .           
      .           impl ToBorrowKind for AutoBorrowMutability {
      .               fn to_borrow_kind(&self) -> BorrowKind {
      .                   use rustc_middle::ty::adjustment::AllowTwoPhase;
    294 ( 0.00%)          match *self {
      .                       AutoBorrowMutability::Mut { allow_two_phase_borrow } => BorrowKind::Mut {
      .                           allow_two_phase_borrow: match allow_two_phase_borrow {
      .                               AllowTwoPhase::Yes => true,
      .                               AllowTwoPhase::No => false,
      .                           },
      .                       },
      .                       AutoBorrowMutability::Not => BorrowKind::Shared,
      .                   }
-- line 1151 ----------------------------------------
-- line 1156 ----------------------------------------
      .               fn to_borrow_kind(&self) -> BorrowKind {
      .                   match *self {
      .                       hir::Mutability::Mut => BorrowKind::Mut { allow_two_phase_borrow: false },
      .                       hir::Mutability::Not => BorrowKind::Shared,
      .                   }
      .               }
      .           }
      .           
    900 ( 0.00%)  fn bin_op(op: hir::BinOpKind) -> BinOp {
  4,050 ( 0.00%)      match op {
      .                   hir::BinOpKind::Add => BinOp::Add,
      .                   hir::BinOpKind::Sub => BinOp::Sub,
      .                   hir::BinOpKind::Mul => BinOp::Mul,
      .                   hir::BinOpKind::Div => BinOp::Div,
      .                   hir::BinOpKind::Rem => BinOp::Rem,
      .                   hir::BinOpKind::BitXor => BinOp::BitXor,
      .                   hir::BinOpKind::BitAnd => BinOp::BitAnd,
      .                   hir::BinOpKind::BitOr => BinOp::BitOr,
-- line 1173 ----------------------------------------
-- line 1176 ----------------------------------------
      .                   hir::BinOpKind::Eq => BinOp::Eq,
      .                   hir::BinOpKind::Lt => BinOp::Lt,
      .                   hir::BinOpKind::Le => BinOp::Le,
      .                   hir::BinOpKind::Ne => BinOp::Ne,
      .                   hir::BinOpKind::Ge => BinOp::Ge,
      .                   hir::BinOpKind::Gt => BinOp::Gt,
      .                   _ => bug!("no equivalent for ast binop {:?}", op),
      .               }
    900 ( 0.00%)  }

 59,466 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_build/src/thir/cx/expr.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lint/src/levels.rs
--------------------------------------------------------------------------------
Ir               

-- line 20 ----------------------------------------
      .               Level, Lint, LintId,
      .           };
      .           use rustc_session::parse::feature_err;
      .           use rustc_session::Session;
      .           use rustc_span::symbol::{sym, Symbol};
      .           use rustc_span::{source_map::MultiSpan, Span, DUMMY_SP};
      .           use tracing::debug;
      .           
      9 ( 0.00%)  fn lint_levels(tcx: TyCtxt<'_>, (): ()) -> LintLevelMap {
      .               let store = unerased_lint_store(tcx);
      .               let levels =
      6 ( 0.00%)          LintLevelsBuilder::new(tcx.sess, false, &store, &tcx.resolutions(()).registered_tools);
     13 ( 0.00%)      let mut builder = LintLevelMapBuilder { levels, tcx };
      3 ( 0.00%)      let krate = tcx.hir().krate();
      .           
      2 ( 0.00%)      builder.levels.id_to_set.reserve(krate.owners.len() + 1);
      .           
      8 ( 0.00%)      let push = builder.levels.push(tcx.hir().attrs(hir::CRATE_HIR_ID), true);
      .               builder.levels.register_id(hir::CRATE_HIR_ID);
      .               tcx.hir().walk_toplevel_module(&mut builder);
      .               builder.levels.pop(push);
      .           
     16 ( 0.00%)      builder.levels.build_map()
      9 ( 0.00%)  }
      .           
      .           pub struct LintLevelsBuilder<'s> {
      .               sess: &'s Session,
      .               sets: LintLevelSets,
      .               id_to_set: FxHashMap<HirId, LintStackIndex>,
      .               cur: LintStackIndex,
      .               warn_about_weird_lints: bool,
      .               store: &'s LintStore,
-- line 51 ----------------------------------------
-- line 53 ----------------------------------------
      .           }
      .           
      .           pub struct BuilderPush {
      .               prev: LintStackIndex,
      .               pub changed: bool,
      .           }
      .           
      .           impl<'s> LintLevelsBuilder<'s> {
    182 ( 0.00%)      pub fn new(
      .                   sess: &'s Session,
      .                   warn_about_weird_lints: bool,
      .                   store: &'s LintStore,
      .                   registered_tools: &'s RegisteredTools,
      .               ) -> Self {
    154 ( 0.00%)          let mut builder = LintLevelsBuilder {
      .                       sess,
     14 ( 0.00%)              sets: LintLevelSets::new(),
      .                       cur: COMMAND_LINE,
      .                       id_to_set: Default::default(),
      .                       warn_about_weird_lints,
      .                       store,
      .                       registered_tools,
      .                   };
      .                   builder.process_command_line(sess, store);
     42 ( 0.00%)          assert_eq!(builder.sets.list.len(), 1);
      .                   builder
    126 ( 0.00%)      }
      .           
      .               pub(crate) fn sess(&self) -> &Session {
  1,998 ( 0.00%)          self.sess
      .               }
      .           
      .               pub(crate) fn lint_store(&self) -> &LintStore {
      .                   self.store
      .               }
      .           
      .               fn process_command_line(&mut self, sess: &Session, store: &LintStore) {
      .                   let mut specs = FxHashMap::default();
     28 ( 0.00%)          self.sets.lint_cap = sess.opts.lint_cap.unwrap_or(Level::Forbid);
      .           
     28 ( 0.00%)          for &(ref lint_name, level) in &sess.opts.lint_opts {
    140 ( 0.00%)              store.check_lint_name_cmdline(sess, &lint_name, level, self.registered_tools);
      .                       let orig_level = level;
     56 ( 0.00%)              let lint_flag_val = Symbol::intern(lint_name);
      .           
    140 ( 0.00%)              let ids = match store.find_lints(&lint_name) {
    112 ( 0.00%)                  Ok(ids) => ids,
      .                           Err(_) => continue, // errors handled in check_lint_name_cmdline above
      .                       };
     84 ( 0.00%)              for id in ids {
      .                           // ForceWarn and Forbid cannot be overriden
      .                           if let Some((Level::ForceWarn | Level::Forbid, _)) = specs.get(&id) {
      .                               continue;
      .                           }
      .           
    112 ( 0.00%)                  self.check_gated_lint(id, DUMMY_SP);
      .                           let src = LintLevelSource::CommandLine(lint_flag_val, orig_level);
     56 ( 0.00%)                  specs.insert(id, (level, src));
      .                       }
      .                   }
      .           
    112 ( 0.00%)          self.cur = self.sets.list.push(LintSet { specs, parent: COMMAND_LINE });
      .               }
      .           
      .               /// Attempts to insert the `id` to `level_src` map entry. If unsuccessful
      .               /// (e.g. if a forbid was already inserted on the same scope), then emits a
      .               /// diagnostic with no change to `specs`.
     66 ( 0.00%)      fn insert_spec(
      .                   &mut self,
      .                   specs: &mut FxHashMap<LintId, LevelAndSource>,
      .                   id: LintId,
     36 ( 0.00%)          (level, src): LevelAndSource,
      .               ) {
     30 ( 0.00%)          let (old_level, old_src) =
     42 ( 0.00%)              self.sets.get_lint_level(id.lint, self.cur, Some(&specs), &self.sess);
      .                   // Setting to a non-forbid level is an error if the lint previously had
      .                   // a forbid level. Note that this is not necessarily true even with a
      .                   // `#[forbid(..)]` attribute present, as that is overriden by `--cap-lints`.
      .                   //
      .                   // This means that this only errors if we're truly lowering the lint
      .                   // level from forbid.
      6 ( 0.00%)          if level != Level::Forbid {
     24 ( 0.00%)              if let Level::Forbid = old_level {
      .                           // Backwards compatibility check:
      .                           //
      .                           // We used to not consider `forbid(lint_group)`
      .                           // as preventing `allow(lint)` for some lint `lint` in
      .                           // `lint_group`. For now, issue a future-compatibility
      .                           // warning for this case.
      .                           let id_name = id.lint.name_lower();
      .                           let fcw_warning = match old_src {
-- line 143 ----------------------------------------
-- line 202 ----------------------------------------
      .                           if !fcw_warning {
      .                               return;
      .                           }
      .                       }
      .                   }
      .                   if let Level::ForceWarn = old_level {
      .                       specs.insert(id, (old_level, old_src));
      .                   } else {
     24 ( 0.00%)              specs.insert(id, (level, src));
      .                   }
     48 ( 0.00%)      }
      .           
      .               /// Pushes a list of AST lint attributes onto this context.
      .               ///
      .               /// This function will return a `BuilderPush` object which should be passed
      .               /// to `pop` when this scope for the attributes provided is exited.
      .               ///
      .               /// This function will perform a number of tasks:
      .               ///
      .               /// * It'll validate all lint-related attributes in `attrs`
      .               /// * It'll mark all lint-related attributes as used
      .               /// * Lint levels will be updated based on the attributes provided
      .               /// * Lint attributes are validated, e.g., a `#[forbid]` can't be switched to
      .               ///   `#[allow]`
      .               ///
      .               /// Don't forget to call `pop`!
131,040 ( 0.03%)      pub(crate) fn push(&mut self, attrs: &[ast::Attribute], is_crate_node: bool) -> BuilderPush {
      .                   let mut specs = FxHashMap::default();
 32,760 ( 0.01%)          let sess = self.sess;
 16,380 ( 0.00%)          let bad_attr = |span| struct_span_err!(sess, span, E0452, "malformed lint attribute input");
      .                   for attr in attrs {
  5,040 ( 0.00%)              let Some(level) = Level::from_symbol(attr.name_or_empty()) else {
      .                           continue
      .                       };
      .           
     81 ( 0.00%)              let Some(mut metas) = attr.meta_item_list() else {
      .                           continue
      .                       };
      .           
      9 ( 0.00%)              if metas.is_empty() {
      .                           // FIXME (#55112): issue unused-attributes lint for `#[level()]`
      .                           continue;
      .                       }
      .           
      .                       // Before processing the lint names, look for a reason (RFC 2383)
      .                       // at the end.
      .                       let mut reason = None;
      9 ( 0.00%)              let tail_li = &metas[metas.len() - 1];
     27 ( 0.00%)              if let Some(item) = tail_li.meta_item() {
     45 ( 0.00%)                  match item.kind {
      .                               ast::MetaItemKind::Word => {} // actual lint names handled later
      .                               ast::MetaItemKind::NameValue(ref name_value) => {
      .                                   if item.path == sym::reason {
      .                                       // FIXME (#55112): issue unused-attributes lint if we thereby
      .                                       // don't have any lint names (`#[level(reason = "foo")]`)
      .                                       if let ast::LitKind::Str(rationale, _) = name_value.kind {
      .                                           if !self.sess.features_untracked().lint_reasons {
      .                                               feature_err(
-- line 259 ----------------------------------------
-- line 279 ----------------------------------------
      .                                   }
      .                               }
      .                               ast::MetaItemKind::List(_) => {
      .                                   bad_attr(item.span).span_label(item.span, "bad attribute argument").emit();
      .                               }
      .                           }
      .                       }
      .           
  1,062 ( 0.00%)              for li in metas {
    228 ( 0.00%)                  let sp = li.span();
    114 ( 0.00%)                  let mut meta_item = match li {
  1,026 ( 0.00%)                      ast::NestedMetaItem::MetaItem(meta_item) if meta_item.is_word() => meta_item,
      .                               _ => {
      .                                   let mut err = bad_attr(sp);
      .                                   let mut add_label = true;
      .                                   if let Some(item) = li.meta_item() {
      .                                       if let ast::MetaItemKind::NameValue(_) = item.kind {
      .                                           if item.path == sym::reason {
      .                                               err.span_label(sp, "reason in lint attribute must come last");
      .                                               add_label = false;
-- line 298 ----------------------------------------
-- line 301 ----------------------------------------
      .                                   }
      .                                   if add_label {
      .                                       err.span_label(sp, "bad attribute argument");
      .                                   }
      .                                   err.emit();
      .                                   continue;
      .                               }
      .                           };
    171 ( 0.00%)                  let tool_ident = if meta_item.path.segments.len() > 1 {
    204 ( 0.00%)                      Some(meta_item.path.segments.remove(0).ident)
      .                           } else {
      6 ( 0.00%)                      None
      .                           };
     57 ( 0.00%)                  let tool_name = tool_ident.map(|ident| ident.name);
    171 ( 0.00%)                  let name = pprust::path_to_string(&meta_item.path);
      .                           let lint_result =
    285 ( 0.00%)                      self.store.check_lint_name(&name, tool_name, self.registered_tools);
    375 ( 0.00%)                  match &lint_result {
      .                               CheckLintNameResult::Ok(ids) => {
      .                                   let src = LintLevelSource::Node(
      .                                       meta_item.path.segments.last().expect("empty lint name").ident.name,
      .                                       sp,
      .                                       reason,
      .                                   );
     18 ( 0.00%)                          for &id in *ids {
     30 ( 0.00%)                              self.check_gated_lint(id, attr.span);
     72 ( 0.00%)                              self.insert_spec(&mut specs, id, (level, src));
      .                                   }
      .                               }
      .           
      .                               CheckLintNameResult::Tool(result) => {
    255 ( 0.00%)                          match *result {
      .                                       Ok(ids) => {
      .                                           let complete_name =
      .                                               &format!("{}::{}", tool_ident.unwrap().name, name);
      .                                           let src = LintLevelSource::Node(
      .                                               Symbol::intern(complete_name),
      .                                               sp,
      .                                               reason,
      .                                           );
-- line 340 ----------------------------------------
-- line 454 ----------------------------------------
      .                                       }
      .                                       db.emit();
      .                                   });
      .                               }
      .                           }
      .                           // If this lint was renamed, apply the new lint instead of ignoring the attribute.
      .                           // This happens outside of the match because the new lint should be applied even if
      .                           // we don't warn about the name change.
    285 ( 0.00%)                  if let CheckLintNameResult::Warning(_, Some(new_name)) = lint_result {
      .                               // Ignore any errors or warnings that happen because the new name is inaccurate
      .                               // NOTE: `new_name` already includes the tool name, so we don't have to add it again.
      .                               if let CheckLintNameResult::Ok(ids) =
      .                                   self.store.check_lint_name(&new_name, None, self.registered_tools)
      .                               {
      .                                   let src = LintLevelSource::Node(Symbol::intern(&new_name), sp, reason);
      .                                   for &id in ids {
      .                                       self.check_gated_lint(id, attr.span);
      .                                       self.insert_spec(&mut specs, id, (level, src));
      .                                   }
      .                               } else {
      .                                   panic!("renamed lint does not exist: {}", new_name);
      .                               }
      .                           }
    228 ( 0.00%)              }
      .                   }
      .           
 32,760 ( 0.01%)          if !is_crate_node {
     12 ( 0.00%)              for (id, &(level, ref src)) in specs.iter() {
     18 ( 0.00%)                  if !id.lint.crate_level_only {
      .                               continue;
      .                           }
      .           
      .                           let LintLevelSource::Node(lint_attr_name, lint_attr_span, _) = *src else {
      .                               continue
      .                           };
      .           
      .                           let lint = builtin::UNUSED_ATTRIBUTES;
-- line 490 ----------------------------------------
-- line 505 ----------------------------------------
      .                                   db.emit();
      .                               },
      .                           );
      .                           // don't set a separate error for every lint in the group
      .                           break;
      .                       }
      .                   }
      .           
 16,380 ( 0.00%)          let prev = self.cur;
 16,380 ( 0.00%)          if !specs.is_empty() {
     36 ( 0.00%)              self.cur = self.sets.list.push(LintSet { specs, parent: prev });
      .                   }
      .           
      .                   BuilderPush { prev, changed: prev != self.cur }
147,420 ( 0.04%)      }
      .           
      .               /// Checks if the lint is gated on a feature that is not enabled.
    238 ( 0.00%)      fn check_gated_lint(&self, lint_id: LintId, span: Span) {
    102 ( 0.00%)          if let Some(feature) = lint_id.lint.feature_gate {
      .                       if !self.sess.features_untracked().enabled(feature) {
      .                           feature_err(
      .                               &self.sess.parse_sess,
      .                               feature,
      .                               span,
      .                               &format!("the `{}` lint is unstable", lint_id.lint.name_lower()),
      .                           )
      .                           .emit();
      .                       }
      .                   }
    272 ( 0.00%)      }
      .           
      .               /// Called after `push` when the scope of a set of attributes are exited.
      .               pub fn pop(&mut self, push: BuilderPush) {
 18,131 ( 0.00%)          self.cur = push.prev;
 10,987 ( 0.00%)      }
      .           
      .               /// Find the lint level for a lint.
      2 ( 0.00%)      pub fn lint_level(&self, lint: &'static Lint) -> (Level, LintLevelSource) {
    171 ( 0.00%)          self.sets.get_lint_level(lint, self.cur, None, self.sess)
      3 ( 0.00%)      }
      .           
      .               /// Used to emit a lint-related diagnostic based on the current state of
      .               /// this lint context.
    131 ( 0.00%)      pub fn struct_lint(
      .                   &self,
      .                   lint: &'static Lint,
      .                   span: Option<MultiSpan>,
      .                   decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),
      .               ) {
     94 ( 0.00%)          let (level, src) = self.lint_level(lint);
     20 ( 0.00%)          struct_lint_level(self.sess, lint, level, src, span, decorate)
     87 ( 0.00%)      }
      .           
      .               /// Registers the ID provided with the current set of lints stored in
      .               /// this context.
      .               pub fn register_id(&mut self, id: HirId) {
      5 ( 0.00%)          self.id_to_set.insert(id, self.cur);
      .               }
      .           
      .               pub fn build_map(self) -> LintLevelMap {
      8 ( 0.00%)          LintLevelMap { sets: self.sets, id_to_set: self.id_to_set }
      .               }
      .           }
      .           
      .           struct LintLevelMapBuilder<'tcx> {
      .               levels: LintLevelsBuilder<'tcx>,
      .               tcx: TyCtxt<'tcx>,
      .           }
      .           
      .           impl LintLevelMapBuilder<'_> {
      .               fn with_lint_attrs<F>(&mut self, id: hir::HirId, f: F)
      .               where
      .                   F: FnOnce(&mut Self),
      .               {
      .                   let is_crate_hir = id == hir::CRATE_HIR_ID;
 26,553 ( 0.01%)          let attrs = self.tcx.hir().attrs(id);
 26,682 ( 0.01%)          let push = self.levels.push(attrs, is_crate_hir);
  4,486 ( 0.00%)          if push.changed {
      .                       self.levels.register_id(id);
      .                   }
      .                   f(self);
      .                   self.levels.pop(push);
      .               }
      .           }
      .           
      .           impl<'tcx> intravisit::Visitor<'tcx> for LintLevelMapBuilder<'tcx> {
      .               type NestedFilter = nested_filter::All;
      .           
      .               fn nested_visit_map(&mut self) -> Self::Map {
    194 ( 0.00%)          self.tcx.hir()
      .               }
      .           
      .               fn visit_param(&mut self, param: &'tcx hir::Param<'tcx>) {
    134 ( 0.00%)          self.with_lint_attrs(param.hir_id, |builder| {
      .                       intravisit::walk_param(builder, param);
      .                   });
      .               }
      .           
      .               fn visit_item(&mut self, it: &'tcx hir::Item<'tcx>) {
    115 ( 0.00%)          self.with_lint_attrs(it.hir_id(), |builder| {
    345 ( 0.00%)              intravisit::walk_item(builder, it);
      .                   });
      .               }
      .           
      .               fn visit_foreign_item(&mut self, it: &'tcx hir::ForeignItem<'tcx>) {
      .                   self.with_lint_attrs(it.hir_id(), |builder| {
      .                       intravisit::walk_foreign_item(builder, it);
      .                   })
      .               }
      .           
      .               fn visit_stmt(&mut self, e: &'tcx hir::Stmt<'tcx>) {
      .                   // We will call `with_lint_attrs` when we walk
      .                   // the `StmtKind`. The outer statement itself doesn't
      .                   // define the lint levels.
  1,149 ( 0.00%)          intravisit::walk_stmt(self, e);
      .               }
      .           
    549 ( 0.00%)      fn visit_expr(&mut self, e: &'tcx hir::Expr<'tcx>) {
  8,359 ( 0.00%)          self.with_lint_attrs(e.hir_id, |builder| {
 15,018 ( 0.00%)              intravisit::walk_expr(builder, e);
      .                   })
    488 ( 0.00%)      }
      .           
      .               fn visit_field_def(&mut self, s: &'tcx hir::FieldDef<'tcx>) {
     15 ( 0.00%)          self.with_lint_attrs(s.hir_id, |builder| {
      .                       intravisit::walk_field_def(builder, s);
      .                   })
      .               }
      .           
      .               fn visit_variant(
      .                   &mut self,
      .                   v: &'tcx hir::Variant<'tcx>,
      .                   g: &'tcx hir::Generics<'tcx>,
-- line 637 ----------------------------------------
-- line 638 ----------------------------------------
      .                   item_id: hir::HirId,
      .               ) {
      .                   self.with_lint_attrs(v.id, |builder| {
      .                       intravisit::walk_variant(builder, v, g, item_id);
      .                   })
      .               }
      .           
      .               fn visit_local(&mut self, l: &'tcx hir::Local<'tcx>) {
    254 ( 0.00%)          self.with_lint_attrs(l.hir_id, |builder| {
    508 ( 0.00%)              intravisit::walk_local(builder, l);
      .                   })
      .               }
      .           
      .               fn visit_arm(&mut self, a: &'tcx hir::Arm<'tcx>) {
     24 ( 0.00%)          self.with_lint_attrs(a.hir_id, |builder| {
     48 ( 0.00%)              intravisit::walk_arm(builder, a);
      .                   })
      .               }
      .           
      .               fn visit_trait_item(&mut self, trait_item: &'tcx hir::TraitItem<'tcx>) {
      3 ( 0.00%)          self.with_lint_attrs(trait_item.hir_id(), |builder| {
      9 ( 0.00%)              intravisit::walk_trait_item(builder, trait_item);
      .                   });
      .               }
      .           
      .               fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem<'tcx>) {
     11 ( 0.00%)          self.with_lint_attrs(impl_item.hir_id(), |builder| {
     33 ( 0.00%)              intravisit::walk_impl_item(builder, impl_item);
      .                   });
      .               }
      .           }
      .           
      .           pub fn provide(providers: &mut Providers) {
      2 ( 0.00%)      providers.lint_levels = lint_levels;
      .           }

 16,557 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lint/src/levels.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.14/src/lib.rs
--------------------------------------------------------------------------------
Ir               

-- line 42 ----------------------------------------
      .           /// `stack_size` bytes.
      .           ///
      .           /// The closure `f` is guaranteed to run on a stack with at least `red_zone` bytes, and it will be
      .           /// run on the current stack if there's space available.
      .           #[inline(always)]
      .           pub fn maybe_grow<R, F: FnOnce() -> R>(red_zone: usize, stack_size: usize, callback: F) -> R {
      .               // if we can't guess the remaining stack (unsupported on some platforms) we immediately grow
      .               // the stack and then cache the new stack size (which we do know now because we allocated it.
 96,936 ( 0.03%)      let enough_space = match remaining_stack() {
      .                   Some(remaining) => remaining >= red_zone,
      .                   None => false,
      .               };
136,347 ( 0.04%)      if enough_space {
  6,335 ( 0.00%)          callback()
      .               } else {
      .                   grow(stack_size, callback)
      .               }
      .           }
      .           
      .           /// Always creates a new stack for the passed closure to run on.
      .           /// The closure will still be on the same thread as the caller of `grow`.
      .           /// This will allocate a new stack with at least `stack_size` bytes.
-- line 63 ----------------------------------------
-- line 82 ----------------------------------------
      .               _grow(stack_size, dyn_callback);
      .               ret.unwrap()
      .           }
      .           
      .           /// Queries the amount of remaining stack as interpreted by this library.
      .           ///
      .           /// This function will return the amount of stack space left which will be used
      .           /// to determine whether a stack switch should be made or not.
 90,898 ( 0.02%)  pub fn remaining_stack() -> Option<usize> {
      .               let current_ptr = current_stack_ptr();
 90,898 ( 0.02%)      get_stack_limit().map(|limit| current_ptr - limit)
181,796 ( 0.05%)  }
      .           
      .           psm_stack_information! (
      .               yes {
      .                   fn current_stack_ptr() -> usize {
 90,898 ( 0.02%)              psm::stack_pointer() as usize
      .                   }
      .               }
      .               no {
      .                   #[inline(always)]
      .                   fn current_stack_ptr() -> usize {
      .                       unsafe {
      .                           let mut x = std::mem::MaybeUninit::<u8>::uninit();
      .                           // Unlikely to be ever exercised. As a fallback we execute a volatile read to a
-- line 106 ----------------------------------------
-- line 111 ----------------------------------------
      .                           x.as_ptr() as usize
      .                       }
      .                   }
      .               }
      .           );
      .           
      .           thread_local! {
      .               static STACK_LIMIT: Cell<Option<usize>> = Cell::new(unsafe {
      1 ( 0.00%)          guess_os_stack_limit()
      .               })
      .           }
      .           
      .           #[inline(always)]
      .           fn get_stack_limit() -> Option<usize> {
      .               STACK_LIMIT.with(|s| s.get())
      .           }
      .           
-- line 127 ----------------------------------------
-- line 403 ----------------------------------------
      .                       VirtualQuery(
      .                           psm::stack_pointer() as *const _,
      .                           mi.as_mut_ptr(),
      .                           std::mem::size_of::<QueryT>() as SIZE_T,
      .                       );
      .                       Some(mi.assume_init().AllocationBase as usize + get_thread_stack_guarantee() + 0x1000)
      .                   }
      .               } else if #[cfg(any(target_os = "linux", target_os="solaris", target_os = "netbsd"))] {
      2 ( 0.00%)          unsafe fn guess_os_stack_limit() -> Option<usize> {
      .                       let mut attr = std::mem::MaybeUninit::<libc::pthread_attr_t>::uninit();
      4 ( 0.00%)              assert_eq!(libc::pthread_attr_init(attr.as_mut_ptr()), 0);
      7 ( 0.00%)              assert_eq!(libc::pthread_getattr_np(libc::pthread_self(),
      .                                                           attr.as_mut_ptr()), 0);
      1 ( 0.00%)              let mut stackaddr = std::ptr::null_mut();
      4 ( 0.00%)              let mut stacksize = 0;
      4 ( 0.00%)              assert_eq!(libc::pthread_attr_getstack(
      .                           attr.as_ptr(), &mut stackaddr, &mut stacksize
      .                       ), 0);
      4 ( 0.00%)              assert_eq!(libc::pthread_attr_destroy(attr.as_mut_ptr()), 0);
      1 ( 0.00%)              Some(stackaddr as usize)
      3 ( 0.00%)          }
      .               } else if #[cfg(any(target_os = "freebsd", target_os = "dragonfly"))] {
      .                   unsafe fn guess_os_stack_limit() -> Option<usize> {
      .                       let mut attr = std::mem::MaybeUninit::<libc::pthread_attr_t>::uninit();
      .                       assert_eq!(libc::pthread_attr_init(attr.as_mut_ptr()), 0);
      .                       assert_eq!(libc::pthread_attr_get_np(libc::pthread_self(), attr.as_mut_ptr()), 0);
      .                       let mut stackaddr = std::ptr::null_mut();
      .                       let mut stacksize = 0;
      .                       assert_eq!(libc::pthread_attr_getstack(
-- line 431 ----------------------------------------

 57,954 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.14/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/span_encoding.rs
--------------------------------------------------------------------------------
Ir               

-- line 55 ----------------------------------------
      .           ///   `ctxt` values depend partly on the crate size and partly on the form of
      .           ///   the code. No crates in `rustc-perf` need more than 15 bits for `ctxt`,
      .           ///   but larger crates might need more than 16 bits.
      .           ///
      .           /// In order to reliably use parented spans in incremental compilation,
      .           /// the dependency to the parent definition's span. This is performed
      .           /// using the callback `SPAN_TRACK` to access the query engine.
      .           ///
 42,317 ( 0.01%)  #[derive(Clone, Copy, Eq, PartialEq, Hash)]
      .           // FIXME(@lcnr): Enable this attribute once the bootstrap
      .           // compiler knows of `rustc_pass_by_value`.
      .           //
      .           // Right now, this lint would only trigger when compiling the
      .           // stage 2 compiler, which is fairly annoying as there are
      .           // a lot of places using `&Span` right now. After the next bootstrap bump,
      .           // the lint will already trigger when using stage 1, which is a lot less annoying.
      .           //
      .           // #[cfg_attr(not(bootstrap), rustc_pass_by_value)]
      .           pub struct Span {
  2,445 ( 0.00%)      base_or_index: u32,
      .               len_or_tag: u16,
    242 ( 0.00%)      ctxt_or_zero: u16,
      .           }
      .           
      .           const LEN_TAG: u16 = 0b1000_0000_0000_0000;
      .           const MAX_LEN: u32 = 0b0111_1111_1111_1111;
      .           const MAX_CTXT: u32 = 0b1111_1111_1111_1111;
      .           
      .           /// Dummy span, both position and length are zero, syntax context is zero as well.
      .           pub const DUMMY_SP: Span = Span { base_or_index: 0, len_or_tag: 0, ctxt_or_zero: 0 };
-- line 84 ----------------------------------------
-- line 86 ----------------------------------------
      .           impl Span {
      .               #[inline]
      .               pub fn new(
      .                   mut lo: BytePos,
      .                   mut hi: BytePos,
      .                   ctxt: SyntaxContext,
      .                   parent: Option<LocalDefId>,
      .               ) -> Self {
 49,869 ( 0.01%)          if lo > hi {
      .                       std::mem::swap(&mut lo, &mut hi);
      .                   }
      .           
 99,738 ( 0.03%)          let (base, len, ctxt2) = (lo.0, hi.0 - lo.0, ctxt.as_u32());
      .           
389,406 ( 0.10%)          if len <= MAX_LEN && ctxt2 <= MAX_CTXT && parent.is_none() {
      .                       // Inline format.
      .                       Span { base_or_index: base, len_or_tag: len as u16, ctxt_or_zero: ctxt2 as u16 }
      .                   } else {
      .                       // Interned format.
      .                       let index =
     70 ( 0.00%)                  with_span_interner(|interner| interner.intern(&SpanData { lo, hi, ctxt, parent }));
      .                       Span { base_or_index: index, len_or_tag: LEN_TAG, ctxt_or_zero: 0 }
      .                   }
146,005 ( 0.04%)      }
      .           
      .               #[inline]
      .               pub fn data(self) -> SpanData {
      .                   let data = self.data_untracked();
      .                   if let Some(parent) = data.parent {
      .                       (*SPAN_TRACK)(parent);
      .                   }
      .                   data
      .               }
      .           
      .               /// Internal function to translate between an encoded span and the expanded representation.
      .               /// This function must not be used outside the incremental engine.
      .               #[inline]
      .               pub fn data_untracked(self) -> SpanData {
471,603 ( 0.12%)          if self.len_or_tag != LEN_TAG {
      .                       // Inline format.
      .                       debug_assert!(self.len_or_tag as u32 <= MAX_LEN);
      .                       SpanData {
      .                           lo: BytePos(self.base_or_index),
436,943 ( 0.11%)                  hi: BytePos(self.base_or_index + self.len_or_tag as u32),
      .                           ctxt: SyntaxContext::from_u32(self.ctxt_or_zero as u32),
      .                           parent: None,
      .                       }
      .                   } else {
      .                       // Interned format.
      .                       debug_assert!(self.ctxt_or_zero == 0);
      .                       let index = self.base_or_index;
      .                       with_span_interner(|interner| interner.spans[index as usize])
      .                   }
129,659 ( 0.03%)      }
      .           }
      .           
      4 ( 0.00%)  #[derive(Default)]
      .           pub struct SpanInterner {
      .               spans: FxIndexSet<SpanData>,
      .           }
      .           
      .           impl SpanInterner {
     21 ( 0.00%)      fn intern(&mut self, span_data: &SpanData) -> u32 {
     28 ( 0.00%)          let (index, _) = self.spans.insert_full(*span_data);
      .                   index as u32
     28 ( 0.00%)      }
      .           }
      .           
      .           // If an interner exists, return it. Otherwise, prepare a fresh one.
      .           #[inline]
      .           fn with_span_interner<T, F: FnOnce(&mut SpanInterner) -> T>(f: F) -> T {
      .               crate::with_session_globals(|session_globals| f(&mut *session_globals.span_interner.lock()))
      .           }

415,042 ( 0.11%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/span_encoding.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 180 ----------------------------------------
        .           /// assert_eq!(v, &[0.into()]);
        .           ///
        .           /// // Ensure that the last item was dropped.
        .           /// assert!(weak.upgrade().is_none());
        .           /// ```
        .           #[stable(feature = "drop_in_place", since = "1.8.0")]
        .           #[lang = "drop_in_place"]
        .           #[allow(unconditional_recursion)]
4,376,509 ( 1.13%)  pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
        .               // Code here does not matter - this is replaced by the
        .               // real drop glue by the compiler.
        .           
        .               // SAFETY: see comment above
        .               unsafe { drop_in_place(to_drop) }
        .           }
        .           
        .           /// Creates a null raw pointer.
-- line 196 ----------------------------------------
-- line 448 ----------------------------------------
        .                       return;
        .                   }
        .               }
        .           
        .               // Direct swapping, for the cases not going through the block optimization.
        .               // SAFETY: the caller must guarantee that `x` and `y` are valid
        .               // for writes, properly aligned, and non-overlapping.
        .               unsafe {
       18 ( 0.00%)          let z = read(x);
        .                   copy_nonoverlapping(y, x, 1);
        .                   write(y, z);
        .               }
        .           }
        .           
        .           #[inline]
        .           #[rustc_const_unstable(feature = "const_swap", issue = "83163")]
        .           const unsafe fn swap_nonoverlapping_bytes(x: *mut u8, y: *mut u8, len: usize) {
-- line 464 ----------------------------------------
-- line 693 ----------------------------------------
        .               let mut tmp = MaybeUninit::<T>::uninit();
        .               // SAFETY: the caller must guarantee that `src` is valid for reads.
        .               // `src` cannot overlap `tmp` because `tmp` was just allocated on
        .               // the stack as a separate allocated object.
        .               //
        .               // Also, since we just wrote a valid value into `tmp`, it is guaranteed
        .               // to be properly initialized.
        .               unsafe {
   80,042 ( 0.02%)          copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);
  517,726 ( 0.13%)          tmp.assume_init()
        .               }
        .           }
        .           
        .           /// Reads the value from `src` without moving it. This leaves the
        .           /// memory in `src` unchanged.
        .           ///
        .           /// Unlike [`read`], `read_unaligned` works with unaligned pointers.
        .           ///
-- line 710 ----------------------------------------
-- line 884 ----------------------------------------
        .                   #[rustc_const_unstable(feature = "const_intrinsic_copy", issue = "80697")]
        .                   fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize);
        .               }
        .           
        .               // SAFETY: the caller must guarantee that `dst` is valid for writes.
        .               // `dst` cannot overlap `src` because the caller has mutable access
        .               // to `dst` while `src` is owned by this function.
        .               unsafe {
5,272,455 ( 1.36%)          copy_nonoverlapping(&src as *const T, dst, 1);
        .                   intrinsics::forget(src);
        .               }
        .           }
        .           
        .           /// Overwrites a memory location with the given value without reading or
        .           /// dropping the old value.
        .           ///
        .           /// Unlike [`write()`], the pointer may be unaligned.
-- line 900 ----------------------------------------
-- line 1206 ----------------------------------------
        .               if stride == 1 {
        .                   // `stride == 1` case can be computed more simply through `-p (mod a)`, but doing so
        .                   // inhibits LLVM's ability to select instructions like `lea`. Instead we compute
        .                   //
        .                   //    round_up_to_next_alignment(p, a) - p
        .                   //
        .                   // which distributes operations around the load-bearing, but pessimizing `and` sufficiently
        .                   // for LLVM to be able to utilize the various optimizations it knows about.
      632 ( 0.00%)          return wrapping_sub(
    7,774 ( 0.00%)              wrapping_add(p as usize, a_minus_one) & wrapping_sub(0, a),
        .                       p as usize,
        .                   );
        .               }
        .           
        .               let pmoda = p as usize & a_minus_one;
        .               if pmoda == 0 {
        .                   // Already aligned. Yay!
        .                   return 0;
-- line 1223 ----------------------------------------
-- line 1348 ----------------------------------------
        .           /// assert!(std::ptr::eq(
        .           ///     &wrapper as &dyn Trait as *const dyn Trait as *const u8,
        .           ///     &wrapper.member as &dyn Trait as *const dyn Trait as *const u8,
        .           /// ));
        .           /// ```
        .           #[stable(feature = "ptr_eq", since = "1.17.0")]
        .           #[inline]
        .           pub fn eq<T: ?Sized>(a: *const T, b: *const T) -> bool {
  174,419 ( 0.05%)      a == b
        .           }
        .           
        .           /// Hash a raw pointer.
        .           ///
        .           /// This can be used to hash a `&T` reference (which coerces to `*const T` implicitly)
        .           /// by its address rather than the value it points to
        .           /// (which is what the `Hash for &T` implementation does).
        .           ///
-- line 1364 ----------------------------------------

  809,521 ( 0.21%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs
--------------------------------------------------------------------------------
Ir               

-- line 5 ----------------------------------------
      .           #[stable(feature = "alloc_system_type", since = "1.28.0")]
      .           unsafe impl GlobalAlloc for System {
      .               #[inline]
      .               unsafe fn alloc(&self, layout: Layout) -> *mut u8 {
      .                   // jemalloc provides alignment less than MIN_ALIGN for small allocations.
      .                   // So only rely on MIN_ALIGN if size >= align.
      .                   // Also see <https://github.com/rust-lang/rust/issues/45955> and
      .                   // <https://github.com/rust-lang/rust/issues/62251#issuecomment-507580914>.
493,348 ( 0.13%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
370,011 ( 0.10%)              libc::malloc(layout.size()) as *mut u8
      .                   } else {
      .                       #[cfg(target_os = "macos")]
      .                       {
      .                           if layout.align() > (1 << 31) {
      .                               return ptr::null_mut();
      .                           }
      .                       }
      .                       aligned_malloc(&layout)
      .                   }
      .               }
      .           
      .               #[inline]
      .               unsafe fn alloc_zeroed(&self, layout: Layout) -> *mut u8 {
      .                   // See the comment above in `alloc` for why this check looks the way it does.
 16,588 ( 0.00%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
 24,882 ( 0.01%)              libc::calloc(layout.size(), 1) as *mut u8
      .                   } else {
      .                       let ptr = self.alloc(layout);
      .                       if !ptr.is_null() {
      .                           ptr::write_bytes(ptr, 0, layout.size());
      .                       }
      .                       ptr
      .                   }
      .               }
      .           
      .               #[inline]
      .               unsafe fn dealloc(&self, ptr: *mut u8, _layout: Layout) {
127,473 ( 0.03%)          libc::free(ptr as *mut libc::c_void)
      .               }
      .           
      .               #[inline]
      .               unsafe fn realloc(&self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {
 35,092 ( 0.01%)          if layout.align() <= MIN_ALIGN && layout.align() <= new_size {
 70,184 ( 0.02%)              libc::realloc(ptr as *mut libc::c_void, new_size) as *mut u8
      .                   } else {
      .                       realloc_fallback(self, ptr, layout, new_size)
      .                   }
      .               }
      .           }
      .           
      .           cfg_if::cfg_if! {
      .               if #[cfg(any(
-- line 56 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/md-5-0.9.1/src/utils.rs
--------------------------------------------------------------------------------
Ir               

      .           #![allow(clippy::many_single_char_names)]
      .           use crate::consts::RC;
      .           use core::convert::TryInto;
      .           
      .           #[inline(always)]
      .           fn op_f(w: u32, x: u32, y: u32, z: u32, m: u32, c: u32, s: u32) -> u32 {
140,277 ( 0.04%)      ((x & y) | (!x & z))
      .                   .wrapping_add(w)
      .                   .wrapping_add(m)
      .                   .wrapping_add(c)
      .                   .rotate_left(s)
      .                   .wrapping_add(x)
      .           }
      .           #[inline(always)]
      .           fn op_g(w: u32, x: u32, y: u32, z: u32, m: u32, c: u32, s: u32) -> u32 {
133,722 ( 0.03%)      ((x & z) | (y & !z))
      .                   .wrapping_add(w)
      .                   .wrapping_add(m)
      .                   .wrapping_add(c)
      .                   .rotate_left(s)
      .                   .wrapping_add(x)
      .           }
      .           
      .           #[inline(always)]
      .           fn op_h(w: u32, x: u32, y: u32, z: u32, m: u32, c: u32, s: u32) -> u32 {
 65,550 ( 0.02%)      (x ^ y ^ z)
      .                   .wrapping_add(w)
      .                   .wrapping_add(m)
      .                   .wrapping_add(c)
      .                   .rotate_left(s)
      .                   .wrapping_add(x)
      .           }
      .           
      .           #[inline(always)]
      .           fn op_i(w: u32, x: u32, y: u32, z: u32, m: u32, c: u32, s: u32) -> u32 {
 83,904 ( 0.02%)      (y ^ (x | !z))
      .                   .wrapping_add(w)
      .                   .wrapping_add(m)
      .                   .wrapping_add(c)
      .                   .rotate_left(s)
      .                   .wrapping_add(x)
      .           }
      .           
      .           #[inline]
 11,799 ( 0.00%)  pub fn compress(state: &mut [u32; 4], input: &[u8; 64]) {
  2,622 ( 0.00%)      let mut a = state[0];
  1,311 ( 0.00%)      let mut b = state[1];
  1,311 ( 0.00%)      let mut c = state[2];
  1,311 ( 0.00%)      let mut d = state[3];
      .           
      .               let mut data = [0u32; 16];
      .               for (o, chunk) in data.iter_mut().zip(input.chunks_exact(4)) {
 32,775 ( 0.01%)          *o = u32::from_le_bytes(chunk.try_into().unwrap());
      .               }
      .           
      .               // round 1
      .               a = op_f(a, b, c, d, data[0], RC[0], 7);
      .               d = op_f(d, a, b, c, data[1], RC[1], 12);
      .               c = op_f(c, d, a, b, data[2], RC[2], 17);
      .               b = op_f(b, c, d, a, data[3], RC[3], 22);
      .           
-- line 61 ----------------------------------------
-- line 132 ----------------------------------------
      .               c = op_i(c, d, a, b, data[6], RC[58], 15);
      .               b = op_i(b, c, d, a, data[13], RC[59], 21);
      .           
      .               a = op_i(a, b, c, d, data[4], RC[60], 6);
      .               d = op_i(d, a, b, c, data[11], RC[61], 10);
      .               c = op_i(c, d, a, b, data[2], RC[62], 15);
      .               b = op_i(b, c, d, a, data[9], RC[63], 21);
      .           
  2,622 ( 0.00%)      state[0] = state[0].wrapping_add(a);
  1,311 ( 0.00%)      state[1] = state[1].wrapping_add(b);
  1,311 ( 0.00%)      state[2] = state[2].wrapping_add(c);
  1,311 ( 0.00%)      state[3] = state[3].wrapping_add(d);
 10,488 ( 0.00%)  }

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/middle/region.rs
--------------------------------------------------------------------------------
Ir               

-- line 77 ----------------------------------------
      .           //
      .           // FIXME(pnkfelix): this currently derives `PartialOrd` and `Ord` to
      .           // placate the same deriving in `ty::FreeRegion`, but we may want to
      .           // actually attach a more meaningful ordering to scopes than the one
      .           // generated via deriving here.
      .           #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, Copy, TyEncodable, TyDecodable)]
      .           #[derive(HashStable)]
      .           pub struct Scope {
  6,810 ( 0.00%)      pub id: hir::ItemLocalId,
 99,991 ( 0.03%)      pub data: ScopeData,
      .           }
      .           
      .           impl fmt::Debug for Scope {
      .               fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
      .                   match self.data {
      .                       ScopeData::Node => write!(fmt, "Node({:?})", self.id),
      .                       ScopeData::CallSite => write!(fmt, "CallSite({:?})", self.id),
      .                       ScopeData::Arguments => write!(fmt, "Arguments({:?})", self.id),
-- line 94 ----------------------------------------
-- line 99 ----------------------------------------
      .                           "Remainder {{ block: {:?}, first_statement_index: {}}}",
      .                           self.id,
      .                           fsi.as_u32(),
      .                       ),
      .                   }
      .               }
      .           }
      .           
456,773 ( 0.12%)  #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, Debug, Copy, TyEncodable, TyDecodable)]
      .           #[derive(HashStable)]
      .           pub enum ScopeData {
      .               Node,
      .           
      .               /// Scope of the call-site for a function or closure
      .               /// (outlives the arguments as well as the body).
      .               CallSite,
      .           
-- line 115 ----------------------------------------
-- line 159 ----------------------------------------
      .               ///
      .               /// N.B., likely to be replaced as API is refined; e.g., pnkfelix
      .               /// anticipates `fn entry_node_id` and `fn each_exit_node_id`.
      .               pub fn item_local_id(&self) -> hir::ItemLocalId {
      .                   self.id
      .               }
      .           
      .               pub fn hir_id(&self, scope_tree: &ScopeTree) -> Option<hir::HirId> {
  2,483 ( 0.00%)          scope_tree
      .                       .root_body
      .                       .map(|hir_id| hir::HirId { owner: hir_id.owner, local_id: self.item_local_id() })
      .               }
      .           
      .               /// Returns the span of this `Scope`. Note that in general the
      .               /// returned span may not correspond to the span of any `NodeId` in
      .               /// the AST.
 17,381 ( 0.00%)      pub fn span(&self, tcx: TyCtxt<'_>, scope_tree: &ScopeTree) -> Span {
  4,966 ( 0.00%)          let hir_id = match self.hir_id(scope_tree) {
      .                       Some(hir_id) => hir_id,
      .                       None => return DUMMY_SP,
      .                   };
  9,932 ( 0.00%)          let span = tcx.hir().span(hir_id);
  9,932 ( 0.00%)          if let ScopeData::Remainder(first_statement_index) = self.data {
  1,536 ( 0.00%)              if let Node::Block(ref blk) = tcx.hir().get(hir_id) {
      .                           // Want span for scope starting after the
      .                           // indexed statement and ending at end of
      .                           // `blk`; reuse span of `blk` and shift `lo`
      .                           // forward to end of indexed statement.
      .                           //
      .                           // (This is the special case alluded to in the
      .                           // doc-comment for this method)
      .           
  2,048 ( 0.00%)                  let stmt_span = blk.stmts[first_statement_index.index()].span;
      .           
      .                           // To avoid issues with macro-generated spans, the span
      .                           // of the statement must be nested in that of the block.
    512 ( 0.00%)                  if span.lo() <= stmt_span.lo() && stmt_span.lo() <= span.hi() {
  1,024 ( 0.00%)                      return span.with_lo(stmt_span.lo());
      .                           }
      .                       }
      .                   }
      .                   span
 22,347 ( 0.01%)      }
      .           }
      .           
      .           pub type ScopeDepth = u32;
      .           
      .           /// The region scope tree encodes information about region relationships.
      .           #[derive(Default, Debug)]
      .           pub struct ScopeTree {
      .               /// If not empty, this body is the root of this region hierarchy.
-- line 209 ----------------------------------------
-- line 321 ----------------------------------------
      .               /// The `Span` of the yield.
      .               pub span: Span,
      .               /// The number of expressions and patterns appearing before the `yield` in the body, plus one.
      .               pub expr_and_pat_count: usize,
      .               pub source: hir::YieldSource,
      .           }
      .           
      .           impl ScopeTree {
 42,744 ( 0.01%)      pub fn record_scope_parent(&mut self, child: Scope, parent: Option<(Scope, ScopeDepth)>) {
      .                   debug!("{:?}.parent = {:?}", child, parent);
      .           
 14,248 ( 0.00%)          if let Some(p) = parent {
      .                       let prev = self.parent_map.insert(child, p);
  6,988 ( 0.00%)              assert!(prev.is_none());
      .                   }
      .           
      .                   // Record the destruction scopes for later so we can query them.
 14,248 ( 0.00%)          if let ScopeData::Destruction = child.data {
      .                       self.destruction_scopes.insert(child.item_local_id(), child);
      .                   }
 25,168 ( 0.01%)      }
      .           
 11,292 ( 0.00%)      pub fn opt_destruction_scope(&self, n: hir::ItemLocalId) -> Option<Scope> {
      .                   self.destruction_scopes.get(&n).cloned()
 11,292 ( 0.00%)      }
      .           
      .               pub fn record_var_scope(&mut self, var: hir::ItemLocalId, lifetime: Scope) {
      .                   debug!("record_var_scope(sub={:?}, sup={:?})", var, lifetime);
    204 ( 0.00%)          assert!(var != lifetime.item_local_id());
      .                   self.var_map.insert(var, lifetime);
      .               }
      .           
      .               pub fn record_rvalue_scope(&mut self, var: hir::ItemLocalId, lifetime: Option<Scope>) {
      .                   debug!("record_rvalue_scope(sub={:?}, sup={:?})", var, lifetime);
      .                   if let Some(lifetime) = lifetime {
      .                       assert!(var != lifetime.item_local_id());
      .                   }
-- line 357 ----------------------------------------
-- line 359 ----------------------------------------
      .               }
      .           
      .               /// Returns the narrowest scope that encloses `id`, if any.
      .               pub fn opt_encl_scope(&self, id: Scope) -> Option<Scope> {
      .                   self.parent_map.get(&id).cloned().map(|(p, _)| p)
      .               }
      .           
      .               /// Returns the lifetime of the local variable `var_id`
    548 ( 0.00%)      pub fn var_scope(&self, var_id: hir::ItemLocalId) -> Scope {
      .                   self.var_map
      .                       .get(&var_id)
      .                       .cloned()
      .                       .unwrap_or_else(|| bug!("no enclosing scope for id {:?}", var_id))
    548 ( 0.00%)      }
      .           
      .               /// Returns the scope when the temp created by `expr_id` will be cleaned up.
 71,624 ( 0.02%)      pub fn temporary_scope(&self, expr_id: hir::ItemLocalId) -> Option<Scope> {
      .                   // Check for a designated rvalue scope.
      .                   if let Some(&s) = self.rvalue_scopes.get(&expr_id) {
      .                       debug!("temporary_scope({:?}) = {:?} [custom]", expr_id, s);
      .                       return s;
      .                   }
      .           
      .                   // Otherwise, locate the innermost terminating scope
      .                   // if there's one. Static items, for instance, won't
      .                   // have an enclosing scope, hence no scope will be
      .                   // returned.
 10,232 ( 0.00%)          let mut id = Scope { id: expr_id, data: ScopeData::Node };
      .           
211,864 ( 0.05%)          while let Some(&(p, _)) = self.parent_map.get(&id) {
 72,802 ( 0.02%)              match p.data {
      .                           ScopeData::Destruction => {
      .                               debug!("temporary_scope({:?}) = {:?} [enclosing]", expr_id, id);
      .                               return Some(id);
      .                           }
 21,496 ( 0.01%)                  _ => id = p,
      .                       }
      .                   }
      .           
      .                   debug!("temporary_scope({:?}) = None", expr_id);
      .                   None
 81,856 ( 0.02%)      }
      .           
      .               /// Returns `true` if `subscope` is equal to or is lexically nested inside `superscope`, and
      .               /// `false` otherwise.
      .               ///
      .               /// Used by clippy.
      .               pub fn is_subscope_of(&self, subscope: Scope, superscope: Scope) -> bool {
      .                   let mut s = subscope;
      .                   debug!("is_subscope_of({:?}, {:?})", subscope, superscope);
-- line 408 ----------------------------------------

178,066 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/middle/region.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_typeck/src/check/regionck.rs
--------------------------------------------------------------------------------
Ir              

-- line 125 ----------------------------------------
     .               /// fn foo<'a, 'b, T>(x: &'a &'b [T]) { }
     .               /// ```
     .               ///
     .               /// we can assume in the caller's body that `'b: 'a` and that `T:
     .               /// 'b` (and hence, transitively, that `T: 'a`). This method would
     .               /// add those assumptions into the outlives-environment.
     .               ///
     .               /// Tests: `src/test/ui/regions/regions-free-region-ordering-*.rs`
 2,016 ( 0.00%)      fn add_implied_bounds<'a>(
     .                   &mut self,
     .                   infcx: &InferCtxt<'a, 'tcx>,
     .                   fn_sig_tys: FxHashSet<Ty<'tcx>>,
     .                   body_id: hir::HirId,
     .                   span: Span,
     .               ) {
     .                   debug!("add_implied_bounds()");
     .           
 3,446 ( 0.00%)          for ty in fn_sig_tys {
     .                       let ty = infcx.resolve_vars_if_possible(ty);
     .                       debug!("add_implied_bounds: ty = {}", ty);
 2,655 ( 0.00%)              let implied_bounds = infcx.implied_outlives_bounds(self.param_env, body_id, ty, span);
     .                       self.add_outlives_bounds(Some(infcx), implied_bounds)
     .                   }
 1,344 ( 0.00%)      }
     .           }
     .           
     .           ///////////////////////////////////////////////////////////////////////////
     .           // PUBLIC ENTRY POINTS
     .           
     .           impl<'a, 'tcx> FnCtxt<'a, 'tcx> {
   261 ( 0.00%)      pub fn regionck_expr(&self, body: &'tcx hir::Body<'tcx>) {
   203 ( 0.00%)          let subject = self.tcx.hir().body_owner_def_id(body.id());
    58 ( 0.00%)          let id = body.value.hir_id;
   203 ( 0.00%)          let mut rcx = RegionCtxt::new(self, id, Subject(subject), self.param_env);
     .           
     .                   // There are no add'l implied bounds when checking a
     .                   // standalone expr (e.g., the `E` in a type like `[u32; E]`).
   145 ( 0.00%)          rcx.outlives_environment.save_implied_bounds(id);
     .           
    29 ( 0.00%)          if !self.errors_reported_since_creation() {
     .                       // regionck assumes typeck succeeded
     .                       rcx.visit_body(body);
     .                       rcx.visit_region_obligations(id);
     .                   }
    58 ( 0.00%)          rcx.resolve_regions_and_report_errors(RegionckMode::for_item_body(self.tcx));
   261 ( 0.00%)      }
     .           
     .               /// Region checking during the WF phase for items. `wf_tys` are the
     .               /// types from which we should derive implied bounds, if any.
 1,056 ( 0.00%)      pub fn regionck_item(&self, item_id: hir::HirId, span: Span, wf_tys: FxHashSet<Ty<'tcx>>) {
     .                   debug!("regionck_item(item.id={:?}, wf_tys={:?})", item_id, wf_tys);
   352 ( 0.00%)          let subject = self.tcx.hir().local_def_id(item_id);
   616 ( 0.00%)          let mut rcx = RegionCtxt::new(self, item_id, Subject(subject), self.param_env);
   968 ( 0.00%)          rcx.outlives_environment.add_implied_bounds(self, wf_tys, item_id, span);
   352 ( 0.00%)          rcx.outlives_environment.save_implied_bounds(item_id);
     .                   rcx.visit_region_obligations(item_id);
     .                   rcx.resolve_regions_and_report_errors(RegionckMode::default());
   792 ( 0.00%)      }
     .           
     .               /// Region check a function body. Not invoked on closures, but
     .               /// only on the "root" fn item (in which closures may be
     .               /// embedded). Walks the function body and adds various add'l
     .               /// constraints that are needed for region inference. This is
     .               /// separated both to isolate "pure" region constraints from the
     .               /// rest of type check and because sometimes we need type
     .               /// inference to have completed before we can determine which
     .               /// constraints to add.
   520 ( 0.00%)      pub(crate) fn regionck_fn(
     .                   &self,
     .                   fn_id: hir::HirId,
     .                   body: &'tcx hir::Body<'tcx>,
     .                   span: Span,
     .                   wf_tys: FxHashSet<Ty<'tcx>>,
     .               ) {
     .                   debug!("regionck_fn(id={})", fn_id);
   240 ( 0.00%)          let subject = self.tcx.hir().body_owner_def_id(body.id());
    80 ( 0.00%)          let hir_id = body.value.hir_id;
   200 ( 0.00%)          let mut rcx = RegionCtxt::new(self, hir_id, Subject(subject), self.param_env);
     .                   // We need to add the implied bounds from the function signature
   480 ( 0.00%)          rcx.outlives_environment.add_implied_bounds(self, wf_tys, fn_id, span);
   160 ( 0.00%)          rcx.outlives_environment.save_implied_bounds(fn_id);
     .           
    40 ( 0.00%)          if !self.errors_reported_since_creation() {
     .                       // regionck assumes typeck succeeded
   440 ( 0.00%)              rcx.visit_fn_body(fn_id, body, self.tcx.hir().span(fn_id));
     .                   }
     .           
    80 ( 0.00%)          rcx.resolve_regions_and_report_errors(RegionckMode::for_item_body(self.tcx));
   360 ( 0.00%)      }
     .           }
     .           
     .           ///////////////////////////////////////////////////////////////////////////
     .           // INTERNALS
     .           
     .           pub struct RegionCtxt<'a, 'tcx> {
     .               pub fcx: &'a FnCtxt<'a, 'tcx>,
     .           
-- line 221 ----------------------------------------
-- line 229 ----------------------------------------
     .           
     .               // id of AST node being analyzed (the subject of the analysis).
     .               subject_def_id: LocalDefId,
     .           }
     .           
     .           impl<'a, 'tcx> Deref for RegionCtxt<'a, 'tcx> {
     .               type Target = FnCtxt<'a, 'tcx>;
     .               fn deref(&self) -> &Self::Target {
17,026 ( 0.00%)          self.fcx
     .               }
     .           }
     .           
     .           pub struct Subject(LocalDefId);
     .           
     .           impl<'a, 'tcx> RegionCtxt<'a, 'tcx> {
 1,727 ( 0.00%)      pub fn new(
     .                   fcx: &'a FnCtxt<'a, 'tcx>,
     .                   initial_body_id: hir::HirId,
     .                   Subject(subject): Subject,
     .                   param_env: ty::ParamEnv<'tcx>,
     .               ) -> RegionCtxt<'a, 'tcx> {
   157 ( 0.00%)          let region_scope_tree = fcx.tcx.region_scope_tree(subject);
   314 ( 0.00%)          let outlives_environment = OutlivesEnvironment::new(param_env);
 1,099 ( 0.00%)          RegionCtxt {
     .                       fcx,
     .                       region_scope_tree,
     .                       body_id: initial_body_id,
     .                       body_owner: subject,
     .                       subject_def_id: subject,
   628 ( 0.00%)              outlives_environment,
     .                   }
 1,413 ( 0.00%)      }
     .           
     .               /// Try to resolve the type for the given node, returning `t_err` if an error results. Note that
     .               /// we never care about the details of the error, the same error will be detected and reported
     .               /// in the writeback phase.
     .               ///
     .               /// Note one important point: we do not attempt to resolve *region variables* here. This is
     .               /// because regionck is essentially adding constraints to those region variables and so may yet
     .               /// influence how they are resolved.
-- line 268 ----------------------------------------
-- line 283 ----------------------------------------
     .               /// of b will be `&<R0>.i32` and then `*b` will require that `<R0>` be bigger than the let and
     .               /// the `*b` expression, so we will effectively resolve `<R0>` to be the block B.
     .               pub fn resolve_type(&self, unresolved_ty: Ty<'tcx>) -> Ty<'tcx> {
     .                   self.resolve_vars_if_possible(unresolved_ty)
     .               }
     .           
     .               /// Try to resolve the type for the given node.
     .               fn resolve_node_type(&self, id: hir::HirId) -> Ty<'tcx> {
   141 ( 0.00%)          let t = self.node_ty(id);
   141 ( 0.00%)          self.resolve_type(t)
     .               }
     .           
     .               /// This is the "main" function when region-checking a function item or a
     .               /// closure within a function item. It begins by updating various fields
     .               /// (e.g., `outlives_environment`) to be appropriate to the function and
     .               /// then adds constraints derived from the function body.
     .               ///
     .               /// Note that it does **not** restore the state of the fields that
     .               /// it updates! This is intentional, since -- for the main
     .               /// function -- we wish to be able to read the final
     .               /// `outlives_environment` and other fields from the caller. For
     .               /// closures, however, we save and restore any "scoped state"
     .               /// before we invoke this function. (See `visit_fn` in the
     .               /// `intravisit::Visitor` impl below.)
   560 ( 0.00%)      fn visit_fn_body(
     .                   &mut self,
     .                   id: hir::HirId, // the id of the fn itself
     .                   body: &'tcx hir::Body<'tcx>,
     .                   span: Span,
     .               ) {
     .                   // When we enter a function, we can derive
     .                   debug!("visit_fn_body(id={:?})", id);
     .           
   160 ( 0.00%)          let body_id = body.id();
    80 ( 0.00%)          self.body_id = body_id.hir_id;
   280 ( 0.00%)          self.body_owner = self.tcx.hir().body_owner_def_id(body_id);
     .           
     .                   let fn_sig = {
   400 ( 0.00%)              match self.typeck_results.borrow().liberated_fn_sigs().get(id) {
    80 ( 0.00%)                  Some(f) => *f,
     .                           None => {
     .                               bug!("No fn-sig entry for id={:?}", id);
     .                           }
     .                       }
     .                   };
     .           
     .                   // Collect the types from which we create inferred bounds.
     .                   // For the return type, if diverging, substitute `bool` just
     .                   // because it will have no effect.
     .                   //
     .                   // FIXME(#27579) return types should not be implied bounds
     .                   let fn_sig_tys: FxHashSet<_> =
   200 ( 0.00%)              fn_sig.inputs().iter().cloned().chain(Some(fn_sig.output())).collect();
     .           
   520 ( 0.00%)          self.outlives_environment.add_implied_bounds(self.fcx, fn_sig_tys, body_id.hir_id, span);
   200 ( 0.00%)          self.outlives_environment.save_implied_bounds(body_id.hir_id);
    80 ( 0.00%)          self.link_fn_params(body.params);
     .                   self.visit_body(body);
     .                   self.visit_region_obligations(body_id.hir_id);
   320 ( 0.00%)      }
     .           
     .               fn visit_inline_const(&mut self, id: hir::HirId, body: &'tcx hir::Body<'tcx>) {
     .                   debug!("visit_inline_const(id={:?})", id);
     .           
     .                   // Save state of current function. We will restore afterwards.
     .                   let old_body_id = self.body_id;
     .                   let old_body_owner = self.body_owner;
     .                   let env_snapshot = self.outlives_environment.push_snapshot_pre_typeck_child();
-- line 350 ----------------------------------------
-- line 365 ----------------------------------------
     .               }
     .           
     .               fn visit_region_obligations(&mut self, hir_id: hir::HirId) {
     .                   debug!("visit_region_obligations: hir_id={:?}", hir_id);
     .           
     .                   // region checking can introduce new pending obligations
     .                   // which, when processed, might generate new region
     .                   // obligations. So make sure we process those.
   157 ( 0.00%)          self.select_all_obligations_or_error();
     .               }
     .           
     .               fn resolve_regions_and_report_errors(&self, mode: RegionckMode) {
   471 ( 0.00%)          self.infcx.process_registered_region_obligations(
   314 ( 0.00%)              self.outlives_environment.region_bound_pairs_map(),
   314 ( 0.00%)              Some(self.tcx.lifetimes.re_root_empty),
   157 ( 0.00%)              self.param_env,
     .                   );
     .           
   785 ( 0.00%)          self.fcx.resolve_regions_and_report_errors(
   157 ( 0.00%)              self.subject_def_id.to_def_id(),
     .                       &self.outlives_environment,
     .                       mode,
     .                   );
     .               }
     .           
     .               fn constrain_bindings_in_pat(&mut self, pat: &hir::Pat<'_>) {
     .                   debug!("regionck::visit_pat(pat={:?})", pat);
     .                   pat.each_binding(|_, hir_id, span, _| {
   137 ( 0.00%)              let typ = self.resolve_node_type(hir_id);
   274 ( 0.00%)              let body_id = self.body_id;
   548 ( 0.00%)              dropck::check_drop_obligations(self, typ, span, body_id);
     .                   })
     .               }
     .           }
     .           
     .           impl<'a, 'tcx> Visitor<'tcx> for RegionCtxt<'a, 'tcx> {
     .               // (..) FIXME(#3238) should use visit_pat, not visit_arm/visit_local,
     .               // However, right now we run into an issue whereby some free
     .               // regions are not properly related if they appear within the
-- line 403 ----------------------------------------
-- line 433 ----------------------------------------
     .                   self.body_id = old_body_id;
     .                   self.body_owner = old_body_owner;
     .               }
     .           
     .               //visit_pat: visit_pat, // (..) see above
     .           
     .               fn visit_arm(&mut self, arm: &'tcx hir::Arm<'tcx>) {
     .                   // see above
    84 ( 0.00%)          self.constrain_bindings_in_pat(arm.pat);
     .                   intravisit::walk_arm(self, arm);
     .               }
     .           
 1,016 ( 0.00%)      fn visit_local(&mut self, l: &'tcx hir::Local<'tcx>) {
     .                   // see above
   889 ( 0.00%)          self.constrain_bindings_in_pat(l.pat);
     .                   self.link_local(l);
     .                   intravisit::walk_local(self, l);
   889 ( 0.00%)      }
     .           
40,416 ( 0.01%)      fn visit_expr(&mut self, expr: &'tcx hir::Expr<'tcx>) {
     .                   // Check any autoderefs or autorefs that appear.
     .                   let cmt_result = self.constrain_adjustments(expr);
     .           
     .                   // If necessary, constrain destructors in this expression. This will be
     .                   // the adjusted form if there is an adjustment.
10,518 ( 0.00%)          match cmt_result {
45,468 ( 0.01%)              Ok(head_cmt) => {
     .                           self.check_safety_of_rvalue_destructor_if_necessary(&head_cmt, expr.span);
     .                       }
     .                       Err(..) => {
     .                           self.tcx.sess.delay_span_bug(expr.span, "cat_expr Errd");
     .                       }
     .                   }
     .           
35,356 ( 0.01%)          match expr.kind {
     .                       hir::ExprKind::AddrOf(hir::BorrowKind::Ref, m, ref base) => {
     .                           self.link_addr_of(expr, m, base);
     .           
     .                           intravisit::walk_expr(self, expr);
     .                       }
     .           
     .                       hir::ExprKind::Match(ref discr, arms, _) => {
     .                           self.link_match(discr, arms);
-- line 475 ----------------------------------------
-- line 479 ----------------------------------------
     .           
     .                       hir::ExprKind::ConstBlock(anon_const) => {
     .                           let body = self.tcx.hir().body(anon_const.body);
     .                           self.visit_inline_const(anon_const.hir_id, body);
     .                       }
     .           
     .                       _ => intravisit::walk_expr(self, expr),
     .                   }
40,416 ( 0.01%)      }
     .           }
     .           
     .           impl<'a, 'tcx> RegionCtxt<'a, 'tcx> {
     .               /// Creates a temporary `MemCategorizationContext` and pass it to the closure.
     .               fn with_mc<F, R>(&self, f: F) -> R
     .               where
     .                   F: for<'b> FnOnce(mc::MemCategorizationContext<'b, 'tcx>) -> R,
     .               {
63,109 ( 0.02%)          f(mc::MemCategorizationContext::new(
     .                       &self.infcx,
     .                       self.outlives_environment.param_env,
     .                       self.body_owner,
 5,902 ( 0.00%)              &self.typeck_results.borrow(),
     .                   ))
     .               }
     .           
     .               /// Invoked on any adjustments that occur. Checks that if this is a region pointer being
     .               /// dereferenced, the lifetime of the pointer includes the deref expr.
     .               fn constrain_adjustments(
     .                   &mut self,
     .                   expr: &hir::Expr<'_>,
     .               ) -> mc::McResult<PlaceWithHirId<'tcx>> {
     .                   debug!("constrain_adjustments(expr={:?})", expr);
     .           
10,104 ( 0.00%)          let mut place = self.with_mc(|mc| mc.cat_expr_unadjusted(expr))?;
     .           
 5,052 ( 0.00%)          let typeck_results = self.typeck_results.borrow();
 5,052 ( 0.00%)          let adjustments = typeck_results.expr_adjustments(expr);
 5,052 ( 0.00%)          if adjustments.is_empty() {
41,742 ( 0.01%)              return Ok(place);
     .                   }
     .           
     .                   debug!("constrain_adjustments: adjustments={:?}", adjustments);
     .           
     .                   // If necessary, constrain destructors in the unadjusted form of this
     .                   // expression.
     .                   self.check_safety_of_rvalue_destructor_if_necessary(&place, expr.span);
     .           
     .                   for adjustment in adjustments {
     .                       debug!("constrain_adjustments: adjustment={:?}, place={:?}", adjustment, place);
     .           
 1,431 ( 0.00%)              if let adjustment::Adjust::Deref(Some(deref)) = adjustment.kind {
     .                           self.link_region(
     .                               expr.span,
     .                               deref.region,
     .                               ty::BorrowKind::from_mutbl(deref.mutbl),
     .                               &place,
     .                           );
     .                       }
     .           
   862 ( 0.00%)              if let adjustment::Adjust::Borrow(ref autoref) = adjustment.kind {
     .                           self.link_autoref(expr, &place, autoref);
     .                       }
     .           
 6,810 ( 0.00%)              place = self.with_mc(|mc| mc.cat_expr_adjusted(expr, place, adjustment))?;
     .                   }
     .           
 4,140 ( 0.00%)          Ok(place)
     .               }
     .           
     .               fn check_safety_of_rvalue_destructor_if_necessary(
     .                   &mut self,
     .                   place_with_id: &PlaceWithHirId<'tcx>,
     .                   span: Span,
     .               ) {
10,932 ( 0.00%)          if let PlaceBase::Rvalue = place_with_id.place.base {
 4,668 ( 0.00%)              if place_with_id.place.projections.is_empty() {
 5,008 ( 0.00%)                  let typ = self.resolve_type(place_with_id.place.ty());
 9,272 ( 0.00%)                  let body_id = self.body_id;
18,544 ( 0.00%)                  dropck::check_drop_obligations(self, typ, span, body_id);
     .                       }
     .                   }
     .               }
     .               /// Adds constraints to inference such that `T: 'a` holds (or
     .               /// reports an error if it cannot).
     .               ///
     .               /// # Parameters
     .               ///
-- line 565 ----------------------------------------
-- line 567 ----------------------------------------
     .               /// - `ty`, the type `T`
     .               /// - `region`, the region `'a`
     .               pub fn type_must_outlive(
     .                   &self,
     .                   origin: infer::SubregionOrigin<'tcx>,
     .                   ty: Ty<'tcx>,
     .                   region: ty::Region<'tcx>,
     .               ) {
 1,095 ( 0.00%)          self.infcx.register_region_obligation(
 1,095 ( 0.00%)              self.body_id,
 2,920 ( 0.00%)              RegionObligation { sub_region: region, sup_type: ty, origin },
     .                   );
     .               }
     .           
     .               /// Computes the guarantor for an expression `&base` and then ensures that the lifetime of the
     .               /// resulting pointer is linked to the lifetime of its guarantor (if any).
     .               fn link_addr_of(
     .                   &mut self,
     .                   expr: &hir::Expr<'_>,
     .                   mutability: hir::Mutability,
     .                   base: &hir::Expr<'_>,
     .               ) {
     .                   debug!("link_addr_of(expr={:?}, base={:?})", expr, base);
     .           
    44 ( 0.00%)          let cmt = ignore_err!(self.with_mc(|mc| mc.cat_expr(base)));
     .           
     .                   debug!("link_addr_of: cmt={:?}", cmt);
     .           
    12 ( 0.00%)          self.link_region_from_node_type(expr.span, expr.hir_id, mutability, &cmt);
     .               }
     .           
     .               /// Computes the guarantors for any ref bindings in a `let` and
     .               /// then ensures that the lifetime of the resulting pointer is
     .               /// linked to the lifetime of the initialization expression.
     .               fn link_local(&self, local: &hir::Local<'_>) {
     .                   debug!("regionck::for_local()");
   381 ( 0.00%)          let init_expr = match local.init {
     .                       None => {
     .                           return;
     .                       }
     .                       Some(expr) => &*expr,
     .                   };
 1,190 ( 0.00%)          let discr_cmt = ignore_err!(self.with_mc(|mc| mc.cat_expr(init_expr)));
   952 ( 0.00%)          self.link_pattern(discr_cmt, local.pat);
     .               }
     .           
     .               /// Computes the guarantors for any ref bindings in a match and
     .               /// then ensures that the lifetime of the resulting pointer is
     .               /// linked to the lifetime of its guarantor (if any).
     .               fn link_match(&self, discr: &hir::Expr<'_>, arms: &[hir::Arm<'_>]) {
     .                   debug!("regionck::for_match()");
    80 ( 0.00%)          let discr_cmt = ignore_err!(self.with_mc(|mc| mc.cat_expr(discr)));
     .                   debug!("discr_cmt={:?}", discr_cmt);
     .                   for arm in arms {
    48 ( 0.00%)              self.link_pattern(discr_cmt.clone(), arm.pat);
     .                   }
     .               }
     .           
     .               /// Computes the guarantors for any ref bindings in a match and
     .               /// then ensures that the lifetime of the resulting pointer is
     .               /// linked to the lifetime of its guarantor (if any).
     .               fn link_fn_params(&self, params: &[hir::Param<'_>]) {
     .                   for param in params {
   268 ( 0.00%)              let param_ty = self.node_ty(param.hir_id);
     .                       let param_cmt =
   134 ( 0.00%)                  self.with_mc(|mc| mc.cat_rvalue(param.hir_id, param.pat.span, param_ty));
     .                       debug!("param_ty={:?} param_cmt={:?} param={:?}", param_ty, param_cmt, param);
   804 ( 0.00%)              self.link_pattern(param_cmt, param.pat);
     .                   }
     .               }
     .           
     .               /// Link lifetimes of any ref bindings in `root_pat` to the pointers found
     .               /// in the discriminant, if needed.
 1,188 ( 0.00%)      fn link_pattern(&self, discr_cmt: PlaceWithHirId<'tcx>, root_pat: &hir::Pat<'_>) {
     .                   debug!("link_pattern(discr_cmt={:?}, root_pat={:?})", discr_cmt, root_pat);
     .                   ignore_err!(self.with_mc(|mc| {
   594 ( 0.00%)              mc.cat_pattern(discr_cmt, root_pat, |sub_cmt, hir::Pat { kind, span, hir_id, .. }| {
     .                           // `ref x` pattern
   412 ( 0.00%)                  if let PatKind::Binding(..) = kind {
   784 ( 0.00%)                      if let Some(ty::BindByReference(mutbl)) =
 2,744 ( 0.00%)                          mc.typeck_results.extract_binding_mode(self.tcx.sess, *hir_id, *span)
     .                               {
     .                                   self.link_region_from_node_type(*span, *hir_id, mutbl, sub_cmt);
     .                               }
     .                           }
     .                       })
     .                   }));
 1,188 ( 0.00%)      }
     .           
     .               /// Link lifetime of borrowed pointer resulting from autoref to lifetimes in the value being
     .               /// autoref'd.
     .               fn link_autoref(
     .                   &self,
     .                   expr: &hir::Expr<'_>,
     .                   expr_cmt: &PlaceWithHirId<'tcx>,
     .                   autoref: &adjustment::AutoBorrow<'tcx>,
     .               ) {
     .                   debug!("link_autoref(autoref={:?}, expr_cmt={:?})", autoref, expr_cmt);
     .           
   722 ( 0.00%)          match *autoref {
   722 ( 0.00%)              adjustment::AutoBorrow::Ref(r, m) => {
 3,610 ( 0.00%)                  self.link_region(expr.span, r, ty::BorrowKind::from_mutbl(m.into()), expr_cmt);
     .                       }
     .           
     .                       adjustment::AutoBorrow::RawPtr(_) => {}
     .                   }
     .               }
     .           
     .               /// Like `link_region()`, except that the region is extracted from the type of `id`,
     .               /// which must be some reference (`&T`, `&str`, etc).
-- line 676 ----------------------------------------
-- line 682 ----------------------------------------
     .                   cmt_borrowed: &PlaceWithHirId<'tcx>,
     .               ) {
     .                   debug!(
     .                       "link_region_from_node_type(id={:?}, mutbl={:?}, cmt_borrowed={:?})",
     .                       id, mutbl, cmt_borrowed
     .                   );
     .           
     .                   let rptr_ty = self.resolve_node_type(id);
     8 ( 0.00%)          if let ty::Ref(r, _, _) = rptr_ty.kind() {
     .                       debug!("rptr_ty={}", rptr_ty);
    28 ( 0.00%)              self.link_region(span, r, ty::BorrowKind::from_mutbl(mutbl), cmt_borrowed);
     .                   }
     .               }
     .           
     .               /// Informs the inference engine that `borrow_cmt` is being borrowed with
     .               /// kind `borrow_kind` and lifetime `borrow_region`.
     .               /// In order to ensure borrowck is satisfied, this may create constraints
     .               /// between regions, as explained in `link_reborrowed_region()`.
 4,015 ( 0.00%)      fn link_region(
     .                   &self,
     .                   span: Span,
     .                   borrow_region: ty::Region<'tcx>,
     .                   borrow_kind: ty::BorrowKind,
     .                   borrow_place: &PlaceWithHirId<'tcx>,
     .               ) {
 1,095 ( 0.00%)          let origin = infer::DataBorrowed(borrow_place.place.ty(), span);
 2,190 ( 0.00%)          self.type_must_outlive(origin, borrow_place.place.ty(), borrow_region);
     .           
 1,844 ( 0.00%)          for pointer_ty in borrow_place.place.deref_tys() {
     .                       debug!(
     .                           "link_region(borrow_region={:?}, borrow_kind={:?}, pointer_ty={:?})",
     .                           borrow_region, borrow_kind, borrow_place
     .                       );
    57 ( 0.00%)              match *pointer_ty.kind() {
     .                           ty::RawPtr(_) => return,
   171 ( 0.00%)                  ty::Ref(ref_region, _, ref_mutability) => {
    19 ( 0.00%)                      if self.link_reborrowed_region(span, borrow_region, ref_region, ref_mutability)
     .                               {
     .                                   return;
     .                               }
     .                           }
     .                           _ => assert!(pointer_ty.is_box(), "unexpected built-in deref type {}", pointer_ty),
     .                       }
     .                   }
   708 ( 0.00%)          if let PlaceBase::Upvar(upvar_id) = borrow_place.place.base {
     .                       self.link_upvar_region(span, borrow_region, upvar_id);
     .                   }
 2,920 ( 0.00%)      }
     .           
     .               /// This is the most complicated case: the path being borrowed is
     .               /// itself the referent of a borrowed pointer. Let me give an
     .               /// example fragment of code to make clear(er) the situation:
     .               ///
     .               /// ```ignore (incomplete Rust code)
     .               /// let r: &'a mut T = ...;  // the original reference "r" has lifetime 'a
     .               /// ...
-- line 737 ----------------------------------------
-- line 764 ----------------------------------------
     .               fn link_reborrowed_region(
     .                   &self,
     .                   span: Span,
     .                   borrow_region: ty::Region<'tcx>,
     .                   ref_region: ty::Region<'tcx>,
     .                   ref_mutability: hir::Mutability,
     .               ) -> bool {
     .                   debug!("link_reborrowed_region: {:?} <= {:?}", borrow_region, ref_region);
    95 ( 0.00%)          self.sub_regions(infer::Reborrow(span), borrow_region, ref_region);
     .           
     .                   // Decide whether we need to recurse and link any regions within
     .                   // the `ref_cmt`. This is concerned for the case where the value
     .                   // being reborrowed is in fact a borrowed pointer found within
     .                   // another borrowed pointer. For example:
     .                   //
     .                   //    let p: &'b &'a mut T = ...;
     .                   //    ...
-- line 780 ----------------------------------------

44,217 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_typeck/src/check/regionck.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_typeck/src/check/coercion.rs
--------------------------------------------------------------------------------
Ir               

-- line 73 ----------------------------------------
      .               /// See #47489 and #48598
      .               /// See docs on the "AllowTwoPhase" type for a more detailed discussion
      .               allow_two_phase: AllowTwoPhase,
      .           }
      .           
      .           impl<'a, 'tcx> Deref for Coerce<'a, 'tcx> {
      .               type Target = FnCtxt<'a, 'tcx>;
      .               fn deref(&self) -> &Self::Target {
 30,641 ( 0.01%)          &self.fcx
      .               }
      .           }
      .           
      .           type CoerceResult<'tcx> = InferResult<'tcx, (Vec<Adjustment<'tcx>>, Ty<'tcx>)>;
      .           
      .           /// Coercing a mutable reference to an immutable works, while
      .           /// coercing `&T` to `&mut T` should be forbidden.
      .           fn coerce_mutbls<'tcx>(
      .               from_mutbl: hir::Mutability,
      .               to_mutbl: hir::Mutability,
      .           ) -> RelateResult<'tcx, ()> {
    552 ( 0.00%)      match (from_mutbl, to_mutbl) {
      .                   (hir::Mutability::Mut, hir::Mutability::Mut | hir::Mutability::Not)
      .                   | (hir::Mutability::Not, hir::Mutability::Not) => Ok(()),
      .                   (hir::Mutability::Not, hir::Mutability::Mut) => Err(TypeError::Mutability),
      .               }
      .           }
      .           
      .           /// Do not require any adjustments, i.e. coerce `x -> x`.
      .           fn identity(_: Ty<'_>) -> Vec<Adjustment<'_>> {
      .               vec![]
      .           }
      .           
      .           fn simple<'tcx>(kind: Adjust<'tcx>) -> impl FnOnce(Ty<'tcx>) -> Vec<Adjustment<'tcx>> {
    124 ( 0.00%)      move |target| vec![Adjustment { kind, target }]
      .           }
      .           
      .           /// This always returns `Ok(...)`.
      .           fn success<'tcx>(
      .               adj: Vec<Adjustment<'tcx>>,
      .               target: Ty<'tcx>,
      .               obligations: traits::PredicateObligations<'tcx>,
      .           ) -> CoerceResult<'tcx> {
  9,389 ( 0.00%)      Ok(InferOk { value: (adj, target), obligations })
      .           }
      .           
      .           impl<'f, 'tcx> Coerce<'f, 'tcx> {
      .               fn new(
      .                   fcx: &'f FnCtxt<'f, 'tcx>,
      .                   cause: ObligationCause<'tcx>,
      .                   allow_two_phase: AllowTwoPhase,
      .               ) -> Self {
 26,344 ( 0.01%)          Coerce { fcx, cause, allow_two_phase, use_lub: false }
      .               }
      .           
 61,138 ( 0.02%)      fn unify(&self, a: Ty<'tcx>, b: Ty<'tcx>) -> InferResult<'tcx, Ty<'tcx>> {
      .                   debug!("unify(a: {:?}, b: {:?}, use_lub: {})", a, b, self.use_lub);
      .                   self.commit_if_ok(|_| {
 11,116 ( 0.00%)              if self.use_lub {
      8 ( 0.00%)                  self.at(&self.cause, self.fcx.param_env).lub(b, a)
      .                       } else {
 11,108 ( 0.00%)                  self.at(&self.cause, self.fcx.param_env)
      .                               .sup(b, a)
      .                               .map(|InferOk { value: (), obligations }| InferOk { value: a, obligations })
      .                       }
      .                   })
 44,464 ( 0.01%)      }
      .           
      .               /// Unify two types (using sub or lub) and produce a specific coercion.
 12,436 ( 0.00%)      fn unify_and<F>(&self, a: Ty<'tcx>, b: Ty<'tcx>, f: F) -> CoerceResult<'tcx>
      .               where
      .                   F: FnOnce(Ty<'tcx>) -> Vec<Adjustment<'tcx>>,
      .               {
 12,599 ( 0.00%)          self.unify(&a, &b)
  9,316 ( 0.00%)              .and_then(|InferOk { value: ty, obligations }| success(f(ty), ty, obligations))
  9,327 ( 0.00%)      }
      .           
 69,216 ( 0.02%)      #[instrument(skip(self))]
      .               fn coerce(&self, a: Ty<'tcx>, b: Ty<'tcx>) -> CoerceResult<'tcx> {
      .                   // First, remove any resolved type variables (at the top level, at least):
  3,296 ( 0.00%)          let a = self.shallow_resolve(a);
  3,296 ( 0.00%)          let b = self.shallow_resolve(b);
      .                   debug!("Coerce.tys({:?} => {:?})", a, b);
      .           
      .                   // Just ignore error types.
  6,592 ( 0.00%)          if a.references_error() || b.references_error() {
      .                       return success(vec![], self.fcx.tcx.ty_error(), vec![]);
      .                   }
      .           
      .                   // Coercing from `!` to any type is allowed:
  3,296 ( 0.00%)          if a.is_never() {
      .                       return success(simple(Adjust::NeverToAny)(b), b, vec![]);
      .                   }
      .           
      .                   // Coercing *from* an unresolved inference variable means that
      .                   // we have no information about the source type. This will always
      .                   // ultimately fall back to some form of subtyping.
  3,680 ( 0.00%)          if a.is_ty_var() {
      .                       return self.coerce_from_inference_variable(a, b, identity);
      .                   }
      .           
      .                   // Consider coercing the subtype to a DST
      .                   //
      .                   // NOTE: this is wrapped in a `commit_if_ok` because it creates
      .                   // a "spurious" type variable, and we don't want to have that
      .                   // type variable in memory if the coercion fails.
      .                   let unsize = self.commit_if_ok(|_| self.coerce_unsized(a, b));
 12,924 ( 0.00%)          match unsize {
      .                       Ok(_) => {
      .                           debug!("coerce: unsize successful");
      .                           return unsize;
      .                       }
      .                       Err(TypeError::ObjectUnsafeCoercion(did)) => {
      .                           debug!("coerce: unsize not object safe");
      .                           return Err(TypeError::ObjectUnsafeCoercion(did));
      .                       }
      .                       Err(error) => {
      .                           debug!(?error, "coerce: unsize failed");
      .                       }
      .                   }
      .           
      .                   // Examine the supertype and consider auto-borrowing.
 16,031 ( 0.00%)          match *b.kind() {
     60 ( 0.00%)              ty::RawPtr(mt_b) => {
    360 ( 0.00%)                  return self.coerce_unsafe_ptr(a, b, mt_b.mutbl);
      .                       }
    124 ( 0.00%)              ty::Ref(r_b, _, mutbl_b) => {
    372 ( 0.00%)                  return self.coerce_borrowed_pointer(a, b, r_b, mutbl_b);
      .                       }
      .                       _ => {}
      .                   }
      .           
 21,763 ( 0.01%)          match *a.kind() {
      .                       ty::FnDef(..) => {
      .                           // Function items are coercible to any closure
      .                           // type; function pointers are not (that would
      .                           // require double indirection).
      .                           // Additionally, we permit coercion of function
      .                           // items to drop the unsafe qualifier.
      .                           self.coerce_from_fn_item(a, b)
      .                       }
-- line 212 ----------------------------------------
-- line 218 ----------------------------------------
      .                       ty::Closure(closure_def_id_a, substs_a) => {
      .                           // Non-capturing closures are coercible to
      .                           // function pointers or unsafe function pointers.
      .                           // It cannot convert closures that require unsafe.
      .                           self.coerce_closure_to_fn(a, closure_def_id_a, substs_a, b)
      .                       }
      .                       _ => {
      .                           // Otherwise, just use unification rules.
 15,545 ( 0.00%)                  self.unify_and(a, b, identity)
      .                       }
      .                   }
  6,592 ( 0.00%)      }
      .           
      .               /// Coercing *from* an inference variable. In this case, we have no information
      .               /// about the source type, so we can't really do a true coercion and we always
      .               /// fall back to subtyping (`unify_and`).
      .               fn coerce_from_inference_variable(
      .                   &self,
      .                   a: Ty<'tcx>,
      .                   b: Ty<'tcx>,
      .                   make_adjustments: impl FnOnce(Ty<'tcx>) -> Vec<Adjustment<'tcx>>,
      .               ) -> CoerceResult<'tcx> {
      .                   debug!("coerce_from_inference_variable(a={:?}, b={:?})", a, b);
     25 ( 0.00%)          assert!(a.is_ty_var() && self.infcx.shallow_resolve(a) == a);
     25 ( 0.00%)          assert!(self.infcx.shallow_resolve(b) == b);
      .           
     75 ( 0.00%)          if b.is_ty_var() {
      .                       // Two unresolved type variables: create a `Coerce` predicate.
     75 ( 0.00%)              let target_ty = if self.use_lub {
      .                           self.infcx.next_ty_var(TypeVariableOrigin {
      .                               kind: TypeVariableOriginKind::LatticeVariable,
      .                               span: self.cause.span,
      .                           })
      .                       } else {
      .                           b
      .                       };
      .           
      .                       let mut obligations = Vec::with_capacity(2);
      .                       for &source_ty in &[a, b] {
     50 ( 0.00%)                  if source_ty != target_ty {
      .                               obligations.push(Obligation::new(
      .                                   self.cause.clone(),
     25 ( 0.00%)                          self.param_env,
    100 ( 0.00%)                          ty::Binder::dummy(ty::PredicateKind::Coerce(ty::CoercePredicate {
      .                                       a: source_ty,
      .                                       b: target_ty,
      .                                   }))
      .                                   .to_predicate(self.tcx()),
      .                               ));
      .                           }
      .                       }
      .           
      .                       debug!(
      .                           "coerce_from_inference_variable: two inference variables, target_ty={:?}, obligations={:?}",
      .                           target_ty, obligations
      .                       );
      .                       let adjustments = make_adjustments(target_ty);
    150 ( 0.00%)              InferResult::Ok(InferOk { value: (adjustments, target_ty), obligations })
      .                   } else {
      .                       // One unresolved type variable: just apply subtyping, we may be able
      .                       // to do something useful.
      .                       self.unify_and(a, b, make_adjustments)
      .                   }
      .               }
      .           
      .               /// Reborrows `&mut A` to `&mut B` and `&(mut) A` to `&B`.
      .               /// To match `A` with `B`, autoderef will be performed,
      .               /// calling `deref`/`deref_mut` where necessary.
    620 ( 0.00%)      fn coerce_borrowed_pointer(
      .                   &self,
      .                   a: Ty<'tcx>,
      .                   b: Ty<'tcx>,
      .                   r_b: ty::Region<'tcx>,
      .                   mutbl_b: hir::Mutability,
      .               ) -> CoerceResult<'tcx> {
      .                   debug!("coerce_borrowed_pointer(a={:?}, b={:?})", a, b);
      .           
      .                   // If we have a parameter of type `&M T_a` and the value
      .                   // provided is `expr`, we will be adding an implicit borrow,
      .                   // meaning that we convert `f(expr)` to `f(&M *expr)`.  Therefore,
      .                   // to type check, we will construct the type that `&M*expr` would
      .                   // yield.
      .           
    124 ( 0.00%)          let (r_a, mt_a) = match *a.kind() {
    186 ( 0.00%)              ty::Ref(r_a, ty, mutbl) => {
      .                           let mt_a = ty::TypeAndMut { ty, mutbl };
      .                           coerce_mutbls(mt_a.mutbl, mutbl_b)?;
      .                           (r_a, mt_a)
      .                       }
      .                       _ => return self.unify_and(a, b, identity),
      .                   };
      .           
    124 ( 0.00%)          let span = self.cause.span;
      .           
      .                   let mut first_error = None;
      .                   let mut r_borrow_var = None;
      .                   let mut autoderef = self.autoderef(span, a);
      .                   let mut found = None;
      .           
    248 ( 0.00%)          for (referent_ty, autoderefs) in autoderef.by_ref() {
    248 ( 0.00%)              if autoderefs == 0 {
      .                           // Don't let this pass, otherwise it would cause
      .                           // &T to autoref to &&T.
      .                           continue;
      .                       }
      .           
      .                       // At this point, we have deref'd `a` to `referent_ty`.  So
      .                       // imagine we are coercing from `&'a mut Vec<T>` to `&'b mut [T]`.
      .                       // In the autoderef loop for `&'a mut Vec<T>`, we would get
-- line 326 ----------------------------------------
-- line 386 ----------------------------------------
      .                       //     this extra edge causes the region `'a` to be inferred to something
      .                       //     too big, which then results in borrowck errors.)
      .                       //   - We could track the innermost shared reference, but there is already
      .                       //     code in regionck that has the job of creating links between
      .                       //     the region of a borrow and the regions in the thing being
      .                       //     borrowed (here, `'a` and `'x`), and it knows how to handle
      .                       //     all the various cases. So instead we just make a region variable
      .                       //     and let regionck figure it out.
    124 ( 0.00%)              let r = if !self.use_lub {
      .                           r_b // [2] above
      .                       } else if autoderefs == 1 {
      .                           r_a // [3] above
      .                       } else {
      .                           if r_borrow_var.is_none() {
      .                               // create var lazily, at most once
      .                               let coercion = Coercion(span);
      .                               let r = self.next_region_var(coercion);
      .                               r_borrow_var = Some(r); // [4] above
      .                           }
      .                           r_borrow_var.unwrap()
      .                       };
     62 ( 0.00%)              let derefd_ty_a = self.tcx.mk_ref(
      .                           r,
      .                           TypeAndMut {
      .                               ty: referent_ty,
      .                               mutbl: mutbl_b, // [1] above
      .                           },
      .                       );
    434 ( 0.00%)              match self.unify(derefd_ty_a, b) {
      .                           Ok(ok) => {
    248 ( 0.00%)                      found = Some(ok);
      .                               break;
      .                           }
      .                           Err(err) => {
      .                               if first_error.is_none() {
      .                                   first_error = Some(err);
      .                               }
      .                           }
      .                       }
      .                   }
      .           
      .                   // Extract type or return an error. We return the first error
      .                   // we got, which should be from relating the "base" type
      .                   // (e.g., in example above, the failure from relating `Vec<T>`
      .                   // to the target type), since that should be the least
      .                   // confusing.
    496 ( 0.00%)          let InferOk { value: ty, mut obligations } = match found {
      .                       Some(d) => d,
      .                       None => {
      .                           let err = first_error.expect("coerce_borrowed_pointer had no error");
      .                           debug!("coerce_borrowed_pointer: failed with err = {:?}", err);
      .                           return Err(err);
      .                       }
      .                   };
      .           
    307 ( 0.00%)          if ty == a && mt_a.mutbl == hir::Mutability::Not && autoderef.step_count() == 1 {
      .                       // As a special case, if we would produce `&'a *x`, that's
      .                       // a total no-op. We end up with the type `&'a T` just as
      .                       // we started with.  In that case, just skip it
      .                       // altogether. This is just an optimization.
      .                       //
      .                       // Note that for `&mut`, we DO want to reborrow --
      .                       // otherwise, this would be a move, which might be an
      .                       // error. For example `foo(self.x)` where `self` and
      .                       // `self.x` both have `&mut `type would be a move of
      .                       // `self.x`, but we auto-coerce it to `foo(&mut *self.x)`,
      .                       // which is a borrow.
     98 ( 0.00%)              assert_eq!(mutbl_b, hir::Mutability::Not); // can only coerce &T -> &U
    196 ( 0.00%)              return success(vec![], ty, obligations);
      .                   }
      .           
     91 ( 0.00%)          let InferOk { value: mut adjustments, obligations: o } =
     13 ( 0.00%)              self.adjust_steps_as_infer_ok(&autoderef);
      .                   obligations.extend(o);
    247 ( 0.00%)          obligations.extend(autoderef.into_obligations());
      .           
      .                   // Now apply the autoref. We have to extract the region out of
      .                   // the final ref type we got.
     26 ( 0.00%)          let r_borrow = match ty.kind() {
      .                       ty::Ref(r_borrow, _, _) => r_borrow,
      .                       _ => span_bug!(span, "expected a ref type, got {:?}", ty),
      .                   };
     52 ( 0.00%)          let mutbl = match mutbl_b {
      .                       hir::Mutability::Not => AutoBorrowMutability::Not,
      .                       hir::Mutability::Mut => {
      .                           AutoBorrowMutability::Mut { allow_two_phase_borrow: self.allow_two_phase }
      .                       }
      .                   };
      .                   adjustments.push(Adjustment {
     13 ( 0.00%)              kind: Adjust::Borrow(AutoBorrow::Ref(r_borrow, mutbl)),
      .                       target: ty,
      .                   });
      .           
      .                   debug!("coerce_borrowed_pointer: succeeded ty={:?} adjustments={:?}", ty, adjustments);
      .           
    104 ( 0.00%)          success(adjustments, ty, obligations)
    496 ( 0.00%)      }
      .           
      .               // &[T; n] or &mut [T; n] -> &[T]
      .               // or &mut [T; n] -> &mut [T]
      .               // or &Concrete -> &Trait, etc.
      .               #[instrument(skip(self), level = "debug")]
      .               fn coerce_unsized(&self, mut source: Ty<'tcx>, mut target: Ty<'tcx>) -> CoerceResult<'tcx> {
      .                   source = self.shallow_resolve(source);
      .                   target = self.shallow_resolve(target);
-- line 490 ----------------------------------------
-- line 506 ----------------------------------------
      .                   // would need to be generic over the self-type (`impl<T> CoerceUnsized<SomeType> for T`)
      .                   // or generic over the `CoerceUnsized` type parameter (`impl<T> CoerceUnsized<T> for
      .                   // SomeType`).
      .                   //
      .                   // However, these are exactly the kinds of impls which are forbidden by
      .                   // the compiler! Therefore, we can be sure that coercion will always fail
      .                   // when either the source or target type is a type variable. This allows us
      .                   // to skip performing any trait selection, and immediately bail out.
  3,605 ( 0.00%)          if source.is_ty_var() {
      .                       debug!("coerce_unsized: source is a TyVar, bailing out");
      .                       return Err(TypeError::Mismatch);
      .                   }
  5,043 ( 0.00%)          if target.is_ty_var() {
      .                       debug!("coerce_unsized: target is a TyVar, bailing out");
      .                       return Err(TypeError::Mismatch);
      .                   }
      .           
      .                   let traits =
 27,924 ( 0.01%)              (self.tcx.lang_items().unsize_trait(), self.tcx.lang_items().coerce_unsized_trait());
  9,308 ( 0.00%)          let (Some(unsize_did), Some(coerce_unsized_did)) = traits else {
      .                       debug!("missing Unsize or CoerceUnsized traits");
      .                       return Err(TypeError::Mismatch);
      .                   };
      .           
      .                   // Note, we want to avoid unnecessary unsizing. We don't want to coerce to
      .                   // a DST unless we have to. This currently comes out in the wash since
      .                   // we can't unify [T] with U. But to properly support DST, we need to allow
      .                   // that, at which point we will need extra checks on the target here.
      .           
      .                   // Handle reborrows before selecting `Source: CoerceUnsized<Target>`.
  4,840 ( 0.00%)          let reborrow = match (source.kind(), target.kind()) {
    186 ( 0.00%)              (&ty::Ref(_, ty_a, mutbl_a), &ty::Ref(_, _, mutbl_b)) => {
      .                           coerce_mutbls(mutbl_a, mutbl_b)?;
      .           
     62 ( 0.00%)                  let coercion = Coercion(self.cause.span);
    310 ( 0.00%)                  let r_borrow = self.next_region_var(coercion);
      .                           let mutbl = match mutbl_b {
      .                               hir::Mutability::Not => AutoBorrowMutability::Not,
      .                               hir::Mutability::Mut => AutoBorrowMutability::Mut {
      .                                   // We don't allow two-phase borrows here, at least for initial
      .                                   // implementation. If it happens that this coercion is a function argument,
      .                                   // the reborrow in coerce_borrowed_ptr will pick it up.
      .                                   allow_two_phase_borrow: AllowTwoPhase::No,
      .                               },
      .                           };
      .                           Some((
      .                               Adjustment { kind: Adjust::Deref(None), target: ty_a },
      .                               Adjustment {
      .                                   kind: Adjust::Borrow(AutoBorrow::Ref(r_borrow, mutbl)),
     62 ( 0.00%)                          target: self
      .                                       .tcx
      .                                       .mk_ref(r_borrow, ty::TypeAndMut { mutbl: mutbl_b, ty: ty_a }),
      .                               },
      .                           ))
      .                       }
      .                       (&ty::Ref(_, ty_a, mt_a), &ty::RawPtr(ty::TypeAndMut { mutbl: mt_b, .. })) => {
      .                           coerce_mutbls(mt_a, mt_b)?;
      .           
-- line 563 ----------------------------------------
-- line 574 ----------------------------------------
      .                   let coerce_source = reborrow.as_ref().map_or(source, |&(_, ref r)| r.target);
      .           
      .                   // Setup either a subtyping or a LUB relationship between
      .                   // the `CoerceUnsized` target type and the expected type.
      .                   // We only have the latter, so we use an inference variable
      .                   // for the former and let type inference do the rest.
      .                   let origin = TypeVariableOrigin {
      .                       kind: TypeVariableOriginKind::MiscVariable,
  2,327 ( 0.00%)              span: self.cause.span,
      .                   };
 11,635 ( 0.00%)          let coerce_target = self.next_ty_var(origin);
  9,308 ( 0.00%)          let mut coercion = self.unify_and(coerce_target, target, |target| {
      .                       let unsize = Adjustment { kind: Adjust::Pointer(PointerCast::Unsize), target };
  4,654 ( 0.00%)              match reborrow {
 11,325 ( 0.00%)                  None => vec![unsize],
    868 ( 0.00%)                  Some((ref deref, ref autoref)) => vec![deref.clone(), autoref.clone(), unsize],
      .                       }
      .                   })?;
      .           
  2,327 ( 0.00%)          let mut selcx = traits::SelectionContext::new(self);
      .           
      .                   // Create an obligation for `Source: CoerceUnsized<Target>`.
      .                   let cause = ObligationCause::new(
  4,654 ( 0.00%)              self.cause.span,
  4,654 ( 0.00%)              self.body_id,
      .                       ObligationCauseCode::Coercion { source, target },
      .                   );
      .           
      .                   // Use a FIFO queue for this custom fulfillment procedure.
      .                   //
      .                   // A Vec (or SmallVec) is not a natural choice for a queue. However,
      .                   // this code path is hot, and this queue usually has a max length of 1
      .                   // and almost never more than 3. By using a SmallVec we avoid an
      .                   // allocation, at the (very small) cost of (occasionally) having to
      .                   // shift subsequent elements down when removing the front element.
 32,578 ( 0.01%)          let mut queue: SmallVec<[_; 4]> = smallvec![traits::predicate_for_trait_def(
  4,654 ( 0.00%)              self.tcx,
  2,327 ( 0.00%)              self.fcx.param_env,
 11,635 ( 0.00%)              cause,
      .                       coerce_unsized_did,
      .                       0,
      .                       coerce_source,
 11,635 ( 0.00%)              &[coerce_target.into()]
      .                   )];
      .           
      .                   let mut has_unsized_tuple_coercion = false;
      .                   let mut has_trait_upcasting_coercion = false;
      .           
      .                   // Keep resolving `CoerceUnsized` and `Unsize` predicates to avoid
      .                   // emitting a coercion in cases like `Foo<$1>` -> `Foo<$2>`, where
      .                   // inference might unify those two inner type variables later.
      .                   let traits = [coerce_unsized_did, unsize_did];
  5,028 ( 0.00%)          while !queue.is_empty() {
      .                       let obligation = queue.remove(0);
      .                       debug!("coerce_unsized resolve step: {:?}", obligation);
  2,514 ( 0.00%)              let bound_predicate = obligation.predicate.kind();
 12,570 ( 0.00%)              let trait_pred = match bound_predicate.skip_binder() {
 14,736 ( 0.00%)                  ty::PredicateKind::Trait(trait_pred) if traits.contains(&trait_pred.def_id()) => {
 22,104 ( 0.01%)                      if unsize_did == trait_pred.def_id() {
    774 ( 0.00%)                          let self_ty = trait_pred.self_ty();
    516 ( 0.00%)                          let unsize_ty = trait_pred.trait_ref.substs[1].expect_ty();
    645 ( 0.00%)                          if let (ty::Dynamic(ref data_a, ..), ty::Dynamic(ref data_b, ..)) =
      .                                       (self_ty.kind(), unsize_ty.kind())
      .                                   {
      .                                       if data_a.principal_def_id() != data_b.principal_def_id() {
      .                                           debug!("coerce_unsized: found trait upcasting coercion");
      .                                           has_trait_upcasting_coercion = true;
      .                                       }
      .                                   }
    774 ( 0.00%)                          if let ty::Tuple(..) = unsize_ty.kind() {
      .                                       debug!("coerce_unsized: found unsized tuple coercion");
      .                                       has_unsized_tuple_coercion = true;
      .                                   }
      .                               }
  4,912 ( 0.00%)                      bound_predicate.rebind(trait_pred)
      .                           }
      .                           _ => {
    348 ( 0.00%)                      coercion.obligations.push(obligation);
      .                               continue;
      .                           }
      .                       };
 27,016 ( 0.01%)              match selcx.select(&obligation.with(trait_pred)) {
      .                           // Uncertain or unimplemented.
      .                           Ok(None) => {
    286 ( 0.00%)                      if trait_pred.def_id() == unsize_did {
    132 ( 0.00%)                          let trait_pred = self.resolve_vars_if_possible(trait_pred);
     44 ( 0.00%)                          let self_ty = trait_pred.skip_binder().self_ty();
    132 ( 0.00%)                          let unsize_ty = trait_pred.skip_binder().trait_ref.substs[1].expect_ty();
      .                                   debug!("coerce_unsized: ambiguous unsize case for {:?}", trait_pred);
     44 ( 0.00%)                          match (&self_ty.kind(), &unsize_ty.kind()) {
      .                                       (ty::Infer(ty::TyVar(v)), ty::Dynamic(..))
      .                                           if self.type_var_is_sized(*v) =>
      .                                       {
      .                                           debug!("coerce_unsized: have sized infer {:?}", v);
      .                                           coercion.obligations.push(obligation);
      .                                           // `$0: Unsize<dyn Trait>` where we know that `$0: Sized`, try going
      .                                           // for unsizing.
      .                                       }
-- line 671 ----------------------------------------
-- line 679 ----------------------------------------
      .                                   }
      .                               } else {
      .                                   debug!("coerce_unsized: early return - ambiguous");
      .                                   return Err(TypeError::Mismatch);
      .                               }
      .                           }
      .                           Err(traits::Unimplemented) => {
      .                               debug!("coerce_unsized: early return - can't prove obligation");
 13,830 ( 0.00%)                      return Err(TypeError::Mismatch);
      .                           }
      .           
      .                           // Object safety violations or miscellaneous.
      .                           Err(err) => {
      .                               self.report_selection_error(obligation.clone(), &obligation, &err, false);
      .                               // Treat this like an obligation and follow through
      .                               // with the unsizing - the lack of a coercion should
      .                               // be silent, as it causes a type mismatch later.
      .                           }
      .           
  2,451 ( 0.00%)                  Ok(Some(impl_source)) => queue.extend(impl_source.nested_obligations()),
      .                       }
  4,654 ( 0.00%)          }
      .           
      .                   if has_unsized_tuple_coercion && !self.tcx.features().unsized_tuple_coercion {
      .                       feature_err(
      .                           &self.tcx.sess.parse_sess,
      .                           sym::unsized_tuple_coercion,
      .                           self.cause.span,
      .                           "unsized tuple coercion is not stable enough for use and is subject to change",
      .                       )
-- line 708 ----------------------------------------
-- line 866 ----------------------------------------
      .                               b,
      .                               simple(Adjust::Pointer(PointerCast::ClosureFnPointer(unsafety))),
      .                           )
      .                       }
      .                       _ => self.unify_and(a, b, identity),
      .                   }
      .               }
      .           
    660 ( 0.00%)      fn coerce_unsafe_ptr(
      .                   &self,
      .                   a: Ty<'tcx>,
      .                   b: Ty<'tcx>,
      .                   mutbl_b: hir::Mutability,
      .               ) -> CoerceResult<'tcx> {
      .                   debug!("coerce_unsafe_ptr(a={:?}, b={:?})", a, b);
      .           
    180 ( 0.00%)          let (is_ref, mt_a) = match *a.kind() {
      .                       ty::Ref(_, ty, mutbl) => (true, ty::TypeAndMut { ty, mutbl }),
    180 ( 0.00%)              ty::RawPtr(mt) => (false, mt),
      .                       _ => return self.unify_and(a, b, identity),
      .                   };
     60 ( 0.00%)          coerce_mutbls(mt_a.mutbl, mutbl_b)?;
      .           
      .                   // Check that the types which they point at are compatible.
     60 ( 0.00%)          let a_unsafe = self.tcx.mk_ptr(ty::TypeAndMut { mutbl: mutbl_b, ty: mt_a.ty });
      .                   // Although references and unsafe ptrs have the same
      .                   // representation, we still register an Adjust::DerefRef so that
      .                   // regionck knows that the region for `a` must be valid here.
    120 ( 0.00%)          if is_ref {
      .                       self.unify_and(a_unsafe, b, |target| {
      .                           vec![
      .                               Adjustment { kind: Adjust::Deref(None), target: mt_a.ty },
      .                               Adjustment { kind: Adjust::Borrow(AutoBorrow::RawPtr(mutbl_b)), target },
      .                           ]
      .                       })
     60 ( 0.00%)          } else if mt_a.mutbl != mutbl_b {
      .                       self.unify_and(a_unsafe, b, simple(Adjust::Pointer(PointerCast::MutToConstPointer)))
      .                   } else {
      .                       self.unify_and(a_unsafe, b, identity)
      .                   }
    480 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'tcx> FnCtxt<'a, 'tcx> {
      .               /// Attempt to coerce an expression to a type, and return the
      .               /// adjusted type of the expression, if successful.
      .               /// Adjustments are only recorded if the coercion succeeded.
      .               /// The expressions *must not* have any pre-existing adjustments.
 46,032 ( 0.01%)      pub fn try_coerce(
      .                   &self,
      .                   expr: &hir::Expr<'_>,
      .                   expr_ty: Ty<'tcx>,
      .                   target: Ty<'tcx>,
      .                   allow_two_phase: AllowTwoPhase,
      .                   cause: Option<ObligationCause<'tcx>>,
      .               ) -> RelateResult<'tcx, Ty<'tcx>> {
  9,864 ( 0.00%)          let source = self.resolve_vars_with_obligations(expr_ty);
      .                   debug!("coercion::try({:?}: {:?} -> {:?})", expr, source, target);
      .           
      .                   let cause =
  3,288 ( 0.00%)              cause.unwrap_or_else(|| self.cause(expr.span, ObligationCauseCode::ExprAssignable));
      .                   let coerce = Coerce::new(self, cause, allow_two_phase);
 38,751 ( 0.01%)          let ok = self.commit_if_ok(|_| coerce.coerce(source, target))?;
      .           
 12,588 ( 0.00%)          let (adjustments, _) = self.register_infer_ok_obligations(ok);
 31,470 ( 0.01%)          self.apply_adjustments(expr, adjustments);
  9,441 ( 0.00%)          Ok(if expr_ty.references_error() { self.tcx.ty_error() } else { target })
 29,592 ( 0.01%)      }
      .           
      .               /// Same as `try_coerce()`, but without side-effects.
      .               ///
      .               /// Returns false if the coercion creates any obligations that result in
      .               /// errors.
      .               pub fn can_coerce(&self, expr_ty: Ty<'tcx>, target: Ty<'tcx>) -> bool {
      .                   let source = self.resolve_vars_with_obligations(expr_ty);
      .                   debug!("coercion::can_with_predicates({:?} -> {:?})", source, target);
-- line 941 ----------------------------------------
-- line 967 ----------------------------------------
      .               }
      .           
      .               /// Given some expressions, their known unified type and another expression,
      .               /// tries to unify the types, potentially inserting coercions on any of the
      .               /// provided expressions and returns their LUB (aka "common supertype").
      .               ///
      .               /// This is really an internal helper. From outside the coercion
      .               /// module, you should instantiate a `CoerceMany` instance.
  9,503 ( 0.00%)      fn try_find_coercion_lub<E>(
      .                   &self,
      .                   cause: &ObligationCause<'tcx>,
      .                   exprs: &[E],
      .                   prev_ty: Ty<'tcx>,
      .                   new: &hir::Expr<'_>,
      .                   new_ty: Ty<'tcx>,
      .               ) -> RelateResult<'tcx, Ty<'tcx>>
      .               where
      .                   E: AsCoercionSite,
      .               {
  4,386 ( 0.00%)          let prev_ty = self.resolve_vars_with_obligations(prev_ty);
  2,193 ( 0.00%)          let new_ty = self.resolve_vars_with_obligations(new_ty);
      .                   debug!(
      .                       "coercion::try_find_coercion_lub({:?}, {:?}, exprs={:?} exprs)",
      .                       prev_ty,
      .                       new_ty,
      .                       exprs.len()
      .                   );
      .           
      .                   // The following check fixes #88097, where the compiler erroneously
      .                   // attempted to coerce a closure type to itself via a function pointer.
    731 ( 0.00%)          if prev_ty == new_ty {
    666 ( 0.00%)              return Ok(prev_ty);
      .                   }
      .           
      .                   // Special-case that coercion alone cannot handle:
      .                   // Function items or non-capturing closures of differing IDs or InternalSubsts.
     64 ( 0.00%)          let (a_sig, b_sig) = {
     64 ( 0.00%)              let is_capturing_closure = |ty| {
     32 ( 0.00%)                  if let &ty::Closure(closure_def_id, _substs) = ty {
      .                               self.tcx.upvars_mentioned(closure_def_id.expect_local()).is_some()
      .                           } else {
      .                               false
      .                           }
     64 ( 0.00%)              };
     96 ( 0.00%)              if is_capturing_closure(prev_ty.kind()) || is_capturing_closure(new_ty.kind()) {
      .                           (None, None)
      .                       } else {
     48 ( 0.00%)                  match (prev_ty.kind(), new_ty.kind()) {
      .                               (ty::FnDef(..), ty::FnDef(..)) => {
      .                                   // Don't reify if the function types have a LUB, i.e., they
      .                                   // are the same function and their parameters have a LUB.
      .                                   match self
      .                                       .commit_if_ok(|_| self.at(cause, self.param_env).lub(prev_ty, new_ty))
      .                                   {
      .                                       // We have a LUB of prev_ty and new_ty, just return it.
      .                                       Ok(ok) => return Ok(self.register_infer_ok_obligations(ok)),
-- line 1022 ----------------------------------------
-- line 1048 ----------------------------------------
      .                                       substs_b.as_closure().sig(),
      .                                       hir::Unsafety::Normal,
      .                                   )),
      .                               ),
      .                               _ => (None, None),
      .                           }
      .                       }
      .                   };
     32 ( 0.00%)          if let (Some(a_sig), Some(b_sig)) = (a_sig, b_sig) {
      .                       // Intrinsics are not coercible to function pointers.
      .                       if a_sig.abi() == Abi::RustIntrinsic
      .                           || a_sig.abi() == Abi::PlatformIntrinsic
      .                           || b_sig.abi() == Abi::RustIntrinsic
      .                           || b_sig.abi() == Abi::PlatformIntrinsic
      .                       {
      .                           return Err(TypeError::IntrinsicCast);
      .                       }
-- line 1064 ----------------------------------------
-- line 1094 ----------------------------------------
      .                   }
      .           
      .                   // Configure a Coerce instance to compute the LUB.
      .                   // We don't allow two-phase borrows on any autorefs this creates since we
      .                   // probably aren't processing function arguments here and even if we were,
      .                   // they're going to get autorefed again anyway and we can apply 2-phase borrows
      .                   // at that time.
      .                   let mut coerce = Coerce::new(self, cause.clone(), AllowTwoPhase::No);
      8 ( 0.00%)          coerce.use_lub = true;
      .           
      .                   // First try to coerce the new expression to the type of the previous ones,
      .                   // but only if the new expression has no coercion already applied to it.
      .                   let mut first_error = None;
     64 ( 0.00%)          if !self.typeck_results.borrow().adjustments().contains_key(new.hir_id) {
  3,360 ( 0.00%)              let result = self.commit_if_ok(|_| coerce.coerce(new_ty, prev_ty));
     16 ( 0.00%)              match result {
      .                           Ok(ok) => {
     64 ( 0.00%)                      let (adjustments, target) = self.register_infer_ok_obligations(ok);
     64 ( 0.00%)                      self.apply_adjustments(new, adjustments);
      .                               debug!(
      .                                   "coercion::try_find_coercion_lub: was able to coerce from previous type {:?} to new type {:?}",
      .                                   prev_ty, new_ty,
      .                               );
     16 ( 0.00%)                      return Ok(target);
      .                           }
      .                           Err(e) => first_error = Some(e),
      .                       }
      .                   }
      .           
      .                   // Then try to coerce the previous expressions to the type of the new one.
      .                   // This requires ensuring there are no coercions applied to *any* of the
      .                   // previous expressions, other than noop reborrows (ignoring lifetimes).
-- line 1125 ----------------------------------------
-- line 1175 ----------------------------------------
      .                           let (adjustments, target) = self.register_infer_ok_obligations(ok);
      .                           for expr in exprs {
      .                               let expr = expr.as_coercion_site();
      .                               self.apply_adjustments(expr, adjustments.clone());
      .                           }
      .                           Ok(target)
      .                       }
      .                   }
  6,579 ( 0.00%)      }
      .           }
      .           
      .           /// CoerceMany encapsulates the pattern you should use when you have
      .           /// many expressions that are all getting coerced to a common
      .           /// type. This arises, for example, when you have a match (the result
      .           /// of each arm is coerced to a common type). It also arises in less
      .           /// obvious places, such as when you have many `break foo` expressions
      .           /// that target the same loop, or the various `return` expressions in
-- line 1191 ----------------------------------------
-- line 1253 ----------------------------------------
      .               /// expected to pass each element in the slice to `coerce(...)` in
      .               /// order. This is used with arrays in particular to avoid
      .               /// needlessly cloning the slice.
      .               pub fn with_coercion_sites(expected_ty: Ty<'tcx>, coercion_sites: &'exprs [E]) -> Self {
      .                   Self::make(expected_ty, Expressions::UpFront(coercion_sites))
      .               }
      .           
      .               fn make(expected_ty: Ty<'tcx>, expressions: Expressions<'tcx, 'exprs, E>) -> Self {
    741 ( 0.00%)          CoerceMany { expected_ty, final_ty: None, expressions, pushed: 0 }
      .               }
      .           
      .               /// Returns the "expected type" with which this coercion was
      .               /// constructed. This represents the "downward propagated" type
      .               /// that was given to us at the start of typing whatever construct
      .               /// we are typing (e.g., the match expression).
      .               ///
      .               /// Typically, this is used as the expected type when
      .               /// type-checking each of the alternative expressions whose types
      .               /// we are trying to merge.
      .               pub fn expected_ty(&self) -> Ty<'tcx> {
     10 ( 0.00%)          self.expected_ty
      .               }
      .           
      .               /// Returns the current "merged type", representing our best-guess
      .               /// at the LUB of the expressions we've seen so far (if any). This
      .               /// isn't *final* until you call `self.final()`, which will return
      .               /// the merged type.
      .               pub fn merged_ty(&self) -> Ty<'tcx> {
      .                   self.final_ty.unwrap_or(self.expected_ty)
      .               }
      .           
      .               /// Indicates that the value generated by `expression`, which is
      .               /// of type `expression_ty`, is one of the possibilities that we
      .               /// could coerce from. This will record `expression`, and later
      .               /// calls to `coerce` may come back and add adjustments and things
      .               /// if necessary.
  8,016 ( 0.00%)      pub fn coerce<'a>(
      .                   &mut self,
      .                   fcx: &FnCtxt<'a, 'tcx>,
      .                   cause: &ObligationCause<'tcx>,
      .                   expression: &'tcx hir::Expr<'tcx>,
      .                   expression_ty: Ty<'tcx>,
      .               ) {
  3,250 ( 0.00%)          self.coerce_inner(fcx, cause, Some(expression), expression_ty, None, false)
  5,344 ( 0.00%)      }
      .           
      .               /// Indicates that one of the inputs is a "forced unit". This
      .               /// occurs in a case like `if foo { ... };`, where the missing else
      .               /// generates a "forced unit". Another example is a `loop { break;
      .               /// }`, where the `break` has no argument expression. We treat
      .               /// these cases slightly differently for error-reporting
      .               /// purposes. Note that these tend to correspond to cases where
      .               /// the `()` expression is implicit in the source, and hence we do
-- line 1305 ----------------------------------------
-- line 1310 ----------------------------------------
      .               /// removing a `;`).
      .               pub fn coerce_forced_unit<'a>(
      .                   &mut self,
      .                   fcx: &FnCtxt<'a, 'tcx>,
      .                   cause: &ObligationCause<'tcx>,
      .                   augment_error: &mut dyn FnMut(&mut DiagnosticBuilder<'_>),
      .                   label_unit_as_expected: bool,
      .               ) {
  1,323 ( 0.00%)          self.coerce_inner(
      .                       fcx,
      .                       cause,
      .                       None,
    147 ( 0.00%)              fcx.tcx.mk_unit(),
      .                       Some(augment_error),
      .                       label_unit_as_expected,
      .                   )
      .               }
      .           
      .               /// The inner coercion "engine". If `expression` is `None`, this
      .               /// is a forced-unit case, and hence `expression_ty` must be
      .               /// `Nil`.
 11,361 ( 0.00%)      #[instrument(skip(self, fcx, augment_error, label_expression_as_expected), level = "debug")]
      .               crate fn coerce_inner<'a>(
      .                   &mut self,
      .                   fcx: &FnCtxt<'a, 'tcx>,
      .                   cause: &ObligationCause<'tcx>,
      .                   expression: Option<&'tcx hir::Expr<'tcx>>,
      .                   mut expression_ty: Ty<'tcx>,
      .                   augment_error: Option<&mut dyn FnMut(&mut DiagnosticBuilder<'_>)>,
      .                   label_expression_as_expected: bool,
      .               ) {
      .                   // Incorporate whatever type inference information we have
      .                   // until now; in principle we might also want to process
      .                   // pending obligations, but doing so should only improve
      .                   // compatibility (hopefully that is true) by helping us
      .                   // uncover never types better.
  1,329 ( 0.00%)          if expression_ty.is_ty_var() {
      .                       expression_ty = fcx.infcx.shallow_resolve(expression_ty);
      .                   }
      .           
      .                   // If we see any error types, just propagate that error
      .                   // upwards.
  4,836 ( 0.00%)          if expression_ty.references_error() || self.merged_ty().references_error() {
      .                       self.final_ty = Some(fcx.tcx.ty_error());
      .                       return;
      .                   }
      .           
      .                   // Handle the actual type unification etc.
  1,623 ( 0.00%)          let result = if let Some(expression) = expression {
  3,186 ( 0.00%)              if self.pushed == 0 {
      .                           // Special-case the first expression we are coercing.
      .                           // To be honest, I'm not entirely sure why we do this.
      .                           // We don't allow two-phase borrows, see comment in try_find_coercion_lub for why
  2,979 ( 0.00%)                  fcx.try_coerce(
      .                               expression,
      .                               expression_ty,
      .                               self.expected_ty,
      .                               AllowTwoPhase::No,
  1,324 ( 0.00%)                      Some(cause.clone()),
      .                           )
      .                       } else {
  1,462 ( 0.00%)                  match self.expressions {
    122 ( 0.00%)                      Expressions::Dynamic(ref exprs) => fcx.try_find_coercion_lub(
      .                                   cause,
      .                                   exprs,
      .                                   self.merged_ty(),
      .                                   expression,
      .                                   expression_ty,
      .                               ),
  4,024 ( 0.00%)                      Expressions::UpFront(ref coercion_sites) => fcx.try_find_coercion_lub(
      .                                   cause,
  2,010 ( 0.00%)                          &coercion_sites[0..self.pushed],
      .                                   self.merged_ty(),
      .                                   expression,
      .                                   expression_ty,
      .                               ),
      .                           }
      .                       }
      .                   } else {
      .                       // this is a hack for cases where we default to `()` because
-- line 1389 ----------------------------------------
-- line 1394 ----------------------------------------
      .                       //
      .                       // we wind up with a second match arm that is like `_ =>
      .                       // ()`.  That is the case we are considering here. We take
      .                       // a different path to get the right "expected, found"
      .                       // message and so forth (and because we know that
      .                       // `expression_ty` will be unit).
      .                       //
      .                       // Another example is `break` with no argument expression.
    147 ( 0.00%)              assert!(expression_ty.is_unit(), "if let hack without unit type");
    294 ( 0.00%)              fcx.at(cause, fcx.param_env)
      .                           .eq_exp(label_expression_as_expected, expression_ty, self.merged_ty())
      .                           .map(|infer_ok| {
      .                               fcx.register_infer_ok_obligations(infer_ok);
      .                               expression_ty
      .                           })
      .                   };
      .           
  2,336 ( 0.00%)          match result {
  1,356 ( 0.00%)              Ok(v) => {
  1,062 ( 0.00%)                  self.final_ty = Some(v);
      .                           if let Some(e) = expression {
  2,124 ( 0.00%)                      match self.expressions {
      .                                   Expressions::Dynamic(ref mut buffer) => buffer.push(e),
  1,656 ( 0.00%)                          Expressions::UpFront(coercion_sites) => {
      .                                       // if the user gave us an array to validate, check that we got
      .                                       // the next expression in the list, as expected
  3,152 ( 0.00%)                              assert_eq!(
  2,484 ( 0.00%)                                  coercion_sites[self.pushed].as_coercion_site().hir_id,
      .                                           e.hir_id
      .                                       );
      .                                   }
      .                               }
  4,482 ( 0.00%)                      self.pushed += 1;
      .                           }
      .                       }
      .                       Err(coercion_error) => {
      .                           let (expected, found) = if label_expression_as_expected {
      .                               // In the case where this is a "forced unit", like
      .                               // `break`, we want to call the `()` "expected"
      .                               // since it is implied by the syntax.
      .                               // (Note: not all force-units work this way.)"
-- line 1434 ----------------------------------------
-- line 1707 ----------------------------------------
      .                           if let ty::Dynamic(..) = ty.kind() {
      .                               return true;
      .                           }
      .                       }
      .                   }
      .                   false
      .               }
      .           
    592 ( 0.00%)      pub fn complete<'a>(self, fcx: &FnCtxt<'a, 'tcx>) -> Ty<'tcx> {
  1,245 ( 0.00%)          if let Some(final_ty) = self.final_ty {
      .                       final_ty
      .                   } else {
      .                       // If we only had inputs that were of type `!` (or no
      .                       // inputs at all), then the final type is `!`.
     22 ( 0.00%)              assert_eq!(self.pushed, 0);
     11 ( 0.00%)              fcx.tcx.types.never
      .                   }
    740 ( 0.00%)      }
      .           }
      .           
      .           /// Something that can be converted into an expression to which we can
      .           /// apply a coercion.
      .           pub trait AsCoercionSite {
      .               fn as_coercion_site(&self) -> &hir::Expr<'_>;
      .           }
      .           
-- line 1732 ----------------------------------------
-- line 1736 ----------------------------------------
      .               }
      .           }
      .           
      .           impl<'a, T> AsCoercionSite for &'a T
      .           where
      .               T: AsCoercionSite,
      .           {
      .               fn as_coercion_site(&self) -> &hir::Expr<'_> {
    148 ( 0.00%)          (**self).as_coercion_site()
      .               }
      .           }
      .           
      .           impl AsCoercionSite for ! {
      .               fn as_coercion_site(&self) -> &hir::Expr<'_> {
      .                   unreachable!()
      .               }
      .           }
      .           
      .           impl AsCoercionSite for hir::Arm<'_> {
      .               fn as_coercion_site(&self) -> &hir::Expr<'_> {
     24 ( 0.00%)          &self.body
      .               }
      .           }

122,213 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_typeck/src/check/coercion.rs>

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./elf/../sysdeps/x86_64/dl-machine.h
  ./elf/dl-lookup.c
  ./elf/do-rel.h
  ./malloc/malloc.c
  ./string/../sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S
  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S
  ./string/../sysdeps/x86_64/strcmp.S

--------------------------------------------------------------------------------
Ir                   
--------------------------------------------------------------------------------
154,450,455 (39.94%)  events annotated

