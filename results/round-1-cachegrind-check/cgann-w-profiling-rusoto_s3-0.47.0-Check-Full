--------------------------------------------------------------------------------
I1 cache:         65536 B, 64 B, 4-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         67108864 B, 64 B, 64-way associative
Command:          /usr/home/liquid/.rustup/toolchains/w-profiling/bin/rustc --crate-name rusoto_s3 --edition=2018 src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --cfg feature="default" --cfg feature="native-tls" -C metadata=126e8c8e5598c178 -C extra-filename=-126e8c8e5598c178 --out-dir /usr/home/liquid/tmp/.tmpHsVnyb/target/debug/deps -L dependency=/usr/home/liquid/tmp/.tmpHsVnyb/target/debug/deps --extern async_trait=/usr/home/liquid/tmp/.tmpHsVnyb/target/debug/deps/libasync_trait-0d29c6b3600675a5.so --extern bytes=/usr/home/liquid/tmp/.tmpHsVnyb/target/debug/deps/libbytes-0538d4e007b92ef5.rmeta --extern futures=/usr/home/liquid/tmp/.tmpHsVnyb/target/debug/deps/libfutures-f6414133235d6df8.rmeta --extern rusoto_core=/usr/home/liquid/tmp/.tmpHsVnyb/target/debug/deps/librusoto_core-5adc27500b5ab062.rmeta --extern xml=/usr/home/liquid/tmp/.tmpHsVnyb/target/debug/deps/libxml-94b922f315b8037c.rmeta -L native=/usr/home/liquid/.linuxbrew/Cellar/openssl@1.1/1.1.1m/lib -Adeprecated -Aunknown-lints -Zincremental-verify-ich
Data file:        results/cgout-w-profiling-rusoto_s3-0.47.0-Check-Full
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Thresholds:       0.1
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                      
--------------------------------------------------------------------------------
19,483,923,008 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                    file:function
--------------------------------------------------------------------------------
691,574,717 ( 3.55%)  ./malloc/malloc.c:_int_free
446,069,083 ( 2.29%)  ./malloc/malloc.c:_int_malloc
418,016,155 ( 2.15%)  ./malloc/malloc.c:malloc
355,329,271 ( 1.82%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_avx_unaligned_erms
217,635,405 ( 1.12%)  ./malloc/malloc.c:free
113,389,945 ( 0.58%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
104,473,875 ( 0.54%)  ./elf/../elf/dl-tls.c:_dl_update_slotinfo
103,866,663 ( 0.53%)  /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/server.rs:<proc_macro::bridge::server::Dispatcher<proc_macro::bridge::server::MarkedTypes<rustc_expand::proc_macro_server::Rustc>> as proc_macro::bridge::server::DispatcherTrait>::dispatch
 84,975,895 ( 0.44%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lexer/src/unescape.rs:rustc_lexer::unescape::scan_escape
 77,834,570 ( 0.40%)  ./malloc/malloc.c:malloc_consolidate
 75,946,536 ( 0.39%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/hash/sip.rs:<std::collections::hash::map::DefaultHasher as core::hash::Hasher>::write
 73,455,545 ( 0.38%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/search.rs:<alloc::collections::btree::node::NodeRef<alloc::collections::btree::node::marker::Mut, core::num::nonzero::NonZeroU32, proc_macro::bridge::Marked<alloc::rc::Rc<rustc_span::SourceFile>, proc_macro::bridge::client::SourceFile>, alloc::collections::btree::node::marker::LeafOrInternal>>::search_tree::<core::num::nonzero::NonZeroU32>
 67,845,676 ( 0.35%)  /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/client.rs:proc_macro::bridge::scoped_cell::ScopedCell<T>::replace
 67,171,636 ( 0.34%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/search.rs:<alloc::collections::btree::node::NodeRef<alloc::collections::btree::node::marker::Mut, core::num::nonzero::NonZeroU32, proc_macro::bridge::Marked<rustc_expand::proc_macro_server::Ident, proc_macro::bridge::client::Ident>, alloc::collections::btree::node::marker::LeafOrInternal>>::search_tree::<core::num::nonzero::NonZeroU32>
 65,333,982 ( 0.34%)  /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs:__rdl_alloc
 64,885,254 ( 0.33%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs:<rustc_data_structures::sip128::SipHasher128>::short_write_process_buffer::<u64>
 63,588,811 ( 0.33%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lexer/src/unescape.rs:rustc_lexer::unescape::unescape_literal::<<rustc_ast::ast::LitKind>::from_lit_token::{closure#2}>
 61,389,432 ( 0.32%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::TyKind as core::cmp::PartialEq>::eq
 61,060,090 ( 0.31%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/str/traits.rs:core::str::traits::<impl core::cmp::PartialEq for str>::eq
 60,019,455 ( 0.31%)  ./malloc/malloc.c:realloc
 59,078,092 ( 0.30%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cmp.rs:<alloc::collections::btree::node::NodeRef<alloc::collections::btree::node::marker::Mut, core::num::nonzero::NonZeroU32, proc_macro::bridge::Marked<alloc::rc::Rc<rustc_span::SourceFile>, proc_macro::bridge::client::SourceFile>, alloc::collections::btree::node::marker::LeafOrInternal>>::search_tree::<core::num::nonzero::NonZeroU32>
 54,258,016 ( 0.28%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::Binder<rustc_middle::ty::PredicateKind>, rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>>::{closure#0}>
 53,210,513 ( 0.27%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs:<rustc_infer::infer::InferCtxt>::shallow_resolve_ty
 52,714,801 ( 0.27%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
 49,594,222 ( 0.25%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::CtxtInterners>::intern_ty
 48,597,011 ( 0.25%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilder<rustc_span::def_id::LocalDefId, (&rustc_middle::ty::context::TypeckResults, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_span::def_id::LocalDefId>
 48,172,200 ( 0.25%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cmp.rs:<alloc::collections::btree::node::NodeRef<alloc::collections::btree::node::marker::Mut, core::num::nonzero::NonZeroU32, proc_macro::bridge::Marked<rustc_expand::proc_macro_server::Ident, proc_macro::bridge::client::Ident>, alloc::collections::btree::node::marker::LeafOrInternal>>::search_tree::<core::num::nonzero::NonZeroU32>
 46,801,221 ( 0.24%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/cmp.rs:<[A] as core::slice::cmp::SlicePartialEq<B>>::equal
 46,007,010 ( 0.24%)  ./malloc/malloc.c:unlink_chunk.constprop.0
 45,362,545 ( 0.23%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::TyKind as core::hash::Hash>::hash::<rustc_hash::FxHasher>
 44,322,250 ( 0.23%)  ./elf/../elf/dl-tls.c:update_get_addr
 44,312,405 ( 0.23%)  /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/rpc.rs:<proc_macro::bridge::api_tags::Method as proc_macro::bridge::rpc::DecodeMut<()>>::decode
 43,525,512 ( 0.22%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs:<rustc_data_structures::sip128::SipHasher128>::short_write_process_buffer::<u64>
 42,036,357 ( 0.22%)  ./malloc/malloc.c:_int_realloc
 41,233,540 ( 0.21%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/search.rs:<alloc::collections::btree::map::BTreeMap<core::num::nonzero::NonZeroU32, proc_macro::bridge::Marked<rustc_ast::tokenstream::TokenStream, proc_macro::bridge::client::TokenStream>>>::insert
 40,984,367 ( 0.21%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs:core::ptr::drop_in_place<proc_macro::bridge::scoped_cell::ScopedCell<T>::replace::PutBackOnDrop<proc_macro::bridge::client::BridgeStateL>>
 40,968,364 ( 0.21%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<core::slice::iter::Iter<T> as core::iter::traits::iterator::Iterator>::next
 40,930,502 ( 0.21%)  ./elf/dl-lookup.c:_dl_lookup_symbol_x
 39,173,175 ( 0.20%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::RegionKind as core::cmp::PartialEq>::eq
 39,168,139 ( 0.20%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-1.0.86/src/token.rs:syn::token::parsing::peek_punct
 39,084,207 ( 0.20%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<[rustc_middle::ty::subst::GenericArg], rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>>::{closure#0}>
 38,795,162 ( 0.20%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::RegionKind as core::hash::Hash>::hash::<rustc_hash::FxHasher>
 38,701,655 ( 0.20%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs:<rustc_span::caching_source_map_view::CachingSourceMapView>::span_data_to_lines_and_cols
 37,741,810 ( 0.19%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cmp.rs:core::cmp::impls::<impl core::cmp::PartialEq<&B> for &A>::eq
 35,763,410 ( 0.18%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/mem/mod.rs:proc_macro::bridge::scoped_cell::ScopedCell<T>::replace
 35,759,881 ( 0.18%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::TyCtxt>::_intern_substs
 35,388,262 ( 0.18%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mut_ptr.rs:core::ptr::mut_ptr::<impl *mut T>::guaranteed_eq
 35,226,311 ( 0.18%)  /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/scoped_cell.rs:proc_macro::bridge::scoped_cell::ScopedCell<T>::replace
 34,987,820 ( 0.18%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cmp.rs:<alloc::collections::btree::map::BTreeMap<core::num::nonzero::NonZeroU32, proc_macro::bridge::Marked<rustc_ast::tokenstream::TokenStream, proc_macro::bridge::client::TokenStream>>>::insert
 34,875,036 ( 0.18%)  /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/rpc.rs:<core::result::Result<T,E> as proc_macro::bridge::rpc::DecodeMut<S>>::decode
 34,866,799 ( 0.18%)  ./elf/../sysdeps/x86_64/tls_get_addr.S:__tls_get_addr
 34,831,977 ( 0.18%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_dataflow/src/drop_flag_effects.rs:rustc_mir_dataflow::drop_flag_effects::on_all_children_bits::is_terminal_path
 34,696,671 ( 0.18%)  ./elf/dl-lookup.c:do_lookup_x
 33,856,632 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/rpc.rs:<proc_macro::bridge::api_tags::Method as proc_macro::bridge::rpc::Encode<S>>::encode
 33,817,557 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<rustc_middle::ty::context::TyCtxt>::_intern_substs
 32,860,529 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mut_ptr.rs:core::ptr::mut_ptr::<impl *mut T>::is_null
 32,451,577 ( 0.17%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<[rustc_middle::ty::subst::GenericArg], rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>>::{closure#0}>
 32,369,506 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs:<rustc_middle::hir::map::Map>::attrs
 32,309,400 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<alloc::collections::btree::node::NodeRef<alloc::collections::btree::node::marker::Mut, core::num::nonzero::NonZeroU32, proc_macro::bridge::Marked<alloc::rc::Rc<rustc_span::SourceFile>, proc_macro::bridge::client::SourceFile>, alloc::collections::btree::node::marker::LeafOrInternal>>::search_tree::<core::num::nonzero::NonZeroU32>
 32,074,704 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs:proc_macro::bridge::scoped_cell::ScopedCell<T>::replace
 31,600,662 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/string.rs:alloc::string::String::push
 30,938,322 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_borrowck/src/lib.rs:<rustc_borrowck::MirBorrowckCtxt>::access_place
 30,896,602 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/non_null.rs:core::ptr::non_null::NonNull<T>::as_ptr
 30,485,723 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/buffer.rs:proc_macro::bridge::scoped_cell::ScopedCell<T>::replace
 30,380,508 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/type_variable.rs:<rustc_infer::infer::type_variable::TypeVariableTable>::probe
 30,375,253 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
 30,031,941 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/search.rs:<alloc::collections::btree::node::NodeRef<alloc::collections::btree::node::marker::Mut, rustc_infer::infer::region_constraints::Constraint, rustc_infer::infer::SubregionOrigin, alloc::collections::btree::node::marker::LeafOrInternal>>::search_tree::<rustc_infer::infer::region_constraints::Constraint>
 30,014,053 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/raw_vec.rs:alloc::raw_vec::RawVec<T,A>::current_memory
 29,575,703 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<rustc_span::span_encoding::Span as rustc_data_structures::stable_hasher::HashStable<rustc_query_system::ich::hcx::StableHashingContext>>::hash_stable
 28,646,177 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/mem/mod.rs:core::mem::replace
 28,510,848 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/closure.rs:proc_macro::bridge::scoped_cell::ScopedCell<T>::replace
 28,303,056 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/cmp.rs:core::slice::cmp::<impl core::cmp::PartialEq<[B]> for [A]>::eq
 27,935,034 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs:core::unicode::unicode_data::grapheme_extend::lookup
 27,776,244 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/obligation_forest/mod.rs:<rustc_data_structures::obligation_forest::ObligationForest<rustc_trait_selection::traits::fulfill::PendingPredicateObligation>>::process_obligations::<rustc_trait_selection::traits::fulfill::FulfillProcessor, rustc_data_structures::obligation_forest::Outcome<rustc_trait_selection::traits::fulfill::PendingPredicateObligation, rustc_infer::traits::FulfillmentErrorCode>>
 26,624,793 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/buffer.rs:<proc_macro::bridge::api_tags::Method as proc_macro::bridge::rpc::Encode<S>>::encode
 26,427,489 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter.rs:core::slice::iter::Iter<T>::new
 26,291,533 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs:<rustc_span::source_map::SourceMap>::lookup_source_file_idx
 26,165,083 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/mir/traversal.rs:<rustc_middle::mir::traversal::Postorder>::traverse_successor
 26,054,971 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/str/validations.rs:core::str::converts::from_utf8
 25,937,064 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/result.rs:<core::result::Result<T,E> as core::ops::try_trait::Try>::branch
 25,661,892 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<alloc::collections::btree::node::NodeRef<alloc::collections::btree::node::marker::Mut, core::num::nonzero::NonZeroU32, proc_macro::bridge::Marked<rustc_expand::proc_macro_server::Ident, proc_macro::bridge::client::Ident>, alloc::collections::btree::node::marker::LeafOrInternal>>::search_tree::<core::num::nonzero::NonZeroU32>
 25,519,026 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_transform/src/simplify.rs:<rustc_mir_transform::simplify::CfgSimplifier>::simplify
 24,947,006 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/mem/mod.rs:core::ptr::drop_in_place<proc_macro::bridge::scoped_cell::ScopedCell<T>::replace::PutBackOnDrop<proc_macro::bridge::client::BridgeStateL>>
 24,887,853 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_privacy/src/lib.rs:<rustc_privacy::DefIdVisitorSkeleton<rustc_privacy::TypePrivacyVisitor> as rustc_middle::ty::fold::TypeVisitor>::visit_ty
 24,872,939 ( 0.13%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-1.0.86/src/buffer.rs:syn::buffer::Cursor::punct
 24,869,017 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs:alloc::string::String::push
 24,790,240 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/adapters/enumerate.rs:<core::iter::adapters::enumerate::Enumerate<I> as core::iter::traits::iterator::Iterator>::next
 24,478,086 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::CtxtInterners>::intern_predicate
 24,316,574 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/node.rs:<alloc::collections::btree::node::Handle<alloc::collections::btree::node::NodeRef<alloc::collections::btree::node::marker::Mut, core::num::nonzero::NonZeroU32, proc_macro::bridge::Marked<rustc_ast::tokenstream::TokenStream, proc_macro::bridge::client::TokenStream>, alloc::collections::btree::node::marker::Leaf>, alloc::collections::btree::node::marker::Edge>>::insert_recursing
 24,267,145 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs:core::ptr::read
 24,118,200 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_index/src/bit_set.rs:<rustc_index::bit_set::BitMatrix<rustc_middle::mir::Local, rustc_middle::mir::Local>>::union_row_with
 23,843,083 ( 0.12%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-1.0.86/src/ident.rs:syn::ident::accept_as_ident
 23,770,357 ( 0.12%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::sty::RegionKind>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::RegionKind, rustc_middle::ty::context::Interned<rustc_middle::ty::sty::RegionKind>>::{closure#0}>
 23,636,844 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/const_ptr.rs:core::ptr::const_ptr::<impl *const T>::guaranteed_eq
 23,587,254 ( 0.12%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::Binder<rustc_middle::ty::PredicateKind>, rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>>::{closure#0}>
 23,426,351 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/buffer.rs:<u32 as proc_macro::bridge::rpc::Encode<S>>::encode
 22,976,764 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/unicode/printable.rs:core::unicode::printable::check
 22,257,650 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/option.rs:core::option::Option<T>::map
 22,150,102 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:rustc_lexer::unescape::unescape_literal::<<rustc_ast::ast::LitKind>::from_lit_token::{closure#2}>
 21,948,498 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/const_ptr.rs:core::ptr::const_ptr::<impl *const T>::is_null
 21,604,052 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/hir/map/mod.rs:<rustc_middle::hir::map::Map>::find_parent_node
 21,454,631 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs:<rustc_span::span_encoding::Span as rustc_data_structures::stable_hasher::HashStable<rustc_query_system::ich::hcx::StableHashingContext>>::hash_stable
 21,209,738 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/graph/scc/mod.rs:<rustc_data_structures::graph::scc::SccsConstruction<rustc_borrowck::constraints::graph::RegionGraph<rustc_borrowck::constraints::graph::Normal>, rustc_borrowck::constraints::ConstraintSccIndex>>::start_walk_from
 21,046,723 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/relate.rs:rustc_middle::ty::relate::super_relate_tys::<rustc_infer::infer::combine::Generalizer>
 20,892,253 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs:<rustc_middle::ty::subst::SubstFolder as rustc_middle::ty::fold::TypeFolder>::fold_ty
 20,839,680 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/hir/map/mod.rs:<rustc_middle::hir::map::Map>::attrs
 20,469,040 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/mod.rs:<rustc_middle::ty::PredicateKind as core::hash::Hash>::hash::<rustc_hash::FxHasher>
 20,455,933 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/mir/terminator.rs:<rustc_middle::mir::terminator::TerminatorKind>::successors
 20,409,467 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/option.rs:<core::option::Option<T> as core::ops::try_trait::Try>::branch
 19,992,198 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<alloc::collections::btree::map::BTreeMap<core::num::nonzero::NonZeroU32, proc_macro::bridge::Marked<rustc_ast::tokenstream::TokenStream, proc_macro::bridge::client::TokenStream>>>::insert
 19,798,427 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/freshen.rs:<rustc_infer::infer::freshen::TypeFreshener as rustc_middle::ty::fold::TypeFolder>::fold_ty

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mut_ptr.rs
--------------------------------------------------------------------------------
Ir                   

-- line 28 ----------------------------------------
          .               /// ```
          .               /// let mut s = [1, 2, 3];
          .               /// let ptr: *mut u32 = s.as_mut_ptr();
          .               /// assert!(!ptr.is_null());
          .               /// ```
          .               #[stable(feature = "rust1", since = "1.0.0")]
          .               #[rustc_const_unstable(feature = "const_ptr_is_null", issue = "74939")]
          .               #[inline]
 10,110,932 ( 0.05%)      pub const fn is_null(self) -> bool {
          .                   // Compare via a cast to a thin pointer, so fat pointers are only
          .                   // considering their "data" part for null-ness.
 10,110,932 ( 0.05%)          (self as *mut u8).guaranteed_eq(null_mut())
 10,110,932 ( 0.05%)      }
          .           
          .               /// Casts to a pointer of another type.
          .               #[stable(feature = "ptr_cast", since = "1.38.0")]
          .               #[rustc_const_stable(feature = "const_ptr_cast", since = "1.38.0")]
          .               #[inline(always)]
          .               pub const fn cast<U>(self) -> *mut U {
          .                   self as _
          .               }
-- line 48 ----------------------------------------
-- line 299 ----------------------------------------
          .               #[inline(always)]
          .               pub const unsafe fn offset(self, count: isize) -> *mut T
          .               where
          .                   T: Sized,
          .               {
          .                   // SAFETY: the caller must uphold the safety contract for `offset`.
          .                   // The obtained pointer is valid for writes since the caller must
          .                   // guarantee that it points to the same allocated object as `self`.
135,513,787 ( 0.70%)          unsafe { intrinsics::offset(self, count) as *mut T }
          .               }
          .           
          .               /// Calculates the offset from a pointer using wrapping arithmetic.
          .               /// `count` is in units of T; e.g., a `count` of 3 represents a pointer
          .               /// offset of `3 * size_of::<T>()` bytes.
          .               ///
          .               /// # Safety
          .               ///
-- line 315 ----------------------------------------
-- line 360 ----------------------------------------
          .               #[must_use = "returns a new pointer rather than modifying its argument"]
          .               #[rustc_const_unstable(feature = "const_ptr_offset", issue = "71499")]
          .               #[inline(always)]
          .               pub const fn wrapping_offset(self, count: isize) -> *mut T
          .               where
          .                   T: Sized,
          .               {
          .                   // SAFETY: the `arith_offset` intrinsic has no prerequisites to be called.
      1,145 ( 0.00%)          unsafe { intrinsics::arith_offset(self, count) as *mut T }
          .               }
          .           
          .               /// Returns `None` if the pointer is null, or else returns a unique reference to
          .               /// the value wrapped in `Some`. If the value may be uninitialized, [`as_uninit_mut`]
          .               /// must be used instead.
          .               ///
          .               /// For the shared counterpart see [`as_ref`].
          .               ///
-- line 376 ----------------------------------------
-- line 492 ----------------------------------------
          .               /// affect the outcome, but just the performance.
          .               /// The consequences of using this method to make runtime and compile-time code behave
          .               /// differently have not been explored. This method should not be used to introduce such
          .               /// differences, and it should also not be stabilized before we have a better understanding
          .               /// of this issue.
          .               #[unstable(feature = "const_raw_ptr_comparison", issue = "53020")]
          .               #[rustc_const_unstable(feature = "const_raw_ptr_comparison", issue = "53020")]
          .               #[inline]
  7,583,199 ( 0.04%)      pub const fn guaranteed_eq(self, other: *mut T) -> bool
          .               where
          .                   T: Sized,
          .               {
 15,167,326 ( 0.08%)          intrinsics::ptr_guaranteed_eq(self as *const _, other as *const _)
 10,110,932 ( 0.05%)      }
          .           
          .               /// Returns whether two pointers are guaranteed to be unequal.
          .               ///
          .               /// At runtime this function behaves like `self != other`.
          .               /// However, in some contexts (e.g., compile-time evaluation),
          .               /// it is not always possible to determine the inequality of two pointers, so this function may
          .               /// spuriously return `false` for pointers that later actually turn out to be unequal.
          .               /// But when it returns `true`, the pointers are guaranteed to be unequal.
-- line 513 ----------------------------------------
-- line 1055 ----------------------------------------
          .               ///
          .               /// See [`ptr::drop_in_place`] for safety concerns and examples.
          .               ///
          .               /// [`ptr::drop_in_place`]: crate::ptr::drop_in_place()
          .               #[stable(feature = "pointer_methods", since = "1.26.0")]
          .               #[inline(always)]
          .               pub unsafe fn drop_in_place(self) {
          .                   // SAFETY: the caller must uphold the safety contract for `drop_in_place`.
        562 ( 0.00%)          unsafe { drop_in_place(self) }
          .               }
          .           
          .               /// Overwrites a memory location with the given value without reading or
          .               /// dropping the old value.
          .               ///
          .               /// See [`ptr::write`] for safety concerns and examples.
          .               ///
          .               /// [`ptr::write`]: crate::ptr::write()
-- line 1071 ----------------------------------------
-- line 1416 ----------------------------------------
          .               }
          .           }
          .           
          .           // Equality for pointers
          .           #[stable(feature = "rust1", since = "1.0.0")]
          .           impl<T: ?Sized> PartialEq for *mut T {
          .               #[inline(always)]
          .               fn eq(&self, other: &*mut T) -> bool {
    190,013 ( 0.00%)          *self == *other
          .               }
          .           }
          .           
          .           #[stable(feature = "rust1", since = "1.0.0")]
          .           impl<T: ?Sized> Eq for *mut T {}
          .           
          .           #[stable(feature = "rust1", since = "1.0.0")]
          .           impl<T: ?Sized> Ord for *mut T {
-- line 1432 ----------------------------------------

  6,803,217 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mut_ptr.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/str/validations.rs
--------------------------------------------------------------------------------
Ir                  

-- line 4 ----------------------------------------
         .           
         .           use super::Utf8Error;
         .           
         .           /// Returns the initial codepoint accumulator for the first byte.
         .           /// The first byte is special, only want bottom 5 bits for width 2, 4 bits
         .           /// for width 3, and 3 bits for width 4.
         .           #[inline]
         .           const fn utf8_first_byte(byte: u8, width: u32) -> u32 {
     1,810 ( 0.00%)      (byte & (0x7F >> width)) as u32
         .           }
         .           
         .           /// Returns the value of `ch` updated with continuation byte `byte`.
         .           #[inline]
         .           const fn utf8_acc_cont_byte(ch: u32, byte: u8) -> u32 {
     4,926 ( 0.00%)      (ch << 6) | (byte & CONT_MASK) as u32
         .           }
         .           
         .           /// Checks whether the byte is a UTF-8 continuation byte (i.e., starts with the
         .           /// bits `10`).
         .           #[inline]
         .           pub(super) const fn utf8_is_cont_byte(byte: u8) -> bool {
         .               (byte as i8) < -64
         .           }
-- line 26 ----------------------------------------
-- line 28 ----------------------------------------
         .           /// Reads the next code point out of a byte iterator (assuming a
         .           /// UTF-8-like encoding).
         .           ///
         .           /// # Safety
         .           ///
         .           /// `bytes` must produce a valid UTF-8-like (UTF-8 or WTF-8) string
         .           #[unstable(feature = "str_internals", issue = "none")]
         .           #[inline]
 1,931,676 ( 0.01%)  pub unsafe fn next_code_point<'a, I: Iterator<Item = &'a u8>>(bytes: &mut I) -> Option<u32> {
         .               // Decode UTF-8
17,086,486 ( 0.09%)      let x = *bytes.next()?;
17,218,530 ( 0.09%)      if x < 128 {
 1,867,123 ( 0.01%)          return Some(x as u32);
         .               }
         .           
         .               // Multibyte case follows
         .               // Decode from a byte combination out of: [[[x y] z] w]
         .               // NOTE: Performance is sensitive to the exact formulation here
         .               let init = utf8_first_byte(x, 2);
         .               // SAFETY: `bytes` produces an UTF-8-like string,
         .               // so the iterator must produce a value here.
         .               let y = unsafe { *bytes.next().unwrap_unchecked() };
         .               let mut ch = utf8_acc_cont_byte(init, y);
     2,012 ( 0.00%)      if x >= 0xE0 {
         .                   // [[x y z] w] case
         .                   // 5th bit in 0xE0 .. 0xEF is always clear, so `init` is still valid
         .                   // SAFETY: `bytes` produces an UTF-8-like string,
         .                   // so the iterator must produce a value here.
         .                   let z = unsafe { *bytes.next().unwrap_unchecked() };
         .                   let y_z = utf8_acc_cont_byte((y & CONT_MASK) as u32, z);
         .                   ch = init << 12 | y_z;
     1,726 ( 0.00%)          if x >= 0xF0 {
         .                       // [x y z w] case
         .                       // use only the lower 3 bits of `init`
         .                       // SAFETY: `bytes` produces an UTF-8-like string,
         .                       // so the iterator must produce a value here.
         .                       let w = unsafe { *bytes.next().unwrap_unchecked() };
         .                       ch = (init & 7) << 18 | utf8_acc_cont_byte(y_z, w);
         .                   }
         .               }
         .           
         .               Some(ch)
 3,219,460 ( 0.02%)  }
         .           
         .           /// Reads the last code point out of a byte iterator (assuming a
         .           /// UTF-8-like encoding).
         .           ///
         .           /// # Safety
         .           ///
         .           /// `bytes` must produce a valid UTF-8-like (UTF-8 or WTF-8) string
         .           #[inline]
    78,099 ( 0.00%)  pub(super) unsafe fn next_code_point_reverse<'a, I>(bytes: &mut I) -> Option<u32>
         .           where
         .               I: DoubleEndedIterator<Item = &'a u8>,
         .           {
         .               // Decode UTF-8
   312,396 ( 0.00%)      let w = match *bytes.next_back()? {
   284,446 ( 0.00%)          next_byte if next_byte < 128 => return Some(next_byte as u32),
         .                   back_byte => back_byte,
         .               };
         .           
         .               // Multibyte case follows
         .               // Decode from a byte combination out of: [x [y [z w]]]
         .               let mut ch;
         .               // SAFETY: `bytes` produces an UTF-8-like string,
         .               // so the iterator must produce a value here.
-- line 93 ----------------------------------------
-- line 105 ----------------------------------------
         .                       ch = utf8_first_byte(x, 4);
         .                       ch = utf8_acc_cont_byte(ch, y);
         .                   }
         .                   ch = utf8_acc_cont_byte(ch, z);
         .               }
         .               ch = utf8_acc_cont_byte(ch, w);
         .           
         .               Some(ch)
   130,165 ( 0.00%)  }
         .           
         .           // use truncation to fit u64 into usize
         .           const NONASCII_MASK: usize = 0x80808080_80808080u64 as usize;
         .           
         .           /// Returns `true` if any byte in the word `x` is nonascii (>= 128).
         .           #[inline]
         .           const fn contains_nonascii(x: usize) -> bool {
   114,158 ( 0.00%)      (x & NONASCII_MASK) != 0
         .           }
         .           
         .           /// Walks through `v` checking that it's a valid UTF-8 sequence,
         .           /// returning `Ok(())` in that case, or, if it is invalid, `Err(err)`.
         .           #[inline(always)]
         .           #[rustc_const_unstable(feature = "str_internals", issue = "none")]
         .           pub(super) const fn run_utf8_validation(v: &[u8]) -> Result<(), Utf8Error> {
         .               let mut index = 0;
         .               let len = v.len();
         .           
         .               let usize_bytes = mem::size_of::<usize>();
         .               let ascii_block_size = 2 * usize_bytes;
   970,986 ( 0.00%)      let blocks_end = if len >= ascii_block_size { len - ascii_block_size + 1 } else { 0 };
         .               let align = v.as_ptr().align_offset(usize_bytes);
         .           
 4,071,054 ( 0.02%)      while index < len {
         .                   let old_offset = index;
         .                   macro_rules! err {
         .                       ($error_len: expr) => {
         .                           return Err(Utf8Error { valid_up_to: old_offset, error_len: $error_len })
         .                       };
         .                   }
         .           
         .                   macro_rules! next {
-- line 145 ----------------------------------------
-- line 148 ----------------------------------------
         .                           // we needed data, but there was none: error!
         .                           if index >= len {
         .                               err!(None)
         .                           }
         .                           v[index]
         .                       }};
         .                   }
         .           
 1,796,544 ( 0.01%)          let first = v[index];
 3,593,088 ( 0.02%)          if first >= 128 {
         .                       let w = utf8_char_width(first);
         .                       // 2-byte encoding is for codepoints  \u{0080} to  \u{07ff}
         .                       //        first  C2 80        last DF BF
         .                       // 3-byte encoding is for codepoints  \u{0800} to  \u{ffff}
         .                       //        first  E0 A0 80     last EF BF BF
         .                       //   excluding surrogates codepoints  \u{d800} to  \u{dfff}
         .                       //               ED A0 80 to       ED BF BF
         .                       // 4-byte encoding is for codepoints \u{1000}0 to \u{10ff}ff
-- line 165 ----------------------------------------
-- line 169 ----------------------------------------
         .                       //
         .                       // https://tools.ietf.org/html/rfc3629
         .                       // UTF8-1      = %x00-7F
         .                       // UTF8-2      = %xC2-DF UTF8-tail
         .                       // UTF8-3      = %xE0 %xA0-BF UTF8-tail / %xE1-EC 2( UTF8-tail ) /
         .                       //               %xED %x80-9F UTF8-tail / %xEE-EF 2( UTF8-tail )
         .                       // UTF8-4      = %xF0 %x90-BF 2( UTF8-tail ) / %xF1-F3 3( UTF8-tail ) /
         .                       //               %xF4 %x80-8F 2( UTF8-tail )
       438 ( 0.00%)              match w {
         .                           2 => {
        85 ( 0.00%)                      if next!() as i8 >= -64 {
         .                                   err!(Some(1))
         .                               }
         .                           }
         .                           3 => {
       672 ( 0.00%)                      match (first, next!()) {
         .                                   (0xE0, 0xA0..=0xBF)
       588 ( 0.00%)                          | (0xE1..=0xEC, 0x80..=0xBF)
         .                                   | (0xED, 0x80..=0x9F)
         .                                   | (0xEE..=0xEF, 0x80..=0xBF) => {}
         .                                   _ => err!(Some(1)),
         .                               }
       420 ( 0.00%)                      if next!() as i8 >= -64 {
         .                                   err!(Some(2))
         .                               }
         .                           }
         .                           4 => {
         .                               match (first, next!()) {
         .                                   (0xF0, 0x90..=0xBF) | (0xF1..=0xF3, 0x80..=0xBF) | (0xF4, 0x80..=0x8F) => {}
         .                                   _ => err!(Some(1)),
         .                               }
-- line 199 ----------------------------------------
-- line 201 ----------------------------------------
         .                                   err!(Some(2))
         .                               }
         .                               if next!() as i8 >= -64 {
         .                                   err!(Some(3))
         .                               }
         .                           }
         .                           _ => err!(Some(1)),
         .                       }
       303 ( 0.00%)              index += 1;
         .                   } else {
         .                       // Ascii case, try to skip forward quickly.
         .                       // When the pointer is aligned, read 2 words of data per iteration
         .                       // until we find a word containing a non-ascii byte.
 5,476,542 ( 0.03%)              if align != usize::MAX && align.wrapping_sub(index) % usize_bytes == 0 {
         .                           let ptr = v.as_ptr();
   402,540 ( 0.00%)                  while index < blocks_end {
         .                               // SAFETY: since `align - index` and `ascii_block_size` are
         .                               // multiples of `usize_bytes`, `block = ptr.add(index)` is
         .                               // always aligned with a `usize` so it's safe to dereference
         .                               // both `block` and `block.offset(1)`.
         .                               unsafe {
         .                                   let block = ptr.add(index) as *const usize;
         .                                   // break if there is a nonascii byte
   114,158 ( 0.00%)                          let zu = contains_nonascii(*block);
         .                                   let zv = contains_nonascii(*block.offset(1));
   228,316 ( 0.00%)                          if zu || zv {
         .                                       break;
         .                                   }
         .                               }
   228,114 ( 0.00%)                      index += ascii_block_size;
         .                           }
         .                           // step from the point where the wordwise loop stopped
 2,455,215 ( 0.01%)                  while index < len && v[index] < 128 {
   506,587 ( 0.00%)                      index += 1;
         .                           }
         .                       } else {
 1,709,230 ( 0.01%)                  index += 1;
         .                       }
         .                   }
         .               }
         .           
         .               Ok(())
         .           }
         .           
         .           // https://tools.ietf.org/html/rfc3629
-- line 245 ----------------------------------------
-- line 263 ----------------------------------------
         .               4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // F
         .           ];
         .           
         .           /// Given a first byte, determines how many bytes are in this UTF-8 character.
         .           #[unstable(feature = "str_internals", issue = "none")]
         .           #[must_use]
         .           #[inline]
         .           pub const fn utf8_char_width(b: u8) -> usize {
       202 ( 0.00%)      UTF8_CHAR_WIDTH[b as usize] as usize
         .           }
         .           
         .           /// Mask of the value bits of a continuation byte.
         .           const CONT_MASK: u8 = 0b0011_1111;
         .           
         .           // truncate `&str` to length at most equal to `max`
         .           // return `true` if it were truncated, and the new str.
         .           pub(super) fn truncate_to_char_boundary(s: &str, mut max: usize) -> (bool, &str) {
-- line 279 ----------------------------------------

24,942,410 ( 0.13%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/str/validations.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs
--------------------------------------------------------------------------------
Ir                  

-- line 91 ----------------------------------------
         .           // maximum of number bytes needed to fill an 8-byte-sized element on which
         .           // SipHash operates. Note that for variable-sized copies which are known to be
         .           // less than 8 bytes, this function will perform more work than necessary unless
         .           // the compiler is able to optimize the extra work away.
         .           #[inline]
         .           unsafe fn copy_nonoverlapping_small(src: *const u8, dst: *mut u8, count: usize) {
         .               debug_assert!(count <= 8);
         .           
   271,312 ( 0.00%)      if count == 8 {
         .                   ptr::copy_nonoverlapping(src, dst, 8);
         .                   return;
         .               }
         .           
         .               let mut i = 0;
   306,938 ( 0.00%)      if i + 3 < count {
         .                   ptr::copy_nonoverlapping(src.add(i), dst.add(i), 4);
         .                   i += 4;
         .               }
         .           
   659,258 ( 0.00%)      if i + 1 < count {
         .                   ptr::copy_nonoverlapping(src.add(i), dst.add(i), 2);
    82,817 ( 0.00%)          i += 2
         .               }
         .           
   306,938 ( 0.00%)      if i < count {
   204,640 ( 0.00%)          *dst.add(i) = *src.add(i);
         .                   i += 1;
         .               }
         .           
         .               debug_assert_eq!(i, count);
         .           }
         .           
         .           // # Implementation
         .           //
-- line 124 ----------------------------------------
-- line 201 ----------------------------------------
         .           
         .                   hasher
         .               }
         .           
         .               // A specialized write function for values with size <= 8.
         .               #[inline]
         .               fn short_write<T>(&mut self, x: T) {
         .                   let size = mem::size_of::<T>();
 4,524,927 ( 0.02%)          let nbuf = self.nbuf;
         .                   debug_assert!(size <= 8);
         .                   debug_assert!(nbuf < BUFFER_SIZE);
         .                   debug_assert!(nbuf + size < BUFFER_WITH_SPILL_SIZE);
         .           
30,606,260 ( 0.16%)          if nbuf + size < BUFFER_SIZE {
         .                       unsafe {
         .                           // The memcpy call is optimized away because the size is known.
         .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
         .                           ptr::copy_nonoverlapping(&x as *const _ as *const u8, dst, size);
         .                       }
         .           
 9,476,152 ( 0.05%)              self.nbuf = nbuf + size;
         .           
         .                       return;
         .                   }
         .           
 1,555,393 ( 0.01%)          unsafe { self.short_write_process_buffer(x) }
         .               }
         .           
         .               // A specialized write function for values with size <= 8 that should only
         .               // be called when the write would cause the buffer to fill.
         .               //
         .               // SAFETY: the write of `x` into `self.buf` starting at byte offset
         .               // `self.nbuf` must cause `self.buf` to become fully initialized (and not
         .               // overflow) if it wasn't already.
         .               #[inline(never)]
   468,028 ( 0.00%)      unsafe fn short_write_process_buffer<T>(&mut self, x: T) {
         .                   let size = mem::size_of::<T>();
   468,028 ( 0.00%)          let nbuf = self.nbuf;
         .                   debug_assert!(size <= 8);
         .                   debug_assert!(nbuf < BUFFER_SIZE);
         .                   debug_assert!(nbuf + size >= BUFFER_SIZE);
         .                   debug_assert!(nbuf + size < BUFFER_WITH_SPILL_SIZE);
         .           
         .                   // Copy first part of input into end of buffer, possibly into spill
         .                   // element. The memcpy call is optimized away because the size is known.
         .                   let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
         .                   ptr::copy_nonoverlapping(&x as *const _ as *const u8, dst, size);
         .           
         .                   // Process buffer.
         .                   for i in 0..BUFFER_CAPACITY {
 4,680,280 ( 0.02%)              let elem = self.buf.get_unchecked(i).assume_init().to_le();
 3,744,224 ( 0.02%)              self.state.v3 ^= elem;
         .                       Sip24Rounds::c_rounds(&mut self.state);
 4,212,252 ( 0.02%)              self.state.v0 ^= elem;
         .                   }
         .           
         .                   // Copy remaining input into start of buffer by copying size - 1
         .                   // elements from spill (at most size - 1 bytes could have overflowed
         .                   // into the spill). The memcpy call is optimized away because the size
         .                   // is known. And the whole copy is optimized away for size == 1.
         .                   let src = self.buf.get_unchecked(BUFFER_SPILL_INDEX) as *const _ as *const u8;
         .                   ptr::copy_nonoverlapping(src, self.buf.as_mut_ptr() as *mut u8, size - 1);
         .           
         .                   // This function should only be called when the write fills the buffer.
         .                   // Therefore, when size == 1, the new `self.nbuf` must be zero. The size
         .                   // is statically known, so the branch is optimized away.
 2,206,956 ( 0.01%)          self.nbuf = if size == 1 { 0 } else { nbuf + size - BUFFER_SIZE };
 1,872,112 ( 0.01%)          self.processed += BUFFER_SIZE;
   936,056 ( 0.00%)      }
         .           
         .               // A write function for byte slices.
         .               #[inline]
         .               fn slice_write(&mut self, msg: &[u8]) {
         .                   let length = msg.len();
    36,659 ( 0.00%)          let nbuf = self.nbuf;
         .                   debug_assert!(nbuf < BUFFER_SIZE);
         .           
 1,011,533 ( 0.01%)          if nbuf + length < BUFFER_SIZE {
         .                       unsafe {
         .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
         .           
   360,720 ( 0.00%)                  if length <= 8 {
         .                               copy_nonoverlapping_small(msg.as_ptr(), dst, length);
         .                           } else {
         .                               // This memcpy is *not* optimized away.
         .                               ptr::copy_nonoverlapping(msg.as_ptr(), dst, length);
         .                           }
         .                       }
         .           
   180,369 ( 0.00%)              self.nbuf = nbuf + length;
         .           
         .                       return;
         .                   }
         .           
   182,564 ( 0.00%)          unsafe { self.slice_write_process_buffer(msg) }
         .               }
         .           
         .               // A write function for byte slices that should only be called when the
         .               // write would cause the buffer to fill.
         .               //
         .               // SAFETY: `self.buf` must be initialized up to the byte offset `self.nbuf`,
         .               // and `msg` must contain enough bytes to initialize the rest of the element
         .               // containing the byte offset `self.nbuf`.
         .               #[inline(never)]
   105,135 ( 0.00%)      unsafe fn slice_write_process_buffer(&mut self, msg: &[u8]) {
         .                   let length = msg.len();
    21,027 ( 0.00%)          let nbuf = self.nbuf;
         .                   debug_assert!(nbuf < BUFFER_SIZE);
         .                   debug_assert!(nbuf + length >= BUFFER_SIZE);
         .           
         .                   // Always copy first part of input into current element of buffer.
         .                   // This function should only be called when the write fills the buffer,
         .                   // so we know that there is enough input to fill the current element.
    63,081 ( 0.00%)          let valid_in_elem = nbuf % ELEM_SIZE;
    21,027 ( 0.00%)          let needed_in_elem = ELEM_SIZE - valid_in_elem;
         .           
         .                   let src = msg.as_ptr();
         .                   let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
         .                   copy_nonoverlapping_small(src, dst, needed_in_elem);
         .           
         .                   // Process buffer.
         .           
         .                   // Using `nbuf / ELEM_SIZE + 1` rather than `(nbuf + needed_in_elem) /
         .                   // ELEM_SIZE` to show the compiler that this loop's upper bound is > 0.
         .                   // We know that is true, because last step ensured we have a full
         .                   // element in the buffer.
    42,054 ( 0.00%)          let last = nbuf / ELEM_SIZE + 1;
         .           
         .                   for i in 0..last {
   154,533 ( 0.00%)              let elem = self.buf.get_unchecked(i).assume_init().to_le();
   175,560 ( 0.00%)              self.state.v3 ^= elem;
         .                       Sip24Rounds::c_rounds(&mut self.state);
   309,066 ( 0.00%)              self.state.v0 ^= elem;
         .                   }
         .           
         .                   // Process the remaining element-sized chunks of input.
         .                   let mut processed = needed_in_elem;
    42,054 ( 0.00%)          let input_left = length - processed;
    34,146 ( 0.00%)          let elems_left = input_left / ELEM_SIZE;
         .                   let extra_bytes_left = input_left % ELEM_SIZE;
         .           
         .                   for _ in 0..elems_left {
    74,351 ( 0.00%)              let elem = (msg.as_ptr().add(processed) as *const u64).read_unaligned().to_le();
    74,351 ( 0.00%)              self.state.v3 ^= elem;
         .                       Sip24Rounds::c_rounds(&mut self.state);
    74,351 ( 0.00%)              self.state.v0 ^= elem;
   148,702 ( 0.00%)              processed += ELEM_SIZE;
         .                   }
         .           
         .                   // Copy remaining input into start of buffer.
         .                   let src = msg.as_ptr().add(processed);
         .                   let dst = self.buf.as_mut_ptr() as *mut u8;
         .                   copy_nonoverlapping_small(src, dst, extra_bytes_left);
         .           
    21,027 ( 0.00%)          self.nbuf = extra_bytes_left;
   105,135 ( 0.00%)          self.processed += nbuf + processed;
   126,162 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn finish128(mut self) -> (u64, u64) {
         .                   debug_assert!(self.nbuf < BUFFER_SIZE);
         .           
         .                   // Process full elements in buffer.
   139,944 ( 0.00%)          let last = self.nbuf / ELEM_SIZE;
         .           
         .                   // Since we're consuming self, avoid updating members for a potential
         .                   // performance gain.
   186,592 ( 0.00%)          let mut state = self.state;
         .           
         .                   for i in 0..last {
   136,897 ( 0.00%)              let elem = unsafe { self.buf.get_unchecked(i).assume_init().to_le() };
   136,897 ( 0.00%)              state.v3 ^= elem;
         .                       Sip24Rounds::c_rounds(&mut state);
   136,897 ( 0.00%)              state.v0 ^= elem;
         .                   }
         .           
         .                   // Get remaining partial element.
    93,296 ( 0.00%)          let elem = if self.nbuf % ELEM_SIZE != 0 {
         .                       unsafe {
         .                           // Ensure element is initialized by writing zero bytes. At most
         .                           // `ELEM_SIZE - 1` are required given the above check. It's safe
         .                           // to write this many because we have the spill and we maintain
         .                           // `self.nbuf` such that this write will start before the spill.
         .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(self.nbuf);
         .                           ptr::write_bytes(dst, 0, ELEM_SIZE - 1);
    40,890 ( 0.00%)                  self.buf.get_unchecked(last).assume_init().to_le()
         .                       }
         .                   } else {
         .                       0
         .                   };
         .           
         .                   // Finalize the hash.
   134,186 ( 0.00%)          let length = self.processed + self.nbuf;
    93,294 ( 0.00%)          let b: u64 = ((length as u64 & 0xff) << 56) | elem;
         .           
    46,647 ( 0.00%)          state.v3 ^= b;
         .                   Sip24Rounds::c_rounds(&mut state);
    46,647 ( 0.00%)          state.v0 ^= b;
         .           
    46,647 ( 0.00%)          state.v2 ^= 0xee;
         .                   Sip24Rounds::d_rounds(&mut state);
   155,576 ( 0.00%)          let _0 = state.v0 ^ state.v1 ^ state.v2 ^ state.v3;
         .           
    62,280 ( 0.00%)          state.v1 ^= 0xdd;
         .                   Sip24Rounds::d_rounds(&mut state);
    62,280 ( 0.00%)          let _1 = state.v0 ^ state.v1 ^ state.v2 ^ state.v3;
         .           
         .                   (_0, _1)
         .               }
         .           }
         .           
         .           impl Hasher for SipHasher128 {
         .               #[inline]
         .               fn write_u8(&mut self, i: u8) {
-- line 414 ----------------------------------------
-- line 471 ----------------------------------------
         .           }
         .           
         .           #[derive(Debug, Clone, Default)]
         .           struct Sip24Rounds;
         .           
         .           impl Sip24Rounds {
         .               #[inline]
         .               fn c_rounds(state: &mut State) {
17,157,717 ( 0.09%)          compress!(state);
18,494,291 ( 0.09%)          compress!(state);
         .               }
         .           
         .               #[inline]
         .               fn d_rounds(state: &mut State) {
   311,148 ( 0.00%)          compress!(state);
   311,148 ( 0.00%)          compress!(state);
   311,148 ( 0.00%)          compress!(state);
   264,502 ( 0.00%)          compress!(state);
         .               }
         .           }

 3,556,812 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_privacy/src/lib.rs
--------------------------------------------------------------------------------
Ir                 

-- line 59 ----------------------------------------
        .                   &mut self,
        .                   def_id: DefId,
        .                   kind: &str,
        .                   descr: &dyn fmt::Display,
        .               ) -> ControlFlow<Self::BreakTy>;
        .           
        .               /// Not overridden, but used to actually visit types and traits.
        .               fn skeleton(&mut self) -> DefIdVisitorSkeleton<'_, 'tcx, Self> {
1,677,174 ( 0.01%)          DefIdVisitorSkeleton {
        .                       def_id_visitor: self,
        .                       visited_opaque_tys: Default::default(),
        .                       dummy: Default::default(),
        .                   }
        .               }
   23,130 ( 0.00%)      fn visit(&mut self, ty_fragment: impl TypeFoldable<'tcx>) -> ControlFlow<Self::BreakTy> {
        .                   ty_fragment.visit_with(&mut self.skeleton())
   38,550 ( 0.00%)      }
   11,328 ( 0.00%)      fn visit_trait(&mut self, trait_ref: TraitRef<'tcx>) -> ControlFlow<Self::BreakTy> {
        .                   self.skeleton().visit_trait(trait_ref)
   11,328 ( 0.00%)      }
        .               fn visit_projection_ty(
        .                   &mut self,
        .                   projection: ty::ProjectionTy<'tcx>,
        .               ) -> ControlFlow<Self::BreakTy> {
      768 ( 0.00%)          self.skeleton().visit_projection_ty(projection)
        .               }
        .               fn visit_predicates(
        .                   &mut self,
        .                   predicates: ty::GenericPredicates<'tcx>,
        .               ) -> ControlFlow<Self::BreakTy> {
   14,682 ( 0.00%)          self.skeleton().visit_predicates(predicates)
        .               }
        .           }
        .           
        .           struct DefIdVisitorSkeleton<'v, 'tcx, V: ?Sized> {
        .               def_id_visitor: &'v mut V,
        .               visited_opaque_tys: FxHashSet<DefId>,
        .               dummy: PhantomData<TyCtxt<'tcx>>,
        .           }
        .           
        .           impl<'tcx, V> DefIdVisitorSkeleton<'_, 'tcx, V>
        .           where
        .               V: DefIdVisitor<'tcx> + ?Sized,
        .           {
        .               fn visit_trait(&mut self, trait_ref: TraitRef<'tcx>) -> ControlFlow<V::BreakTy> {
    1,888 ( 0.00%)          let TraitRef { def_id, substs } = trait_ref;
  377,865 ( 0.00%)          self.def_id_visitor.visit_def_id(def_id, "trait", &trait_ref.print_only_trait_path())?;
    1,888 ( 0.00%)          if self.def_id_visitor.shallow() { ControlFlow::CONTINUE } else { substs.visit_with(self) }
        .               }
        .           
   67,200 ( 0.00%)      fn visit_projection_ty(
        .                   &mut self,
        .                   projection: ty::ProjectionTy<'tcx>,
        .               ) -> ControlFlow<V::BreakTy> {
   53,760 ( 0.00%)          let (trait_ref, assoc_substs) =
   13,440 ( 0.00%)              projection.trait_ref_and_own_substs(self.def_id_visitor.tcx());
        .                   self.visit_trait(trait_ref)?;
        .                   if self.def_id_visitor.shallow() {
        .                       ControlFlow::CONTINUE
        .                   } else {
        .                       assoc_substs.iter().try_for_each(|subst| subst.visit_with(self))
        .                   }
   60,480 ( 0.00%)      }
        .           
        .               fn visit_predicate(&mut self, predicate: ty::Predicate<'tcx>) -> ControlFlow<V::BreakTy> {
   14,243 ( 0.00%)          match predicate.kind().skip_binder() {
        .                       ty::PredicateKind::Trait(ty::TraitPredicate {
        .                           trait_ref,
        .                           constness: _,
        .                           polarity: _,
        .                       }) => self.visit_trait(trait_ref),
        .                       ty::PredicateKind::Projection(ty::ProjectionPredicate { projection_ty, term }) => {
       18 ( 0.00%)                  term.visit_with(self)?;
   13,609 ( 0.00%)                  self.visit_projection_ty(projection_ty)
        .                       }
        .                       ty::PredicateKind::TypeOutlives(ty::OutlivesPredicate(ty, _region)) => {
        .                           ty.visit_with(self)
        .                       }
        .                       ty::PredicateKind::RegionOutlives(..) => ControlFlow::CONTINUE,
        .                       ty::PredicateKind::ConstEvaluatable(uv)
        .                           if self.def_id_visitor.tcx().features().generic_const_exprs =>
        .                       {
-- line 140 ----------------------------------------
-- line 157 ----------------------------------------
        .                       ACNode::Leaf(leaf) => self.visit_const(leaf),
        .                       ACNode::Cast(_, _, ty) => self.visit_ty(ty),
        .                       ACNode::Binop(..) | ACNode::UnaryOp(..) | ACNode::FunctionCall(_, _) => {
        .                           ControlFlow::CONTINUE
        .                       }
        .                   })
        .               }
        .           
  102,830 ( 0.00%)      fn visit_predicates(
        .                   &mut self,
        .                   predicates: ty::GenericPredicates<'tcx>,
        .               ) -> ControlFlow<V::BreakTy> {
        .                   let ty::GenericPredicates { parent: _, predicates } = predicates;
        .                   predicates.iter().try_for_each(|&(predicate, _span)| self.visit_predicate(predicate))
  117,520 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx, V> TypeVisitor<'tcx> for DefIdVisitorSkeleton<'_, 'tcx, V>
        .           where
        .               V: DefIdVisitor<'tcx> + ?Sized,
        .           {
        .               type BreakTy = V::BreakTy;
        .           
5,684,921 ( 0.03%)      fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<V::BreakTy> {
  635,477 ( 0.00%)          let tcx = self.def_id_visitor.tcx();
        .                   // InternalSubsts are not visited here because they are visited below in `super_visit_with`.
3,137,497 ( 0.02%)          match *ty.kind() {
1,036,212 ( 0.01%)              ty::Adt(&ty::AdtDef { did: def_id, .. }, ..)
        .                       | ty::Foreign(def_id)
        .                       | ty::FnDef(def_id, ..)
        .                       | ty::Closure(def_id, ..)
        .                       | ty::Generator(def_id, ..) => {
4,607,598 ( 0.02%)                  self.def_id_visitor.visit_def_id(def_id, "type", &ty)?;
        .                           if self.def_id_visitor.shallow() {
        .                               return ControlFlow::CONTINUE;
        .                           }
        .                           // Default type visitor doesn't visit signatures of fn types.
        .                           // Something like `fn() -> Priv {my_func}` is considered a private type even if
        .                           // `my_func` is public, so we need to visit signatures.
1,037,576 ( 0.01%)                  if let ty::FnDef(..) = ty.kind() {
        .                               tcx.fn_sig(def_id).visit_with(self)?;
        .                           }
        .                           // Inherent static methods don't have self type in substs.
        .                           // Something like `fn() {my_method}` type of the method
        .                           // `impl Pub<Priv> { pub fn my_method() {} }` is considered a private type,
        .                           // so we need to visit the self type additionally.
1,552,456 ( 0.01%)                  if let Some(assoc_item) = tcx.opt_associated_item(def_id) {
   63,636 ( 0.00%)                      if let ty::ImplContainer(impl_def_id) = assoc_item.container {
   12,316 ( 0.00%)                          tcx.type_of(impl_def_id).visit_with(self)?;
        .                               }
        .                           }
        .                       }
    6,256 ( 0.00%)              ty::Projection(proj) => {
        .                           if self.def_id_visitor.skip_assoc_tys() {
        .                               // Visitors searching for minimal visibility/reachability want to
        .                               // conservatively approximate associated types like `<Type as Trait>::Alias`
        .                               // as visible/reachable even if both `Type` and `Trait` are private.
        .                               // Ideally, associated types should be substituted in the same way as
        .                               // free type aliases, but this isn't done yet.
        .                               return ControlFlow::CONTINUE;
        .                           }
        .                           // This will also visit substs if necessary, so we don't need to recurse.
   31,278 ( 0.00%)                  return self.visit_projection_ty(proj);
        .                       }
    3,736 ( 0.00%)              ty::Dynamic(predicates, ..) => {
        .                           // All traits in the list are considered the "primary" part of the type
        .                           // and are visited by shallow visitors.
   33,152 ( 0.00%)                  for predicate in predicates {
   43,152 ( 0.00%)                      let trait_ref = match predicate.skip_binder() {
   20,112 ( 0.00%)                          ty::ExistentialPredicate::Trait(trait_ref) => trait_ref,
   18,624 ( 0.00%)                          ty::ExistentialPredicate::Projection(proj) => proj.trait_ref(tcx),
        .                                   ty::ExistentialPredicate::AutoTrait(def_id) => {
    5,280 ( 0.00%)                              ty::ExistentialTraitRef { def_id, substs: InternalSubsts::empty() }
        .                                   }
        .                               };
    6,704 ( 0.00%)                      let ty::ExistentialTraitRef { def_id, substs: _ } = trait_ref;
   63,840 ( 0.00%)                      self.def_id_visitor.visit_def_id(def_id, "trait", &trait_ref)?;
        .                           }
        .                       }
   27,196 ( 0.00%)              ty::Opaque(def_id, ..) => {
        .                           // Skip repeated `Opaque`s to avoid infinite recursion.
   27,196 ( 0.00%)                  if self.visited_opaque_tys.insert(def_id) {
        .                               // The intent is to treat `impl Trait1 + Trait2` identically to
        .                               // `dyn Trait1 + Trait2`. Therefore we ignore def-id of the opaque type itself
        .                               // (it either has no visibility, or its visibility is insignificant, like
        .                               // visibilities of type aliases) and recurse into bounds instead to go
        .                               // through the trait list (default type visitor doesn't visit those traits).
        .                               // All traits in the list are considered the "primary" part of the type
        .                               // and are visited by shallow visitors.
       16 ( 0.00%)                      self.visit_predicates(ty::GenericPredicates {
        .                                   parent: None,
        .                                   predicates: tcx.explicit_item_bounds(def_id),
        .                               })?;
        .                           }
        .                       }
        .                       // These types don't have their own def-ids (but may have subcomponents
        .                       // with def-ids that should be visited recursively).
        .                       ty::Bool
-- line 254 ----------------------------------------
-- line 270 ----------------------------------------
        .                       ty::Bound(..) | ty::Placeholder(..) | ty::Infer(..) => {
        .                           bug!("unexpected type: {:?}", ty)
        .                       }
        .                   }
        .           
        .                   if self.def_id_visitor.shallow() {
        .                       ControlFlow::CONTINUE
        .                   } else {
1,770,388 ( 0.01%)              ty.super_visit_with(self)
        .                   }
5,514,930 ( 0.03%)      }
        .           
        .               fn visit_const(&mut self, c: &'tcx Const<'tcx>) -> ControlFlow<Self::BreakTy> {
    5,568 ( 0.00%)          self.visit_ty(c.ty)?;
      928 ( 0.00%)          let tcx = self.def_id_visitor.tcx();
    6,496 ( 0.00%)          if let Ok(Some(ct)) = AbstractConst::from_const(tcx, c) {
        .                       self.visit_abstract_const_expr(tcx, ct)?;
        .                   }
        .                   ControlFlow::CONTINUE
        .               }
        .           }
        .           
        .           fn min(vis1: ty::Visibility, vis2: ty::Visibility, tcx: TyCtxt<'_>) -> ty::Visibility {
    8,414 ( 0.00%)      if vis1.is_at_least(vis2, tcx) { vis2 } else { vis1 }
        .           }
        .           
        .           ////////////////////////////////////////////////////////////////////////////////
        .           /// Visitor used to determine if pub(restricted) is used anywhere in the crate.
        .           ///
        .           /// This is done so that `private_in_public` warnings can be turned into hard errors
        .           /// in crates that have been updated to use pub(restricted).
        .           ////////////////////////////////////////////////////////////////////////////////
-- line 301 ----------------------------------------
-- line 303 ----------------------------------------
        .               tcx: TyCtxt<'tcx>,
        .               has_pub_restricted: bool,
        .           }
        .           
        .           impl<'tcx> Visitor<'tcx> for PubRestrictedVisitor<'tcx> {
        .               type NestedFilter = nested_filter::All;
        .           
        .               fn nested_visit_map(&mut self) -> Self::Map {
    9,167 ( 0.00%)          self.tcx.hir()
        .               }
        .               fn visit_vis(&mut self, vis: &'tcx hir::Visibility<'tcx>) {
   37,796 ( 0.00%)          self.has_pub_restricted = self.has_pub_restricted || vis.node.is_pub_restricted();
        .               }
        .           }
        .           
        .           ////////////////////////////////////////////////////////////////////////////////
        .           /// Visitor used to determine impl visibility and reachability.
        .           ////////////////////////////////////////////////////////////////////////////////
        .           
        .           struct FindMin<'a, 'tcx, VL: VisibilityLike> {
-- line 322 ----------------------------------------
-- line 336 ----------------------------------------
        .                   true
        .               }
        .               fn visit_def_id(
        .                   &mut self,
        .                   def_id: DefId,
        .                   _kind: &str,
        .                   _descr: &dyn fmt::Display,
        .               ) -> ControlFlow<Self::BreakTy> {
   70,320 ( 0.00%)          self.min = VL::new_min(self, def_id);
        .                   ControlFlow::CONTINUE
        .               }
        .           }
        .           
        .           trait VisibilityLike: Sized {
        .               const MAX: Self;
        .               const SHALLOW: bool = false;
        .               fn new_min(find: &FindMin<'_, '_, Self>, def_id: DefId) -> Self;
        .           
        .               // Returns an over-approximation (`skip_assoc_tys` = true) of visibility due to
        .               // associated types for which we can't determine visibility precisely.
   53,970 ( 0.00%)      fn of_impl(def_id: LocalDefId, tcx: TyCtxt<'_>, access_levels: &AccessLevels) -> Self {
   25,700 ( 0.00%)          let mut find = FindMin { tcx, access_levels, min: Self::MAX };
    7,710 ( 0.00%)          find.visit(tcx.type_of(def_id));
   23,130 ( 0.00%)          if let Some(trait_ref) = tcx.impl_trait_ref(def_id) {
    1,888 ( 0.00%)              find.visit_trait(trait_ref);
        .                   }
    7,868 ( 0.00%)          find.min
   61,680 ( 0.00%)      }
        .           }
        .           impl VisibilityLike for ty::Visibility {
        .               const MAX: Self = ty::Visibility::Public;
   47,040 ( 0.00%)      fn new_min(find: &FindMin<'_, '_, Self>, def_id: DefId) -> Self {
   20,160 ( 0.00%)          min(find.tcx.visibility(def_id), find.min, find.tcx)
   67,200 ( 0.00%)      }
        .           }
        .           impl VisibilityLike for Option<AccessLevel> {
        .               const MAX: Self = Some(AccessLevel::Public);
        .               // Type inference is very smart sometimes.
        .               // It can make an impl reachable even some components of its type or trait are unreachable.
        .               // E.g. methods of `impl ReachableTrait<UnreachableTy> for ReachableTy<UnreachableTy> { ... }`
        .               // can be usable from other crates (#57264). So we skip substs when calculating reachability
        .               // and consider an impl reachable if its "shallow" type and trait are reachable.
        .               //
        .               // The assumption we make here is that type-inference won't let you use an impl without knowing
        .               // both "shallow" version of its self type and "shallow" version of its trait if it exists
        .               // (which require reaching the `DefId`s in them).
        .               const SHALLOW: bool = true;
   26,748 ( 0.00%)      fn new_min(find: &FindMin<'_, '_, Self>, def_id: DefId) -> Self {
        .                   cmp::min(
   26,748 ( 0.00%)              if let Some(def_id) = def_id.as_local() {
   10,300 ( 0.00%)                  find.access_levels.map.get(&def_id).copied()
        .                       } else {
        .                           Self::MAX
        .                       },
   20,342 ( 0.00%)              find.min,
        .                   )
   35,664 ( 0.00%)      }
        .           }
        .           
        .           ////////////////////////////////////////////////////////////////////////////////
        .           /// The embargo visitor, used to determine the exports of the AST.
        .           ////////////////////////////////////////////////////////////////////////////////
        .           
        .           struct EmbargoVisitor<'tcx> {
        .               tcx: TyCtxt<'tcx>,
-- line 400 ----------------------------------------
-- line 422 ----------------------------------------
        .           
        .           struct ReachEverythingInTheInterfaceVisitor<'a, 'tcx> {
        .               access_level: Option<AccessLevel>,
        .               item_def_id: LocalDefId,
        .               ev: &'a mut EmbargoVisitor<'tcx>,
        .           }
        .           
        .           impl<'tcx> EmbargoVisitor<'tcx> {
   95,104 ( 0.00%)      fn get(&self, def_id: LocalDefId) -> Option<AccessLevel> {
        .                   self.access_levels.map.get(&def_id).copied()
   95,104 ( 0.00%)      }
        .           
        .               fn update_with_hir_id(
        .                   &mut self,
        .                   hir_id: hir::HirId,
        .                   level: Option<AccessLevel>,
        .               ) -> Option<AccessLevel> {
   18,858 ( 0.00%)          let def_id = self.tcx.hir().local_def_id(hir_id);
        .                   self.update(def_id, level)
        .               }
        .           
        .               /// Updates node level and returns the updated level.
        .               fn update(&mut self, def_id: LocalDefId, level: Option<AccessLevel>) -> Option<AccessLevel> {
  116,598 ( 0.00%)          let old_level = self.get(def_id);
        .                   // Accessibility levels can only grow.
        .                   if level > old_level {
        .                       self.access_levels.map.insert(def_id, level.unwrap());
    4,424 ( 0.00%)              self.changed = true;
        .                       level
        .                   } else {
        .                       old_level
        .                   }
        .               }
        .           
        .               fn reach(
        .                   &mut self,
-- line 457 ----------------------------------------
-- line 458 ----------------------------------------
        .                   def_id: LocalDefId,
        .                   access_level: Option<AccessLevel>,
        .               ) -> ReachEverythingInTheInterfaceVisitor<'_, 'tcx> {
        .                   ReachEverythingInTheInterfaceVisitor {
        .                       access_level: cmp::min(access_level, Some(AccessLevel::Reachable)),
        .                       item_def_id: def_id,
        .                       ev: self,
        .                   }
   49,462 ( 0.00%)      }
        .           
        .               // We have to make sure that the items that macros might reference
        .               // are reachable, since they might be exported transitively.
        .               fn update_reachability_from_macro(&mut self, local_def_id: LocalDefId, md: &MacroDef) {
        .                   // Non-opaque macros cannot make other items more accessible than they already are.
        .           
        4 ( 0.00%)          let hir_id = self.tcx.hir().local_def_id_to_hir_id(local_def_id);
       12 ( 0.00%)          let attrs = self.tcx.hir().attrs(hir_id);
       28 ( 0.00%)          if attr::find_transparency(attrs, md.macro_rules).0 != Transparency::Opaque {
        .                       return;
        .                   }
        .           
        .                   let item_def_id = local_def_id.to_def_id();
        .                   let macro_module_def_id =
        .                       ty::DefIdTree::parent(self.tcx, item_def_id).unwrap().expect_local();
        .                   if self.tcx.hir().opt_def_kind(macro_module_def_id) != Some(DefKind::Mod) {
        .                       // The macro's parent doesn't correspond to a `mod`, return early (#63164, #65252).
-- line 483 ----------------------------------------
-- line 630 ----------------------------------------
        .           }
        .           
        .           impl<'tcx> Visitor<'tcx> for EmbargoVisitor<'tcx> {
        .               type NestedFilter = nested_filter::All;
        .           
        .               /// We want to visit items in the context of their containing
        .               /// module and so forth, so supply a crate for doing a deep walk.
        .               fn nested_visit_map(&mut self) -> Self::Map {
   18,334 ( 0.00%)          self.tcx.hir()
        .               }
        .           
   64,800 ( 0.00%)      fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {
   14,400 ( 0.00%)          let item_level = match item.kind {
        .                       hir::ItemKind::Impl { .. } => {
        .                           let impl_level =
   30,840 ( 0.00%)                      Option::<AccessLevel>::of_impl(item.def_id, self.tcx, &self.access_levels);
    5,140 ( 0.00%)                  self.update(item.def_id, impl_level)
        .                       }
    8,240 ( 0.00%)              _ => self.get(item.def_id),
        .                   };
        .           
        .                   // Update levels of nested things.
   38,256 ( 0.00%)          match item.kind {
        .                       hir::ItemKind::Enum(ref def, _) => {
      194 ( 0.00%)                  for variant in def.variants {
      108 ( 0.00%)                      let variant_level = self.update_with_hir_id(variant.id, item_level);
      144 ( 0.00%)                      if let Some(ctor_hir_id) = variant.data.ctor_hir_id() {
        .                                   self.update_with_hir_id(ctor_hir_id, item_level);
        .                               }
       72 ( 0.00%)                      for field in variant.data.fields() {
      108 ( 0.00%)                          self.update_with_hir_id(field.hir_id, variant_level);
        .                               }
        .                           }
        .                       }
        .                       hir::ItemKind::Impl(ref impl_) => {
   15,420 ( 0.00%)                  for impl_item_ref in impl_.items {
   28,454 ( 0.00%)                      if impl_.of_trait.is_some()
    3,120 ( 0.00%)                          || self.tcx.visibility(impl_item_ref.id.def_id) == ty::Visibility::Public
        .                               {
    8,668 ( 0.00%)                          self.update(impl_item_ref.id.def_id, item_level);
        .                               }
        .                           }
        .                       }
       12 ( 0.00%)              hir::ItemKind::Trait(.., trait_item_refs) => {
        .                           for trait_item_ref in trait_item_refs {
      388 ( 0.00%)                      self.update(trait_item_ref.id.def_id, item_level);
        .                           }
        .                       }
        .                       hir::ItemKind::Struct(ref def, _) | hir::ItemKind::Union(ref def, _) => {
    6,952 ( 0.00%)                  if let Some(ctor_hir_id) = def.ctor_hir_id() {
        .                               self.update_with_hir_id(ctor_hir_id, item_level);
        .                           }
    3,476 ( 0.00%)                  for field in def.fields() {
    9,064 ( 0.00%)                      if field.vis.node.is_pub() {
    9,048 ( 0.00%)                          self.update_with_hir_id(field.hir_id, item_level);
        .                               }
        .                           }
        .                       }
        .                       hir::ItemKind::Macro(ref macro_def) => {
        8 ( 0.00%)                  self.update_reachability_from_macro(item.def_id, macro_def);
        .                       }
        .                       hir::ItemKind::ForeignMod { items, .. } => {
        .                           for foreign_item in items {
        .                               if self.tcx.visibility(foreign_item.id.def_id) == ty::Visibility::Public {
        .                                   self.update(foreign_item.id.def_id, item_level);
        .                               }
        .                           }
        .                       }
-- line 697 ----------------------------------------
-- line 704 ----------------------------------------
        .                       | hir::ItemKind::TyAlias(..)
        .                       | hir::ItemKind::Mod(..)
        .                       | hir::ItemKind::TraitAlias(..)
        .                       | hir::ItemKind::Fn(..)
        .                       | hir::ItemKind::ExternCrate(..) => {}
        .                   }
        .           
        .                   // Mark all items in interfaces of reachable items as reachable.
   36,000 ( 0.00%)          match item.kind {
        .                       // The interface is empty.
        .                       hir::ItemKind::Macro(..) | hir::ItemKind::ExternCrate(..) => {}
        .                       // All nested items are checked by `visit_item`.
        .                       hir::ItemKind::Mod(..) => {}
        .                       // Handled in the access level of in rustc_resolve
        .                       hir::ItemKind::Use(..) => {}
        .                       // The interface is empty.
        .                       hir::ItemKind::GlobalAsm(..) => {}
        .                       hir::ItemKind::OpaqueTy(..) => {
        .                           // HACK(jynelson): trying to infer the type of `impl trait` breaks `async-std` (and `pub async fn` in general)
        .                           // Since rustdoc never needs to do codegen and doesn't care about link-time reachability,
        .                           // mark this as unreachable.
        .                           // See https://github.com/rust-lang/rust/issues/75100
        8 ( 0.00%)                  if !self.tcx.sess.opts.actually_rustdoc {
        .                               // FIXME: This is some serious pessimization intended to workaround deficiencies
        .                               // in the reachability pass (`middle/reachable.rs`). Types are marked as link-time
        .                               // reachable if they are returned via `impl Trait`, even from private functions.
        .                               let exist_level =
        .                                   cmp::max(item_level, Some(AccessLevel::ReachableFromImplTrait));
        6 ( 0.00%)                      self.reach(item.def_id, exist_level).generics().predicates().ty();
        .                           }
        .                       }
        .                       // Visit everything.
        .                       hir::ItemKind::Const(..)
        .                       | hir::ItemKind::Static(..)
        .                       | hir::ItemKind::Fn(..)
        .                       | hir::ItemKind::TyAlias(..) => {
        4 ( 0.00%)                  if item_level.is_some() {
        8 ( 0.00%)                      self.reach(item.def_id, item_level).generics().predicates().ty();
        .                           }
        .                       }
        8 ( 0.00%)              hir::ItemKind::Trait(.., trait_item_refs) => {
        4 ( 0.00%)                  if item_level.is_some() {
       32 ( 0.00%)                      self.reach(item.def_id, item_level).generics().predicates();
        .           
        .                               for trait_item_ref in trait_item_refs {
      388 ( 0.00%)                          let mut reach = self.reach(trait_item_ref.id.def_id, item_level);
      776 ( 0.00%)                          reach.generics().predicates();
        .           
      194 ( 0.00%)                          if trait_item_ref.kind == AssocItemKind::Type
        .                                       && !trait_item_ref.defaultness.has_value()
        .                                   {
        .                                       // No type to visit.
        .                                   } else {
      388 ( 0.00%)                              reach.ty();
        .                                   }
        .                               }
        .                           }
        .                       }
        .                       hir::ItemKind::TraitAlias(..) => {
        .                           if item_level.is_some() {
        .                               self.reach(item.def_id, item_level).generics().predicates();
        .                           }
        .                       }
        .                       // Visit everything except for private impl items.
        .                       hir::ItemKind::Impl(ref impl_) => {
    5,140 ( 0.00%)                  if item_level.is_some() {
   45,120 ( 0.00%)                      self.reach(item.def_id, item_level).generics().predicates().ty().trait_ref();
        .           
    4,512 ( 0.00%)                      for impl_item_ref in impl_.items {
   13,584 ( 0.00%)                          let impl_item_level = self.get(impl_item_ref.id.def_id);
   25,960 ( 0.00%)                          if impl_item_level.is_some() {
   43,340 ( 0.00%)                              self.reach(impl_item_ref.id.def_id, impl_item_level)
        .                                           .generics()
        .                                           .predicates()
        .                                           .ty();
        .                                   }
        .                               }
        .                           }
        .                       }
        .           
        .                       // Visit everything, but enum variants have their own levels.
        .                       hir::ItemKind::Enum(ref def, _) => {
      194 ( 0.00%)                  if item_level.is_some() {
    1,552 ( 0.00%)                      self.reach(item.def_id, item_level).generics().predicates();
        .                           }
      194 ( 0.00%)                  for variant in def.variants {
      324 ( 0.00%)                      let variant_level = self.get(self.tcx.hir().local_def_id(variant.id));
       36 ( 0.00%)                      if variant_level.is_some() {
       72 ( 0.00%)                          for field in variant.data.fields() {
      324 ( 0.00%)                              self.reach(self.tcx.hir().local_def_id(field.hir_id), variant_level)
        .                                           .ty();
        .                                   }
        .                                   // Corner case: if the variant is reachable, but its
        .                                   // enum is not, make the enum reachable as well.
       72 ( 0.00%)                          self.update(item.def_id, variant_level);
        .                               }
        .                           }
        .                       }
        .                       // Visit everything, but foreign items have their own levels.
        .                       hir::ItemKind::ForeignMod { items, .. } => {
        .                           for foreign_item in items {
        .                               let foreign_item_level = self.get(foreign_item.id.def_id);
        .                               if foreign_item_level.is_some() {
-- line 806 ----------------------------------------
-- line 808 ----------------------------------------
        .                                       .generics()
        .                                       .predicates()
        .                                       .ty();
        .                               }
        .                           }
        .                       }
        .                       // Visit everything except for private fields.
        .                       hir::ItemKind::Struct(ref struct_def, _) | hir::ItemKind::Union(ref struct_def, _) => {
    1,738 ( 0.00%)                  if item_level.is_some() {
    8,880 ( 0.00%)                      self.reach(item.def_id, item_level).generics().predicates();
    2,220 ( 0.00%)                      for field in struct_def.fields() {
   15,862 ( 0.00%)                          let def_id = self.tcx.hir().local_def_id(field.hir_id);
    6,798 ( 0.00%)                          let field_level = self.get(def_id);
    2,266 ( 0.00%)                          if field_level.is_some() {
   11,310 ( 0.00%)                              self.reach(def_id, field_level).ty();
        .                                   }
        .                               }
        .                           }
        .                       }
        .                   }
        .           
        .                   let orig_level = mem::replace(&mut self.prev_level, item_level);
   21,600 ( 0.00%)          intravisit::walk_item(self, item);
    7,200 ( 0.00%)          self.prev_level = orig_level;
   57,600 ( 0.00%)      }
        .           
        .               fn visit_block(&mut self, b: &'tcx hir::Block<'tcx>) {
        .                   // Blocks can have public items, for example impls, but they always
        .                   // start as completely private regardless of publicity of a function,
        .                   // constant, type, field, etc., in which this block resides.
        .                   let orig_level = mem::replace(&mut self.prev_level, None);
        .                   intravisit::walk_block(self, b);
        .                   self.prev_level = orig_level;
        .               }
        .           }
        .           
        .           impl ReachEverythingInTheInterfaceVisitor<'_, '_> {
   72,478 ( 0.00%)      fn generics(&mut self) -> &mut Self {
   41,416 ( 0.00%)          for param in &self.ev.tcx.generics_of(self.item_def_id).params {
    9,730 ( 0.00%)              match param.kind {
        .                           GenericParamDefKind::Lifetime => {}
      550 ( 0.00%)                  GenericParamDefKind::Type { has_default, .. } => {
      550 ( 0.00%)                      if has_default {
        .                                   self.visit(self.ev.tcx.type_of(param.def_id));
        .                               }
        .                           }
        .                           GenericParamDefKind::Const { has_default, .. } => {
        .                               self.visit(self.ev.tcx.type_of(param.def_id));
        .                               if has_default {
        .                                   self.visit(self.ev.tcx.const_param_default(param.def_id));
        .                               }
        .                           }
        .                       }
        .                   }
        .                   self
   93,186 ( 0.00%)      }
        .           
   51,770 ( 0.00%)      fn predicates(&mut self) -> &mut Self {
   31,062 ( 0.00%)          self.visit_predicates(self.ev.tcx.predicates_of(self.item_def_id));
        .                   self
   62,124 ( 0.00%)      }
        .           
   56,540 ( 0.00%)      fn ty(&mut self) -> &mut Self {
   33,960 ( 0.00%)          self.visit(self.ev.tcx.type_of(self.item_def_id));
        .                   self
   67,848 ( 0.00%)      }
        .           
        .               fn trait_ref(&mut self) -> &mut Self {
   27,072 ( 0.00%)          if let Some(trait_ref) = self.ev.tcx.impl_trait_ref(self.item_def_id) {
        .                       self.visit_trait(trait_ref);
        .                   }
        .                   self
        .               }
        .           }
        .           
        .           impl<'tcx> DefIdVisitor<'tcx> for ReachEverythingInTheInterfaceVisitor<'_, 'tcx> {
        .               fn tcx(&self) -> TyCtxt<'tcx> {
  152,032 ( 0.00%)          self.ev.tcx
        .               }
  206,550 ( 0.00%)      fn visit_def_id(
        .                   &mut self,
        .                   def_id: DefId,
        .                   _kind: &str,
        .                   _descr: &dyn fmt::Display,
        .               ) -> ControlFlow<Self::BreakTy> {
  125,082 ( 0.00%)          if let Some(def_id) = def_id.as_local() {
  101,171 ( 0.00%)              if let (ty::Visibility::Public, _) | (_, Some(AccessLevel::ReachableFromImplTrait)) =
   25,456 ( 0.00%)                  (self.tcx().visibility(def_id.to_def_id()), self.access_level)
        .                       {
        .                           self.ev.update(def_id, self.access_level);
        .                       }
        .                   }
        .                   ControlFlow::CONTINUE
  289,170 ( 0.00%)      }
        .           }
        .           
        .           //////////////////////////////////////////////////////////////////////////////////////
        .           /// Name privacy visitor, checks privacy and reports violations.
        .           /// Most of name privacy checks are performed during the main resolution phase,
        .           /// or later in type checking when field accesses and associated items are resolved.
        .           /// This pass performs remaining checks for fields in struct expressions and patterns.
        .           //////////////////////////////////////////////////////////////////////////////////////
-- line 909 ----------------------------------------
-- line 920 ----------------------------------------
        .               /// `Expr` or `Pat` nodes (they are guaranteed to be found only in bodies).
        .               #[track_caller]
        .               fn typeck_results(&self) -> &'tcx ty::TypeckResults<'tcx> {
        .                   self.maybe_typeck_results
        .                       .expect("`NamePrivacyVisitor::typeck_results` called outside of body")
        .               }
        .           
        .               // Checks that a field in a struct constructor (expression or pattern) is accessible.
  106,410 ( 0.00%)      fn check_field(
        .                   &mut self,
        .                   use_ctxt: Span,        // syntax context of the field name at the use site
        .                   span: Span,            // span of the field pattern, e.g., `x: 0`
        .                   def: &'tcx ty::AdtDef, // definition of the struct or enum
        .                   field: &'tcx ty::FieldDef,
        .                   in_update_syntax: bool,
        .               ) {
   21,282 ( 0.00%)          if def.is_enum() {
        .                       return;
        .                   }
        .           
        .                   // definition of the field
        .                   let ident = Ident::new(kw::Empty, use_ctxt);
   16,786 ( 0.00%)          let hir_id = self.tcx.hir().local_def_id_to_hir_id(self.current_item);
   58,751 ( 0.00%)          let def_id = self.tcx.adjust_ident_and_get_scope(ident, def.did, hir_id).1;
    8,393 ( 0.00%)          if !field.vis.is_accessible_from(def_id, self.tcx) {
        .                       let label = if in_update_syntax {
        .                           format!("field `{}` is private", field.name)
        .                       } else {
        .                           "private field".to_string()
        .                       };
        .           
        .                       struct_span_err!(
        .                           self.tcx.sess,
-- line 952 ----------------------------------------
-- line 955 ----------------------------------------
        .                           "field `{}` of {} `{}` is private",
        .                           field.name,
        .                           def.variant_descr(),
        .                           self.tcx.def_path_str(def.did)
        .                       )
        .                       .span_label(span, label)
        .                       .emit();
        .                   }
   85,128 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> Visitor<'tcx> for NamePrivacyVisitor<'tcx> {
        .               type NestedFilter = nested_filter::All;
        .           
        .               /// We want to visit items in the context of their containing
        .               /// module and so forth, so supply a crate for doing a deep walk.
        .               fn nested_visit_map(&mut self) -> Self::Map {
    6,271 ( 0.00%)          self.tcx.hir()
        .               }
        .           
        .               fn visit_mod(&mut self, _m: &'tcx hir::Mod<'tcx>, _s: Span, _n: hir::HirId) {
        .                   // Don't visit nested modules, since we run a separate visitor walk
        .                   // for each module in `privacy_access_levels`
        .               }
        .           
        .               fn visit_nested_body(&mut self, body: hir::BodyId) {
        .                   let old_maybe_typeck_results =
   15,087 ( 0.00%)              self.maybe_typeck_results.replace(self.tcx.typeck_body(body));
   17,352 ( 0.00%)          let body = self.tcx.hir().body(body);
        .                   self.visit_body(body);
      315 ( 0.00%)          self.maybe_typeck_results = old_maybe_typeck_results;
        .               }
        .           
        .               fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {
    3,600 ( 0.00%)          let orig_current_item = mem::replace(&mut self.current_item, item.def_id);
   10,796 ( 0.00%)          intravisit::walk_item(self, item);
    3,600 ( 0.00%)          self.current_item = orig_current_item;
        .               }
        .           
  719,505 ( 0.00%)      fn visit_expr(&mut self, expr: &'tcx hir::Expr<'tcx>) {
  159,890 ( 0.00%)          if let hir::ExprKind::Struct(qpath, fields, ref base) = expr.kind {
    4,056 ( 0.00%)              let res = self.typeck_results().qpath_res(qpath, expr.hir_id);
    2,028 ( 0.00%)              let adt = self.typeck_results().expr_ty(expr).ty_adt_def().unwrap();
    6,084 ( 0.00%)              let variant = adt.variant_of_res(res);
    2,704 ( 0.00%)              if let Some(base) = *base {
        .                           // If the expression uses FRU we need to make sure all the unmentioned fields
        .                           // are checked for privacy (RFC 736). Rather than computing the set of
        .                           // unmentioned fields, just check them all.
        .                           for (vf_index, variant_field) in variant.fields.iter().enumerate() {
        .                               let field = fields.iter().find(|f| {
      124 ( 0.00%)                          self.tcx.field_index(f.hir_id, self.typeck_results()) == vf_index
        .                               });
        .                               let (use_ctxt, span) = match field {
       42 ( 0.00%)                          Some(field) => (field.ident.span, field.span),
       34 ( 0.00%)                          None => (base.span, base.span),
        .                               };
      310 ( 0.00%)                      self.check_field(use_ctxt, span, adt, variant_field, true);
        .                           }
        .                       } else {
        .                           for field in fields {
    2,155 ( 0.00%)                      let use_ctxt = field.ident.span;
   13,565 ( 0.00%)                      let index = self.tcx.field_index(field.hir_id, self.typeck_results());
   23,705 ( 0.00%)                      self.check_field(use_ctxt, field.span, adt, &variant.fields[index], false);
        .                           }
        .                       }
        .                   }
        .           
  799,450 ( 0.00%)          intravisit::walk_expr(self, expr);
        .               }
        .           
  180,272 ( 0.00%)      fn visit_pat(&mut self, pat: &'tcx hir::Pat<'tcx>) {
   49,151 ( 0.00%)          if let PatKind::Struct(ref qpath, fields, _) = pat.kind {
   28,581 ( 0.00%)              let res = self.typeck_results().qpath_res(qpath, pat.hir_id);
   16,332 ( 0.00%)              let adt = self.typeck_results().pat_ty(pat).ty_adt_def().unwrap();
   32,664 ( 0.00%)              let variant = adt.variant_of_res(res);
        .                       for field in fields {
    8,455 ( 0.00%)                  let use_ctxt = field.ident.span;
   53,954 ( 0.00%)                  let index = self.tcx.field_index(field.hir_id, self.typeck_results());
   84,550 ( 0.00%)                  self.check_field(use_ctxt, field.span, adt, &variant.fields[index], false);
        .                       }
        .                   }
        .           
  202,806 ( 0.00%)          intravisit::walk_pat(self, pat);
        .               }
        .           }
        .           
        .           ////////////////////////////////////////////////////////////////////////////////////////////
        .           /// Type privacy visitor, checks types for privacy and reports violations.
        .           /// Both explicitly written types and inferred types of expressions and patterns are checked.
        .           /// Checks are performed on "semantic" types regardless of names and their hygiene.
        .           ////////////////////////////////////////////////////////////////////////////////////////////
-- line 1045 ----------------------------------------
-- line 1061 ----------------------------------------
        .                       .expect("`TypePrivacyVisitor::typeck_results` called outside of body")
        .               }
        .           
        .               fn item_is_accessible(&self, did: DefId) -> bool {
        .                   self.tcx.visibility(did).is_accessible_from(self.current_item.to_def_id(), self.tcx)
        .               }
        .           
        .               // Take node-id of an expression or pattern and check its type for privacy.
  764,295 ( 0.00%)      fn check_expr_pat_type(&mut self, id: hir::HirId, span: Span) -> bool {
  109,185 ( 0.00%)          self.span = span;
  109,185 ( 0.00%)          let typeck_results = self.typeck_results();
        .                   let result: ControlFlow<()> = try {
  436,740 ( 0.00%)              self.visit(typeck_results.node_type(id))?;
  873,480 ( 0.00%)              self.visit(typeck_results.node_substs(id))?;
  982,665 ( 0.01%)              if let Some(adjustments) = typeck_results.adjustments().get(id) {
        .                           adjustments.iter().try_for_each(|adjustment| self.visit(adjustment.target))?;
        .                       }
        .                   };
        .                   result.is_break()
  873,480 ( 0.00%)      }
        .           
        .               fn check_def_id(&mut self, def_id: DefId, kind: &str, descr: &dyn fmt::Display) -> bool {
  648,676 ( 0.00%)          let is_error = !self.item_is_accessible(def_id);
        .                   if is_error {
        .                       self.tcx
        .                           .sess
        .                           .struct_span_err(self.span, &format!("{} `{}` is private", kind, descr))
        .                           .span_label(self.span, &format!("private {}", kind))
        .                           .emit();
        .                   }
        .                   is_error
-- line 1091 ----------------------------------------
-- line 1093 ----------------------------------------
        .           }
        .           
        .           impl<'tcx> Visitor<'tcx> for TypePrivacyVisitor<'tcx> {
        .               type NestedFilter = nested_filter::All;
        .           
        .               /// We want to visit items in the context of their containing
        .               /// module and so forth, so supply a crate for doing a deep walk.
        .               fn nested_visit_map(&mut self) -> Self::Map {
    6,271 ( 0.00%)          self.tcx.hir()
        .               }
        .           
        .               fn visit_mod(&mut self, _m: &'tcx hir::Mod<'tcx>, _s: Span, _n: hir::HirId) {
        .                   // Don't visit nested modules, since we run a separate visitor walk
        .                   // for each module in `privacy_access_levels`
        .               }
        .           
   28,920 ( 0.00%)      fn visit_nested_body(&mut self, body: hir::BodyId) {
        .                   let old_maybe_typeck_results =
    8,676 ( 0.00%)              self.maybe_typeck_results.replace(self.tcx.typeck_body(body));
   17,352 ( 0.00%)          let body = self.tcx.hir().body(body);
        .                   self.visit_body(body);
    2,892 ( 0.00%)          self.maybe_typeck_results = old_maybe_typeck_results;
   23,136 ( 0.00%)      }
        .           
        .               fn visit_generic_arg(&mut self, generic_arg: &'tcx hir::GenericArg<'tcx>) {
   42,605 ( 0.00%)          match generic_arg {
   19,216 ( 0.00%)              hir::GenericArg::Type(t) => self.visit_ty(t),
        .                       hir::GenericArg::Infer(inf) => self.visit_infer(inf),
        .                       hir::GenericArg::Lifetime(_) | hir::GenericArg::Const(_) => {}
        .                   }
        .               }
        .           
  177,996 ( 0.00%)      fn visit_ty(&mut self, hir_ty: &'tcx hir::Ty<'tcx>) {
   50,856 ( 0.00%)          self.span = hir_ty.span;
   76,284 ( 0.00%)          if let Some(typeck_results) = self.maybe_typeck_results {
        .                       // Types in bodies.
   16,980 ( 0.00%)              if self.visit(typeck_results.node_type(hir_ty.hir_id)).is_break() {
        .                           return;
        .                       }
        .                   } else {
        .                       // Types in signatures.
        .                       // FIXME: This is very ineffective. Ideally each HIR type should be converted
        .                       // into a semantic type only once and the result should be cached somehow.
   59,304 ( 0.00%)              if self.visit(rustc_typeck::hir_ty_to_ty(self.tcx, hir_ty)).is_break() {
        .                           return;
        .                       }
        .                   }
        .           
   76,284 ( 0.00%)          intravisit::walk_ty(self, hir_ty);
  152,568 ( 0.00%)      }
        .           
        .               fn visit_infer(&mut self, inf: &'tcx hir::InferArg) {
        .                   self.span = inf.span;
        .                   if let Some(typeck_results) = self.maybe_typeck_results {
        .                       if let Some(ty) = typeck_results.node_type_opt(inf.hir_id) {
        .                           if self.visit(ty).is_break() {
        .                               return;
        .                           }
-- line 1150 ----------------------------------------
-- line 1152 ----------------------------------------
        .                           // We don't do anything for const infers here.
        .                       }
        .                   } else {
        .                       bug!("visit_infer without typeck_results");
        .                   }
        .                   intravisit::walk_inf(self, inf);
        .               }
        .           
   26,952 ( 0.00%)      fn visit_trait_ref(&mut self, trait_ref: &'tcx hir::TraitRef<'tcx>) {
   10,107 ( 0.00%)          self.span = trait_ref.path.span;
    3,369 ( 0.00%)          if self.maybe_typeck_results.is_none() {
        .                       // Avoid calling `hir_trait_to_predicates` in bodies, it will ICE.
        .                       // The traits' privacy in bodies is already checked as a part of trait object types.
    3,369 ( 0.00%)              let bounds = rustc_typeck::hir_trait_to_predicates(
    3,369 ( 0.00%)                  self.tcx,
        .                           trait_ref,
        .                           // NOTE: This isn't really right, but the actual type doesn't matter here. It's
        .                           // just required by `ty::TraitRef`.
   10,107 ( 0.00%)                  self.tcx.types.never,
        .                       );
        .           
   30,321 ( 0.00%)              for (trait_predicate, _, _) in bounds.trait_bounds {
   23,583 ( 0.00%)                  if self.visit_trait(trait_predicate.skip_binder()).is_break() {
        .                               return;
        .                           }
        .                       }
        .           
   21,558 ( 0.00%)              for (poly_predicate, _) in bounds.projection_bounds {
    1,152 ( 0.00%)                  let pred = poly_predicate.skip_binder();
        .                           let poly_pred_term = self.visit(pred.term);
      768 ( 0.00%)                  if poly_pred_term.is_break()
        .                               || self.visit_projection_ty(pred.projection_ty).is_break()
        .                           {
        .                               return;
        .                           }
        .                       }
        .                   }
        .           
        .                   intravisit::walk_trait_ref(self, trait_ref);
   26,952 ( 0.00%)      }
        .           
        .               // Check types of expressions
  719,505 ( 0.00%)      fn visit_expr(&mut self, expr: &'tcx hir::Expr<'tcx>) {
  719,505 ( 0.00%)          if self.check_expr_pat_type(expr.hir_id, expr.span) {
        .                       // Do not check nested expressions if the error already happened.
        .                       return;
        .                   }
  544,077 ( 0.00%)          match expr.kind {
    4,587 ( 0.00%)              hir::ExprKind::Assign(_, rhs, _) | hir::ExprKind::Match(rhs, ..) => {
        .                           // Do not report duplicate errors for `x = y` and `match x { ... }`.
   28,000 ( 0.00%)                  if self.check_expr_pat_type(rhs.hir_id, rhs.span) {
        .                               return;
        .                           }
        .                       }
    2,178 ( 0.00%)              hir::ExprKind::MethodCall(segment, ..) => {
        .                           // Method calls have to be checked specially.
    4,356 ( 0.00%)                  self.span = segment.ident.span;
   13,068 ( 0.00%)                  if let Some(def_id) = self.typeck_results().type_dependent_def_id(expr.hir_id) {
    6,534 ( 0.00%)                      if self.visit(self.tcx.type_of(def_id)).is_break() {
        .                                   return;
        .                               }
        .                           } else {
        .                               self.tcx
        .                                   .sess
        .                                   .delay_span_bug(expr.span, "no type-dependent def for method call");
        .                           }
        .                       }
        .                       _ => {}
        .                   }
        .           
  239,835 ( 0.00%)          intravisit::walk_expr(self, expr);
  639,560 ( 0.00%)      }
        .           
        .               // Prohibit access to associated items with insufficient nominal visibility.
        .               //
        .               // Additionally, until better reachability analysis for macros 2.0 is available,
        .               // we prohibit access to private statics from other crates, this allows to give
        .               // more code internal visibility at link time. (Access to private functions
        .               // is already prohibited by type privacy for function types.)
  559,630 ( 0.00%)      fn visit_qpath(&mut self, qpath: &'tcx hir::QPath<'tcx>, id: hir::HirId, span: Span) {
  111,926 ( 0.00%)          let def = match qpath {
  140,502 ( 0.00%)              hir::QPath::Resolved(_, path) => match path.res {
  142,110 ( 0.00%)                  Res::Def(kind, def_id) => Some((kind, def_id)),
        .                           _ => None,
        .                       },
    9,129 ( 0.00%)              hir::QPath::TypeRelative(..) | hir::QPath::LangItem(..) => self
        .                           .maybe_typeck_results
   82,161 ( 0.00%)                  .and_then(|typeck_results| typeck_results.type_dependent_def(id)),
        .                   };
        .                   let def = def.filter(|(kind, _)| {
   65,628 ( 0.00%)              matches!(
        .                           kind,
        .                           DefKind::AssocFn | DefKind::AssocConst | DefKind::AssocTy | DefKind::Static
        .                       )
        .                   });
        .                   if let Some((kind, def_id)) = def {
        .                       let is_local_static =
   34,780 ( 0.00%)                  if let DefKind::Static = kind { def_id.is_local() } else { false };
   19,602 ( 0.00%)              if !self.item_is_accessible(def_id) && !is_local_static {
        .                           let sess = self.tcx.sess;
        .                           let sm = sess.source_map();
        .                           let name = match qpath {
        .                               hir::QPath::Resolved(..) | hir::QPath::LangItem(..) => {
        .                                   sm.span_to_snippet(qpath.span()).ok()
        .                               }
        .                               hir::QPath::TypeRelative(_, segment) => Some(segment.ident.to_string()),
        .                           };
-- line 1258 ----------------------------------------
-- line 1263 ----------------------------------------
        .                           };
        .                           sess.struct_span_err(span, &msg)
        .                               .span_label(span, &format!("private {}", kind))
        .                               .emit();
        .                           return;
        .                       }
        .                   }
        .           
  615,593 ( 0.00%)          intravisit::walk_qpath(self, qpath, id, span);
        .               }
        .           
        .               // Check types of patterns.
        .               fn visit_pat(&mut self, pattern: &'tcx hir::Pat<'tcx>) {
  151,902 ( 0.00%)          if self.check_expr_pat_type(pattern.hir_id, pattern.span) {
        .                       // Do not check nested patterns if the error already happened.
        .                       return;
        .                   }
        .           
   81,470 ( 0.00%)          intravisit::walk_pat(self, pattern);
        .               }
        .           
   13,530 ( 0.00%)      fn visit_local(&mut self, local: &'tcx hir::Local<'tcx>) {
    8,118 ( 0.00%)          if let Some(init) = local.init {
   18,942 ( 0.00%)              if self.check_expr_pat_type(init.hir_id, init.span) {
        .                           // Do not report duplicate errors for `let x = y`.
        .                           return;
        .                       }
        .                   }
        .           
        .                   intravisit::walk_local(self, local);
   10,440 ( 0.00%)      }
        .           
        .               // Check types in item interfaces.
        .               fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {
    3,600 ( 0.00%)          let orig_current_item = mem::replace(&mut self.current_item, item.def_id);
        .                   let old_maybe_typeck_results = self.maybe_typeck_results.take();
   10,796 ( 0.00%)          intravisit::walk_item(self, item);
    3,600 ( 0.00%)          self.maybe_typeck_results = old_maybe_typeck_results;
    3,600 ( 0.00%)          self.current_item = orig_current_item;
        .               }
        .           }
        .           
        .           impl<'tcx> DefIdVisitor<'tcx> for TypePrivacyVisitor<'tcx> {
        .               fn tcx(&self) -> TyCtxt<'tcx> {
1,100,063 ( 0.01%)          self.tcx
        .               }
4,865,070 ( 0.02%)      fn visit_def_id(
        .                   &mut self,
        .                   def_id: DefId,
        .                   kind: &str,
        .                   descr: &dyn fmt::Display,
        .               ) -> ControlFlow<Self::BreakTy> {
        .                   if self.check_def_id(def_id, kind, descr) {
        .                       ControlFlow::BREAK
        .                   } else {
        .                       ControlFlow::CONTINUE
        .                   }
2,919,042 ( 0.01%)      }
        .           }
        .           
        .           ///////////////////////////////////////////////////////////////////////////////
        .           /// Obsolete visitors for checking for private items in public interfaces.
        .           /// These visitors are supposed to be kept in frozen state and produce an
        .           /// "old error node set". For backward compatibility the new visitor reports
        .           /// warnings instead of hard errors when the erroneous node is not in this old set.
        .           ///////////////////////////////////////////////////////////////////////////////
-- line 1328 ----------------------------------------
-- line 1342 ----------------------------------------
        .               /// Whether we've recurred at all (i.e., if we're pointing at the
        .               /// first type on which `visit_ty` was called).
        .               at_outer_type: bool,
        .               /// Whether that first type is a public path.
        .               outer_type_is_public_path: bool,
        .           }
        .           
        .           impl<'a, 'tcx> ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {
    6,630 ( 0.00%)      fn path_is_private_type(&self, path: &hir::Path<'_>) -> bool {
   20,721 ( 0.00%)          let did = match path.res {
        .                       Res::PrimTy(..) | Res::SelfTy(..) | Res::Err => return false,
   39,072 ( 0.00%)              res => res.def_id(),
        .                   };
        .           
        .                   // A path can only be private if:
        .                   // it's in this crate...
    6,512 ( 0.00%)          if let Some(did) = did.as_local() {
        .                       // .. and it corresponds to a private type in the AST (this returns
        .                       // `None` for type parameters).
   16,390 ( 0.00%)              match self.tcx.hir().find(self.tcx.hir().local_def_id_to_hir_id(did)) {
   12,020 ( 0.00%)                  Some(Node::Item(item)) => !item.vis.node.is_pub(),
        .                           Some(_) | None => false,
        .                       }
        .                   } else {
        .                       false
        .                   }
   13,260 ( 0.00%)      }
        .           
        .               fn trait_is_public(&self, trait_id: LocalDefId) -> bool {
        .                   // FIXME: this would preferably be using `exported_items`, but all
        .                   // traits are exported currently (see `EmbargoVisitor.exported_trait`).
        .                   self.access_levels.is_public(trait_id)
        .               }
        .           
        .               fn check_generic_bound(&mut self, bound: &hir::GenericBound<'_>) {
    1,646 ( 0.00%)          if let hir::GenericBound::Trait(ref trait_ref, _) = *bound {
      277 ( 0.00%)              if self.path_is_private_type(trait_ref.trait_ref.path) {
        .                           self.old_error_set.insert(trait_ref.trait_ref.hir_ref_id);
        .                       }
        .                   }
        .               }
        .           
        .               fn item_is_public(&self, def_id: LocalDefId, vis: &hir::Visibility<'_>) -> bool {
    1,391 ( 0.00%)          self.access_levels.is_reachable(def_id) || vis.node.is_pub()
        .               }
        .           }
        .           
        .           impl<'a, 'b, 'tcx, 'v> Visitor<'v> for ObsoleteCheckTypeForPrivatenessVisitor<'a, 'b, 'tcx> {
        .               fn visit_generic_arg(&mut self, generic_arg: &'v hir::GenericArg<'v>) {
        .                   match generic_arg {
        .                       hir::GenericArg::Type(t) => self.visit_ty(t),
        .                       hir::GenericArg::Infer(inf) => self.visit_ty(&inf.to_ty()),
        .                       hir::GenericArg::Lifetime(_) | hir::GenericArg::Const(_) => {}
        .                   }
        .               }
        .           
        .               fn visit_ty(&mut self, ty: &hir::Ty<'_>) {
   12,850 ( 0.00%)          if let hir::TyKind::Path(hir::QPath::Resolved(_, path)) = ty.kind {
   10,280 ( 0.00%)              if self.inner.path_is_private_type(path) {
        .                           self.contains_private = true;
        .                           // Found what we're looking for, so let's stop working.
        .                           return;
        .                       }
        .                   }
        .                   if let hir::TyKind::Path(_) = ty.kind {
        .                       if self.at_outer_type {
    2,256 ( 0.00%)                  self.outer_type_is_public_path = true;
        .                       }
        .                   }
    4,512 ( 0.00%)          self.at_outer_type = false;
    4,512 ( 0.00%)          intravisit::walk_ty(self, ty)
    9,024 ( 0.00%)      }
        .           
        .               // Don't want to recurse into `[, .. expr]`.
        .               fn visit_expr(&mut self, _: &hir::Expr<'_>) {}
        .           }
        .           
        .           impl<'a, 'tcx> Visitor<'tcx> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {
        .               type NestedFilter = nested_filter::All;
        .           
        .               /// We want to visit items in the context of their containing
        .               /// module and so forth, so supply a crate for doing a deep walk.
        .               fn nested_visit_map(&mut self) -> Self::Map {
    3,969 ( 0.00%)          self.tcx.hir()
        .               }
        .           
   32,391 ( 0.00%)      fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {
   14,396 ( 0.00%)          match item.kind {
        .                       // Contents of a private mod can be re-exported, so we need
        .                       // to check internals.
        .                       hir::ItemKind::Mod(_) => {}
        .           
        .                       // An `extern {}` doesn't introduce a new privacy
        .                       // namespace (the contents have their own privacies).
        .                       hir::ItemKind::ForeignMod { .. } => {}
        .           
        4 ( 0.00%)              hir::ItemKind::Trait(.., bounds, _) => {
       10 ( 0.00%)                  if !self.trait_is_public(item.def_id) {
        .                               return;
        .                           }
        .           
        .                           for bound in bounds.iter() {
        .                               self.check_generic_bound(bound)
        .                           }
        .                       }
        .           
-- line 1447 ----------------------------------------
-- line 1454 ----------------------------------------
        .                           // `impl [... for] Private` is never visible.
        .                           let self_contains_private;
        .                           // `impl [... for] Public<...>`, but not `impl [... for]
        .                           // Vec<Public>` or `(Public,)`, etc.
        .                           let self_is_public_path;
        .           
        .                           // Check the properties of the `Self` type:
        .                           {
   10,280 ( 0.00%)                      let mut visitor = ObsoleteCheckTypeForPrivatenessVisitor {
        .                                   inner: self,
        .                                   contains_private: false,
        .                                   at_outer_type: true,
        .                                   outer_type_is_public_path: false,
        .                               };
    2,570 ( 0.00%)                      visitor.visit_ty(impl_.self_ty);
        .                               self_contains_private = visitor.contains_private;
        .                               self_is_public_path = visitor.outer_type_is_public_path;
        .                           }
        .           
        .                           // Miscellaneous info about the impl:
        .           
        .                           // `true` iff this is `impl Private for ...`.
        .                           let not_private_trait = impl_.of_trait.as_ref().map_or(
        .                               true, // no trait counts as public trait
        .                               |tr| {
    5,664 ( 0.00%)                          if let Some(def_id) = tr.path.res.def_id().as_local() {
       15 ( 0.00%)                              self.trait_is_public(def_id)
        .                                   } else {
        .                                       true // external traits must be public
        .                                   }
        .                               },
        .                           );
        .           
        .                           // `true` iff this is a trait impl or at least one method is public.
        .                           //
        .                           // `impl Public { $( fn ...() {} )* }` is not visible.
        .                           //
        .                           // This is required over just using the methods' privacy
        .                           // directly because we might have `impl<T: Foo<Private>> ...`,
        .                           // and we shouldn't warn about the generics if all the methods
        .                           // are private (because `T` won't be visible externally).
        .                           let trait_or_some_public_method = impl_.of_trait.is_some()
      682 ( 0.00%)                      || impl_.items.iter().any(|impl_item_ref| {
    2,728 ( 0.00%)                          let impl_item = self.tcx.hir().impl_item(impl_item_ref.id);
    4,774 ( 0.00%)                          match impl_item.kind {
        .                                       hir::ImplItemKind::Const(..) | hir::ImplItemKind::Fn(..) => {
        .                                           self.access_levels.is_reachable(impl_item_ref.id.def_id)
        .                                       }
        .                                       hir::ImplItemKind::TyAlias(_) => false,
        .                                   }
        .                               });
        .           
    4,510 ( 0.00%)                  if !self_contains_private && not_private_trait && trait_or_some_public_method {
        .                               intravisit::walk_generics(self, &impl_.generics);
        .           
    4,500 ( 0.00%)                      match impl_.of_trait {
        .                                   None => {
      367 ( 0.00%)                              for impl_item_ref in impl_.items {
        .                                           // This is where we choose whether to walk down
        .                                           // further into the impl to check its items. We
        .                                           // should only walk into public items so that we
        .                                           // don't erroneously report errors for private
        .                                           // types in private items.
    2,790 ( 0.00%)                                  let impl_item = self.tcx.hir().impl_item(impl_item_ref.id);
    4,160 ( 0.00%)                                  match impl_item.kind {
        .                                               hir::ImplItemKind::Const(..) | hir::ImplItemKind::Fn(..)
    1,218 ( 0.00%)                                          if self
      465 ( 0.00%)                                              .item_is_public(impl_item.def_id, &impl_item.vis) =>
        .                                               {
        .                                                   intravisit::walk_impl_item(self, impl_item)
        .                                               }
        .                                               hir::ImplItemKind::TyAlias(..) => {
        .                                                   intravisit::walk_impl_item(self, impl_item)
        .                                               }
        .                                               _ => {}
        .                                           }
-- line 1529 ----------------------------------------
-- line 1538 ----------------------------------------
        .                                       //
        .                                       // Those in 1. can only occur if the trait is in
        .                                       // this crate and will've been warned about on the
        .                                       // trait definition (there's no need to warn twice
        .                                       // so we don't check the methods).
        .                                       //
        .                                       // Those in 2. are warned via walk_generics and this
        .                                       // call here.
    5,649 ( 0.00%)                              intravisit::walk_path(self, tr.path);
        .           
        .                                       // Those in 3. are warned with this call.
    1,883 ( 0.00%)                              for impl_item_ref in impl_.items {
    8,490 ( 0.00%)                                  let impl_item = self.tcx.hir().impl_item(impl_item_ref.id);
   13,287 ( 0.00%)                                  if let hir::ImplItemKind::TyAlias(ty) = impl_item.kind {
        .                                               self.visit_ty(ty);
        .                                           }
        .                                       }
        .                                   }
        .                               }
      960 ( 0.00%)                  } else if impl_.of_trait.is_none() && self_is_public_path {
        .                               // `impl Public<Private> { ... }`. Any public static
        .                               // methods will be visible as `Public::foo`.
        .                               let mut found_pub_static = false;
        1 ( 0.00%)                      for impl_item_ref in impl_.items {
        4 ( 0.00%)                          if self.access_levels.is_reachable(impl_item_ref.id.def_id)
        2 ( 0.00%)                              || self.tcx.visibility(impl_item_ref.id.def_id)
        .                                           == ty::Visibility::Public
        .                                   {
        .                                       let impl_item = self.tcx.hir().impl_item(impl_item_ref.id);
        .                                       match impl_item_ref.kind {
        .                                           AssocItemKind::Const => {
        .                                               found_pub_static = true;
        .                                               intravisit::walk_impl_item(self, impl_item);
        .                                           }
-- line 1571 ----------------------------------------
-- line 1572 ----------------------------------------
        .                                           AssocItemKind::Fn { has_self: false } => {
        .                                               found_pub_static = true;
        .                                               intravisit::walk_impl_item(self, impl_item);
        .                                           }
        .                                           _ => {}
        .                                       }
        .                                   }
        .                               }
        2 ( 0.00%)                      if found_pub_static {
        .                                   intravisit::walk_generics(self, &impl_.generics)
        .                               }
        .                           }
        .                           return;
        .                       }
        .           
        .                       // `type ... = ...;` can contain private types, because
        .                       // we're introducing a new name.
        .                       hir::ItemKind::TyAlias(..) => return,
        .           
        .                       // Not at all public, so we don't care.
    5,196 ( 0.00%)              _ if !self.item_is_public(item.def_id, &item.vis) => {
        .                           return;
        .                       }
        .           
        .                       _ => {}
        .                   }
        .           
        .                   // We've carefully constructed it so that if we're here, then
        .                   // any `visit_ty`'s will be called on things that are in
        .                   // public signatures, i.e., things that we're interested in for
        .                   // this visitor.
    6,580 ( 0.00%)          intravisit::walk_item(self, item);
   23,528 ( 0.00%)      }
        .           
    8,176 ( 0.00%)      fn visit_generics(&mut self, generics: &'tcx hir::Generics<'tcx>) {
        .                   for param in generics.params {
      273 ( 0.00%)              for bound in param.bounds {
        .                           self.check_generic_bound(bound);
        .                       }
        .                   }
    1,022 ( 0.00%)          for predicate in generics.where_clause.predicates {
      816 ( 0.00%)              match predicate {
        .                           hir::WherePredicate::BoundPredicate(bound_pred) => {
      272 ( 0.00%)                      for bound in bound_pred.bounds.iter() {
        .                                   self.check_generic_bound(bound)
        .                               }
        .                           }
        .                           hir::WherePredicate::RegionPredicate(_) => {}
        .                           hir::WherePredicate::EqPredicate(eq_pred) => {
        .                               self.visit_ty(eq_pred.rhs_ty);
        .                           }
        .                       }
        .                   }
    8,176 ( 0.00%)      }
        .           
        .               fn visit_foreign_item(&mut self, item: &'tcx hir::ForeignItem<'tcx>) {
        .                   if self.access_levels.is_reachable(item.def_id) {
        .                       intravisit::walk_foreign_item(self, item)
        .                   }
        .               }
        .           
        .               fn visit_ty(&mut self, t: &'tcx hir::Ty<'tcx>) {
   18,407 ( 0.00%)          if let hir::TyKind::Path(hir::QPath::Resolved(_, path)) = t.kind {
   12,996 ( 0.00%)              if self.path_is_private_type(path) {
        .                           self.old_error_set.insert(t.hir_id);
        .                       }
        .                   }
   29,426 ( 0.00%)          intravisit::walk_ty(self, t)
        .               }
        .           
      144 ( 0.00%)      fn visit_variant(
        .                   &mut self,
        .                   v: &'tcx hir::Variant<'tcx>,
        .                   g: &'tcx hir::Generics<'tcx>,
        .                   item_id: hir::HirId,
        .               ) {
      180 ( 0.00%)          if self.access_levels.is_reachable(self.tcx.hir().local_def_id(v.id)) {
       18 ( 0.00%)              self.in_variant = true;
        .                       intravisit::walk_variant(self, v, g, item_id);
       18 ( 0.00%)              self.in_variant = false;
        .                   }
      126 ( 0.00%)      }
        .           
    5,755 ( 0.00%)      fn visit_field_def(&mut self, s: &'tcx hir::FieldDef<'tcx>) {
    4,644 ( 0.00%)          if s.vis.node.is_pub() || self.in_variant {
        .                       intravisit::walk_field_def(self, s);
        .                   }
        8 ( 0.00%)      }
        .           
        .               // We don't need to introspect into these at all: an
        .               // expression/block context can't possibly contain exported things.
        .               // (Making them no-ops stops us from traversing the whole AST without
        .               // having to be super careful about our `walk_...` calls above.)
        .               fn visit_block(&mut self, _: &'tcx hir::Block<'tcx>) {}
        .               fn visit_expr(&mut self, _: &'tcx hir::Expr<'tcx>) {}
        .           }
-- line 1667 ----------------------------------------
-- line 1679 ----------------------------------------
        .               /// The visitor checks that each component type is at least this visible.
        .               required_visibility: ty::Visibility,
        .               has_pub_restricted: bool,
        .               has_old_errors: bool,
        .               in_assoc_ty: bool,
        .           }
        .           
        .           impl SearchInterfaceForPrivateItemsVisitor<'_> {
   30,296 ( 0.00%)      fn generics(&mut self) -> &mut Self {
   12,984 ( 0.00%)          for param in &self.tcx.generics_of(self.item_def_id).params {
    7,219 ( 0.00%)              match param.kind {
        .                           GenericParamDefKind::Lifetime => {}
      686 ( 0.00%)                  GenericParamDefKind::Type { has_default, .. } => {
      686 ( 0.00%)                      if has_default {
        .                                   self.visit(self.tcx.type_of(param.def_id));
        .                               }
        .                           }
        .                           // FIXME(generic_const_exprs): May want to look inside const here
        .                           GenericParamDefKind::Const { .. } => {
        .                               self.visit(self.tcx.type_of(param.def_id));
        .                           }
        .                       }
        .                   }
        .                   self
   34,624 ( 0.00%)      }
        .           
   21,635 ( 0.00%)      fn predicates(&mut self) -> &mut Self {
        .                   // N.B., we use `explicit_predicates_of` and not `predicates_of`
        .                   // because we don't want to report privacy errors due to where
        .                   // clauses that the compiler inferred. We only want to
        .                   // consider the ones that the user wrote. This is important
        .                   // for the inferred outlives rules; see
        .                   // `src/test/ui/rfc-2093-infer-outlives/privacy.rs`.
    8,654 ( 0.00%)          self.visit_predicates(self.tcx.explicit_predicates_of(self.item_def_id));
        .                   self
   25,962 ( 0.00%)      }
        .           
        5 ( 0.00%)      fn bounds(&mut self) -> &mut Self {
        .                   self.visit_predicates(ty::GenericPredicates {
        .                       parent: None,
        2 ( 0.00%)              predicates: self.tcx.explicit_item_bounds(self.item_def_id),
        .                   });
        .                   self
        5 ( 0.00%)      }
        .           
   19,140 ( 0.00%)      fn ty(&mut self) -> &mut Self {
    7,656 ( 0.00%)          self.visit(self.tcx.type_of(self.item_def_id));
        .                   self
   19,140 ( 0.00%)      }
        .           
        .               fn check_def_id(&mut self, def_id: DefId, kind: &str, descr: &dyn fmt::Display) -> bool {
   87,347 ( 0.00%)          if self.leaks_private_dep(def_id) {
        .                       self.tcx.struct_span_lint_hir(
        .                           lint::builtin::EXPORTED_PRIVATE_DEPENDENCIES,
        .                           self.tcx.hir().local_def_id_to_hir_id(self.item_def_id),
        .                           self.tcx.def_span(self.item_def_id.to_def_id()),
        .                           |lint| {
        .                               lint.build(&format!(
        .                                   "{} `{}` from private dependency '{}' in public \
        .                                                           interface",
-- line 1738 ----------------------------------------
-- line 1740 ----------------------------------------
        .                                   descr,
        .                                   self.tcx.crate_name(def_id.krate)
        .                               ))
        .                               .emit()
        .                           },
        .                       );
        .                   }
        .           
   36,552 ( 0.00%)          let hir_id = match def_id.as_local() {
    9,206 ( 0.00%)              Some(def_id) => self.tcx.hir().local_def_id_to_hir_id(def_id),
        .                       None => return false,
        .                   };
        .           
        .                   let vis = self.tcx.visibility(def_id);
   17,405 ( 0.00%)          if !vis.is_at_least(self.required_visibility, self.tcx) {
        .                       let vis_descr = match vis {
        .                           ty::Visibility::Public => "public",
        .                           ty::Visibility::Invisible => "private",
        .                           ty::Visibility::Restricted(vis_def_id) => {
        .                               if vis_def_id == self.tcx.parent_module(hir_id).to_def_id() {
        .                                   "private"
        .                               } else if vis_def_id.is_top_level_module() {
        .                                   "crate-private"
-- line 1762 ----------------------------------------
-- line 1792 ----------------------------------------
        .                   false
        .               }
        .           
        .               /// An item is 'leaked' from a private dependency if all
        .               /// of the following are true:
        .               /// 1. It's contained within a public type
        .               /// 2. It comes from a private crate
        .               fn leaks_private_dep(&self, item_id: DefId) -> bool {
   54,420 ( 0.00%)          let ret = self.required_visibility.is_public() && self.tcx.is_private_dep(item_id.krate);
        .           
        .                   tracing::debug!("leaks_private_dep(item_id={:?})={}", item_id, ret);
        .                   ret
        .               }
        .           }
        .           
        .           impl<'tcx> DefIdVisitor<'tcx> for SearchInterfaceForPrivateItemsVisitor<'tcx> {
        .               fn tcx(&self) -> TyCtxt<'tcx> {
   25,958 ( 0.00%)          self.tcx
        .               }
  290,240 ( 0.00%)      fn visit_def_id(
        .                   &mut self,
        .                   def_id: DefId,
        .                   kind: &str,
        .                   descr: &dyn fmt::Display,
        .               ) -> ControlFlow<Self::BreakTy> {
        .                   if self.check_def_id(def_id, kind, descr) {
        .                       ControlFlow::BREAK
        .                   } else {
        .                       ControlFlow::CONTINUE
        .                   }
  163,260 ( 0.00%)      }
        .           }
        .           
        .           struct PrivateItemsInPublicInterfacesVisitor<'tcx> {
        .               tcx: TyCtxt<'tcx>,
        .               has_pub_restricted: bool,
        .               old_error_set_ancestry: LocalDefIdSet,
        .           }
        .           
        .           impl<'tcx> PrivateItemsInPublicInterfacesVisitor<'tcx> {
        .               fn check(
        .                   &self,
        .                   def_id: LocalDefId,
        .                   required_visibility: ty::Visibility,
        .               ) -> SearchInterfaceForPrivateItemsVisitor<'tcx> {
   42,868 ( 0.00%)          SearchInterfaceForPrivateItemsVisitor {
    3,826 ( 0.00%)              tcx: self.tcx,
        .                       item_def_id: def_id,
        .                       required_visibility,
    6,630 ( 0.00%)              has_pub_restricted: self.has_pub_restricted,
        .                       has_old_errors: self.old_error_set_ancestry.contains(&def_id),
        .                       in_assoc_ty: false,
        .                   }
        .               }
        .           
   34,775 ( 0.00%)      fn check_assoc_item(
        .                   &self,
        .                   def_id: LocalDefId,
        .                   assoc_item_kind: AssocItemKind,
        .                   defaultness: hir::Defaultness,
        .                   vis: ty::Visibility,
        .               ) {
        .                   let mut check = self.check(def_id, vis);
        .           
    5,350 ( 0.00%)          let (check_ty, is_assoc_ty) = match assoc_item_kind {
        .                       AssocItemKind::Const | AssocItemKind::Fn { .. } => (true, false),
        .                       AssocItemKind::Type => (defaultness.has_value(), true),
        .                   };
    5,350 ( 0.00%)          check.in_assoc_ty = is_assoc_ty;
   10,700 ( 0.00%)          check.generics().predicates();
        .                   if check_ty {
    2,675 ( 0.00%)              check.ty();
        .                   }
   21,400 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> Visitor<'tcx> for PrivateItemsInPublicInterfacesVisitor<'tcx> {
        .               type NestedFilter = nested_filter::OnlyBodies;
        .           
        .               fn nested_visit_map(&mut self) -> Self::Map {
    2,891 ( 0.00%)          self.tcx.hir()
        .               }
        .           
   32,400 ( 0.00%)      fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {
    3,600 ( 0.00%)          let tcx = self.tcx;
    3,600 ( 0.00%)          let item_visibility = tcx.visibility(item.def_id);
        .           
   18,000 ( 0.00%)          match item.kind {
        .                       // Crates are always public.
        .                       hir::ItemKind::ExternCrate(..) => {}
        .                       // All nested items are checked by `visit_item`.
        .                       hir::ItemKind::Mod(..) => {}
        .                       // Checked in resolve.
        .                       hir::ItemKind::Use(..) => {}
        .                       // No subitems.
        .                       hir::ItemKind::Macro(..) | hir::ItemKind::GlobalAsm(..) => {}
        .                       // Subitems of these items have inherited publicity.
        .                       hir::ItemKind::Const(..)
        .                       | hir::ItemKind::Static(..)
        .                       | hir::ItemKind::Fn(..)
        .                       | hir::ItemKind::TyAlias(..) => {
       12 ( 0.00%)                  self.check(item.def_id, item_visibility).generics().predicates().ty();
        .                       }
        .                       hir::ItemKind::OpaqueTy(..) => {
        .                           // `ty()` for opaque types is the underlying type,
        .                           // it's not a part of interface, so we skip it.
        5 ( 0.00%)                  self.check(item.def_id, item_visibility).generics().bounds();
        .                       }
        8 ( 0.00%)              hir::ItemKind::Trait(.., trait_item_refs) => {
        8 ( 0.00%)                  self.check(item.def_id, item_visibility).generics().predicates();
        .           
        .                           for trait_item_ref in trait_item_refs {
      582 ( 0.00%)                      self.check_assoc_item(
       97 ( 0.00%)                          trait_item_ref.id.def_id,
        .                                   trait_item_ref.kind,
        .                                   trait_item_ref.defaultness,
        .                                   item_visibility,
        .                               );
        .           
      204 ( 0.00%)                      if let AssocItemKind::Type = trait_item_ref.kind {
        .                                   self.check(trait_item_ref.id.def_id, item_visibility).bounds();
        .                               }
        .                           }
        .                       }
        .                       hir::ItemKind::TraitAlias(..) => {
        .                           self.check(item.def_id, item_visibility).generics().predicates();
        .                       }
        .                       hir::ItemKind::Enum(ref def, _) => {
      388 ( 0.00%)                  self.check(item.def_id, item_visibility).generics().predicates();
        .           
       97 ( 0.00%)                  for variant in def.variants {
       18 ( 0.00%)                      for field in variant.data.fields() {
      216 ( 0.00%)                          self.check(self.tcx.hir().local_def_id(field.hir_id), item_visibility).ty();
        .                               }
        .                           }
        .                       }
        .                       // Subitems of foreign modules have their own publicity.
        .                       hir::ItemKind::ForeignMod { items, .. } => {
        .                           for foreign_item in items {
        .                               let vis = tcx.visibility(foreign_item.id.def_id);
        .                               self.check(foreign_item.id.def_id, vis).generics().predicates().ty();
        .                           }
        .                       }
        .                       // Subitems of structs and unions have their own publicity.
        .                       hir::ItemKind::Struct(ref struct_def, _) | hir::ItemKind::Union(ref struct_def, _) => {
    3,476 ( 0.00%)                  self.check(item.def_id, item_visibility).generics().predicates();
        .           
    2,607 ( 0.00%)                  for field in struct_def.fields() {
    6,798 ( 0.00%)                      let def_id = tcx.hir().local_def_id(field.hir_id);
        .                               let field_visibility = tcx.visibility(def_id);
    3,399 ( 0.00%)                      self.check(def_id, min(item_visibility, field_visibility, tcx)).ty();
        .                           }
        .                       }
        .                       // An inherent impl is public when its type is public
        .                       // Subitems of inherent impls have their own publicity.
        .                       // A trait impl is public when both its type and its trait are public
        .                       // Subitems of trait impls have inherited publicity.
        .                       hir::ItemKind::Impl(ref impl_) => {
   10,280 ( 0.00%)                  let impl_vis = ty::Visibility::of_impl(item.def_id, tcx, &Default::default());
        .                           // check that private components do not appear in the generics or predicates of inherent impls
        .                           // this check is intentionally NOT performed for impls of traits, per #90586
    5,140 ( 0.00%)                  if impl_.of_trait.is_none() {
    3,410 ( 0.00%)                      self.check(item.def_id, impl_vis).generics().predicates();
        .                           }
    2,570 ( 0.00%)                  for impl_item_ref in impl_.items {
    3,518 ( 0.00%)                      let impl_item_vis = if impl_.of_trait.is_none() {
      780 ( 0.00%)                          min(tcx.visibility(impl_item_ref.id.def_id), impl_vis, tcx)
        .                               } else {
        .                                   impl_vis
        .                               };
   14,688 ( 0.00%)                      self.check_assoc_item(
    2,578 ( 0.00%)                          impl_item_ref.id.def_id,
        .                                   impl_item_ref.kind,
        .                                   impl_item_ref.defaultness,
        .                                   impl_item_vis,
        .                               );
        .                           }
        .                       }
        .                   }
   28,800 ( 0.00%)      }
        .           }
        .           
        .           pub fn provide(providers: &mut Providers) {
        8 ( 0.00%)      *providers = Providers {
        .                   visibility,
        .                   privacy_access_levels,
        .                   check_private_in_public,
        .                   check_mod_privacy,
        .                   ..*providers
        .               };
        1 ( 0.00%)  }
        .           
   75,240 ( 0.00%)  fn visibility(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Visibility {
    8,360 ( 0.00%)      let def_id = def_id.expect_local();
        .               match tcx.resolutions(()).visibilities.get(&def_id) {
   12,448 ( 0.00%)          Some(vis) => *vis,
        .                   None => {
        .                       let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);
   22,687 ( 0.00%)              match tcx.hir().get(hir_id) {
        .                           // Unique types created for closures participate in type privacy checking.
        .                           // They have visibilities inherited from the module they are defined in.
        .                           Node::Expr(hir::Expr { kind: hir::ExprKind::Closure(..), .. }) => {
    1,878 ( 0.00%)                      ty::Visibility::Restricted(tcx.parent_module(hir_id).to_def_id())
        .                           }
        .                           // - AST lowering may clone `use` items and the clones don't
        .                           //   get their entries in the resolver's visibility table.
        .                           // - AST lowering also creates opaque type items with inherited visibilies.
        .                           //   Visibility on them should have no effect, but to avoid the visibility
        .                           //   query failing on some items, we provide it for opaque types as well.
        .                           Node::Item(hir::Item {
       25 ( 0.00%)                      vis,
        .                               kind: hir::ItemKind::Use(..) | hir::ItemKind::OpaqueTy(..),
        .                               ..
      150 ( 0.00%)                  }) => ty::Visibility::from_hir(vis, hir_id, tcx),
        .                           // Visibilities of trait impl items are inherited from their traits
        .                           // and are not filled in resolve.
        .                           Node::ImplItem(impl_item) => {
   23,374 ( 0.00%)                      match tcx.hir().get_by_def_id(tcx.hir().get_parent_item(hir_id)) {
        .                                   Node::Item(hir::Item {
        .                                       kind: hir::ItemKind::Impl(hir::Impl { of_trait: Some(tr), .. }),
        .                                       ..
    1,798 ( 0.00%)                          }) => tr.path.res.opt_def_id().map_or_else(
        .                                       || {
        .                                           tcx.sess.delay_span_bug(tr.path.span, "trait without a def-id");
        .                                           ty::Visibility::Public
        .                                       },
        .                                       |def_id| tcx.visibility(def_id),
        .                                   ),
        .                                   _ => span_bug!(impl_item.span, "the parent is not a trait impl"),
        .                               }
-- line 2021 ----------------------------------------
-- line 2023 ----------------------------------------
        .                           _ => span_bug!(
        .                               tcx.def_span(def_id),
        .                               "visibility table unexpectedly missing a def-id: {:?}",
        .                               def_id,
        .                           ),
        .                       }
        .                   }
        .               }
   66,880 ( 0.00%)  }
        .           
       32 ( 0.00%)  fn check_mod_privacy(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {
        .               // Check privacy of names not checked in previous compilation stages.
        .               let mut visitor =
       16 ( 0.00%)          NamePrivacyVisitor { tcx, maybe_typeck_results: None, current_item: module_def_id };
       36 ( 0.00%)      let (module, span, hir_id) = tcx.hir().get_module(module_def_id);
        .           
        .               intravisit::walk_mod(&mut visitor, module, hir_id);
        .           
        .               // Check privacy of explicitly written types and traits as well as
        .               // inferred types of expressions and patterns.
        .               let mut visitor =
       24 ( 0.00%)          TypePrivacyVisitor { tcx, maybe_typeck_results: None, current_item: module_def_id, span };
        .               intravisit::walk_mod(&mut visitor, module, hir_id);
       32 ( 0.00%)  }
        .           
        7 ( 0.00%)  fn privacy_access_levels(tcx: TyCtxt<'_>, (): ()) -> &AccessLevels {
        .               // Build up a set of all exported items in the AST. This is a set of all
        .               // items which are reachable from external crates based on visibility.
        9 ( 0.00%)      let mut visitor = EmbargoVisitor {
        .                   tcx,
        .                   access_levels: tcx.resolutions(()).access_levels.clone(),
        .                   macro_reachable: Default::default(),
        .                   prev_level: Some(AccessLevel::Public),
        .                   changed: false,
        .               };
        .           
        .               loop {
        .                   tcx.hir().walk_toplevel_module(&mut visitor);
        4 ( 0.00%)          if visitor.changed {
        3 ( 0.00%)              visitor.changed = false;
        .                   } else {
        .                       break;
        .                   }
        .               }
        .           
        1 ( 0.00%)      tcx.arena.alloc(visitor.access_levels)
        9 ( 0.00%)  }
        .           
        8 ( 0.00%)  fn check_private_in_public(tcx: TyCtxt<'_>, (): ()) {
        .               let access_levels = tcx.privacy_access_levels(());
        .           
        9 ( 0.00%)      let mut visitor = ObsoleteVisiblePrivateTypesVisitor {
        .                   tcx,
        .                   access_levels,
        .                   in_variant: false,
        .                   old_error_set: Default::default(),
        .               };
        .               tcx.hir().walk_toplevel_module(&mut visitor);
        .           
        .               let has_pub_restricted = {
        5 ( 0.00%)          let mut pub_restricted_visitor = PubRestrictedVisitor { tcx, has_pub_restricted: false };
        .                   tcx.hir().walk_toplevel_module(&mut pub_restricted_visitor);
        1 ( 0.00%)          pub_restricted_visitor.has_pub_restricted
        .               };
        .           
        .               let mut old_error_set_ancestry = HirIdSet::default();
        9 ( 0.00%)      for mut id in visitor.old_error_set.iter().copied() {
        .                   loop {
        .                       if !old_error_set_ancestry.insert(id) {
        .                           break;
        .                       }
        .                       let parent = tcx.hir().get_parent_node(id);
        .                       if parent == id {
        .                           break;
        .                       }
        .                       id = parent;
        .                   }
        .               }
        .           
        .               // Check for private types and traits in public interfaces.
        8 ( 0.00%)      let mut visitor = PrivateItemsInPublicInterfacesVisitor {
        .                   tcx,
        .                   has_pub_restricted,
        .                   // Only definition IDs are ever searched in `old_error_set_ancestry`,
        .                   // so we can filter away all non-definition IDs at this point.
        .                   old_error_set_ancestry: old_error_set_ancestry
        .                       .into_iter()
        .                       .filter_map(|hir_id| tcx.hir().opt_local_def_id(hir_id))
        .                       .collect(),
        .               };
        6 ( 0.00%)      tcx.hir().visit_all_item_likes(&mut DeepVisitor::new(&mut visitor));
        8 ( 0.00%)  }

3,190,313 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_privacy/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs
--------------------------------------------------------------------------------
Ir                   

-- line 23 ----------------------------------------
          .           use std::cmp::Ordering;
          .           use std::marker::PhantomData;
          .           use std::ops::Range;
          .           use ty::util::IntTypeExt;
          .           
          .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
          .           #[derive(HashStable, TypeFoldable, Lift)]
          .           pub struct TypeAndMut<'tcx> {
      2,324 ( 0.00%)      pub ty: Ty<'tcx>,
     11,620 ( 0.00%)      pub mutbl: hir::Mutability,
          .           }
          .           
          .           #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, TyEncodable, TyDecodable, Copy)]
          .           #[derive(HashStable)]
          .           /// A "free" region `fr` can be interpreted as "some region
          .           /// at least as big as the scope `fr.scope`".
          .           pub struct FreeRegion {
    190,430 ( 0.00%)      pub scope: DefId,
    404,312 ( 0.00%)      pub bound_region: BoundRegionKind,
          .           }
          .           
  3,941,439 ( 0.02%)  #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, TyEncodable, TyDecodable, Copy)]
          .           #[derive(HashStable)]
          .           pub enum BoundRegionKind {
          .               /// An anonymous region parameter for a given fn (&T)
    270,643 ( 0.00%)      BrAnon(u32),
          .           
          .               /// Named region parameters for functions (a in &'a T)
          .               ///
          .               /// The `DefId` is needed to distinguish free regions in
          .               /// the event of shadowing.
      2,549 ( 0.00%)      BrNamed(DefId, Symbol),
          .           
          .               /// Anonymous region for the implicit env pointer parameter
          .               /// to a closure
          .               BrEnv,
          .           }
          .           
      7,628 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable, Debug, PartialOrd, Ord)]
          .           #[derive(HashStable)]
          .           pub struct BoundRegion {
    940,432 ( 0.00%)      pub var: BoundVar,
    810,048 ( 0.00%)      pub kind: BoundRegionKind,
          .           }
          .           
          .           impl BoundRegionKind {
          .               pub fn is_named(&self) -> bool {
          .                   match *self {
          .                       BoundRegionKind::BrNamed(_, name) => name != kw::UnderscoreLifetime,
          .                       _ => false,
          .                   }
          .               }
          .           }
          .           
          .           /// Defines the kinds of types.
          .           ///
          .           /// N.B., if you change this, you'll probably want to change the corresponding
          .           /// AST structure in `rustc_ast/src/ast.rs` as well.
 68,079,359 ( 0.35%)  #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable, Debug)]
          .           #[derive(HashStable)]
          .           #[rustc_diagnostic_item = "TyKind"]
          .           pub enum TyKind<'tcx> {
          .               /// The primitive boolean type. Written as `bool`.
          .               Bool,
          .           
          .               /// The primitive character type; holds a Unicode scalar value
          .               /// (a non-surrogate code point). Written as `char`.
-- line 89 ----------------------------------------
-- line 99 ----------------------------------------
          .               Float(ty::FloatTy),
          .           
          .               /// Algebraic data types (ADT). For example: structures, enumerations and unions.
          .               ///
          .               /// InternalSubsts here, possibly against intuition, *may* contain `Param`s.
          .               /// That is, even after substitution it is possible that there are type
          .               /// variables. This happens when the `Adt` corresponds to an ADT
          .               /// definition and not a concrete use of it.
  9,376,315 ( 0.05%)      Adt(&'tcx AdtDef, SubstsRef<'tcx>),
          .           
          .               /// An unsized FFI type that is opaque to Rust. Written as `extern type T`.
          .               Foreign(DefId),
          .           
          .               /// The pointee of a string slice. Written as `str`.
          .               Str,
          .           
          .               /// An array with the given length. Written as `[T; n]`.
     35,194 ( 0.00%)      Array(Ty<'tcx>, &'tcx ty::Const<'tcx>),
          .           
          .               /// The pointee of an array slice. Written as `[T]`.
          .               Slice(Ty<'tcx>),
          .           
          .               /// A raw pointer. Written as `*mut T` or `*const T`
          .               RawPtr(TypeAndMut<'tcx>),
          .           
          .               /// A reference; a pointer with an associated lifetime. Written as
          .               /// `&'a mut T` or `&'a T`.
  8,365,652 ( 0.04%)      Ref(Region<'tcx>, Ty<'tcx>, hir::Mutability),
          .           
          .               /// The anonymous type of a function declaration/definition. Each
          .               /// function has a unique type, which is output (for a function
          .               /// named `foo` returning an `i32`) as `fn() -> i32 {foo}`.
          .               ///
          .               /// For example the type of `bar` here:
          .               ///
          .               /// ```rust
-- line 134 ----------------------------------------
-- line 143 ----------------------------------------
          .               ///
          .               /// ```rust
          .               /// fn foo() -> i32 { 1 }
          .               /// let bar: fn() -> i32 = foo;
          .               /// ```
          .               FnPtr(PolyFnSig<'tcx>),
          .           
          .               /// A trait object. Written as `dyn for<'b> Trait<'b, Assoc = u32> + Send + 'a`.
    527,004 ( 0.00%)      Dynamic(&'tcx List<Binder<'tcx, ExistentialPredicate<'tcx>>>, ty::Region<'tcx>),
          .           
          .               /// The anonymous type of a closure. Used to represent the type of
          .               /// `|a| a`.
          .               Closure(DefId, SubstsRef<'tcx>),
          .           
          .               /// The anonymous type of a generator. Used to represent the type of
          .               /// `|a| yield a`.
    272,083 ( 0.00%)      Generator(DefId, SubstsRef<'tcx>, hir::Movability),
          .           
          .               /// A type representing the types stored inside a generator.
          .               /// This should only appear in GeneratorInteriors.
          .               GeneratorWitness(Binder<'tcx, &'tcx List<Ty<'tcx>>>),
          .           
          .               /// The never type `!`.
          .               Never,
          .           
-- line 167 ----------------------------------------
-- line 180 ----------------------------------------
          .               /// The substitutions are for the generics of the function in question.
          .               /// After typeck, the concrete type can be found in the `types` map.
          .               Opaque(DefId, SubstsRef<'tcx>),
          .           
          .               /// A type parameter; for example, `T` in `fn f<T>(x: T) {}`.
          .               Param(ParamTy),
          .           
          .               /// Bound type variable, used only when preparing a trait query.
     24,783 ( 0.00%)      Bound(ty::DebruijnIndex, BoundTy),
          .           
          .               /// A placeholder type - universally quantified higher-ranked type.
          .               Placeholder(ty::PlaceholderType),
          .           
          .               /// A type variable used during type checking.
          .               Infer(InferTy),
          .           
          .               /// A placeholder for a type which could not be computed; this is
-- line 196 ----------------------------------------
-- line 330 ----------------------------------------
          .               pub closure_kind_ty: T,
          .               pub closure_sig_as_fn_ptr_ty: T,
          .               pub tupled_upvars_ty: T,
          .           }
          .           
          .           impl<'tcx> ClosureSubsts<'tcx> {
          .               /// Construct `ClosureSubsts` from `ClosureSubstsParts`, containing `Substs`
          .               /// for the closure parent, alongside additional closure-specific components.
        216 ( 0.00%)      pub fn new(
          .                   tcx: TyCtxt<'tcx>,
          .                   parts: ClosureSubstsParts<'tcx, Ty<'tcx>>,
          .               ) -> ClosureSubsts<'tcx> {
          .                   ClosureSubsts {
          .                       substs: tcx.mk_substs(
        432 ( 0.00%)                  parts.parent_substs.iter().copied().chain(
        864 ( 0.00%)                      [parts.closure_kind_ty, parts.closure_sig_as_fn_ptr_ty, parts.tupled_upvars_ty]
          .                                   .iter()
          .                                   .map(|&ty| ty.into()),
          .                           ),
          .                       ),
          .                   }
        432 ( 0.00%)      }
          .           
          .               /// Divides the closure substs into their respective components.
          .               /// The ordering assumed here must match that used by `ClosureSubsts::new` above.
      2,991 ( 0.00%)      fn split(self) -> ClosureSubstsParts<'tcx, GenericArg<'tcx>> {
          .                   match self.substs[..] {
     21,738 ( 0.00%)              [
      6,083 ( 0.00%)                  ref parent_substs @ ..,
      6,325 ( 0.00%)                  closure_kind_ty,
      2,998 ( 0.00%)                  closure_sig_as_fn_ptr_ty,
      4,537 ( 0.00%)                  tupled_upvars_ty,
     11,964 ( 0.00%)              ] => ClosureSubstsParts {
          .                           parent_substs,
          .                           closure_kind_ty,
          .                           closure_sig_as_fn_ptr_ty,
          .                           tupled_upvars_ty,
          .                       },
          .                       _ => bug!("closure substs missing synthetics"),
          .                   }
      8,973 ( 0.00%)      }
          .           
          .               /// Returns `true` only if enough of the synthetic types are known to
          .               /// allow using all of the methods on `ClosureSubsts` without panicking.
          .               ///
          .               /// Used primarily by `ty::print::pretty` to be able to handle closure
          .               /// types that haven't had their synthetic types substituted in.
          .               pub fn is_valid(self) -> bool {
          .                   self.substs.len() >= 3
-- line 378 ----------------------------------------
-- line 384 ----------------------------------------
          .                   self.split().parent_substs
          .               }
          .           
          .               /// Returns an iterator over the list of types of captured paths by the closure.
          .               /// In case there was a type error in figuring out the types of the captured path, an
          .               /// empty iterator is returned.
          .               #[inline]
          .               pub fn upvar_tys(self) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {
        828 ( 0.00%)          match self.tupled_upvars_ty().kind() {
          .                       TyKind::Error(_) => None,
        552 ( 0.00%)              TyKind::Tuple(..) => Some(self.tupled_upvars_ty().tuple_fields()),
          .                       TyKind::Infer(_) => bug!("upvar_tys called before capture types are inferred"),
          .                       ty => bug!("Unexpected representation of upvar types tuple {:?}", ty),
          .                   }
          .                   .into_iter()
          .                   .flatten()
          .               }
          .           
          .               /// Returns the tuple type representing the upvars for this closure.
          .               #[inline]
          .               pub fn tupled_upvars_ty(self) -> Ty<'tcx> {
     13,527 ( 0.00%)          self.split().tupled_upvars_ty.expect_ty()
          .               }
          .           
          .               /// Returns the closure kind for this closure; may return a type
          .               /// variable during inference. To get the closure kind during
          .               /// inference, use `infcx.closure_kind(substs)`.
      1,356 ( 0.00%)      pub fn kind_ty(self) -> Ty<'tcx> {
          .                   self.split().closure_kind_ty.expect_ty()
      2,712 ( 0.00%)      }
          .           
          .               /// Returns the `fn` pointer type representing the closure signature for this
          .               /// closure.
          .               // FIXME(eddyb) this should be unnecessary, as the shallowly resolved
          .               // type is known at the time of the creation of `ClosureSubsts`,
          .               // see `rustc_typeck::check::closure`.
          .               pub fn sig_as_fn_ptr_ty(self) -> Ty<'tcx> {
          .                   self.split().closure_sig_as_fn_ptr_ty.expect_ty()
-- line 421 ----------------------------------------
-- line 426 ----------------------------------------
          .               /// there are no type variables.
          .               ///
          .               /// If you have an inference context, use `infcx.closure_kind()`.
          .               pub fn kind(self) -> ty::ClosureKind {
          .                   self.kind_ty().to_opt_closure_kind().unwrap()
          .               }
          .           
          .               /// Extracts the signature from the closure.
      1,452 ( 0.00%)      pub fn sig(self) -> ty::PolyFnSig<'tcx> {
          .                   let ty = self.sig_as_fn_ptr_ty();
      2,904 ( 0.00%)          match ty.kind() {
      5,808 ( 0.00%)              ty::FnPtr(sig) => *sig,
          .                       _ => bug!("closure_sig_as_fn_ptr_ty is not a fn-ptr: {:?}", ty.kind()),
          .                   }
      4,356 ( 0.00%)      }
          .           }
          .           
          .           /// Similar to `ClosureSubsts`; see the above documentation for more.
          .           #[derive(Copy, Clone, Debug, TypeFoldable)]
          .           pub struct GeneratorSubsts<'tcx> {
          .               pub substs: SubstsRef<'tcx>,
          .           }
          .           
-- line 448 ----------------------------------------
-- line 453 ----------------------------------------
          .               pub return_ty: T,
          .               pub witness: T,
          .               pub tupled_upvars_ty: T,
          .           }
          .           
          .           impl<'tcx> GeneratorSubsts<'tcx> {
          .               /// Construct `GeneratorSubsts` from `GeneratorSubstsParts`, containing `Substs`
          .               /// for the generator parent, alongside additional generator-specific components.
         97 ( 0.00%)      pub fn new(
          .                   tcx: TyCtxt<'tcx>,
          .                   parts: GeneratorSubstsParts<'tcx, Ty<'tcx>>,
          .               ) -> GeneratorSubsts<'tcx> {
          .                   GeneratorSubsts {
          .                       substs: tcx.mk_substs(
        194 ( 0.00%)                  parts.parent_substs.iter().copied().chain(
        291 ( 0.00%)                      [
         97 ( 0.00%)                          parts.resume_ty,
          .                                   parts.yield_ty,
         97 ( 0.00%)                          parts.return_ty,
          .                                   parts.witness,
         97 ( 0.00%)                          parts.tupled_upvars_ty,
          .                               ]
          .                               .iter()
          .                               .map(|&ty| ty.into()),
          .                           ),
          .                       ),
          .                   }
        194 ( 0.00%)      }
          .           
          .               /// Divides the generator substs into their respective components.
          .               /// The ordering assumed here must match that used by `GeneratorSubsts::new` above.
      5,561 ( 0.00%)      fn split(self) -> GeneratorSubstsParts<'tcx, GenericArg<'tcx>> {
          .                   match self.substs[..] {
     84,053 ( 0.00%)              [ref parent_substs @ .., resume_ty, yield_ty, return_ty, witness, tupled_upvars_ty] => {
     27,805 ( 0.00%)                  GeneratorSubstsParts {
          .                               parent_substs,
          .                               resume_ty,
          .                               yield_ty,
          .                               return_ty,
          .                               witness,
          .                               tupled_upvars_ty,
          .                           }
          .                       }
          .                       _ => bug!("generator substs missing synthetics"),
          .                   }
     16,683 ( 0.00%)      }
          .           
          .               /// Returns `true` only if enough of the synthetic types are known to
          .               /// allow using all of the methods on `GeneratorSubsts` without panicking.
          .               ///
          .               /// Used primarily by `ty::print::pretty` to be able to handle generator
          .               /// types that haven't had their synthetic types substituted in.
         97 ( 0.00%)      pub fn is_valid(self) -> bool {
        194 ( 0.00%)          self.substs.len() >= 5
        194 ( 0.00%)              && matches!(self.split().tupled_upvars_ty.expect_ty().kind(), Tuple(_))
        194 ( 0.00%)      }
          .           
          .               /// Returns the substitutions of the generator's parent.
          .               pub fn parent_substs(self) -> &'tcx [GenericArg<'tcx>] {
          .                   self.split().parent_substs
          .               }
          .           
          .               /// This describes the types that can be contained in a generator.
          .               /// It will be a type variable initially and unified in the last stages of typeck of a body.
          .               /// It contains a tuple of all the types that could end up on a generator frame.
          .               /// The state transformation MIR pass may only produce layouts which mention types
          .               /// in this tuple. Upvars are not counted here.
      2,072 ( 0.00%)      pub fn witness(self) -> Ty<'tcx> {
          .                   self.split().witness.expect_ty()
      4,144 ( 0.00%)      }
          .           
          .               /// Returns an iterator over the list of types of captured paths by the generator.
          .               /// In case there was a type error in figuring out the types of the captured path, an
          .               /// empty iterator is returned.
          .               #[inline]
      3,486 ( 0.00%)      pub fn upvar_tys(self) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {
      4,071 ( 0.00%)          match self.tupled_upvars_ty().kind() {
          .                       TyKind::Error(_) => None,
      2,714 ( 0.00%)              TyKind::Tuple(..) => Some(self.tupled_upvars_ty().tuple_fields()),
          .                       TyKind::Infer(_) => bug!("upvar_tys called before capture types are inferred"),
          .                       ty => bug!("Unexpected representation of upvar types tuple {:?}", ty),
          .                   }
          .                   .into_iter()
          .                   .flatten()
      2,324 ( 0.00%)      }
          .           
          .               /// Returns the tuple type representing the upvars for this generator.
          .               #[inline]
          .               pub fn tupled_upvars_ty(self) -> Ty<'tcx> {
     21,705 ( 0.00%)          self.split().tupled_upvars_ty.expect_ty()
          .               }
          .           
          .               /// Returns the type representing the resume type of the generator.
        195 ( 0.00%)      pub fn resume_ty(self) -> Ty<'tcx> {
          .                   self.split().resume_ty.expect_ty()
        390 ( 0.00%)      }
          .           
          .               /// Returns the type representing the yield type of the generator.
         98 ( 0.00%)      pub fn yield_ty(self) -> Ty<'tcx> {
          .                   self.split().yield_ty.expect_ty()
        196 ( 0.00%)      }
          .           
          .               /// Returns the type representing the return type of the generator.
         98 ( 0.00%)      pub fn return_ty(self) -> Ty<'tcx> {
          .                   self.split().return_ty.expect_ty()
        196 ( 0.00%)      }
          .           
          .               /// Returns the "generator signature", which consists of its yield
          .               /// and return types.
          .               ///
          .               /// N.B., some bits of the code prefers to see this wrapped in a
          .               /// binder, but it never contains bound regions. Probably this
          .               /// function should be removed.
      3,888 ( 0.00%)      pub fn poly_sig(self) -> PolyGenSig<'tcx> {
        972 ( 0.00%)          ty::Binder::dummy(self.sig())
      3,888 ( 0.00%)      }
          .           
          .               /// Returns the "generator signature", which consists of its resume, yield
          .               /// and return types.
      1,069 ( 0.00%)      pub fn sig(self) -> GenSig<'tcx> {
      3,207 ( 0.00%)          ty::GenSig {
          .                       resume_ty: self.resume_ty(),
          .                       yield_ty: self.yield_ty(),
          .                       return_ty: self.return_ty(),
          .                   }
      3,207 ( 0.00%)      }
          .           }
          .           
          .           impl<'tcx> GeneratorSubsts<'tcx> {
          .               /// Generator has not been resumed yet.
          .               pub const UNRESUMED: usize = 0;
          .               /// Generator has returned or is completed.
          .               pub const RETURNED: usize = 1;
          .               /// Generator has been poisoned.
-- line 586 ----------------------------------------
-- line 635 ----------------------------------------
          .                       Self::POISONED => Cow::from(Self::POISONED_NAME),
          .                       _ => Cow::from(format!("Suspend{}", v.as_usize() - 3)),
          .                   }
          .               }
          .           
          .               /// The type of the state discriminant used in the generator type.
          .               #[inline]
          .               pub fn discr_ty(&self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
        388 ( 0.00%)          tcx.types.u32
          .               }
          .           
          .               /// This returns the types of the MIR locals which had to be stored across suspension points.
          .               /// It is calculated in rustc_const_eval::transform::generator::StateTransform.
          .               /// All the types here must be in the tuple in GeneratorInterior.
          .               ///
          .               /// The locals are grouped by their variant number. Note that some locals may
          .               /// be repeated in multiple variants.
-- line 651 ----------------------------------------
-- line 659 ----------------------------------------
          .                   layout.variant_fields.iter().map(move |variant| {
          .                       variant.iter().map(move |field| layout.field_tys[*field].subst(tcx, self.substs))
          .                   })
          .               }
          .           
          .               /// This is the types of the fields of a generator which are not stored in a
          .               /// variant.
          .               #[inline]
      3,492 ( 0.00%)      pub fn prefix_tys(self) -> impl Iterator<Item = Ty<'tcx>> {
          .                   self.upvar_tys()
      2,328 ( 0.00%)      }
          .           }
          .           
          .           #[derive(Debug, Copy, Clone, HashStable)]
          .           pub enum UpvarSubsts<'tcx> {
          .               Closure(SubstsRef<'tcx>),
          .               Generator(SubstsRef<'tcx>),
          .           }
          .           
          .           impl<'tcx> UpvarSubsts<'tcx> {
          .               /// Returns an iterator over the list of types of captured paths by the closure/generator.
          .               /// In case there was a type error in figuring out the types of the captured path, an
          .               /// empty iterator is returned.
          .               #[inline]
          .               pub fn upvar_tys(self) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {
        820 ( 0.00%)          let tupled_tys = match self {
        648 ( 0.00%)              UpvarSubsts::Closure(substs) => substs.as_closure().tupled_upvars_ty(),
        485 ( 0.00%)              UpvarSubsts::Generator(substs) => substs.as_generator().tupled_upvars_ty(),
          .                   };
          .           
      1,856 ( 0.00%)          match tupled_tys.kind() {
          .                       TyKind::Error(_) => None,
      1,543 ( 0.00%)              TyKind::Tuple(..) => Some(self.tupled_upvars_ty().tuple_fields()),
          .                       TyKind::Infer(_) => bug!("upvar_tys called before capture types are inferred"),
          .                       ty => bug!("Unexpected representation of upvar types tuple {:?}", ty),
          .                   }
          .                   .into_iter()
          .                   .flatten()
          .               }
          .           
          .               #[inline]
          .               pub fn tupled_upvars_ty(self) -> Ty<'tcx> {
      1,446 ( 0.00%)          match self {
        864 ( 0.00%)              UpvarSubsts::Closure(substs) => substs.as_closure().tupled_upvars_ty(),
        776 ( 0.00%)              UpvarSubsts::Generator(substs) => substs.as_generator().tupled_upvars_ty(),
          .                   }
          .               }
          .           }
          .           
          .           /// An inline const is modeled like
          .           ///
          .           ///     const InlineConst<'l0...'li, T0...Tj, R>: R;
          .           ///
-- line 711 ----------------------------------------
-- line 760 ----------------------------------------
          .               }
          .           
          .               /// Returns the type of this inline const.
          .               pub fn ty(self) -> Ty<'tcx> {
          .                   self.split().ty.expect_ty()
          .               }
          .           }
          .           
  1,176,443 ( 0.01%)  #[derive(Debug, Copy, Clone, PartialEq, PartialOrd, Ord, Eq, Hash, TyEncodable, TyDecodable)]
    741,355 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
          .           pub enum ExistentialPredicate<'tcx> {
          .               /// E.g., `Iterator`.
          .               Trait(ExistentialTraitRef<'tcx>),
          .               /// E.g., `Iterator::Item = T`.
          .               Projection(ExistentialProjection<'tcx>),
          .               /// E.g., `Send`.
     23,736 ( 0.00%)      AutoTrait(DefId),
          .           }
          .           
          .           impl<'tcx> ExistentialPredicate<'tcx> {
          .               /// Compares via an ordering that will not change if modules are reordered or other changes are
          .               /// made to the tree. In particular, this ordering is preserved across incremental compilations.
    219,665 ( 0.00%)      pub fn stable_cmp(&self, tcx: TyCtxt<'tcx>, other: &Self) -> Ordering {
          .                   use self::ExistentialPredicate::*;
    331,764 ( 0.00%)          match (*self, *other) {
          .                       (Trait(_), Trait(_)) => Ordering::Equal,
          .                       (Projection(ref a), Projection(ref b)) => {
          .                           tcx.def_path_hash(a.item_def_id).cmp(&tcx.def_path_hash(b.item_def_id))
          .                       }
          .                       (AutoTrait(ref a), AutoTrait(ref b)) => {
          .                           tcx.def_path_hash(*a).cmp(&tcx.def_path_hash(*b))
          .                       }
          .                       (Trait(_), _) => Ordering::Less,
          .                       (Projection(_), Trait(_)) => Ordering::Greater,
          .                       (Projection(_), _) => Ordering::Less,
          .                       (AutoTrait(_), _) => Ordering::Greater,
          .                   }
    263,598 ( 0.00%)      }
          .           }
          .           
          .           impl<'tcx> Binder<'tcx, ExistentialPredicate<'tcx>> {
     35,982 ( 0.00%)      pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::Predicate<'tcx> {
          .                   use crate::ty::ToPredicate;
     23,446 ( 0.00%)          match self.skip_binder() {
          .                       ExistentialPredicate::Trait(tr) => {
          .                           self.rebind(tr).with_self_ty(tcx, self_ty).without_const().to_predicate(tcx)
          .                       }
          .                       ExistentialPredicate::Projection(p) => {
        192 ( 0.00%)                  self.rebind(p.with_self_ty(tcx, self_ty)).to_predicate(tcx)
          .                       }
          .                       ExistentialPredicate::AutoTrait(did) => {
      2,016 ( 0.00%)                  let trait_ref = self.rebind(ty::TraitRef {
          .                               def_id: did,
          .                               substs: tcx.mk_substs_trait(self_ty, &[]),
          .                           });
          .                           trait_ref.without_const().to_predicate(tcx)
          .                       }
          .                   }
     31,984 ( 0.00%)      }
          .           }
          .           
          .           impl<'tcx> List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>> {
          .               /// Returns the "principal `DefId`" of this set of existential predicates.
          .               ///
          .               /// A Rust trait object type consists (in addition to a lifetime bound)
          .               /// of a set of trait bounds, which are separated into any number
          .               /// of auto-trait bounds, and at most one non-auto-trait bound. The
-- line 826 ----------------------------------------
-- line 839 ----------------------------------------
          .               /// are the set `{Sync}`.
          .               ///
          .               /// It is also possible to have a "trivial" trait object that
          .               /// consists only of auto traits, with no principal - for example,
          .               /// `dyn Send + Sync`. In that case, the set of auto-trait bounds
          .               /// is `{Send, Sync}`, while there is no principal. These trait objects
          .               /// have a "trivial" vtable consisting of just the size, alignment,
          .               /// and destructor.
        384 ( 0.00%)      pub fn principal(&self) -> Option<ty::Binder<'tcx, ExistentialTraitRef<'tcx>>> {
     15,488 ( 0.00%)          self[0]
     14,336 ( 0.00%)              .map_bound(|this| match this {
          .                           ExistentialPredicate::Trait(tr) => Some(tr),
          .                           _ => None,
      1,536 ( 0.00%)              })
          .                       .transpose()
      1,152 ( 0.00%)      }
          .           
      3,710 ( 0.00%)      pub fn principal_def_id(&self) -> Option<DefId> {
          .                   self.principal().map(|trait_ref| trait_ref.skip_binder().def_id)
      7,420 ( 0.00%)      }
          .           
          .               #[inline]
          .               pub fn projection_bounds<'a>(
          .                   &'a self,
          .               ) -> impl Iterator<Item = ty::Binder<'tcx, ExistentialProjection<'tcx>>> + 'a {
          .                   self.iter().filter_map(|predicate| {
          .                       predicate
      4,032 ( 0.00%)                  .map_bound(|pred| match pred {
        768 ( 0.00%)                      ExistentialPredicate::Projection(projection) => Some(projection),
          .                               _ => None,
          .                           })
          .                           .transpose()
          .                   })
          .               }
          .           
          .               #[inline]
          .               pub fn auto_traits<'a>(&'a self) -> impl Iterator<Item = DefId> + 'a {
      1,986 ( 0.00%)          self.iter().filter_map(|predicate| match predicate.skip_binder() {
          .                       ExistentialPredicate::AutoTrait(did) => Some(did),
          .                       _ => None,
          .                   })
          .               }
          .           }
          .           
          .           /// A complete reference to a trait. These take numerous guises in syntax,
          .           /// but perhaps the most recognizable form is in a where-clause:
-- line 884 ----------------------------------------
-- line 886 ----------------------------------------
          .           ///     T: Foo<U>
          .           ///
          .           /// This would be represented by a trait-reference where the `DefId` is the
          .           /// `DefId` for the trait `Foo` and the substs define `T` as parameter 0,
          .           /// and `U` as parameter 1.
          .           ///
          .           /// Trait references also appear in object types like `Foo<U>`, but in
          .           /// that case the `Self` parameter is absent from the substitutions.
     30,023 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
  6,578,756 ( 0.03%)  #[derive(HashStable, TypeFoldable)]
          .           pub struct TraitRef<'tcx> {
      1,778 ( 0.00%)      pub def_id: DefId,
  5,329,264 ( 0.03%)      pub substs: SubstsRef<'tcx>,
          .           }
          .           
          .           impl<'tcx> TraitRef<'tcx> {
     13,381 ( 0.00%)      pub fn new(def_id: DefId, substs: SubstsRef<'tcx>) -> TraitRef<'tcx> {
          .                   TraitRef { def_id, substs }
     53,524 ( 0.00%)      }
          .           
          .               /// Returns a `TraitRef` of the form `P0: Foo<P1..Pn>` where `Pi`
          .               /// are the parameters defined on trait.
      7,290 ( 0.00%)      pub fn identity(tcx: TyCtxt<'tcx>, def_id: DefId) -> Binder<'tcx, TraitRef<'tcx>> {
      3,240 ( 0.00%)          ty::Binder::dummy(TraitRef {
          .                       def_id,
      4,860 ( 0.00%)              substs: InternalSubsts::identity_for_item(tcx, def_id),
          .                   })
      6,480 ( 0.00%)      }
          .           
          .               #[inline]
          .               pub fn self_ty(&self) -> Ty<'tcx> {
          .                   self.substs.type_at(0)
          .               }
          .           
      5,024 ( 0.00%)      pub fn from_method(
          .                   tcx: TyCtxt<'tcx>,
          .                   trait_id: DefId,
          .                   substs: SubstsRef<'tcx>,
          .               ) -> ty::TraitRef<'tcx> {
          .                   let defs = tcx.generics_of(trait_id);
          .           
        628 ( 0.00%)          ty::TraitRef { def_id: trait_id, substs: tcx.intern_substs(&substs[..defs.params.len()]) }
      6,908 ( 0.00%)      }
          .           }
          .           
          .           pub type PolyTraitRef<'tcx> = Binder<'tcx, TraitRef<'tcx>>;
          .           
          .           impl<'tcx> PolyTraitRef<'tcx> {
          .               pub fn self_ty(&self) -> Binder<'tcx, Ty<'tcx>> {
          .                   self.map_bound_ref(|tr| tr.self_ty())
          .               }
          .           
          .               pub fn def_id(&self) -> DefId {
     68,634 ( 0.00%)          self.skip_binder().def_id
     22,878 ( 0.00%)      }
          .           
      7,733 ( 0.00%)      pub fn to_poly_trait_predicate(&self) -> ty::PolyTraitPredicate<'tcx> {
     15,466 ( 0.00%)          self.map_bound(|trait_ref| ty::TraitPredicate {
          .                       trait_ref,
          .                       constness: ty::BoundConstness::NotConst,
          .                       polarity: ty::ImplPolarity::Positive,
          .                   })
      7,733 ( 0.00%)      }
          .           }
          .           
          .           /// An existential reference to a trait, where `Self` is erased.
          .           /// For example, the trait object `Trait<'a, 'b, X, Y>` is:
          .           ///
          .           ///     exists T. T: Trait<'a, 'b, X, Y>
          .           ///
          .           /// The substitutions don't include the erased `Self`, only trait
          .           /// type and lifetime parameters (`[X, Y]` and `['a, 'b]` above).
        848 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
    206,974 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
          .           pub struct ExistentialTraitRef<'tcx> {
     29,114 ( 0.00%)      pub def_id: DefId,
    244,552 ( 0.00%)      pub substs: SubstsRef<'tcx>,
          .           }
          .           
          .           impl<'tcx> ExistentialTraitRef<'tcx> {
      3,080 ( 0.00%)      pub fn erase_self_ty(
          .                   tcx: TyCtxt<'tcx>,
          .                   trait_ref: ty::TraitRef<'tcx>,
          .               ) -> ty::ExistentialTraitRef<'tcx> {
          .                   // Assert there is a Self.
          .                   trait_ref.substs.type_at(0);
          .           
          .                   ty::ExistentialTraitRef {
          .                       def_id: trait_ref.def_id,
          .                       substs: tcx.intern_substs(&trait_ref.substs[1..]),
          .                   }
      3,080 ( 0.00%)      }
          .           
          .               /// Object types don't have a self type specified. Therefore, when
          .               /// we convert the principal trait-ref into a normal trait-ref,
          .               /// you must give *some* self type. A common choice is `mk_err()`
          .               /// or some placeholder type.
          .               pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::TraitRef<'tcx> {
          .                   // otherwise the escaping vars would be captured by the binder
          .                   // debug_assert!(!self_ty.has_escaping_bound_vars());
-- line 985 ----------------------------------------
-- line 999 ----------------------------------------
          .               /// we convert the principal trait-ref into a normal trait-ref,
          .               /// you must give *some* self type. A common choice is `mk_err()`
          .               /// or some placeholder type.
          .               pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::PolyTraitRef<'tcx> {
          .                   self.map_bound(|trait_ref| trait_ref.with_self_ty(tcx, self_ty))
          .               }
          .           }
          .           
    213,105 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
          .           #[derive(HashStable)]
          .           pub enum BoundVariableKind {
          .               Ty(BoundTyKind),
          .               Region(BoundRegionKind),
          .               Const,
          .           }
          .           
          .           /// Binder is a binder for higher-ranked lifetimes or types. It is part of the
-- line 1015 ----------------------------------------
-- line 1016 ----------------------------------------
          .           /// compiler's representation for things like `for<'a> Fn(&'a isize)`
          .           /// (which would be represented by the type `PolyTraitRef ==
          .           /// Binder<'tcx, TraitRef>`). Note that when we instantiate,
          .           /// erase, or otherwise "discharge" these bound vars, we change the
          .           /// type from `Binder<'tcx, T>` to just `T` (see
          .           /// e.g., `liberate_late_bound_regions`).
          .           ///
          .           /// `Decodable` and `Encodable` are implemented for `Binder<T>` using the `impl_binder_encode_decode!` macro.
  1,070,991 ( 0.01%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
  3,463,768 ( 0.02%)  pub struct Binder<'tcx, T>(T, &'tcx List<BoundVariableKind>);
          .           
          .           impl<'tcx, T> Binder<'tcx, T>
          .           where
          .               T: TypeFoldable<'tcx>,
          .           {
          .               /// Wraps `value` in a binder, asserting that `value` does not
          .               /// contain any bound vars that would be bound by the
          .               /// binder. This is commonly used to 'inject' a value T into a
          .               /// different binding level.
    192,702 ( 0.00%)      pub fn dummy(value: T) -> Binder<'tcx, T> {
    768,395 ( 0.00%)          assert!(!value.has_escaping_bound_vars());
  1,724,320 ( 0.01%)          Binder(value, ty::List::empty())
    190,909 ( 0.00%)      }
          .           
          .               pub fn bind_with_vars(value: T, vars: &'tcx List<BoundVariableKind>) -> Binder<'tcx, T> {
          .                   if cfg!(debug_assertions) {
          .                       let mut validator = ValidateBoundVars::new(vars);
          .                       value.visit_with(&mut validator);
          .                   }
     38,332 ( 0.00%)          Binder(value, vars)
          .               }
          .           }
          .           
          .           impl<'tcx, T> Binder<'tcx, T> {
          .               /// Skips the binder and returns the "bound" value. This is a
          .               /// risky thing to do because it's easy to get confused about
          .               /// De Bruijn indices and the like. It is usually better to
          .               /// discharge the binder using `no_bound_vars` or
-- line 1053 ----------------------------------------
-- line 1059 ----------------------------------------
          .               /// accounting.
          .               ///
          .               /// Some examples where `skip_binder` is reasonable:
          .               ///
          .               /// - extracting the `DefId` from a PolyTraitRef;
          .               /// - comparing the self type of a PolyTraitRef to see if it is equal to
          .               ///   a type parameter `X`, since the type `X` does not reference any regions
          .               pub fn skip_binder(self) -> T {
  8,312,538 ( 0.04%)          self.0
          .               }
          .           
          .               pub fn bound_vars(&self) -> &'tcx List<BoundVariableKind> {
      1,306 ( 0.00%)          self.1
          .               }
          .           
          .               pub fn as_ref(&self) -> Binder<'tcx, &T> {
     41,875 ( 0.00%)          Binder(&self.0, self.1)
          .               }
          .           
          .               pub fn map_bound_ref_unchecked<F, U>(&self, f: F) -> Binder<'tcx, U>
          .               where
          .                   F: FnOnce(&T) -> U,
          .               {
          .                   let value = f(&self.0);
          .                   Binder(value, self.1)
-- line 1083 ----------------------------------------
-- line 1085 ----------------------------------------
          .           
          .               pub fn map_bound_ref<F, U: TypeFoldable<'tcx>>(&self, f: F) -> Binder<'tcx, U>
          .               where
          .                   F: FnOnce(&T) -> U,
          .               {
          .                   self.as_ref().map_bound(f)
          .               }
          .           
     33,855 ( 0.00%)      pub fn map_bound<F, U: TypeFoldable<'tcx>>(self, f: F) -> Binder<'tcx, U>
          .               where
          .                   F: FnOnce(T) -> U,
          .               {
    661,760 ( 0.00%)          let value = f(self.0);
          .                   if cfg!(debug_assertions) {
          .                       let mut validator = ValidateBoundVars::new(self.1);
          .                       value.visit_with(&mut validator);
          .                   }
  2,293,135 ( 0.01%)          Binder(value, self.1)
     34,845 ( 0.00%)      }
          .           
          .               pub fn try_map_bound<F, U: TypeFoldable<'tcx>, E>(self, f: F) -> Result<Binder<'tcx, U>, E>
          .               where
          .                   F: FnOnce(T) -> Result<U, E>,
          .               {
          .                   let value = f(self.0)?;
          .                   if cfg!(debug_assertions) {
          .                       let mut validator = ValidateBoundVars::new(self.1);
          .                       value.visit_with(&mut validator);
          .                   }
     32,074 ( 0.00%)          Ok(Binder(value, self.1))
          .               }
          .           
          .               /// Wraps a `value` in a binder, using the same bound variables as the
          .               /// current `Binder`. This should not be used if the new value *changes*
          .               /// the bound variables. Note: the (old or new) value itself does not
          .               /// necessarily need to *name* all the bound variables.
          .               ///
          .               /// This currently doesn't do anything different than `bind`, because we
-- line 1122 ----------------------------------------
-- line 1126 ----------------------------------------
          .               pub fn rebind<U>(&self, value: U) -> Binder<'tcx, U>
          .               where
          .                   U: TypeFoldable<'tcx>,
          .               {
          .                   if cfg!(debug_assertions) {
          .                       let mut validator = ValidateBoundVars::new(self.bound_vars());
          .                       value.visit_with(&mut validator);
          .                   }
    151,611 ( 0.00%)          Binder(value, self.1)
          .               }
          .           
          .               /// Unwraps and returns the value within, but only if it contains
          .               /// no bound vars at all. (In other words, if this binder --
          .               /// and indeed any enclosing binder -- doesn't bind anything at
          .               /// all.) Otherwise, returns `None`.
          .               ///
          .               /// (One could imagine having a method that just unwraps a single
-- line 1142 ----------------------------------------
-- line 1143 ----------------------------------------
          .               /// binder, but permits late-bound vars bound by enclosing
          .               /// binders, but that would require adjusting the debruijn
          .               /// indices, and given the shallow binding structure we often use,
          .               /// would not be that useful.)
          .               pub fn no_bound_vars(self) -> Option<T>
          .               where
          .                   T: TypeFoldable<'tcx>,
          .               {
  1,110,650 ( 0.01%)          if self.0.has_escaping_bound_vars() { None } else { Some(self.skip_binder()) }
        270 ( 0.00%)      }
          .           
          .               /// Splits the contents into two things that share the same binder
          .               /// level as the original, returning two distinct binders.
          .               ///
          .               /// `f` should consider bound regions at depth 1 to be free, and
          .               /// anything it produces with bound regions at depth 1 will be
          .               /// bound in the resulting return values.
          .               pub fn split<U, V, F>(self, f: F) -> (Binder<'tcx, U>, Binder<'tcx, V>)
-- line 1160 ----------------------------------------
-- line 1170 ----------------------------------------
          .               pub fn transpose(self) -> Option<Binder<'tcx, T>> {
          .                   let bound_vars = self.1;
          .                   self.0.map(|v| Binder(v, bound_vars))
          .               }
          .           }
          .           
          .           /// Represents the projection of an associated type. In explicit UFCS
          .           /// form this would be written `<T as Trait<..>>::N`.
      1,866 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
    202,049 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
          .           pub struct ProjectionTy<'tcx> {
          .               /// The parameters of the associated item.
     85,641 ( 0.00%)      pub substs: SubstsRef<'tcx>,
          .           
          .               /// The `DefId` of the `TraitItem` for the associated type `N`.
          .               ///
          .               /// Note that this is not the `DefId` of the `TraitRef` containing this
          .               /// associated type, which is in `tcx.associated_item(item_def_id).container`.
     95,776 ( 0.00%)      pub item_def_id: DefId,
          .           }
          .           
          .           impl<'tcx> ProjectionTy<'tcx> {
     55,671 ( 0.00%)      pub fn trait_def_id(&self, tcx: TyCtxt<'tcx>) -> DefId {
     15,906 ( 0.00%)          tcx.associated_item(self.item_def_id).container.id()
     63,624 ( 0.00%)      }
          .           
          .               /// Extracts the underlying trait reference and own substs from this projection.
          .               /// For example, if this is a projection of `<T as StreamingIterator>::Item<'a>`,
          .               /// then this function would return a `T: Iterator` trait reference and `['a]` as the own substs
     47,040 ( 0.00%)      pub fn trait_ref_and_own_substs(
          .                   &self,
          .                   tcx: TyCtxt<'tcx>,
          .               ) -> (ty::TraitRef<'tcx>, &'tcx [ty::GenericArg<'tcx>]) {
     20,160 ( 0.00%)          let def_id = tcx.associated_item(self.item_def_id).container.id();
          .                   let trait_generics = tcx.generics_of(def_id);
     33,600 ( 0.00%)          (
          .                       ty::TraitRef { def_id, substs: self.substs.truncate_to(tcx, trait_generics) },
          .                       &self.substs[trait_generics.count()..],
          .                   )
     60,480 ( 0.00%)      }
          .           
          .               /// Extracts the underlying trait reference from this projection.
          .               /// For example, if this is a projection of `<T as Iterator>::Item`,
          .               /// then this function would return a `T: Iterator` trait reference.
          .               ///
          .               /// WARNING: This will drop the substs for generic associated types
          .               /// consider calling [Self::trait_ref_and_own_substs] to get those
          .               /// as well.
     69,372 ( 0.00%)      pub fn trait_ref(&self, tcx: TyCtxt<'tcx>) -> ty::TraitRef<'tcx> {
      7,708 ( 0.00%)          let def_id = self.trait_def_id(tcx);
      7,708 ( 0.00%)          ty::TraitRef { def_id, substs: self.substs.truncate_to(tcx, tcx.generics_of(def_id)) }
     84,788 ( 0.00%)      }
          .           
     15,825 ( 0.00%)      pub fn self_ty(&self) -> Ty<'tcx> {
     47,475 ( 0.00%)          self.substs.type_at(0)
     31,650 ( 0.00%)      }
          .           }
          .           
      4,278 ( 0.00%)  #[derive(Copy, Clone, Debug, TypeFoldable)]
          .           pub struct GenSig<'tcx> {
          .               pub resume_ty: Ty<'tcx>,
          .               pub yield_ty: Ty<'tcx>,
          .               pub return_ty: Ty<'tcx>,
          .           }
          .           
          .           pub type PolyGenSig<'tcx> = Binder<'tcx, GenSig<'tcx>>;
          .           
          .           /// Signature of a function type, which we have arbitrarily
          .           /// decided to use to refer to the input/output types.
          .           ///
          .           /// - `inputs`: is the list of arguments and their modes.
          .           /// - `output`: is the return type.
          .           /// - `c_variadic`: indicates whether this is a C-variadic function.
    240,134 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
    145,559 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
          .           pub struct FnSig<'tcx> {
     21,185 ( 0.00%)      pub inputs_and_output: &'tcx List<Ty<'tcx>>,
    204,454 ( 0.00%)      pub c_variadic: bool,
     44,823 ( 0.00%)      pub unsafety: hir::Unsafety,
    166,167 ( 0.00%)      pub abi: abi::Abi,
          .           }
          .           
          .           impl<'tcx> FnSig<'tcx> {
    163,671 ( 0.00%)      pub fn inputs(&self) -> &'tcx [Ty<'tcx>] {
    673,461 ( 0.00%)          &self.inputs_and_output[..self.inputs_and_output.len() - 1]
    327,342 ( 0.00%)      }
          .           
     95,812 ( 0.00%)      pub fn output(&self) -> Ty<'tcx> {
    687,340 ( 0.00%)          self.inputs_and_output[self.inputs_and_output.len() - 1]
    191,624 ( 0.00%)      }
          .           
          .               // Creates a minimal `FnSig` to be used when encountering a `TyKind::Error` in a fallible
          .               // method.
          .               fn fake() -> FnSig<'tcx> {
          .                   FnSig {
          .                       inputs_and_output: List::empty(),
          .                       c_variadic: false,
          .                       unsafety: hir::Unsafety::Normal,
-- line 1267 ----------------------------------------
-- line 1270 ----------------------------------------
          .               }
          .           }
          .           
          .           pub type PolyFnSig<'tcx> = Binder<'tcx, FnSig<'tcx>>;
          .           
          .           impl<'tcx> PolyFnSig<'tcx> {
          .               #[inline]
          .               pub fn inputs(&self) -> Binder<'tcx, &'tcx [Ty<'tcx>]> {
     27,272 ( 0.00%)          self.map_bound_ref_unchecked(|fn_sig| fn_sig.inputs())
          .               }
          .               #[inline]
          .               pub fn input(&self, index: usize) -> ty::Binder<'tcx, Ty<'tcx>> {
     83,371 ( 0.00%)          self.map_bound_ref(|fn_sig| fn_sig.inputs()[index])
          .               }
          .               pub fn inputs_and_output(&self) -> ty::Binder<'tcx, &'tcx List<Ty<'tcx>>> {
          .                   self.map_bound_ref(|fn_sig| fn_sig.inputs_and_output)
      2,795 ( 0.00%)      }
          .               #[inline]
          .               pub fn output(&self) -> ty::Binder<'tcx, Ty<'tcx>> {
     48,710 ( 0.00%)          self.map_bound_ref(|fn_sig| fn_sig.output())
          .               }
          .               pub fn c_variadic(&self) -> bool {
      5,590 ( 0.00%)          self.skip_binder().c_variadic
      2,795 ( 0.00%)      }
          .               pub fn unsafety(&self) -> hir::Unsafety {
     32,358 ( 0.00%)          self.skip_binder().unsafety
     16,179 ( 0.00%)      }
          .               pub fn abi(&self) -> abi::Abi {
     52,028 ( 0.00%)          self.skip_binder().abi
     13,007 ( 0.00%)      }
          .           }
          .           
          .           pub type CanonicalPolyFnSig<'tcx> = Canonical<'tcx, Binder<'tcx, FnSig<'tcx>>>;
          .           
         44 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
          .           #[derive(HashStable)]
          .           pub struct ParamTy {
        184 ( 0.00%)      pub index: u32,
          .               pub name: Symbol,
          .           }
          .           
          .           impl<'tcx> ParamTy {
      1,368 ( 0.00%)      pub fn new(index: u32, name: Symbol) -> ParamTy {
          .                   ParamTy { index, name }
        684 ( 0.00%)      }
          .           
          .               pub fn for_def(def: &ty::GenericParamDef) -> ParamTy {
          .                   ParamTy::new(def.index, def.name)
          .               }
          .           
          .               #[inline]
          .               pub fn to_ty(self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
          .                   tcx.mk_ty_param(self.index, self.name)
          .               }
          .           }
          .           
          .           #[derive(Copy, Clone, Hash, TyEncodable, TyDecodable, Eq, PartialEq, Ord, PartialOrd)]
          .           #[derive(HashStable)]
          .           pub struct ParamConst {
         56 ( 0.00%)      pub index: u32,
         56 ( 0.00%)      pub name: Symbol,
          .           }
          .           
          .           impl ParamConst {
          .               pub fn new(index: u32, name: Symbol) -> ParamConst {
          .                   ParamConst { index, name }
          .               }
          .           
          .               pub fn for_def(def: &ty::GenericParamDef) -> ParamConst {
-- line 1338 ----------------------------------------
-- line 1440 ----------------------------------------
          .           /// the inference variable is supposed to satisfy the relation
          .           /// *for every value of the placeholder region*. To ensure that doesn't
          .           /// happen, you can use `leak_check`. This is more clearly explained
          .           /// by the [rustc dev guide].
          .           ///
          .           /// [1]: https://smallcultfollowing.com/babysteps/blog/2013/10/29/intermingled-parameter-lists/
          .           /// [2]: https://smallcultfollowing.com/babysteps/blog/2013/11/04/intermingled-parameter-lists/
          .           /// [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/traits/hrtb.html
 31,965,649 ( 0.16%)  #[derive(Clone, PartialEq, Eq, Hash, Copy, TyEncodable, TyDecodable, PartialOrd, Ord)]
         46 ( 0.00%)  pub enum RegionKind {
          .               /// Region bound in a type or fn declaration which will be
          .               /// substituted 'early' -- that is, at the same time when type
          .               /// parameters are substituted.
          .               ReEarlyBound(EarlyBoundRegion),
          .           
          .               /// Region bound in a function scope, which will be substituted when the
          .               /// function is called.
  1,619,252 ( 0.01%)      ReLateBound(ty::DebruijnIndex, BoundRegion),
          .           
          .               /// When checking a function body, the types of all arguments and so forth
          .               /// that refer to bound region parameters are modified to refer to free
          .               /// region parameters.
          .               ReFree(FreeRegion),
          .           
          .               /// Static data that has an "infinite" lifetime. Top in the region lattice.
          .               ReStatic,
-- line 1465 ----------------------------------------
-- line 1478 ----------------------------------------
          .               /// regions visible from `U`, but not less than regions not visible
          .               /// from `U`.
          .               ReEmpty(ty::UniverseIndex),
          .           
          .               /// Erased region, used by trait selection, in MIR and during codegen.
          .               ReErased,
          .           }
          .           
     25,612 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable, Debug, PartialOrd, Ord)]
          .           pub struct EarlyBoundRegion {
    147,793 ( 0.00%)      pub def_id: DefId,
     34,064 ( 0.00%)      pub index: u32,
    753,354 ( 0.00%)      pub name: Symbol,
          .           }
          .           
          .           /// A **`const`** **v**ariable **ID**.
          .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
          .           pub struct ConstVid<'tcx> {
      8,322 ( 0.00%)      pub index: u32,
        145 ( 0.00%)      pub phantom: PhantomData<&'tcx ()>,
          .           }
          .           
          .           rustc_index::newtype_index! {
          .               /// A **region** (lifetime) **v**ariable **ID**.
          .               pub struct RegionVid {
          .                   DEBUG_FORMAT = custom,
          .               }
          .           }
-- line 1505 ----------------------------------------
-- line 1513 ----------------------------------------
          .           rustc_index::newtype_index! {
          .               pub struct BoundVar { .. }
          .           }
          .           
          .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
          .           #[derive(HashStable)]
          .           pub struct BoundTy {
          .               pub var: BoundVar,
     24,783 ( 0.00%)      pub kind: BoundTyKind,
          .           }
          .           
    421,431 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
          .           #[derive(HashStable)]
          .           pub enum BoundTyKind {
          .               Anon,
          .               Param(Symbol),
          .           }
          .           
          .           impl From<BoundVar> for BoundTy {
          .               fn from(var: BoundVar) -> Self {
          .                   BoundTy { var, kind: BoundTyKind::Anon }
          .               }
          .           }
          .           
          .           /// A `ProjectionPredicate` for an `ExistentialTraitRef`.
      2,496 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
     76,584 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
          .           pub struct ExistentialProjection<'tcx> {
     12,704 ( 0.00%)      pub item_def_id: DefId,
     91,816 ( 0.00%)      pub substs: SubstsRef<'tcx>,
     22,954 ( 0.00%)      pub term: Term<'tcx>,
          .           }
          .           
          .           pub type PolyExistentialProjection<'tcx> = Binder<'tcx, ExistentialProjection<'tcx>>;
          .           
          .           impl<'tcx> ExistentialProjection<'tcx> {
          .               /// Extracts the underlying existential trait reference from this projection.
          .               /// For example, if this is a projection of `exists T. <T as Iterator>::Item == X`,
          .               /// then this function would return an `exists T. T: Iterator` existential trait
          .               /// reference.
     10,080 ( 0.00%)      pub fn trait_ref(&self, tcx: TyCtxt<'tcx>) -> ty::ExistentialTraitRef<'tcx> {
      4,320 ( 0.00%)          let def_id = tcx.associated_item(self.item_def_id).container.id();
      2,880 ( 0.00%)          let subst_count = tcx.generics_of(def_id).count() - 1;
      1,440 ( 0.00%)          let substs = tcx.intern_substs(&self.substs[..subst_count]);
          .                   ty::ExistentialTraitRef { def_id, substs }
     12,960 ( 0.00%)      }
          .           
          .               pub fn with_self_ty(
          .                   &self,
          .                   tcx: TyCtxt<'tcx>,
          .                   self_ty: Ty<'tcx>,
          .               ) -> ty::ProjectionPredicate<'tcx> {
          .                   // otherwise the escaping regions would be captured by the binders
          .                   debug_assert!(!self_ty.has_escaping_bound_vars());
-- line 1566 ----------------------------------------
-- line 1569 ----------------------------------------
          .                       projection_ty: ty::ProjectionTy {
          .                           item_def_id: self.item_def_id,
          .                           substs: tcx.mk_substs_trait(self_ty, self.substs),
          .                       },
          .                       term: self.term,
          .                   }
          .               }
          .           
      3,840 ( 0.00%)      pub fn erase_self_ty(
          .                   tcx: TyCtxt<'tcx>,
          .                   projection_predicate: ty::ProjectionPredicate<'tcx>,
          .               ) -> Self {
          .                   // Assert there is a Self.
      2,304 ( 0.00%)          projection_predicate.projection_ty.substs.type_at(0);
          .           
      3,072 ( 0.00%)          Self {
      1,536 ( 0.00%)              item_def_id: projection_predicate.projection_ty.item_def_id,
          .                       substs: tcx.intern_substs(&projection_predicate.projection_ty.substs[1..]),
        768 ( 0.00%)              term: projection_predicate.term,
          .                   }
      5,376 ( 0.00%)      }
          .           }
          .           
          .           impl<'tcx> PolyExistentialProjection<'tcx> {
          .               pub fn with_self_ty(
          .                   &self,
          .                   tcx: TyCtxt<'tcx>,
          .                   self_ty: Ty<'tcx>,
          .               ) -> ty::PolyProjectionPredicate<'tcx> {
-- line 1597 ----------------------------------------
-- line 1616 ----------------------------------------
          .                       RegionKind::RePlaceholder(placeholder) => placeholder.name.is_named(),
          .                       RegionKind::ReEmpty(_) => false,
          .                       RegionKind::ReErased => false,
          .                   }
          .               }
          .           
          .               #[inline]
          .               pub fn is_late_bound(&self) -> bool {
     24,821 ( 0.00%)          matches!(*self, ty::ReLateBound(..))
          .               }
          .           
          .               #[inline]
          .               pub fn is_placeholder(&self) -> bool {
          .                   matches!(*self, ty::RePlaceholder(..))
          .               }
          .           
          .               #[inline]
          .               pub fn bound_at_or_above_binder(&self, index: ty::DebruijnIndex) -> bool {
    833,452 ( 0.00%)          match *self {
          .                       ty::ReLateBound(debruijn, _) => debruijn >= index,
          .                       _ => false,
          .                   }
          .               }
          .           
          .               pub fn type_flags(&self) -> TypeFlags {
          .                   let mut flags = TypeFlags::empty();
          .           
    588,961 ( 0.00%)          match *self {
          .                       ty::ReVar(..) => {
          .                           flags = flags | TypeFlags::HAS_FREE_REGIONS;
          .                           flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;
          .                           flags = flags | TypeFlags::HAS_RE_INFER;
          .                       }
          .                       ty::RePlaceholder(..) => {
          .                           flags = flags | TypeFlags::HAS_FREE_REGIONS;
          .                           flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;
-- line 1651 ----------------------------------------
-- line 1669 ----------------------------------------
          .                       ty::ReErased => {
          .                           flags = flags | TypeFlags::HAS_RE_ERASED;
          .                       }
          .                   }
          .           
          .                   debug!("type_flags({:?}) = {:?}", self, flags);
          .           
          .                   flags
     43,041 ( 0.00%)      }
          .           
          .               /// Given an early-bound or free region, returns the `DefId` where it was bound.
          .               /// For example, consider the regions in this snippet of code:
          .               ///
          .               /// ```
          .               /// impl<'a> Foo {
          .               ///      ^^ -- early bound, declared on an impl
          .               ///
-- line 1685 ----------------------------------------
-- line 1713 ----------------------------------------
          .           
          .               #[inline(always)]
          .               pub fn flags(&self) -> TypeFlags {
          .                   self.flags
          .               }
          .           
          .               #[inline]
          .               pub fn is_unit(&self) -> bool {
     23,262 ( 0.00%)          match self.kind() {
      5,057 ( 0.00%)              Tuple(ref tys) => tys.is_empty(),
          .                       _ => false,
          .                   }
          .               }
          .           
          .               #[inline]
          .               pub fn is_never(&self) -> bool {
    267,620 ( 0.00%)          matches!(self.kind(), Never)
          .               }
          .           
          .               #[inline]
          .               pub fn is_primitive(&self) -> bool {
          .                   self.kind().is_primitive()
          .               }
          .           
          .               #[inline]
-- line 1737 ----------------------------------------
-- line 1741 ----------------------------------------
          .           
          .               #[inline]
          .               pub fn is_ref(&self) -> bool {
          .                   matches!(self.kind(), Ref(..))
          .               }
          .           
          .               #[inline]
          .               pub fn is_ty_var(&self) -> bool {
    499,069 ( 0.00%)          matches!(self.kind(), Infer(TyVar(_)))
          .               }
          .           
          .               #[inline]
          .               pub fn ty_vid(&self) -> Option<ty::TyVid> {
    293,402 ( 0.00%)          match self.kind() {
     54,519 ( 0.00%)              &Infer(TyVar(vid)) => Some(vid),
          .                       _ => None,
          .                   }
          .               }
          .           
          .               #[inline]
          .               pub fn is_ty_infer(&self) -> bool {
        939 ( 0.00%)          matches!(self.kind(), Infer(_))
          .               }
          .           
          .               #[inline]
          .               pub fn is_phantom_data(&self) -> bool {
          .                   if let Adt(def, _) = self.kind() { def.is_phantom_data() } else { false }
          .               }
          .           
          .               #[inline]
-- line 1770 ----------------------------------------
-- line 1791 ----------------------------------------
          .                   match self.kind() {
          .                       RawPtr(TypeAndMut { ty, .. }) | Ref(_, ty, _) => matches!(ty.kind(), Slice(_) | Str),
          .                       _ => false,
          .                   }
          .               }
          .           
          .               #[inline]
          .               pub fn is_array(&self) -> bool {
        670 ( 0.00%)          matches!(self.kind(), Array(..))
          .               }
          .           
          .               #[inline]
          .               pub fn is_simd(&self) -> bool {
          .                   match self.kind() {
          .                       Adt(def, _) => def.repr.simd(),
          .                       _ => false,
          .                   }
          .               }
          .           
        464 ( 0.00%)      pub fn sequence_element_type(&self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
        928 ( 0.00%)          match self.kind() {
          .                       Array(ty, _) | Slice(ty) => ty,
          .                       Str => tcx.mk_mach_uint(ty::UintTy::U8),
          .                       _ => bug!("`sequence_element_type` called on non-sequence value: {}", self),
          .                   }
        464 ( 0.00%)      }
          .           
          .               pub fn simd_size_and_type(&self, tcx: TyCtxt<'tcx>) -> (u64, Ty<'tcx>) {
          .                   match self.kind() {
          .                       Adt(def, substs) => {
          .                           assert!(def.repr.simd(), "`simd_size_and_type` called on non-SIMD type");
          .                           let variant = def.non_enum_variant();
          .                           let f0_ty = variant.fields[0].ty(tcx, substs);
          .           
-- line 1824 ----------------------------------------
-- line 1861 ----------------------------------------
          .                   match self.kind() {
          .                       Ref(_, _, mutability) => Some(*mutability),
          .                       _ => None,
          .                   }
          .               }
          .           
          .               #[inline]
          .               pub fn is_unsafe_ptr(&self) -> bool {
     28,263 ( 0.00%)          matches!(self.kind(), RawPtr(_))
          .               }
          .           
          .               /// Tests if this is any kind of primitive pointer type (reference, raw pointer, fn pointer).
          .               #[inline]
          .               pub fn is_any_ptr(&self) -> bool {
          .                   self.is_region_ptr() || self.is_unsafe_ptr() || self.is_fn_ptr()
          .               }
          .           
          .               #[inline]
          .               pub fn is_box(&self) -> bool {
    388,382 ( 0.00%)          match self.kind() {
    111,559 ( 0.00%)              Adt(def, _) => def.is_box(),
          .                       _ => false,
          .                   }
          .               }
          .           
          .               /// Panics if called on any type other than `Box<T>`.
          .               pub fn boxed_ty(&self) -> Ty<'tcx> {
          .                   match self.kind() {
          .                       Adt(def, substs) if def.is_box() => substs.type_at(0),
-- line 1889 ----------------------------------------
-- line 1891 ----------------------------------------
          .                   }
          .               }
          .           
          .               /// A scalar type is one that denotes an atomic datum, with no sub-components.
          .               /// (A RawPtr is scalar because it represents a non-managed pointer, so its
          .               /// contents are abstract to rustc.)
          .               #[inline]
          .               pub fn is_scalar(&self) -> bool {
      7,598 ( 0.00%)          matches!(
     17,693 ( 0.00%)              self.kind(),
          .                       Bool | Char
          .                           | Int(_)
          .                           | Float(_)
          .                           | Uint(_)
          .                           | FnDef(..)
          .                           | FnPtr(_)
          .                           | RawPtr(_)
          .                           | Infer(IntVar(_) | FloatVar(_))
-- line 1908 ----------------------------------------
-- line 1917 ----------------------------------------
          .           
          .               #[inline]
          .               pub fn is_trait(&self) -> bool {
          .                   matches!(self.kind(), Dynamic(..))
          .               }
          .           
          .               #[inline]
          .               pub fn is_enum(&self) -> bool {
      2,778 ( 0.00%)          matches!(self.kind(), Adt(adt_def, _) if adt_def.is_enum())
          .               }
          .           
          .               #[inline]
          .               pub fn is_union(&self) -> bool {
     65,664 ( 0.00%)          matches!(self.kind(), Adt(adt_def, _) if adt_def.is_union())
          .               }
          .           
          .               #[inline]
          .               pub fn is_closure(&self) -> bool {
     20,748 ( 0.00%)          matches!(self.kind(), Closure(..))
          .               }
          .           
          .               #[inline]
          .               pub fn is_generator(&self) -> bool {
     31,316 ( 0.00%)          matches!(self.kind(), Generator(..))
          .               }
          .           
          .               #[inline]
          .               pub fn is_integral(&self) -> bool {
     29,586 ( 0.00%)          matches!(self.kind(), Infer(IntVar(_)) | Int(_) | Uint(_))
          .               }
          .           
          .               #[inline]
          .               pub fn is_fresh_ty(&self) -> bool {
          .                   matches!(self.kind(), Infer(FreshTy(_)))
          .               }
          .           
          .               #[inline]
          .               pub fn is_fresh(&self) -> bool {
     48,571 ( 0.00%)          matches!(self.kind(), Infer(FreshTy(_) | FreshIntTy(_) | FreshFloatTy(_)))
          .               }
          .           
          .               #[inline]
          .               pub fn is_char(&self) -> bool {
          .                   matches!(self.kind(), Char)
          .               }
          .           
          .               #[inline]
-- line 1963 ----------------------------------------
-- line 1967 ----------------------------------------
          .           
          .               #[inline]
          .               pub fn is_signed(&self) -> bool {
          .                   matches!(self.kind(), Int(_))
          .               }
          .           
          .               #[inline]
          .               pub fn is_ptr_sized_integral(&self) -> bool {
        399 ( 0.00%)          matches!(self.kind(), Int(ty::IntTy::Isize) | Uint(ty::UintTy::Usize))
          .               }
          .           
          .               #[inline]
          .               pub fn has_concrete_skeleton(&self) -> bool {
          .                   !matches!(self.kind(), Param(_) | Infer(_) | Error(_))
          .               }
          .           
          .               /// Returns the type and mutability of `*ty`.
          .               ///
          .               /// The parameter `explicit` indicates if this is an *explicit* dereference.
          .               /// Some types -- notably unsafe ptrs -- can only be dereferenced explicitly.
     86,287 ( 0.00%)      pub fn builtin_deref(&self, explicit: bool) -> Option<TypeAndMut<'tcx>> {
    530,629 ( 0.00%)          match self.kind() {
      1,198 ( 0.00%)              Adt(def, _) if def.is_box() => {
          .                           Some(TypeAndMut { ty: self.boxed_ty(), mutbl: hir::Mutability::Not })
          .                       }
    350,710 ( 0.00%)              Ref(_, ty, mutbl) => Some(TypeAndMut { ty, mutbl: *mutbl }),
          .                       RawPtr(mt) if explicit => Some(*mt),
          .                       _ => None,
          .                   }
    172,574 ( 0.00%)      }
          .           
          .               /// Returns the type of `ty[i]`.
          .               pub fn builtin_index(&self) -> Option<Ty<'tcx>> {
        392 ( 0.00%)          match self.kind() {
          .                       Array(ty, _) | Slice(ty) => Some(ty),
          .                       _ => None,
          .                   }
         98 ( 0.00%)      }
          .           
    369,496 ( 0.00%)      pub fn fn_sig(&self, tcx: TyCtxt<'tcx>) -> PolyFnSig<'tcx> {
    184,748 ( 0.00%)          match self.kind() {
    138,552 ( 0.00%)              FnDef(def_id, substs) => tcx.fn_sig(*def_id).subst(tcx, substs),
         15 ( 0.00%)              FnPtr(f) => *f,
          .                       Error(_) => {
          .                           // ignore errors (#54954)
          .                           ty::Binder::dummy(FnSig::fake())
          .                       }
          .                       Closure(..) => bug!(
          .                           "to get the signature of a closure, use `substs.as_closure().sig()` not `fn_sig()`",
          .                       ),
          .                       _ => bug!("Ty::fn_sig() called on non-fn type: {:?}", self),
          .                   }
    415,683 ( 0.00%)      }
          .           
          .               #[inline]
          .               pub fn is_fn(&self) -> bool {
      2,001 ( 0.00%)          matches!(self.kind(), FnDef(..) | FnPtr(_))
          .               }
          .           
          .               #[inline]
          .               pub fn is_fn_ptr(&self) -> bool {
          .                   matches!(self.kind(), FnPtr(_))
          .               }
          .           
          .               #[inline]
          .               pub fn is_impl_trait(&self) -> bool {
          .                   matches!(self.kind(), Opaque(..))
          .               }
          .           
          .               #[inline]
          .               pub fn ty_adt_def(&self) -> Option<&'tcx AdtDef> {
     20,674 ( 0.00%)          match self.kind() {
          .                       Adt(adt, _) => Some(adt),
          .                       _ => None,
          .                   }
          .               }
          .           
          .               /// Iterates over tuple fields.
          .               /// Panics when called on anything but a tuple.
      2,143 ( 0.00%)      pub fn tuple_fields(&self) -> impl DoubleEndedIterator<Item = Ty<'tcx>> {
     10,836 ( 0.00%)          match self.kind() {
      9,322 ( 0.00%)              Tuple(substs) => substs.iter().map(|field| field.expect_ty()),
          .                       _ => bug!("tuple_fields called on non-tuple"),
          .                   }
      4,286 ( 0.00%)      }
          .           
          .               /// Get the `i`-th element of a tuple.
          .               /// Panics when called on anything but a tuple.
        194 ( 0.00%)      pub fn tuple_element_ty(&self, i: usize) -> Option<Ty<'tcx>> {
        388 ( 0.00%)          match self.kind() {
        388 ( 0.00%)              Tuple(substs) => substs.iter().nth(i).map(|field| field.expect_ty()),
          .                       _ => bug!("tuple_fields called on non-tuple"),
          .                   }
        388 ( 0.00%)      }
          .           
          .               /// If the type contains variants, returns the valid range of variant indices.
          .               //
          .               // FIXME: This requires the optimized MIR in the case of generators.
          .               #[inline]
          .               pub fn variant_range(&self, tcx: TyCtxt<'tcx>) -> Option<Range<VariantIdx>> {
          .                   match self.kind() {
          .                       TyKind::Adt(adt, _) => Some(adt.variant_range()),
-- line 2068 ----------------------------------------
-- line 2078 ----------------------------------------
          .               //
          .               // FIXME: This requires the optimized MIR in the case of generators.
          .               #[inline]
          .               pub fn discriminant_for_variant(
          .                   &self,
          .                   tcx: TyCtxt<'tcx>,
          .                   variant_index: VariantIdx,
          .               ) -> Option<Discr<'tcx>> {
      4,620 ( 0.00%)          match self.kind() {
      1,848 ( 0.00%)              TyKind::Adt(adt, _) if adt.variants.is_empty() => {
          .                           // This can actually happen during CTFE, see
          .                           // https://github.com/rust-lang/rust/issues/89765.
          .                           None
          .                       }
        924 ( 0.00%)              TyKind::Adt(adt, _) if adt.is_enum() => {
          .                           Some(adt.discriminant_for_variant(tcx, variant_index))
          .                       }
          .                       TyKind::Generator(def_id, substs, _) => {
          .                           Some(substs.as_generator().discriminant_for_variant(*def_id, tcx, variant_index))
          .                       }
          .                       _ => None,
          .                   }
          .               }
          .           
          .               /// Returns the type of the discriminant of this type.
     41,910 ( 0.00%)      pub fn discriminant_ty(&'tcx self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
     20,955 ( 0.00%)          match self.kind() {
     32,752 ( 0.00%)              ty::Adt(adt, _) if adt.is_enum() => adt.repr.discr_type().to_ty(tcx),
          .                       ty::Generator(_, substs, _) => substs.as_generator().discr_ty(tcx),
          .           
          .                       ty::Param(_) | ty::Projection(_) | ty::Opaque(..) | ty::Infer(ty::TyVar(_)) => {
          .                           let assoc_items = tcx.associated_item_def_ids(
          .                               tcx.require_lang_item(hir::LangItem::DiscriminantKind, None),
          .                           );
          .                           tcx.mk_projection(assoc_items[0], tcx.intern_substs(&[self.into()]))
          .                       }
-- line 2113 ----------------------------------------
-- line 2135 ----------------------------------------
          .                       | ty::Infer(IntVar(_) | FloatVar(_)) => tcx.types.u8,
          .           
          .                       ty::Bound(..)
          .                       | ty::Placeholder(_)
          .                       | ty::Infer(FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
          .                           bug!("`discriminant_ty` applied to unexpected type: {:?}", self)
          .                       }
          .                   }
     33,528 ( 0.00%)      }
          .           
          .               /// Returns the type of metadata for (potentially fat) pointers to this type.
          .               pub fn ptr_metadata_ty(
          .                   &'tcx self,
          .                   tcx: TyCtxt<'tcx>,
          .                   normalize: impl FnMut(Ty<'tcx>) -> Ty<'tcx>,
          .               ) -> Ty<'tcx> {
          .                   let tail = tcx.struct_tail_with_normalize(self, normalize);
-- line 2151 ----------------------------------------
-- line 2200 ----------------------------------------
          .               /// function converts such a special type into the closure
          .               /// kind. To go the other way, use
          .               /// `tcx.closure_kind_ty(closure_kind)`.
          .               ///
          .               /// Note that during type checking, we use an inference variable
          .               /// to represent the closure kind, because it has not yet been
          .               /// inferred. Once upvar inference (in `rustc_typeck/src/check/upvar.rs`)
          .               /// is complete, that type variable will be unified.
      3,576 ( 0.00%)      pub fn to_opt_closure_kind(&self) -> Option<ty::ClosureKind> {
      7,152 ( 0.00%)          match self.kind() {
      7,152 ( 0.00%)              Int(int_ty) => match int_ty {
          .                           ty::IntTy::I8 => Some(ty::ClosureKind::Fn),
          .                           ty::IntTy::I16 => Some(ty::ClosureKind::FnMut),
          .                           ty::IntTy::I32 => Some(ty::ClosureKind::FnOnce),
          .                           _ => bug!("cannot convert type `{:?}` to a closure kind", self),
          .                       },
          .           
          .                       // "Bound" types appear in canonical queries when the
          .                       // closure type is not yet known
          .                       Bound(..) | Infer(_) => None,
          .           
          .                       Error(_) => Some(ty::ClosureKind::Fn),
          .           
          .                       _ => bug!("cannot convert type `{:?}` to a closure kind", self),
          .                   }
      3,576 ( 0.00%)      }
          .           
          .               /// Fast path helper for testing if a type is `Sized`.
          .               ///
          .               /// Returning true means the type is known to be sized. Returning
          .               /// `false` means nothing -- could be sized, might not be.
          .               ///
          .               /// Note that we could never rely on the fact that a type such as `[_]` is
          .               /// trivially `!Sized` because we could be in a type environment with a
          .               /// bound such as `[_]: Copy`. A function with such a bound obviously never
          .               /// can be called, but that doesn't mean it shouldn't typecheck. This is why
          .               /// this method doesn't return `Option<bool>`.
  1,058,769 ( 0.01%)      pub fn is_trivially_sized(&self, tcx: TyCtxt<'tcx>) -> bool {
    705,846 ( 0.00%)          match self.kind() {
          .                       ty::Infer(ty::IntVar(_) | ty::FloatVar(_))
          .                       | ty::Uint(_)
          .                       | ty::Int(_)
          .                       | ty::Bool
          .                       | ty::Float(_)
          .                       | ty::FnDef(..)
          .                       | ty::FnPtr(_)
          .                       | ty::RawPtr(..)
-- line 2246 ----------------------------------------
-- line 2250 ----------------------------------------
          .                       | ty::GeneratorWitness(..)
          .                       | ty::Array(..)
          .                       | ty::Closure(..)
          .                       | ty::Never
          .                       | ty::Error(_) => true,
          .           
          .                       ty::Str | ty::Slice(_) | ty::Dynamic(..) | ty::Foreign(..) => false,
          .           
      6,655 ( 0.00%)              ty::Tuple(tys) => tys.iter().all(|ty| ty.expect_ty().is_trivially_sized(tcx)),
          .           
     76,137 ( 0.00%)              ty::Adt(def, _substs) => def.sized_constraint(tcx).is_empty(),
          .           
          .                       ty::Projection(_) | ty::Param(_) | ty::Opaque(..) => false,
          .           
          .                       ty::Infer(ty::TyVar(_)) => false,
          .           
          .                       ty::Bound(..)
          .                       | ty::Placeholder(..)
          .                       | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
          .                           bug!("`is_trivially_sized` applied to unexpected type: {:?}", self)
          .                       }
          .                   }
  1,058,769 ( 0.01%)      }
          .           }
          .           
          .           /// Extra information about why we ended up with a particular variance.
          .           /// This is only used to add more information to error messages, and
          .           /// has no effect on soundness. While choosing the 'wrong' `VarianceDiagInfo`
          .           /// may lead to confusing notes in error messages, it will never cause
          .           /// a miscompilation or unsoundness.
          .           ///
-- line 2280 ----------------------------------------
-- line 2295 ----------------------------------------
          .                   /// (e.g. `0` for `*mut T`, `1` for `MyStruct<'CovariantParam, 'InvariantParam>`)
          .                   param_index: u32,
          .               },
          .           }
          .           
          .           impl<'tcx> VarianceDiagInfo<'tcx> {
          .               /// Mirrors `Variance::xform` - used to 'combine' the existing
          .               /// and new `VarianceDiagInfo`s when our variance changes.
    337,410 ( 0.00%)      pub fn xform(self, other: VarianceDiagInfo<'tcx>) -> VarianceDiagInfo<'tcx> {
          .                   // For now, just use the first `VarianceDiagInfo::Invariant` that we see
    506,115 ( 0.00%)          match self {
          .                       VarianceDiagInfo::None => other,
          .                       VarianceDiagInfo::Invariant { .. } => self,
          .                   }
    168,705 ( 0.00%)      }
          .           }

113,608,448 ( 0.58%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-1.0.86/src/token.rs
--------------------------------------------------------------------------------
Ir                  

-- line 146 ----------------------------------------
         .                   pub span: Span,
         .               }
         .           }
         .           
         .           #[cfg(feature = "parsing")]
         .           impl private::Sealed for Ident {}
         .           
         .           #[cfg(feature = "parsing")]
   154,756 ( 0.00%)  fn peek_impl(cursor: Cursor, peek: fn(ParseStream) -> bool) -> bool {
         .               use crate::parse::Unexpected;
         .               use std::cell::Cell;
         .               use std::rc::Rc;
         .           
    88,432 ( 0.00%)      let scope = Span::call_site();
   375,836 ( 0.00%)      let unexpected = Rc::new(Cell::new(Unexpected::None));
   110,540 ( 0.00%)      let buffer = crate::parse::new_parse_buffer(scope, cursor, unexpected);
    66,324 ( 0.00%)      peek(&buffer)
   154,756 ( 0.00%)  }
         .           
         .           macro_rules! impl_token {
         .               ($display:tt $name:ty) => {
         .                   #[cfg(feature = "parsing")]
         .                   impl Token for $name {
    66,324 ( 0.00%)              fn peek(cursor: Cursor) -> bool {
    66,324 ( 0.00%)                  fn peek(input: ParseStream) -> bool {
   154,756 ( 0.00%)                      <$name as Parse>::parse(input).is_ok()
   154,756 ( 0.00%)                  }
    66,324 ( 0.00%)                  peek_impl(cursor, peek)
    88,432 ( 0.00%)              }
         .           
         .                       fn display() -> &'static str {
         .                           $display
     6,207 ( 0.00%)              }
         .                   }
         .           
         .                   #[cfg(feature = "parsing")]
         .                   impl private::Sealed for $name {}
         .               };
         .           }
         .           
         .           impl_token!("lifetime" Lifetime);
-- line 186 ----------------------------------------
-- line 224 ----------------------------------------
         .               fn display() -> &'static str;
         .           }
         .           
         .           #[cfg(feature = "parsing")]
         .           impl<T: CustomToken> private::Sealed for T {}
         .           
         .           #[cfg(feature = "parsing")]
         .           impl<T: CustomToken> Token for T {
     2,994 ( 0.00%)      fn peek(cursor: Cursor) -> bool {
     1,996 ( 0.00%)          <Self as CustomToken>::peek(cursor)
     3,992 ( 0.00%)      }
         .           
         .               fn display() -> &'static str {
         .                   <Self as CustomToken>::display()
         .               }
         .           }
         .           
         .           macro_rules! define_keywords {
         .               ($($token:tt pub struct $name:ident #[$doc:meta])*) => {
-- line 242 ----------------------------------------
-- line 255 ----------------------------------------
         .                       #[allow(non_snake_case)]
         .                       pub fn $name<S: IntoSpans<[Span; 1]>>(span: S) -> $name {
         .                           $name {
         .                               span: span.into_spans()[0],
         .                           }
         .                       }
         .           
         .                       impl std::default::Default for $name {
       192 ( 0.00%)                  fn default() -> Self {
       384 ( 0.00%)                      $name {
       768 ( 0.00%)                          span: Span::call_site(),
         .                               }
       576 ( 0.00%)                  }
         .                       }
         .           
         .                       #[cfg(feature = "clone-impls")]
         .                       #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
         .                       impl Copy for $name {}
         .           
         .                       #[cfg(feature = "clone-impls")]
         .                       #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
-- line 275 ----------------------------------------
-- line 303 ----------------------------------------
         .                       #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
         .                       impl Hash for $name {
         .                           fn hash<H: Hasher>(&self, _state: &mut H) {}
         .                       }
         .           
         .                       #[cfg(feature = "printing")]
         .                       #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
         .                       impl ToTokens for $name {
    17,740 ( 0.00%)                  fn to_tokens(&self, tokens: &mut TokenStream) {
    26,610 ( 0.00%)                      printing::keyword($token, self.span, tokens);
     8,870 ( 0.00%)                  }
         .                       }
         .           
         .                       #[cfg(feature = "parsing")]
         .                       #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
         .                       impl Parse for $name {
    18,884 ( 0.00%)                  fn parse(input: ParseStream) -> Result<Self> {
    22,655 ( 0.00%)                      Ok($name {
    68,564 ( 0.00%)                          span: parsing::keyword(input, $token)?,
         .                               })
    14,163 ( 0.00%)                  }
         .                       }
         .           
         .                       #[cfg(feature = "parsing")]
         .                       impl Token for $name {
   714,672 ( 0.00%)                  fn peek(cursor: Cursor) -> bool {
   952,896 ( 0.00%)                      parsing::peek_keyword(cursor, $token)
   952,896 ( 0.00%)                  }
         .           
         .                           fn display() -> &'static str {
         .                               concat!("`", $token, "`")
    53,955 ( 0.00%)                  }
         .                       }
         .           
         .                       #[cfg(feature = "parsing")]
         .                       impl private::Sealed for $name {}
         .                   )*
         .               };
         .           }
         .           
-- line 342 ----------------------------------------
-- line 371 ----------------------------------------
         .                       ///
         .                       /// [`Token!`]: crate::token
         .                       pub struct $name {
         .                           pub spans: [Span; $len],
         .                       }
         .           
         .                       #[doc(hidden)]
         .                       #[allow(non_snake_case)]
     1,536 ( 0.00%)              pub fn $name<S: IntoSpans<[Span; $len]>>(spans: S) -> $name {
       768 ( 0.00%)                  $name {
     2,688 ( 0.00%)                      spans: spans.into_spans(),
         .                           }
     1,152 ( 0.00%)              }
         .           
         .                       impl std::default::Default for $name {
       384 ( 0.00%)                  fn default() -> Self {
       768 ( 0.00%)                      $name {
     3,456 ( 0.00%)                          spans: [Span::call_site(); $len],
         .                               }
     1,152 ( 0.00%)                  }
         .                       }
         .           
         .                       #[cfg(feature = "clone-impls")]
         .                       #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
         .                       impl Copy for $name {}
         .           
         .                       #[cfg(feature = "clone-impls")]
         .                       #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
-- line 398 ----------------------------------------
-- line 438 ----------------------------------------
         .                   $(
         .                       define_punctuation_structs! {
         .                           $token pub struct $name/$len #[$doc]
         .                       }
         .           
         .                       #[cfg(feature = "printing")]
         .                       #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
         .                       impl ToTokens for $name {
   130,165 ( 0.00%)                  fn to_tokens(&self, tokens: &mut TokenStream) {
   104,132 ( 0.00%)                      printing::punct($token, &self.spans, tokens);
    52,066 ( 0.00%)                  }
         .                       }
         .           
         .                       #[cfg(feature = "parsing")]
         .                       #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
         .                       impl Parse for $name {
    99,468 ( 0.00%)                  fn parse(input: ParseStream) -> Result<Self> {
   124,335 ( 0.00%)                      Ok($name {
   348,138 ( 0.00%)                          spans: parsing::punct(input, $token)?,
         .                               })
    74,601 ( 0.00%)                  }
         .                       }
         .           
         .                       #[cfg(feature = "parsing")]
         .                       impl Token for $name {
 1,552,524 ( 0.01%)                  fn peek(cursor: Cursor) -> bool {
 2,070,032 ( 0.01%)                      parsing::peek_punct(cursor, $token)
 2,070,032 ( 0.01%)                  }
         .           
         .                           fn display() -> &'static str {
         .                               concat!("`", $token, "`")
    12,474 ( 0.00%)                  }
         .                       }
         .           
         .                       #[cfg(feature = "parsing")]
         .                       impl private::Sealed for $name {}
         .                   )*
         .               };
         .           }
         .           
-- line 477 ----------------------------------------
-- line 480 ----------------------------------------
         .                   $(
         .                       #[$doc]
         .                       pub struct $name {
         .                           pub span: Span,
         .                       }
         .           
         .                       #[doc(hidden)]
         .                       #[allow(non_snake_case)]
    24,276 ( 0.00%)              pub fn $name<S: IntoSpans<[Span; 1]>>(span: S) -> $name {
    12,138 ( 0.00%)                  $name {
    54,621 ( 0.00%)                      span: span.into_spans()[0],
         .                           }
    18,207 ( 0.00%)              }
         .           
         .                       impl std::default::Default for $name {
         .                           fn default() -> Self {
         .                               $name {
         .                                   span: Span::call_site(),
         .                               }
         .                           }
         .                       }
-- line 500 ----------------------------------------
-- line 534 ----------------------------------------
         .                       #[cfg(feature = "extra-traits")]
         .                       #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
         .                       impl Hash for $name {
         .                           fn hash<H: Hasher>(&self, _state: &mut H) {}
         .                       }
         .           
         .                       impl $name {
         .                           #[cfg(feature = "printing")]
    36,858 ( 0.00%)                  pub fn surround<F>(&self, tokens: &mut TokenStream, f: F)
         .                           where
         .                               F: FnOnce(&mut TokenStream),
         .                           {
    36,858 ( 0.00%)                      printing::delim($token, self.span, tokens, f);
    12,286 ( 0.00%)                  }
         .                       }
         .           
         .                       #[cfg(feature = "parsing")]
         .                       impl private::Sealed for $name {}
         .                   )*
         .               };
         .           }
         .           
-- line 555 ----------------------------------------
-- line 582 ----------------------------------------
         .                       }
         .                       Err(cursor.error("expected `_`"))
         .                   })
         .               }
         .           }
         .           
         .           #[cfg(feature = "parsing")]
         .           impl Token for Underscore {
    14,483 ( 0.00%)      fn peek(cursor: Cursor) -> bool {
    41,260 ( 0.00%)          if let Some((ident, _rest)) = cursor.ident() {
    16,456 ( 0.00%)              return ident == "_";
     6,195 ( 0.00%)          }
       120 ( 0.00%)          if let Some((punct, _rest)) = cursor.punct() {
         .                       return punct.as_char() == '_';
         .                   }
        12 ( 0.00%)          false
    10,345 ( 0.00%)      }
         .           
         .               fn display() -> &'static str {
         .                   "`_`"
     6,207 ( 0.00%)      }
         .           }
         .           
         .           #[cfg(feature = "parsing")]
         .           impl private::Sealed for Underscore {}
         .           
         .           #[cfg(feature = "parsing")]
         .           impl Token for Paren {
    88,311 ( 0.00%)      fn peek(cursor: Cursor) -> bool {
   117,748 ( 0.00%)          lookahead::is_delimiter(cursor, Delimiter::Parenthesis)
   117,748 ( 0.00%)      }
         .           
         .               fn display() -> &'static str {
         .                   "parentheses"
     9,234 ( 0.00%)      }
         .           }
         .           
         .           #[cfg(feature = "parsing")]
         .           impl Token for Brace {
    38,958 ( 0.00%)      fn peek(cursor: Cursor) -> bool {
    51,944 ( 0.00%)          lookahead::is_delimiter(cursor, Delimiter::Brace)
    51,944 ( 0.00%)      }
         .           
         .               fn display() -> &'static str {
         .                   "curly braces"
       288 ( 0.00%)      }
         .           }
         .           
         .           #[cfg(feature = "parsing")]
         .           impl Token for Bracket {
    29,259 ( 0.00%)      fn peek(cursor: Cursor) -> bool {
    39,012 ( 0.00%)          lookahead::is_delimiter(cursor, Delimiter::Bracket)
    39,012 ( 0.00%)      }
         .           
         .               fn display() -> &'static str {
         .                   "square brackets"
         .               }
         .           }
         .           
         .           #[cfg(feature = "parsing")]
         .           impl Token for Group {
    74,487 ( 0.00%)      fn peek(cursor: Cursor) -> bool {
    99,316 ( 0.00%)          lookahead::is_delimiter(cursor, Delimiter::None)
    99,316 ( 0.00%)      }
         .           
         .               fn display() -> &'static str {
         .                   "invisible group"
         .               }
         .           }
         .           
         .           define_keywords! {
         .               "abstract"    pub struct Abstract     /// `abstract`
-- line 653 ----------------------------------------
-- line 888 ----------------------------------------
         .           #[cfg(feature = "parsing")]
         .           pub mod parsing {
         .               use crate::buffer::Cursor;
         .               use crate::error::{Error, Result};
         .               use crate::parse::ParseStream;
         .               use crate::span::FromSpans;
         .               use proc_macro2::{Spacing, Span};
         .           
    28,326 ( 0.00%)      pub fn keyword(input: ParseStream, token: &str) -> Result<Span> {
    56,652 ( 0.00%)          input.step(|cursor| {
   132,188 ( 0.00%)              if let Some((ident, rest)) = cursor.ident() {
    33,237 ( 0.00%)                  if ident == token {
    86,089 ( 0.00%)                      return Ok((ident.span(), rest));
         .                           }
    20,784 ( 0.00%)              }
     7,410 ( 0.00%)              Err(cursor.error(format!("expected `{}`", token)))
     9,632 ( 0.00%)          })
     9,442 ( 0.00%)      }
         .           
 1,905,792 ( 0.01%)      pub fn peek_keyword(cursor: Cursor, token: &str) -> bool {
 5,248,856 ( 0.03%)          if let Some((ident, _rest)) = cursor.ident() {
 1,738,304 ( 0.01%)              ident == token
   651,864 ( 0.00%)          } else {
    20,936 ( 0.00%)              false
         .                   }
 3,790,648 ( 0.02%)      }
         .           
   273,537 ( 0.00%)      pub fn punct<S: FromSpans>(input: ParseStream, token: &str) -> Result<S> {
   223,803 ( 0.00%)          let mut spans = [input.span(); 3];
   273,537 ( 0.00%)          punct_helper(input, token, &mut spans)?;
   248,670 ( 0.00%)          Ok(S::from_spans(&spans))
    74,601 ( 0.00%)      }
         .           
   174,069 ( 0.00%)      fn punct_helper(input: ParseStream, token: &str, spans: &mut [Span; 3]) -> Result<()> {
   422,739 ( 0.00%)          input.step(|cursor| {
   124,335 ( 0.00%)              let mut cursor = *cursor;
   223,803 ( 0.00%)              assert!(token.len() <= spans.len());
         .           
   958,315 ( 0.00%)              for (i, ch) in token.chars().enumerate() {
   324,467 ( 0.00%)                  match cursor.punct() {
   294,970 ( 0.00%)                      Some((punct, rest)) => {
   353,964 ( 0.00%)                          spans[i] = punct.span();
   176,982 ( 0.00%)                          if punct.as_char() != ch {
         .                                       break;
   329,097 ( 0.00%)                          } else if i == token.len() - 1 {
   174,069 ( 0.00%)                              return Ok(((), rest));
    55,560 ( 0.00%)                          } else if punct.spacing() != Spacing::Joint {
         .                                       break;
         .                                   }
     9,260 ( 0.00%)                          cursor = rest;
         .                               }
         .                               None => break,
         .                           }
         .                       }
         .           
         .                       Err(Error::new(spans[0], format!("expected `{}`", token)))
    49,734 ( 0.00%)          })
    49,734 ( 0.00%)      }
         .           
 6,727,604 ( 0.03%)      pub fn peek_punct(mut cursor: Cursor, token: &str) -> bool {
16,721,072 ( 0.09%)          for (i, ch) in token.chars().enumerate() {
 5,316,354 ( 0.03%)              match cursor.punct() {
 2,913,030 ( 0.01%)                  Some((punct, rest)) => {
 1,456,515 ( 0.01%)                      if punct.as_char() != ch {
         .                                   break;
   376,198 ( 0.00%)                      } else if i == token.len() - 1 {
    23,422 ( 0.00%)                          return true;
   190,404 ( 0.00%)                      } else if punct.spacing() != Spacing::Joint {
         .                                   break;
         .                               }
    16,928 ( 0.00%)                      cursor = rest;
         .                           }
         .                           None => break,
         .                       }
         .                   }
   494,086 ( 0.00%)          false
 3,081,626 ( 0.02%)      }
         .           }
         .           
         .           // Not public API.
         .           #[doc(hidden)]
         .           #[cfg(feature = "printing")]
         .           pub mod printing {
         .               use proc_macro2::{Delimiter, Group, Ident, Punct, Spacing, Span, TokenStream};
         .               use quote::TokenStreamExt;
         .           
   286,363 ( 0.00%)      pub fn punct(s: &str, spans: &[Span], tokens: &mut TokenStream) {
   494,627 ( 0.00%)          assert_eq!(s.len(), spans.len());
         .           
   104,132 ( 0.00%)          let mut chars = s.chars();
   104,132 ( 0.00%)          let mut spans = spans.iter();
   182,231 ( 0.00%)          let ch = chars.next_back().unwrap();
   182,231 ( 0.00%)          let span = spans.next_back().unwrap();
   667,609 ( 0.00%)          for (ch, span) in chars.zip(spans) {
    44,550 ( 0.00%)              let mut op = Punct::new(ch, Spacing::Joint);
    20,250 ( 0.00%)              op.set_span(*span);
    40,500 ( 0.00%)              tokens.append(op);
         .                   }
         .           
   312,396 ( 0.00%)          let mut op = Punct::new(ch, Spacing::Alone);
   130,165 ( 0.00%)          op.set_span(*span);
   234,297 ( 0.00%)          tokens.append(op);
    52,066 ( 0.00%)      }
         .           
    48,785 ( 0.00%)      pub fn keyword(s: &str, span: Span, tokens: &mut TokenStream) {
    31,045 ( 0.00%)          tokens.append(Ident::new(s, span));
     8,870 ( 0.00%)      }
         .           
    61,430 ( 0.00%)      pub fn delim<F>(s: &str, span: Span, tokens: &mut TokenStream, f: F)
         .               where
         .                   F: FnOnce(&mut TokenStream),
         .               {
    24,572 ( 0.00%)          let delim = match s {
    61,430 ( 0.00%)              "(" => Delimiter::Parenthesis,
    13,867 ( 0.00%)              "[" => Delimiter::Bracket,
     7,062 ( 0.00%)              "{" => Delimiter::Brace,
         .                       " " => Delimiter::None,
         .                       _ => panic!("unknown delimiter: {}", s),
         .                   };
    24,572 ( 0.00%)          let mut inner = TokenStream::new();
    43,001 ( 0.00%)          f(&mut inner);
    86,002 ( 0.00%)          let mut g = Group::new(delim, inner);
    43,001 ( 0.00%)          g.set_span(span);
    67,573 ( 0.00%)          tokens.append(g);
    24,572 ( 0.00%)      }
         .           }

 5,131,834 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-1.0.86/src/token.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_dataflow/src/drop_flag_effects.rs
--------------------------------------------------------------------------------
Ir                  

-- line 10 ----------------------------------------
         .           pub fn move_path_children_matching<'tcx, F>(
         .               move_data: &MoveData<'tcx>,
         .               path: MovePathIndex,
         .               mut cond: F,
         .           ) -> Option<MovePathIndex>
         .           where
         .               F: FnMut(mir::PlaceElem<'tcx>) -> bool,
         .           {
     4,298 ( 0.00%)      let mut next_child = move_data.move_paths[path].first_child;
    12,040 ( 0.00%)      while let Some(child_index) = next_child {
         .                   let move_path_children = &move_data.move_paths[child_index];
     9,442 ( 0.00%)          if let Some(&elem) = move_path_children.place.projection.last() {
    15,914 ( 0.00%)              if cond(elem) {
         .                           return Some(child_index);
         .                       }
         .                   }
         .                   next_child = move_path_children.next_sibling;
         .               }
         .           
         .               None
         .           }
-- line 30 ----------------------------------------
-- line 48 ----------------------------------------
         .           //
         .           // FIXME: we have to do something for moving slice patterns.
         .           fn place_contents_drop_state_cannot_differ<'tcx>(
         .               tcx: TyCtxt<'tcx>,
         .               body: &Body<'tcx>,
         .               place: mir::Place<'tcx>,
         .           ) -> bool {
         .               let ty = place.ty(body, tcx).ty;
 5,485,592 ( 0.03%)      match ty.kind() {
         .                   ty::Array(..) => {
         .                       debug!(
         .                           "place_contents_drop_state_cannot_differ place: {:?} ty: {:?} => false",
         .                           place, ty
         .                       );
         .                       false
         .                   }
         .                   ty::Slice(..) | ty::Ref(..) | ty::RawPtr(..) => {
         .                       debug!(
         .                           "place_contents_drop_state_cannot_differ place: {:?} ty: {:?} refd => true",
         .                           place, ty
         .                       );
         .                       true
         .                   }
 4,579,092 ( 0.02%)          ty::Adt(def, _) if (def.has_dtor(tcx) && !def.is_box()) || def.is_union() => {
         .                       debug!(
         .                           "place_contents_drop_state_cannot_differ place: {:?} ty: {:?} Drop => true",
         .                           place, ty
         .                       );
         .                       true
         .                   }
         .                   _ => false,
         .               }
-- line 79 ----------------------------------------
-- line 83 ----------------------------------------
         .               tcx: TyCtxt<'tcx>,
         .               body: &Body<'tcx>,
         .               move_data: &MoveData<'tcx>,
         .               lookup_result: LookupResult,
         .               each_child: F,
         .           ) where
         .               F: FnMut(MovePathIndex),
         .           {
   114,162 ( 0.00%)      match lookup_result {
         .                   LookupResult::Parent(..) => {
         .                       // access to untracked value - do not touch children
         .                   }
         .                   LookupResult::Exact(e) => on_all_children_bits(tcx, body, move_data, e, each_child),
         .               }
         .           }
         .           
         .           pub fn on_all_children_bits<'tcx, F>(
-- line 99 ----------------------------------------
-- line 100 ----------------------------------------
         .               tcx: TyCtxt<'tcx>,
         .               body: &Body<'tcx>,
         .               move_data: &MoveData<'tcx>,
         .               move_path_index: MovePathIndex,
         .               mut each_child: F,
         .           ) where
         .               F: FnMut(MovePathIndex),
         .           {
 8,314,792 ( 0.04%)      fn is_terminal_path<'tcx>(
         .                   tcx: TyCtxt<'tcx>,
         .                   body: &Body<'tcx>,
         .                   move_data: &MoveData<'tcx>,
         .                   path: MovePathIndex,
         .               ) -> bool {
 2,078,698 ( 0.01%)          place_contents_drop_state_cannot_differ(tcx, body, move_data.move_paths[path].place)
 8,314,792 ( 0.04%)      }
         .           
10,293,096 ( 0.05%)      fn on_all_children_bits<'tcx, F>(
         .                   tcx: TyCtxt<'tcx>,
         .                   body: &Body<'tcx>,
         .                   move_data: &MoveData<'tcx>,
         .                   move_path_index: MovePathIndex,
         .                   each_child: &mut F,
         .               ) where
         .                   F: FnMut(MovePathIndex),
         .               {
   196,357 ( 0.00%)          each_child(move_path_index);
         .           
 7,287,132 ( 0.04%)          if is_terminal_path(tcx, body, move_data, move_path_index) {
         .                       return;
         .                   }
         .           
   643,184 ( 0.00%)          let mut next_child_index = move_data.move_paths[move_path_index].first_child;
 1,866,696 ( 0.01%)          while let Some(child_index) = next_child_index {
   873,180 ( 0.00%)              on_all_children_bits(tcx, body, move_data, child_index, each_child);
   145,530 ( 0.00%)              next_child_index = move_data.move_paths[child_index].next_sibling;
         .                   }
 8,211,738 ( 0.04%)      }
 5,457,380 ( 0.03%)      on_all_children_bits(tcx, body, move_data, move_path_index, &mut each_child);
         .           }
         .           
         .           pub fn on_all_drop_children_bits<'tcx, F>(
         .               tcx: TyCtxt<'tcx>,
         .               body: &Body<'tcx>,
         .               ctxt: &MoveDataParamEnv<'tcx>,
         .               path: MovePathIndex,
         .               mut each_child: F,
         .           ) where
         .               F: FnMut(MovePathIndex),
         .           {
   205,164 ( 0.00%)      on_all_children_bits(tcx, body, &ctxt.move_data, path, |child| {
   135,100 ( 0.00%)          let place = &ctxt.move_data.move_paths[path].place;
    33,775 ( 0.00%)          let ty = place.ty(body, tcx).ty;
         .                   debug!("on_all_drop_children_bits({:?}, {:?} : {:?})", path, place, ty);
         .           
    17,463 ( 0.00%)          let erased_ty = tcx.erase_regions(ty);
   210,981 ( 0.00%)          if erased_ty.needs_drop(tcx, ctxt.param_env) {
    33,771 ( 0.00%)              each_child(child);
         .                   } else {
         .                       debug!("on_all_drop_children_bits - skipping")
         .                   }
         .               })
         .           }
         .           
    72,399 ( 0.00%)  pub fn drop_flag_effects_for_function_entry<'tcx, F>(
         .               tcx: TyCtxt<'tcx>,
         .               body: &Body<'tcx>,
         .               ctxt: &MoveDataParamEnv<'tcx>,
         .               mut callback: F,
         .           ) where
         .               F: FnMut(MovePathIndex, DropFlagState),
         .           {
         .               let move_data = &ctxt.move_data;
     6,564 ( 0.00%)      for arg in body.args_iter() {
    22,852 ( 0.00%)          let place = mir::Place::from(arg);
    34,278 ( 0.00%)          let lookup_result = move_data.rev_lookup.find(place.as_ref());
         .                   on_lookup_result_bits(tcx, body, move_data, lookup_result, |mpi| {
    12,002 ( 0.00%)              callback(mpi, DropFlagState::Present)
         .                   });
         .               }
    52,512 ( 0.00%)  }
         .           
11,639,925 ( 0.06%)  pub fn drop_flag_effects_for_location<'tcx, F>(
         .               tcx: TyCtxt<'tcx>,
         .               body: &Body<'tcx>,
         .               ctxt: &MoveDataParamEnv<'tcx>,
         .               loc: Location,
         .               mut callback: F,
         .           ) where
         .               F: FnMut(MovePathIndex, DropFlagState),
         .           {
         .               let move_data = &ctxt.move_data;
         .               debug!("drop_flag_effects_for_location({:?})", loc);
         .           
         .               // first, move out of the RHS
   756,312 ( 0.00%)      for mi in &move_data.loc_map[loc] {
 2,412,680 ( 0.01%)          let path = mi.move_path_index(move_data);
         .                   debug!("moving out of path {:?}", move_data.move_paths[path]);
         .           
   725,891 ( 0.00%)          on_all_children_bits(tcx, body, move_data, path, |mpi| callback(mpi, DropFlagState::Absent))
         .               }
         .           
         .               debug!("drop_flag_effects: assignment for location({:?})", loc);
         .           
   195,782 ( 0.00%)      for_location_inits(tcx, body, move_data, loc, |mpi| callback(mpi, DropFlagState::Present));
 8,329,768 ( 0.04%)  }
         .           
         .           pub fn for_location_inits<'tcx, F>(
         .               tcx: TyCtxt<'tcx>,
         .               body: &Body<'tcx>,
         .               move_data: &MoveData<'tcx>,
         .               loc: Location,
         .               mut callback: F,
         .           ) where
         .               F: FnMut(MovePathIndex),
         .           {
   756,312 ( 0.00%)      for ii in &move_data.init_loc_map[loc] {
 1,003,548 ( 0.01%)          let init = move_data.inits[*ii];
   616,672 ( 0.00%)          match init.kind {
         .                       InitKind::Deep => {
         .                           let path = init.path;
         .           
         .                           on_all_children_bits(tcx, body, move_data, path, &mut callback)
         .                       }
         .                       InitKind::Shallow => {
         .                           let mpi = init.path;
         .                           callback(mpi);
-- line 226 ----------------------------------------
-- line 230 ----------------------------------------
         .               }
         .           }
         .           
         .           /// Calls `handle_inactive_variant` for each descendant move path of `enum_place` that contains a
         .           /// `Downcast` to a variant besides the `active_variant`.
         .           ///
         .           /// NOTE: If there are no move paths corresponding to an inactive variant,
         .           /// `handle_inactive_variant` will not be called for that variant.
    87,588 ( 0.00%)  pub(crate) fn on_all_inactive_variants<'tcx>(
         .               tcx: TyCtxt<'tcx>,
         .               body: &mir::Body<'tcx>,
         .               move_data: &MoveData<'tcx>,
         .               enum_place: mir::Place<'tcx>,
         .               active_variant: VariantIdx,
         .               mut handle_inactive_variant: impl FnMut(MovePathIndex),
         .           ) {
    36,495 ( 0.00%)      let enum_mpi = match move_data.rev_lookup.find(enum_place.as_ref()) {
         .                   LookupResult::Exact(mpi) => mpi,
         .                   LookupResult::Parent(_) => return,
         .               };
         .           
         .               let enum_path = &move_data.move_paths[enum_mpi];
    45,749 ( 0.00%)      for (variant_mpi, variant_path) in enum_path.children(&move_data.move_paths) {
         .                   // Because of the way we build the `MoveData` tree, each child should have exactly one more
         .                   // projection than `enum_place`. This additional projection must be a downcast since the
         .                   // base is an enum.
     9,238 ( 0.00%)          let (downcast, base_proj) = variant_path.place.projection.split_last().unwrap();
    36,952 ( 0.00%)          assert_eq!(enum_place.projection.len(), base_proj.len());
         .           
    27,714 ( 0.00%)          let variant_idx = match *downcast {
         .                       mir::ProjectionElem::Downcast(_, idx) => idx,
         .                       _ => unreachable!(),
         .                   };
         .           
     9,238 ( 0.00%)          if variant_idx != active_variant {
         .                       on_all_children_bits(tcx, body, move_data, variant_mpi, |mpi| {
     8,740 ( 0.00%)                  handle_inactive_variant(mpi)
         .                       });
         .                   }
         .               }
    58,392 ( 0.00%)  }

 7,502,104 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_dataflow/src/drop_flag_effects.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/buffer.rs
--------------------------------------------------------------------------------
Ir                  

-- line 13 ----------------------------------------
         .               reserve: extern "C" fn(Buffer<T>, usize) -> Buffer<T>,
         .               drop: extern "C" fn(Buffer<T>),
         .           }
         .           
         .           unsafe impl<T: Copy + Sync> Sync for Buffer<T> {}
         .           unsafe impl<T: Copy + Send> Send for Buffer<T> {}
         .           
         .           impl<T: Copy> Default for Buffer<T> {
        36 ( 0.00%)      fn default() -> Self {
        48 ( 0.00%)          Self::from(vec![])
        24 ( 0.00%)      }
         .           }
         .           
         .           impl<T: Copy> Deref for Buffer<T> {
         .               type Target = [T];
         6 ( 0.00%)      fn deref(&self) -> &[T] {
 4,009,862 ( 0.02%)          unsafe { slice::from_raw_parts(self.data as *const T, self.len) }
         4 ( 0.00%)      }
         .           }
         .           
         .           impl<T: Copy> DerefMut for Buffer<T> {
         .               fn deref_mut(&mut self) -> &mut [T] {
         .                   unsafe { slice::from_raw_parts_mut(self.data, self.len) }
         .               }
         .           }
         .           
         .           impl<T: Copy> Buffer<T> {
         .               pub(super) fn new() -> Self {
         .                   Self::default()
         .               }
         .           
         4 ( 0.00%)      pub(super) fn clear(&mut self) {
 8,481,623 ( 0.04%)          self.len = 0;
         4 ( 0.00%)      }
         .           
        48 ( 0.00%)      pub(super) fn take(&mut self) -> Self {
        12 ( 0.00%)          mem::take(self)
        24 ( 0.00%)      }
         .           
         .               // We have the array method separate from extending from a slice. This is
         .               // because in the case of small arrays, codegen can be more efficient
         .               // (avoiding a memmove call). With extend_from_slice, LLVM at least
         .               // currently is not able to make that optimization.
        10 ( 0.00%)      pub(super) fn extend_from_array<const N: usize>(&mut self, xs: &[T; N]) {
17,874,286 ( 0.09%)          if xs.len() > (self.capacity - self.len) {
         .                       let b = self.take();
        84 ( 0.00%)              *self = (b.reserve)(b, xs.len());
         .                   }
         .                   unsafe {
 3,042,319 ( 0.02%)              xs.as_ptr().copy_to_nonoverlapping(self.data.add(self.len), xs.len());
 9,139,385 ( 0.05%)              self.len += xs.len();
         .                   }
         4 ( 0.00%)      }
         .           
    74,988 ( 0.00%)      pub(super) fn extend_from_slice(&mut self, xs: &[T]) {
 1,939,992 ( 0.01%)          if xs.len() > (self.capacity - self.len) {
         .                       let b = self.take();
       105 ( 0.00%)              *self = (b.reserve)(b, xs.len());
         .                   }
         .                   unsafe {
         5 ( 0.00%)              xs.as_ptr().copy_to_nonoverlapping(self.data.add(self.len), xs.len());
   969,996 ( 0.00%)              self.len += xs.len();
         .                   }
    87,486 ( 0.00%)      }
         .           
        12 ( 0.00%)      pub(super) fn push(&mut self, v: T) {
         .                   // The code here is taken from Vec::push, and we know that reserve()
         .                   // will panic if we're exceeding isize::MAX bytes and so there's no need
         .                   // to check for overflow.
20,860,718 ( 0.11%)          if self.len == self.capacity {
         .                       let b = self.take();
         .                       *self = (b.reserve)(b, 1);
         .                   }
         .                   unsafe {
14,135,361 ( 0.07%)              *self.data.add(self.len) = v;
12,111,371 ( 0.06%)              self.len += 1;
         .                   }
         4 ( 0.00%)      }
         .           }
         .           
         .           impl Write for Buffer<u8> {
         .               fn write(&mut self, xs: &[u8]) -> io::Result<usize> {
         .                   self.extend_from_slice(xs);
         .                   Ok(xs.len())
         .               }
         .           
 1,865,004 ( 0.01%)      fn write_all(&mut self, xs: &[u8]) -> io::Result<()> {
    37,494 ( 0.00%)          self.extend_from_slice(xs);
         .                   Ok(())
 2,797,506 ( 0.01%)      }
         .           
         .               fn flush(&mut self) -> io::Result<()> {
         .                   Ok(())
         .               }
         .           }
         .           
         .           impl<T: Copy> Drop for Buffer<T> {
        18 ( 0.00%)      fn drop(&mut self) {
        12 ( 0.00%)          let b = self.take();
21,383,250 ( 0.11%)          (b.drop)(b);
        12 ( 0.00%)      }
         .           }
         .           
         .           impl<T: Copy> From<Vec<T>> for Buffer<T> {
        72 ( 0.00%)      fn from(mut v: Vec<T>) -> Self {
       312 ( 0.00%)          let (data, len, capacity) = (v.as_mut_ptr(), v.len(), v.capacity());
        96 ( 0.00%)          mem::forget(v);
         .           
         .                   // This utility function is nested in here because it can *only*
         .                   // be safely called on `Buffer`s created by *this* `proc_macro`.
        18 ( 0.00%)          fn to_vec<T: Copy>(b: Buffer<T>) -> Vec<T> {
         .                       unsafe {
        54 ( 0.00%)                  let Buffer { data, len, capacity, .. } = b;
        30 ( 0.00%)                  mem::forget(b);
         6 ( 0.00%)                  Vec::from_raw_parts(data, len, capacity)
         .                       }
        12 ( 0.00%)          }
         .           
        36 ( 0.00%)          extern "C" fn reserve<T: Copy>(b: Buffer<T>, additional: usize) -> Buffer<T> {
        27 ( 0.00%)              let mut v = to_vec(b);
         .                       v.reserve(additional);
        27 ( 0.00%)              Buffer::from(v)
        36 ( 0.00%)          }
         .           
        12 ( 0.00%)          extern "C" fn drop<T: Copy>(b: Buffer<T>) {
 1,781,980 ( 0.01%)              mem::drop(to_vec(b));
 1,781,940 ( 0.01%)          }
         .           
       163 ( 0.00%)          Buffer { data, len, capacity, reserve, drop }
        24 ( 0.00%)      }
         .           }

 9,711,245 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/buffer.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lexer/src/unescape.rs
--------------------------------------------------------------------------------
Ir                  

-- line 73 ----------------------------------------
         .                       EscapeError::UnskippedWhitespaceWarning | EscapeError::MultipleSkippedLinesWarning
         .                   )
         .               }
         .           }
         .           
         .           /// Takes a contents of a literal (without quotes) and produces a
         .           /// sequence of escaped characters or errors.
         .           /// Values are returned through invoking of the provided callback.
    68,004 ( 0.00%)  pub fn unescape_literal<F>(literal_text: &str, mode: Mode, callback: &mut F)
         .           where
         .               F: FnMut(Range<usize>, Result<char, EscapeError>),
         .           {
         .               match mode {
         .                   Mode::Char | Mode::Byte => {
         .                       let mut chars = literal_text.chars();
         .                       let result = unescape_char_or_byte(&mut chars, mode);
         .                       // The Chars iterator moved forward.
-- line 89 ----------------------------------------
-- line 91 ----------------------------------------
         .                   }
         .                   Mode::Str | Mode::ByteStr => unescape_str_or_byte_str(literal_text, mode, callback),
         .                   // NOTE: Raw strings do not perform any explicit character escaping, here we
         .                   // only translate CRLF to LF and produce errors on bare CR.
         .                   Mode::RawStr | Mode::RawByteStr => {
         .                       unescape_raw_str_or_byte_str(literal_text, mode, callback)
         .                   }
         .               }
    30,224 ( 0.00%)  }
         .           
         .           /// Takes a contents of a byte, byte string or raw byte string (without quotes)
         .           /// and produces a sequence of bytes or errors.
         .           /// Values are returned through invoking of the provided callback.
         .           pub fn unescape_byte_literal<F>(literal_text: &str, mode: Mode, callback: &mut F)
         .           where
         .               F: FnMut(Range<usize>, Result<u8, EscapeError>),
         .           {
-- line 107 ----------------------------------------
-- line 136 ----------------------------------------
         .               Byte,
         .               ByteStr,
         .               RawStr,
         .               RawByteStr,
         .           }
         .           
         .           impl Mode {
         .               pub fn in_single_quotes(self) -> bool {
     7,556 ( 0.00%)          match self {
         .                       Mode::Char | Mode::Byte => true,
         .                       Mode::Str | Mode::ByteStr | Mode::RawStr | Mode::RawByteStr => false,
         .                   }
         .               }
         .           
     7,556 ( 0.00%)      pub fn in_double_quotes(self) -> bool {
         .                   !self.in_single_quotes()
     3,778 ( 0.00%)      }
         .           
         .               pub fn is_bytes(self) -> bool {
         .                   match self {
         .                       Mode::Byte | Mode::ByteStr | Mode::RawByteStr => true,
         .                       Mode::Char | Mode::Str | Mode::RawStr => false,
         .                   }
         .               }
         .           }
         .           
27,982,370 ( 0.14%)  fn scan_escape(first_char: char, chars: &mut Chars<'_>, mode: Mode) -> Result<char, EscapeError> {
13,381,075 ( 0.07%)      if first_char != '\\' {
         .                   // Previous character was not a slash, and we don't expect it to be
         .                   // an escape-only character.
         .                   return match first_char {
         .                       '\t' | '\n' => Err(EscapeError::EscapeOnlyChar),
         .                       '\r' => Err(EscapeError::BareCarriageReturn),
         .                       '\'' if mode.in_single_quotes() => Err(EscapeError::EscapeOnlyChar),
         .                       '"' if mode.in_double_quotes() => Err(EscapeError::EscapeOnlyChar),
         .                       _ => {
 2,784,119 ( 0.01%)                  if mode.is_bytes() && !first_char.is_ascii() {
         .                               // Byte literal can't be a non-ascii character.
         .                               return Err(EscapeError::NonAsciiCharInByte);
         .                           }
         .                           Ok(first_char)
         .                       }
         .                   };
         .               }
         .           
         .               // Previous character is '\\', try to unescape it.
         .           
    42,354 ( 0.00%)      let second_char = chars.next().ok_or(EscapeError::LoneSlash)?;
         .           
         .               let res = match second_char {
         .                   '"' => '"',
         .                   'n' => '\n',
         .                   'r' => '\r',
         .                   't' => '\t',
         .                   '\\' => '\\',
         .                   '\'' => '\'',
-- line 191 ----------------------------------------
-- line 209 ----------------------------------------
         .                       let value = value as u8;
         .           
         .                       value as char
         .                   }
         .           
         .                   'u' => {
         .                       // We've parsed '\u', now we have to parse '{..}'.
         .           
        52 ( 0.00%)              if chars.next() != Some('{') {
         .                           return Err(EscapeError::NoBraceInUnicodeEscape);
         .                       }
         .           
         .                       // First character must be a hexadecimal digit.
         .                       let mut n_digits = 1;
       104 ( 0.00%)              let mut value: u32 = match chars.next().ok_or(EscapeError::UnclosedUnicodeEscape)? {
         .                           '_' => return Err(EscapeError::LeadingUnderscoreUnicodeEscape),
         .                           '}' => return Err(EscapeError::EmptyUnicodeEscape),
        13 ( 0.00%)                  c => c.to_digit(16).ok_or(EscapeError::InvalidCharInUnicodeEscape)?,
         .                       };
         .           
         .                       // First character is valid, now parse the rest of the number
         .                       // and closing brace.
         .                       loop {
       182 ( 0.00%)                  match chars.next() {
         .                               None => return Err(EscapeError::UnclosedUnicodeEscape),
         .                               Some('_') => continue,
         .                               Some('}') => {
        26 ( 0.00%)                          if n_digits > 6 {
         .                                       return Err(EscapeError::OverlongUnicodeEscape);
         .                                   }
         .           
         .                                   // Incorrect syntax has higher priority for error reporting
         .                                   // than unallowed value for a literal.
         .                                   if mode.is_bytes() {
         .                                       return Err(EscapeError::UnicodeEscapeInByte);
         .                                   }
         .           
        39 ( 0.00%)                          break std::char::from_u32(value).ok_or_else(|| {
         .                                       if value > 0x10FFFF {
         .                                           EscapeError::OutOfRangeUnicodeEscape
         .                                       } else {
         .                                           EscapeError::LoneSurrogateUnicodeEscape
         .                                       }
         .                                   })?;
         .                               }
         .                               Some(c) => {
         .                                   let digit =
         .                                       c.to_digit(16).ok_or(EscapeError::InvalidCharInUnicodeEscape)?;
        26 ( 0.00%)                          n_digits += 1;
        26 ( 0.00%)                          if n_digits > 6 {
         .                                       // Stop updating value since we're sure that it's is incorrect already.
         .                                       continue;
         .                                   }
         .                                   let digit = digit as u32;
        91 ( 0.00%)                          value = value * 16 + digit;
         .                               }
         .                           };
         .                       }
         .                   }
         .                   _ => return Err(EscapeError::InvalidEscape),
         .               };
         .               Ok(res)
33,578,844 ( 0.17%)  }
         .           
         .           fn unescape_char_or_byte(chars: &mut Chars<'_>, mode: Mode) -> Result<char, EscapeError> {
         .               let first_char = chars.next().ok_or(EscapeError::ZeroChars)?;
         .               let res = scan_escape(first_char, chars, mode)?;
         .               if chars.next().is_some() {
         .                   return Err(EscapeError::MoreThanOneChar);
         .               }
         .               Ok(res)
-- line 279 ----------------------------------------
-- line 280 ----------------------------------------
         .           }
         .           
         .           /// Takes a contents of a string literal (without quotes) and produces a
         .           /// sequence of escaped characters or errors.
         .           fn unescape_str_or_byte_str<F>(src: &str, mode: Mode, callback: &mut F)
         .           where
         .               F: FnMut(Range<usize>, Result<char, EscapeError>),
         .           {
    12,569 ( 0.00%)      assert!(mode.in_double_quotes());
         .               let initial_len = src.len();
     3,778 ( 0.00%)      let mut chars = src.chars();
         .               while let Some(first_char) = chars.next() {
13,991,185 ( 0.07%)          let start = initial_len - chars.as_str().len() - first_char.len_utf8();
         .           
16,732,950 ( 0.09%)          let unescaped_char = match first_char {
         .                       '\\' => {
         .                           let second_char = chars.clone().next();
    28,236 ( 0.00%)                  match second_char {
         .                               Some('\n') => {
         .                                   // Rust language specification requires us to skip whitespaces
         .                                   // if unescaped '\' character is followed by '\n'.
         .                                   // For details see [Rust language reference]
         .                                   // (https://doc.rust-lang.org/reference/tokens.html#string-literals).
         .                                   skip_ascii_whitespace(&mut chars, start, callback);
         .                                   continue;
         .                               }
    14,118 ( 0.00%)                      _ => scan_escape(first_char, &mut chars, mode),
         .                           }
         .                       }
         .                       '\n' => Ok('\n'),
         .                       '\t' => Ok('\t'),
         .                       _ => scan_escape(first_char, &mut chars, mode),
         .                   };
 5,631,158 ( 0.03%)          let end = initial_len - chars.as_str().len();
 8,741,551 ( 0.04%)          callback(start..end, unescaped_char);
         .               }
         .           
         .               fn skip_ascii_whitespace<F>(chars: &mut Chars<'_>, start: usize, callback: &mut F)
         .               where
         .                   F: FnMut(Range<usize>, Result<char, EscapeError>),
         .               {
         .                   let tail = chars.as_str();
         .                   let first_non_space = tail
-- line 322 ----------------------------------------
-- line 344 ----------------------------------------
         .           /// Takes a contents of a string literal (without quotes) and produces a
         .           /// sequence of characters or errors.
         .           /// NOTE: Raw strings do not perform any explicit character escaping, here we
         .           /// only translate CRLF to LF and produce errors on bare CR.
         .           fn unescape_raw_str_or_byte_str<F>(literal_text: &str, mode: Mode, callback: &mut F)
         .           where
         .               F: FnMut(Range<usize>, Result<char, EscapeError>),
         .           {
     5,086 ( 0.00%)      assert!(mode.in_double_quotes());
         .               let initial_len = literal_text.len();
         .           
         .               let mut chars = literal_text.chars();
         .               while let Some(curr) = chars.next() {
         .                   let start = initial_len - chars.as_str().len() - curr.len_utf8();
         .           
         .                   let result = match curr {
         .                       '\r' => Err(EscapeError::BareCarriageReturnInRawString),
-- line 360 ----------------------------------------

26,797,158 ( 0.14%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lexer/src/unescape.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/const_ptr.rs
--------------------------------------------------------------------------------
Ir                  

-- line 29 ----------------------------------------
         .               /// ```
         .               /// let s: &str = "Follow the rabbit";
         .               /// let ptr: *const u8 = s.as_ptr();
         .               /// assert!(!ptr.is_null());
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_ptr_is_null", issue = "74939")]
         .               #[inline]
 6,753,384 ( 0.03%)      pub const fn is_null(self) -> bool {
         .                   // Compare via a cast to a thin pointer, so fat pointers are only
         .                   // considering their "data" part for null-ness.
 6,753,384 ( 0.03%)          (self as *const u8).guaranteed_eq(null())
 6,753,384 ( 0.03%)      }
         .           
         .               /// Casts to a pointer of another type.
         .               #[stable(feature = "ptr_cast", since = "1.38.0")]
         .               #[rustc_const_stable(feature = "const_ptr_cast", since = "1.38.0")]
         .               #[inline]
 1,611,810 ( 0.01%)      pub const fn cast<U>(self) -> *const U {
         .                   self as _
 1,074,540 ( 0.01%)      }
         .           
         .               /// Changes constness without changing the type.
         .               ///
         .               /// This is a bit safer than `as` because it wouldn't silently change the type if the code is
         .               /// refactored.
         .               #[unstable(feature = "ptr_const_cast", issue = "92675")]
         .               #[rustc_const_unstable(feature = "ptr_const_cast", issue = "92675")]
         .               pub const fn as_mut(self) -> *mut T {
-- line 57 ----------------------------------------
-- line 287 ----------------------------------------
         .               #[must_use = "returns a new pointer rather than modifying its argument"]
         .               #[rustc_const_unstable(feature = "const_ptr_offset", issue = "71499")]
         .               #[inline(always)]
         .               pub const unsafe fn offset(self, count: isize) -> *const T
         .               where
         .                   T: Sized,
         .               {
         .                   // SAFETY: the caller must uphold the safety contract for `offset`.
47,127,471 ( 0.24%)          unsafe { intrinsics::offset(self, count) }
         .               }
         .           
         .               /// Calculates the offset from a pointer using wrapping arithmetic.
         .               ///
         .               /// `count` is in units of T; e.g., a `count` of 3 represents a pointer
         .               /// offset of `3 * size_of::<T>()` bytes.
         .               ///
         .               /// # Safety
-- line 303 ----------------------------------------
-- line 436 ----------------------------------------
         .               /// // they point to the same address!
         .               /// unsafe {
         .               ///     let zero = ptr2_other.offset_from(ptr2); // Undefined Behavior
         .               /// }
         .               /// ```
         .               #[stable(feature = "ptr_offset_from", since = "1.47.0")]
         .               #[rustc_const_unstable(feature = "const_ptr_offset_from", issue = "92980")]
         .               #[inline]
   184,445 ( 0.00%)      pub const unsafe fn offset_from(self, origin: *const T) -> isize
         .               where
         .                   T: Sized,
         .               {
    36,889 ( 0.00%)          let pointee_size = mem::size_of::<T>();
   479,557 ( 0.00%)          assert!(0 < pointee_size && pointee_size <= isize::MAX as usize);
         .                   // SAFETY: the caller must uphold the safety contract for `ptr_offset_from`.
 9,563,354 ( 0.05%)          unsafe { intrinsics::ptr_offset_from(self, origin) }
    73,778 ( 0.00%)      }
         .           
         .               /// Returns whether two pointers are guaranteed to be equal.
         .               ///
         .               /// At runtime this function behaves like `self == other`.
         .               /// However, in some contexts (e.g., compile-time evaluation),
         .               /// it is not always possible to determine equality of two pointers, so this function may
         .               /// spuriously return `false` for pointers that later actually turn out to be equal.
         .               /// But when it returns `true`, the pointers are guaranteed to be equal.
-- line 460 ----------------------------------------
-- line 470 ----------------------------------------
         .               /// affect the outcome, but just the performance.
         .               /// The consequences of using this method to make runtime and compile-time code behave
         .               /// differently have not been explored. This method should not be used to introduce such
         .               /// differences, and it should also not be stabilized before we have a better understanding
         .               /// of this issue.
         .               #[unstable(feature = "const_raw_ptr_comparison", issue = "53020")]
         .               #[rustc_const_unstable(feature = "const_raw_ptr_comparison", issue = "53020")]
         .               #[inline]
 5,065,038 ( 0.03%)      pub const fn guaranteed_eq(self, other: *const T) -> bool
         .               where
         .                   T: Sized,
         .               {
10,130,103 ( 0.05%)          intrinsics::ptr_guaranteed_eq(self, other)
 6,753,384 ( 0.03%)      }
         .           
         .               /// Returns whether two pointers are guaranteed to be unequal.
         .               ///
         .               /// At runtime this function behaves like `self != other`.
         .               /// However, in some contexts (e.g., compile-time evaluation),
         .               /// it is not always possible to determine the inequality of two pointers, so this function may
         .               /// spuriously return `false` for pointers that later actually turn out to be unequal.
         .               /// But when it returns `true`, the pointers are guaranteed to be unequal.
-- line 491 ----------------------------------------
-- line 569 ----------------------------------------
         .               #[rustc_const_unstable(feature = "const_ptr_offset", issue = "71499")]
         .               #[inline(always)]
         .               pub const unsafe fn add(self, count: usize) -> Self
         .               where
         .                   T: Sized,
         .               {
         .                   // SAFETY: the caller must uphold the safety contract for `offset`.
         .                   unsafe { self.offset(count as isize) }
     6,453 ( 0.00%)      }
         .           
         .               /// Calculates the offset from a pointer (convenience for
         .               /// `.offset((count as isize).wrapping_neg())`).
         .               ///
         .               /// `count` is in units of T; e.g., a `count` of 3 represents a pointer
         .               /// offset of `3 * size_of::<T>()` bytes.
         .               ///
         .               /// # Safety
-- line 585 ----------------------------------------
-- line 886 ----------------------------------------
         .               /// NOTE: this has the *same* argument order as [`ptr::copy_nonoverlapping`].
         .               ///
         .               /// See [`ptr::copy_nonoverlapping`] for safety concerns and examples.
         .               ///
         .               /// [`ptr::copy_nonoverlapping`]: crate::ptr::copy_nonoverlapping()
         .               #[rustc_const_unstable(feature = "const_intrinsic_copy", issue = "80697")]
         .               #[stable(feature = "pointer_methods", since = "1.26.0")]
         .               #[inline]
    13,240 ( 0.00%)      pub const unsafe fn copy_to_nonoverlapping(self, dest: *mut T, count: usize)
         .               where
         .                   T: Sized,
         .               {
         .                   // SAFETY: the caller must uphold the safety contract for `copy_nonoverlapping`.
     3,310 ( 0.00%)          unsafe { copy_nonoverlapping(self, dest, count) }
     6,620 ( 0.00%)      }
         .           
         .               /// Computes the offset that needs to be applied to the pointer in order to make it aligned to
         .               /// `align`.
         .               ///
         .               /// If it is not possible to align the pointer, the implementation returns
         .               /// `usize::MAX`. It is permissible for the implementation to *always*
         .               /// return `usize::MAX`. Only your algorithm's performance can depend
         .               /// on getting a usable offset here, not its correctness.
-- line 908 ----------------------------------------
-- line 983 ----------------------------------------
         .               /// use std::ptr;
         .               ///
         .               /// let slice: *const [i8] = ptr::slice_from_raw_parts(ptr::null(), 3);
         .               /// assert_eq!(slice.len(), 3);
         .               /// ```
         .               #[inline]
         .               #[unstable(feature = "slice_ptr_len", issue = "71146")]
         .               #[rustc_const_unstable(feature = "const_slice_ptr_len", issue = "71146")]
   194,880 ( 0.00%)      pub const fn len(self) -> usize {
   129,920 ( 0.00%)          metadata(self)
   129,920 ( 0.00%)      }
         .           
         .               /// Returns a raw pointer to the slice's buffer.
         .               ///
         .               /// This is equivalent to casting `self` to `*const T`, but more type-safe.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```rust
-- line 1001 ----------------------------------------
-- line 1003 ----------------------------------------
         .               /// use std::ptr;
         .               ///
         .               /// let slice: *const [i8] = ptr::slice_from_raw_parts(ptr::null(), 3);
         .               /// assert_eq!(slice.as_ptr(), 0 as *const i8);
         .               /// ```
         .               #[inline]
         .               #[unstable(feature = "slice_ptr_get", issue = "74265")]
         .               #[rustc_const_unstable(feature = "slice_ptr_get", issue = "74265")]
   546,940 ( 0.00%)      pub const fn as_ptr(self) -> *const T {
         .                   self as *const T
   273,470 ( 0.00%)      }
         .           
         .               /// Returns a raw pointer to an element or subslice, without doing bounds
         .               /// checking.
         .               ///
         .               /// Calling this method with an out-of-bounds index or when `self` is not dereferenceable
         .               /// is *[undefined behavior]* even if the resulting pointer is not used.
         .               ///
         .               /// [undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html
-- line 1021 ----------------------------------------

 6,823,319 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/const_ptr.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs
--------------------------------------------------------------------------------
Ir                  

-- line 118 ----------------------------------------
         .               /// let a = [1, 2, 3];
         .               /// assert_eq!(a.len(), 3);
         .               /// ```
         .               #[lang = "slice_len_fn"]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_stable(feature = "const_slice_len", since = "1.39.0")]
         .               #[inline]
         .               // SAFETY: const sound because we transmute out the length field as a usize (which it must be)
   174,150 ( 0.00%)      pub const fn len(&self) -> usize {
         .                   // FIXME: Replace with `crate::ptr::metadata(self)` when that is const-stable.
         .                   // As of this writing this causes a "Const-stable functions can only call other
         .                   // const-stable functions" error.
         .           
         .                   // SAFETY: Accessing the value from the `PtrRepr` union is safe since *const T
         .                   // and PtrComponents<T> have the same memory layouts. Only std can make this
         .                   // guarantee.
   174,150 ( 0.00%)          unsafe { crate::ptr::PtrRepr { const_ptr: self }.components.metadata }
   116,100 ( 0.00%)      }
         .           
         .               /// Returns `true` if the slice has a length of 0.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let a = [1, 2, 3];
         .               /// assert!(!a.is_empty());
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_stable(feature = "const_slice_is_empty", since = "1.39.0")]
         .               #[inline]
         .               pub const fn is_empty(&self) -> bool {
 4,565,198 ( 0.02%)          self.len() == 0
         .               }
         .           
         .               /// Returns the first element of the slice, or `None` if it is empty.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let v = [10, 40, 30];
-- line 157 ----------------------------------------
-- line 158 ----------------------------------------
         .               /// assert_eq!(Some(&10), v.first());
         .               ///
         .               /// let w: &[i32] = &[];
         .               /// assert_eq!(None, w.first());
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
         .               #[inline]
       384 ( 0.00%)      pub const fn first(&self) -> Option<&T> {
    60,488 ( 0.00%)          if let [first, ..] = self { Some(first) } else { None }
       288 ( 0.00%)      }
         .           
         .               /// Returns a mutable pointer to the first element of the slice, or `None` if it is empty.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let x = &mut [0, 1, 2];
         .               ///
-- line 176 ----------------------------------------
-- line 178 ----------------------------------------
         .               ///     *first = 5;
         .               /// }
         .               /// assert_eq!(x, &[5, 1, 2]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_slice_first_last", issue = "83570")]
         .               #[inline]
         .               pub const fn first_mut(&mut self) -> Option<&mut T> {
    13,648 ( 0.00%)          if let [first, ..] = self { Some(first) } else { None }
         .               }
         .           
         .               /// Returns the first and all the rest of the elements of the slice, or `None` if it is empty.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let x = &[0, 1, 2];
-- line 194 ----------------------------------------
-- line 237 ----------------------------------------
         .               ///     assert_eq!(last, &2);
         .               ///     assert_eq!(elements, &[0, 1]);
         .               /// }
         .               /// ```
         .               #[stable(feature = "slice_splits", since = "1.5.0")]
         .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
         .               #[inline]
         .               pub const fn split_last(&self) -> Option<(&T, &[T])> {
   340,236 ( 0.00%)          if let [init @ .., last] = self { Some((last, init)) } else { None }
         .               }
         .           
         .               /// Returns the last and all the rest of the elements of the slice, or `None` if it is empty.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let x = &mut [0, 1, 2];
-- line 253 ----------------------------------------
-- line 276 ----------------------------------------
         .               ///
         .               /// let w: &[i32] = &[];
         .               /// assert_eq!(None, w.last());
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
         .               #[inline]
         .               pub const fn last(&self) -> Option<&T> {
 2,385,683 ( 0.01%)          if let [.., last] = self { Some(last) } else { None }
         .               }
         .           
         .               /// Returns a mutable pointer to the last item in the slice.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let x = &mut [0, 1, 2];
-- line 292 ----------------------------------------
-- line 295 ----------------------------------------
         .               ///     *last = 10;
         .               /// }
         .               /// assert_eq!(x, &[0, 1, 10]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_slice_first_last", issue = "83570")]
         .               #[inline]
         .               pub const fn last_mut(&mut self) -> Option<&mut T> {
 5,745,144 ( 0.03%)          if let [.., last] = self { Some(last) } else { None }
         .               }
         .           
         .               /// Returns a reference to an element or subslice depending on the type of
         .               /// index.
         .               ///
         .               /// - If given a position, returns a reference to the element at that
         .               ///   position or `None` if out of bounds.
         .               /// - If given a range, returns the subslice corresponding to that range,
-- line 311 ----------------------------------------
-- line 317 ----------------------------------------
         .               /// let v = [10, 40, 30];
         .               /// assert_eq!(Some(&40), v.get(1));
         .               /// assert_eq!(Some(&[10, 40][..]), v.get(0..2));
         .               /// assert_eq!(None, v.get(3));
         .               /// assert_eq!(None, v.get(0..4));
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[inline]
   519,648 ( 0.00%)      pub fn get<I>(&self, index: I) -> Option<&I::Output>
         .               where
         .                   I: SliceIndex<Self>,
         .               {
   129,912 ( 0.00%)          index.get(self)
   129,912 ( 0.00%)      }
         .           
         .               /// Returns a mutable reference to an element or subslice depending on the
         .               /// type of index (see [`get`]) or `None` if the index is out of bounds.
         .               ///
         .               /// [`get`]: slice::get
         .               ///
         .               /// # Examples
         .               ///
-- line 338 ----------------------------------------
-- line 447 ----------------------------------------
         .               ///     }
         .               /// }
         .               /// ```
         .               ///
         .               /// [`as_mut_ptr`]: slice::as_mut_ptr
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_stable(feature = "const_slice_as_ptr", since = "1.32.0")]
         .               #[inline]
 5,388,072 ( 0.03%)      pub const fn as_ptr(&self) -> *const T {
 5,302,006 ( 0.03%)          self as *const [T] as *const T
 2,694,036 ( 0.01%)      }
         .           
         .               /// Returns an unsafe mutable pointer to the slice's buffer.
         .               ///
         .               /// The caller must ensure that the slice outlives the pointer this
         .               /// function returns, or else it will end up pointing to garbage.
         .               ///
         .               /// Modifying the container referenced by this slice may cause its buffer
         .               /// to be reallocated, which would also make any pointers to it invalid.
-- line 465 ----------------------------------------
-- line 475 ----------------------------------------
         .               ///         *x_ptr.add(i) += 2;
         .               ///     }
         .               /// }
         .               /// assert_eq!(x, &[3, 4, 6]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_ptr_offset", issue = "71499")]
         .               #[inline]
    70,856 ( 0.00%)      pub const fn as_mut_ptr(&mut self) -> *mut T {
         4 ( 0.00%)          self as *mut [T] as *mut T
    35,428 ( 0.00%)      }
         .           
         .               /// Returns the two raw pointers spanning the slice.
         .               ///
         .               /// The returned range is half-open, which means that the end pointer
         .               /// points *one past* the last element of the slice. This way, an empty
         .               /// slice is represented by two equal pointers, and the difference between
         .               /// the two pointers represents the size of the slice.
         .               ///
-- line 493 ----------------------------------------
-- line 582 ----------------------------------------
         .               /// v.swap(2, 4);
         .               /// assert!(v == ["a", "b", "e", "d", "c"]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_swap", issue = "83163")]
         .               #[inline]
         .               #[track_caller]
         .               pub const fn swap(&mut self, a: usize, b: usize) {
   205,862 ( 0.00%)          let _ = &self[a];
   344,471 ( 0.00%)          let _ = &self[b];
         .           
         .                   // SAFETY: we just checked that both `a` and `b` are in bounds
         .                   unsafe { self.swap_unchecked(a, b) }
         .               }
         .           
         .               /// Swaps two elements in the slice, without doing bounds checking.
         .               ///
         .               /// For a safe alternative see [`swap`].
-- line 599 ----------------------------------------
-- line 677 ----------------------------------------
         .           
         .                       // Because this function is first compiled in isolation,
         .                       // this check tells LLVM that the indexing below is
         .                       // in-bounds.  Then after inlining -- once the actual
         .                       // lengths of the slices are known -- it's removed.
         .                       let (a, b) = (&mut a[..n], &mut b[..n]);
         .           
         .                       for i in 0..n {
     6,116 ( 0.00%)                  mem::swap(&mut a[i], &mut b[n - 1 - i]);
         .                       }
         .                   }
         .               }
         .           
         .               /// Returns an iterator over the slice.
         .               ///
         .               /// # Examples
         .               ///
-- line 693 ----------------------------------------
-- line 697 ----------------------------------------
         .               ///
         .               /// assert_eq!(iterator.next(), Some(&1));
         .               /// assert_eq!(iterator.next(), Some(&2));
         .               /// assert_eq!(iterator.next(), Some(&4));
         .               /// assert_eq!(iterator.next(), None);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[inline]
 2,402,499 ( 0.01%)      pub fn iter(&self) -> Iter<'_, T> {
 2,402,499 ( 0.01%)          Iter::new(self)
 1,601,666 ( 0.01%)      }
         .           
         .               /// Returns an iterator that allows modifying each value.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let x = &mut [1, 2, 4];
         .               /// for elem in x.iter_mut() {
         .               ///     *elem += 2;
         .               /// }
         .               /// assert_eq!(x, &[3, 4, 6]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[inline]
    53,130 ( 0.00%)      pub fn iter_mut(&mut self) -> IterMut<'_, T> {
    53,130 ( 0.00%)          IterMut::new(self)
    35,420 ( 0.00%)      }
         .           
         .               /// Returns an iterator over all contiguous windows of length
         .               /// `size`. The windows overlap. If the slice is shorter than
         .               /// `size`, the iterator returns no values.
         .               ///
         .               /// # Panics
         .               ///
         .               /// Panics if `size` is 0.
-- line 732 ----------------------------------------
-- line 1499 ----------------------------------------
         .               ///     assert_eq!(left, [1, 2, 3, 4, 5, 6]);
         .               ///     assert_eq!(right, []);
         .               /// }
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[inline]
         .               #[track_caller]
         .               pub fn split_at(&self, mid: usize) -> (&[T], &[T]) {
        42 ( 0.00%)          assert!(mid <= self.len());
         .                   // SAFETY: `[ptr; mid]` and `[mid; len]` are inside `self`, which
         .                   // fulfills the requirements of `from_raw_parts_mut`.
         .                   unsafe { self.split_at_unchecked(mid) }
         .               }
         .           
         .               /// Divides one mutable slice into two at an index.
         .               ///
         .               /// The first will contain all indices from `[0, mid)` (excluding
-- line 1515 ----------------------------------------
-- line 1530 ----------------------------------------
         .               /// left[1] = 2;
         .               /// right[1] = 4;
         .               /// assert_eq!(v, [1, 2, 3, 4, 5, 6]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[inline]
         .               #[track_caller]
         .               pub fn split_at_mut(&mut self, mid: usize) -> (&mut [T], &mut [T]) {
   500,498 ( 0.00%)          assert!(mid <= self.len());
         .                   // SAFETY: `[ptr; mid]` and `[mid; len]` are inside `self`, which
         .                   // fulfills the requirements of `from_raw_parts_mut`.
         .                   unsafe { self.split_at_mut_unchecked(mid) }
         .               }
         .           
         .               /// Divides one slice into two at an index, without doing bounds checking.
         .               ///
         .               /// The first will contain all indices from `[0, mid)` (excluding
-- line 1546 ----------------------------------------
-- line 1628 ----------------------------------------
         .               pub unsafe fn split_at_mut_unchecked(&mut self, mid: usize) -> (&mut [T], &mut [T]) {
         .                   let len = self.len();
         .                   let ptr = self.as_mut_ptr();
         .           
         .                   // SAFETY: Caller has to check that `0 <= mid <= self.len()`.
         .                   //
         .                   // `[ptr; mid]` and `[mid; len]` are not overlapping, so returning a mutable reference
         .                   // is fine.
    30,568 ( 0.00%)          unsafe { (from_raw_parts_mut(ptr, mid), from_raw_parts_mut(ptr.add(mid), len - mid)) }
         .               }
         .           
         .               /// Divides one slice into an array and a remainder slice at an index.
         .               ///
         .               /// The array will contain all indices from `[0, N)` (excluding
         .               /// the index `N` itself) and the slice will contain all
         .               /// indices from `[N, len)` (excluding the index `len` itself).
         .               ///
-- line 1644 ----------------------------------------
-- line 2113 ----------------------------------------
         .               /// assert!(!v.iter().any(|e| e == "hi"));
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[inline]
         .               pub fn contains(&self, x: &T) -> bool
         .               where
         .                   T: PartialEq,
         .               {
     5,666 ( 0.00%)          cmp::SliceContains::slice_contains(x, self)
         .               }
         .           
         .               /// Returns `true` if `needle` is a prefix of the slice.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let v = [10, 40, 30];
-- line 2129 ----------------------------------------
-- line 2137 ----------------------------------------
         .               ///
         .               /// ```
         .               /// let v = &[10, 40, 30];
         .               /// assert!(v.starts_with(&[]));
         .               /// let v: &[u8] = &[];
         .               /// assert!(v.starts_with(&[]));
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
    70,861 ( 0.00%)      pub fn starts_with(&self, needle: &[T]) -> bool
         .               where
         .                   T: PartialEq,
         .               {
    30,369 ( 0.00%)          let n = needle.len();
   954,331 ( 0.00%)          self.len() >= n && needle == &self[..n]
    50,615 ( 0.00%)      }
         .           
         .               /// Returns `true` if `needle` is a suffix of the slice.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let v = [10, 40, 30];
         .               /// assert!(v.ends_with(&[30]));
-- line 2159 ----------------------------------------
-- line 2171 ----------------------------------------
         .               /// assert!(v.ends_with(&[]));
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn ends_with(&self, needle: &[T]) -> bool
         .               where
         .                   T: PartialEq,
         .               {
         .                   let (m, n) = (self.len(), needle.len());
    95,556 ( 0.00%)          m >= n && needle == &self[m - n..]
         .               }
         .           
         .               /// Returns a subslice with the prefix removed.
         .               ///
         .               /// If the slice starts with `prefix`, returns the subslice after the prefix, wrapped in `Some`.
         .               /// If `prefix` is empty, simply returns the original slice.
         .               ///
         .               /// If the slice does not start with `prefix`, returns `None`.
-- line 2187 ----------------------------------------
-- line 2293 ----------------------------------------
         .               /// s.insert(idx, num);
         .               /// assert_eq!(s, [0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 42, 55]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn binary_search(&self, x: &T) -> Result<usize, usize>
         .               where
         .                   T: Ord,
         .               {
         3 ( 0.00%)          self.binary_search_by(|p| p.cmp(x))
         .               }
         .           
         .               /// Binary searches this sorted slice with a comparator function.
         .               ///
         .               /// The comparator function should implement an order consistent
         .               /// with the sort order of the underlying slice, returning an
         .               /// order code that indicates whether its argument is `Less`,
         .               /// `Equal` or `Greater` the desired target.
-- line 2309 ----------------------------------------
-- line 2345 ----------------------------------------
         .               #[inline]
         .               pub fn binary_search_by<'a, F>(&'a self, mut f: F) -> Result<usize, usize>
         .               where
         .                   F: FnMut(&'a T) -> Ordering,
         .               {
         .                   let mut size = self.len();
         .                   let mut left = 0;
         .                   let mut right = size;
22,370,383 ( 0.11%)          while left < right {
29,279,333 ( 0.15%)              let mid = left + size / 2;
         .           
         .                       // SAFETY: the call is made safe by the following invariants:
         .                       // - `mid >= 0`
         .                       // - `mid < size`: `mid` is limited by `[left; right)` bound.
 4,495,734 ( 0.02%)              let cmp = f(unsafe { self.get_unchecked(mid) });
         .           
         .                       // The reason why we use if/else control flow rather than match
         .                       // is because match reorders comparison operations, which is perf sensitive.
         .                       // This is x86 asm for u8: https://rust.godbolt.org/z/8Y8Pra.
 8,767,053 ( 0.04%)              if cmp == Less {
 8,776,277 ( 0.05%)                  left = mid + 1;
 5,547,872 ( 0.03%)              } else if cmp == Greater {
         .                           right = mid;
         .                       } else {
         .                           // SAFETY: same as the `get_unchecked` above
         .                           unsafe { crate::intrinsics::assume(mid < self.len()) };
         .                           return Ok(mid);
         .                       }
         .           
23,272,606 ( 0.12%)              size = right - left;
         .                   }
         .                   Err(left)
         .               }
         .           
         .               /// Binary searches this sorted slice with a key extraction function.
         .               ///
         .               /// Assumes that the slice is sorted by the key, for instance with
         .               /// [`sort_by_key`] using the same key extraction function.
-- line 2382 ----------------------------------------
-- line 3187 ----------------------------------------
         .               /// assert_eq!(slice, [4, 5, 3, 4, 5]);
         .               /// ```
         .               ///
         .               /// [`clone_from_slice`]: slice::clone_from_slice
         .               /// [`split_at_mut`]: slice::split_at_mut
         .               #[doc(alias = "memcpy")]
         .               #[stable(feature = "copy_from_slice", since = "1.9.0")]
         .               #[track_caller]
        40 ( 0.00%)      pub fn copy_from_slice(&mut self, src: &[T])
         .               where
         .                   T: Copy,
         .               {
         .                   // The panic code path was put into a cold function to not bloat the
         .                   // call site.
         .                   #[inline(never)]
         .                   #[cold]
         .                   #[track_caller]
         .                   fn len_mismatch_fail(dst_len: usize, src_len: usize) -> ! {
         .                       panic!(
         .                           "source slice length ({}) does not match destination slice length ({})",
         .                           src_len, dst_len,
         .                       );
         .                   }
         .           
 1,363,582 ( 0.01%)          if self.len() != src.len() {
         .                       len_mismatch_fail(self.len(), src.len());
         .                   }
         .           
         .                   // SAFETY: `self` is valid for `self.len()` elements by definition, and `src` was
         .                   // checked to have the same length. The slices cannot overlap because
         .                   // mutable references are exclusive.
         .                   unsafe {
        24 ( 0.00%)              ptr::copy_nonoverlapping(src.as_ptr(), self.as_mut_ptr(), self.len());
         .                   }
         8 ( 0.00%)      }
         .           
         .               /// Copies elements from one part of the slice to another part of itself,
         .               /// using a memmove.
         .               ///
         .               /// `src` is the range within `self` to copy from. `dest` is the starting
         .               /// index of the range within `self` to copy to, which will have the same
         .               /// length as `src`. The two ranges may overlap. The ends of the two ranges
         .               /// must be less than or equal to `self.len()`.
-- line 3229 ----------------------------------------
-- line 3380 ----------------------------------------
         .                       }
         .                       a << k
         .                   }
         .                   let gcd: usize = gcd(mem::size_of::<T>(), mem::size_of::<U>());
         .                   let ts: usize = mem::size_of::<U>() / gcd;
         .                   let us: usize = mem::size_of::<T>() / gcd;
         .           
         .                   // Armed with this knowledge, we can find how many `U`s we can fit!
        10 ( 0.00%)          let us_len = self.len() / ts * us;
         .                   // And how many `T`s will be in the trailing slice!
    35,164 ( 0.00%)          let ts_len = self.len() % ts;
         .                   (us_len, ts_len)
         .               }
         .           
         .               /// Transmute the slice to a slice of another type, ensuring alignment of the types is
         .               /// maintained.
         .               ///
         .               /// This method splits the slice into three distinct slices: prefix, correctly aligned middle
         .               /// slice of a new type, and the suffix slice. The method may make the middle slice the greatest
-- line 3398 ----------------------------------------
-- line 3429 ----------------------------------------
         .                       return (self, &[], &[]);
         .                   }
         .           
         .                   // First, find at what point do we split between the first and 2nd slice. Easy with
         .                   // ptr.align_offset.
         .                   let ptr = self.as_ptr();
         .                   // SAFETY: See the `align_to_mut` method for the detailed safety comment.
         .                   let offset = unsafe { crate::ptr::align_offset(ptr, mem::align_of::<U>()) };
    35,164 ( 0.00%)          if offset > self.len() {
         .                       (self, &[], &[])
         .                   } else {
         .                       let (left, rest) = self.split_at(offset);
         .                       let (us_len, ts_len) = rest.align_to_offsets::<U>();
         .                       // SAFETY: now `rest` is definitely aligned, so `from_raw_parts` below is okay,
         .                       // since the caller guarantees that we can transmute `T` to `U` safely.
         .                       unsafe {
         .                           (
         .                               left,
         .                               from_raw_parts(rest.as_ptr() as *const U, us_len),
    35,174 ( 0.00%)                      from_raw_parts(rest.as_ptr().add(rest.len() - ts_len), ts_len),
         .                           )
         .                       }
         .                   }
         .               }
         .           
         .               /// Transmute the slice to a slice of another type, ensuring alignment of the types is
         .               /// maintained.
         .               ///
-- line 3456 ----------------------------------------

20,835,460 ( 0.11%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/raw_vec.rs
--------------------------------------------------------------------------------
Ir                  

-- line 123 ----------------------------------------
         .                   // `cap: 0` means "unallocated". zero-sized types are ignored.
         .                   Self { ptr: Unique::dangling(), cap: 0, alloc }
         .               }
         .           
         .               /// Like `with_capacity`, but parameterized over the choice of
         .               /// allocator for the returned `RawVec`.
         .               #[cfg(not(no_global_oom_handling))]
         .               #[inline]
    10,480 ( 0.00%)      pub fn with_capacity_in(capacity: usize, alloc: A) -> Self {
    38,040 ( 0.00%)          Self::allocate_in(capacity, AllocInit::Uninitialized, alloc)
    10,480 ( 0.00%)      }
         .           
         .               /// Like `with_capacity_zeroed`, but parameterized over the choice
         .               /// of allocator for the returned `RawVec`.
         .               #[cfg(not(no_global_oom_handling))]
         .               #[inline]
         .               pub fn with_capacity_zeroed_in(capacity: usize, alloc: A) -> Self {
         .                   Self::allocate_in(capacity, AllocInit::Zeroed, alloc)
         .               }
-- line 141 ----------------------------------------
-- line 147 ----------------------------------------
         .               ///
         .               /// # Safety
         .               ///
         .               /// * `len` must be greater than or equal to the most recently requested capacity, and
         .               /// * `len` must be less than or equal to `self.capacity()`.
         .               ///
         .               /// Note, that the requested capacity and `self.capacity()` could differ, as
         .               /// an allocator could overallocate and return a greater memory block than requested.
    72,128 ( 0.00%)      pub unsafe fn into_box(self, len: usize) -> Box<[MaybeUninit<T>], A> {
         .                   // Sanity-check one half of the safety requirement (we cannot check the other half).
    28,836 ( 0.00%)          debug_assert!(
         .                       len <= self.capacity(),
         .                       "`len` must be smaller than or equal to `self.capacity()`"
         .                   );
         .           
   129,762 ( 0.00%)          let me = ManuallyDrop::new(self);
         .                   unsafe {
   201,852 ( 0.00%)              let slice = slice::from_raw_parts_mut(me.ptr() as *mut MaybeUninit<T>, len);
   129,762 ( 0.00%)              Box::from_raw_in(slice, ptr::read(&me.alloc))
         .                   }
    28,874 ( 0.00%)      }
         .           
         .               #[cfg(not(no_global_oom_handling))]
    34,160 ( 0.00%)      fn allocate_in(capacity: usize, init: AllocInit, alloc: A) -> Self {
    31,440 ( 0.00%)          if mem::size_of::<T>() == 0 {
         .                       Self::new_in(alloc)
         .                   } else {
         .                       // We avoid `unwrap_or_else` here because it bloats the amount of
         .                       // LLVM IR generated.
    62,784 ( 0.00%)              let layout = match Layout::array::<T>(capacity) {
    36,680 ( 0.00%)                  Ok(layout) => layout,
         .                           Err(_) => capacity_overflow(),
         .                       };
    41,920 ( 0.00%)              match alloc_guard(layout.size()) {
         .                           Ok(_) => {}
         .                           Err(_) => capacity_overflow(),
         .                       }
    17,080 ( 0.00%)              let result = match init {
    52,400 ( 0.00%)                  AllocInit::Uninitialized => alloc.allocate(layout),
         .                           AllocInit::Zeroed => alloc.allocate_zeroed(layout),
         .                       };
    26,200 ( 0.00%)              let ptr = match result {
    31,440 ( 0.00%)                  Ok(ptr) => ptr,
         .                           Err(_) => handle_alloc_error(layout),
         .                       };
         .           
         .                       // Allocators currently return a `NonNull<[u8]>` whose length
         .                       // matches the size requested. If that ever changes, the capacity
         .                       // here should change to `ptr.len() / mem::size_of::<T>()`.
    10,480 ( 0.00%)              Self {
    62,592 ( 0.00%)                  ptr: unsafe { Unique::new_unchecked(ptr.cast().as_ptr()) },
         .                           cap: capacity,
     5,240 ( 0.00%)                  alloc,
         .                       }
         .                   }
    24,360 ( 0.00%)      }
         .           
         .               /// Reconstitutes a `RawVec` from a pointer, capacity, and allocator.
         .               ///
         .               /// # Safety
         .               ///
         .               /// The `ptr` must be allocated (via the given allocator `alloc`), and with the given
         .               /// `capacity`.
         .               /// The `capacity` cannot exceed `isize::MAX` for sized types. (only a concern on 32-bit
         .               /// systems). ZST vectors may have a capacity up to `usize::MAX`.
         .               /// If the `ptr` and `capacity` come from a `RawVec` created via `alloc`, then this is
         .               /// guaranteed.
         .               #[inline]
   230,400 ( 0.00%)      pub unsafe fn from_raw_parts_in(ptr: *mut T, capacity: usize, alloc: A) -> Self {
   345,600 ( 0.00%)          Self { ptr: unsafe { Unique::new_unchecked(ptr) }, cap: capacity, alloc }
   230,400 ( 0.00%)      }
         .           
         .               /// Gets a raw pointer to the start of the allocation. Note that this is
         .               /// `Unique::dangling()` if `capacity == 0` or `T` is zero-sized. In the former case, you must
         .               /// be careful.
         .               #[inline]
 2,546,954 ( 0.01%)      pub fn ptr(&self) -> *mut T {
 3,820,431 ( 0.02%)          self.ptr.as_ptr()
 2,546,954 ( 0.01%)      }
         .           
         .               /// Gets the capacity of the allocation.
         .               ///
         .               /// This will always be `usize::MAX` if `T` is zero-sized.
         .               #[inline(always)]
         .               pub fn capacity(&self) -> usize {
 2,084,440 ( 0.01%)          if mem::size_of::<T>() == 0 { usize::MAX } else { self.cap }
   833,776 ( 0.00%)      }
         .           
         .               /// Returns a shared reference to the allocator backing this `RawVec`.
    73,842 ( 0.00%)      pub fn allocator(&self) -> &A {
         .                   &self.alloc
    49,228 ( 0.00%)      }
         .           
 3,201,160 ( 0.02%)      fn current_memory(&self) -> Option<(NonNull<u8>, Layout)> {
46,244,408 ( 0.24%)          if mem::size_of::<T>() == 0 || self.cap == 0 {
 2,147,209 ( 0.01%)              None
         .                   } else {
         .                       // We have an allocated chunk of memory, so we can bypass runtime
         .                       // checks to get our current layout.
         .                       unsafe {
   882,534 ( 0.00%)                  let align = mem::align_of::<T>();
17,124,675 ( 0.09%)                  let size = mem::size_of::<T>() * self.cap;
 3,088,869 ( 0.02%)                  let layout = Layout::from_size_align_unchecked(size, align);
 8,518,626 ( 0.04%)                  Some((self.ptr.cast().into(), layout))
         .                       }
         .                   }
 1,280,464 ( 0.01%)      }
         .           
         .               /// Ensures that the buffer contains at least enough space to hold `len +
         .               /// additional` elements. If it doesn't already have enough capacity, will
         .               /// reallocate enough space plus comfortable slack space to get amortized
         .               /// *O*(1) behavior. Will limit this behavior if it would needlessly cause
         .               /// itself to panic.
         .               ///
         .               /// If `len` exceeds `self.capacity()`, this may fail to actually allocate
-- line 261 ----------------------------------------
-- line 268 ----------------------------------------
         .               ///
         .               /// Panics if the new capacity exceeds `isize::MAX` bytes.
         .               ///
         .               /// # Aborts
         .               ///
         .               /// Aborts on OOM.
         .               #[cfg(not(no_global_oom_handling))]
         .               #[inline]
   661,059 ( 0.00%)      pub fn reserve(&mut self, len: usize, additional: usize) {
         .                   // Callers expect this function to be very cheap when there is already sufficient capacity.
         .                   // Therefore, we move all the resizing and error-handling logic from grow_amortized and
         .                   // handle_reserve behind a call, while making sure that this function is likely to be
         .                   // inlined as just a comparison and a call if the comparison fails.
         .                   #[cold]
 4,331,009 ( 0.02%)          fn do_reserve_and_handle<T, A: Allocator>(
         .                       slf: &mut RawVec<T, A>,
         .                       len: usize,
         .                       additional: usize,
         .                   ) {
   350,199 ( 0.00%)              handle_reserve(slf.grow_amortized(len, additional));
 4,986,114 ( 0.03%)          }
         .           
 5,346,601 ( 0.03%)          if self.needs_to_grow(len, additional) {
 4,401,693 ( 0.02%)              do_reserve_and_handle(self, len, additional);
         .                   }
   188,874 ( 0.00%)      }
         .           
         .               /// A specialized version of `reserve()` used only by the hot and
         .               /// oft-instantiated `Vec::push()`, which does its own capacity check.
         .               #[cfg(not(no_global_oom_handling))]
         .               #[inline(never)]
 5,835,849 ( 0.03%)      pub fn reserve_for_push(&mut self, len: usize) {
   290,425 ( 0.00%)          handle_reserve(self.grow_amortized(len, 1));
 6,955,409 ( 0.04%)      }
         .           
         .               /// The same as `reserve`, but returns on errors instead of panicking or aborting.
         .               pub fn try_reserve(&mut self, len: usize, additional: usize) -> Result<(), TryReserveError> {
         .                   if self.needs_to_grow(len, additional) {
         .                       self.grow_amortized(len, additional)
         .                   } else {
         .                       Ok(())
         .                   }
-- line 309 ----------------------------------------
-- line 322 ----------------------------------------
         .               /// # Panics
         .               ///
         .               /// Panics if the new capacity exceeds `isize::MAX` bytes.
         .               ///
         .               /// # Aborts
         .               ///
         .               /// Aborts on OOM.
         .               #[cfg(not(no_global_oom_handling))]
   156,050 ( 0.00%)      pub fn reserve_exact(&mut self, len: usize, additional: usize) {
         .                   handle_reserve(self.try_reserve_exact(len, additional));
   156,050 ( 0.00%)      }
         .           
         .               /// The same as `reserve_exact`, but returns on errors instead of panicking or aborting.
         .               pub fn try_reserve_exact(
         .                   &mut self,
         .                   len: usize,
         .                   additional: usize,
         .               ) -> Result<(), TryReserveError> {
    62,945 ( 0.00%)          if self.needs_to_grow(len, additional) { self.grow_exact(len, additional) } else { Ok(()) }
         .               }
         .           
         .               /// Shrinks the buffer down to the specified capacity. If the given amount
         .               /// is 0, actually completely deallocates.
         .               ///
         .               /// # Panics
         .               ///
         .               /// Panics if the given amount is *larger* than the current capacity.
         .               ///
         .               /// # Aborts
         .               ///
         .               /// Aborts on OOM.
         .               #[cfg(not(no_global_oom_handling))]
    83,010 ( 0.00%)      pub fn shrink_to_fit(&mut self, cap: usize) {
    39,244 ( 0.00%)          handle_reserve(self.shrink(cap));
    60,368 ( 0.00%)      }
         .           }
         .           
         .           impl<T, A: Allocator> RawVec<T, A> {
         .               /// Returns if the buffer needs to grow to fulfill the needed extra capacity.
         .               /// Mainly used to make inlining reserve-calls possible without inlining `grow`.
   755,496 ( 0.00%)      fn needs_to_grow(&self, len: usize, additional: usize) -> bool {
 9,257,517 ( 0.05%)          additional > self.capacity().wrapping_sub(len)
   377,748 ( 0.00%)      }
         .           
 1,924,390 ( 0.01%)      fn set_ptr_and_cap(&mut self, ptr: NonNull<[u8]>, cap: usize) {
         .                   // Allocators currently return a `NonNull<[u8]>` whose length matches
         .                   // the size requested. If that ever changes, the capacity here should
         .                   // change to `ptr.len() / mem::size_of::<T>()`.
 3,576,866 ( 0.02%)          self.ptr = unsafe { Unique::new_unchecked(ptr.cast().as_ptr()) };
 2,695,098 ( 0.01%)          self.cap = cap;
   296,060 ( 0.00%)      }
         .           
         .               // This method is usually instantiated many times. So we want it to be as
         .               // small as possible, to improve compile times. But we also want as much of
         .               // its contents to be statically computable as possible, to make the
         .               // generated code run faster. Therefore, this method is carefully written
         .               // so that all of the code that depends on `T` is within it, while as much
         .               // of the code that doesn't depend on `T` as possible is in functions that
         .               // are non-generic over `T`.
 1,282,443 ( 0.01%)      fn grow_amortized(&mut self, len: usize, additional: usize) -> Result<(), TryReserveError> {
         .                   // This is ensured by the calling contexts.
         .                   debug_assert!(additional > 0);
         .           
   414,657 ( 0.00%)          if mem::size_of::<T>() == 0 {
         .                       // Since we return a capacity of `usize::MAX` when `elem_size` is
         .                       // 0, getting to here necessarily means the `RawVec` is overfull.
         .                       return Err(CapacityOverflow.into());
         .                   }
         .           
         .                   // Nothing we can really do about these checks, sadly.
 2,487,942 ( 0.01%)          let required_cap = len.checked_add(additional).ok_or(CapacityOverflow)?;
         .           
         .                   // This guarantees exponential growth. The doubling cannot overflow
         .                   // because `cap <= isize::MAX` and the type of `cap` is `usize`.
11,692,444 ( 0.06%)          let cap = cmp::max(self.cap * 2, required_cap);
   552,876 ( 0.00%)          let cap = cmp::max(Self::MIN_NON_ZERO_CAP, cap);
         .           
   691,095 ( 0.00%)          let new_layout = Layout::array::<T>(cap);
         .           
         .                   // `finish_grow` is non-generic over `T`.
 9,906,833 ( 0.05%)          let ptr = finish_grow(new_layout, self.current_memory(), &mut self.alloc)?;
   276,438 ( 0.00%)          self.set_ptr_and_cap(ptr, cap);
   138,219 ( 0.00%)          Ok(())
   453,129 ( 0.00%)      }
         .           
         .               // The constraints on this method are much the same as those on
         .               // `grow_amortized`, but this method is usually instantiated less often so
         .               // it's less critical.
         .               fn grow_exact(&mut self, len: usize, additional: usize) -> Result<(), TryReserveError> {
         .                   if mem::size_of::<T>() == 0 {
         .                       // Since we return a capacity of `usize::MAX` when the type size is
         .                       // 0, getting to here necessarily means the `RawVec` is overfull.
         .                       return Err(CapacityOverflow.into());
         .                   }
         .           
         .                   let cap = len.checked_add(additional).ok_or(CapacityOverflow)?;
         .                   let new_layout = Layout::array::<T>(cap);
         .           
         .                   // `finish_grow` is non-generic over `T`.
    76,210 ( 0.00%)          let ptr = finish_grow(new_layout, self.current_memory(), &mut self.alloc)?;
         .                   self.set_ptr_and_cap(ptr, cap);
         .                   Ok(())
         .               }
         .           
    78,488 ( 0.00%)      fn shrink(&mut self, cap: usize) -> Result<(), TryReserveError> {
    69,428 ( 0.00%)          assert!(cap <= self.capacity(), "Tried to shrink to a larger capacity");
         .           
   274,708 ( 0.00%)          let (ptr, layout) = if let Some(mem) = self.current_memory() { mem } else { return Ok(()) };
    98,861 ( 0.00%)          let new_size = cap * mem::size_of::<T>();
         .           
         .                   let ptr = unsafe {
    68,677 ( 0.00%)              let new_layout = Layout::from_size_align_unchecked(new_size, layout.align());
   176,598 ( 0.00%)              self.alloc
    39,244 ( 0.00%)                  .shrink(ptr, layout, new_layout)
    19,622 ( 0.00%)                  .map_err(|_| AllocError { layout: new_layout, non_exhaustive: () })?
         .                   };
    19,622 ( 0.00%)          self.set_ptr_and_cap(ptr, cap);
     9,811 ( 0.00%)          Ok(())
    29,433 ( 0.00%)      }
         .           }
         .           
         .           // This function is outside `RawVec` to minimize compile times. See the comment
         .           // above `RawVec::grow_amortized` for details. (The `A` parameter isn't
         .           // significant, because the number of different `A` types seen in practice is
         .           // much smaller than the number of `T` types.)
         .           #[inline(never)]
13,775,037 ( 0.07%)  fn finish_grow<A>(
         .               new_layout: Result<Layout, LayoutError>,
         .               current_memory: Option<(NonNull<u8>, Layout)>,
         .               alloc: &mut A,
         .           ) -> Result<NonNull<[u8]>, TryReserveError>
         .           where
         .               A: Allocator,
         .           {
         .               // Check for the error here to minimize the size of `RawVec::grow_*`.
 1,935,066 ( 0.01%)      let new_layout = new_layout.map_err(|_| CapacityOverflow)?;
         .           
 1,658,628 ( 0.01%)      alloc_guard(new_layout.size())?;
         .           
 9,435,890 ( 0.05%)      let memory = if let Some((ptr, old_layout)) = current_memory {
         .                   debug_assert_eq!(old_layout.align(), new_layout.align());
         .                   unsafe {
         .                       // The allocator checks for alignment equality
   119,780 ( 0.00%)              intrinsics::assume(old_layout.align() == new_layout.align());
   167,692 ( 0.00%)              alloc.grow(ptr, old_layout, new_layout)
         .                   }
         .               } else {
   571,315 ( 0.00%)          alloc.allocate(new_layout)
         .               };
         .           
   967,533 ( 0.00%)      memory.map_err(|_| AllocError { layout: new_layout, non_exhaustive: () }.into())
10,550,085 ( 0.05%)  }
         .           
         .           unsafe impl<#[may_dangle] T, A: Allocator> Drop for RawVec<T, A> {
         .               /// Frees the memory owned by the `RawVec` *without* trying to drop its contents.
 2,038,952 ( 0.01%)      fn drop(&mut self) {
18,819,741 ( 0.10%)          if let Some((ptr, layout)) = self.current_memory() {
   815,000 ( 0.00%)              unsafe { self.alloc.deallocate(ptr, layout) }
         .                   }
 1,049,470 ( 0.01%)      }
         .           }
         .           
         .           // Central function for reserve error handling.
         .           #[cfg(not(no_global_oom_handling))]
         .           #[inline]
   148,030 ( 0.00%)  fn handle_reserve(result: Result<(), TryReserveError>) {
 1,776,360 ( 0.01%)      match result.map_err(|e| e.kind()) {
         .                   Err(CapacityOverflow) => capacity_overflow(),
         .                   Err(AllocError { layout, .. }) => handle_alloc_error(layout),
         .                   Ok(()) => { /* yay */ }
         .               }
   296,060 ( 0.00%)  }
         .           
         .           // We need to guarantee the following:
         .           // * We don't ever allocate `> isize::MAX` byte-size objects.
         .           // * We don't overflow `usize::MAX` and actually allocate too little.
         .           //
         .           // On 64-bit we just need to check for overflow since trying to allocate
         .           // `> isize::MAX` bytes will surely fail. On 32-bit and 16-bit we need to add
         .           // an extra guard for this in case we're running on a platform which can use
         .           // all 4GB in user-space, e.g., PAE or x32.
         .           
         .           #[inline]
   573,836 ( 0.00%)  fn alloc_guard(alloc_size: usize) -> Result<(), TryReserveError> {
   573,836 ( 0.00%)      if usize::BITS < 64 && alloc_size > isize::MAX as usize {
         .                   Err(CapacityOverflow.into())
         .               } else {
   143,459 ( 0.00%)          Ok(())
         .               }
   286,918 ( 0.00%)  }
         .           
         .           // One central function responsible for reporting capacity overflows. This'll
         .           // ensure that the code generation related to these panics is minimal as there's
         .           // only one location which panics rather than a bunch throughout the module.
         .           #[cfg(not(no_global_oom_handling))]
         .           fn capacity_overflow() -> ! {
         .               panic!("capacity overflow");
         .           }
-- line 519 ----------------------------------------

56,258,558 ( 0.29%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/raw_vec.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_index/src/bit_set.rs
--------------------------------------------------------------------------------
Ir                  

-- line 44 ----------------------------------------
         .               }
         .               Some((start, end))
         .           }
         .           
         .           macro_rules! bit_relations_inherent_impls {
         .               () => {
         .                   /// Sets `self = self | other` and returns `true` if `self` changed
         .                   /// (i.e., if new bits were added).
 3,467,784 ( 0.02%)          pub fn union<Rhs>(&mut self, other: &Rhs) -> bool
         .                   where
         .                       Self: BitRelations<Rhs>,
         .                   {
         .                       <Self as BitRelations<Rhs>>::union(self, other)
 2,861,742 ( 0.01%)          }
         .           
         .                   /// Sets `self = self - other` and returns `true` if `self` changed.
         .                   /// (i.e., if any bits were removed).
 1,304,520 ( 0.01%)          pub fn subtract<Rhs>(&mut self, other: &Rhs) -> bool
         .                   where
         .                       Self: BitRelations<Rhs>,
         .                   {
         .                       <Self as BitRelations<Rhs>>::subtract(self, other)
 1,304,520 ( 0.01%)          }
         .           
         .                   /// Sets `self = self & other` and return `true` if `self` changed.
         .                   /// (i.e., if any bits were removed).
         .                   pub fn intersect<Rhs>(&mut self, other: &Rhs) -> bool
         .                   where
         .                       Self: BitRelations<Rhs>,
         .                   {
         .                       <Self as BitRelations<Rhs>>::intersect(self, other)
-- line 74 ----------------------------------------
-- line 84 ----------------------------------------
         .           /// just be `usize`.
         .           ///
         .           /// All operations that involve an element will panic if the element is equal
         .           /// to or greater than the domain size. All operations that involve two bitsets
         .           /// will panic if the bitsets have differing domain sizes.
         .           ///
         .           #[derive(Eq, PartialEq, Hash, Decodable, Encodable)]
         .           pub struct BitSet<T> {
        97 ( 0.00%)      domain_size: usize,
        97 ( 0.00%)      words: Vec<Word>,
        97 ( 0.00%)      marker: PhantomData<T>,
         .           }
         .           
         .           impl<T> BitSet<T> {
         .               /// Gets the domain size.
         .               pub fn domain_size(&self) -> usize {
   404,116 ( 0.00%)          self.domain_size
         .               }
         .           }
         .           
         .           impl<T: Idx> BitSet<T> {
         .               /// Creates a new, empty bitset with a given `domain_size`.
         .               #[inline]
         .               pub fn new_empty(domain_size: usize) -> BitSet<T> {
         .                   let num_words = num_words(domain_size);
   310,887 ( 0.00%)          BitSet { domain_size, words: vec![0; num_words], marker: PhantomData }
         .               }
         .           
         .               /// Creates a new, filled bitset with a given `domain_size`.
         .               #[inline]
         .               pub fn new_filled(domain_size: usize) -> BitSet<T> {
         .                   let num_words = num_words(domain_size);
   119,319 ( 0.00%)          let mut result = BitSet { domain_size, words: vec![!0; num_words], marker: PhantomData };
         .                   result.clear_excess_bits();
         .                   result
         .               }
         .           
         .               /// Clear all elements.
         .               #[inline]
         .               pub fn clear(&mut self) {
         .                   for word in &mut self.words {
    17,968 ( 0.00%)              *word = 0;
         .                   }
         .               }
         .           
         .               /// Clear excess bits in the final word.
         .               fn clear_excess_bits(&mut self) {
    36,697 ( 0.00%)          let num_bits_in_final_word = self.domain_size % WORD_BITS;
   107,596 ( 0.00%)          if num_bits_in_final_word > 0 {
   104,506 ( 0.00%)              let mask = (1 << num_bits_in_final_word) - 1;
   178,488 ( 0.00%)              let final_word_idx = self.words.len() - 1;
    53,796 ( 0.00%)              self.words[final_word_idx] &= mask;
         .                   }
         .               }
         .           
         .               /// Count the number of set bits in the set.
         .               pub fn count(&self) -> usize {
         .                   self.words.iter().map(|e| e.count_ones() as usize).sum()
         .               }
         .           
         .               /// Returns `true` if `self` contains `elem`.
         .               #[inline]
         .               pub fn contains(&self, elem: T) -> bool {
 1,211,948 ( 0.01%)          assert!(elem.index() < self.domain_size);
         .                   let (word_index, mask) = word_index_and_mask(elem);
 1,320,506 ( 0.01%)          (self.words[word_index] & mask) != 0
         .               }
         .           
         .               /// Is `self` is a (non-strict) superset of `other`?
         .               #[inline]
         .               pub fn superset(&self, other: &BitSet<T>) -> bool {
       423 ( 0.00%)          assert_eq!(self.domain_size, other.domain_size);
     1,203 ( 0.00%)          self.words.iter().zip(&other.words).all(|(a, b)| (a & b) == *b)
         .               }
         .           
         .               /// Is the set empty?
         .               #[inline]
         .               pub fn is_empty(&self) -> bool {
       402 ( 0.00%)          self.words.iter().all(|a| *a == 0)
         .               }
         .           
         .               /// Insert `elem`. Returns whether the set has changed.
         .               #[inline]
         .               pub fn insert(&mut self, elem: T) -> bool {
 7,271,169 ( 0.04%)          assert!(elem.index() < self.domain_size);
         .                   let (word_index, mask) = word_index_and_mask(elem);
         .                   let word_ref = &mut self.words[word_index];
 2,696,390 ( 0.01%)          let word = *word_ref;
 5,392,780 ( 0.03%)          let new_word = word | mask;
 3,550,741 ( 0.02%)          *word_ref = new_word;
 2,962,925 ( 0.02%)          new_word != word
         .               }
         .           
         .               #[inline]
         .               pub fn insert_range(&mut self, elems: impl RangeBounds<T>) {
         .                   let Some((start, end)) = inclusive_start_end(elems, self.domain_size) else {
         .                       return;
         .                   };
         .           
-- line 182 ----------------------------------------
-- line 199 ----------------------------------------
         .                   } else {
         .                       self.words[start_word_index] |= end_mask | (end_mask - start_mask);
         .                   }
         .               }
         .           
         .               /// Sets all bits to true.
         .               pub fn insert_all(&mut self) {
         .                   for word in &mut self.words {
   340,722 ( 0.00%)              *word = !0;
         .                   }
         .                   self.clear_excess_bits();
         .               }
         .           
         .               /// Returns `true` if the set has changed.
         .               #[inline]
         .               pub fn remove(&mut self, elem: T) -> bool {
 3,152,928 ( 0.02%)          assert!(elem.index() < self.domain_size);
         .                   let (word_index, mask) = word_index_and_mask(elem);
         .                   let word_ref = &mut self.words[word_index];
   415,625 ( 0.00%)          let word = *word_ref;
 3,220,481 ( 0.02%)          let new_word = word & !mask;
 1,637,381 ( 0.01%)          *word_ref = new_word;
   831,250 ( 0.00%)          new_word != word
         .               }
         .           
         .               /// Gets a slice of the underlying words.
         .               pub fn words(&self) -> &[Word] {
         .                   &self.words
         .               }
         .           
         .               /// Iterates over the indices of set bits in a sorted order.
-- line 229 ----------------------------------------
-- line 308 ----------------------------------------
         .               }
         .           
         .               bit_relations_inherent_impls! {}
         .           }
         .           
         .           // dense REL dense
         .           impl<T: Idx> BitRelations<BitSet<T>> for BitSet<T> {
         .               fn union(&mut self, other: &BitSet<T>) -> bool {
 1,818,972 ( 0.01%)          assert_eq!(self.domain_size, other.domain_size);
 1,166,116 ( 0.01%)          bitwise(&mut self.words, &other.words, |a, b| a | b)
         .               }
         .           
         .               fn subtract(&mut self, other: &BitSet<T>) -> bool {
         .                   assert_eq!(self.domain_size, other.domain_size);
    25,890 ( 0.00%)          bitwise(&mut self.words, &other.words, |a, b| a & !b)
         .               }
         .           
         .               fn intersect(&mut self, other: &BitSet<T>) -> bool {
   290,966 ( 0.00%)          assert_eq!(self.domain_size, other.domain_size);
    60,666 ( 0.00%)          bitwise(&mut self.words, &other.words, |a, b| a & b)
         .               }
         .           }
         .           
         .           // Applies a function to mutate a bitset, and returns true if any
         .           // of the applications return true
         .           fn sequential_update<T: Idx>(
         .               mut self_update: impl FnMut(T) -> bool,
         .               it: impl Iterator<Item = T>,
         .           ) -> bool {
         .               let mut changed = false;
   586,541 ( 0.00%)      for elem in it {
 1,759,623 ( 0.01%)          changed |= self_update(elem);
         .               }
         .               changed
 1,033,228 ( 0.01%)  }
         .           
         .           // Optimization of intersection for SparseBitSet that's generic
         .           // over the RHS
         .           fn sparse_intersect<T: Idx>(
         .               set: &mut SparseBitSet<T>,
         .               other_contains: impl Fn(&T) -> bool,
         .           ) -> bool {
         .               let size = set.elems.len();
-- line 350 ----------------------------------------
-- line 413 ----------------------------------------
         .                       HybridBitSet::Dense(dense) => dense.intersect(other),
         .                   }
         .               }
         .           }
         .           
         .           // dense REL hybrid
         .           impl<T: Idx> BitRelations<HybridBitSet<T>> for BitSet<T> {
         .               fn union(&mut self, other: &HybridBitSet<T>) -> bool {
 1,043,616 ( 0.01%)          assert_eq!(self.domain_size, other.domain_size());
   521,808 ( 0.00%)          match other {
         .                       HybridBitSet::Sparse(sparse) => {
         .                           sequential_update(|elem| self.insert(elem), sparse.iter().cloned())
         .                       }
         .                       HybridBitSet::Dense(dense) => self.union(dense),
         .                   }
         .               }
         .           
         .               fn subtract(&mut self, other: &HybridBitSet<T>) -> bool {
 1,043,616 ( 0.01%)          assert_eq!(self.domain_size, other.domain_size());
   521,808 ( 0.00%)          match other {
         .                       HybridBitSet::Sparse(sparse) => {
         .                           sequential_update(|elem| self.remove(elem), sparse.iter().cloned())
         .                       }
         .                       HybridBitSet::Dense(dense) => self.subtract(dense),
         .                   }
         .               }
         .           
         .               fn intersect(&mut self, other: &HybridBitSet<T>) -> bool {
-- line 440 ----------------------------------------
-- line 455 ----------------------------------------
         .                       HybridBitSet::Dense(dense) => self.intersect(dense),
         .                   }
         .               }
         .           }
         .           
         .           // hybrid REL hybrid
         .           impl<T: Idx> BitRelations<HybridBitSet<T>> for HybridBitSet<T> {
         .               fn union(&mut self, other: &HybridBitSet<T>) -> bool {
    57,906 ( 0.00%)          assert_eq!(self.domain_size(), other.domain_size());
    19,302 ( 0.00%)          match self {
         .                       HybridBitSet::Sparse(_) => {
    19,302 ( 0.00%)                  match other {
         .                               HybridBitSet::Sparse(other_sparse) => {
         .                                   // Both sets are sparse. Add the elements in
         .                                   // `other_sparse` to `self` one at a time. This
         .                                   // may or may not cause `self` to be densified.
         .                                   let mut changed = false;
         .                                   for elem in other_sparse.iter() {
    58,482 ( 0.00%)                              changed |= self.insert(*elem);
         .                                   }
         .                                   changed
         .                               }
         .           
         .                               HybridBitSet::Dense(other_dense) => self.union(other_dense),
         .                           }
         .                       }
         .           
-- line 481 ----------------------------------------
-- line 508 ----------------------------------------
         .                           HybridBitSet::Dense(other_dense) => self_dense.intersect(other_dense),
         .                       },
         .                   }
         .               }
         .           }
         .           
         .           impl<T> Clone for BitSet<T> {
         .               fn clone(&self) -> Self {
   250,184 ( 0.00%)          BitSet { domain_size: self.domain_size, words: self.words.clone(), marker: PhantomData }
         .               }
         .           
 3,440,486 ( 0.02%)      fn clone_from(&mut self, from: &Self) {
 2,105,340 ( 0.01%)          if self.domain_size != from.domain_size {
         .                       self.words.resize(from.domain_size, 0);
         .                       self.domain_size = from.domain_size;
         .                   }
         .           
         .                   self.words.copy_from_slice(&from.words);
         .               }
         .           }
         .           
-- line 528 ----------------------------------------
-- line 599 ----------------------------------------
         .                   }
         .               }
         .           }
         .           
         .           impl<'a, T: Idx> Iterator for BitIter<'a, T> {
         .               type Item = T;
         .               fn next(&mut self) -> Option<T> {
         .                   loop {
 2,835,952 ( 0.01%)              if self.word != 0 {
         .                           // Get the position of the next set bit in the current word,
         .                           // then clear the bit.
         .                           let bit_pos = self.word.trailing_zeros() as usize;
         .                           let bit = 1 << bit_pos;
         .                           self.word ^= bit;
 2,081,034 ( 0.01%)                  return Some(T::new(bit_pos + self.offset));
         .                       }
         .           
         .                       // Move onto the next word. `wrapping_add()` is needed to handle
         .                       // the degenerate initial value given to `offset` in `new()`.
         .                       let word = self.iter.next()?;
   375,043 ( 0.00%)              self.word = *word;
         .                       self.offset = self.offset.wrapping_add(WORD_BITS);
         .                   }
         .               }
         .           }
         .           
         .           #[inline]
         .           fn bitwise<Op>(out_vec: &mut [Word], in_vec: &[Word], op: Op) -> bool
         .           where
         .               Op: Fn(Word, Word) -> Word,
         .           {
 2,959,920 ( 0.02%)      assert_eq!(out_vec.len(), in_vec.len());
         .               let mut changed = 0;
 1,174,616 ( 0.01%)      for (out_elem, in_elem) in iter::zip(out_vec, in_vec) {
 1,959,600 ( 0.01%)          let old_val = *out_elem;
   345,782 ( 0.00%)          let new_val = op(old_val, *in_elem);
 1,594,830 ( 0.01%)          *out_elem = new_val;
         .                   // This is essentially equivalent to a != with changed being a bool, but
         .                   // in practice this code gets auto-vectorized by the compiler for most
         .                   // operators. Using != here causes us to generate quite poor code as the
         .                   // compiler tries to go back to a boolean on each loop iteration.
 3,855,475 ( 0.02%)          changed |= old_val ^ new_val;
         .               }
    33,610 ( 0.00%)      changed != 0
         .           }
         .           
         .           const SPARSE_MAX: usize = 8;
         .           
         .           /// A fixed-size bitset type with a sparse representation and a maximum of
         .           /// `SPARSE_MAX` elements. The elements are stored as a sorted `ArrayVec` with
         .           /// no duplicates.
         .           ///
         .           /// This type is used by `HybridBitSet`; do not use directly.
         .           #[derive(Clone, Debug)]
         .           pub struct SparseBitSet<T> {
   375,670 ( 0.00%)      domain_size: usize,
         .               elems: ArrayVec<T, SPARSE_MAX>,
         .           }
         .           
         .           impl<T: Idx> SparseBitSet<T> {
         .               fn new_empty(domain_size: usize) -> Self {
         .                   SparseBitSet { domain_size, elems: ArrayVec::new() }
         .               }
         .           
         .               fn len(&self) -> usize {
 1,365,682 ( 0.01%)          self.elems.len()
         .               }
         .           
         .               fn is_empty(&self) -> bool {
         .                   self.elems.len() == 0
         .               }
         .           
         .               fn contains(&self, elem: T) -> bool {
    22,982 ( 0.00%)          assert!(elem.index() < self.domain_size);
         .                   self.elems.contains(&elem)
         .               }
         .           
         .               fn insert(&mut self, elem: T) -> bool {
 1,356,338 ( 0.01%)          assert!(elem.index() < self.domain_size);
   683,357 ( 0.00%)          let changed = if let Some(i) = self.elems.iter().position(|&e| e.index() >= elem.index()) {
   319,676 ( 0.00%)              if self.elems[i] == elem {
         .                           // `elem` is already in the set.
         .                           false
         .                       } else {
         .                           // `elem` is smaller than one or more existing elements.
         .                           self.elems.insert(i, elem);
         .                           true
         .                       }
         .                   } else {
         .                       // `elem` is larger than all existing elements.
         .                       self.elems.push(elem);
         .                       true
         .                   };
 1,356,338 ( 0.01%)          assert!(self.len() <= SPARSE_MAX);
         .                   changed
         .               }
         .           
         .               fn remove(&mut self, elem: T) -> bool {
 1,072,150 ( 0.01%)          assert!(elem.index() < self.domain_size);
         .                   if let Some(i) = self.elems.iter().position(|&e| e == elem) {
   146,611 ( 0.00%)              self.elems.remove(i);
         .                       true
         .                   } else {
         .                       false
         .                   }
         .               }
         .           
         .               fn to_dense(&self) -> BitSet<T> {
         .                   let mut dense = BitSet::new_empty(self.domain_size);
         .                   for elem in self.elems.iter() {
    33,528 ( 0.00%)              dense.insert(*elem);
         .                   }
         .                   dense
         .               }
         .           
         .               fn iter(&self) -> slice::Iter<'_, T> {
   264,726 ( 0.00%)          self.elems.iter()
         .               }
         .           
         .               bit_relations_inherent_impls! {}
         .           }
         .           
         .           impl<T: Idx + Ord> SparseBitSet<T> {
         .               fn last_set_in(&self, range: impl RangeBounds<T>) -> Option<T> {
         .                   let mut last_leq = None;
-- line 723 ----------------------------------------
-- line 738 ----------------------------------------
         .           /// number of elements, but a large `domain_size`, and are cleared frequently.
         .           ///
         .           /// `T` is an index type, typically a newtyped `usize` wrapper, but it can also
         .           /// just be `usize`.
         .           ///
         .           /// All operations that involve an element will panic if the element is equal
         .           /// to or greater than the domain size. All operations that involve two bitsets
         .           /// will panic if the bitsets have differing domain sizes.
 3,413,118 ( 0.02%)  #[derive(Clone)]
         .           pub enum HybridBitSet<T> {
         .               Sparse(SparseBitSet<T>),
         .               Dense(BitSet<T>),
         .           }
         .           
         .           impl<T: Idx> fmt::Debug for HybridBitSet<T> {
         .               fn fmt(&self, w: &mut fmt::Formatter<'_>) -> fmt::Result {
         .                   match self {
-- line 754 ----------------------------------------
-- line 767 ----------------------------------------
         .                   match self {
         .                       HybridBitSet::Sparse(sparse) => sparse.domain_size,
         .                       HybridBitSet::Dense(dense) => dense.domain_size,
         .                   }
         .               }
         .           
         .               pub fn clear(&mut self) {
         .                   let domain_size = self.domain_size();
    76,384 ( 0.00%)          *self = HybridBitSet::new_empty(domain_size);
         .               }
         .           
         .               pub fn contains(&self, elem: T) -> bool {
    17,932 ( 0.00%)          match self {
         .                       HybridBitSet::Sparse(sparse) => sparse.contains(elem),
         .                       HybridBitSet::Dense(dense) => dense.contains(elem),
         .                   }
         .               }
         .           
         .               pub fn superset(&self, other: &HybridBitSet<T>) -> bool {
         .                   match (self, other) {
         .                       (HybridBitSet::Dense(self_dense), HybridBitSet::Dense(other_dense)) => {
-- line 787 ----------------------------------------
-- line 799 ----------------------------------------
         .                       HybridBitSet::Sparse(sparse) => sparse.is_empty(),
         .                       HybridBitSet::Dense(dense) => dense.is_empty(),
         .                   }
         .               }
         .           
         .               /// Returns the previous element present in the bitset from `elem`,
         .               /// inclusively of elem. That is, will return `Some(elem)` if elem is in the
         .               /// bitset.
   264,726 ( 0.00%)      pub fn last_set_in(&self, range: impl RangeBounds<T>) -> Option<T>
         .               where
         .                   T: Ord,
         .               {
   264,726 ( 0.00%)          match self {
         .                       HybridBitSet::Sparse(sparse) => sparse.last_set_in(range),
         .                       HybridBitSet::Dense(dense) => dense.last_set_in(range),
         .                   }
   397,089 ( 0.00%)      }
         .           
 6,203,934 ( 0.03%)      pub fn insert(&mut self, elem: T) -> bool {
         .                   // No need to check `elem` against `self.domain_size` here because all
         .                   // the match cases check it, one way or another.
 1,378,652 ( 0.01%)          match self {
 1,365,682 ( 0.01%)              HybridBitSet::Sparse(sparse) if sparse.len() < SPARSE_MAX => {
         .                           // The set is sparse and has space for `elem`.
         .                           sparse.insert(elem)
         .                       }
         .                       HybridBitSet::Sparse(sparse) if sparse.contains(elem) => {
         .                           // The set is sparse and does not have space for `elem`, but
         .                           // that doesn't matter because `elem` is already present.
         .                           false
         .                       }
         .                       HybridBitSet::Sparse(sparse) => {
         .                           // The set is sparse and full. Convert to a dense set.
         .                           let mut dense = sparse.to_dense();
         .                           let changed = dense.insert(elem);
     4,191 ( 0.00%)                  assert!(changed);
    25,146 ( 0.00%)                  *self = HybridBitSet::Dense(dense);
         .                           changed
         .                       }
         .                       HybridBitSet::Dense(dense) => dense.insert(elem),
         .                   }
 5,514,608 ( 0.03%)      }
         .           
         .               pub fn insert_range(&mut self, elems: impl RangeBounds<T>) {
         .                   // No need to check `elem` against `self.domain_size` here because all
         .                   // the match cases check it, one way or another.
         .                   let start = match elems.start_bound().cloned() {
         .                       Bound::Included(start) => start.index(),
         .                       Bound::Excluded(start) => start.index() + 1,
         .                       Bound::Unbounded => 0,
-- line 848 ----------------------------------------
-- line 879 ----------------------------------------
         .                   match self {
         .                       HybridBitSet::Sparse(_) => {
         .                           *self = HybridBitSet::Dense(BitSet::new_filled(domain_size));
         .                       }
         .                       HybridBitSet::Dense(dense) => dense.insert_all(),
         .                   }
         .               }
         .           
   533,587 ( 0.00%)      pub fn remove(&mut self, elem: T) -> bool {
         .                   // Note: we currently don't bother going from Dense back to Sparse.
 1,080,108 ( 0.01%)          match self {
         .                       HybridBitSet::Sparse(sparse) => sparse.remove(elem),
         .                       HybridBitSet::Dense(dense) => dense.remove(elem),
         .                   }
 1,067,174 ( 0.01%)      }
         .           
         .               /// Converts to a dense set, consuming itself in the process.
         .               pub fn to_dense(self) -> BitSet<T> {
         .                   match self {
         .                       HybridBitSet::Sparse(sparse) => sparse.to_dense(),
         .                       HybridBitSet::Dense(dense) => dense,
         .                   }
         .               }
         .           
         .               pub fn iter(&self) -> HybridIter<'_, T> {
    32,640 ( 0.00%)          match self {
    58,380 ( 0.00%)              HybridBitSet::Sparse(sparse) => HybridIter::Sparse(sparse.iter()),
         .                       HybridBitSet::Dense(dense) => HybridIter::Dense(dense.iter()),
         .                   }
         .               }
         .           
         .               bit_relations_inherent_impls! {}
         .           }
         .           
         .           pub enum HybridIter<'a, T: Idx> {
-- line 913 ----------------------------------------
-- line 935 ----------------------------------------
         .           /// to or greater than the domain size.
         .           #[derive(Clone, Debug, PartialEq)]
         .           pub struct GrowableBitSet<T: Idx> {
         .               bit_set: BitSet<T>,
         .           }
         .           
         .           impl<T: Idx> GrowableBitSet<T> {
         .               /// Ensure that the set can hold at least `min_domain_size` elements.
   940,898 ( 0.00%)      pub fn ensure(&mut self, min_domain_size: usize) {
   268,828 ( 0.00%)          if self.bit_set.domain_size < min_domain_size {
       455 ( 0.00%)              self.bit_set.domain_size = min_domain_size;
         .                   }
         .           
         .                   let min_num_words = num_words(min_domain_size);
   537,656 ( 0.00%)          if self.bit_set.words.len() < min_num_words {
         .                       self.bit_set.words.resize(min_num_words, 0)
         .                   }
   806,484 ( 0.00%)      }
         .           
         .               pub fn new_empty() -> GrowableBitSet<T> {
    16,188 ( 0.00%)          GrowableBitSet { bit_set: BitSet::new_empty(0) }
         .               }
         .           
         .               pub fn with_capacity(capacity: usize) -> GrowableBitSet<T> {
         4 ( 0.00%)          GrowableBitSet { bit_set: BitSet::new_empty(capacity) }
         .               }
         .           
         .               /// Returns `true` if the set has changed.
         .               #[inline]
         .               pub fn insert(&mut self, elem: T) -> bool {
   669,795 ( 0.00%)          self.ensure(elem.index() + 1);
         .                   self.bit_set.insert(elem)
         .               }
         .           
         .               /// Returns `true` if the set has changed.
         .               #[inline]
         .               pub fn remove(&mut self, elem: T) -> bool {
     1,365 ( 0.00%)          self.ensure(elem.index() + 1);
         .                   self.bit_set.remove(elem)
         .               }
         .           
         .               #[inline]
         .               pub fn is_empty(&self) -> bool {
         .                   self.bit_set.is_empty()
         .               }
         .           
         .               #[inline]
         .               pub fn contains(&self, elem: T) -> bool {
         .                   let (word_index, mask) = word_index_and_mask(elem);
     1,145 ( 0.00%)          self.bit_set.words.get(word_index).map_or(false, |word| (word & mask) != 0)
         .               }
         .           }
         .           
         .           /// A fixed-size 2D bit matrix type with a dense representation.
         .           ///
         .           /// `R` and `C` are index types used to identify rows and columns respectively;
         .           /// typically newtyped `usize` wrappers, but they can also just be `usize`.
         .           ///
         .           /// All operations that involve a row and/or column index will panic if the
         .           /// index exceeds the relevant bound.
     1,358 ( 0.00%)  #[derive(Clone, Eq, PartialEq, Hash, Decodable, Encodable)]
         .           pub struct BitMatrix<R: Idx, C: Idx> {
         .               num_rows: usize,
         .               num_columns: usize,
         .               words: Vec<Word>,
         .               marker: PhantomData<(R, C)>,
         .           }
         .           
         .           impl<R: Idx, C: Idx> BitMatrix<R, C> {
         .               /// Creates a new `rows x columns` matrix, initially empty.
         .               pub fn new(num_rows: usize, num_columns: usize) -> BitMatrix<R, C> {
         .                   // For every element, we need one bit for every other
         .                   // element. Round up to an even number of words.
         .                   let words_per_row = num_words(num_columns);
    30,497 ( 0.00%)          BitMatrix {
         .                       num_rows,
         .                       num_columns,
    19,935 ( 0.00%)              words: vec![0; num_rows * words_per_row],
         .                       marker: PhantomData,
         .                   }
         .               }
         .           
         .               /// Creates a new matrix, with `row` used as the value for every row.
         .               pub fn from_row_n(row: &BitSet<C>, num_rows: usize) -> BitMatrix<R, C> {
         .                   let num_columns = row.domain_size();
        97 ( 0.00%)          let words_per_row = num_words(num_columns);
       291 ( 0.00%)          assert_eq!(words_per_row, row.words().len());
       388 ( 0.00%)          BitMatrix {
         .                       num_rows,
         .                       num_columns,
         .                       words: iter::repeat(row.words()).take(num_rows).flatten().cloned().collect(),
         .                       marker: PhantomData,
         .                   }
         .               }
         .           
         .               pub fn rows(&self) -> impl Iterator<Item = R> {
         .                   (0..self.num_rows).map(R::new)
         .               }
         .           
         .               /// The range of bits for a given row.
         .               fn range(&self, row: R) -> (usize, usize) {
         .                   let words_per_row = num_words(self.num_columns);
 1,346,631 ( 0.01%)          let start = row.index() * words_per_row;
 1,268,836 ( 0.01%)          (start, start + words_per_row)
         .               }
         .           
         .               /// Sets the cell at `(row, column)` to true. Put another way, insert
         .               /// `column` to the bitset for `row`.
         .               ///
         .               /// Returns `true` if this changed the matrix.
     5,536 ( 0.00%)      pub fn insert(&mut self, row: R, column: C) -> bool {
   309,156 ( 0.00%)          assert!(row.index() < self.num_rows && column.index() < self.num_columns);
         .                   let (start, _) = self.range(row);
         .                   let (word_index, mask) = word_index_and_mask(column);
         .                   let words = &mut self.words[..];
   311,720 ( 0.00%)          let word = words[start + word_index];
   124,688 ( 0.00%)          let new_word = word | mask;
    62,344 ( 0.00%)          words[start + word_index] = new_word;
   124,688 ( 0.00%)          word != new_word
    11,072 ( 0.00%)      }
         .           
         .               /// Do the bits from `row` contain `column`? Put another way, is
         .               /// the matrix cell at `(row, column)` true?  Put yet another way,
         .               /// if the matrix represents (transitive) reachability, can
         .               /// `row` reach `column`?
    27,045 ( 0.00%)      pub fn contains(&self, row: R, column: C) -> bool {
   135,225 ( 0.00%)          assert!(row.index() < self.num_rows && column.index() < self.num_columns);
         .                   let (start, _) = self.range(row);
         .                   let (word_index, mask) = word_index_and_mask(column);
   135,225 ( 0.00%)          (self.words[start + word_index] & mask) != 0
    54,090 ( 0.00%)      }
         .           
         .               /// Returns those indices that are true in rows `a` and `b`. This
         .               /// is an *O*(*n*) operation where *n* is the number of elements
         .               /// (somewhat independent from the actual size of the
         .               /// intersection, in particular).
         .               pub fn intersect_rows(&self, row1: R, row2: R) -> Vec<C> {
         .                   assert!(row1.index() < self.num_rows && row2.index() < self.num_rows);
         .                   let (row1_start, row1_end) = self.range(row1);
-- line 1073 ----------------------------------------
-- line 1090 ----------------------------------------
         .           
         .               /// Adds the bits from row `read` to the bits from row `write`, and
         .               /// returns `true` if anything changed.
         .               ///
         .               /// This is used when computing transitive reachability because if
         .               /// you have an edge `write -> read`, because in that case
         .               /// `write` can reach everything that `read` can (and
         .               /// potentially more).
    54,244 ( 0.00%)      pub fn union_rows(&mut self, read: R, write: R) -> bool {
   284,040 ( 0.00%)          assert!(read.index() < self.num_rows && write.index() < self.num_rows);
    56,808 ( 0.00%)          let (read_start, read_end) = self.range(read);
         .                   let (write_start, write_end) = self.range(write);
         .                   let words = &mut self.words[..];
         .                   let mut changed = false;
         .                   for (read_index, write_index) in iter::zip(read_start..read_end, write_start..write_end) {
   304,552 ( 0.00%)              let word = words[write_index];
   170,424 ( 0.00%)              let new_word = word | words[read_index];
    56,808 ( 0.00%)              words[write_index] = new_word;
   286,604 ( 0.00%)              changed |= word != new_word;
         .                   }
         .                   changed
   162,732 ( 0.00%)      }
         .           
         .               /// Adds the bits from `with` to the bits from row `write`, and
         .               /// returns `true` if anything changed.
   804,980 ( 0.00%)      pub fn union_row_with(&mut self, with: &BitSet<C>, write: R) -> bool {
   804,980 ( 0.00%)          assert!(write.index() < self.num_rows);
 1,207,470 ( 0.01%)          assert_eq!(with.domain_size(), self.num_columns);
         .                   let (write_start, write_end) = self.range(write);
         .                   let mut changed = false;
         .                   for (read_index, write_index) in iter::zip(0..with.words().len(), write_start..write_end) {
         .                       let word = self.words[write_index];
 2,410,140 ( 0.01%)              let new_word = word | with.words()[read_index];
 1,205,070 ( 0.01%)              self.words[write_index] = new_word;
 6,025,350 ( 0.03%)              changed |= word != new_word;
         .                   }
         .                   changed
 1,609,960 ( 0.01%)      }
         .           
         .               /// Sets every cell in `row` to true.
       346 ( 0.00%)      pub fn insert_all_into_row(&mut self, row: R) {
       692 ( 0.00%)          assert!(row.index() < self.num_rows);
       346 ( 0.00%)          let (start, end) = self.range(row);
         .                   let words = &mut self.words[..];
         .                   for index in start..end {
     1,038 ( 0.00%)              words[index] = !0;
         .                   }
         .                   self.clear_excess_bits(row);
       692 ( 0.00%)      }
         .           
         .               /// Clear excess bits in the final word of the row.
         .               fn clear_excess_bits(&mut self, row: R) {
         .                   let num_bits_in_final_word = self.num_columns % WORD_BITS;
       692 ( 0.00%)          if num_bits_in_final_word > 0 {
       346 ( 0.00%)              let mask = (1 << num_bits_in_final_word) - 1;
         .                       let (_, end) = self.range(row);
       692 ( 0.00%)              let final_word_idx = end - 1;
       346 ( 0.00%)              self.words[final_word_idx] &= mask;
         .                   }
         .               }
         .           
         .               /// Gets a slice of the underlying words.
         .               pub fn words(&self) -> &[Word] {
         .                   &self.words
         .               }
         .           
-- line 1155 ----------------------------------------
-- line 1209 ----------------------------------------
         .               /// Creates a new empty sparse bit matrix with no rows or columns.
         .               pub fn new(num_columns: usize) -> Self {
         .                   Self { num_columns, rows: IndexVec::new() }
         .               }
         .           
         .               fn ensure_row(&mut self, row: R) -> &mut HybridBitSet<C> {
         .                   // Instantiate any missing rows up to and including row `row` with an empty HybridBitSet.
         .                   // Then replace row `row` with a full HybridBitSet if necessary.
    28,269 ( 0.00%)          self.rows.get_or_insert_with(row, || HybridBitSet::new_empty(self.num_columns))
         .               }
         .           
         .               /// Sets the cell at `(row, column)` to true. Put another way, insert
         .               /// `column` to the bitset for `row`.
         .               ///
         .               /// Returns `true` if this changed the matrix.
         .               pub fn insert(&mut self, row: R, column: C) -> bool {
    48,806 ( 0.00%)          self.ensure_row(row).insert(column)
         .               }
         .           
         .               /// Sets the cell at `(row, column)` to false. Put another way, delete
         .               /// `column` from the bitset for `row`. Has no effect if `row` does not
         .               /// exist.
         .               ///
         .               /// Returns `true` if this changed the matrix.
         .               pub fn remove(&mut self, row: R, column: C) -> bool {
-- line 1233 ----------------------------------------
-- line 1255 ----------------------------------------
         .           
         .               /// Adds the bits from row `read` to the bits from row `write`, and
         .               /// returns `true` if anything changed.
         .               ///
         .               /// This is used when computing transitive reachability because if
         .               /// you have an edge `write -> read`, because in that case
         .               /// `write` can reach everything that `read` can (and
         .               /// potentially more).
 2,854,544 ( 0.01%)      pub fn union_rows(&mut self, read: R, write: R) -> bool {
   407,792 ( 0.00%)          if read == write || self.row(read).is_none() {
         .                       return false;
         .                   }
         .           
         .                   self.ensure_row(write);
   106,161 ( 0.00%)          if let (Some(read_row), Some(write_row)) = self.rows.pick2_mut(read, write) {
         .                       write_row.union(read_row)
         .                   } else {
         .                       unreachable!()
         .                   }
 3,670,128 ( 0.02%)      }
         .           
         .               /// Insert all bits in the given row.
         .               pub fn insert_all_into_row(&mut self, row: R) {
         .                   self.ensure_row(row).insert_all();
         .               }
         .           
         .               pub fn rows(&self) -> impl Iterator<Item = R> {
         .                   self.rows.indices()
-- line 1282 ----------------------------------------
-- line 1284 ----------------------------------------
         .           
         .               /// Iterates through all the columns set to true in a given row of
         .               /// the matrix.
         .               pub fn iter<'a>(&'a self, row: R) -> impl Iterator<Item = C> + 'a {
         .                   self.row(row).into_iter().flat_map(|r| r.iter())
         .               }
         .           
         .               pub fn row(&self, row: R) -> Option<&HybridBitSet<C>> {
   934,975 ( 0.00%)          if let Some(Some(row)) = self.rows.get(row) { Some(row) } else { None }
         .               }
         .           
         .               /// Interescts `row` with `set`. `set` can be either `BitSet` or
         .               /// `HybridBitSet`. Has no effect if `row` does not exist.
         .               ///
         .               /// Returns true if the row was changed.
         .               pub fn intersect_row<Set>(&mut self, row: R, set: &Set) -> bool
         .               where
-- line 1300 ----------------------------------------
-- line 1329 ----------------------------------------
         .                   HybridBitSet<C>: BitRelations<Set>,
         .               {
         .                   self.ensure_row(row).union(set)
         .               }
         .           }
         .           
         .           #[inline]
         .           fn num_words<T: Idx>(domain_size: T) -> usize {
 3,675,056 ( 0.02%)      (domain_size.index() + WORD_BITS - 1) / WORD_BITS
         .           }
         .           
         .           #[inline]
         .           fn word_index_and_mask<T: Idx>(elem: T) -> (usize, Word) {
         .               let elem = elem.index();
10,874,884 ( 0.06%)      let word_index = elem / WORD_BITS;
 1,917,556 ( 0.01%)      let mask = 1 << (elem % WORD_BITS);
         .               (word_index, mask)
         .           }
         .           
         .           #[inline]
         .           fn max_bit(word: Word) -> usize {
         .               WORD_BITS - 1 - word.leading_zeros() as usize
         .           }
         .           
-- line 1352 ----------------------------------------

17,772,187 ( 0.09%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_index/src/bit_set.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/scoped_cell.rs
--------------------------------------------------------------------------------
Ir                  

-- line 22 ----------------------------------------
         .           impl<'a, 'b, T: LambdaL> Deref for RefMutL<'a, 'b, T> {
         .               type Target = <T as ApplyL<'b>>::Out;
         .               fn deref(&self) -> &Self::Target {
         .                   self.0
         .               }
         .           }
         .           
         .           impl<'a, 'b, T: LambdaL> DerefMut for RefMutL<'a, 'b, T> {
         8 ( 0.00%)      fn deref_mut(&mut self) -> &mut Self::Target {
         4 ( 0.00%)          self.0
         8 ( 0.00%)      }
         .           }
         .           
         .           pub struct ScopedCell<T: LambdaL>(Cell<<T as ApplyL<'static>>::Out>);
         .           
         .           impl<T: LambdaL> ScopedCell<T> {
         .               #[rustc_allow_const_fn_unstable(const_fn)]
         3 ( 0.00%)      pub const fn new(value: <T as ApplyL<'static>>::Out) -> Self {
        10 ( 0.00%)          ScopedCell(Cell::new(value))
         2 ( 0.00%)      }
         .           
         .               /// Sets the value in `self` to `replacement` while
         .               /// running `f`, which gets the old value, mutably.
         .               /// The old value will be restored after `f` exits, even
         .               /// by panic, including modifications made to it by `f`.
13,247,900 ( 0.07%)      pub fn replace<'a, R>(
         .                   &self,
         .                   replacement: <T as ApplyL<'a>>::Out,
         .                   f: impl for<'b, 'c> FnOnce(RefMutL<'b, 'c, T>) -> R,
         .               ) -> R {
         .                   /// Wrapper that ensures that the cell always gets filled
         .                   /// (with the original state, optionally changed by `f`),
         .                   /// even if `f` had panicked.
         .                   struct PutBackOnDrop<'a, T: LambdaL> {
         .                       cell: &'a ScopedCell<T>,
         .                       value: Option<<T as ApplyL<'static>>::Out>,
         .                   }
         .           
         .                   impl<'a, T: LambdaL> Drop for PutBackOnDrop<'a, T> {
        18 ( 0.00%)              fn drop(&mut self) {
 1,781,995 ( 0.01%)                  self.cell.0.set(self.value.take().unwrap());
        12 ( 0.00%)              }
         .                   }
         .           
 3,563,959 ( 0.02%)          let mut put_back_on_drop = PutBackOnDrop {
         .                       cell: self,
        60 ( 0.00%)              value: Some(self.0.replace(unsafe {
        12 ( 0.00%)                  let erased = mem::transmute_copy(&replacement);
        72 ( 0.00%)                  mem::forget(replacement);
        60 ( 0.00%)                  erased
         .                       })),
         .                   };
         .           
   618,584 ( 0.00%)          f(RefMutL(put_back_on_drop.value.as_mut().unwrap()))
17,373,311 ( 0.09%)      }
         .           
         .               /// Sets the value in `self` to `value` while running `f`.
        14 ( 0.00%)      pub fn set<R>(&self, value: <T as ApplyL<'_>>::Out, f: impl FnOnce() -> R) -> R {
        32 ( 0.00%)          self.replace(value, |_| f())
         4 ( 0.00%)      }
         .           }

   422,368 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/scoped_cell.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs
--------------------------------------------------------------------------------
Ir                   

-- line 111 ----------------------------------------
          .           const EMPTY: u8 = 0b1111_1111;
          .           
          .           /// Control byte value for a deleted bucket.
          .           const DELETED: u8 = 0b1000_0000;
          .           
          .           /// Checks whether a control byte represents a full bucket (top bit is clear).
          .           #[inline]
          .           fn is_full(ctrl: u8) -> bool {
 12,006,889 ( 0.06%)      ctrl & 0x80 == 0
          .           }
          .           
          .           /// Checks whether a control byte represents a special value (top bit is set).
          .           #[inline]
          .           fn is_special(ctrl: u8) -> bool {
          .               ctrl & 0x80 != 0
          .           }
          .           
          .           /// Checks whether a special control value is EMPTY (just check 1 bit).
          .           #[inline]
          .           fn special_is_empty(ctrl: u8) -> bool {
          .               debug_assert!(is_special(ctrl));
    841,516 ( 0.00%)      ctrl & 0x01 != 0
          .           }
          .           
          .           /// Primary hash function, used to select the initial bucket to probe from.
          .           #[inline]
          .           #[allow(clippy::cast_possible_truncation)]
          .           fn h1(hash: u64) -> usize {
          .               // On 32-bit platforms we simply ignore the higher hash bits.
          .               hash as usize
-- line 140 ----------------------------------------
-- line 143 ----------------------------------------
          .           /// Secondary hash function, saved in the low 7 bits of the control byte.
          .           #[inline]
          .           #[allow(clippy::cast_possible_truncation)]
          .           fn h2(hash: u64) -> u8 {
          .               // Grab the top 7 bits of the hash. While the hash is normally a full 64-bit
          .               // value, some hash functions (such as FxHash) produce a usize result
          .               // instead, which means that the top 32 bits are 0 on 32-bit platforms.
          .               let hash_len = usize::min(mem::size_of::<usize>(), mem::size_of::<u64>());
294,993,082 ( 1.51%)      let top7 = hash >> (hash_len * 8 - 7);
          .               (top7 & 0x7f) as u8 // truncation
          .           }
          .           
          .           /// Probe sequence based on triangular numbers, which is guaranteed (since our
          .           /// table size is a power of two) to visit every group of elements exactly once.
          .           ///
          .           /// A triangular probe has us jump by 1 more group every time. So first we
          .           /// jump by 1 group (meaning we just continue our linear scan), then 2 groups
-- line 159 ----------------------------------------
-- line 170 ----------------------------------------
          .               #[inline]
          .               fn move_next(&mut self, bucket_mask: usize) {
          .                   // We should have found an empty bucket by now and ended the probe.
          .                   debug_assert!(
          .                       self.stride <= bucket_mask,
          .                       "Went past end of probe sequence"
          .                   );
          .           
  1,568,360 ( 0.01%)          self.stride += Group::WIDTH;
  1,568,360 ( 0.01%)          self.pos += self.stride;
  1,329,147 ( 0.01%)          self.pos &= bucket_mask;
          .               }
          .           }
          .           
          .           /// Returns the number of buckets needed to hold the given number of items,
          .           /// taking the maximum load factor into account.
          .           ///
          .           /// Returns `None` if an overflow occurs.
          .           // Workaround for emscripten bug emscripten-core/emscripten-fastcomp#258
          .           #[cfg_attr(target_os = "emscripten", inline(never))]
          .           #[cfg_attr(not(target_os = "emscripten"), inline)]
          .           fn capacity_to_buckets(cap: usize) -> Option<usize> {
          .               debug_assert_ne!(cap, 0);
          .           
          .               // For small tables we require at least 1 empty bucket so that lookups are
          .               // guaranteed to terminate if an element doesn't exist in the table.
  1,063,144 ( 0.01%)      if cap < 8 {
          .                   // We don't bother with a table size of 2 buckets since that can only
          .                   // hold a single element. Instead we skip directly to a 4 bucket table
          .                   // which can hold 3 elements.
  2,190,545 ( 0.01%)          return Some(if cap < 4 { 4 } else { 8 });
          .               }
          .           
          .               // Otherwise require 1/8 buckets to be empty (87.5% load)
          .               //
          .               // Be careful when modifying this, calculate_layout relies on the
          .               // overflow check here.
    560,778 ( 0.00%)      let adjusted_cap = cap.checked_mul(8)? / 7;
          .           
          .               // Any overflows will have been caught by the checked_mul. Also, any
          .               // rounding errors from the division above will be cleaned up by
          .               // next_power_of_two (which can't overflow because of the previous division).
          .               Some(adjusted_cap.next_power_of_two())
          .           }
          .           
          .           /// Returns the maximum effective capacity for the given bucket mask, taking
          .           /// the maximum load factor into account.
          .           #[inline]
          .           fn bucket_mask_to_capacity(bucket_mask: usize) -> usize {
  2,904,588 ( 0.01%)      if bucket_mask < 8 {
          .                   // For tables with 1/2/4/8 buckets, we always reserve one empty slot.
          .                   // Keep in mind that the bucket mask is one less than the bucket count.
          .                   bucket_mask
          .               } else {
          .                   // For larger tables we reserve 12.5% of the slots as empty.
    725,828 ( 0.00%)          ((bucket_mask + 1) / 8) * 7
          .               }
          .           }
          .           
          .           /// Helper which allows the max calculation for ctrl_align to be statically computed for each T
          .           /// while keeping the rest of `calculate_layout_for` independent of `T`
          .           #[derive(Copy, Clone)]
          .           struct TableLayout {
          .               size: usize,
-- line 233 ----------------------------------------
-- line 246 ----------------------------------------
          .           
          .               #[inline]
          .               fn calculate_layout_for(self, buckets: usize) -> Option<(Layout, usize)> {
          .                   debug_assert!(buckets.is_power_of_two());
          .           
          .                   let TableLayout { size, ctrl_align } = self;
          .                   // Manual layout calculation since Layout methods are not yet stable.
          .                   let ctrl_offset =
  2,141,835 ( 0.01%)              size.checked_mul(buckets)?.checked_add(ctrl_align - 1)? & !(ctrl_align - 1);
  2,885,671 ( 0.01%)          let len = ctrl_offset.checked_add(buckets + Group::WIDTH)?;
          .           
          .                   Some((
          .                       unsafe { Layout::from_size_align_unchecked(len, ctrl_align) },
          .                       ctrl_offset,
          .                   ))
          .               }
          .           }
          .           
-- line 263 ----------------------------------------
-- line 337 ----------------------------------------
          .                   }
          .               }
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub unsafe fn drop(&self) {
          .                   self.as_ptr().drop_in_place();
          .               }
          .               #[inline]
          .               pub unsafe fn read(&self) -> T {
     24,962 ( 0.00%)          self.as_ptr().read()
          .               }
          .               #[inline]
          .               pub unsafe fn write(&self, val: T) {
          .                   self.as_ptr().write(val);
          .               }
          .               #[inline]
          .               pub unsafe fn as_ref<'a>(&self) -> &'a T {
          .                   &*self.as_ptr()
-- line 353 ----------------------------------------
-- line 422 ----------------------------------------
          .               /// Creates a new empty hash table without allocating any memory, using the
          .               /// given allocator.
          .               ///
          .               /// In effect this returns a table with exactly 1 bucket. However we can
          .               /// leave the data pointer dangling since that bucket is never written to
          .               /// due to our load factor forcing us to always have at least 1 free bucket.
          .               #[inline]
          .               pub fn new_in(alloc: A) -> Self {
      2,775 ( 0.00%)          Self {
          .                       table: RawTableInner::new_in(alloc),
          .                       marker: PhantomData,
          .                   }
          .               }
          .           
          .               /// Allocates a new hash table with the given number of buckets.
          .               ///
          .               /// The control bytes are left uninitialized.
-- line 438 ----------------------------------------
-- line 440 ----------------------------------------
          .               unsafe fn new_uninitialized(
          .                   alloc: A,
          .                   buckets: usize,
          .                   fallibility: Fallibility,
          .               ) -> Result<Self, TryReserveError> {
          .                   debug_assert!(buckets.is_power_of_two());
          .           
          .                   Ok(Self {
      1,145 ( 0.00%)              table: RawTableInner::new_uninitialized(
          .                           alloc,
          .                           TableLayout::new::<T>(),
          .                           buckets,
          .                           fallibility,
          .                       )?,
          .                       marker: PhantomData,
          .                   })
          .               }
-- line 456 ----------------------------------------
-- line 458 ----------------------------------------
          .               /// Attempts to allocate a new hash table with at least enough capacity
          .               /// for inserting the given number of elements without reallocating.
          .               fn fallible_with_capacity(
          .                   alloc: A,
          .                   capacity: usize,
          .                   fallibility: Fallibility,
          .               ) -> Result<Self, TryReserveError> {
          .                   Ok(Self {
     59,977 ( 0.00%)              table: RawTableInner::fallible_with_capacity(
          .                           alloc,
          .                           TableLayout::new::<T>(),
          .                           capacity,
          .                           fallibility,
          .                       )?,
          .                       marker: PhantomData,
          .                   })
          .               }
-- line 474 ----------------------------------------
-- line 527 ----------------------------------------
          .                   debug_assert_ne!(self.table.bucket_mask, 0);
          .                   debug_assert!(index < self.buckets());
          .                   Bucket::from_base_index(self.data_end(), index)
          .               }
          .           
          .               /// Erases an element from the table without dropping it.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               #[deprecated(since = "0.8.1", note = "use erase or remove instead")]
    217,038 ( 0.00%)      pub unsafe fn erase_no_drop(&mut self, item: &Bucket<T>) {
    217,038 ( 0.00%)          let index = self.bucket_index(item);
          .                   self.table.erase(index);
    434,076 ( 0.00%)      }
          .           
          .               /// Erases an element from the table, dropping it in place.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               #[allow(clippy::needless_pass_by_value)]
          .               #[allow(deprecated)]
          .               pub unsafe fn erase(&mut self, item: Bucket<T>) {
          .                   // Erase the element from the table first since drop might panic.
    123,834 ( 0.00%)          self.erase_no_drop(&item);
          .                   item.drop();
          .               }
          .           
          .               /// Finds and erases an element from the table, dropping it in place.
          .               /// Returns true if an element was found.
          .               #[cfg(feature = "raw")]
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub fn erase_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> bool {
-- line 554 ----------------------------------------
-- line 563 ----------------------------------------
          .                   }
          .               }
          .           
          .               /// Removes an element from the table, returning it.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               #[allow(clippy::needless_pass_by_value)]
          .               #[allow(deprecated)]
          .               pub unsafe fn remove(&mut self, item: Bucket<T>) -> T {
    310,242 ( 0.00%)          self.erase_no_drop(&item);
      1,867 ( 0.00%)          item.read()
          .               }
          .           
          .               /// Finds and removes an element from the table, returning it.
          .               #[cfg_attr(feature = "inline-more", inline)]
  4,760,999 ( 0.02%)      pub fn remove_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<T> {
          .                   // Avoid `Option::map` because it bloats LLVM IR.
      5,936 ( 0.00%)          match self.find(hash, eq) {
     73,904 ( 0.00%)              Some(bucket) => Some(unsafe { self.remove(bucket) }),
  1,208,146 ( 0.01%)              None => None,
          .                   }
  6,344,045 ( 0.03%)      }
          .           
          .               /// Marks all table buckets as empty without dropping their contents.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub fn clear_no_drop(&mut self) {
          .                   self.table.clear_no_drop();
          .               }
          .           
          .               /// Removes all elements from the table without freeing the backing memory.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub fn clear(&mut self) {
          .                   // Ensure that the table is reset even if one of the drops panic
          .                   let mut self_ = guard(self, |self_| self_.clear_no_drop());
          .                   unsafe {
          1 ( 0.00%)              self_.drop_elements();
          .                   }
          .               }
          .           
          7 ( 0.00%)      unsafe fn drop_elements(&mut self) {
    106,582 ( 0.00%)          if mem::needs_drop::<T>() && !self.is_empty() {
          .                       for item in self.iter() {
          .                           item.drop();
          .                       }
          .                   }
          8 ( 0.00%)      }
          .           
          .               /// Shrinks the table to fit `max(self.len(), min_size)` elements.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub fn shrink_to(&mut self, min_size: usize, hasher: impl Fn(&T) -> u64) {
          .                   // Calculate the minimal number of elements that we need to reserve
          .                   // space for.
          .                   let min_size = usize::max(self.table.items, min_size);
          .                   if min_size == 0 {
-- line 615 ----------------------------------------
-- line 642 ----------------------------------------
          .                       }
          .                   }
          .               }
          .           
          .               /// Ensures that at least `additional` items can be inserted into the table
          .               /// without reallocation.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub fn reserve(&mut self, additional: usize, hasher: impl Fn(&T) -> u64) {
  2,559,063 ( 0.01%)          if additional > self.table.growth_left {
          .                       // Avoid `Result::unwrap_or_else` because it bloats LLVM IR.
  1,871,934 ( 0.01%)              if self
          .                           .reserve_rehash(additional, hasher, Fallibility::Infallible)
          .                           .is_err()
          .                       {
          .                           unsafe { hint::unreachable_unchecked() }
          .                       }
          .                   }
          .               }
          .           
-- line 660 ----------------------------------------
-- line 671 ----------------------------------------
          .                   } else {
          .                       Ok(())
          .                   }
          .               }
          .           
          .               /// Out-of-line slow path for `reserve` and `try_reserve`.
          .               #[cold]
          .               #[inline(never)]
  4,241,340 ( 0.02%)      fn reserve_rehash(
          .                   &mut self,
          .                   additional: usize,
          .                   hasher: impl Fn(&T) -> u64,
          .                   fallibility: Fallibility,
          .               ) -> Result<(), TryReserveError> {
          .                   unsafe {
          .                       self.table.reserve_rehash_inner(
          .                           additional,
-- line 687 ----------------------------------------
-- line 690 ----------------------------------------
          .                           TableLayout::new::<T>(),
          .                           if mem::needs_drop::<T>() {
          .                               Some(mem::transmute(ptr::drop_in_place::<T> as unsafe fn(*mut T)))
          .                           } else {
          .                               None
          .                           },
          .                       )
          .                   }
  2,874,944 ( 0.01%)      }
          .           
          .               /// Allocates a new table of a different size and moves the contents of the
          .               /// current table into it.
          .               fn resize(
          .                   &mut self,
          .                   capacity: usize,
          .                   hasher: impl Fn(&T) -> u64,
          .                   fallibility: Fallibility,
-- line 706 ----------------------------------------
-- line 714 ----------------------------------------
          .                       )
          .                   }
          .               }
          .           
          .               /// Inserts a new element into the table, and returns its raw bucket.
          .               ///
          .               /// This does not check if the given element already exists in the table.
          .               #[cfg_attr(feature = "inline-more", inline)]
 16,902,072 ( 0.09%)      pub fn insert(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> Bucket<T> {
          .                   unsafe {
          .                       let mut index = self.table.find_insert_slot(hash);
          .           
          .                       // We can avoid growing the table once we have reached our load
          .                       // factor if we are replacing a tombstone. This works since the
          .                       // number of EMPTY slots does not change in this case.
     51,260 ( 0.00%)              let old_ctrl = *self.table.ctrl(index);
 11,739,561 ( 0.06%)              if unlikely(self.table.growth_left == 0 && special_is_empty(old_ctrl)) {
          .                           self.reserve(1, hasher);
          .                           index = self.table.find_insert_slot(hash);
          .                       }
          .           
          .                       self.table.record_item_insert_at(index, old_ctrl, hash);
          .           
          .                       let bucket = self.bucket(index);
          2 ( 0.00%)              bucket.write(value);
          .                       bucket
          .                   }
 12,513,981 ( 0.06%)      }
          .           
          .               /// Attempts to insert a new element without growing the table and return its raw bucket.
          .               ///
          .               /// Returns an `Err` containing the given element if inserting it would require growing the
          .               /// table.
          .               ///
          .               /// This does not check if the given element already exists in the table.
          .               #[cfg(feature = "raw")]
-- line 749 ----------------------------------------
-- line 760 ----------------------------------------
          .                       }
          .                   }
          .               }
          .           
          .               /// Inserts a new element into the table, and returns a mutable reference to it.
          .               ///
          .               /// This does not check if the given element already exists in the table.
          .               #[cfg_attr(feature = "inline-more", inline)]
  3,240,840 ( 0.02%)      pub fn insert_entry(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> &mut T {
      2,190 ( 0.00%)          unsafe { self.insert(hash, value, hasher).as_mut() }
  2,430,630 ( 0.01%)      }
          .           
          .               /// Inserts a new element into the table, without growing the table.
          .               ///
          .               /// There must be enough space in the table to insert the new element.
          .               ///
          .               /// This does not check if the given element already exists in the table.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               #[cfg(any(feature = "raw", feature = "rustc-internal-api"))]
     48,386 ( 0.00%)      pub unsafe fn insert_no_grow(&mut self, hash: u64, value: T) -> Bucket<T> {
  2,164,686 ( 0.01%)          let (index, old_ctrl) = self.table.prepare_insert_slot(hash);
     81,315 ( 0.00%)          let bucket = self.table.bucket(index);
          .           
          .                   // If we are replacing a DELETED entry then we don't need to update
          .                   // the load counter.
  4,734,575 ( 0.02%)          self.table.growth_left -= special_is_empty(old_ctrl) as usize;
          .           
          .                   bucket.write(value);
  3,767,662 ( 0.02%)          self.table.items += 1;
          .                   bucket
     96,615 ( 0.00%)      }
          .           
          .               /// Temporary removes a bucket, applying the given function to the removed
          .               /// element and optionally put back the returned value in the same bucket.
          .               ///
          .               /// Returns `true` if the bucket still contains an element
          .               ///
          .               /// This does not check if the given bucket is actually occupied.
          .               #[cfg_attr(feature = "inline-more", inline)]
-- line 798 ----------------------------------------
-- line 813 ----------------------------------------
          .                       true
          .                   } else {
          .                       false
          .                   }
          .               }
          .           
          .               /// Searches for an element in the table.
          .               #[inline]
     56,042 ( 0.00%)      pub fn find(&self, hash: u64, mut eq: impl FnMut(&T) -> bool) -> Option<Bucket<T>> {
     43,868 ( 0.00%)          let result = self.table.find_inner(hash, &mut |index| unsafe {
    219,902 ( 0.00%)              eq(self.bucket(index).as_ref())
     14,923 ( 0.00%)          });
          .           
          .                   // Avoid `Option::map` because it bloats LLVM IR.
          .                   match result {
      4,590 ( 0.00%)              Some(index) => Some(unsafe { self.bucket(index) }),
          .                       None => None,
          .                   }
     64,636 ( 0.00%)      }
          .           
          .               /// Gets a reference to an element in the table.
          .               #[inline]
          .               pub fn get(&self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&T> {
          .                   // Avoid `Option::map` because it bloats LLVM IR.
    186,444 ( 0.00%)          match self.find(hash, eq) {
          .                       Some(bucket) => Some(unsafe { bucket.as_ref() }),
          .                       None => None,
          .                   }
          .               }
          .           
          .               /// Gets a mutable reference to an element in the table.
          .               #[inline]
     22,878 ( 0.00%)      pub fn get_mut(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&mut T> {
          .                   // Avoid `Option::map` because it bloats LLVM IR.
     29,207 ( 0.00%)          match self.find(hash, eq) {
          .                       Some(bucket) => Some(unsafe { bucket.as_mut() }),
          .                       None => None,
          .                   }
     30,504 ( 0.00%)      }
          .           
          .               /// Attempts to get mutable references to `N` entries in the table at once.
          .               ///
          .               /// Returns an array of length `N` with the results of each query.
          .               ///
          .               /// At most one mutable reference will be returned to any entry. `None` will be returned if any
          .               /// of the hashes are duplicates. `None` will be returned if the hash is not found.
          .               ///
-- line 859 ----------------------------------------
-- line 920 ----------------------------------------
          .               #[inline]
          .               pub fn len(&self) -> usize {
          .                   self.table.items
          .               }
          .           
          .               /// Returns `true` if the table contains no elements.
          .               #[inline]
          .               pub fn is_empty(&self) -> bool {
  7,834,378 ( 0.04%)          self.len() == 0
          .               }
          .           
          .               /// Returns the number of buckets in the table.
          .               #[inline]
          .               pub fn buckets(&self) -> usize {
          .                   self.table.bucket_mask + 1
          .               }
          .           
-- line 936 ----------------------------------------
-- line 938 ----------------------------------------
          .               /// the caller to ensure that the `RawTable` outlives the `RawIter`.
          .               /// Because we cannot make the `next` method unsafe on the `RawIter`
          .               /// struct, we have to make the `iter` method unsafe.
          .               #[inline]
          .               pub unsafe fn iter(&self) -> RawIter<T> {
          .                   let data = Bucket::from_base_index(self.data_end(), 0);
          .                   RawIter {
          .                       iter: RawIterRange::new(self.table.ctrl.as_ptr(), data, self.table.buckets()),
    938,844 ( 0.00%)              items: self.table.items,
          .                   }
          .               }
          .           
          .               /// Returns an iterator over occupied buckets that could match a given hash.
          .               ///
          .               /// `RawTable` only stores 7 bits of the hash value, so this iterator may
          .               /// return items that have a hash value different than the one provided. You
          .               /// should always validate the returned values before using them.
-- line 954 ----------------------------------------
-- line 995 ----------------------------------------
          .               /// Iteration starts at the provided iterator's current location.
          .               ///
          .               /// It is up to the caller to ensure that the iterator is valid for this
          .               /// `RawTable` and covers all items that remain in the table.
          .               pub unsafe fn into_iter_from(self, iter: RawIter<T>) -> RawIntoIter<T, A> {
          .                   debug_assert_eq!(iter.len(), self.len());
          .           
          .                   let alloc = self.table.alloc.clone();
     55,520 ( 0.00%)          let allocation = self.into_allocation();
     41,640 ( 0.00%)          RawIntoIter {
     69,400 ( 0.00%)              iter,
          .                       allocation,
          .                       marker: PhantomData,
          .                       alloc,
          .                   }
          .               }
          .           
          .               /// Converts the table into a raw allocation. The contents of the table
          .               /// should be dropped using a `RawIter` before freeing the allocation.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub(crate) fn into_allocation(self) -> Option<(NonNull<u8>, Layout)> {
     27,363 ( 0.00%)          let alloc = if self.table.is_empty_singleton() {
          .                       None
          .                   } else {
          .                       // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
          .                       let (layout, ctrl_offset) = match calculate_layout::<T>(self.table.buckets()) {
          .                           Some(lco) => lco,
          .                           None => unsafe { hint::unreachable_unchecked() },
          .                       };
          .                       Some((
      4,715 ( 0.00%)                  unsafe { NonNull::new_unchecked(self.table.ctrl.as_ptr().sub(ctrl_offset)) },
          .                           layout,
          .                       ))
          .                   };
          .                   mem::forget(self);
          .                   alloc
          .               }
          .           }
          .           
-- line 1033 ----------------------------------------
-- line 1042 ----------------------------------------
          .               T: Sync,
          .               A: Sync,
          .           {
          .           }
          .           
          .           impl<A> RawTableInner<A> {
          .               #[inline]
          .               const fn new_in(alloc: A) -> Self {
  5,822,646 ( 0.03%)          Self {
          .                       // Be careful to cast the entire slice to a raw pointer.
          .                       ctrl: unsafe { NonNull::new_unchecked(Group::static_empty() as *const _ as *mut u8) },
          .                       bucket_mask: 0,
          .                       items: 0,
          .                       growth_left: 0,
          .                       alloc,
          .                   }
          .               }
          .           }
          .           
          .           impl<A: Allocator + Clone> RawTableInner<A> {
          .               #[cfg_attr(feature = "inline-more", inline)]
  3,866,152 ( 0.02%)      unsafe fn new_uninitialized(
          .                   alloc: A,
          .                   table_layout: TableLayout,
          .                   buckets: usize,
          .                   fallibility: Fallibility,
          .               ) -> Result<Self, TryReserveError> {
          .                   debug_assert!(buckets.is_power_of_two());
          .           
          .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
-- line 1071 ----------------------------------------
-- line 1078 ----------------------------------------
          .                   // exceed `isize::MAX`. We can skip this check on 64-bit systems since
          .                   // such allocations will never succeed anyways.
          .                   //
          .                   // This mirrors what Vec does in the standard library.
          .                   if mem::size_of::<usize>() < 8 && layout.size() > isize::MAX as usize {
          .                       return Err(fallibility.capacity_overflow());
          .                   }
          .           
    883,274 ( 0.00%)          let ptr: NonNull<u8> = match do_alloc(&alloc, layout) {
          .                       Ok(block) => block.cast(),
          .                       Err(_) => return Err(fallibility.alloc_err(layout)),
          .                   };
          .           
          .                   let ctrl = NonNull::new_unchecked(ptr.as_ptr().add(ctrl_offset));
  2,122,122 ( 0.01%)          Ok(Self {
          .                       ctrl,
    885,488 ( 0.00%)              bucket_mask: buckets - 1,
          .                       items: 0,
          .                       growth_left: bucket_mask_to_capacity(buckets - 1),
          .                       alloc,
          .                   })
  2,813,226 ( 0.01%)      }
          .           
          .               #[inline]
    196,623 ( 0.00%)      fn fallible_with_capacity(
          .                   alloc: A,
          .                   table_layout: TableLayout,
          .                   capacity: usize,
          .                   fallibility: Fallibility,
          .               ) -> Result<Self, TryReserveError> {
     51,090 ( 0.00%)          if capacity == 0 {
     24,958 ( 0.00%)              Ok(Self::new_in(alloc))
          .                   } else {
          .                       unsafe {
          .                           let buckets =
          .                               capacity_to_buckets(capacity).ok_or_else(|| fallibility.capacity_overflow())?;
          .           
  1,746,356 ( 0.01%)                  let result = Self::new_uninitialized(alloc, table_layout, buckets, fallibility)?;
          .                           result.ctrl(0).write_bytes(EMPTY, result.num_ctrl_bytes());
          .           
    120,245 ( 0.00%)                  Ok(result)
          .                       }
          .                   }
    196,623 ( 0.00%)      }
          .           
          .               /// Searches for an empty or deleted bucket which is suitable for inserting
          .               /// a new element and sets the hash for that slot.
          .               ///
          .               /// There must be at least 1 empty bucket in the table.
          .               #[inline]
    793,249 ( 0.00%)      unsafe fn prepare_insert_slot(&self, hash: u64) -> (usize, u8) {
          .                   let index = self.find_insert_slot(hash);
    793,249 ( 0.00%)          let old_ctrl = *self.ctrl(index);
          .                   self.set_ctrl_h2(index, hash);
          .                   (index, old_ctrl)
  1,586,498 ( 0.01%)      }
          .           
          .               /// Searches for an empty or deleted bucket which is suitable for inserting
          .               /// a new element.
          .               ///
          .               /// There must be at least 1 empty bucket in the table.
          .               #[inline]
          .               fn find_insert_slot(&self, hash: u64) -> usize {
          .                   let mut probe_seq = self.probe_seq(hash);
          .                   loop {
          .                       unsafe {
          .                           let group = Group::load(self.ctrl(probe_seq.pos));
  7,802,731 ( 0.04%)                  if let Some(bit) = group.match_empty_or_deleted().lowest_set_bit() {
 22,857,312 ( 0.12%)                      let result = (probe_seq.pos + bit) & self.bucket_mask;
          .           
          .                               // In tables smaller than the group width, trailing control
          .                               // bytes outside the range of the table are filled with
          .                               // EMPTY entries. These will unfortunately trigger a
          .                               // match, but once masked may point to a full bucket that
          .                               // is already occupied. We detect this situation here and
          .                               // perform a second scan starting at the beginning of the
          .                               // table. This second scan is guaranteed to find an empty
          .                               // slot (due to the load factor) before hitting the trailing
          .                               // control bytes (containing EMPTY).
 10,547,305 ( 0.05%)                      if unlikely(is_full(*self.ctrl(result))) {
          .                                   debug_assert!(self.bucket_mask < Group::WIDTH);
          .                                   debug_assert_ne!(probe_seq.pos, 0);
          .                                   return Group::load_aligned(self.ctrl(0))
          .                                       .match_empty_or_deleted()
          .                                       .lowest_set_bit_nonzero();
          .                               }
          .           
          .                               return result;
-- line 1165 ----------------------------------------
-- line 1171 ----------------------------------------
          .           
          .               /// Searches for an element in the table. This uses dynamic dispatch to reduce the amount of
          .               /// code generated, but it is eliminated by LLVM optimizations.
          .               #[inline]
          .               fn find_inner(&self, hash: u64, eq: &mut dyn FnMut(usize) -> bool) -> Option<usize> {
          .                   let h2_hash = h2(hash);
          .                   let mut probe_seq = self.probe_seq(hash);
          .           
    905,608 ( 0.00%)          loop {
          .                       let group = unsafe { Group::load(self.ctrl(probe_seq.pos)) };
          .           
 30,442,059 ( 0.16%)              for bit in group.match_byte(h2_hash) {
 60,666,499 ( 0.31%)                  let index = (probe_seq.pos + bit) & self.bucket_mask;
          .           
 37,220,406 ( 0.19%)                  if likely(eq(index)) {
          .                               return Some(index);
          .                           }
          .                       }
          .           
  8,670,378 ( 0.04%)              if likely(group.match_empty().any_bit_set()) {
          .                           return None;
          .                       }
          .           
          .                       probe_seq.move_next(self.bucket_mask);
          .                   }
          .               }
          .           
          .               #[allow(clippy::mut_mut)]
          .               #[inline]
          .               unsafe fn prepare_rehash_in_place(&mut self) {
          .                   // Bulk convert all full control bytes to DELETED, and all DELETED
          .                   // control bytes to EMPTY. This effectively frees up all buckets
          .                   // containing a DELETED entry.
          6 ( 0.00%)          for i in (0..self.buckets()).step_by(Group::WIDTH) {
          .                       let group = Group::load_aligned(self.ctrl(i));
          .                       let group = group.convert_special_to_empty_and_full_to_deleted();
          .                       group.store_aligned(self.ctrl(i));
          .                   }
          .           
          .                   // Fix up the trailing control bytes. See the comments in set_ctrl
          .                   // for the handling of tables smaller than the group width.
          6 ( 0.00%)          if self.buckets() < Group::WIDTH {
          .                       self.ctrl(0)
          .                           .copy_to(self.ctrl(Group::WIDTH), self.buckets());
          .                   } else {
          .                       self.ctrl(0)
          .                           .copy_to(self.ctrl(self.buckets()), Group::WIDTH);
          .                   }
          .               }
          .           
-- line 1220 ----------------------------------------
-- line 1225 ----------------------------------------
          .                   Bucket::from_base_index(self.data_end(), index)
          .               }
          .           
          .               #[inline]
          .               unsafe fn bucket_ptr(&self, index: usize, size_of: usize) -> *mut u8 {
          .                   debug_assert_ne!(self.bucket_mask, 0);
          .                   debug_assert!(index < self.buckets());
          .                   let base: *mut u8 = self.data_end().as_ptr();
 27,924,368 ( 0.14%)          base.sub((index + 1) * size_of)
          .               }
          .           
          .               #[inline]
          .               unsafe fn data_end<T>(&self) -> NonNull<T> {
          .                   NonNull::new_unchecked(self.ctrl.as_ptr().cast())
          .               }
          .           
          .               /// Returns an iterator-like object for a probe sequence on the table.
          .               ///
          .               /// This iterator never terminates, but is guaranteed to visit each bucket
          .               /// group exactly once. The loop using `probe_seq` must terminate upon
          .               /// reaching a group containing an empty bucket.
          .               #[inline]
          .               fn probe_seq(&self, hash: u64) -> ProbeSeq {
          .                   ProbeSeq {
157,984,735 ( 0.81%)              pos: h1(hash) & self.bucket_mask,
          .                       stride: 0,
          .                   }
          .               }
          .           
          .               /// Returns the index of a bucket for which a value must be inserted if there is enough rooom
          .               /// in the table, otherwise returns error
          .               #[cfg(feature = "raw")]
          .               #[inline]
-- line 1257 ----------------------------------------
-- line 1263 ----------------------------------------
          .                   } else {
          .                       self.record_item_insert_at(index, old_ctrl, hash);
          .                       Ok(index)
          .                   }
          .               }
          .           
          .               #[inline]
          .               unsafe fn record_item_insert_at(&mut self, index: usize, old_ctrl: u8, hash: u64) {
 14,656,925 ( 0.08%)          self.growth_left -= special_is_empty(old_ctrl) as usize;
          .                   self.set_ctrl_h2(index, hash);
 11,725,540 ( 0.06%)          self.items += 1;
          .               }
          .           
          .               #[inline]
          .               fn is_in_same_group(&self, i: usize, new_i: usize, hash: u64) -> bool {
          .                   let probe_seq_pos = self.probe_seq(hash).pos;
          .                   let probe_index =
          .                       |pos: usize| (pos.wrapping_sub(probe_seq_pos) & self.bucket_mask) / Group::WIDTH;
         66 ( 0.00%)          probe_index(i) == probe_index(new_i)
          .               }
          .           
          .               /// Sets a control byte to the hash, and possibly also the replicated control byte at
          .               /// the end of the array.
          .               #[inline]
          .               unsafe fn set_ctrl_h2(&self, index: usize, hash: u64) {
          .                   self.set_ctrl(index, h2(hash));
          .               }
-- line 1289 ----------------------------------------
-- line 1312 ----------------------------------------
          .                   // replicate the buckets at the end of the trailing group. For example
          .                   // with 2 buckets and a group size of 4, the control bytes will look
          .                   // like this:
          .                   //
          .                   //     Real    |             Replicated
          .                   // ---------------------------------------------
          .                   // | [A] | [B] | [EMPTY] | [EMPTY] | [A] | [B] |
          .                   // ---------------------------------------------
 21,790,341 ( 0.11%)          let index2 = ((index.wrapping_sub(Group::WIDTH)) & self.bucket_mask) + Group::WIDTH;
          .           
  7,263,447 ( 0.04%)          *self.ctrl(index) = ctrl;
  7,278,172 ( 0.04%)          *self.ctrl(index2) = ctrl;
          .               }
          .           
          .               /// Returns a pointer to a control byte.
          .               #[inline]
          .               unsafe fn ctrl(&self, index: usize) -> *mut u8 {
          .                   debug_assert!(index < self.num_ctrl_bytes());
          .                   self.ctrl.as_ptr().add(index)
          .               }
          .           
          .               #[inline]
          .               fn buckets(&self) -> usize {
  2,686,913 ( 0.01%)          self.bucket_mask + 1
          .               }
          .           
          .               #[inline]
          .               fn num_ctrl_bytes(&self) -> usize {
  2,482,356 ( 0.01%)          self.bucket_mask + 1 + Group::WIDTH
          .               }
          .           
          .               #[inline]
          .               fn is_empty_singleton(&self) -> bool {
 10,488,974 ( 0.05%)          self.bucket_mask == 0
          .               }
          .           
          .               #[allow(clippy::mut_mut)]
          .               #[inline]
          .               unsafe fn prepare_resize(
          .                   &self,
          .                   table_layout: TableLayout,
          .                   capacity: usize,
          .                   fallibility: Fallibility,
          .               ) -> Result<crate::scopeguard::ScopeGuard<Self, impl FnMut(&mut Self)>, TryReserveError> {
          .                   debug_assert!(self.items <= capacity);
          .           
          .                   // Allocate and initialize the new table.
     29,718 ( 0.00%)          let mut new_table = RawTableInner::fallible_with_capacity(
          .                       self.alloc.clone(),
          .                       table_layout,
          .                       capacity,
          .                       fallibility,
          .                   )?;
  1,166,210 ( 0.01%)          new_table.growth_left -= self.items;
          .                   new_table.items = self.items;
          .           
          .                   // The hash function may panic, in which case we simply free the new
          .                   // table without dropping any elements that may have been copied into
          .                   // it.
          .                   //
          .                   // This guard is also used to free the old table on success, see
          .                   // the comment at the bottom of this function.
          .                   Ok(guard(new_table, move |self_| {
    521,421 ( 0.00%)              if !self_.is_empty_singleton() {
          .                           self_.free_buckets(table_layout);
          .                       }
          .                   }))
          .               }
          .           
          .               /// Reserves or rehashes to make room for `additional` more elements.
          .               ///
          .               /// This uses dynamic dispatch to reduce the amount of
-- line 1383 ----------------------------------------
-- line 1388 ----------------------------------------
          .                   &mut self,
          .                   additional: usize,
          .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
          .                   fallibility: Fallibility,
          .                   layout: TableLayout,
          .                   drop: Option<fn(*mut u8)>,
          .               ) -> Result<(), TryReserveError> {
          .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
  1,042,851 ( 0.01%)          let new_items = match self.items.checked_add(additional) {
          .                       Some(new_items) => new_items,
          .                       None => return Err(fallibility.capacity_overflow()),
          .                   };
  1,042,846 ( 0.01%)          let full_capacity = bucket_mask_to_capacity(self.bucket_mask);
  2,208,146 ( 0.01%)          if new_items <= full_capacity / 2 {
          .                       // Rehash in-place without re-allocating if we have plenty of spare
          .                       // capacity that is locked up due to DELETED entries.
          .                       self.rehash_in_place(hasher, layout.size, drop);
          4 ( 0.00%)              Ok(())
          .                   } else {
          .                       // Otherwise, conservatively resize to at least the next size up
          .                       // to avoid churning deletes into frequent rehashes.
          .                       self.resize_inner(
    521,421 ( 0.00%)                  usize::max(new_items, full_capacity + 1),
          .                           hasher,
          .                           fallibility,
          .                           layout,
          .                       )
          .                   }
          .               }
          .           
          .               /// Allocates a new table of a different size and moves the contents of the
-- line 1418 ----------------------------------------
-- line 1424 ----------------------------------------
          .               #[inline(always)]
          .               unsafe fn resize_inner(
          .                   &mut self,
          .                   capacity: usize,
          .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
          .                   fallibility: Fallibility,
          .                   layout: TableLayout,
          .               ) -> Result<(), TryReserveError> {
     70,173 ( 0.00%)          let mut new_table = self.prepare_resize(layout, capacity, fallibility)?;
          .           
          .                   // Copy all elements to the new table.
          .                   for i in 0..self.buckets() {
  4,390,969 ( 0.02%)              if !is_full(*self.ctrl(i)) {
          .                           continue;
          .                       }
          .           
          .                       // This may panic.
          .                       let hash = hasher(self, i);
          .           
          .                       // We can use a simpler version of insert() here since:
          .                       // - there are no DELETED entries.
-- line 1444 ----------------------------------------
-- line 1454 ----------------------------------------
          .                   }
          .           
          .                   // We successfully copied all elements without panicking. Now replace
          .                   // self with the new table. The old table will have its memory freed but
          .                   // the items will not be dropped (since they have been moved into the
          .                   // new table).
          .                   mem::swap(self, &mut new_table);
          .           
    521,421 ( 0.00%)          Ok(())
          .               }
          .           
          .               /// Rehashes the contents of the table in place (i.e. without changing the
          .               /// allocation).
          .               ///
          .               /// If `hasher` panics then some the table's contents may be lost.
          .               ///
          .               /// This uses dynamic dispatch to reduce the amount of
-- line 1470 ----------------------------------------
-- line 1496 ----------------------------------------
          .                       }
          .                       self_.growth_left = bucket_mask_to_capacity(self_.bucket_mask) - self_.items;
          .                   });
          .           
          .                   // At this point, DELETED elements are elements that we haven't
          .                   // rehashed yet. Find them and re-insert them at their ideal
          .                   // position.
          .                   'outer: for i in 0..guard.buckets() {
        128 ( 0.00%)              if *guard.ctrl(i) != DELETED {
          .                           continue;
          .                       }
          .           
          .                       let i_p = guard.bucket_ptr(i, size_of);
          .           
          .                       'inner: loop {
          .                           // Hash the current item
          .                           let hash = hasher(*guard, i);
-- line 1512 ----------------------------------------
-- line 1515 ----------------------------------------
          .                           let new_i = guard.find_insert_slot(hash);
          .                           let new_i_p = guard.bucket_ptr(new_i, size_of);
          .           
          .                           // Probing works by scanning through all of the control
          .                           // bytes in groups, which may not be aligned to the group
          .                           // size. If both the new and old position fall within the
          .                           // same unaligned group, then there is no benefit in moving
          .                           // it and we can just continue to the next item.
         22 ( 0.00%)                  if likely(guard.is_in_same_group(i, new_i, hash)) {
          .                               guard.set_ctrl_h2(i, hash);
          .                               continue 'outer;
          .                           }
          .           
          .                           // We are moving the current item to a new position. Write
          .                           // our H2 to the control byte of the new position.
          .                           let prev_ctrl = guard.replace_ctrl_h2(new_i, hash);
          .                           if prev_ctrl == EMPTY {
-- line 1531 ----------------------------------------
-- line 1541 ----------------------------------------
          .                               // swapped into the old slot.
          .                               debug_assert_eq!(prev_ctrl, DELETED);
          .                               ptr::swap_nonoverlapping(i_p, new_i_p, size_of);
          .                               continue 'inner;
          .                           }
          .                       }
          .                   }
          .           
          6 ( 0.00%)          guard.growth_left = bucket_mask_to_capacity(guard.bucket_mask) - guard.items;
          .           
          .                   mem::forget(guard);
          .               }
          .           
          .               #[inline]
          .               unsafe fn free_buckets(&mut self, table_layout: TableLayout) {
          .                   // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
          .                   let (layout, ctrl_offset) = match table_layout.calculate_layout_for(self.buckets()) {
          .                       Some(lco) => lco,
          .                       None => hint::unreachable_unchecked(),
          .                   };
          .                   self.alloc.deallocate(
    335,124 ( 0.00%)              NonNull::new_unchecked(self.ctrl.as_ptr().sub(ctrl_offset)),
          .                       layout,
          .                   );
          .               }
          .           
          .               /// Marks all table buckets as empty without dropping their contents.
          .               #[inline]
          .               fn clear_no_drop(&mut self) {
    114,856 ( 0.00%)          if !self.is_empty_singleton() {
          .                       unsafe {
          .                           self.ctrl(0).write_bytes(EMPTY, self.num_ctrl_bytes());
          .                       }
          .                   }
    123,349 ( 0.00%)          self.items = 0;
    114,856 ( 0.00%)          self.growth_left = bucket_mask_to_capacity(self.bucket_mask);
          .               }
          .           
          .               #[inline]
          .               unsafe fn erase(&mut self, index: usize) {
          .                   debug_assert!(is_full(*self.ctrl(index)));
    638,407 ( 0.00%)          let index_before = index.wrapping_sub(Group::WIDTH) & self.bucket_mask;
          .                   let empty_before = Group::load(self.ctrl(index_before)).match_empty();
          .                   let empty_after = Group::load(self.ctrl(index)).match_empty();
          .           
          .                   // If we are inside a continuous block of Group::WIDTH full or deleted
          .                   // cells then a probe window may have seen a full block when trying to
          .                   // insert. We therefore need to keep that block non-empty so that
          .                   // lookups will continue searching to the next probe window.
          .                   //
          .                   // Note that in this context `leading_zeros` refers to the bytes at the
          .                   // end of a group, while `trailing_zeros` refers to the bytes at the
          .                   // beginning of a group.
  2,553,628 ( 0.01%)          let ctrl = if empty_before.leading_zeros() + empty_after.trailing_zeros() >= Group::WIDTH {
          .                       DELETED
          .                   } else {
  3,114,090 ( 0.02%)              self.growth_left += 1;
          .                       EMPTY
          .                   };
          .                   self.set_ctrl(index, ctrl);
  2,553,628 ( 0.01%)          self.items -= 1;
          .               }
          .           }
          .           
          .           impl<T: Clone, A: Allocator + Clone> Clone for RawTable<T, A> {
      7,416 ( 0.00%)      fn clone(&self) -> Self {
      1,181 ( 0.00%)          if self.table.is_empty_singleton() {
          .                       Self::new_in(self.table.alloc.clone())
          .                   } else {
          .                       unsafe {
          .                           let mut new_table = ManuallyDrop::new(
          .                               // Avoid `Result::ok_or_else` because it bloats LLVM IR.
          .                               match Self::new_uninitialized(
          .                                   self.table.alloc.clone(),
          .                                   self.table.buckets(),
-- line 1615 ----------------------------------------
-- line 1624 ----------------------------------------
          .                               // We need to free the memory allocated for the new table.
          .                               new_table.free_buckets();
          .                           });
          .           
          .                           // Return the newly created table.
          .                           ManuallyDrop::into_inner(new_table)
          .                       }
          .                   }
      8,343 ( 0.00%)      }
          .           
          .               fn clone_from(&mut self, source: &Self) {
          .                   if source.table.is_empty_singleton() {
          .                       *self = Self::new_in(self.table.alloc.clone());
          .                   } else {
          .                       unsafe {
          .                           // First, drop all our elements without clearing the control bytes.
          .                           self.drop_elements();
-- line 1640 ----------------------------------------
-- line 1687 ----------------------------------------
          .                       .table
          .                       .ctrl(0)
          .                       .copy_to_nonoverlapping(self.table.ctrl(0), self.table.num_ctrl_bytes());
          .                   source
          .                       .data_start()
          .                       .copy_to_nonoverlapping(self.data_start(), self.table.buckets());
          .           
          .                   self.table.items = source.table.items;
        458 ( 0.00%)          self.table.growth_left = source.table.growth_left;
          .               }
          .           }
          .           
          .           impl<T: Clone, A: Allocator + Clone> RawTable<T, A> {
          .               /// Common code for clone and clone_from. Assumes `self.buckets() == source.buckets()`.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               unsafe fn clone_from_impl(&mut self, source: &Self, mut on_panic: impl FnMut(&mut Self)) {
          .                   // Copy the control bytes unchanged. We do this in a single pass
-- line 1703 ----------------------------------------
-- line 1790 ----------------------------------------
          .               fn default() -> Self {
          .                   Self::new_in(Default::default())
          .               }
          .           }
          .           
          .           #[cfg(feature = "nightly")]
          .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawTable<T, A> {
          .               #[cfg_attr(feature = "inline-more", inline)]
  4,534,336 ( 0.02%)      fn drop(&mut self) {
  4,441,573 ( 0.02%)          if !self.table.is_empty_singleton() {
          .                       unsafe {
          .                           self.drop_elements();
          .                           self.free_buckets();
          .                       }
          .                   }
  4,843,116 ( 0.02%)      }
          .           }
          .           #[cfg(not(feature = "nightly"))]
          .           impl<T, A: Allocator + Clone> Drop for RawTable<T, A> {
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               fn drop(&mut self) {
          .                   if !self.table.is_empty_singleton() {
          .                       unsafe {
          .                           self.drop_elements();
-- line 1813 ----------------------------------------
-- line 1817 ----------------------------------------
          .               }
          .           }
          .           
          .           impl<T, A: Allocator + Clone> IntoIterator for RawTable<T, A> {
          .               type Item = T;
          .               type IntoIter = RawIntoIter<T, A>;
          .           
          .               #[cfg_attr(feature = "inline-more", inline)]
     55,520 ( 0.00%)      fn into_iter(self) -> RawIntoIter<T, A> {
          .                   unsafe {
          .                       let iter = self.iter();
          .                       self.into_iter_from(iter)
          .                   }
     69,400 ( 0.00%)      }
          .           }
          .           
          .           /// Iterator over a sub-range of a table. Unlike `RawIter` this iterator does
          .           /// not track an item count.
          .           pub(crate) struct RawIterRange<T> {
          .               // Mask of full buckets in the current group. Bits are cleared from this
          .               // mask as each element is processed.
          .               current_group: BitMask,
-- line 1838 ----------------------------------------
-- line 1934 ----------------------------------------
          .           
          .           impl<T> Iterator for RawIterRange<T> {
          .               type Item = Bucket<T>;
          .           
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               fn next(&mut self) -> Option<Bucket<T>> {
          .                   unsafe {
          .                       loop {
  2,472,269 ( 0.01%)                  if let Some(index) = self.current_group.lowest_set_bit() {
    350,309 ( 0.00%)                      self.current_group = self.current_group.remove_lowest_bit();
    494,518 ( 0.00%)                      return Some(self.data.next_n(index));
          .                           }
          .           
  1,860,026 ( 0.01%)                  if self.next_ctrl >= self.end {
          .                               return None;
          .                           }
          .           
          .                           // We might read past self.end up to the next group boundary,
          .                           // but this is fine because it only occurs on tables smaller
          .                           // than the group size where the trailing control bytes are all
          .                           // EMPTY. On larger tables self.end is guaranteed to be aligned
          .                           // to the group size (since tables are power-of-two sized).
     72,452 ( 0.00%)                  self.current_group = Group::load_aligned(self.next_ctrl).match_full();
     44,010 ( 0.00%)                  self.data = self.data.next_n(Group::WIDTH);
    166,756 ( 0.00%)                  self.next_ctrl = self.next_ctrl.add(Group::WIDTH);
          .                       }
          .                   }
          .               }
          .           
          .               #[inline]
          .               fn size_hint(&self) -> (usize, Option<usize>) {
          .                   // We don't have an item count, so just guess based on the range size.
          .                   (
-- line 1966 ----------------------------------------
-- line 2102 ----------------------------------------
          .                           }
          .                       } else {
          .                           // We must have already iterated past the removed item.
          .                       }
          .                   }
          .               }
          .           
          .               unsafe fn drop_elements(&mut self) {
      9,657 ( 0.00%)          if mem::needs_drop::<T>() && self.len() != 0 {
          .                       for item in self {
          .                           item.drop();
          .                       }
          .                   }
          .               }
          .           }
          .           
          .           impl<T> Clone for RawIter<T> {
-- line 2118 ----------------------------------------
-- line 2124 ----------------------------------------
          .                   }
          .               }
          .           }
          .           
          .           impl<T> Iterator for RawIter<T> {
          .               type Item = Bucket<T>;
          .           
          .               #[cfg_attr(feature = "inline-more", inline)]
    340,622 ( 0.00%)      fn next(&mut self) -> Option<Bucket<T>> {
  1,420,120 ( 0.01%)          if let Some(b) = self.iter.next() {
  3,532,947 ( 0.02%)              self.items -= 1;
          .                       Some(b)
          .                   } else {
          .                       // We don't check against items == 0 here to allow the
          .                       // compiler to optimize away the item count entirely if the
          .                       // iterator length is never queried.
          .                       debug_assert_eq!(self.items, 0);
          .                       None
          .                   }
    681,244 ( 0.00%)      }
          .           
          .               #[inline]
          .               fn size_hint(&self) -> (usize, Option<usize>) {
          .                   (self.items, Some(self.items))
          .               }
          .           }
          .           
          .           impl<T> ExactSizeIterator for RawIter<T> {}
-- line 2151 ----------------------------------------
-- line 2177 ----------------------------------------
          .               T: Sync,
          .               A: Sync,
          .           {
          .           }
          .           
          .           #[cfg(feature = "nightly")]
          .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
          .               #[cfg_attr(feature = "inline-more", inline)]
     22,428 ( 0.00%)      fn drop(&mut self) {
          .                   unsafe {
          .                       // Drop all remaining elements
          .                       self.iter.drop_elements();
          .           
          .                       // Free the table
    128,987 ( 0.00%)              if let Some((ptr, layout)) = self.allocation {
          .                           self.alloc.deallocate(ptr, layout);
          .                       }
          .                   }
        326 ( 0.00%)      }
          .           }
          .           #[cfg(not(feature = "nightly"))]
          .           impl<T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               fn drop(&mut self) {
          .                   unsafe {
          .                       // Drop all remaining elements
          .                       self.iter.drop_elements();
-- line 2203 ----------------------------------------
-- line 2209 ----------------------------------------
          .                   }
          .               }
          .           }
          .           
          .           impl<T, A: Allocator + Clone> Iterator for RawIntoIter<T, A> {
          .               type Item = T;
          .           
          .               #[cfg_attr(feature = "inline-more", inline)]
      7,818 ( 0.00%)      fn next(&mut self) -> Option<T> {
      6,753 ( 0.00%)          unsafe { Some(self.iter.next()?.read()) }
     15,636 ( 0.00%)      }
          .           
          .               #[inline]
          .               fn size_hint(&self) -> (usize, Option<usize>) {
          3 ( 0.00%)          self.iter.size_hint()
          .               }
          .           }
          .           
          .           impl<T, A: Allocator + Clone> ExactSizeIterator for RawIntoIter<T, A> {}
          .           impl<T, A: Allocator + Clone> FusedIterator for RawIntoIter<T, A> {}
          .           
          .           /// Iterator which consumes elements without freeing the table storage.
          .           pub struct RawDrain<'a, T, A: Allocator + Clone = Global> {
-- line 2231 ----------------------------------------
-- line 2259 ----------------------------------------
          .           where
          .               T: Sync,
          .               A: Sync,
          .           {
          .           }
          .           
          .           impl<T, A: Allocator + Clone> Drop for RawDrain<'_, T, A> {
          .               #[cfg_attr(feature = "inline-more", inline)]
      2,488 ( 0.00%)      fn drop(&mut self) {
          .                   unsafe {
          .                       // Drop all remaining elements. Note that this may panic.
          .                       self.iter.drop_elements();
          .           
          .                       // Reset the contents of the table now that all elements have been
          .                       // dropped.
          .                       self.table.clear_no_drop();
          .           
          .                       // Move the now empty table back to its original location.
        311 ( 0.00%)              self.orig_table
          .                           .as_ptr()
          .                           .copy_from_nonoverlapping(&*self.table, 1);
          .                   }
      2,488 ( 0.00%)      }
          .           }
          .           
          .           impl<T, A: Allocator + Clone> Iterator for RawDrain<'_, T, A> {
          .               type Item = T;
          .           
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               fn next(&mut self) -> Option<T> {
          .                   unsafe {
-- line 2289 ----------------------------------------

 89,788,071 ( 0.46%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/option.rs
--------------------------------------------------------------------------------
Ir                  

-- line 504 ----------------------------------------
         .           use crate::panicking::{panic, panic_str};
         .           use crate::pin::Pin;
         .           use crate::{
         .               convert, hint, mem,
         .               ops::{self, ControlFlow, Deref, DerefMut},
         .           };
         .           
         .           /// The `Option` type. See [the module level documentation](self) for more.
14,768,784 ( 0.08%)  #[derive(Copy, PartialEq, PartialOrd, Eq, Ord, Debug, Hash)]
         .           #[rustc_diagnostic_item = "Option"]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           pub enum Option<T> {
         .               /// No value.
         .               #[lang = "None"]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               None,
         .               /// Some value of type `T`.
         .               #[lang = "Some"]
         .               #[stable(feature = "rust1", since = "1.0.0")]
   413,858 ( 0.00%)      Some(#[stable(feature = "rust1", since = "1.0.0")] T),
         .           }
         .           
         .           /////////////////////////////////////////////////////////////////////////////
         .           // Type implementation
         .           /////////////////////////////////////////////////////////////////////////////
         .           
         .           impl<T> Option<T> {
         .               /////////////////////////////////////////////////////////////////////////
-- line 531 ----------------------------------------
-- line 542 ----------------------------------------
         .               ///
         .               /// let x: Option<u32> = None;
         .               /// assert_eq!(x.is_some(), false);
         .               /// ```
         .               #[must_use = "if you intended to assert that this has a value, consider `.unwrap()` instead"]
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_stable(feature = "const_option", since = "1.48.0")]
   465,922 ( 0.00%)      pub const fn is_some(&self) -> bool {
16,270,161 ( 0.08%)          matches!(*self, Some(_))
 1,164,805 ( 0.01%)      }
         .           
         .               /// Returns `true` if the option is a [`Some`] wrapping a value matching the predicate.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// #![feature(is_some_with)]
         .               ///
-- line 560 ----------------------------------------
-- line 585 ----------------------------------------
         .               /// let x: Option<u32> = None;
         .               /// assert_eq!(x.is_none(), true);
         .               /// ```
         .               #[must_use = "if you intended to assert that this doesn't have a value, consider \
         .                             `.and_then(|_| panic!(\"`Option` had a value when expected `None`\"))` instead"]
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_stable(feature = "const_option", since = "1.48.0")]
   231,750 ( 0.00%)      pub const fn is_none(&self) -> bool {
   347,625 ( 0.00%)          !self.is_some()
   463,500 ( 0.00%)      }
         .           
         .               /////////////////////////////////////////////////////////////////////////
         .               // Adapter for working with references
         .               /////////////////////////////////////////////////////////////////////////
         .           
         .               /// Converts from `&Option<T>` to `Option<&T>`.
         .               ///
         .               /// # Examples
-- line 603 ----------------------------------------
-- line 615 ----------------------------------------
         .               /// // First, cast `Option<String>` to `Option<&String>` with `as_ref`,
         .               /// // then consume *that* with `map`, leaving `text` on the stack.
         .               /// let text_length: Option<usize> = text.as_ref().map(|s| s.len());
         .               /// println!("still can print text: {:?}", text);
         .               /// ```
         .               #[inline]
         .               #[rustc_const_stable(feature = "const_option", since = "1.48.0")]
         .               #[stable(feature = "rust1", since = "1.0.0")]
    86,331 ( 0.00%)      pub const fn as_ref(&self) -> Option<&T> {
34,589,748 ( 0.18%)          match *self {
    51,341 ( 0.00%)              Some(ref x) => Some(x),
     6,218 ( 0.00%)              None => None,
         .                   }
    86,331 ( 0.00%)      }
         .           
         .               /// Converts from `&mut Option<T>` to `Option<&mut T>`.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let mut x = Some(2);
         .               /// match x.as_mut() {
-- line 636 ----------------------------------------
-- line 637 ----------------------------------------
         .               ///     Some(v) => *v = 42,
         .               ///     None => {},
         .               /// }
         .               /// assert_eq!(x, Some(42));
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option", issue = "67441")]
    25,575 ( 0.00%)      pub const fn as_mut(&mut self) -> Option<&mut T> {
15,684,036 ( 0.08%)          match *self {
    13,134 ( 0.00%)              Some(ref mut x) => Some(x),
     3,916 ( 0.00%)              None => None,
         .                   }
    25,575 ( 0.00%)      }
         .           
         .               /// Converts from <code>[Pin]<[&]Option\<T>></code> to <code>Option<[Pin]<[&]T>></code>.
         .               ///
         .               /// [&]: reference "shared reference"
         .               #[inline]
         .               #[must_use]
         .               #[stable(feature = "pin", since = "1.33.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
-- line 658 ----------------------------------------
-- line 705 ----------------------------------------
         .               /// let x: Option<&str> = None;
         .               /// x.expect("fruits are healthy"); // panics with `fruits are healthy`
         .               /// ```
         .               #[inline]
         .               #[track_caller]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option", issue = "67441")]
         .               pub const fn expect(self, msg: &str) -> T {
 8,243,208 ( 0.04%)          match self {
 5,296,984 ( 0.03%)              Some(val) => val,
         .                       None => expect_failed(msg),
         .                   }
         .               }
         .           
         .               /// Returns the contained [`Some`] value, consuming the `self` value.
         .               ///
         .               /// Because this function may panic, its use is generally discouraged.
         .               /// Instead, prefer to use pattern matching and handle the [`None`]
-- line 722 ----------------------------------------
-- line 741 ----------------------------------------
         .               /// ```should_panic
         .               /// let x: Option<&str> = None;
         .               /// assert_eq!(x.unwrap(), "air"); // fails
         .               /// ```
         .               #[inline]
         .               #[track_caller]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option", issue = "67441")]
   420,643 ( 0.00%)      pub const fn unwrap(self) -> T {
21,955,772 ( 0.11%)          match self {
 4,083,072 ( 0.02%)              Some(val) => val,
         .                       None => panic("called `Option::unwrap()` on a `None` value"),
         .                   }
   280,354 ( 0.00%)      }
         .           
         .               /// Returns the contained [`Some`] value or a provided default.
         .               ///
         .               /// Arguments passed to `unwrap_or` are eagerly evaluated; if you are passing
         .               /// the result of a function call, it is recommended to use [`unwrap_or_else`],
         .               /// which is lazily evaluated.
         .               ///
         .               /// [`unwrap_or_else`]: Option::unwrap_or_else
-- line 762 ----------------------------------------
-- line 765 ----------------------------------------
         .               ///
         .               /// ```
         .               /// assert_eq!(Some("car").unwrap_or("bike"), "car");
         .               /// assert_eq!(None.unwrap_or("bike"), "bike");
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
   231,440 ( 0.00%)      pub const fn unwrap_or(self, default: T) -> T
         .               where
         .                   T: ~const Drop,
         .               {
 7,549,826 ( 0.04%)          match self {
   172,332 ( 0.00%)              Some(x) => x,
    26,256 ( 0.00%)              None => default,
         .                   }
   361,081 ( 0.00%)      }
         .           
         .               /// Returns the contained [`Some`] value or computes it from a closure.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let k = 10;
         .               /// assert_eq!(Some(4).unwrap_or_else(|| 2 * k), 4);
         .               /// assert_eq!(None.unwrap_or_else(|| 2 * k), 20);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
     1,785 ( 0.00%)      pub const fn unwrap_or_else<F>(self, f: F) -> T
         .               where
         .                   F: ~const FnOnce() -> T,
         .                   F: ~const Drop,
         .               {
 5,212,778 ( 0.03%)          match self {
   336,665 ( 0.00%)              Some(x) => x,
    58,532 ( 0.00%)              None => f(),
         .                   }
     2,431 ( 0.00%)      }
         .           
         .               /// Returns the contained [`Some`] value or a default.
         .               ///
         .               /// Consumes the `self` argument then, if [`Some`], returns the contained
         .               /// value, otherwise if [`None`], returns the [default value] for that
         .               /// type.
         .               ///
         .               /// # Examples
-- line 812 ----------------------------------------
-- line 831 ----------------------------------------
         .               /// [`FromStr`]: crate::str::FromStr
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
         .               pub const fn unwrap_or_default(self) -> T
         .               where
         .                   T: ~const Default,
         .               {
    36,225 ( 0.00%)          match self {
    17,238 ( 0.00%)              Some(x) => x,
         .                       None => Default::default(),
         .                   }
         .               }
         .           
         .               /// Returns the contained [`Some`] value, consuming the `self` value,
         .               /// without checking that the value is not [`None`].
         .               ///
         .               /// # Safety
-- line 848 ----------------------------------------
-- line 861 ----------------------------------------
         .               /// ```no_run
         .               /// let x: Option<&str> = None;
         .               /// assert_eq!(unsafe { x.unwrap_unchecked() }, "air"); // Undefined behavior!
         .               /// ```
         .               #[inline]
         .               #[track_caller]
         .               #[stable(feature = "option_result_unwrap_unchecked", since = "1.58.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
       768 ( 0.00%)      pub const unsafe fn unwrap_unchecked(self) -> T {
       768 ( 0.00%)          debug_assert!(self.is_some());
     2,688 ( 0.00%)          match self {
     1,152 ( 0.00%)              Some(val) => val,
         .                       // SAFETY: the safety contract must be upheld by the caller.
         .                       None => unsafe { hint::unreachable_unchecked() },
         .                   }
       768 ( 0.00%)      }
         .           
         .               /////////////////////////////////////////////////////////////////////////
         .               // Transforming contained values
         .               /////////////////////////////////////////////////////////////////////////
         .           
         .               /// Maps an `Option<T>` to `Option<U>` by applying a function to a contained value.
         .               ///
         .               /// # Examples
-- line 884 ----------------------------------------
-- line 892 ----------------------------------------
         .               /// // `Option::map` takes self *by value*, consuming `maybe_some_string`
         .               /// let maybe_some_len = maybe_some_string.map(|s| s.len());
         .               ///
         .               /// assert_eq!(maybe_some_len, Some(13));
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
 2,784,747 ( 0.01%)      pub const fn map<U, F>(self, f: F) -> Option<U>
         .               where
         .                   F: ~const FnOnce(T) -> U,
         .                   F: ~const Drop,
         .               {
25,842,079 ( 0.13%)          match self {
21,324,338 ( 0.11%)              Some(x) => Some(f(x)),
 1,298,723 ( 0.01%)              None => None,
         .                   }
 5,120,789 ( 0.03%)      }
         .           
         .               /// Calls the provided closure with a reference to the contained value (if [`Some`]).
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// #![feature(result_option_inspect)]
         .               ///
-- line 917 ----------------------------------------
-- line 954 ----------------------------------------
         .               /// assert_eq!(x.map_or(42, |v| v.len()), 3);
         .               ///
         .               /// let x: Option<&str> = None;
         .               /// assert_eq!(x.map_or(42, |v| v.len()), 42);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
   190,441 ( 0.00%)      pub const fn map_or<U, F>(self, default: U, f: F) -> U
         .               where
         .                   F: ~const FnOnce(T) -> U,
         .                   F: ~const Drop,
         .                   U: ~const Drop,
         .               {
 5,863,014 ( 0.03%)          match self {
   437,045 ( 0.00%)              Some(t) => f(t),
   184,148 ( 0.00%)              None => default,
         .                   }
   213,073 ( 0.00%)      }
         .           
         .               /// Computes a default function result (if none), or
         .               /// applies a different function to the contained value (if any).
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let k = 21;
-- line 980 ----------------------------------------
-- line 990 ----------------------------------------
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
         .               pub const fn map_or_else<U, D, F>(self, default: D, f: F) -> U
         .               where
         .                   D: ~const FnOnce() -> U,
         .                   D: ~const Drop,
         .                   F: ~const FnOnce(T) -> U,
         .                   F: ~const Drop,
         .               {
   229,798 ( 0.00%)          match self {
    40,280 ( 0.00%)              Some(t) => f(t),
         .                       None => default(),
         .                   }
         .               }
         .           
         .               /// Transforms the `Option<T>` into a [`Result<T, E>`], mapping [`Some(v)`] to
         .               /// [`Ok(v)`] and [`None`] to [`Err(err)`].
         .               ///
         .               /// Arguments passed to `ok_or` are eagerly evaluated; if you are passing the
-- line 1007 ----------------------------------------
-- line 1020 ----------------------------------------
         .               /// assert_eq!(x.ok_or(0), Ok("foo"));
         .               ///
         .               /// let x: Option<&str> = None;
         .               /// assert_eq!(x.ok_or(0), Err(0));
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
 2,285,638 ( 0.01%)      pub const fn ok_or<E>(self, err: E) -> Result<T, E>
         .               where
         .                   E: ~const Drop,
         .               {
 7,777,337 ( 0.04%)          match self {
 2,062,331 ( 0.01%)              Some(v) => Ok(v),
     9,342 ( 0.00%)              None => Err(err),
         .                   }
 3,529,178 ( 0.02%)      }
         .           
         .               /// Transforms the `Option<T>` into a [`Result<T, E>`], mapping [`Some(v)`] to
         .               /// [`Ok(v)`] and [`None`] to [`Err(err())`].
         .               ///
         .               /// [`Ok(v)`]: Ok
         .               /// [`Err(err())`]: Err
         .               /// [`Some(v)`]: Some
         .               ///
-- line 1044 ----------------------------------------
-- line 1049 ----------------------------------------
         .               /// assert_eq!(x.ok_or_else(|| 0), Ok("foo"));
         .               ///
         .               /// let x: Option<&str> = None;
         .               /// assert_eq!(x.ok_or_else(|| 0), Err(0));
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
    33,984 ( 0.00%)      pub const fn ok_or_else<E, F>(self, err: F) -> Result<T, E>
         .               where
         .                   F: ~const FnOnce() -> E,
         .                   F: ~const Drop,
         .               {
   425,830 ( 0.00%)          match self {
   419,561 ( 0.00%)              Some(v) => Ok(v),
   177,008 ( 0.00%)              None => Err(err()),
         .                   }
    28,320 ( 0.00%)      }
         .           
         .               /// Converts from `Option<T>` (or `&Option<T>`) to `Option<&T::Target>`.
         .               ///
         .               /// Leaves the original Option in-place, creating a new one with a reference
         .               /// to the original one, additionally coercing the contents via [`Deref`].
         .               ///
         .               /// # Examples
         .               ///
-- line 1074 ----------------------------------------
-- line 1080 ----------------------------------------
         .               /// assert_eq!(x.as_deref(), None);
         .               /// ```
         .               #[stable(feature = "option_deref", since = "1.40.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
         .               pub const fn as_deref(&self) -> Option<&T::Target>
         .               where
         .                   T: ~const Deref,
         .               {
   174,330 ( 0.00%)          match self.as_ref() {
         .                       Some(t) => Some(t.deref()),
         .                       None => None,
         .                   }
         .               }
         .           
         .               /// Converts from `Option<T>` (or `&mut Option<T>`) to `Option<&mut T::Target>`.
         .               ///
         .               /// Leaves the original `Option` in-place, creating a new one containing a mutable reference to
-- line 1096 ----------------------------------------
-- line 1213 ----------------------------------------
         .               /// assert_eq!(Some(2).and_then(sq).and_then(sq), Some(16));
         .               /// assert_eq!(Some(2).and_then(sq).and_then(nope), None);
         .               /// assert_eq!(Some(2).and_then(nope).and_then(sq), None);
         .               /// assert_eq!(None.and_then(sq).and_then(sq), None);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
    34,544 ( 0.00%)      pub const fn and_then<U, F>(self, f: F) -> Option<U>
         .               where
         .                   F: ~const FnOnce(T) -> Option<U>,
         .                   F: ~const Drop,
         .               {
   705,905 ( 0.00%)          match self {
   208,553 ( 0.00%)              Some(x) => f(x),
         .                       None => None,
         .                   }
   394,209 ( 0.00%)      }
         .           
         .               /// Returns [`None`] if the option is [`None`], otherwise calls `predicate`
         .               /// with the wrapped value and returns:
         .               ///
         .               /// - [`Some(t)`] if `predicate` returns `true` (where `t` is the wrapped
         .               ///   value), and
         .               /// - [`None`] if `predicate` returns `false`.
         .               ///
-- line 1238 ----------------------------------------
-- line 1257 ----------------------------------------
         .               #[stable(feature = "option_filter", since = "1.27.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
         .               pub const fn filter<P>(self, predicate: P) -> Self
         .               where
         .                   T: ~const Drop,
         .                   P: ~const FnOnce(&T) -> bool,
         .                   P: ~const Drop,
         .               {
    47,781 ( 0.00%)          if let Some(x) = self {
    56,912 ( 0.00%)              if predicate(&x) {
         .                           return Some(x);
         .                       }
         .                   }
         .                   None
       432 ( 0.00%)      }
         .           
         .               /// Returns the option if it contains a value, otherwise returns `optb`.
         .               ///
         .               /// Arguments passed to `or` are eagerly evaluated; if you are passing the
         .               /// result of a function call, it is recommended to use [`or_else`], which is
         .               /// lazily evaluated.
         .               ///
         .               /// [`or_else`]: Option::or_else
-- line 1279 ----------------------------------------
-- line 1299 ----------------------------------------
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
         .               pub const fn or(self, optb: Option<T>) -> Option<T>
         .               where
         .                   T: ~const Drop,
         .               {
    64,463 ( 0.00%)          match self {
       147 ( 0.00%)              Some(x) => Some(x),
         .                       None => optb,
         .                   }
         .               }
         .           
         .               /// Returns the option if it contains a value, otherwise calls `f` and
         .               /// returns the result.
         .               ///
         .               /// # Examples
-- line 1316 ----------------------------------------
-- line 1321 ----------------------------------------
         .               ///
         .               /// assert_eq!(Some("barbarians").or_else(vikings), Some("barbarians"));
         .               /// assert_eq!(None.or_else(vikings), Some("vikings"));
         .               /// assert_eq!(None.or_else(nobody), None);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
   439,808 ( 0.00%)      pub const fn or_else<F>(self, f: F) -> Option<T>
         .               where
         .                   F: ~const FnOnce() -> Option<T>,
         .                   F: ~const Drop,
         .               {
   869,267 ( 0.00%)          match self {
   358,244 ( 0.00%)              Some(x) => Some(x),
   250,907 ( 0.00%)              None => f(),
         .                   }
   400,240 ( 0.00%)      }
         .           
         .               /// Returns [`Some`] if exactly one of `self`, `optb` is [`Some`], otherwise returns [`None`].
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let x = Some(2);
         .               /// let y: Option<u32> = None;
-- line 1346 ----------------------------------------
-- line 1431 ----------------------------------------
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "option_entry", since = "1.20.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
         .               pub const fn get_or_insert(&mut self, value: T) -> &mut T
         .               where
         .                   T: ~const Drop,
         .               {
   458,892 ( 0.00%)          if let None = *self {
 1,070,748 ( 0.01%)              *self = Some(value);
         .                   }
         .           
         .                   // SAFETY: a `None` variant for `self` would have been replaced by a `Some`
         .                   // variant in the code above.
         .                   unsafe { self.as_mut().unwrap_unchecked() }
         .               }
         .           
         .               /// Inserts the default value into the option if it is [`None`], then
-- line 1448 ----------------------------------------
-- line 1494 ----------------------------------------
         .               ///     *y = 7;
         .               /// }
         .               ///
         .               /// assert_eq!(x, Some(7));
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "option_entry", since = "1.20.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
     1,152 ( 0.00%)      pub const fn get_or_insert_with<F>(&mut self, f: F) -> &mut T
         .               where
         .                   F: ~const FnOnce() -> T,
         .                   F: ~const Drop,
         .               {
 5,199,841 ( 0.03%)          if let None = *self {
         .                       // the compiler isn't smart enough to know that we are not dropping a `T`
         .                       // here and wants us to ensure `T` can be dropped at compile time.
     3,684 ( 0.00%)              mem::forget(mem::replace(self, Some(f())))
         .                   }
         .           
         .                   // SAFETY: a `None` variant for `self` would have been replaced by a `Some`
         .                   // variant in the code above.
     4,224 ( 0.00%)          unsafe { self.as_mut().unwrap_unchecked() }
     1,920 ( 0.00%)      }
         .           
         .               /////////////////////////////////////////////////////////////////////////
         .               // Misc
         .               /////////////////////////////////////////////////////////////////////////
         .           
         .               /// Takes the value out of the option, leaving a [`None`] in its place.
         .               ///
         .               /// # Examples
-- line 1524 ----------------------------------------
-- line 1532 ----------------------------------------
         .               /// let mut x: Option<u32> = None;
         .               /// let y = x.take();
         .               /// assert_eq!(x, None);
         .               /// assert_eq!(y, None);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option", issue = "67441")]
   885,846 ( 0.00%)      pub const fn take(&mut self) -> Option<T> {
         .                   // FIXME replace `mem::replace` by `mem::take` when the latter is const ready
   930,456 ( 0.00%)          mem::replace(self, None)
   553,216 ( 0.00%)      }
         .           
         .               /// Replaces the actual value in the option by the value given in parameter,
         .               /// returning the old value if present,
         .               /// leaving a [`Some`] in its place without deinitializing either one.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
-- line 1551 ----------------------------------------
-- line 1558 ----------------------------------------
         .               /// let old = x.replace(3);
         .               /// assert_eq!(x, Some(3));
         .               /// assert_eq!(old, None);
         .               /// ```
         .               #[inline]
         .               #[rustc_const_unstable(feature = "const_option", issue = "67441")]
         .               #[stable(feature = "option_replace", since = "1.31.0")]
         .               pub const fn replace(&mut self, value: T) -> Option<T> {
    20,048 ( 0.00%)          mem::replace(self, Some(value))
         .               }
         .           
         .               /// Returns `true` if the option is a [`Some`] value containing the given value.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// #![feature(option_result_contains)]
-- line 1574 ----------------------------------------
-- line 1712 ----------------------------------------
         .               #[stable(feature = "copied", since = "1.35.0")]
         .               #[rustc_const_unstable(feature = "const_option", issue = "67441")]
         .               pub const fn copied(self) -> Option<T>
         .               where
         .                   T: Copy,
         .               {
         .                   // FIXME: this implementation, which sidesteps using `Option::map` since it's not const
         .                   // ready yet, should be reverted when possible to avoid code repetition
   292,815 ( 0.00%)          match self {
 4,132,237 ( 0.02%)              Some(&v) => Some(v),
    17,722 ( 0.00%)              None => None,
         .                   }
        26 ( 0.00%)      }
         .           
         .               /// Maps an `Option<&T>` to an `Option<T>` by cloning the contents of the
         .               /// option.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let x = 12;
-- line 1732 ----------------------------------------
-- line 1733 ----------------------------------------
         .               /// let opt_x = Some(&x);
         .               /// assert_eq!(opt_x, Some(&12));
         .               /// let cloned = opt_x.cloned();
         .               /// assert_eq!(cloned, Some(12));
         .               /// ```
         .               #[must_use = "`self` will be dropped if the result is not used"]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option_cloned", issue = "91582")]
   193,752 ( 0.00%)      pub const fn cloned(self) -> Option<T>
         .               where
         .                   T: ~const Clone,
         .               {
   977,575 ( 0.01%)          match self {
 4,036,601 ( 0.02%)              Some(t) => Some(t.clone()),
    92,120 ( 0.00%)              None => None,
         .                   }
   464,777 ( 0.00%)      }
         .           }
         .           
         .           impl<T> Option<&mut T> {
         .               /// Maps an `Option<&mut T>` to an `Option<T>` by copying the contents of the
         .               /// option.
         .               ///
         .               /// # Examples
         .               ///
-- line 1757 ----------------------------------------
-- line 1842 ----------------------------------------
         .           
         .           /////////////////////////////////////////////////////////////////////////////
         .           // Trait implementations
         .           /////////////////////////////////////////////////////////////////////////////
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T: Clone> Clone for Option<T> {
         .               #[inline]
   230,463 ( 0.00%)      fn clone(&self) -> Self {
15,542,141 ( 0.08%)          match self {
   839,712 ( 0.00%)              Some(x) => Some(x.clone()),
    30,528 ( 0.00%)              None => None,
         .                   }
 5,134,431 ( 0.03%)      }
         .           
         .               #[inline]
         .               fn clone_from(&mut self, source: &Self) {
         .                   match (self, source) {
         .                       (Some(to), Some(from)) => to.clone_from(from),
         .                       (to, from) => *to = from.clone(),
         .                   }
         .               }
-- line 1863 ----------------------------------------
-- line 1870 ----------------------------------------
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let opt: Option<u32> = Option::default();
         .               /// assert!(opt.is_none());
         .               /// ```
         .               #[inline]
    76,821 ( 0.00%)      fn default() -> Option<T> {
    76,821 ( 0.00%)          None
   230,463 ( 0.00%)      }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T> IntoIterator for Option<T> {
         .               type Item = T;
         .               type IntoIter = IntoIter<T>;
         .           
         .               /// Returns a consuming iterator over the possibly contained value.
-- line 1888 ----------------------------------------
-- line 1894 ----------------------------------------
         .               /// let v: Vec<&str> = x.into_iter().collect();
         .               /// assert_eq!(v, ["string"]);
         .               ///
         .               /// let x = None;
         .               /// let v: Vec<&str> = x.into_iter().collect();
         .               /// assert!(v.is_empty());
         .               /// ```
         .               #[inline]
   376,018 ( 0.00%)      fn into_iter(self) -> IntoIter<T> {
 1,223,907 ( 0.01%)          IntoIter { inner: Item { opt: self } }
   315,375 ( 0.00%)      }
         .           }
         .           
         .           #[stable(since = "1.4.0", feature = "option_iter")]
         .           impl<'a, T> IntoIterator for &'a Option<T> {
         .               type Item = &'a T;
         .               type IntoIter = Iter<'a, T>;
         .           
         .               fn into_iter(self) -> Iter<'a, T> {
-- line 1912 ----------------------------------------
-- line 2000 ----------------------------------------
         .           struct Item<A> {
         .               opt: Option<A>,
         .           }
         .           
         .           impl<A> Iterator for Item<A> {
         .               type Item = A;
         .           
         .               #[inline]
   870,384 ( 0.00%)      fn next(&mut self) -> Option<A> {
   380,736 ( 0.00%)          self.opt.take()
   537,576 ( 0.00%)      }
         .           
         .               #[inline]
       768 ( 0.00%)      fn size_hint(&self) -> (usize, Option<usize>) {
   207,005 ( 0.00%)          match self.opt {
         .                       Some(_) => (1, Some(1)),
     1,536 ( 0.00%)              None => (0, Some(0)),
         .                   }
       384 ( 0.00%)      }
         .           }
         .           
         .           impl<A> DoubleEndedIterator for Item<A> {
         .               #[inline]
         .               fn next_back(&mut self) -> Option<A> {
         .                   self.opt.take()
         .               }
         .           }
-- line 2026 ----------------------------------------
-- line 2131 ----------------------------------------
         .               inner: Item<A>,
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<A> Iterator for IntoIter<A> {
         .               type Item = A;
         .           
         .               #[inline]
   870,384 ( 0.00%)      fn next(&mut self) -> Option<A> {
   380,736 ( 0.00%)          self.inner.next()
   537,576 ( 0.00%)      }
         .               #[inline]
       768 ( 0.00%)      fn size_hint(&self) -> (usize, Option<usize>) {
       408 ( 0.00%)          self.inner.size_hint()
       384 ( 0.00%)      }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<A> DoubleEndedIterator for IntoIter<A> {
         .               #[inline]
         .               fn next_back(&mut self) -> Option<A> {
         .                   self.inner.next_back()
         .               }
-- line 2153 ----------------------------------------
-- line 2241 ----------------------------------------
         .           #[rustc_const_unstable(feature = "const_convert", issue = "88674")]
         .           impl<T> const ops::Try for Option<T> {
         .               type Output = T;
         .               type Residual = Option<convert::Infallible>;
         .           
         .               #[inline]
         .               fn from_output(output: Self::Output) -> Self {
         .                   Some(output)
    25,060 ( 0.00%)      }
         .           
         .               #[inline]
 2,855,220 ( 0.01%)      fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {
14,356,242 ( 0.07%)          match self {
 5,507,706 ( 0.03%)              Some(v) => ControlFlow::Continue(v),
   121,094 ( 0.00%)              None => ControlFlow::Break(None),
         .                   }
 4,043,117 ( 0.02%)      }
         .           }
         .           
         .           #[unstable(feature = "try_trait_v2", issue = "84277")]
         .           #[rustc_const_unstable(feature = "const_convert", issue = "88674")]
         .           impl<T> const ops::FromResidual for Option<T> {
         .               #[inline]
    68,548 ( 0.00%)      fn from_residual(residual: Option<convert::Infallible>) -> Self {
         .                   match residual {
   764,727 ( 0.00%)              None => None,
         .                   }
   226,186 ( 0.00%)      }
         .           }
         .           
         .           #[unstable(feature = "try_trait_v2_residual", issue = "91285")]
         .           impl<T> ops::Residual<T> for Option<convert::Infallible> {
         .               type TryType = Option<T>;
         .           }
         .           
         .           impl<T> Option<Option<T>> {
-- line 2276 ----------------------------------------

29,550,595 ( 0.15%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/option.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-1.0.86/src/ident.rs
--------------------------------------------------------------------------------
Ir                 

-- line 13 ----------------------------------------
        .           #[cfg(feature = "parsing")]
        .           #[doc(hidden)]
        .           #[allow(non_snake_case)]
        .           pub fn Ident(marker: lookahead::TokenMarker) -> Ident {
        .               match marker {}
        .           }
        .           
        .           #[cfg(feature = "parsing")]
  134,910 ( 0.00%)  fn accept_as_ident(ident: &Ident) -> bool {
  449,700 ( 0.00%)      match ident.to_string().as_str() {
  359,760 ( 0.00%)          "_" |
        .                   // Based on https://doc.rust-lang.org/grammar.html#keywords
        .                   // and https://github.com/rust-lang/rfcs/blob/master/text/2421-unreservations-2018.md
        .                   // and https://github.com/rust-lang/rfcs/blob/master/text/2420-unreserve-proc.md
2,518,320 ( 0.01%)          "abstract" | "as" | "become" | "box" | "break" | "const" | "continue" |
2,878,080 ( 0.01%)          "crate" | "do" | "else" | "enum" | "extern" | "false" | "final" | "fn" |
2,824,857 ( 0.01%)          "for" | "if" | "impl" | "in" | "let" | "loop" | "macro" | "match" |
2,385,214 ( 0.01%)          "mod" | "move" | "mut" | "override" | "priv" | "pub" | "ref" |
2,333,336 ( 0.01%)          "return" | "Self" | "self" | "static" | "struct" | "super" | "trait" |
2,322,488 ( 0.01%)          "true" | "type" | "typeof" | "unsafe" | "unsized" | "use" | "virtual" |
1,002,346 ( 0.01%)          "where" | "while" | "yield" => false,
   41,473 ( 0.00%)          _ => true,
        .               }
  314,790 ( 0.00%)  }
        .           
        .           #[cfg(feature = "parsing")]
        .           #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
        .           impl Parse for Ident {
   73,692 ( 0.00%)      fn parse(input: ParseStream) -> Result<Self> {
  128,961 ( 0.00%)          input.step(|cursor| {
  534,267 ( 0.00%)              if let Some((ident, rest)) = cursor.ident() {
   92,115 ( 0.00%)                  if accept_as_ident(&ident) {
  350,037 ( 0.00%)                      return Ok((ident, rest));
        .                           }
   18,423 ( 0.00%)              }
        .                       Err(cursor.error("expected identifier"))
   36,846 ( 0.00%)          })
   36,846 ( 0.00%)      }
        .           }
        .           
        .           #[cfg(feature = "parsing")]
        .           impl Token for Ident {
  140,215 ( 0.00%)      fn peek(cursor: Cursor) -> bool {
  655,080 ( 0.00%)          if let Some((ident, _rest)) = cursor.ident() {
  132,735 ( 0.00%)              accept_as_ident(&ident)
   79,641 ( 0.00%)          } else {
    1,496 ( 0.00%)              false
        .                   }
  447,192 ( 0.00%)      }
        .           
        .               fn display() -> &'static str {
        .                   "identifier"
    2,304 ( 0.00%)      }
        .           }
        .           
        .           macro_rules! ident_from_token {
        .               ($token:ident) => {
        .                   impl From<Token![$token]> for Ident {
        .                       fn from(token: Token![$token]) -> Ident {
        .                           Ident::new(stringify!($token), token.span)
        .                       }
-- line 73 ----------------------------------------
-- line 82 ----------------------------------------
        .           ident_from_token!(extern);
        .           
        .           impl From<Token![_]> for Ident {
        .               fn from(token: Token![_]) -> Ident {
        .                   Ident::new("_", token.span)
        .               }
        .           }
        .           
      576 ( 0.00%)  pub fn xid_ok(symbol: &str) -> bool {
      576 ( 0.00%)      let mut chars = symbol.chars();
    1,344 ( 0.00%)      let first = chars.next().unwrap();
    1,728 ( 0.00%)      if !(UnicodeXID::is_xid_start(first) || first == '_') {
        .                   return false;
        .               }
   12,288 ( 0.00%)      for ch in chars {
    4,608 ( 0.00%)          if !UnicodeXID::is_xid_continue(ch) {
        .                       return false;
        .                   }
        .               }
      192 ( 0.00%)      true
    1,152 ( 0.00%)  }

6,398,199 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-1.0.86/src/ident.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/graph/scc/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 35 ----------------------------------------
        .           
        .               /// Contains the successors for all the Sccs, concatenated. The
        .               /// range of indices corresponding to a given SCC is found in its
        .               /// SccData.
        .               all_successors: Vec<S>,
        .           }
        .           
        .           impl<N: Idx, S: Idx + Ord> Sccs<N, S> {
   31,628 ( 0.00%)      pub fn new(graph: &(impl DirectedGraph<Node = N> + WithNumNodes + WithSuccessors)) -> Self {
        .                   SccsConstruction::construct(graph)
   33,228 ( 0.00%)      }
        .           
        .               /// Returns the number of SCCs in the graph.
        .               pub fn num_sccs(&self) -> usize {
        .                   self.scc_data.len()
        .               }
        .           
        .               /// Returns an iterator over the SCCs in the graph.
        .               ///
-- line 53 ----------------------------------------
-- line 56 ----------------------------------------
        .               /// This is convenient when the edges represent dependencies: when you visit
        .               /// `S1`, the value for `S2` will already have been computed.
        .               pub fn all_sccs(&self) -> impl Iterator<Item = S> {
        .                   (0..self.scc_data.len()).map(S::new)
        .               }
        .           
        .               /// Returns the SCC to which a node `r` belongs.
        .               pub fn scc(&self, r: N) -> S {
  321,566 ( 0.00%)          self.scc_indices[r]
        .               }
        .           
        .               /// Returns the successors of the given SCC.
        .               pub fn successors(&self, scc: S) -> &[S] {
        .                   self.scc_data.successors(scc)
        .               }
        .           
        .               /// Construct the reverse graph of the SCC graph.
        .               pub fn reverse(&self) -> VecGraph<S> {
        4 ( 0.00%)          VecGraph::new(
        .                       self.num_sccs(),
        .                       self.all_sccs()
        .                           .flat_map(|source| {
        .                               self.successors(source).iter().map(move |&target| (target, source))
        .                           })
        .                           .collect(),
        .                   )
        .               }
-- line 82 ----------------------------------------
-- line 116 ----------------------------------------
        .                   self.ranges.len()
        .               }
        .           
        .               /// Returns the successors of the given SCC.
        .               fn successors(&self, scc: S) -> &[S] {
        .                   // Annoyingly, `range` does not implement `Copy`, so we have
        .                   // to do `range.start..range.end`:
        .                   let range = &self.ranges[scc];
  916,344 ( 0.00%)          &self.all_successors[range.start..range.end]
        .               }
        .           
        .               /// Creates a new SCC with `successors` as its successors and
        .               /// returns the resulting index.
        .               fn create_scc(&mut self, successors: impl IntoIterator<Item = S>) -> S {
        .                   // Store the successors on `scc_successors_vec`, remembering
        .                   // the range of indices.
  114,540 ( 0.00%)          let all_successors_start = self.all_successors.len();
        .                   self.all_successors.extend(successors);
        .                   let all_successors_end = self.all_successors.len();
        .           
        .                   debug!(
        .                       "create_scc({:?}) successors={:?}",
        .                       self.ranges.len(),
        .                       &self.all_successors[all_successors_start..all_successors_end],
        .                   );
-- line 140 ----------------------------------------
-- line 164 ----------------------------------------
        .               /// into the successors_stack, we sometimes get duplicate entries.
        .               /// We use this set to remove those -- we also keep its storage
        .               /// around between successors to amortize memory allocation costs.
        .               duplicate_set: FxHashSet<S>,
        .           
        .               scc_data: SccData<S>,
        .           }
        .           
   14,460 ( 0.00%)  #[derive(Copy, Clone, Debug)]
        .           enum NodeState<N, S> {
        .               /// This node has not yet been visited as part of the DFS.
        .               ///
        .               /// After SCC construction is complete, this state ought to be
        .               /// impossible.
        .               NotVisited,
        .           
        .               /// This node is currently being walk as part of our DFS. It is on
-- line 180 ----------------------------------------
-- line 216 ----------------------------------------
        .               /// N with depth D can reach some other node N' with lower depth
        .               /// D' (i.e., D' < D), we know that N, N', and all nodes in
        .               /// between them on the stack are part of an SCC.
        .               ///
        .               /// [wikipedia]: https://bit.ly/2EZIx84
        .               fn construct(graph: &'c G) -> Sccs<G::Node, S> {
        .                   let num_nodes = graph.num_nodes();
        .           
   40,612 ( 0.00%)          let mut this = Self {
        .                       graph,
        .                       node_states: IndexVec::from_elem_n(NodeState::NotVisited, num_nodes),
        .                       node_stack: Vec::with_capacity(num_nodes),
        .                       successors_stack: Vec::new(),
        .                       scc_data: SccData { ranges: IndexVec::new(), all_successors: Vec::new() },
        .                       duplicate_set: FxHashSet::default(),
        .                   };
        .           
        .                   let scc_indices = (0..num_nodes)
        .                       .map(G::Node::new)
  917,784 ( 0.00%)              .map(|node| match this.start_walk_from(node) {
        .                           WalkReturn::Complete { scc_index } => scc_index,
        .                           WalkReturn::Cycle { min_depth } => panic!(
        .                               "`start_walk_node({:?})` returned cycle with depth {:?}",
        .                               node, min_depth
        .                           ),
        .                       })
        .                       .collect();
        .           
   22,152 ( 0.00%)          Sccs { scc_indices, scc_data: this.scc_data }
        .               }
        .           
1,376,676 ( 0.01%)      fn start_walk_from(&mut self, node: G::Node) -> WalkReturn<S> {
  611,856 ( 0.00%)          if let Some(result) = self.inspect_node(node) {
        .                       result
        .                   } else {
        .                       self.walk_unvisited_node(node)
        .                   }
1,529,640 ( 0.01%)      }
        .           
        .               /// Inspect a node during the DFS. We first examine its current
        .               /// state -- if it is not yet visited (`NotVisited`), return `None` so
        .               /// that the caller might push it onto the stack and start walking its
        .               /// successors.
        .               ///
        .               /// If it is already on the DFS stack it will be in the state
        .               /// `BeingVisited`. In that case, we have found a cycle and we
        .               /// return the depth from the stack.
        .               ///
        .               /// Otherwise, we are looking at a node that has already been
        .               /// completely visited. We therefore return `WalkReturn::Complete`
        .               /// with its associated SCC index.
1,931,372 ( 0.01%)      fn inspect_node(&mut self, node: G::Node) -> Option<WalkReturn<S>> {
3,862,744 ( 0.02%)          Some(match self.find_state(node) {
  864,993 ( 0.00%)              NodeState::InCycle { scc_index } => WalkReturn::Complete { scc_index },
        .           
  124,644 ( 0.00%)              NodeState::BeingVisited { depth: min_depth } => WalkReturn::Cycle { min_depth },
        .           
        .                       NodeState::NotVisited => return None,
        .           
        .                       NodeState::InCycleWith { parent } => panic!(
        .                           "`find_state` returned `InCycleWith({:?})`, which ought to be impossible",
        .                           parent
        .                       ),
        .                   })
3,379,901 ( 0.02%)      }
        .           
        .               /// Fetches the state of the node `r`. If `r` is recorded as being
        .               /// in a cycle with some other node `r2`, then fetches the state
        .               /// of `r2` (and updates `r` to reflect current result). This is
        .               /// basically the "find" part of a standard union-find algorithm
        .               /// (with path compression).
        .               fn find_state(&mut self, mut node: G::Node) -> NodeState<G::Node, S> {
        .                   // To avoid recursion we temporarily reuse the `parent` of each
-- line 288 ----------------------------------------
-- line 299 ----------------------------------------
        .                   // following links downwards is then simply as soon as we have
        .                   // found the initial self-loop.
        .                   let mut previous_node = node;
        .           
        .                   // Ultimately assigned by the parent when following
        .                   // `InCycleWith` upwards.
        .                   let node_state = loop {
        .                       debug!("find_state(r = {:?} in state {:?})", node, self.node_states[node]);
3,718,508 ( 0.02%)              match self.node_states[node] {
1,153,324 ( 0.01%)                  NodeState::InCycle { scc_index } => break NodeState::InCycle { scc_index },
  166,192 ( 0.00%)                  NodeState::BeingVisited { depth } => break NodeState::BeingVisited { depth },
  152,964 ( 0.00%)                  NodeState::NotVisited => break NodeState::NotVisited,
   40,423 ( 0.00%)                  NodeState::InCycleWith { parent } => {
        .                               // We test this, to be extremely sure that we never
        .                               // ever break our termination condition for the
        .                               // reverse iteration loop.
   40,423 ( 0.00%)                      assert!(node != parent, "Node can not be in cycle with itself");
        .                               // Store the previous node as an inverted list link
  202,115 ( 0.00%)                      self.node_states[node] = NodeState::InCycleWith { parent: previous_node };
        .                               // Update to parent node.
        .                               previous_node = node;
        .                               node = parent;
        .                           }
        .                       }
        .                   };
        .           
        .                   // The states form a graph where up to one outgoing link is stored at
-- line 325 ----------------------------------------
-- line 355 ----------------------------------------
        .                   // We can then walk backwards, starting from `previous_node`, and assign
        .                   // each node in the list with the updated state. The loop terminates
        .                   // when we reach the self-cycle.
        .           
        .                   // Move backwards until we found the node where we started. We
        .                   // will know when we hit the state where previous_node == node.
        .                   loop {
        .                       // Back at the beginning, we can return.
  716,707 ( 0.00%)              if previous_node == node {
        .                           return node_state;
        .                       }
        .                       // Update to previous node in the link.
   80,846 ( 0.00%)              match self.node_states[previous_node] {
   40,423 ( 0.00%)                  NodeState::InCycleWith { parent: previous } => {
        .                               node = previous_node;
        .                               previous_node = previous;
        .                           }
        .                           // Only InCycleWith nodes were added to the reverse linked list.
        .                           other => panic!("Invalid previous link while compressing cycle: {:?}", other),
        .                       }
        .           
        .                       debug!("find_state: parent_state = {:?}", node_state);
        .           
        .                       // Update the node state from the parent state. The assigned
        .                       // state is actually a loop invariant but it will only be
        .                       // evaluated if there is at least one backlink to follow.
        .                       // Fully trusting llvm here to find this loop optimization.
  161,692 ( 0.00%)              match node_state {
        .                           // Path compression, make current node point to the same root.
        .                           NodeState::InCycle { .. } => {
   76,848 ( 0.00%)                      self.node_states[node] = node_state;
        .                           }
        .                           // Still visiting nodes, compress to cycle to the node
        .                           // at that depth.
    1,999 ( 0.00%)                  NodeState::BeingVisited { depth } => {
    3,998 ( 0.00%)                      self.node_states[node] =
    1,999 ( 0.00%)                          NodeState::InCycleWith { parent: self.node_stack[depth] };
        .                           }
        .                           // These are never allowed as parent nodes. InCycleWith
        .                           // should have been followed to a real parent and
        .                           // NotVisited can not be part of a cycle since it should
        .                           // have instead gotten explored.
        .                           NodeState::NotVisited | NodeState::InCycleWith { .. } => {
        .                               panic!("invalid parent state: {:?}", node_state)
        .                           }
        .                       }
        .                   }
  965,686 ( 0.00%)      }
        .           
        .               /// Walks a node that has never been visited before.
        .               ///
        .               /// Call this method when `inspect_node` has returned `None`. Having the
        .               /// caller decide avoids mutual recursion between the two methods and allows
        .               /// us to maintain an allocated stack for nodes on the path between calls.
        .               #[instrument(skip(self, initial), level = "debug")]
        .               fn walk_unvisited_node(&mut self, initial: G::Node) -> WalkReturn<S> {
-- line 410 ----------------------------------------
-- line 418 ----------------------------------------
        .                       successor_node: G::Node,
        .                   }
        .           
        .                   // Move the stack to a local variable. We want to utilize the existing allocation and
        .                   // mutably borrow it without borrowing self at the same time.
        .                   let mut successors_stack = core::mem::take(&mut self.successors_stack);
        .                   debug_assert_eq!(successors_stack.len(), 0);
        .           
   20,244 ( 0.00%)          let mut stack: Vec<VisitingNodeFrame<G, _>> = vec![VisitingNodeFrame {
        .                       node: initial,
        .                       depth: 0,
        .                       min_depth: 0,
        .                       iter: None,
        .                       successors_len: 0,
        .                       min_cycle_root: initial,
        .                       successor_node: initial,
        .                   }];
        .           
        .                   let mut return_value = None;
        .           
  152,964 ( 0.00%)          'recurse: while let Some(frame) = stack.last_mut() {
        .                       let VisitingNodeFrame {
  606,072 ( 0.00%)                  node,
        .                           depth,
        .                           iter,
  606,072 ( 0.00%)                  successors_len,
        .                           min_depth,
        .                           min_cycle_root,
        .                           successor_node,
        .                       } = frame;
        .           
  303,036 ( 0.00%)              let node = *node;
  606,072 ( 0.00%)              let depth = *depth;
        .           
  909,108 ( 0.00%)              let successors = match iter {
        .                           Some(iter) => iter,
        .                           None => {
        .                               // This None marks that we still have the initialize this node's frame.
        .                               debug!(?depth, ?node);
        .           
        .                               debug_assert!(matches!(self.node_states[node], NodeState::NotVisited));
        .           
        .                               // Push `node` onto the stack.
  611,856 ( 0.00%)                      self.node_states[node] = NodeState::BeingVisited { depth };
        .                               self.node_stack.push(node);
        .           
        .                               // Walk each successor of the node, looking to see if any of
        .                               // them can reach a node that is presently on the stack. If
        .                               // so, that means they can also reach us.
  305,928 ( 0.00%)                      *successors_len = successors_stack.len();
        .                               // Set and return a reference, this is currently empty.
  611,856 ( 0.00%)                      iter.get_or_insert(self.graph.successors(node))
        .                           }
        .                       };
        .           
        .                       // Now that iter is initialized, this is a constant for this frame.
  606,072 ( 0.00%)              let successors_len = *successors_len;
        .           
        .                       // Construct iterators for the nodes and walk results. There are two cases:
        .                       // * The walk of a successor node returned.
        .                       // * The remaining successor nodes.
        .                       let returned_walk =
        .                           return_value.take().into_iter().map(|walk| (*successor_node, Some(walk)));
        .           
        .                       let successor_walk = successors.by_ref().map(|successor_node| {
        .                           debug!(?node, ?successor_node);
  989,637 ( 0.01%)                  (successor_node, self.inspect_node(successor_node))
        .                       });
        .           
1,265,830 ( 0.01%)              for (successor_node, walk) in returned_walk.chain(successor_walk) {
1,759,860 ( 0.01%)                  match walk {
        .                               Some(WalkReturn::Cycle { min_depth: successor_min_depth }) => {
        .                                   // Track the minimum depth we can reach.
  159,944 ( 0.00%)                          assert!(successor_min_depth <= depth);
  198,484 ( 0.00%)                          if successor_min_depth < *min_depth {
        .                                       debug!(?node, ?successor_min_depth);
  115,620 ( 0.00%)                              *min_depth = successor_min_depth;
   38,540 ( 0.00%)                              *min_cycle_root = successor_node;
        .                                   }
        .                               }
        .           
        .                               Some(WalkReturn::Complete { scc_index: successor_scc_index }) => {
        .                                   // Push the completed SCC indices onto
        .                                   // the `successors_stack` for later.
        .                                   debug!(?node, ?successor_scc_index);
        .                                   successors_stack.push(successor_scc_index);
        .                               }
        .           
        .                               None => {
  300,144 ( 0.00%)                          let depth = depth + 1;
        .                                   debug!(?depth, ?successor_node);
        .                                   // Remember which node the return value will come from.
  150,072 ( 0.00%)                          frame.successor_node = successor_node;
        .                                   // Start a new stack frame the step into it.
        .                                   stack.push(VisitingNodeFrame {
        .                                       node: successor_node,
        .                                       depth,
        .                                       iter: None,
        .                                       successors_len: 0,
        .                                       min_depth: depth,
        .                                       min_cycle_root: successor_node,
-- line 518 ----------------------------------------
-- line 531 ----------------------------------------
        .                       let frame = stack.pop().unwrap();
        .           
        .                       // If `min_depth == depth`, then we are the root of the
        .                       // cycle: we can't reach anyone further down the stack.
        .           
        .                       // Pass the 'return value' down the stack.
        .                       // We return one frame at a time so there can't be another return value.
        .                       debug_assert!(return_value.is_none());
  305,928 ( 0.00%)              return_value = Some(if frame.min_depth == depth {
        .                           // Note that successor stack may have duplicates, so we
        .                           // want to remove those:
        .                           let deduplicated_successors = {
        .                               let duplicate_set = &mut self.duplicate_set;
        .                               duplicate_set.clear();
        .                               successors_stack
        .                                   .drain(successors_len..)
  249,907 ( 0.00%)                          .filter(move |&i| duplicate_set.insert(i))
        .                           };
        .                           let scc_index = self.scc_data.create_scc(deduplicated_successors);
  687,240 ( 0.00%)                  self.node_states[node] = NodeState::InCycle { scc_index };
        .                           WalkReturn::Complete { scc_index }
        .                       } else {
        .                           // We are not the head of the cycle. Return back to our
        .                           // caller. They will take ownership of the
        .                           // `self.successors` data that we pushed.
  230,544 ( 0.00%)                  self.node_states[node] = NodeState::InCycleWith { parent: frame.min_cycle_root };
        .                           WalkReturn::Cycle { min_depth: frame.min_depth }
        .                       });
        .                   }
        .           
        .                   // Keep the allocation we used for successors_stack.
   26,028 ( 0.00%)          self.successors_stack = successors_stack;
        .                   debug_assert_eq!(self.successors_stack.len(), 0);
        .           
        .                   return_value.unwrap()
        .               }
        .           }

6,684,573 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/graph/scc/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/result.rs
--------------------------------------------------------------------------------
Ir                  

-- line 491 ----------------------------------------
         .           
         .           use crate::iter::{self, FromIterator, FusedIterator, TrustedLen};
         .           use crate::ops::{self, ControlFlow, Deref, DerefMut};
         .           use crate::{convert, fmt, hint};
         .           
         .           /// `Result` is a type that represents either success ([`Ok`]) or failure ([`Err`]).
         .           ///
         .           /// See the [module documentation](self) for details.
       848 ( 0.00%)  #[derive(Copy, PartialEq, PartialOrd, Eq, Ord, Debug, Hash)]
         .           #[must_use = "this `Result` may be an `Err` variant, which should be handled"]
         .           #[rustc_diagnostic_item = "Result"]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           pub enum Result<T, E> {
         .               /// Contains the success value
         .               #[lang = "Ok"]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               Ok(#[stable(feature = "rust1", since = "1.0.0")] T),
-- line 507 ----------------------------------------
-- line 533 ----------------------------------------
         .               ///
         .               /// let x: Result<i32, &str> = Err("Some error message");
         .               /// assert_eq!(x.is_ok(), false);
         .               /// ```
         .               #[must_use = "if you intended to assert that this is ok, consider `.unwrap()` instead"]
         .               #[rustc_const_stable(feature = "const_result", since = "1.48.0")]
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
    45,752 ( 0.00%)      pub const fn is_ok(&self) -> bool {
    99,253 ( 0.00%)          matches!(*self, Ok(_))
   114,380 ( 0.00%)      }
         .           
         .               /// Returns `true` if the result is [`Ok`] wrapping a value matching the predicate.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// #![feature(is_some_with)]
         .               ///
-- line 551 ----------------------------------------
-- line 627 ----------------------------------------
         .               /// let x: Result<u32, &str> = Ok(2);
         .               /// assert_eq!(x.ok(), Some(2));
         .               ///
         .               /// let x: Result<u32, &str> = Err("Nothing here");
         .               /// assert_eq!(x.ok(), None);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
    18,166 ( 0.00%)      pub fn ok(self) -> Option<T> {
   193,818 ( 0.00%)          match self {
    71,615 ( 0.00%)              Ok(x) => Some(x),
     9,083 ( 0.00%)              Err(_) => None,
         .                   }
    81,747 ( 0.00%)      }
         .           
         .               /// Converts from `Result<T, E>` to [`Option<E>`].
         .               ///
         .               /// Converts `self` into an [`Option<E>`], consuming `self`,
         .               /// and discarding the success value, if any.
         .               ///
         .               /// # Examples
         .               ///
-- line 648 ----------------------------------------
-- line 657 ----------------------------------------
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn err(self) -> Option<E> {
         .                   match self {
         .                       Ok(_) => None,
         .                       Err(x) => Some(x),
         .                   }
         4 ( 0.00%)      }
         .           
         .               /////////////////////////////////////////////////////////////////////////
         .               // Adapter for working with references
         .               /////////////////////////////////////////////////////////////////////////
         .           
         .               /// Converts from `&Result<T, E>` to `Result<&T, &E>`.
         .               ///
         .               /// Produces a new `Result`, containing a reference
-- line 673 ----------------------------------------
-- line 683 ----------------------------------------
         .               ///
         .               /// let x: Result<u32, &str> = Err("Error");
         .               /// assert_eq!(x.as_ref(), Err(&"Error"));
         .               /// ```
         .               #[inline]
         .               #[rustc_const_stable(feature = "const_result", since = "1.48.0")]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub const fn as_ref(&self) -> Result<&T, &E> {
        62 ( 0.00%)          match *self {
         .                       Ok(ref x) => Ok(x),
         .                       Err(ref x) => Err(x),
         .                   }
         .               }
         .           
         .               /// Converts from `&mut Result<T, E>` to `Result<&mut T, &mut E>`.
         .               ///
         .               /// # Examples
-- line 699 ----------------------------------------
-- line 715 ----------------------------------------
         .               /// let mut x: Result<i32, i32> = Err(13);
         .               /// mutate(&mut x);
         .               /// assert_eq!(x.unwrap_err(), 0);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_result", issue = "82814")]
         .               pub const fn as_mut(&mut self) -> Result<&mut T, &mut E> {
         3 ( 0.00%)          match *self {
         .                       Ok(ref mut x) => Ok(x),
         .                       Err(ref mut x) => Err(x),
         .                   }
         .               }
         .           
         .               /////////////////////////////////////////////////////////////////////////
         .               // Transforming contained values
         .               /////////////////////////////////////////////////////////////////////////
-- line 731 ----------------------------------------
-- line 746 ----------------------------------------
         .               ///     match num.parse::<i32>().map(|i| i * 2) {
         .               ///         Ok(n) => println!("{}", n),
         .               ///         Err(..) => {}
         .               ///     }
         .               /// }
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
    62,028 ( 0.00%)      pub fn map<U, F: FnOnce(T) -> U>(self, op: F) -> Result<U, E> {
 1,820,728 ( 0.01%)          match self {
 2,657,538 ( 0.01%)              Ok(t) => Ok(op(t)),
   204,692 ( 0.00%)              Err(e) => Err(e),
         .                   }
    77,537 ( 0.00%)      }
         .           
         .               /// Returns the provided default (if [`Err`]), or
         .               /// applies a function to the contained value (if [`Ok`]),
         .               ///
         .               /// Arguments passed to `map_or` are eagerly evaluated; if you are passing
         .               /// the result of a function call, it is recommended to use [`map_or_else`],
         .               /// which is lazily evaluated.
         .               ///
-- line 767 ----------------------------------------
-- line 774 ----------------------------------------
         .               /// assert_eq!(x.map_or(42, |v| v.len()), 3);
         .               ///
         .               /// let x: Result<&str, _> = Err("bar");
         .               /// assert_eq!(x.map_or(42, |v| v.len()), 42);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "result_map_or", since = "1.41.0")]
         .               pub fn map_or<U, F: FnOnce(T) -> U>(self, default: U, f: F) -> U {
     5,309 ( 0.00%)          match self {
     1,816 ( 0.00%)              Ok(t) => f(t),
         .                       Err(_) => default,
         .                   }
         .               }
         .           
         .               /// Maps a `Result<T, E>` to `U` by applying fallback function `default` to
         .               /// a contained [`Err`] value, or function `f` to a contained [`Ok`] value.
         .               ///
         .               /// This function can be used to unpack a successful result
-- line 791 ----------------------------------------
-- line 831 ----------------------------------------
         .               /// let x: Result<u32, u32> = Ok(2);
         .               /// assert_eq!(x.map_err(stringify), Ok(2));
         .               ///
         .               /// let x: Result<u32, u32> = Err(13);
         .               /// assert_eq!(x.map_err(stringify), Err("error code: 13".to_string()));
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
 2,321,977 ( 0.01%)      pub fn map_err<F, O: FnOnce(E) -> F>(self, op: O) -> Result<T, F> {
11,510,492 ( 0.06%)          match self {
13,794,237 ( 0.07%)              Ok(t) => Ok(t),
     9,977 ( 0.00%)              Err(e) => Err(op(e)),
         .                   }
 2,176,114 ( 0.01%)      }
         .           
         .               /// Calls the provided closure with a reference to the contained value (if [`Ok`]).
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// #![feature(result_option_inspect)]
         .               ///
-- line 852 ----------------------------------------
-- line 1008 ----------------------------------------
         .               ///
         .               /// ```should_panic
         .               /// let x: Result<u32, &str> = Err("emergency failure");
         .               /// x.expect("Testing expect"); // panics with `Testing expect: emergency failure`
         .               /// ```
         .               #[inline]
         .               #[track_caller]
         .               #[stable(feature = "result_expect", since = "1.4.0")]
   963,044 ( 0.00%)      pub fn expect(self, msg: &str) -> T
         .               where
         .                   E: fmt::Debug,
         .               {
 3,551,109 ( 0.02%)          match self {
 1,053,409 ( 0.01%)              Ok(t) => t,
         .                       Err(e) => unwrap_failed(msg, &e),
         .                   }
   220,726 ( 0.00%)      }
         .           
         .               /// Returns the contained [`Ok`] value, consuming the `self` value.
         .               ///
         .               /// Because this function may panic, its use is generally discouraged.
         .               /// Instead, prefer to use pattern matching and handle the [`Err`]
         .               /// case explicitly, or call [`unwrap_or`], [`unwrap_or_else`], or
         .               /// [`unwrap_or_default`].
         .               ///
-- line 1032 ----------------------------------------
-- line 1051 ----------------------------------------
         .               ///
         .               /// ```should_panic
         .               /// let x: Result<u32, &str> = Err("emergency failure");
         .               /// x.unwrap(); // panics with `emergency failure`
         .               /// ```
         .               #[inline]
         .               #[track_caller]
         .               #[stable(feature = "rust1", since = "1.0.0")]
     5,032 ( 0.00%)      pub fn unwrap(self) -> T
         .               where
         .                   E: fmt::Debug,
         .               {
 1,480,693 ( 0.01%)          match self {
   660,693 ( 0.00%)              Ok(t) => t,
         .                       Err(e) => unwrap_failed("called `Result::unwrap()` on an `Err` value", &e),
         .                   }
     4,284 ( 0.00%)      }
         .           
         .               /// Returns the contained [`Ok`] value or a default
         .               ///
         .               /// Consumes the `self` argument then, if [`Ok`], returns the contained
         .               /// value, otherwise if [`Err`], returns the default value for that
         .               /// type.
         .               ///
         .               /// # Examples
-- line 1075 ----------------------------------------
-- line 1092 ----------------------------------------
         .               /// [`parse`]: str::parse
         .               /// [`FromStr`]: crate::str::FromStr
         .               #[inline]
         .               #[stable(feature = "result_unwrap_or_default", since = "1.16.0")]
         .               pub fn unwrap_or_default(self) -> T
         .               where
         .                   T: Default,
         .               {
    36,987 ( 0.00%)          match self {
    22,015 ( 0.00%)              Ok(x) => x,
         .                       Err(_) => Default::default(),
         .                   }
         .               }
         .           
         .               /// Returns the contained [`Err`] value, consuming the `self` value.
         .               ///
         .               /// # Panics
         .               ///
-- line 1109 ----------------------------------------
-- line 1152 ----------------------------------------
         .               /// ```
         .               #[inline]
         .               #[track_caller]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn unwrap_err(self) -> E
         .               where
         .                   T: fmt::Debug,
         .               {
     6,688 ( 0.00%)          match self {
         .                       Ok(t) => unwrap_failed("called `Result::unwrap_err()` on an `Ok` value", &t),
         .                       Err(e) => e,
         .                   }
         .               }
         .           
         .               /// Returns the contained [`Ok`] value, but never panics.
         .               ///
         .               /// Unlike [`unwrap`], this method is known to never panic on the
-- line 1168 ----------------------------------------
-- line 1190 ----------------------------------------
         .               /// ```
         .               #[unstable(feature = "unwrap_infallible", reason = "newly added", issue = "61695")]
         .               #[inline]
         .               pub fn into_ok(self) -> T
         .               where
         .                   E: Into<!>,
         .               {
         .                   match self {
 7,878,891 ( 0.04%)              Ok(x) => x,
         .                       Err(e) => e.into(),
         .                   }
         .               }
         .           
         .               /// Returns the contained [`Err`] value, but never panics.
         .               ///
         .               /// Unlike [`unwrap_err`], this method is known to never panic on the
         .               /// result types it is implemented for. Therefore, it can be used
-- line 1206 ----------------------------------------
-- line 1290 ----------------------------------------
         .               /// assert_eq!(Ok(2).and_then(sq).and_then(sq), Ok(16));
         .               /// assert_eq!(Ok(2).and_then(sq).and_then(err), Err(4));
         .               /// assert_eq!(Ok(2).and_then(err).and_then(sq), Err(2));
         .               /// assert_eq!(Err(3).and_then(sq).and_then(sq), Err(3));
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn and_then<U, F: FnOnce(T) -> Result<U, E>>(self, op: F) -> Result<U, E> {
   114,068 ( 0.00%)          match self {
   175,453 ( 0.00%)              Ok(t) => op(t),
    33,923 ( 0.00%)              Err(e) => Err(e),
         .                   }
         .               }
         .           
         .               /// Returns `res` if the result is [`Err`], otherwise returns the [`Ok`] value of `self`.
         .               ///
         .               /// Arguments passed to `or` are eagerly evaluated; if you are passing the
         .               /// result of a function call, it is recommended to use [`or_else`], which is
         .               /// lazily evaluated.
-- line 1308 ----------------------------------------
-- line 1355 ----------------------------------------
         .               /// assert_eq!(Ok(2).or_else(sq).or_else(sq), Ok(2));
         .               /// assert_eq!(Ok(2).or_else(err).or_else(sq), Ok(2));
         .               /// assert_eq!(Err(3).or_else(sq).or_else(err), Ok(9));
         .               /// assert_eq!(Err(3).or_else(err).or_else(err), Err(3));
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn or_else<F, O: FnOnce(E) -> Result<T, F>>(self, op: O) -> Result<T, F> {
    12,980 ( 0.00%)          match self {
    45,426 ( 0.00%)              Ok(t) => Ok(t),
         .                       Err(e) => op(e),
         .                   }
         .               }
         .           
         .               /// Returns the contained [`Ok`] value or a provided default.
         .               ///
         .               /// Arguments passed to `unwrap_or` are eagerly evaluated; if you are passing
         .               /// the result of a function call, it is recommended to use [`unwrap_or_else`],
-- line 1372 ----------------------------------------
-- line 1384 ----------------------------------------
         .               /// assert_eq!(x.unwrap_or(default), 9);
         .               ///
         .               /// let x: Result<u32, &str> = Err("error");
         .               /// assert_eq!(x.unwrap_or(default), default);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn unwrap_or(self, default: T) -> T {
    13,933 ( 0.00%)          match self {
         6 ( 0.00%)              Ok(t) => t,
         .                       Err(_) => default,
         .                   }
         .               }
         .           
         .               /// Returns the contained [`Ok`] value or computes it from a closure.
         .               ///
         .               ///
         .               /// # Examples
-- line 1401 ----------------------------------------
-- line 1405 ----------------------------------------
         .               /// ```
         .               /// fn count(x: &str) -> usize { x.len() }
         .               ///
         .               /// assert_eq!(Ok(2).unwrap_or_else(count), 2);
         .               /// assert_eq!(Err("foo").unwrap_or_else(count), 3);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         8 ( 0.00%)      pub fn unwrap_or_else<F: FnOnce(E) -> T>(self, op: F) -> T {
 4,258,004 ( 0.02%)          match self {
 2,004,277 ( 0.01%)              Ok(t) => t,
         .                       Err(e) => op(e),
         .                   }
        10 ( 0.00%)      }
         .           
         .               /// Returns the contained [`Ok`] value, consuming the `self` value,
         .               /// without checking that the value is not an [`Err`].
         .               ///
         .               /// # Safety
         .               ///
         .               /// Calling this method on an [`Err`] is *[undefined behavior]*.
         .               ///
-- line 1426 ----------------------------------------
-- line 1647 ----------------------------------------
         .               /// let x: Result<Option<i32>, SomeErr> = Ok(Some(5));
         .               /// let y: Option<Result<i32, SomeErr>> = Some(Ok(5));
         .               /// assert_eq!(x.transpose(), y);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "transpose_result", since = "1.33.0")]
         .               #[rustc_const_unstable(feature = "const_result", issue = "82814")]
         .               pub const fn transpose(self) -> Option<Result<T, E>> {
       584 ( 0.00%)          match self {
         .                       Ok(Some(x)) => Some(Ok(x)),
         .                       Ok(None) => None,
         .                       Err(e) => Some(Err(e)),
         .                   }
         .               }
         .           }
         .           
         .           impl<T, E> Result<Result<T, E>, E> {
-- line 1663 ----------------------------------------
-- line 1751 ----------------------------------------
         .           
         .           /////////////////////////////////////////////////////////////////////////////
         .           // Trait implementations
         .           /////////////////////////////////////////////////////////////////////////////
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T: Clone, E: Clone> Clone for Result<T, E> {
         .               #[inline]
   360,212 ( 0.00%)      fn clone(&self) -> Self {
 2,169,292 ( 0.01%)          match self {
 1,767,423 ( 0.01%)              Ok(x) => Ok(x.clone()),
   352,822 ( 0.00%)              Err(x) => Err(x.clone()),
         .                   }
   736,580 ( 0.00%)      }
         .           
         .               #[inline]
         .               fn clone_from(&mut self, source: &Self) {
         .                   match (self, source) {
         .                       (Ok(to), Ok(from)) => to.clone_from(from),
         .                       (Err(to), Err(from)) => to.clone_from(from),
         .                       (to, from) => *to = from.clone(),
         .                   }
-- line 1772 ----------------------------------------
-- line 2011 ----------------------------------------
         .               ///
         .               /// Since the third element caused an underflow, no further elements were taken,
         .               /// so the final value of `shared` is 6 (= `3 + 2 + 1`), not 16.
         .               #[inline]
         .               fn from_iter<I: IntoIterator<Item = Result<A, E>>>(iter: I) -> Result<V, E> {
         .                   // FIXME(#11084): This could be replaced with Iterator::scan when this
         .                   // performance bug is closed.
         .           
   147,754 ( 0.00%)          iter::process_results(iter.into_iter(), |i| i.collect())
         .               }
         .           }
         .           
         .           #[unstable(feature = "try_trait_v2", issue = "84277")]
         .           #[rustc_const_unstable(feature = "const_convert", issue = "88674")]
         .           impl<T, E> const ops::Try for Result<T, E> {
         .               type Output = T;
         .               type Residual = Result<convert::Infallible, E>;
         .           
         .               #[inline]
         .               fn from_output(output: Self::Output) -> Self {
    11,970 ( 0.00%)          Ok(output)
         .               }
         .           
         .               #[inline]
 4,834,635 ( 0.02%)      fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {
21,037,473 ( 0.11%)          match self {
24,229,965 ( 0.12%)              Ok(v) => ControlFlow::Continue(v),
   622,541 ( 0.00%)              Err(e) => ControlFlow::Break(Err(e)),
         .                   }
 3,387,255 ( 0.02%)      }
         .           }
         .           
         .           #[unstable(feature = "try_trait_v2", issue = "84277")]
         .           #[rustc_const_unstable(feature = "const_convert", issue = "88674")]
         .           impl<T, E, F: ~const From<E>> const ops::FromResidual<Result<convert::Infallible, E>>
         .               for Result<T, F>
         .           {
         .               #[inline]
         .               #[track_caller]
    59,616 ( 0.00%)      fn from_residual(residual: Result<convert::Infallible, E>) -> Self {
         .                   match residual {
   687,884 ( 0.00%)              Err(e) => Err(From::from(e)),
         .                   }
    39,744 ( 0.00%)      }
         .           }
         .           
         .           #[unstable(feature = "try_trait_v2_residual", issue = "91285")]
         .           impl<T, E> ops::Residual<T> for Result<convert::Infallible, E> {
         .               type TryType = Result<T, E>;
         .           }

12,713,167 ( 0.07%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/result.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs
--------------------------------------------------------------------------------
Ir                  

-- line 22 ----------------------------------------
         .           
         .           /// An entity in the Rust type system, which can be one of
         .           /// several kinds (types, lifetimes, and consts).
         .           /// To reduce memory usage, a `GenericArg` is an interned pointer,
         .           /// with the lowest 2 bits being reserved for a tag to
         .           /// indicate the type (`Ty`, `Region`, or `Const`) it points to.
         .           #[derive(Copy, Clone, PartialEq, Eq, Hash)]
         .           pub struct GenericArg<'tcx> {
 2,922,557 ( 0.01%)      ptr: NonZeroUsize,
 7,741,649 ( 0.04%)      marker: PhantomData<(Ty<'tcx>, ty::Region<'tcx>, &'tcx ty::Const<'tcx>)>,
         .           }
         .           
         .           const TAG_MASK: usize = 0b11;
         .           const TYPE_TAG: usize = 0b00;
         .           const REGION_TAG: usize = 0b01;
         .           const CONST_TAG: usize = 0b10;
         .           
    64,958 ( 0.00%)  #[derive(Debug, TyEncodable, TyDecodable, PartialEq, Eq, PartialOrd, Ord, HashStable)]
         .           pub enum GenericArgKind<'tcx> {
         .               Lifetime(ty::Region<'tcx>),
         .               Type(Ty<'tcx>),
         .               Const(&'tcx ty::Const<'tcx>),
         .           }
         .           
         .           impl<'tcx> GenericArgKind<'tcx> {
    16,050 ( 0.00%)      fn pack(self) -> GenericArg<'tcx> {
    16,050 ( 0.00%)          let (tag, ptr) = match self {
         .                       GenericArgKind::Lifetime(lt) => {
         .                           // Ensure we can use the tag bits.
         .                           assert_eq!(mem::align_of_val(lt) & TAG_MASK, 0);
         .                           (REGION_TAG, lt as *const _ as usize)
         .                       }
         .                       GenericArgKind::Type(ty) => {
         .                           // Ensure we can use the tag bits.
         .                           assert_eq!(mem::align_of_val(ty) & TAG_MASK, 0);
-- line 56 ----------------------------------------
-- line 58 ----------------------------------------
         .                       }
         .                       GenericArgKind::Const(ct) => {
         .                           // Ensure we can use the tag bits.
         .                           assert_eq!(mem::align_of_val(ct) & TAG_MASK, 0);
         .                           (CONST_TAG, ct as *const _ as usize)
         .                       }
         .                   };
         .           
 1,546,234 ( 0.01%)          GenericArg { ptr: unsafe { NonZeroUsize::new_unchecked(ptr | tag) }, marker: PhantomData }
    16,050 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> fmt::Debug for GenericArg<'tcx> {
         .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
         .                   match self.unpack() {
         .                       GenericArgKind::Lifetime(lt) => lt.fmt(f),
         .                       GenericArgKind::Type(ty) => ty.fmt(f),
         .                       GenericArgKind::Const(ct) => ct.fmt(f),
-- line 75 ----------------------------------------
-- line 85 ----------------------------------------
         .           
         .           impl<'tcx> PartialOrd for GenericArg<'tcx> {
         .               fn partial_cmp(&self, other: &GenericArg<'_>) -> Option<Ordering> {
         .                   Some(self.cmp(&other))
         .               }
         .           }
         .           
         .           impl<'tcx> From<ty::Region<'tcx>> for GenericArg<'tcx> {
 1,191,329 ( 0.01%)      fn from(r: ty::Region<'tcx>) -> GenericArg<'tcx> {
         .                   GenericArgKind::Lifetime(r).pack()
 1,191,329 ( 0.01%)      }
         .           }
         .           
         .           impl<'tcx> From<Ty<'tcx>> for GenericArg<'tcx> {
 3,341,772 ( 0.02%)      fn from(ty: Ty<'tcx>) -> GenericArg<'tcx> {
         .                   GenericArgKind::Type(ty).pack()
 3,341,772 ( 0.02%)      }
         .           }
         .           
         .           impl<'tcx> From<&'tcx ty::Const<'tcx>> for GenericArg<'tcx> {
        65 ( 0.00%)      fn from(c: &'tcx ty::Const<'tcx>) -> GenericArg<'tcx> {
         .                   GenericArgKind::Const(c).pack()
        65 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> GenericArg<'tcx> {
         .               #[inline]
         .               pub fn unpack(self) -> GenericArgKind<'tcx> {
         .                   let ptr = self.ptr.get();
         .                   unsafe {
44,573,862 ( 0.23%)              match ptr & TAG_MASK {
   888,051 ( 0.00%)                  REGION_TAG => GenericArgKind::Lifetime(&*((ptr & !TAG_MASK) as *const _)),
10,373,195 ( 0.05%)                  TYPE_TAG => GenericArgKind::Type(&*((ptr & !TAG_MASK) as *const _)),
       533 ( 0.00%)                  CONST_TAG => GenericArgKind::Const(&*((ptr & !TAG_MASK) as *const _)),
         .                           _ => intrinsics::unreachable(),
         .                       }
         .                   }
         .               }
         .           
         .               /// Unpack the `GenericArg` as a type when it is known certainly to be a type.
         .               /// This is true in cases where `Substs` is used in places where the kinds are known
         .               /// to be limited (e.g. in tuples, where the only parameters are type parameters).
         .               pub fn expect_ty(self) -> Ty<'tcx> {
         .                   match self.unpack() {
         .                       GenericArgKind::Type(ty) => ty,
         .                       _ => bug!("expected a type, but found another kind"),
         .                   }
    93,562 ( 0.00%)      }
         .           
         .               /// Unpack the `GenericArg` as a const when it is known certainly to be a const.
         .               pub fn expect_const(self) -> &'tcx ty::Const<'tcx> {
         .                   match self.unpack() {
         .                       GenericArgKind::Const(c) => c,
         .                       _ => bug!("expected a const, but found another kind"),
         .                   }
         .               }
-- line 140 ----------------------------------------
-- line 170 ----------------------------------------
         .                       GenericArgKind::Type(ty) => ty.visit_with(visitor),
         .                       GenericArgKind::Const(ct) => ct.visit_with(visitor),
         .                   }
         .               }
         .           }
         .           
         .           impl<'tcx, E: TyEncoder<'tcx>> Encodable<E> for GenericArg<'tcx> {
         .               fn encode(&self, e: &mut E) -> Result<(), E::Error> {
    33,438 ( 0.00%)          self.unpack().encode(e)
         .               }
         .           }
         .           
         .           impl<'tcx, D: TyDecoder<'tcx>> Decodable<D> for GenericArg<'tcx> {
    80,250 ( 0.00%)      fn decode(d: &mut D) -> GenericArg<'tcx> {
    80,250 ( 0.00%)          GenericArgKind::decode(d).pack()
         .               }
         .           }
         .           
         .           /// A substitution mapping generic parameters to new values.
         .           pub type InternalSubsts<'tcx> = List<GenericArg<'tcx>>;
         .           
         .           pub type SubstsRef<'tcx> = &'tcx InternalSubsts<'tcx>;
         .           
         .           impl<'a, 'tcx> InternalSubsts<'tcx> {
         .               /// Interpret these substitutions as the substitutions of a closure type.
         .               /// Closure substitutions have a particular structure controlled by the
         .               /// compiler that encodes information like the signature and closure kind;
         .               /// see `ty::ClosureSubsts` struct for more comments.
    12,925 ( 0.00%)      pub fn as_closure(&'a self) -> ClosureSubsts<'a> {
         .                   ClosureSubsts { substs: self }
    12,925 ( 0.00%)      }
         .           
         .               /// Interpret these substitutions as the substitutions of a generator type.
         .               /// Generator substitutions have a particular structure controlled by the
         .               /// compiler that encodes information like the signature and generator kind;
         .               /// see `ty::GeneratorSubsts` struct for more comments.
         .               pub fn as_generator(&'tcx self) -> GeneratorSubsts<'tcx> {
         .                   GeneratorSubsts { substs: self }
         .               }
-- line 208 ----------------------------------------
-- line 211 ----------------------------------------
         .               /// Inline const substitutions have a particular structure controlled by the
         .               /// compiler that encodes information like the inferred type;
         .               /// see `ty::InlineConstSubsts` struct for more comments.
         .               pub fn as_inline_const(&'tcx self) -> InlineConstSubsts<'tcx> {
         .                   InlineConstSubsts { substs: self }
         .               }
         .           
         .               /// Creates an `InternalSubsts` that maps each generic parameter to itself.
    94,990 ( 0.00%)      pub fn identity_for_item(tcx: TyCtxt<'tcx>, def_id: DefId) -> SubstsRef<'tcx> {
    16,000 ( 0.00%)          Self::for_item(tcx, def_id, |param, _| tcx.mk_param_from_def(param))
    85,491 ( 0.00%)      }
         .           
         .               /// Creates an `InternalSubsts` for generic parameter definitions,
         .               /// by calling closures to obtain each kind.
         .               /// The closures get to observe the `InternalSubsts` as they're
         .               /// being built, which can be used to correctly
         .               /// substitute defaults of generic parameters.
   766,449 ( 0.00%)      pub fn for_item<F>(tcx: TyCtxt<'tcx>, def_id: DefId, mut mk_kind: F) -> SubstsRef<'tcx>
         .               where
         .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
         .               {
         .                   let defs = tcx.generics_of(def_id);
         .                   let count = defs.count();
         .                   let mut substs = SmallVec::with_capacity(count);
   290,234 ( 0.00%)          Self::fill_item(&mut substs, tcx, defs, &mut mk_kind);
   172,006 ( 0.00%)          tcx.intern_substs(&substs)
   774,027 ( 0.00%)      }
         .           
         .               pub fn extend_to<F>(&self, tcx: TyCtxt<'tcx>, def_id: DefId, mut mk_kind: F) -> SubstsRef<'tcx>
         .               where
         .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
         .               {
         .                   Self::for_item(tcx, def_id, |param, substs| {
         .                       self.get(param.index as usize).cloned().unwrap_or_else(|| mk_kind(param, substs))
         .                   })
         .               }
         .           
 1,140,399 ( 0.01%)      pub fn fill_item<F>(
         .                   substs: &mut SmallVec<[GenericArg<'tcx>; 8]>,
         .                   tcx: TyCtxt<'tcx>,
         .                   defs: &ty::Generics,
         .                   mk_kind: &mut F,
         .               ) where
         .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
         .               {
   478,059 ( 0.00%)          if let Some(def_id) = defs.parent {
         .                       let parent_defs = tcx.generics_of(def_id);
    88,251 ( 0.00%)              Self::fill_item(substs, tcx, parent_defs, mk_kind);
         .                   }
         .                   Self::fill_single(substs, defs, mk_kind)
   905,208 ( 0.00%)      }
         .           
         .               pub fn fill_single<F>(
         .                   substs: &mut SmallVec<[GenericArg<'tcx>; 8]>,
         .                   defs: &ty::Generics,
         .                   mk_kind: &mut F,
         .               ) where
         .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
         .               {
         .                   substs.reserve(defs.params.len());
         .                   for param in &defs.params {
         .                       let kind = mk_kind(param, substs);
   739,923 ( 0.00%)              assert_eq!(param.index as usize, substs.len());
         .                       substs.push(kind);
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn types(&'a self) -> impl DoubleEndedIterator<Item = Ty<'tcx>> + 'a {
         .                   self.iter()
         .                       .filter_map(|k| if let GenericArgKind::Type(ty) = k.unpack() { Some(ty) } else { None })
-- line 281 ----------------------------------------
-- line 302 ----------------------------------------
         .                   self.iter().filter_map(|k| match k.unpack() {
         .                       GenericArgKind::Lifetime(_) => None,
         .                       generic => Some(generic),
         .                   })
         .               }
         .           
         .               #[inline]
         .               pub fn type_at(&self, i: usize) -> Ty<'tcx> {
 1,906,359 ( 0.01%)          if let GenericArgKind::Type(ty) = self[i].unpack() {
         .                       ty
         .                   } else {
         .                       bug!("expected type for param #{} in {:?}", i, self);
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn region_at(&self, i: usize) -> ty::Region<'tcx> {
-- line 318 ----------------------------------------
-- line 350 ----------------------------------------
         .               /// impl<U> X<U> for U { fn f<V>() {} }
         .               /// ```
         .               ///
         .               /// * If `self` is `[Self, S, T]`: the identity substs of `f` in the trait.
         .               /// * If `source_ancestor` is the def_id of the trait.
         .               /// * If `target_substs` is `[U]`, the substs for the impl.
         .               /// * Then we will return `[U, T]`, the subst for `f` in the impl that
         .               ///   are needed for it to match the trait.
    38,262 ( 0.00%)      pub fn rebase_onto(
         .                   &self,
         .                   tcx: TyCtxt<'tcx>,
         .                   source_ancestor: DefId,
         .                   target_substs: SubstsRef<'tcx>,
         .               ) -> SubstsRef<'tcx> {
         .                   let defs = tcx.generics_of(source_ancestor);
    10,932 ( 0.00%)          tcx.mk_substs(target_substs.iter().chain(self.iter().skip(defs.params.len())))
    43,728 ( 0.00%)      }
         .           
         .               pub fn truncate_to(&self, tcx: TyCtxt<'tcx>, generics: &ty::Generics) -> SubstsRef<'tcx> {
         .                   tcx.mk_substs(self.iter().take(generics.count()))
         .               }
         .           }
         .           
         .           impl<'tcx> TypeFoldable<'tcx> for SubstsRef<'tcx> {
    63,343 ( 0.00%)      fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(
         .                   self,
         .                   folder: &mut F,
         .               ) -> Result<Self, F::Error> {
         .                   // This code is hot enough that it's worth specializing for the most
         .                   // common length lists, to avoid the overhead of `SmallVec` creation.
         .                   // The match arms are in order of frequency. The 1, 2, and 0 cases are
         .                   // typically hit in 90--99.99% of cases. When folding doesn't change
         .                   // the substs, it's faster to reuse the existing substs rather than
         .                   // calling `intern_substs`.
11,142,782 ( 0.06%)          match self.len() {
         .                       1 => {
 2,071,260 ( 0.01%)                  let param0 = self[0].try_fold_with(folder)?;
 6,826,327 ( 0.04%)                  if param0 == self[0] { Ok(self) } else { Ok(folder.tcx().intern_substs(&[param0])) }
         .                       }
         .                       2 => {
 1,127,484 ( 0.01%)                  let param0 = self[0].try_fold_with(folder)?;
 2,348,082 ( 0.01%)                  let param1 = self[1].try_fold_with(folder)?;
 2,231,095 ( 0.01%)                  if param0 == self[0] && param1 == self[1] {
         .                               Ok(self)
         .                           } else {
 1,958,344 ( 0.01%)                      Ok(folder.tcx().intern_substs(&[param0, param1]))
         .                           }
         .                       }
         .                       0 => Ok(self),
         .                       _ => {
         .                           let params: SmallVec<[_; 8]> =
   633,099 ( 0.00%)                      self.iter().map(|k| k.try_fold_with(folder)).collect::<Result<_, _>>()?;
    41,719 ( 0.00%)                  if params[..] == self[..] {
         .                               Ok(self)
         .                           } else {
    61,254 ( 0.00%)                      Ok(folder.tcx().intern_substs(&params))
         .                           }
         .                       }
         .                   }
   320,384 ( 0.00%)      }
         .           
         .               fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
 2,111,501 ( 0.01%)          self.iter().try_for_each(|t| t.visit_with(visitor))
         .               }
         .           }
         .           
         .           ///////////////////////////////////////////////////////////////////////////
         .           // Public trait `Subst`
         .           //
         .           // Just call `foo.subst(tcx, substs)` to perform a substitution across
         .           // `foo`. Or use `foo.subst_spanned(tcx, substs, Some(span))` when
-- line 420 ----------------------------------------
-- line 435 ----------------------------------------
         .           
         .           impl<'tcx, T: TypeFoldable<'tcx>> Subst<'tcx> for T {
         .               fn subst_spanned(
         .                   self,
         .                   tcx: TyCtxt<'tcx>,
         .                   substs: &[GenericArg<'tcx>],
         .                   span: Option<Span>,
         .               ) -> T {
 3,865,756 ( 0.02%)          let mut folder = SubstFolder { tcx, substs, span, binders_passed: 0 };
         .                   self.fold_with(&mut folder)
         .               }
         .           }
         .           
         .           ///////////////////////////////////////////////////////////////////////////
         .           // The actual substitution engine itself is a type folder.
         .           
         .           struct SubstFolder<'a, 'tcx> {
-- line 451 ----------------------------------------
-- line 456 ----------------------------------------
         .               span: Option<Span>,
         .           
         .               /// Number of region binders we have passed through while doing the substitution
         .               binders_passed: u32,
         .           }
         .           
         .           impl<'a, 'tcx> TypeFolder<'tcx> for SubstFolder<'a, 'tcx> {
         .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
   737,851 ( 0.00%)          self.tcx
         .               }
         .           
         .               fn fold_binder<T: TypeFoldable<'tcx>>(
         .                   &mut self,
         .                   t: ty::Binder<'tcx, T>,
         .               ) -> ty::Binder<'tcx, T> {
 1,110,724 ( 0.01%)          self.binders_passed += 1;
   248,198 ( 0.00%)          let t = t.super_fold_with(self);
 1,110,724 ( 0.01%)          self.binders_passed -= 1;
         .                   t
         .               }
         .           
 1,364,274 ( 0.01%)      fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
         .                   // Note: This routine only handles regions that are bound on
         .                   // type declarations and other outer declarations, not those
         .                   // bound in *fn types*. Region substitution of the bound
         .                   // regions that appear in a function signature is done using
         .                   // the specialized routine `ty::replace_late_regions()`.
   454,758 ( 0.00%)          match *r {
   337,174 ( 0.00%)              ty::ReEarlyBound(data) => {
   337,174 ( 0.00%)                  let rk = self.substs.get(data.index as usize).map(|k| k.unpack());
         .                           match rk {
   168,587 ( 0.00%)                      Some(GenericArgKind::Lifetime(lt)) => self.shift_region_through_binders(lt),
         .                               _ => {
         .                                   let span = self.span.unwrap_or(DUMMY_SP);
         .                                   let msg = format!(
         .                                       "Region parameter out of range \
         .                                        when substituting in region {} (index={})",
         .                                       data.name, data.index
         .                                   );
         .                                   span_bug!(span, "{}", msg);
         .                               }
         .                           }
         .                       }
         .                       _ => r,
         .                   }
 1,591,653 ( 0.01%)      }
         .           
 3,292,089 ( 0.02%)      fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {
 1,097,363 ( 0.01%)          if !t.needs_subst() {
         .                       return t;
         .                   }
         .           
 1,722,370 ( 0.01%)          match *t.kind() {
 2,780,555 ( 0.01%)              ty::Param(p) => self.ty_for_param(p, t),
 1,830,444 ( 0.01%)              _ => t.super_fold_with(self),
         .                   }
 3,961,445 ( 0.02%)      }
         .           
       455 ( 0.00%)      fn fold_const(&mut self, c: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
       455 ( 0.00%)          if let ty::ConstKind::Param(p) = c.val {
         .                       self.const_for_param(p, c)
         .                   } else {
         .                       c.super_fold_with(self)
         .                   }
       520 ( 0.00%)      }
         .           
         .               #[inline]
         .               fn fold_mir_const(&mut self, c: mir::ConstantKind<'tcx>) -> mir::ConstantKind<'tcx> {
         .                   c.super_fold_with(self)
         .               }
         .           }
         .           
         .           impl<'a, 'tcx> SubstFolder<'a, 'tcx> {
         .               fn ty_for_param(&self, p: ty::ParamTy, source_ty: Ty<'tcx>) -> Ty<'tcx> {
         .                   // Look up the type in the substitutions. It really should be in there.
 1,112,222 ( 0.01%)          let opt_ty = self.substs.get(p.index as usize).map(|k| k.unpack());
         .                   let ty = match opt_ty {
         .                       Some(GenericArgKind::Type(ty)) => ty,
         .                       Some(kind) => {
         .                           let span = self.span.unwrap_or(DUMMY_SP);
         .                           span_bug!(
         .                               span,
         .                               "expected type for `{:?}` ({:?}/{}) but found {:?} \
         .                                when substituting, substs={:?}",
-- line 539 ----------------------------------------
-- line 562 ----------------------------------------
         .               }
         .           
         .               fn const_for_param(
         .                   &self,
         .                   p: ParamConst,
         .                   source_ct: &'tcx ty::Const<'tcx>,
         .               ) -> &'tcx ty::Const<'tcx> {
         .                   // Look up the const in the substitutions. It really should be in there.
       130 ( 0.00%)          let opt_ct = self.substs.get(p.index as usize).map(|k| k.unpack());
         .                   let ct = match opt_ct {
         .                       Some(GenericArgKind::Const(ct)) => ct,
         .                       Some(kind) => {
         .                           let span = self.span.unwrap_or(DUMMY_SP);
         .                           span_bug!(
         .                               span,
         .                               "expected const for `{:?}` ({:?}/{}) but found {:?} \
         .                                when substituting substs={:?}",
-- line 578 ----------------------------------------
-- line 645 ----------------------------------------
         .               fn shift_vars_through_binders<T: TypeFoldable<'tcx>>(&self, val: T) -> T {
         .                   debug!(
         .                       "shift_vars(val={:?}, binders_passed={:?}, has_escaping_bound_vars={:?})",
         .                       val,
         .                       self.binders_passed,
         .                       val.has_escaping_bound_vars()
         .                   );
         .           
 2,010,331 ( 0.01%)          if self.binders_passed == 0 || !val.has_escaping_bound_vars() {
         .                       return val;
         .                   }
         .           
         .                   let result = ty::fold::shift_vars(self.tcx(), val, self.binders_passed);
         .                   debug!("shift_vars: shifted result = {:?}", result);
         .           
         .                   result
         .               }
         .           
         .               fn shift_region_through_binders(&self, region: ty::Region<'tcx>) -> ty::Region<'tcx> {
   425,698 ( 0.00%)          if self.binders_passed == 0 || !region.has_escaping_bound_vars() {
         .                       return region;
         .                   }
         .                   ty::fold::shift_region(self.tcx, region, self.binders_passed)
         .               }
         .           }
         .           
         .           /// Stores the user-given substs to reach some fully qualified path
         .           /// (e.g., `<T>::Item` or `<T as Trait>::Item`).
         .           #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
    56,838 ( 0.00%)  #[derive(HashStable, TypeFoldable, Lift)]
         .           pub struct UserSubsts<'tcx> {
         .               /// The substitutions for the item as given by the user.
         .               pub substs: SubstsRef<'tcx>,
         .           
         .               /// The self type, in the case of a `<T>::Item` path (when applied
         .               /// to an inherent impl). See `UserSelfTy` below.
    11,416 ( 0.00%)      pub user_self_ty: Option<UserSelfTy<'tcx>>,
         .           }
         .           
         .           /// Specifies the user-given self type. In the case of a path that
         .           /// refers to a member in an inherent impl, this self type is
         .           /// sometimes needed to constrain the type parameters on the impl. For
         .           /// example, in this code:
         .           ///
         .           /// ```
-- line 689 ----------------------------------------
-- line 696 ----------------------------------------
         .           /// self type `Foo<u32>`. Then we can instantiate the parameters of
         .           /// the impl (with the substs from `UserSubsts`) and apply those to
         .           /// the self type, giving `Foo<?A>`. Finally, we unify that with
         .           /// the self type here, which contains `?A` to be `&'static u32`
         .           #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
         .           #[derive(HashStable, TypeFoldable, Lift)]
         .           pub struct UserSelfTy<'tcx> {
         .               pub impl_def_id: DefId,
    10,788 ( 0.00%)      pub self_ty: Ty<'tcx>,
         .           }

17,172,801 ( 0.09%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/search.rs
--------------------------------------------------------------------------------
Ir                   

-- line 40 ----------------------------------------
          .           
          .           impl<BorrowType: marker::BorrowType, K, V> NodeRef<BorrowType, K, V, marker::LeafOrInternal> {
          .               /// Looks up a given key in a (sub)tree headed by the node, recursively.
          .               /// Returns a `Found` with the handle of the matching KV, if any. Otherwise,
          .               /// returns a `GoDown` with the handle of the leaf edge where the key belongs.
          .               ///
          .               /// The result is meaningful only if the tree is ordered by key, like the tree
          .               /// in a `BTreeMap` is.
 10,332,528 ( 0.05%)      pub fn search_tree<Q: ?Sized>(
          .                   mut self,
          .                   key: &Q,
          .               ) -> SearchResult<BorrowType, K, V, marker::LeafOrInternal, marker::Leaf>
          .               where
          .                   Q: Ord,
          .                   K: Borrow<Q>,
          .               {
          .                   loop {
          .                       self = match self.search_node(key) {
          .                           Found(handle) => return Found(handle),
  4,218,406 ( 0.02%)                  GoDown(handle) => match handle.force() {
          .                               Leaf(leaf) => return GoDown(leaf),
          .                               Internal(internal) => internal.descend(),
          .                           },
          .                       }
          .                   }
  4,509,457 ( 0.02%)      }
          .           
          .               /// Descends to the nearest node where the edge matching the lower bound
          .               /// of the range is different from the edge matching the upper bound, i.e.,
          .               /// the nearest node that has at least one key contained in the range.
          .               ///
          .               /// If found, returns an `Ok` with that node, the strictly ascending pair of
          .               /// edge indices in the node delimiting the range, and the corresponding
          .               /// pair of bounds for continuing the search in the child nodes, in case
-- line 73 ----------------------------------------
-- line 202 ----------------------------------------
          .               unsafe fn find_key_index<Q: ?Sized>(&self, key: &Q, start_index: usize) -> IndexResult
          .               where
          .                   Q: Ord,
          .                   K: Borrow<Q>,
          .               {
          .                   let node = self.reborrow();
          .                   let keys = node.keys();
          .                   debug_assert!(start_index <= keys.len());
 33,209,293 ( 0.17%)          for (offset, k) in unsafe { keys.get_unchecked(start_index..) }.iter().enumerate() {
183,651,898 ( 0.94%)              match key.cmp(k.borrow()) {
          .                           Ordering::Greater => {}
          .                           Ordering::Equal => return IndexResult::KV(start_index + offset),
          .                           Ordering::Less => return IndexResult::Edge(start_index + offset),
          .                       }
          .                   }
          .                   IndexResult::Edge(keys.len())
          .               }
          .           
-- line 219 ----------------------------------------

  7,099,825 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/search.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs
--------------------------------------------------------------------------------
Ir                   

-- line 70 ----------------------------------------
          .           
          .                   impl<'a, T> $name<'a, T> {
          .                       // Helper function for creating a slice from the iterator.
          .                       #[inline(always)]
          .                       fn make_slice(&self) -> &'a [T] {
          .                           // SAFETY: the iterator was created from a slice with pointer
          .                           // `self.ptr` and length `len!(self)`. This guarantees that all
          .                           // the prerequisites for `from_raw_parts` are fulfilled.
 10,868,895 ( 0.06%)                  unsafe { from_raw_parts(self.ptr.as_ptr(), len!(self)) }
          .                       }
          .           
          .                       // Helper function for moving the start of the iterator forwards by `offset` elements,
          .                       // returning the old start.
          .                       // Unsafe because the offset must not exceed `self.len()`.
          .                       #[inline(always)]
          .                       unsafe fn post_inc_start(&mut self, offset: isize) -> * $raw_mut T {
          .                           if mem::size_of::<T>() == 0 {
          .                               zst_shrink!(self, offset);
          .                               self.ptr.as_ptr()
          .                           } else {
  4,424,106 ( 0.02%)                      let old = self.ptr.as_ptr();
          .                               // SAFETY: the caller guarantees that `offset` doesn't exceed `self.len()`,
          .                               // so this new pointer is inside `self` and thus guaranteed to be non-null.
 12,588,454 ( 0.06%)                      self.ptr = unsafe { NonNull::new_unchecked(self.ptr.as_ptr().offset(offset)) };
    737,351 ( 0.00%)                      old
          .                           }
  1,474,702 ( 0.01%)              }
          .           
          .                       // Helper function for moving the end of the iterator backwards by `offset` elements,
          .                       // returning the new end.
          .                       // Unsafe because the offset must not exceed `self.len()`.
          .                       #[inline(always)]
          .                       unsafe fn pre_dec_end(&mut self, offset: isize) -> * $raw_mut T {
          .                           if mem::size_of::<T>() == 0 {
          .                               zst_shrink!(self, offset);
          .                               self.ptr.as_ptr()
          .                           } else {
          .                               // SAFETY: the caller guarantees that `offset` doesn't exceed `self.len()`,
          .                               // which is guaranteed to not overflow an `isize`. Also, the resulting pointer
          .                               // is in bounds of `slice`, which fulfills the other requirements for `offset`.
    367,170 ( 0.00%)                      self.end = unsafe { self.end.offset(-offset) };
    104,512 ( 0.00%)                      self.end
          .                           }
    104,512 ( 0.00%)              }
          .                   }
          .           
          .                   #[stable(feature = "rust1", since = "1.0.0")]
          .                   impl<T> ExactSizeIterator for $name<'_, T> {
          .                       #[inline(always)]
          .                       fn len(&self) -> usize {
  2,791,702 ( 0.01%)                  len!(self)
     16,236 ( 0.00%)              }
          .           
          .                       #[inline(always)]
          .                       fn is_empty(&self) -> bool {
          .                           is_empty!(self)
          .                       }
          .                   }
          .           
          .                   #[stable(feature = "rust1", since = "1.0.0")]
          .                   impl<'a, T> Iterator for $name<'a, T> {
          .                       type Item = $elem;
          .           
          .                       #[inline]
  2,592,489 ( 0.01%)              fn next(&mut self) -> Option<$elem> {
          .                           // could be implemented with slices, but this avoids bounds checks
          .           
          .                           // SAFETY: `assume` calls are safe since a slice's start pointer
          .                           // must be non-null, and slices over non-ZSTs must also have a
          .                           // non-null end pointer. The call to `next_unchecked!` is safe
          .                           // since we check if the iterator is empty first.
          .                           unsafe {
  4,926,846 ( 0.03%)                      assume(!self.ptr.as_ptr().is_null());
  4,320,815 ( 0.02%)                      if mem::size_of::<T>() != 0 {
  4,828,753 ( 0.02%)                          assume(!self.end.is_null());
          .                               }
364,421,807 ( 1.87%)                      if is_empty!(self) {
    126,812 ( 0.00%)                          None
          .                               } else {
  1,474,798 ( 0.01%)                          Some(next_unchecked!(self))
          .                               }
          .                           }
  2,592,489 ( 0.01%)              }
          .           
          .                       #[inline]
          .                       fn size_hint(&self) -> (usize, Option<usize>) {
  9,006,030 ( 0.05%)                  let exact = len!(self);
          .                           (exact, Some(exact))
          .                       }
          .           
          .                       #[inline]
          .                       fn count(self) -> usize {
          .                           len!(self)
          .                       }
          .           
          .                       #[inline]
          .                       fn nth(&mut self, n: usize) -> Option<$elem> {
    110,173 ( 0.00%)                  if n >= len!(self) {
          .                               // This iterator is now empty.
          .                               if mem::size_of::<T>() == 0 {
          .                                   // We have to do it this way as `ptr` may never be 0, but `end`
          .                                   // could be (due to wrapping).
          .                                   self.end = self.ptr.as_ptr();
          .                               } else {
          .                                   // SAFETY: end can't be 0 if T isn't ZST because ptr isn't 0 and end >= ptr
          .                                   unsafe {
-- line 175 ----------------------------------------
-- line 203 ----------------------------------------
          .                       // faster to compile.
          .                       #[inline]
          .                       fn for_each<F>(mut self, mut f: F)
          .                       where
          .                           Self: Sized,
          .                           F: FnMut(Self::Item),
          .                       {
          .                           while let Some(x) = self.next() {
     46,868 ( 0.00%)                      f(x);
          .                           }
          .                       }
          .           
          .                       // We override the default implementation, which uses `try_fold`,
          .                       // because this simple implementation generates less LLVM IR and is
          .                       // faster to compile.
          .                       #[inline]
          .                       fn all<F>(&mut self, mut f: F) -> bool
          .                       where
          .                           Self: Sized,
          .                           F: FnMut(Self::Item) -> bool,
          .                       {
     17,565 ( 0.00%)                  while let Some(x) = self.next() {
     78,139 ( 0.00%)                      if !f(x) {
          .                                   return false;
          .                               }
          .                           }
          .                           true
          .                       }
          .           
          .                       // We override the default implementation, which uses `try_fold`,
          .                       // because this simple implementation generates less LLVM IR and is
          .                       // faster to compile.
          .                       #[inline]
         32 ( 0.00%)              fn any<F>(&mut self, mut f: F) -> bool
          .                       where
          .                           Self: Sized,
          .                           F: FnMut(Self::Item) -> bool,
          .                       {
  3,266,454 ( 0.02%)                  while let Some(x) = self.next() {
  5,596,850 ( 0.03%)                      if f(x) {
          .                                   return true;
          .                               }
          .                           }
          .                           false
         32 ( 0.00%)              }
          .           
          .                       // We override the default implementation, which uses `try_fold`,
          .                       // because this simple implementation generates less LLVM IR and is
          .                       // faster to compile.
          .                       #[inline]
    111,569 ( 0.00%)              fn find<P>(&mut self, mut predicate: P) -> Option<Self::Item>
          .                       where
          .                           Self: Sized,
          .                           P: FnMut(&Self::Item) -> bool,
          .                       {
    440,434 ( 0.00%)                  while let Some(x) = self.next() {
    597,642 ( 0.00%)                      if predicate(&x) {
      1,346 ( 0.00%)                          return Some(x);
          .                               }
          .                           }
     21,583 ( 0.00%)                  None
    148,017 ( 0.00%)              }
          .           
          .                       // We override the default implementation, which uses `try_fold`,
          .                       // because this simple implementation generates less LLVM IR and is
          .                       // faster to compile.
          .                       #[inline]
          .                       fn find_map<B, F>(&mut self, mut f: F) -> Option<B>
          .                       where
          .                           Self: Sized,
          .                           F: FnMut(Self::Item) -> Option<B>,
          .                       {
    313,982 ( 0.00%)                  while let Some(x) = self.next() {
  1,146,302 ( 0.01%)                      if let Some(y) = f(x) {
    199,516 ( 0.00%)                          return Some(y);
          .                               }
          .                           }
          .                           None
     33,193 ( 0.00%)              }
          .           
          .                       // We override the default implementation, which uses `try_fold`,
          .                       // because this simple implementation generates less LLVM IR and is
          .                       // faster to compile. Also, the `assume` avoids a bounds check.
          .                       #[inline]
          .                       #[rustc_inherit_overflow_checks]
          .                       fn position<P>(&mut self, mut predicate: P) -> Option<usize> where
          .                           Self: Sized,
          .                           P: FnMut(Self::Item) -> bool,
          .                       {
          .                           let n = len!(self);
          .                           let mut i = 0;
          .                           while let Some(x) = self.next() {
  4,234,314 ( 0.02%)                      if predicate(x) {
          .                                   // SAFETY: we are guaranteed to be in bounds by the loop invariant:
          .                                   // when `i >= n`, `self.next()` returns `None` and the loop breaks.
          .                                   unsafe { assume(i < n) };
          .                                   return Some(i);
          .                               }
          .                               i += 1;
          .                           }
          .                           None
-- line 303 ----------------------------------------
-- line 308 ----------------------------------------
          .                       // faster to compile. Also, the `assume` avoids a bounds check.
          .                       #[inline]
          .                       fn rposition<P>(&mut self, mut predicate: P) -> Option<usize> where
          .                           P: FnMut(Self::Item) -> bool,
          .                           Self: Sized + ExactSizeIterator + DoubleEndedIterator
          .                       {
          .                           let n = len!(self);
          .                           let mut i = n;
     54,434 ( 0.00%)                  while let Some(x) = self.next_back() {
    783,771 ( 0.00%)                      i -= 1;
    619,291 ( 0.00%)                      if predicate(x) {
          .                                   // SAFETY: `i` must be lower than `n` since it starts at `n`
          .                                   // and is only decreasing.
          .                                   unsafe { assume(i < n) };
          .                                   return Some(i);
          .                               }
          .                           }
          .                           None
          .                       }
-- line 326 ----------------------------------------
-- line 332 ----------------------------------------
          .                           // the returned references is guaranteed to refer to an element
          .                           // of the slice and thus guaranteed to be valid.
          .                           //
          .                           // Also note that the caller also guarantees that we're never
          .                           // called with the same index again, and that no other methods
          .                           // that will access this subslice are called, so it is valid
          .                           // for the returned reference to be mutable in the case of
          .                           // `IterMut`
    510,679 ( 0.00%)                  unsafe { & $( $mut_ )? * self.ptr.as_ptr().add(idx) }
          .                       }
          .           
          .                       $($extra)*
          .                   }
          .           
          .                   #[stable(feature = "rust1", since = "1.0.0")]
          .                   impl<'a, T> DoubleEndedIterator for $name<'a, T> {
          .                       #[inline]
    156,768 ( 0.00%)              fn next_back(&mut self) -> Option<$elem> {
          .                           // could be implemented with slices, but this avoids bounds checks
          .           
          .                           // SAFETY: `assume` calls are safe since a slice's start pointer must be non-null,
          .                           // and slices over non-ZSTs must also have a non-null end pointer.
          .                           // The call to `next_back_unchecked!` is safe since we check if the iterator is
          .                           // empty first.
          .                           unsafe {
    209,024 ( 0.00%)                      assume(!self.ptr.as_ptr().is_null());
    261,280 ( 0.00%)                      if mem::size_of::<T>() != 0 {
    104,609 ( 0.00%)                          assume(!self.end.is_null());
          .                               }
  7,612,784 ( 0.04%)                      if is_empty!(self) {
          .                                   None
          .                               } else {
    104,512 ( 0.00%)                          Some(next_back_unchecked!(self))
          .                               }
          .                           }
    156,768 ( 0.00%)              }
          .           
          .                       #[inline]
          .                       fn nth_back(&mut self, n: usize) -> Option<$elem> {
          .                           if n >= len!(self) {
          .                               // This iterator is now empty.
          .                               self.end = self.ptr.as_ptr();
          .                               return None;
          .                           }
-- line 375 ----------------------------------------

 66,994,013 ( 0.34%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/hir/map/mod.rs
--------------------------------------------------------------------------------
Ir                  

-- line 17 ----------------------------------------
         .           use rustc_span::hygiene::MacroKind;
         .           use rustc_span::source_map::Spanned;
         .           use rustc_span::symbol::{kw, sym, Ident, Symbol};
         .           use rustc_span::Span;
         .           use rustc_target::spec::abi::Abi;
         .           use std::collections::VecDeque;
         .           
         .           fn fn_decl<'hir>(node: Node<'hir>) -> Option<&'hir FnDecl<'hir>> {
    39,520 ( 0.00%)      match node {
         .                   Node::Item(Item { kind: ItemKind::Fn(sig, _, _), .. })
         .                   | Node::TraitItem(TraitItem { kind: TraitItemKind::Fn(sig, _), .. })
         .                   | Node::ImplItem(ImplItem { kind: ImplItemKind::Fn(sig, _), .. }) => Some(&sig.decl),
         .                   Node::Expr(Expr { kind: ExprKind::Closure(_, fn_decl, ..), .. })
         .                   | Node::ForeignItem(ForeignItem { kind: ForeignItemKind::Fn(fn_decl, ..), .. }) => {
         .                       Some(fn_decl)
         .                   }
         .                   _ => None,
-- line 33 ----------------------------------------
-- line 39 ----------------------------------------
         .                   Node::Item(Item { kind: ItemKind::Fn(sig, _, _), .. })
         .                   | Node::TraitItem(TraitItem { kind: TraitItemKind::Fn(sig, _), .. })
         .                   | Node::ImplItem(ImplItem { kind: ImplItemKind::Fn(sig, _), .. }) => Some(sig),
         .                   _ => None,
         .               }
         .           }
         .           
         .           pub fn associated_body<'hir>(node: Node<'hir>) -> Option<BodyId> {
   459,545 ( 0.00%)      match node {
         .                   Node::Item(Item {
         .                       kind: ItemKind::Const(_, body) | ItemKind::Static(.., body) | ItemKind::Fn(.., body),
         .                       ..
         .                   })
         .                   | Node::TraitItem(TraitItem {
         .                       kind:
         .                           TraitItemKind::Const(_, Some(body)) | TraitItemKind::Fn(_, TraitFn::Provided(body)),
         .                       ..
         .                   })
         .                   | Node::ImplItem(ImplItem {
         .                       kind: ImplItemKind::Const(_, body) | ImplItemKind::Fn(_, body),
         .                       ..
         .                   })
    79,344 ( 0.00%)          | Node::Expr(Expr { kind: ExprKind::Closure(.., body, _, _), .. }) => Some(*body),
         .           
         .                   Node::AnonConst(constant) => Some(constant.body),
         .           
         .                   _ => None,
         .               }
         .           }
         .           
         .           fn is_body_owner<'hir>(node: Node<'hir>, hir_id: HirId) -> bool {
-- line 69 ----------------------------------------
-- line 83 ----------------------------------------
         .           pub struct ParentHirIterator<'hir> {
         .               current_id: HirId,
         .               map: Map<'hir>,
         .           }
         .           
         .           impl<'hir> Iterator for ParentHirIterator<'hir> {
         .               type Item = (HirId, Node<'hir>);
         .           
    54,194 ( 0.00%)      fn next(&mut self) -> Option<Self::Item> {
     7,742 ( 0.00%)          if self.current_id == CRATE_HIR_ID {
         .                       return None;
         .                   }
         .                   loop {
         .                       // There are nodes that do not have entries, so we need to skip them.
         .                       let parent_id = self.map.get_parent_node(self.current_id);
         .           
    23,226 ( 0.00%)              if parent_id == self.current_id {
         .                           self.current_id = CRATE_HIR_ID;
         .                           return None;
         .                       }
         .           
    15,484 ( 0.00%)              self.current_id = parent_id;
    61,936 ( 0.00%)              if let Some(node) = self.map.find(parent_id) {
    30,968 ( 0.00%)                  return Some((parent_id, node));
         .                       }
         .                       // If this `HirId` doesn't have an entry, skip it and look for its `parent_id`.
         .                   }
    69,678 ( 0.00%)      }
         .           }
         .           
         .           /// An iterator that walks up the ancestor tree of a given `HirId`.
         .           /// Constructed using `tcx.hir().parent_owner_iter(hir_id)`.
         .           pub struct ParentOwnerIterator<'hir> {
         .               current_id: HirId,
         .               map: Map<'hir>,
         .           }
         .           
         .           impl<'hir> Iterator for ParentOwnerIterator<'hir> {
         .               type Item = (LocalDefId, OwnerNode<'hir>);
         .           
   471,843 ( 0.00%)      fn next(&mut self) -> Option<Self::Item> {
   157,281 ( 0.00%)          if self.current_id.local_id.index() != 0 {
    27,866 ( 0.00%)              self.current_id.local_id = ItemLocalId::new(0);
   111,464 ( 0.00%)              if let Some(node) = self.map.tcx.hir_owner(self.current_id.owner) {
         .                           return Some((self.current_id.owner, node.node));
         .                       }
         .                   }
    24,561 ( 0.00%)          if self.current_id == CRATE_HIR_ID {
         .                       return None;
         .                   }
         .                   loop {
         .                       // There are nodes that do not have entries, so we need to skip them.
         .                       let parent_id = self.map.def_key(self.current_id.owner).parent;
         .           
         .                       let parent_id = parent_id.map_or(CRATE_HIR_ID.owner, |local_def_index| {
         .                           let def_id = LocalDefId { local_def_index };
         .                           self.map.local_def_id_to_hir_id(def_id).owner
         .                       });
    49,122 ( 0.00%)              self.current_id = HirId::make_owner(parent_id);
         .           
         .                       // If this `HirId` doesn't have an entry, skip it and look for its `parent_id`.
    49,122 ( 0.00%)              if let Some(node) = self.map.tcx.hir_owner(self.current_id.owner) {
         .                           return Some((self.current_id.owner, node.node));
         .                       }
         .                   }
   419,416 ( 0.00%)      }
         .           }
         .           
         .           impl<'hir> Map<'hir> {
       217 ( 0.00%)      pub fn krate(&self) -> &'hir Crate<'hir> {
        31 ( 0.00%)          self.tcx.hir_crate(())
       248 ( 0.00%)      }
         .           
         7 ( 0.00%)      pub fn root_module(&self) -> &'hir Mod<'hir> {
         1 ( 0.00%)          match self.tcx.hir_owner(CRATE_DEF_ID).map(|o| o.node) {
         .                       Some(OwnerNode::Crate(item)) => item,
         .                       _ => bug!(),
         .                   }
         8 ( 0.00%)      }
         .           
         .               pub fn items(&self) -> impl Iterator<Item = &'hir Item<'hir>> + 'hir {
         .                   let krate = self.krate();
         .                   krate.owners.iter().filter_map(|owner| match owner.as_ref()?.node() {
         .                       OwnerNode::Item(item) => Some(item),
         .                       _ => None,
         .                   })
         .               }
-- line 169 ----------------------------------------
-- line 184 ----------------------------------------
         .           
         .               #[inline]
         .               pub fn def_path_hash(self, def_id: LocalDefId) -> DefPathHash {
         .                   // Accessing the DefPathHash is ok, it is incr. comp. stable.
         .                   self.tcx.untracked_resolutions.definitions.def_path_hash(def_id)
         .               }
         .           
         .               #[inline]
   810,420 ( 0.00%)      pub fn local_def_id(&self, hir_id: HirId) -> LocalDefId {
   133,656 ( 0.00%)          self.opt_local_def_id(hir_id).unwrap_or_else(|| {
         .                       bug!(
         .                           "local_def_id: no entry for `{:?}`, which has a map of `{:?}`",
         .                           hir_id,
         .                           self.find(hir_id)
         .                       )
         .                   })
   607,815 ( 0.00%)      }
         .           
         .               #[inline]
   356,416 ( 0.00%)      pub fn opt_local_def_id(&self, hir_id: HirId) -> Option<LocalDefId> {
   124,653 ( 0.00%)          if hir_id.local_id == ItemLocalId::new(0) {
         .                       Some(hir_id.owner)
         .                   } else {
    68,368 ( 0.00%)              self.tcx
         .                           .hir_owner_nodes(hir_id.owner)?
         .                           .local_id_to_def_id
         .                           .get(&hir_id.local_id)
         .                           .copied()
         .                   }
   400,968 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn local_def_id_to_hir_id(&self, def_id: LocalDefId) -> HirId {
         .                   // FIXME(#85914) is this access safe for incr. comp.?
    25,330 ( 0.00%)          self.tcx.untracked_resolutions.definitions.local_def_id_to_hir_id(def_id)
         .               }
         .           
         7 ( 0.00%)      pub fn iter_local_def_id(&self) -> impl Iterator<Item = LocalDefId> + '_ {
         .                   // Create a dependency to the crate to be sure we reexcute this when the amount of
         .                   // definitions change.
         1 ( 0.00%)          self.tcx.ensure().hir_crate(());
         .                   self.tcx.untracked_resolutions.definitions.iter_local_def_id()
         9 ( 0.00%)      }
         .           
    66,563 ( 0.00%)      pub fn opt_def_kind(&self, local_def_id: LocalDefId) -> Option<DefKind> {
         .                   let hir_id = self.local_def_id_to_hir_id(local_def_id);
   123,617 ( 0.00%)          let def_kind = match self.find(hir_id)? {
    14,400 ( 0.00%)              Node::Item(item) => match item.kind {
         .                           ItemKind::Static(..) => DefKind::Static,
         .                           ItemKind::Const(..) => DefKind::Const,
         .                           ItemKind::Fn(..) => DefKind::Fn,
         .                           ItemKind::Macro(..) => DefKind::Macro(MacroKind::Bang),
         .                           ItemKind::Mod(..) => DefKind::Mod,
         .                           ItemKind::OpaqueTy(..) => DefKind::OpaqueTy,
         .                           ItemKind::TyAlias(..) => DefKind::TyAlias,
         .                           ItemKind::Enum(..) => DefKind::Enum,
-- line 239 ----------------------------------------
-- line 247 ----------------------------------------
         .                           ItemKind::GlobalAsm(..) => DefKind::GlobalAsm,
         .                           ItemKind::Impl { .. } => DefKind::Impl,
         .                       },
         .                       Node::ForeignItem(item) => match item.kind {
         .                           ForeignItemKind::Fn(..) => DefKind::Fn,
         .                           ForeignItemKind::Static(..) => DefKind::Static,
         .                           ForeignItemKind::Type => DefKind::ForeignTy,
         .                       },
       194 ( 0.00%)              Node::TraitItem(item) => match item.kind {
         .                           TraitItemKind::Const(..) => DefKind::AssocConst,
         .                           TraitItemKind::Fn(..) => DefKind::AssocFn,
         .                           TraitItemKind::Type(..) => DefKind::AssocTy,
         .                       },
     2,578 ( 0.00%)              Node::ImplItem(item) => match item.kind {
         .                           ImplItemKind::Const(..) => DefKind::AssocConst,
         .                           ImplItemKind::Fn(..) => DefKind::AssocFn,
         .                           ImplItemKind::TyAlias(..) => DefKind::AssocTy,
         .                       },
         .                       Node::Variant(_) => DefKind::Variant,
         .                       Node::Ctor(variant_data) => {
         .                           // FIXME(eddyb) is this even possible, if we have a `Node::Ctor`?
     3,010 ( 0.00%)                  assert_ne!(variant_data.ctor_hir_id(), None);
         .           
     3,046 ( 0.00%)                  let ctor_of = match self.find(self.get_parent_node(hir_id)) {
         .                               Some(Node::Item(..)) => def::CtorOf::Struct,
         .                               Some(Node::Variant(..)) => def::CtorOf::Variant,
         .                               _ => unreachable!(),
         .                           };
     1,204 ( 0.00%)                  DefKind::Ctor(ctor_of, def::CtorKind::from_hir(variant_data))
     2,408 ( 0.00%)              }
         .                       Node::AnonConst(_) => {
         .                           let inline = match self.find(self.get_parent_node(hir_id)) {
         .                               Some(Node::Expr(&Expr {
         .                                   kind: ExprKind::ConstBlock(ref anon_const), ..
         .                               })) if anon_const.hir_id == hir_id => true,
         .                               _ => false,
         .                           };
         .                           if inline { DefKind::InlineConst } else { DefKind::AnonConst }
         .                       }
         .                       Node::Field(_) => DefKind::Field,
     1,565 ( 0.00%)              Node::Expr(expr) => match expr.kind {
         .                           ExprKind::Closure(.., None) => DefKind::Closure,
         .                           ExprKind::Closure(.., Some(_)) => DefKind::Generator,
         .                           _ => bug!("def_kind: unsupported node: {}", self.node_to_string(hir_id)),
         .                       },
     3,210 ( 0.00%)              Node::GenericParam(param) => match param.kind {
         .                           GenericParamKind::Lifetime { .. } => DefKind::LifetimeParam,
         .                           GenericParamKind::Type { .. } => DefKind::TyParam,
         .                           GenericParamKind::Const { .. } => DefKind::ConstParam,
         .                       },
         .                       Node::Crate(_) => DefKind::Mod,
         .                       Node::Stmt(_)
         .                       | Node::PathSegment(_)
         .                       | Node::Ty(_)
-- line 300 ----------------------------------------
-- line 304 ----------------------------------------
         .                       | Node::Binding(_)
         .                       | Node::Local(_)
         .                       | Node::Param(_)
         .                       | Node::Arm(_)
         .                       | Node::Lifetime(_)
         .                       | Node::Visibility(_)
         .                       | Node::Block(_) => return None,
         .                   };
    37,720 ( 0.00%)          Some(def_kind)
    95,090 ( 0.00%)      }
         .           
         .               pub fn def_kind(&self, local_def_id: LocalDefId) -> DefKind {
         .                   self.opt_def_kind(local_def_id)
         .                       .unwrap_or_else(|| bug!("def_kind: unsupported node: {:?}", local_def_id))
         .               }
         .           
 6,959,024 ( 0.04%)      pub fn find_parent_node(&self, id: HirId) -> Option<HirId> {
   869,878 ( 0.00%)          if id.local_id == ItemLocalId::from_u32(0) {
         .                       Some(self.tcx.hir_owner_parent(id.owner))
         .                   } else {
 1,698,928 ( 0.01%)              let owner = self.tcx.hir_owner_nodes(id.owner)?;
   849,464 ( 0.00%)              let node = owner.nodes[id.local_id].as_ref()?;
 2,548,392 ( 0.01%)              let hir_id = HirId { owner: id.owner, local_id: node.parent };
         .                       Some(hir_id)
         .                   }
 6,959,024 ( 0.04%)      }
         .           
    28,907 ( 0.00%)      pub fn get_parent_node(&self, hir_id: HirId) -> HirId {
 4,709,150 ( 0.02%)          self.find_parent_node(hir_id).unwrap()
    57,814 ( 0.00%)      }
         .           
         .               /// Retrieves the `Node` corresponding to `id`, returning `None` if cannot be found.
 3,628,448 ( 0.02%)      pub fn find(&self, id: HirId) -> Option<Node<'hir>> {
   453,556 ( 0.00%)          if id.local_id == ItemLocalId::from_u32(0) {
         .                       let owner = self.tcx.hir_owner(id.owner)?;
   256,293 ( 0.00%)              Some(owner.node.into())
         .                   } else {
   394,368 ( 0.00%)              let owner = self.tcx.hir_owner_nodes(id.owner)?;
   197,184 ( 0.00%)              let node = owner.nodes[id.local_id].as_ref()?;
   591,552 ( 0.00%)              Some(node.node)
         .                   }
 3,628,448 ( 0.02%)      }
         .           
         .               /// Retrieves the `Node` corresponding to `id`, returning `None` if cannot be found.
         .               #[inline]
         .               pub fn find_by_def_id(&self, id: LocalDefId) -> Option<Node<'hir>> {
    62,873 ( 0.00%)          self.find(self.local_def_id_to_hir_id(id))
         .               }
         .           
         .               /// Retrieves the `Node` corresponding to `id`, panicking if it cannot be found.
   305,103 ( 0.00%)      pub fn get(&self, id: HirId) -> Node<'hir> {
   154,570 ( 0.00%)          self.find(id).unwrap_or_else(|| bug!("couldn't find hir id {} in the HIR map", id))
   203,402 ( 0.00%)      }
         .           
         .               /// Retrieves the `Node` corresponding to `id`, panicking if it cannot be found.
         .               #[inline]
         .               pub fn get_by_def_id(&self, id: LocalDefId) -> Node<'hir> {
         .                   self.find_by_def_id(id).unwrap_or_else(|| bug!("couldn't find {:?} in the HIR map", id))
         .               }
         .           
     7,882 ( 0.00%)      pub fn get_if_local(&self, id: DefId) -> Option<Node<'hir>> {
     3,941 ( 0.00%)          id.as_local().and_then(|id| self.find(self.local_def_id_to_hir_id(id)))
     7,882 ( 0.00%)      }
         .           
         .               pub fn get_generics(&self, id: LocalDefId) -> Option<&'hir Generics<'hir>> {
         .                   let node = self.tcx.hir_owner(id)?;
         .                   match node.node {
         .                       OwnerNode::ImplItem(impl_item) => Some(&impl_item.generics),
         .                       OwnerNode::TraitItem(trait_item) => Some(&trait_item.generics),
         .                       OwnerNode::Item(Item {
         .                           kind:
-- line 374 ----------------------------------------
-- line 381 ----------------------------------------
         .                               | ItemKind::TraitAlias(generics, _)
         .                               | ItemKind::Impl(Impl { generics, .. }),
         .                           ..
         .                       }) => Some(generics),
         .                       _ => None,
         .                   }
         .               }
         .           
   681,667 ( 0.00%)      pub fn item(&self, id: ItemId) -> &'hir Item<'hir> {
   194,762 ( 0.00%)          self.tcx.hir_owner(id.def_id).unwrap().node.expect_item()
   779,048 ( 0.00%)      }
         .           
    17,654 ( 0.00%)      pub fn trait_item(&self, id: TraitItemId) -> &'hir TraitItem<'hir> {
     5,044 ( 0.00%)          self.tcx.hir_owner(id.def_id).unwrap().node.expect_trait_item()
    20,176 ( 0.00%)      }
         .           
   519,743 ( 0.00%)      pub fn impl_item(&self, id: ImplItemId) -> &'hir ImplItem<'hir> {
   148,498 ( 0.00%)          self.tcx.hir_owner(id.def_id).unwrap().node.expect_impl_item()
   593,992 ( 0.00%)      }
         .           
         .               pub fn foreign_item(&self, id: ForeignItemId) -> &'hir ForeignItem<'hir> {
         .                   self.tcx.hir_owner(id.def_id).unwrap().node.expect_foreign_item()
         .               }
         .           
   682,199 ( 0.00%)      pub fn body(&self, id: BodyId) -> &'hir Body<'hir> {
   194,914 ( 0.00%)          self.tcx.hir_owner_nodes(id.hir_id.owner).unwrap().bodies[&id.hir_id.local_id]
   779,656 ( 0.00%)      }
         .           
    23,712 ( 0.00%)      pub fn fn_decl_by_hir_id(&self, hir_id: HirId) -> Option<&'hir FnDecl<'hir>> {
    23,712 ( 0.00%)          if let Some(node) = self.find(hir_id) {
         .                       fn_decl(node)
         .                   } else {
         .                       bug!("no node for hir_id `{}`", hir_id)
         .                   }
    15,808 ( 0.00%)      }
         .           
         .               pub fn fn_sig_by_hir_id(&self, hir_id: HirId) -> Option<&'hir FnSig<'hir>> {
         .                   if let Some(node) = self.find(hir_id) {
         .                       fn_sig(node)
         .                   } else {
         .                       bug!("no node for hir_id `{}`", hir_id)
         .                   }
         .               }
-- line 423 ----------------------------------------
-- line 430 ----------------------------------------
         .                   }
         .           
         .                   bug!("no `enclosing_body_owner` for hir_id `{}`", hir_id);
         .               }
         .           
         .               /// Returns the `HirId` that corresponds to the definition of
         .               /// which this is the body of, i.e., a `fn`, `const` or `static`
         .               /// item (possibly associated), a closure, or a `hir::AnonConst`.
   463,416 ( 0.00%)      pub fn body_owner(&self, BodyId { hir_id }: BodyId) -> HirId {
         .                   let parent = self.get_parent_node(hir_id);
   347,562 ( 0.00%)          assert!(self.find(parent).map_or(false, |n| is_body_owner(n, hir_id)));
         .                   parent
   463,416 ( 0.00%)      }
         .           
   144,600 ( 0.00%)      pub fn body_owner_def_id(&self, id: BodyId) -> LocalDefId {
   222,760 ( 0.00%)          self.local_def_id(self.body_owner(id))
   144,600 ( 0.00%)      }
         .           
         .               /// Given a `HirId`, returns the `BodyId` associated with it,
         .               /// if the node is a body owner, otherwise returns `None`.
    26,617 ( 0.00%)      pub fn maybe_body_owned_by(&self, hir_id: HirId) -> Option<BodyId> {
    85,635 ( 0.00%)          self.find(hir_id).map(associated_body).flatten()
    79,851 ( 0.00%)      }
         .           
         .               /// Given a body owner's id, returns the `BodyId` associated with it.
    52,056 ( 0.00%)      pub fn body_owned_by(&self, id: HirId) -> BodyId {
         .                   self.maybe_body_owned_by(id).unwrap_or_else(|| {
         .                       span_bug!(
         .                           self.span(id),
         .                           "body_owned_by: {} has no associated body",
         .                           self.node_to_string(id)
         .                       );
         .                   })
    40,488 ( 0.00%)      }
         .           
     2,579 ( 0.00%)      pub fn body_param_names(&self, id: BodyId) -> impl Iterator<Item = Ident> + 'hir {
    25,333 ( 0.00%)          self.body(id).params.iter().map(|arg| match arg.pat.kind {
     8,798 ( 0.00%)              PatKind::Binding(_, _, ident, _) => ident,
         .                       _ => Ident::empty(),
         .                   })
     7,737 ( 0.00%)      }
         .           
         .               /// Returns the `BodyOwnerKind` of this `LocalDefId`.
         .               ///
         .               /// Panics if `LocalDefId` does not have an associated body.
    86,763 ( 0.00%)      pub fn body_owner_kind(&self, id: HirId) -> BodyOwnerKind {
   222,175 ( 0.00%)          match self.get(id) {
         .                       Node::Item(&Item { kind: ItemKind::Const(..), .. })
         .                       | Node::TraitItem(&TraitItem { kind: TraitItemKind::Const(..), .. })
         .                       | Node::ImplItem(&ImplItem { kind: ImplItemKind::Const(..), .. })
         .                       | Node::AnonConst(_) => BodyOwnerKind::Const,
         .                       Node::Ctor(..)
         .                       | Node::Item(&Item { kind: ItemKind::Fn(..), .. })
         .                       | Node::TraitItem(&TraitItem { kind: TraitItemKind::Fn(..), .. })
         .                       | Node::ImplItem(&ImplItem { kind: ImplItemKind::Fn(..), .. }) => BodyOwnerKind::Fn,
         .                       Node::Item(&Item { kind: ItemKind::Static(_, m, _), .. }) => BodyOwnerKind::Static(m),
         .                       Node::Expr(&Expr { kind: ExprKind::Closure(..), .. }) => BodyOwnerKind::Closure,
         .                       node => bug!("{:#?} is not a body node", node),
         .                   }
    86,763 ( 0.00%)      }
         .           
         .               /// Returns the `ConstContext` of the body associated with this `LocalDefId`.
         .               ///
         .               /// Panics if `LocalDefId` does not have an associated body.
         .               ///
         .               /// This should only be used for determining the context of a body, a return
         .               /// value of `Some` does not always suggest that the owner of the body is `const`,
         .               /// just that it has to be checked as if it were.
    94,096 ( 0.00%)      pub fn body_const_context(&self, did: LocalDefId) -> Option<ConstContext> {
         .                   let hir_id = self.local_def_id_to_hir_id(did);
   141,144 ( 0.00%)          let ccx = match self.body_owner_kind(hir_id) {
         .                       BodyOwnerKind::Const => ConstContext::Const,
         .                       BodyOwnerKind::Static(mt) => ConstContext::Static(mt),
         .           
    10,316 ( 0.00%)              BodyOwnerKind::Fn if self.tcx.is_constructor(did.to_def_id()) => return None,
    10,316 ( 0.00%)              BodyOwnerKind::Fn if self.tcx.is_const_fn_raw(did.to_def_id()) => ConstContext::ConstFn,
         .                       BodyOwnerKind::Fn
    20,632 ( 0.00%)                  if self.tcx.has_attr(did.to_def_id(), sym::default_method_body_is_const) =>
         .                       {
         .                           ConstContext::ConstFn
         .                       }
         .                       BodyOwnerKind::Fn | BodyOwnerKind::Closure => return None,
         .                   };
         .           
         .                   Some(ccx)
   105,858 ( 0.00%)      }
         .           
         .               /// Returns an iterator of the `DefId`s for all body-owners in this
         .               /// crate. If you would prefer to iterate over the bodies
         .               /// themselves, you can do `self.hir().krate().body_ids.iter()`.
        21 ( 0.00%)      pub fn body_owners(self) -> impl Iterator<Item = LocalDefId> + 'hir {
         3 ( 0.00%)          self.krate()
         .                       .owners
         .                       .iter_enumerated()
         .                       .flat_map(move |(owner, owner_info)| {
    28,521 ( 0.00%)                  let bodies = &owner_info.as_ref()?.nodes.bodies;
         .                           Some(bodies.iter().map(move |&(local_id, _)| {
       313 ( 0.00%)                      let hir_id = HirId { owner, local_id };
         .                               let body_id = BodyId { hir_id };
    27,981 ( 0.00%)                      self.body_owner_def_id(body_id)
         .                           }))
         .                       })
         .                       .flatten()
        15 ( 0.00%)      }
         .           
        10 ( 0.00%)      pub fn par_body_owners<F: Fn(LocalDefId) + Sync + Send>(self, f: F) {
         .                   use rustc_data_structures::sync::{par_iter, ParallelIterator};
         .                   #[cfg(parallel_compiler)]
         .                   use rustc_rayon::iter::IndexedParallelIterator;
         .           
         3 ( 0.00%)          par_iter(&self.krate().owners.raw).enumerate().for_each(|(owner, owner_info)| {
         .                       let owner = LocalDefId::new(owner);
    57,042 ( 0.00%)              if let Some(owner_info) = owner_info {
         .                           par_iter(owner_info.nodes.bodies.range(..)).for_each(|(local_id, _)| {
         .                               let hir_id = HirId { owner, local_id: *local_id };
         .                               let body_id = BodyId { hir_id };
    26,028 ( 0.00%)                      f(self.body_owner_def_id(body_id))
         .                           })
         .                       }
         .                   });
         8 ( 0.00%)      }
         .           
         .               pub fn ty_param_owner(&self, id: HirId) -> LocalDefId {
         .                   match self.get(id) {
         .                       Node::Item(&Item { kind: ItemKind::Trait(..) | ItemKind::TraitAlias(..), .. }) => {
         .                           id.expect_owner()
         .                       }
         .                       Node::GenericParam(_) => self.get_parent_item(id),
         .                       _ => bug!("ty_param_owner: {} not a type parameter", self.node_to_string(id)),
-- line 558 ----------------------------------------
-- line 564 ----------------------------------------
         .                       Node::Item(&Item { kind: ItemKind::Trait(..) | ItemKind::TraitAlias(..), .. }) => {
         .                           kw::SelfUpper
         .                       }
         .                       Node::GenericParam(param) => param.name.ident().name,
         .                       _ => bug!("ty_param_name: {} not a type parameter", self.node_to_string(id)),
         .                   }
         .               }
         .           
       585 ( 0.00%)      pub fn trait_impls(&self, trait_did: DefId) -> &'hir [LocalDefId] {
        65 ( 0.00%)          self.tcx.all_local_trait_impls(()).get(&trait_did).map_or(&[], |xs| &xs[..])
       585 ( 0.00%)      }
         .           
         .               /// Gets the attributes on the crate. This is preferable to
         .               /// invoking `krate.attrs` because it registers a tighter
         .               /// dep-graph access.
         .               pub fn krate_attrs(&self) -> &'hir [ast::Attribute] {
        20 ( 0.00%)          self.attrs(CRATE_HIR_ID)
         .               }
         .           
       140 ( 0.00%)      pub fn get_module(&self, module: LocalDefId) -> (&'hir Mod<'hir>, Span, HirId) {
         .                   let hir_id = HirId::make_owner(module);
       100 ( 0.00%)          match self.tcx.hir_owner(module).map(|o| o.node) {
        18 ( 0.00%)              Some(OwnerNode::Item(&Item { span, kind: ItemKind::Mod(ref m), .. })) => {
         .                           (m, span, hir_id)
         .                       }
        33 ( 0.00%)              Some(OwnerNode::Crate(item)) => (item, item.inner, hir_id),
         .                       node => panic!("not a module: {:?}", node),
         .                   }
       180 ( 0.00%)      }
         .           
         .               /// Walks the contents of a crate. See also `Crate::visit_all_items`.
        11 ( 0.00%)      pub fn walk_toplevel_module(self, visitor: &mut impl Visitor<'hir>) {
        30 ( 0.00%)          let (top_mod, span, hir_id) = self.get_module(CRATE_DEF_ID);
         .                   visitor.visit_mod(top_mod, span, hir_id);
         8 ( 0.00%)      }
         .           
         .               /// Walks the attributes in a crate.
        20 ( 0.00%)      pub fn walk_attributes(self, visitor: &mut impl Visitor<'hir>) {
         2 ( 0.00%)          let krate = self.krate();
         .                   for (owner, info) in krate.owners.iter_enumerated() {
    38,028 ( 0.00%)              if let Some(info) = info {
         .                           for (local_id, attrs) in info.attrs.map.iter() {
         .                               let id = HirId { owner, local_id: *local_id };
         .                               for a in *attrs {
    46,125 ( 0.00%)                          visitor.visit_attribute(id, a)
         .                               }
         .                           }
         .                       }
         .                   }
        16 ( 0.00%)      }
         .           
         .               /// Visits all items in the crate in some deterministic (but
         .               /// unspecified) order. If you just need to process every item,
         .               /// but don't care about nesting, this method is the best choice.
         .               ///
         .               /// If you do care about nesting -- usually because your algorithm
         .               /// follows lexical scoping rules -- then you want a different
         .               /// approach. You should override `visit_nested_item` in your
         .               /// visitor and then call `intravisit::walk_crate` instead.
       144 ( 0.00%)      pub fn visit_all_item_likes<V>(&self, visitor: &mut V)
         .               where
         .                   V: itemlikevisit::ItemLikeVisitor<'hir>,
         .               {
        20 ( 0.00%)          let krate = self.krate();
        70 ( 0.00%)          for owner in krate.owners.iter().filter_map(Option::as_ref) {
   207,108 ( 0.00%)              match owner.node() {
   154,800 ( 0.00%)                  OwnerNode::Item(item) => visitor.visit_item(item),
         .                           OwnerNode::ForeignItem(item) => visitor.visit_foreign_item(item),
     7,734 ( 0.00%)                  OwnerNode::ImplItem(item) => visitor.visit_impl_item(item),
         .                           OwnerNode::TraitItem(item) => visitor.visit_trait_item(item),
         .                           OwnerNode::Crate(_) => {}
         .                       }
         .                   }
       144 ( 0.00%)      }
         .           
         .               /// A parallel version of `visit_all_item_likes`.
         .               pub fn par_visit_all_item_likes<V>(&self, visitor: &V)
         .               where
         .                   V: itemlikevisit::ParItemLikeVisitor<'hir> + Sync + Send,
         .               {
         1 ( 0.00%)          let krate = self.krate();
         2 ( 0.00%)          par_for_each_in(&krate.owners.raw, |owner| match owner.as_ref().map(OwnerInfo::node) {
     3,600 ( 0.00%)              Some(OwnerNode::Item(item)) => visitor.visit_item(item),
         .                       Some(OwnerNode::ForeignItem(item)) => visitor.visit_foreign_item(item),
     2,578 ( 0.00%)              Some(OwnerNode::ImplItem(item)) => visitor.visit_impl_item(item),
        97 ( 0.00%)              Some(OwnerNode::TraitItem(item)) => visitor.visit_trait_item(item),
         .                       Some(OwnerNode::Crate(_)) | None => {}
         .                   })
         .               }
         .           
       344 ( 0.00%)      pub fn visit_item_likes_in_module<V>(&self, module: LocalDefId, visitor: &mut V)
         .               where
         .                   V: ItemLikeVisitor<'hir>,
         .               {
        44 ( 0.00%)          let module = self.tcx.hir_module_items(module);
         .           
        48 ( 0.00%)          for id in module.items.iter() {
   162,000 ( 0.00%)              visitor.visit_item(self.item(*id));
         .                   }
         .           
        48 ( 0.00%)          for id in module.trait_items.iter() {
     3,880 ( 0.00%)              visitor.visit_trait_item(self.trait_item(*id));
         .                   }
         .           
        48 ( 0.00%)          for id in module.impl_items.iter() {
   100,542 ( 0.00%)              visitor.visit_impl_item(self.impl_item(*id));
         .                   }
         .           
        48 ( 0.00%)          for id in module.foreign_items.iter() {
         .                       visitor.visit_foreign_item(self.foreign_item(*id));
         .                   }
       352 ( 0.00%)      }
         .           
        46 ( 0.00%)      pub fn for_each_module(&self, f: impl Fn(LocalDefId)) {
         .                   let mut queue = VecDeque::new();
         .                   queue.push_back(CRATE_DEF_ID);
         .           
        32 ( 0.00%)          while let Some(id) = queue.pop_front() {
         .                       f(id);
        12 ( 0.00%)              let items = self.tcx.hir_module_items(id);
       128 ( 0.00%)              queue.extend(items.submodules.iter().copied())
         .                   }
        40 ( 0.00%)      }
         .           
         .               #[cfg(not(parallel_compiler))]
         .               #[inline]
         .               pub fn par_for_each_module(&self, f: impl Fn(LocalDefId)) {
         4 ( 0.00%)          self.for_each_module(f)
         .               }
         .           
         .               #[cfg(parallel_compiler)]
         .               pub fn par_for_each_module(&self, f: impl Fn(LocalDefId) + Sync) {
         .                   use rustc_data_structures::sync::{par_iter, ParallelIterator};
         .                   par_iter_submodules(self.tcx, CRATE_DEF_ID, &f);
         .           
         .                   fn par_iter_submodules<F>(tcx: TyCtxt<'_>, module: LocalDefId, f: &F)
-- line 699 ----------------------------------------
-- line 703 ----------------------------------------
         .                       (*f)(module);
         .                       let items = tcx.hir_module_items(module);
         .                       par_iter(&items.submodules[..]).for_each(|&sm| par_iter_submodules(tcx, sm, f));
         .                   }
         .               }
         .           
         .               /// Returns an iterator for the nodes in the ancestor tree of the `current_id`
         .               /// until the crate root is reached. Prefer this over your own loop using `get_parent_node`.
     7,740 ( 0.00%)      pub fn parent_iter(self, current_id: HirId) -> ParentHirIterator<'hir> {
         .                   ParentHirIterator { current_id, map: self }
    30,960 ( 0.00%)      }
         .           
         .               /// Returns an iterator for the nodes in the ancestor tree of the `current_id`
         .               /// until the crate root is reached. Prefer this over your own loop using `get_parent_node`.
         .               pub fn parent_owner_iter(self, current_id: HirId) -> ParentOwnerIterator<'hir> {
         .                   ParentOwnerIterator { current_id, map: self }
   153,638 ( 0.00%)      }
         .           
         .               /// Checks if the node is left-hand side of an assignment.
         .               pub fn is_lhs(&self, id: HirId) -> bool {
         .                   match self.find(self.get_parent_node(id)) {
         .                       Some(Node::Expr(expr)) => match expr.kind {
         .                           ExprKind::Assign(lhs, _rhs, _span) => lhs.hir_id == id,
         .                           _ => false,
         .                       },
-- line 727 ----------------------------------------
-- line 792 ----------------------------------------
         .                   }
         .                   None
         .               }
         .           
         .               /// Retrieves the `HirId` for `id`'s parent item, or `id` itself if no
         .               /// parent item is in this map. The "parent item" is the closest parent node
         .               /// in the HIR which is recorded by the map and is an item, either an item
         .               /// in a module, trait, or impl.
    46,494 ( 0.00%)      pub fn get_parent_item(&self, hir_id: HirId) -> LocalDefId {
   418,446 ( 0.00%)          if let Some((def_id, _node)) = self.parent_owner_iter(hir_id).next() {
         .                       def_id
         .                   } else {
         .                       CRATE_DEF_ID
         .                   }
    92,988 ( 0.00%)      }
         .           
         .               /// Returns the `HirId` of `id`'s nearest module parent, or `id` itself if no
         .               /// module parent is in this map.
         .               pub(super) fn get_module_parent_node(&self, hir_id: HirId) -> LocalDefId {
    42,676 ( 0.00%)          for (def_id, node) in self.parent_owner_iter(hir_id) {
    23,730 ( 0.00%)              if let OwnerNode::Item(&Item { kind: ItemKind::Mod(_), .. }) = node {
         .                           return def_id;
         .                       }
         .                   }
         .                   CRATE_DEF_ID
         .               }
         .           
         .               /// When on an if expression, a match arm tail expression or a match arm, give back
         .               /// the enclosing `if` or `match` expression.
-- line 820 ----------------------------------------
-- line 885 ----------------------------------------
         .                       }
         .                   }
         .                   bug!(
         .                       "expected foreign mod or inlined parent, found {}",
         .                       self.node_to_string(HirId::make_owner(parent))
         .                   )
         .               }
         .           
   200,123 ( 0.00%)      pub fn expect_item(&self, id: LocalDefId) -> &'hir Item<'hir> {
    85,767 ( 0.00%)          match self.tcx.hir_owner(id) {
         .                       Some(Owner { node: OwnerNode::Item(item), .. }) => item,
         .                       _ => bug!("expected item, found {}", self.node_to_string(HirId::make_owner(id))),
         .                   }
   228,712 ( 0.00%)      }
         .           
    36,092 ( 0.00%)      pub fn expect_impl_item(&self, id: LocalDefId) -> &'hir ImplItem<'hir> {
    15,468 ( 0.00%)          match self.tcx.hir_owner(id) {
         .                       Some(Owner { node: OwnerNode::ImplItem(item), .. }) => item,
         .                       _ => bug!("expected impl item, found {}", self.node_to_string(HirId::make_owner(id))),
         .                   }
    41,248 ( 0.00%)      }
         .           
     1,358 ( 0.00%)      pub fn expect_trait_item(&self, id: LocalDefId) -> &'hir TraitItem<'hir> {
       582 ( 0.00%)          match self.tcx.hir_owner(id) {
         .                       Some(Owner { node: OwnerNode::TraitItem(item), .. }) => item,
         .                       _ => bug!("expected trait item, found {}", self.node_to_string(HirId::make_owner(id))),
         .                   }
     1,552 ( 0.00%)      }
         .           
         .               pub fn expect_variant(&self, id: HirId) -> &'hir Variant<'hir> {
         .                   match self.find(id) {
         .                       Some(Node::Variant(variant)) => variant,
         .                       _ => bug!("expected variant, found {}", self.node_to_string(id)),
         .                   }
         .               }
         .           
-- line 920 ----------------------------------------
-- line 922 ----------------------------------------
         .                   match self.tcx.hir_owner(id) {
         .                       Some(Owner { node: OwnerNode::ForeignItem(item), .. }) => item,
         .                       _ => {
         .                           bug!("expected foreign item, found {}", self.node_to_string(HirId::make_owner(id)))
         .                       }
         .                   }
         .               }
         .           
     1,128 ( 0.00%)      pub fn expect_expr(&self, id: HirId) -> &'hir Expr<'hir> {
       423 ( 0.00%)          match self.find(id) {
         .                       Some(Node::Expr(expr)) => expr,
         .                       _ => bug!("expected expr, found {}", self.node_to_string(id)),
         .                   }
       987 ( 0.00%)      }
         .           
    46,647 ( 0.00%)      pub fn opt_name(&self, id: HirId) -> Option<Symbol> {
    16,325 ( 0.00%)          Some(match self.get(id) {
         .                       Node::Item(i) => i.ident.name,
         .                       Node::ForeignItem(fi) => fi.ident.name,
         .                       Node::ImplItem(ii) => ii.ident.name,
         .                       Node::TraitItem(ti) => ti.ident.name,
         .                       Node::Variant(v) => v.ident.name,
         .                       Node::Field(f) => f.ident.name,
         .                       Node::Lifetime(lt) => lt.name.ident().name,
    14,385 ( 0.00%)              Node::GenericParam(param) => param.name.ident().name,
       776 ( 0.00%)              Node::Binding(&Pat { kind: PatKind::Binding(_, _, l, _), .. }) => l.name,
         .                       Node::Ctor(..) => self.name(HirId::make_owner(self.get_parent_item(id))),
         .                       _ => return None,
         .                   })
    25,915 ( 0.00%)      }
         .           
    39,912 ( 0.00%)      pub fn name(&self, id: HirId) -> Symbol {
    15,937 ( 0.00%)          match self.opt_name(id) {
         .                       Some(name) => name,
         .                       None => bug!("no name for {}", self.node_to_string(id)),
         .                   }
    29,934 ( 0.00%)      }
         .           
         .               /// Given a node ID, gets a list of attributes associated with the AST
         .               /// corresponding to the node-ID.
 9,117,360 ( 0.05%)      pub fn attrs(&self, id: HirId) -> &'hir [ast::Attribute] {
 1,302,480 ( 0.01%)          self.tcx.hir_attrs(id.owner).get(id.local_id)
10,419,840 ( 0.05%)      }
         .           
         .               /// Gets the span of the definition of the specified HIR node.
         .               /// This is used by `tcx.get_span`
   133,164 ( 0.00%)      pub fn span(&self, hir_id: HirId) -> Span {
   334,396 ( 0.00%)          self.opt_span(hir_id)
         .                       .unwrap_or_else(|| bug!("hir::map::Map::span: id not in map: {:?}", hir_id))
   133,164 ( 0.00%)      }
         .           
   886,424 ( 0.00%)      pub fn opt_span(&self, hir_id: HirId) -> Option<Span> {
   886,424 ( 0.00%)          let span = match self.find(hir_id)? {
         .                       Node::Param(param) => param.span,
     7,206 ( 0.00%)              Node::Item(item) => match &item.kind {
         .                           ItemKind::Fn(sig, _, _) => sig.span,
     7,198 ( 0.00%)                  _ => item.span,
         .                       },
         .                       Node::ForeignItem(foreign_item) => foreign_item.span,
       394 ( 0.00%)              Node::TraitItem(trait_item) => match &trait_item.kind {
       394 ( 0.00%)                  TraitItemKind::Fn(sig, _) => sig.span,
         .                           _ => trait_item.span,
         .                       },
    20,624 ( 0.00%)              Node::ImplItem(impl_item) => match &impl_item.kind {
    20,624 ( 0.00%)                  ImplItemKind::Fn(sig, _) => sig.span,
         .                           _ => impl_item.span,
         .                       },
        36 ( 0.00%)              Node::Variant(variant) => variant.span,
     2,302 ( 0.00%)              Node::Field(field) => field.span,
         .                       Node::AnonConst(constant) => self.body(constant.body).value.span,
         .                       Node::Expr(expr) => expr.span,
         .                       Node::Stmt(stmt) => stmt.span,
         .                       Node::PathSegment(seg) => seg.ident.span,
         .                       Node::Ty(ty) => ty.span,
         .                       Node::TraitRef(tr) => tr.path.span,
         .                       Node::Binding(pat) => pat.span,
         .                       Node::Pat(pat) => pat.span,
         .                       Node::Arm(arm) => arm.span,
         .                       Node::Block(block) => block.span,
     3,172 ( 0.00%)              Node::Ctor(..) => match self.find(self.get_parent_node(hir_id))? {
         .                           Node::Item(item) => item.span,
         .                           Node::Variant(variant) => variant.span,
         .                           _ => unreachable!(),
         .                       },
         .                       Node::Lifetime(lifetime) => lifetime.span,
         .                       Node::GenericParam(param) => param.span,
         .                       Node::Visibility(&Spanned {
         .                           node: VisibilityKind::Restricted { ref path, .. },
         .                           ..
         .                       }) => path.span,
         .                       Node::Infer(i) => i.span,
         .                       Node::Visibility(v) => bug!("unexpected Visibility {:?}", v),
         .                       Node::Local(local) => local.span,
         4 ( 0.00%)              Node::Crate(item) => item.inner,
         .                   };
         .                   Some(span)
 1,266,320 ( 0.01%)      }
         .           
         .               /// Like `hir.span()`, but includes the body of function items
         .               /// (instead of just the function header)
         .               pub fn span_with_body(&self, hir_id: HirId) -> Span {
         .                   match self.find(hir_id) {
         .                       Some(Node::TraitItem(item)) => item.span,
         .                       Some(Node::ImplItem(impl_item)) => impl_item.span,
         .                       Some(Node::Item(item)) => item.span,
         .                       Some(_) => self.span(hir_id),
         .                       _ => bug!("hir::map::Map::span_with_body: id not in map: {:?}", hir_id),
         .                   }
         .               }
         .           
     3,632 ( 0.00%)      pub fn span_if_local(&self, id: DefId) -> Option<Span> {
    18,978 ( 0.00%)          id.as_local().and_then(|id| self.opt_span(self.local_def_id_to_hir_id(id)))
     5,448 ( 0.00%)      }
         .           
         .               pub fn res_span(&self, res: Res) -> Option<Span> {
         .                   match res {
         .                       Res::Err => None,
         .                       Res::Local(id) => Some(self.span(id)),
         .                       res => self.span_if_local(res.opt_def_id()?),
         .                   }
         .               }
-- line 1042 ----------------------------------------
-- line 1062 ----------------------------------------
         .           }
         .           
         .           impl<'hir> intravisit::Map<'hir> for Map<'hir> {
         .               fn find(&self, hir_id: HirId) -> Option<Node<'hir>> {
         .                   self.find(hir_id)
         .               }
         .           
         .               fn body(&self, id: BodyId) -> &'hir Body<'hir> {
    57,895 ( 0.00%)          self.body(id)
         .               }
         .           
         .               fn item(&self, id: ItemId) -> &'hir Item<'hir> {
    46,797 ( 0.00%)          self.item(id)
         .               }
         .           
         .               fn trait_item(&self, id: TraitItemId) -> &'hir TraitItem<'hir> {
     1,358 ( 0.00%)          self.trait_item(id)
         .               }
         .           
         .               fn impl_item(&self, id: ImplItemId) -> &'hir ImplItem<'hir> {
    36,092 ( 0.00%)          self.impl_item(id)
         .               }
         .           
         .               fn foreign_item(&self, id: ForeignItemId) -> &'hir ForeignItem<'hir> {
         .                   self.foreign_item(id)
         .               }
         .           }
         .           
         7 ( 0.00%)  pub(super) fn crate_hash(tcx: TyCtxt<'_>, crate_num: CrateNum) -> Svh {
         .               debug_assert_eq!(crate_num, LOCAL_CRATE);
         .               let krate = tcx.hir_crate(());
         3 ( 0.00%)      let hir_body_hash = krate.hir_hash;
         .           
         .               let upstream_crates = upstream_crates(tcx);
         .           
         .               // We hash the final, remapped names of all local source files so we
         .               // don't have to include the path prefix remapping commandline args.
         .               // If we included the full mapping in the SVH, we could only have
         .               // reproducible builds by compiling from the same directory. So we just
         .               // hash the result of the mapping instead of the mapping itself.
         2 ( 0.00%)      let mut source_file_names: Vec<_> = tcx
         .                   .sess
         .                   .source_map()
         .                   .files()
         .                   .iter()
         .                   .filter(|source_file| source_file.cnum == LOCAL_CRATE)
        11 ( 0.00%)          .map(|source_file| source_file.name_hash)
         .                   .collect();
         .           
         .               source_file_names.sort_unstable();
         .           
         .               let mut hcx = tcx.create_stable_hashing_context();
         .               let mut stable_hasher = StableHasher::new();
         .               hir_body_hash.hash_stable(&mut hcx, &mut stable_hasher);
         .               upstream_crates.hash_stable(&mut hcx, &mut stable_hasher);
         .               source_file_names.hash_stable(&mut hcx, &mut stable_hasher);
         3 ( 0.00%)      if tcx.sess.opts.debugging_opts.incremental_relative_spans {
         .                   let definitions = &tcx.untracked_resolutions.definitions;
         .                   let mut owner_spans: Vec<_> = krate
         .                       .owners
         .                       .iter_enumerated()
         .                       .filter_map(|(def_id, info)| {
         .                           let _ = info.as_ref()?;
         .                           let def_path_hash = definitions.def_path_hash(def_id);
         .                           let span = definitions.def_span(def_id);
         .                           debug_assert_eq!(span.parent(), None);
         .                           Some((def_path_hash, span))
         .                       })
         .                       .collect();
         .                   owner_spans.sort_unstable_by_key(|bn| bn.0);
         .                   owner_spans.hash_stable(&mut hcx, &mut stable_hasher);
         .               }
         3 ( 0.00%)      tcx.sess.opts.dep_tracking_hash(true).hash_stable(&mut hcx, &mut stable_hasher);
         2 ( 0.00%)      tcx.sess.local_stable_crate_id().hash_stable(&mut hcx, &mut stable_hasher);
         .           
         .               let crate_hash: Fingerprint = stable_hasher.finish();
         1 ( 0.00%)      Svh::new(crate_hash.to_smaller_hash())
         9 ( 0.00%)  }
         .           
         .           fn upstream_crates(tcx: TyCtxt<'_>) -> Vec<(StableCrateId, Svh)> {
         .               let mut upstream_crates: Vec<_> = tcx
         .                   .crates(())
         .                   .iter()
         .                   .map(|&cnum| {
       500 ( 0.00%)              let stable_crate_id = tcx.resolutions(()).cstore.stable_crate_id(cnum);
       100 ( 0.00%)              let hash = tcx.crate_hash(cnum);
         .                       (stable_crate_id, hash)
         .                   })
         .                   .collect();
         .               upstream_crates.sort_unstable_by_key(|&(stable_crate_id, _)| stable_crate_id);
         .               upstream_crates
         .           }
         .           
         .           fn hir_id_to_string(map: &Map<'_>, id: HirId) -> String {
-- line 1155 ----------------------------------------
-- line 1238 ----------------------------------------
         .                   Some(Node::Lifetime(_)) => node_str("lifetime"),
         .                   Some(Node::GenericParam(ref param)) => format!("generic_param {:?}{}", param, id_str),
         .                   Some(Node::Visibility(ref vis)) => format!("visibility {:?}{}", vis, id_str),
         .                   Some(Node::Crate(..)) => String::from("root_crate"),
         .                   None => format!("unknown node{}", id_str),
         .               }
         .           }
         .           
        36 ( 0.00%)  pub(super) fn hir_module_items(tcx: TyCtxt<'_>, module_id: LocalDefId) -> ModuleItems {
        24 ( 0.00%)      let mut collector = ModuleCollector {
         .                   tcx,
         .                   submodules: Vec::default(),
         .                   items: Vec::default(),
         .                   trait_items: Vec::default(),
         .                   impl_items: Vec::default(),
         .                   foreign_items: Vec::default(),
         .               };
         .           
        20 ( 0.00%)      let (hir_mod, span, hir_id) = tcx.hir().get_module(module_id);
         .               collector.visit_mod(hir_mod, span, hir_id);
         .           
        64 ( 0.00%)      let ModuleCollector { submodules, items, trait_items, impl_items, foreign_items, .. } =
         .                   collector;
        44 ( 0.00%)      return ModuleItems {
        16 ( 0.00%)          submodules: submodules.into_boxed_slice(),
        16 ( 0.00%)          items: items.into_boxed_slice(),
        16 ( 0.00%)          trait_items: trait_items.into_boxed_slice(),
        16 ( 0.00%)          impl_items: impl_items.into_boxed_slice(),
        16 ( 0.00%)          foreign_items: foreign_items.into_boxed_slice(),
         .               };
         .           
         .               struct ModuleCollector<'tcx> {
         .                   tcx: TyCtxt<'tcx>,
         .                   submodules: Vec<LocalDefId>,
         .                   items: Vec<ItemId>,
         .                   trait_items: Vec<TraitItemId>,
         .                   impl_items: Vec<ImplItemId>,
         .                   foreign_items: Vec<ForeignItemId>,
         .               }
         .           
         .               impl<'hir> Visitor<'hir> for ModuleCollector<'hir> {
         .                   type NestedFilter = nested_filter::All;
         .           
         .                   fn nested_visit_map(&mut self) -> Self::Map {
     9,163 ( 0.00%)              self.tcx.hir()
         .                   }
         .           
    18,000 ( 0.00%)          fn visit_item(&mut self, item: &'hir Item<'hir>) {
    10,800 ( 0.00%)              self.items.push(item.item_id());
     7,200 ( 0.00%)              if let ItemKind::Mod(..) = item.kind {
         .                           // If this declares another module, do not recurse inside it.
         3 ( 0.00%)                  self.submodules.push(item.def_id);
         .                       } else {
    21,582 ( 0.00%)                  intravisit::walk_item(self, item)
         .                       }
        12 ( 0.00%)          }
         .           
         .                   fn visit_trait_item(&mut self, item: &'hir TraitItem<'hir>) {
       291 ( 0.00%)              self.trait_items.push(item.trait_item_id());
       291 ( 0.00%)              intravisit::walk_trait_item(self, item)
         .                   }
         .           
         .                   fn visit_impl_item(&mut self, item: &'hir ImplItem<'hir>) {
     7,734 ( 0.00%)              self.impl_items.push(item.impl_item_id());
     7,734 ( 0.00%)              intravisit::walk_impl_item(self, item)
         .                   }
         .           
         .                   fn visit_foreign_item(&mut self, item: &'hir ForeignItem<'hir>) {
         .                       self.foreign_items.push(item.foreign_item_id());
         .                       intravisit::walk_foreign_item(self, item)
         .                   }
         .               }
        32 ( 0.00%)  }

 4,063,053 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/hir/map/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/adapters/enumerate.rs
--------------------------------------------------------------------------------
Ir                  

-- line 14 ----------------------------------------
         .           #[derive(Clone, Debug)]
         .           #[must_use = "iterators are lazy and do nothing unless consumed"]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           pub struct Enumerate<I> {
         .               iter: I,
         .               count: usize,
         .           }
         .           impl<I> Enumerate<I> {
 2,177,996 ( 0.01%)      pub(in crate::iter) fn new(iter: I) -> Enumerate<I> {
 1,633,497 ( 0.01%)          Enumerate { iter, count: 0 }
 1,088,998 ( 0.01%)      }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<I> Iterator for Enumerate<I>
         .           where
         .               I: Iterator,
         .           {
         .               type Item = (usize, <I as Iterator>::Item);
-- line 32 ----------------------------------------
-- line 37 ----------------------------------------
         .               /// `usize::MAX` elements either produces the wrong result or panics. If
         .               /// debug assertions are enabled, a panic is guaranteed.
         .               ///
         .               /// # Panics
         .               ///
         .               /// Might panic if the index of the element overflows a `usize`.
         .               #[inline]
         .               #[rustc_inherit_overflow_checks]
 1,690,656 ( 0.01%)      fn next(&mut self) -> Option<(usize, <I as Iterator>::Item)> {
 8,263,578 ( 0.04%)          let a = self.iter.next()?;
 2,485,051 ( 0.01%)          let i = self.count;
12,510,910 ( 0.06%)          self.count += 1;
 4,788,375 ( 0.02%)          Some((i, a))
 2,817,760 ( 0.01%)      }
         .           
         .               #[inline]
       384 ( 0.00%)      fn size_hint(&self) -> (usize, Option<usize>) {
   846,276 ( 0.00%)          self.iter.size_hint()
       192 ( 0.00%)      }
         .           
         .               #[inline]
         .               #[rustc_inherit_overflow_checks]
         .               fn nth(&mut self, n: usize) -> Option<(usize, I::Item)> {
         .                   let a = self.iter.nth(n)?;
     8,150 ( 0.00%)          let i = self.count + n;
     8,150 ( 0.00%)          self.count = i + 1;
         .                   Some((i, a))
         .               }
         .           
         .               #[inline]
         .               fn count(self) -> usize {
         .                   self.iter.count()
         .               }
         .           
-- line 70 ----------------------------------------
-- line 76 ----------------------------------------
         .                   R: Try<Output = Acc>,
         .               {
         .                   #[inline]
         .                   fn enumerate<'a, T, Acc, R>(
         .                       count: &'a mut usize,
         .                       mut fold: impl FnMut(Acc, (usize, T)) -> R + 'a,
         .                   ) -> impl FnMut(Acc, T) -> R + 'a {
         .                       #[rustc_inherit_overflow_checks]
   132,540 ( 0.00%)              move |acc, item| {
   227,823 ( 0.00%)                  let acc = fold(acc, (*count, item));
 1,308,460 ( 0.01%)                  *count += 1;
         .                           acc
         .                       }
         .                   }
         .           
        97 ( 0.00%)          self.iter.try_fold(init, enumerate(&mut self.count, fold))
         .               }
         .           
         .               #[inline]
         .               fn fold<Acc, Fold>(self, init: Acc, fold: Fold) -> Acc
         .               where
         .                   Fold: FnMut(Acc, Self::Item) -> Acc,
         .               {
         .                   #[inline]
         .                   fn enumerate<T, Acc>(
         .                       mut count: usize,
         .                       mut fold: impl FnMut(Acc, (usize, T)) -> Acc,
         .                   ) -> impl FnMut(Acc, T) -> Acc {
         .                       #[rustc_inherit_overflow_checks]
   271,138 ( 0.00%)              move |acc, item| {
       142 ( 0.00%)                  let acc = fold(acc, (count, item));
   548,195 ( 0.00%)                  count += 1;
         .                           acc
         .                       }
         .                   }
         .           
 1,223,985 ( 0.01%)          self.iter.fold(init, enumerate(self.count, fold))
         .               }
         .           
         .               #[inline]
         .               #[rustc_inherit_overflow_checks]
         .               fn advance_by(&mut self, n: usize) -> Result<(), usize> {
         .                   match self.iter.advance_by(n) {
         .                       ret @ Ok(_) => {
         .                           self.count += n;
-- line 120 ----------------------------------------
-- line 131 ----------------------------------------
         .               #[doc(hidden)]
         .               unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> <Self as Iterator>::Item
         .               where
         .                   Self: TrustedRandomAccessNoCoerce,
         .               {
         .                   // SAFETY: the caller must uphold the contract for
         .                   // `Iterator::__iterator_get_unchecked`.
         .                   let value = unsafe { try_get_unchecked(&mut self.iter, idx) };
        36 ( 0.00%)          (self.count + idx, value)
         .               }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<I> DoubleEndedIterator for Enumerate<I>
         .           where
         .               I: ExactSizeIterator + DoubleEndedIterator,
         .           {
-- line 147 ----------------------------------------
-- line 172 ----------------------------------------
         .               {
         .                   // Can safely add and subtract the count, as `ExactSizeIterator` promises
         .                   // that the number of elements fits into a `usize`.
         .                   fn enumerate<T, Acc, R>(
         .                       mut count: usize,
         .                       mut fold: impl FnMut(Acc, (usize, T)) -> R,
         .                   ) -> impl FnMut(Acc, T) -> R {
         .                       move |acc, item| {
   276,238 ( 0.00%)                  count -= 1;
         .                           fold(acc, (count, item))
         .                       }
         .                   }
         .           
    68,630 ( 0.00%)          let count = self.count + self.iter.len();
         .                   self.iter.try_rfold(init, enumerate(count, fold))
         .               }
         .           
         .               #[inline]
         .               fn rfold<Acc, Fold>(self, init: Acc, fold: Fold) -> Acc
         .               where
         .                   Fold: FnMut(Acc, Self::Item) -> Acc,
         .               {
-- line 193 ----------------------------------------

 6,411,963 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/adapters/enumerate.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/rpc.rs
--------------------------------------------------------------------------------
Ir                  

-- line 21 ----------------------------------------
         .           
         .           pub(super) trait DecodeMut<'a, 's, S>: Sized {
         .               fn decode(r: &mut Reader<'a>, s: &'s mut S) -> Self;
         .           }
         .           
         .           macro_rules! rpc_encode_decode {
         .               (le $ty:ty) => {
         .                   impl<S> Encode<S> for $ty {
 9,357,918 ( 0.05%)              fn encode(self, w: &mut Writer, _: &mut S) {
        12 ( 0.00%)                  w.extend_from_array(&self.to_le_bytes());
11,697,389 ( 0.06%)              }
         .                   }
         .           
         .                   impl<S> DecodeMut<'_, '_, S> for $ty {
        16 ( 0.00%)              fn decode(r: &mut Reader<'_>, _: &mut S) -> Self {
         .                           const N: usize = ::std::mem::size_of::<$ty>();
         .           
        20 ( 0.00%)                  let mut bytes = [0; N];
 1,685,041 ( 0.01%)                  bytes.copy_from_slice(&r[..N]);
 6,212,511 ( 0.03%)                  *r = &r[N..];
         .           
        20 ( 0.00%)                  Self::from_le_bytes(bytes)
         8 ( 0.00%)              }
         .                   }
         .               };
         .               (struct $name:ident { $($field:ident),* $(,)? }) => {
         .                   impl<S> Encode<S> for $name {
         .                       fn encode(self, w: &mut Writer, s: &mut S) {
         .                           $(self.$field.encode(w, s);)*
         .                       }
         .                   }
-- line 51 ----------------------------------------
-- line 55 ----------------------------------------
         .                           $name {
         .                               $($field: DecodeMut::decode(r, s)),*
         .                           }
         .                       }
         .                   }
         .               };
         .               (enum $name:ident $(<$($T:ident),+>)? { $($variant:ident $(($field:ident))*),* $(,)? }) => {
         .                   impl<S, $($($T: Encode<S>),+)?> Encode<S> for $name $(<$($T),+>)? {
28,005,636 ( 0.14%)              fn encode(self, w: &mut Writer, s: &mut S) {
         .                           // HACK(eddyb): `Tag` enum duplicated between the
         .                           // two impls as there's no other place to stash it.
         .                           #[allow(non_upper_case_globals)]
         .                           mod tag {
         .                               #[repr(u8)] enum Tag { $($variant),* }
         .           
         .                               $(pub const $variant: u8 = Tag::$variant as u8;)*
         .                           }
         .           
15,813,973 ( 0.08%)                  match self {
 3,570,798 ( 0.02%)                      $($name::$variant $(($field))* => {
    73,378 ( 0.00%)                          tag::$variant.encode(w, s);
 3,519,460 ( 0.02%)                          $($field.encode(w, s);)*
         4 ( 0.00%)                      })*
         .                           }
19,704,900 ( 0.10%)              }
         .                   }
         .           
         .                   impl<'a, S, $($($T: for<'s> DecodeMut<'a, 's, S>),+)?> DecodeMut<'a, '_, S>
         .                       for $name $(<$($T),+>)?
         .                   {
 8,067,633 ( 0.04%)              fn decode(r: &mut Reader<'a>, s: &mut S) -> Self {
         .                           // HACK(eddyb): `Tag` enum duplicated between the
         .                           // two impls as there's no other place to stash it.
         .                           #[allow(non_upper_case_globals)]
         .                           mod tag {
         .                               #[repr(u8)] enum Tag { $($variant),* }
         .           
         .                               $(pub const $variant: u8 = Tag::$variant as u8;)*
         .                           }
         .           
 6,694,371 ( 0.03%)                  match u8::decode(r, s) {
         .                               $(tag::$variant => {
   286,082 ( 0.00%)                          $(let $field = DecodeMut::decode(r, s);)*
 5,506,883 ( 0.03%)                          $name::$variant $(($field))*
   143,038 ( 0.00%)                      })*
         .                               _ => unreachable!(),
         .                           }
13,679,384 ( 0.07%)              }
         .                   }
         .               }
         .           }
         .           
         .           impl<S> Encode<S> for () {
         .               fn encode(self, _: &mut Writer, _: &mut S) {}
         .           }
         .           
         .           impl<S> DecodeMut<'_, '_, S> for () {
         .               fn decode(_: &mut Reader<'_>, _: &mut S) -> Self {}
         .           }
         .           
         .           impl<S> Encode<S> for u8 {
   383,936 ( 0.00%)      fn encode(self, w: &mut Writer, _: &mut S) {
         4 ( 0.00%)          w.push(self);
   319,939 ( 0.00%)      }
         .           }
         .           
         .           impl<S> DecodeMut<'_, '_, S> for u8 {
         .               fn decode(r: &mut Reader<'_>, _: &mut S) -> Self {
27,721,356 ( 0.14%)          let x = r[0];
15,443,535 ( 0.08%)          *r = &r[1..];
         .                   x
         .               }
         .           }
         .           
         .           rpc_encode_decode!(le u32);
         .           rpc_encode_decode!(le usize);
         .           
         .           impl<S> Encode<S> for bool {
         .               fn encode(self, w: &mut Writer, s: &mut S) {
    37,494 ( 0.00%)          (self as u8).encode(w, s);
         .               }
         .           }
         .           
         .           impl<S> DecodeMut<'_, '_, S> for bool {
         .               fn decode(r: &mut Reader<'_>, s: &mut S) -> Self {
    24,996 ( 0.00%)          match u8::decode(r, s) {
         .                       0 => false,
         .                       1 => true,
         .                       _ => unreachable!(),
         .                   }
         .               }
         .           }
         .           
         .           impl<S> Encode<S> for char {
         .               fn encode(self, w: &mut Writer, s: &mut S) {
    88,388 ( 0.00%)          (self as u32).encode(w, s);
         .               }
         .           }
         .           
         .           impl<S> DecodeMut<'_, '_, S> for char {
         .               fn decode(r: &mut Reader<'_>, s: &mut S) -> Self {
         .                   char::from_u32(u32::decode(r, s)).unwrap()
         .               }
         .           }
         .           
         .           impl<S> Encode<S> for NonZeroU32 {
        12 ( 0.00%)      fn encode(self, w: &mut Writer, s: &mut S) {
 5,840,374 ( 0.03%)          self.get().encode(w, s);
         4 ( 0.00%)      }
         .           }
         .           
         .           impl<S> DecodeMut<'_, '_, S> for NonZeroU32 {
        12 ( 0.00%)      fn decode(r: &mut Reader<'_>, s: &mut S) -> Self {
        28 ( 0.00%)          Self::new(u32::decode(r, s)).unwrap()
         8 ( 0.00%)      }
         .           }
         .           
         .           impl<S, A: Encode<S>, B: Encode<S>> Encode<S> for (A, B) {
        22 ( 0.00%)      fn encode(self, w: &mut Writer, s: &mut S) {
         .                   self.0.encode(w, s);
         .                   self.1.encode(w, s);
         .               }
         .           }
         .           
         .           impl<'a, S, A: for<'s> DecodeMut<'a, 's, S>, B: for<'s> DecodeMut<'a, 's, S>> DecodeMut<'a, '_, S>
         .               for (A, B)
         .           {
        10 ( 0.00%)      fn decode(r: &mut Reader<'a>, s: &mut S) -> Self {
        28 ( 0.00%)          (DecodeMut::decode(r, s), DecodeMut::decode(r, s))
         6 ( 0.00%)      }
         .           }
         .           
         .           rpc_encode_decode!(
         .               enum Bound<T> {
         .                   Included(x),
         .                   Excluded(x),
         .                   Unbounded,
         .               }
-- line 192 ----------------------------------------
-- line 204 ----------------------------------------
         .                   Ok(x),
         .                   Err(e),
         .               }
         .           );
         .           
         .           impl<S> Encode<S> for &[u8] {
         .               fn encode(self, w: &mut Writer, s: &mut S) {
         .                   self.len().encode(w, s);
 1,243,336 ( 0.01%)          w.write_all(self).unwrap();
         .               }
         .           }
         .           
         .           impl<'a, S> DecodeMut<'a, '_, S> for &'a [u8] {
         .               fn decode(r: &mut Reader<'a>, s: &mut S) -> Self {
         .                   let len = usize::decode(r, s);
         .                   let xs = &r[..len];
   969,996 ( 0.00%)          *r = &r[len..];
         .                   xs
         .               }
         .           }
         .           
         .           impl<S> Encode<S> for &str {
 1,243,336 ( 0.01%)      fn encode(self, w: &mut Writer, s: &mut S) {
         .                   self.as_bytes().encode(w, s);
 1,554,170 ( 0.01%)      }
         .           }
         .           
         .           impl<'a, S> DecodeMut<'a, '_, S> for &'a str {
   323,332 ( 0.00%)      fn decode(r: &mut Reader<'a>, s: &mut S) -> Self {
   646,664 ( 0.00%)          str::from_utf8(<&[u8]>::decode(r, s)).unwrap()
   646,664 ( 0.00%)      }
         .           }
         .           
         .           impl<S> Encode<S> for String {
         .               fn encode(self, w: &mut Writer, s: &mut S) {
 1,243,336 ( 0.01%)          self[..].encode(w, s);
         .               }
         .           }
         .           
         .           impl<S> DecodeMut<'_, '_, S> for String {
         .               fn decode(r: &mut Reader<'_>, s: &mut S) -> Self {
 1,554,170 ( 0.01%)          <&str>::decode(r, s).to_string()
         .               }
         .           }
         .           
         .           /// Simplified version of panic payloads, ignoring
         .           /// types other than `&'static str` and `String`.
         .           pub enum PanicMessage {
         .               StaticStr(&'static str),
         .               String(String),
-- line 253 ----------------------------------------

27,806,765 ( 0.14%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/rpc.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/str/traits.rs
--------------------------------------------------------------------------------
Ir                  

-- line 20 ----------------------------------------
         .               fn cmp(&self, other: &str) -> Ordering {
         .                   self.as_bytes().cmp(other.as_bytes())
         .               }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl PartialEq for str {
         .               #[inline]
21,136,185 ( 0.11%)      fn eq(&self, other: &str) -> bool {
18,787,720 ( 0.10%)          self.as_bytes() == other.as_bytes()
 9,393,860 ( 0.05%)      }
         .               #[inline]
         .               fn ne(&self, other: &str) -> bool {
         .                   !(*self).eq(other)
         .               }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl Eq for str {}
-- line 38 ----------------------------------------
-- line 55 ----------------------------------------
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<I> ops::Index<I> for str
         .           where
         .               I: SliceIndex<str>,
         .           {
         .               type Output = I::Output;
         .           
         .               #[inline]
 1,307,316 ( 0.01%)      fn index(&self, index: I) -> &I::Output {
   982,536 ( 0.01%)          index.index(self)
   655,024 ( 0.00%)      }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<I> ops::IndexMut<I> for str
         .           where
         .               I: SliceIndex<str>,
         .           {
         .               #[inline]
-- line 73 ----------------------------------------
-- line 110 ----------------------------------------
         .               unsafe fn get_unchecked(self, slice: *const str) -> *const Self::Output {
         .                   slice
         .               }
         .               #[inline]
         .               unsafe fn get_unchecked_mut(self, slice: *mut str) -> *mut Self::Output {
         .                   slice
         .               }
         .               #[inline]
 1,575,336 ( 0.01%)      fn index(self, slice: &str) -> &Self::Output {
         .                   slice
   525,112 ( 0.00%)      }
         .               #[inline]
         .               fn index_mut(self, slice: &mut str) -> &mut Self::Output {
         .                   slice
         .               }
         .           }
         .           
         .           /// Implements substring slicing with syntax `&self[begin .. end]` or `&mut
         .           /// self[begin .. end]`.
-- line 128 ----------------------------------------
-- line 159 ----------------------------------------
         .           /// // byte 100 is outside the string
         .           /// // &s[3 .. 100];
         .           /// ```
         .           #[stable(feature = "str_checked_slicing", since = "1.20.0")]
         .           unsafe impl SliceIndex<str> for ops::Range<usize> {
         .               type Output = str;
         .               #[inline]
         .               fn get(self, slice: &str) -> Option<&Self::Output> {
 1,581,895 ( 0.01%)          if self.start <= self.end
         .                       && slice.is_char_boundary(self.start)
         .                       && slice.is_char_boundary(self.end)
         .                   {
         .                       // SAFETY: just checked that `start` and `end` are on a char boundary,
         .                       // and we are passing in a safe reference, so the return value will also be one.
         .                       // We also checked char boundaries, so this is valid UTF-8.
         .                       Some(unsafe { &*self.get_unchecked(slice) })
         .                   } else {
-- line 175 ----------------------------------------
-- line 190 ----------------------------------------
         .                   }
         .               }
         .               #[inline]
         .               unsafe fn get_unchecked(self, slice: *const str) -> *const Self::Output {
         .                   let slice = slice as *const [u8];
         .                   // SAFETY: the caller guarantees that `self` is in bounds of `slice`
         .                   // which satisfies all the conditions for `add`.
         .                   let ptr = unsafe { slice.as_ptr().add(self.start) };
 1,129,439 ( 0.01%)          let len = self.end - self.start;
         .                   ptr::slice_from_raw_parts(ptr, len) as *const str
         .               }
         .               #[inline]
         .               unsafe fn get_unchecked_mut(self, slice: *mut str) -> *mut Self::Output {
         .                   let slice = slice as *mut [u8];
         .                   // SAFETY: see comments for `get_unchecked`.
         .                   let ptr = unsafe { slice.as_mut_ptr().add(self.start) };
         .                   let len = self.end - self.start;
-- line 206 ----------------------------------------
-- line 315 ----------------------------------------
         .           /// # Panics
         .           ///
         .           /// Panics if `begin` does not point to the starting byte offset of
         .           /// a character (as defined by `is_char_boundary`), or if `begin > len`.
         .           #[stable(feature = "str_checked_slicing", since = "1.20.0")]
         .           unsafe impl SliceIndex<str> for ops::RangeFrom<usize> {
         .               type Output = str;
         .               #[inline]
   844,428 ( 0.00%)      fn get(self, slice: &str) -> Option<&Self::Output> {
   343,773 ( 0.00%)          if slice.is_char_boundary(self.start) {
         .                       // SAFETY: just checked that `start` is on a char boundary,
         .                       // and we are passing in a safe reference, so the return value will also be one.
   324,780 ( 0.00%)              Some(unsafe { &*self.get_unchecked(slice) })
         .                   } else {
         .                       None
         .                   }
   259,824 ( 0.00%)      }
         .               #[inline]
         .               fn get_mut(self, slice: &mut str) -> Option<&mut Self::Output> {
         .                   if slice.is_char_boundary(self.start) {
         .                       // SAFETY: just checked that `start` is on a char boundary,
         .                       // and we are passing in a safe reference, so the return value will also be one.
         .                       Some(unsafe { &mut *self.get_unchecked_mut(slice) })
         .                   } else {
         .                       None
         .                   }
         .               }
         .               #[inline]
   844,428 ( 0.00%)      unsafe fn get_unchecked(self, slice: *const str) -> *const Self::Output {
   129,912 ( 0.00%)          let slice = slice as *const [u8];
         .                   // SAFETY: the caller guarantees that `self` is in bounds of `slice`
         .                   // which satisfies all the conditions for `add`.
   194,868 ( 0.00%)          let ptr = unsafe { slice.as_ptr().add(self.start) };
   670,339 ( 0.00%)          let len = slice.len() - self.start;
   259,824 ( 0.00%)          ptr::slice_from_raw_parts(ptr, len) as *const str
   129,912 ( 0.00%)      }
         .               #[inline]
         .               unsafe fn get_unchecked_mut(self, slice: *mut str) -> *mut Self::Output {
         .                   let slice = slice as *mut [u8];
         .                   // SAFETY: identical to `get_unchecked`.
         .                   let ptr = unsafe { slice.as_mut_ptr().add(self.start) };
         .                   let len = slice.len() - self.start;
         .                   ptr::slice_from_raw_parts_mut(ptr, len) as *mut str
         .               }
         .               #[inline]
   909,384 ( 0.00%)      fn index(self, slice: &str) -> &Self::Output {
   649,560 ( 0.00%)          let (start, end) = (self.start, slice.len());
   649,560 ( 0.00%)          match self.get(slice) {
   259,824 ( 0.00%)              Some(s) => s,
         .                       None => super::slice_error_fail(slice, start, end),
         .                   }
   129,912 ( 0.00%)      }
         .               #[inline]
         .               fn index_mut(self, slice: &mut str) -> &mut Self::Output {
         .                   if slice.is_char_boundary(self.start) {
         .                       // SAFETY: just checked that `start` is on a char boundary,
         .                       // and we are passing in a safe reference, so the return value will also be one.
         .                       unsafe { &mut *self.get_unchecked_mut(slice) }
         .                   } else {
         .                       super::slice_error_fail(slice, self.start, slice.len())
-- line 374 ----------------------------------------

14,113,736 ( 0.07%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/str/traits.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/server.rs
--------------------------------------------------------------------------------
Ir                  

-- line 28 ----------------------------------------
         .                   (type SourceFile: 'static + Clone;);
         .               (type MultiSpan) =>
         .                   (type MultiSpan: 'static;);
         .               (type Diagnostic) =>
         .                   (type Diagnostic: 'static;);
         .               (type Span) =>
         .                   (type Span: 'static + Copy + Eq + Hash;);
         .               (fn drop(&mut self, $arg:ident: $arg_ty:ty)) =>
   153,396 ( 0.00%)          (fn drop(&mut self, $arg: $arg_ty) { mem::drop($arg) });
         .               (fn clone(&mut self, $arg:ident: $arg_ty:ty) -> $ret_ty:ty) =>
     1,836 ( 0.00%)          (fn clone(&mut self, $arg: $arg_ty) -> $ret_ty { $arg.clone() });
         .               ($($item:tt)*) => ($($item)*;)
         .           }
         .           
         .           macro_rules! declare_server_traits {
         .               ($($name:ident {
         .                   $(fn $method:ident($($arg:ident: $arg_ty:ty),* $(,)?) $(-> $ret_ty:ty)?;)*
         .               }),* $(,)?) => {
         .                   pub trait Types {
-- line 46 ----------------------------------------
-- line 64 ----------------------------------------
         .                   $(fn $method:ident($($arg:ident: $arg_ty:ty),* $(,)?) $(-> $ret_ty:ty)?;)*
         .               }),* $(,)?) => {
         .                   impl<S: Types> Types for MarkedTypes<S> {
         .                       $(type $name = Marked<S::$name, client::$name>;)*
         .                   }
         .           
         .                   $(impl<S: $name> $name for MarkedTypes<S> {
         .                       $(fn $method(&mut self, $($arg: $arg_ty),*) $(-> $ret_ty)? {
 6,936,084 ( 0.04%)                  <_>::mark($name::$method(&mut self.0, $($arg.unmark()),*))
         .                       })*
         .                   })*
         .               }
         .           }
         .           with_api!(Self, self_, define_mark_types_impls);
         .           
         .           struct Dispatcher<S: Types> {
         .               handle_store: HandleStore<S>,
-- line 80 ----------------------------------------
-- line 89 ----------------------------------------
         .                   pub trait DispatcherTrait {
         .                       // HACK(eddyb) these are here to allow `Self::$name` to work below.
         .                       $(type $name;)*
         .                       fn dispatch(&mut self, b: Buffer<u8>) -> Buffer<u8>;
         .                   }
         .           
         .                   impl<S: Server> DispatcherTrait for Dispatcher<MarkedTypes<S>> {
         .                       $(type $name = <MarkedTypes<S> as Types>::$name;)*
17,819,280 ( 0.09%)              fn dispatch(&mut self, mut b: Buffer<u8>) -> Buffer<u8> {
         .                           let Dispatcher { handle_store, server } = self;
         .           
 5,345,784 ( 0.03%)                  let mut reader = &b[..];
12,473,496 ( 0.06%)                  match api_tags::Method::decode(&mut reader, &mut ()) {
 8,683,550 ( 0.04%)                      $(api_tags::Method::$name(m) => match m {
         .                                   $(api_tags::$name::$method => {
         .                                       let mut call_method = || {
 4,665,079 ( 0.02%)                                  reverse_decode!(reader, handle_store; $($arg: $arg_ty),*);
         .                                           $name::$method(server, $($arg),*)
         .                                       };
         .                                       // HACK(eddyb) don't use `panic::catch_unwind` in a panic.
         .                                       // If client and server happen to use the same `libstd`,
         .                                       // `catch_unwind` asserts that the panic counter was 0,
         .                                       // even when the closure passed to it didn't panic.
         .                                       let r = if thread::panicking() {
         .                                           Ok(call_method())
         .                                       } else {
 9,029,162 ( 0.05%)                                  panic::catch_unwind(panic::AssertUnwindSafe(call_method))
         .                                               .map_err(PanicMessage::from)
         .                                       };
         .           
         .                                       b.clear();
19,858,947 ( 0.10%)                              r.encode(&mut b, handle_store);
         .                                   })*
         .                               }),*
         .                           }
10,691,568 ( 0.05%)                  b
16,037,352 ( 0.08%)              }
         .                   }
         .               }
         .           }
         .           with_api!(Self, self_, define_dispatcher_impl);
         .           
         .           pub trait ExecutionStrategy {
         .               fn run_bridge_and_client<D: Copy + Send + 'static>(
         .                   &self,
-- line 133 ----------------------------------------
-- line 145 ----------------------------------------
         .               fn run_bridge_and_client<D: Copy + Send + 'static>(
         .                   &self,
         .                   dispatcher: &mut impl DispatcherTrait,
         .                   input: Buffer<u8>,
         .                   run_client: extern "C" fn(Bridge<'_>, D) -> Buffer<u8>,
         .                   client_data: D,
         .                   force_show_panics: bool,
         .               ) -> Buffer<u8> {
16,037,354 ( 0.08%)          let mut dispatch = |b| dispatcher.dispatch(b);
         .           
        20 ( 0.00%)          run_client(
        22 ( 0.00%)              Bridge { cached_buffer: input, dispatch: (&mut dispatch).into(), force_show_panics },
         .                       client_data,
         .                   )
         .               }
         .           }
         .           
         .           // NOTE(eddyb) Two implementations are provided, the second one is a bit
         .           // faster but neither is anywhere near as fast as same-thread execution.
         .           
-- line 164 ----------------------------------------
-- line 263 ----------------------------------------
         .                       *state.lock().unwrap() = State::Res(b);
         .                       join_handle.thread().unpark();
         .                   }
         .           
         .                   join_handle.join().unwrap()
         .               }
         .           }
         .           
        28 ( 0.00%)  fn run_server<
         .               S: Server,
         .               I: Encode<HandleStore<MarkedTypes<S>>>,
         .               O: for<'a, 's> DecodeMut<'a, 's, HandleStore<MarkedTypes<S>>>,
         .               D: Copy + Send + 'static,
         .           >(
         .               strategy: &impl ExecutionStrategy,
         .               handle_counters: &'static client::HandleCounters,
         .               server: S,
         .               input: I,
         .               run_client: extern "C" fn(Bridge<'_>, D) -> Buffer<u8>,
         .               client_data: D,
         .               force_show_panics: bool,
         .           ) -> Result<O, PanicMessage> {
         .               let mut dispatcher =
        34 ( 0.00%)          Dispatcher { handle_store: HandleStore::new(handle_counters), server: MarkedTypes(server) };
         .           
         .               let mut b = Buffer::new();
         8 ( 0.00%)      input.encode(&mut b, &mut dispatcher.handle_store);
         .           
        12 ( 0.00%)      b = strategy.run_bridge_and_client(
         .                   &mut dispatcher,
         .                   b,
         .                   run_client,
         .                   client_data,
         .                   force_show_panics,
         .               );
         .           
        10 ( 0.00%)      Result::decode(&mut &b[..], &mut dispatcher.handle_store)
        20 ( 0.00%)  }
         .           
         .           impl client::Client<fn(crate::TokenStream) -> crate::TokenStream> {
         .               pub fn run<S: Server>(
         .                   &self,
         .                   strategy: &impl ExecutionStrategy,
         .                   server: S,
         .                   input: S::TokenStream,
         .                   force_show_panics: bool,
-- line 308 ----------------------------------------
-- line 325 ----------------------------------------
         .               pub fn run<S: Server>(
         .                   &self,
         .                   strategy: &impl ExecutionStrategy,
         .                   server: S,
         .                   input: S::TokenStream,
         .                   input2: S::TokenStream,
         .                   force_show_panics: bool,
         .               ) -> Result<S::TokenStream, PanicMessage> {
         4 ( 0.00%)          let client::Client { get_handle_counters, run, f } = *self;
        26 ( 0.00%)          run_server(
         .                       strategy,
         2 ( 0.00%)              get_handle_counters(),
        20 ( 0.00%)              server,
         .                       (
         .                           <MarkedTypes<S> as Types>::TokenStream::mark(input),
         .                           <MarkedTypes<S> as Types>::TokenStream::mark(input2),
         .                       ),
         .                       run,
         .                       f,
         .                       force_show_panics,
         .                   )
-- line 345 ----------------------------------------

 4,021,639 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/server.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs
--------------------------------------------------------------------------------
Ir                  

-- line 118 ----------------------------------------
         .               stability: InternedSet<'tcx, attr::Stability>,
         .           
         .               /// `#[rustc_const_stable]` and `#[rustc_const_unstable]` attributes
         .               const_stability: InternedSet<'tcx, attr::ConstStability>,
         .           }
         .           
         .           impl<'tcx> CtxtInterners<'tcx> {
         .               fn new(arena: &'tcx WorkerLocal<Arena<'tcx>>) -> CtxtInterners<'tcx> {
        17 ( 0.00%)          CtxtInterners {
         .                       arena,
         .                       type_: Default::default(),
         .                       type_list: Default::default(),
         .                       substs: Default::default(),
         .                       region: Default::default(),
         .                       poly_existential_predicates: Default::default(),
         .                       canonical_var_infos: Default::default(),
         .                       predicate: Default::default(),
-- line 134 ----------------------------------------
-- line 143 ----------------------------------------
         .                       stability: Default::default(),
         .                       const_stability: Default::default(),
         .                   }
         .               }
         .           
         .               /// Interns a type.
         .               #[allow(rustc::usage_of_ty_tykind)]
         .               #[inline(never)]
17,714,136 ( 0.09%)      fn intern_ty(&self, kind: TyKind<'tcx>) -> Ty<'tcx> {
         .                   self.type_
11,071,335 ( 0.06%)              .intern(kind, |kind| {
   251,528 ( 0.00%)                  let flags = super::flags::FlagComputation::for_kind(&kind);
         .           
         .                           let ty_struct = TyS {
   503,056 ( 0.00%)                      kind,
         .                               flags: flags.flags,
         .                               outer_exclusive_binder: flags.outer_exclusive_binder,
         .                           };
         .           
         .                           Interned(self.arena.alloc(ty_struct))
         .                       })
         .                       .0
19,928,403 ( 0.10%)      }
         .           
         .               #[inline(never)]
 7,899,536 ( 0.04%)      fn intern_predicate(
         .                   &self,
         .                   kind: Binder<'tcx, PredicateKind<'tcx>>,
         .               ) -> &'tcx PredicateInner<'tcx> {
         .                   self.predicate
 6,912,094 ( 0.04%)              .intern(kind, |kind| {
   668,124 ( 0.00%)                  let flags = super::flags::FlagComputation::for_predicate(kind);
         .           
         .                           let predicate_struct = PredicateInner {
         .                               kind,
         .                               flags: flags.flags,
         .                               outer_exclusive_binder: flags.outer_exclusive_binder,
         .                           };
         .           
         .                           Interned(self.arena.alloc(predicate_struct))
         .                       })
         .                       .0
 8,886,978 ( 0.05%)      }
         .           }
         .           
         .           pub struct CommonTypes<'tcx> {
         .               pub unit: Ty<'tcx>,
         .               pub bool: Ty<'tcx>,
         .               pub char: Ty<'tcx>,
         .               pub isize: Ty<'tcx>,
         .               pub i8: Ty<'tcx>,
-- line 193 ----------------------------------------
-- line 237 ----------------------------------------
         .           /// safely used as a key in the maps of a TypeckResults. For that to be
         .           /// the case, the HirId must have the same `owner` as all the other IDs in
         .           /// this table (signified by `hir_owner`). Otherwise the HirId
         .           /// would be in a different frame of reference and using its `local_id`
         .           /// would result in lookup errors, or worse, in silently wrong data being
         .           /// stored/returned.
         .           #[inline]
         .           fn validate_hir_id_for_typeck_results(hir_owner: LocalDefId, hir_id: hir::HirId) {
 2,572,454 ( 0.01%)      if hir_id.owner != hir_owner {
         .                   invalid_hir_id_for_typeck_results(hir_owner, hir_id);
         .               }
         .           }
         .           
         .           #[cold]
         .           #[inline(never)]
         .           fn invalid_hir_id_for_typeck_results(hir_owner: LocalDefId, hir_id: hir::HirId) {
         .               ty::tls::with(|tcx| {
-- line 253 ----------------------------------------
-- line 261 ----------------------------------------
         .           }
         .           
         .           impl<'a, V> LocalTableInContext<'a, V> {
         .               pub fn contains_key(&self, id: hir::HirId) -> bool {
         .                   validate_hir_id_for_typeck_results(self.hir_owner, id);
         .                   self.data.contains_key(&id.local_id)
         .               }
         .           
 1,947,760 ( 0.01%)      pub fn get(&self, id: hir::HirId) -> Option<&V> {
   385,696 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
   385,696 ( 0.00%)          self.data.get(&id.local_id)
 1,564,956 ( 0.01%)      }
         .           
         .               pub fn iter(&self) -> hash_map::Iter<'_, hir::ItemLocalId, V> {
         .                   self.data.iter()
         .               }
         .           }
         .           
         .           impl<'a, V> ::std::ops::Index<hir::HirId> for LocalTableInContext<'a, V> {
         .               type Output = V;
         .           
    17,352 ( 0.00%)      fn index(&self, key: hir::HirId) -> &V {
        14 ( 0.00%)          self.get(key).expect("LocalTableInContext: key not found")
    11,568 ( 0.00%)      }
         .           }
         .           
         .           pub struct LocalTableInContextMut<'a, V> {
         .               hir_owner: LocalDefId,
         .               data: &'a mut ItemLocalMap<V>,
         .           }
         .           
         .           impl<'a, V> LocalTableInContextMut<'a, V> {
-- line 292 ----------------------------------------
-- line 328 ----------------------------------------
         .           /// ```
         .           ///
         .           /// Here, we would store the type `T`, the span of the value `x`, the "scope-span" for
         .           /// the scope that contains `x`, the expr `T` evaluated from, and the span of `foo.await`.
         .           #[derive(TyEncodable, TyDecodable, Clone, Debug, Eq, Hash, PartialEq, HashStable)]
         .           #[derive(TypeFoldable)]
         .           pub struct GeneratorInteriorTypeCause<'tcx> {
         .               /// Type of the captured binding.
     2,940 ( 0.00%)      pub ty: Ty<'tcx>,
         .               /// Span of the binding that was captured.
       871 ( 0.00%)      pub span: Span,
         .               /// Span of the scope of the captured binding.
     3,525 ( 0.00%)      pub scope_span: Option<Span>,
         .               /// Span of `.await` or `yield` expression.
     3,520 ( 0.00%)      pub yield_span: Span,
         .               /// Expr which the type evaluated from.
     4,928 ( 0.00%)      pub expr: Option<hir::HirId>,
         .           }
         .           
         .           #[derive(TyEncodable, TyDecodable, Debug)]
         .           pub struct TypeckResults<'tcx> {
         .               /// The `HirId::owner` all `ItemLocalId`s in this table are relative to.
         .               pub hir_owner: LocalDefId,
         .           
         .               /// Resolved definitions for `<T>::X` associated paths and
-- line 352 ----------------------------------------
-- line 507 ----------------------------------------
         .               pub treat_byte_string_as_slice: ItemLocalSet,
         .           
         .               /// Contains the data for evaluating the effect of feature `capture_disjoint_fields`
         .               /// on closure size.
         .               pub closure_size_eval: FxHashMap<DefId, ClosureSizeProfileData<'tcx>>,
         .           }
         .           
         .           impl<'tcx> TypeckResults<'tcx> {
    68,232 ( 0.00%)      pub fn new(hir_owner: LocalDefId) -> TypeckResults<'tcx> {
   807,412 ( 0.00%)          TypeckResults {
         .                       hir_owner,
         .                       type_dependent_defs: Default::default(),
         .                       field_indices: Default::default(),
         .                       user_provided_types: Default::default(),
         .                       user_provided_sigs: Default::default(),
         .                       node_types: Default::default(),
         .                       node_substs: Default::default(),
         .                       adjustments: Default::default(),
-- line 524 ----------------------------------------
-- line 532 ----------------------------------------
         .                       tainted_by_errors: None,
         .                       concrete_opaque_types: Default::default(),
         .                       closure_min_captures: Default::default(),
         .                       closure_fake_reads: Default::default(),
         .                       generator_interior_types: ty::Binder::dummy(Default::default()),
         .                       treat_byte_string_as_slice: Default::default(),
         .                       closure_size_eval: Default::default(),
         .                   }
    68,232 ( 0.00%)      }
         .           
         .               /// Returns the final resolution of a `QPath` in an `Expr` or `Pat` node.
   513,468 ( 0.00%)      pub fn qpath_res(&self, qpath: &hir::QPath<'_>, id: hir::HirId) -> Res {
   342,312 ( 0.00%)          match *qpath {
   741,300 ( 0.00%)              hir::QPath::Resolved(_, ref path) => path.res,
         .                       hir::QPath::TypeRelative(..) | hir::QPath::LangItem(..) => self
         .                           .type_dependent_def(id)
   285,636 ( 0.00%)                  .map_or(Res::Err, |(kind, def_id)| Res::Def(kind, def_id)),
         .                   }
   855,780 ( 0.00%)      }
         .           
     3,868 ( 0.00%)      pub fn type_dependent_defs(
         .                   &self,
         .               ) -> LocalTableInContext<'_, Result<(DefKind, DefId), ErrorReported>> {
    38,688 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.type_dependent_defs }
     3,868 ( 0.00%)      }
         .           
    44,369 ( 0.00%)      pub fn type_dependent_def(&self, id: HirId) -> Option<(DefKind, DefId)> {
    99,370 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
         .                   self.type_dependent_defs.get(&id.local_id).cloned().and_then(|r| r.ok())
    88,738 ( 0.00%)      }
         .           
    29,580 ( 0.00%)      pub fn type_dependent_def_id(&self, id: HirId) -> Option<DefId> {
         .                   self.type_dependent_def(id).map(|(_, def_id)| def_id)
    29,580 ( 0.00%)      }
         .           
   141,312 ( 0.00%)      pub fn type_dependent_defs_mut(
         .                   &mut self,
         .               ) -> LocalTableInContextMut<'_, Result<(DefKind, DefId), ErrorReported>> {
   141,312 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.type_dependent_defs }
   141,312 ( 0.00%)      }
         .           
         .               pub fn field_indices(&self) -> LocalTableInContext<'_, usize> {
    74,696 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.field_indices }
    17,477 ( 0.00%)      }
         .           
         .               pub fn field_indices_mut(&mut self) -> LocalTableInContextMut<'_, usize> {
    74,886 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.field_indices }
    37,443 ( 0.00%)      }
         .           
         .               pub fn user_provided_types(&self) -> LocalTableInContext<'_, CanonicalUserType<'tcx>> {
    56,634 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.user_provided_types }
    28,317 ( 0.00%)      }
         .           
         .               pub fn user_provided_types_mut(
         .                   &mut self,
         .               ) -> LocalTableInContextMut<'_, CanonicalUserType<'tcx>> {
    15,356 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.user_provided_types }
     7,678 ( 0.00%)      }
         .           
         .               pub fn node_types(&self) -> LocalTableInContext<'_, Ty<'tcx>> {
   328,524 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.node_types }
   164,262 ( 0.00%)      }
         .           
         .               pub fn node_types_mut(&mut self) -> LocalTableInContextMut<'_, Ty<'tcx>> {
   525,248 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.node_types }
   262,624 ( 0.00%)      }
         .           
 2,409,996 ( 0.01%)      pub fn node_type(&self, id: hir::HirId) -> Ty<'tcx> {
   401,666 ( 0.00%)          self.node_type_opt(id).unwrap_or_else(|| {
         .                       bug!("node_type: no type for node `{}`", tls::with(|tcx| tcx.hir().node_to_string(id)))
         .                   })
 2,008,330 ( 0.01%)      }
         .           
   618,247 ( 0.00%)      pub fn node_type_opt(&self, id: hir::HirId) -> Option<Ty<'tcx>> {
   618,247 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
         .                   self.node_types.get(&id.local_id).cloned()
 1,236,494 ( 0.01%)      }
         .           
         .               pub fn node_substs_mut(&mut self) -> LocalTableInContextMut<'_, SubstsRef<'tcx>> {
    53,528 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.node_substs }
    26,764 ( 0.00%)      }
         .           
   172,584 ( 0.00%)      pub fn node_substs(&self, id: hir::HirId) -> SubstsRef<'tcx> {
   172,584 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
         .                   self.node_substs.get(&id.local_id).cloned().unwrap_or_else(|| InternalSubsts::empty())
   345,168 ( 0.00%)      }
         .           
   112,794 ( 0.00%)      pub fn node_substs_opt(&self, id: hir::HirId) -> Option<SubstsRef<'tcx>> {
   112,794 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
         .                   self.node_substs.get(&id.local_id).cloned()
   225,588 ( 0.00%)      }
         .           
         .               // Returns the type of a pattern as a monotype. Like @expr_ty, this function
         .               // doesn't provide type parameter substitutions.
         .               pub fn pat_ty(&self, pat: &hir::Pat<'_>) -> Ty<'tcx> {
    72,136 ( 0.00%)          self.node_type(pat.hir_id)
         .               }
         .           
         .               // Returns the type of an expression as a monotype.
         .               //
         .               // NB (1): This is the PRE-ADJUSTMENT TYPE for the expression.  That is, in
         .               // some cases, we insert `Adjustment` annotations such as auto-deref or
         .               // auto-ref.  The type returned by this function does not consider such
         .               // adjustments.  See `expr_ty_adjusted()` instead.
         .               //
         .               // NB (2): This type doesn't provide type parameter substitutions; e.g., if you
         .               // ask for the type of "id" in "id(3)", it will return "fn(&isize) -> isize"
         .               // instead of "fn(ty) -> T with T = isize".
         .               pub fn expr_ty(&self, expr: &hir::Expr<'_>) -> Ty<'tcx> {
   435,151 ( 0.00%)          self.node_type(expr.hir_id)
         .               }
         .           
         .               pub fn expr_ty_opt(&self, expr: &hir::Expr<'_>) -> Option<Ty<'tcx>> {
   814,646 ( 0.00%)          self.node_type_opt(expr.hir_id)
         .               }
         .           
         .               pub fn adjustments(&self) -> LocalTableInContext<'_, Vec<ty::adjustment::Adjustment<'tcx>>> {
   221,608 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.adjustments }
   110,804 ( 0.00%)      }
         .           
         .               pub fn adjustments_mut(
         .                   &mut self,
         .               ) -> LocalTableInContextMut<'_, Vec<ty::adjustment::Adjustment<'tcx>>> {
   327,782 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.adjustments }
   163,891 ( 0.00%)      }
         .           
   279,410 ( 0.00%)      pub fn expr_adjustments(&self, expr: &hir::Expr<'_>) -> &[ty::adjustment::Adjustment<'tcx>] {
   558,820 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, expr.hir_id);
         .                   self.adjustments.get(&expr.hir_id.local_id).map_or(&[], |a| &a[..])
   558,820 ( 0.00%)      }
         .           
         .               /// Returns the type of `expr`, considering any `Adjustment`
         .               /// entry recorded for that expression.
    26,350 ( 0.00%)      pub fn expr_ty_adjusted(&self, expr: &hir::Expr<'_>) -> Ty<'tcx> {
     5,270 ( 0.00%)          self.expr_adjustments(expr).last().map_or_else(|| self.expr_ty(expr), |adj| adj.target)
     3,332 ( 0.00%)      }
         .           
    64,380 ( 0.00%)      pub fn expr_ty_adjusted_opt(&self, expr: &hir::Expr<'_>) -> Option<Ty<'tcx>> {
    12,876 ( 0.00%)          self.expr_adjustments(expr).last().map(|adj| adj.target).or_else(|| self.expr_ty_opt(expr))
    14,136 ( 0.00%)      }
         .           
    34,820 ( 0.00%)      pub fn is_method_call(&self, expr: &hir::Expr<'_>) -> bool {
         .                   // Only paths and method calls/overloaded operators have
         .                   // entries in type_dependent_defs, ignore the former here.
    69,640 ( 0.00%)          if let hir::ExprKind::Path(_) = expr.kind {
         .                       return false;
         .                   }
         .           
    79,208 ( 0.00%)          matches!(self.type_dependent_defs().get(expr.hir_id), Some(Ok((DefKind::AssocFn, _))))
    69,640 ( 0.00%)      }
         .           
   155,346 ( 0.00%)      pub fn extract_binding_mode(&self, s: &Session, id: HirId, sp: Span) -> Option<BindingMode> {
         .                   self.pat_binding_modes().get(id).copied().or_else(|| {
         .                       s.delay_span_bug(sp, "missing binding mode");
         .                       None
         .                   })
   207,128 ( 0.00%)      }
         .           
         .               pub fn pat_binding_modes(&self) -> LocalTableInContext<'_, BindingMode> {
   141,038 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.pat_binding_modes }
    44,628 ( 0.00%)      }
         .           
         .               pub fn pat_binding_modes_mut(&mut self) -> LocalTableInContextMut<'_, BindingMode> {
    63,252 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.pat_binding_modes }
    31,626 ( 0.00%)      }
         .           
         .               pub fn pat_adjustments(&self) -> LocalTableInContext<'_, Vec<Ty<'tcx>>> {
   182,868 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.pat_adjustments }
    91,434 ( 0.00%)      }
         .           
         .               pub fn pat_adjustments_mut(&mut self) -> LocalTableInContextMut<'_, Vec<Ty<'tcx>>> {
    45,068 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.pat_adjustments }
    22,534 ( 0.00%)      }
         .           
         .               /// For a given closure, returns the iterator of `ty::CapturedPlace`s that are captured
         .               /// by the closure.
    17,352 ( 0.00%)      pub fn closure_min_captures_flattened(
         .                   &self,
         .                   closure_def_id: DefId,
         .               ) -> impl Iterator<Item = &ty::CapturedPlace<'tcx>> {
         .                   self.closure_min_captures
         .                       .get(&closure_def_id)
         .                       .map(|closure_min_captures| closure_min_captures.values().flat_map(|v| v.iter()))
         .                       .into_iter()
         .                       .flatten()
    21,690 ( 0.00%)      }
         .           
         .               pub fn closure_kind_origins(&self) -> LocalTableInContext<'_, (Span, HirPlace<'tcx>)> {
     5,158 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.closure_kind_origins }
     2,579 ( 0.00%)      }
         .           
         .               pub fn closure_kind_origins_mut(
         .                   &mut self,
         .               ) -> LocalTableInContextMut<'_, (Span, HirPlace<'tcx>)> {
         .                   LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.closure_kind_origins }
         .               }
         .           
         .               pub fn liberated_fn_sigs(&self) -> LocalTableInContext<'_, ty::FnSig<'tcx>> {
    16,726 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.liberated_fn_sigs }
     8,363 ( 0.00%)      }
         .           
         .               pub fn liberated_fn_sigs_mut(&mut self) -> LocalTableInContextMut<'_, ty::FnSig<'tcx>> {
    11,568 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.liberated_fn_sigs }
     5,784 ( 0.00%)      }
         .           
         .               pub fn fru_field_types(&self) -> LocalTableInContext<'_, Vec<Ty<'tcx>>> {
     5,186 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.fru_field_types }
     2,593 ( 0.00%)      }
         .           
         .               pub fn fru_field_types_mut(&mut self) -> LocalTableInContextMut<'_, Vec<Ty<'tcx>>> {
        56 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.fru_field_types }
        28 ( 0.00%)      }
         .           
         .               pub fn is_coercion_cast(&self, hir_id: hir::HirId) -> bool {
         .                   validate_hir_id_for_typeck_results(self.hir_owner, hir_id);
         .                   self.coercion_casts.contains(&hir_id.local_id)
         .               }
         .           
         .               pub fn set_coercion_cast(&mut self, id: ItemLocalId) {
         .                   self.coercion_casts.insert(id);
         .               }
         .           
         .               pub fn coercion_casts(&self) -> &ItemLocalSet {
     2,579 ( 0.00%)          &self.coercion_casts
     2,579 ( 0.00%)      }
         .           }
         .           
         .           impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for TypeckResults<'tcx> {
         .               fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {
         .                   let ty::TypeckResults {
         .                       hir_owner,
         .                       ref type_dependent_defs,
         .                       ref field_indices,
-- line 764 ----------------------------------------
-- line 819 ----------------------------------------
         .                   const START_INDEX = 0,
         .               }
         .           }
         .           
         .           /// Mapping of type annotation indices to canonical user type annotations.
         .           pub type CanonicalUserTypeAnnotations<'tcx> =
         .               IndexVec<UserTypeAnnotationIndex, CanonicalUserTypeAnnotation<'tcx>>;
         .           
     5,676 ( 0.00%)  #[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable, TypeFoldable, Lift)]
         .           pub struct CanonicalUserTypeAnnotation<'tcx> {
         .               pub user_ty: CanonicalUserType<'tcx>,
         .               pub span: Span,
     3,935 ( 0.00%)      pub inferred_ty: Ty<'tcx>,
         .           }
         .           
         .           /// Canonicalized user type annotation.
         .           pub type CanonicalUserType<'tcx> = Canonical<'tcx, UserType<'tcx>>;
         .           
         .           impl<'tcx> CanonicalUserType<'tcx> {
         .               /// Returns `true` if this represents a substitution of the form `[?0, ?1, ?2]`,
         .               /// i.e., each thing is mapped to a canonical variable with the same index.
    11,643 ( 0.00%)      pub fn is_identity(&self) -> bool {
    23,286 ( 0.00%)          match self.value {
         .                       UserType::Ty(_) => false,
         .                       UserType::TypeOf(_, user_substs) => {
    11,643 ( 0.00%)                  if user_substs.user_self_ty.is_some() {
         .                               return false;
         .                           }
         .           
         .                           iter::zip(user_substs.substs, BoundVar::new(0)..).all(|(kind, cvar)| {
         .                               match kind.unpack() {
    23,710 ( 0.00%)                          GenericArgKind::Type(ty) => match ty.kind() {
         .                                       ty::Bound(debruijn, b) => {
         .                                           // We only allow a `ty::INNERMOST` index in substitutions.
    11,708 ( 0.00%)                                  assert_eq!(*debruijn, ty::INNERMOST);
         .                                           cvar == b.var
         .                                       }
         .                                       _ => false,
         .                                   },
         .           
       482 ( 0.00%)                          GenericArgKind::Lifetime(r) => match r {
         .                                       ty::ReLateBound(debruijn, br) => {
         .                                           // We only allow a `ty::INNERMOST` index in substitutions.
         .                                           assert_eq!(*debruijn, ty::INNERMOST);
         .                                           cvar == br.var
         .                                       }
         .                                       _ => false,
         .                                   },
         .           
-- line 867 ----------------------------------------
-- line 872 ----------------------------------------
         .                                           cvar == b
         .                                       }
         .                                       _ => false,
         .                                   },
         .                               }
         .                           })
         .                       }
         .                   }
    23,286 ( 0.00%)      }
         .           }
         .           
         .           /// A user-given type annotation attached to a constant. These arise
         .           /// from constants that are named via paths, like `Foo::<A>::new` and
         .           /// so forth.
    23,610 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, TyEncodable, TyDecodable)]
   148,217 ( 0.00%)  #[derive(HashStable, TypeFoldable, Lift)]
         .           pub enum UserType<'tcx> {
         .               Ty(Ty<'tcx>),
         .           
         .               /// The canonical type is the result of `type_of(def_id)` with the
         .               /// given substitutions applied.
         .               TypeOf(DefId, UserSubsts<'tcx>),
         .           }
         .           
         .           impl<'tcx> CommonTypes<'tcx> {
         .               fn new(interners: &CtxtInterners<'tcx>) -> CommonTypes<'tcx> {
       111 ( 0.00%)          let mk = |ty| interners.intern_ty(ty);
         .           
         .                   CommonTypes {
         .                       unit: mk(Tuple(List::empty())),
         .                       bool: mk(Bool),
         .                       char: mk(Char),
         .                       never: mk(Never),
         .                       isize: mk(Int(ty::IntTy::Isize)),
         .                       i8: mk(Int(ty::IntTy::I8)),
-- line 906 ----------------------------------------
-- line 921 ----------------------------------------
         .           
         .                       trait_object_dummy_self: mk(Infer(ty::FreshTy(0))),
         .                   }
         .               }
         .           }
         .           
         .           impl<'tcx> CommonLifetimes<'tcx> {
         .               fn new(interners: &CtxtInterners<'tcx>) -> CommonLifetimes<'tcx> {
        67 ( 0.00%)          let mk = |r| interners.region.intern(r, |r| Interned(interners.arena.alloc(r))).0;
         .           
         .                   CommonLifetimes {
         5 ( 0.00%)              re_root_empty: mk(RegionKind::ReEmpty(ty::UniverseIndex::ROOT)),
         5 ( 0.00%)              re_static: mk(RegionKind::ReStatic),
         5 ( 0.00%)              re_erased: mk(RegionKind::ReErased),
         .                   }
         .               }
         .           }
         .           
         .           impl<'tcx> CommonConsts<'tcx> {
         .               fn new(interners: &CtxtInterners<'tcx>, types: &CommonTypes<'tcx>) -> CommonConsts<'tcx> {
         6 ( 0.00%)          let mk_const = |c| interners.const_.intern(c, |c| Interned(interners.arena.alloc(c))).0;
         .           
         .                   CommonConsts {
         .                       unit: mk_const(ty::Const {
         .                           val: ty::ConstKind::Value(ConstValue::Scalar(Scalar::ZST)),
         .                           ty: types.unit,
         .                       }),
         .                   }
         .               }
-- line 949 ----------------------------------------
-- line 1045 ----------------------------------------
         .           
         .               /// Stores memory for globals (statics/consts).
         .               pub(crate) alloc_map: Lock<interpret::AllocMap<'tcx>>,
         .           
         .               output_filenames: Arc<OutputFilenames>,
         .           }
         .           
         .           impl<'tcx> TyCtxt<'tcx> {
   115,680 ( 0.00%)      pub fn typeck_opt_const_arg(
         .                   self,
         .                   def: ty::WithOptConstParam<LocalDefId>,
         .               ) -> &'tcx TypeckResults<'tcx> {
    46,272 ( 0.00%)          if let Some(param_did) = def.const_param_did {
         .                       self.typeck_const_arg((def.did, param_did))
         .                   } else {
         .                       self.typeck(def.did)
         .                   }
    92,544 ( 0.00%)      }
         .           
     8,676 ( 0.00%)      pub fn alloc_steal_thir(self, thir: Thir<'tcx>) -> &'tcx Steal<Thir<'tcx>> {
     2,892 ( 0.00%)          self.arena.alloc(Steal::new(thir))
    11,568 ( 0.00%)      }
         .           
    43,865 ( 0.00%)      pub fn alloc_steal_mir(self, mir: Body<'tcx>) -> &'tcx Steal<Body<'tcx>> {
     8,773 ( 0.00%)          self.arena.alloc(Steal::new(mir))
    61,411 ( 0.00%)      }
         .           
    11,568 ( 0.00%)      pub fn alloc_steal_promoted(
         .                   self,
         .                   promoted: IndexVec<Promoted, Body<'tcx>>,
         .               ) -> &'tcx Steal<IndexVec<Promoted, Body<'tcx>>> {
     2,892 ( 0.00%)          self.arena.alloc(Steal::new(promoted))
    14,460 ( 0.00%)      }
         .           
     9,828 ( 0.00%)      pub fn alloc_adt_def(
         .                   self,
         .                   did: DefId,
         .                   kind: AdtKind,
         .                   variants: IndexVec<VariantIdx, ty::VariantDef>,
         .                   repr: ReprOptions,
         .               ) -> &'tcx ty::AdtDef {
    17,472 ( 0.00%)          self.intern_adt_def(ty::AdtDef::new(self, did, kind, variants, repr))
     4,368 ( 0.00%)      }
         .           
         .               /// Allocates a read-only byte or string literal for `mir::interpret`.
         .               pub fn allocate_bytes(self, bytes: &[u8]) -> interpret::AllocId {
         .                   // Create an allocation that just contains these bytes.
         .                   let alloc = interpret::Allocation::from_bytes_byte_aligned_immutable(bytes);
         .                   let alloc = self.intern_const_alloc(alloc);
         .                   self.create_memory_alloc(alloc)
         .               }
         .           
         .               /// Returns a range of the start/end indices specified with the
         .               /// `rustc_layout_scalar_valid_range` attribute.
         .               // FIXME(eddyb) this is an awkward spot for this method, maybe move it?
    83,688 ( 0.00%)      pub fn layout_scalar_valid_range(self, def_id: DefId) -> (Bound<u128>, Bound<u128>) {
    41,844 ( 0.00%)          let attrs = self.get_attrs(def_id);
   177,837 ( 0.00%)          let get = |name| {
    41,844 ( 0.00%)              let attr = match attrs.iter().find(|a| a.has_name(name)) {
         .                           Some(attr) => attr,
         .                           None => return Bound::Unbounded,
         .                       };
         .                       debug!("layout_scalar_valid_range: attr={:?}", attr);
       288 ( 0.00%)              if let Some(
         .                           &[
         .                               ast::NestedMetaItem::Literal(ast::Lit {
       144 ( 0.00%)                          kind: ast::LitKind::Int(a, _), ..
         .                               }),
         .                           ],
        72 ( 0.00%)              ) = attr.meta_item_list().as_deref()
         .                       {
         .                           Bound::Included(a)
         .                       } else {
         .                           self.sess
         .                               .delay_span_bug(attr.span, "invalid rustc_layout_scalar_valid_range attribute");
         .                           Bound::Unbounded
         .                       }
   209,220 ( 0.00%)          };
    62,766 ( 0.00%)          (
    62,766 ( 0.00%)              get(sym::rustc_layout_scalar_valid_range_start),
    31,383 ( 0.00%)              get(sym::rustc_layout_scalar_valid_range_end),
         .                   )
    83,688 ( 0.00%)      }
         .           
         .               pub fn lift<T: Lift<'tcx>>(self, value: T) -> Option<T::Lifted> {
         .                   value.lift_to_tcx(self)
         .               }
         .           
         .               /// Creates a type context and call the closure with a `TyCtxt` reference
         .               /// to the context. The closure enforces that the type context and any interned
         .               /// value (types, substs, etc.) can only be used while `ty::tls` has a valid
         .               /// reference to the context, to allow formatting values that need it.
        23 ( 0.00%)      pub fn create_global_ctxt(
         .                   s: &'tcx Session,
         .                   lint_store: Lrc<dyn Any + sync::Send + sync::Sync>,
         .                   arena: &'tcx WorkerLocal<Arena<'tcx>>,
         .                   resolutions: ty::ResolverOutputs,
         .                   krate: &'tcx hir::Crate<'tcx>,
         .                   dep_graph: DepGraph,
         .                   on_disk_cache: Option<&'tcx dyn OnDiskCache<'tcx>>,
         .                   queries: &'tcx dyn query::QueryEngine<'tcx>,
         .                   query_kinds: &'tcx [DepKindStruct],
         .                   crate_name: &str,
         .                   output_filenames: OutputFilenames,
         .               ) -> GlobalCtxt<'tcx> {
         1 ( 0.00%)          let data_layout = TargetDataLayout::parse(&s.target).unwrap_or_else(|err| {
         .                       s.fatal(&err);
         .                   });
         .                   let interners = CtxtInterners::new(arena);
         .                   let common_types = CommonTypes::new(&interners);
         .                   let common_lifetimes = CommonLifetimes::new(&interners);
         .                   let common_consts = CommonConsts::new(&interners, &common_types);
         .           
       127 ( 0.00%)          GlobalCtxt {
         .                       sess: s,
         6 ( 0.00%)              lint_store,
         .                       arena,
         2 ( 0.00%)              interners,
         5 ( 0.00%)              dep_graph,
         4 ( 0.00%)              untracked_resolutions: resolutions,
         2 ( 0.00%)              prof: s.prof.clone(),
         .                       types: common_types,
         .                       lifetimes: common_lifetimes,
         .                       consts: common_consts,
         .                       untracked_crate: krate,
         .                       on_disk_cache,
         .                       queries,
         .                       query_caches: query::QueryCaches::default(),
         .                       query_kinds,
         .                       ty_rcache: Default::default(),
         .                       pred_rcache: Default::default(),
         .                       selection_cache: Default::default(),
         .                       evaluation_cache: Default::default(),
         1 ( 0.00%)              crate_name: Symbol::intern(crate_name),
         .                       data_layout,
         .                       alloc_map: Lock::new(interpret::AllocMap::new()),
         .                       output_filenames: Arc::new(output_filenames),
         .                   }
         9 ( 0.00%)      }
         .           
         .               crate fn query_kind(self, k: DepKind) -> &'tcx DepKindStruct {
         .                   &self.query_kinds[k as usize]
         .               }
         .           
         .               /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` to ensure it gets used.
         .               #[track_caller]
         .               pub fn ty_error(self) -> Ty<'tcx> {
-- line 1191 ----------------------------------------
-- line 1217 ----------------------------------------
         .                   ty: Ty<'tcx>,
         .                   span: S,
         .                   msg: &str,
         .               ) -> &'tcx Const<'tcx> {
         .                   self.sess.delay_span_bug(span, msg);
         .                   self.mk_const(ty::Const { val: ty::ConstKind::Error(DelaySpanBugEmitted(())), ty })
         .               }
         .           
    15,414 ( 0.00%)      pub fn consider_optimizing<T: Fn() -> String>(self, msg: T) -> bool {
     2,202 ( 0.00%)          let cname = self.crate_name(LOCAL_CRATE);
    17,616 ( 0.00%)          self.sess.consider_optimizing(cname.as_str(), msg)
    17,616 ( 0.00%)      }
         .           
         .               /// Obtain all lang items of this crate and all dependencies (recursively)
 7,089,936 ( 0.04%)      pub fn lang_items(self) -> &'tcx rustc_hir::lang_items::LanguageItems {
         .                   self.get_lang_items(())
 9,115,632 ( 0.05%)      }
         .           
         .               /// Obtain the given diagnostic item's `DefId`. Use `is_diagnostic_item` if you just want to
         .               /// compare against another `DefId`, since `is_diagnostic_item` is cheaper.
     4,564 ( 0.00%)      pub fn get_diagnostic_item(self, name: Symbol) -> Option<DefId> {
         .                   self.all_diagnostic_items(()).name_to_id.get(&name).copied()
     5,216 ( 0.00%)      }
         .           
         .               /// Obtain the diagnostic item's name
   228,270 ( 0.00%)      pub fn get_diagnostic_name(self, id: DefId) -> Option<Symbol> {
         .                   self.diagnostic_items(id.krate).id_to_name.get(&id).copied()
   260,880 ( 0.00%)      }
         .           
         .               /// Check whether the diagnostic item with the given `name` has the given `DefId`.
   208,495 ( 0.00%)      pub fn is_diagnostic_item(self, name: Symbol, did: DefId) -> bool {
         .                   self.diagnostic_items(did.krate).name_to_id.get(&name) == Some(&did)
   238,280 ( 0.00%)      }
         .           
    60,753 ( 0.00%)      pub fn stability(self) -> &'tcx stability::Index<'tcx> {
         .                   self.stability_index(())
    78,111 ( 0.00%)      }
         .           
 2,484,867 ( 0.01%)      pub fn features(self) -> &'tcx rustc_feature::Features {
         .                   self.features_query(())
 2,839,848 ( 0.01%)      }
         .           
         .               pub fn def_key(self, id: DefId) -> rustc_hir::definitions::DefKey {
         .                   // Accessing the DefKey is ok, since it is part of DefPathHash.
    81,957 ( 0.00%)          if let Some(id) = id.as_local() {
         .                       self.untracked_resolutions.definitions.def_key(id)
         .                   } else {
    65,049 ( 0.00%)              self.untracked_resolutions.cstore.def_key(id)
         .                   }
         .               }
         .           
         .               /// Converts a `DefId` into its fully expanded `DefPath` (every
         .               /// `DefId` is really just an interned `DefPath`).
         .               ///
         .               /// Note that if `id` is not local to this crate, the result will
         .               ///  be a non-local `DefPath`.
-- line 1272 ----------------------------------------
-- line 1277 ----------------------------------------
         .                   } else {
         .                       self.untracked_resolutions.cstore.def_path(id)
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn def_path_hash(self, def_id: DefId) -> rustc_hir::definitions::DefPathHash {
         .                   // Accessing the DefPathHash is ok, it is incr. comp. stable.
    34,925 ( 0.00%)          if let Some(def_id) = def_id.as_local() {
         .                       self.untracked_resolutions.definitions.def_path_hash(def_id)
         .                   } else {
       104 ( 0.00%)              self.untracked_resolutions.cstore.def_path_hash(def_id)
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn stable_crate_id(self, crate_num: CrateNum) -> StableCrateId {
         .                   if crate_num == LOCAL_CRATE {
         .                       self.sess.local_stable_crate_id()
         .                   } else {
-- line 1296 ----------------------------------------
-- line 1353 ----------------------------------------
         .                       &(format!("{:08x}", stable_crate_id.to_u64()))[..4],
         .                       self.def_path(def_id).to_string_no_crate_verbose()
         .                   )
         .               }
         .           
         .               /// Note that this is *untracked* and should only be used within the query
         .               /// system if the result is otherwise tracked through queries
         .               pub fn cstore_untracked(self) -> &'tcx ty::CrateStoreDyn {
    61,910 ( 0.00%)          &*self.untracked_resolutions.cstore
    30,955 ( 0.00%)      }
         .           
         .               /// Note that this is *untracked* and should only be used within the query
         .               /// system if the result is otherwise tracked through queries
         .               pub fn definitions_untracked(self) -> &'tcx hir::definitions::Definitions {
         .                   &self.untracked_resolutions.definitions
         .               }
         .           
         .               #[inline(always)]
         .               pub fn create_stable_hashing_context(self) -> StableHashingContext<'tcx> {
         1 ( 0.00%)          let resolutions = &self.gcx.untracked_resolutions;
         4 ( 0.00%)          StableHashingContext::new(self.sess, &resolutions.definitions, &*resolutions.cstore)
         .               }
         .           
         .               #[inline(always)]
         .               pub fn create_no_span_stable_hashing_context(self) -> StableHashingContext<'tcx> {
         .                   let resolutions = &self.gcx.untracked_resolutions;
         .                   StableHashingContext::ignore_spans(
         .                       self.sess,
         .                       &resolutions.definitions,
-- line 1381 ----------------------------------------
-- line 1390 ----------------------------------------
         .               /// If `true`, we should use the MIR-based borrowck, but also
         .               /// fall back on the AST borrowck if the MIR-based one errors.
         .               pub fn migrate_borrowck(self) -> bool {
         .                   self.borrowck_mode().migrate()
         .               }
         .           
         .               /// What mode(s) of borrowck should we run? AST? MIR? both?
         .               /// (Also considers the `#![feature(nll)]` setting.)
     5,158 ( 0.00%)      pub fn borrowck_mode(self) -> BorrowckMode {
         .                   // Here are the main constraints we need to deal with:
         .                   //
         .                   // 1. An opts.borrowck_mode of `BorrowckMode::Migrate` is
         .                   //    synonymous with no `-Z borrowck=...` flag at all.
         .                   //
         .                   // 2. We want to allow developers on the Nightly channel
         .                   //    to opt back into the "hard error" mode for NLL,
         .                   //    (which they can do via specifying `#![feature(nll)]`
-- line 1406 ----------------------------------------
-- line 1413 ----------------------------------------
         .                   //   errors. (To simplify the code here, it now even overrides
         .                   //   a user's attempt to specify `-Z borrowck=compare`, which
         .                   //   we arguably do not need anymore and should remove.)
         .                   //
         .                   // * Otherwise, if no `-Z borrowck=...` then use migrate mode
         .                   //
         .                   // * Otherwise, use the behavior requested via `-Z borrowck=...`
         .           
     7,737 ( 0.00%)          if self.features().nll {
         .                       return BorrowckMode::Mir;
         .                   }
         .           
     2,579 ( 0.00%)          self.sess.opts.borrowck_mode
    10,316 ( 0.00%)      }
         .           
         .               /// If `true`, we should use lazy normalization for constants, otherwise
         .               /// we still evaluate them eagerly.
         .               #[inline]
         .               pub fn lazy_normalization(self) -> bool {
         .                   let features = self.features();
         .                   // Note: We only use lazy normalization for generic const expressions.
         .                   features.generic_const_exprs
-- line 1434 ----------------------------------------
-- line 1554 ----------------------------------------
         .                   self.mk_imm_ref(
         .                       self.lifetimes.re_static,
         .                       self.type_of(self.require_lang_item(LangItem::PanicLocation, None))
         .                           .subst(self, self.mk_substs([self.lifetimes.re_static.into()].iter())),
         .                   )
         .               }
         .           
         .               /// Returns a displayable description and article for the given `def_id` (e.g. `("a", "struct")`).
    20,372 ( 0.00%)      pub fn article_and_description(self, def_id: DefId) -> (&'static str, &'static str) {
    14,816 ( 0.00%)          match self.def_kind(def_id) {
         .                       DefKind::Generator => match self.generator_kind(def_id).unwrap() {
         .                           rustc_hir::GeneratorKind::Async(..) => ("an", "async closure"),
         .                           rustc_hir::GeneratorKind::Gen => ("a", "generator"),
         .                       },
    33,336 ( 0.00%)              def_kind => (def_kind.article(), def_kind.descr(def_id)),
         .                   }
    16,668 ( 0.00%)      }
         .           
         .               pub fn type_length_limit(self) -> Limit {
         .                   self.limits(()).type_length_limit
         .               }
         .           
 2,399,460 ( 0.01%)      pub fn recursion_limit(self) -> Limit {
         .                   self.limits(()).recursion_limit
 2,742,240 ( 0.01%)      }
         .           
         .               pub fn move_size_limit(self) -> Limit {
         .                   self.limits(()).move_size_limit
         .               }
         .           
         .               pub fn const_eval_limit(self) -> Limit {
         .                   self.limits(()).const_eval_limit
         .               }
-- line 1586 ----------------------------------------
-- line 1684 ----------------------------------------
         .               /// This is the implicit state of rustc. It contains the current
         .               /// `TyCtxt` and query. It is updated when creating a local interner or
         .               /// executing a new query. Whenever there's a `TyCtxt` value available
         .               /// you should also have access to an `ImplicitCtxt` through the functions
         .               /// in this module.
         .               #[derive(Clone)]
         .               pub struct ImplicitCtxt<'a, 'tcx> {
         .                   /// The current `TyCtxt`.
         1 ( 0.00%)          pub tcx: TyCtxt<'tcx>,
         .           
         .                   /// The current query job, if any. This is updated by `JobOwner::start` in
         .                   /// `ty::query::plumbing` when executing a query.
         .                   pub query: Option<query::QueryJobId<DepKind>>,
         .           
         .                   /// Where to store diagnostics for the current query job, if any.
         .                   /// This is updated by `JobOwner::start` in `ty::query::plumbing` when executing a query.
         .                   pub diagnostics: Option<&'a Lock<ThinVec<Diagnostic>>>,
-- line 1700 ----------------------------------------
-- line 1703 ----------------------------------------
         .                   pub layout_depth: usize,
         .           
         .                   /// The current dep graph task. This is used to add dependencies to queries
         .                   /// when executing them.
         .                   pub task_deps: TaskDepsRef<'a>,
         .               }
         .           
         .               impl<'a, 'tcx> ImplicitCtxt<'a, 'tcx> {
         5 ( 0.00%)          pub fn new(gcx: &'tcx GlobalCtxt<'tcx>) -> Self {
         .                       let tcx = TyCtxt { gcx };
        25 ( 0.00%)              ImplicitCtxt {
         .                           tcx,
         .                           query: None,
         .                           diagnostics: None,
         .                           layout_depth: 0,
         .                           task_deps: TaskDepsRef::Ignore,
         .                       }
         5 ( 0.00%)          }
         .               }
         .           
         .               /// Sets Rayon's thread-local variable, which is preserved for Rayon jobs
         .               /// to `value` during the call to `f`. It is restored to its previous value after.
         .               /// This is used to set the pointer to the new `ImplicitCtxt`.
         .               #[cfg(parallel_compiler)]
         .               #[inline]
         .               fn set_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {
-- line 1728 ----------------------------------------
-- line 1745 ----------------------------------------
         .           
         .               /// Sets TLV to `value` during the call to `f`.
         .               /// It is restored to its previous value after.
         .               /// This is used to set the pointer to the new `ImplicitCtxt`.
         .               #[cfg(not(parallel_compiler))]
         .               #[inline]
         .               fn set_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {
         .                   let old = get_tlv();
   357,599 ( 0.00%)          let _reset = rustc_data_structures::OnDrop(move || TLV.with(|tlv| tlv.set(old)));
         .                   TLV.with(|tlv| tlv.set(value));
         .                   f()
         .               }
         .           
         .               /// Gets the pointer to the current `ImplicitCtxt`.
         .               #[cfg(not(parallel_compiler))]
         .               #[inline]
         .               fn get_tlv() -> usize {
-- line 1761 ----------------------------------------
-- line 1763 ----------------------------------------
         .               }
         .           
         .               /// Sets `context` as the new current `ImplicitCtxt` for the duration of the function `f`.
         .               #[inline]
         .               pub fn enter_context<'a, 'tcx, F, R>(context: &ImplicitCtxt<'a, 'tcx>, f: F) -> R
         .               where
         .                   F: FnOnce(&ImplicitCtxt<'a, 'tcx>) -> R,
         .               {
         1 ( 0.00%)          set_tlv(context as *const _ as usize, || f(&context))
         .               }
         .           
         .               /// Allows access to the current `ImplicitCtxt` in a closure if one is available.
         .               #[inline]
         .               pub fn with_context_opt<F, R>(f: F) -> R
         .               where
         .                   F: for<'a, 'tcx> FnOnce(Option<&ImplicitCtxt<'a, 'tcx>>) -> R,
         .               {
         .                   let context = get_tlv();
 1,425,383 ( 0.01%)          if context == 0 {
         .                       f(None)
         .                   } else {
         .                       // We could get an `ImplicitCtxt` pointer from another thread.
         .                       // Ensure that `ImplicitCtxt` is `Sync`.
         .                       sync::assert_sync::<ImplicitCtxt<'_, '_>>();
         .           
         .                       unsafe { f(Some(&*(context as *const ImplicitCtxt<'_, '_>))) }
         .                   }
-- line 1789 ----------------------------------------
-- line 1805 ----------------------------------------
         .               /// This will panic if you pass it a `TyCtxt` which is different from the current
         .               /// `ImplicitCtxt`'s `tcx` field.
         .               #[inline]
         .               pub fn with_related_context<'tcx, F, R>(tcx: TyCtxt<'tcx>, f: F) -> R
         .               where
         .                   F: FnOnce(&ImplicitCtxt<'_, 'tcx>) -> R,
         .               {
         .                   with_context(|context| unsafe {
   700,093 ( 0.00%)              assert!(ptr_eq(context.tcx.gcx, tcx.gcx));
         .                       let context: &ImplicitCtxt<'_, '_> = mem::transmute(context);
   698,688 ( 0.00%)              f(context)
         .                   })
         .               }
         .           
         .               /// Allows access to the `TyCtxt` in the current `ImplicitCtxt`.
         .               /// Panics if there is no `ImplicitCtxt` available.
         .               #[inline]
         .               pub fn with<F, R>(f: F) -> R
         .               where
-- line 1823 ----------------------------------------
-- line 1981 ----------------------------------------
         .               fn into_pointer(&self) -> *const () {
         .                   self.0 as *const _ as *const ()
         .               }
         .           }
         .           
         .           #[allow(rustc::usage_of_ty_tykind)]
         .           impl<'tcx> Borrow<TyKind<'tcx>> for Interned<'tcx, TyS<'tcx>> {
         .               fn borrow<'a>(&'a self) -> &'a TyKind<'tcx> {
 2,126,816 ( 0.01%)          &self.0.kind()
         .               }
         .           }
         .           
         .           impl<'tcx> PartialEq for Interned<'tcx, TyS<'tcx>> {
         .               fn eq(&self, other: &Interned<'tcx, TyS<'tcx>>) -> bool {
         .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
         .                   // `x == y`.
         .                   self.0.kind() == other.0.kind()
-- line 1997 ----------------------------------------
-- line 1998 ----------------------------------------
         .               }
         .           }
         .           
         .           impl<'tcx> Eq for Interned<'tcx, TyS<'tcx>> {}
         .           
         .           impl<'tcx> Hash for Interned<'tcx, TyS<'tcx>> {
         .               fn hash<H: Hasher>(&self, s: &mut H) {
         .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
   688,116 ( 0.00%)          self.0.kind().hash(s)
         .               }
         .           }
         .           
         .           impl<'tcx> Borrow<Binder<'tcx, PredicateKind<'tcx>>> for Interned<'tcx, PredicateInner<'tcx>> {
         .               fn borrow<'a>(&'a self) -> &'a Binder<'tcx, PredicateKind<'tcx>> {
   894,739 ( 0.00%)          &self.0.kind
         .               }
         .           }
         .           
         .           impl<'tcx> PartialEq for Interned<'tcx, PredicateInner<'tcx>> {
         .               fn eq(&self, other: &Interned<'tcx, PredicateInner<'tcx>>) -> bool {
         .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
         .                   // `x == y`.
         .                   self.0.kind == other.0.kind
-- line 2020 ----------------------------------------
-- line 2021 ----------------------------------------
         .               }
         .           }
         .           
         .           impl<'tcx> Eq for Interned<'tcx, PredicateInner<'tcx>> {}
         .           
         .           impl<'tcx> Hash for Interned<'tcx, PredicateInner<'tcx>> {
         .               fn hash<H: Hasher>(&self, s: &mut H) {
         .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
   114,684 ( 0.00%)          self.0.kind.hash(s)
         .               }
         .           }
         .           
         .           impl<'tcx, T> Borrow<[T]> for Interned<'tcx, List<T>> {
         .               fn borrow<'a>(&'a self) -> &'a [T] {
 2,326,684 ( 0.01%)          &self.0[..]
         .               }
         .           }
         .           
         .           impl<'tcx, T: PartialEq> PartialEq for Interned<'tcx, List<T>> {
         .               fn eq(&self, other: &Interned<'tcx, List<T>>) -> bool {
         .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
         .                   // `x == y`.
         .                   self.0[..] == other.0[..]
-- line 2043 ----------------------------------------
-- line 2044 ----------------------------------------
         .               }
         .           }
         .           
         .           impl<'tcx, T: Eq> Eq for Interned<'tcx, List<T>> {}
         .           
         .           impl<'tcx, T: Hash> Hash for Interned<'tcx, List<T>> {
         .               fn hash<H: Hasher>(&self, s: &mut H) {
         .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
   182,952 ( 0.00%)          self.0[..].hash(s)
         .               }
         .           }
         .           
         .           macro_rules! direct_interners {
         .               ($($name:ident: $method:ident($ty:ty),)+) => {
         .                   $(impl<'tcx> Borrow<$ty> for Interned<'tcx, $ty> {
         .                       fn borrow<'a>(&'a self) -> &'a $ty {
   903,797 ( 0.00%)                  &self.0
         .                       }
         .                   }
         .           
         .                   impl<'tcx> PartialEq for Interned<'tcx, $ty> {
         .                       fn eq(&self, other: &Self) -> bool {
         .                           // The `Borrow` trait requires that `x.borrow() == y.borrow()`
         .                           // equals `x == y`.
         .                           self.0 == other.0
-- line 2068 ----------------------------------------
-- line 2070 ----------------------------------------
         .                   }
         .           
         .                   impl<'tcx> Eq for Interned<'tcx, $ty> {}
         .           
         .                   impl<'tcx> Hash for Interned<'tcx, $ty> {
         .                       fn hash<H: Hasher>(&self, s: &mut H) {
         .                           // The `Borrow` trait requires that `x.borrow().hash(s) ==
         .                           // x.hash(s)`.
    95,602 ( 0.00%)                  self.0.hash(s)
         .                       }
         .                   }
         .           
         .                   impl<'tcx> TyCtxt<'tcx> {
 7,325,053 ( 0.04%)              pub fn $method(self, v: $ty) -> &'tcx $ty {
 3,734,368 ( 0.02%)                  self.interners.$name.intern(v, |v| {
    19,504 ( 0.00%)                      Interned(self.interners.arena.alloc(v))
         .                           }).0
 8,240,112 ( 0.04%)              }
         .                   })+
         .               }
         .           }
         .           
         .           direct_interners! {
         .               region: mk_region(RegionKind),
         .               const_: mk_const(Const<'tcx>),
         .               const_allocation: intern_const_alloc(Allocation),
-- line 2095 ----------------------------------------
-- line 2097 ----------------------------------------
         .               adt_def: intern_adt_def(AdtDef),
         .               stability: intern_stability(attr::Stability),
         .               const_stability: intern_const_stability(attr::ConstStability),
         .           }
         .           
         .           macro_rules! slice_interners {
         .               ($($field:ident: $method:ident($ty:ty)),+ $(,)?) => (
         .                   impl<'tcx> TyCtxt<'tcx> {
24,315,361 ( 0.12%)              $(pub fn $method(self, v: &[$ty]) -> &'tcx List<$ty> {
         .                           self.interners.$field.intern_ref(v, || {
         .                               Interned(List::from_arena(&*self.arena, v))
         .                           }).0
21,622,266 ( 0.11%)              })+
         .                   }
         .               );
         .           }
         .           
         .           slice_interners!(
         .               type_list: _intern_type_list(Ty<'tcx>),
         .               substs: _intern_substs(GenericArg<'tcx>),
         .               canonical_var_infos: _intern_canonical_var_infos(CanonicalVarInfo<'tcx>),
-- line 2117 ----------------------------------------
-- line 2170 ----------------------------------------
         .           
         .               /// Given a closure signature, returns an equivalent fn signature. Detuples
         .               /// and so forth -- so e.g., if we have a sig with `Fn<(u32, i32)>` then
         .               /// you would get a `fn(u32, i32)`.
         .               /// `unsafety` determines the unsafety of the fn signature. If you pass
         .               /// `hir::Unsafety::Unsafe` in the previous example, then you would get
         .               /// an `unsafe fn (u32, i32)`.
         .               /// It cannot convert a closure that requires unsafe.
       690 ( 0.00%)      pub fn signature_unclosure(
         .                   self,
         .                   sig: PolyFnSig<'tcx>,
         .                   unsafety: hir::Unsafety,
         .               ) -> PolyFnSig<'tcx> {
     1,104 ( 0.00%)          sig.map_bound(|s| {
       690 ( 0.00%)              let params_iter = match s.inputs()[0].kind() {
         .                           ty::Tuple(params) => params.into_iter().map(|k| k.expect_ty()),
         .                           _ => bug!(),
         .                       };
       966 ( 0.00%)              self.mk_fn_sig(params_iter, s.output(), s.c_variadic, unsafety, abi::Abi::Rust)
         .                   })
       552 ( 0.00%)      }
         .           
         .               /// Same a `self.mk_region(kind)`, but avoids accessing the interners if
         .               /// `*r == kind`.
         .               #[inline]
         .               pub fn reuse_or_mk_region(self, r: Region<'tcx>, kind: RegionKind) -> Region<'tcx> {
   875,728 ( 0.00%)          if *r == kind { r } else { self.mk_region(kind) }
         .               }
         .           
         .               #[allow(rustc::usage_of_ty_tykind)]
         .               #[inline]
         .               pub fn mk_ty(self, st: TyKind<'tcx>) -> Ty<'tcx> {
15,093,876 ( 0.08%)          self.interners.intern_ty(st)
         .               }
         .           
         .               #[inline]
         .               pub fn mk_predicate(self, binder: Binder<'tcx, PredicateKind<'tcx>>) -> Predicate<'tcx> {
10,789,219 ( 0.06%)          let inner = self.interners.intern_predicate(binder);
         .                   Predicate { inner }
         .               }
         .           
         .               #[inline]
 9,098,016 ( 0.05%)      pub fn reuse_or_mk_predicate(
         .                   self,
         .                   pred: Predicate<'tcx>,
         .                   binder: Binder<'tcx, PredicateKind<'tcx>>,
         .               ) -> Predicate<'tcx> {
   546,086 ( 0.00%)          if pred.kind() != binder { self.mk_predicate(binder) } else { pred }
 9,098,016 ( 0.05%)      }
         .           
         .               pub fn mk_mach_int(self, tm: IntTy) -> Ty<'tcx> {
       289 ( 0.00%)          match tm {
         .                       IntTy::Isize => self.types.isize,
         .                       IntTy::I8 => self.types.i8,
         .                       IntTy::I16 => self.types.i16,
         .                       IntTy::I32 => self.types.i32,
         .                       IntTy::I64 => self.types.i64,
         .                       IntTy::I128 => self.types.i128,
         .                   }
       289 ( 0.00%)      }
         .           
         .               pub fn mk_mach_uint(self, tm: UintTy) -> Ty<'tcx> {
         4 ( 0.00%)          match tm {
         .                       UintTy::Usize => self.types.usize,
         .                       UintTy::U8 => self.types.u8,
         .                       UintTy::U16 => self.types.u16,
         .                       UintTy::U32 => self.types.u32,
         .                       UintTy::U64 => self.types.u64,
         .                       UintTy::U128 => self.types.u128,
         .                   }
         4 ( 0.00%)      }
         .           
         .               pub fn mk_mach_float(self, tm: FloatTy) -> Ty<'tcx> {
         .                   match tm {
         .                       FloatTy::F32 => self.types.f32,
         .                       FloatTy::F64 => self.types.f64,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn mk_static_str(self) -> Ty<'tcx> {
     7,222 ( 0.00%)          self.mk_imm_ref(self.lifetimes.re_static, self.types.str_)
         .               }
         .           
         .               #[inline]
         .               pub fn mk_adt(self, def: &'tcx AdtDef, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
         .                   // Take a copy of substs so that we own the vectors inside.
         .                   self.mk_ty(Adt(def, substs))
         .               }
         .           
-- line 2259 ----------------------------------------
-- line 2329 ----------------------------------------
         .               }
         .           
         .               #[inline]
         .               pub fn mk_imm_ptr(self, ty: Ty<'tcx>) -> Ty<'tcx> {
         .                   self.mk_ptr(TypeAndMut { ty, mutbl: hir::Mutability::Not })
         .               }
         .           
         .               #[inline]
     6,022 ( 0.00%)      pub fn mk_array(self, ty: Ty<'tcx>, n: u64) -> Ty<'tcx> {
         .                   self.mk_ty(Array(ty, ty::Const::from_usize(self, n)))
     6,352 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn mk_slice(self, ty: Ty<'tcx>) -> Ty<'tcx> {
         .                   self.mk_ty(Slice(ty))
         .               }
         .           
         .               #[inline]
         .               pub fn intern_tup(self, ts: &[Ty<'tcx>]) -> Ty<'tcx> {
         .                   let kinds: Vec<_> = ts.iter().map(|&t| GenericArg::from(t)).collect();
       684 ( 0.00%)          self.mk_ty(Tuple(self.intern_substs(&kinds)))
         .               }
         .           
         .               pub fn mk_tup<I: InternAs<[Ty<'tcx>], Ty<'tcx>>>(self, iter: I) -> I::Output {
    25,210 ( 0.00%)          iter.intern_with(|ts| {
    12,252 ( 0.00%)              let kinds: Vec<_> = ts.iter().map(|&t| GenericArg::from(t)).collect();
   114,669 ( 0.00%)              self.mk_ty(Tuple(self.intern_substs(&kinds)))
    22,689 ( 0.00%)          })
         .               }
         .           
         .               #[inline]
         .               pub fn mk_unit(self) -> Ty<'tcx> {
     2,152 ( 0.00%)          self.types.unit
         .               }
         .           
         .               #[inline]
         .               pub fn mk_diverging_default(self) -> Ty<'tcx> {
         .                   if self.features().never_type_fallback { self.types.never } else { self.types.unit }
         .               }
         .           
         .               #[inline]
         .               pub fn mk_fn_def(self, def_id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
         .                   self.mk_ty(FnDef(def_id, substs))
         .               }
         .           
         .               #[inline]
         .               pub fn mk_fn_ptr(self, fty: PolyFnSig<'tcx>) -> Ty<'tcx> {
    14,170 ( 0.00%)          self.mk_ty(FnPtr(fty))
         .               }
         .           
         .               #[inline]
         .               pub fn mk_dynamic(
         .                   self,
         .                   obj: &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>>,
         .                   reg: ty::Region<'tcx>,
         .               ) -> Ty<'tcx> {
-- line 2384 ----------------------------------------
-- line 2412 ----------------------------------------
         .           
         .               #[inline]
         .               pub fn mk_ty_var(self, v: TyVid) -> Ty<'tcx> {
         .                   self.mk_ty_infer(TyVar(v))
         .               }
         .           
         .               #[inline]
         .               pub fn mk_const_var(self, v: ConstVid<'tcx>, ty: Ty<'tcx>) -> &'tcx Const<'tcx> {
       390 ( 0.00%)          self.mk_const(ty::Const { val: ty::ConstKind::Infer(InferConst::Var(v)), ty })
         .               }
         .           
         .               #[inline]
         .               pub fn mk_int_var(self, v: IntVid) -> Ty<'tcx> {
         .                   self.mk_ty_infer(IntVar(v))
         .               }
         .           
         .               #[inline]
-- line 2428 ----------------------------------------
-- line 2445 ----------------------------------------
         .                   self.mk_ty(Param(ParamTy { index, name }))
         .               }
         .           
         .               #[inline]
         .               pub fn mk_const_param(self, index: u32, name: Symbol, ty: Ty<'tcx>) -> &'tcx Const<'tcx> {
         .                   self.mk_const(ty::Const { val: ty::ConstKind::Param(ParamConst { index, name }), ty })
         .               }
         .           
    39,781 ( 0.00%)      pub fn mk_param_from_def(self, param: &ty::GenericParamDef) -> GenericArg<'tcx> {
    24,853 ( 0.00%)          match param.kind {
         .                       GenericParamDefKind::Lifetime => {
    10,686 ( 0.00%)                  self.mk_region(ty::ReEarlyBound(param.to_early_bound_region_data())).into()
         .                       }
     7,804 ( 0.00%)              GenericParamDefKind::Type { .. } => self.mk_ty_param(param.index, param.name).into(),
         .                       GenericParamDefKind::Const { .. } => {
         .                           self.mk_const_param(param.index, param.name, self.type_of(param.def_id)).into()
         .                       }
         .                   }
    39,781 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn mk_opaque(self, def_id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
         .                   self.mk_ty(Opaque(def_id, substs))
         .               }
         .           
     3,248 ( 0.00%)      pub fn mk_place_field(self, place: Place<'tcx>, f: Field, ty: Ty<'tcx>) -> Place<'tcx> {
     3,248 ( 0.00%)          self.mk_place_elem(place, PlaceElem::Field(f, ty))
     6,496 ( 0.00%)      }
         .           
         .               pub fn mk_place_deref(self, place: Place<'tcx>) -> Place<'tcx> {
         .                   self.mk_place_elem(place, PlaceElem::Deref)
         .               }
         .           
       495 ( 0.00%)      pub fn mk_place_downcast(
         .                   self,
         .                   place: Place<'tcx>,
         .                   adt_def: &'tcx AdtDef,
         .                   variant_index: VariantIdx,
         .               ) -> Place<'tcx> {
       495 ( 0.00%)          self.mk_place_elem(
         .                       place,
       990 ( 0.00%)              PlaceElem::Downcast(Some(adt_def.variants[variant_index].name), variant_index),
         .                   )
       990 ( 0.00%)      }
         .           
     8,048 ( 0.00%)      pub fn mk_place_downcast_unnamed(
         .                   self,
         .                   place: Place<'tcx>,
         .                   variant_index: VariantIdx,
         .               ) -> Place<'tcx> {
     8,048 ( 0.00%)          self.mk_place_elem(place, PlaceElem::Downcast(None, variant_index))
    16,096 ( 0.00%)      }
         .           
         .               pub fn mk_place_index(self, place: Place<'tcx>, index: Local) -> Place<'tcx> {
         .                   self.mk_place_elem(place, PlaceElem::Index(index))
         .               }
         .           
         .               /// This method copies `Place`'s projection, add an element and reintern it. Should not be used
         .               /// to build a full `Place` it's just a convenient way to grab a projection and modify it in
         .               /// flight.
   117,351 ( 0.00%)      pub fn mk_place_elem(self, place: Place<'tcx>, elem: PlaceElem<'tcx>) -> Place<'tcx> {
         .                   let mut projection = place.projection.to_vec();
         .                   projection.push(elem);
         .           
         .                   Place { local: place.local, projection: self.intern_place_elems(&projection) }
   130,390 ( 0.00%)      }
         .           
    96,565 ( 0.00%)      pub fn intern_poly_existential_predicates(
         .                   self,
         .                   eps: &[ty::Binder<'tcx, ExistentialPredicate<'tcx>>],
         .               ) -> &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>> {
    13,795 ( 0.00%)          assert!(!eps.is_empty());
         .                   assert!(
         .                       eps.array_windows()
    77,125 ( 0.00%)                  .all(|[a, b]| a.skip_binder().stable_cmp(self, &b.skip_binder())
         .                               != Ordering::Greater)
         .                   );
    55,180 ( 0.00%)          self._intern_poly_existential_predicates(eps)
   110,360 ( 0.00%)      }
         .           
         .               pub fn intern_predicates(self, preds: &[Predicate<'tcx>]) -> &'tcx List<Predicate<'tcx>> {
         .                   // FIXME consider asking the input slice to be sorted to avoid
         .                   // re-interning permutations, in which case that would be asserted
         .                   // here.
   123,704 ( 0.00%)          if preds.is_empty() {
         .                       // The macro-generated method below asserts we don't intern an empty slice.
         .                       List::empty()
         .                   } else {
    95,041 ( 0.00%)              self._intern_predicates(preds)
         .                   }
    57,712 ( 0.00%)      }
         .           
         .               pub fn intern_type_list(self, ts: &[Ty<'tcx>]) -> &'tcx List<Ty<'tcx>> {
   263,688 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_type_list(ts) }
     1,052 ( 0.00%)      }
         .           
         .               pub fn intern_substs(self, ts: &[GenericArg<'tcx>]) -> &'tcx List<GenericArg<'tcx>> {
 3,705,019 ( 0.02%)          if ts.is_empty() { List::empty() } else { self._intern_substs(ts) }
   448,886 ( 0.00%)      }
         .           
         .               pub fn intern_projs(self, ps: &[ProjectionKind]) -> &'tcx List<ProjectionKind> {
         .                   if ps.is_empty() { List::empty() } else { self._intern_projs(ps) }
         .               }
         .           
         .               pub fn intern_place_elems(self, ts: &[PlaceElem<'tcx>]) -> &'tcx List<PlaceElem<'tcx>> {
   267,587 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_place_elems(ts) }
    32,058 ( 0.00%)      }
         .           
         .               pub fn intern_canonical_var_infos(
         .                   self,
         .                   ts: &[CanonicalVarInfo<'tcx>],
         .               ) -> CanonicalVarInfos<'tcx> {
   302,696 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_canonical_var_infos(ts) }
     1,204 ( 0.00%)      }
         .           
         .               pub fn intern_bound_variable_kinds(
         .                   self,
         .                   ts: &[ty::BoundVariableKind],
         .               ) -> &'tcx List<ty::BoundVariableKind> {
    32,909 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_bound_variable_kinds(ts) }
    37,504 ( 0.00%)      }
         .           
         .               pub fn mk_fn_sig<I>(
         .                   self,
         .                   inputs: I,
         .                   output: I::Item,
         .                   c_variadic: bool,
         .                   unsafety: hir::Unsafety,
         .                   abi: abi::Abi,
         .               ) -> <I::Item as InternIteratorElement<Ty<'tcx>, ty::FnSig<'tcx>>>::Output
         .               where
         .                   I: Iterator<Item: InternIteratorElement<Ty<'tcx>, ty::FnSig<'tcx>>>,
         .               {
         .                   inputs.chain(iter::once(output)).intern_with(|xs| ty::FnSig {
    17,383 ( 0.00%)              inputs_and_output: self.intern_type_list(xs),
     5,175 ( 0.00%)              c_variadic,
     5,812 ( 0.00%)              unsafety,
     9,130 ( 0.00%)              abi,
     1,470 ( 0.00%)          })
         .               }
         .           
         .               pub fn mk_poly_existential_predicates<
         .                   I: InternAs<
         .                       [ty::Binder<'tcx, ExistentialPredicate<'tcx>>],
         .                       &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>>,
         .                   >,
         .               >(
         .                   self,
         .                   iter: I,
         .               ) -> I::Output {
    39,749 ( 0.00%)          iter.intern_with(|xs| self.intern_poly_existential_predicates(xs))
         .               }
         .           
         .               pub fn mk_predicates<I: InternAs<[Predicate<'tcx>], &'tcx List<Predicate<'tcx>>>>(
         .                   self,
         .                   iter: I,
         .               ) -> I::Output {
        12 ( 0.00%)          iter.intern_with(|xs| self.intern_predicates(xs))
         .               }
         .           
         .               pub fn mk_type_list<I: InternAs<[Ty<'tcx>], &'tcx List<Ty<'tcx>>>>(self, iter: I) -> I::Output {
    26,751 ( 0.00%)          iter.intern_with(|xs| self.intern_type_list(xs))
         .               }
         .           
         .               pub fn mk_substs<I: InternAs<[GenericArg<'tcx>], &'tcx List<GenericArg<'tcx>>>>(
         .                   self,
         .                   iter: I,
         .               ) -> I::Output {
 2,157,953 ( 0.01%)          iter.intern_with(|xs| self.intern_substs(xs))
         .               }
         .           
         .               pub fn mk_place_elems<I: InternAs<[PlaceElem<'tcx>], &'tcx List<PlaceElem<'tcx>>>>(
         .                   self,
         .                   iter: I,
         .               ) -> I::Output {
         .                   iter.intern_with(|xs| self.intern_place_elems(xs))
         .               }
         .           
   217,688 ( 0.00%)      pub fn mk_substs_trait(self, self_ty: Ty<'tcx>, rest: &[GenericArg<'tcx>]) -> SubstsRef<'tcx> {
         .                   self.mk_substs(iter::once(self_ty.into()).chain(rest.iter().cloned()))
   435,376 ( 0.00%)      }
         .           
         .               pub fn mk_bound_variable_kinds<
         .                   I: InternAs<[ty::BoundVariableKind], &'tcx List<ty::BoundVariableKind>>,
         .               >(
         .                   self,
         .                   iter: I,
         .               ) -> I::Output {
   119,003 ( 0.00%)          iter.intern_with(|xs| self.intern_bound_variable_kinds(xs))
         .               }
         .           
         .               /// Walks upwards from `id` to find a node which might change lint levels with attributes.
         .               /// It stops at `bound` and just returns it if reached.
 1,280,412 ( 0.01%)      pub fn maybe_lint_level_root_bounded(self, mut id: HirId, bound: HirId) -> HirId {
 1,280,412 ( 0.01%)          let hir = self.hir();
         .                   loop {
 2,814,936 ( 0.01%)              if id == bound {
         .                           return bound;
         .                       }
         .           
 3,843,156 ( 0.02%)              if hir.attrs(id).iter().any(|attr| Level::from_symbol(attr.name_or_empty()).is_some()) {
         .                           return id;
         .                       }
         .                       let next = hir.get_parent_node(id);
 2,266,188 ( 0.01%)              if next == id {
         .                           bug!("lint traversal reached the root of the crate");
         .                       }
         .                       id = next;
         .                   }
 1,829,160 ( 0.01%)      }
         .           
    59,496 ( 0.00%)      pub fn lint_level_at_node(
         .                   self,
         .                   lint: &'static Lint,
         .                   mut id: hir::HirId,
         .               ) -> (Level, LintLevelSource) {
         .                   let sets = self.lint_levels(());
         .                   loop {
   225,807 ( 0.00%)              if let Some(pair) = sets.level_and_source(lint, id, self.sess) {
         .                           return pair;
         .                       }
    13,521 ( 0.00%)              let next = self.hir().get_parent_node(id);
    40,563 ( 0.00%)              if next == id {
         .                           bug!("lint traversal reached the root of the crate");
         .                       }
         .                       id = next;
         .                   }
    59,496 ( 0.00%)      }
         .           
     8,106 ( 0.00%)      pub fn struct_span_lint_hir(
         .                   self,
         .                   lint: &'static Lint,
         .                   hir_id: HirId,
         .                   span: impl Into<MultiSpan>,
         .                   decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),
         .               ) {
    23,195 ( 0.00%)          let (level, src) = self.lint_level_at_node(lint, hir_id);
     8,383 ( 0.00%)          struct_lint_level(self.sess, lint, level, src, Some(span.into()), decorate);
     4,632 ( 0.00%)      }
         .           
         .               pub fn struct_lint_node(
         .                   self,
         .                   lint: &'static Lint,
         .                   id: HirId,
         .                   decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),
         .               ) {
         .                   let (level, src) = self.lint_level_at_node(lint, id);
         .                   struct_lint_level(self.sess, lint, level, src, None, decorate);
         .               }
         .           
    42,322 ( 0.00%)      pub fn in_scope_traits(self, id: HirId) -> Option<&'tcx [TraitCandidate]> {
    12,092 ( 0.00%)          let map = self.in_scope_traits_map(id.owner)?;
         .                   let candidates = map.get(&id.local_id)?;
    12,092 ( 0.00%)          Some(&*candidates)
    48,368 ( 0.00%)      }
         .           
   123,550 ( 0.00%)      pub fn named_region(self, id: HirId) -> Option<resolve_lifetime::Region> {
         .                   debug!(?id, "named_region");
         .                   self.named_region_map(id.owner).and_then(|map| map.get(&id.local_id).cloned())
   158,850 ( 0.00%)      }
         .           
    10,404 ( 0.00%)      pub fn is_late_bound(self, id: HirId) -> bool {
         .                   self.is_late_bound_map(id.owner)
       196 ( 0.00%)              .map_or(false, |(owner, set)| owner == id.owner && set.contains(&id.local_id))
     9,248 ( 0.00%)      }
         .           
    63,301 ( 0.00%)      pub fn object_lifetime_defaults(self, id: HirId) -> Option<Vec<ObjectLifetimeDefault>> {
         .                   self.object_lifetime_defaults_map(id.owner)
    81,387 ( 0.00%)      }
         .           
    85,986 ( 0.00%)      pub fn late_bound_vars(self, id: HirId) -> &'tcx List<ty::BoundVariableKind> {
         .                   self.mk_bound_variable_kinds(
         .                       self.late_bound_vars_map(id.owner)
         .                           .and_then(|map| map.get(&id.local_id).cloned())
         .                           .unwrap_or_else(|| {
         .                               bug!("No bound vars found for {:?} ({:?})", self.hir().node_to_string(id), id)
         .                           })
         .                           .iter(),
         .                   )
    85,986 ( 0.00%)      }
         .           
         .               pub fn lifetime_scope(self, id: HirId) -> Option<LifetimeScopeForPath> {
         .                   self.lifetime_scope_map(id.owner).and_then(|mut map| map.remove(&id.local_id))
         .               }
         .           
         .               /// Whether the `def_id` counts as const fn in the current crate, considering all active
         .               /// feature gates
       160 ( 0.00%)      pub fn is_const_fn(self, def_id: DefId) -> bool {
        16 ( 0.00%)          if self.is_const_fn_raw(def_id) {
        16 ( 0.00%)              match self.lookup_const_stability(def_id) {
         4 ( 0.00%)                  Some(stability) if stability.level.is_unstable() => {
         .                               // has a `rustc_const_unstable` attribute, check whether the user enabled the
         .                               // corresponding feature gate.
         2 ( 0.00%)                      self.features()
         .                                   .declared_lib_features
         .                                   .iter()
         .                                   .any(|&(sym, _)| sym == stability.feature)
         .                           }
         .                           // functions without const stability are either stable user written
         .                           // const fn or the user is using feature gates and we thus don't
         .                           // care what they do
         .                           _ => true,
         .                       }
         .                   } else {
         .                       false
         .                   }
       144 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> TyCtxtAt<'tcx> {
         .               /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` to ensure it gets used.
         .               #[track_caller]
         .               pub fn ty_error(self) -> Ty<'tcx> {
         .                   self.tcx.ty_error_with_message(self.span, "TyKind::Error constructed but no error reported")
         .               }
-- line 2759 ----------------------------------------
-- line 2774 ----------------------------------------
         .           }
         .           
         .           impl<I, T, R, E> InternAs<[T], R> for I
         .           where
         .               E: InternIteratorElement<T, R>,
         .               I: Iterator<Item = E>,
         .           {
         .               type Output = E::Output;
   109,536 ( 0.00%)      fn intern_with<F>(self, f: F) -> Self::Output
         .               where
         .                   F: FnOnce(&[T]) -> R,
         .               {
 9,334,845 ( 0.05%)          E::intern_with(self, f)
   105,390 ( 0.00%)      }
         .           }
         .           
         .           pub trait InternIteratorElement<T, R>: Sized {
         .               type Output;
         .               fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(iter: I, f: F) -> Self::Output;
         .           }
         .           
         .           impl<T, R> InternIteratorElement<T, R> for T {
         .               type Output = R;
   983,205 ( 0.01%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(
         .                   mut iter: I,
         .                   f: F,
         .               ) -> Self::Output {
         .                   // This code is hot enough that it's worth specializing for the most
         .                   // common length lists, to avoid the overhead of `SmallVec` creation.
         .                   // Lengths 0, 1, and 2 typically account for ~95% of cases. If
         .                   // `size_hint` is incorrect a panic will occur via an `unwrap` or an
         .                   // `assert`.
 1,220,653 ( 0.01%)          match iter.size_hint() {
         .                       (0, Some(0)) => {
       261 ( 0.00%)                  assert!(iter.next().is_none());
         .                           f(&[])
         .                       }
         .                       (1, Some(1)) => {
         .                           let t0 = iter.next().unwrap();
       283 ( 0.00%)                  assert!(iter.next().is_none());
   215,686 ( 0.00%)                  f(&[t0])
         .                       }
         .                       (2, Some(2)) => {
         .                           let t0 = iter.next().unwrap();
         .                           let t1 = iter.next().unwrap();
       907 ( 0.00%)                  assert!(iter.next().is_none());
    93,742 ( 0.00%)                  f(&[t0, t1])
         .                       }
    17,348 ( 0.00%)              _ => f(&iter.collect::<SmallVec<[_; 8]>>()),
         .                   }
 1,139,131 ( 0.01%)      }
         .           }
         .           
         .           impl<'a, T, R> InternIteratorElement<T, R> for &'a T
         .           where
         .               T: Clone + 'a,
         .           {
         .               type Output = R;
    50,888 ( 0.00%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(iter: I, f: F) -> Self::Output {
         .                   // This code isn't hot.
       588 ( 0.00%)          f(&iter.cloned().collect::<SmallVec<[_; 8]>>())
    41,306 ( 0.00%)      }
         .           }
         .           
         .           impl<T, R, E> InternIteratorElement<T, R> for Result<T, E> {
         .               type Output = Result<R, E>;
 3,670,060 ( 0.02%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(
         .                   mut iter: I,
         .                   f: F,
         .               ) -> Self::Output {
         .                   // This code is hot enough that it's worth specializing for the most
         .                   // common length lists, to avoid the overhead of `SmallVec` creation.
         .                   // Lengths 0, 1, and 2 typically account for ~95% of cases. If
         .                   // `size_hint` is incorrect a panic will occur via an `unwrap` or an
         .                   // `assert`, unless a failure happens first, in which case the result
         .                   // will be an error anyway.
 2,648,974 ( 0.01%)          Ok(match iter.size_hint() {
         .                       (0, Some(0)) => {
         .                           assert!(iter.next().is_none());
         .                           f(&[])
         .                       }
         .                       (1, Some(1)) => {
    18,210 ( 0.00%)                  let t0 = iter.next().unwrap()?;
         .                           assert!(iter.next().is_none());
   175,657 ( 0.00%)                  f(&[t0])
         .                       }
         .                       (2, Some(2)) => {
     5,684 ( 0.00%)                  let t0 = iter.next().unwrap()?;
     5,684 ( 0.00%)                  let t1 = iter.next().unwrap()?;
     8,526 ( 0.00%)                  assert!(iter.next().is_none());
   217,620 ( 0.00%)                  f(&[t0, t1])
         .                       }
    82,725 ( 0.00%)              _ => f(&iter.collect::<Result<SmallVec<[_; 8]>, _>>()?),
         .                   })
 4,113,173 ( 0.02%)      }
         .           }
         .           
         .           // We are comparing types with different invariant lifetimes, so `ptr::eq`
         .           // won't work for us.
         .           fn ptr_eq<T, U>(t: *const T, u: *const U) -> bool {
   700,093 ( 0.00%)      t as *const () == u as *const ()
         .           }
         .           
         .           pub fn provide(providers: &mut ty::query::Providers) {
         2 ( 0.00%)      providers.in_scope_traits_map =
         .                   |tcx, id| tcx.hir_crate(()).owners[id].as_ref().map(|owner_info| &owner_info.trait_map);
         3 ( 0.00%)      providers.resolutions = |tcx, ()| &tcx.untracked_resolutions;
         2 ( 0.00%)      providers.module_reexports =
         .                   |tcx, id| tcx.resolutions(()).reexport_map.get(&id).map(|v| &v[..]);
         2 ( 0.00%)      providers.crate_name = |tcx, id| {
         1 ( 0.00%)          assert_eq!(id, LOCAL_CRATE);
         1 ( 0.00%)          tcx.crate_name
         .               };
         2 ( 0.00%)      providers.maybe_unused_trait_import =
         .                   |tcx, id| tcx.resolutions(()).maybe_unused_trait_imports.contains(&id);
         2 ( 0.00%)      providers.maybe_unused_extern_crates =
         .                   |tcx, ()| &tcx.resolutions(()).maybe_unused_extern_crates[..];
         2 ( 0.00%)      providers.names_imported_by_glob_use = |tcx, id| {
         .                   tcx.arena.alloc(tcx.resolutions(()).glob_map.get(&id).cloned().unwrap_or_default())
         .               };
         .           
        11 ( 0.00%)      providers.lookup_stability = |tcx, id| tcx.stability().local_stability(id.expect_local());
         2 ( 0.00%)      providers.lookup_const_stability =
         .                   |tcx, id| tcx.stability().local_const_stability(id.expect_local());
         2 ( 0.00%)      providers.lookup_deprecation_entry =
    69,416 ( 0.00%)          |tcx, id| tcx.stability().local_deprecation_entry(id.expect_local());
         2 ( 0.00%)      providers.extern_mod_stmt_cnum =
         .                   |tcx, id| tcx.resolutions(()).extern_crate_map.get(&id).cloned();
         3 ( 0.00%)      providers.output_filenames = |tcx, ()| tcx.output_filenames.clone();
         3 ( 0.00%)      providers.features_query = |tcx, ()| tcx.sess.features_untracked();
         2 ( 0.00%)      providers.is_panic_runtime = |tcx, cnum| {
         .                   assert_eq!(cnum, LOCAL_CRATE);
         .                   tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::panic_runtime)
         .               };
         2 ( 0.00%)      providers.is_compiler_builtins = |tcx, cnum| {
         .                   assert_eq!(cnum, LOCAL_CRATE);
         .                   tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::compiler_builtins)
         .               };
         2 ( 0.00%)      providers.has_panic_handler = |tcx, cnum| {
         1 ( 0.00%)          assert_eq!(cnum, LOCAL_CRATE);
         .                   // We want to check if the panic handler was defined in this crate
         3 ( 0.00%)          tcx.lang_items().panic_impl().map_or(false, |did| did.is_local())
         .               };
         .           }

 7,962,185 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/type_variable.rs
--------------------------------------------------------------------------------
Ir                 

-- line 44 ----------------------------------------
        .           /// Convert from a specific kind of undo to the more general UndoLog
        .           impl<'tcx> From<Instantiate> for UndoLog<'tcx> {
        .               fn from(l: Instantiate) -> Self {
        .                   UndoLog::Values(sv::UndoLog::Other(l))
        .               }
        .           }
        .           
        .           impl<'tcx> Rollback<UndoLog<'tcx>> for TypeVariableStorage<'tcx> {
  477,375 ( 0.00%)      fn reverse(&mut self, undo: UndoLog<'tcx>) {
2,010,537 ( 0.01%)          match undo {
  376,338 ( 0.00%)              UndoLog::EqRelation(undo) => self.eq_relations.reverse(undo),
  209,498 ( 0.00%)              UndoLog::SubRelation(undo) => self.sub_relations.reverse(undo),
  368,914 ( 0.00%)              UndoLog::Values(undo) => self.values.reverse(undo),
        .                   }
  954,750 ( 0.00%)      }
        .           }
        .           
        .           pub struct TypeVariableStorage<'tcx> {
        .               values: sv::SnapshotVecStorage<Delegate>,
        .           
        .               /// Two variables are unified in `eq_relations` when we have a
        .               /// constraint `?X == ?Y`. This table also stores, for each key,
        .               /// the known value.
-- line 66 ----------------------------------------
-- line 136 ----------------------------------------
        .               DynReturnFn,
        .               LatticeVariable,
        .           }
        .           
        .           pub(crate) struct TypeVariableData {
        .               origin: TypeVariableOrigin,
        .           }
        .           
3,716,310 ( 0.02%)  #[derive(Copy, Clone, Debug)]
        .           pub enum TypeVariableValue<'tcx> {
        .               Known { value: Ty<'tcx> },
        .               Unknown { universe: ty::UniverseIndex },
        .           }
        .           
        .           impl<'tcx> TypeVariableValue<'tcx> {
        .               /// If this value is known, returns the type it is known to be.
        .               /// Otherwise, `None`.
        .               pub fn known(&self) -> Option<Ty<'tcx>> {
2,367,602 ( 0.01%)          match *self {
        .                       TypeVariableValue::Unknown { .. } => None,
        .                       TypeVariableValue::Known { value } => Some(value),
        .                   }
        .               }
        .           
        .               pub fn is_unknown(&self) -> bool {
        .                   match *self {
        .                       TypeVariableValue::Unknown { .. } => true,
-- line 162 ----------------------------------------
-- line 166 ----------------------------------------
        .           }
        .           
        .           pub(crate) struct Instantiate;
        .           
        .           pub(crate) struct Delegate;
        .           
        .           impl<'tcx> TypeVariableStorage<'tcx> {
        .               pub fn new() -> TypeVariableStorage<'tcx> {
  237,165 ( 0.00%)          TypeVariableStorage {
        .                       values: sv::SnapshotVecStorage::new(),
        .                       eq_relations: ut::UnificationTableStorage::new(),
        .                       sub_relations: ut::UnificationTableStorage::new(),
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub(crate) fn with_log<'a>(
-- line 182 ----------------------------------------
-- line 188 ----------------------------------------
        .           }
        .           
        .           impl<'tcx> TypeVariableTable<'_, 'tcx> {
        .               /// Returns the origin that was given when `vid` was created.
        .               ///
        .               /// Note that this function does not return care whether
        .               /// `vid` has been unified with something else or not.
        .               pub fn var_origin(&self, vid: ty::TyVid) -> &TypeVariableOrigin {
    5,132 ( 0.00%)          &self.storage.values.get(vid.as_usize()).origin
        .               }
        .           
        .               /// Records that `a == b`, depending on `dir`.
        .               ///
        .               /// Precondition: neither `a` nor `b` are known.
        .               pub fn equate(&mut self, a: ty::TyVid, b: ty::TyVid) {
        .                   debug_assert!(self.probe(a).is_unknown());
        .                   debug_assert!(self.probe(b).is_unknown());
   19,656 ( 0.00%)          self.eq_relations().union(a, b);
   16,848 ( 0.00%)          self.sub_relations().union(a, b);
        .               }
        .           
        .               /// Records that `a <: b`, depending on `dir`.
        .               ///
        .               /// Precondition: neither `a` nor `b` are known.
        .               pub fn sub(&mut self, a: ty::TyVid, b: ty::TyVid) {
        .                   debug_assert!(self.probe(a).is_unknown());
        .                   debug_assert!(self.probe(b).is_unknown());
   31,621 ( 0.00%)          self.sub_relations().union(a, b);
        .               }
        .           
        .               /// Instantiates `vid` with the type `ty`.
        .               ///
        .               /// Precondition: `vid` must not have been previously instantiated.
  840,385 ( 0.00%)      pub fn instantiate(&mut self, vid: ty::TyVid, ty: Ty<'tcx>) {
        .                   let vid = self.root_var(vid);
        .                   debug_assert!(self.probe(vid).is_unknown());
        .                   debug_assert!(
        .                       self.eq_relations().probe_value(vid).is_unknown(),
        .                       "instantiating type variable `{:?}` twice: new-value = {:?}, old-value={:?}",
        .                       vid,
        .                       ty,
        .                       self.eq_relations().probe_value(vid)
        .                   );
1,176,539 ( 0.01%)          self.eq_relations().union_value(vid, TypeVariableValue::Known { value: ty });
        .           
        .                   // Hack: we only need this so that `types_escaping_snapshot`
        .                   // can see what has been unified; see the Delegate impl for
        .                   // more details.
        .                   self.undo_log.push(Instantiate);
  840,385 ( 0.00%)      }
        .           
        .               /// Creates a new type variable.
        .               ///
        .               /// - `diverging`: indicates if this is a "diverging" type
        .               ///   variable, e.g.,  one created as the type of a `return`
        .               ///   expression. The code in this module doesn't care if a
        .               ///   variable is diverging, but the main Rust type-checker will
        .               ///   sometimes "unify" such variables with the `!` or `()` types.
        .               /// - `origin`: indicates *why* the type variable was created.
        .               ///   The code in this module doesn't care, but it can be useful
        .               ///   for improving error messages.
1,045,716 ( 0.01%)      pub fn new_var(
        .                   &mut self,
        .                   universe: ty::UniverseIndex,
        .                   origin: TypeVariableOrigin,
        .               ) -> ty::TyVid {
1,568,574 ( 0.01%)          let eq_key = self.eq_relations().new_key(TypeVariableValue::Unknown { universe });
        .           
  871,430 ( 0.00%)          let sub_key = self.sub_relations().new_key(());
  174,286 ( 0.00%)          assert_eq!(eq_key.vid, sub_key);
        .           
1,568,574 ( 0.01%)          let index = self.values().push(TypeVariableData { origin });
  697,144 ( 0.00%)          assert_eq!(eq_key.vid.as_u32(), index as u32);
        .           
        .                   debug!("new_var(index={:?}, universe={:?}, origin={:?}", eq_key.vid, universe, origin,);
        .           
        .                   eq_key.vid
1,220,002 ( 0.01%)      }
        .           
        .               /// Returns the number of type variables created thus far.
        .               pub fn num_vars(&self) -> usize {
   11,572 ( 0.00%)          self.storage.values.len()
        .               }
        .           
        .               /// Returns the "root" variable of `vid` in the `eq_relations`
        .               /// equivalence table. All type variables that have been equated
        .               /// will yield the same root variable (per the union-find
        .               /// algorithm), so `root_var(a) == root_var(b)` implies that `a ==
        .               /// b` (transitively).
        .               pub fn root_var(&mut self, vid: ty::TyVid) -> ty::TyVid {
  694,509 ( 0.00%)          self.eq_relations().find(vid).vid
        .               }
        .           
        .               /// Returns the "root" variable of `vid` in the `sub_relations`
        .               /// equivalence table. All type variables that have been are
        .               /// related via equality or subtyping will yield the same root
        .               /// variable (per the union-find algorithm), so `sub_root_var(a)
        .               /// == sub_root_var(b)` implies that:
        .               ///
        .               ///     exists X. (a <: X || X <: a) && (b <: X || X <: b)
    3,344 ( 0.00%)      pub fn sub_root_var(&mut self, vid: ty::TyVid) -> ty::TyVid {
  545,184 ( 0.00%)          self.sub_relations().find(vid)
    6,688 ( 0.00%)      }
        .           
        .               /// Returns `true` if `a` and `b` have same "sub-root" (i.e., exists some
        .               /// type X such that `forall i in {a, b}. (i <: X || X <: i)`.
        .               pub fn sub_unified(&mut self, a: ty::TyVid, b: ty::TyVid) -> bool {
        .                   self.sub_root_var(a) == self.sub_root_var(b)
        .               }
        .           
        .               /// Retrieves the type to which `vid` has been instantiated, if
        .               /// any.
8,439,030 ( 0.04%)      pub fn probe(&mut self, vid: ty::TyVid) -> TypeVariableValue<'tcx> {
        .                   self.inlined_probe(vid)
8,439,030 ( 0.04%)      }
        .           
        .               /// An always-inlined variant of `probe`, for very hot call sites.
        .               #[inline(always)]
        .               pub fn inlined_probe(&mut self, vid: ty::TyVid) -> TypeVariableValue<'tcx> {
5,173,900 ( 0.03%)          self.eq_relations().inlined_probe_value(vid)
        .               }
        .           
        .               /// If `t` is a type-inference variable, and it has been
        .               /// instantiated, then return the with which it was
        .               /// instantiated. Otherwise, returns `t`.
        .               pub fn replace_if_possible(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {
1,673,476 ( 0.01%)          match *t.kind() {
1,279,278 ( 0.01%)              ty::Infer(ty::TyVar(v)) => match self.probe(v) {
        .                           TypeVariableValue::Unknown { .. } => t,
        .                           TypeVariableValue::Known { value } => value,
        .                       },
        .                       _ => t,
        .                   }
        .               }
        .           
        .               #[inline]
-- line 323 ----------------------------------------
-- line 324 ----------------------------------------
        .               fn values(
        .                   &mut self,
        .               ) -> sv::SnapshotVec<Delegate, &mut Vec<TypeVariableData>, &mut InferCtxtUndoLogs<'tcx>> {
        .                   self.storage.values.with_log(self.undo_log)
        .               }
        .           
        .               #[inline]
        .               fn eq_relations(&mut self) -> super::UnificationTable<'_, 'tcx, TyVidEqKey<'tcx>> {
7,055,885 ( 0.04%)          self.storage.eq_relations.with_log(self.undo_log)
        .               }
        .           
        .               #[inline]
        .               fn sub_relations(&mut self) -> super::UnificationTable<'_, 'tcx, ty::TyVid> {
  380,333 ( 0.00%)          self.storage.sub_relations.with_log(self.undo_log)
        .               }
        .           
        .               /// Returns a range of the type variables created during the snapshot.
   57,860 ( 0.00%)      pub fn vars_since_snapshot(
        .                   &mut self,
        .                   value_count: usize,
        .               ) -> (Range<TyVid>, Vec<TypeVariableOrigin>) {
        .                   let range = TyVid::from_usize(value_count)..TyVid::from_usize(self.num_vars());
   69,432 ( 0.00%)          (
        .                       range.start..range.end,
        .                       (range.start.as_usize()..range.end.as_usize())
        .                           .map(|index| self.storage.values.get(index).origin)
        .                           .collect(),
        .                   )
   69,432 ( 0.00%)      }
        .           
        .               /// Returns indices of all variables that are not yet
        .               /// instantiated.
        .               pub fn unsolved_variables(&mut self) -> Vec<ty::TyVid> {
        .                   (0..self.storage.values.len())
        .                       .filter_map(|i| {
        .                           let vid = ty::TyVid::from_usize(i);
  376,780 ( 0.00%)                  match self.probe(vid) {
        .                               TypeVariableValue::Unknown { .. } => Some(vid),
        .                               TypeVariableValue::Known { .. } => None,
        .                           }
        .                       })
        .                       .collect()
        .               }
        .           }
        .           
-- line 368 ----------------------------------------
-- line 391 ----------------------------------------
        .           /// These structs (a newtyped TyVid) are used as the unification key
        .           /// for the `eq_relations`; they carry a `TypeVariableValue` along
        .           /// with them.
        .           #[derive(Copy, Clone, Debug, PartialEq, Eq)]
        .           pub(crate) struct TyVidEqKey<'tcx> {
        .               vid: ty::TyVid,
        .           
        .               // in the table, we map each ty-vid to one of these:
5,068,889 ( 0.03%)      phantom: PhantomData<TypeVariableValue<'tcx>>,
        .           }
        .           
        .           impl<'tcx> From<ty::TyVid> for TyVidEqKey<'tcx> {
        .               #[inline] // make this function eligible for inlining - it is quite hot.
        .               fn from(vid: ty::TyVid) -> Self {
        .                   TyVidEqKey { vid, phantom: PhantomData }
        .               }
        .           }
-- line 407 ----------------------------------------
-- line 419 ----------------------------------------
        .                   "TyVidEqKey"
        .               }
        .           }
        .           
        .           impl<'tcx> ut::UnifyValue for TypeVariableValue<'tcx> {
        .               type Error = ut::NoError;
        .           
        .               fn unify_values(value1: &Self, value2: &Self) -> Result<Self, ut::NoError> {
  686,348 ( 0.00%)          match (value1, value2) {
        .                       // We never equate two type variables, both of which
        .                       // have known types.  Instead, we recursively equate
        .                       // those types.
        .                       (&TypeVariableValue::Known { .. }, &TypeVariableValue::Known { .. }) => {
        .                           bug!("equating two type variables, both of which have known types")
        .                       }
        .           
        .                       // If one side is known, prefer that one.
        .                       (&TypeVariableValue::Known { .. }, &TypeVariableValue::Unknown { .. }) => Ok(*value1),
        .                       (&TypeVariableValue::Unknown { .. }, &TypeVariableValue::Known { .. }) => Ok(*value2),
        .           
        .                       // If both sides are *unknown*, it hardly matters, does it?
        .                       (
    2,808 ( 0.00%)                  &TypeVariableValue::Unknown { universe: universe1 },
    2,808 ( 0.00%)                  &TypeVariableValue::Unknown { universe: universe2 },
        .                       ) => {
        .                           // If we unify two unbound variables, ?T and ?U, then whatever
        .                           // value they wind up taking (which must be the same value) must
        .                           // be nameable by both universes. Therefore, the resulting
        .                           // universe is the minimum of the two universes, because that is
        .                           // the one which contains the fewest names in scope.
        .                           let universe = cmp::min(universe1, universe2);
   11,232 ( 0.00%)                  Ok(TypeVariableValue::Unknown { universe })
        .                       }
        .                   }
        .               }
        .           }

  420,468 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/type_variable.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/mir/traversal.rs
--------------------------------------------------------------------------------
Ir                 

-- line 23 ----------------------------------------
        .           pub struct Preorder<'a, 'tcx> {
        .               body: &'a Body<'tcx>,
        .               visited: BitSet<BasicBlock>,
        .               worklist: Vec<BasicBlock>,
        .               root_is_start_block: bool,
        .           }
        .           
        .           impl<'a, 'tcx> Preorder<'a, 'tcx> {
  162,110 ( 0.00%)      pub fn new(body: &'a Body<'tcx>, root: BasicBlock) -> Preorder<'a, 'tcx> {
   16,211 ( 0.00%)          let worklist = vec![root];
        .           
   48,633 ( 0.00%)          Preorder {
        .                       body,
        .                       visited: BitSet::new_empty(body.basic_blocks().len()),
   64,844 ( 0.00%)              worklist,
        .                       root_is_start_block: root == START_BLOCK,
        .                   }
  145,899 ( 0.00%)      }
        .           }
        .           
   18,714 ( 0.00%)  pub fn preorder<'a, 'tcx>(body: &'a Body<'tcx>) -> Preorder<'a, 'tcx> {
   59,838 ( 0.00%)      Preorder::new(body, START_BLOCK)
   28,071 ( 0.00%)  }
        .           
        .           impl<'a, 'tcx> Iterator for Preorder<'a, 'tcx> {
        .               type Item = (BasicBlock, &'a BasicBlockData<'tcx>);
        .           
5,474,799 ( 0.03%)      fn next(&mut self) -> Option<(BasicBlock, &'a BasicBlockData<'tcx>)> {
  701,043 ( 0.00%)          while let Some(idx) = self.worklist.pop() {
  701,043 ( 0.00%)              if !self.visited.insert(idx) {
        .                           continue;
        .                       }
        .           
  481,498 ( 0.00%)              let data = &self.body[idx];
        .           
2,407,490 ( 0.01%)              if let Some(ref term) = data.terminator {
        .                           self.worklist.extend(term.successors());
        .                       }
        .           
        .                       return Some((idx, data));
        .                   }
        .           
        .                   None
4,479,381 ( 0.02%)      }
        .           
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   // All the blocks, minus the number of blocks we've visited.
        .                   let upper = self.body.basic_blocks().len() - self.visited.count();
        .           
        .                   let lower = if self.root_is_start_block {
        .                       // We will visit all remaining blocks exactly once.
        .                       upper
-- line 74 ----------------------------------------
-- line 101 ----------------------------------------
        .           pub struct Postorder<'a, 'tcx> {
        .               body: &'a Body<'tcx>,
        .               visited: BitSet<BasicBlock>,
        .               visit_stack: Vec<(BasicBlock, Successors<'a>)>,
        .               root_is_start_block: bool,
        .           }
        .           
        .           impl<'a, 'tcx> Postorder<'a, 'tcx> {
  151,242 ( 0.00%)      pub fn new(body: &'a Body<'tcx>, root: BasicBlock) -> Postorder<'a, 'tcx> {
        .                   let mut po = Postorder {
        .                       body,
        .                       visited: BitSet::new_empty(body.basic_blocks().len()),
        .                       visit_stack: Vec::new(),
        .                       root_is_start_block: root == START_BLOCK,
        .                   };
        .           
        .                   let data = &po.body[root];
        .           
  151,242 ( 0.00%)          if let Some(ref term) = data.terminator {
        .                       po.visited.insert(root);
   86,424 ( 0.00%)              po.visit_stack.push((root, term.successors()));
   43,212 ( 0.00%)              po.traverse_successor();
        .                   }
        .           
        .                   po
  194,454 ( 0.00%)      }
        .           
4,111,947 ( 0.02%)      fn traverse_successor(&mut self) {
        .                   // This is quite a complex loop due to 1. the borrow checker not liking it much
        .                   // and 2. what exactly is going on is not clear
        .                   //
        .                   // It does the actual traversal of the graph, while the `next` method on the iterator
        .                   // just pops off of the stack. `visit_stack` is a stack containing pairs of nodes and
        .                   // iterators over the successors of those nodes. Each iteration attempts to get the next
        .                   // node from the top of the stack, then pushes that node and an iterator over the
        .                   // successors to the top of the stack. This loop only grows `visit_stack`, stopping when
-- line 136 ----------------------------------------
-- line 169 ----------------------------------------
        .                   //
        .                   // Now that the top of the stack has no successors we can traverse, each item will
        .                   // be popped off during iteration until we get back to `A`. This yields [E, D, B].
        .                   //
        .                   // When we yield `B` and call `traverse_successor`, we push `C` to the stack, but
        .                   // since we've already visited `E`, that child isn't added to the stack. The last
        .                   // two iterations yield `C` and finally `A` for a final traversal of [E, D, B, C, A]
        .                   loop {
4,165,902 ( 0.02%)              let bb = if let Some(&mut (_, ref mut iter)) = self.visit_stack.last_mut() {
2,446,851 ( 0.01%)                  if let Some(&bb) = iter.next() {
        .                               bb
        .                           } else {
        .                               break;
        .                           }
        .                       } else {
        .                           break;
        .                       };
        .           
  815,617 ( 0.00%)              if self.visited.insert(bb) {
3,809,463 ( 0.02%)                  if let Some(term) = &self.body[bb].terminator {
2,176,836 ( 0.01%)                      self.visit_stack.push((bb, term.successors()));
        .                           }
        .                       }
        .                   }
4,699,368 ( 0.02%)      }
        .           }
        .           
      778 ( 0.00%)  pub fn postorder<'a, 'tcx>(body: &'a Body<'tcx>) -> Postorder<'a, 'tcx> {
      778 ( 0.00%)      Postorder::new(body, START_BLOCK)
    1,167 ( 0.00%)  }
        .           
        .           impl<'a, 'tcx> Iterator for Postorder<'a, 'tcx> {
        .               type Item = (BasicBlock, &'a BasicBlockData<'tcx>);
        .           
  128,190 ( 0.00%)      fn next(&mut self) -> Option<(BasicBlock, &'a BasicBlockData<'tcx>)> {
        .                   let next = self.visit_stack.pop();
  565,815 ( 0.00%)          if next.is_some() {
1,110,413 ( 0.01%)              self.traverse_successor();
        .                   }
        .           
  565,815 ( 0.00%)          next.map(|(bb, _)| (bb, &self.body[bb]))
  213,650 ( 0.00%)      }
        .           
    2,430 ( 0.00%)      fn size_hint(&self) -> (usize, Option<usize>) {
        .                   // All the blocks, minus the number of blocks we've visited.
   79,494 ( 0.00%)          let upper = self.body.basic_blocks().len() - self.visited.count();
        .           
   79,494 ( 0.00%)          let lower = if self.root_is_start_block {
        .                       // We will visit all remaining blocks exactly once.
        .                       upper
        .                   } else {
        .                       self.visit_stack.len()
        .                   };
        .           
    1,458 ( 0.00%)          (lower, Some(upper))
    3,402 ( 0.00%)      }
        .           }
        .           
        .           /// Reverse postorder traversal of a graph
        .           ///
        .           /// Reverse postorder is the reverse order of a postorder traversal.
        .           /// This is different to a preorder traversal and represents a natural
        .           /// linearization of control-flow.
        .           ///
-- line 232 ----------------------------------------
-- line 253 ----------------------------------------
        .           pub struct ReversePostorder<'a, 'tcx> {
        .               body: &'a Body<'tcx>,
        .               blocks: Vec<BasicBlock>,
        .               idx: usize,
        .           }
        .           
        .           impl<'a, 'tcx> ReversePostorder<'a, 'tcx> {
        .               pub fn new(body: &'a Body<'tcx>, root: BasicBlock) -> ReversePostorder<'a, 'tcx> {
   42,434 ( 0.00%)          let blocks: Vec<_> = Postorder::new(body, root).map(|(bb, _)| bb).collect();
        .           
   21,217 ( 0.00%)          let len = blocks.len();
        .           
  106,085 ( 0.00%)          ReversePostorder { body, blocks, idx: len }
        .               }
        .           }
        .           
  127,302 ( 0.00%)  pub fn reverse_postorder<'a, 'tcx>(body: &'a Body<'tcx>) -> ReversePostorder<'a, 'tcx> {
        .               ReversePostorder::new(body, START_BLOCK)
  106,085 ( 0.00%)  }
        .           
        .           impl<'a, 'tcx> Iterator for ReversePostorder<'a, 'tcx> {
        .               type Item = (BasicBlock, &'a BasicBlockData<'tcx>);
        .           
  544,691 ( 0.00%)      fn next(&mut self) -> Option<(BasicBlock, &'a BasicBlockData<'tcx>)> {
2,178,764 ( 0.01%)          if self.idx == 0 {
        .                       return None;
        .                   }
1,046,948 ( 0.01%)          self.idx -= 1;
        .           
        .                   self.blocks.get(self.idx).map(|&bb| (bb, &self.body[bb]))
1,089,382 ( 0.01%)      }
        .           
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   (self.idx, Some(self.idx))
        .               }
        .           }
        .           
        .           impl<'a, 'tcx> ExactSizeIterator for ReversePostorder<'a, 'tcx> {}
        .           
-- line 291 ----------------------------------------
-- line 295 ----------------------------------------
        .           /// This is clearer than writing `preorder` in cases where the order doesn't matter.
        .           pub fn reachable<'a, 'tcx>(
        .               body: &'a Body<'tcx>,
        .           ) -> impl 'a + Iterator<Item = (BasicBlock, &'a BasicBlockData<'tcx>)> {
        .               preorder(body)
        .           }
        .           
        .           /// Returns a `BitSet` containing all basic blocks reachable from the `START_BLOCK`.
   41,124 ( 0.00%)  pub fn reachable_as_bitset<'tcx>(body: &Body<'tcx>) -> BitSet<BasicBlock> {
        .               let mut iter = preorder(body);
        .               (&mut iter).for_each(drop);
   27,416 ( 0.00%)      iter.visited
   41,124 ( 0.00%)  }

5,659,114 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/mir/traversal.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/freshen.rs
--------------------------------------------------------------------------------
Ir                 

-- line 47 ----------------------------------------
        .               const_freshen_count: u32,
        .               ty_freshen_map: FxHashMap<ty::InferTy, Ty<'tcx>>,
        .               const_freshen_map: FxHashMap<ty::InferConst<'tcx>, &'tcx ty::Const<'tcx>>,
        .               keep_static: bool,
        .           }
        .           
        .           impl<'a, 'tcx> TypeFreshener<'a, 'tcx> {
        .               pub fn new(infcx: &'a InferCtxt<'a, 'tcx>, keep_static: bool) -> TypeFreshener<'a, 'tcx> {
3,596,810 ( 0.02%)          TypeFreshener {
        .                       infcx,
        .                       ty_freshen_count: 0,
        .                       const_freshen_count: 0,
        .                       ty_freshen_map: Default::default(),
        .                       const_freshen_map: Default::default(),
        .                       keep_static,
        .                   }
        .               }
        .           
1,143,384 ( 0.01%)      fn freshen_ty<F>(
        .                   &mut self,
        .                   opt_ty: Option<Ty<'tcx>>,
        .                   key: ty::InferTy,
        .                   freshener: F,
        .               ) -> Ty<'tcx>
        .               where
        .                   F: FnOnce(u32) -> ty::InferTy,
        .               {
  285,846 ( 0.00%)          if let Some(ty) = opt_ty {
        .                       return ty.fold_with(self);
        .                   }
        .           
  177,630 ( 0.00%)          match self.ty_freshen_map.entry(key) {
   14,014 ( 0.00%)              Entry::Occupied(entry) => *entry.get(),
        .                       Entry::Vacant(entry) => {
   74,801 ( 0.00%)                  let index = self.ty_freshen_count;
  299,204 ( 0.00%)                  self.ty_freshen_count += 1;
  149,602 ( 0.00%)                  let t = self.infcx.tcx.mk_ty_infer(freshener(index));
        .                           entry.insert(t);
        .                           t
        .                       }
        .                   }
  799,335 ( 0.00%)      }
        .           
        .               fn freshen_const<F>(
        .                   &mut self,
        .                   opt_ct: Option<&'tcx ty::Const<'tcx>>,
        .                   key: ty::InferConst<'tcx>,
        .                   freshener: F,
        .                   ty: Ty<'tcx>,
        .               ) -> &'tcx ty::Const<'tcx>
-- line 96 ----------------------------------------
-- line 111 ----------------------------------------
        .                           ct
        .                       }
        .                   }
        .               }
        .           }
        .           
        .           impl<'a, 'tcx> TypeFolder<'tcx> for TypeFreshener<'a, 'tcx> {
        .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
1,372,410 ( 0.01%)          self.infcx.tcx
  259,090 ( 0.00%)      }
        .           
        .               fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
1,030,432 ( 0.01%)          match *r {
        .                       ty::ReLateBound(..) => {
        .                           // leave bound regions alone
        .                           r
        .                       }
        .           
        .                       ty::ReEarlyBound(..)
        .                       | ty::ReFree(_)
        .                       | ty::ReVar(_)
        .                       | ty::RePlaceholder(..)
        .                       | ty::ReEmpty(_)
        .                       | ty::ReErased => {
        .                           // replace all free regions with 'erased
        .                           self.tcx().lifetimes.re_erased
        .                       }
        .                       ty::ReStatic => {
   13,004 ( 0.00%)                  if self.keep_static {
        .                               r
        .                           } else {
        .                               self.tcx().lifetimes.re_erased
        .                           }
        .                       }
        .                   }
       12 ( 0.00%)      }
        .           
5,564,460 ( 0.03%)      fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {
2,782,230 ( 0.01%)          if !t.needs_infer() && !t.has_erasable_regions() {
        .                       return t;
        .                   }
        .           
        .                   let tcx = self.infcx.tcx;
        .           
2,347,059 ( 0.01%)          match *t.kind() {
  142,923 ( 0.00%)              ty::Infer(ty::TyVar(v)) => {
1,143,384 ( 0.01%)                  let opt_ty = self.infcx.inner.borrow_mut().type_variables().probe(v).known();
1,286,307 ( 0.01%)                  self.freshen_ty(opt_ty, ty::TyVar(v), ty::FreshTy)
        .                       }
        .           
        .                       ty::Infer(ty::IntVar(v)) => self.freshen_ty(
        .                           self.infcx
        .                               .inner
        .                               .borrow_mut()
        .                               .int_unification_table()
        .                               .probe_value(v)
-- line 166 ----------------------------------------
-- line 210 ----------------------------------------
        .                       | ty::Dynamic(..)
        .                       | ty::Never
        .                       | ty::Tuple(..)
        .                       | ty::Projection(..)
        .                       | ty::Foreign(..)
        .                       | ty::Param(..)
        .                       | ty::Closure(..)
        .                       | ty::GeneratorWitness(..)
2,447,544 ( 0.01%)              | ty::Opaque(..) => t.super_fold_with(self),
        .           
        .                       ty::Placeholder(..) | ty::Bound(..) => bug!("unexpected type {:?}", t),
        .                   }
3,349,808 ( 0.02%)      }
        .           
    5,808 ( 0.00%)      fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
    5,808 ( 0.00%)          match ct.val {
        .                       ty::ConstKind::Infer(ty::InferConst::Var(v)) => {
        .                           let opt_ct = self
        .                               .infcx
        .                               .inner
        .                               .borrow_mut()
        .                               .const_unification_table()
        .                               .probe_value(v)
        .                               .val
-- line 233 ----------------------------------------
-- line 256 ----------------------------------------
        .                       }
        .           
        .                       ty::ConstKind::Param(_)
        .                       | ty::ConstKind::Value(_)
        .                       | ty::ConstKind::Unevaluated(..)
        .                       | ty::ConstKind::Error(_) => {}
        .                   }
        .           
    7,744 ( 0.00%)          ct.super_fold_with(self)
        .               }
        .           }

1,729,416 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/freshen.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/closure.rs
--------------------------------------------------------------------------------
Ir                  

-- line 10 ----------------------------------------
         .               type Env;
         .           }
         .           
         .           impl<'a, A, R> !Sync for Closure<'a, A, R> {}
         .           impl<'a, A, R> !Send for Closure<'a, A, R> {}
         .           
         .           impl<'a, A, R, F: FnMut(A) -> R> From<&'a mut F> for Closure<'a, A, R> {
         .               fn from(f: &'a mut F) -> Self {
 5,345,784 ( 0.03%)          unsafe extern "C" fn call<A, R, F: FnMut(A) -> R>(env: &mut Env, arg: A) -> R {
         .                       (*(env as *mut _ as *mut F))(arg)
 7,127,712 ( 0.04%)          }
         .                   Closure { call: call::<A, R, F>, env: unsafe { &mut *(f as *mut _ as *mut Env) } }
         .               }
         .           }
         .           
         .           impl<'a, A, R> Closure<'a, A, R> {
         .               pub fn call(&mut self, arg: A) -> R {
28,510,848 ( 0.15%)          unsafe { (self.call)(self.env, arg) }
         .               }
         .           }

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-1.0.86/src/buffer.rs
--------------------------------------------------------------------------------
Ir                  

-- line 40 ----------------------------------------
         .               // NOTE: Do not implement clone on this - there are raw pointers inside
         .               // these entries which will be messed up. Moving the `TokenBuffer` itself is
         .               // safe as the data pointed to won't be moved.
         .               ptr: *const Entry,
         .               len: usize,
         .           }
         .           
         .           impl Drop for TokenBuffer {
    23,406 ( 0.00%)      fn drop(&mut self) {
         .                   unsafe {
    54,614 ( 0.00%)              let slice = slice::from_raw_parts_mut(self.ptr as *mut Entry, self.len);
    46,812 ( 0.00%)              let _ = Box::from_raw(slice);
         .                   }
    15,604 ( 0.00%)      }
         .           }
         .           
         .           impl TokenBuffer {
         .               // NOTE: Do not mutate the Vec returned from this function once it returns;
         .               // the address of its backing memory must remain stable.
    31,208 ( 0.00%)      fn inner_new(stream: TokenStream, up: *const Entry) -> TokenBuffer {
         .                   // Build up the entries list, recording the locations of any Groups
         .                   // in the list to be processed later.
   101,426 ( 0.00%)          let mut entries = Vec::new();
    39,010 ( 0.00%)          let mut groups = Vec::new();
 1,577,821 ( 0.01%)          for tt in stream {
   139,806 ( 0.00%)              match tt {
   170,538 ( 0.00%)                  TokenTree::Ident(sym) => {
   540,037 ( 0.00%)                      entries.push(Entry::Ident(sym));
         .                           }
   131,936 ( 0.00%)                  TokenTree::Punct(op) => {
   494,760 ( 0.00%)                      entries.push(Entry::Punct(op));
         .                           }
     8,172 ( 0.00%)                  TokenTree::Literal(l) => {
    30,645 ( 0.00%)                      entries.push(Entry::Literal(l));
         .                           }
    45,171 ( 0.00%)                  TokenTree::Group(g) => {
         .                               // Record the index of the interesting entry, and store an
         .                               // `End(null)` there temporarily.
   154,872 ( 0.00%)                      groups.push((entries.len(), g));
    45,171 ( 0.00%)                      entries.push(Entry::End(ptr::null()));
    12,906 ( 0.00%)                  }
         .                       }
         .                   }
         .                   // Add an `End` entry to the end with a reference to the enclosing token
         .                   // stream which was passed in.
    54,614 ( 0.00%)          entries.push(Entry::End(up));
         .           
         .                   // NOTE: This is done to ensure that we don't accidentally modify the
         .                   // length of the backing buffer. The backing buffer must remain at a
         .                   // constant address after this point, as we are going to store a raw
         .                   // pointer into it.
   148,238 ( 0.00%)          let mut entries = entries.into_boxed_slice();
   405,885 ( 0.00%)          for (idx, group) in groups {
         .                       // We know that this index refers to one of the temporary
         .                       // `End(null)` entries, and we know that the last entry is
         .                       // `End(up)`, so the next index is also valid.
    70,983 ( 0.00%)              let group_up = unsafe { entries.as_ptr().add(idx + 1) };
         .           
         .                       // The end entry stored at the end of this Entry::Group should
         .                       // point to the Entry which follows the Group in the list.
    70,983 ( 0.00%)              let inner = Self::inner_new(group.stream(), group_up);
   219,402 ( 0.00%)              entries[idx] = Entry::Group(group, inner);
     6,453 ( 0.00%)          }
         .           
    39,010 ( 0.00%)          let len = entries.len();
    70,218 ( 0.00%)          let ptr = Box::into_raw(entries);
    15,604 ( 0.00%)          TokenBuffer {
         .                       ptr: ptr as *const Entry,
         .                       len,
         .                   }
    62,416 ( 0.00%)      }
         .           
         .               /// Creates a `TokenBuffer` containing all the tokens from the input
         .               /// `proc_macro::TokenStream`.
         .               ///
         .               /// *This method is available only if Syn is built with both the `"parsing"` and
         .               /// `"proc-macro"` features.*
         .               #[cfg(all(
         .                   not(all(target_arch = "wasm32", any(target_os = "unknown", target_os = "wasi"))),
-- line 118 ----------------------------------------
-- line 119 ----------------------------------------
         .                   feature = "proc-macro"
         .               ))]
         .               pub fn new(stream: pm::TokenStream) -> Self {
         .                   Self::new2(stream.into())
         .               }
         .           
         .               /// Creates a `TokenBuffer` containing all the tokens from the input
         .               /// `proc_macro2::TokenStream`.
     2,698 ( 0.00%)      pub fn new2(stream: TokenStream) -> Self {
    18,886 ( 0.00%)          Self::inner_new(stream, ptr::null())
     2,698 ( 0.00%)      }
         .           
         .               /// Creates a cursor referencing the first token in the buffer and able to
         .               /// traverse until the end of the buffer.
    23,920 ( 0.00%)      pub fn begin(&self) -> Cursor {
   167,440 ( 0.00%)          unsafe { Cursor::create(self.ptr, self.ptr.add(self.len - 1)) }
    23,920 ( 0.00%)      }
         .           }
         .           
         .           /// A cheaply copyable cursor into a `TokenBuffer`.
         .           ///
         .           /// This cursor holds a shared reference into the immutable data which is used
         .           /// internally to represent a `TokenStream`, and can be efficiently manipulated
         .           /// and copied around.
         .           ///
-- line 143 ----------------------------------------
-- line 156 ----------------------------------------
         .               scope: *const Entry,
         .               // Cursor is covariant in 'a. This field ensures that our pointers are still
         .               // valid.
         .               marker: PhantomData<&'a Entry>,
         .           }
         .           
         .           impl<'a> Cursor<'a> {
         .               /// Creates a cursor referencing a static empty TokenStream.
       673 ( 0.00%)      pub fn empty() -> Self {
         .                   // It's safe in this situation for us to put an `Entry` object in global
         .                   // storage, despite it not actually being safe to send across threads
         .                   // (`Ident` is a reference into a thread-local table). This is because
         .                   // this entry never includes a `Ident` object.
         .                   //
         .                   // This wrapper struct allows us to break the rules and put a `Sync`
         .                   // object in global storage.
         .                   struct UnsafeSyncEntry(Entry);
         .                   unsafe impl Sync for UnsafeSyncEntry {}
         .                   static EMPTY_ENTRY: UnsafeSyncEntry = UnsafeSyncEntry(Entry::End(0 as *const Entry));
         .           
     2,019 ( 0.00%)          Cursor {
         .                       ptr: &EMPTY_ENTRY.0,
         .                       scope: &EMPTY_ENTRY.0,
         .                       marker: PhantomData,
         .                   }
     2,692 ( 0.00%)      }
         .           
         .               /// This create method intelligently exits non-explicitly-entered
         .               /// `None`-delimited scopes when the cursor reaches the end of them,
         .               /// allowing for them to be treated transparently.
 2,642,724 ( 0.01%)      unsafe fn create(mut ptr: *const Entry, scope: *const Entry) -> Self {
         .                   // NOTE: If we're looking at a `End(..)`, we want to advance the cursor
         .                   // past it, unless `ptr == scope`, which means that we're at the edge of
         .                   // our cursor's scope. We should only have `ptr != scope` at the exit
         .                   // from None-delimited groups entered with `ignore_none`.
 2,870,692 ( 0.01%)          while let Entry::End(exit) = *ptr {
   113,984 ( 0.00%)              if ptr == scope {
         .                           break;
         .                       }
         .                       ptr = exit;
         .                   }
         .           
 1,321,362 ( 0.01%)          Cursor {
   660,681 ( 0.00%)              ptr,
         .                       scope,
         .                       marker: PhantomData,
         .                   }
 2,642,724 ( 0.01%)      }
         .           
         .               /// Get the current entry.
 9,015,308 ( 0.05%)      fn entry(self) -> &'a Entry {
         .                   unsafe { &*self.ptr }
 4,507,654 ( 0.02%)      }
         .           
         .               /// Bump the cursor to point at the next token after the current one. This
         .               /// is undefined behavior if the cursor is currently looking at an
         .               /// `Entry::End`.
 3,892,326 ( 0.02%)      unsafe fn bump(self) -> Cursor<'a> {
 1,946,163 ( 0.01%)          Cursor::create(self.ptr.offset(1), self.scope)
 1,297,442 ( 0.01%)      }
         .           
         .               /// While the cursor is looking at a `None`-delimited group, move it to look
         .               /// at the first token inside instead. If the group is empty, this will move
         .               /// the cursor past the `None`-delimited group.
         .               ///
         .               /// WARNING: This mutates its argument.
 3,883,320 ( 0.02%)      fn ignore_none(&mut self) {
 7,090,134 ( 0.04%)          while let Entry::Group(group, buf) = self.entry() {
   490,540 ( 0.00%)              if group.delimiter() == Delimiter::None {
         .                           // NOTE: We call `Cursor::create` here to make sure that
         .                           // situations where we should immediately exit the span after
         .                           // entering it are handled correctly.
         .                           unsafe {
         .                               *self = Cursor::create(buf.ptr, self.scope);
         .                           }
         .                       } else {
         .                           break;
         .                       }
         .                   }
 1,941,660 ( 0.01%)      }
         .           
         .               /// Checks whether the cursor is currently pointing at the end of its valid
         .               /// scope.
   694,479 ( 0.00%)      pub fn eof(self) -> bool {
         .                   // We're at eof if we're at the end of our scope.
   462,986 ( 0.00%)          self.ptr == self.scope
   925,972 ( 0.00%)      }
         .           
         .               /// If the cursor is pointing at a `Group` with the given delimiter, returns
         .               /// a cursor into that group and one pointing to the next `TokenTree`.
 1,143,863 ( 0.01%)      pub fn group(mut self, delim: Delimiter) -> Option<(Cursor<'a>, Span, Cursor<'a>)> {
         .                   // If we're not trying to enter a none-delimited group, we want to
         .                   // ignore them. We have to make sure to _not_ ignore them when we want
         .                   // to enter them, of course. For obvious reasons.
 1,085,816 ( 0.01%)          if delim != Delimiter::None {
   174,141 ( 0.00%)              self.ignore_none();
         .                   }
         .           
 1,427,854 ( 0.01%)          if let Entry::Group(group, buf) = self.entry() {
   161,649 ( 0.00%)              if group.delimiter() == delim {
   254,664 ( 0.00%)                  return Some((buf.begin(), group.span(), unsafe { self.bump() }));
         .                       }
         .                   }
         .           
   152,798 ( 0.00%)          None
   479,616 ( 0.00%)      }
         .           
         .               /// If the cursor is pointing at a `Ident`, returns it along with a cursor
         .               /// pointing at the next `TokenTree`.
 1,582,230 ( 0.01%)      pub fn ident(mut self) -> Option<(Ident, Cursor<'a>)> {
   632,892 ( 0.00%)          self.ignore_none();
 2,215,122 ( 0.01%)          match self.entry() {
 7,029,840 ( 0.04%)              Entry::Ident(ident) => Some((ident.clone(), unsafe { self.bump() })),
    23,536 ( 0.00%)              _ => None,
         .                   }
   632,892 ( 0.00%)      }
         .           
         .               /// If the cursor is pointing at a `Punct`, returns it along with a cursor
         .               /// pointing at the next `TokenTree`.
 2,857,115 ( 0.01%)      pub fn punct(mut self) -> Option<(Punct, Cursor<'a>)> {
 1,142,846 ( 0.01%)          self.ignore_none();
 3,999,961 ( 0.02%)          match self.entry() {
12,225,640 ( 0.06%)              Entry::Punct(op) if op.as_char() != '\'' => Some((op.clone(), unsafe { self.bump() })),
   500,806 ( 0.00%)              _ => None,
         .                   }
 1,142,846 ( 0.01%)      }
         .           
         .               /// If the cursor is pointing at a `Literal`, return it along with a cursor
         .               /// pointing at the next `TokenTree`.
    96,250 ( 0.00%)      pub fn literal(mut self) -> Option<(Literal, Cursor<'a>)> {
    38,500 ( 0.00%)          self.ignore_none();
   134,750 ( 0.00%)          match self.entry() {
    82,700 ( 0.00%)              Entry::Literal(lit) => Some((lit.clone(), unsafe { self.bump() })),
    15,942 ( 0.00%)              _ => None,
         .                   }
    38,500 ( 0.00%)      }
         .           
         .               /// If the cursor is pointing at a `Lifetime`, returns it along with a
         .               /// cursor pointing at the next `TokenTree`.
    28,320 ( 0.00%)      pub fn lifetime(mut self) -> Option<(Lifetime, Cursor<'a>)> {
    11,328 ( 0.00%)          self.ignore_none();
    39,648 ( 0.00%)          match self.entry() {
    49,920 ( 0.00%)              Entry::Punct(op) if op.as_char() == '\'' && op.spacing() == Spacing::Joint => {
    16,128 ( 0.00%)                  let next = unsafe { self.bump() };
    20,736 ( 0.00%)                  match next.ident() {
    27,648 ( 0.00%)                      Some((ident, rest)) => {
    13,824 ( 0.00%)                          let lifetime = Lifetime {
    18,432 ( 0.00%)                              apostrophe: op.span(),
     9,216 ( 0.00%)                              ident,
         .                                   };
    36,864 ( 0.00%)                          Some((lifetime, rest))
     2,304 ( 0.00%)                      }
         .                               None => None,
         .                           }
    23,040 ( 0.00%)              }
     6,720 ( 0.00%)              _ => None,
         .                   }
    11,328 ( 0.00%)      }
         .           
         .               /// Copies all remaining tokens visible from this cursor into a
         .               /// `TokenStream`.
     4,711 ( 0.00%)      pub fn token_stream(self) -> TokenStream {
     2,692 ( 0.00%)          let mut tts = Vec::new();
     1,346 ( 0.00%)          let mut cursor = self;
    33,577 ( 0.00%)          while let Some((tt, rest)) = cursor.token_tree() {
     8,470 ( 0.00%)              tts.push(tt);
     1,540 ( 0.00%)              cursor = rest;
         .                   }
     9,422 ( 0.00%)          tts.into_iter().collect()
     2,019 ( 0.00%)      }
         .           
         .               /// If the cursor is pointing at a `TokenTree`, returns it along with a
         .               /// cursor pointing at the next `TokenTree`.
         .               ///
         .               /// Returns `None` if the cursor has reached the end of its stream.
         .               ///
         .               /// This method does not treat `None`-delimited groups as transparent, and
         .               /// will return a `Group(None, ..)` if the cursor is looking at one.
    18,051 ( 0.00%)      pub fn token_tree(self) -> Option<(TokenTree, Cursor<'a>)> {
     6,564 ( 0.00%)          let tree = match self.entry() {
     5,238 ( 0.00%)              Entry::Group(group, _) => group.clone().into(),
     1,544 ( 0.00%)              Entry::Literal(lit) => lit.clone().into(),
         .                       Entry::Ident(ident) => ident.clone().into(),
     3,474 ( 0.00%)              Entry::Punct(op) => op.clone().into(),
       673 ( 0.00%)              Entry::End(..) => return None,
         .                   };
         .           
    21,296 ( 0.00%)          Some((tree, unsafe { self.bump() }))
     4,250 ( 0.00%)      }
         .           
         .               /// Returns the `Span` of the current token, or `Span::call_site()` if this
         .               /// cursor points to eof.
   374,340 ( 0.00%)      pub fn span(self) -> Span {
   499,120 ( 0.00%)          match self.entry() {
    18,928 ( 0.00%)              Entry::Group(group, _) => group.span(),
    11,578 ( 0.00%)              Entry::Literal(l) => l.span(),
   530,488 ( 0.00%)              Entry::Ident(t) => t.span(),
   312,466 ( 0.00%)              Entry::Punct(o) => o.span(),
         .                       Entry::End(..) => Span::call_site(),
         .                   }
   374,340 ( 0.00%)      }
         .           
         .               /// Skip over the next token without cloning it. Returns `None` if this
         .               /// cursor points to eof.
         .               ///
         .               /// This method treats `'lifetimes` as a single token.
   191,488 ( 0.00%)      pub(crate) fn skip(self) -> Option<Cursor<'a>> {
   124,168 ( 0.00%)          match self.entry() {
         .                       Entry::End(..) => None,
         .           
         .                       // Treat lifetimes as a single tt for the purposes of 'skip'.
   126,700 ( 0.00%)              Entry::Punct(op) if op.as_char() == '\'' && op.spacing() == Spacing::Joint => {
       960 ( 0.00%)                  let next = unsafe { self.bump() };
       960 ( 0.00%)                  match next.entry() {
     1,536 ( 0.00%)                      Entry::Ident(_) => Some(unsafe { next.bump() }),
         .                               _ => Some(next),
         .                           }
         .                       }
   137,728 ( 0.00%)              _ => Some(unsafe { self.bump() }),
         .                   }
    34,816 ( 0.00%)      }
         .           }
         .           
         .           impl<'a> Copy for Cursor<'a> {}
         .           
         .           impl<'a> Clone for Cursor<'a> {
         .               fn clone(&self) -> Self {
         .                   *self
         .               }
-- line 384 ----------------------------------------
-- line 389 ----------------------------------------
         .           impl<'a> PartialEq for Cursor<'a> {
         .               fn eq(&self, other: &Self) -> bool {
         .                   let Cursor { ptr, scope, marker } = self;
         .                   let _ = marker;
         .                   *ptr == other.ptr && *scope == other.scope
         .               }
         .           }
         .           
       960 ( 0.00%)  pub(crate) fn same_scope(a: Cursor, b: Cursor) -> bool {
       384 ( 0.00%)      a.scope == b.scope
       768 ( 0.00%)  }
         .           
   284,565 ( 0.00%)  pub(crate) fn open_span_of_group(cursor: Cursor) -> Span {
   284,565 ( 0.00%)      match cursor.entry() {
     9,450 ( 0.00%)          Entry::Group(group, _) => group.span_open(),
   222,252 ( 0.00%)          _ => cursor.span(),
         .               }
   170,739 ( 0.00%)  }
         .           
    29,355 ( 0.00%)  pub(crate) fn close_span_of_group(cursor: Cursor) -> Span {
    29,355 ( 0.00%)      match cursor.entry() {
    41,097 ( 0.00%)          Entry::Group(group, _) => group.span_close(),
         .                   _ => cursor.span(),
         .               }
    17,613 ( 0.00%)  }

 9,816,253 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-1.0.86/src/buffer.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/relate.rs
--------------------------------------------------------------------------------
Ir                  

-- line 28 ----------------------------------------
         .           
         .               /// Returns a static string we can use for printouts.
         .               fn tag(&self) -> &'static str;
         .           
         .               /// Returns `true` if the value `a` is the "expected" type in the
         .               /// relation. Just affects error messages.
         .               fn a_is_expected(&self) -> bool;
         .           
    93,600 ( 0.00%)      fn with_cause<F, R>(&mut self, _cause: Cause, f: F) -> R
         .               where
         .                   F: FnOnce(&mut Self) -> R,
         .               {
         .                   f(self)
    82,223 ( 0.00%)      }
         .           
         .               /// Generic relation routine suitable for most anything.
 2,317,554 ( 0.01%)      fn relate<T: Relate<'tcx>>(&mut self, a: T, b: T) -> RelateResult<'tcx, T> {
 2,008,729 ( 0.01%)          Relate::relate(self, a, b)
 1,907,980 ( 0.01%)      }
         .           
         .               /// Relate the two substitutions for the given item. The default
         .               /// is to look up the variance for the item and proceed
         .               /// accordingly.
   371,380 ( 0.00%)      fn relate_item_substs(
         .                   &mut self,
         .                   item_def_id: DefId,
         .                   a_subst: SubstsRef<'tcx>,
         .                   b_subst: SubstsRef<'tcx>,
         .               ) -> RelateResult<'tcx, SubstsRef<'tcx>> {
         .                   debug!(
         .                       "relate_item_substs(item_def_id={:?}, a_subst={:?}, b_subst={:?})",
         .                       item_def_id, a_subst, b_subst
         .                   );
         .           
         .                   let tcx = self.tcx();
         .                   let opt_variances = tcx.variances_of(item_def_id);
   148,552 ( 0.00%)          relate_substs(self, Some((item_def_id, opt_variances)), a_subst, b_subst)
   334,242 ( 0.00%)      }
         .           
         .               /// Switch variance for the purpose of relating `a` and `b`.
         .               fn relate_with_variance<T: Relate<'tcx>>(
         .                   &mut self,
         .                   variance: ty::Variance,
         .                   info: ty::VarianceDiagInfo<'tcx>,
         .                   a: T,
         .                   b: T,
-- line 73 ----------------------------------------
-- line 108 ----------------------------------------
         .                   a: Self,
         .                   b: Self,
         .               ) -> RelateResult<'tcx, Self>;
         .           }
         .           
         .           ///////////////////////////////////////////////////////////////////////////
         .           // Relate impls
         .           
   969,011 ( 0.00%)  pub fn relate_type_and_mut<'tcx, R: TypeRelation<'tcx>>(
         .               relation: &mut R,
         .               a: ty::TypeAndMut<'tcx>,
         .               b: ty::TypeAndMut<'tcx>,
         .               base_ty: Ty<'tcx>,
         .           ) -> RelateResult<'tcx, ty::TypeAndMut<'tcx>> {
         .               debug!("{}.mts({:?}, {:?})", relation.tag(), a, b);
   175,877 ( 0.00%)      if a.mutbl != b.mutbl {
     1,822 ( 0.00%)          Err(TypeError::Mutability)
         .               } else {
         .                   let mutbl = a.mutbl;
         .                   let (variance, info) = match mutbl {
         .                       ast::Mutability::Not => (ty::Covariant, ty::VarianceDiagInfo::None),
         .                       ast::Mutability::Mut => {
         .                           (ty::Invariant, ty::VarianceDiagInfo::Invariant { ty: base_ty, param_index: 0 })
         .                       }
         .                   };
    66,897 ( 0.00%)          let ty = relation.relate_with_variance(variance, info, a.ty, b.ty)?;
   432,138 ( 0.00%)          Ok(ty::TypeAndMut { ty, mutbl })
         .               }
   969,890 ( 0.00%)  }
         .           
    49,435 ( 0.00%)  pub fn relate_substs<'tcx, R: TypeRelation<'tcx>>(
         .               relation: &mut R,
         .               variances: Option<(DefId, &[ty::Variance])>,
         .               a_subst: SubstsRef<'tcx>,
         .               b_subst: SubstsRef<'tcx>,
         .           ) -> RelateResult<'tcx, SubstsRef<'tcx>> {
   726,851 ( 0.00%)      let tcx = relation.tcx();
   418,467 ( 0.00%)      let mut cached_ty = None;
         .           
         .               let params = iter::zip(a_subst, b_subst).enumerate().map(|(i, (a, b))| {
 2,226,653 ( 0.01%)          let (variance, variance_info) = match variances {
   181,526 ( 0.00%)              Some((ty_def_id, variances)) => {
   272,289 ( 0.00%)                  let variance = variances[i];
    90,763 ( 0.00%)                  let variance_info = if variance == ty::Invariant {
         .                               let ty =
    40,394 ( 0.00%)                          cached_ty.get_or_insert_with(|| tcx.type_of(ty_def_id).subst(tcx, a_subst));
         .                               ty::VarianceDiagInfo::Invariant { ty, param_index: i.try_into().unwrap() }
         .                           } else {
         .                               ty::VarianceDiagInfo::default()
         .                           };
         .                           (variance, variance_info)
         .                       }
         .                       None => (ty::Invariant, ty::VarianceDiagInfo::default()),
         .                   };
   486,601 ( 0.00%)          relation.relate_with_variance(variance, variance_info, a, b)
         .               });
         .           
         .               tcx.mk_substs(params)
    59,322 ( 0.00%)  }
         .           
         .           impl<'tcx> Relate<'tcx> for ty::FnSig<'tcx> {
    65,611 ( 0.00%)      fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
         .                   a: ty::FnSig<'tcx>,
         .                   b: ty::FnSig<'tcx>,
         .               ) -> RelateResult<'tcx, ty::FnSig<'tcx>> {
         .                   let tcx = relation.tcx();
         .           
    30,282 ( 0.00%)          if a.c_variadic != b.c_variadic {
         .                       return Err(TypeError::VariadicMismatch(expected_found(
         .                           relation,
         .                           a.c_variadic,
         .                           b.c_variadic,
         .                       )));
         .                   }
    24,544 ( 0.00%)          let unsafety = relation.relate(a.unsafety, b.unsafety)?;
         .                   let abi = relation.relate(a.abi, b.abi)?;
         .           
    43,245 ( 0.00%)          if a.inputs().len() != b.inputs().len() {
         .                       return Err(TypeError::ArgCount);
         .                   }
         .           
    45,423 ( 0.00%)          let inputs_and_output = iter::zip(a.inputs(), b.inputs())
    19,631 ( 0.00%)              .map(|(&a, &b)| ((a, b), false))
    40,376 ( 0.00%)              .chain(iter::once(((a.output(), b.output()), true)))
     7,889 ( 0.00%)              .map(|((a, b), is_output)| {
     7,889 ( 0.00%)                  if is_output {
       288 ( 0.00%)                      relation.relate(a, b)
         .                           } else {
         .                               relation.relate_with_variance(
         .                                   ty::Contravariant,
         .                                   ty::VarianceDiagInfo::default(),
         .                                   a,
         .                                   b,
         .                               )
         .                           }
         .                       })
         .                       .enumerate()
    28,408 ( 0.00%)              .map(|(i, r)| match r {
         .                           Err(TypeError::Sorts(exp_found) | TypeError::ArgumentSorts(exp_found, _)) => {
         .                               Err(TypeError::ArgumentSorts(exp_found, i))
         .                           }
         .                           Err(TypeError::Mutability | TypeError::ArgumentMutability(_)) => {
         .                               Err(TypeError::ArgumentMutability(i))
         .                           }
    47,509 ( 0.00%)                  r => r,
         .                       });
    37,507 ( 0.00%)          Ok(ty::FnSig {
         .                       inputs_and_output: tcx.mk_type_list(inputs_and_output)?,
     5,047 ( 0.00%)              c_variadic: a.c_variadic,
         .                       unsafety,
         .                       abi,
         .                   })
    45,423 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> Relate<'tcx> for ty::BoundConstness {
         .               fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
         .                   a: ty::BoundConstness,
         .                   b: ty::BoundConstness,
         .               ) -> RelateResult<'tcx, ty::BoundConstness> {
-- line 229 ----------------------------------------
-- line 236 ----------------------------------------
         .           }
         .           
         .           impl<'tcx> Relate<'tcx> for ast::Unsafety {
         .               fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
         .                   a: ast::Unsafety,
         .                   b: ast::Unsafety,
         .               ) -> RelateResult<'tcx, ast::Unsafety> {
     5,047 ( 0.00%)          if a != b {
         .                       Err(TypeError::UnsafetyMismatch(expected_found(relation, a, b)))
         .                   } else {
         .                       Ok(a)
         .                   }
         .               }
         .           }
         .           
         .           impl<'tcx> Relate<'tcx> for abi::Abi {
-- line 252 ----------------------------------------
-- line 255 ----------------------------------------
         .                   a: abi::Abi,
         .                   b: abi::Abi,
         .               ) -> RelateResult<'tcx, abi::Abi> {
         .                   if a == b { Ok(a) } else { Err(TypeError::AbiMismatch(expected_found(relation, a, b))) }
         .               }
         .           }
         .           
         .           impl<'tcx> Relate<'tcx> for ty::ProjectionTy<'tcx> {
    23,118 ( 0.00%)      fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
         .                   a: ty::ProjectionTy<'tcx>,
         .                   b: ty::ProjectionTy<'tcx>,
         .               ) -> RelateResult<'tcx, ty::ProjectionTy<'tcx>> {
     4,956 ( 0.00%)          if a.item_def_id != b.item_def_id {
         .                       Err(TypeError::ProjectionMismatched(expected_found(
         .                           relation,
         .                           a.item_def_id,
         .                           b.item_def_id,
         .                       )))
         .                   } else {
         .                       let substs = relation.relate(a.substs, b.substs)?;
     6,608 ( 0.00%)              Ok(ty::ProjectionTy { item_def_id: a.item_def_id, substs: &substs })
         .                   }
    14,864 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> Relate<'tcx> for ty::ExistentialProjection<'tcx> {
    49,624 ( 0.00%)      fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
         .                   a: ty::ExistentialProjection<'tcx>,
         .                   b: ty::ExistentialProjection<'tcx>,
         .               ) -> RelateResult<'tcx, ty::ExistentialProjection<'tcx>> {
    32,312 ( 0.00%)          if a.item_def_id != b.item_def_id {
         .                       Err(TypeError::ProjectionMismatched(expected_found(
         .                           relation,
         .                           a.item_def_id,
         .                           b.item_def_id,
         .                       )))
         .                   } else {
         .                       let term = relation.relate_with_variance(
         .                           ty::Invariant,
         .                           ty::VarianceDiagInfo::default(),
    13,848 ( 0.00%)                  a.term,
    17,888 ( 0.00%)                  b.term,
         .                       )?;
     2,016 ( 0.00%)              let substs = relation.relate_with_variance(
         .                           ty::Invariant,
         .                           ty::VarianceDiagInfo::default(),
     4,616 ( 0.00%)                  a.substs,
     4,616 ( 0.00%)                  b.substs,
         .                       )?;
    45,584 ( 0.00%)              Ok(ty::ExistentialProjection { item_def_id: a.item_def_id, substs, term })
         .                   }
    41,544 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> Relate<'tcx> for ty::TraitRef<'tcx> {
 1,056,342 ( 0.01%)      fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
         .                   a: ty::TraitRef<'tcx>,
         .                   b: ty::TraitRef<'tcx>,
         .               ) -> RelateResult<'tcx, ty::TraitRef<'tcx>> {
         .                   // Different traits cannot be related.
   226,345 ( 0.00%)          if a.def_id != b.def_id {
        21 ( 0.00%)              Err(TypeError::Traits(expected_found(relation, a.def_id, b.def_id)))
         .                   } else {
    75,446 ( 0.00%)              let substs = relate_substs(relation, None, a.substs, b.substs)?;
   286,376 ( 0.00%)              Ok(ty::TraitRef { def_id: a.def_id, substs })
         .                   }
   679,077 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> Relate<'tcx> for ty::ExistentialTraitRef<'tcx> {
    15,796 ( 0.00%)      fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
         .                   a: ty::ExistentialTraitRef<'tcx>,
         .                   b: ty::ExistentialTraitRef<'tcx>,
         .               ) -> RelateResult<'tcx, ty::ExistentialTraitRef<'tcx>> {
         .                   // Different traits cannot be related.
    38,439 ( 0.00%)          if a.def_id != b.def_id {
         .                       Err(TypeError::Traits(expected_found(relation, a.def_id, b.def_id)))
         .                   } else {
    15,397 ( 0.00%)              let substs = relate_substs(relation, None, a.substs, b.substs)?;
    23,330 ( 0.00%)              Ok(ty::ExistentialTraitRef { def_id: a.def_id, substs })
         .                   }
    10,052 ( 0.00%)      }
         .           }
         .           
         .           #[derive(Copy, Debug, Clone, TypeFoldable)]
         .           struct GeneratorWitness<'tcx>(&'tcx ty::List<Ty<'tcx>>);
         .           
         .           impl<'tcx> Relate<'tcx> for GeneratorWitness<'tcx> {
         .               fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
         .                   a: GeneratorWitness<'tcx>,
         .                   b: GeneratorWitness<'tcx>,
         .               ) -> RelateResult<'tcx, GeneratorWitness<'tcx>> {
     3,468 ( 0.00%)          assert_eq!(a.0.len(), b.0.len());
         .                   let tcx = relation.tcx();
         .                   let types = tcx.mk_type_list(iter::zip(a.0, b.0).map(|(a, b)| relation.relate(a, b)))?;
         .                   Ok(GeneratorWitness(types))
         .               }
         .           }
         .           
         .           impl<'tcx> Relate<'tcx> for Ty<'tcx> {
         .               #[inline]
         .               fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
         .                   a: Ty<'tcx>,
         .                   b: Ty<'tcx>,
         .               ) -> RelateResult<'tcx, Ty<'tcx>> {
 2,196,557 ( 0.01%)          relation.tys(a, b)
         .               }
         .           }
         .           
         .           /// The main "type relation" routine. Note that this does not handle
         .           /// inference artifacts, so you should filter those out before calling
         .           /// it.
 4,712,824 ( 0.02%)  pub fn super_relate_tys<'tcx, R: TypeRelation<'tcx>>(
         .               relation: &mut R,
         .               a: Ty<'tcx>,
         .               b: Ty<'tcx>,
         .           ) -> RelateResult<'tcx, Ty<'tcx>> {
         .               let tcx = relation.tcx();
         .               debug!("super_relate_tys: a={:?} b={:?}", a, b);
10,541,468 ( 0.05%)      match (a.kind(), b.kind()) {
         .                   (&ty::Infer(_), _) | (_, &ty::Infer(_)) => {
         .                       // The caller should handle these cases!
         .                       bug!("var types encountered in super_relate_tys")
         .                   }
         .           
         .                   (ty::Bound(..), _) | (_, ty::Bound(..)) => {
         .                       bug!("bound types encountered in super_relate_tys")
         .                   }
-- line 388 ----------------------------------------
-- line 391 ----------------------------------------
         .           
         .                   (&ty::Never, _)
         .                   | (&ty::Char, _)
         .                   | (&ty::Bool, _)
         .                   | (&ty::Int(_), _)
         .                   | (&ty::Uint(_), _)
         .                   | (&ty::Float(_), _)
         .                   | (&ty::Str, _)
    31,193 ( 0.00%)              if a == b =>
         .                   {
         .                       Ok(a)
         .                   }
         .           
    24,794 ( 0.00%)          (&ty::Param(ref a_p), &ty::Param(ref b_p)) if a_p.index == b_p.index => Ok(a),
         .           
         .                   (ty::Placeholder(p1), ty::Placeholder(p2)) if p1 == p2 => Ok(a),
         .           
 3,068,486 ( 0.02%)          (&ty::Adt(a_def, a_substs), &ty::Adt(b_def, b_substs)) if a_def == b_def => {
   962,337 ( 0.00%)              let substs = relation.relate_item_substs(a_def.did, a_substs, b_substs)?;
         .                       Ok(tcx.mk_adt(a_def, substs))
         .                   }
         .           
         .                   (&ty::Foreign(a_id), &ty::Foreign(b_id)) if a_id == b_id => Ok(tcx.mk_foreign(a_id)),
         .           
    89,691 ( 0.00%)          (&ty::Dynamic(a_obj, a_region), &ty::Dynamic(b_obj, b_region)) => {
    25,626 ( 0.00%)              let region_bound = relation.with_cause(Cause::ExistentialRegionBound, |relation| {
         .                           relation.relate_with_variance(
         .                               ty::Contravariant,
         .                               ty::VarianceDiagInfo::default(),
    12,813 ( 0.00%)                      a_region,
         .                               b_region,
         .                           )
         .                       })?;
         .                       Ok(tcx.mk_dynamic(relation.relate(a_obj, b_obj)?, region_bound))
         .                   }
         .           
    10,016 ( 0.00%)          (&ty::Generator(a_id, a_substs, movability), &ty::Generator(b_id, b_substs, _))
    12,520 ( 0.00%)              if a_id == b_id =>
         .                   {
         .                       // All Generator types with the same id represent
         .                       // the (anonymous) type of the same generator expression. So
         .                       // all of their regions should be equated.
     5,008 ( 0.00%)              let substs = relation.relate(a_substs, b_substs)?;
         .                       Ok(tcx.mk_generator(a_id, substs, movability))
         .                   }
         .           
     5,295 ( 0.00%)          (&ty::GeneratorWitness(a_types), &ty::GeneratorWitness(b_types)) => {
         .                       // Wrap our types with a temporary GeneratorWitness struct
         .                       // inside the binder so we can related them
         .                       let a_types = a_types.map_bound(GeneratorWitness);
         .                       let b_types = b_types.map_bound(GeneratorWitness);
         .                       // Then remove the GeneratorWitness for the result
         .                       let types = relation.relate(a_types, b_types)?.map_bound(|witness| witness.0);
         .                       Ok(tcx.mk_generator_witness(types))
         .                   }
         .           
     9,072 ( 0.00%)          (&ty::Closure(a_id, a_substs), &ty::Closure(b_id, b_substs)) if a_id == b_id => {
         .                       // All Closure types with the same id represent
         .                       // the (anonymous) type of the same closure expression. So
         .                       // all of their regions should be equated.
     2,268 ( 0.00%)              let substs = relation.relate(a_substs, b_substs)?;
         .                       Ok(tcx.mk_closure(a_id, &substs))
         .                   }
         .           
         .                   (&ty::RawPtr(a_mt), &ty::RawPtr(b_mt)) => {
         .                       let mt = relate_type_and_mut(relation, a_mt, b_mt, a)?;
         .                       Ok(tcx.mk_ptr(mt))
         .                   }
         .           
 1,711,581 ( 0.01%)          (&ty::Ref(a_r, a_ty, a_mutbl), &ty::Ref(b_r, b_ty, b_mutbl)) => {
   745,430 ( 0.00%)              let r = relation.relate_with_variance(
         .                           ty::Contravariant,
         .                           ty::VarianceDiagInfo::default(),
         .                           a_r,
         .                           b_r,
         .                       )?;
         .                       let a_mt = ty::TypeAndMut { ty: a_ty, mutbl: a_mutbl };
         .                       let b_mt = ty::TypeAndMut { ty: b_ty, mutbl: b_mutbl };
 1,090,096 ( 0.01%)              let mt = relate_type_and_mut(relation, a_mt, b_mt, a)?;
         .                       Ok(tcx.mk_ref(r, mt))
         .                   }
         .           
     7,680 ( 0.00%)          (&ty::Array(a_t, sz_a), &ty::Array(b_t, sz_b)) => {
     3,132 ( 0.00%)              let t = relation.relate(a_t, b_t)?;
     3,072 ( 0.00%)              match relation.relate(sz_a, sz_b) {
     4,608 ( 0.00%)                  Ok(sz) => Ok(tcx.mk_ty(ty::Array(t, sz))),
         .                           Err(err) => {
         .                               // Check whether the lengths are both concrete/known values,
         .                               // but are unequal, for better diagnostics.
         .                               //
         .                               // It might seem dubious to eagerly evaluate these constants here,
         .                               // we however cannot end up with errors in `Relate` during both
         .                               // `type_of` and `predicates_of`. This means that evaluating the
         .                               // constants should not cause cycle errors here.
-- line 484 ----------------------------------------
-- line 489 ----------------------------------------
         .                                       TypeError::FixedArraySize(expected_found(relation, sz_a_val, sz_b_val)),
         .                                   ),
         .                                   _ => Err(err),
         .                               }
         .                           }
         .                       }
         .                   }
         .           
    10,242 ( 0.00%)          (&ty::Slice(a_t), &ty::Slice(b_t)) => {
       928 ( 0.00%)              let t = relation.relate(a_t, b_t)?;
         .                       Ok(tcx.mk_slice(t))
         .                   }
         .           
    40,388 ( 0.00%)          (&ty::Tuple(as_), &ty::Tuple(bs)) => {
    40,388 ( 0.00%)              if as_.len() == bs.len() {
         .                           Ok(tcx.mk_tup(
    55,473 ( 0.00%)                      iter::zip(as_, bs).map(|(a, b)| relation.relate(a.expect_ty(), b.expect_ty())),
         .                           )?)
         .                       } else if !(as_.is_empty() || bs.is_empty()) {
         .                           Err(TypeError::TupleSize(expected_found(relation, as_.len(), bs.len())))
         .                       } else {
         .                           Err(TypeError::Sorts(expected_found(relation, a, b)))
         .                       }
         .                   }
         .           
    13,656 ( 0.00%)          (&ty::FnDef(a_def_id, a_substs), &ty::FnDef(b_def_id, b_substs))
    22,760 ( 0.00%)              if a_def_id == b_def_id =>
         .                   {
    18,208 ( 0.00%)              let substs = relation.relate_item_substs(a_def_id, a_substs, b_substs)?;
         .                       Ok(tcx.mk_fn_def(a_def_id, substs))
         .                   }
         .           
         .                   (&ty::FnPtr(a_fty), &ty::FnPtr(b_fty)) => {
    40,550 ( 0.00%)              let fty = relation.relate(a_fty, b_fty)?;
         .                       Ok(tcx.mk_fn_ptr(fty))
         .                   }
         .           
         .                   // these two are already handled downstream in case of lazy normalization
        10 ( 0.00%)          (&ty::Projection(a_data), &ty::Projection(b_data)) => {
         .                       let projection_ty = relation.relate(a_data, b_data)?;
         .                       Ok(tcx.mk_projection(projection_ty.item_def_id, projection_ty.substs))
         .                   }
         .           
    19,774 ( 0.00%)          (&ty::Opaque(a_def_id, a_substs), &ty::Opaque(b_def_id, b_substs))
    49,435 ( 0.00%)              if a_def_id == b_def_id =>
         .                   {
    59,322 ( 0.00%)              let substs = relate_substs(relation, None, a_substs, b_substs)?;
         .                       Ok(tcx.mk_opaque(a_def_id, substs))
         .                   }
         .           
         .                   _ => Err(TypeError::Sorts(expected_found(relation, a, b))),
         .               }
 5,301,927 ( 0.03%)  }
         .           
         .           /// The main "const relation" routine. Note that this does not handle
         .           /// inference artifacts, so you should filter those out before calling
         .           /// it.
     4,520 ( 0.00%)  pub fn super_relate_consts<'tcx, R: TypeRelation<'tcx>>(
         .               relation: &mut R,
         .               a: &'tcx ty::Const<'tcx>,
         .               b: &'tcx ty::Const<'tcx>,
         .           ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {
         .               debug!("{}.super_relate_consts(a = {:?}, b = {:?})", relation.tag(), a, b);
         .               let tcx = relation.tcx();
         .           
         .               // FIXME(oli-obk): once const generics can have generic types, this assertion
         .               // will likely get triggered. Move to `normalize_erasing_regions` at that point.
       904 ( 0.00%)      let a_ty = tcx.erase_regions(a.ty);
       904 ( 0.00%)      let b_ty = tcx.erase_regions(b.ty);
       452 ( 0.00%)      if a_ty != b_ty {
         .                   relation.tcx().sess.delay_span_bug(
         .                       DUMMY_SP,
         .                       &format!("cannot relate constants of different types: {} != {}", a_ty, b_ty),
         .                   );
         .               }
         .           
         .               let eagerly_eval = |x: &'tcx ty::Const<'tcx>| x.eval(tcx, relation.param_env());
       452 ( 0.00%)      let a = eagerly_eval(a);
       904 ( 0.00%)      let b = eagerly_eval(b);
         .           
         .               // Currently, the values that can be unified are primitive types,
         .               // and those that derive both `PartialEq` and `Eq`, corresponding
         .               // to structural-match types.
     4,972 ( 0.00%)      let is_match = match (a.val, b.val) {
         .                   (ty::ConstKind::Infer(_), _) | (_, ty::ConstKind::Infer(_)) => {
         .                       // The caller should handle these cases!
         .                       bug!("var types encountered in super_relate_consts: {:?} {:?}", a, b)
         .                   }
         .           
         .                   (ty::ConstKind::Error(_), _) => return Ok(a),
         .                   (_, ty::ConstKind::Error(_)) => return Ok(b),
         .           
-- line 580 ----------------------------------------
-- line 608 ----------------------------------------
         .                               substs,
         .                               promoted: au.promoted,
         .                           }),
         .                           ty: a.ty,
         .                       }));
         .                   }
         .                   _ => false,
         .               };
     2,712 ( 0.00%)      if is_match { Ok(a) } else { Err(TypeError::ConstMismatch(expected_found(relation, a, b))) }
     4,068 ( 0.00%)  }
         .           
         .           fn check_const_value_eq<'tcx, R: TypeRelation<'tcx>>(
         .               relation: &mut R,
         .               a_val: ConstValue<'tcx>,
         .               b_val: ConstValue<'tcx>,
         .               // FIXME(oli-obk): these arguments should go away with valtrees
         .               a: &'tcx ty::Const<'tcx>,
         .               b: &'tcx ty::Const<'tcx>,
         .               // FIXME(oli-obk): this should just be `bool` with valtrees
         .           ) -> RelateResult<'tcx, bool> {
       452 ( 0.00%)      let tcx = relation.tcx();
     4,972 ( 0.00%)      Ok(match (a_val, b_val) {
     9,944 ( 0.00%)          (ConstValue::Scalar(Scalar::Int(a_val)), ConstValue::Scalar(Scalar::Int(b_val))) => {
       452 ( 0.00%)              a_val == b_val
         .                   }
         .                   (
         .                       ConstValue::Scalar(Scalar::Ptr(a_val, _a_size)),
         .                       ConstValue::Scalar(Scalar::Ptr(b_val, _b_size)),
         .                   ) => {
         .                       a_val == b_val
         .                           || match (tcx.global_alloc(a_val.provenance), tcx.global_alloc(b_val.provenance)) {
         .                               (GlobalAlloc::Function(a_instance), GlobalAlloc::Function(b_instance)) => {
-- line 639 ----------------------------------------
-- line 672 ----------------------------------------
         .                       }
         .                   }
         .           
         .                   _ => false,
         .               })
         .           }
         .           
         .           impl<'tcx> Relate<'tcx> for &'tcx ty::List<ty::Binder<'tcx, ty::ExistentialPredicate<'tcx>>> {
   128,130 ( 0.00%)      fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
         .                   a: Self,
         .                   b: Self,
         .               ) -> RelateResult<'tcx, Self> {
    12,813 ( 0.00%)          let tcx = relation.tcx();
         .           
         .                   // FIXME: this is wasteful, but want to do a perf run to see how slow it is.
         .                   // We need to perform this deduplication as we sometimes generate duplicate projections
         .                   // in `a`.
         .                   let mut a_v: Vec<_> = a.into_iter().collect();
         .                   let mut b_v: Vec<_> = b.into_iter().collect();
         .                   // `skip_binder` here is okay because `stable_cmp` doesn't look at binders
   114,032 ( 0.00%)          a_v.sort_by(|a, b| a.skip_binder().stable_cmp(tcx, &b.skip_binder()));
         .                   a_v.dedup();
         .                   b_v.sort_by(|a, b| a.skip_binder().stable_cmp(tcx, &b.skip_binder()));
         .                   b_v.dedup();
    38,439 ( 0.00%)          if a_v.len() != b_v.len() {
         .                       return Err(TypeError::ExistentialMismatch(expected_found(relation, a, b)));
         .                   }
         .           
    51,252 ( 0.00%)          let v = iter::zip(a_v, b_v).map(|(ep_a, ep_b)| {
         .                       use crate::ty::ExistentialPredicate::*;
   149,908 ( 0.00%)              match (ep_a.skip_binder(), ep_b.skip_binder()) {
    24,280 ( 0.00%)                  (Trait(a), Trait(b)) => Ok(ep_a
     6,743 ( 0.00%)                      .rebind(Trait(relation.relate(ep_a.rebind(a), ep_b.rebind(b))?.skip_binder()))),
         .                           (Projection(a), Projection(b)) => Ok(ep_a.rebind(Projection(
    36,064 ( 0.00%)                      relation.relate(ep_a.rebind(a), ep_b.rebind(b))?.skip_binder(),
         .                           ))),
    62,090 ( 0.00%)                  (AutoTrait(a), AutoTrait(b)) if a == b => Ok(ep_a.rebind(AutoTrait(a))),
         .                           _ => Err(TypeError::ExistentialMismatch(expected_found(relation, a, b))),
         .                       }
         .                   });
    25,626 ( 0.00%)          tcx.mk_poly_existential_predicates(v)
   102,504 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> Relate<'tcx> for ty::ClosureSubsts<'tcx> {
         .               fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
         .                   a: ty::ClosureSubsts<'tcx>,
         .                   b: ty::ClosureSubsts<'tcx>,
         .               ) -> RelateResult<'tcx, ty::ClosureSubsts<'tcx>> {
-- line 722 ----------------------------------------
-- line 737 ----------------------------------------
         .           }
         .           
         .           impl<'tcx> Relate<'tcx> for SubstsRef<'tcx> {
         .               fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
         .                   a: SubstsRef<'tcx>,
         .                   b: SubstsRef<'tcx>,
         .               ) -> RelateResult<'tcx, SubstsRef<'tcx>> {
     9,906 ( 0.00%)          relate_substs(relation, None, a, b)
         .               }
         .           }
         .           
         .           impl<'tcx> Relate<'tcx> for ty::Region<'tcx> {
         .               fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
         .                   a: ty::Region<'tcx>,
         .                   b: ty::Region<'tcx>,
         .               ) -> RelateResult<'tcx, ty::Region<'tcx>> {
   921,952 ( 0.00%)          relation.regions(a, b)
         .               }
         .           }
         .           
         .           impl<'tcx> Relate<'tcx> for &'tcx ty::Const<'tcx> {
         .               fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
         .                   a: &'tcx ty::Const<'tcx>,
         .                   b: &'tcx ty::Const<'tcx>,
         .               ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {
     6,144 ( 0.00%)          relation.consts(a, b)
         .               }
         .           }
         .           
         .           impl<'tcx, T: Relate<'tcx>> Relate<'tcx> for ty::Binder<'tcx, T> {
         .               fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
         .                   a: ty::Binder<'tcx, T>,
         .                   b: ty::Binder<'tcx, T>,
         .               ) -> RelateResult<'tcx, ty::Binder<'tcx, T>> {
   217,687 ( 0.00%)          relation.binders(a, b)
         .               }
         .           }
         .           
         .           impl<'tcx> Relate<'tcx> for GenericArg<'tcx> {
 1,715,180 ( 0.01%)      fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
         .                   a: GenericArg<'tcx>,
         .                   b: GenericArg<'tcx>,
         .               ) -> RelateResult<'tcx, GenericArg<'tcx>> {
 2,180,242 ( 0.01%)          match (a.unpack(), b.unpack()) {
         .                       (GenericArgKind::Lifetime(a_lt), GenericArgKind::Lifetime(b_lt)) => {
         .                           Ok(relation.relate(a_lt, b_lt)?.into())
         .                       }
         .                       (GenericArgKind::Type(a_ty), GenericArgKind::Type(b_ty)) => {
    10,774 ( 0.00%)                  Ok(relation.relate(a_ty, b_ty)?.into())
         .                       }
         .                       (GenericArgKind::Const(a_ct), GenericArgKind::Const(b_ct)) => {
         .                           Ok(relation.relate(a_ct, b_ct)?.into())
         .                       }
         .                       (GenericArgKind::Lifetime(unpacked), x) => {
         .                           bug!("impossible case reached: can't relate: {:?} with {:?}", unpacked, x)
         .                       }
         .                       (GenericArgKind::Type(unpacked), x) => {
         .                           bug!("impossible case reached: can't relate: {:?} with {:?}", unpacked, x)
         .                       }
         .                       (GenericArgKind::Const(unpacked), x) => {
         .                           bug!("impossible case reached: can't relate: {:?} with {:?}", unpacked, x)
         .                       }
         .                   }
 1,843,423 ( 0.01%)      }
         .           }
         .           
         .           impl<'tcx> Relate<'tcx> for ty::ImplPolarity {
         .               fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
         .                   a: ty::ImplPolarity,
         .                   b: ty::ImplPolarity,
         .               ) -> RelateResult<'tcx, ty::ImplPolarity> {
-- line 813 ----------------------------------------
-- line 815 ----------------------------------------
         .                       Err(TypeError::PolarityMismatch(expected_found(relation, a, b)))
         .                   } else {
         .                       Ok(a)
         .                   }
         .               }
         .           }
         .           
         .           impl<'tcx> Relate<'tcx> for ty::TraitPredicate<'tcx> {
       198 ( 0.00%)      fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
         .                   a: ty::TraitPredicate<'tcx>,
         .                   b: ty::TraitPredicate<'tcx>,
         .               ) -> RelateResult<'tcx, ty::TraitPredicate<'tcx>> {
         .                   Ok(ty::TraitPredicate {
        90 ( 0.00%)              trait_ref: relation.relate(a.trait_ref, b.trait_ref)?,
         .                       constness: relation.relate(a.constness, b.constness)?,
         .                       polarity: relation.relate(a.polarity, b.polarity)?,
         .                   })
       162 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> Relate<'tcx> for ty::Term<'tcx> {
    13,848 ( 0.00%)      fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
         .                   a: Self,
         .                   b: Self,
         .               ) -> RelateResult<'tcx, Self> {
    32,312 ( 0.00%)          Ok(match (a, b) {
       864 ( 0.00%)              (Term::Ty(a), Term::Ty(b)) => relation.relate(a, b)?.into(),
         .                       (Term::Const(a), Term::Const(b)) => relation.relate(a, b)?.into(),
         .                       _ => return Err(TypeError::Mismatch),
         .                   })
    18,464 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> Relate<'tcx> for ty::ProjectionPredicate<'tcx> {
         .               fn relate<R: TypeRelation<'tcx>>(
         .                   relation: &mut R,
         .                   a: ty::ProjectionPredicate<'tcx>,
         .                   b: ty::ProjectionPredicate<'tcx>,
         .               ) -> RelateResult<'tcx, ty::ProjectionPredicate<'tcx>> {
-- line 855 ----------------------------------------
-- line 862 ----------------------------------------
         .           
         .           ///////////////////////////////////////////////////////////////////////////
         .           // Error handling
         .           
         .           pub fn expected_found<'tcx, R, T>(relation: &mut R, a: T, b: T) -> ExpectedFound<T>
         .           where
         .               R: TypeRelation<'tcx>,
         .           {
        14 ( 0.00%)      ExpectedFound::new(relation.a_is_expected(), a, b)
         .           }

11,497,067 ( 0.06%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/relate.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs
--------------------------------------------------------------------------------
Ir                  

-- line 57 ----------------------------------------
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
         .                   ///
         .                   /// ```
         .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::from_str_radix(\"A\", 16), Ok(10));")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
        94 ( 0.00%)          pub fn from_str_radix(src: &str, radix: u32) -> Result<Self, ParseIntError> {
        47 ( 0.00%)              from_str_radix(src, radix)
       141 ( 0.00%)          }
         .           
         .                   /// Returns the number of ones in the binary representation of `self`.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
         .                   ///
         .                   /// ```
-- line 75 ----------------------------------------
-- line 80 ----------------------------------------
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
         .                   #[doc(alias = "popcount")]
         .                   #[doc(alias = "popcnt")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn count_ones(self) -> u32 {
 3,516,750 ( 0.02%)              intrinsics::ctpop(self as $ActualT) as u32
         .                   }
         .           
         .                   /// Returns the number of zeros in the binary representation of `self`.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
         .                   ///
-- line 96 ----------------------------------------
-- line 118 ----------------------------------------
         .                   /// assert_eq!(n.leading_zeros(), 2);
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn leading_zeros(self) -> u32 {
 2,575,354 ( 0.01%)              intrinsics::ctlz(self as $ActualT) as u32
         .                   }
         .           
         .                   /// Returns the number of trailing zeros in the binary representation
         .                   /// of `self`.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 134 ----------------------------------------
-- line 139 ----------------------------------------
         .                   /// assert_eq!(n.trailing_zeros(), 3);
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn trailing_zeros(self) -> u32 {
 2,726,109 ( 0.01%)              intrinsics::cttz(self) as u32
         .                   }
         .           
         .                   /// Returns the number of leading ones in the binary representation of `self`.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
         .                   ///
-- line 155 ----------------------------------------
-- line 204 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(n.rotate_left(", $rot, "), m);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn rotate_left(self, n: u32) -> Self {
97,428,895 ( 0.50%)              intrinsics::rotate_left(self, n as $SelfT)
         .                   }
         .           
         .                   /// Shifts the bits to the right by a specified amount, `n`,
         .                   /// wrapping the truncated bits to the beginning of the resulting
         .                   /// integer.
         .                   ///
         .                   /// Please note this isn't the same operation as the `>>` shifting operator!
         .                   ///
-- line 220 ----------------------------------------
-- line 429 ----------------------------------------
         .                   )]
         .                   #[doc = concat!("assert_eq!((", stringify!($SelfT), "::MAX - 2).checked_add(3), None);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_checked_int_methods", since = "1.47.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline]
   691,095 ( 0.00%)          pub const fn checked_add(self, rhs: Self) -> Option<Self> {
   553,050 ( 0.00%)              let (a, b) = self.overflowing_add(rhs);
 1,382,190 ( 0.01%)              if unlikely!(b) {None} else {Some(a)}
   552,876 ( 0.00%)          }
         .           
         .                   /// Unchecked integer addition. Computes `self + rhs`, assuming overflow
         .                   /// cannot occur.
         .                   ///
         .                   /// # Safety
         .                   ///
         .                   /// This results in undefined behavior when
         .                   #[doc = concat!("`self + rhs > ", stringify!($SelfT), "::MAX` or `self + rhs < ", stringify!($SelfT), "::MIN`,")]
-- line 448 ----------------------------------------
-- line 456 ----------------------------------------
         .                   )]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
         .                   #[inline(always)]
         .                   pub const unsafe fn unchecked_add(self, rhs: Self) -> Self {
         .                       // SAFETY: the caller must uphold the safety contract for
         .                       // `unchecked_add`.
 5,914,331 ( 0.03%)              unsafe { intrinsics::unchecked_add(self, rhs) }
         .                   }
         .           
         .                   /// Checked addition with a signed integer. Computes `self + rhs`,
         .                   /// returning `None` if overflow occurred.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 472 ----------------------------------------
-- line 525 ----------------------------------------
         .                   )]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
         .                   #[inline(always)]
         .                   pub const unsafe fn unchecked_sub(self, rhs: Self) -> Self {
         .                       // SAFETY: the caller must uphold the safety contract for
         .                       // `unchecked_sub`.
   659,456 ( 0.00%)              unsafe { intrinsics::unchecked_sub(self, rhs) }
         .                   }
         .           
         .                   /// Checked integer multiplication. Computes `self * rhs`, returning
         .                   /// `None` if overflow occurred.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 541 ----------------------------------------
-- line 544 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(5", stringify!($SelfT), ".checked_mul(1), Some(5));")]
         .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.checked_mul(2), None);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_checked_int_methods", since = "1.47.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline]
   860,754 ( 0.00%)          pub const fn checked_mul(self, rhs: Self) -> Option<Self> {
   573,836 ( 0.00%)              let (a, b) = self.overflowing_mul(rhs);
 1,434,590 ( 0.01%)              if unlikely!(b) {None} else {Some(a)}
   573,836 ( 0.00%)          }
         .           
         .                   /// Unchecked integer multiplication. Computes `self * rhs`, assuming overflow
         .                   /// cannot occur.
         .                   ///
         .                   /// # Safety
         .                   ///
         .                   /// This results in undefined behavior when
         .                   #[doc = concat!("`self * rhs > ", stringify!($SelfT), "::MAX` or `self * rhs < ", stringify!($SelfT), "::MIN`,")]
-- line 563 ----------------------------------------
-- line 1035 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.saturating_add(127), ", stringify!($SelfT), "::MAX);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
         .                   #[inline(always)]
         .                   pub const fn saturating_add(self, rhs: Self) -> Self {
 1,865,875 ( 0.01%)              intrinsics::saturating_add(self, rhs)
        96 ( 0.00%)          }
         .           
         .                   /// Saturating addition with a signed integer. Computes `self + rhs`,
         .                   /// saturating at the numeric bounds instead of overflowing.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
         .                   ///
-- line 1052 ----------------------------------------
-- line 1084 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(13", stringify!($SelfT), ".saturating_sub(127), 0);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
         .                   #[inline(always)]
         .                   pub const fn saturating_sub(self, rhs: Self) -> Self {
    17,926 ( 0.00%)              intrinsics::saturating_sub(self, rhs)
         .                   }
         .           
         .                   /// Saturating integer multiplication. Computes `self * rhs`,
         .                   /// saturating at the numeric bounds instead of overflowing.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 1100 ----------------------------------------
-- line 1175 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(200", stringify!($SelfT), ".wrapping_add(", stringify!($SelfT), "::MAX), 199);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn wrapping_add(self, rhs: Self) -> Self {
50,989,962 ( 0.26%)              intrinsics::wrapping_add(self, rhs)
         .                   }
         .           
         .                   /// Wrapping (modular) addition with a signed integer. Computes
         .                   /// `self + rhs`, wrapping around at the boundary of the type.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 1191 ----------------------------------------
-- line 1217 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(100", stringify!($SelfT), ".wrapping_sub(", stringify!($SelfT), "::MAX), 101);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn wrapping_sub(self, rhs: Self) -> Self {
17,281,217 ( 0.09%)              intrinsics::wrapping_sub(self, rhs)
         .                   }
         .           
         .                   /// Wrapping (modular) multiplication. Computes `self *
         .                   /// rhs`, wrapping around at the boundary of the type.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 1233 ----------------------------------------
-- line 1240 ----------------------------------------
         .                   /// assert_eq!(25u8.wrapping_mul(12), 44);
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn wrapping_mul(self, rhs: Self) -> Self {
53,473,826 ( 0.27%)              intrinsics::wrapping_mul(self, rhs)
         .                   }
         .           
         .                   /// Wrapping (modular) division. Computes `self / rhs`.
         .                   /// Wrapped division on unsigned types is just normal division.
         .                   /// There's no way wrapping could ever happen.
         .                   /// This function exists, so that all operations
         .                   /// are accounted for in the wrapping operations.
         .                   ///
-- line 1256 ----------------------------------------
-- line 1397 ----------------------------------------
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn wrapping_shl(self, rhs: u32) -> Self {
         .                       // SAFETY: the masking by the bitsize of the type ensures that we do not shift
         .                       // out of bounds
         .                       unsafe {
        20 ( 0.00%)                  intrinsics::unchecked_shl(self, (rhs & ($BITS - 1)) as $SelfT)
         .                       }
         .                   }
         .           
         .                   /// Panic-free bitwise shift-right; yields `self >> mask(rhs)`,
         .                   /// where `mask` removes any high-order bits of `rhs` that
         .                   /// would cause the shift to exceed the bitwidth of the type.
         .                   ///
         .                   /// Note that this is *not* the same as a rotate-right; the
-- line 1413 ----------------------------------------
-- line 1492 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.overflowing_add(1), (0, true));")]
         .                   /// ```
         .                   #[stable(feature = "wrapping", since = "1.7.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn overflowing_add(self, rhs: Self) -> (Self, bool) {
 7,261,664 ( 0.04%)              let (a, b) = intrinsics::add_with_overflow(self as $ActualT, rhs as $ActualT);
   276,438 ( 0.00%)              (a as Self, b)
   552,876 ( 0.00%)          }
         .           
         .                   /// Calculates `self + rhs + carry` without the ability to overflow.
         .                   ///
         .                   /// Performs "ternary addition" which takes in an extra bit to add, and may return an
         .                   /// additional bit of overflow. This allows for chaining together multiple additions
         .                   /// to create "big integers" which represent larger values.
         .                   ///
         .                   #[doc = concat!("This can be thought of as a ", stringify!($BITS), "-bit \"full adder\", in the electronics sense.")]
-- line 1510 ----------------------------------------
-- line 1588 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(0", stringify!($SelfT), ".overflowing_sub(1), (", stringify!($SelfT), "::MAX, true));")]
         .                   /// ```
         .                   #[stable(feature = "wrapping", since = "1.7.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn overflowing_sub(self, rhs: Self) -> (Self, bool) {
 2,242,885 ( 0.01%)              let (a, b) = intrinsics::sub_with_overflow(self as $ActualT, rhs as $ActualT);
         .                       (a as Self, b)
         .                   }
         .           
         .                   /// Calculates `self - rhs - borrow` without the ability to overflow.
         .                   ///
         .                   /// Performs "ternary subtraction" which takes in an extra bit to subtract, and may return
         .                   /// an additional bit of overflow. This allows for chaining together multiple subtractions
         .                   /// to create "big integers" which represent larger values.
-- line 1604 ----------------------------------------
-- line 1674 ----------------------------------------
         .                   /// assert_eq!(1_000_000_000u32.overflowing_mul(10), (1410065408, true));
         .                   /// ```
         .                   #[stable(feature = "wrapping", since = "1.7.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                     without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn overflowing_mul(self, rhs: Self) -> (Self, bool) {
13,985,904 ( 0.07%)              let (a, b) = intrinsics::mul_with_overflow(self as $ActualT, rhs as $ActualT);
   286,918 ( 0.00%)              (a as Self, b)
   573,836 ( 0.00%)          }
         .           
         .                   /// Calculates the divisor when `self` is divided by `rhs`.
         .                   ///
         .                   /// Returns a tuple of the divisor along with a boolean indicating
         .                   /// whether an arithmetic overflow would occur. Note that for unsigned
         .                   /// integers overflow never occurs, so the second value is always
         .                   /// `false`.
         .                   ///
-- line 1692 ----------------------------------------
-- line 2132 ----------------------------------------
         .                   #[doc = concat!("assert!(16", stringify!($SelfT), ".is_power_of_two());")]
         .                   #[doc = concat!("assert!(!10", stringify!($SelfT), ".is_power_of_two());")]
         .                   /// ```
         .                   #[must_use]
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_is_power_of_two", since = "1.32.0")]
         .                   #[inline(always)]
         .                   pub const fn is_power_of_two(self) -> bool {
       666 ( 0.00%)              self.count_ones() == 1
         .                   }
         .           
         .                   // Returns one less than next power of two.
         .                   // (For 8u8 next power of two is 8u8 and for 6u8 it is 8u8)
         .                   //
         .                   // 8u8.one_less_than_next_power_of_two() == 7
         .                   // 6u8.one_less_than_next_power_of_two() == 7
         .                   //
         .                   // This method cannot overflow, as in the `next_power_of_two`
         .                   // overflow cases it instead ends up returning the maximum value
         .                   // of the type, and can return 0 for 0.
         .                   #[inline]
         .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
         .                   const fn one_less_than_next_power_of_two(self) -> Self {
   159,856 ( 0.00%)              if self <= 1 { return 0; }
         .           
   511,854 ( 0.00%)              let p = self - 1;
         .                       // SAFETY: Because `p > 0`, it cannot consist entirely of leading zeros.
         .                       // That means the shift is always in-bounds, and some processors
         .                       // (such as intel pre-haswell) have more efficient ctlz
         .                       // intrinsics when the argument is non-zero.
 1,534,526 ( 0.01%)              let z = unsafe { intrinsics::ctlz_nonzero(p) };
   512,666 ( 0.00%)              <$SelfT>::MAX >> z
         .                   }
         .           
         .                   /// Returns the smallest power of two greater than or equal to `self`.
         .                   ///
         .                   /// When return value overflows (i.e., `self > (1 << (N-1))` for type
         .                   /// `uN`), it panics in debug mode and the return value is wrapped to 0 in
         .                   /// release mode (the only situation in which method can return 0).
         .                   ///
-- line 2171 ----------------------------------------
-- line 2179 ----------------------------------------
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline]
         .                   #[rustc_inherit_overflow_checks]
         .                   pub const fn next_power_of_two(self) -> Self {
   863,740 ( 0.00%)              self.one_less_than_next_power_of_two() + 1
         .                   }
         .           
         .                   /// Returns the smallest power of two greater than or equal to `n`. If
         .                   /// the next power of two is greater than the type's maximum value,
         .                   /// `None` is returned, otherwise the power of two is wrapped in `Some`.
         .                   ///
         .                   /// # Examples
         .                   ///
-- line 2195 ----------------------------------------
-- line 2264 ----------------------------------------
         .                   #[doc = concat!("let bytes = ", $swap_op, stringify!($SelfT), ".to_le_bytes();")]
         .                   #[doc = concat!("assert_eq!(bytes, ", $le_bytes, ");")]
         .                   /// ```
         .                   #[stable(feature = "int_to_from_bytes", since = "1.32.0")]
         .                   #[rustc_const_stable(feature = "const_int_conversion", since = "1.44.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline]
        10 ( 0.00%)          pub const fn to_le_bytes(self) -> [u8; mem::size_of::<Self>()] {
         8 ( 0.00%)              self.to_le().to_ne_bytes()
         6 ( 0.00%)          }
         .           
         .                   /// Return the memory representation of this integer as a byte array in
         .                   /// native byte order.
         .                   ///
         .                   /// As the target platform's native endianness is used, portable code
         .                   /// should use [`to_be_bytes`] or [`to_le_bytes`], as appropriate,
         .                   /// instead.
         .                   ///
-- line 2282 ----------------------------------------
-- line 2300 ----------------------------------------
         .                   /// ```
         .                   #[stable(feature = "int_to_from_bytes", since = "1.32.0")]
         .                   #[rustc_const_stable(feature = "const_int_conversion", since = "1.44.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   // SAFETY: const sound because integers are plain old datatypes so we can always
         .                   // transmute them to arrays of bytes
         .                   #[inline]
         4 ( 0.00%)          pub const fn to_ne_bytes(self) -> [u8; mem::size_of::<Self>()] {
         .                       // SAFETY: integers are plain old datatypes so we can always transmute them to
         .                       // arrays of bytes
         2 ( 0.00%)              unsafe { mem::transmute(self) }
         6 ( 0.00%)          }
         .           
         .                   /// Create a native endian integer value from its representation
         .                   /// as a byte array in big endian.
         .                   ///
         .                   #[doc = $from_xe_bytes_doc]
         .                   ///
         .                   /// # Examples
         .                   ///
-- line 2320 ----------------------------------------
-- line 2360 ----------------------------------------
         .                   ///     *input = rest;
         .                   #[doc = concat!("    ", stringify!($SelfT), "::from_le_bytes(int_bytes.try_into().unwrap())")]
         .                   /// }
         .                   /// ```
         .                   #[stable(feature = "int_to_from_bytes", since = "1.32.0")]
         .                   #[rustc_const_stable(feature = "const_int_conversion", since = "1.44.0")]
         .                   #[must_use]
         .                   #[inline]
        16 ( 0.00%)          pub const fn from_le_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {
        20 ( 0.00%)              Self::from_le(Self::from_ne_bytes(bytes))
         8 ( 0.00%)          }
         .           
         .                   /// Create a native endian integer value from its memory representation
         .                   /// as a byte array in native endianness.
         .                   ///
         .                   /// As the target platform's native endianness is used, portable code
         .                   /// likely wants to use [`from_be_bytes`] or [`from_le_bytes`], as
         .                   /// appropriate instead.
         .                   ///
-- line 2378 ----------------------------------------
-- line 2402 ----------------------------------------
         .                   /// }
         .                   /// ```
         .                   #[stable(feature = "int_to_from_bytes", since = "1.32.0")]
         .                   #[rustc_const_stable(feature = "const_int_conversion", since = "1.44.0")]
         .                   #[must_use]
         .                   // SAFETY: const sound because integers are plain old datatypes so we can always
         .                   // transmute to them
         .                   #[inline]
        16 ( 0.00%)          pub const fn from_ne_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {
         .                       // SAFETY: integers are plain old datatypes so we can always transmute to them
        24 ( 0.00%)              unsafe { mem::transmute(bytes) }
         8 ( 0.00%)          }
         .           
         .                   /// New code should prefer to use
         .                   #[doc = concat!("[`", stringify!($SelfT), "::MIN", "`] instead.")]
         .                   ///
         .                   /// Returns the smallest value that can be represented by this integer type.
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_promotable]
         .                   #[inline(always)]
-- line 2421 ----------------------------------------

 2,649,929 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs
--------------------------------------------------------------------------------
Ir                 

-- line 84 ----------------------------------------
        .           pub struct SessionGlobals {
        .               symbol_interner: symbol::Interner,
        .               span_interner: Lock<span_encoding::SpanInterner>,
        .               hygiene_data: Lock<hygiene::HygieneData>,
        .               source_map: Lock<Option<Lrc<SourceMap>>>,
        .           }
        .           
        .           impl SessionGlobals {
       12 ( 0.00%)      pub fn new(edition: Edition) -> SessionGlobals {
       50 ( 0.00%)          SessionGlobals {
        2 ( 0.00%)              symbol_interner: symbol::Interner::fresh(),
        .                       span_interner: Lock::new(span_encoding::SpanInterner::default()),
        6 ( 0.00%)              hygiene_data: Lock::new(hygiene::HygieneData::new(edition)),
        .                       source_map: Lock::new(None),
        .                   }
       10 ( 0.00%)      }
        .           }
        .           
        .           #[inline]
        .           pub fn create_session_globals_then<R>(edition: Edition, f: impl FnOnce() -> R) -> R {
        1 ( 0.00%)      assert!(
        .                   !SESSION_GLOBALS.is_set(),
        .                   "SESSION_GLOBALS should never be overwritten! \
        .                    Use another thread if you need another SessionGlobals"
        .               );
        3 ( 0.00%)      let session_globals = SessionGlobals::new(edition);
        7 ( 0.00%)      SESSION_GLOBALS.set(&session_globals, f)
        1 ( 0.00%)  }
        .           
        .           #[inline]
        .           pub fn set_session_globals_then<R>(session_globals: &SessionGlobals, f: impl FnOnce() -> R) -> R {
        .               assert!(
        .                   !SESSION_GLOBALS.is_set(),
        .                   "SESSION_GLOBALS should never be overwritten! \
        .                    Use another thread if you need another SessionGlobals"
        .               );
-- line 119 ----------------------------------------
-- line 120 ----------------------------------------
        .               SESSION_GLOBALS.set(session_globals, f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_default_session_if_not_set_then<R, F>(f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
        4 ( 0.00%)      create_session_if_not_set_then(edition::DEFAULT_EDITION, f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_session_if_not_set_then<R, F>(edition: Edition, f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
        1 ( 0.00%)      if !SESSION_GLOBALS.is_set() {
        3 ( 0.00%)          let session_globals = SessionGlobals::new(edition);
       11 ( 0.00%)          SESSION_GLOBALS.set(&session_globals, || SESSION_GLOBALS.with(f))
        1 ( 0.00%)      } else {
        .                   SESSION_GLOBALS.with(f)
        .               }
        .           }
        .           
        .           #[inline]
        .           pub fn with_session_globals<R, F>(f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
4,498,538 ( 0.02%)      SESSION_GLOBALS.with(f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_default_session_globals_then<R>(f: impl FnOnce() -> R) -> R {
        .               create_session_globals_then(edition::DEFAULT_EDITION, f)
        .           }
        .           
        .           // If this ever becomes non thread-local, `decode_syntax_context`
        .           // and `decode_expn_id` will need to be updated to handle concurrent
        .           // deserialization.
        .           scoped_tls::scoped_thread_local!(static SESSION_GLOBALS: SessionGlobals);
        .           
        .           // FIXME: We should use this enum or something like it to get rid of the
        .           // use of magic `/rust/1.x/...` paths across the board.
    1,939 ( 0.00%)  #[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd)]
    2,266 ( 0.00%)  #[derive(Decodable)]
        .           pub enum RealFileName {
      384 ( 0.00%)      LocalPath(PathBuf),
        .               /// For remapped paths (namely paths into libstd that have been mapped
        .               /// to the appropriate spot on the local host's file system, and local file
        .               /// system paths that have been remapped with `FilePathMapping`),
        .               Remapped {
        .                   /// `local_path` is the (host-dependent) local path to the file. This is
        .                   /// None if the file was imported from another crate
        .                   local_path: Option<PathBuf>,
        .                   /// `virtual_name` is the stable path rustc will store internally within
-- line 175 ----------------------------------------
-- line 179 ----------------------------------------
        .           }
        .           
        .           impl Hash for RealFileName {
        .               fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
        .                   // To prevent #70924 from happening again we should only hash the
        .                   // remapped (virtualized) path if that exists. This is because
        .                   // virtualized paths to sysroot crates (/rust/$hash or /rust/$version)
        .                   // remain stable even if the corresponding local_path changes
    5,747 ( 0.00%)          self.remapped_path_if_available().hash(state)
        .               }
        .           }
        .           
        .           // This is functionally identical to #[derive(Encodable)], with the exception of
        .           // an added assert statement
        .           impl<S: Encoder> Encodable<S> for RealFileName {
        .               fn encode(&self, encoder: &mut S) -> Result<(), S::Error> {
        8 ( 0.00%)          encoder.emit_enum(|encoder| match *self {
        .                       RealFileName::LocalPath(ref local_path) => {
       32 ( 0.00%)                  encoder.emit_enum_variant("LocalPath", 0, 1, |encoder| {
        .                               encoder.emit_enum_variant_arg(true, |encoder| local_path.encode(encoder))?;
        .                               Ok(())
        .                           })
        .                       }
        .           
        .                       RealFileName::Remapped { ref local_path, ref virtual_name } => encoder
        .                           .emit_enum_variant("Remapped", 1, 2, |encoder| {
        .                               // For privacy and build reproducibility, we must not embed host-dependant path in artifacts
-- line 205 ----------------------------------------
-- line 224 ----------------------------------------
        .                           p.as_ref().map(PathBuf::as_path)
        .                       }
        .                   }
        .               }
        .           
        .               /// Returns the path suitable for reading from the file system on the local host,
        .               /// if this information exists.
        .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
        2 ( 0.00%)      pub fn into_local_path(self) -> Option<PathBuf> {
        2 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(p) => Some(p),
        .                       RealFileName::Remapped { local_path: p, virtual_name: _ } => p,
        .                   }
        3 ( 0.00%)      }
        .           
        .               /// Returns the path suitable for embedding into build artifacts. This would still
        .               /// be a local path if it has not been remapped. A remapped path will not correspond
        .               /// to a valid file system path: see `local_path_if_available()` for something that
        .               /// is more likely to return paths into the local host file system.
        .               pub fn remapped_path_if_available(&self) -> &Path {
    4,584 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(p)
        .                       | RealFileName::Remapped { local_path: _, virtual_name: p } => &p,
        .                   }
        5 ( 0.00%)      }
        .           
        .               /// Returns the path suitable for reading from the file system on the local host,
        .               /// if this information exists. Otherwise returns the remapped name.
        .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
        .               pub fn local_path_if_available(&self) -> &Path {
        4 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(path)
        .                       | RealFileName::Remapped { local_path: None, virtual_name: path }
        .                       | RealFileName::Remapped { local_path: Some(path), virtual_name: _ } => path,
        .                   }
        .               }
        .           
        .               pub fn to_string_lossy(&self, display_pref: FileNameDisplayPreference) -> Cow<'_, str> {
        4 ( 0.00%)          match display_pref {
        .                       FileNameDisplayPreference::Local => self.local_path_if_available().to_string_lossy(),
        .                       FileNameDisplayPreference::Remapped => {
        .                           self.remapped_path_if_available().to_string_lossy()
        .                       }
        .                   }
        .               }
        .           }
        .           
        .           /// Differentiates between real files and common virtual files.
   12,902 ( 0.00%)  #[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd, Hash)]
   13,688 ( 0.00%)  #[derive(Decodable, Encodable)]
        .           pub enum FileName {
        .               Real(RealFileName),
        .               /// Call to `quote!`.
        2 ( 0.00%)      QuoteExpansion(u64),
        .               /// Command line.
        .               Anon(u64),
        .               /// Hack in `src/librustc_ast/parse.rs`.
        .               // FIXME(jseyfried)
        .               MacroExpansion(u64),
        .               ProcMacroSourceCode(u64),
        .               /// Strings provided as `--cfg [cfgspec]` stored in a `crate_cfg`.
        .               CfgSpec(u64),
-- line 285 ----------------------------------------
-- line 288 ----------------------------------------
        .               /// Custom sources for explicit parser calls from plugins and drivers.
        .               Custom(String),
        .               DocTest(PathBuf, isize),
        .               /// Post-substitution inline assembly from LLVM.
        .               InlineAsm(u64),
        .           }
        .           
        .           impl From<PathBuf> for FileName {
       28 ( 0.00%)      fn from(p: PathBuf) -> Self {
        8 ( 0.00%)          assert!(!p.to_string_lossy().ends_with('>'));
       24 ( 0.00%)          FileName::Real(RealFileName::LocalPath(p))
       28 ( 0.00%)      }
        .           }
        .           
        2 ( 0.00%)  #[derive(Clone, Copy, Eq, PartialEq, Hash, Debug)]
        .           pub enum FileNameDisplayPreference {
        .               Remapped,
        .               Local,
        .           }
        .           
        .           pub struct FileNameDisplay<'a> {
        .               inner: &'a FileName,
        .               display_pref: FileNameDisplayPreference,
        .           }
        .           
        .           impl fmt::Display for FileNameDisplay<'_> {
       16 ( 0.00%)      fn fmt(&self, fmt: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        .                   use FileName::*;
       24 ( 0.00%)          match *self.inner {
        .                       Real(ref name) => {
       24 ( 0.00%)                  write!(fmt, "{}", name.to_string_lossy(self.display_pref))
        .                       }
        .                       QuoteExpansion(_) => write!(fmt, "<quote expansion>"),
        .                       MacroExpansion(_) => write!(fmt, "<macro expansion>"),
        .                       Anon(_) => write!(fmt, "<anon>"),
        .                       ProcMacroSourceCode(_) => write!(fmt, "<proc-macro source code>"),
        .                       CfgSpec(_) => write!(fmt, "<cfgspec>"),
        .                       CliCrateAttr(_) => write!(fmt, "<crate attribute>"),
        .                       Custom(ref s) => write!(fmt, "<{}>", s),
        .                       DocTest(ref path, _) => write!(fmt, "{}", path.display()),
        .                       InlineAsm(_) => write!(fmt, "<inline asm>"),
        .                   }
       20 ( 0.00%)      }
        .           }
        .           
        .           impl FileNameDisplay<'_> {
        .               pub fn to_string_lossy(&self) -> Cow<'_, str> {
        .                   match self.inner {
        .                       FileName::Real(ref inner) => inner.to_string_lossy(self.display_pref),
        .                       _ => Cow::from(format!("{}", self)),
        .                   }
        .               }
        .           }
        .           
        .           impl FileName {
        .               pub fn is_real(&self) -> bool {
        .                   use FileName::*;
    2,234 ( 0.00%)          match *self {
        .                       Real(_) => true,
        .                       Anon(_)
        .                       | MacroExpansion(_)
        .                       | ProcMacroSourceCode(_)
        .                       | CfgSpec(_)
        .                       | CliCrateAttr(_)
        .                       | Custom(_)
        .                       | QuoteExpansion(_)
-- line 353 ----------------------------------------
-- line 357 ----------------------------------------
        .               }
        .           
        .               pub fn prefer_remapped(&self) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref: FileNameDisplayPreference::Remapped }
        .               }
        .           
        .               // This may include transient local filesystem information.
        .               // Must not be embedded in build outputs.
        4 ( 0.00%)      pub fn prefer_local(&self) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref: FileNameDisplayPreference::Local }
        8 ( 0.00%)      }
        .           
        .               pub fn display(&self, display_pref: FileNameDisplayPreference) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref }
        .               }
        .           
        .               pub fn macro_expansion_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
-- line 375 ----------------------------------------
-- line 383 ----------------------------------------
        .               }
        .           
        .               pub fn proc_macro_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
        .                   FileName::ProcMacroSourceCode(hasher.finish())
        .               }
        .           
       10 ( 0.00%)      pub fn cfg_spec_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
        4 ( 0.00%)          FileName::QuoteExpansion(hasher.finish())
       10 ( 0.00%)      }
        .           
        .               pub fn cli_crate_attr_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
        .                   FileName::CliCrateAttr(hasher.finish())
        .               }
        .           
        .               pub fn doc_test_source_code(path: PathBuf, line: isize) -> FileName {
-- line 403 ----------------------------------------
-- line 423 ----------------------------------------
        .           /// that the length of the span is equal to `span.hi - span.lo`; there may be space in the
        .           /// [`BytePos`] range between files.
        .           ///
        .           /// `SpanData` is public because `Span` uses a thread-local interner and can't be
        .           /// sent to other threads, but some pieces of performance infra run in a separate thread.
        .           /// Using `Span` is generally preferred.
        .           #[derive(Clone, Copy, Hash, PartialEq, Eq)]
        .           pub struct SpanData {
       18 ( 0.00%)      pub lo: BytePos,
       18 ( 0.00%)      pub hi: BytePos,
        .               /// Information about where the macro came from, if this piece of
        .               /// code was created by a macro expansion.
       42 ( 0.00%)      pub ctxt: SyntaxContext,
       14 ( 0.00%)      pub parent: Option<LocalDefId>,
        .           }
        .           
        .           // Order spans by position in the file.
        .           impl Ord for SpanData {
        .               fn cmp(&self, other: &Self) -> Ordering {
        .                   let SpanData {
        .                       lo: s_lo,
        .                       hi: s_hi,
-- line 444 ----------------------------------------
-- line 485 ----------------------------------------
        .               }
        .               #[inline]
        .               pub fn with_parent(&self, parent: Option<LocalDefId>) -> Span {
        .                   Span::new(self.lo, self.hi, self.ctxt, parent)
        .               }
        .               /// Returns `true` if this is a dummy span with any hygienic context.
        .               #[inline]
        .               pub fn is_dummy(self) -> bool {
1,706,252 ( 0.01%)          self.lo.0 == 0 && self.hi.0 == 0
        .               }
        .               /// Returns `true` if `self` fully encloses `other`.
        .               pub fn contains(self, other: Self) -> bool {
   27,363 ( 0.00%)          self.lo <= other.lo && other.hi <= self.hi
        .               }
        .           }
        .           
        .           // The interner is pointed to by a thread local value which is only set on the main thread
        .           // with parallelization is disabled. So we don't allow `Span` to transfer between threads
        .           // to avoid panics and other errors, even though it would be memory safe to do so.
        .           #[cfg(not(parallel_compiler))]
        .           impl !Send for Span {}
        .           #[cfg(not(parallel_compiler))]
        .           impl !Sync for Span {}
        .           
        .           impl PartialOrd for Span {
  140,272 ( 0.00%)      fn partial_cmp(&self, rhs: &Self) -> Option<Ordering> {
  105,204 ( 0.00%)          PartialOrd::partial_cmp(&self.data(), &rhs.data())
  140,272 ( 0.00%)      }
        .           }
        .           impl Ord for Span {
        .               fn cmp(&self, rhs: &Self) -> Ordering {
        .                   Ord::cmp(&self.data(), &rhs.data())
        .               }
        .           }
        .           
        .           /// A collection of `Span`s.
-- line 520 ----------------------------------------
-- line 532 ----------------------------------------
        .           }
        .           
        .           impl Span {
        .               #[inline]
        .               pub fn lo(self) -> BytePos {
        .                   self.data().lo
        .               }
        .               #[inline]
  661,347 ( 0.00%)      pub fn with_lo(self, lo: BytePos) -> Span {
        .                   self.data().with_lo(lo)
  440,898 ( 0.00%)      }
        .               #[inline]
   85,880 ( 0.00%)      pub fn hi(self) -> BytePos {
        .                   self.data().hi
   85,880 ( 0.00%)      }
        .               #[inline]
  254,574 ( 0.00%)      pub fn with_hi(self, hi: BytePos) -> Span {
        .                   self.data().with_hi(hi)
  169,716 ( 0.00%)      }
        .               #[inline]
        .               pub fn ctxt(self) -> SyntaxContext {
        .                   self.data_untracked().ctxt
        .               }
        .               #[inline]
  116,375 ( 0.00%)      pub fn with_ctxt(self, ctxt: SyntaxContext) -> Span {
        .                   self.data_untracked().with_ctxt(ctxt)
   69,825 ( 0.00%)      }
        .               #[inline]
        .               pub fn parent(self) -> Option<LocalDefId> {
        .                   self.data().parent
        .               }
        .               #[inline]
       18 ( 0.00%)      pub fn with_parent(self, ctxt: Option<LocalDefId>) -> Span {
        .                   self.data().with_parent(ctxt)
       12 ( 0.00%)      }
        .           
        .               /// Returns `true` if this is a dummy span with any hygienic context.
        .               #[inline]
        .               pub fn is_dummy(self) -> bool {
        .                   self.data_untracked().is_dummy()
        .               }
        .           
        .               /// Returns `true` if this span comes from a macro or desugaring.
-- line 574 ----------------------------------------
-- line 600 ----------------------------------------
        .               /// Returns a new span representing an empty span at the beginning of this span.
        .               #[inline]
        .               pub fn shrink_to_lo(self) -> Span {
        .                   let span = self.data_untracked();
        .                   span.with_hi(span.lo)
        .               }
        .               /// Returns a new span representing an empty span at the end of this span.
        .               #[inline]
    1,506 ( 0.00%)      pub fn shrink_to_hi(self) -> Span {
        .                   let span = self.data_untracked();
        .                   span.with_lo(span.hi)
    1,004 ( 0.00%)      }
        .           
        .               #[inline]
        .               /// Returns `true` if `hi == lo`.
        .               pub fn is_empty(self) -> bool {
        .                   let span = self.data_untracked();
        .                   span.hi == span.lo
        .               }
        .           
        .               /// Returns `self` if `self` is not the dummy span, and `other` otherwise.
        .               pub fn substitute_dummy(self, other: Span) -> Span {
        .                   if self.is_dummy() { other } else { self }
        .               }
        .           
        .               /// Returns `true` if `self` fully encloses `other`.
   82,089 ( 0.00%)      pub fn contains(self, other: Span) -> bool {
        .                   let span = self.data();
        .                   let other = other.data();
        .                   span.contains(other)
   54,726 ( 0.00%)      }
        .           
        .               /// Returns `true` if `self` touches `other`.
        .               pub fn overlaps(self, other: Span) -> bool {
        .                   let span = self.data();
        .                   let other = other.data();
        .                   span.lo < other.hi && other.lo < span.hi
        .               }
        .           
-- line 638 ----------------------------------------
-- line 663 ----------------------------------------
        .               /// The `Span` for the tokens in the previous macro expansion from which `self` was generated,
        .               /// if any.
        .               pub fn parent_callsite(self) -> Option<Span> {
        .                   let expn_data = self.ctxt().outer_expn_data();
        .                   if !expn_data.is_root() { Some(expn_data.call_site) } else { None }
        .               }
        .           
        .               /// Walk down the expansion ancestors to find a span that's contained within `outer`.
   28,190 ( 0.00%)      pub fn find_ancestor_inside(mut self, outer: Span) -> Option<Span> {
   14,095 ( 0.00%)          while !outer.contains(self) {
        .                       self = self.parent_callsite()?;
        .                   }
        .                   Some(self)
   31,009 ( 0.00%)      }
        .           
        .               /// Edition of the crate from which this span came.
  137,058 ( 0.00%)      pub fn edition(self) -> edition::Edition {
        .                   self.ctxt().edition()
   91,372 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn rust_2015(self) -> bool {
   29,994 ( 0.00%)          self.edition() == edition::Edition::Edition2015
        .               }
        .           
        .               #[inline]
        .               pub fn rust_2018(self) -> bool {
   14,483 ( 0.00%)          self.edition() >= edition::Edition::Edition2018
        .               }
        .           
        .               #[inline]
        .               pub fn rust_2021(self) -> bool {
   14,583 ( 0.00%)          self.edition() >= edition::Edition::Edition2021
        .               }
        .           
        .               /// Returns the source callee.
        .               ///
        .               /// Returns `None` if the supplied span has no expansion trace,
        .               /// else returns the `ExpnData` for the macro definition
        .               /// corresponding to the source callsite.
        .               pub fn source_callee(self) -> Option<ExpnData> {
-- line 703 ----------------------------------------
-- line 707 ----------------------------------------
        .                   }
        .                   let expn_data = self.ctxt().outer_expn_data();
        .                   if !expn_data.is_root() { Some(source_callee(expn_data)) } else { None }
        .               }
        .           
        .               /// Checks if a span is "internal" to a macro in which `#[unstable]`
        .               /// items can be used (that is, a macro marked with
        .               /// `#[allow_internal_unstable]`).
    6,970 ( 0.00%)      pub fn allows_unstable(self, feature: Symbol) -> bool {
    1,394 ( 0.00%)          self.ctxt()
        .                       .outer_expn_data()
        .                       .allow_internal_unstable
        .                       .map_or(false, |features| features.iter().any(|&f| f == feature))
    5,576 ( 0.00%)      }
        .           
        .               /// Checks if this span arises from a compiler desugaring of kind `kind`.
  150,703 ( 0.00%)      pub fn is_desugaring(self, kind: DesugaringKind) -> bool {
  129,174 ( 0.00%)          match self.ctxt().outer_expn_data().kind {
        .                       ExpnKind::Desugaring(k) => k == kind,
        .                       _ => false,
        .                   }
  107,645 ( 0.00%)      }
        .           
        .               /// Returns the compiler desugaring that created this span, or `None`
        .               /// if this span is not from a desugaring.
    1,870 ( 0.00%)      pub fn desugaring_kind(self) -> Option<DesugaringKind> {
    2,244 ( 0.00%)          match self.ctxt().outer_expn_data().kind {
        .                       ExpnKind::Desugaring(k) => Some(k),
        .                       _ => None,
        .                   }
    1,496 ( 0.00%)      }
        .           
        .               /// Checks if a span is "internal" to a macro in which `unsafe`
        .               /// can be used without triggering the `unsafe_code` lint.
        .               //  (that is, a macro marked with `#[allow_internal_unsafe]`).
        .               pub fn allows_unsafe(self) -> bool {
        .                   self.ctxt().outer_expn_data().allow_internal_unsafe
        .               }
        .           
-- line 745 ----------------------------------------
-- line 767 ----------------------------------------
        .           
        .               /// Returns a `Span` that would enclose both `self` and `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///     ^^^^^^^^^^^^^^^^^^^^
        .               /// ```
2,458,082 ( 0.01%)      pub fn to(self, end: Span) -> Span {
        .                   let span_data = self.data();
        .                   let end_data = end.data();
        .                   // FIXME(jseyfried): `self.ctxt` should always equal `end.ctxt` here (cf. issue #23480).
        .                   // Return the macro span on its own to avoid weird diagnostic output. It is preferable to
        .                   // have an incomplete span than a completely nonsensical one.
  433,018 ( 0.00%)          if span_data.ctxt != end_data.ctxt {
   13,904 ( 0.00%)              if span_data.ctxt == SyntaxContext::root() {
        .                           return end;
   12,741 ( 0.00%)              } else if end_data.ctxt == SyntaxContext::root() {
        .                           return self;
        .                       }
        .                       // Both spans fall within a macro.
        .                       // FIXME(estebank): check if it is the *same* macro.
        .                   }
        .                   Span::new(
        .                       cmp::min(span_data.lo, end_data.lo),
        .                       cmp::max(span_data.hi, end_data.hi),
        .                       if span_data.ctxt == SyntaxContext::root() { end_data.ctxt } else { span_data.ctxt },
1,467,137 ( 0.01%)              if span_data.parent == end_data.parent { span_data.parent } else { None },
        .                   )
2,011,158 ( 0.01%)      }
        .           
        .               /// Returns a `Span` between the end of `self` to the beginning of `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///         ^^^^^^^^^^^^^
        .               /// ```
    9,702 ( 0.00%)      pub fn between(self, end: Span) -> Span {
        .                   let span = self.data();
        .                   let end = end.data();
        .                   Span::new(
        .                       span.hi,
        .                       end.lo,
        .                       if end.ctxt == SyntaxContext::root() { end.ctxt } else { span.ctxt },
    6,174 ( 0.00%)              if span.parent == end.parent { span.parent } else { None },
        .                   )
    7,056 ( 0.00%)      }
        .           
        .               /// Returns a `Span` from the beginning of `self` until the beginning of `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///     ^^^^^^^^^^^^^^^^^
        .               /// ```
   23,474 ( 0.00%)      pub fn until(self, end: Span) -> Span {
        .                   // Most of this function's body is copied from `to`.
        .                   // We can't just do `self.to(end.shrink_to_lo())`,
        .                   // because to also does some magic where it uses min/max so
        .                   // it can handle overlapping spans. Some advanced mis-use of
        .                   // `until` with different ctxts makes this visible.
        .                   let span_data = self.data();
        .                   let end_data = end.data();
        .                   // FIXME(jseyfried): `self.ctxt` should always equal `end.ctxt` here (cf. issue #23480).
        .                   // Return the macro span on its own to avoid weird diagnostic output. It is preferable to
        .                   // have an incomplete span than a completely nonsensical one.
    4,268 ( 0.00%)          if span_data.ctxt != end_data.ctxt {
        .                       if span_data.ctxt == SyntaxContext::root() {
        .                           return end;
        .                       } else if end_data.ctxt == SyntaxContext::root() {
        .                           return self;
        .                       }
        .                       // Both spans fall within a macro.
        .                       // FIXME(estebank): check if it is the *same* macro.
        .                   }
        .                   Span::new(
        .                       span_data.lo,
        .                       end_data.lo,
        .                       if end_data.ctxt == SyntaxContext::root() { end_data.ctxt } else { span_data.ctxt },
   14,938 ( 0.00%)              if span_data.parent == end_data.parent { span_data.parent } else { None },
        .                   )
   19,206 ( 0.00%)      }
        .           
    1,573 ( 0.00%)      pub fn from_inner(self, inner: InnerSpan) -> Span {
        .                   let span = self.data();
        .                   Span::new(
        .                       span.lo + BytePos::from_usize(inner.start),
        .                       span.lo + BytePos::from_usize(inner.end),
        .                       span.ctxt,
        .                       span.parent,
        .                   )
    1,001 ( 0.00%)      }
        .           
        .               /// Equivalent of `Span::def_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_def_site_ctxt(self, expn_id: ExpnId) -> Span {
   16,502 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::Opaque)
        .               }
        .           
        .               /// Equivalent of `Span::call_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_call_site_ctxt(self, expn_id: ExpnId) -> Span {
        6 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::Transparent)
        .               }
        .           
        .               /// Equivalent of `Span::mixed_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_mixed_site_ctxt(self, expn_id: ExpnId) -> Span {
        4 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::SemiTransparent)
        .               }
        .           
        .               /// Produces a span with the same location as `self` and context produced by a macro with the
        .               /// given ID and transparency, assuming that macro was defined directly and not produced by
        .               /// some other macro (which is the case for built-in and procedural macros).
   99,072 ( 0.00%)      pub fn with_ctxt_from_mark(self, expn_id: ExpnId, transparency: Transparency) -> Span {
        .                   self.with_ctxt(SyntaxContext::root().apply_mark(expn_id, transparency))
   57,792 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn apply_mark(self, expn_id: ExpnId, transparency: Transparency) -> Span {
        .                   let span = self.data();
   46,485 ( 0.00%)          span.with_ctxt(span.ctxt.apply_mark(expn_id, transparency))
        .               }
        .           
        .               #[inline]
        .               pub fn remove_mark(&mut self) -> ExpnId {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.remove_mark();
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
-- line 897 ----------------------------------------
-- line 901 ----------------------------------------
        .               pub fn adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.adjust(expn_id);
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
        .           
        .               #[inline]
  504,756 ( 0.00%)      pub fn normalize_to_macros_2_0_and_adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
  336,504 ( 0.00%)          let mut span = self.data();
  276,824 ( 0.00%)          let mark = span.ctxt.normalize_to_macros_2_0_and_adjust(expn_id);
  504,756 ( 0.00%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
  557,244 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn glob_adjust(&mut self, expn_id: ExpnId, glob_span: Span) -> Option<Option<ExpnId>> {
      202 ( 0.00%)          let mut span = self.data();
      303 ( 0.00%)          let mark = span.ctxt.glob_adjust(expn_id, glob_span);
      808 ( 0.00%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
        .           
        .               #[inline]
    3,807 ( 0.00%)      pub fn reverse_glob_adjust(
        .                   &mut self,
        .                   expn_id: ExpnId,
        .                   glob_span: Span,
        .               ) -> Option<Option<ExpnId>> {
    5,026 ( 0.00%)          let mut span = self.data();
    7,091 ( 0.00%)          let mark = span.ctxt.reverse_glob_adjust(expn_id, glob_span);
   13,759 ( 0.00%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
    4,230 ( 0.00%)      }
        .           
        .               #[inline]
  459,384 ( 0.00%)      pub fn normalize_to_macros_2_0(self) -> Span {
        .                   let span = self.data();
        .                   span.with_ctxt(span.ctxt.normalize_to_macros_2_0())
  401,961 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn normalize_to_macro_rules(self) -> Span {
        .                   let span = self.data();
        .                   span.with_ctxt(span.ctxt.normalize_to_macro_rules())
        .               }
        .           }
        .           
-- line 948 ----------------------------------------
-- line 958 ----------------------------------------
        .           
        .               /// What label should we attach to this span (if any)?
        .               pub label: Option<String>,
        .           }
        .           
        .           impl Default for Span {
        .               fn default() -> Self {
        .                   DUMMY_SP
    7,218 ( 0.00%)      }
        .           }
        .           
        .           impl<E: Encoder> Encodable<E> for Span {
        .               default fn encode(&self, s: &mut E) -> Result<(), E::Error> {
        .                   let span = self.data();
        .                   s.emit_struct(false, |s| {
        .                       s.emit_struct_field("lo", true, |s| span.lo.encode(s))?;
        .                       s.emit_struct_field("hi", false, |s| span.hi.encode(s))
-- line 974 ----------------------------------------
-- line 990 ----------------------------------------
        .           /// any spans that are debug-printed during the closure's execution.
        .           ///
        .           /// Normally, the global `TyCtxt` is used to retrieve the `SourceMap`
        .           /// (see `rustc_interface::callbacks::span_debug1`). However, some parts
        .           /// of the compiler (e.g. `rustc_parse`) may debug-print `Span`s before
        .           /// a `TyCtxt` is available. In this case, we fall back to
        .           /// the `SourceMap` provided to this function. If that is not available,
        .           /// we fall back to printing the raw `Span` field values.
        9 ( 0.00%)  pub fn with_source_map<T, F: FnOnce() -> T>(source_map: Lrc<SourceMap>, f: F) -> T {
        .               with_session_globals(|session_globals| {
        2 ( 0.00%)          *session_globals.source_map.borrow_mut() = Some(source_map);
        .               });
        .               struct ClearSourceMap;
        .               impl Drop for ClearSourceMap {
        .                   fn drop(&mut self) {
        .                       with_session_globals(|session_globals| {
        1 ( 0.00%)                  session_globals.source_map.borrow_mut().take();
        .                       });
        .                   }
        .               }
        .           
        .               let _guard = ClearSourceMap;
        4 ( 0.00%)      f()
        8 ( 0.00%)  }
        .           
        .           pub fn debug_with_source_map(
        .               span: Span,
        .               f: &mut fmt::Formatter<'_>,
        .               source_map: &SourceMap,
        .           ) -> fmt::Result {
        .               write!(f, "{} ({:?})", source_map.span_to_diagnostic_string(span), span.ctxt())
        .           }
-- line 1021 ----------------------------------------
-- line 1048 ----------------------------------------
        .           
        .           impl MultiSpan {
        .               #[inline]
        .               pub fn new() -> MultiSpan {
        .                   MultiSpan { primary_spans: vec![], span_labels: vec![] }
        .               }
        .           
        .               pub fn from_span(primary_span: Span) -> MultiSpan {
   36,400 ( 0.00%)          MultiSpan { primary_spans: vec![primary_span], span_labels: vec![] }
        .               }
        .           
        .               pub fn from_spans(mut vec: Vec<Span>) -> MultiSpan {
        .                   vec.sort();
    2,895 ( 0.00%)          MultiSpan { primary_spans: vec, span_labels: vec![] }
        .               }
        .           
        .               pub fn push_span_label(&mut self, span: Span, label: String) {
        .                   self.span_labels.push((span, label));
        .               }
        .           
        .               /// Selects the first primary span (if any).
        .               pub fn primary_span(&self) -> Option<Span> {
        .                   self.primary_spans.first().cloned()
    5,077 ( 0.00%)      }
        .           
        .               /// Returns all primary spans.
        .               pub fn primary_spans(&self) -> &[Span] {
        .                   &self.primary_spans
        .               }
        .           
        .               /// Returns `true` if any of the primary spans are displayable.
        .               pub fn has_primary_spans(&self) -> bool {
-- line 1079 ----------------------------------------
-- line 1139 ----------------------------------------
        .           
        .               /// Returns `true` if any of the span labels is displayable.
        .               pub fn has_span_labels(&self) -> bool {
        .                   self.span_labels.iter().any(|(sp, _)| !sp.is_dummy())
        .               }
        .           }
        .           
        .           impl From<Span> for MultiSpan {
   36,400 ( 0.00%)      fn from(span: Span) -> MultiSpan {
        .                   MultiSpan::from_span(span)
   36,400 ( 0.00%)      }
        .           }
        .           
        .           impl From<Vec<Span>> for MultiSpan {
    2,895 ( 0.00%)      fn from(spans: Vec<Span>) -> MultiSpan {
    2,316 ( 0.00%)          MultiSpan::from_spans(spans)
    2,895 ( 0.00%)      }
        .           }
        .           
        .           /// Identifies an offset of a multi-byte character in a `SourceFile`.
    1,111 ( 0.00%)  #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub struct MultiByteChar {
        .               /// The absolute offset of the character in the `SourceMap`.
        .               pub pos: BytePos,
        .               /// The number of bytes, `>= 2`.
        .               pub bytes: u8,
        .           }
        .           
        .           /// Identifies an offset of a non-narrow character in a `SourceFile`.
      324 ( 0.00%)  #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub enum NonNarrowChar {
        .               /// Represents a zero-width character.
        .               ZeroWidth(BytePos),
        .               /// Represents a wide (full-width) character.
        .               Wide(BytePos),
        .               /// Represents a tab character, represented visually with a width of 4 characters.
        .               Tab(BytePos),
        .           }
-- line 1176 ----------------------------------------
-- line 1201 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           impl Add<BytePos> for NonNarrowChar {
        .               type Output = Self;
        .           
        .               fn add(self, rhs: BytePos) -> Self {
      560 ( 0.00%)          match self {
        .                       NonNarrowChar::ZeroWidth(pos) => NonNarrowChar::ZeroWidth(pos + rhs),
        .                       NonNarrowChar::Wide(pos) => NonNarrowChar::Wide(pos + rhs),
        .                       NonNarrowChar::Tab(pos) => NonNarrowChar::Tab(pos + rhs),
        .                   }
        .               }
        .           }
        .           
        .           impl Sub<BytePos> for NonNarrowChar {
        .               type Output = Self;
        .           
      162 ( 0.00%)      fn sub(self, rhs: BytePos) -> Self {
      560 ( 0.00%)          match self {
        .                       NonNarrowChar::ZeroWidth(pos) => NonNarrowChar::ZeroWidth(pos - rhs),
        .                       NonNarrowChar::Wide(pos) => NonNarrowChar::Wide(pos - rhs),
        .                       NonNarrowChar::Tab(pos) => NonNarrowChar::Tab(pos - rhs),
        .                   }
      486 ( 0.00%)      }
        .           }
        .           
        .           /// Identifies an offset of a character that was normalized away from `SourceFile`.
        .           #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub struct NormalizedPos {
        .               /// The absolute offset of the character in the `SourceMap`.
        .               pub pos: BytePos,
        .               /// The difference between original and normalized string at position.
        .               pub diff: u32,
        .           }
        .           
       12 ( 0.00%)  #[derive(PartialEq, Eq, Clone, Debug)]
        .           pub enum ExternalSource {
        .               /// No external source has to be loaded, since the `SourceFile` represents a local crate.
        .               Unneeded,
        .               Foreign {
        .                   kind: ExternalSourceKind,
        .                   /// This SourceFile's byte-offset within the source_map of its original crate.
        .                   original_start_pos: BytePos,
        .                   /// The end of this SourceFile within the source_map of its original crate.
-- line 1246 ----------------------------------------
-- line 1257 ----------------------------------------
        .               AbsentOk,
        .               /// A failed attempt has been made to load the external source.
        .               AbsentErr,
        .               Unneeded,
        .           }
        .           
        .           impl ExternalSource {
        .               pub fn get_source(&self) -> Option<&Lrc<String>> {
    1,721 ( 0.00%)          match self {
        .                       ExternalSource::Foreign { kind: ExternalSourceKind::Present(ref src), .. } => Some(src),
        .                       _ => None,
        .                   }
        .               }
        .           }
        .           
        .           #[derive(Debug)]
        .           pub struct OffsetOverflowError;
        .           
    2,282 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash, Encodable, Decodable)]
        .           pub enum SourceFileHashAlgorithm {
        .               Md5,
        .               Sha1,
        .               Sha256,
        .           }
        .           
        .           impl FromStr for SourceFileHashAlgorithm {
        .               type Err = ();
-- line 1283 ----------------------------------------
-- line 1290 ----------------------------------------
        .                       _ => Err(()),
        .                   }
        .               }
        .           }
        .           
        .           rustc_data_structures::impl_stable_hash_via_hash!(SourceFileHashAlgorithm);
        .           
        .           /// The hash of the on-disk source file used for debug info.
       24 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Debug)]
    4,564 ( 0.00%)  #[derive(HashStable_Generic, Encodable, Decodable)]
        .           pub struct SourceFileHash {
        .               pub kind: SourceFileHashAlgorithm,
        .               value: [u8; 32],
        .           }
        .           
        .           impl SourceFileHash {
        .               pub fn new(kind: SourceFileHashAlgorithm, src: &str) -> SourceFileHash {
        .                   let mut hash = SourceFileHash { kind, value: Default::default() };
        .                   let len = hash.hash_len();
        .                   let value = &mut hash.value[..len];
        .                   let data = src.as_bytes();
        .                   match kind {
        .                       SourceFileHashAlgorithm::Md5 => {
       18 ( 0.00%)                  value.copy_from_slice(&Md5::digest(data));
        .                       }
        .                       SourceFileHashAlgorithm::Sha1 => {
        .                           value.copy_from_slice(&Sha1::digest(data));
        .                       }
        .                       SourceFileHashAlgorithm::Sha256 => {
        .                           value.copy_from_slice(&Sha256::digest(data));
        .                       }
        .                   }
-- line 1321 ----------------------------------------
-- line 1329 ----------------------------------------
        .           
        .               /// The bytes of the hash.
        .               pub fn hash_bytes(&self) -> &[u8] {
        .                   let len = self.hash_len();
        .                   &self.value[..len]
        .               }
        .           
        .               fn hash_len(&self) -> usize {
       18 ( 0.00%)          match self.kind {
        .                       SourceFileHashAlgorithm::Md5 => 16,
        .                       SourceFileHashAlgorithm::Sha1 => 20,
        .                       SourceFileHashAlgorithm::Sha256 => 32,
        .                   }
        .               }
        .           }
        .           
        .           /// A single source in the [`SourceMap`].
      232 ( 0.00%)  #[derive(Clone)]
        .           pub struct SourceFile {
        .               /// The name of the file that the source came from. Source that doesn't
        .               /// originate from files has names between angle brackets by convention
        .               /// (e.g., `<anon>`).
        .               pub name: FileName,
        .               /// The complete source code.
        4 ( 0.00%)      pub src: Option<Lrc<String>>,
        .               /// The source code's hash.
        .               pub src_hash: SourceFileHash,
        .               /// The external source code (used for external crates, which will have a `None`
        .               /// value as `self.src`.
        .               pub external_src: Lock<ExternalSource>,
        .               /// The start position of this source in the `SourceMap`.
        .               pub start_pos: BytePos,
        .               /// The end position of this source in the `SourceMap`.
-- line 1361 ----------------------------------------
-- line 1364 ----------------------------------------
        .               pub lines: Vec<BytePos>,
        .               /// Locations of multi-byte characters in the source code.
        .               pub multibyte_chars: Vec<MultiByteChar>,
        .               /// Width of characters that are not narrow in the source code.
        .               pub non_narrow_chars: Vec<NonNarrowChar>,
        .               /// Locations of characters removed during normalization.
        .               pub normalized_pos: Vec<NormalizedPos>,
        .               /// A hash of the filename, used for speeding up hashing in incremental compilation.
        4 ( 0.00%)      pub name_hash: u128,
        .               /// Indicates which crate this `SourceFile` was imported from.
        4 ( 0.00%)      pub cnum: CrateNum,
        .           }
        .           
        .           impl<S: Encoder> Encodable<S> for SourceFile {
        .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
        .                   s.emit_struct(false, |s| {
        .                       s.emit_struct_field("name", true, |s| self.name.encode(s))?;
        .                       s.emit_struct_field("src_hash", false, |s| self.src_hash.encode(s))?;
        .                       s.emit_struct_field("start_pos", false, |s| self.start_pos.encode(s))?;
        .                       s.emit_struct_field("end_pos", false, |s| self.end_pos.encode(s))?;
        .                       s.emit_struct_field("lines", false, |s| {
        .                           let lines = &self.lines[..];
        .                           // Store the length.
        .                           s.emit_u32(lines.len() as u32)?;
        .           
       16 ( 0.00%)                  if !lines.is_empty() {
        .                               // In order to preserve some space, we exploit the fact that
        .                               // the lines list is sorted and individual lines are
        .                               // probably not that long. Because of that we can store lines
        .                               // as a difference list, using as little space as possible
        .                               // for the differences.
        .                               let max_line_length = if lines.len() == 1 {
        .                                   0
        .                               } else {
-- line 1397 ----------------------------------------
-- line 1399 ----------------------------------------
        .                                       .array_windows()
        .                                       .map(|&[fst, snd]| snd - fst)
        .                                       .map(|bp| bp.to_usize())
        .                                       .max()
        .                                       .unwrap()
        .                               };
        .           
        .                               let bytes_per_diff: u8 = match max_line_length {
        8 ( 0.00%)                          0..=0xFF => 1,
        4 ( 0.00%)                          0x100..=0xFFFF => 2,
        .                                   _ => 4,
        .                               };
        .           
        .                               // Encode the number of bytes used per diff.
        .                               bytes_per_diff.encode(s)?;
        .           
        .                               // Encode the first element.
        .                               lines[0].encode(s)?;
        .           
        .                               let diff_iter = lines.array_windows().map(|&[fst, snd]| snd - fst);
        .           
       10 ( 0.00%)                      match bytes_per_diff {
        .                                   1 => {
        .                                       for diff in diff_iter {
        .                                           (diff.0 as u8).encode(s)?
        .                                       }
        .                                   }
        .                                   2 => {
        .                                       for diff in diff_iter {
        .                                           (diff.0 as u16).encode(s)?
-- line 1428 ----------------------------------------
-- line 1436 ----------------------------------------
        .                                   _ => unreachable!(),
        .                               }
        .                           }
        .           
        .                           Ok(())
        .                       })?;
        .                       s.emit_struct_field("multibyte_chars", false, |s| self.multibyte_chars.encode(s))?;
        .                       s.emit_struct_field("non_narrow_chars", false, |s| self.non_narrow_chars.encode(s))?;
       12 ( 0.00%)              s.emit_struct_field("name_hash", false, |s| self.name_hash.encode(s))?;
        .                       s.emit_struct_field("normalized_pos", false, |s| self.normalized_pos.encode(s))?;
       44 ( 0.00%)              s.emit_struct_field("cnum", false, |s| self.cnum.encode(s))
        .                   })
        .               }
        .           }
        .           
        .           impl<D: Decoder> Decodable<D> for SourceFile {
   10,269 ( 0.00%)      fn decode(d: &mut D) -> SourceFile {
        .                   d.read_struct(|d| {
        .                       let name: FileName = d.read_struct_field("name", |d| Decodable::decode(d));
        .                       let src_hash: SourceFileHash =
        .                           d.read_struct_field("src_hash", |d| Decodable::decode(d));
        .                       let start_pos: BytePos = d.read_struct_field("start_pos", |d| Decodable::decode(d));
        .                       let end_pos: BytePos = d.read_struct_field("end_pos", |d| Decodable::decode(d));
        .                       let lines: Vec<BytePos> = d.read_struct_field("lines", |d| {
        .                           let num_lines: u32 = Decodable::decode(d);
    1,141 ( 0.00%)                  let mut lines = Vec::with_capacity(num_lines as usize);
        .           
        .                           if num_lines > 0 {
        .                               // Read the number of bytes used per diff.
        .                               let bytes_per_diff: u8 = Decodable::decode(d);
        .           
        .                               // Read the first element.
        .                               let mut line_start: BytePos = Decodable::decode(d);
        .                               lines.push(line_start);
        .           
        .                               for _ in 1..num_lines {
1,264,258 ( 0.01%)                          let diff = match bytes_per_diff {
        .                                       1 => d.read_u8() as u32,
        .                                       2 => d.read_u16() as u32,
        .                                       4 => d.read_u32(),
        .                                       _ => unreachable!(),
        .                                   };
        .           
        .                                   line_start = line_start + BytePos(diff);
        .           
-- line 1480 ----------------------------------------
-- line 1483 ----------------------------------------
        .                           }
        .           
        .                           lines
        .                       });
        .                       let multibyte_chars: Vec<MultiByteChar> =
        .                           d.read_struct_field("multibyte_chars", |d| Decodable::decode(d));
        .                       let non_narrow_chars: Vec<NonNarrowChar> =
        .                           d.read_struct_field("non_narrow_chars", |d| Decodable::decode(d));
    2,282 ( 0.00%)              let name_hash: u128 = d.read_struct_field("name_hash", |d| Decodable::decode(d));
        .                       let normalized_pos: Vec<NormalizedPos> =
        .                           d.read_struct_field("normalized_pos", |d| Decodable::decode(d));
        .                       let cnum: CrateNum = d.read_struct_field("cnum", |d| Decodable::decode(d));
   12,551 ( 0.00%)              SourceFile {
    9,128 ( 0.00%)                  name,
        .                           start_pos,
        .                           end_pos,
        .                           src: None,
    4,564 ( 0.00%)                  src_hash,
        .                           // Unused - the metadata decoder will construct
        .                           // a new SourceFile, filling in `external_src` properly
        .                           external_src: Lock::new(ExternalSource::Unneeded),
    4,564 ( 0.00%)                  lines,
    4,564 ( 0.00%)                  multibyte_chars,
    4,564 ( 0.00%)                  non_narrow_chars,
    4,564 ( 0.00%)                  normalized_pos,
        .                           name_hash,
        .                           cnum,
        .                       }
        .                   })
   10,269 ( 0.00%)      }
        .           }
        .           
        .           impl fmt::Debug for SourceFile {
        .               fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   write!(fmt, "SourceFile({:?})", self.name)
        .               }
        .           }
        .           
        .           impl SourceFile {
       66 ( 0.00%)      pub fn new(
        .                   name: FileName,
        .                   mut src: String,
        .                   start_pos: BytePos,
        .                   hash_kind: SourceFileHashAlgorithm,
        .               ) -> Self {
        .                   // Compute the file hash before any normalization.
        .                   let src_hash = SourceFileHash::new(hash_kind, &src);
       18 ( 0.00%)          let normalized_pos = normalize_src(&mut src, start_pos);
        .           
        .                   let name_hash = {
        .                       let mut hasher: StableHasher = StableHasher::new();
       12 ( 0.00%)              name.hash(&mut hasher);
        .                       hasher.finish::<u128>()
        .                   };
       12 ( 0.00%)          let end_pos = start_pos.to_usize() + src.len();
       18 ( 0.00%)          assert!(end_pos <= u32::MAX as usize);
        .           
       72 ( 0.00%)          let (lines, multibyte_chars, non_narrow_chars) =
       12 ( 0.00%)              analyze_source_file::analyze_source_file(&src, start_pos);
        .           
      102 ( 0.00%)          SourceFile {
        .                       name,
        .                       src: Some(Lrc::new(src)),
       66 ( 0.00%)              src_hash,
        .                       external_src: Lock::new(ExternalSource::Unneeded),
        .                       start_pos,
        .                       end_pos: Pos::from_usize(end_pos),
       24 ( 0.00%)              lines,
       24 ( 0.00%)              multibyte_chars,
       24 ( 0.00%)              non_narrow_chars,
       24 ( 0.00%)              normalized_pos,
        .                       name_hash,
        .                       cnum: LOCAL_CRATE,
        .                   }
       54 ( 0.00%)      }
        .           
        .               /// Returns the `BytePos` of the beginning of the current line.
        .               pub fn line_begin_pos(&self, pos: BytePos) -> BytePos {
        .                   let line_index = self.lookup_line(pos).unwrap();
        .                   self.lines[line_index]
        .               }
        .           
        .               /// Add externally loaded source.
        .               /// If the hash of the input doesn't match or no input is supplied via None,
        .               /// it is interpreted as an error and the corresponding enum variant is set.
        .               /// The return value signifies whether some kind of source is present.
   32,697 ( 0.00%)      pub fn add_external_src<F>(&self, get_src: F) -> bool
        .               where
        .                   F: FnOnce() -> Option<String>,
        .               {
    4,671 ( 0.00%)          if matches!(
    9,342 ( 0.00%)              *self.external_src.borrow(),
        .                       ExternalSource::Foreign { kind: ExternalSourceKind::AbsentOk, .. }
        .                   ) {
        .                       let src = get_src();
        .                       let mut external_src = self.external_src.borrow_mut();
        .                       // Check that no-one else have provided the source while we were getting it
        .                       if let ExternalSource::Foreign {
        .                           kind: src_kind @ ExternalSourceKind::AbsentOk, ..
        .                       } = &mut *external_src
-- line 1582 ----------------------------------------
-- line 1592 ----------------------------------------
        .                               *src_kind = ExternalSourceKind::AbsentErr;
        .                           }
        .           
        .                           false
        .                       } else {
        .                           self.src.is_some() || external_src.get_source().is_some()
        .                       }
        .                   } else {
    4,671 ( 0.00%)              self.src.is_some() || self.external_src.borrow().get_source().is_some()
        .                   }
   42,039 ( 0.00%)      }
        .           
        .               /// Gets a line from the list of pre-computed line-beginnings.
        .               /// The line number here is 0-based.
        .               pub fn get_line(&self, line_number: usize) -> Option<Cow<'_, str>> {
        .                   fn get_until_newline(src: &str, begin: usize) -> &str {
        .                       // We can't use `lines.get(line_number+1)` because we might
        .                       // be parsing when we call this function and thus the current
        .                       // line is the last one we have line info for.
-- line 1610 ----------------------------------------
-- line 1627 ----------------------------------------
        .                       Some(Cow::Owned(String::from(get_until_newline(src, begin))))
        .                   } else {
        .                       None
        .                   }
        .               }
        .           
        .               pub fn is_real_file(&self) -> bool {
        .                   self.name.is_real()
    1,117 ( 0.00%)      }
        .           
        .               pub fn is_imported(&self) -> bool {
        .                   self.src.is_none()
  135,081 ( 0.00%)      }
        .           
        .               pub fn count_lines(&self) -> usize {
        .                   self.lines.len()
        .               }
        .           
        .               /// Finds the line containing the given position. The return value is the
        .               /// index into the `lines` array of this `SourceFile`, not the 1-based line
        .               /// number. If the source_file is empty or the position is located before the
        .               /// first line, `None` is returned.
        .               pub fn lookup_line(&self, pos: BytePos) -> Option<usize> {
   86,046 ( 0.00%)          match self.lines.binary_search(&pos) {
        .                       Ok(idx) => Some(idx),
        .                       Err(0) => None,
        .                       Err(idx) => Some(idx - 1),
        .                   }
        .               }
        .           
        .               pub fn line_bounds(&self, line_index: usize) -> Range<BytePos> {
  225,233 ( 0.00%)          if self.is_empty() {
        .                       return self.start_pos..self.end_pos;
        .                   }
        .           
  150,785 ( 0.00%)          assert!(line_index < self.lines.len());
  216,837 ( 0.00%)          if line_index == (self.lines.len() - 1) {
      231 ( 0.00%)              self.lines[line_index]..self.end_pos
        .                   } else {
  144,402 ( 0.00%)              self.lines[line_index]..self.lines[line_index + 1]
        .                   }
        .               }
        .           
        .               /// Returns whether or not the file contains the given `SourceMap` byte
        .               /// position. The position one past the end of the file is considered to be
        .               /// contained by the file. This implies that files for which `is_empty`
        .               /// returns true still contain one byte position according to this function.
        .               #[inline]
-- line 1674 ----------------------------------------
-- line 1692 ----------------------------------------
        .                       Err(i) if i == 0 => 0,
        .                       Err(i) => self.normalized_pos[i - 1].diff,
        .                   };
        .           
        .                   BytePos::from_u32(pos.0 - self.start_pos.0 + diff)
        .               }
        .           
        .               /// Converts an absolute `BytePos` to a `CharPos` relative to the `SourceFile`.
    1,538 ( 0.00%)      pub fn bytepos_to_file_charpos(&self, bpos: BytePos) -> CharPos {
        .                   // The number of extra bytes due to multibyte chars in the `SourceFile`.
        .                   let mut total_extra_bytes = 0;
        .           
    4,614 ( 0.00%)          for mbc in self.multibyte_chars.iter() {
        .                       debug!("{}-byte char at {:?}", mbc.bytes, mbc.pos);
  164,960 ( 0.00%)              if mbc.pos < bpos {
        .                           // Every character is at least one byte, so we only
        .                           // count the actual extra bytes.
  485,856 ( 0.00%)                  total_extra_bytes += mbc.bytes as u32 - 1;
        .                           // We should never see a byte position in the middle of a
        .                           // character.
  404,880 ( 0.00%)                  assert!(bpos.to_u32() >= mbc.pos.to_u32() + mbc.bytes as u32);
        .                       } else {
        .                           break;
        .                       }
        .                   }
        .           
    9,228 ( 0.00%)          assert!(self.start_pos.to_u32() + total_extra_bytes <= bpos.to_u32());
    7,690 ( 0.00%)          CharPos(bpos.to_usize() - self.start_pos.to_usize() - total_extra_bytes as usize)
    3,076 ( 0.00%)      }
        .           
        .               /// Looks up the file's (1-based) line number and (0-based `CharPos`) column offset, for a
        .               /// given `BytePos`.
    5,383 ( 0.00%)      pub fn lookup_file_pos(&self, pos: BytePos) -> (usize, CharPos) {
    1,538 ( 0.00%)          let chpos = self.bytepos_to_file_charpos(pos);
      768 ( 0.00%)          match self.lookup_line(pos) {
        .                       Some(a) => {
        .                           let line = a + 1; // Line numbers start at 1
      769 ( 0.00%)                  let linebpos = self.lines[a];
    1,538 ( 0.00%)                  let linechpos = self.bytepos_to_file_charpos(linebpos);
        .                           let col = chpos - linechpos;
        .                           debug!("byte pos {:?} is on the line at byte pos {:?}", pos, linebpos);
        .                           debug!("char pos {:?} is on the line at char pos {:?}", chpos, linechpos);
        .                           debug!("byte is on line: {}", line);
      769 ( 0.00%)                  assert!(chpos >= linechpos);
        .                           (line, col)
        .                       }
        .                       None => (0, chpos),
        .                   }
    6,152 ( 0.00%)      }
        .           
        .               /// Looks up the file's (1-based) line number, (0-based `CharPos`) column offset, and (0-based)
        .               /// column offset when displayed, for a given `BytePos`.
    6,152 ( 0.00%)      pub fn lookup_file_pos_with_col_display(&self, pos: BytePos) -> (usize, CharPos, usize) {
    2,307 ( 0.00%)          let (line, col_or_chpos) = self.lookup_file_pos(pos);
    1,538 ( 0.00%)          if line > 0 {
        .                       let col = col_or_chpos;
      769 ( 0.00%)              let linebpos = self.lines[line - 1];
        .                       let col_display = {
        .                           let start_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&linebpos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let end_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&pos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let special_chars = end_width_idx - start_width_idx;
        .                           let non_narrow: usize = self.non_narrow_chars[start_width_idx..end_width_idx]
        .                               .iter()
        .                               .map(|x| x.width())
        .                               .sum();
    3,845 ( 0.00%)                  col.0 - special_chars + non_narrow
        .                       };
        .                       (line, col, col_display)
        .                   } else {
        .                       let chpos = col_or_chpos;
        .                       let col_display = {
        .                           let end_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&pos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let non_narrow: usize =
        .                               self.non_narrow_chars[0..end_width_idx].iter().map(|x| x.width()).sum();
        .                           chpos.0 - end_width_idx + non_narrow
        .                       };
        .                       (0, chpos, col_display)
        .                   }
    5,383 ( 0.00%)      }
        .           }
        .           
        .           /// Normalizes the source code and records the normalizations.
       60 ( 0.00%)  fn normalize_src(src: &mut String, start_pos: BytePos) -> Vec<NormalizedPos> {
        .               let mut normalized_pos = vec![];
        .               remove_bom(src, &mut normalized_pos);
        .               normalize_newlines(src, &mut normalized_pos);
        .           
        .               // Offset all the positions by start_pos to match the final file positions.
        .               for np in &mut normalized_pos {
        .                   np.pos.0 += start_pos.0;
        .               }
        .           
        .               normalized_pos
       54 ( 0.00%)  }
        .           
        .           /// Removes UTF-8 BOM, if any.
        .           fn remove_bom(src: &mut String, normalized_pos: &mut Vec<NormalizedPos>) {
        6 ( 0.00%)      if src.starts_with('\u{feff}') {
        .                   src.drain(..3);
        .                   normalized_pos.push(NormalizedPos { pos: BytePos(0), diff: 3 });
        .               }
        .           }
        .           
        .           /// Replaces `\r\n` with `\n` in-place in `src`.
        .           ///
        .           /// Returns error if there's a lone `\r` in the string.
        .           fn normalize_newlines(src: &mut String, normalized_pos: &mut Vec<NormalizedPos>) {
        6 ( 0.00%)      if !src.as_bytes().contains(&b'\r') {
        .                   return;
        .               }
        .           
        .               // We replace `\r\n` with `\n` in-place, which doesn't break utf-8 encoding.
        .               // While we *can* call `as_mut_vec` and do surgery on the live string
        .               // directly, let's rather steal the contents of `src`. This makes the code
        .               // safe even if a panic occurs.
        .           
-- line 1816 ----------------------------------------
-- line 1877 ----------------------------------------
        .               (
        .                   $(
        .                       $(#[$attr:meta])*
        .                       $vis:vis struct $ident:ident($inner_vis:vis $inner_ty:ty);
        .                   )*
        .               ) => {
        .                   $(
        .                       $(#[$attr])*
  425,453 ( 0.00%)              $vis struct $ident($inner_vis $inner_ty);
        .           
        .                       impl Pos for $ident {
        .                           #[inline(always)]
        .                           fn from_usize(n: usize) -> $ident {
   19,776 ( 0.00%)                      $ident(n as $inner_ty)
        .                           }
        .           
        .                           #[inline(always)]
        .                           fn to_usize(&self) -> usize {
  417,991 ( 0.00%)                      self.0 as usize
        .                           }
        .           
        .                           #[inline(always)]
        .                           fn from_u32(n: u32) -> $ident {
        .                               $ident(n as $inner_ty)
        .                           }
        .           
        .                           #[inline(always)]
-- line 1903 ----------------------------------------
-- line 1906 ----------------------------------------
        .                           }
        .                       }
        .           
        .                       impl Add for $ident {
        .                           type Output = $ident;
        .           
        .                           #[inline(always)]
        .                           fn add(self, rhs: $ident) -> $ident {
3,001,172 ( 0.02%)                      $ident(self.0 + rhs.0)
        .                           }
        .                       }
        .           
        .                       impl Sub for $ident {
        .                           type Output = $ident;
        .           
        .                           #[inline(always)]
        .                           fn sub(self, rhs: $ident) -> $ident {
6,609,657 ( 0.03%)                      $ident(self.0 - rhs.0)
        .                           }
        .                       }
        .                   )*
        .               };
        .           }
        .           
        .           impl_pos! {
        .               /// A byte offset.
-- line 1931 ----------------------------------------
-- line 1946 ----------------------------------------
        .           impl<S: rustc_serialize::Encoder> Encodable<S> for BytePos {
        .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
        .                   s.emit_u32(self.0)
        .               }
        .           }
        .           
        .           impl<D: rustc_serialize::Decoder> Decodable<D> for BytePos {
        .               fn decode(d: &mut D) -> BytePos {
  255,356 ( 0.00%)          BytePos(d.read_u32())
        .               }
        .           }
        .           
        .           // _____________________________________________________________________________
        .           // Loc, SourceFileAndLine, SourceFileAndBytePos
        .           //
        .           
        .           /// A source code location used for error reporting.
-- line 1962 ----------------------------------------
-- line 2042 ----------------------------------------
        .           /// Range inside of a `Span` used for diagnostics when we only have access to relative positions.
        .           #[derive(Copy, Clone, PartialEq, Eq, Debug)]
        .           pub struct InnerSpan {
        .               pub start: usize,
        .               pub end: usize,
        .           }
        .           
        .           impl InnerSpan {
      804 ( 0.00%)      pub fn new(start: usize, end: usize) -> InnerSpan {
        .                   InnerSpan { start, end }
      402 ( 0.00%)      }
        .           }
        .           
        .           /// Requirements for a `StableHashingContext` to be used in this crate.
        .           ///
        .           /// This is a hack to allow using the [`HashStable_Generic`] derive macro
        .           /// instead of implementing everything in rustc_middle.
        .           pub trait HashStableContext {
        .               fn def_path_hash(&self, def_id: DefId) -> DefPathHash;
-- line 2060 ----------------------------------------
-- line 2079 ----------------------------------------
        .               /// offsets into the `SourceMap`). Instead, we hash the (file name, line, column)
        .               /// triple, which stays the same even if the containing `SourceFile` has moved
        .               /// within the `SourceMap`.
        .               ///
        .               /// Also note that we are hashing byte offsets for the column, not unicode
        .               /// codepoint offsets. For the purpose of the hash that's sufficient.
        .               /// Also, hashing filenames is expensive so we avoid doing it twice when the
        .               /// span starts and ends in the same file, which is almost always the case.
3,859,107 ( 0.02%)      fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {
        .                   const TAG_VALID_SPAN: u8 = 0;
        .                   const TAG_INVALID_SPAN: u8 = 1;
        .                   const TAG_RELATIVE_SPAN: u8 = 2;
        .           
  677,567 ( 0.00%)          if !ctx.hash_spans() {
        .                       return;
        .                   }
        .           
3,181,540 ( 0.02%)          let span = self.data_untracked();
1,275,117 ( 0.01%)          span.ctxt.hash_stable(ctx, hasher);
1,653,903 ( 0.01%)          span.parent.hash_stable(ctx, hasher);
        .           
1,115,221 ( 0.01%)          if span.is_dummy() {
        .                       Hash::hash(&TAG_INVALID_SPAN, hasher);
        .                       return;
        .                   }
        .           
1,077,364 ( 0.01%)          if let Some(parent) = span.parent {
        .                       let def_span = ctx.def_span(parent).data_untracked();
        .                       if def_span.contains(span) {
        .                           // This span is enclosed in a definition: only hash the relative position.
        .                           Hash::hash(&TAG_RELATIVE_SPAN, hasher);
        .                           (span.lo - def_span.lo).to_u32().hash_stable(ctx, hasher);
        .                           (span.hi - def_span.lo).to_u32().hash_stable(ctx, hasher);
        .                           return;
        .                       }
        .                   }
        .           
        .                   // If this is not an empty or invalid span, we want to hash the last
        .                   // position that belongs to it, as opposed to hashing the first
        .                   // position past it.
2,154,728 ( 0.01%)          let (file, line_lo, col_lo, line_hi, col_hi) = match ctx.span_data_to_lines_and_cols(&span)
        .                   {
1,077,364 ( 0.01%)              Some(pos) => pos,
        .                       None => {
        .                           Hash::hash(&TAG_INVALID_SPAN, hasher);
        .                           return;
        .                       }
        .                   };
        .           
        .                   Hash::hash(&TAG_VALID_SPAN, hasher);
        .                   // We truncate the stable ID hash and line and column numbers. The chances
-- line 2129 ----------------------------------------
-- line 2134 ----------------------------------------
        .                   // hash only the length, for example, then two otherwise equal spans with
        .                   // different end locations will have the same hash. This can cause a problem
        .                   // during incremental compilation wherein a previous result for a query that
        .                   // depends on the end location of a span will be incorrectly reused when the
        .                   // end location of the span it depends on has changed (see issue #74890). A
        .                   // similar analysis applies if some query depends specifically on the length
        .                   // of the span, but we only hash the end location. So hash both.
        .           
  538,682 ( 0.00%)          let col_lo_trunc = (col_lo.0 as u64) & 0xFF;
        .                   let line_lo_trunc = ((line_lo as u64) & 0xFF_FF_FF) << 8;
        .                   let col_hi_trunc = (col_hi.0 as u64) & 0xFF << 32;
        .                   let line_hi_trunc = ((line_hi as u64) & 0xFF_FF_FF) << 40;
        .                   let col_line = col_lo_trunc | line_lo_trunc | col_hi_trunc | line_hi_trunc;
  538,682 ( 0.00%)          let len = (span.hi - span.lo).0;
        .                   Hash::hash(&col_line, hasher);
        .                   Hash::hash(&len, hasher);
4,410,408 ( 0.02%)      }
        .           }

9,498,270 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/cmp.rs
--------------------------------------------------------------------------------
Ir                  

-- line 18 ----------------------------------------
         .               fn memcmp(s1: *const u8, s2: *const u8, n: usize) -> i32;
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<A, B> PartialEq<[B]> for [A]
         .           where
         .               A: PartialEq<B>,
         .           {
12,906,626 ( 0.07%)      fn eq(&self, other: &[B]) -> bool {
 4,717,176 ( 0.02%)          SlicePartialEq::equal(self, other)
10,841,962 ( 0.06%)      }
         .           
         .               fn ne(&self, other: &[B]) -> bool {
         .                   SlicePartialEq::not_equal(self, other)
         .               }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T: Eq> Eq for [T] {}
-- line 36 ----------------------------------------
-- line 62 ----------------------------------------
         .           }
         .           
         .           // Generic slice equality
         .           impl<A, B> SlicePartialEq<B> for [A]
         .           where
         .               A: PartialEq<B>,
         .           {
         .               default fn equal(&self, other: &[B]) -> bool {
 4,859,456 ( 0.02%)          if self.len() != other.len() {
         .                       return false;
         .                   }
         .           
   296,228 ( 0.00%)          self.iter().zip(other.iter()).all(|(x, y)| x == y)
         .               }
         .           }
         .           
         .           // Use memcmp for bytewise equality when the types allow
         .           impl<A, B> SlicePartialEq<B> for [A]
         .           where
         .               A: BytewiseEquality<B>,
         .           {
21,227,292 ( 0.11%)      fn equal(&self, other: &[B]) -> bool {
 5,147,893 ( 0.03%)          if self.len() != other.len() {
 2,090,379 ( 0.01%)              return false;
         .                   }
         .           
         .                   // SAFETY: `self` and `other` are references and are thus guaranteed to be valid.
         .                   // The two slices have been checked to have the same size above.
         .                   unsafe {
 1,072,836 ( 0.01%)              let size = mem::size_of_val(self);
 5,353,822 ( 0.03%)              memcmp(self.as_ptr() as *const u8, other.as_ptr() as *const u8, size) == 0
         .                   }
12,061,149 ( 0.06%)      }
         .           }
         .           
         .           #[doc(hidden)]
         .           // intermediate trait for specialization of slice's PartialOrd
         .           trait SlicePartialOrd: Sized {
         .               fn partial_compare(left: &[Self], right: &[Self]) -> Option<Ordering>;
         .           }
         .           
-- line 102 ----------------------------------------
-- line 168 ----------------------------------------
         .               default fn compare(left: &[Self], right: &[Self]) -> Ordering {
         .                   let l = cmp::min(left.len(), right.len());
         .           
         .                   // Slice to the loop iteration range to enable bound check
         .                   // elimination in the compiler
         .                   let lhs = &left[..l];
         .                   let rhs = &right[..l];
         .           
         2 ( 0.00%)          for i in 0..l {
         .                       match lhs[i].cmp(&rhs[i]) {
         .                           Ordering::Equal => (),
         .                           non_eq => return non_eq,
         .                       }
         .                   }
         .           
         .                   left.len().cmp(&right.len())
         .               }
-- line 184 ----------------------------------------
-- line 188 ----------------------------------------
         .           // this matches the order we want for [u8], but no others (not even [i8]).
         .           impl SliceOrd for u8 {
         .               #[inline]
         .               fn compare(left: &[Self], right: &[Self]) -> Ordering {
         .                   let order =
         .                       // SAFETY: `left` and `right` are references and are thus guaranteed to be valid.
         .                       // We use the minimum of both lengths which guarantees that both regions are
         .                       // valid for reads in that interval.
     4,911 ( 0.00%)              unsafe { memcmp(left.as_ptr(), right.as_ptr(), cmp::min(left.len(), right.len())) };
     9,822 ( 0.00%)          if order == 0 {
         .                       left.len().cmp(&right.len())
     3,450 ( 0.00%)          } else if order < 0 {
         .                       Less
         .                   } else {
         .                       Greater
         .                   }
         .               }
         .           }
         .           
         .           // Hack to allow specializing on `Eq` even though `Eq` has a method.
-- line 207 ----------------------------------------
-- line 230 ----------------------------------------
         .           pub(super) trait SliceContains: Sized {
         .               fn slice_contains(&self, x: &[Self]) -> bool;
         .           }
         .           
         .           impl<T> SliceContains for T
         .           where
         .               T: PartialEq,
         .           {
     5,666 ( 0.00%)      default fn slice_contains(&self, x: &[Self]) -> bool {
   208,940 ( 0.00%)          x.iter().any(|y| *y == *self)
     8,499 ( 0.00%)      }
         .           }
         .           
         .           impl SliceContains for u8 {
         .               #[inline]
         .               fn slice_contains(&self, x: &[Self]) -> bool {
         .                   memchr::memchr(*self, x).is_some()
         .               }
         .           }
-- line 248 ----------------------------------------

 9,916,138 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/cmp.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/obligation_forest/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 121 ----------------------------------------
        .           #[derive(Debug)]
        .           pub enum ProcessResult<O, E> {
        .               Unchanged,
        .               Changed(Vec<O>),
        .               Error(E),
        .           }
        .           
        .           #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
  283,024 ( 0.00%)  struct ObligationTreeId(usize);
        .           
        .           type ObligationTreeIdGenerator =
        .               std::iter::Map<std::ops::RangeFrom<usize>, fn(usize) -> ObligationTreeId>;
        .           
        .           pub struct ObligationForest<O: ForestObligation> {
        .               /// The list of obligations. In between calls to `process_obligations`,
        .               /// this list only contains nodes in the `Pending` or `Waiting` state.
        .               ///
-- line 137 ----------------------------------------
-- line 181 ----------------------------------------
        .               has_parent: bool,
        .           
        .               /// Identifier of the obligation tree to which this node belongs.
        .               obligation_tree_id: ObligationTreeId,
        .           }
        .           
        .           impl<O> Node<O> {
        .               fn new(parent: Option<usize>, obligation: O, obligation_tree_id: ObligationTreeId) -> Node<O> {
3,514,992 ( 0.02%)          Node {
        .                       obligation,
        .                       state: Cell::new(NodeState::Pending),
  454,212 ( 0.00%)              dependents: if let Some(parent_index) = parent { vec![parent_index] } else { vec![] },
        .                       has_parent: parent.is_some(),
        .                       obligation_tree_id,
        .                   }
        .               }
        .           }
        .           
        .           /// The state of one node in some tree within the forest. This represents the
        .           /// current state of processing for the obligation (of type `O`) associated
-- line 200 ----------------------------------------
-- line 223 ----------------------------------------
        .           ///  |     compress()
        .           ///  v
        .           /// (Removed)
        .           /// ```
        .           /// The `Error` state can be introduced in several places, via `error_at()`.
        .           ///
        .           /// Outside of `ObligationForest` methods, nodes should be either `Pending` or
        .           /// `Waiting`.
3,047,976 ( 0.02%)  #[derive(Debug, Copy, Clone, PartialEq, Eq)]
        .           enum NodeState {
        .               /// This obligation has not yet been selected successfully. Cannot have
        .               /// subobligations.
        .               Pending,
        .           
        .               /// This obligation was selected successfully, but may or may not have
        .               /// subobligations.
        .               Success,
-- line 239 ----------------------------------------
-- line 279 ----------------------------------------
        .               pub stalled: bool,
        .           }
        .           
        .           impl<O, E> OutcomeTrait for Outcome<O, E> {
        .               type Error = Error<O, E>;
        .               type Obligation = O;
        .           
        .               fn new() -> Self {
  474,448 ( 0.00%)          Self { stalled: true, errors: vec![] }
        .               }
        .           
        .               fn mark_not_stalled(&mut self) {
  217,038 ( 0.00%)          self.stalled = false;
        .               }
        .           
        .               fn is_stalled(&self) -> bool {
   98,968 ( 0.00%)          self.stalled
        .               }
        .           
        .               fn record_completed(&mut self, _outcome: &Self::Obligation) {
        .                   // do nothing
        .               }
        .           
        .               fn record_error(&mut self, error: Self::Error) {
        .                   self.errors.push(error)
-- line 303 ----------------------------------------
-- line 306 ----------------------------------------
        .           
        .           #[derive(Debug, PartialEq, Eq)]
        .           pub struct Error<O, E> {
        .               pub error: E,
        .               pub backtrace: Vec<O>,
        .           }
        .           
        .           impl<O: ForestObligation> ObligationForest<O> {
   58,287 ( 0.00%)      pub fn new() -> ObligationForest<O> {
  699,444 ( 0.00%)          ObligationForest {
        .                       nodes: vec![],
        .                       done_cache: Default::default(),
        .                       active_cache: Default::default(),
        .                       reused_node_vec: vec![],
        .                       obligation_tree_id_generator: (0..).map(ObligationTreeId),
        .                       error_cache: Default::default(),
        .                   }
   58,287 ( 0.00%)      }
        .           
        .               /// Returns the total number of nodes in the forest that have not
        .               /// yet been fully resolved.
        .               pub fn len(&self) -> usize {
        .                   self.nodes.len()
        .               }
        .           
        .               /// Registers an obligation.
        .               pub fn register_obligation(&mut self, obligation: O) {
        .                   // Ignore errors here - there is no guarantee of success.
2,169,011 ( 0.01%)          let _ = self.register_obligation_at(obligation, None);
        .               }
        .           
        .               // Returns Err(()) if we already know this obligation failed.
3,444,430 ( 0.02%)      fn register_obligation_at(&mut self, obligation: O, parent: Option<usize>) -> Result<(), ()> {
  626,260 ( 0.00%)          let cache_key = obligation.as_cache_key();
  626,260 ( 0.00%)          if self.done_cache.contains(&cache_key) {
        .                       debug!("register_obligation_at: ignoring already done obligation: {:?}", obligation);
        .                       return Ok(());
        .                   }
        .           
1,602,864 ( 0.01%)          match self.active_cache.entry(cache_key) {
        .                       Entry::Occupied(o) => {
   94,914 ( 0.00%)                  let node = &mut self.nodes[*o.get()];
   94,914 ( 0.00%)                  if let Some(parent_index) = parent {
        .                               // If the node is already in `active_cache`, it has already
        .                               // had its chance to be marked with a parent. So if it's
        .                               // not already present, just dump `parent` into the
        .                               // dependents as a non-parent.
  108,555 ( 0.00%)                      if !node.dependents.contains(&parent_index) {
        .                                   node.dependents.push(parent_index);
        .                               }
        .                           }
  142,371 ( 0.00%)                  if let NodeState::Error = node.state.get() { Err(()) } else { Ok(()) }
        .                       }
  659,061 ( 0.00%)              Entry::Vacant(v) => {
1,318,122 ( 0.01%)                  let obligation_tree_id = match parent {
  156,350 ( 0.00%)                      Some(parent_index) => self.nodes[parent_index].obligation_tree_id,
        .                               None => self.obligation_tree_id_generator.next().unwrap(),
        .                           };
        .           
        .                           let already_failed = parent.is_some()
        .                               && self
        .                                   .error_cache
        .                                   .get(&obligation_tree_id)
        .                                   .map_or(false, |errors| errors.contains(v.key()));
        .           
        .                           if already_failed {
        .                               Err(())
        .                           } else {
  219,687 ( 0.00%)                      let new_index = self.nodes.len();
        .                               v.insert(new_index);
        .                               self.nodes.push(Node::new(parent, obligation, obligation_tree_id));
        .                               Ok(())
        .                           }
        .                       }
        .                   }
2,818,170 ( 0.01%)      }
        .           
        .               /// Converts all remaining obligations to the given error.
  687,120 ( 0.00%)      pub fn to_errors<E: Clone>(&mut self, error: E) -> Vec<Error<O, E>> {
        .                   let errors = self
        .                       .nodes
        .                       .iter()
        .                       .enumerate()
        .                       .filter(|(_index, node)| node.state.get() == NodeState::Pending)
        .                       .map(|(index, _node)| Error { error: error.clone(), backtrace: self.error_at(index) })
        .                       .collect();
        .           
  196,320 ( 0.00%)          self.compress(|_| assert!(false));
        .                   errors
  588,960 ( 0.00%)      }
        .           
        .               /// Returns the set of obligations that are in a pending state.
        .               pub fn map_pending_obligations<P, F>(&self, f: F) -> Vec<P>
        .               where
        .                   F: Fn(&O) -> P,
        .               {
      524 ( 0.00%)          self.nodes
        .                       .iter()
        .                       .filter(|node| node.state.get() == NodeState::Pending)
        .                       .map(|node| f(&node.obligation))
        .                       .collect()
        .               }
        .           
        .               fn insert_into_error_cache(&mut self, index: usize) {
        .                   let node = &self.nodes[index];
-- line 410 ----------------------------------------
-- line 414 ----------------------------------------
        .                       .insert(node.obligation.as_cache_key());
        .               }
        .           
        .               /// Performs a pass through the obligation list. This must
        .               /// be called in a loop until `outcome.stalled` is false.
        .               ///
        .               /// This _cannot_ be unrolled (presently, at least).
        .               #[inline(never)]
2,135,016 ( 0.01%)      pub fn process_obligations<P, OUT>(&mut self, processor: &mut P) -> OUT
        .               where
        .                   P: ObligationProcessor<Obligation = O>,
        .                   OUT: OutcomeTrait<Obligation = O, Error = Error<O, P::Error>>,
        .               {
        .                   let mut outcome = OUT::new();
        .           
        .                   // Note that the loop body can append new nodes, and those new nodes
        .                   // will then be processed by subsequent iterations of the loop.
        .                   //
        .                   // We can't use an iterator for the loop because `self.nodes` is
        .                   // appended to and the borrow checker would complain. We also can't use
        .                   // `for index in 0..self.nodes.len() { ... }` because the range would
        .                   // be computed with the initial length, and we would miss the appended
        .                   // nodes. Therefore we use a `while` loop.
        .                   let mut index = 0;
1,401,943 ( 0.01%)          while let Some(node) = self.nodes.get_mut(index) {
        .                       // `processor.process_obligation` can modify the predicate within
        .                       // `node.obligation`, and that predicate is the key used for
        .                       // `self.active_cache`. This means that `self.active_cache` can get
        .                       // out of sync with `nodes`. It's not very common, but it does
        .                       // happen, and code in `compress` has to allow for it.
2,329,438 ( 0.01%)              if node.state.get() != NodeState::Pending {
   79,332 ( 0.00%)                  index += 1;
        .                           continue;
        .                       }
        .           
1,223,475 ( 0.01%)              match processor.process_obligation(&mut node.obligation) {
        .                           ProcessResult::Unchanged => {
        .                               // No change in state.
        .                           }
  868,152 ( 0.00%)                  ProcessResult::Changed(children) => {
        .                               // We are not (yet) stalled.
        .                               outcome.mark_not_stalled();
        .                               node.state.set(NodeState::Success);
        .           
1,160,718 ( 0.01%)                      for child in children {
2,486,811 ( 0.01%)                          let st = self.register_obligation_at(child, Some(index));
  292,566 ( 0.00%)                          if let Err(()) = st {
        .                                       // Error already reported - propagate it
        .                                       // to our node.
        .                                       self.error_at(index);
        .                                   }
        .                               }
        .                           }
        .                           ProcessResult::Error(err) => {
        .                               outcome.mark_not_stalled();
        .                               outcome.record_error(Error { error: err, backtrace: self.error_at(index) });
        .                           }
        .                       }
2,170,774 ( 0.01%)              index += 1;
        .                   }
        .           
        .                   // There's no need to perform marking, cycle processing and compression when nothing
        .                   // changed.
   98,968 ( 0.00%)          if !outcome.is_stalled() {
        .                       self.mark_successes();
        .                       self.process_cycles(processor);
   89,058 ( 0.00%)              self.compress(|obl| outcome.record_completed(obl));
        .                   }
        .           
        .                   outcome
2,135,016 ( 0.01%)      }
        .           
        .               /// Returns a vector of obligations for `p` and all of its
        .               /// ancestors, putting them into the error state in the process.
        .               fn error_at(&self, mut index: usize) -> Vec<O> {
        .                   let mut error_stack: Vec<usize> = vec![];
        .                   let mut trace = vec![];
        .           
        .                   loop {
-- line 492 ----------------------------------------
-- line 516 ----------------------------------------
        .                   trace
        .               }
        .           
        .               /// Mark all `Waiting` nodes as `Success`, except those that depend on a
        .               /// pending node.
        .               fn mark_successes(&self) {
        .                   // Convert all `Waiting` nodes to `Success`.
        .                   for node in &self.nodes {
1,063,104 ( 0.01%)              if node.state.get() == NodeState::Waiting {
        .                           node.state.set(NodeState::Success);
        .                       }
        .                   }
        .           
        .                   // Convert `Success` nodes that depend on a pending node back to
        .                   // `Waiting`.
        .                   for node in &self.nodes {
  509,738 ( 0.00%)              if node.state.get() == NodeState::Pending {
        .                           // This call site is hot.
        .                           self.inlined_mark_dependents_as_waiting(node);
        .                       }
        .                   }
        .               }
        .           
        .               // This always-inlined function is for the hot call site.
        .               #[inline(always)]
        .               fn inlined_mark_dependents_as_waiting(&self, node: &Node<O>) {
   37,346 ( 0.00%)          for &index in node.dependents.iter() {
        .                       let node = &self.nodes[index];
   37,346 ( 0.00%)              let state = node.state.get();
   37,346 ( 0.00%)              if state == NodeState::Success {
        .                           // This call site is cold.
   81,585 ( 0.00%)                  self.uninlined_mark_dependents_as_waiting(node);
        .                       } else {
        .                           debug_assert!(state == NodeState::Waiting || state == NodeState::Error)
        .                       }
        .                   }
        .               }
        .           
        .               // This never-inlined function is for the cold call site.
        .               #[inline(never)]
  190,365 ( 0.00%)      fn uninlined_mark_dependents_as_waiting(&self, node: &Node<O>) {
        .                   // Mark node Waiting in the cold uninlined code instead of the hot inlined
        .                   node.state.set(NodeState::Waiting);
        .                   self.inlined_mark_dependents_as_waiting(node)
  217,560 ( 0.00%)      }
        .           
        .               /// Report cycles between all `Success` nodes, and convert all `Success`
        .               /// nodes to `Done`. This must be called after `mark_successes`.
        .               fn process_cycles<P>(&mut self, processor: &mut P)
        .               where
        .                   P: ObligationProcessor<Obligation = O>,
        .               {
   44,529 ( 0.00%)          let mut stack = std::mem::take(&mut self.reused_node_vec);
        .                   for (index, node) in self.nodes.iter().enumerate() {
        .                       // For some benchmarks this state test is extremely hot. It's a win
        .                       // to handle the no-op cases immediately to avoid the cost of the
        .                       // function call.
  509,738 ( 0.00%)              if node.state.get() == NodeState::Success {
1,010,640 ( 0.01%)                  self.find_cycles_from_node(&mut stack, processor, index);
        .                       }
        .                   }
        .           
        .                   debug_assert!(stack.is_empty());
  356,232 ( 0.00%)          self.reused_node_vec = stack;
        .               }
        .           
2,805,048 ( 0.01%)      fn find_cycles_from_node<P>(&self, stack: &mut Vec<usize>, processor: &mut P, index: usize)
        .               where
        .                   P: ObligationProcessor<Obligation = O>,
        .               {
        .                   let node = &self.nodes[index];
  623,344 ( 0.00%)          if node.state.get() == NodeState::Success {
   63,012 ( 0.00%)              match stack.iter().rposition(|&n| n == index) {
        .                           None => {
        .                               stack.push(index);
  109,544 ( 0.00%)                      for &dep_index in node.dependents.iter() {
  438,176 ( 0.00%)                          self.find_cycles_from_node(stack, processor, dep_index);
        .                               }
        .                               stack.pop();
        .                               node.state.set(NodeState::Done);
        .                           }
        .                           Some(rpos) => {
        .                               // Cycle detected.
   20,721 ( 0.00%)                      processor.process_backedge(
        .                                   stack[rpos..].iter().map(|&i| &self.nodes[i].obligation),
        .                                   PhantomData,
        .                               );
        .                           }
        .                       }
        .                   }
2,493,376 ( 0.01%)      }
        .           
        .               /// Compresses the vector, removing all popped nodes. This adjusts the
        .               /// indices and hence invalidates any outstanding indices. `process_cycles`
        .               /// must be run beforehand to remove any cycles on `Success` nodes.
        .               #[inline(never)]
1,043,352 ( 0.01%)      fn compress(&mut self, mut outcome_cb: impl FnMut(&O)) {
  142,689 ( 0.00%)          let orig_nodes_len = self.nodes.len();
        .                   let mut node_rewrites: Vec<_> = std::mem::take(&mut self.reused_node_vec);
        .                   debug_assert!(node_rewrites.is_empty());
        .                   node_rewrites.extend(0..orig_nodes_len);
        .                   let mut dead_nodes = 0;
        .           
        .                   // Move removable nodes to the end, preserving the order of the
        .                   // remaining nodes.
        .                   //
        .                   // LOOP INVARIANT:
        .                   //     self.nodes[0..index - dead_nodes] are the first remaining nodes
        .                   //     self.nodes[index - dead_nodes..index] are all dead
        .                   //     self.nodes[index..] are unchanged
        .                   for index in 0..orig_nodes_len {
        .                       let node = &self.nodes[index];
2,726,806 ( 0.01%)              match node.state.get() {
        .                           NodeState::Pending | NodeState::Waiting => {
  585,400 ( 0.00%)                      if dead_nodes > 0 {
  194,013 ( 0.00%)                          self.nodes.swap(index, index - dead_nodes);
  323,355 ( 0.00%)                          node_rewrites[index] -= dead_nodes;
        .                               }
        .                           }
        .                           NodeState::Done => {
        .                               // This lookup can fail because the contents of
        .                               // `self.active_cache` are not guaranteed to match those of
        .                               // `self.nodes`. See the comment in `process_obligation`
        .                               // for more details.
  806,235 ( 0.00%)                      if let Some((predicate, _)) =
  651,114 ( 0.00%)                          self.active_cache.remove_entry(&node.obligation.as_cache_key())
        .                               {
        .                                   self.done_cache.insert(predicate);
        .                               } else {
        .                                   self.done_cache.insert(node.obligation.as_cache_key().clone());
        .                               }
        .                               // Extract the success stories.
        .                               outcome_cb(&node.obligation);
  434,076 ( 0.00%)                      node_rewrites[index] = orig_nodes_len;
  434,076 ( 0.00%)                      dead_nodes += 1;
        .                           }
        .                           NodeState::Error => {
        .                               // We *intentionally* remove the node from the cache at this point. Otherwise
        .                               // tests must come up with a different type on every type error they
        .                               // check against.
        .                               self.active_cache.remove(&node.obligation.as_cache_key());
        .                               self.insert_into_error_cache(index);
        .                               node_rewrites[index] = orig_nodes_len;
-- line 658 ----------------------------------------
-- line 659 ----------------------------------------
        .                               dead_nodes += 1;
        .                           }
        .                           NodeState::Success => unreachable!(),
        .                       }
        .                   }
        .           
        .                   if dead_nodes > 0 {
        .                       // Remove the dead nodes and rewrite indices.
   87,596 ( 0.00%)              self.nodes.truncate(orig_nodes_len - dead_nodes);
   43,798 ( 0.00%)              self.apply_rewrites(&node_rewrites);
        .                   }
        .           
        .                   node_rewrites.truncate(0);
  570,756 ( 0.00%)          self.reused_node_vec = node_rewrites;
1,141,512 ( 0.01%)      }
        .           
        .               #[inline(never)]
  394,182 ( 0.00%)      fn apply_rewrites(&mut self, node_rewrites: &[usize]) {
        .                   let orig_nodes_len = node_rewrites.len();
        .           
        .                   for node in &mut self.nodes {
        .                       let mut i = 0;
  317,324 ( 0.00%)              while let Some(dependent) = node.dependents.get_mut(i) {
  138,940 ( 0.00%)                  let new_index = node_rewrites[*dependent];
   69,470 ( 0.00%)                  if new_index >= orig_nodes_len {
        .                               node.dependents.swap_remove(i);
        .                               if i == 0 && node.has_parent {
        .                                   // We just removed the parent.
        .                                   node.has_parent = false;
        .                               }
        .                           } else {
   34,735 ( 0.00%)                      *dependent = new_index;
   69,470 ( 0.00%)                      i += 1;
        .                           }
        .                       }
        .                   }
        .           
        .                   // This updating of `self.active_cache` is necessary because the
        .                   // removal of nodes within `compress` can fail. See above.
        .                   self.active_cache.retain(|_predicate, index| {
1,378,024 ( 0.01%)              let new_index = node_rewrites[*index];
  689,012 ( 0.00%)              if new_index >= orig_nodes_len {
        .                           false
        .                       } else {
  282,589 ( 0.00%)                  *index = new_index;
        .                           true
        .                       }
        .                   });
  350,384 ( 0.00%)      }
        .           }

6,132,240 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/obligation_forest/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter.rs
--------------------------------------------------------------------------------
Ir                 

-- line 79 ----------------------------------------
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           unsafe impl<T: Sync> Sync for Iter<'_, T> {}
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           unsafe impl<T: Sync> Send for Iter<'_, T> {}
        .           
        .           impl<'a, T> Iter<'a, T> {
        .               #[inline]
3,203,332 ( 0.02%)      pub(super) fn new(slice: &'a [T]) -> Self {
2,402,499 ( 0.01%)          let ptr = slice.as_ptr();
        .                   // SAFETY: Similar to `IterMut::new`.
        .                   unsafe {
  800,833 ( 0.00%)              assume(!ptr.is_null());
        .           
4,004,165 ( 0.02%)              let end = if mem::size_of::<T>() == 0 {
        .                           (ptr as *const u8).wrapping_add(slice.len()) as *const T
        .                       } else {
  800,833 ( 0.00%)                  ptr.add(slice.len())
        .                       };
        .           
6,183,834 ( 0.03%)              Self { ptr: NonNull::new_unchecked(ptr as *mut T), end, _marker: PhantomData }
        .                   }
3,203,332 ( 0.02%)      }
        .           
        .               /// Views the underlying data as a subslice of the original data.
        .               ///
        .               /// This has the same lifetime as the original slice, and so the
        .               /// iterator can continue to be used while this exists.
        .               ///
        .               /// # Examples
        .               ///
-- line 109 ----------------------------------------
-- line 121 ----------------------------------------
        .               ///
        .               /// // Next, we move to the second element of the slice:
        .               /// iter.next();
        .               /// // Now `as_slice` returns "[2, 3]":
        .               /// println!("{:?}", iter.as_slice());
        .               /// ```
        .               #[must_use]
        .               #[stable(feature = "iter_to_slice", since = "1.4.0")]
  320,536 ( 0.00%)      pub fn as_slice(&self) -> &'a [T] {
2,993,985 ( 0.02%)          self.make_slice()
  160,268 ( 0.00%)      }
        .           }
        .           
        .           iterator! {struct Iter -> *const T, &'a T, const, {/* no mut */}, {
        .               fn is_sorted_by<F>(self, mut compare: F) -> bool
        .               where
        .                   Self: Sized,
        .                   F: FnMut(&Self::Item, &Self::Item) -> Option<Ordering>,
        .               {
-- line 139 ----------------------------------------
-- line 141 ----------------------------------------
        .                       compare(&&w[0], &&w[1]).map(|o| o != Ordering::Greater).unwrap_or(false)
        .                   })
        .               }
        .           }}
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T> Clone for Iter<'_, T> {
        .               fn clone(&self) -> Self {
  397,366 ( 0.00%)          Iter { ptr: self.ptr, end: self.end, _marker: self._marker }
        .               }
        .           }
        .           
        .           #[stable(feature = "slice_iter_as_ref", since = "1.13.0")]
        .           impl<T> AsRef<[T]> for Iter<'_, T> {
        .               fn as_ref(&self) -> &[T] {
        .                   self.as_slice()
        .               }
-- line 157 ----------------------------------------
-- line 199 ----------------------------------------
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           unsafe impl<T: Sync> Sync for IterMut<'_, T> {}
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           unsafe impl<T: Send> Send for IterMut<'_, T> {}
        .           
        .           impl<'a, T> IterMut<'a, T> {
        .               #[inline]
   70,840 ( 0.00%)      pub(super) fn new(slice: &'a mut [T]) -> Self {
   53,130 ( 0.00%)          let ptr = slice.as_mut_ptr();
        .                   // SAFETY: There are several things here:
        .                   //
        .                   // `ptr` has been obtained by `slice.as_ptr()` where `slice` is a valid
        .                   // reference thus it is non-NUL and safe to use and pass to
        .                   // `NonNull::new_unchecked` .
        .                   //
        .                   // Adding `slice.len()` to the starting pointer gives a pointer
        .                   // at the end of `slice`. `end` will never be dereferenced, only checked
-- line 216 ----------------------------------------
-- line 218 ----------------------------------------
        .                   // done.
        .                   //
        .                   // In the case of a ZST, the end pointer is just the start pointer plus
        .                   // the length, to also allows for the fast `ptr == end` check.
        .                   //
        .                   // See the `next_unchecked!` and `is_empty!` macros as well as the
        .                   // `post_inc_start` method for more information.
        .                   unsafe {
   17,710 ( 0.00%)              assume(!ptr.is_null());
        .           
   88,550 ( 0.00%)              let end = if mem::size_of::<T>() == 0 {
        .                           (ptr as *mut u8).wrapping_add(slice.len()) as *mut T
        .                       } else {
   17,710 ( 0.00%)                  ptr.add(slice.len())
        .                       };
        .           
  160,542 ( 0.00%)              Self { ptr: NonNull::new_unchecked(ptr), end, _marker: PhantomData }
        .                   }
   70,840 ( 0.00%)      }
        .           
        .               /// Views the underlying data as a subslice of the original data.
        .               ///
        .               /// To avoid creating `&mut` references that alias, this is forced
        .               /// to consume the iterator.
        .               ///
        .               /// # Examples
        .               ///
-- line 244 ----------------------------------------
-- line 1711 ----------------------------------------
        .               v: &'a [T],
        .               rem: &'a [T],
        .               chunk_size: usize,
        .           }
        .           
        .           impl<'a, T> ChunksExact<'a, T> {
        .               #[inline]
        .               pub(super) fn new(slice: &'a [T], chunk_size: usize) -> Self {
        8 ( 0.00%)          let rem = slice.len() % chunk_size;
       12 ( 0.00%)          let fst_len = slice.len() - rem;
        .                   // SAFETY: 0 <= fst_len <= slice.len() by construction above
        .                   let (fst, snd) = unsafe { slice.split_at_unchecked(fst_len) };
        .                   Self { v: fst, rem: snd, chunk_size }
        .               }
        .           
        .               /// Returns the remainder of the original slice that is not going to be
        .               /// returned by the iterator. The returned slice has at most `chunk_size-1`
        .               /// elements.
-- line 1728 ----------------------------------------
-- line 1742 ----------------------------------------
        .           }
        .           
        .           #[stable(feature = "chunks_exact", since = "1.31.0")]
        .           impl<'a, T> Iterator for ChunksExact<'a, T> {
        .               type Item = &'a [T];
        .           
        .               #[inline]
        .               fn next(&mut self) -> Option<&'a [T]> {
   44,450 ( 0.00%)          if self.v.len() < self.chunk_size {
        .                       None
        .                   } else {
        .                       let (fst, snd) = self.v.split_at(self.chunk_size);
        .                       self.v = snd;
        .                       Some(fst)
        .                   }
        .               }
        .           
-- line 1758 ----------------------------------------
-- line 2024 ----------------------------------------
        .               num: usize,
        .               marker: PhantomData<&'a [T; N]>,
        .           }
        .           
        .           impl<'a, T: 'a, const N: usize> ArrayWindows<'a, T, N> {
        .               #[inline]
        .               pub(super) fn new(slice: &'a [T]) -> Self {
        .                   let num_windows = slice.len().saturating_sub(N - 1);
      116 ( 0.00%)          Self { slice_head: slice.as_ptr(), num: num_windows, marker: PhantomData }
        .               }
        .           }
        .           
        .           #[unstable(feature = "array_windows", issue = "75027")]
        .           impl<'a, T, const N: usize> Iterator for ArrayWindows<'a, T, N> {
        .               type Item = &'a [T; N];
        .           
        .               #[inline]
        .               fn next(&mut self) -> Option<Self::Item> {
  254,012 ( 0.00%)          if self.num == 0 {
        .                       return None;
        .                   }
        .                   // SAFETY:
        .                   // This is safe because it's indexing into a slice guaranteed to be length > N.
        .                   let ret = unsafe { &*self.slice_head.cast::<[T; N]>() };
        .                   // SAFETY: Guaranteed that there are at least 1 item remaining otherwise
        .                   // earlier branch would've been hit
        .                   self.slice_head = unsafe { self.slice_head.add(1) };
-- line 2050 ----------------------------------------

9,091,730 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/unicode/printable.rs
--------------------------------------------------------------------------------
Ir                 

        .           // NOTE: The following code was generated by "src/libcore/unicode/printable.py",
        .           //       do not edit directly!
        .           
1,269,792 ( 0.01%)  fn check(x: u16, singletonuppers: &[(u8, u8)], singletonlowers: &[u8], normal: &[u8]) -> bool {
        .               let xupper = (x >> 8) as u8;
        .               let mut lowerstart = 0;
1,696,800 ( 0.01%)      for &(upper, lowercount) in singletonuppers {
  850,272 ( 0.00%)          let lowerend = lowerstart + lowercount as usize;
1,696,800 ( 0.01%)          if xupper == upper {
        .                       for &lower in &singletonlowers[lowerstart..lowerend] {
1,693,680 ( 0.01%)                  if lower == x as u8 {
        .                               return false;
        .                           }
        .                       }
  425,136 ( 0.00%)          } else if xupper < upper {
        .                       break;
        .                   }
        .                   lowerstart = lowerend;
        .               }
        .           
1,269,792 ( 0.01%)      let mut x = x as i32;
        .               let mut normal = normal.iter().cloned();
        .               let mut current = true;
        .               while let Some(v) = normal.next() {
2,564,908 ( 0.01%)          let len = if v & 0x80 != 0 {
    2,610 ( 0.00%)              ((v & 0x7f) as i32) << 8 | normal.next().unwrap() as i32
        .                   } else {
        .                       v as i32
        .                   };
2,564,908 ( 0.01%)          x -= len;
2,564,908 ( 0.01%)          if x < 0 {
        .                       break;
        .                   }
  859,190 ( 0.00%)          current = !current;
        .               }
        .               current
2,116,320 ( 0.01%)  }
        .           
  423,264 ( 0.00%)  pub(crate) fn is_printable(x: char) -> bool {
        .               let x = x as u32;
        .               let lower = x as u16;
  846,528 ( 0.00%)      if x < 0x10000 {
2,539,584 ( 0.01%)          check(lower, SINGLETONS0U, SINGLETONS0L, NORMAL0)
        .               } else if x < 0x20000 {
        .                   check(lower, SINGLETONS1U, SINGLETONS1L, NORMAL1)
        .               } else {
        .                   if 0x2a6e0 <= x && x < 0x2a700 {
        .                       return false;
        .                   }
        .                   if 0x2b739 <= x && x < 0x2b740 {
        .                       return false;
-- line 51 ----------------------------------------
-- line 65 ----------------------------------------
        .                   if 0x3134b <= x && x < 0xe0100 {
        .                       return false;
        .                   }
        .                   if 0xe01f0 <= x && x < 0x110000 {
        .                       return false;
        .                   }
        .                   true
        .               }
  846,528 ( 0.00%)  }
        .           
        .           #[rustfmt::skip]
        .           const SINGLETONS0U: &[(u8, u8)] = &[
        .               (0x00, 1),
        .               (0x03, 5),
        .               (0x05, 6),
        .               (0x06, 2),
        .               (0x07, 6),
-- line 81 ----------------------------------------

3,824,912 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/unicode/printable.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs
--------------------------------------------------------------------------------
Ir                   

-- line 180 ----------------------------------------
          .           /// assert_eq!(v, &[0.into()]);
          .           ///
          .           /// // Ensure that the last item was dropped.
          .           /// assert!(weak.upgrade().is_none());
          .           /// ```
          .           #[stable(feature = "drop_in_place", since = "1.8.0")]
          .           #[lang = "drop_in_place"]
          .           #[allow(unconditional_recursion)]
234,378,059 ( 1.20%)  pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
          .               // Code here does not matter - this is replaced by the
          .               // real drop glue by the compiler.
          .           
          .               // SAFETY: see comment above
          .               unsafe { drop_in_place(to_drop) }
          .           }
          .           
          .           /// Creates a null raw pointer.
-- line 196 ----------------------------------------
-- line 206 ----------------------------------------
          .           #[inline(always)]
          .           #[must_use]
          .           #[stable(feature = "rust1", since = "1.0.0")]
          .           #[rustc_promotable]
          .           #[rustc_const_stable(feature = "const_ptr_null", since = "1.24.0")]
          .           #[rustc_diagnostic_item = "ptr_null"]
          .           pub const fn null<T>() -> *const T {
          .               0 as *const T
      6,453 ( 0.00%)  }
          .           
          .           /// Creates a null mutable raw pointer.
          .           ///
          .           /// # Examples
          .           ///
          .           /// ```
          .           /// use std::ptr;
          .           ///
-- line 222 ----------------------------------------
-- line 251 ----------------------------------------
          .           /// let x = [5, 6, 7];
          .           /// let raw_pointer = x.as_ptr();
          .           /// let slice = ptr::slice_from_raw_parts(raw_pointer, 3);
          .           /// assert_eq!(unsafe { &*slice }[2], 7);
          .           /// ```
          .           #[inline]
          .           #[stable(feature = "slice_from_raw_parts", since = "1.42.0")]
          .           #[rustc_const_unstable(feature = "const_slice_from_raw_parts", issue = "67456")]
  2,149,080 ( 0.01%)  pub const fn slice_from_raw_parts<T>(data: *const T, len: usize) -> *const [T] {
  2,686,350 ( 0.01%)      from_raw_parts(data.cast(), len)
  1,074,540 ( 0.01%)  }
          .           
          .           /// Performs the same functionality as [`slice_from_raw_parts`], except that a
          .           /// raw mutable slice is returned, as opposed to a raw immutable slice.
          .           ///
          .           /// See the documentation of [`slice_from_raw_parts`] for more details.
          .           ///
          .           /// This function is safe, but actually using the return value is unsafe.
          .           /// See the documentation of [`slice::from_raw_parts_mut`] for slice safety requirements.
-- line 269 ----------------------------------------
-- line 283 ----------------------------------------
          .           ///     (*slice)[2] = 99; // assign a value at an index in the slice
          .           /// };
          .           ///
          .           /// assert_eq!(unsafe { &*slice }[2], 99);
          .           /// ```
          .           #[inline]
          .           #[stable(feature = "slice_from_raw_parts", since = "1.42.0")]
          .           #[rustc_const_unstable(feature = "const_slice_from_raw_parts", issue = "67456")]
  6,843,280 ( 0.04%)  pub const fn slice_from_raw_parts_mut<T>(data: *mut T, len: usize) -> *mut [T] {
  2,566,230 ( 0.01%)      from_raw_parts_mut(data.cast(), len)
  1,710,820 ( 0.01%)  }
          .           
          .           /// Swaps the values at two mutable locations of the same type, without
          .           /// deinitializing either.
          .           ///
          .           /// But for the following two exceptions, this function is semantically
          .           /// equivalent to [`mem::swap`]:
          .           ///
          .           /// * It operates on raw pointers instead of references. When references are
-- line 301 ----------------------------------------
-- line 366 ----------------------------------------
          .               let mut tmp = MaybeUninit::<T>::uninit();
          .           
          .               // Perform the swap
          .               // SAFETY: the caller must guarantee that `x` and `y` are
          .               // valid for writes and properly aligned. `tmp` cannot be
          .               // overlapping either `x` or `y` because `tmp` was just allocated
          .               // on the stack as a separate allocated object.
          .               unsafe {
        898 ( 0.00%)          copy_nonoverlapping(x, tmp.as_mut_ptr(), 1);
        898 ( 0.00%)          copy(y, x, 1); // `x` and `y` may overlap
          .                   copy_nonoverlapping(tmp.as_ptr(), y, 1);
          .               }
          .           }
          .           
          .           /// Swaps `count * size_of::<T>()` bytes between the two regions of memory
          .           /// beginning at `x` and `y`. The two regions must *not* overlap.
          .           ///
          .           /// # Safety
-- line 383 ----------------------------------------
-- line 448 ----------------------------------------
          .                       return;
          .                   }
          .               }
          .           
          .               // Direct swapping, for the cases not going through the block optimization.
          .               // SAFETY: the caller must guarantee that `x` and `y` are valid
          .               // for writes, properly aligned, and non-overlapping.
          .               unsafe {
         17 ( 0.00%)          let z = read(x);
          .                   copy_nonoverlapping(y, x, 1);
          .                   write(y, z);
          .               }
          .           }
          .           
          .           #[inline]
          .           #[rustc_const_unstable(feature = "const_swap", issue = "83163")]
          .           const unsafe fn swap_nonoverlapping_bytes(x: *mut u8, y: *mut u8, len: usize) {
-- line 464 ----------------------------------------
-- line 677 ----------------------------------------
          .           ///
          .           /// assert_eq!(s, "bar");
          .           /// ```
          .           ///
          .           /// [valid]: self#safety
          .           #[inline]
          .           #[stable(feature = "rust1", since = "1.0.0")]
          .           #[rustc_const_unstable(feature = "const_ptr_read", issue = "80377")]
  4,992,714 ( 0.03%)  pub const unsafe fn read<T>(src: *const T) -> T {
          .               // We are calling the intrinsics directly to avoid function calls in the generated code
          .               // as `intrinsics::copy_nonoverlapping` is a wrapper function.
          .               extern "rust-intrinsic" {
          .                   #[rustc_const_unstable(feature = "const_intrinsic_copy", issue = "80697")]
          .                   fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize);
          .               }
          .           
  2,384,070 ( 0.01%)      let mut tmp = MaybeUninit::<T>::uninit();
          .               // SAFETY: the caller must guarantee that `src` is valid for reads.
          .               // `src` cannot overlap `tmp` because `tmp` was just allocated on
          .               // the stack as a separate allocated object.
          .               //
          .               // Also, since we just wrote a valid value into `tmp`, it is guaranteed
          .               // to be properly initialized.
          .               unsafe {
 18,789,796 ( 0.10%)          copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);
 74,312,972 ( 0.38%)          tmp.assume_init()
          .               }
  3,221,052 ( 0.02%)  }
          .           
          .           /// Reads the value from `src` without moving it. This leaves the
          .           /// memory in `src` unchanged.
          .           ///
          .           /// Unlike [`read`], `read_unaligned` works with unaligned pointers.
          .           ///
          .           /// # Safety
          .           ///
-- line 712 ----------------------------------------
-- line 872 ----------------------------------------
          .           /// swap(&mut foo, &mut bar);
          .           ///
          .           /// assert_eq!(foo, "bar");
          .           /// assert_eq!(bar, "foo");
          .           /// ```
          .           #[inline]
          .           #[stable(feature = "rust1", since = "1.0.0")]
          .           #[rustc_const_unstable(feature = "const_ptr_write", issue = "86302")]
  5,292,408 ( 0.03%)  pub const unsafe fn write<T>(dst: *mut T, src: T) {
          .               // We are calling the intrinsics directly to avoid function calls in the generated code
          .               // as `intrinsics::copy_nonoverlapping` is a wrapper function.
          .               extern "rust-intrinsic" {
          .                   #[rustc_const_unstable(feature = "const_intrinsic_copy", issue = "80697")]
          .                   fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize);
          .               }
          .           
          .               // SAFETY: the caller must guarantee that `dst` is valid for writes.
          .               // `dst` cannot overlap `src` because the caller has mutable access
          .               // to `dst` while `src` is owned by this function.
          .               unsafe {
211,778,474 ( 1.09%)          copy_nonoverlapping(&src as *const T, dst, 1);
          .                   intrinsics::forget(src);
          .               }
  2,762,348 ( 0.01%)  }
          .           
          .           /// Overwrites a memory location with the given value without reading or
          .           /// dropping the old value.
          .           ///
          .           /// Unlike [`write()`], the pointer may be unaligned.
          .           ///
          .           /// `write_unaligned` does not drop the contents of `dst`. This is safe, but it
          .           /// could leak allocations or resources, so care should be taken not to overwrite
-- line 903 ----------------------------------------
-- line 1206 ----------------------------------------
          .               if stride == 1 {
          .                   // `stride == 1` case can be computed more simply through `-p (mod a)`, but doing so
          .                   // inhibits LLVM's ability to select instructions like `lea`. Instead we compute
          .                   //
          .                   //    round_up_to_next_alignment(p, a) - p
          .                   //
          .                   // which distributes operations around the load-bearing, but pessimizing `and` sufficiently
          .                   // for LLVM to be able to utilize the various optimizations it knows about.
     17,582 ( 0.00%)          return wrapping_sub(
     48,594 ( 0.00%)              wrapping_add(p as usize, a_minus_one) & wrapping_sub(0, a),
          .                       p as usize,
          .                   );
          .               }
          .           
          .               let pmoda = p as usize & a_minus_one;
          .               if pmoda == 0 {
          .                   // Already aligned. Yay!
          .                   return 0;
-- line 1223 ----------------------------------------
-- line 1348 ----------------------------------------
          .           /// assert!(std::ptr::eq(
          .           ///     &wrapper as &dyn Trait as *const dyn Trait as *const u8,
          .           ///     &wrapper.member as &dyn Trait as *const dyn Trait as *const u8,
          .           /// ));
          .           /// ```
          .           #[stable(feature = "ptr_eq", since = "1.17.0")]
          .           #[inline]
          .           pub fn eq<T: ?Sized>(a: *const T, b: *const T) -> bool {
 11,015,875 ( 0.06%)      a == b
          .           }
          .           
          .           /// Hash a raw pointer.
          .           ///
          .           /// This can be used to hash a `&T` reference (which coerces to `*const T` implicitly)
          .           /// by its address rather than the value it points to
          .           /// (which is what the `Hash for &T` implementation does).
          .           ///
-- line 1364 ----------------------------------------

 43,697,140 ( 0.22%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/client.rs
--------------------------------------------------------------------------------
Ir                  

-- line 18 ----------------------------------------
         .                       // FIXME(eddyb) use a reference to the `static COUNTERS`, instead of
         .                       // a wrapper `fn` pointer, once `const fn` can reference `static`s.
         .                       extern "C" fn get() -> &'static Self {
         .                           static COUNTERS: HandleCounters = HandleCounters {
         .                               $($oty: AtomicUsize::new(1),)*
         .                               $($ity: AtomicUsize::new(1),)*
         .                           };
         .                           &COUNTERS
         4 ( 0.00%)              }
         .                   }
         .           
         .                   // FIXME(eddyb) generate the definition of `HandleStore` in `server.rs`.
         .                   #[repr(C)]
         .                   #[allow(non_snake_case)]
         .                   pub(super) struct HandleStore<S: server::Types> {
         .                       $($oty: handle::OwnedStore<S::$oty>,)*
         .                       $($ity: handle::InternedStore<S::$ity>,)*
         .                   }
         .           
         .                   impl<S: server::Types> HandleStore<S> {
        12 ( 0.00%)              pub(super) fn new(handle_counters: &'static HandleCounters) -> Self {
       118 ( 0.00%)                  HandleStore {
         .                               $($oty: handle::OwnedStore::new(&handle_counters.$oty),)*
         .                               $($ity: handle::InternedStore::new(&handle_counters.$ity),)*
         .                           }
        16 ( 0.00%)              }
         .                   }
         .           
         .                   $(
         .                       #[repr(C)]
         .                       pub(crate) struct $oty(handle::Handle);
         .                       impl !Send for $oty {}
         .                       impl !Sync for $oty {}
         .           
         .                       // Forward `Drop::drop` to the inherent `drop` method.
         .                       impl Drop for $oty {
    14,100 ( 0.00%)                  fn drop(&mut self) {
   346,375 ( 0.00%)                      $oty(self.0).drop();
    21,150 ( 0.00%)                  }
         .                       }
         .           
         .                       impl<S> Encode<S> for $oty {
        16 ( 0.00%)                  fn encode(self, w: &mut Writer, s: &mut S) {
         6 ( 0.00%)                      let handle = self.0;
         8 ( 0.00%)                      mem::forget(self);
         2 ( 0.00%)                      handle.encode(w, s);
         4 ( 0.00%)                  }
         .                       }
         .           
         .                       impl<S: server::Types> DecodeMut<'_, '_, HandleStore<server::MarkedTypes<S>>>
         .                           for Marked<S::$oty, $oty>
         .                       {
 1,301,637 ( 0.01%)                  fn decode(r: &mut Reader<'_>, s: &mut HandleStore<server::MarkedTypes<S>>) -> Self {
         .                               s.$oty.take(handle::Handle::decode(r, &mut ()))
 1,735,516 ( 0.01%)                  }
         .                       }
         .           
         .                       impl<S> Encode<S> for &$oty {
         .                           fn encode(self, w: &mut Writer, s: &mut S) {
 1,242,969 ( 0.01%)                      self.0.encode(w, s);
         .                           }
         .                       }
         .           
         .                       impl<'s, S: server::Types> Decode<'_, 's, HandleStore<server::MarkedTypes<S>>>
         .                           for &'s Marked<S::$oty, $oty>
         .                       {
   414,323 ( 0.00%)                  fn decode(r: &mut Reader<'_>, s: &'s HandleStore<server::MarkedTypes<S>>) -> Self {
         .                               &s.$oty[handle::Handle::decode(r, &mut ())]
   828,646 ( 0.00%)                  }
         .                       }
         .           
         .                       impl<S> Encode<S> for &mut $oty {
         .                           fn encode(self, w: &mut Writer, s: &mut S) {
   558,564 ( 0.00%)                      self.0.encode(w, s);
         .                           }
         .                       }
         .           
         .                       impl<'s, S: server::Types> DecodeMut<'_, 's, HandleStore<server::MarkedTypes<S>>>
         .                           for &'s mut Marked<S::$oty, $oty>
         .                       {
   186,188 ( 0.00%)                  fn decode(
         .                               r: &mut Reader<'_>,
         .                               s: &'s mut HandleStore<server::MarkedTypes<S>>
         .                           ) -> Self {
         .                               &mut s.$oty[handle::Handle::decode(r, &mut ())]
   372,376 ( 0.00%)                  }
         .                       }
         .           
         .                       impl<S: server::Types> Encode<HandleStore<server::MarkedTypes<S>>>
         .                           for Marked<S::$oty, $oty>
         .                       {
 2,314,284 ( 0.01%)                  fn encode(self, w: &mut Writer, s: &mut HandleStore<server::MarkedTypes<S>>) {
   209,440 ( 0.00%)                      s.$oty.alloc(self).encode(w, s);
         .                           }
         .                       }
         .           
         .                       impl<S> DecodeMut<'_, '_, S> for $oty {
        12 ( 0.00%)                  fn decode(r: &mut Reader<'_>, s: &mut S) -> Self {
        12 ( 0.00%)                      $oty(handle::Handle::decode(r, s))
        12 ( 0.00%)                  }
         .                       }
         .                   )*
         .           
         .                   $(
         .                       #[repr(C)]
 2,261,217 ( 0.01%)              #[derive(Copy, Clone, PartialEq, Eq, Hash)]
         .                       pub(crate) struct $ity(handle::Handle);
         .                       impl !Send for $ity {}
         .                       impl !Sync for $ity {}
         .           
         .                       impl<S> Encode<S> for $ity {
         .                           fn encode(self, w: &mut Writer, s: &mut S) {
         .                               self.0.encode(w, s);
         .                           }
         .                       }
         .           
         .                       impl<S: server::Types> DecodeMut<'_, '_, HandleStore<server::MarkedTypes<S>>>
         .                           for Marked<S::$ity, $ity>
         .                       {
   296,433 ( 0.00%)                  fn decode(r: &mut Reader<'_>, s: &mut HandleStore<server::MarkedTypes<S>>) -> Self {
         .                               s.$ity.copy(handle::Handle::decode(r, &mut ()))
   592,866 ( 0.00%)                  }
         .                       }
         .           
         .                       impl<S: server::Types> Encode<HandleStore<server::MarkedTypes<S>>>
         .                           for Marked<S::$ity, $ity>
         .                       {
         .                           fn encode(self, w: &mut Writer, s: &mut HandleStore<server::MarkedTypes<S>>) {
 2,113,224 ( 0.01%)                      s.$ity.alloc(self).encode(w, s);
         .                           }
         .                       }
         .           
         .                       impl<S> DecodeMut<'_, '_, S> for $ity {
         .                           fn decode(r: &mut Reader<'_>, s: &mut S) -> Self {
         .                               $ity(handle::Handle::decode(r, s))
         .                           }
         .                       }
-- line 154 ----------------------------------------
-- line 175 ----------------------------------------
         .           
         .           // FIXME(eddyb) generate these impls by pattern-matching on the
         .           // names of methods - also could use the presence of `fn drop`
         .           // to distinguish between 'owned and 'interned, above.
         .           // Alternatively, special 'modes" could be listed of types in with_api
         .           // instead of pattern matching on methods, here and in server decl.
         .           
         .           impl Clone for TokenStream {
     5,508 ( 0.00%)      fn clone(&self) -> Self {
         .                   self.clone()
     5,508 ( 0.00%)      }
         .           }
         .           
         .           impl Clone for TokenStreamIter {
         .               fn clone(&self) -> Self {
         .                   self.clone()
         .               }
         .           }
         .           
         .           impl Clone for Group {
     2,943 ( 0.00%)      fn clone(&self) -> Self {
         .                   self.clone()
     2,943 ( 0.00%)      }
         .           }
         .           
         .           impl Clone for Literal {
    15,465 ( 0.00%)      fn clone(&self) -> Self {
         .                   self.clone()
    15,465 ( 0.00%)      }
         .           }
         .           
         .           impl fmt::Debug for Literal {
         .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
         .                   f.debug_struct("Literal")
         .                       // format the kind without quotes, as in `kind: Float`
         .                       .field("kind", &format_args!("{}", &self.debug_kind()))
         .                       .field("symbol", &self.symbol())
-- line 211 ----------------------------------------
-- line 228 ----------------------------------------
         .               }
         .           }
         .           
         .           macro_rules! define_client_side {
         .               ($($name:ident {
         .                   $(fn $method:ident($($arg:ident: $arg_ty:ty),* $(,)?) $(-> $ret_ty:ty)*;)*
         .               }),* $(,)?) => {
         .                   $(impl $name {
   599,124 ( 0.00%)              $(pub(crate) fn $method($($arg: $arg_ty),*) $(-> $ret_ty)* {
   306,857 ( 0.00%)                  Bridge::with(|bridge| {
         .                               let mut b = bridge.cached_buffer.take();
         .           
         .                               b.clear();
 5,345,784 ( 0.03%)                      api_tags::Method::$name(api_tags::$name::$method).encode(&mut b, &mut ());
 1,050,820 ( 0.01%)                      reverse_encode!(b; $($arg),*);
         .           
10,691,568 ( 0.05%)                      b = bridge.dispatch.call(b);
         .           
 7,571,658 ( 0.04%)                      let r = Result::<_, PanicMessage>::decode(&mut &b[..], &mut ());
         .           
21,383,136 ( 0.11%)                      bridge.cached_buffer = b;
         .           
 2,882,547 ( 0.01%)                      r.unwrap_or_else(|e| panic::resume_unwind(e.into()))
         .                           })
   499,270 ( 0.00%)              })*
         .                   })*
         .               }
         .           }
         .           with_api!(self, self, define_client_side);
         .           
         .           enum BridgeState<'a> {
         .               /// No server is currently connected to this client.
         .               NotConnected,
-- line 260 ----------------------------------------
-- line 270 ----------------------------------------
         .           enum BridgeStateL {}
         .           
         .           impl<'a> scoped_cell::ApplyL<'a> for BridgeStateL {
         .               type Out = BridgeState<'a>;
         .           }
         .           
         .           thread_local! {
         .               static BRIDGE_STATE: scoped_cell::ScopedCell<BridgeStateL> =
         3 ( 0.00%)          scoped_cell::ScopedCell::new(BridgeState::NotConnected);
         .           }
         .           
         .           impl BridgeState<'_> {
         .               /// Take exclusive control of the thread-local
         .               /// `BridgeState`, and pass it to `f`, mutably.
         .               /// The state will be restored after `f` exits, even
         .               /// by panic, including modifications made to it by `f`.
         .               ///
         .               /// N.B., while `f` is running, the thread-local state
         .               /// is `BridgeState::InUse`.
 1,712,570 ( 0.01%)      fn with<R>(f: impl FnOnce(&mut BridgeState<'_>) -> R) -> R {
 2,025,331 ( 0.01%)          BRIDGE_STATE.with(|state| {
 9,367,082 ( 0.05%)              state.replace(BridgeState::InUse, |mut state| {
         .                           // FIXME(#52812) pass `f` directly to `replace` when `RefMutL` is gone
        48 ( 0.00%)                  f(&mut *state)
         8 ( 0.00%)              })
         8 ( 0.00%)          })
 1,380,293 ( 0.01%)      }
         .           }
         .           
         .           impl Bridge<'_> {
         .               pub(crate) fn is_available() -> bool {
         3 ( 0.00%)          BridgeState::with(|state| match state {
         .                       BridgeState::Connected(_) | BridgeState::InUse => true,
         .                       BridgeState::NotConnected => false,
         .                   })
         .               }
         .           
        12 ( 0.00%)      fn enter<R>(self, f: impl FnOnce() -> R) -> R {
        14 ( 0.00%)          let force_show_panics = self.force_show_panics;
         .                   // Hide the default panic output within `proc_macro` expansions.
         .                   // NB. the server can't do this because it may use a different libstd.
         .                   static HIDE_PANICS_DURING_EXPANSION: Once = Once::new();
        12 ( 0.00%)          HIDE_PANICS_DURING_EXPANSION.call_once(|| {
         7 ( 0.00%)              panic::update_hook(move |prev, info| {
         .                           let show = BridgeState::with(|state| match state {
         .                               BridgeState::NotConnected => true,
         .                               BridgeState::Connected(_) | BridgeState::InUse => force_show_panics,
         .                           });
         .                           if show {
         .                               prev(info)
         .                           }
         .                       });
         2 ( 0.00%)          });
         .           
        74 ( 0.00%)          BRIDGE_STATE.with(|state| state.set(BridgeState::Connected(self), f))
         4 ( 0.00%)      }
         .           
        10 ( 0.00%)      fn with<R>(f: impl FnOnce(&mut Bridge<'_>) -> R) -> R {
12,805,861 ( 0.07%)          BridgeState::with(|state| match state {
         .                       BridgeState::NotConnected => {
         .                           panic!("procedural macro API is used outside of a procedural macro");
         .                       }
         .                       BridgeState::InUse => {
         .                           panic!("procedural macro API is used while it's already in use");
         .                       }
        26 ( 0.00%)              BridgeState::Connected(bridge) => f(bridge),
         8 ( 0.00%)          })
         8 ( 0.00%)      }
         .           }
         .           
         .           /// A client-side "global object" (usually a function pointer),
         .           /// which may be using a different `proc_macro` from the one
         .           /// used by the server, but can be interacted with compatibly.
         .           ///
         .           /// N.B., `F` must have FFI-friendly memory layout (e.g., a pointer).
         .           /// The call ABI of function pointers used for `F` doesn't
-- line 345 ----------------------------------------
-- line 353 ----------------------------------------
         .               pub(super) get_handle_counters: extern "C" fn() -> &'static HandleCounters,
         .               pub(super) run: extern "C" fn(Bridge<'_>, F) -> Buffer<u8>,
         .               pub(super) f: F,
         .           }
         .           
         .           /// Client-side helper for handling client panics, entering the bridge,
         .           /// deserializing input and serializing output.
         .           // FIXME(eddyb) maybe replace `Bridge::enter` with this?
        14 ( 0.00%)  fn run_client<A: for<'a, 's> DecodeMut<'a, 's, ()>, R: Encode<()>>(
         .               mut bridge: Bridge<'_>,
         .               f: impl FnOnce(A) -> R,
         .           ) -> Buffer<u8> {
         .               // The initial `cached_buffer` contains the input.
        12 ( 0.00%)      let mut b = bridge.cached_buffer.take();
         .           
        72 ( 0.00%)      panic::catch_unwind(panic::AssertUnwindSafe(|| {
        30 ( 0.00%)          bridge.enter(|| {
        38 ( 0.00%)              let reader = &mut &b[..];
        14 ( 0.00%)              let input = A::decode(reader, &mut ());
         .           
         .                       // Put the `cached_buffer` back in the `Bridge`, for requests.
        40 ( 0.00%)              Bridge::with(|bridge| bridge.cached_buffer = b.take());
         .           
        32 ( 0.00%)              let output = f(input);
         .           
         .                       // Take the `cached_buffer` back out, for the output value.
        38 ( 0.00%)              b = Bridge::with(|bridge| bridge.cached_buffer.take());
         .           
         .                       // HACK(eddyb) Separate encoding a success value (`Ok(output)`)
         .                       // from encoding a panic (`Err(e: PanicMessage)`) to avoid
         .                       // having handles outside the `bridge.enter(|| ...)` scope, and
         .                       // to catch panics that could happen while encoding the success.
         .                       //
         .                       // Note that panics should be impossible beyond this point, but
         .                       // this is defensively trying to avoid any accidental panicking
         .                       // reaching the `extern "C"` (which should `abort` but might not
         .                       // at the moment, so this is also potentially preventing UB).
         6 ( 0.00%)              b.clear();
        20 ( 0.00%)              Ok::<_, ()>(output).encode(&mut b, &mut ());
         8 ( 0.00%)          })
         4 ( 0.00%)      }))
         .               .map_err(PanicMessage::from)
         2 ( 0.00%)      .unwrap_or_else(|e| {
         .                   b.clear();
         .                   Err::<(), _>(e).encode(&mut b, &mut ());
         .               });
         .               b
         4 ( 0.00%)  }
         .           
         .           impl Client<fn(crate::TokenStream) -> crate::TokenStream> {
         .               #[rustc_allow_const_fn_unstable(const_fn)]
         1 ( 0.00%)      pub const fn expand1(f: fn(crate::TokenStream) -> crate::TokenStream) -> Self {
         .                   extern "C" fn run(
         .                       bridge: Bridge<'_>,
         .                       f: impl FnOnce(crate::TokenStream) -> crate::TokenStream,
         .                   ) -> Buffer<u8> {
         .                       run_client(bridge, |input| f(crate::TokenStream(input)).0)
         .                   }
         5 ( 0.00%)          Client { get_handle_counters: HandleCounters::get, run, f }
         1 ( 0.00%)      }
         .           }
         .           
         .           impl Client<fn(crate::TokenStream, crate::TokenStream) -> crate::TokenStream> {
         .               #[rustc_allow_const_fn_unstable(const_fn)]
         .               pub const fn expand2(
         .                   f: fn(crate::TokenStream, crate::TokenStream) -> crate::TokenStream,
         .               ) -> Self {
        14 ( 0.00%)          extern "C" fn run(
         .                       bridge: Bridge<'_>,
         .                       f: impl FnOnce(crate::TokenStream, crate::TokenStream) -> crate::TokenStream,
         .                   ) -> Buffer<u8> {
        36 ( 0.00%)              run_client(bridge, |(input, input2)| {
        40 ( 0.00%)                  f(crate::TokenStream(input), crate::TokenStream(input2)).0
         6 ( 0.00%)              })
         4 ( 0.00%)          }
         .                   Client { get_handle_counters: HandleCounters::get, run, f }
         .               }
         .           }
         .           
         .           #[repr(C)]
         .           #[derive(Copy, Clone)]
         .           pub enum ProcMacro {
         .               CustomDerive {
-- line 435 ----------------------------------------

 4,952,761 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/client.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/node.rs
--------------------------------------------------------------------------------
Ir                  

-- line 221 ----------------------------------------
         .                   NodeRef { height: 0, node: NonNull::from(Box::leak(leaf)), _marker: PhantomData }
         .               }
         .           }
         .           
         .           impl<K, V> NodeRef<marker::Owned, K, V, marker::Internal> {
         .               fn new_internal(child: Root<K, V>) -> Self {
         .                   let mut new_node = unsafe { InternalNode::new() };
         .                   new_node.edges[0].write(child.node);
     6,292 ( 0.00%)          unsafe { NodeRef::from_new_internal(new_node, child.height + 1) }
         .               }
         .           
         .               /// # Safety
         .               /// `height` must not be zero.
         .               unsafe fn from_new_internal(internal: Box<InternalNode<K, V>>, height: usize) -> Self {
         .                   debug_assert!(height > 0);
         .                   let node = NonNull::from(Box::leak(internal)).cast();
         .                   let mut this = NodeRef { height, node, _marker: PhantomData };
-- line 237 ----------------------------------------
-- line 269 ----------------------------------------
         .           impl<BorrowType, K, V, Type> NodeRef<BorrowType, K, V, Type> {
         .               /// Finds the length of the node. This is the number of keys or values.
         .               /// The number of edges is `len() + 1`.
         .               /// Note that, despite being safe, calling this function can have the side effect
         .               /// of invalidating mutable references that unsafe code has created.
         .               pub fn len(&self) -> usize {
         .                   // Crucially, we only access the `len` field here. If BorrowType is marker::ValMut,
         .                   // there might be outstanding mutable references to values that we must not invalidate.
 1,403,856 ( 0.01%)          unsafe { usize::from((*Self::as_leaf_ptr(self)).len) }
         .               }
         .           
         .               /// Returns the number of levels that the node and leaves are apart. Zero
         .               /// height means the node is a leaf itself. If you picture trees with the
         .               /// root on top, the number says at which elevation the node appears.
         .               /// If you picture trees with leaves on top, the number says how high
         .               /// the tree extends above the node.
         .               pub fn height(&self) -> usize {
         .                   self.height
         .               }
         .           
         .               /// Temporarily takes out another, immutable reference to the same node.
         .               pub fn reborrow(&self) -> NodeRef<marker::Immut<'_>, K, V, Type> {
 3,294,616 ( 0.02%)          NodeRef { height: self.height, node: self.node, _marker: PhantomData }
         .               }
         .           
         .               /// Exposes the leaf portion of any leaf or internal node.
         .               ///
         .               /// Returns a raw ptr to avoid invalidating other references to this node.
         .               fn as_leaf_ptr(this: &Self) -> *mut LeafNode<K, V> {
         .                   // The node must be valid for at least the LeafNode portion.
         .                   // This is not a reference in the NodeRef type because we don't know if
-- line 299 ----------------------------------------
-- line 314 ----------------------------------------
         .               /// both, upon success, do nothing.
         .               pub fn ascend(
         .                   self,
         .               ) -> Result<Handle<NodeRef<BorrowType, K, V, marker::Internal>, marker::Edge>, Self> {
         .                   assert!(BorrowType::PERMITS_TRAVERSAL);
         .                   // We need to use raw pointers to nodes because, if BorrowType is marker::ValMut,
         .                   // there might be outstanding mutable references to values that we must not invalidate.
         .                   let leaf_ptr: *const _ = Self::as_leaf_ptr(&self);
   593,443 ( 0.00%)          unsafe { (*leaf_ptr).parent }
         .                       .as_ref()
         .                       .map(|parent| Handle {
 1,096,238 ( 0.01%)                  node: NodeRef::from_internal(*parent, self.height + 1),
   367,848 ( 0.00%)                  idx: unsafe { usize::from((*leaf_ptr).parent_idx.assume_init()) },
         .                           _marker: PhantomData,
         .                       })
         .                       .ok_or(self)
         .               }
         .           
         .               pub fn first_edge(self) -> Handle<Self, marker::Edge> {
         .                   unsafe { Handle::new_edge(self, 0) }
         .               }
-- line 334 ----------------------------------------
-- line 373 ----------------------------------------
         .                   // SAFETY: there can be no mutable references into this tree borrowed as `Immut`.
         .                   unsafe { &*ptr }
         .               }
         .           
         .               /// Borrows a view into the keys stored in the node.
         .               pub fn keys(&self) -> &[K] {
         .                   let leaf = self.into_leaf();
         .                   unsafe {
 9,013,725 ( 0.05%)              MaybeUninit::slice_assume_init_ref(leaf.keys.get_unchecked(..usize::from(leaf.len)))
         .                   }
         .               }
         .           }
         .           
         .           impl<K, V> NodeRef<marker::Dying, K, V, marker::LeafOrInternal> {
         .               /// Similar to `ascend`, gets a reference to a node's parent node, but also
         .               /// deallocates the current node in the process. This is unsafe because the
         .               /// current node will still be accessible despite being deallocated.
-- line 389 ----------------------------------------
-- line 391 ----------------------------------------
         .                   self,
         .               ) -> Option<Handle<NodeRef<marker::Dying, K, V, marker::Internal>, marker::Edge>> {
         .                   let height = self.height;
         .                   let node = self.node;
         .                   let ret = self.ascend().ok();
         .                   unsafe {
         .                       Global.deallocate(
         .                           node.cast(),
   247,575 ( 0.00%)                  if height > 0 {
         .                               Layout::new::<InternalNode<K, V>>()
         .                           } else {
         .                               Layout::new::<LeafNode<K, V>>()
         .                           },
         .                       );
         .                   }
         .                   ret
         .               }
-- line 407 ----------------------------------------
-- line 435 ----------------------------------------
         .                   // SAFETY: we have exclusive access to the entire node.
         .                   unsafe { &mut *ptr }
         .               }
         .           }
         .           
         .           impl<K, V, Type> NodeRef<marker::Dying, K, V, Type> {
         .               /// Borrows exclusive access to the leaf portion of a dying leaf or internal node.
         .               fn as_leaf_dying(&mut self) -> &mut LeafNode<K, V> {
         5 ( 0.00%)          let ptr = Self::as_leaf_ptr(self);
         .                   // SAFETY: we have exclusive access to the entire node.
         .                   unsafe { &mut *ptr }
         .               }
         .           }
         .           
         .           impl<'a, K: 'a, V: 'a, Type> NodeRef<marker::Mut<'a>, K, V, Type> {
         .               /// Borrows exclusive access to an element of the key storage area.
         .               ///
-- line 451 ----------------------------------------
-- line 467 ----------------------------------------
         .               /// `index` is in bounds of 0..CAPACITY
         .               unsafe fn val_area_mut<I, Output: ?Sized>(&mut self, index: I) -> &mut Output
         .               where
         .                   I: SliceIndex<[MaybeUninit<V>], Output = Output>,
         .               {
         .                   // SAFETY: the caller will not be able to call further methods on self
         .                   // until the value slice reference is dropped, as we have unique access
         .                   // for the lifetime of the borrow.
   854,335 ( 0.00%)          unsafe { self.as_leaf_mut().vals.as_mut_slice().get_unchecked_mut(index) }
         .               }
         .           }
         .           
         .           impl<'a, K: 'a, V: 'a> NodeRef<marker::Mut<'a>, K, V, marker::Internal> {
         .               /// Borrows exclusive access to an element or slice of the node's storage area for edge contents.
         .               ///
         .               /// # Safety
         .               /// `index` is in bounds of 0..CAPACITY + 1
-- line 483 ----------------------------------------
-- line 534 ----------------------------------------
         .               }
         .           }
         .           
         .           impl<'a, K: 'a, V: 'a> NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal> {
         .               /// Sets the node's link to its parent edge,
         .               /// without invalidating other references to the node.
         .               fn set_parent_link(&mut self, parent: NonNull<InternalNode<K, V>>, parent_idx: usize) {
         .                   let leaf = Self::as_leaf_ptr(self);
   284,209 ( 0.00%)          unsafe { (*leaf).parent = Some(parent) };
         .                   unsafe { (*leaf).parent_idx.write(parent_idx as u16) };
         .               }
         .           }
         .           
         .           impl<K, V> NodeRef<marker::Owned, K, V, marker::LeafOrInternal> {
         .               /// Clears the root's link to its parent edge.
         .               fn clear_parent_link(&mut self) {
         .                   let mut root_node = self.borrow_mut();
         .                   let leaf = root_node.as_leaf_mut();
     1,391 ( 0.00%)          leaf.parent = None;
         .               }
         .           }
         .           
         .           impl<K, V> NodeRef<marker::Owned, K, V, marker::LeafOrInternal> {
         .               /// Returns a new owned tree, with its own root node that is initially empty.
         .               pub fn new() -> Self {
         .                   NodeRef::new_leaf().forget_type()
         .               }
         .           
         .               /// Adds a new internal node with a single edge pointing to the previous root node,
         .               /// make that new node the root node, and return it. This increases the height by 1
         .               /// and is the opposite of `pop_internal_level`.
    18,876 ( 0.00%)      pub fn push_internal_level(&mut self) -> NodeRef<marker::Mut<'_>, K, V, marker::Internal> {
         .                   super::mem::take_mut(self, |old_root| NodeRef::new_internal(old_root).forget_type());
         .           
         .                   // `self.borrow_mut()`, except that we just forgot we're internal now:
         .                   NodeRef { height: self.height, node: self.node, _marker: PhantomData }
    25,168 ( 0.00%)      }
         .           
         .               /// Removes the internal root node, using its first child as the new root node.
         .               /// As it is intended only to be called when the root node has only one child,
         .               /// no cleanup is done on any of the keys, values and other children.
         .               /// This decreases the height by 1 and is the opposite of `push_internal_level`.
         .               ///
         .               /// Requires exclusive access to the `NodeRef` object but not to the root node;
         .               /// it will not invalidate other handles or references to the root node.
         .               ///
         .               /// Panics if there is no internal level, i.e., if the root node is a leaf.
         .               pub fn pop_internal_level(&mut self) {
     3,351 ( 0.00%)          assert!(self.height > 0);
         .           
         .                   let top = self.node;
         .           
         .                   // SAFETY: we asserted to be internal.
         .                   let internal_self = unsafe { self.borrow_mut().cast_to_internal_unchecked() };
         .                   // SAFETY: we borrowed `self` exclusively and its borrow type is exclusive.
         .                   let internal_node = unsafe { &mut *NodeRef::as_internal_ptr(&internal_self) };
         .                   // SAFETY: the first edge is always initialized.
     1,391 ( 0.00%)          self.node = unsafe { internal_node.edges[0].assume_init_read() };
     2,782 ( 0.00%)          self.height -= 1;
         .                   self.clear_parent_link();
         .           
         .                   unsafe {
         .                       Global.deallocate(top.cast(), Layout::new::<InternalNode<K, V>>());
         .                   }
         .               }
         .           }
         .           
         .           impl<K, V, Type> NodeRef<marker::Owned, K, V, Type> {
         .               /// Mutably borrows the owned root node. Unlike `reborrow_mut`, this is safe
         .               /// because the return value cannot be used to destroy the root, and there
         .               /// cannot be other references to the tree.
         .               pub fn borrow_mut(&mut self) -> NodeRef<marker::Mut<'_>, K, V, Type> {
 3,642,186 ( 0.02%)          NodeRef { height: self.height, node: self.node, _marker: PhantomData }
         .               }
         .           
         .               /// Slightly mutably borrows the owned root node.
         .               pub fn borrow_valmut(&mut self) -> NodeRef<marker::ValMut<'_>, K, V, Type> {
         .                   NodeRef { height: self.height, node: self.node, _marker: PhantomData }
         .               }
         .           
         .               /// Irreversibly transitions to a reference that permits traversal and offers
-- line 614 ----------------------------------------
-- line 617 ----------------------------------------
         .                   NodeRef { height: self.height, node: self.node, _marker: PhantomData }
         .               }
         .           }
         .           
         .           impl<'a, K: 'a, V: 'a> NodeRef<marker::Mut<'a>, K, V, marker::Leaf> {
         .               /// Adds a key-value pair to the end of the node.
         .               pub fn push(&mut self, key: K, val: V) {
         .                   let len = self.len_mut();
        32 ( 0.00%)          let idx = usize::from(*len);
        16 ( 0.00%)          assert!(idx < CAPACITY);
        44 ( 0.00%)          *len += 1;
         .                   unsafe {
         .                       self.key_area_mut(idx).write(key);
         .                       self.val_area_mut(idx).write(val);
         .                   }
         .               }
         .           }
         .           
         .           impl<'a, K: 'a, V: 'a> NodeRef<marker::Mut<'a>, K, V, marker::Internal> {
         .               /// Adds a key-value pair, and an edge to go to the right of that pair,
         .               /// to the end of the node.
         .               pub fn push(&mut self, key: K, val: V, edge: Root<K, V>) {
    12,584 ( 0.00%)          assert!(edge.height == self.height - 1);
         .           
         .                   let len = self.len_mut();
     6,292 ( 0.00%)          let idx = usize::from(*len);
     3,146 ( 0.00%)          assert!(idx < CAPACITY);
     6,292 ( 0.00%)          *len += 1;
         .                   unsafe {
         .                       self.key_area_mut(idx).write(key);
         .                       self.val_area_mut(idx).write(val);
     3,146 ( 0.00%)              self.edge_area_mut(idx + 1).write(edge.node);
         .                       Handle::new_edge(self.reborrow_mut(), idx + 1).correct_parent_link();
         .                   }
         .               }
         .           }
         .           
         .           impl<BorrowType, K, V> NodeRef<BorrowType, K, V, marker::Leaf> {
         .               /// Removes any static information asserting that this node is a `Leaf` node.
         .               pub fn forget_type(self) -> NodeRef<BorrowType, K, V, marker::LeafOrInternal> {
-- line 656 ----------------------------------------
-- line 668 ----------------------------------------
         .           impl<BorrowType, K, V> NodeRef<BorrowType, K, V, marker::LeafOrInternal> {
         .               /// Checks whether a node is an `Internal` node or a `Leaf` node.
         .               pub fn force(
         .                   self,
         .               ) -> ForceResult<
         .                   NodeRef<BorrowType, K, V, marker::Leaf>,
         .                   NodeRef<BorrowType, K, V, marker::Internal>,
         .               > {
 9,532,060 ( 0.05%)          if self.height == 0 {
         .                       ForceResult::Leaf(NodeRef {
         .                           height: self.height,
         .                           node: self.node,
         .                           _marker: PhantomData,
         .                       })
         .                   } else {
         .                       ForceResult::Internal(NodeRef {
         .                           height: self.height,
-- line 684 ----------------------------------------
-- line 747 ----------------------------------------
         .                   Handle { node, idx, _marker: PhantomData }
         .               }
         .           
         .               pub fn left_edge(self) -> Handle<NodeRef<BorrowType, K, V, NodeType>, marker::Edge> {
         .                   unsafe { Handle::new_edge(self.node, self.idx) }
         .               }
         .           
         .               pub fn right_edge(self) -> Handle<NodeRef<BorrowType, K, V, NodeType>, marker::Edge> {
   882,466 ( 0.00%)          unsafe { Handle::new_edge(self.node, self.idx + 1) }
         .               }
         .           }
         .           
         .           impl<BorrowType, K, V, NodeType, HandleType> PartialEq
         .               for Handle<NodeRef<BorrowType, K, V, NodeType>, HandleType>
         .           {
         .               fn eq(&self, other: &Self) -> bool {
         .                   let Self { node, idx, _marker } = self;
-- line 763 ----------------------------------------
-- line 790 ----------------------------------------
         .           }
         .           
         .           impl<BorrowType, K, V, NodeType> Handle<NodeRef<BorrowType, K, V, NodeType>, marker::Edge> {
         .               /// Creates a new handle to an edge in `node`.
         .               /// Unsafe because the caller must ensure that `idx <= node.len()`.
         .               pub unsafe fn new_edge(node: NodeRef<BorrowType, K, V, NodeType>, idx: usize) -> Self {
         .                   debug_assert!(idx <= node.len());
         .           
   903,040 ( 0.00%)          Handle { node, idx, _marker: PhantomData }
         .               }
         .           
         .               pub fn left_kv(self) -> Result<Handle<NodeRef<BorrowType, K, V, NodeType>, marker::KV>, Self> {
    91,286 ( 0.00%)          if self.idx > 0 {
    88,766 ( 0.00%)              Ok(unsafe { Handle::new_kv(self.node, self.idx - 1) })
         .                   } else {
         .                       Err(self)
         .                   }
         .               }
         .           
         .               pub fn right_kv(self) -> Result<Handle<NodeRef<BorrowType, K, V, NodeType>, marker::KV>, Self> {
 1,325,366 ( 0.01%)          if self.idx < self.node.len() {
         .                       Ok(unsafe { Handle::new_kv(self.node, self.idx) })
         .                   } else {
         .                       Err(self)
         .                   }
         .               }
         .           }
         .           
         .           pub enum LeftOrRight<T> {
-- line 818 ----------------------------------------
-- line 820 ----------------------------------------
         .               Right(T),
         .           }
         .           
         .           /// Given an edge index where we want to insert into a node filled to capacity,
         .           /// computes a sensible KV index of a split point and where to perform the insertion.
         .           /// The goal of the split point is for its key and value to end up in a parent node;
         .           /// the keys, values and edges to the left of the split point become the left child;
         .           /// the keys, values and edges to the right of the split point become the right child.
   108,692 ( 0.00%)  fn splitpoint(edge_idx: usize) -> (usize, LeftOrRight<usize>) {
         .               debug_assert!(edge_idx <= CAPACITY);
         .               // Rust issue #74834 tries to explain these symmetric rules.
   427,178 ( 0.00%)      match edge_idx {
   217,384 ( 0.00%)          0..EDGE_IDX_LEFT_OF_CENTER => (KV_IDX_CENTER - 1, LeftOrRight::Left(edge_idx)),
         .                   EDGE_IDX_LEFT_OF_CENTER => (KV_IDX_CENTER, LeftOrRight::Left(edge_idx)),
         .                   EDGE_IDX_RIGHT_OF_CENTER => (KV_IDX_CENTER, LeftOrRight::Right(0)),
   315,492 ( 0.00%)          _ => (KV_IDX_CENTER + 1, LeftOrRight::Right(edge_idx - (KV_IDX_CENTER + 1 + 1))),
         .               }
   108,692 ( 0.00%)  }
         .           
         .           impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, marker::Edge> {
         .               /// Inserts a new key-value pair between the key-value pairs to the right and left of
         .               /// this edge. This method assumes that there is enough space in the node for the new
         .               /// pair to fit.
         .               ///
         .               /// The returned pointer points to the inserted value.
 6,262,743 ( 0.03%)      fn insert_fit(&mut self, key: K, val: V) -> *mut V {
         .                   debug_assert!(self.node.len() < CAPACITY);
         .                   let new_len = self.node.len() + 1;
         .           
         .                   unsafe {
   801,976 ( 0.00%)              slice_insert(self.node.key_area_mut(..new_len), self.idx, key);
   876,638 ( 0.00%)              slice_insert(self.node.val_area_mut(..new_len), self.idx, val);
   801,958 ( 0.00%)              *self.node.len_mut() = new_len as u16;
         .           
         .                       self.node.val_area_mut(self.idx).assume_init_mut()
         .                   }
 6,416,432 ( 0.03%)      }
         .           }
         .           
         .           impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, marker::Edge> {
         .               /// Inserts a new key-value pair between the key-value pairs to the right and left of
         .               /// this edge. This method splits the node if there isn't enough room.
         .               ///
         .               /// The returned pointer points to the inserted value.
         .               fn insert(mut self, key: K, val: V) -> (InsertResult<'a, K, V, marker::Leaf>, *mut V) {
 2,405,874 ( 0.01%)          if self.node.len() < CAPACITY {
 4,302,308 ( 0.02%)              let val_ptr = self.insert_fit(key, val);
 1,417,550 ( 0.01%)              let kv = unsafe { Handle::new_kv(self.node, self.idx) };
         .                       (InsertResult::Fit(kv), val_ptr)
         .                   } else {
   745,464 ( 0.00%)              let (middle_kv_idx, insertion) = splitpoint(self.idx);
   182,841 ( 0.00%)              let middle = unsafe { Handle::new_kv(self.node, middle_kv_idx) };
         .                       let mut result = middle.split();
   452,228 ( 0.00%)              let mut insertion_edge = match insertion {
         .                           LeftOrRight::Left(insert_idx) => unsafe {
         .                               Handle::new_edge(result.left.reborrow_mut(), insert_idx)
         .                           },
         .                           LeftOrRight::Right(insert_idx) => unsafe {
         .                               Handle::new_edge(result.right.borrow_mut(), insert_idx)
         .                           },
         .                       };
   363,209 ( 0.00%)              let val_ptr = insertion_edge.insert_fit(key, val);
   256,265 ( 0.00%)              (InsertResult::Split(result), val_ptr)
         .                   }
         .               }
         .           }
         .           
         .           impl<'a, K, V> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>, marker::Edge> {
         .               /// Fixes the parent pointer and index in the child node that this edge
         .               /// links to. This is useful when the ordering of edges has been changed,
         .               fn correct_parent_link(self) {
-- line 890 ----------------------------------------
-- line 895 ----------------------------------------
         .                   child.set_parent_link(ptr, idx);
         .               }
         .           }
         .           
         .           impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>, marker::Edge> {
         .               /// Inserts a new key-value pair and an edge that will go to the right of that new pair
         .               /// between this edge and the key-value pair to the right of this edge. This method assumes
         .               /// that there is enough space in the node for the new pair to fit.
   839,258 ( 0.00%)      fn insert_fit(&mut self, key: K, val: V, edge: Root<K, V>) {
         .                   debug_assert!(self.node.len() < CAPACITY);
         .                   debug_assert!(edge.height == self.node.height - 1);
         .                   let new_len = self.node.len() + 1;
         .           
         .                   unsafe {
   105,546 ( 0.00%)              slice_insert(self.node.key_area_mut(..new_len), self.idx, key);
    65,364 ( 0.00%)              slice_insert(self.node.val_area_mut(..new_len), self.idx, val);
         .                       slice_insert(self.node.edge_area_mut(..new_len + 1), self.idx + 1, edge.node);
   105,546 ( 0.00%)              *self.node.len_mut() = new_len as u16;
         .           
         .                       self.node.correct_childrens_parent_links(self.idx + 1..new_len + 1);
         .                   }
   844,368 ( 0.00%)      }
         .           
         .               /// Inserts a new key-value pair and an edge that will go to the right of that new pair
         .               /// between this edge and the key-value pair to the right of this edge. This method splits
         .               /// the node if there isn't enough room.
         .               fn insert(
         .                   mut self,
         .                   key: K,
         .                   val: V,
         .                   edge: Root<K, V>,
         .               ) -> InsertResult<'a, K, V, marker::Internal> {
   316,638 ( 0.00%)          assert!(edge.height == self.node.height - 1);
         .           
   211,092 ( 0.00%)          if self.node.len() < CAPACITY {
   451,160 ( 0.00%)              self.insert_fit(key, val, edge);
         .                       let kv = unsafe { Handle::new_kv(self.node, self.idx) };
         .                       InsertResult::Fit(kv)
         .                   } else {
   110,108 ( 0.00%)              let (middle_kv_idx, insertion) = splitpoint(self.idx);
         .                       let middle = unsafe { Handle::new_kv(self.node, middle_kv_idx) };
         .                       let mut result = middle.split();
    16,916 ( 0.00%)              let mut insertion_edge = match insertion {
         .                           LeftOrRight::Left(insert_idx) => unsafe {
         .                               Handle::new_edge(result.left.reborrow_mut(), insert_idx)
         .                           },
         .                           LeftOrRight::Right(insert_idx) => unsafe {
         .                               Handle::new_edge(result.right.borrow_mut(), insert_idx)
         .                           },
         .                       };
   126,764 ( 0.00%)              insertion_edge.insert_fit(key, val, edge);
    33,101 ( 0.00%)              InsertResult::Split(result)
         .                   }
         .               }
         .           }
         .           
         .           impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, marker::Edge> {
         .               /// Inserts a new key-value pair between the key-value pairs to the right and left of
         .               /// this edge. This method splits the node if there isn't enough room, and tries to
         .               /// insert the split off portion into the parent node recursively, until the root is reached.
         .               ///
         .               /// If the returned result is a `Fit`, its handle's node can be this edge's node or an ancestor.
         .               /// If the returned result is a `Split`, the `left` field will be the root node.
         .               /// The returned pointer points to the inserted value.
 7,984,643 ( 0.04%)      pub fn insert_recursing(
         .                   self,
         .                   key: K,
         .                   value: V,
         .               ) -> (InsertResult<'a, K, V, marker::LeafOrInternal>, *mut V) {
 4,594,209 ( 0.02%)          let (mut split, val_ptr) = match self.insert(key, value) {
         .                       (InsertResult::Fit(handle), ptr) => {
 3,543,875 ( 0.02%)                  return (InsertResult::Fit(handle.forget_node_type()), ptr);
         .                       }
         .                       (InsertResult::Split(split), val_ptr) => (split.forget_node_type(), val_ptr),
         .                   };
         .           
         .                   loop {
   693,805 ( 0.00%)              split = match split.left.ascend() {
   475,952 ( 0.00%)                  Ok(parent) => match parent.insert(split.kv.0, split.kv.1, split.right) {
         .                               InsertResult::Fit(handle) => {
   469,687 ( 0.00%)                          return (InsertResult::Fit(handle.forget_node_type()), val_ptr);
         .                               }
       596 ( 0.00%)                      InsertResult::Split(split) => split.forget_node_type(),
         .                           },
         .                           Err(root) => {
    44,112 ( 0.00%)                      return (InsertResult::Split(SplitResult { left: root, ..split }), val_ptr);
         .                           }
         .                       };
         .                   }
 7,217,622 ( 0.04%)      }
         .           }
         .           
         .           impl<BorrowType: marker::BorrowType, K, V>
         .               Handle<NodeRef<BorrowType, K, V, marker::Internal>, marker::Edge>
         .           {
         .               /// Finds the node pointed to by this edge.
         .               ///
         .               /// The method name assumes you picture trees with the root node on top.
-- line 992 ----------------------------------------
-- line 999 ----------------------------------------
         .                   // marker::ValMut, there might be outstanding mutable references to
         .                   // values that we must not invalidate. There's no worry accessing the
         .                   // height field because that value is copied. Beware that, once the
         .                   // node pointer is dereferenced, we access the edges array with a
         .                   // reference (Rust issue #73987) and invalidate any other references
         .                   // to or inside the array, should any be around.
         .                   let parent_ptr = NodeRef::as_internal_ptr(&self.node);
         .                   let node = unsafe { (*parent_ptr).edges.get_unchecked(self.idx).assume_init_read() };
   303,511 ( 0.00%)          NodeRef { node, height: self.node.height - 1, _marker: PhantomData }
         .               }
         .           }
         .           
         .           impl<'a, K: 'a, V: 'a, NodeType> Handle<NodeRef<marker::Immut<'a>, K, V, NodeType>, marker::KV> {
         .               pub fn into_kv(self) -> (&'a K, &'a V) {
         .                   debug_assert!(self.idx < self.node.len());
         .                   let leaf = self.node.into_leaf();
         .                   let k = unsafe { leaf.keys.get_unchecked(self.idx).assume_init_ref() };
         .                   let v = unsafe { leaf.vals.get_unchecked(self.idx).assume_init_ref() };
 1,857,134 ( 0.01%)          (k, v)
         .               }
         .           }
         .           
         .           impl<'a, K: 'a, V: 'a, NodeType> Handle<NodeRef<marker::Mut<'a>, K, V, NodeType>, marker::KV> {
         .               pub fn key_mut(&mut self) -> &mut K {
         .                   unsafe { self.node.key_area_mut(self.idx).assume_init_mut() }
         .               }
         .           
-- line 1025 ----------------------------------------
-- line 1037 ----------------------------------------
         .           }
         .           
         .           impl<'a, K: 'a, V: 'a, NodeType> Handle<NodeRef<marker::Mut<'a>, K, V, NodeType>, marker::KV> {
         .               pub fn kv_mut(&mut self) -> (&mut K, &mut V) {
         .                   debug_assert!(self.idx < self.node.len());
         .                   // We cannot call separate key and value methods, because calling the second one
         .                   // invalidates the reference returned by the first.
         .                   unsafe {
     1,687 ( 0.00%)              let leaf = self.node.as_leaf_mut();
     1,687 ( 0.00%)              let key = leaf.keys.get_unchecked_mut(self.idx).assume_init_mut();
         .                       let val = leaf.vals.get_unchecked_mut(self.idx).assume_init_mut();
     2,738 ( 0.00%)              (key, val)
         .                   }
         .               }
         .           
         .               /// Replaces the key and value that the KV handle refers to.
         .               pub fn replace_kv(&mut self, k: K, v: V) -> (K, V) {
         .                   let (key, val) = self.kv_mut();
         .                   (mem::replace(key, k), mem::replace(val, v))
         .               }
-- line 1056 ----------------------------------------
-- line 1069 ----------------------------------------
         .                       (key, val)
         .                   }
         .               }
         .           
         .               /// Drops the key and value that the KV handle refers to.
         .               /// # Safety
         .               /// The node that the handle refers to must not yet have been deallocated.
         .               #[inline]
        30 ( 0.00%)      pub unsafe fn drop_key_val(mut self) {
         .                   debug_assert!(self.idx < self.node.len());
         .                   let leaf = self.node.as_leaf_dying();
         .                   unsafe {
         5 ( 0.00%)              leaf.keys.get_unchecked_mut(self.idx).assume_init_drop();
    98,075 ( 0.00%)              leaf.vals.get_unchecked_mut(self.idx).assume_init_drop();
         .                   }
        35 ( 0.00%)      }
         .           }
         .           
         .           impl<'a, K: 'a, V: 'a, NodeType> Handle<NodeRef<marker::Mut<'a>, K, V, NodeType>, marker::KV> {
         .               /// Helps implementations of `split` for a particular `NodeType`,
         .               /// by taking care of leaf data.
         .               fn split_leaf_data(&mut self, new_node: &mut LeafNode<K, V>) -> (K, V) {
         .                   debug_assert!(self.idx < self.node.len());
         .                   let old_len = self.node.len();
   552,038 ( 0.00%)          let new_len = old_len - self.idx - 1;
   109,560 ( 0.00%)          new_node.len = new_len as u16;
         .                   unsafe {
   109,528 ( 0.00%)              let k = self.node.key_area_mut(self.idx).assume_init_read();
    79,605 ( 0.00%)              let v = self.node.val_area_mut(self.idx).assume_init_read();
         .           
         .                       move_to_slice(
   326,076 ( 0.00%)                  self.node.key_area_mut(self.idx + 1..old_len),
   108,692 ( 0.00%)                  &mut new_node.keys[..new_len],
         .                       );
         .                       move_to_slice(
         .                           self.node.val_area_mut(self.idx + 1..old_len),
   121,787 ( 0.00%)                  &mut new_node.vals[..new_len],
         .                       );
         .           
   188,297 ( 0.00%)              *self.node.len_mut() = self.idx as u16;
   151,643 ( 0.00%)              (k, v)
         .                   }
         .               }
         .           }
         .           
         .           impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, marker::KV> {
         .               /// Splits the underlying node into three parts:
         .               ///
         .               /// - The node is truncated to only contain the key-value pairs to the left of
-- line 1117 ----------------------------------------
-- line 1120 ----------------------------------------
         .               /// - All the key-value pairs to the right of this handle are put into a newly
         .               ///   allocated node.
         .               pub fn split(mut self) -> SplitResult<'a, K, V, marker::Leaf> {
         .                   let mut new_node = LeafNode::new();
         .           
         .                   let kv = self.split_leaf_data(&mut new_node);
         .           
         .                   let right = NodeRef::from_new_leaf(new_node);
   868,305 ( 0.00%)          SplitResult { left: self.node, kv, right }
         .               }
         .           
         .               /// Removes the key-value pair pointed to by this handle and returns it, along with the edge
         .               /// that the key-value pair collapsed into.
         .               pub fn remove(
         .                   mut self,
         .               ) -> ((K, V), Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, marker::Edge>) {
         .                   let old_len = self.node.len();
         .                   unsafe {
         .                       let k = slice_remove(self.node.key_area_mut(..old_len), self.idx);
   433,879 ( 0.00%)              let v = slice_remove(self.node.val_area_mut(..old_len), self.idx);
 2,087,419 ( 0.01%)              *self.node.len_mut() = (old_len - 1) as u16;
 1,642,970 ( 0.01%)              ((k, v), self.left_edge())
         .                   }
         .               }
         .           }
         .           
         .           impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>, marker::KV> {
         .               /// Splits the underlying node into three parts:
         .               ///
         .               /// - The node is truncated to only contain the edges and key-value pairs to the
-- line 1149 ----------------------------------------
-- line 1150 ----------------------------------------
         .               ///   left of this handle.
         .               /// - The key and value pointed to by this handle are extracted.
         .               /// - All the edges and key-value pairs to the right of this handle are put into
         .               ///   a newly allocated node.
         .               pub fn split(mut self) -> SplitResult<'a, K, V, marker::Internal> {
         .                   let old_len = self.node.len();
         .                   unsafe {
         .                       let mut new_node = InternalNode::new();
    39,285 ( 0.00%)              let kv = self.split_leaf_data(&mut new_node.data);
         .                       let new_len = usize::from(new_node.data.len);
         .                       move_to_slice(
    15,509 ( 0.00%)                  self.node.edge_area_mut(self.idx + 1..old_len + 1),
    31,018 ( 0.00%)                  &mut new_node.edges[..new_len + 1],
         .                       );
         .           
         .                       let height = self.node.height;
         .                       let right = NodeRef::from_new_internal(new_node, height);
         .           
   106,083 ( 0.00%)              SplitResult { left: self.node, kv, right }
         .                   }
         .               }
         .           }
         .           
         .           /// Represents a session for evaluating and performing a balancing operation
         .           /// around an internal key-value pair.
         .           pub struct BalancingContext<'a, K, V> {
         .               parent: Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>, marker::KV>,
-- line 1176 ----------------------------------------
-- line 1242 ----------------------------------------
         .           
         .               pub fn into_right_child(self) -> NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal> {
         .                   self.right_child
         .               }
         .           
         .               /// Returns whether merging is possible, i.e., whether there is enough room
         .               /// in a node to combine the central KV with both adjacent child nodes.
         .               pub fn can_merge(&self) -> bool {
   271,537 ( 0.00%)          self.left_child.len() + 1 + self.right_child.len() <= CAPACITY
         .               }
         .           }
         .           
         .           impl<'a, K: 'a, V: 'a> BalancingContext<'a, K, V> {
         .               /// Performs a merge and lets a closure decide what to return.
         .               fn do_merge<
         .                   F: FnOnce(
         .                       NodeRef<marker::Mut<'a>, K, V, marker::Internal>,
-- line 1258 ----------------------------------------
-- line 1264 ----------------------------------------
         .                   result: F,
         .               ) -> R {
         .                   let Handle { node: mut parent_node, idx: parent_idx, _marker } = self.parent;
         .                   let old_parent_len = parent_node.len();
         .                   let mut left_node = self.left_child;
         .                   let old_left_len = left_node.len();
         .                   let mut right_node = self.right_child;
         .                   let right_len = right_node.len();
   177,650 ( 0.00%)          let new_left_len = old_left_len + 1 + right_len;
         .           
   177,650 ( 0.00%)          assert!(new_left_len <= CAPACITY);
         .           
         .                   unsafe {
    88,825 ( 0.00%)              *left_node.len_mut() = new_left_len as u16;
         .           
         .                       let parent_key = slice_remove(parent_node.key_area_mut(..old_parent_len), parent_idx);
         .                       left_node.key_area_mut(old_left_len).write(parent_key);
         .                       move_to_slice(
         .                           right_node.key_area_mut(..right_len),
         .                           left_node.key_area_mut(old_left_len + 1..new_left_len),
         .                       );
         .           
         .                       let parent_val = slice_remove(parent_node.val_area_mut(..old_parent_len), parent_idx);
         .                       left_node.val_area_mut(old_left_len).write(parent_val);
         .                       move_to_slice(
         .                           right_node.val_area_mut(..right_len),
         .                           left_node.val_area_mut(old_left_len + 1..new_left_len),
         .                       );
         .           
    88,825 ( 0.00%)              slice_remove(&mut parent_node.edge_area_mut(..old_parent_len + 1), parent_idx + 1);
         .                       parent_node.correct_childrens_parent_links(parent_idx + 1..old_parent_len);
   533,245 ( 0.00%)              *parent_node.len_mut() -= 1;
         .           
   177,650 ( 0.00%)              if parent_node.height > 1 {
         .                           // SAFETY: the height of the nodes being merged is one below the height
         .                           // of the node of this edge, thus above zero, so they are internal.
         .                           let mut left_node = left_node.reborrow_mut().cast_to_internal_unchecked();
         .                           let mut right_node = right_node.cast_to_internal_unchecked();
         .                           move_to_slice(
         .                               right_node.edge_area_mut(..right_len + 1),
    13,677 ( 0.00%)                      left_node.edge_area_mut(old_left_len + 1..new_left_len + 1),
         .                           );
         .           
         .                           left_node.correct_childrens_parent_links(old_left_len + 1..new_left_len + 1);
         .           
         .                           Global.deallocate(right_node.node.cast(), Layout::new::<InternalNode<K, V>>());
         .                       } else {
         .                           Global.deallocate(right_node.node.cast(), Layout::new::<LeafNode<K, V>>());
         .                       }
-- line 1312 ----------------------------------------
-- line 1313 ----------------------------------------
         .                   }
         .                   result(parent_node, left_node)
         .               }
         .           
         .               /// Merges the parent's key-value pair and both adjacent child nodes into
         .               /// the left child node and returns the shrunk parent node.
         .               ///
         .               /// Panics unless we `.can_merge()`.
    95,739 ( 0.00%)      pub fn merge_tracking_parent(self) -> NodeRef<marker::Mut<'a>, K, V, marker::Internal> {
    27,354 ( 0.00%)          self.do_merge(|parent, _child| parent)
   136,632 ( 0.00%)      }
         .           
         .               /// Merges the parent's key-value pair and both adjacent child nodes into
         .               /// the left child node and returns that child node.
         .               ///
         .               /// Panics unless we `.can_merge()`.
         .               pub fn merge_tracking_child(self) -> NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal> {
         .                   self.do_merge(|_parent, child| child)
         .               }
         .           
         .               /// Merges the parent's key-value pair and both adjacent child nodes into
         .               /// the left child node and returns the edge handle in that child node
         .               /// where the tracked child edge ended up,
         .               ///
         .               /// Panics unless we `.can_merge()`.
   526,036 ( 0.00%)      pub fn merge_tracking_child_edge(
         .                   self,
         .                   track_edge_idx: LeftOrRight<usize>,
         .               ) -> Handle<NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal>, marker::Edge> {
    75,148 ( 0.00%)          let old_left_len = self.left_child.len();
    75,148 ( 0.00%)          let right_len = self.right_child.len();
   225,444 ( 0.00%)          assert!(match track_edge_idx {
         .                       LeftOrRight::Left(idx) => idx <= old_left_len,
         .                       LeftOrRight::Right(idx) => idx <= right_len,
         .                   });
         .                   let child = self.merge_tracking_child();
    75,148 ( 0.00%)          let new_idx = match track_edge_idx {
         .                       LeftOrRight::Left(idx) => idx,
   222,021 ( 0.00%)              LeftOrRight::Right(idx) => old_left_len + 1 + idx,
         .                   };
         .                   unsafe { Handle::new_edge(child, new_idx) }
   601,184 ( 0.00%)      }
         .           
         .               /// Removes a key-value pair from the left child and places it in the key-value storage
         .               /// of the parent, while pushing the old parent key-value pair into the right child.
         .               /// Returns a handle to the edge in the right child corresponding to where the original
         .               /// edge specified by `track_right_edge_idx` ended up.
         .               pub fn steal_left(
         .                   mut self,
         .                   track_right_edge_idx: usize,
         .               ) -> Handle<NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal>, marker::Edge> {
     2,150 ( 0.00%)          self.bulk_steal_left(1);
         .                   unsafe { Handle::new_edge(self.right_child, 1 + track_right_edge_idx) }
         .               }
         .           
         .               /// Removes a key-value pair from the right child and places it in the key-value storage
         .               /// of the parent, while pushing the old parent key-value pair onto the left child.
         .               /// Returns a handle to the edge in the left child specified by `track_left_edge_idx`,
         .               /// which didn't move.
         .               pub fn steal_right(
         .                   mut self,
         .                   track_left_edge_idx: usize,
         .               ) -> Handle<NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal>, marker::Edge> {
       898 ( 0.00%)          self.bulk_steal_right(1);
         .                   unsafe { Handle::new_edge(self.left_child, track_left_edge_idx) }
         .               }
         .           
         .               /// This does stealing similar to `steal_left` but steals multiple elements at once.
     8,330 ( 0.00%)      pub fn bulk_steal_left(&mut self, count: usize) {
     2,380 ( 0.00%)          assert!(count > 0);
         .                   unsafe {
         .                       let left_node = &mut self.left_child;
         .                       let old_left_len = left_node.len();
         .                       let right_node = &mut self.right_child;
     1,190 ( 0.00%)              let old_right_len = right_node.len();
         .           
         .                       // Make sure that we may steal safely.
     5,950 ( 0.00%)              assert!(old_right_len + count <= CAPACITY);
     3,570 ( 0.00%)              assert!(old_left_len >= count);
         .           
         .                       let new_left_len = old_left_len - count;
         .                       let new_right_len = old_right_len + count;
     1,190 ( 0.00%)              *left_node.len_mut() = new_left_len as u16;
     1,370 ( 0.00%)              *right_node.len_mut() = new_right_len as u16;
         .           
         .                       // Move leaf data.
         .                       {
         .                           // Make room for stolen elements in the right child.
         .                           slice_shr(right_node.key_area_mut(..new_right_len), count);
         .                           slice_shr(right_node.val_area_mut(..new_right_len), count);
         .           
         .                           // Move elements from the left child to the right one.
         .                           move_to_slice(
     2,380 ( 0.00%)                      left_node.key_area_mut(new_left_len + 1..old_left_len),
     1,190 ( 0.00%)                      right_node.key_area_mut(..count - 1),
         .                           );
         .                           move_to_slice(
         .                               left_node.val_area_mut(new_left_len + 1..old_left_len),
         .                               right_node.val_area_mut(..count - 1),
         .                           );
         .           
         .                           // Move the left-most stolen pair to the parent.
     1,190 ( 0.00%)                  let k = left_node.key_area_mut(new_left_len).assume_init_read();
         .                           let v = left_node.val_area_mut(new_left_len).assume_init_read();
     4,945 ( 0.00%)                  let (k, v) = self.parent.replace_kv(k, v);
         .           
         .                           // Move parent's key-value pair to the right child.
         .                           right_node.key_area_mut(count - 1).write(k);
         .                           right_node.val_area_mut(count - 1).write(v);
         .                       }
         .           
     5,950 ( 0.00%)              match (left_node.reborrow_mut().force(), right_node.reborrow_mut().force()) {
         .                           (ForceResult::Internal(mut left), ForceResult::Internal(mut right)) => {
         .                               // Make room for stolen edges.
       115 ( 0.00%)                      slice_shr(right.edge_area_mut(..new_right_len + 1), count);
         .           
         .                               // Steal edges.
         .                               move_to_slice(
       230 ( 0.00%)                          left.edge_area_mut(new_left_len + 1..old_left_len + 1),
         .                                   right.edge_area_mut(..count),
         .                               );
         .           
         .                               right.correct_childrens_parent_links(0..new_right_len + 1);
         .                           }
         .                           (ForceResult::Leaf(_), ForceResult::Leaf(_)) => {}
         .                           _ => unreachable!(),
         .                       }
         .                   }
     9,520 ( 0.00%)      }
         .           
         .               /// The symmetric clone of `bulk_steal_left`.
     3,479 ( 0.00%)      pub fn bulk_steal_right(&mut self, count: usize) {
       994 ( 0.00%)          assert!(count > 0);
         .                   unsafe {
         .                       let left_node = &mut self.left_child;
       497 ( 0.00%)              let old_left_len = left_node.len();
         .                       let right_node = &mut self.right_child;
         .                       let old_right_len = right_node.len();
         .           
         .                       // Make sure that we may steal safely.
     2,485 ( 0.00%)              assert!(old_left_len + count <= CAPACITY);
     1,149 ( 0.00%)              assert!(old_right_len >= count);
         .           
         .                       let new_left_len = old_left_len + count;
         .                       let new_right_len = old_right_len - count;
       497 ( 0.00%)              *left_node.len_mut() = new_left_len as u16;
       497 ( 0.00%)              *right_node.len_mut() = new_right_len as u16;
         .           
         .                       // Move leaf data.
         .                       {
         .                           // Move the right-most stolen pair to the parent.
       945 ( 0.00%)                  let k = right_node.key_area_mut(count - 1).assume_init_read();
         .                           let v = right_node.val_area_mut(count - 1).assume_init_read();
     1,792 ( 0.00%)                  let (k, v) = self.parent.replace_kv(k, v);
         .           
         .                           // Move parent's key-value pair to the left child.
         .                           left_node.key_area_mut(old_left_len).write(k);
         .                           left_node.val_area_mut(old_left_len).write(v);
         .           
         .                           // Move elements from the right child to the left one.
         .                           move_to_slice(
         .                               right_node.key_area_mut(..count - 1),
       497 ( 0.00%)                      left_node.key_area_mut(old_left_len + 1..new_left_len),
         .                           );
         .                           move_to_slice(
         .                               right_node.val_area_mut(..count - 1),
         .                               left_node.val_area_mut(old_left_len + 1..new_left_len),
         .                           );
         .           
         .                           // Fill gap where stolen elements used to be.
         .                           slice_shl(right_node.key_area_mut(..old_right_len), count);
         .                           slice_shl(right_node.val_area_mut(..old_right_len), count);
         .                       }
         .           
     2,485 ( 0.00%)              match (left_node.reborrow_mut().force(), right_node.reborrow_mut().force()) {
         .                           (ForceResult::Internal(mut left), ForceResult::Internal(mut right)) => {
         .                               // Steal edges.
         .                               move_to_slice(
         .                                   right.edge_area_mut(..count),
        48 ( 0.00%)                          left.edge_area_mut(old_left_len + 1..new_left_len + 1),
         .                               );
         .           
         .                               // Fill gap where stolen edges used to be.
        48 ( 0.00%)                      slice_shl(right.edge_area_mut(..old_right_len + 1), count);
         .           
         .                               left.correct_childrens_parent_links(old_left_len + 1..new_left_len + 1);
        96 ( 0.00%)                      right.correct_childrens_parent_links(0..new_right_len + 1);
         .                           }
         .                           (ForceResult::Leaf(_), ForceResult::Leaf(_)) => {}
         .                           _ => unreachable!(),
         .                       }
         .                   }
     3,976 ( 0.00%)      }
         .           }
         .           
         .           impl<BorrowType, K, V> Handle<NodeRef<BorrowType, K, V, marker::Leaf>, marker::Edge> {
         .               pub fn forget_node_type(
         .                   self,
         .               ) -> Handle<NodeRef<BorrowType, K, V, marker::LeafOrInternal>, marker::Edge> {
         .                   unsafe { Handle::new_edge(self.node.forget_type(), self.idx) }
         .               }
-- line 1513 ----------------------------------------
-- line 1681 ----------------------------------------
         .           ///
         .           /// # Safety
         .           /// The slice has more than `idx` elements.
         .           unsafe fn slice_insert<T>(slice: &mut [MaybeUninit<T>], idx: usize, val: T) {
         .               unsafe {
         .                   let len = slice.len();
         .                   debug_assert!(len > idx);
         .                   let slice_ptr = slice.as_mut_ptr();
 6,763,525 ( 0.03%)          if len > idx + 1 {
 1,338,165 ( 0.01%)              ptr::copy(slice_ptr.add(idx), slice_ptr.add(idx + 1), len - idx - 1);
         .                   }
         .                   (*slice_ptr.add(idx)).write(val);
         .               }
         .           }
         .           
         .           /// Removes and returns a value from a slice of all initialized elements, leaving behind one
         .           /// trailing uninitialized element.
         .           ///
-- line 1698 ----------------------------------------
-- line 1699 ----------------------------------------
         .           /// # Safety
         .           /// The slice has more than `idx` elements.
         .           unsafe fn slice_remove<T>(slice: &mut [MaybeUninit<T>], idx: usize) -> T {
         .               unsafe {
         .                   let len = slice.len();
         .                   debug_assert!(idx < len);
         .                   let slice_ptr = slice.as_mut_ptr();
         .                   let ret = (*slice_ptr.add(idx)).assume_init_read();
 5,830,640 ( 0.03%)          ptr::copy(slice_ptr.add(idx + 1), slice_ptr.add(idx), len - idx - 1);
         .                   ret
         .               }
         .           }
         .           
         .           /// Shifts the elements in a slice `distance` positions to the left.
         .           ///
         .           /// # Safety
         .           /// The slice has at least `distance` elements.
         .           unsafe fn slice_shl<T>(slice: &mut [MaybeUninit<T>], distance: usize) {
         .               unsafe {
         .                   let slice_ptr = slice.as_mut_ptr();
        96 ( 0.00%)          ptr::copy(slice_ptr.add(distance), slice_ptr, slice.len() - distance);
         .               }
         .           }
         .           
         .           /// Shifts the elements in a slice `distance` positions to the right.
         .           ///
         .           /// # Safety
         .           /// The slice has at least `distance` elements.
         .           unsafe fn slice_shr<T>(slice: &mut [MaybeUninit<T>], distance: usize) {
         .               unsafe {
         .                   let slice_ptr = slice.as_mut_ptr();
     3,620 ( 0.00%)          ptr::copy(slice_ptr, slice_ptr.add(distance), slice.len() - distance);
         .               }
         .           }
         .           
         .           /// Moves all values from a slice of initialized elements to a slice
         .           /// of uninitialized elements, leaving behind `src` as all uninitialized.
         .           /// Works like `dst.copy_from_slice(src)` but does not require `T` to be `Copy`.
         .           fn move_to_slice<T>(src: &mut [MaybeUninit<T>], dst: &mut [MaybeUninit<T>]) {
   457,833 ( 0.00%)      assert!(src.len() == dst.len());
         .               unsafe {
         .                   ptr::copy_nonoverlapping(src.as_ptr(), dst.as_mut_ptr(), src.len());
         .               }
         .           }
         .           
         .           #[cfg(test)]
         .           mod tests;

22,253,054 ( 0.11%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/node.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/hash/sip.rs
--------------------------------------------------------------------------------
Ir                  

-- line 124 ----------------------------------------
         .           /// sizes and avoid calling `memcpy`, which is good for speed.
         .           ///
         .           /// Unsafe because: unchecked indexing at start..start+len
         .           #[inline]
         .           unsafe fn u8to64_le(buf: &[u8], start: usize, len: usize) -> u64 {
         .               debug_assert!(len < 8);
         .               let mut i = 0; // current byte index (from LSB) in the output u64
         .               let mut out = 0;
 4,500,984 ( 0.02%)      if i + 3 < len {
         .                   // SAFETY: `i` cannot be greater than `len`, and the caller must guarantee
         .                   // that the index start..start+len is in bounds.
         .                   out = unsafe { load_int_le!(buf, start + i, u32) } as u64;
         .                   i += 4;
         .               }
 9,247,371 ( 0.05%)      if i + 1 < len {
         .                   // SAFETY: same as above.
 4,623,651 ( 0.02%)          out |= (unsafe { load_int_le!(buf, start + i, u16) } as u64) << (i * 8);
 2,311,614 ( 0.01%)          i += 2
         .               }
 5,315,213 ( 0.03%)      if i < len {
         .                   // SAFETY: same as above.
 5,642,533 ( 0.03%)          out |= (unsafe { *buf.get_unchecked(start + i) } as u64) << (i * 8);
         .                   i += 1;
         .               }
         .               debug_assert_eq!(i, len);
         .               out
         .           }
         .           
         .           impl SipHasher {
         .               /// Creates a new `SipHasher` with the two initial keys set to 0.
-- line 153 ----------------------------------------
-- line 190 ----------------------------------------
         .               /// Creates a `SipHasher13` that is keyed off the provided keys.
         .               #[inline]
         .               #[unstable(feature = "hashmap_internals", issue = "none")]
         .               #[rustc_deprecated(
         .                   since = "1.13.0",
         .                   reason = "use `std::collections::hash_map::DefaultHasher` instead"
         .               )]
         .               pub fn new_with_keys(key0: u64, key1: u64) -> SipHasher13 {
   954,145 ( 0.00%)          SipHasher13 { hasher: Hasher::new_with_keys(key0, key1) }
         .               }
         .           }
         .           
         .           impl<S: Sip> Hasher<S> {
         .               #[inline]
         .               fn new_with_keys(key0: u64, key1: u64) -> Hasher<S> {
         9 ( 0.00%)          let mut state = Hasher {
         .                       k0: key0,
         .                       k1: key1,
         .                       length: 0,
         .                       state: State { v0: 0, v1: 0, v2: 0, v3: 0 },
         .                       tail: 0,
         .                       ntail: 0,
         .                       _marker: PhantomData,
         .                   };
         .                   state.reset();
         .                   state
         .               }
         .           
         .               #[inline]
         .               fn reset(&mut self) {
         .                   self.length = 0;
 1,431,213 ( 0.01%)          self.state.v0 = self.k0 ^ 0x736f6d6570736575;
 1,492,561 ( 0.01%)          self.state.v1 = self.k1 ^ 0x646f72616e646f6d;
         .                   self.state.v2 = self.k0 ^ 0x6c7967656e657261;
         .                   self.state.v3 = self.k1 ^ 0x7465646279746573;
         .                   self.ntail = 0;
         .               }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl super::Hasher for SipHasher {
-- line 230 ----------------------------------------
-- line 258 ----------------------------------------
         .               // in librustc_data_structures/sip128.rs, and add `write_u*`/`write_i*`
         .               // methods to `SipHasher`, `SipHasher13`, and `DefaultHasher`. This would
         .               // greatly speed up integer hashing by those hashers, at the cost of
         .               // slightly slowing down compile speeds on some benchmarks. See #69152 for
         .               // details.
         .               #[inline]
         .               fn write(&mut self, msg: &[u8]) {
         .                   let length = msg.len();
 5,564,694 ( 0.03%)          self.length += length;
         .           
         .                   let mut needed = 0;
         .           
 5,503,335 ( 0.03%)          if self.ntail != 0 {
 2,714,604 ( 0.01%)              needed = 8 - self.ntail;
         .                       // SAFETY: `cmp::min(length, needed)` is guaranteed to not be over `length`
13,572,980 ( 0.07%)              self.tail |= unsafe { u8to64_le(msg, 0, cmp::min(length, needed)) } << (8 * self.ntail);
 2,714,596 ( 0.01%)              if length < needed {
 1,759,838 ( 0.01%)                  self.ntail += length;
         .                           return;
         .                       } else {
   477,379 ( 0.00%)                  self.state.v3 ^= self.tail;
         .                           S::c_rounds(&mut self.state);
   954,758 ( 0.00%)                  self.state.v0 ^= self.tail;
   477,379 ( 0.00%)                  self.ntail = 0;
         .                       }
         .                   }
         .           
         .                   // Buffered tail is now flushed, process new input.
 1,786,345 ( 0.01%)          let len = length - needed;
 1,786,356 ( 0.01%)          let left = len & 0x7; // len % 8
         .           
         .                   let mut i = needed;
 2,679,864 ( 0.01%)          while i < len - left {
         .                       // SAFETY: because `len - left` is the biggest multiple of 8 under
         .                       // `len`, and because `i` starts at `needed` where `len` is `length - needed`,
         .                       // `i + 8` is guaranteed to be less than or equal to `length`.
         .                       let mi = unsafe { load_int_le!(msg, i, u64) };
         .           
       165 ( 0.00%)              self.state.v3 ^= mi;
         .                       S::c_rounds(&mut self.state);
       165 ( 0.00%)              self.state.v0 ^= mi;
         .           
       330 ( 0.00%)              i += 8;
         .                   }
         .           
         .                   // SAFETY: `i` is now `needed + len.div_euclid(8) * 8`,
         .                   // so `i + left` = `needed + len` = `length`, which is by
         .                   // definition equal to `msg.len()`.
 1,847,693 ( 0.01%)          self.tail = unsafe { u8to64_le(msg, i, left) };
         .                   self.ntail = left;
         .               }
         .           
         .               #[inline]
         .               fn finish(&self) -> u64 {
   477,074 ( 0.00%)          let mut state = self.state;
         .           
 2,385,370 ( 0.01%)          let b: u64 = ((self.length as u64 & 0xff) << 56) | self.tail;
         .           
   477,074 ( 0.00%)          state.v3 ^= b;
         .                   S::c_rounds(&mut state);
   477,074 ( 0.00%)          state.v0 ^= b;
         .           
   477,074 ( 0.00%)          state.v2 ^= 0xff;
         .                   S::d_rounds(&mut state);
         .           
   954,148 ( 0.00%)          state.v0 ^ state.v1 ^ state.v2 ^ state.v3
         .               }
         .           }
         .           
         .           impl<S: Sip> Clone for Hasher<S> {
         .               #[inline]
         .               fn clone(&self) -> Hasher<S> {
         .                   Hasher {
         .                       k0: self.k0,
-- line 331 ----------------------------------------
-- line 354 ----------------------------------------
         .           }
         .           
         .           #[derive(Debug, Clone, Default)]
         .           struct Sip13Rounds;
         .           
         .           impl Sip for Sip13Rounds {
         .               #[inline]
         .               fn c_rounds(state: &mut State) {
 6,205,605 ( 0.03%)          compress!(state);
         .               }
         .           
         .               #[inline]
         .               fn d_rounds(state: &mut State) {
 1,908,296 ( 0.01%)          compress!(state);
 1,908,296 ( 0.01%)          compress!(state);
 1,431,222 ( 0.01%)          compress!(state);
         .               }
         .           }
         .           
         .           #[derive(Debug, Clone, Default)]
         .           struct Sip24Rounds;
         .           
         .           impl Sip for Sip24Rounds {
         .               #[inline]
-- line 377 ----------------------------------------

12,693,944 ( 0.07%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/hash/sip.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_borrowck/src/lib.rs
--------------------------------------------------------------------------------
Ir                 

-- line 97 ----------------------------------------
        .           
        .               /// If true, the capture is behind a reference.
        .               by_ref: bool,
        .           }
        .           
        .           const DEREF_PROJECTION: &[PlaceElem<'_>; 1] = &[ProjectionElem::Deref];
        .           
        .           pub fn provide(providers: &mut Providers) {
        4 ( 0.00%)      *providers = Providers {
        .                   mir_borrowck: |tcx, did| {
    2,894 ( 0.00%)              if let Some(def) = ty::WithOptConstParam::try_lookup(did, tcx) {
        .                           tcx.mir_borrowck_const_arg(def)
        .                       } else {
   11,568 ( 0.00%)                  mir_borrowck(tcx, ty::WithOptConstParam::unknown(did))
        .                       }
        .                   },
        .                   mir_borrowck_const_arg: |tcx, (did, param_did)| {
        .                       mir_borrowck(tcx, ty::WithOptConstParam { did, const_param_did: Some(param_did) })
        .                   },
        .                   ..*providers
        .               };
        1 ( 0.00%)  }
        .           
   28,920 ( 0.00%)  fn mir_borrowck<'tcx>(
        .               tcx: TyCtxt<'tcx>,
        .               def: ty::WithOptConstParam<LocalDefId>,
        .           ) -> &'tcx BorrowCheckResult<'tcx> {
        .               let (input_body, promoted) = tcx.mir_promoted(def);
        .               debug!("run query mir_borrowck: {}", tcx.def_path_str(def.did.to_def_id()));
        .           
   37,596 ( 0.00%)      let opt_closure_req = tcx.infer_ctxt().with_opaque_type_inference(def.did).enter(|infcx| {
        .                   let input_body: &Body<'_> = &input_body.borrow();
        .                   let promoted: &IndexVec<_, _> = &promoted.borrow();
   40,488 ( 0.00%)          do_mir_borrowck(&infcx, input_body, promoted, false).0
   11,568 ( 0.00%)      });
        .               debug!("mir_borrowck done");
        .           
    2,892 ( 0.00%)      tcx.arena.alloc(opt_closure_req)
   23,136 ( 0.00%)  }
        .           
        .           /// Perform the actual borrow checking.
        .           ///
        .           /// If `return_body_with_facts` is true, then return the body with non-erased
        .           /// region ids on which the borrow checking was performed together with Polonius
        .           /// facts.
   63,624 ( 0.00%)  #[instrument(skip(infcx, input_body, input_promoted), level = "debug")]
        .           fn do_mir_borrowck<'a, 'tcx>(
        .               infcx: &InferCtxt<'a, 'tcx>,
        .               input_body: &Body<'tcx>,
        .               input_promoted: &IndexVec<Promoted, Body<'tcx>>,
        .               return_body_with_facts: bool,
        .           ) -> (BorrowCheckResult<'tcx>, Option<Box<BodyWithBorrowckFacts<'tcx>>>) {
   28,920 ( 0.00%)      let def = input_body.source.with_opt_param().as_local().unwrap();
        .           
        .               debug!(?def);
        .           
    5,784 ( 0.00%)      let tcx = infcx.tcx;
        .               let param_env = tcx.param_env(def.did);
    2,892 ( 0.00%)      let id = tcx.hir().local_def_id_to_hir_id(def.did);
        .           
    5,784 ( 0.00%)      let mut local_names = IndexVec::from_elem(None, &input_body.local_decls);
        .               for var_debug_info in &input_body.var_debug_info {
   55,848 ( 0.00%)          if let VarDebugInfoContents::Place(place) = var_debug_info.value {
   31,820 ( 0.00%)              if let Some(local) = place.as_local() {
   47,439 ( 0.00%)                  if let Some(prev_name) = local_names[local] {
        .                               if var_debug_info.name != prev_name {
        .                                   span_bug!(
        .                                       var_debug_info.source_info.span,
        .                                       "local {:?} has many names (`{}` vs `{}`)",
        .                                       local,
        .                                       prev_name,
        .                                       var_debug_info.name
        .                                   );
        .                               }
        .                           }
   47,439 ( 0.00%)                  local_names[local] = Some(var_debug_info.name);
        .                       }
        .                   }
        .               }
        .           
        .               // Gather the upvars of a closure, if any.
   11,568 ( 0.00%)      let tables = tcx.typeck_opt_const_arg(def);
    5,784 ( 0.00%)      if let Some(ErrorReported) = tables.tainted_by_errors {
        .                   infcx.set_tainted_by_errors();
        .               }
   11,568 ( 0.00%)      let upvars: Vec<_> = tables
        .                   .closure_min_captures_flattened(def.did.to_def_id())
        .                   .map(|captured_place| {
        .                       let capture = captured_place.info.capture_kind;
      194 ( 0.00%)              let by_ref = match capture {
        .                           ty::UpvarCapture::ByValue => false,
        .                           ty::UpvarCapture::ByRef(..) => true,
        .                       };
        .                       Upvar { place: captured_place.clone(), by_ref }
        .                   })
        .                   .collect();
        .           
        .               // Replace all regions with fresh inference variables. This
        .               // requires first making our own copy of the MIR. This copy will
        .               // be modified (in place) to contain non-lexical lifetimes. It
        .               // will have a lifetime tied to the inference context.
    5,784 ( 0.00%)      let mut body_owned = input_body.clone();
        .               let mut promoted = input_promoted.clone();
        .               let free_regions =
    8,676 ( 0.00%)          nll::replace_regions_in_mir(infcx, param_env, &mut body_owned, &mut promoted);
        .               let body = &body_owned; // no further changes
        .           
    2,892 ( 0.00%)      let location_table_owned = LocationTable::new(body);
        .               let location_table = &location_table_owned;
        .           
        .               let mut errors_buffer = Vec::new();
    8,676 ( 0.00%)      let (move_data, move_errors): (MoveData<'tcx>, Vec<(Place<'tcx>, MoveError<'tcx>)>) =
   20,244 ( 0.00%)          match MoveData::gather_moves(&body, tcx, param_env) {
   17,352 ( 0.00%)              Ok(move_data) => (move_data, Vec::new()),
        .                       Err((move_data, move_errors)) => (move_data, move_errors),
        .                   };
        .               let promoted_errors = promoted
        .                   .iter_enumerated()
    1,220 ( 0.00%)          .map(|(idx, body)| (idx, MoveData::gather_moves(&body, tcx, param_env)));
        .           
   17,352 ( 0.00%)      let mdpe = MoveDataParamEnv { move_data, param_env };
        .           
   23,136 ( 0.00%)      let mut flow_inits = MaybeInitializedPlaces::new(tcx, &body, &mdpe)
    2,892 ( 0.00%)          .into_engine(tcx, &body)
        .                   .pass_name("borrowck")
        .                   .iterate_to_fixpoint()
        .                   .into_results_cursor(&body);
        .           
   34,704 ( 0.00%)      let locals_are_invalidated_at_exit = tcx.hir().body_owner_kind(id).is_fn_or_closure();
        .               let borrow_set =
   28,920 ( 0.00%)          Rc::new(BorrowSet::build(tcx, body, locals_are_invalidated_at_exit, &mdpe.move_data));
        .           
   14,460 ( 0.00%)      let use_polonius = return_body_with_facts || infcx.tcx.sess.opts.debugging_opts.polonius;
        .           
        .               // Compute non-lexical lifetimes.
        .               let nll::NllOutput {
    8,676 ( 0.00%)          regioncx,
   11,568 ( 0.00%)          opaque_type_values,
    5,784 ( 0.00%)          polonius_input,
    8,676 ( 0.00%)          polonius_output,
   11,568 ( 0.00%)          opt_closure_req,
   28,920 ( 0.00%)          nll_errors,
   52,056 ( 0.00%)      } = nll::compute_regions(
        .                   infcx,
   46,272 ( 0.00%)          free_regions,
        .                   body,
        .                   &promoted,
        .                   location_table,
        .                   param_env,
        .                   &mut flow_inits,
        .                   &mdpe.move_data,
        .                   &borrow_set,
        .                   &upvars,
        .                   use_polonius,
        .               );
        .           
        .               // Dump MIR results into a file, if that is enabled. This let us
        .               // write unit-tests, as well as helping with debugging.
    8,676 ( 0.00%)      nll::dump_mir_results(infcx, &body, &regioncx, &opt_closure_req);
        .           
        .               // We also have a `#[rustc_regions]` annotation that causes us to dump
        .               // information.
    5,784 ( 0.00%)      nll::dump_annotation(
        .                   infcx,
        .                   &body,
        .                   &regioncx,
        .                   &opt_closure_req,
        .                   &opaque_type_values,
        .                   &mut errors_buffer,
        .               );
        .           
        .               // The various `flow_*` structures can be large. We drop `flow_inits` here
        .               // so it doesn't overlap with the others below. This reduces peak memory
        .               // usage significantly on some benchmarks.
   46,272 ( 0.00%)      drop(flow_inits);
        .           
    2,892 ( 0.00%)      let regioncx = Rc::new(regioncx);
        .           
   17,352 ( 0.00%)      let flow_borrows = Borrows::new(tcx, body, &regioncx, &borrow_set)
    2,892 ( 0.00%)          .into_engine(tcx, body)
        .                   .pass_name("borrowck")
        .                   .iterate_to_fixpoint();
   17,352 ( 0.00%)      let flow_uninits = MaybeUninitializedPlaces::new(tcx, body, &mdpe)
    2,892 ( 0.00%)          .into_engine(tcx, body)
        .                   .pass_name("borrowck")
        .                   .iterate_to_fixpoint();
   17,352 ( 0.00%)      let flow_ever_inits = EverInitializedPlaces::new(tcx, body, &mdpe)
    2,892 ( 0.00%)          .into_engine(tcx, body)
        .                   .pass_name("borrowck")
        .                   .iterate_to_fixpoint();
        .           
    7,036 ( 0.00%)      let movable_generator = !matches!(
   18,604 ( 0.00%)          tcx.hir().get(id),
        .                   Node::Expr(&hir::Expr {
        .                       kind: hir::ExprKind::Closure(.., Some(hir::Movability::Static)),
        .                       ..
        .                   })
        .               );
        .           
      854 ( 0.00%)      for (idx, move_data_results) in promoted_errors {
        .                   let promoted_body = &promoted[idx];
        .           
      244 ( 0.00%)          if let Err((move_data, move_errors)) = move_data_results {
        .                       let mut promoted_mbcx = MirBorrowckCtxt {
        .                           infcx,
        .                           param_env,
        .                           body: promoted_body,
        .                           move_data: &move_data,
        .                           location_table, // no need to create a real one for the promoted, it is not used
        .                           movable_generator,
        .                           fn_self_span_reported: Default::default(),
-- line 307 ----------------------------------------
-- line 325 ----------------------------------------
        .                       };
        .                       promoted_mbcx.report_move_errors(move_errors);
        .                       errors_buffer = promoted_mbcx.errors_buffer;
        .                   };
        .               }
        .           
        .               let dominators = body.dominators();
        .           
  130,140 ( 0.00%)      let mut mbcx = MirBorrowckCtxt {
        .                   infcx,
        .                   param_env,
        .                   body,
        .                   move_data: &mdpe.move_data,
        .                   location_table,
        .                   movable_generator,
        .                   locals_are_invalidated_at_exit,
        .                   fn_self_span_reported: Default::default(),
        .                   access_place_error_reported: Default::default(),
        .                   reservation_error_reported: Default::default(),
        .                   reservation_warnings: Default::default(),
        .                   move_error_reported: BTreeMap::new(),
        .                   uninitialized_error_reported: Default::default(),
   11,568 ( 0.00%)          errors_buffer,
    2,892 ( 0.00%)          regioncx: Rc::clone(&regioncx),
        .                   used_mut: Default::default(),
        .                   used_mut_upvars: SmallVec::new(),
    2,892 ( 0.00%)          borrow_set: Rc::clone(&borrow_set),
   17,352 ( 0.00%)          dominators,
   11,568 ( 0.00%)          upvars,
   11,568 ( 0.00%)          local_names,
        .                   region_names: RefCell::default(),
        .                   next_region_name: RefCell::new(1),
        .                   polonius_output,
        .               };
        .           
        .               // Compute and report region errors, if any.
    8,676 ( 0.00%)      mbcx.report_region_errors(nll_errors);
        .           
        .               let results = BorrowckResults {
   17,352 ( 0.00%)          ever_inits: flow_ever_inits,
   23,136 ( 0.00%)          uninits: flow_uninits,
   31,812 ( 0.00%)          borrows: flow_borrows,
        .               };
        .           
   17,352 ( 0.00%)      mbcx.report_move_errors(move_errors);
        .           
    2,892 ( 0.00%)      rustc_mir_dataflow::visit_results(
        .                   body,
    2,892 ( 0.00%)          traversal::reverse_postorder(body).map(|(bb, _)| bb),
        .                   &results,
        .                   &mut mbcx,
        .               );
        .           
        .               // Convert any reservation warnings into lints.
        .               let reservation_warnings = mem::take(&mut mbcx.reservation_warnings);
        .               for (_, (place, span, location, bk, borrow)) in reservation_warnings {
        .                   let mut initial_diag = mbcx.report_conflicting_borrow(location, (place, span), bk, &borrow);
-- line 381 ----------------------------------------
-- line 406 ----------------------------------------
        .               // For each non-user used mutable variable, check if it's been assigned from
        .               // a user-declared local. If so, then put that local into the used_mut set.
        .               // Note that this set is expected to be small - only upvars from closures
        .               // would have a chance of erroneously adding non-user-defined mutable vars
        .               // to the set.
        .               let temporary_used_locals: FxHashSet<Local> = mbcx
        .                   .used_mut
        .                   .iter()
    2,892 ( 0.00%)          .filter(|&local| !mbcx.body.local_decls[*local].is_user_variable())
        .                   .cloned()
        .                   .collect();
        .               // For the remaining unused locals that are marked as mutable, we avoid linting any that
        .               // were never initialized. These locals may have been removed as unreachable code; or will be
        .               // linted as unused variables.
        .               let unused_mut_locals =
    2,892 ( 0.00%)          mbcx.body.mut_vars_iter().filter(|local| !mbcx.used_mut.contains(local)).collect();
   11,568 ( 0.00%)      mbcx.gather_used_muts(temporary_used_locals, unused_mut_locals);
        .           
        .               debug!("mbcx.used_mut: {:?}", mbcx.used_mut);
   11,568 ( 0.00%)      let used_mut = mbcx.used_mut;
    2,892 ( 0.00%)      for local in mbcx.body.mut_vars_and_args_iter().filter(|local| !used_mut.contains(local)) {
      635 ( 0.00%)          let local_decl = &mbcx.body.local_decls[local];
    3,810 ( 0.00%)          let lint_root = match &mbcx.body.source_scopes[local_decl.source_info.scope].local_data {
        .                       ClearCrossCrate::Set(data) => data.lint_root,
        .                       _ => continue,
        .                   };
        .           
        .                   // Skip over locals that begin with an underscore or have no name
    1,905 ( 0.00%)          match mbcx.local_names[local] {
      322 ( 0.00%)              Some(name) => {
      966 ( 0.00%)                  if name.as_str().starts_with('_') {
        .                               continue;
        .                           }
        .                       }
        .                       None => continue,
        .                   }
        .           
      644 ( 0.00%)          let span = local_decl.source_info.span;
      644 ( 0.00%)          if span.desugaring_kind().is_some() {
        .                       // If the `mut` arises as part of a desugaring, we should ignore it.
        .                       continue;
        .                   }
        .           
    1,610 ( 0.00%)          tcx.struct_span_lint_hir(UNUSED_MUT, lint_root, span, |lint| {
        .                       let mut_span = tcx.sess.source_map().span_until_non_whitespace(span);
        .                       lint.build("variable does not need to be mutable")
        .                           .span_suggestion_short(
        .                               mut_span,
        .                               "remove this `mut`",
        .                               String::new(),
        .                               Applicability::MachineApplicable,
        .                           )
        .                           .emit();
        .                   })
        .               }
        .           
        .               // Buffer any move errors that we collected and de-duplicated.
   26,028 ( 0.00%)      for (_, (_, diag)) in mbcx.move_error_reported {
        .                   diag.buffer(&mut mbcx.errors_buffer);
        .               }
        .           
    2,892 ( 0.00%)      if !mbcx.errors_buffer.is_empty() {
        .                   mbcx.errors_buffer.sort_by_key(|diag| diag.sort_span);
        .           
        .                   for diag in mbcx.errors_buffer.drain(..) {
        .                       mbcx.infcx.tcx.sess.diagnostic().emit_diagnostic(&diag);
        .                   }
        .               }
        .           
        .               let result = BorrowCheckResult {
   11,568 ( 0.00%)          concrete_opaque_types: opaque_type_values,
   14,460 ( 0.00%)          closure_requirements: opt_closure_req,
   17,352 ( 0.00%)          used_mut_upvars: mbcx.used_mut_upvars,
        .               };
        .           
    5,784 ( 0.00%)      let body_with_facts = if return_body_with_facts {
        .                   let output_facts = mbcx.polonius_output.expect("Polonius output was not computed");
        .                   Some(Box::new(BodyWithBorrowckFacts {
        .                       body: body_owned,
        .                       input_facts: *polonius_input.expect("Polonius input facts were not generated"),
        .                       output_facts,
        .                       location_table: location_table_owned,
        .                   }))
        .               } else {
        .                   None
        .               };
        .           
        .               debug!("do_mir_borrowck: result = {:#?}", result);
        .           
   40,488 ( 0.00%)      (result, body_with_facts)
   34,704 ( 0.00%)  }
        .           
        .           /// A `Body` with information computed by the borrow checker. This struct is
        .           /// intended to be consumed by compiler consumers.
        .           ///
        .           /// We need to include the MIR body here because the region identifiers must
        .           /// match the ones in the Polonius facts.
        .           pub struct BodyWithBorrowckFacts<'tcx> {
        .               /// A mir body that contains region identifiers.
-- line 504 ----------------------------------------
-- line 608 ----------------------------------------
        .           // Check that:
        .           // 1. assignments are always made to mutable locations (FIXME: does that still really go here?)
        .           // 2. loans made in overlapping scopes do not conflict
        .           // 3. assignments do not affect things loaned out as immutable
        .           // 4. moves do not affect things loaned out in any way
        .           impl<'cx, 'tcx> rustc_mir_dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtxt<'cx, 'tcx> {
        .               type FlowState = Flows<'cx, 'tcx>;
        .           
1,668,906 ( 0.01%)      fn visit_statement_before_primary_effect(
        .                   &mut self,
        .                   flow_state: &Flows<'cx, 'tcx>,
        .                   stmt: &'cx Statement<'tcx>,
        .                   location: Location,
        .               ) {
        .                   debug!("MirBorrowckCtxt::process_statement({:?}, {:?}): {:?}", location, stmt, flow_state);
        .                   let span = stmt.source_info.span;
        .           
        .                   self.check_activations(location, span, flow_state);
        .           
  927,170 ( 0.00%)          match &stmt.kind {
   97,998 ( 0.00%)              StatementKind::Assign(box (lhs, ref rhs)) => {
        .                           self.consume_rvalue(location, (rhs, span), flow_state);
        .           
  195,996 ( 0.00%)                  self.mutate_place(location, (*lhs, span), Shallow(None), flow_state);
        .                       }
    5,663 ( 0.00%)              StatementKind::FakeRead(box (_, ref place)) => {
        .                           // Read for match doesn't access any memory and is used to
        .                           // assert that a place is safe and live. So we don't have to
        .                           // do any checks here.
        .                           //
        .                           // FIXME: Remove check that the place is initialized. This is
        .                           // needed for now because matches don't have never patterns yet.
        .                           // So this is the only place we prevent
        .                           //      let x: !;
        .                           //      match x {};
        .                           // from compiling.
   22,652 ( 0.00%)                  self.check_if_path_or_subpath_is_moved(
        .                               location,
        .                               InitializationRequiringAction::Use,
   50,967 ( 0.00%)                      (place.as_ref(), span),
        .                               flow_state,
        .                           );
        .                       }
        .                       StatementKind::SetDiscriminant { place, variant_index: _ } => {
        .                           self.mutate_place(location, (**place, span), Shallow(None), flow_state);
        .                       }
        .                       StatementKind::CopyNonOverlapping(box rustc_middle::mir::CopyNonOverlapping {
        .                           ..
-- line 655 ----------------------------------------
-- line 663 ----------------------------------------
        .                       | StatementKind::Coverage(..)
        .                       | StatementKind::AscribeUserType(..)
        .                       | StatementKind::Retag { .. }
        .                       | StatementKind::StorageLive(..) => {
        .                           // `Nop`, `AscribeUserType`, `Retag`, and `StorageLive` are irrelevant
        .                           // to borrow check.
        .                       }
        .                       StatementKind::StorageDead(local) => {
  451,116 ( 0.00%)                  self.access_place(
        .                               location,
  827,046 ( 0.00%)                      (Place::from(*local), span),
        .                               (Shallow(None), Write(WriteKind::StorageDeadOrDrop)),
        .                               LocalMutationIsAllowed::Yes,
        .                               flow_state,
        .                           );
        .                       }
        .                   }
1,483,472 ( 0.01%)      }
        .           
  487,344 ( 0.00%)      fn visit_terminator_before_primary_effect(
        .                   &mut self,
        .                   flow_state: &Flows<'cx, 'tcx>,
        .                   term: &'cx Terminator<'tcx>,
        .                   loc: Location,
        .               ) {
        .                   debug!("MirBorrowckCtxt::process_terminator({:?}, {:?}): {:?}", loc, term, flow_state);
        .                   let span = term.source_info.span;
        .           
        .                   self.check_activations(loc, span, flow_state);
        .           
  304,590 ( 0.00%)          match term.kind {
   14,948 ( 0.00%)              TerminatorKind::SwitchInt { ref discr, switch_ty: _, targets: _ } => {
   14,948 ( 0.00%)                  self.consume_operand(loc, (discr, span), flow_state);
        .                       }
   42,712 ( 0.00%)              TerminatorKind::Drop { place, target: _, unwind: _ } => {
        .                           debug!(
        .                               "visit_terminator_drop \
        .                                loc: {:?} term: {:?} place: {:?} span: {:?}",
        .                               loc, term, place, span
        .                           );
        .           
  128,136 ( 0.00%)                  self.access_place(
        .                               loc,
  192,204 ( 0.00%)                      (place, span),
        .                               (AccessDepth::Drop, Write(WriteKind::StorageDeadOrDrop)),
        .                               LocalMutationIsAllowed::Yes,
        .                               flow_state,
        .                           );
        .                       }
        .                       TerminatorKind::DropAndReplace {
      740 ( 0.00%)                  place: drop_place,
      370 ( 0.00%)                  value: ref new_value,
        .                           target: _,
        .                           unwind: _,
        .                       } => {
    5,920 ( 0.00%)                  self.mutate_place(loc, (drop_place, span), Deep, flow_state);
        .                           self.consume_operand(loc, (new_value, span), flow_state);
        .                       }
        .                       TerminatorKind::Call {
   45,306 ( 0.00%)                  ref func,
        .                           ref args,
        .                           ref destination,
        .                           cleanup: _,
        .                           from_hir_call: _,
        .                           fn_span: _,
        .                       } => {
  120,816 ( 0.00%)                  self.consume_operand(loc, (func, span), flow_state);
        .                           for arg in args {
  139,116 ( 0.00%)                      self.consume_operand(loc, (arg, span), flow_state);
        .                           }
   60,230 ( 0.00%)                  if let Some((dest, _ /*bb*/)) = *destination {
  179,088 ( 0.00%)                      self.mutate_place(loc, (dest, span), Deep, flow_state);
        .                           }
        .                       }
        .                       TerminatorKind::Assert { ref cond, expected: _, ref msg, target: _, cleanup: _ } => {
        .                           self.consume_operand(loc, (cond, span), flow_state);
        .                           use rustc_middle::mir::AssertKind;
        .                           if let AssertKind::BoundsCheck { ref len, ref index } = *msg {
        .                               self.consume_operand(loc, (len, span), flow_state);
        .                               self.consume_operand(loc, (index, span), flow_state);
        .                           }
        .                       }
        .           
      705 ( 0.00%)              TerminatorKind::Yield { ref value, resume: _, resume_arg, drop: _ } => {
    1,551 ( 0.00%)                  self.consume_operand(loc, (value, span), flow_state);
    1,551 ( 0.00%)                  self.mutate_place(loc, (resume_arg, span), Deep, flow_state);
        .                       }
        .           
        .                       TerminatorKind::InlineAsm {
        .                           template: _,
        .                           ref operands,
        .                           options: _,
        .                           line_spans: _,
        .                           destination: _,
-- line 756 ----------------------------------------
-- line 790 ----------------------------------------
        .                       | TerminatorKind::Resume
        .                       | TerminatorKind::Return
        .                       | TerminatorKind::GeneratorDrop
        .                       | TerminatorKind::FalseEdge { real_target: _, imaginary_target: _ }
        .                       | TerminatorKind::FalseUnwind { real_target: _, unwind: _ } => {
        .                           // no data used, thus irrelevant to borrowck
        .                       }
        .                   }
  454,488 ( 0.00%)      }
        .           
  426,426 ( 0.00%)      fn visit_terminator_after_primary_effect(
        .                   &mut self,
        .                   flow_state: &Flows<'cx, 'tcx>,
        .                   term: &'cx Terminator<'tcx>,
        .                   loc: Location,
        .               ) {
   60,918 ( 0.00%)          let span = term.source_info.span;
        .           
  243,672 ( 0.00%)          match term.kind {
        .                       TerminatorKind::Yield { value: _, resume: _, resume_arg: _, drop: _ } => {
      282 ( 0.00%)                  if self.movable_generator {
        .                               // Look for any active borrows to locals
        .                               let borrow_set = self.borrow_set.clone();
        .                               for i in flow_state.borrows.iter() {
        .                                   let borrow = &borrow_set[i];
        .                                   self.check_for_local_borrow(borrow, span);
        .                               }
        .                           }
        .                       }
        .           
        .                       TerminatorKind::Resume | TerminatorKind::Return | TerminatorKind::GeneratorDrop => {
        .                           // Returning from the function implicitly kills storage for all locals and statics.
        .                           // Often, the storage will already have been killed by an explicit
        .                           // StorageDead, but we don't always emit those (notably on unwind paths),
        .                           // so this "extra check" serves as a kind of backup.
   11,056 ( 0.00%)                  let borrow_set = self.borrow_set.clone();
        .                           for i in flow_state.borrows.iter() {
        .                               let borrow = &borrow_set[i];
        .                               self.check_for_invalidation_at_exit(loc, borrow, span);
        .                           }
        .                       }
        .           
        .                       TerminatorKind::Abort
        .                       | TerminatorKind::Assert { .. }
-- line 833 ----------------------------------------
-- line 836 ----------------------------------------
        .                       | TerminatorKind::DropAndReplace { .. }
        .                       | TerminatorKind::FalseEdge { real_target: _, imaginary_target: _ }
        .                       | TerminatorKind::FalseUnwind { real_target: _, unwind: _ }
        .                       | TerminatorKind::Goto { .. }
        .                       | TerminatorKind::SwitchInt { .. }
        .                       | TerminatorKind::Unreachable
        .                       | TerminatorKind::InlineAsm { .. } => {}
        .                   }
  487,344 ( 0.00%)      }
        .           }
        .           
        .           use self::AccessDepth::{Deep, Shallow};
        .           use self::ReadOrWrite::{Activation, Read, Reservation, Write};
        .           
        .           #[derive(Copy, Clone, PartialEq, Eq, Debug)]
        .           enum ArtificialField {
        .               ArrayLength,
-- line 852 ----------------------------------------
-- line 913 ----------------------------------------
        .           /// When checking permissions for a place access, this flag is used to indicate that an immutable
        .           /// local place can be mutated.
        .           //
        .           // FIXME: @nikomatsakis suggested that this flag could be removed with the following modifications:
        .           // - Merge `check_access_permissions()` and `check_if_reassignment_to_immutable_state()`.
        .           // - Split `is_mutable()` into `is_assignable()` (can be directly assigned) and
        .           //   `is_declared_mutable()`.
        .           // - Take flow state into consideration in `is_assignable()` for local variables.
   49,383 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Debug)]
        .           enum LocalMutationIsAllowed {
        .               Yes,
        .               /// We want use of immutable upvars to cause a "write to immutable upvar"
        .               /// error, not an "reassignment" error.
        .               ExceptUpvars,
        .               No,
        .           }
        .           
-- line 929 ----------------------------------------
-- line 970 ----------------------------------------
        .               }
        .           
        .               /// Checks an access to the given place to see if it is allowed. Examines the set of borrows
        .               /// that are in scope, as well as which paths have been initialized, to ensure that (a) the
        .               /// place is initialized and (b) it is not borrowed in some way that would prevent this
        .               /// access.
        .               ///
        .               /// Returns `true` if an error is reported.
3,445,088 ( 0.02%)      fn access_place(
        .                   &mut self,
        .                   location: Location,
        .                   place_span: (Place<'tcx>, Span),
        .                   kind: (AccessDepth, ReadOrWrite),
        .                   is_local_mutation_allowed: LocalMutationIsAllowed,
        .                   flow_state: &Flows<'cx, 'tcx>,
        .               ) {
        .                   let (sd, rw) = kind;
        .           
  861,272 ( 0.00%)          if let Activation(_, borrow_index) = rw {
    9,914 ( 0.00%)              if self.reservation_error_reported.contains(&place_span.0) {
        .                           debug!(
        .                               "skipping access_place for activation of invalid reservation \
        .                                place: {:?} borrow_index: {:?}",
        .                               place_span.0, borrow_index
        .                           );
        .                           return;
        .                       }
        .                   }
        .           
        .                   // Check is_empty() first because it's the common case, and doing that
        .                   // way we avoid the clone() call.
  215,318 ( 0.00%)          if !self.access_place_error_reported.is_empty()
        .                       && self.access_place_error_reported.contains(&(place_span.0, place_span.1))
        .                   {
        .                       debug!(
        .                           "access_place: suppressing error place_span=`{:?}` kind=`{:?}`",
        .                           place_span, kind
        .                       );
        .                       return;
        .                   }
        .           
1,291,908 ( 0.01%)          let mutability_error = self.check_access_permissions(
  861,272 ( 0.00%)              place_span,
        .                       rw,
        .                       is_local_mutation_allowed,
        .                       flow_state,
        .                       location,
        .                   );
        .                   let conflict_error =
2,368,498 ( 0.01%)              self.check_access_for_conflict(location, place_span, sd, rw, flow_state);
        .           
  645,954 ( 0.00%)          if let (Activation(_, borrow_idx), true) = (kind.1, conflict_error) {
        .                       // Suppress this warning when there's an error being emitted for the
        .                       // same borrow: fixing the error is likely to fix the warning.
        .                       self.reservation_warnings.remove(&borrow_idx);
        .                   }
        .           
  645,954 ( 0.00%)          if conflict_error || mutability_error {
        .                       debug!("access_place: logging error place_span=`{:?}` kind=`{:?}`", place_span, kind);
        .           
        .                       self.access_place_error_reported.insert((place_span.0, place_span.1));
        .                   }
1,722,544 ( 0.01%)      }
        .           
        .               fn check_access_for_conflict(
        .                   &mut self,
        .                   location: Location,
        .                   place_span: (Place<'tcx>, Span),
        .                   sd: AccessDepth,
        .                   rw: ReadOrWrite,
        .                   flow_state: &Flows<'cx, 'tcx>,
        .               ) -> bool {
        .                   debug!(
        .                       "check_access_for_conflict(location={:?}, place_span={:?}, sd={:?}, rw={:?})",
        .                       location, place_span, sd, rw,
        .                   );
        .           
  215,318 ( 0.00%)          let mut error_reported = false;
  645,954 ( 0.00%)          let tcx = self.infcx.tcx;
        .                   let body = self.body;
  430,636 ( 0.00%)          let borrow_set = self.borrow_set.clone();
        .           
        .                   // Use polonius output if it has been enabled.
  430,636 ( 0.00%)          let polonius_output = self.polonius_output.clone();
        .                   let borrows_in_scope = if let Some(polonius) = &polonius_output {
        .                       let location = self.location_table.start_index(location);
        .                       Either::Left(polonius.errors_at(location).iter().copied())
        .                   } else {
        .                       Either::Right(flow_state.borrows.iter())
        .                   };
        .           
2,799,134 ( 0.01%)          each_borrow_involving_path(
        .                       self,
        .                       tcx,
        .                       body,
        .                       location,
1,291,908 ( 0.01%)              (sd, place_span.0),
        .                       &borrow_set,
1,291,908 ( 0.01%)              borrows_in_scope,
2,432,939 ( 0.01%)              |this, borrow_index, borrow| match (rw, borrow.kind) {
        .                           // Obviously an activation is compatible with its own
        .                           // reservation (or even prior activating uses of same
        .                           // borrow); so don't check if they interfere.
        .                           //
        .                           // NOTE: *reservations* do conflict with themselves;
        .                           // thus aren't injecting unsoundenss w/ this check.)
    4,957 ( 0.00%)                  (Activation(_, activating), _) if activating == borrow_index => {
        .                               debug!(
        .                                   "check_access_for_conflict place_span: {:?} sd: {:?} rw: {:?} \
        .                                    skipping {:?} b/c activation of same borrow_index",
        .                                   place_span,
        .                                   sd,
        .                                   rw,
        .                                   (borrow_index, borrow),
        .                               );
-- line 1084 ----------------------------------------
-- line 1179 ----------------------------------------
        .                                   }
        .                               }
        .                               Control::Break
        .                           }
        .                       },
        .                   );
        .           
        .                   error_reported
  645,954 ( 0.00%)      }
        .           
  644,340 ( 0.00%)      fn mutate_place(
        .                   &mut self,
        .                   location: Location,
        .                   place_span: (Place<'tcx>, Span),
        .                   kind: AccessDepth,
        .                   flow_state: &Flows<'cx, 'tcx>,
        .               ) {
        .                   // Write of P[i] or *P requires P init'd.
  579,906 ( 0.00%)          self.check_if_assigned_path_is_moved(location, place_span, flow_state);
        .           
        .                   // Special case: you can assign an immutable local variable
        .                   // (e.g., `x = ...`) so long as it has never been initialized
        .                   // before (at this point in the flow).
   64,434 ( 0.00%)          if let Some(local) = place_span.0.as_local() {
  255,952 ( 0.00%)              if let Mutability::Not = self.body.local_decls[local].mutability {
        .                           // check for reassignments to immutable local variables
        .                           self.check_if_reassignment_to_immutable_state(
        .                               location, local, place_span, flow_state,
        .                           );
        .                           return;
        .                       }
        .                   }
        .           
        .                   // Otherwise, use the normal access permission rules.
  522,792 ( 0.00%)          self.access_place(
        .                       location,
  174,264 ( 0.00%)              place_span,
        .                       (kind, Write(WriteKind::Mutate)),
        .                       LocalMutationIsAllowed::No,
        .                       flow_state,
        .                   );
  515,472 ( 0.00%)      }
        .           
        .               fn consume_rvalue(
        .                   &mut self,
        .                   location: Location,
        .                   (rvalue, span): (&'cx Rvalue<'tcx>, Span),
        .                   flow_state: &Flows<'cx, 'tcx>,
        .               ) {
  293,994 ( 0.00%)          match *rvalue {
   86,370 ( 0.00%)              Rvalue::Ref(_ /*rgn*/, bk, place) => {
  333,846 ( 0.00%)                  let access_kind = match bk {
        .                               BorrowKind::Shallow => {
        .                                   (Shallow(Some(ArtificialField::ShallowBorrow)), Read(ReadKind::Borrow(bk)))
        .                               }
        .                               BorrowKind::Shared => (Deep, Read(ReadKind::Borrow(bk))),
        .                               BorrowKind::Unique | BorrowKind::Mut { .. } => {
        .                                   let wk = WriteKind::MutableBorrow(bk);
   11,634 ( 0.00%)                          if allow_two_phase_borrow(bk) {
        .                                       (Deep, Reservation(wk))
        .                                   } else {
        .                                       (Deep, Write(wk))
        .                                   }
        .                               }
        .                           };
        .           
  604,590 ( 0.00%)                  self.access_place(
        .                               location,
  115,160 ( 0.00%)                      (place, span),
        .                               access_kind,
        .                               LocalMutationIsAllowed::No,
        .                               flow_state,
        .                           );
        .           
        .                           let action = if bk == BorrowKind::Shallow {
        .                               InitializationRequiringAction::MatchOn
        .                           } else {
        .                               InitializationRequiringAction::Borrow
        .                           };
        .           
  201,530 ( 0.00%)                  self.check_if_path_or_subpath_is_moved(
        .                               location,
        .                               action,
  201,530 ( 0.00%)                      (place.as_ref(), span),
        .                               flow_state,
        .                           );
        .                       }
        .           
        .                       Rvalue::AddressOf(mutability, place) => {
        .                           let access_kind = match mutability {
        .                               Mutability::Mut => (
        .                                   Deep,
-- line 1270 ----------------------------------------
-- line 1302 ----------------------------------------
        .                       }
        .           
        .                       Rvalue::Len(place) | Rvalue::Discriminant(place) => {
        .                           let af = match *rvalue {
        .                               Rvalue::Len(..) => Some(ArtificialField::ArrayLength),
        .                               Rvalue::Discriminant(..) => None,
        .                               _ => unreachable!(),
        .                           };
   29,040 ( 0.00%)                  self.access_place(
        .                               location,
    7,260 ( 0.00%)                      (place, span),
        .                               (Shallow(af), Read(ReadKind::Copy)),
        .                               LocalMutationIsAllowed::No,
        .                               flow_state,
        .                           );
   12,705 ( 0.00%)                  self.check_if_path_or_subpath_is_moved(
        .                               location,
        .                               InitializationRequiringAction::Use,
   12,705 ( 0.00%)                      (place.as_ref(), span),
        .                               flow_state,
        .                           );
        .                       }
        .           
        .                       Rvalue::BinaryOp(_bin_op, box (ref operand1, ref operand2))
        .                       | Rvalue::CheckedBinaryOp(_bin_op, box (ref operand1, ref operand2)) => {
      120 ( 0.00%)                  self.consume_operand(location, (operand1, span), flow_state);
       84 ( 0.00%)                  self.consume_operand(location, (operand2, span), flow_state);
        .                       }
        .           
        .                       Rvalue::NullaryOp(_op, _ty) => {
        .                           // nullary ops take no dynamic input; no borrowck effect.
        .                       }
        .           
        .                       Rvalue::Aggregate(ref aggregate_kind, ref operands) => {
        .                           // We need to report back the list of mutable upvars that were
        .                           // moved into the closure and subsequently used by the closure,
        .                           // in order to populate our used_mut set.
    7,080 ( 0.00%)                  match **aggregate_kind {
        .                               AggregateKind::Closure(def_id, _) | AggregateKind::Generator(def_id, _, _) => {
        .                                   let BorrowCheckResult { used_mut_upvars, .. } =
    1,252 ( 0.00%)                              self.infcx.tcx.mir_borrowck(def_id.expect_local());
        .                                   debug!("{:?} used_mut_upvars={:?}", def_id, used_mut_upvars);
        .                                   for field in used_mut_upvars {
        .                                       self.propagate_closure_used_mut_upvar(&operands[field.index()]);
        .                                   }
        .                               }
        .                               AggregateKind::Adt(..)
        .                               | AggregateKind::Array(..)
        .                               | AggregateKind::Tuple { .. } => (),
-- line 1350 ----------------------------------------
-- line 1448 ----------------------------------------
        .                               }
        .                               _ => propagate_closure_used_mut_place(self, place),
        .                           }
        .                       }
        .                       Operand::Constant(..) => {}
        .                   }
        .               }
        .           
  702,984 ( 0.00%)      fn consume_operand(
        .                   &mut self,
        .                   location: Location,
        .                   (operand, span): (&'cx Operand<'tcx>, Span),
        .                   flow_state: &Flows<'cx, 'tcx>,
        .               ) {
  315,429 ( 0.00%)          match *operand {
    6,018 ( 0.00%)              Operand::Copy(place) => {
        .                           // copy of place: check if this is "copy of frozen path"
        .                           // (FIXME: see check_loans.rs)
   12,736 ( 0.00%)                  self.access_place(
        .                               location,
   10,030 ( 0.00%)                      (place, span),
        .                               (Deep, Read(ReadKind::Copy)),
        .                               LocalMutationIsAllowed::No,
        .                               flow_state,
        .                           );
        .           
        .                           // Finally, check if path was already moved.
      700 ( 0.00%)                  self.check_if_path_or_subpath_is_moved(
        .                               location,
        .                               InitializationRequiringAction::Use,
      600 ( 0.00%)                      (place.as_ref(), span),
        .                               flow_state,
        .                           );
        .                       }
  112,926 ( 0.00%)              Operand::Move(place) => {
        .                           // move of place: check if this is move of already borrowed path
  283,132 ( 0.00%)                  self.access_place(
        .                               location,
  188,210 ( 0.00%)                      (place, span),
        .                               (Deep, Write(WriteKind::Move)),
        .                               LocalMutationIsAllowed::Yes,
        .                               flow_state,
        .                           );
        .           
        .                           // Finally, check if path was already moved.
   26,184 ( 0.00%)                  self.check_if_path_or_subpath_is_moved(
        .                               location,
        .                               InitializationRequiringAction::Use,
   19,638 ( 0.00%)                      (place.as_ref(), span),
        .                               flow_state,
        .                           );
        .                       }
        .                       Operand::Constant(_) => {}
        .                   }
  468,656 ( 0.00%)      }
        .           
        .               /// Checks whether a borrow of this place is invalidated when the function
        .               /// exits
        .               fn check_for_invalidation_at_exit(
        .                   &mut self,
        .                   location: Location,
        .                   borrow: &BorrowData<'tcx>,
        .                   span: Span,
-- line 1510 ----------------------------------------
-- line 1573 ----------------------------------------
        .                       err.buffer(&mut self.errors_buffer);
        .                   }
        .               }
        .           
        .               fn check_activations(&mut self, location: Location, span: Span, flow_state: &Flows<'cx, 'tcx>) {
        .                   // Two-phase borrow support: For each activation that is newly
        .                   // generated at this statement, check if it interferes with
        .                   // another borrow.
  492,704 ( 0.00%)          let borrow_set = self.borrow_set.clone();
  929,447 ( 0.00%)          for &borrow_index in borrow_set.activations_at_location(location) {
        .                       let borrow = &borrow_set[borrow_index];
        .           
        .                       // only mutable borrows should be 2-phase
   24,785 ( 0.00%)              assert!(match borrow.kind {
        .                           BorrowKind::Shared | BorrowKind::Shallow => false,
        .                           BorrowKind::Unique | BorrowKind::Mut { .. } => true,
        .                       });
        .           
   59,484 ( 0.00%)              self.access_place(
        .                           location,
   29,742 ( 0.00%)                  (borrow.borrowed_place, span),
   44,613 ( 0.00%)                  (Deep, Activation(WriteKind::MutableBorrow(borrow.kind), borrow_index)),
        .                           LocalMutationIsAllowed::No,
        .                           flow_state,
        .                       );
        .                       // We do not need to call `check_if_path_or_subpath_is_moved`
        .                       // again, as we already called it when we made the
        .                       // initial reservation.
        .                   }
        .               }
-- line 1602 ----------------------------------------
-- line 1606 ----------------------------------------
        .                   location: Location,
        .                   local: Local,
        .                   place_span: (Place<'tcx>, Span),
        .                   flow_state: &Flows<'cx, 'tcx>,
        .               ) {
        .                   debug!("check_if_reassignment_to_immutable_state({:?})", local);
        .           
        .                   // Check if any of the initializiations of `local` have happened yet:
  125,208 ( 0.00%)          if let Some(init_index) = self.is_local_ever_initialized(local, flow_state) {
        .                       // And, if so, report an error.
        .                       let init = &self.move_data.inits[init_index];
        .                       let span = init.span(&self.body);
        .                       self.report_illegal_reassignment(location, place_span, span, place_span.0);
        .                   }
        .               }
        .           
  990,964 ( 0.01%)      fn check_if_full_path_is_moved(
        .                   &mut self,
        .                   location: Location,
        .                   desired_action: InitializationRequiringAction,
        .                   place_span: (PlaceRef<'tcx>, Span),
        .                   flow_state: &Flows<'cx, 'tcx>,
        .               ) {
        .                   let maybe_uninits = &flow_state.uninits;
        .           
-- line 1630 ----------------------------------------
-- line 1660 ----------------------------------------
        .                   // Therefore, if we seek out the *closest* prefix for which we
        .                   // have a MovePath, that should capture the initialization
        .                   // state for the place scenario.
        .                   //
        .                   // This code covers scenarios 1, 2, and 3.
        .           
        .                   debug!("check_if_full_path_is_moved place: {:?}", place_span.0);
        .                   let (prefix, mpi) = self.move_path_closest_to(place_span.0);
   76,228 ( 0.00%)          if maybe_uninits.contains(mpi) {
        .                       self.report_use_of_moved_or_uninitialized(
        .                           location,
        .                           desired_action,
        .                           (prefix, place_span.0, place_span.1),
        .                           mpi,
        .                       );
        .                   } // Only query longest prefix with a MovePath, not further
        .                   // ancestors; dataflow recurs on children when parents
        .                   // move (to support partial (re)inits).
        .                   //
        .                   // (I.e., querying parents breaks scenario 7; but may want
        .                   // to do such a query based on partial-init feature-gate.)
  609,824 ( 0.00%)      }
        .           
        .               /// Subslices correspond to multiple move paths, so we iterate through the
        .               /// elements of the base array. For each element we check
        .               ///
        .               /// * Does this element overlap with our slice.
        .               /// * Is any part of it uninitialized.
        .               fn check_if_subslice_element_is_moved(
        .                   &mut self,
-- line 1689 ----------------------------------------
-- line 1719 ----------------------------------------
        .                                       return; // don't bother finding other problems.
        .                                   }
        .                               }
        .                           }
        .                       }
        .                   }
        .               }
        .           
  835,076 ( 0.00%)      fn check_if_path_or_subpath_is_moved(
        .                   &mut self,
        .                   location: Location,
        .                   desired_action: InitializationRequiringAction,
        .                   place_span: (PlaceRef<'tcx>, Span),
        .                   flow_state: &Flows<'cx, 'tcx>,
        .               ) {
  151,832 ( 0.00%)          let maybe_uninits = &flow_state.uninits;
        .           
        .                   // Bad scenarios:
        .                   //
        .                   // 1. Move of `a.b.c`, use of `a` or `a.b`
        .                   //    partial initialization support, one might have `a.x`
        .                   //    initialized but not `a.b`.
        .                   // 2. All bad scenarios from `check_if_full_path_is_moved`
        .                   //
-- line 1742 ----------------------------------------
-- line 1743 ----------------------------------------
        .                   // OK scenarios:
        .                   //
        .                   // 3. Move of `a.b.c`, use of `a.b.d`
        .                   // 4. Uninitialized `a.x`, initialized `a.b`, use of `a.b`
        .                   // 5. Copied `(a.b: &_)`, use of `*(a.b).c`; note that `a.b`
        .                   //    must have been initialized for the use to be sound.
        .                   // 6. Move of `a.b.c` then reinit of `a.b.c.d`, use of `a.b.c.d`
        .           
  531,412 ( 0.00%)          self.check_if_full_path_is_moved(location, desired_action, place_span, flow_state);
        .           
  122,368 ( 0.00%)          if let Some((place_base, ProjectionElem::Subslice { from, to, from_end: false })) =
   75,916 ( 0.00%)              place_span.0.last_projection()
        .                   {
        .                       let place_ty = place_base.ty(self.body(), self.infcx.tcx);
        .                       if let ty::Array(..) = place_ty.ty.kind() {
        .                           self.check_if_subslice_element_is_moved(
        .                               location,
        .                               desired_action,
        .                               (place_base, place_span.1),
        .                               maybe_uninits,
-- line 1762 ----------------------------------------
-- line 1772 ----------------------------------------
        .                   //
        .                   // (Distinct from handling of scenarios 1+2+4 above because
        .                   // `place` does not interfere with suffixes of its prefixes,
        .                   // e.g., `a.b.c` does not interfere with `a.b.d`)
        .                   //
        .                   // This code covers scenario 1.
        .           
        .                   debug!("check_if_path_or_subpath_is_moved place: {:?}", place_span.0);
  303,664 ( 0.00%)          if let Some(mpi) = self.move_path_for_place(place_span.0) {
  189,792 ( 0.00%)              let uninit_mpi = self
        .                           .move_data
        .                           .find_in_move_path_or_its_descendants(mpi, |mpi| maybe_uninits.contains(mpi));
        .           
   94,896 ( 0.00%)              if let Some(uninit_mpi) = uninit_mpi {
        .                           self.report_use_of_moved_or_uninitialized(
        .                               location,
        .                               desired_action,
        .                               (place_span.0, place_span.0, place_span.1),
        .                               uninit_mpi,
        .                           );
        .                           return; // don't bother finding other problems.
        .                       }
        .                   }
  607,328 ( 0.00%)      }
        .           
        .               /// Currently MoveData does not store entries for all places in
        .               /// the input MIR. For example it will currently filter out
        .               /// places that are Copy; thus we do not track places of shared
        .               /// reference type. This routine will walk up a place along its
        .               /// prefixes, searching for a foundational place that *is*
        .               /// tracked in the MoveData.
        .               ///
        .               /// An Err result includes a tag indicated why the search failed.
        .               /// Currently this can only occur if the place is built off of a
        .               /// static variable, as we do not track those in the MoveData.
        .               fn move_path_closest_to(&mut self, place: PlaceRef<'tcx>) -> (PlaceRef<'tcx>, MovePathIndex) {
  990,964 ( 0.01%)          match self.move_data.rev_lookup.find(place) {
        .                       LookupResult::Parent(Some(mpi)) | LookupResult::Exact(mpi) => {
        .                           (self.move_data.move_paths[mpi].place.as_ref(), mpi)
        .                       }
        .                       LookupResult::Parent(None) => panic!("should have move path for every Local"),
        .                   }
        .               }
        .           
        .               fn move_path_for_place(&mut self, place: PlaceRef<'tcx>) -> Option<MovePathIndex> {
        .                   // If returns None, then there is no move path corresponding
        .                   // to a direct owner of `place` (which means there is nothing
        .                   // that borrowck tracks for its analysis).
        .           
  686,812 ( 0.00%)          match self.move_data.rev_lookup.find(place) {
        .                       LookupResult::Parent(_) => None,
        .                       LookupResult::Exact(mpi) => Some(mpi),
        .                   }
        .               }
        .           
        .               fn check_if_assigned_path_is_moved(
        .                   &mut self,
        .                   location: Location,
        .                   (place, span): (Place<'tcx>, Span),
        .                   flow_state: &Flows<'cx, 'tcx>,
        .               ) {
        .                   debug!("check_if_assigned_path_is_moved place: {:?}", place);
        .           
        .                   // None case => assigning to `x` does not require `x` be initialized.
      446 ( 0.00%)          for (place_base, elem) in place.iter_projections().rev() {
    3,032 ( 0.00%)              match elem {
        .                           ProjectionElem::Index(_/*operand*/) |
        .                           ProjectionElem::ConstantIndex { .. } |
        .                           // assigning to P[i] requires P to be valid.
        .                           ProjectionElem::Downcast(_/*adt_def*/, _/*variant_idx*/) =>
        .                           // assigning to (P->variant) is okay if assigning to `P` is okay
        .                           //
        .                           // FIXME: is this true even if P is an adt with a dtor?
        .                           { }
        .           
        .                           // assigning to (*P) requires P to be initialized
        .                           ProjectionElem::Deref => {
    2,184 ( 0.00%)                      self.check_if_full_path_is_moved(
        .                                   location, InitializationRequiringAction::Use,
    1,872 ( 0.00%)                          (place_base, span), flow_state);
        .                               // (base initialized; no need to
        .                               // recur further)
        .                               break;
        .                           }
        .           
        .                           ProjectionElem::Subslice { .. } => {
        .                               panic!("we don't allow assignments to subslices, location: {:?}",
        .                                      location);
        .                           }
        .           
        .                           ProjectionElem::Field(..) => {
        .                               // if type of `P` has a dtor, then
        .                               // assigning to `P.f` requires `P` itself
        .                               // be already initialized
        .                               let tcx = self.infcx.tcx;
      446 ( 0.00%)                      let base_ty = place_base.ty(self.body(), tcx).ty;
    1,338 ( 0.00%)                      match base_ty.kind() {
    2,676 ( 0.00%)                          ty::Adt(def, _) if def.has_dtor(tcx) => {
        .                                       self.check_if_path_or_subpath_is_moved(
        .                                           location, InitializationRequiringAction::Assignment,
        .                                           (place_base, span), flow_state);
        .           
        .                                       // (base initialized; no need to
        .                                       // recur further)
        .                                       break;
        .                                   }
-- line 1877 ----------------------------------------
-- line 1931 ----------------------------------------
        .           
        .                       // Shallow so that we'll stop at any dereference; we'll
        .                       // report errors about issues with such bases elsewhere.
        .                       let maybe_uninits = &flow_state.uninits;
        .           
        .                       // Find the shortest uninitialized prefix you can reach
        .                       // without going over a Deref.
        .                       let mut shortest_uninit_seen = None;
    9,946 ( 0.00%)              for prefix in this.prefixes(base, PrefixSet::Shallow) {
      714 ( 0.00%)                  let mpi = match this.move_path_for_place(prefix) {
        .                               Some(mpi) => mpi,
        .                               None => continue,
        .                           };
        .           
      134 ( 0.00%)                  if maybe_uninits.contains(mpi) {
        .                               debug!(
        .                                   "check_parent_of_field updating shortest_uninit_seen from {:?} to {:?}",
        .                                   shortest_uninit_seen,
        .                                   Some((prefix, mpi))
        .                               );
        .                               shortest_uninit_seen = Some((prefix, mpi));
        .                           } else {
        .                               debug!("check_parent_of_field {:?} is definitely initialized", (prefix, mpi));
        .                           }
        .                       }
        .           
    1,338 ( 0.00%)              if let Some((prefix, mpi)) = shortest_uninit_seen {
        .                           // Check for a reassignment into an uninitialized field of a union (for example,
        .                           // after a move out). In this case, do not report an error here. There is an
        .                           // exception, if this is the first assignment into the union (that is, there is
        .                           // no move out from an earlier location) then this is an attempt at initialization
        .                           // of the union - we should error in that case.
        .                           let tcx = this.infcx.tcx;
        .                           if base.ty(this.body(), tcx).ty.is_union() {
        .                               if this.move_data.path_map[mpi].iter().any(|moi| {
-- line 1965 ----------------------------------------
-- line 1979 ----------------------------------------
        .                   }
        .               }
        .           
        .               /// Checks the permissions for the given place and read or write kind
        .               ///
        .               /// Returns `true` if an error is reported.
        .               fn check_access_permissions(
        .                   &mut self,
  430,636 ( 0.00%)          (place, span): (Place<'tcx>, Span),
        .                   kind: ReadOrWrite,
        .                   is_local_mutation_allowed: LocalMutationIsAllowed,
        .                   flow_state: &Flows<'cx, 'tcx>,
        .                   location: Location,
        .               ) -> bool {
        .                   debug!(
        .                       "check_access_permissions({:?}, {:?}, is_local_mutation_allowed: {:?})",
        .                       place, kind, is_local_mutation_allowed
        .                   );
        .           
        .                   let error_access;
        .                   let the_place_err;
        .           
3,366,164 ( 0.02%)          match kind {
        .                       Reservation(WriteKind::MutableBorrow(
        .                           borrow_kind @ (BorrowKind::Unique | BorrowKind::Mut { .. }),
        .                       ))
        .                       | Write(WriteKind::MutableBorrow(
        .                           borrow_kind @ (BorrowKind::Unique | BorrowKind::Mut { .. }),
        .                       )) => {
   58,170 ( 0.00%)                  let is_local_mutation_allowed = match borrow_kind {
        .                               BorrowKind::Unique => LocalMutationIsAllowed::Yes,
        .                               BorrowKind::Mut { .. } => is_local_mutation_allowed,
        .                               BorrowKind::Shared | BorrowKind::Shallow => unreachable!(),
        .                           };
   40,719 ( 0.00%)                  match self.is_mutable(place.as_ref(), is_local_mutation_allowed) {
        .                               Ok(root_place) => {
        .                                   self.add_used_mut(root_place, flow_state);
        .                                   return false;
        .                               }
        .                               Err(place_err) => {
        .                                   error_access = AccessKind::MutableBorrow;
        .                                   the_place_err = place_err;
        .                               }
        .                           }
        .                       }
        .                       Reservation(WriteKind::Mutate) | Write(WriteKind::Mutate) => {
  304,962 ( 0.00%)                  match self.is_mutable(place.as_ref(), is_local_mutation_allowed) {
        .                               Ok(root_place) => {
        .                                   self.add_used_mut(root_place, flow_state);
        .                                   return false;
        .                               }
        .                               Err(place_err) => {
        .                                   error_access = AccessKind::Mutate;
        .                                   the_place_err = place_err;
        .                               }
-- line 2033 ----------------------------------------
-- line 2041 ----------------------------------------
        .                           | WriteKind::MutableBorrow(BorrowKind::Shallow),
        .                       )
        .                       | Write(
        .                           WriteKind::Move
        .                           | WriteKind::StorageDeadOrDrop
        .                           | WriteKind::MutableBorrow(BorrowKind::Shared)
        .                           | WriteKind::MutableBorrow(BorrowKind::Shallow),
        .                       ) => {
  268,368 ( 0.00%)                  if let (Err(_), true) = (
  939,288 ( 0.00%)                      self.is_mutable(place.as_ref(), is_local_mutation_allowed),
        .                               self.errors_buffer.is_empty(),
        .                           ) {
        .                               // rust-lang/rust#46908: In pure NLL mode this code path should be
        .                               // unreachable, but we use `delay_span_bug` because we can hit this when
        .                               // dereferencing a non-Copy raw pointer *and* have `-Ztreat-err-as-bug`
        .                               // enabled. We don't want to ICE for that case, as other errors will have
        .                               // been emitted (#52262).
        .                               self.infcx.tcx.sess.delay_span_bug(
-- line 2058 ----------------------------------------
-- line 2094 ----------------------------------------
        .                   if previously_initialized {
        .                       self.report_mutability_error(place, span, the_place_err, error_access, location);
        .                       true
        .                   } else {
        .                       false
        .                   }
        .               }
        .           
  329,115 ( 0.00%)      fn is_local_ever_initialized(
        .                   &self,
        .                   local: Local,
        .                   flow_state: &Flows<'cx, 'tcx>,
        .               ) -> Option<InitIndex> {
  197,469 ( 0.00%)          let mpi = self.move_data.rev_lookup.find_local(local);
   65,823 ( 0.00%)          let ii = &self.move_data.init_path_map[mpi];
  275,036 ( 0.00%)          for &index in ii {
  155,134 ( 0.00%)              if flow_state.ever_inits.contains(index) {
        .                           return Some(index);
        .                       }
        .                   }
        .                   None
  263,292 ( 0.00%)      }
        .           
        .               /// Adds the place into the used mutable variables set
  197,532 ( 0.00%)      fn add_used_mut(&mut self, root_place: RootPlace<'tcx>, flow_state: &Flows<'cx, 'tcx>) {
        .                   match root_place {
  148,149 ( 0.00%)              RootPlace { place_local: local, place_projection: [], is_local_mutation_allowed } => {
        .                           // If the local may have been initialized, and it is now currently being
        .                           // mutated, then it is justified to be annotated with the `mut`
        .                           // keyword, since the mutation may be a possible reassignment.
   94,338 ( 0.00%)                  if is_local_mutation_allowed != LocalMutationIsAllowed::Yes
  134,865 ( 0.00%)                      && self.is_local_ever_initialized(local, flow_state).is_some()
        .                           {
        .                               self.used_mut.insert(local);
        .                           }
        .                       }
        .                       RootPlace {
        .                           place_local: _,
        .                           place_projection: _,
        .                           is_local_mutation_allowed: LocalMutationIsAllowed::Yes,
-- line 2133 ----------------------------------------
-- line 2140 ----------------------------------------
        .                           if let Some(field) = self.is_upvar_field_projection(PlaceRef {
        .                               local: place_local,
        .                               projection: place_projection,
        .                           }) {
        .                               self.used_mut_upvars.push(field);
        .                           }
        .                       }
        .                   }
  187,512 ( 0.00%)      }
        .           
        .               /// Whether this value can be written or borrowed mutably.
        .               /// Returns the root place if the place passed in is a projection.
2,118,974 ( 0.01%)      fn is_mutable(
        .                   &self,
        .                   place: PlaceRef<'tcx>,
        .                   is_local_mutation_allowed: LocalMutationIsAllowed,
        .               ) -> Result<RootPlace<'tcx>, PlaceRef<'tcx>> {
        .                   debug!("is_mutable: place={:?}, is_local...={:?}", place, is_local_mutation_allowed);
  596,036 ( 0.00%)          match place.last_projection() {
        .                       None => {
  183,567 ( 0.00%)                  let local = &self.body.local_decls[place.local];
  550,701 ( 0.00%)                  match local.mutability {
   76,438 ( 0.00%)                      Mutability::Not => match is_local_mutation_allowed {
  229,314 ( 0.00%)                          LocalMutationIsAllowed::Yes => Ok(RootPlace {
        .                                       place_local: place.local,
        .                                       place_projection: place.projection,
        .                                       is_local_mutation_allowed: LocalMutationIsAllowed::Yes,
        .                                   }),
        .                                   LocalMutationIsAllowed::ExceptUpvars => Ok(RootPlace {
        .                                       place_local: place.local,
        .                                       place_projection: place.projection,
        .                                       is_local_mutation_allowed: LocalMutationIsAllowed::ExceptUpvars,
        .                                   }),
        .                                   LocalMutationIsAllowed::No => Err(place),
        .                               },
  290,696 ( 0.00%)                      Mutability::Mut => Ok(RootPlace {
        .                                   place_local: place.local,
        .                                   place_projection: place.projection,
        .                                   is_local_mutation_allowed,
        .                               }),
        .                           }
        .                       }
        .                       Some((place_base, elem)) => {
   27,201 ( 0.00%)                  match elem {
        .                               ProjectionElem::Deref => {
    9,098 ( 0.00%)                          let base_ty = place_base.ty(self.body(), self.infcx.tcx).ty;
        .           
        .                                   // Check the kind of deref to decide
   27,294 ( 0.00%)                          match base_ty.kind() {
        .                                       ty::Ref(_, _, mutbl) => {
    9,098 ( 0.00%)                                  match mutbl {
        .                                               // Shared borrowed data is never mutable
        .                                               hir::Mutability::Not => Err(place),
        .                                               // Mutably borrowed data is mutable, but only if we have a
        .                                               // unique path to the `&mut`
        .                                               hir::Mutability::Mut => {
    9,098 ( 0.00%)                                          let mode = match self.is_upvar_field_projection(place) {
        .                                                       Some(field) if self.upvars[field.index()].by_ref => {
        .                                                           is_local_mutation_allowed
        .                                                       }
        .                                                       _ => LocalMutationIsAllowed::Yes,
        .                                                   };
        .           
   27,294 ( 0.00%)                                          self.is_mutable(place_base, mode)
        .                                               }
        .                                           }
        .                                       }
        .                                       ty::RawPtr(tnm) => {
        .                                           match tnm.mutbl {
        .                                               // `*const` raw pointers are not mutable
        .                                               hir::Mutability::Not => Err(place),
        .                                               // `*mut` raw pointers are always mutable, regardless of
-- line 2211 ----------------------------------------
-- line 2228 ----------------------------------------
        .                               // All other projections are owned by their base path, so mutable if
        .                               // base path is mutable
        .                               ProjectionElem::Field(..)
        .                               | ProjectionElem::Index(..)
        .                               | ProjectionElem::ConstantIndex { .. }
        .                               | ProjectionElem::Subslice { .. }
        .                               | ProjectionElem::Downcast(..) => {
        .                                   let upvar_field_projection = self.is_upvar_field_projection(place);
    9,036 ( 0.00%)                          if let Some(field) = upvar_field_projection {
        .                                       let upvar = &self.upvars[field.index()];
        .                                       debug!(
        .                                           "is_mutable: upvar.mutability={:?} local_mutation_is_allowed={:?} \
        .                                            place={:?}, place_base={:?}",
        .                                           upvar, is_local_mutation_allowed, place, place_base
        .                                       );
      480 ( 0.00%)                              match (upvar.place.mutability, is_local_mutation_allowed) {
        .                                           (
        .                                               Mutability::Not,
        .                                               LocalMutationIsAllowed::No
        .                                               | LocalMutationIsAllowed::ExceptUpvars,
        .                                           ) => Err(place),
        .                                           (Mutability::Not, LocalMutationIsAllowed::Yes)
        .                                           | (Mutability::Mut, _) => {
        .                                               // Subtle: this is an upvar
-- line 2251 ----------------------------------------
-- line 2270 ----------------------------------------
        .                                               // fn main() {
        .                                               //     let var = Vec::new();
        .                                               //     foo(move || {
        .                                               //         var.push(1);
        .                                               //     });
        .                                               // }
        .                                               // ```
        .                                               let _ =
      864 ( 0.00%)                                          self.is_mutable(place_base, is_local_mutation_allowed)?;
        .                                               Ok(RootPlace {
        .                                                   place_local: place.local,
        .                                                   place_projection: place.projection,
        .                                                   is_local_mutation_allowed,
        .                                               })
        .                                           }
        .                                       }
        .                                   } else {
        .                                       self.is_mutable(place_base, is_local_mutation_allowed)
        .                                   }
        .                               }
        .                           }
        .                       }
        .                   }
1,541,072 ( 0.01%)      }
        .           
        .               /// If `place` is a field projection, and the field is being projected from a closure type,
        .               /// then returns the index of the field being projected. Note that this closure will always
        .               /// be `self` in the current MIR, because that is the only time we directly access the fields
        .               /// of a closure type.
        .               fn is_upvar_field_projection(&self, place_ref: PlaceRef<'tcx>) -> Option<Field> {
   81,603 ( 0.00%)          path_utils::is_upvar_field_projection(self.infcx.tcx, &self.upvars, place_ref, self.body())
        .               }
        .           }
        .           
        .           /// The degree of overlap between 2 places for borrow-checking.
        .           enum Overlap {
        .               /// The places might partially overlap - in this case, we give
        .               /// up and say that they might conflict. This occurs when
        .               /// different fields of a union are borrowed. For example,
-- line 2308 ----------------------------------------

6,208,856 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_borrowck/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs
--------------------------------------------------------------------------------
Ir                 

-- line 27 ----------------------------------------
        .           impl CacheEntry {
        .               #[inline]
        .               fn update(
        .                   &mut self,
        .                   new_file_and_idx: Option<(Lrc<SourceFile>, usize)>,
        .                   pos: BytePos,
        .                   time_stamp: usize,
        .               ) {
   76,337 ( 0.00%)          if let Some((file, file_idx)) = new_file_and_idx {
   43,766 ( 0.00%)              self.file = file;
   62,344 ( 0.00%)              self.file_index = file_idx;
        .                   }
        .           
   36,909 ( 0.00%)          let line_index = self.file.lookup_line(pos).unwrap();
        .                   let line_bounds = self.file.line_bounds(line_index);
  144,558 ( 0.00%)          self.line_number = line_index + 1;
  219,006 ( 0.00%)          self.line = line_bounds;
        .                   self.touch(time_stamp);
        .               }
        .           
        .               #[inline]
        .               fn touch(&mut self, time_stamp: usize) {
1,013,481 ( 0.01%)          self.time_stamp = time_stamp;
        .               }
        .           }
        .           
        .           #[derive(Clone)]
        .           pub struct CachingSourceMapView<'sm> {
        .               source_map: &'sm SourceMap,
        .               line_cache: [CacheEntry; 3],
        .               time_stamp: usize,
        .           }
        .           
        .           impl<'sm> CachingSourceMapView<'sm> {
   29,690 ( 0.00%)      pub fn new(source_map: &'sm SourceMap) -> CachingSourceMapView<'sm> {
        .                   let files = source_map.files();
   14,845 ( 0.00%)          let first_file = files[0].clone();
        .                   let entry = CacheEntry {
        .                       time_stamp: 0,
        .                       line_number: 0,
        .                       line: BytePos(0)..BytePos(0),
        .                       file: first_file,
        .                       file_index: 0,
        .                   };
        .           
   74,225 ( 0.00%)          CachingSourceMapView {
        .                       source_map,
  103,915 ( 0.00%)              line_cache: [entry.clone(), entry.clone(), entry],
        .                       time_stamp: 0,
        .                   }
   59,380 ( 0.00%)      }
        .           
        .               pub fn byte_pos_to_line_and_col(
        .                   &mut self,
        .                   pos: BytePos,
        .               ) -> Option<(Lrc<SourceFile>, usize, BytePos)> {
        .                   self.time_stamp += 1;
        .           
        .                   // Check if the position is in one of the cached lines
-- line 85 ----------------------------------------
-- line 106 ----------------------------------------
        .                   };
        .           
        .                   let cache_entry = &mut self.line_cache[oldest];
        .                   cache_entry.update(new_file_and_idx, pos, self.time_stamp);
        .           
        .                   Some((cache_entry.file.clone(), cache_entry.line_number, pos - cache_entry.line.start))
        .               }
        .           
3,770,774 ( 0.02%)      pub fn span_data_to_lines_and_cols(
        .                   &mut self,
        .                   span_data: &SpanData,
        .               ) -> Option<(Lrc<SourceFile>, usize, BytePos, usize, BytePos)> {
2,154,728 ( 0.01%)          self.time_stamp += 1;
        .           
        .                   // Check if lo and hi are in the cached lines.
  538,682 ( 0.00%)          let lo_cache_idx = self.cache_entry_index(span_data.lo);
  538,682 ( 0.00%)          let hi_cache_idx = self.cache_entry_index(span_data.hi);
        .           
  954,308 ( 0.00%)          if lo_cache_idx != -1 && hi_cache_idx != -1 {
        .                       // Cache hit for span lo and hi. Check if they belong to the same file.
        .                       let result = {
  949,598 ( 0.00%)                  let lo = &self.line_cache[lo_cache_idx as usize];
        .                           let hi = &self.line_cache[hi_cache_idx as usize];
        .           
2,848,794 ( 0.01%)                  if lo.file_index != hi.file_index {
        .                               return None;
        .                           }
        .           
        .                           (
  949,598 ( 0.00%)                      lo.file.clone(),
        .                               lo.line_number,
        .                               span_data.lo - lo.line.start,
  474,799 ( 0.00%)                      hi.line_number,
        .                               span_data.hi - hi.line.start,
        .                           )
        .                       };
        .           
  474,799 ( 0.00%)              self.line_cache[lo_cache_idx as usize].touch(self.time_stamp);
  474,799 ( 0.00%)              self.line_cache[hi_cache_idx as usize].touch(self.time_stamp);
        .           
1,899,196 ( 0.01%)              return Some(result);
        .                   }
        .           
        .                   // No cache hit or cache hit for only one of span lo and hi.
  123,056 ( 0.00%)          let oldest = if lo_cache_idx != -1 || hi_cache_idx != -1 {
        .                       let avoid_idx = if lo_cache_idx != -1 { lo_cache_idx } else { hi_cache_idx };
        .                       self.oldest_cache_entry_index_avoid(avoid_idx as usize)
        .                   } else {
        .                       self.oldest_cache_entry_index()
        .                   };
        .           
        .                   // If the entry doesn't point to the correct file, get the new file and index.
        .                   // Return early if the file containing beginning of span doesn't contain end of span.
  509,280 ( 0.00%)          let new_file_and_idx = if !file_contains(&self.line_cache[oldest].file, span_data.lo) {
  134,870 ( 0.00%)              let new_file_and_idx = self.file_for_position(span_data.lo)?;
  161,844 ( 0.00%)              if !file_contains(&new_file_and_idx.0, span_data.hi) {
        .                           return None;
        .                       }
        .           
  107,896 ( 0.00%)              Some(new_file_and_idx)
        .                   } else {
        .                       let file = &self.line_cache[oldest].file;
  110,727 ( 0.00%)              if !file_contains(&file, span_data.hi) {
        .                           return None;
        .                       }
        .           
  110,727 ( 0.00%)              None
        .                   };
        .           
        .                   // Update the cache entries.
  319,415 ( 0.00%)          let (lo_idx, hi_idx) = match (lo_cache_idx, hi_cache_idx) {
        .                       // Oldest cache entry is for span_data.lo line.
        .                       (-1, -1) => {
        .                           let lo = &mut self.line_cache[oldest];
        .                           lo.update(new_file_and_idx, span_data.lo, self.time_stamp);
        .           
  165,903 ( 0.00%)                  if !lo.line.contains(&span_data.hi) {
        .                               let new_file_and_idx = Some((lo.file.clone(), lo.file_index));
        .                               let next_oldest = self.oldest_cache_entry_index_avoid(oldest);
        .                               let hi = &mut self.line_cache[next_oldest];
        .                               hi.update(new_file_and_idx, span_data.hi, self.time_stamp);
        .                               (oldest, next_oldest)
        .                           } else {
        .                               (oldest, oldest)
        .                           }
        .                       }
        .                       // Oldest cache entry is for span_data.lo line.
        .                       (-1, _) => {
        .                           let lo = &mut self.line_cache[oldest];
        .                           lo.update(new_file_and_idx, span_data.lo, self.time_stamp);
    4,710 ( 0.00%)                  let hi = &mut self.line_cache[hi_cache_idx as usize];
    7,065 ( 0.00%)                  hi.touch(self.time_stamp);
        .                           (oldest, hi_cache_idx as usize)
        .                       }
        .                       // Oldest cache entry is for span_data.hi line.
        .                       (_, -1) => {
        .                           let hi = &mut self.line_cache[oldest];
    6,227 ( 0.00%)                  hi.update(new_file_and_idx, span_data.hi, self.time_stamp);
   12,454 ( 0.00%)                  let lo = &mut self.line_cache[lo_cache_idx as usize];
   24,908 ( 0.00%)                  lo.touch(self.time_stamp);
        .                           (lo_cache_idx as usize, oldest)
        .                       }
        .                       _ => {
        .                           panic!();
        .                       }
        .                   };
        .           
        .                   let lo = &self.line_cache[lo_idx];
        .                   let hi = &self.line_cache[hi_idx];
        .           
        .                   // Span lo and hi may equal line end when last line doesn't
        .                   // end in newline, hence the inclusive upper bounds below.
  127,766 ( 0.00%)          assert!(span_data.lo >= lo.line.start);
   63,883 ( 0.00%)          assert!(span_data.lo <= lo.line.end);
  127,766 ( 0.00%)          assert!(span_data.hi >= hi.line.start);
   63,883 ( 0.00%)          assert!(span_data.hi <= hi.line.end);
  319,415 ( 0.00%)          assert!(lo.file.contains(span_data.lo));
  191,649 ( 0.00%)          assert!(lo.file.contains(span_data.hi));
  191,649 ( 0.00%)          assert_eq!(lo.file_index, hi.file_index);
        .           
  191,649 ( 0.00%)          Some((
   63,883 ( 0.00%)              lo.file.clone(),
        .                       lo.line_number,
        .                       span_data.lo - lo.line.start,
   63,883 ( 0.00%)              hi.line_number,
        .                       span_data.hi - hi.line.start,
        .                   ))
4,848,138 ( 0.02%)      }
        .           
        .               fn cache_entry_index(&self, pos: BytePos) -> isize {
        .                   for (idx, cache_entry) in self.line_cache.iter().enumerate() {
5,739,890 ( 0.03%)              if cache_entry.line.contains(&pos) {
        .                           return idx as isize;
        .                       }
        .                   }
        .           
        .                   -1
        .               }
        .           
        .               fn oldest_cache_entry_index(&self) -> usize {
        .                   let mut oldest = 0;
        .           
        .                   for idx in 1..self.line_cache.len() {
  331,806 ( 0.00%)              if self.line_cache[idx].time_stamp < self.line_cache[oldest].time_stamp {
        .                           oldest = idx;
        .                       }
        .                   }
        .           
        .                   oldest
        .               }
        .           
        .               fn oldest_cache_entry_index_avoid(&self, avoid_idx: usize) -> usize {
        .                   let mut oldest = if avoid_idx != 0 { 0 } else { 1 };
        .           
        .                   for idx in 0..self.line_cache.len() {
   98,378 ( 0.00%)              if idx != avoid_idx
   55,307 ( 0.00%)                  && self.line_cache[idx].time_stamp < self.line_cache[oldest].time_stamp
        .                       {
        .                           oldest = idx;
        .                       }
        .                   }
        .           
        .                   oldest
        .               }
        .           
  134,870 ( 0.00%)      fn file_for_position(&self, pos: BytePos) -> Option<(Lrc<SourceFile>, usize)> {
   26,974 ( 0.00%)          if !self.source_map.files().is_empty() {
   53,948 ( 0.00%)              let file_idx = self.source_map.lookup_source_file_idx(pos);
        .                       let file = &self.source_map.files()[file_idx];
        .           
  215,792 ( 0.00%)              if file_contains(file, pos) {
        .                           return Some((file.clone(), file_idx));
        .                       }
        .                   }
        .           
        .                   None
  134,870 ( 0.00%)      }
        .           }
        .           
        .           #[inline]
        .           fn file_contains(file: &SourceFile, pos: BytePos) -> bool {
        .               // `SourceMap::lookup_source_file_idx` and `SourceFile::contains` both consider the position
        .               // one past the end of a file to belong to it. Normally, that's what we want. But for the
        .               // purposes of converting a byte position to a line and column number, we can't come up with a
        .               // line and column number if the file is empty, because an empty file doesn't contain any
-- line 290 ----------------------------------------

6,852,418 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs
--------------------------------------------------------------------------------
Ir                  

-- line 186 ----------------------------------------
         .           /// // use the values stored in map
         .           /// ```
         .           pub struct HashMap<K, V, S = DefaultHashBuilder, A: Allocator + Clone = Global> {
         .               pub(crate) hash_builder: S,
         .               pub(crate) table: RawTable<(K, V), A>,
         .           }
         .           
         .           impl<K: Clone, V: Clone, S: Clone, A: Allocator + Clone> Clone for HashMap<K, V, S, A> {
     2,032 ( 0.00%)      fn clone(&self) -> Self {
     5,081 ( 0.00%)          HashMap {
         .                       hash_builder: self.hash_builder.clone(),
       926 ( 0.00%)              table: self.table.clone(),
         .                   }
     2,286 ( 0.00%)      }
         .           
         .               fn clone_from(&mut self, source: &Self) {
         .                   self.table.clone_from(&source.table);
         .           
         .                   // Update hash_builder only if we successfully cloned all elements.
         .                   self.hash_builder.clone_from(&source.hash_builder);
         .               }
         .           }
-- line 207 ----------------------------------------
-- line 210 ----------------------------------------
         .           /// instances of any functions like RawTable::reserve from being generated
         .           #[cfg_attr(feature = "inline-more", inline)]
         .           pub(crate) fn make_hasher<K, Q, V, S>(hash_builder: &S) -> impl Fn(&(Q, V)) -> u64 + '_
         .           where
         .               K: Borrow<Q>,
         .               Q: Hash,
         .               S: BuildHasher,
         .           {
 1,038,627 ( 0.01%)      move |val| make_hash::<K, Q, S>(hash_builder, &val.0)
         .           }
         .           
         .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
         .           /// instances of any functions like RawTable::reserve from being generated
         .           #[cfg_attr(feature = "inline-more", inline)]
         .           fn equivalent_key<Q, K, V>(k: &Q) -> impl Fn(&(K, V)) -> bool + '_
         .           where
         .               K: Borrow<Q>,
         .               Q: ?Sized + Eq,
         .           {
 3,169,164 ( 0.02%)      move |x| k.eq(x.0.borrow())
         .           }
         .           
         .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
         .           /// instances of any functions like RawTable::reserve from being generated
         .           #[cfg_attr(feature = "inline-more", inline)]
         .           fn equivalent<Q, K>(k: &Q) -> impl Fn(&K) -> bool + '_
         .           where
         .               K: Borrow<Q>,
         .               Q: ?Sized + Eq,
         .           {
 4,320,139 ( 0.02%)      move |x| k.eq(x.borrow())
         .           }
         .           
         .           #[cfg(not(feature = "nightly"))]
         .           #[cfg_attr(feature = "inline-more", inline)]
         .           pub(crate) fn make_hash<K, Q, S>(hash_builder: &S, val: &Q) -> u64
         .           where
         .               K: Borrow<Q>,
         .               Q: Hash + ?Sized,
-- line 248 ----------------------------------------
-- line 251 ----------------------------------------
         .               use core::hash::Hasher;
         .               let mut state = hash_builder.build_hasher();
         .               val.hash(&mut state);
         .               state.finish()
         .           }
         .           
         .           #[cfg(feature = "nightly")]
         .           #[cfg_attr(feature = "inline-more", inline)]
         2 ( 0.00%)  pub(crate) fn make_hash<K, Q, S>(hash_builder: &S, val: &Q) -> u64
         .           where
         .               K: Borrow<Q>,
         .               Q: Hash + ?Sized,
         .               S: BuildHasher,
         .           {
    68,072 ( 0.00%)      hash_builder.hash_one(val)
         4 ( 0.00%)  }
         .           
         .           #[cfg(not(feature = "nightly"))]
         .           #[cfg_attr(feature = "inline-more", inline)]
         .           pub(crate) fn make_insert_hash<K, S>(hash_builder: &S, val: &K) -> u64
         .           where
         .               K: Hash,
         .               S: BuildHasher,
         .           {
-- line 274 ----------------------------------------
-- line 280 ----------------------------------------
         .           
         .           #[cfg(feature = "nightly")]
         .           #[cfg_attr(feature = "inline-more", inline)]
         .           pub(crate) fn make_insert_hash<K, S>(hash_builder: &S, val: &K) -> u64
         .           where
         .               K: Hash,
         .               S: BuildHasher,
         .           {
 1,226,997 ( 0.01%)      hash_builder.hash_one(val)
         .           }
         .           
         .           #[cfg(feature = "ahash")]
         .           impl<K, V> HashMap<K, V, DefaultHashBuilder> {
         .               /// Creates an empty `HashMap`.
         .               ///
         .               /// The hash map is initially created with a capacity of 0, so it will not allocate until it
         .               /// is first inserted into.
-- line 296 ----------------------------------------
-- line 367 ----------------------------------------
         .               /// let s = DefaultHashBuilder::default();
         .               /// let mut map = HashMap::with_hasher(s);
         .               /// map.insert(1, 2);
         .               /// ```
         .               ///
         .               /// [`BuildHasher`]: ../../std/hash/trait.BuildHasher.html
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub const fn with_hasher(hash_builder: S) -> Self {
 1,629,825 ( 0.01%)          Self {
         .                       hash_builder,
         .                       table: RawTable::new(),
         .                   }
         .               }
         .           
         .               /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`
         .               /// to hash the keys.
         .               ///
-- line 383 ----------------------------------------
-- line 437 ----------------------------------------
         .               /// use hashbrown::hash_map::DefaultHashBuilder;
         .               ///
         .               /// let s = DefaultHashBuilder::default();
         .               /// let mut map = HashMap::with_hasher(s);
         .               /// map.insert(1, 2);
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn with_hasher_in(hash_builder: S, alloc: A) -> Self {
       313 ( 0.00%)          Self {
         .                       hash_builder,
         .                       table: RawTable::new_in(alloc),
         .                   }
         .               }
         .           
         .               /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`
         .               /// to hash the keys. It will be allocated with the given allocator.
         .               ///
-- line 453 ----------------------------------------
-- line 663 ----------------------------------------
         .               ///
         .               /// let mut a = HashMap::new();
         .               /// assert_eq!(a.len(), 0);
         .               /// a.insert(1, "a");
         .               /// assert_eq!(a.len(), 1);
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn len(&self) -> usize {
   131,974 ( 0.00%)          self.table.len()
         .               }
         .           
         .               /// Returns `true` if the map contains no elements.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// use hashbrown::HashMap;
-- line 679 ----------------------------------------
-- line 680 ----------------------------------------
         .               ///
         .               /// let mut a = HashMap::new();
         .               /// assert!(a.is_empty());
         .               /// a.insert(1, "a");
         .               /// assert!(!a.is_empty());
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn is_empty(&self) -> bool {
   654,951 ( 0.00%)          self.len() == 0
         .               }
         .           
         .               /// Clears the map, returning all key-value pairs as an iterator. Keeps the
         .               /// allocated memory for reuse.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
-- line 696 ----------------------------------------
-- line 790 ----------------------------------------
         .               /// use hashbrown::HashMap;
         .               ///
         .               /// let mut a = HashMap::new();
         .               /// a.insert(1, "a");
         .               /// a.clear();
         .               /// assert!(a.is_empty());
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
         6 ( 0.00%)      pub fn clear(&mut self) {
         .                   self.table.clear();
         6 ( 0.00%)      }
         .           
         .               /// Creates a consuming iterator visiting all the keys in arbitrary order.
         .               /// The map cannot be used after calling this.
         .               /// The iterator element type is `K`.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
-- line 808 ----------------------------------------
-- line 963 ----------------------------------------
         .               /// }
         .               ///
         .               /// assert_eq!(letters[&'s'], 2);
         .               /// assert_eq!(letters[&'t'], 3);
         .               /// assert_eq!(letters[&'u'], 1);
         .               /// assert_eq!(letters.get(&'y'), None);
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
     8,092 ( 0.00%)      pub fn entry(&mut self, key: K) -> Entry<'_, K, V, S, A> {
         .                   let hash = make_insert_hash::<K, S>(&self.hash_builder, &key);
         .                   if let Some(elem) = self.table.find(hash, equivalent_key(&key)) {
     3,985 ( 0.00%)              Entry::Occupied(OccupiedEntry {
         .                           hash,
         .                           key: Some(key),
         .                           elem,
         .                           table: self,
         .                       })
         .                   } else {
     6,130 ( 0.00%)              Entry::Vacant(VacantEntry {
         .                           hash,
         .                           key,
         .                           table: self,
         .                       })
         .                   }
    10,115 ( 0.00%)      }
         .           
         .               /// Gets the given key's corresponding entry by reference in the map for in-place manipulation.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// use hashbrown::HashMap;
         .               ///
-- line 995 ----------------------------------------
-- line 1047 ----------------------------------------
         .               /// ```
         .               #[inline]
         .               pub fn get<Q: ?Sized>(&self, k: &Q) -> Option<&V>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
 6,663,267 ( 0.03%)          match self.get_inner(k) {
         .                       Some(&(_, ref v)) => Some(v),
         .                       None => None,
         .                   }
         .               }
         .           
         .               /// Returns the key-value pair corresponding to the supplied key.
         .               ///
         .               /// The supplied key may be any borrowed form of the map's key type, but
-- line 1063 ----------------------------------------
-- line 1091 ----------------------------------------
         .               }
         .           
         .               #[inline]
         .               fn get_inner<Q: ?Sized>(&self, k: &Q) -> Option<&(K, V)>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
 7,727,907 ( 0.04%)          if self.table.is_empty() {
         .                       None
         .                   } else {
         1 ( 0.00%)              let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
         .                       self.table.get(hash, equivalent_key(k))
         .                   }
         .               }
         .           
         .               /// Returns the key-value pair corresponding to the supplied key, with a mutable reference to value.
         .               ///
         .               /// The supplied key may be any borrowed form of the map's key type, but
         .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
-- line 1110 ----------------------------------------
-- line 1155 ----------------------------------------
         .               /// use hashbrown::HashMap;
         .               ///
         .               /// let mut map = HashMap::new();
         .               /// map.insert(1, "a");
         .               /// assert_eq!(map.contains_key(&1), true);
         .               /// assert_eq!(map.contains_key(&2), false);
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
 2,870,390 ( 0.01%)      pub fn contains_key<Q: ?Sized>(&self, k: &Q) -> bool
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
         .                   self.get_inner(k).is_some()
 3,637,028 ( 0.02%)      }
         .           
         .               /// Returns a mutable reference to the value corresponding to the key.
         .               ///
         .               /// The key may be any borrowed form of the map's key type, but
         .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
         .               /// the key type.
         .               ///
         .               /// [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html
-- line 1177 ----------------------------------------
-- line 1185 ----------------------------------------
         .               /// let mut map = HashMap::new();
         .               /// map.insert(1, "a");
         .               /// if let Some(x) = map.get_mut(&1) {
         .               ///     *x = "b";
         .               /// }
         .               /// assert_eq!(map[&1], "b");
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
     5,366 ( 0.00%)      pub fn get_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut V>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
    28,374 ( 0.00%)          match self.get_inner_mut(k) {
         .                       Some(&mut (_, ref mut v)) => Some(v),
         .                       None => None,
         .                   }
    10,732 ( 0.00%)      }
         .           
         .               #[inline]
         .               fn get_inner_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut (K, V)>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
     9,555 ( 0.00%)          if self.table.is_empty() {
         .                       None
         .                   } else {
         .                       let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
    16,368 ( 0.00%)              self.table.get_mut(hash, equivalent_key(k))
         .                   }
         .               }
         .           
         .               /// Attempts to get mutable references to `N` values in the map at once.
         .               ///
         .               /// Returns an array of length `N` with the results of each query. For soundness, at most one
         .               /// mutable reference will be returned to any value. `None` will be returned if any of the
         .               /// keys are duplicates or missing.
-- line 1223 ----------------------------------------
-- line 1495 ----------------------------------------
         .               /// assert_eq!(map.insert(37, "a"), None);
         .               /// assert_eq!(map.is_empty(), false);
         .               ///
         .               /// map.insert(37, "b");
         .               /// assert_eq!(map.insert(37, "c"), Some("b"));
         .               /// assert_eq!(map[&37], "c");
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
19,072,827 ( 0.10%)      pub fn insert(&mut self, k: K, v: V) -> Option<V> {
         .                   let hash = make_insert_hash::<K, S>(&self.hash_builder, &k);
    26,750 ( 0.00%)          if let Some((_, item)) = self.table.get_mut(hash, equivalent_key(&k)) {
         .                       Some(mem::replace(item, v))
         .                   } else {
 7,840,362 ( 0.04%)              self.table
 7,905,534 ( 0.04%)                  .insert(hash, (k, v), make_hasher::<K, _, V, S>(&self.hash_builder));
   913,738 ( 0.00%)              None
         .                   }
17,721,828 ( 0.09%)      }
         .           
         .               /// Insert a key-value pair into the map without checking
         .               /// if the key already exists in the map.
         .               ///
         .               /// Returns a reference to the key and value just inserted.
         .               ///
         .               /// This operation is safe if a key does not exist in the map.
         .               ///
-- line 1520 ----------------------------------------
-- line 1592 ----------------------------------------
         .               /// use hashbrown::HashMap;
         .               ///
         .               /// let mut map = HashMap::new();
         .               /// map.insert(1, "a");
         .               /// assert_eq!(map.remove(&1), Some("a"));
         .               /// assert_eq!(map.remove(&1), None);
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
   596,455 ( 0.00%)      pub fn remove<Q: ?Sized>(&mut self, k: &Q) -> Option<V>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
 3,274,113 ( 0.02%)          match self.remove_entry(k) {
   167,298 ( 0.00%)              Some((_, v)) => Some(v),
   486,098 ( 0.00%)              None => None,
         .                   }
 1,370,584 ( 0.01%)      }
         .           
         .               /// Removes a key from the map, returning the stored key and value if the
         .               /// key was previously in the map.
         .               ///
         .               /// The key may be any borrowed form of the map's key type, but
         .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
         .               /// the key type.
         .               ///
-- line 1618 ----------------------------------------
-- line 1631 ----------------------------------------
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn remove_entry<Q: ?Sized>(&mut self, k: &Q) -> Option<(K, V)>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
         .                   let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
 1,473,726 ( 0.01%)          self.table.remove_entry(hash, equivalent_key(k))
         .               }
         .           }
         .           
         .           impl<K, V, S, A: Allocator + Clone> HashMap<K, V, S, A> {
         .               /// Creates a raw entry builder for the HashMap.
         .               ///
         .               /// Raw entries provide the lowest level of control for searching and
         .               /// manipulating a map. They must be manually initialized with a hash and
-- line 1647 ----------------------------------------
-- line 2209 ----------------------------------------
         .               /// Creates a `RawEntryMut` from the given key and its hash.
         .               #[inline]
         .               #[allow(clippy::wrong_self_convention)]
         .               pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> RawEntryMut<'a, K, V, S, A>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Eq,
         .               {
17,844,458 ( 0.09%)          self.from_hash(hash, equivalent(k))
         .               }
         .           }
         .           
         .           impl<'a, K, V, S, A: Allocator + Clone> RawEntryBuilderMut<'a, K, V, S, A> {
         .               /// Creates a `RawEntryMut` from the given hash.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[allow(clippy::wrong_self_convention)]
47,774,577 ( 0.25%)      pub fn from_hash<F>(self, hash: u64, is_match: F) -> RawEntryMut<'a, K, V, S, A>
         .               where
         .                   for<'b> F: FnMut(&'b K) -> bool,
         .               {
         .                   self.search(hash, is_match)
50,499,067 ( 0.26%)      }
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn search<F>(self, hash: u64, mut is_match: F) -> RawEntryMut<'a, K, V, S, A>
         .               where
         .                   for<'b> F: FnMut(&'b K) -> bool,
         .               {
 5,600,988 ( 0.03%)          match self.map.table.find(hash, |(k, _)| is_match(k)) {
31,454,759 ( 0.16%)              Some(elem) => RawEntryMut::Occupied(RawOccupiedEntryMut {
         .                           elem,
         .                           table: &mut self.map.table,
         .                           hash_builder: &self.map.hash_builder,
         .                       }),
 1,364,301 ( 0.01%)              None => RawEntryMut::Vacant(RawVacantEntryMut {
         .                           table: &mut self.map.table,
         .                           hash_builder: &self.map.hash_builder,
         .                       }),
         .                   }
         .               }
         .           }
         .           
         .           impl<'a, K, V, S, A: Allocator + Clone> RawEntryBuilder<'a, K, V, S, A> {
-- line 2251 ----------------------------------------
-- line 2260 ----------------------------------------
         .               {
         .                   let hash = make_hash::<K, Q, S>(&self.map.hash_builder, k);
         .                   self.from_key_hashed_nocheck(hash, k)
         .               }
         .           
         .               /// Access an entry by a key and its hash.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[allow(clippy::wrong_self_convention)]
 9,087,804 ( 0.05%)      pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> Option<(&'a K, &'a V)>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Eq,
         .               {
11,261,702 ( 0.06%)          self.from_hash(hash, equivalent(k))
16,610,228 ( 0.09%)      }
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn search<F>(self, hash: u64, mut is_match: F) -> Option<(&'a K, &'a V)>
         .               where
         .                   F: FnMut(&K) -> bool,
         .               {
16,565,582 ( 0.09%)          match self.map.table.get(hash, |(k, _)| is_match(k)) {
         .                       Some(&(ref key, ref value)) => Some((key, value)),
         .                       None => None,
         .                   }
         .               }
         .           
         .               /// Access an entry by hash.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[allow(clippy::wrong_self_convention)]
-- line 2289 ----------------------------------------
-- line 2624 ----------------------------------------
         .               /// and returns a mutable reference to it.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[allow(clippy::shadow_unrelated)]
         .               pub fn insert_hashed_nocheck(self, hash: u64, key: K, value: V) -> (&'a mut K, &'a mut V)
         .               where
         .                   K: Hash,
         .                   S: BuildHasher,
         .               {
 2,272,551 ( 0.01%)          let &mut (ref mut k, ref mut v) = self.table.insert_entry(
         .                       hash,
         .                       (key, value),
         .                       make_hasher::<K, _, V, S>(self.hash_builder),
         .                   );
         .                   (k, v)
         .               }
         .           
         .               /// Set the value of an entry with a custom hasher function.
-- line 2640 ----------------------------------------
-- line 2974 ----------------------------------------
         .               /// map.insert("a", 1);
         .               /// map.insert("b", 2);
         .               /// map.insert("c", 3);
         .               ///
         .               /// // Not possible with .iter()
         .               /// let vec: Vec<(&str, i32)> = map.into_iter().collect();
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
    13,483 ( 0.00%)      fn into_iter(self) -> IntoIter<K, V, A> {
   243,353 ( 0.00%)          IntoIter {
   122,041 ( 0.00%)              inner: self.table.into_iter(),
         .                   }
    40,449 ( 0.00%)      }
         .           }
         .           
         .           impl<'a, K, V> Iterator for Iter<'a, K, V> {
         .               type Item = (&'a K, &'a V);
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn next(&mut self) -> Option<(&'a K, &'a V)> {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
 1,035,199 ( 0.01%)          match self.inner.next() {
         .                       Some(x) => unsafe {
         .                           let r = x.as_ref();
    14,720 ( 0.00%)                  Some((&r.0, &r.1))
         .                       },
         .                       None => None,
         .                   }
         .               }
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
     2,511 ( 0.00%)          self.inner.size_hint()
         .               }
         .           }
         .           impl<K, V> ExactSizeIterator for Iter<'_, K, V> {
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn len(&self) -> usize {
         .                   self.inner.len()
         .               }
         .           }
-- line 3013 ----------------------------------------
-- line 3018 ----------------------------------------
         .               type Item = (&'a K, &'a mut V);
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn next(&mut self) -> Option<(&'a K, &'a mut V)> {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
         .                   match self.inner.next() {
         .                       Some(x) => unsafe {
         .                           let r = x.as_mut();
       768 ( 0.00%)                  Some((&r.0, &mut r.1))
         .                       },
         .                       None => None,
         .                   }
         .               }
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
         .                   self.inner.size_hint()
         .               }
-- line 3034 ----------------------------------------
-- line 3051 ----------------------------------------
         .               }
         .           }
         .           
         .           impl<K, V, A: Allocator + Clone> Iterator for IntoIter<K, V, A> {
         .               type Item = (K, V);
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn next(&mut self) -> Option<(K, V)> {
    15,632 ( 0.00%)          self.inner.next()
         .               }
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
         .                   self.inner.size_hint()
         .               }
         .           }
         .           impl<K, V, A: Allocator + Clone> ExactSizeIterator for IntoIter<K, V, A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
-- line 3067 ----------------------------------------
-- line 3076 ----------------------------------------
         .                   f.debug_list().entries(self.iter()).finish()
         .               }
         .           }
         .           
         .           impl<'a, K, V> Iterator for Keys<'a, K, V> {
         .               type Item = &'a K;
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
     5,904 ( 0.00%)      fn next(&mut self) -> Option<&'a K> {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
         .                   match self.inner.next() {
         .                       Some((k, _)) => Some(k),
         .                       None => None,
         .                   }
    11,808 ( 0.00%)      }
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
         .                   self.inner.size_hint()
         .               }
         .           }
         .           impl<K, V> ExactSizeIterator for Keys<'_, K, V> {
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn len(&self) -> usize {
-- line 3098 ----------------------------------------
-- line 3819 ----------------------------------------
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn insert(self, value: V) -> &'a mut V
         .               where
         .                   K: Hash,
         .                   S: BuildHasher,
         .               {
         .                   let table = &mut self.table.table;
       394 ( 0.00%)          let entry = table.insert_entry(
         .                       self.hash,
         .                       (self.key, value),
         .                       make_hasher::<K, _, V, S>(&self.table.hash_builder),
         .                   );
         .                   &mut entry.1
         .               }
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
-- line 3835 ----------------------------------------
-- line 4557 ----------------------------------------
         .           /// keys with new values returned from the iterator.
         .           impl<K, V, S, A> Extend<(K, V)> for HashMap<K, V, S, A>
         .           where
         .               K: Eq + Hash,
         .               S: BuildHasher,
         .               A: Allocator + Clone,
         .           {
         .               #[cfg_attr(feature = "inline-more", inline)]
   277,329 ( 0.00%)      fn extend<T: IntoIterator<Item = (K, V)>>(&mut self, iter: T) {
         .                   // Keys may be already present or show multiple times in the iterator.
         .                   // Reserve the entire hint lower bound if the map is empty.
         .                   // Otherwise reserve half the hint (rounded up), so the map
         .                   // will only resize twice in the worst case.
   218,927 ( 0.00%)          let iter = iter.into_iter();
   168,486 ( 0.00%)          let reserve = if self.is_empty() {
         .                       iter.size_hint().0
         .                   } else {
    11,563 ( 0.00%)              (iter.size_hint().0 + 1) / 2
         .                   };
         .                   self.reserve(reserve);
         .                   iter.for_each(move |(k, v)| {
   562,202 ( 0.00%)              self.insert(k, v);
         .                   });
   199,515 ( 0.00%)      }
         .           
         .               #[inline]
         .               #[cfg(feature = "nightly")]
         .               fn extend_one(&mut self, (k, v): (K, V)) {
         .                   self.insert(k, v);
         .               }
         .           
         .               #[inline]
-- line 4588 ----------------------------------------

18,302,862 ( 0.09%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/mod.rs
--------------------------------------------------------------------------------
Ir                  

-- line 168 ----------------------------------------
         .               pub self_ty: Ty<'tcx>,
         .               pub trait_ref: Option<TraitRef<'tcx>>,
         .               pub predicates: Vec<Predicate<'tcx>>,
         .           }
         .           
         .           #[derive(
         .               Copy,
         .               Clone,
   888,250 ( 0.00%)      PartialEq,
         .               Eq,
         .               Hash,
         .               TyEncodable,
    17,078 ( 0.00%)      TyDecodable,
         .               HashStable,
         .               Debug,
         .               TypeFoldable
         .           )]
         .           pub enum ImplPolarity {
         .               /// `impl Trait for Type`
         .               Positive,
         .               /// `impl !Trait for Type`
-- line 188 ----------------------------------------
-- line 210 ----------------------------------------
         .                   match self {
         .                       Self::Positive => f.write_str("positive"),
         .                       Self::Negative => f.write_str("negative"),
         .                       Self::Reservation => f.write_str("reservation"),
         .                   }
         .               }
         .           }
         .           
   343,007 ( 0.00%)  #[derive(Clone, Debug, PartialEq, Eq, Copy, Hash, TyEncodable, TyDecodable, HashStable)]
         .           pub enum Visibility {
         .               /// Visible everywhere (including in other crates).
         .               Public,
         .               /// Visible only in the given crate-local module.
         .               Restricted(DefId),
         .               /// Not visible anywhere in the local crate. This is the visibility of private external items.
         .               Invisible,
         .           }
         .           
 1,030,737 ( 0.01%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, HashStable, TyEncodable, TyDecodable)]
         .           pub enum BoundConstness {
         .               /// `T: Trait`
         .               NotConst,
         .               /// `T: ~const Trait`
         .               ///
         .               /// Requires resolving to const only when we are in a const context.
         .               ConstIfConst,
         .           }
         .           
         .           impl BoundConstness {
         .               /// Reduce `self` and `constness` to two possible combined states instead of four.
   225,044 ( 0.00%)      pub fn and(&mut self, constness: hir::Constness) -> hir::Constness {
   337,566 ( 0.00%)          match (constness, self) {
         .                       (hir::Constness::Const, BoundConstness::ConstIfConst) => hir::Constness::Const,
         .                       (_, this) => {
   458,906 ( 0.00%)                  *this = BoundConstness::NotConst;
         .                           hir::Constness::NotConst
         .                       }
         .                   }
   112,522 ( 0.00%)      }
         .           }
         .           
         .           impl fmt::Display for BoundConstness {
         .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
         .                   match self {
         .                       Self::NotConst => f.write_str("normal"),
         .                       Self::ConstIfConst => f.write_str("`~const`"),
         .                   }
-- line 256 ----------------------------------------
-- line 274 ----------------------------------------
         .               pub before_feature_tys: Ty<'tcx>,
         .               /// Tuple containing the types of closure captures after the feature `capture_disjoint_fields`
         .               pub after_feature_tys: Ty<'tcx>,
         .           }
         .           
         .           pub trait DefIdTree: Copy {
         .               fn parent(self, id: DefId) -> Option<DefId>;
         .           
         7 ( 0.00%)      fn is_descendant_of(self, mut descendant: DefId, ancestor: DefId) -> bool {
        34 ( 0.00%)          if descendant.krate != ancestor.krate {
         .                       return false;
         .                   }
         .           
    25,456 ( 0.00%)          while descendant != ancestor {
    25,092 ( 0.00%)              match self.parent(descendant) {
         .                           Some(parent) => descendant = parent,
         .                           None => return false,
         .                       }
         .                   }
         .                   true
         8 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> DefIdTree for TyCtxt<'tcx> {
    37,584 ( 0.00%)      fn parent(self, id: DefId) -> Option<DefId> {
         .                   self.def_key(id).parent.map(|index| DefId { index, ..id })
    56,376 ( 0.00%)      }
         .           }
         .           
         .           impl Visibility {
        50 ( 0.00%)      pub fn from_hir(visibility: &hir::Visibility<'_>, id: hir::HirId, tcx: TyCtxt<'_>) -> Self {
       150 ( 0.00%)          match visibility.node {
         .                       hir::VisibilityKind::Public => Visibility::Public,
         .                       hir::VisibilityKind::Crate(_) => Visibility::Restricted(DefId::local(CRATE_DEF_INDEX)),
         .                       hir::VisibilityKind::Restricted { ref path, .. } => match path.res {
         .                           // If there is no resolution, `resolve` will have already reported an error, so
         .                           // assume that the visibility is public to avoid reporting more privacy errors.
         .                           Res::Err => Visibility::Public,
         .                           def => Visibility::Restricted(def.def_id()),
         .                       },
         .                       hir::VisibilityKind::Inherited => {
       100 ( 0.00%)                  Visibility::Restricted(tcx.parent_module(id).to_def_id())
         .                       }
         .                   }
        50 ( 0.00%)      }
         .           
         .               /// Returns `true` if an item with this visibility is accessible from the given block.
   464,121 ( 0.00%)      pub fn is_accessible_from<T: DefIdTree>(self, module: DefId, tree: T) -> bool {
 2,541,558 ( 0.01%)          let restriction = match self {
         .                       // Public items are visible everywhere.
         .                       Visibility::Public => return true,
         .                       // Private items from other crates are visible nowhere.
         .                       Visibility::Invisible => return false,
         .                       // Restricted items are visible in an arbitrary local module.
    13,328 ( 0.00%)              Visibility::Restricted(other) if other.krate != module.krate => return false,
         .                       Visibility::Restricted(module) => module,
         .                   };
         .           
         2 ( 0.00%)          tree.is_descendant_of(module, restriction)
   464,121 ( 0.00%)      }
         .           
         .               /// Returns `true` if this visibility is at least as accessible as the given visibility
     9,603 ( 0.00%)      pub fn is_at_least<T: DefIdTree>(self, vis: Visibility, tree: T) -> bool {
   113,268 ( 0.00%)          let vis_restriction = match vis {
         .                       Visibility::Public => return self == Visibility::Public,
         .                       Visibility::Invisible => return true,
         .                       Visibility::Restricted(module) => module,
         .                   };
         .           
         .                   self.is_accessible_from(vis_restriction, tree)
     9,603 ( 0.00%)      }
         .           
         .               // Returns `true` if this item is visible anywhere in the local crate.
         .               pub fn is_visible_locally(self) -> bool {
         .                   match self {
         .                       Visibility::Public => true,
         .                       Visibility::Restricted(def_id) => def_id.is_local(),
         .                       Visibility::Invisible => false,
         .                   }
         .               }
         .           
         .               pub fn is_public(self) -> bool {
    36,296 ( 0.00%)          matches!(self, Visibility::Public)
    18,148 ( 0.00%)      }
         .           }
         .           
         .           /// The crate variances map is computed during typeck and contains the
         .           /// variance of every item in the local crate. You should not use it
         .           /// directly, because to do so will make your pass dependent on the
         .           /// HIR of every item in the local crate. Instead, use
         .           /// `tcx.variances_of()` to get the variance for a *particular*
         .           /// item.
-- line 365 ----------------------------------------
-- line 509 ----------------------------------------
         .           #[derive(Clone, Copy, Lift)]
         .           pub struct Predicate<'tcx> {
         .               inner: &'tcx PredicateInner<'tcx>,
         .           }
         .           
         .           impl<'tcx> PartialEq for Predicate<'tcx> {
         .               fn eq(&self, other: &Self) -> bool {
         .                   // `self.kind` is always interned.
 1,010,959 ( 0.01%)          ptr::eq(self.inner, other.inner)
   816,468 ( 0.00%)      }
         .           }
         .           
         .           impl Hash for Predicate<'_> {
         .               fn hash<H: Hasher>(&self, s: &mut H) {
         .                   (self.inner as *const PredicateInner<'_>).hash(s)
         .               }
         .           }
         .           
         .           impl<'tcx> Eq for Predicate<'tcx> {}
         .           
         .           impl<'tcx> Predicate<'tcx> {
         .               /// Gets the inner `Binder<'tcx, PredicateKind<'tcx>>`.
         .               #[inline]
         .               pub fn kind(self) -> Binder<'tcx, PredicateKind<'tcx>> {
 5,925,337 ( 0.03%)          self.inner.kind
         .               }
         .           
         .               /// Flips the polarity of a Predicate.
         .               ///
         .               /// Given `T: Trait` predicate it returns `T: !Trait` and given `T: !Trait` returns `T: Trait`.
         .               pub fn flip_polarity(&self, tcx: TyCtxt<'tcx>) -> Option<Predicate<'tcx>> {
         .                   let kind = self
         .                       .inner
-- line 541 ----------------------------------------
-- line 567 ----------------------------------------
         .                       flags: _,
         .                       outer_exclusive_binder: _,
         .                   } = self.inner;
         .           
         .                   kind.hash_stable(hcx, hasher);
         .               }
         .           }
         .           
27,905,487 ( 0.14%)  #[derive(Clone, Copy, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
22,325,594 ( 0.11%)  #[derive(HashStable, TypeFoldable)]
         .           pub enum PredicateKind<'tcx> {
         .               /// Corresponds to `where Foo: Bar<A, B, C>`. `Foo` here would be
         .               /// the `Self` type of the trait reference and `A`, `B`, and `C`
         .               /// would be the type parameters.
         .               Trait(TraitPredicate<'tcx>),
         .           
         .               /// `where 'a: 'b`
         .               RegionOutlives(RegionOutlivesPredicate<'tcx>),
-- line 584 ----------------------------------------
-- line 594 ----------------------------------------
         .               WellFormed(GenericArg<'tcx>),
         .           
         .               /// Trait must be object-safe.
         .               ObjectSafe(DefId),
         .           
         .               /// No direct syntax. May be thought of as `where T: FnFoo<...>`
         .               /// for some substitutions `...` and `T` being a closure type.
         .               /// Satisfied (or refuted) once we know the closure's kind.
     2,076 ( 0.00%)      ClosureKind(DefId, SubstsRef<'tcx>, ClosureKind),
         .           
         .               /// `T1 <: T2`
         .               ///
         .               /// This obligation is created most often when we have two
         .               /// unresolved type variables and hence don't have enough
         .               /// information to process the subtyping obligation yet.
     5,537 ( 0.00%)      Subtype(SubtypePredicate<'tcx>),
         .           
         .               /// `T1` coerced to `T2`
         .               ///
         .               /// Like a subtyping obligation, this is created most often
         .               /// when we have two unresolved type variables and hence
         .               /// don't have enough information to process the coercion
         .               /// obligation yet. At the moment, we actually process coercions
         .               /// very much like subtyping and don't handle the full coercion
-- line 617 ----------------------------------------
-- line 645 ----------------------------------------
         .           }
         .           
         .           impl<'tcx> Predicate<'tcx> {
         .               /// Performs a substitution suitable for going from a
         .               /// poly-trait-ref to supertraits that must hold if that
         .               /// poly-trait-ref holds. This is slightly different from a normal
         .               /// substitution in terms of what happens with bound regions. See
         .               /// lengthy comment below for details.
    10,881 ( 0.00%)      pub fn subst_supertrait(
         .                   self,
         .                   tcx: TyCtxt<'tcx>,
         .                   trait_ref: &ty::PolyTraitRef<'tcx>,
         .               ) -> Predicate<'tcx> {
         .                   // The interaction between HRTB and supertraits is not entirely
         .                   // obvious. Let me walk you (and myself) through an example.
         .                   //
         .                   // Let's start with an easy case. Consider two traits:
-- line 661 ----------------------------------------
-- line 731 ----------------------------------------
         .                   //    ['x, 'b]
         .                   let bound_pred = self.kind();
         .                   let pred_bound_vars = bound_pred.bound_vars();
         .                   let trait_bound_vars = trait_ref.bound_vars();
         .                   // 1) Self: Bar1<'a, '^0.0> -> Self: Bar1<'a, '^0.1>
         .                   let shifted_pred =
         .                       tcx.shift_bound_var_indices(trait_bound_vars.len(), bound_pred.skip_binder());
         .                   // 2) Self: Bar1<'a, '^0.1> -> T: Bar1<'^0.0, '^0.1>
     1,209 ( 0.00%)          let new = shifted_pred.subst(tcx, trait_ref.skip_binder().substs);
         .                   // 3) ['x] + ['b] -> ['x, 'b]
         .                   let bound_vars =
         .                       tcx.mk_bound_variable_kinds(trait_bound_vars.iter().chain(pred_bound_vars));
    10,881 ( 0.00%)          tcx.reuse_or_mk_predicate(self, ty::Binder::bind_with_vars(new, bound_vars))
     8,463 ( 0.00%)      }
         .           }
         .           
    29,421 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
 1,466,263 ( 0.01%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct TraitPredicate<'tcx> {
         .               pub trait_ref: TraitRef<'tcx>,
         .           
 2,754,886 ( 0.01%)      pub constness: BoundConstness,
         .           
 2,883,925 ( 0.01%)      pub polarity: ImplPolarity,
         .           }
         .           
         .           pub type PolyTraitPredicate<'tcx> = ty::Binder<'tcx, TraitPredicate<'tcx>>;
         .           
         .           impl<'tcx> TraitPredicate<'tcx> {
 2,772,536 ( 0.01%)      pub fn remap_constness(&mut self, tcx: TyCtxt<'tcx>, param_env: &mut ParamEnv<'tcx>) {
 2,426,335 ( 0.01%)          if unlikely!(Some(self.trait_ref.def_id) == tcx.lang_items().drop_trait()) {
         .                       // remap without changing constness of this predicate.
         .                       // this is because `T: ~const Drop` has a different meaning to `T: Drop`
       366 ( 0.00%)              param_env.remap_constness_with(self.constness)
         .                   } else {
   346,384 ( 0.00%)              *param_env = param_env.with_constness(self.constness.and(param_env.constness()))
         .                   }
 2,079,402 ( 0.01%)      }
         .           
         .               /// Remap the constness of this predicate before emitting it for diagnostics.
         .               pub fn remap_constness_diag(&mut self, param_env: ParamEnv<'tcx>) {
         .                   // this is different to `remap_constness` that callees want to print this predicate
         .                   // in case of selection errors. `T: ~const Drop` bounds cannot end up here when the
         .                   // param_env is not const because we it is always satisfied in non-const contexts.
         .                   if let hir::Constness::NotConst = param_env.constness() {
         .                       self.constness = ty::BoundConstness::NotConst;
         .                   }
         .               }
         .           
         .               pub fn def_id(self) -> DefId {
   442,128 ( 0.00%)          self.trait_ref.def_id
   221,064 ( 0.00%)      }
         .           
   424,417 ( 0.00%)      pub fn self_ty(self) -> Ty<'tcx> {
 1,273,251 ( 0.01%)          self.trait_ref.self_ty()
   848,834 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> PolyTraitPredicate<'tcx> {
         .               pub fn def_id(self) -> DefId {
         .                   // Ok to skip binder since trait `DefId` does not care about regions.
         .                   self.skip_binder().def_id()
   411,644 ( 0.00%)      }
         .           
    27,906 ( 0.00%)      pub fn self_ty(self) -> ty::Binder<'tcx, Ty<'tcx>> {
   111,624 ( 0.00%)          self.map_bound(|trait_ref| trait_ref.self_ty())
    55,812 ( 0.00%)      }
         .           
         .               /// Remap the constness of this predicate before emitting it for diagnostics.
         .               pub fn remap_constness_diag(&mut self, param_env: ParamEnv<'tcx>) {
         .                   *self = self.map_bound(|mut p| {
         .                       p.remap_constness_diag(param_env);
         .                       p
         .                   });
         .               }
         .           }
         .           
     4,050 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
   327,193 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
 1,548,922 ( 0.01%)  pub struct OutlivesPredicate<A, B>(pub A, pub B); // `A: B`
         .           pub type RegionOutlivesPredicate<'tcx> = OutlivesPredicate<ty::Region<'tcx>, ty::Region<'tcx>>;
         .           pub type TypeOutlivesPredicate<'tcx> = OutlivesPredicate<Ty<'tcx>, ty::Region<'tcx>>;
         .           pub type PolyRegionOutlivesPredicate<'tcx> = ty::Binder<'tcx, RegionOutlivesPredicate<'tcx>>;
         .           pub type PolyTypeOutlivesPredicate<'tcx> = ty::Binder<'tcx, TypeOutlivesPredicate<'tcx>>;
         .           
         .           /// Encodes that `a` must be a subtype of `b`. The `a_is_expected` flag indicates
         .           /// whether the `a` type is the type that we should label as "expected" when
         .           /// presenting user diagnostics.
         .           #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, TyEncodable, TyDecodable)]
    25,336 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct SubtypePredicate<'tcx> {
    47,195 ( 0.00%)      pub a_is_expected: bool,
         .               pub a: Ty<'tcx>,
         .               pub b: Ty<'tcx>,
         .           }
         .           pub type PolySubtypePredicate<'tcx> = ty::Binder<'tcx, SubtypePredicate<'tcx>>;
         .           
         .           /// Encodes that we have to coerce *from* the `a` type to the `b` type.
         .           #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, TyEncodable, TyDecodable)]
         .           #[derive(HashStable, TypeFoldable)]
         .           pub struct CoercePredicate<'tcx> {
         .               pub a: Ty<'tcx>,
         .               pub b: Ty<'tcx>,
         .           }
         .           pub type PolyCoercePredicate<'tcx> = ty::Binder<'tcx, CoercePredicate<'tcx>>;
         .           
   232,621 ( 0.00%)  #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord, TyEncodable, TyDecodable)]
   173,535 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub enum Term<'tcx> {
    22,954 ( 0.00%)      Ty(Ty<'tcx>),
         .               Const(&'tcx Const<'tcx>),
         .           }
         .           
         .           impl<'tcx> From<Ty<'tcx>> for Term<'tcx> {
         .               fn from(ty: Ty<'tcx>) -> Self {
         .                   Term::Ty(ty)
    29,448 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> From<&'tcx Const<'tcx>> for Term<'tcx> {
         .               fn from(c: &'tcx Const<'tcx>) -> Self {
         .                   Term::Const(c)
         .               }
         .           }
         .           
         .           impl<'tcx> Term<'tcx> {
         .               pub fn ty(&self) -> Option<Ty<'tcx>> {
    19,530 ( 0.00%)          if let Term::Ty(ty) = self { Some(ty) } else { None }
     9,765 ( 0.00%)      }
         .           }
         .           
         .           /// This kind of predicate has no *direct* correspondent in the
         .           /// syntax, but it roughly corresponds to the syntactic forms:
         .           ///
         .           /// 1. `T: TraitRef<..., Item = Type>`
         .           /// 2. `<T as TraitRef<...>>::Item == Type` (NYI)
         .           ///
         .           /// In particular, form #1 is "desugared" to the combination of a
         .           /// normal trait predicate (`T: TraitRef<...>`) and one of these
         .           /// predicates. Form #2 is a broader form in that it also permits
         .           /// equality between arbitrary types. Processing an instance of
         .           /// Form #2 eventually yields one of these `ProjectionPredicate`
         .           /// instances to normalize the LHS.
         7 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
    28,330 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct ProjectionPredicate<'tcx> {
         .               pub projection_ty: ProjectionTy<'tcx>,
    57,050 ( 0.00%)      pub term: Term<'tcx>,
         .           }
         .           
         .           pub type PolyProjectionPredicate<'tcx> = Binder<'tcx, ProjectionPredicate<'tcx>>;
         .           
         .           impl<'tcx> PolyProjectionPredicate<'tcx> {
         .               /// Returns the `DefId` of the trait of the associated item being projected.
         .               #[inline]
         .               pub fn trait_def_id(&self, tcx: TyCtxt<'tcx>) -> DefId {
       976 ( 0.00%)          self.skip_binder().projection_ty.trait_def_id(tcx)
         .               }
         .           
         .               /// Get the [PolyTraitRef] required for this projection to be well formed.
         .               /// Note that for generic associated types the predicates of the associated
         .               /// type also need to be checked.
         .               #[inline]
         .               pub fn required_poly_trait_ref(&self, tcx: TyCtxt<'tcx>) -> PolyTraitRef<'tcx> {
         .                   // Note: unlike with `TraitRef::to_poly_trait_ref()`,
         .                   // `self.0.trait_ref` is permitted to have escaping regions.
         .                   // This is because here `self` has a `Binder` and so does our
         .                   // return value, so we are preserving the number of binding
         .                   // levels.
       528 ( 0.00%)          self.map_bound(|predicate| predicate.projection_ty.trait_ref(tcx))
         .               }
         .           
         .               pub fn term(&self) -> Binder<'tcx, Term<'tcx>> {
         .                   self.map_bound(|predicate| predicate.term)
         .               }
         .           
         .               /// The `DefId` of the `TraitItem` for the associated type.
         .               ///
         .               /// Note that this is not the `DefId` of the `TraitRef` containing this
         .               /// associated type, which is in `tcx.associated_item(projection_def_id()).container`.
         .               pub fn projection_def_id(&self) -> DefId {
         .                   // Ok to skip binder since trait `DefId` does not care about regions.
     3,248 ( 0.00%)          self.skip_binder().projection_ty.item_def_id
     1,624 ( 0.00%)      }
         .           }
         .           
         .           pub trait ToPolyTraitRef<'tcx> {
         .               fn to_poly_trait_ref(&self) -> PolyTraitRef<'tcx>;
         .           }
         .           
         .           impl<'tcx> ToPolyTraitRef<'tcx> for PolyTraitPredicate<'tcx> {
    39,080 ( 0.00%)      fn to_poly_trait_ref(&self) -> PolyTraitRef<'tcx> {
    39,080 ( 0.00%)          self.map_bound_ref(|trait_pred| trait_pred.trait_ref)
    39,080 ( 0.00%)      }
         .           }
         .           
         .           pub trait ToPredicate<'tcx> {
         .               fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx>;
         .           }
         .           
         .           impl<'tcx> ToPredicate<'tcx> for Binder<'tcx, PredicateKind<'tcx>> {
         .               #[inline(always)]
         .               fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {
         .                   tcx.mk_predicate(self)
         .               }
         .           }
         .           
         .           impl<'tcx> ToPredicate<'tcx> for PolyTraitPredicate<'tcx> {
   179,911 ( 0.00%)      fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {
   899,555 ( 0.00%)          self.map_bound(PredicateKind::Trait).to_predicate(tcx)
   359,822 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> ToPredicate<'tcx> for PolyRegionOutlivesPredicate<'tcx> {
       192 ( 0.00%)      fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {
       384 ( 0.00%)          self.map_bound(PredicateKind::RegionOutlives).to_predicate(tcx)
       384 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> ToPredicate<'tcx> for PolyTypeOutlivesPredicate<'tcx> {
     1,699 ( 0.00%)      fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {
     3,398 ( 0.00%)          self.map_bound(PredicateKind::TypeOutlives).to_predicate(tcx)
     3,398 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> ToPredicate<'tcx> for PolyProjectionPredicate<'tcx> {
     3,543 ( 0.00%)      fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {
    17,715 ( 0.00%)          self.map_bound(PredicateKind::Projection).to_predicate(tcx)
     7,086 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> Predicate<'tcx> {
   268,700 ( 0.00%)      pub fn to_opt_poly_trait_pred(self) -> Option<PolyTraitPredicate<'tcx>> {
         .                   let predicate = self.kind();
   806,100 ( 0.00%)          match predicate.skip_binder() {
    97,930 ( 0.00%)              PredicateKind::Trait(t) => Some(predicate.rebind(t)),
         .                       PredicateKind::Projection(..)
         .                       | PredicateKind::Subtype(..)
         .                       | PredicateKind::Coerce(..)
         .                       | PredicateKind::RegionOutlives(..)
         .                       | PredicateKind::WellFormed(..)
         .                       | PredicateKind::ObjectSafe(..)
         .                       | PredicateKind::ClosureKind(..)
         .                       | PredicateKind::TypeOutlives(..)
         .                       | PredicateKind::ConstEvaluatable(..)
         .                       | PredicateKind::ConstEquate(..)
   114,764 ( 0.00%)              | PredicateKind::TypeWellFormedFromEnv(..) => None,
         .                   }
   268,700 ( 0.00%)      }
         .           
    15,010 ( 0.00%)      pub fn to_opt_type_outlives(self) -> Option<PolyTypeOutlivesPredicate<'tcx>> {
         .                   let predicate = self.kind();
    30,020 ( 0.00%)          match predicate.skip_binder() {
       312 ( 0.00%)              PredicateKind::TypeOutlives(data) => Some(predicate.rebind(data)),
         .                       PredicateKind::Trait(..)
         .                       | PredicateKind::Projection(..)
         .                       | PredicateKind::Subtype(..)
         .                       | PredicateKind::Coerce(..)
         .                       | PredicateKind::RegionOutlives(..)
         .                       | PredicateKind::WellFormed(..)
         .                       | PredicateKind::ObjectSafe(..)
         .                       | PredicateKind::ClosureKind(..)
         .                       | PredicateKind::ConstEvaluatable(..)
         .                       | PredicateKind::ConstEquate(..)
    14,906 ( 0.00%)              | PredicateKind::TypeWellFormedFromEnv(..) => None,
         .                   }
    15,010 ( 0.00%)      }
         .           }
         .           
         .           /// Represents the bounds declared on a particular set of type
         .           /// parameters. Should eventually be generalized into a flag list of
         .           /// where-clauses. You can obtain an `InstantiatedPredicates` list from a
         .           /// `GenericPredicates` by using the `instantiate` method. Note that this method
         .           /// reflects an important semantic invariant of `InstantiatedPredicates`: while
         .           /// the `GenericPredicates` are expressed in terms of the bound type
-- line 1005 ----------------------------------------
-- line 1011 ----------------------------------------
         .           /// Example:
         .           ///
         .           ///     struct Foo<T, U: Bar<T>> { ... }
         .           ///
         .           /// Here, the `GenericPredicates` for `Foo` would contain a list of bounds like
         .           /// `[[], [U:Bar<T>]]`. Now if there were some particular reference
         .           /// like `Foo<isize,usize>`, then the `InstantiatedPredicates` would be `[[],
         .           /// [usize:Bar<isize>]]`.
   483,250 ( 0.00%)  #[derive(Clone, Debug, TypeFoldable)]
         .           pub struct InstantiatedPredicates<'tcx> {
         .               pub predicates: Vec<Predicate<'tcx>>,
         .               pub spans: Vec<Span>,
         .           }
         .           
         .           impl<'tcx> InstantiatedPredicates<'tcx> {
       602 ( 0.00%)      pub fn empty() -> InstantiatedPredicates<'tcx> {
   306,952 ( 0.00%)          InstantiatedPredicates { predicates: vec![], spans: vec![] }
       602 ( 0.00%)      }
         .           
         .               pub fn is_empty(&self) -> bool {
         .                   self.predicates.is_empty()
         .               }
         .           }
         .           
         7 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, HashStable, TyEncodable, TyDecodable, TypeFoldable)]
         .           pub struct OpaqueTypeKey<'tcx> {
         .               pub def_id: DefId,
         .               pub substs: SubstsRef<'tcx>,
         .           }
         .           
         .           rustc_index::newtype_index! {
         .               /// "Universes" are used during type- and trait-checking in the
         .               /// presence of `for<..>` binders to control what sets of names are
-- line 1043 ----------------------------------------
-- line 1091 ----------------------------------------
         .               /// ```
         .               /// for<'a> fn(&'a u32)
         .               /// ```
         .               ///
         .               /// Once we "enter" into this `for<'a>` quantifier, we are in a
         .               /// new universe that extends `U` -- in this new universe, we can
         .               /// name the region `'a`, but that region was not nameable from
         .               /// `U` because it was not in scope there.
   202,208 ( 0.00%)      pub fn next_universe(self) -> UniverseIndex {
         .                   UniverseIndex::from_u32(self.private.checked_add(1).unwrap())
   606,624 ( 0.00%)      }
         .           
         .               /// Returns `true` if `self` can name a name from `other` -- in other words,
         .               /// if the set of names in `self` is a superset of those in
         .               /// `other` (`self >= other`).
         .               pub fn can_name(self, other: UniverseIndex) -> bool {
   542,328 ( 0.00%)          self.private >= other.private
   271,164 ( 0.00%)      }
         .           
         .               /// Returns `true` if `self` cannot name some names from `other` -- in other
         .               /// words, if the set of names in `self` is a strict subset of
         .               /// those in `other` (`self < other`).
         .               pub fn cannot_name(self, other: UniverseIndex) -> bool {
     6,186 ( 0.00%)          self.private < other.private
     3,093 ( 0.00%)      }
         .           }
         .           
         .           /// The "placeholder index" fully defines a placeholder region, type, or const. Placeholders are
         .           /// identified by both a universe, as well as a name residing within that universe. Distinct bound
         .           /// regions/types/consts within the same universe simply have an unknown relationship to one
         .           /// another.
         .           #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TyEncodable, TyDecodable, PartialOrd, Ord)]
         .           pub struct Placeholder<T> {
   161,687 ( 0.00%)      pub universe: UniverseIndex,
    57,566 ( 0.00%)      pub name: T,
         .           }
         .           
         .           impl<'a, T> HashStable<StableHashingContext<'a>> for Placeholder<T>
         .           where
         .               T: HashStable<StableHashingContext<'a>>,
         .           {
         .               fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {
         .                   self.universe.hash_stable(hcx, hasher);
-- line 1133 ----------------------------------------
-- line 1194 ----------------------------------------
         .           /// aren't allowed to call that query: it is equal to `type_of(const_param)` which is
         .           /// trivial to compute.
         .           ///
         .           /// If we now want to use that constant in a place which potentionally needs its type
         .           /// we also pass the type of its `const_param`. This is the point of `WithOptConstParam`,
         .           /// except that instead of a `Ty` we bundle the `DefId` of the const parameter.
         .           /// Meaning that we need to use `type_of(const_param_did)` if `const_param_did` is `Some`
         .           /// to get the type of `did`.
     4,216 ( 0.00%)  #[derive(Copy, Clone, Debug, TypeFoldable, Lift, TyEncodable, TyDecodable)]
         .           #[derive(PartialEq, Eq, PartialOrd, Ord)]
         .           #[derive(Hash, HashStable)]
         .           pub struct WithOptConstParam<T> {
    21,036 ( 0.00%)      pub did: T,
         .               /// The `DefId` of the corresponding generic parameter in case `did` is
         .               /// a const argument.
         .               ///
         .               /// Note that even if `did` is a const argument, this may still be `None`.
         .               /// All queries taking `WithOptConstParam` start by calling `tcx.opt_const_param_of(def.did)`
         .               /// to potentially update `param_did` in the case it is `None`.
    15,759 ( 0.00%)      pub const_param_did: Option<DefId>,
         .           }
         .           
         .           impl<T> WithOptConstParam<T> {
         .               /// Creates a new `WithOptConstParam` setting `const_param_did` to `None`.
         .               #[inline(always)]
         .               pub fn unknown(did: T) -> WithOptConstParam<T> {
         .                   WithOptConstParam { did, const_param_did: None }
    55,380 ( 0.00%)      }
         .           }
         .           
         .           impl WithOptConstParam<LocalDefId> {
         .               /// Returns `Some((did, param_did))` if `def_id` is a const argument,
         .               /// `None` otherwise.
         .               #[inline(always)]
         .               pub fn try_lookup(did: LocalDefId, tcx: TyCtxt<'_>) -> Option<(LocalDefId, DefId)> {
         .                   tcx.opt_const_param_of(did).map(|param_did| (did, param_did))
         .               }
         .           
         .               /// In case `self` is unknown but `self.did` is a const argument, this returns
         .               /// a `WithOptConstParam` with the correct `const_param_did`.
         .               #[inline(always)]
         .               pub fn try_upgrade(self, tcx: TyCtxt<'_>) -> Option<WithOptConstParam<LocalDefId>> {
     8,773 ( 0.00%)          if self.const_param_did.is_none() {
    14,557 ( 0.00%)              if let const_param_did @ Some(_) = tcx.opt_const_param_of(self.did) {
         .                           return Some(WithOptConstParam { did: self.did, const_param_did });
         .                       }
         .                   }
         .           
         .                   None
         .               }
         .           
         .               pub fn to_global(self) -> WithOptConstParam<DefId> {
-- line 1245 ----------------------------------------
-- line 1247 ----------------------------------------
         .               }
         .           
         .               pub fn def_id_for_type_of(self) -> DefId {
         .                   if let Some(did) = self.const_param_did { did } else { self.did.to_def_id() }
         .               }
         .           }
         .           
         .           impl WithOptConstParam<DefId> {
     5,784 ( 0.00%)      pub fn as_local(self) -> Option<WithOptConstParam<LocalDefId>> {
         .                   self.did
         .                       .as_local()
         .                       .map(|did| WithOptConstParam { did, const_param_did: self.const_param_did })
     5,784 ( 0.00%)      }
         .           
         .               pub fn as_const_arg(self) -> Option<(LocalDefId, DefId)> {
    15,344 ( 0.00%)          if let Some(param_did) = self.const_param_did {
     7,189 ( 0.00%)              if let Some(did) = self.did.as_local() {
         .                           return Some((did, param_did));
         .                       }
         .                   }
         .           
         .                   None
         .               }
         .           
         .               pub fn is_local(self) -> bool {
         .                   self.did.is_local()
         .               }
         .           
       525 ( 0.00%)      pub fn def_id_for_type_of(self) -> DefId {
         .                   self.const_param_did.unwrap_or(self.did)
       525 ( 0.00%)      }
         .           }
         .           
         .           /// When type checking, we use the `ParamEnv` to track
         .           /// details about the set of where-clauses that are in scope at this
         .           /// particular point.
         .           #[derive(Copy, Clone, Hash, PartialEq, Eq)]
         .           pub struct ParamEnv<'tcx> {
         .               /// This packs both caller bounds and the reveal enum into one pointer.
-- line 1285 ----------------------------------------
-- line 1302 ----------------------------------------
         .               reveal: traits::Reveal,
         .               constness: hir::Constness,
         .           }
         .           
         .           unsafe impl rustc_data_structures::tagged_ptr::Tag for ParamTag {
         .               const BITS: usize = 2;
         .               #[inline]
         .               fn into_usize(self) -> usize {
   468,787 ( 0.00%)          match self {
         .                       Self { reveal: traits::Reveal::UserFacing, constness: hir::Constness::NotConst } => 0,
         .                       Self { reveal: traits::Reveal::All, constness: hir::Constness::NotConst } => 1,
         .                       Self { reveal: traits::Reveal::UserFacing, constness: hir::Constness::Const } => 2,
         .                       Self { reveal: traits::Reveal::All, constness: hir::Constness::Const } => 3,
         .                   }
         .               }
         .               #[inline]
         .               unsafe fn from_usize(ptr: usize) -> Self {
 4,932,894 ( 0.03%)          match ptr {
         .                       0 => Self { reveal: traits::Reveal::UserFacing, constness: hir::Constness::NotConst },
         .                       1 => Self { reveal: traits::Reveal::All, constness: hir::Constness::NotConst },
         .                       2 => Self { reveal: traits::Reveal::UserFacing, constness: hir::Constness::Const },
         .                       3 => Self { reveal: traits::Reveal::All, constness: hir::Constness::Const },
         .                       _ => std::hint::unreachable_unchecked(),
         .                   }
         .               }
         .           }
-- line 1327 ----------------------------------------
-- line 1430 ----------------------------------------
         .               #[inline]
         .               pub fn without_const(mut self) -> Self {
         .                   self.packed.set_tag(ParamTag { constness: hir::Constness::NotConst, ..self.packed.tag() });
         .                   self
         .               }
         .           
         .               #[inline]
         .               pub fn remap_constness_with(&mut self, mut constness: ty::BoundConstness) {
    69,995 ( 0.00%)          *self = self.with_constness(constness.and(self.constness()))
         .               }
         .           
         .               /// Returns a new parameter environment with the same clauses, but
         .               /// which "reveals" the true results of projections in all cases
         .               /// (even for associated types that are specializable). This is
         .               /// the desired behavior during codegen and certain other special
         .               /// contexts; normally though we want to use `Reveal::UserFacing`,
         .               /// which is the default.
         .               /// All opaque types in the caller_bounds of the `ParamEnv`
         .               /// will be normalized to their underlying types.
         .               /// See PR #65989 and issue #65918 for more details
    17,024 ( 0.00%)      pub fn with_reveal_all_normalized(self, tcx: TyCtxt<'tcx>) -> Self {
         .                   if self.packed.tag().reveal == traits::Reveal::All {
         .                       return self;
         .                   }
         .           
         .                   ParamEnv::new(
         .                       tcx.normalize_opaque_types(self.caller_bounds()),
         .                       Reveal::All,
         .                       self.constness(),
         .                   )
    19,152 ( 0.00%)      }
         .           
         .               /// Returns this same environment but with no caller bounds.
         .               #[inline]
         .               pub fn without_caller_bounds(self) -> Self {
         .                   Self::new(List::empty(), self.reveal(), self.constness())
         .               }
         .           
         .               /// Creates a suitable environment in which to perform trait
-- line 1468 ----------------------------------------
-- line 1472 ----------------------------------------
         .               /// pair it with the empty environment. This improves caching and is generally
         .               /// invisible.
         .               ///
         .               /// N.B., we preserve the environment when type-checking because it
         .               /// is possible for the user to have wacky where-clauses like
         .               /// `where Box<u32>: Copy`, which are clearly never
         .               /// satisfiable. We generally want to behave as if they were true,
         .               /// although the surrounding function is never reachable.
   347,178 ( 0.00%)      pub fn and<T: TypeFoldable<'tcx>>(self, value: T) -> ParamEnvAnd<'tcx, T> {
         .                   match self.reveal() {
         .                       Reveal::UserFacing => ParamEnvAnd { param_env: self, value },
         .           
         .                       Reveal::All => {
    54,153 ( 0.00%)                  if value.is_global() {
         .                               ParamEnvAnd { param_env: self.without_caller_bounds(), value }
         .                           } else {
         .                               ParamEnvAnd { param_env: self, value }
         .                           }
         .                       }
         .                   }
   330,340 ( 0.00%)      }
         .           }
         .           
         .           // FIXME(ecstaticmorse): Audit all occurrences of `without_const().to_predicate(tcx)` to ensure that
         .           // the constness of trait bounds is being propagated correctly.
         .           impl<'tcx> PolyTraitRef<'tcx> {
         .               #[inline]
         .               pub fn with_constness(self, constness: BoundConstness) -> PolyTraitPredicate<'tcx> {
    10,256 ( 0.00%)          self.map_bound(|trait_ref| ty::TraitPredicate {
         .                       trait_ref,
         .                       constness,
         .                       polarity: ty::ImplPolarity::Positive,
         .                   })
         .               }
         .               #[inline]
         .               pub fn without_const(self) -> PolyTraitPredicate<'tcx> {
         .                   self.with_constness(BoundConstness::NotConst)
         .               }
         .           }
         .           
    16,132 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TypeFoldable)]
         .           pub struct ParamEnvAnd<'tcx, T> {
   161,866 ( 0.00%)      pub param_env: ParamEnv<'tcx>,
 2,902,485 ( 0.01%)      pub value: T,
         .           }
         .           
         .           impl<'tcx, T> ParamEnvAnd<'tcx, T> {
         .               pub fn into_parts(self) -> (ParamEnv<'tcx>, T) {
         .                   (self.param_env, self.value)
         .               }
         .           
         .               #[inline]
         .               pub fn without_const(mut self) -> Self {
         .                   self.param_env = self.param_env.without_const();
    22,533 ( 0.00%)          self
         .               }
         .           }
         .           
         .           impl<'a, 'tcx, T> HashStable<StableHashingContext<'a>> for ParamEnvAnd<'tcx, T>
         .           where
         .               T: HashStable<StableHashingContext<'a>>,
         .           {
         .               fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {
-- line 1534 ----------------------------------------
-- line 1542 ----------------------------------------
         .           #[derive(Copy, Clone, Debug, HashStable)]
         .           pub struct Destructor {
         .               /// The `DefId` of the destructor method
         .               pub did: DefId,
         .               /// The constness of the destructor method
         .               pub constness: hir::Constness,
         .           }
         .           
    25,049 ( 0.00%)  bitflags! {
    40,392 ( 0.00%)      #[derive(HashStable, TyEncodable, TyDecodable)]
         .               pub struct VariantFlags: u32 {
         .                   const NO_VARIANT_FLAGS        = 0;
         .                   /// Indicates whether the field list of this variant is `#[non_exhaustive]`.
         .                   const IS_FIELD_LIST_NON_EXHAUSTIVE = 1 << 0;
         .                   /// Indicates whether this variant was obtained as part of recovering from
         .                   /// a syntactic error. May be incomplete or bogus.
         .                   const IS_RECOVERED = 1 << 1;
         .               }
         .           }
         .           
         .           /// Definition of a variant -- a struct's fields or an enum variant.
   282,234 ( 0.00%)  #[derive(Debug, HashStable, TyEncodable, TyDecodable)]
         .           pub struct VariantDef {
         .               /// `DefId` that identifies the variant itself.
         .               /// If this variant belongs to a struct or union, then this is a copy of its `DefId`.
         .               pub def_id: DefId,
         .               /// `DefId` that identifies the variant's constructor.
         .               /// If this variant is a struct variant, then this is `None`.
         .               pub ctor_def_id: Option<DefId>,
         .               /// Variant or struct name.
-- line 1571 ----------------------------------------
-- line 1592 ----------------------------------------
         .               /// `parent_did` is the `DefId` of the `AdtDef` representing the enum or struct that
         .               /// owns this variant. It is used for checking if a struct has `#[non_exhaustive]` w/out having
         .               /// to go through the redirect of checking the ctor's attributes - but compiling a small crate
         .               /// requires loading the `AdtDef`s for all the structs in the universe (e.g., coherence for any
         .               /// built-in trait), and we do not want to load attributes twice.
         .               ///
         .               /// If someone speeds up attribute loading to not be a performance concern, they can
         .               /// remove this hack and use the constructor `DefId` everywhere.
    10,008 ( 0.00%)      pub fn new(
         .                   name: Symbol,
         .                   variant_did: Option<DefId>,
         .                   ctor_def_id: Option<DefId>,
         .                   discr: VariantDiscr,
         .                   fields: Vec<FieldDef>,
         .                   ctor_kind: CtorKind,
         .                   adt_kind: AdtKind,
         .                   parent_did: DefId,
-- line 1608 ----------------------------------------
-- line 1611 ----------------------------------------
         .               ) -> Self {
         .                   debug!(
         .                       "VariantDef::new(name = {:?}, variant_did = {:?}, ctor_def_id = {:?}, discr = {:?},
         .                        fields = {:?}, ctor_kind = {:?}, adt_kind = {:?}, parent_did = {:?})",
         .                       name, variant_did, ctor_def_id, discr, fields, ctor_kind, adt_kind, parent_did,
         .                   );
         .           
         .                   let mut flags = VariantFlags::NO_VARIANT_FLAGS;
     1,251 ( 0.00%)          if is_field_list_non_exhaustive {
         .                       flags |= VariantFlags::IS_FIELD_LIST_NON_EXHAUSTIVE;
         .                   }
         .           
     3,753 ( 0.00%)          if recovered {
         .                       flags |= VariantFlags::IS_RECOVERED;
         .                   }
         .           
    11,259 ( 0.00%)          VariantDef {
         .                       def_id: variant_did.unwrap_or(parent_did),
         .                       ctor_def_id,
         .                       name,
         .                       discr,
     5,004 ( 0.00%)              fields,
         .                       ctor_kind,
         .                       flags,
         .                   }
     5,004 ( 0.00%)      }
         .           
         .               /// Is this field list non-exhaustive?
         .               #[inline]
         .               pub fn is_field_list_non_exhaustive(&self) -> bool {
         .                   self.flags.intersects(VariantFlags::IS_FIELD_LIST_NON_EXHAUSTIVE)
         .               }
         .           
         .               /// Was this variant obtained as part of recovering from a syntactic error?
         .               #[inline]
         .               pub fn is_recovered(&self) -> bool {
         .                   self.flags.intersects(VariantFlags::IS_RECOVERED)
         .               }
         .           
         .               /// Computes the `Ident` of this variant by looking up the `Span`
    32,970 ( 0.00%)      pub fn ident(&self, tcx: TyCtxt<'_>) -> Ident {
    18,840 ( 0.00%)          Ident::new(self.name, tcx.def_ident_span(self.def_id).unwrap())
    42,390 ( 0.00%)      }
         .           }
         .           
   187,546 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, TyEncodable, TyDecodable, HashStable)]
         .           pub enum VariantDiscr {
         .               /// Explicit value for this variant, i.e., `X = 123`.
         .               /// The `DefId` corresponds to the embedded constant.
         .               Explicit(DefId),
         .           
         .               /// The previous variant's discriminant plus one.
         .               /// For efficiency reasons, the distance from the
         .               /// last `Explicit` discriminant is being stored,
         .               /// or `0` for the first variant, if it has none.
         .               Relative(u32),
         .           }
         .           
   377,335 ( 0.00%)  #[derive(Debug, HashStable, TyEncodable, TyDecodable)]
         .           pub struct FieldDef {
         .               pub did: DefId,
         .               pub name: Symbol,
         .               pub vis: Visibility,
         .           }
         .           
    13,418 ( 0.00%)  bitflags! {
         .               #[derive(TyEncodable, TyDecodable, Default, HashStable)]
         .               pub struct ReprFlags: u8 {
         .                   const IS_C               = 1 << 0;
         .                   const IS_SIMD            = 1 << 1;
         .                   const IS_TRANSPARENT     = 1 << 2;
         .                   // Internal only for now. If true, don't reorder fields.
         .                   const IS_LINEAR          = 1 << 3;
         .                   // If true, don't expose any niche to type's context.
-- line 1684 ----------------------------------------
-- line 1689 ----------------------------------------
         .                   // Any of these flags being set prevent field reordering optimisation.
         .                   const IS_UNOPTIMISABLE   = ReprFlags::IS_C.bits
         .                                            | ReprFlags::IS_SIMD.bits
         .                                            | ReprFlags::IS_LINEAR.bits;
         .               }
         .           }
         .           
         .           /// Represents the repr options provided by the user,
   246,500 ( 0.00%)  #[derive(Copy, Clone, Debug, Eq, PartialEq, TyEncodable, TyDecodable, Default, HashStable)]
         .           pub struct ReprOptions {
         .               pub int: Option<attr::IntType>,
         .               pub align: Option<Align>,
         .               pub pack: Option<Align>,
         .               pub flags: ReprFlags,
         .               /// The seed to be used for randomizing a type's layout
         .               ///
         .               /// Note: This could technically be a `[u8; 16]` (a `u128`) which would
-- line 1705 ----------------------------------------
-- line 1706 ----------------------------------------
         .               /// be the "most accurate" hash as it'd encompass the item and crate
         .               /// hash without loss, but it does pay the price of being larger.
         .               /// Everything's a tradeoff, a `u64` seed should be sufficient for our
         .               /// purposes (primarily `-Z randomize-layout`)
         .               pub field_shuffle_seed: u64,
         .           }
         .           
         .           impl ReprOptions {
    12,558 ( 0.00%)      pub fn new(tcx: TyCtxt<'_>, did: DefId) -> ReprOptions {
         .                   let mut flags = ReprFlags::empty();
         .                   let mut size = None;
         .                   let mut max_align: Option<Align> = None;
         .                   let mut min_pack: Option<Align> = None;
         .           
         .                   // Generate a deterministically-derived seed from the item's path hash
         .                   // to allow for cross-crate compilation to actually work
         .                   let mut field_shuffle_seed = tcx.def_path_hash(did).0.to_smaller_hash();
         .           
         .                   // If the user defined a custom seed for layout randomization, xor the item's
         .                   // path hash with the user defined seed, this will allowing determinism while
         .                   // still allowing users to further randomize layout generation for e.g. fuzzing
     2,898 ( 0.00%)          if let Some(user_seed) = tcx.sess.opts.debugging_opts.layout_seed {
         .                       field_shuffle_seed ^= user_seed;
         .                   }
         .           
     3,864 ( 0.00%)          for attr in tcx.get_attrs(did).iter() {
     2,720 ( 0.00%)              for r in attr::find_repr_attrs(&tcx.sess, attr) {
         .                           flags.insert(match r {
         .                               attr::ReprC => ReprFlags::IS_C,
         .                               attr::ReprPacked(pack) => {
         .                                   let pack = Align::from_bytes(pack as u64).unwrap();
         .                                   min_pack = Some(if let Some(min_pack) = min_pack {
         .                                       min_pack.min(pack)
         .                                   } else {
         .                                       pack
-- line 1740 ----------------------------------------
-- line 1753 ----------------------------------------
         .                                   ReprFlags::empty()
         .                               }
         .                           });
         .                       }
         .                   }
         .           
         .                   // If `-Z randomize-layout` was enabled for the type definition then we can
         .                   // consider performing layout randomization
     7,728 ( 0.00%)          if tcx.sess.opts.debugging_opts.randomize_layout {
         .                       flags.insert(ReprFlags::RANDOMIZE_LAYOUT);
         .                   }
         .           
         .                   // This is here instead of layout because the choice must make it into metadata.
     5,796 ( 0.00%)          if !tcx.consider_optimizing(|| format!("Reorder fields of {:?}", tcx.def_path_str(did))) {
         .                       flags.insert(ReprFlags::IS_LINEAR);
         .                   }
         .           
     1,932 ( 0.00%)          Self { int: size, align: max_align, pack: min_pack, flags, field_shuffle_seed }
    27,048 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn simd(&self) -> bool {
         .                   self.flags.contains(ReprFlags::IS_SIMD)
         .               }
         .           
         .               #[inline]
         .               pub fn c(&self) -> bool {
-- line 1779 ----------------------------------------
-- line 1798 ----------------------------------------
         .               #[inline]
         .               pub fn hide_niche(&self) -> bool {
         .                   self.flags.contains(ReprFlags::HIDE_NICHE)
         .               }
         .           
         .               /// Returns the discriminant type, given these `repr` options.
         .               /// This must only be called on enums!
         .               pub fn discr_type(&self) -> attr::IntType {
    21,788 ( 0.00%)          self.int.unwrap_or(attr::SignedInt(ast::IntTy::Isize))
    11,390 ( 0.00%)      }
         .           
         .               /// Returns `true` if this `#[repr()]` should inhabit "smart enum
         .               /// layout" optimizations, such as representing `Foo<&T>` as a
         .               /// single pointer.
         .               pub fn inhibit_enum_layout_opt(&self) -> bool {
     3,940 ( 0.00%)          self.c() || self.int.is_some()
         .               }
         .           
         .               /// Returns `true` if this `#[repr()]` should inhibit struct field reordering
         .               /// optimizations, such as with `repr(C)`, `repr(packed(1))`, or `repr(<int>)`.
         .               pub fn inhibit_struct_field_reordering_opt(&self) -> bool {
     6,355 ( 0.00%)          if let Some(pack) = self.pack {
         .                       if pack.bytes() == 1 {
         .                           return true;
         .                       }
         .                   }
         .           
    12,712 ( 0.00%)          self.flags.intersects(ReprFlags::IS_UNOPTIMISABLE) || self.int.is_some()
         .               }
         .           
         .               /// Returns `true` if this type is valid for reordering and `-Z randomize-layout`
         .               /// was enabled for its declaration crate
         .               pub fn can_randomize_type_layout(&self) -> bool {
     3,177 ( 0.00%)          !self.inhibit_struct_field_reordering_opt()
         .                       && self.flags.contains(ReprFlags::RANDOMIZE_LAYOUT)
         .               }
         .           
         .               /// Returns `true` if this `#[repr()]` should inhibit union ABI optimisations.
         .               pub fn inhibit_union_abi_opt(&self) -> bool {
         .                   self.c()
         .               }
         .           }
         .           
         .           impl<'tcx> FieldDef {
         .               /// Returns the type of this field. The resulting type is not normalized. The `subst` is
         .               /// typically obtained via the second field of [`TyKind::Adt`].
   770,630 ( 0.00%)      pub fn ty(&self, tcx: TyCtxt<'tcx>, subst: SubstsRef<'tcx>) -> Ty<'tcx> {
   220,180 ( 0.00%)          tcx.type_of(self.did).subst(tcx, subst)
   880,720 ( 0.00%)      }
         .           
         .               /// Computes the `Ident` of this variant by looking up the `Span`
   205,779 ( 0.00%)      pub fn ident(&self, tcx: TyCtxt<'_>) -> Ident {
   117,588 ( 0.00%)          Ident::new(self.name, tcx.def_ident_span(self.did).unwrap())
   264,573 ( 0.00%)      }
         .           }
         .           
         .           pub type Attributes<'tcx> = &'tcx [ast::Attribute];
         .           
         .           #[derive(Debug, PartialEq, Eq)]
         .           pub enum ImplOverlapKind {
         .               /// These impls are always allowed to overlap.
         .               Permitted {
-- line 1859 ----------------------------------------
-- line 1891 ----------------------------------------
         .               /// marker traits.
         .               /// 4. Neither of the impls can have any where-clauses.
         .               ///
         .               /// Once `traitobject` 0.1.0 is no longer an active concern, this hack can be removed.
         .               Issue33140,
         .           }
         .           
         .           impl<'tcx> TyCtxt<'tcx> {
   125,056 ( 0.00%)      pub fn typeck_body(self, body: hir::BodyId) -> &'tcx TypeckResults<'tcx> {
    31,264 ( 0.00%)          self.typeck(self.hir().body_owner_def_id(body))
   125,056 ( 0.00%)      }
         .           
         .               pub fn provided_trait_methods(self, id: DefId) -> impl 'tcx + Iterator<Item = &'tcx AssocItem> {
         .                   self.associated_items(id)
         .                       .in_definition_order()
         .                       .filter(|item| item.kind == AssocKind::Fn && item.defaultness.has_value())
         .               }
         .           
         .               fn item_name_from_hir(self, def_id: DefId) -> Option<Ident> {
         .                   self.hir().get_if_local(def_id).and_then(|node| node.ident())
         .               }
         .           
     3,384 ( 0.00%)      fn item_name_from_def_id(self, def_id: DefId) -> Option<Symbol> {
       376 ( 0.00%)          if def_id.index == CRATE_DEF_INDEX {
         .                       Some(self.crate_name(def_id.krate))
         .                   } else {
     1,128 ( 0.00%)              let def_key = self.def_key(def_id);
     1,880 ( 0.00%)              match def_key.disambiguated_data.data {
         .                           // The name of a constructor is that of its parent.
         .                           rustc_hir::definitions::DefPathData::Ctor => self.item_name_from_def_id(DefId {
         .                               krate: def_id.krate,
         .                               index: def_key.parent.unwrap(),
         .                           }),
       752 ( 0.00%)                  _ => def_key.disambiguated_data.data.get_opt_name(),
         .                       }
         .                   }
     3,008 ( 0.00%)      }
         .           
         .               /// Look up the name of an item across crates. This does not look at HIR.
         .               ///
         .               /// When possible, this function should be used for cross-crate lookups over
         .               /// [`opt_item_name`] to avoid invalidating the incremental cache. If you
         .               /// need to handle items without a name, or HIR items that will not be
         .               /// serialized cross-crate, or if you need the span of the item, use
         .               /// [`opt_item_name`] instead.
         .               ///
         .               /// [`opt_item_name`]: Self::opt_item_name
     2,632 ( 0.00%)      pub fn item_name(self, id: DefId) -> Symbol {
         .                   // Look at cross-crate items first to avoid invalidating the incremental cache
         .                   // unless we have to.
       376 ( 0.00%)          self.item_name_from_def_id(id).unwrap_or_else(|| {
         .                       bug!("item_name: no name for {:?}", self.def_path(id));
         .                   })
     1,880 ( 0.00%)      }
         .           
         .               /// Look up the name and span of an item or [`Node`].
         .               ///
         .               /// See [`item_name`][Self::item_name] for more information.
         .               pub fn opt_item_name(self, def_id: DefId) -> Option<Ident> {
         .                   // Look at the HIR first so the span will be correct if this is a local item.
         .                   self.item_name_from_hir(def_id)
         .                       .or_else(|| self.item_name_from_def_id(def_id).map(Ident::with_dummy_span))
         .               }
         .           
 3,715,900 ( 0.02%)      pub fn opt_associated_item(self, def_id: DefId) -> Option<&'tcx AssocItem> {
 1,486,360 ( 0.01%)          if let DefKind::AssocConst | DefKind::AssocFn | DefKind::AssocTy = self.def_kind(def_id) {
         .                       Some(self.associated_item(def_id))
         .                   } else {
         .                       None
         .                   }
 3,344,310 ( 0.02%)      }
         .           
    39,742 ( 0.00%)      pub fn field_index(self, hir_id: hir::HirId, typeck_results: &TypeckResults<'_>) -> usize {
         .                   typeck_results.field_indices().get(hir_id).cloned().expect("no index for a field")
    79,484 ( 0.00%)      }
         .           
         .               pub fn find_field_index(self, ident: Ident, variant: &VariantDef) -> Option<usize> {
         .                   variant
         .                       .fields
         .                       .iter()
         .                       .position(|field| self.hygienic_eq(ident, field.ident(self), variant.def_id))
         .               }
         .           
         .               /// Returns `true` if the impls are the same polarity and the trait either
         .               /// has no items or is annotated `#[marker]` and prevents item overrides.
       800 ( 0.00%)      pub fn impls_are_allowed_to_overlap(
         .                   self,
         .                   def_id1: DefId,
         .                   def_id2: DefId,
         .               ) -> Option<ImplOverlapKind> {
         .                   // If either trait impl references an error, they're allowed to overlap,
         .                   // as one of them essentially doesn't exist.
         .                   if self.impl_trait_ref(def_id1).map_or(false, |tr| tr.references_error())
       160 ( 0.00%)              || self.impl_trait_ref(def_id2).map_or(false, |tr| tr.references_error())
         .                   {
         .                       return Some(ImplOverlapKind::Permitted { marker: false });
         .                   }
         .           
       800 ( 0.00%)          match (self.impl_polarity(def_id1), self.impl_polarity(def_id2)) {
         .                       (ImplPolarity::Reservation, _) | (_, ImplPolarity::Reservation) => {
         .                           // `#[rustc_reservation_impl]` impls don't overlap with anything
         .                           debug!(
         .                               "impls_are_allowed_to_overlap({:?}, {:?}) = Some(Permitted) (reservations)",
         .                               def_id1, def_id2
         .                           );
         .                           return Some(ImplOverlapKind::Permitted { marker: false });
         .                       }
-- line 1997 ----------------------------------------
-- line 2004 ----------------------------------------
         .                           );
         .                           return None;
         .                       }
         .                       (ImplPolarity::Positive, ImplPolarity::Positive)
         .                       | (ImplPolarity::Negative, ImplPolarity::Negative) => {}
         .                   };
         .           
         .                   let is_marker_overlap = {
       800 ( 0.00%)              let is_marker_impl = |def_id: DefId| -> bool {
       240 ( 0.00%)                  let trait_ref = self.impl_trait_ref(def_id);
       240 ( 0.00%)                  trait_ref.map_or(false, |tr| self.trait_def(tr.def_id).is_marker)
       640 ( 0.00%)              };
       320 ( 0.00%)              is_marker_impl(def_id1) && is_marker_impl(def_id2)
         .                   };
         .           
         .                   if is_marker_overlap {
         .                       debug!(
         .                           "impls_are_allowed_to_overlap({:?}, {:?}) = Some(Permitted) (marker overlap)",
         .                           def_id1, def_id2
         .                       );
         .                       Some(ImplOverlapKind::Permitted { marker: true })
         .                   } else {
       320 ( 0.00%)              if let Some(self_ty1) = self.issue33140_self_ty(def_id1) {
         .                           if let Some(self_ty2) = self.issue33140_self_ty(def_id2) {
         .                               if self_ty1 == self_ty2 {
         .                                   debug!(
         .                                       "impls_are_allowed_to_overlap({:?}, {:?}) - issue #33140 HACK",
         .                                       def_id1, def_id2
         .                                   );
         .                                   return Some(ImplOverlapKind::Issue33140);
         .                               } else {
-- line 2034 ----------------------------------------
-- line 2038 ----------------------------------------
         .                                   );
         .                               }
         .                           }
         .                       }
         .           
         .                       debug!("impls_are_allowed_to_overlap({:?}, {:?}) = None", def_id1, def_id2);
         .                       None
         .                   }
       640 ( 0.00%)      }
         .           
         .               /// Returns `ty::VariantDef` if `res` refers to a struct,
         .               /// or variant or their constructors, panics otherwise.
     4,669 ( 0.00%)      pub fn expect_variant_res(self, res: Res) -> &'tcx VariantDef {
     8,004 ( 0.00%)          match res {
         .                       Res::Def(DefKind::Variant, did) => {
         .                           let enum_did = self.parent(did).unwrap();
         .                           self.adt_def(enum_did).variant_with_id(did)
         .                       }
         .                       Res::Def(DefKind::Struct | DefKind::Union, did) => self.adt_def(did).non_enum_variant(),
         .                       Res::Def(DefKind::Ctor(CtorOf::Variant, ..), variant_ctor_did) => {
         .                           let variant_did = self.parent(variant_ctor_did).unwrap();
         .                           let enum_did = self.parent(variant_did).unwrap();
-- line 2059 ----------------------------------------
-- line 2060 ----------------------------------------
         .                           self.adt_def(enum_did).variant_with_ctor_id(variant_ctor_did)
         .                       }
         .                       Res::Def(DefKind::Ctor(CtorOf::Struct, ..), ctor_did) => {
         .                           let struct_did = self.parent(ctor_did).expect("struct ctor has no parent");
         .                           self.adt_def(struct_did).non_enum_variant()
         .                       }
         .                       _ => bug!("expect_variant_res used with unexpected res {:?}", res),
         .                   }
     5,336 ( 0.00%)      }
         .           
         .               /// Returns the possibly-auto-generated MIR of a `(DefId, Subst)` pair.
         .               pub fn instance_mir(self, instance: ty::InstanceDef<'tcx>) -> &'tcx Body<'tcx> {
         .                   match instance {
         .                       ty::InstanceDef::Item(def) => match self.def_kind(def.did) {
         .                           DefKind::Const
         .                           | DefKind::Static
         .                           | DefKind::AssocConst
-- line 2076 ----------------------------------------
-- line 2091 ----------------------------------------
         .                       | ty::InstanceDef::Virtual(..)
         .                       | ty::InstanceDef::ClosureOnceShim { .. }
         .                       | ty::InstanceDef::DropGlue(..)
         .                       | ty::InstanceDef::CloneShim(..) => self.mir_shims(instance),
         .                   }
         .               }
         .           
         .               /// Gets the attributes of a definition.
 1,038,680 ( 0.01%)      pub fn get_attrs(self, did: DefId) -> Attributes<'tcx> {
   311,604 ( 0.00%)          if let Some(did) = did.as_local() {
   261,276 ( 0.00%)              self.hir().attrs(self.hir().local_def_id_to_hir_id(did))
         .                   } else {
         .                       self.item_attrs(did)
         .                   }
   830,944 ( 0.00%)      }
         .           
         .               /// Determines whether an item is annotated with an attribute.
   139,232 ( 0.00%)      pub fn has_attr(self, did: DefId, attr: Symbol) -> bool {
   407,322 ( 0.00%)          self.sess.contains_name(&self.get_attrs(did), attr)
         .               }
         .           
         .               /// Determines whether an item is annotated with `doc(hidden)`.
     8,953 ( 0.00%)      pub fn is_doc_hidden(self, did: DefId) -> bool {
     1,279 ( 0.00%)          self.get_attrs(did)
         .                       .iter()
     1,312 ( 0.00%)              .filter_map(|attr| if attr.has_name(sym::doc) { attr.meta_item_list() } else { None })
         .                       .any(|items| items.iter().any(|item| item.has_name(sym::hidden)))
    10,232 ( 0.00%)      }
         .           
         .               /// Returns `true` if this is an `auto trait`.
   491,932 ( 0.00%)      pub fn trait_is_auto(self, trait_def_id: DefId) -> bool {
    70,276 ( 0.00%)          self.trait_def(trait_def_id).has_auto_impl
   562,208 ( 0.00%)      }
         .           
         .               /// Returns layout of a generator. Layout might be unavailable if the
         .               /// generator is tainted by errors.
         .               pub fn generator_layout(self, def_id: DefId) -> Option<&'tcx GeneratorLayout<'tcx>> {
         .                   self.optimized_mir(def_id).generator_layout()
         .               }
         .           
         .               /// Given the `DefId` of an impl, returns the `DefId` of the trait it implements.
         .               /// If it implements no trait, returns `None`.
    36,869 ( 0.00%)      pub fn trait_id_of_impl(self, def_id: DefId) -> Option<DefId> {
         .                   self.impl_trait_ref(def_id).map(|tr| tr.def_id)
    47,403 ( 0.00%)      }
         .           
         .               /// If the given defid describes a method belonging to an impl, returns the
         .               /// `DefId` of the impl that the method belongs to; otherwise, returns `None`.
     2,578 ( 0.00%)      pub fn impl_of_method(self, def_id: DefId) -> Option<DefId> {
    10,312 ( 0.00%)          self.opt_associated_item(def_id).and_then(|trait_item| match trait_item.container {
         .                       TraitContainer(_) => None,
         .                       ImplContainer(def_id) => Some(def_id),
         .                   })
     5,156 ( 0.00%)      }
         .           
         .               /// Looks up the span of `impl_did` if the impl is local; otherwise returns `Err`
         .               /// with the name of the crate containing the impl.
         .               pub fn span_of_impl(self, impl_did: DefId) -> Result<Span, Symbol> {
         .                   if let Some(impl_did) = impl_did.as_local() {
         .                       Ok(self.def_span(impl_did))
         .                   } else {
         .                       Err(self.crate_name(impl_did.krate))
         .                   }
         .               }
         .           
         .               /// Hygienically compares a use-site name (`use_name`) for a field or an associated item with
         .               /// its supposed definition name (`def_name`). The method also needs `DefId` of the supposed
         .               /// definition's parent/scope to perform comparison.
    97,632 ( 0.00%)      pub fn hygienic_eq(self, use_name: Ident, def_name: Ident, def_parent_def_id: DefId) -> bool {
         .                   // We could use `Ident::eq` here, but we deliberately don't. The name
         .                   // comparison fails frequently, and we want to avoid the expensive
         .                   // `normalize_to_macros_2_0()` calls required for the span comparison whenever possible.
    12,204 ( 0.00%)          use_name.name == def_name.name
    31,536 ( 0.00%)              && use_name
         .                           .span
         .                           .ctxt()
         .                           .hygienic_eq(def_name.span.ctxt(), self.expn_that_defined(def_parent_def_id))
    97,632 ( 0.00%)      }
         .           
    95,616 ( 0.00%)      pub fn adjust_ident(self, mut ident: Ident, scope: DefId) -> Ident {
    21,248 ( 0.00%)          ident.span.normalize_to_macros_2_0_and_adjust(self.expn_that_defined(scope));
    21,248 ( 0.00%)          ident
    84,992 ( 0.00%)      }
         .           
   160,938 ( 0.00%)      pub fn adjust_ident_and_get_scope(
         .                   self,
         .                   mut ident: Ident,
         .                   scope: DefId,
         .                   block: hir::HirId,
         .               ) -> (Ident, DefId) {
    17,882 ( 0.00%)          let scope = ident
         .                       .span
         .                       .normalize_to_macros_2_0_and_adjust(self.expn_that_defined(scope))
         .                       .and_then(|actual_expansion| actual_expansion.expn_data().parent_module)
    71,528 ( 0.00%)              .unwrap_or_else(|| self.parent_module(block).to_def_id());
   107,292 ( 0.00%)          (ident, scope)
   160,938 ( 0.00%)      }
         .           
    16,611 ( 0.00%)      pub fn is_object_safe(self, key: DefId) -> bool {
         .                   self.object_safety_violations(key).is_empty()
    18,984 ( 0.00%)      }
         .           }
         .           
         .           /// Yields the parent function's `LocalDefId` if `def_id` is an `impl Trait` definition.
    29,016 ( 0.00%)  pub fn is_impl_trait_defn(tcx: TyCtxt<'_>, def_id: DefId) -> Option<LocalDefId> {
    29,016 ( 0.00%)      let def_id = def_id.as_local()?;
    32,196 ( 0.00%)      if let Node::Item(item) = tcx.hir().get_by_def_id(def_id) {
    10,084 ( 0.00%)          if let hir::ItemKind::OpaqueTy(ref opaque_ty) = item.kind {
     2,886 ( 0.00%)              return match opaque_ty.origin {
         .                           hir::OpaqueTyOrigin::FnReturn(parent) | hir::OpaqueTyOrigin::AsyncFn(parent) => {
         .                               Some(parent)
         .                           }
         .                           hir::OpaqueTyOrigin::TyAlias => None,
         .                       };
         .                   }
         .               }
         .               None
    38,688 ( 0.00%)  }
         .           
         .           pub fn int_ty(ity: ast::IntTy) -> IntTy {
         .               match ity {
         .                   ast::IntTy::Isize => IntTy::Isize,
         .                   ast::IntTy::I8 => IntTy::I8,
         .                   ast::IntTy::I16 => IntTy::I16,
         .                   ast::IntTy::I32 => IntTy::I32,
         .                   ast::IntTy::I64 => IntTy::I64,
-- line 2216 ----------------------------------------
-- line 2231 ----------------------------------------
         .           
         .           pub fn float_ty(fty: ast::FloatTy) -> FloatTy {
         .               match fty {
         .                   ast::FloatTy::F32 => FloatTy::F32,
         .                   ast::FloatTy::F64 => FloatTy::F64,
         .               }
         .           }
         .           
       293 ( 0.00%)  pub fn ast_int_ty(ity: IntTy) -> ast::IntTy {
         .               match ity {
         .                   IntTy::Isize => ast::IntTy::Isize,
         .                   IntTy::I8 => ast::IntTy::I8,
         .                   IntTy::I16 => ast::IntTy::I16,
         .                   IntTy::I32 => ast::IntTy::I32,
         .                   IntTy::I64 => ast::IntTy::I64,
         .                   IntTy::I128 => ast::IntTy::I128,
         .               }
       293 ( 0.00%)  }
         .           
         .           pub fn ast_uint_ty(uty: UintTy) -> ast::UintTy {
         .               match uty {
         .                   UintTy::Usize => ast::UintTy::Usize,
         .                   UintTy::U8 => ast::UintTy::U8,
         .                   UintTy::U16 => ast::UintTy::U16,
         .                   UintTy::U32 => ast::UintTy::U32,
         .                   UintTy::U64 => ast::UintTy::U64,
-- line 2256 ----------------------------------------
-- line 2262 ----------------------------------------
         .               closure::provide(providers);
         .               context::provide(providers);
         .               erase_regions::provide(providers);
         .               layout::provide(providers);
         .               util::provide(providers);
         .               print::provide(providers);
         .               super::util::bug::provide(providers);
         .               super::middle::provide(providers);
         8 ( 0.00%)      *providers = ty::query::Providers {
         .                   trait_impls_of: trait_def::trait_impls_of_provider,
         .                   type_uninhabited_from: inhabitedness::type_uninhabited_from,
         .                   const_param_default: consts::const_param_default,
         .                   vtable_allocation: vtable::vtable_allocation_provider,
         .                   ..*providers
         .               };
         1 ( 0.00%)  }
         .           
         .           /// A map for the local crate mapping each type to a vector of its
         .           /// inherent impls. This is not meant to be used outside of coherence;
         .           /// rather, you should request the vector for a specific type via
         .           /// `tcx.inherent_impls(def_id)` so as to minimize your dependencies
         .           /// (constructing this map requires touching the entire crate).
         .           #[derive(Clone, Debug, Default, HashStable)]
         .           pub struct CrateInherentImpls {
-- line 2285 ----------------------------------------
-- line 2288 ----------------------------------------
         .           
         .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, HashStable)]
         .           pub struct SymbolName<'tcx> {
         .               /// `&str` gives a consistent ordering, which ensures reproducible builds.
         .               pub name: &'tcx str,
         .           }
         .           
         .           impl<'tcx> SymbolName<'tcx> {
         6 ( 0.00%)      pub fn new(tcx: TyCtxt<'tcx>, name: &str) -> SymbolName<'tcx> {
         .                   SymbolName {
         .                       name: unsafe { str::from_utf8_unchecked(tcx.arena.alloc_slice(name.as_bytes())) },
         .                   }
         8 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> fmt::Display for SymbolName<'tcx> {
         .               fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
         .                   fmt::Display::fmt(&self.name, fmt)
         .               }
         .           }
         .           
-- line 2308 ----------------------------------------

26,569,052 ( 0.14%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/string.rs
--------------------------------------------------------------------------------
Ir                  

-- line 374 ----------------------------------------
         .               ///
         .               /// ```
         .               /// let s = String::new();
         .               /// ```
         .               #[inline]
         .               #[rustc_const_stable(feature = "const_string_new", since = "1.39.0")]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[must_use]
   250,326 ( 0.00%)      pub const fn new() -> String {
 1,001,097 ( 0.01%)          String { vec: Vec::new() }
   166,884 ( 0.00%)      }
         .           
         .               /// Creates a new empty `String` with a particular capacity.
         .               ///
         .               /// `String`s have an internal buffer to hold their data. The capacity is
         .               /// the length of that buffer, and can be queried with the [`capacity`]
         .               /// method. This method creates an empty `String`, but one with an initial
         .               /// buffer that can hold `capacity` bytes. This is useful when you may be
         .               /// appending a bunch of data to the `String`, reducing the number of
-- line 392 ----------------------------------------
-- line 420 ----------------------------------------
         .               /// // ...but this may make the string reallocate
         .               /// s.push('a');
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[must_use]
         .               pub fn with_capacity(capacity: usize) -> String {
   158,470 ( 0.00%)          String { vec: Vec::with_capacity(capacity) }
         .               }
         .           
         .               // HACK(japaric): with cfg(test) the inherent `[T]::to_vec` method, which is
         .               // required for this method definition, is not available. Since we don't
         .               // require this method for testing purposes, I'll just stub it
         .               // NB see the slice::hack module in slice.rs for more information
         .               #[inline]
         .               #[cfg(test)]
-- line 436 ----------------------------------------
-- line 492 ----------------------------------------
         .               ///
         .               /// [`from_utf8_unchecked`]: String::from_utf8_unchecked
         .               /// [`Vec<u8>`]: crate::vec::Vec "Vec"
         .               /// [`&str`]: prim@str "&str"
         .               /// [`into_bytes`]: String::into_bytes
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn from_utf8(vec: Vec<u8>) -> Result<String, FromUtf8Error> {
       215 ( 0.00%)          match str::from_utf8(&vec) {
         .                       Ok(..) => Ok(String { vec }),
         .                       Err(e) => Err(FromUtf8Error { bytes: vec, error: e }),
         .                   }
         .               }
         .           
         .               /// Converts a slice of bytes to a string, including invalid characters.
         .               ///
         .               /// Strings are made of bytes ([`u8`]), and a slice of bytes
-- line 508 ----------------------------------------
-- line 550 ----------------------------------------
         .               /// let input = b"Hello \xF0\x90\x80World";
         .               /// let output = String::from_utf8_lossy(input);
         .               ///
         .               /// assert_eq!("Hello �World", output);
         .               /// ```
         .               #[must_use]
         .               #[cfg(not(no_global_oom_handling))]
         .               #[stable(feature = "rust1", since = "1.0.0")]
        81 ( 0.00%)      pub fn from_utf8_lossy(v: &[u8]) -> Cow<'_, str> {
        90 ( 0.00%)          let mut iter = lossy::Utf8Lossy::from_bytes(v).chunks();
         .           
        45 ( 0.00%)          let first_valid = if let Some(chunk) = iter.next() {
         .                       let lossy::Utf8LossyChunk { valid, broken } = chunk;
         9 ( 0.00%)              if broken.is_empty() {
         .                           debug_assert_eq!(valid.len(), v.len());
         9 ( 0.00%)                  return Cow::Borrowed(valid);
         .                       }
         .                       valid
         .                   } else {
         .                       return Cow::Borrowed("");
         .                   };
         .           
         .                   const REPLACEMENT: &str = "\u{FFFD}";
         .           
-- line 573 ----------------------------------------
-- line 578 ----------------------------------------
         .                   for lossy::Utf8LossyChunk { valid, broken } in iter {
         .                       res.push_str(valid);
         .                       if !broken.is_empty() {
         .                           res.push_str(REPLACEMENT);
         .                       }
         .                   }
         .           
         .                   Cow::Owned(res)
        72 ( 0.00%)      }
         .           
         .               /// Decode a UTF-16–encoded vector `v` into a `String`, returning [`Err`]
         .               /// if `v` contains any invalid data.
         .               ///
         .               /// # Examples
         .               ///
         .               /// Basic usage:
         .               ///
-- line 594 ----------------------------------------
-- line 761 ----------------------------------------
         .               ///     String::from_utf8_unchecked(sparkle_heart)
         .               /// };
         .               ///
         .               /// assert_eq!("💖", sparkle_heart);
         .               /// ```
         .               #[inline]
         .               #[must_use]
         .               #[stable(feature = "rust1", since = "1.0.0")]
     6,616 ( 0.00%)      pub unsafe fn from_utf8_unchecked(bytes: Vec<u8>) -> String {
    86,974 ( 0.00%)          String { vec: bytes }
     6,616 ( 0.00%)      }
         .           
         .               /// Converts a `String` into a byte vector.
         .               ///
         .               /// This consumes the `String`, so we do not need to copy its contents.
         .               ///
         .               /// # Examples
         .               ///
         .               /// Basic usage:
-- line 779 ----------------------------------------
-- line 800 ----------------------------------------
         .               /// ```
         .               /// let s = String::from("foo");
         .               ///
         .               /// assert_eq!("foo", s.as_str());
         .               /// ```
         .               #[inline]
         .               #[must_use]
         .               #[stable(feature = "string_as_str", since = "1.7.0")]
    89,940 ( 0.00%)      pub fn as_str(&self) -> &str {
   134,910 ( 0.00%)          self
    89,940 ( 0.00%)      }
         .           
         .               /// Converts a `String` into a mutable string slice.
         .               ///
         .               /// # Examples
         .               ///
         .               /// Basic usage:
         .               ///
         .               /// ```
-- line 818 ----------------------------------------
-- line 841 ----------------------------------------
         .               ///
         .               /// s.push_str("bar");
         .               ///
         .               /// assert_eq!("foobar", s);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
   560,938 ( 0.00%)      pub fn push_str(&mut self, string: &str) {
    80,134 ( 0.00%)          self.vec.extend_from_slice(string.as_bytes())
   160,268 ( 0.00%)      }
         .           
         .               /// Copies elements from `src` range to the end of the string.
         .               ///
         .               /// ## Panics
         .               ///
         .               /// Panics if the starting point or end point do not lie on a [`char`]
         .               /// boundary, or if they're out of bounds.
         .               ///
-- line 859 ----------------------------------------
-- line 1138 ----------------------------------------
         .               /// s.push('2');
         .               /// s.push('3');
         .               ///
         .               /// assert_eq!("abc123", s);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
19,605,382 ( 0.10%)      pub fn push(&mut self, ch: char) {
   228,752 ( 0.00%)          match ch.len_utf8() {
   228,752 ( 0.00%)              1 => self.vec.push(ch as u8),
       688 ( 0.00%)              _ => self.vec.extend_from_slice(ch.encode_utf8(&mut [0; 4]).as_bytes()),
         .                   }
16,070,941 ( 0.08%)      }
         .           
         .               /// Returns a byte slice of this `String`'s contents.
         .               ///
         .               /// The inverse of this method is [`from_utf8`].
         .               ///
         .               /// [`from_utf8`]: String::from_utf8
         .               ///
         .               /// # Examples
-- line 1159 ----------------------------------------
-- line 1163 ----------------------------------------
         .               /// ```
         .               /// let s = String::from("hello");
         .               ///
         .               /// assert_eq!(&[104, 101, 108, 108, 111], s.as_bytes());
         .               /// ```
         .               #[inline]
         .               #[must_use]
         .               #[stable(feature = "rust1", since = "1.0.0")]
     6,616 ( 0.00%)      pub fn as_bytes(&self) -> &[u8] {
     9,924 ( 0.00%)          &self.vec
     6,616 ( 0.00%)      }
         .           
         .               /// Shortens this `String` to the specified length.
         .               ///
         .               /// If `new_len` is greater than the string's current length, this has no
         .               /// effect.
         .               ///
         .               /// Note that this method has no effect on the allocated capacity
         .               /// of the string
-- line 1181 ----------------------------------------
-- line 1543 ----------------------------------------
         .               /// let fancy_f = String::from("ƒoo");
         .               /// assert_eq!(fancy_f.len(), 4);
         .               /// assert_eq!(fancy_f.chars().count(), 3);
         .               /// ```
         .               #[inline]
         .               #[must_use]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn len(&self) -> usize {
        55 ( 0.00%)          self.vec.len()
         .               }
         .           
         .               /// Returns `true` if this `String` has a length of zero, and `false` otherwise.
         .               ///
         .               /// # Examples
         .               ///
         .               /// Basic usage:
         .               ///
-- line 1559 ----------------------------------------
-- line 1563 ----------------------------------------
         .               ///
         .               /// v.push('a');
         .               /// assert!(!v.is_empty());
         .               /// ```
         .               #[inline]
         .               #[must_use]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn is_empty(&self) -> bool {
       116 ( 0.00%)          self.len() == 0
         .               }
         .           
         .               /// Splits the string into two at the given byte index.
         .               ///
         .               /// Returns a newly allocated `String`. `self` contains bytes `[0, at)`, and
         .               /// the returned `String` contains bytes `[at, len)`. `at` must be on the
         .               /// boundary of a UTF-8 code point.
         .               ///
-- line 1579 ----------------------------------------
-- line 1747 ----------------------------------------
         .               /// let s = String::from("hello");
         .               ///
         .               /// let b = s.into_boxed_str();
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[stable(feature = "box_str", since = "1.4.0")]
         .               #[must_use = "`self` will be dropped if the result is not used"]
         .               #[inline]
     6,616 ( 0.00%)      pub fn into_boxed_str(self) -> Box<str> {
    79,392 ( 0.00%)          let slice = self.vec.into_boxed_slice();
    19,848 ( 0.00%)          unsafe { from_boxed_utf8_unchecked(slice) }
    13,232 ( 0.00%)      }
         .           }
         .           
         .           impl FromUtf8Error {
         .               /// Returns a slice of [`u8`]s bytes that were attempted to convert to a `String`.
         .               ///
         .               /// # Examples
         .               ///
         .               /// Basic usage:
-- line 1766 ----------------------------------------
-- line 1845 ----------------------------------------
         .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
         .                   fmt::Display::fmt("invalid utf-16: lone surrogate found", f)
         .               }
         .           }
         .           
         .           #[cfg(not(no_global_oom_handling))]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl Clone for String {
    22,356 ( 0.00%)      fn clone(&self) -> Self {
    11,178 ( 0.00%)          String { vec: self.vec.clone() }
    26,082 ( 0.00%)      }
         .           
         .               fn clone_from(&mut self, source: &Self) {
         .                   self.vec.clone_from(&source.vec);
         .               }
         .           }
         .           
         .           #[cfg(not(no_global_oom_handling))]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl FromIterator<char> for String {
       715 ( 0.00%)      fn from_iter<I: IntoIterator<Item = char>>(iter: I) -> String {
         .                   let mut buf = String::new();
         .                   buf.extend(iter);
         .                   buf
       858 ( 0.00%)      }
         .           }
         .           
         .           #[cfg(not(no_global_oom_handling))]
         .           #[stable(feature = "string_from_iter_by_ref", since = "1.17.0")]
         .           impl<'a> FromIterator<&'a char> for String {
         .               fn from_iter<I: IntoIterator<Item = &'a char>>(iter: I) -> String {
         .                   let mut buf = String::new();
         .                   buf.extend(iter);
-- line 1877 ----------------------------------------
-- line 1937 ----------------------------------------
         .                   }
         .               }
         .           }
         .           
         .           #[cfg(not(no_global_oom_handling))]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl Extend<char> for String {
         .               fn extend<I: IntoIterator<Item = char>>(&mut self, iter: I) {
 1,702,451 ( 0.01%)          let iterator = iter.into_iter();
 1,701,736 ( 0.01%)          let (lower_bound, _) = iterator.size_hint();
         .                   self.reserve(lower_bound);
 1,283,271 ( 0.01%)          iterator.for_each(move |c| self.push(c));
         .               }
         .           
         .               #[inline]
         .               fn extend_one(&mut self, c: char) {
         .                   self.push(c);
         .               }
         .           
         .               #[inline]
-- line 1956 ----------------------------------------
-- line 2082 ----------------------------------------
         .           }
         .           
         .           macro_rules! impl_eq {
         .               ($lhs:ty, $rhs: ty) => {
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[allow(unused_lifetimes)]
         .                   impl<'a, 'b> PartialEq<$rhs> for $lhs {
         .                       #[inline]
 1,050,224 ( 0.01%)              fn eq(&self, other: &$rhs) -> bool {
 3,150,672 ( 0.02%)                  PartialEq::eq(&self[..], &other[..])
 1,050,224 ( 0.01%)              }
         .                       #[inline]
         .                       fn ne(&self, other: &$rhs) -> bool {
         .                           PartialEq::ne(&self[..], &other[..])
         .                       }
         .                   }
         .           
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[allow(unused_lifetimes)]
-- line 2100 ----------------------------------------
-- line 2128 ----------------------------------------
         .               fn default() -> String {
         .                   String::new()
         .               }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl fmt::Display for String {
         .               #[inline]
     5,438 ( 0.00%)      fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
    11,194 ( 0.00%)          fmt::Display::fmt(&**self, f)
         .               }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl fmt::Debug for String {
         .               #[inline]
         .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
         .                   fmt::Debug::fmt(&**self, f)
         .               }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl hash::Hash for String {
         .               #[inline]
         .               fn hash<H: hash::Hasher>(&self, hasher: &mut H) {
    25,131 ( 0.00%)          (**self).hash(hasher)
         .               }
         .           }
         .           
         .           /// Implements the `+` operator for concatenating two strings.
         .           ///
         .           /// This consumes the `String` on the left-hand side and re-uses its buffer (growing it if
         .           /// necessary). This is done to avoid allocating a new `String` and copying the entire contents on
         .           /// every operation, which would lead to *O*(*n*^2) running time when building an *n*-byte string by
-- line 2161 ----------------------------------------
-- line 2194 ----------------------------------------
         .           #[cfg(not(no_global_oom_handling))]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl Add<&str> for String {
         .               type Output = String;
         .           
         .               #[inline]
         .               fn add(mut self, other: &str) -> String {
         .                   self.push_str(other);
         2 ( 0.00%)          self
         .               }
         .           }
         .           
         .           /// Implements the `+=` operator for appending to a `String`.
         .           ///
         .           /// This has the same behavior as the [`push_str`][String::push_str] method.
         .           #[cfg(not(no_global_oom_handling))]
         .           #[stable(feature = "stringaddassign", since = "1.12.0")]
-- line 2210 ----------------------------------------
-- line 2242 ----------------------------------------
         .                   &self[..][index]
         .               }
         .           }
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl ops::Index<ops::RangeFull> for String {
         .               type Output = str;
         .           
         .               #[inline]
   525,112 ( 0.00%)      fn index(&self, _index: ops::RangeFull) -> &str {
 1,575,336 ( 0.01%)          unsafe { str::from_utf8_unchecked(&self.vec) }
   525,112 ( 0.00%)      }
         .           }
         .           #[stable(feature = "inclusive_range", since = "1.26.0")]
         .           impl ops::Index<ops::RangeInclusive<usize>> for String {
         .               type Output = str;
         .           
         .               #[inline]
         .               fn index(&self, index: ops::RangeInclusive<usize>) -> &str {
         .                   Index::index(&**self, index)
-- line 2260 ----------------------------------------
-- line 2313 ----------------------------------------
         .               }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl ops::Deref for String {
         .               type Target = str;
         .           
         .               #[inline]
    96,940 ( 0.00%)      fn deref(&self) -> &str {
   290,820 ( 0.00%)          unsafe { str::from_utf8_unchecked(&self.vec) }
    96,940 ( 0.00%)      }
         .           }
         .           
         .           #[stable(feature = "derefmut_for_string", since = "1.3.0")]
         .           impl ops::DerefMut for String {
         .               #[inline]
         .               fn deref_mut(&mut self) -> &mut str {
         .                   unsafe { str::from_utf8_unchecked_mut(&mut *self.vec) }
         .               }
-- line 2331 ----------------------------------------
-- line 2386 ----------------------------------------
         .           #[cfg(not(no_global_oom_handling))]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T: fmt::Display + ?Sized> ToString for T {
         .               // A common guideline is to not inline generic functions. However,
         .               // removing `#[inline]` from this method causes non-negligible regressions.
         .               // See <https://github.com/rust-lang/rust/pull/74852>, the last attempt
         .               // to try to remove it.
         .               #[inline]
   480,804 ( 0.00%)      default fn to_string(&self) -> String {
    80,134 ( 0.00%)          let mut buf = String::new();
 2,035,572 ( 0.01%)          let mut formatter = core::fmt::Formatter::new(&mut buf);
         .                   // Bypass format_args!() to avoid write_str with zero-length strs
 1,377,871 ( 0.01%)          fmt::Display::fmt(self, &mut formatter)
         .                       .expect("a Display implementation returned an error unexpectedly");
         .                   buf
   160,268 ( 0.00%)      }
         .           }
         .           
         .           #[cfg(not(no_global_oom_handling))]
         .           #[stable(feature = "char_to_string_specialization", since = "1.46.0")]
         .           impl ToString for char {
         .               #[inline]
         .               fn to_string(&self) -> String {
         .                   String::from(self.encode_utf8(&mut [0; 4]))
-- line 2409 ----------------------------------------
-- line 2470 ----------------------------------------
         .                   self[..].to_owned()
         .               }
         .           }
         .           
         .           #[cfg(not(no_global_oom_handling))]
         .           #[stable(feature = "string_to_string_specialization", since = "1.17.0")]
         .           impl ToString for String {
         .               #[inline]
    11,840 ( 0.00%)      fn to_string(&self) -> String {
     2,960 ( 0.00%)          self.to_owned()
     5,920 ( 0.00%)      }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl AsRef<str> for String {
         .               #[inline]
         .               fn as_ref(&self) -> &str {
         .                   self
         .               }
-- line 2488 ----------------------------------------
-- line 2494 ----------------------------------------
         .               fn as_mut(&mut self) -> &mut str {
         .                   self
         .               }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl AsRef<[u8]> for String {
         .               #[inline]
     6,616 ( 0.00%)      fn as_ref(&self) -> &[u8] {
     9,924 ( 0.00%)          self.as_bytes()
     6,616 ( 0.00%)      }
         .           }
         .           
         .           #[cfg(not(no_global_oom_handling))]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl From<&str> for String {
         .               /// Converts a `&str` into a [`String`].
         .               ///
         .               /// The result is allocated on the heap.
-- line 2512 ----------------------------------------
-- line 2620 ----------------------------------------
         .               /// ```
         .               /// # use std::borrow::Cow;
         .               /// assert_eq!(Cow::from("eggplant"), Cow::Borrowed("eggplant"));
         .               /// ```
         .               ///
         .               /// [`Borrowed`]: crate::borrow::Cow::Borrowed "borrow::Cow::Borrowed"
         .               #[inline]
         .               fn from(s: &'a str) -> Cow<'a, str> {
    23,382 ( 0.00%)          Cow::Borrowed(s)
         .               }
         .           }
         .           
         .           #[cfg(not(no_global_oom_handling))]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<'a> From<String> for Cow<'a, str> {
         .               /// Converts a [`String`] into an [`Owned`] variant.
         .               /// No heap allocation is performed, and the string
-- line 2636 ----------------------------------------
-- line 2643 ----------------------------------------
         .               /// let s = "eggplant".to_string();
         .               /// let s2 = "eggplant".to_string();
         .               /// assert_eq!(Cow::from(s), Cow::<'static, str>::Owned(s2));
         .               /// ```
         .               ///
         .               /// [`Owned`]: crate::borrow::Cow::Owned "borrow::Cow::Owned"
         .               #[inline]
         .               fn from(s: String) -> Cow<'a, str> {
    14,945 ( 0.00%)          Cow::Owned(s)
         .               }
         .           }
         .           
         .           #[cfg(not(no_global_oom_handling))]
         .           #[stable(feature = "cow_from_string_ref", since = "1.28.0")]
         .           impl<'a> From<&'a String> for Cow<'a, str> {
         .               /// Converts a [`String`] reference into a [`Borrowed`] variant.
         .               /// No heap allocation is performed, and the string
-- line 2659 ----------------------------------------
-- line 2709 ----------------------------------------
         .               /// ```
         .               /// let s1 = String::from("hello world");
         .               /// let v1 = Vec::from(s1);
         .               ///
         .               /// for b in v1 {
         .               ///     println!("{}", b);
         .               /// }
         .               /// ```
         3 ( 0.00%)      fn from(string: String) -> Vec<u8> {
        12 ( 0.00%)          string.into_bytes()
         3 ( 0.00%)      }
         .           }
         .           
         .           #[cfg(not(no_global_oom_handling))]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl fmt::Write for String {
         .               #[inline]
 3,005,464 ( 0.02%)      fn write_str(&mut self, s: &str) -> fmt::Result {
    80,134 ( 0.00%)          self.push_str(s);
    80,134 ( 0.00%)          Ok(())
 2,749,982 ( 0.01%)      }
         .           
         .               #[inline]
   127,098 ( 0.00%)      fn write_char(&mut self, c: char) -> fmt::Result {
         3 ( 0.00%)          self.push(c);
         .                   Ok(())
   127,098 ( 0.00%)      }
         .           }
         .           
         .           /// A draining iterator for `String`.
         .           ///
         .           /// This struct is created by the [`drain`] method on [`String`]. See its
         .           /// documentation for more.
         .           ///
         .           /// [`drain`]: String::drain
-- line 2743 ----------------------------------------

 4,266,556 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/string.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/mir/terminator.rs
--------------------------------------------------------------------------------
Ir                  

-- line 12 ----------------------------------------
         .           use rustc_span::Span;
         .           use std::borrow::Cow;
         .           use std::fmt::{self, Debug, Formatter, Write};
         .           use std::iter;
         .           use std::slice;
         .           
         .           pub use super::query::*;
         .           
    45,645 ( 0.00%)  #[derive(Debug, Clone, TyEncodable, TyDecodable, Hash, HashStable, PartialEq, PartialOrd)]
         .           pub struct SwitchTargets {
         .               /// Possible values. The locations to branch to in each case
         .               /// are found in the corresponding indices from the `targets` vector.
         .               values: SmallVec<[u128; 1]>,
         .           
         .               /// Possible branch sites. The last element of this vector is used
         .               /// for the otherwise branch, so targets.len() == values.len() + 1
         .               /// should hold.
-- line 28 ----------------------------------------
-- line 38 ----------------------------------------
         .               targets: SmallVec<[BasicBlock; 2]>,
         .           }
         .           
         .           impl SwitchTargets {
         .               /// Creates switch targets from an iterator of values and target blocks.
         .               ///
         .               /// The iterator may be empty, in which case the `SwitchInt` instruction is equivalent to
         .               /// `goto otherwise;`.
    24,231 ( 0.00%)      pub fn new(targets: impl Iterator<Item = (u128, BasicBlock)>, otherwise: BasicBlock) -> Self {
    32,108 ( 0.00%)          let (values, mut targets): (SmallVec<_>, SmallVec<_>) = targets.unzip();
         .                   targets.push(otherwise);
    31,720 ( 0.00%)          Self { values, targets }
    24,231 ( 0.00%)      }
         .           
         .               /// Builds a switch targets definition that jumps to `then` if the tested value equals `value`,
         .               /// and to `else_` if not.
         .               pub fn static_if(value: u128, then: BasicBlock, else_: BasicBlock) -> Self {
         .                   Self { values: smallvec![value], targets: smallvec![then, else_] }
         .               }
         .           
         .               /// Returns the fallback target that is jumped to when none of the values match the operand.
     5,770 ( 0.00%)      pub fn otherwise(&self) -> BasicBlock {
     5,770 ( 0.00%)          *self.targets.last().unwrap()
    11,540 ( 0.00%)      }
         .           
         .               /// Returns an iterator over the switch targets.
         .               ///
         .               /// The iterator will yield tuples containing the value and corresponding target to jump to, not
         .               /// including the `otherwise` fallback target.
         .               ///
         .               /// Note that this may yield 0 elements. Only the `otherwise` branch is mandatory.
     5,770 ( 0.00%)      pub fn iter(&self) -> SwitchTargetsIter<'_> {
    40,390 ( 0.00%)          SwitchTargetsIter { inner: iter::zip(&self.values, &self.targets) }
     5,770 ( 0.00%)      }
         .           
         .               /// Returns a slice with all possible jump targets (including the fallback target).
    22,817 ( 0.00%)      pub fn all_targets(&self) -> &[BasicBlock] {
         .                   &self.targets
    22,817 ( 0.00%)      }
         .           
         .               pub fn all_targets_mut(&mut self) -> &mut [BasicBlock] {
         .                   &mut self.targets
         .               }
         .           
         .               /// Finds the `BasicBlock` to which this `SwitchInt` will branch given the
         .               /// specific value.  This cannot fail, as it'll return the `otherwise`
         .               /// branch if there's not a specific match for the value.
-- line 84 ----------------------------------------
-- line 90 ----------------------------------------
         .           pub struct SwitchTargetsIter<'a> {
         .               inner: iter::Zip<slice::Iter<'a, u128>, slice::Iter<'a, BasicBlock>>,
         .           }
         .           
         .           impl<'a> Iterator for SwitchTargetsIter<'a> {
         .               type Item = (u128, BasicBlock);
         .           
         .               fn next(&mut self) -> Option<Self::Item> {
    19,506 ( 0.00%)          self.inner.next().map(|(val, bb)| (*val, *bb))
    15,523 ( 0.00%)      }
         .           
       462 ( 0.00%)      fn size_hint(&self) -> (usize, Option<usize>) {
       462 ( 0.00%)          self.inner.size_hint()
     1,386 ( 0.00%)      }
         .           }
         .           
         .           impl<'a> ExactSizeIterator for SwitchTargetsIter<'a> {}
         .           
 2,568,062 ( 0.01%)  #[derive(Clone, TyEncodable, TyDecodable, Hash, HashStable, PartialEq)]
         .           pub enum TerminatorKind<'tcx> {
         .               /// Block should have one successor in the graph; we jump there.
   256,455 ( 0.00%)      Goto { target: BasicBlock },
         .           
         .               /// Operand evaluates to an integer; jump depending on its value
         .               /// to one of the targets, and otherwise fallback to `otherwise`.
         .               SwitchInt {
         .                   /// The discriminant value being tested.
         .                   discr: Operand<'tcx>,
         .           
         .                   /// The type of value being tested.
         .                   /// This is always the same as the type of `discr`.
         .                   /// FIXME: remove this redundant information. Currently, it is relied on by pretty-printing.
     3,737 ( 0.00%)          switch_ty: Ty<'tcx>,
         .           
         .                   targets: SwitchTargets,
         .               },
         .           
         .               /// Indicates that the landing pad is finished and unwinding should
         .               /// continue. Emitted by `build::scope::diverge_cleanup`.
         .               Resume,
         .           
-- line 130 ----------------------------------------
-- line 136 ----------------------------------------
         .               /// been filled in before this executes. This can occur multiple times
         .               /// in different basic blocks.
         .               Return,
         .           
         .               /// Indicates a terminator that can never be reached.
         .               Unreachable,
         .           
         .               /// Drop the `Place`.
   453,334 ( 0.00%)      Drop { place: Place<'tcx>, target: BasicBlock, unwind: Option<BasicBlock> },
         .           
         .               /// Drop the `Place` and assign the new value over it. This ensures
         .               /// that the assignment to `P` occurs *even if* the destructor for
         .               /// place unwinds. Its semantics are best explained by the
         .               /// elaboration:
         .               ///
         .               /// ```
         .               /// BB0 {
-- line 152 ----------------------------------------
-- line 167 ----------------------------------------
         .               /// BB2 {
         .               ///   // P is now uninitialized -- its dtor panicked
         .               ///   P <- V
         .               /// }
         .               /// ```
         .               ///
         .               /// Note that DropAndReplace is eliminated as part of the `ElaborateDrops` pass.
         .               DropAndReplace {
     1,110 ( 0.00%)          place: Place<'tcx>,
         .                   value: Operand<'tcx>,
       740 ( 0.00%)          target: BasicBlock,
       370 ( 0.00%)          unwind: Option<BasicBlock>,
         .               },
         .           
         .               /// Block ends with a call of a function.
         .               Call {
         .                   /// The function that’s being called.
         .                   func: Operand<'tcx>,
         .                   /// Arguments the function is called with.
         .                   /// These are owned by the callee, which is free to modify them.
         .                   /// This allows the memory occupied by "by-value" arguments to be
         .                   /// reused across function calls without duplicating the contents.
    54,120 ( 0.00%)          args: Vec<Operand<'tcx>>,
         .                   /// Destination for the return value. If some, the call is converging.
         .                   destination: Option<(Place<'tcx>, BasicBlock)>,
         .                   /// Cleanups to be done if the call unwinds.
    36,080 ( 0.00%)          cleanup: Option<BasicBlock>,
         .                   /// `true` if this is from a call in HIR rather than from an overloaded
         .                   /// operator. True for overloaded function call.
         .                   from_hir_call: bool,
         .                   /// This `Span` is the span of the function, without the dot and receiver
         .                   /// (e.g. `foo(a, b)` in `x.foo(a, b)`
         .                   fn_span: Span,
         .               },
         .           
-- line 201 ----------------------------------------
-- line 209 ----------------------------------------
         .                   cleanup: Option<BasicBlock>,
         .               },
         .           
         .               /// A suspend point.
         .               Yield {
         .                   /// The value to return.
         .                   value: Operand<'tcx>,
         .                   /// Where to resume to.
       282 ( 0.00%)          resume: BasicBlock,
         .                   /// The place to store the resume argument in.
       423 ( 0.00%)          resume_arg: Place<'tcx>,
         .                   /// Cleanup to be done if the generator is dropped at this suspend point.
       141 ( 0.00%)          drop: Option<BasicBlock>,
         .               },
         .           
         .               /// Indicates the end of the dropping of a generator.
         .               GeneratorDrop,
         .           
         .               /// A block where control flow only ever takes one real path, but borrowck
         .               /// needs to be more conservative.
         .               FalseEdge {
         .                   /// The target normal control flow will take.
     4,264 ( 0.00%)          real_target: BasicBlock,
         .                   /// A block control flow could conceptually jump to, but won't in
         .                   /// practice.
     6,396 ( 0.00%)          imaginary_target: BasicBlock,
         .               },
         .               /// A terminator for blocks that only take one path in reality, but where we
         .               /// reserve the right to unwind in borrowck, even if it won't happen in practice.
         .               /// This can arise in infinite loops with no function calls for example.
         .               FalseUnwind {
         .                   /// The target normal control flow will take.
       408 ( 0.00%)          real_target: BasicBlock,
         .                   /// The imaginary cleanup block link. This particular path will never be taken
         .                   /// in practice, but in order to avoid fragility we want to always
         .                   /// consider it in borrowck. We don't want to accept programs which
         .                   /// pass borrowck only when `panic=abort` or some assertions are disabled
         .                   /// due to release vs. debug mode builds. This needs to be an `Option` because
         .                   /// of the `remove_noop_landing_pads` and `abort_unwinding_calls` passes.
       408 ( 0.00%)          unwind: Option<BasicBlock>,
         .               },
         .           
         .               /// Block ends with an inline assembly block. This is a terminator since
         .               /// inline assembly is allowed to diverge.
         .               InlineAsm {
         .                   /// The template for the inline assembly, with placeholders.
         .                   template: &'tcx [InlineAsmTemplatePiece],
         .           
-- line 256 ----------------------------------------
-- line 268 ----------------------------------------
         .                   /// diverging (InlineAsmOptions::NORETURN).
         .                   destination: Option<BasicBlock>,
         .           
         .                   /// Cleanup to be done if the inline assembly unwinds. This is present
         .                   /// if and only if InlineAsmOptions::MAY_UNWIND is set.
         .                   cleanup: Option<BasicBlock>,
         .               },
         .           }
 1,851,538 ( 0.01%)  #[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable)]
         .           pub struct Terminator<'tcx> {
         .               pub source_info: SourceInfo,
         .               pub kind: TerminatorKind<'tcx>,
         .           }
         .           
         .           impl<'tcx> Terminator<'tcx> {
   893,204 ( 0.00%)      pub fn successors(&self) -> Successors<'_> {
 2,184,402 ( 0.01%)          self.kind.successors()
 1,339,806 ( 0.01%)      }
         .           
   929,878 ( 0.00%)      pub fn successors_mut(&mut self) -> SuccessorsMut<'_> {
   464,939 ( 0.00%)          self.kind.successors_mut()
 1,394,817 ( 0.01%)      }
         .           
         .               pub fn unwind(&self) -> Option<&Option<BasicBlock>> {
         .                   self.kind.unwind()
         .               }
         .           
         .               pub fn unwind_mut(&mut self) -> Option<&mut Option<BasicBlock>> {
         .                   self.kind.unwind_mut()
    64,909 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> TerminatorKind<'tcx> {
     2,563 ( 0.00%)      pub fn if_(
         .                   tcx: TyCtxt<'tcx>,
         .                   cond: Operand<'tcx>,
         .                   t: BasicBlock,
         .                   f: BasicBlock,
         .               ) -> TerminatorKind<'tcx> {
    25,630 ( 0.00%)          TerminatorKind::SwitchInt {
     5,126 ( 0.00%)              discr: cond,
     2,563 ( 0.00%)              switch_ty: tcx.types.bool,
         .                       targets: SwitchTargets::static_if(0, f, t),
         .                   }
     2,563 ( 0.00%)      }
         .           
 1,567,054 ( 0.01%)      pub fn successors(&self) -> Successors<'_> {
         .                   use self::TerminatorKind::*;
11,846,256 ( 0.06%)          match *self {
         .                       Resume
         .                       | Abort
         .                       | GeneratorDrop
         .                       | Return
         .                       | Unreachable
         .                       | Call { destination: None, cleanup: None, .. }
         .                       | InlineAsm { destination: None, cleanup: None, .. } => None.into_iter().chain(&[]),
 1,129,134 ( 0.01%)              Goto { target: ref t }
         .                       | Call { destination: None, cleanup: Some(ref t), .. }
         .                       | Call { destination: Some((_, ref t)), cleanup: None, .. }
         .                       | Yield { resume: ref t, drop: None, .. }
         .                       | DropAndReplace { target: ref t, unwind: None, .. }
         .                       | Drop { target: ref t, unwind: None, .. }
         .                       | Assert { target: ref t, cleanup: None, .. }
         .                       | FalseUnwind { real_target: ref t, unwind: None }
         .                       | InlineAsm { destination: Some(ref t), cleanup: None, .. }
-- line 332 ----------------------------------------
-- line 338 ----------------------------------------
         .                       | DropAndReplace { target: ref t, unwind: Some(ref u), .. }
         .                       | Drop { target: ref t, unwind: Some(ref u), .. }
         .                       | Assert { target: ref t, cleanup: Some(ref u), .. }
         .                       | FalseUnwind { real_target: ref t, unwind: Some(ref u) }
         .                       | InlineAsm { destination: Some(ref t), cleanup: Some(ref u), .. } => {
         .                           Some(t).into_iter().chain(slice::from_ref(u))
         .                       }
         .                       SwitchInt { ref targets, .. } => None.into_iter().chain(&targets.targets),
    71,940 ( 0.00%)              FalseEdge { ref real_target, ref imaginary_target } => {
         .                           Some(real_target).into_iter().chain(slice::from_ref(imaginary_target))
         .                       }
         .                   }
 1,567,054 ( 0.01%)      }
         .           
   464,939 ( 0.00%)      pub fn successors_mut(&mut self) -> SuccessorsMut<'_> {
         .                   use self::TerminatorKind::*;
 3,460,627 ( 0.02%)          match *self {
         .                       Resume
         .                       | Abort
         .                       | GeneratorDrop
         .                       | Return
         .                       | Unreachable
         .                       | Call { destination: None, cleanup: None, .. }
         .                       | InlineAsm { destination: None, cleanup: None, .. } => None.into_iter().chain(&mut []),
   411,402 ( 0.00%)              Goto { target: ref mut t }
         .                       | Call { destination: None, cleanup: Some(ref mut t), .. }
         .                       | Call { destination: Some((_, ref mut t)), cleanup: None, .. }
         .                       | Yield { resume: ref mut t, drop: None, .. }
         .                       | DropAndReplace { target: ref mut t, unwind: None, .. }
         .                       | Drop { target: ref mut t, unwind: None, .. }
         .                       | Assert { target: ref mut t, cleanup: None, .. }
         .                       | FalseUnwind { real_target: ref mut t, unwind: None }
         .                       | InlineAsm { destination: Some(ref mut t), cleanup: None, .. }
-- line 370 ----------------------------------------
-- line 376 ----------------------------------------
         .                       | DropAndReplace { target: ref mut t, unwind: Some(ref mut u), .. }
         .                       | Drop { target: ref mut t, unwind: Some(ref mut u), .. }
         .                       | Assert { target: ref mut t, cleanup: Some(ref mut u), .. }
         .                       | FalseUnwind { real_target: ref mut t, unwind: Some(ref mut u) }
         .                       | InlineAsm { destination: Some(ref mut t), cleanup: Some(ref mut u), .. } => {
         .                           Some(t).into_iter().chain(slice::from_mut(u))
         .                       }
         .                       SwitchInt { ref mut targets, .. } => None.into_iter().chain(&mut targets.targets),
    16,924 ( 0.00%)              FalseEdge { ref mut real_target, ref mut imaginary_target } => {
         .                           Some(real_target).into_iter().chain(slice::from_mut(imaginary_target))
         .                       }
         .                   }
   464,939 ( 0.00%)      }
         .           
         .               pub fn unwind(&self) -> Option<&Option<BasicBlock>> {
         .                   match *self {
         .                       TerminatorKind::Goto { .. }
         .                       | TerminatorKind::Resume
         .                       | TerminatorKind::Abort
         .                       | TerminatorKind::Return
         .                       | TerminatorKind::Unreachable
-- line 396 ----------------------------------------
-- line 403 ----------------------------------------
         .                       | TerminatorKind::DropAndReplace { ref unwind, .. }
         .                       | TerminatorKind::Drop { ref unwind, .. }
         .                       | TerminatorKind::FalseUnwind { ref unwind, .. }
         .                       | TerminatorKind::InlineAsm { cleanup: ref unwind, .. } => Some(unwind),
         .                   }
         .               }
         .           
         .               pub fn unwind_mut(&mut self) -> Option<&mut Option<BasicBlock>> {
   389,454 ( 0.00%)          match *self {
         .                       TerminatorKind::Goto { .. }
         .                       | TerminatorKind::Resume
         .                       | TerminatorKind::Abort
         .                       | TerminatorKind::Return
         .                       | TerminatorKind::Unreachable
         .                       | TerminatorKind::GeneratorDrop
         .                       | TerminatorKind::Yield { .. }
         .                       | TerminatorKind::SwitchInt { .. }
         .                       | TerminatorKind::FalseEdge { .. } => None,
    47,318 ( 0.00%)              TerminatorKind::Call { cleanup: ref mut unwind, .. }
         .                       | TerminatorKind::Assert { cleanup: ref mut unwind, .. }
         .                       | TerminatorKind::DropAndReplace { ref mut unwind, .. }
         .                       | TerminatorKind::Drop { ref mut unwind, .. }
         .                       | TerminatorKind::FalseUnwind { ref mut unwind, .. }
         .                       | TerminatorKind::InlineAsm { cleanup: ref mut unwind, .. } => Some(unwind),
         .                   }
         .               }
         .           
-- line 429 ----------------------------------------

 5,958,139 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/mir/terminator.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs
--------------------------------------------------------------------------------
Ir                  

-- line 5 ----------------------------------------
         .           #[stable(feature = "alloc_system_type", since = "1.28.0")]
         .           unsafe impl GlobalAlloc for System {
         .               #[inline]
         .               unsafe fn alloc(&self, layout: Layout) -> *mut u8 {
         .                   // jemalloc provides alignment less than MIN_ALIGN for small allocations.
         .                   // So only rely on MIN_ALIGN if size >= align.
         .                   // Also see <https://github.com/rust-lang/rust/issues/45955> and
         .                   // <https://github.com/rust-lang/rust/issues/62251#issuecomment-507580914>.
37,333,704 ( 0.19%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
28,000,278 ( 0.14%)              libc::malloc(layout.size()) as *mut u8
         .                   } else {
         .                       #[cfg(target_os = "macos")]
         .                       {
         .                           if layout.align() > (1 << 31) {
         .                               return ptr::null_mut();
         .                           }
         .                       }
         .                       aligned_malloc(&layout)
         .                   }
         .               }
         .           
         .               #[inline]
         .               unsafe fn alloc_zeroed(&self, layout: Layout) -> *mut u8 {
         .                   // See the comment above in `alloc` for why this check looks the way it does.
   507,176 ( 0.00%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
   760,764 ( 0.00%)              libc::calloc(layout.size(), 1) as *mut u8
         .                   } else {
         .                       let ptr = self.alloc(layout);
         .                       if !ptr.is_null() {
         .                           ptr::write_bytes(ptr, 0, layout.size());
         .                       }
         .                       ptr
         .                   }
         .               }
         .           
         .               #[inline]
         .               unsafe fn dealloc(&self, ptr: *mut u8, _layout: Layout) {
 9,460,208 ( 0.05%)          libc::free(ptr as *mut libc::c_void)
         .               }
         .           
         .               #[inline]
         .               unsafe fn realloc(&self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {
 2,554,240 ( 0.01%)          if layout.align() <= MIN_ALIGN && layout.align() <= new_size {
 5,108,480 ( 0.03%)              libc::realloc(ptr as *mut libc::c_void, new_size) as *mut u8
         .                   } else {
         .                       realloc_fallback(self, ptr, layout, new_size)
         .                   }
         .               }
         .           }
         .           
         .           cfg_if::cfg_if! {
         .               if #[cfg(any(
-- line 56 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_transform/src/simplify.rs
--------------------------------------------------------------------------------
Ir                 

-- line 38 ----------------------------------------
        .           use std::convert::TryInto;
        .           
        .           pub struct SimplifyCfg {
        .               label: String,
        .           }
        .           
        .           impl SimplifyCfg {
        .               pub fn new(label: &str) -> Self {
   54,031 ( 0.00%)          SimplifyCfg { label: format!("SimplifyCfg-{}", label) }
        .               }
        .           }
        .           
   63,680 ( 0.00%)  pub fn simplify_cfg<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {
   25,472 ( 0.00%)      CfgSimplifier::new(body).simplify();
   19,104 ( 0.00%)      remove_dead_blocks(tcx, body);
        .           
        .               // FIXME: Should probably be moved into some kind of pass manager
        .               body.basic_blocks_mut().raw.shrink_to_fit();
   25,416 ( 0.00%)  }
        .           
        .           impl<'tcx> MirPass<'tcx> for SimplifyCfg {
    6,174 ( 0.00%)      fn name(&self) -> Cow<'_, str> {
   18,522 ( 0.00%)          Cow::Borrowed(&self.label)
    6,174 ( 0.00%)      }
        .           
    6,174 ( 0.00%)      fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {
        .                   debug!("SimplifyCfg({:?}) - simplifying {:?}", self.label, body.source);
   12,736 ( 0.00%)          simplify_cfg(tcx, body);
        .               }
        .           }
        .           
        .           pub struct CfgSimplifier<'a, 'tcx> {
        .               basic_blocks: &'a mut IndexVec<BasicBlock, BasicBlockData<'tcx>>,
        .               pred_count: IndexVec<BasicBlock, u32>,
        .           }
        .           
        .           impl<'a, 'tcx> CfgSimplifier<'a, 'tcx> {
   44,576 ( 0.00%)      pub fn new(body: &'a mut Body<'tcx>) -> Self {
   12,736 ( 0.00%)          let mut pred_count = IndexVec::from_elem(0u32, body.basic_blocks());
        .           
        .                   // we can't use mir.predecessors() here because that counts
        .                   // dead blocks, which we don't want to.
   19,104 ( 0.00%)          pred_count[START_BLOCK] = 1;
        .           
  869,328 ( 0.00%)          for (_, data) in traversal::preorder(body) {
  575,580 ( 0.00%)              if let Some(ref term) = data.terminator {
  845,109 ( 0.00%)                  for &tgt in term.successors() {
1,347,645 ( 0.01%)                      pred_count[tgt] += 1;
        .                           }
        .                       }
        .                   }
        .           
        .                   let basic_blocks = body.basic_blocks_mut();
        .           
   25,472 ( 0.00%)          CfgSimplifier { basic_blocks, pred_count }
   50,944 ( 0.00%)      }
        .           
   50,944 ( 0.00%)      pub fn simplify(mut self) {
    6,368 ( 0.00%)          self.strip_nops();
        .           
        .                   // Vec of the blocks that should be merged. We store the indices here, instead of the
        .                   // statements itself to avoid moving the (relatively) large statements twice.
        .                   // We do not push the statements directly into the target block (`bb`) as that is slower
        .                   // due to additional reallocations
        .                   let mut merged_blocks = Vec::new();
        .                   loop {
        .                       let mut changed = false;
        .           
   16,852 ( 0.00%)              for bb in self.basic_blocks.indices() {
  666,346 ( 0.00%)                  if self.pred_count[bb] == 0 {
        .                               continue;
        .                           }
        .           
        .                           debug!("simplifying {:?}", bb);
        .           
        .                           let mut terminator =
        .                               self.basic_blocks[bb].terminator.take().expect("invalid terminator state");
        .           
  840,180 ( 0.00%)                  for successor in terminator.successors_mut() {
        .                               self.collapse_goto_chain(successor, &mut changed);
        .                           }
        .           
        .                           let mut inner_changed = true;
        .                           merged_blocks.clear();
  862,492 ( 0.00%)                  while inner_changed {
        .                               inner_changed = false;
        .                               inner_changed |= self.simplify_branch(&mut terminator);
  291,216 ( 0.00%)                      inner_changed |= self.merge_successor(&mut merged_blocks, &mut terminator);
  873,648 ( 0.00%)                      changed |= inner_changed;
        .                           }
        .           
        .                           let statements_to_merge =
  302,090 ( 0.00%)                      merged_blocks.iter().map(|&i| self.basic_blocks[i].statements.len()).sum();
        .           
   17,190 ( 0.00%)                  if statements_to_merge > 0 {
        .                               let mut statements = std::mem::take(&mut self.basic_blocks[bb].statements);
        .                               statements.reserve(statements_to_merge);
    7,926 ( 0.00%)                      for &from in &merged_blocks {
   15,852 ( 0.00%)                          statements.append(&mut self.basic_blocks[from].statements);
        .                               }
   49,554 ( 0.00%)                      self.basic_blocks[bb].statements = statements;
        .                           }
        .           
8,681,860 ( 0.04%)                  self.basic_blocks[bb].terminator = Some(terminator);
        .                       }
        .           
   16,852 ( 0.00%)              if !changed {
        .                           break;
        .                       }
        .                   }
   50,944 ( 0.00%)      }
        .           
        .               /// This function will return `None` if
        .               /// * the block has statements
        .               /// * the block has a terminator other than `goto`
        .               /// * the block has no terminator (meaning some other part of the current optimization stole it)
        .               fn take_terminator_if_simple_goto(&mut self, bb: BasicBlock) -> Option<Terminator<'tcx>> {
2,911,196 ( 0.01%)          match self.basic_blocks[bb] {
        .                       BasicBlockData {
        .                           ref statements,
        .                           terminator:
        .                               ref mut terminator @ Some(Terminator { kind: TerminatorKind::Goto { .. }, .. }),
        .                           ..
  121,518 ( 0.00%)              } if statements.is_empty() => terminator.take(),
        .                       // if `terminator` is None, this means we are in a loop. In that
        .                       // case, let all the loop collapse to its entry.
        .                       _ => None,
        .                   }
        .               }
        .           
        .               /// Collapse a goto chain starting from `start`
        .               fn collapse_goto_chain(&mut self, start: &mut BasicBlock, changed: &mut bool) {
        .                   // Using `SmallVec` here, because in some logs on libcore oli-obk saw many single-element
        .                   // goto chains. We should probably benchmark different sizes.
        .                   let mut terminators: SmallVec<[_; 1]> = Default::default();
1,209,459 ( 0.01%)          let mut current = *start;
1,453,476 ( 0.01%)          while let Some(terminator) = self.take_terminator_if_simple_goto(current) {
   25,686 ( 0.00%)              let target = match terminator {
   12,843 ( 0.00%)                  Terminator { kind: TerminatorKind::Goto { target }, .. } => target,
        .                           _ => unreachable!(),
        .                       };
  244,017 ( 0.00%)              terminators.push((current, terminator));
        .                       current = target;
        .                   }
        .                   let last = current;
  403,153 ( 0.00%)          *start = last;
  192,645 ( 0.00%)          while let Some((current, mut terminator)) = terminators.pop() {
   25,686 ( 0.00%)              let target = match terminator {
        .                           Terminator { kind: TerminatorKind::Goto { ref mut target }, .. } => target,
        .                           _ => unreachable!(),
        .                       };
   25,686 ( 0.00%)              *changed |= *target != last;
   25,686 ( 0.00%)              *target = last;
        .                       debug!("collapsing goto chain from {:?} to {:?}", current, target);
        .           
   25,686 ( 0.00%)              if self.pred_count[current] == 1 {
        .                           // This is the last reference to current, so the pred-count to
        .                           // to target is moved into the current block.
        .                           self.pred_count[current] = 0;
        .                       } else {
   16,508 ( 0.00%)                  self.pred_count[*target] += 1;
   12,381 ( 0.00%)                  self.pred_count[current] -= 1;
        .                       }
  423,819 ( 0.00%)              self.basic_blocks[current].terminator = Some(terminator);
        .                   }
        .               }
        .           
        .               // merge a block with 1 `goto` predecessor to its parent
        .               fn merge_successor(
        .                   &mut self,
        .                   merged_blocks: &mut Vec<BasicBlock>,
        .                   terminator: &mut Terminator<'tcx>,
        .               ) -> bool {
  699,498 ( 0.00%)          let target = match terminator.kind {
  316,072 ( 0.00%)              TerminatorKind::Goto { target } if self.pred_count[target] == 1 => target,
        .                       _ => return false,
        .                   };
        .           
        .                   debug!("merging block {:?} into {:?}", target, terminator);
  253,345 ( 0.00%)          *terminator = match self.basic_blocks[target].terminator.take() {
        .                       Some(terminator) => terminator,
        .                       None => {
        .                           // unreachable loop - this should not be possible, as we
        .                           // don't strand blocks, but handle it correctly.
        .                           return false;
        .                       }
        .                   };
        .           
        .                   merged_blocks.push(target);
   33,045 ( 0.00%)          self.pred_count[target] = 0;
        .           
        .                   true
        .               }
        .           
        .               // turn a branch with all successors identical to a goto
        .               fn simplify_branch(&mut self, terminator: &mut Terminator<'tcx>) -> bool {
  873,648 ( 0.00%)          match terminator.kind {
        .                       TerminatorKind::SwitchInt { .. } => {}
        .                       _ => return false,
        .                   };
        .           
        .                   let first_succ = {
  118,950 ( 0.00%)              if let Some(&first_succ) = terminator.successors().next() {
   59,475 ( 0.00%)                  if terminator.successors().all(|s| *s == first_succ) {
    2,403 ( 0.00%)                      let count = terminator.successors().count();
    4,806 ( 0.00%)                      self.pred_count[first_succ] -= (count - 1) as u32;
        .                               first_succ
        .                           } else {
        .                               return false;
        .                           }
        .                       } else {
        .                           return false;
        .                       }
        .                   };
        .           
        .                   debug!("simplifying branch {:?}", terminator);
    4,806 ( 0.00%)          terminator.kind = TerminatorKind::Goto { target: first_succ };
        .                   true
        .               }
        .           
        .               fn strip_nops(&mut self) {
        .                   for blk in self.basic_blocks.iter_mut() {
  917,495 ( 0.00%)              blk.statements.retain(|stmt| !matches!(stmt.kind, StatementKind::Nop))
        .                   }
        .               }
        .           }
        .           
   67,570 ( 0.00%)  pub fn remove_dead_blocks<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {
    6,757 ( 0.00%)      let reachable = traversal::reachable_as_bitset(body);
        .               let num_blocks = body.basic_blocks().len();
   13,514 ( 0.00%)      if num_blocks == reachable.count() {
        .                   return;
        .               }
        .           
        .               let basic_blocks = body.basic_blocks_mut();
        .               let mut replacements: Vec<_> = (0..num_blocks).map(BasicBlock::new).collect();
        .               let mut used_blocks = 0;
  128,172 ( 0.00%)      for alive_index in reachable.iter() {
        .                   let alive_index = alive_index.index();
  128,172 ( 0.00%)          replacements[alive_index] = BasicBlock::new(used_blocks);
  256,344 ( 0.00%)          if alive_index != used_blocks {
        .                       // Swap the next alive block data with the current available slot. Since
        .                       // alive_index is non-decreasing this is a valid operation.
        .                       basic_blocks.raw.swap(alive_index, used_blocks);
        .                   }
  128,172 ( 0.00%)          used_blocks += 1;
        .               }
        .           
   11,244 ( 0.00%)      if tcx.sess.instrument_coverage() {
        .                   save_unreachable_coverage(basic_blocks, used_blocks);
        .               }
        .           
        .               basic_blocks.raw.truncate(used_blocks);
        .           
        .               for block in basic_blocks {
  256,344 ( 0.00%)          for target in block.terminator_mut().successors_mut() {
  730,008 ( 0.00%)              *target = replacements[target.index()];
        .                   }
        .               }
   54,056 ( 0.00%)  }
        .           
        .           /// Some MIR transforms can determine at compile time that a sequences of
        .           /// statements will never be executed, so they can be dropped from the MIR.
        .           /// For example, an `if` or `else` block that is guaranteed to never be executed
        .           /// because its condition can be evaluated at compile time, such as by const
        .           /// evaluation: `if false { ... }`.
        .           ///
        .           /// Those statements are bypassed by redirecting paths in the CFG around the
-- line 305 ----------------------------------------
-- line 363 ----------------------------------------
        .                       })),
        .                   })
        .               }
        .           }
        .           
        .           pub struct SimplifyLocals;
        .           
        .           impl<'tcx> MirPass<'tcx> for SimplifyLocals {
      194 ( 0.00%)      fn is_enabled(&self, sess: &rustc_session::Session) -> bool {
      291 ( 0.00%)          sess.mir_opt_level() > 0
      194 ( 0.00%)      }
        .           
       97 ( 0.00%)      fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {
        .                   trace!("running SimplifyLocals on {:?}", body.source);
       97 ( 0.00%)          simplify_locals(body, tcx);
        .               }
        .           }
        .           
      679 ( 0.00%)  pub fn simplify_locals<'tcx>(body: &mut Body<'tcx>, tcx: TyCtxt<'tcx>) {
        .               // First, we're going to get a count of *actual* uses for every `Local`.
        .               let mut used_locals = UsedLocals::new(body);
        .           
        .               // Next, we're going to remove any `Local` with zero actual uses. When we remove those
        .               // `Locals`, we're also going to subtract any uses of other `Locals` from the `used_locals`
        .               // count. For example, if we removed `_2 = discriminant(_1)`, then we'll subtract one from
        .               // `use_counts[_1]`. That in turn might make `_1` unused, so we loop until we hit a
        .               // fixedpoint where there are no more unused locals.
-- line 389 ----------------------------------------
-- line 390 ----------------------------------------
        .               remove_unused_definitions(&mut used_locals, body);
        .           
        .               // Finally, we'll actually do the work of shrinking `body.local_decls` and remapping the `Local`s.
        .               let map = make_local_map(&mut body.local_decls, &used_locals);
        .           
        .               // Only bother running the `LocalUpdater` if we actually found locals to remove.
        .               if map.iter().any(Option::is_none) {
        .                   // Update references to all vars and tmps now
      582 ( 0.00%)          let mut updater = LocalUpdater { map, tcx };
        .                   updater.visit_body(body);
        .           
        .                   body.local_decls.shrink_to_fit();
        .               }
      776 ( 0.00%)  }
        .           
        .           /// Construct the mapping while swapping out unused stuff out from the `vec`.
        .           fn make_local_map<V>(
        .               local_decls: &mut IndexVec<Local, V>,
        .               used_locals: &UsedLocals,
        .           ) -> IndexVec<Local, Option<Local>> {
      194 ( 0.00%)      let mut map: IndexVec<Local, Option<Local>> = IndexVec::from_elem(None, &*local_decls);
        .               let mut used = Local::new(0);
        .           
       97 ( 0.00%)      for alive_index in local_decls.indices() {
        .                   // `is_used` treats the `RETURN_PLACE` and arguments as used.
   13,415 ( 0.00%)          if !used_locals.is_used(alive_index) {
        .                       continue;
        .                   }
        .           
   10,403 ( 0.00%)          map[alive_index] = Some(used);
   10,403 ( 0.00%)          if alive_index != used {
        .                       local_decls.swap(alive_index, used);
        .                   }
        .                   used.increment_by(1);
        .               }
        .               local_decls.truncate(used.index());
        .               map
        .           }
        .           
-- line 428 ----------------------------------------
-- line 431 ----------------------------------------
        .               increment: bool,
        .               arg_count: u32,
        .               use_count: IndexVec<Local, u32>,
        .           }
        .           
        .           impl UsedLocals {
        .               /// Determines which locals are used & unused in the given body.
        .               fn new(body: &Body<'_>) -> Self {
      679 ( 0.00%)          let mut this = Self {
        .                       increment: true,
       97 ( 0.00%)              arg_count: body.arg_count.try_into().unwrap(),
      291 ( 0.00%)              use_count: IndexVec::from_elem(0, &body.local_decls),
        .                   };
        .                   this.visit_body(body);
        .                   this
        .               }
        .           
        .               /// Checks if local is used.
        .               ///
        .               /// Return place and arguments are always considered used.
        .               fn is_used(&self, local: Local) -> bool {
        .                   trace!("is_used({:?}): use_count: {:?}", local, self.use_count[local]);
   88,283 ( 0.00%)          local.as_u32() <= self.arg_count || self.use_count[local] != 0
        .               }
        .           
        .               /// Updates the use counts to reflect the removal of given statement.
        .               fn statement_removed(&mut self, statement: &Statement<'_>) {
    1,332 ( 0.00%)          self.increment = false;
        .           
        .                   // The location of the statement is irrelevant.
        .                   let location = Location { block: START_BLOCK, statement_index: 0 };
    6,660 ( 0.00%)          self.visit_statement(statement, location);
        .               }
        .           
        .               /// Visits a left-hand side of an assignment.
   69,310 ( 0.00%)      fn visit_lhs(&mut self, place: &Place<'_>, location: Location) {
   55,448 ( 0.00%)          if place.is_indirect() {
        .                       // A use, not a definition.
        .                       self.visit_place(place, PlaceContext::MutatingUse(MutatingUseContext::Store), location);
        .                   } else {
        .                       // A definition. The base local itself is not visited, so this occurrence is not counted
        .                       // toward its use count. There might be other locals still, used in an indexing
        .                       // projection.
        .                       self.super_projection(
        .                           place.as_ref(),
        .                           PlaceContext::MutatingUse(MutatingUseContext::Projection),
        .                           location,
        .                       );
        .                   }
   55,448 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> Visitor<'tcx> for UsedLocals {
   69,310 ( 0.00%)      fn visit_statement(&mut self, statement: &Statement<'tcx>, location: Location) {
   69,310 ( 0.00%)          match statement.kind {
        .                       StatementKind::CopyNonOverlapping(..)
        .                       | StatementKind::Retag(..)
        .                       | StatementKind::Coverage(..)
        .                       | StatementKind::FakeRead(..)
        .                       | StatementKind::AscribeUserType(..) => {
        .                           self.super_statement(statement, location);
        .                       }
        .           
        .                       StatementKind::Nop => {}
        .           
        .                       StatementKind::StorageLive(_local) | StatementKind::StorageDead(_local) => {}
        .           
   13,050 ( 0.00%)              StatementKind::Assign(box (ref place, ref rvalue)) => {
   39,150 ( 0.00%)                  self.visit_lhs(place, location);
        .                           self.visit_rvalue(rvalue, location);
        .                       }
        .           
        .                       StatementKind::SetDiscriminant { ref place, variant_index: _ } => {
    5,684 ( 0.00%)                  self.visit_lhs(place, location);
        .                       }
        .                   }
   22,200 ( 0.00%)      }
        .           
        .               fn visit_local(&mut self, local: &Local, _ctx: PlaceContext, _location: Location) {
   61,755 ( 0.00%)          if self.increment {
   70,986 ( 0.00%)              self.use_count[*local] += 1;
        .                   } else {
    2,403 ( 0.00%)              assert_ne!(self.use_count[*local], 0);
      801 ( 0.00%)              self.use_count[*local] -= 1;
        .                   }
        .               }
        .           }
        .           
        .           /// Removes unused definitions. Updates the used locals to reflect the changes made.
        .           fn remove_unused_definitions(used_locals: &mut UsedLocals, body: &mut Body<'_>) {
        .               // The use counts are updated as we remove the statements. A local might become unused
        .               // during the retain operation, leading to a temporary inconsistency (storage statements or
        .               // definitions referencing the local might remain). For correctness it is crucial that this
        .               // computation reaches a fixed point.
        .           
        .               let mut modified = true;
    1,843 ( 0.00%)      while modified {
      194 ( 0.00%)          modified = false;
        .           
        .                   for data in body.basic_blocks_mut() {
        .                       // Remove unnecessary StorageLive and StorageDead annotations.
   64,952 ( 0.00%)              data.statements.retain(|statement| {
  145,616 ( 0.00%)                  let keep = match &statement.kind {
        .                               StatementKind::StorageLive(local) | StatementKind::StorageDead(local) => {
        .                                   used_locals.is_used(*local)
        .                               }
   44,208 ( 0.00%)                      StatementKind::Assign(box (place, _)) => used_locals.is_used(place.local),
        .           
        .                               StatementKind::SetDiscriminant { ref place, .. } => {
    3,248 ( 0.00%)                          used_locals.is_used(place.local)
        .                               }
        .                               _ => true,
        .                           };
        .           
   17,776 ( 0.00%)                  if !keep {
        .                               trace!("removing statement {:?}", statement);
    1,332 ( 0.00%)                      modified = true;
        .                               used_locals.statement_removed(statement);
        .                           }
        .           
        .                           keep
        .                       });
        .                   }
        .               }
        .           }
-- line 555 ----------------------------------------
-- line 560 ----------------------------------------
        .           }
        .           
        .           impl<'tcx> MutVisitor<'tcx> for LocalUpdater<'tcx> {
        .               fn tcx(&self) -> TyCtxt<'tcx> {
        .                   self.tcx
        .               }
        .           
        .               fn visit_local(&mut self, l: &mut Local, _: PlaceContext, _: Location) {
   94,439 ( 0.00%)          *l = self.map[*l].unwrap();
        .               }
        .           }

3,447,893 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_transform/src/simplify.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs
--------------------------------------------------------------------------------
Ir                  

-- line 416 ----------------------------------------
         .               /// ```
         .               /// # #![allow(unused_mut)]
         .               /// let mut vec: Vec<i32> = Vec::new();
         .               /// ```
         .               #[inline]
         .               #[rustc_const_stable(feature = "const_vec_new", since = "1.39.0")]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[must_use]
   197,902 ( 0.00%)      pub const fn new() -> Self {
29,810,211 ( 0.15%)          Vec { buf: RawVec::NEW, len: 0 }
   201,326 ( 0.00%)      }
         .           
         .               /// Constructs a new, empty `Vec<T>` with the specified capacity.
         .               ///
         .               /// The vector will be able to hold exactly `capacity` elements without
         .               /// reallocating. If `capacity` is 0, the vector will not allocate.
         .               ///
         .               /// It is important to note that although the returned vector has the
         .               /// *capacity* specified, the vector will have a zero *length*. For an
-- line 434 ----------------------------------------
-- line 461 ----------------------------------------
         .               /// vec.push(11);
         .               /// assert_eq!(vec.len(), 11);
         .               /// assert!(vec.capacity() >= 11);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[must_use]
       384 ( 0.00%)      pub fn with_capacity(capacity: usize) -> Self {
        96 ( 0.00%)          Self::with_capacity_in(capacity, Global)
       192 ( 0.00%)      }
         .           
         .               /// Creates a `Vec<T>` directly from the raw components of another vector.
         .               ///
         .               /// # Safety
         .               ///
         .               /// This is highly unsafe, due to the number of invariants that aren't
         .               /// checked:
         .               ///
-- line 479 ----------------------------------------
-- line 529 ----------------------------------------
         .               ///
         .               ///     // Put everything back together into a Vec
         .               ///     let rebuilt = Vec::from_raw_parts(p, len, cap);
         .               ///     assert_eq!(rebuilt, [4, 5, 6]);
         .               /// }
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
        36 ( 0.00%)      pub unsafe fn from_raw_parts(ptr: *mut T, length: usize, capacity: usize) -> Self {
         6 ( 0.00%)          unsafe { Self::from_raw_parts_in(ptr, length, capacity, Global) }
        12 ( 0.00%)      }
         .           }
         .           
         .           impl<T, A: Allocator> Vec<T, A> {
         .               /// Constructs a new, empty `Vec<T, A>`.
         .               ///
         .               /// The vector will not allocate until elements are pushed onto it.
         .               ///
         .               /// # Examples
-- line 547 ----------------------------------------
-- line 600 ----------------------------------------
         .               /// // ...but this may make the vector reallocate
         .               /// vec.push(11);
         .               /// assert_eq!(vec.len(), 11);
         .               /// assert!(vec.capacity() >= 11);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[inline]
         .               #[unstable(feature = "allocator_api", issue = "32838")]
    36,680 ( 0.00%)      pub fn with_capacity_in(capacity: usize, alloc: A) -> Self {
 7,351,439 ( 0.04%)          Vec { buf: RawVec::with_capacity_in(capacity, alloc), len: 0 }
    10,480 ( 0.00%)      }
         .           
         .               /// Creates a `Vec<T, A>` directly from the raw components of another vector.
         .               ///
         .               /// # Safety
         .               ///
         .               /// This is highly unsafe, due to the number of invariants that aren't
         .               /// checked:
         .               ///
-- line 618 ----------------------------------------
-- line 676 ----------------------------------------
         .               ///
         .               ///     // Put everything back together into a Vec
         .               ///     let rebuilt = Vec::from_raw_parts_in(p, len, cap, alloc.clone());
         .               ///     assert_eq!(rebuilt, [4, 5, 6]);
         .               /// }
         .               /// ```
         .               #[inline]
         .               #[unstable(feature = "allocator_api", issue = "32838")]
   452,686 ( 0.00%)      pub unsafe fn from_raw_parts_in(ptr: *mut T, length: usize, capacity: usize, alloc: A) -> Self {
   833,694 ( 0.00%)          unsafe { Vec { buf: RawVec::from_raw_parts_in(ptr, capacity, alloc), len: length } }
    69,644 ( 0.00%)      }
         .           
         .               /// Decomposes a `Vec<T>` into its raw components.
         .               ///
         .               /// Returns the raw pointer to the underlying data, the length of
         .               /// the vector (in elements), and the allocated capacity of the
         .               /// data (in elements). These are the same arguments in the same
         .               /// order as the arguments to [`from_raw_parts`].
         .               ///
-- line 694 ----------------------------------------
-- line 777 ----------------------------------------
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let vec: Vec<i32> = Vec::with_capacity(10);
         .               /// assert_eq!(vec.capacity(), 10);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
    58,100 ( 0.00%)      pub fn capacity(&self) -> usize {
 1,734,365 ( 0.01%)          self.buf.capacity()
    29,050 ( 0.00%)      }
         .           
         .               /// Reserves capacity for at least `additional` more elements to be inserted
         .               /// in the given `Vec<T>`. The collection may reserve more space to avoid
         .               /// frequent reallocations. After calling `reserve`, capacity will be
         .               /// greater than or equal to `self.len() + additional`. Does nothing if
         .               /// capacity is already sufficient.
         .               ///
         .               /// # Panics
-- line 795 ----------------------------------------
-- line 800 ----------------------------------------
         .               ///
         .               /// ```
         .               /// let mut vec = vec![1];
         .               /// vec.reserve(10);
         .               /// assert!(vec.capacity() >= 11);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[stable(feature = "rust1", since = "1.0.0")]
   472,185 ( 0.00%)      pub fn reserve(&mut self, additional: usize) {
 3,850,607 ( 0.02%)          self.buf.reserve(self.len, additional);
   188,874 ( 0.00%)      }
         .           
         .               /// Reserves the minimum capacity for exactly `additional` more elements to
         .               /// be inserted in the given `Vec<T>`. After calling `reserve_exact`,
         .               /// capacity will be greater than or equal to `self.len() + additional`.
         .               /// Does nothing if the capacity is already sufficient.
         .               ///
         .               /// Note that the allocator may give the collection more space than it
         .               /// requests. Therefore, capacity can not be relied upon to be precisely
-- line 818 ----------------------------------------
-- line 829 ----------------------------------------
         .               /// ```
         .               /// let mut vec = vec![1];
         .               /// vec.reserve_exact(10);
         .               /// assert!(vec.capacity() >= 11);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn reserve_exact(&mut self, additional: usize) {
    73,780 ( 0.00%)          self.buf.reserve_exact(self.len, additional);
         .               }
         .           
         .               /// Tries to reserve capacity for at least `additional` more elements to be inserted
         .               /// in the given `Vec<T>`. The collection may reserve more space to avoid
         .               /// frequent reallocations. After calling `try_reserve`, capacity will be
         .               /// greater than or equal to `self.len() + additional`. Does nothing if
         .               /// capacity is already sufficient.
         .               ///
-- line 845 ----------------------------------------
-- line 926 ----------------------------------------
         .               /// let mut vec = Vec::with_capacity(10);
         .               /// vec.extend([1, 2, 3]);
         .               /// assert_eq!(vec.capacity(), 10);
         .               /// vec.shrink_to_fit();
         .               /// assert!(vec.capacity() >= 3);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[stable(feature = "rust1", since = "1.0.0")]
    43,254 ( 0.00%)      pub fn shrink_to_fit(&mut self) {
         .                   // The capacity is never less than the length, and there's nothing to do when
         .                   // they are equal, so we can avoid the panic case in `RawVec::shrink_to_fit`
         .                   // by only calling it with a greater capacity.
   188,322 ( 0.00%)          if self.capacity() > self.len {
    63,082 ( 0.00%)              self.buf.shrink_to_fit(self.len);
         .                   }
    28,836 ( 0.00%)      }
         .           
         .               /// Shrinks the capacity of the vector with a lower bound.
         .               ///
         .               /// The capacity will remain at least as large as both the length
         .               /// and the supplied value.
         .               ///
         .               /// If the current capacity is less than the lower limit, this is a no-op.
         .               ///
-- line 949 ----------------------------------------
-- line 987 ----------------------------------------
         .               /// vec.extend([1, 2, 3]);
         .               ///
         .               /// assert_eq!(vec.capacity(), 10);
         .               /// let slice = vec.into_boxed_slice();
         .               /// assert_eq!(slice.into_vec().capacity(), 3);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[stable(feature = "rust1", since = "1.0.0")]
    28,836 ( 0.00%)      pub fn into_boxed_slice(mut self) -> Box<[T], A> {
         .                   unsafe {
    86,508 ( 0.00%)              self.shrink_to_fit();
   143,397 ( 0.00%)              let me = ManuallyDrop::new(self);
   144,180 ( 0.00%)              let buf = ptr::read(&me.buf);
    72,090 ( 0.00%)              let len = me.len();
   187,434 ( 0.00%)              buf.into_box(len).assume_init()
    14,418 ( 0.00%)          }
    28,836 ( 0.00%)      }
         .           
         .               /// Shortens the vector, keeping the first `len` elements and dropping
         .               /// the rest.
         .               ///
         .               /// If `len` is greater than the vector's current length, this has no
         .               /// effect.
         .               ///
         .               /// The [`drain`] method can emulate `truncate`, but causes the excess
-- line 1011 ----------------------------------------
-- line 1040 ----------------------------------------
         .               /// let mut vec = vec![1, 2, 3];
         .               /// vec.truncate(0);
         .               /// assert_eq!(vec, []);
         .               /// ```
         .               ///
         .               /// [`clear`]: Vec::clear
         .               /// [`drain`]: Vec::drain
         .               #[stable(feature = "rust1", since = "1.0.0")]
 1,053,067 ( 0.01%)      pub fn truncate(&mut self, len: usize) {
         .                   // This is safe because:
         .                   //
         .                   // * the slice passed to `drop_in_place` is valid; the `len > self.len`
         .                   //   case avoids creating an invalid slice, and
         .                   // * the `len` of the vector is shrunk before calling `drop_in_place`,
         .                   //   such that no value will be dropped twice in case `drop_in_place`
         .                   //   were to panic once (if it panics twice, the program aborts).
         .                   unsafe {
         .                       // Note: It's intentional that this is `>` and not `>=`.
         .                       //       Changing it to `>=` has negative performance
         .                       //       implications in some cases. See #78884 for more.
 1,037,883 ( 0.01%)              if len > self.len {
         .                           return;
         .                       }
         .                       let remaining_len = self.len - len;
         .                       let s = ptr::slice_from_raw_parts_mut(self.as_mut_ptr().add(len), remaining_len);
 1,667,911 ( 0.01%)              self.len = len;
    43,798 ( 0.00%)              ptr::drop_in_place(s);
         .                   }
 1,263,680 ( 0.01%)      }
         .           
         .               /// Extracts a slice containing the entire vector.
         .               ///
         .               /// Equivalent to `&s[..]`.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// use std::io::{self, Write};
         .               /// let buffer = vec![1, 2, 3, 5, 8];
         .               /// io::sink().write(buffer.as_slice()).unwrap();
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "vec_as_slice", since = "1.7.0")]
       384 ( 0.00%)      pub fn as_slice(&self) -> &[T] {
       576 ( 0.00%)          self
       384 ( 0.00%)      }
         .           
         .               /// Extracts a mutable slice of the entire vector.
         .               ///
         .               /// Equivalent to `&mut s[..]`.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
-- line 1093 ----------------------------------------
-- line 1123 ----------------------------------------
         .               ///         assert_eq!(*x_ptr.add(i), 1 << i);
         .               ///     }
         .               /// }
         .               /// ```
         .               ///
         .               /// [`as_mut_ptr`]: Vec::as_mut_ptr
         .               #[stable(feature = "vec_as_ptr", since = "1.37.0")]
         .               #[inline]
   735,872 ( 0.00%)      pub fn as_ptr(&self) -> *const T {
         .                   // We shadow the slice method of the same name to avoid going through
         .                   // `deref`, which creates an intermediate reference.
39,156,604 ( 0.20%)          let ptr = self.buf.ptr();
         .                   unsafe {
   367,936 ( 0.00%)              assume(!ptr.is_null());
         .                   }
         .                   ptr
   735,872 ( 0.00%)      }
         .           
         .               /// Returns an unsafe mutable pointer to the vector's buffer.
         .               ///
         .               /// The caller must ensure that the vector outlives the pointer this
         .               /// function returns, or else it will end up pointing to garbage.
         .               /// Modifying the vector may cause its buffer to be reallocated,
         .               /// which would also make any pointers to it invalid.
         .               ///
-- line 1147 ----------------------------------------
-- line 1159 ----------------------------------------
         .               ///         *x_ptr.add(i) = i as i32;
         .               ///     }
         .               ///     x.set_len(size);
         .               /// }
         .               /// assert_eq!(&*x, &[0, 1, 2, 3]);
         .               /// ```
         .               #[stable(feature = "vec_as_ptr", since = "1.37.0")]
         .               #[inline]
 1,782,246 ( 0.01%)      pub fn as_mut_ptr(&mut self) -> *mut T {
         .                   // We shadow the slice method of the same name to avoid going through
         .                   // `deref_mut`, which creates an intermediate reference.
31,639,290 ( 0.16%)          let ptr = self.buf.ptr();
         .                   unsafe {
   891,123 ( 0.00%)              assume(!ptr.is_null());
         .                   }
         .                   ptr
 1,782,246 ( 0.01%)      }
         .           
         .               /// Returns a reference to the underlying allocator.
         .               #[unstable(feature = "allocator_api", issue = "32838")]
         .               #[inline]
    49,228 ( 0.00%)      pub fn allocator(&self) -> &A {
    49,228 ( 0.00%)          self.buf.allocator()
    49,228 ( 0.00%)      }
         .           
         .               /// Forces the length of the vector to `new_len`.
         .               ///
         .               /// This is a low-level operation that maintains none of the normal
         .               /// invariants of the type. Normally changing the length of a vector
         .               /// is done using one of the safe operations instead, such as
         .               /// [`truncate`], [`resize`], [`extend`], or [`clear`].
         .               ///
-- line 1190 ----------------------------------------
-- line 1256 ----------------------------------------
         .               ///     vec.set_len(0);
         .               /// }
         .               /// ```
         .               ///
         .               /// Normally, here, one would use [`clear`] instead to correctly drop
         .               /// the contents and thus not leak memory.
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
    40,359 ( 0.00%)      pub unsafe fn set_len(&mut self, new_len: usize) {
         .                   debug_assert!(new_len <= self.capacity());
         .           
 5,009,717 ( 0.03%)          self.len = new_len;
    90,476 ( 0.00%)      }
         .           
         .               /// Removes an element from the vector and returns it.
         .               ///
         .               /// The removed element is replaced by the last element of the vector.
         .               ///
         .               /// This does not preserve ordering, but is *O*(1).
         .               /// If you need to preserve the element order, use [`remove`] instead.
         .               ///
-- line 1276 ----------------------------------------
-- line 1305 ----------------------------------------
         .                       assert_failed(index, len);
         .                   }
         .                   unsafe {
         .                       // We replace self[index] with the last element. Note that if the
         .                       // bounds check above succeeds there must be a last element (which
         .                       // can be self[index] itself).
         .                       let value = ptr::read(self.as_ptr().add(index));
         .                       let base_ptr = self.as_mut_ptr();
         3 ( 0.00%)              ptr::copy(base_ptr.add(len - 1), base_ptr.add(index), 1);
         .                       self.set_len(len - 1);
         .                       value
         .                   }
         .               }
         .           
         .               /// Inserts an element at position `index` within the vector, shifting all
         .               /// elements after it to the right.
         .               ///
-- line 1321 ----------------------------------------
-- line 1329 ----------------------------------------
         .               /// let mut vec = vec![1, 2, 3];
         .               /// vec.insert(1, 4);
         .               /// assert_eq!(vec, [1, 4, 2, 3]);
         .               /// vec.insert(4, 5);
         .               /// assert_eq!(vec, [1, 4, 2, 3, 5]);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[stable(feature = "rust1", since = "1.0.0")]
    46,788 ( 0.00%)      pub fn insert(&mut self, index: usize, element: T) {
         .                   #[cold]
         .                   #[inline(never)]
         .                   fn assert_failed(index: usize, len: usize) -> ! {
         .                       panic!("insertion index (is {}) should be <= len (is {})", index, len);
         .                   }
         .           
     9,327 ( 0.00%)          let len = self.len();
    23,546 ( 0.00%)          if index > len {
         .                       assert_failed(index, len);
         .                   }
         .           
         .                   // space for the new element
    37,434 ( 0.00%)          if len == self.buf.capacity() {
         .                       self.reserve(1);
         .                   }
         .           
         .                   unsafe {
         .                       // infallible
         .                       // The spot to put the new value
         .                       {
         .                           let p = self.as_mut_ptr().add(index);
         .                           // Shift everything over to make space. (Duplicating the
         .                           // `index`th element into two consecutive places.)
    47,640 ( 0.00%)                  ptr::copy(p, p.offset(1), len - index);
         .                           // Write it in, overwriting the first copy of the `index`th
         .                           // element.
         .                           ptr::write(p, element);
         .                       }
    37,434 ( 0.00%)              self.set_len(len + 1);
         .                   }
    40,104 ( 0.00%)      }
         .           
         .               /// Removes and returns the element at position `index` within the vector,
         .               /// shifting all elements after it to the left.
         .               ///
         .               /// Note: Because this shifts over the remaining elements, it has a
         .               /// worst-case performance of *O*(*n*). If you don't need the order of elements
         .               /// to be preserved, use [`swap_remove`] instead. If you'd like to remove
         .               /// elements from the beginning of the `Vec`, consider using
-- line 1376 ----------------------------------------
-- line 1387 ----------------------------------------
         .               ///
         .               /// ```
         .               /// let mut v = vec![1, 2, 3];
         .               /// assert_eq!(v.remove(1), 2);
         .               /// assert_eq!(v, [1, 3]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[track_caller]
    31,158 ( 0.00%)      pub fn remove(&mut self, index: usize) -> T {
         .                   #[cold]
         .                   #[inline(never)]
         .                   #[track_caller]
         .                   fn assert_failed(index: usize, len: usize) -> ! {
         .                       panic!("removal index (is {}) should be < len (is {})", index, len);
         .                   }
         .           
    12,732 ( 0.00%)          let len = self.len();
    39,798 ( 0.00%)          if index >= len {
         .                       assert_failed(index, len);
         .                   }
         .                   unsafe {
         .                       // infallible
         .                       let ret;
         .                       {
         .                           // the place we are taking from.
         .                           let ptr = self.as_mut_ptr().add(index);
         .                           // copy it out, unsafely having a copy of the value on
         .                           // the stack and in the vector at the same time.
    74,220 ( 0.00%)                  ret = ptr::read(ptr);
         .           
         .                           // Shift everything down to fill in that spot.
    25,659 ( 0.00%)                  ptr::copy(ptr.offset(1), ptr, len - index - 1);
         .                       }
    14,340 ( 0.00%)              self.set_len(len - 1);
         .                       ret
         .                   }
    51,930 ( 0.00%)      }
         .           
         .               /// Retains only the elements specified by the predicate.
         .               ///
         .               /// In other words, remove all elements `e` such that `f(&e)` returns `false`.
         .               /// This method operates in place, visiting each element exactly once in the
         .               /// original order, and preserves the order of the retained elements.
         .               ///
         .               /// # Examples
-- line 1431 ----------------------------------------
-- line 1442 ----------------------------------------
         .               /// ```
         .               /// let mut vec = vec![1, 2, 3, 4, 5];
         .               /// let keep = [false, true, true, false, true];
         .               /// let mut iter = keep.iter();
         .               /// vec.retain(|_| *iter.next().unwrap());
         .               /// assert_eq!(vec, [2, 3, 5]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
 2,697,365 ( 0.01%)      pub fn retain<F>(&mut self, mut f: F)
         .               where
         .                   F: FnMut(&T) -> bool,
         .               {
   100,068 ( 0.00%)          self.retain_mut(|elem| f(elem));
 2,644,640 ( 0.01%)      }
         .           
         .               /// Retains only the elements specified by the predicate, passing a mutable reference to it.
         .               ///
         .               /// In other words, remove all elements `e` such that `f(&mut e)` returns `false`.
         .               /// This method operates in place, visiting each element exactly once in the
         .               /// original order, and preserves the order of the retained elements.
         .               ///
         .               /// # Examples
-- line 1463 ----------------------------------------
-- line 1474 ----------------------------------------
         .               /// });
         .               /// assert_eq!(vec, [2, 3, 4]);
         .               /// ```
         .               #[unstable(feature = "vec_retain_mut", issue = "90829")]
         .               pub fn retain_mut<F>(&mut self, mut f: F)
         .               where
         .                   F: FnMut(&mut T) -> bool,
         .               {
   339,581 ( 0.00%)          let original_len = self.len();
         .                   // Avoid double drop if the drop guard is not executed,
         .                   // since we may make some holes during the process.
         .                   unsafe { self.set_len(0) };
         .           
         .                   // Vec: [Kept, Kept, Hole, Hole, Hole, Hole, Unchecked, Unchecked]
         .                   //      |<-              processed len   ->| ^- next to check
         .                   //                  |<-  deleted cnt     ->|
         .                   //      |<-              original_len                          ->|
-- line 1490 ----------------------------------------
-- line 1499 ----------------------------------------
         .                       v: &'a mut Vec<T, A>,
         .                       processed_len: usize,
         .                       deleted_cnt: usize,
         .                       original_len: usize,
         .                   }
         .           
         .                   impl<T, A: Allocator> Drop for BackshiftOnDrop<'_, T, A> {
         .                       fn drop(&mut self) {
   270,163 ( 0.00%)                  if self.deleted_cnt > 0 {
         .                               // SAFETY: Trailing unchecked items must be valid since we never touch them.
         .                               unsafe {
         .                                   ptr::copy(
         .                                       self.v.as_ptr().add(self.processed_len),
   225,704 ( 0.00%)                              self.v.as_mut_ptr().add(self.processed_len - self.deleted_cnt),
         .                                       self.original_len - self.processed_len,
         .                                   );
         .                               }
         .                           }
         .                           // SAFETY: After filling holes, all items are in contiguous memory.
         .                           unsafe {
         2 ( 0.00%)                      self.v.set_len(self.original_len - self.deleted_cnt);
         .                           }
         .                       }
         .                   }
         .           
         .                   let mut g = BackshiftOnDrop { v: self, processed_len: 0, deleted_cnt: 0, original_len };
         .           
         .                   fn process_loop<F, T, A: Allocator, const DELETED: bool>(
         .                       original_len: usize,
         .                       f: &mut F,
         .                       g: &mut BackshiftOnDrop<'_, T, A>,
         .                   ) where
         .                       F: FnMut(&mut T) -> bool,
         .                   {
 3,750,818 ( 0.02%)              while g.processed_len != original_len {
         .                           // SAFETY: Unchecked element must be valid.
         .                           let cur = unsafe { &mut *g.v.as_mut_ptr().add(g.processed_len) };
   961,587 ( 0.00%)                  if !f(cur) {
         .                               // Advance early to avoid double drop if `drop_in_place` panicked.
   100,846 ( 0.00%)                      g.processed_len += 1;
    49,388 ( 0.00%)                      g.deleted_cnt += 1;
         .                               // SAFETY: We never touch this element again after dropped.
       586 ( 0.00%)                      unsafe { ptr::drop_in_place(cur) };
         .                               // We already advanced the counter.
         .                               if DELETED {
         .                                   continue;
         .                               } else {
         .                                   break;
         .                               }
         .                           }
         .                           if DELETED {
         .                               // SAFETY: `deleted_cnt` > 0, so the hole slot must not overlap with current element.
         .                               // We use copy for move, and never touch this element again.
         .                               unsafe {
    70,830 ( 0.00%)                          let hole_slot = g.v.as_mut_ptr().add(g.processed_len - g.deleted_cnt);
         .                                   ptr::copy_nonoverlapping(cur, hole_slot, 1);
         .                               }
         .                           }
    65,920 ( 0.00%)                  g.processed_len += 1;
         .                       }
         .                   }
         .           
         .                   // Stage 1: Nothing was deleted.
         .                   process_loop::<F, T, A, false>(original_len, &mut f, &mut g);
         .           
         .                   // Stage 2: Some elements were deleted.
         .                   process_loop::<F, T, A, true>(original_len, &mut f, &mut g);
-- line 1565 ----------------------------------------
-- line 1606 ----------------------------------------
         .               /// ```
         .               /// let mut vec = vec!["foo", "bar", "Bar", "baz", "bar"];
         .               ///
         .               /// vec.dedup_by(|a, b| a.eq_ignore_ascii_case(b));
         .               ///
         .               /// assert_eq!(vec, ["foo", "bar", "baz", "bar"]);
         .               /// ```
         .               #[stable(feature = "dedup_by", since = "1.16.0")]
   179,389 ( 0.00%)      pub fn dedup_by<F>(&mut self, mut same_bucket: F)
         .               where
         .                   F: FnMut(&mut T, &mut T) -> bool,
         .               {
    28,566 ( 0.00%)          let len = self.len();
    70,636 ( 0.00%)          if len <= 1 {
         .                       return;
         .                   }
         .           
         .                   /* INVARIANT: vec.len() > read >= write > write-1 >= 0 */
         .                   struct FillGapOnDrop<'a, T, A: core::alloc::Allocator> {
         .                       /* Offset of the element we want to check if it is duplicate */
         .                       read: usize,
         .           
-- line 1627 ----------------------------------------
-- line 1670 ----------------------------------------
         .                   let ptr = gap.vec.as_mut_ptr();
         .           
         .                   /* Drop items while going through Vec, it should be more efficient than
         .                    * doing slice partition_dedup + truncate */
         .           
         .                   /* SAFETY: Because of the invariant, read_ptr, prev_ptr and write_ptr
         .                    * are always in-bounds and read_ptr never aliases prev_ptr */
         .                   unsafe {
   124,995 ( 0.00%)              while gap.read < len {
         .                           let read_ptr = ptr.add(gap.read);
         .                           let prev_ptr = ptr.add(gap.write.wrapping_sub(1));
         .           
     6,217 ( 0.00%)                  if same_bucket(&mut *read_ptr, &mut *prev_ptr) {
         .                               // Increase `gap.read` now since the drop may panic.
         .                               gap.read += 1;
         .                               /* We have found duplicate, drop it in-place */
         .                               ptr::drop_in_place(read_ptr);
         .                           } else {
         .                               let write_ptr = ptr.add(gap.write);
         .           
         .                               /* Because `read_ptr` can be equal to `write_ptr`, we either
         .                                * have to use `copy` or conditional `copy_nonoverlapping`.
         .                                * Looks like the first option is faster. */
         .                               ptr::copy(read_ptr, write_ptr, 1);
         .           
         .                               /* We have filled that place, so go further */
    97,031 ( 0.00%)                      gap.write += 1;
         .                               gap.read += 1;
         .                           }
         .                       }
         .           
         .                       /* Technically we could let `gap` clean up with its Drop, but
         .                        * when `same_bucket` is guaranteed to not panic, this bloats a little
         .                        * the codegen, so we just do it manually */
         .                       gap.vec.set_len(gap.write);
         .                       mem::forget(gap);
         .                   }
   205,016 ( 0.00%)      }
         .           
         .               /// Appends an element to the back of a collection.
         .               ///
         .               /// # Panics
         .               ///
         .               /// Panics if the new capacity exceeds `isize::MAX` bytes.
         .               ///
         .               /// # Examples
-- line 1715 ----------------------------------------
-- line 1717 ----------------------------------------
         .               /// ```
         .               /// let mut vec = vec![1, 2];
         .               /// vec.push(3);
         .               /// assert_eq!(vec, [1, 2, 3]);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
 1,511,233 ( 0.01%)      pub fn push(&mut self, value: T) {
         .                   // This will panic or abort if we would allocate > isize::MAX bytes
         .                   // or if the length increment would overflow for zero-sized types.
40,242,657 ( 0.21%)          if self.len == self.buf.capacity() {
 3,189,165 ( 0.02%)              self.buf.reserve_for_push(self.len);
         .                   }
         .                   unsafe {
 4,151,826 ( 0.02%)              let end = self.as_mut_ptr().add(self.len);
 2,296,672 ( 0.01%)              ptr::write(end, value);
59,785,979 ( 0.31%)              self.len += 1;
         .                   }
   576,138 ( 0.00%)      }
         .           
         .               /// Removes the last element from a vector and returns it, or [`None`] if it
         .               /// is empty.
         .               ///
         .               /// If you'd like to pop the first element, consider using
         .               /// [`VecDeque::pop_front`] instead.
         .               ///
         .               /// [`VecDeque::pop_front`]: crate::collections::VecDeque::pop_front
-- line 1744 ----------------------------------------
-- line 1748 ----------------------------------------
         .               /// ```
         .               /// let mut vec = vec![1, 2, 3];
         .               /// assert_eq!(vec.pop(), Some(3));
         .               /// assert_eq!(vec, [1, 2]);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn pop(&mut self) -> Option<T> {
11,009,151 ( 0.06%)          if self.len == 0 {
       234 ( 0.00%)              None
         .                   } else {
         .                       unsafe {
 7,996,199 ( 0.04%)                  self.len -= 1;
 2,002,440 ( 0.01%)                  Some(ptr::read(self.as_ptr().add(self.len())))
         .                       }
         .                   }
         .               }
         .           
         .               /// Moves all the elements of `other` into `Self`, leaving `other` empty.
         .               ///
         .               /// # Panics
         .               ///
-- line 1769 ----------------------------------------
-- line 1776 ----------------------------------------
         .               /// let mut vec2 = vec![4, 5, 6];
         .               /// vec.append(&mut vec2);
         .               /// assert_eq!(vec, [1, 2, 3, 4, 5, 6]);
         .               /// assert_eq!(vec2, []);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[inline]
         .               #[stable(feature = "append", since = "1.4.0")]
     7,717 ( 0.00%)      pub fn append(&mut self, other: &mut Self) {
         .                   unsafe {
       768 ( 0.00%)              self.append_elements(other.as_slice() as _);
       576 ( 0.00%)              other.set_len(0);
         .                   }
     5,682 ( 0.00%)      }
         .           
         .               /// Appends elements to `Self` from other buffer.
         .               #[cfg(not(no_global_oom_handling))]
         .               #[inline]
   944,370 ( 0.00%)      unsafe fn append_elements(&mut self, other: *const [T]) {
    94,437 ( 0.00%)          let count = unsafe { (*other).len() };
    94,437 ( 0.00%)          self.reserve(count);
 1,422,381 ( 0.01%)          let len = self.len();
   283,311 ( 0.00%)          unsafe { ptr::copy_nonoverlapping(other as *const T, self.as_mut_ptr().add(len), count) };
 4,696,540 ( 0.02%)          self.len += count;
   188,874 ( 0.00%)      }
         .           
         .               /// Creates a draining iterator that removes the specified range in the vector
         .               /// and yields the removed items.
         .               ///
         .               /// When the iterator **is** dropped, all elements in the range are removed
         .               /// from the vector, even if the iterator was not fully consumed. If the
         .               /// iterator **is not** dropped (with [`mem::forget`] for example), it is
         .               /// unspecified how many elements are removed.
-- line 1808 ----------------------------------------
-- line 1820 ----------------------------------------
         .               /// assert_eq!(v, &[1]);
         .               /// assert_eq!(u, &[2, 3]);
         .               ///
         .               /// // A full range clears the vector
         .               /// v.drain(..);
         .               /// assert_eq!(v, &[]);
         .               /// ```
         .               #[stable(feature = "drain", since = "1.6.0")]
    55,482 ( 0.00%)      pub fn drain<R>(&mut self, range: R) -> Drain<'_, T, A>
         .               where
         .                   R: RangeBounds<usize>,
         .               {
         .                   // Memory safety
         .                   //
         .                   // When the Drain is first created, it shortens the length of
         .                   // the source vector to make sure no uninitialized or moved-from elements
         .                   // are accessible at all if the Drain's destructor never gets to run.
         .                   //
         .                   // Drain will ptr::read out the values to remove.
         .                   // When finished, remaining tail of the vec is copied back to cover
         .                   // the hole, and the vector length is restored to the new length.
         .                   //
   323,159 ( 0.00%)          let len = self.len();
   118,890 ( 0.00%)          let Range { start, end } = slice::range(range, ..len);
         .           
         .                   unsafe {
         .                       // set self.vec length's to start, to be safe in case Drain is leaked
    23,778 ( 0.00%)              self.set_len(start);
         .                       // Use the borrow in the IterMut to indicate borrowing behavior of the
         .                       // whole Drain iterator (like &mut T).
   127,259 ( 0.00%)              let range_slice = slice::from_raw_parts_mut(self.as_mut_ptr().add(start), end - start);
    41,141 ( 0.00%)              Drain {
         .                           tail_start: end,
    39,930 ( 0.00%)                  tail_len: len - end,
    39,630 ( 0.00%)                  iter: range_slice.iter(),
    31,704 ( 0.00%)                  vec: NonNull::from(self),
         .                       }
         .                   }
    15,852 ( 0.00%)      }
         .           
         .               /// Clears the vector, removing all values.
         .               ///
         .               /// Note that this method has no effect on the allocated capacity
         .               /// of the vector.
         .               ///
         .               /// # Examples
         .               ///
-- line 1866 ----------------------------------------
-- line 1869 ----------------------------------------
         .               ///
         .               /// v.clear();
         .               ///
         .               /// assert!(v.is_empty());
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn clear(&mut self) {
 1,882,183 ( 0.01%)          self.truncate(0)
         .               }
         .           
         .               /// Returns the number of elements in the vector, also referred to
         .               /// as its 'length'.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let a = vec![1, 2, 3];
         .               /// assert_eq!(a.len(), 3);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
   365,652 ( 0.00%)      pub fn len(&self) -> usize {
   182,826 ( 0.00%)          self.len
   365,652 ( 0.00%)      }
         .           
         .               /// Returns `true` if the vector contains no elements.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let mut v = Vec::new();
         .               /// assert!(v.is_empty());
         .               ///
         .               /// v.push(1);
         .               /// assert!(!v.is_empty());
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
    37,146 ( 0.00%)      pub fn is_empty(&self) -> bool {
 3,801,808 ( 0.02%)          self.len() == 0
    74,292 ( 0.00%)      }
         .           
         .               /// Splits the collection into two at the given index.
         .               ///
         .               /// Returns a newly allocated vector containing the elements in the range
         .               /// `[at, len)`. After the call, the original vector will be left containing
         .               /// the elements `[0, at)` with its previous capacity unchanged.
         .               ///
         .               /// # Panics
-- line 1917 ----------------------------------------
-- line 1935 ----------------------------------------
         .                   A: Clone,
         .               {
         .                   #[cold]
         .                   #[inline(never)]
         .                   fn assert_failed(at: usize, len: usize) -> ! {
         .                       panic!("`at` split index (is {}) should be <= len (is {})", at, len);
         .                   }
         .           
    18,312 ( 0.00%)          if at > self.len() {
         .                       assert_failed(at, self.len());
         .                   }
         .           
    13,174 ( 0.00%)          if at == 0 {
         .                       // the new vector can take over the original buffer and avoid the copy
         .                       return mem::replace(
         .                           self,
         .                           Vec::with_capacity_in(self.capacity(), self.allocator().clone()),
         .                       );
         .                   }
         .           
         2 ( 0.00%)          let other_len = self.len - at;
         .                   let mut other = Vec::with_capacity_in(other_len, self.allocator().clone());
         .           
         .                   // Unsafely `set_len` and copy items to `other`.
         .                   unsafe {
         .                       self.set_len(at);
         .                       other.set_len(other_len);
         .           
         .                       ptr::copy_nonoverlapping(self.as_ptr().add(at), other.as_mut_ptr(), other.len());
-- line 1963 ----------------------------------------
-- line 1988 ----------------------------------------
         .               ///
         .               /// let mut vec = vec![];
         .               /// let mut p = 1;
         .               /// vec.resize_with(4, || { p *= 2; p });
         .               /// assert_eq!(vec, [2, 4, 8, 16]);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[stable(feature = "vec_resize_with", since = "1.33.0")]
   307,410 ( 0.00%)      pub fn resize_with<F>(&mut self, new_len: usize, f: F)
         .               where
         .                   F: FnMut() -> T,
         .               {
    41,802 ( 0.00%)          let len = self.len();
    83,604 ( 0.00%)          if new_len > len {
   299,484 ( 0.00%)              self.extend_with(new_len - len, ExtendFunc(f));
         .                   } else {
         .                       self.truncate(new_len);
         .                   }
   265,608 ( 0.00%)      }
         .           
         .               /// Consumes and leaks the `Vec`, returning a mutable reference to the contents,
         .               /// `&'a mut [T]`. Note that the type `T` must outlive the chosen lifetime
         .               /// `'a`. If the type has only static references, or none at all, then this
         .               /// may be chosen to be `'static`.
         .               ///
         .               /// As of Rust 1.57, this method does not reallocate or shrink the `Vec`,
         .               /// so the leaked allocation may include unused capacity that is not part
-- line 2014 ----------------------------------------
-- line 2064 ----------------------------------------
         .               /// unsafe {
         .               ///     v.set_len(3);
         .               /// }
         .               ///
         .               /// assert_eq!(&v, &[0, 1, 2]);
         .               /// ```
         .               #[stable(feature = "vec_spare_capacity", since = "1.60.0")]
         .               #[inline]
     5,508 ( 0.00%)      pub fn spare_capacity_mut(&mut self) -> &mut [MaybeUninit<T>] {
         .                   // Note:
         .                   // This method is not implemented in terms of `split_at_spare_mut`,
         .                   // to prevent invalidation of pointers to the buffer.
         .                   unsafe {
     7,344 ( 0.00%)              slice::from_raw_parts_mut(
    12,862 ( 0.00%)                  self.as_mut_ptr().add(self.len) as *mut MaybeUninit<T>,
     9,317 ( 0.00%)                  self.buf.capacity() - self.len,
         .                       )
         .                   }
     3,672 ( 0.00%)      }
         .           
         .               /// Returns vector content as a slice of `T`, along with the remaining spare
         .               /// capacity of the vector as a slice of `MaybeUninit<T>`.
         .               ///
         .               /// The returned spare capacity slice can be used to fill the vector with data
         .               /// (e.g. by reading from a file) before marking the data as initialized using
         .               /// the [`set_len`] method.
         .               ///
-- line 2090 ----------------------------------------
-- line 2189 ----------------------------------------
         .               /// assert_eq!(vec, ["hello", "world", "world"]);
         .               ///
         .               /// let mut vec = vec![1, 2, 3, 4];
         .               /// vec.resize(2, 0);
         .               /// assert_eq!(vec, [1, 2]);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[stable(feature = "vec_resize", since = "1.5.0")]
   125,310 ( 0.00%)      pub fn resize(&mut self, new_len: usize, value: T) {
    12,531 ( 0.00%)          let len = self.len();
         .           
    37,593 ( 0.00%)          if new_len > len {
    29,313 ( 0.00%)              self.extend_with(new_len - len, ExtendElement(value))
         .                   } else {
         .                       self.truncate(new_len);
         .                   }
    13,675 ( 0.00%)      }
         .           
         .               /// Clones and appends all elements in a slice to the `Vec`.
         .               ///
         .               /// Iterates over the slice `other`, clones each element, and then appends
         .               /// it to this `Vec`. The `other` slice is traversed in-order.
         .               ///
         .               /// Note that this function is same as [`extend`] except that it is
         .               /// specialized to work with slices instead. If and when Rust gets
-- line 2213 ----------------------------------------
-- line 2220 ----------------------------------------
         .               /// let mut vec = vec![1];
         .               /// vec.extend_from_slice(&[2, 3, 4]);
         .               /// assert_eq!(vec, [1, 2, 3, 4]);
         .               /// ```
         .               ///
         .               /// [`extend`]: Vec::extend
         .               #[cfg(not(no_global_oom_handling))]
         .               #[stable(feature = "vec_extend_from_slice", since = "1.6.0")]
   881,474 ( 0.00%)      pub fn extend_from_slice(&mut self, other: &[T]) {
   320,536 ( 0.00%)          self.spec_extend(other.iter())
   160,268 ( 0.00%)      }
         .           
         .               /// Copies elements from `src` range to the end of the vector.
         .               ///
         .               /// # Panics
         .               ///
         .               /// Panics if the starting point is greater than the end point or if
         .               /// the end point is greater than the length of the vector.
         .               ///
-- line 2238 ----------------------------------------
-- line 2291 ----------------------------------------
         .               fn last(mut self) -> T {
         .                   (self.0)()
         .               }
         .           }
         .           
         .           impl<T, A: Allocator> Vec<T, A> {
         .               #[cfg(not(no_global_oom_handling))]
         .               /// Extend the vector by `n` values, using the given generator.
 1,820,848 ( 0.01%)      fn extend_with<E: ExtendWith<T>>(&mut self, n: usize, mut value: E) {
         .                   self.reserve(n);
         .           
         .                   unsafe {
    46,755 ( 0.00%)              let mut ptr = self.as_mut_ptr().add(self.len());
         .                       // Use SetLenOnDrop to work around bug where compiler
         .                       // might not realize the store through `ptr` through self.set_len()
         .                       // don't alias.
         .                       let mut local_len = SetLenOnDrop::new(&mut self.len);
         .           
         .                       // Write all elements except the last one
         .                       for _ in 1..n {
         .                           ptr::write(ptr, value.next());
         .                           ptr = ptr.offset(1);
         .                           // Increment the length in every step in case next() panics
         .                           local_len.increment_len(1);
         .                       }
         .           
 2,014,578 ( 0.01%)              if n > 0 {
         .                           // We can write the last element directly without cloning needlessly
         .                           ptr::write(ptr, value.last());
         .                           local_len.increment_len(1);
         .                       }
         .           
         .                       // len set by scope guard
         .                   }
 1,451,327 ( 0.01%)      }
         .           }
         .           
         .           impl<T: PartialEq, A: Allocator> Vec<T, A> {
         .               /// Removes consecutive repeated elements in the vector according to the
         .               /// [`PartialEq`] trait implementation.
         .               ///
         .               /// If the vector is sorted, this removes all duplicates.
         .               ///
-- line 2333 ----------------------------------------
-- line 2338 ----------------------------------------
         .               ///
         .               /// vec.dedup();
         .               ///
         .               /// assert_eq!(vec, [1, 2, 3, 2]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[inline]
         .               pub fn dedup(&mut self) {
    25,629 ( 0.00%)          self.dedup_by(|a, b| a == b)
         .               }
         .           }
         .           
         .           ////////////////////////////////////////////////////////////////////////////////
         .           // Internal methods and functions
         .           ////////////////////////////////////////////////////////////////////////////////
         .           
         .           #[doc(hidden)]
         .           #[cfg(not(no_global_oom_handling))]
         .           #[stable(feature = "rust1", since = "1.0.0")]
   459,924 ( 0.00%)  pub fn from_elem<T: Clone>(elem: T, n: usize) -> Vec<T> {
 2,291,391 ( 0.01%)      <T as SpecFromElem>::from_elem(elem, n, Global)
   543,935 ( 0.00%)  }
         .           
         .           #[doc(hidden)]
         .           #[cfg(not(no_global_oom_handling))]
         .           #[unstable(feature = "allocator_api", issue = "32838")]
         .           pub fn from_elem_in<T: Clone, A: Allocator>(elem: T, n: usize, alloc: A) -> Vec<T, A> {
         .               <T as SpecFromElem>::from_elem(elem, n, alloc)
         .           }
         .           
-- line 2367 ----------------------------------------
-- line 2423 ----------------------------------------
         .           ////////////////////////////////////////////////////////////////////////////////
         .           // Common trait implementations for Vec
         .           ////////////////////////////////////////////////////////////////////////////////
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T, A: Allocator> ops::Deref for Vec<T, A> {
         .               type Target = [T];
         .           
 1,103,808 ( 0.01%)      fn deref(&self) -> &[T] {
61,028,018 ( 0.31%)          unsafe { slice::from_raw_parts(self.as_ptr(), self.len) }
   737,075 ( 0.00%)      }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T, A: Allocator> ops::DerefMut for Vec<T, A> {
    53,130 ( 0.00%)      fn deref_mut(&mut self) -> &mut [T] {
16,753,405 ( 0.09%)          unsafe { slice::from_raw_parts_mut(self.as_mut_ptr(), self.len) }
    35,420 ( 0.00%)      }
         .           }
         .           
         .           #[cfg(not(no_global_oom_handling))]
         .           trait SpecCloneFrom {
         .               fn clone_from(this: &mut Self, other: &Self);
         .           }
         .           
         .           #[cfg(not(no_global_oom_handling))]
-- line 2448 ----------------------------------------
-- line 2468 ----------------------------------------
         .                   this.extend_from_slice(other);
         .               }
         .           }
         .           
         .           #[cfg(not(no_global_oom_handling))]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T: Clone, A: Allocator + Clone> Clone for Vec<T, A> {
         .               #[cfg(not(test))]
 1,766,300 ( 0.01%)      fn clone(&self) -> Self {
     9,180 ( 0.00%)          let alloc = self.allocator().clone();
    16,526 ( 0.00%)          <[T]>::to_vec_in(&**self, alloc)
 2,132,164 ( 0.01%)      }
         .           
         .               // HACK(japaric): with cfg(test) the inherent `[T]::to_vec` method, which is
         .               // required for this method definition, is not available. Instead use the
         .               // `slice::to_vec`  function which is only available with cfg(test)
         .               // NB see the slice::hack module in slice.rs for more information
         .               #[cfg(test)]
         .               fn clone(&self) -> Self {
         .                   let alloc = self.allocator().clone();
-- line 2487 ----------------------------------------
-- line 2517 ----------------------------------------
         .           #[rustc_on_unimplemented(
         .               message = "vector indices are of type `usize` or ranges of `usize`",
         .               label = "vector indices are of type `usize` or ranges of `usize`"
         .           )]
         .           impl<T, I: SliceIndex<[T]>, A: Allocator> Index<I> for Vec<T, A> {
         .               type Output = I::Output;
         .           
         .               #[inline]
       480 ( 0.00%)      fn index(&self, index: I) -> &Self::Output {
 2,270,088 ( 0.01%)          Index::index(&**self, index)
       192 ( 0.00%)      }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           #[rustc_on_unimplemented(
         .               message = "vector indices are of type `usize` or ranges of `usize`",
         .               label = "vector indices are of type `usize` or ranges of `usize`"
         .           )]
         .           impl<T, I: SliceIndex<[T]>, A: Allocator> IndexMut<I> for Vec<T, A> {
         .               #[inline]
         .               fn index_mut(&mut self, index: I) -> &mut Self::Output {
    16,764 ( 0.00%)          IndexMut::index_mut(&mut **self, index)
         .               }
         .           }
         .           
         .           #[cfg(not(no_global_oom_handling))]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T> FromIterator<T> for Vec<T> {
         .               #[inline]
       288 ( 0.00%)      fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> Vec<T> {
12,476,813 ( 0.06%)          <Self as SpecFromIter<T, I::IntoIter>>::from_iter(iter.into_iter())
       192 ( 0.00%)      }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T, A: Allocator> IntoIterator for Vec<T, A> {
         .               type Item = T;
         .               type IntoIter = IntoIter<T, A>;
         .           
         .               /// Creates a consuming iterator, that is, one that moves each value out of
-- line 2556 ----------------------------------------
-- line 2562 ----------------------------------------
         .               /// ```
         .               /// let v = vec!["a".to_string(), "b".to_string()];
         .               /// for s in v.into_iter() {
         .               ///     // s has type String, not &String
         .               ///     println!("{}", s);
         .               /// }
         .               /// ```
         .               #[inline]
    68,334 ( 0.00%)      fn into_iter(self) -> IntoIter<T, A> {
         .                   unsafe {
 5,295,985 ( 0.03%)              let mut me = ManuallyDrop::new(self);
    45,556 ( 0.00%)              let alloc = ptr::read(me.allocator());
   113,698 ( 0.00%)              let begin = me.as_mut_ptr();
    68,334 ( 0.00%)              let end = if mem::size_of::<T>() == 0 {
         .                           arith_offset(begin as *const i8, me.len() as isize) as *const T
         .                       } else {
   113,698 ( 0.00%)                  begin.add(me.len()) as *const T
         .                       };
    22,778 ( 0.00%)              let cap = me.buf.capacity();
 2,020,200 ( 0.01%)              IntoIter {
    90,920 ( 0.00%)                  buf: NonNull::new_unchecked(begin),
         .                           phantom: PhantomData,
         .                           cap,
         .                           alloc,
         .                           ptr: begin,
    22,778 ( 0.00%)                  end,
         .                       }
         .                   }
    45,556 ( 0.00%)      }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<'a, T, A: Allocator> IntoIterator for &'a Vec<T, A> {
         .               type Item = &'a T;
         .               type IntoIter = slice::Iter<'a, T>;
         .           
     1,286 ( 0.00%)      fn into_iter(self) -> slice::Iter<'a, T> {
   105,349 ( 0.00%)          self.iter()
     1,286 ( 0.00%)      }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<'a, T, A: Allocator> IntoIterator for &'a mut Vec<T, A> {
         .               type Item = &'a mut T;
         .               type IntoIter = slice::IterMut<'a, T>;
         .           
    19,152 ( 0.00%)      fn into_iter(self) -> slice::IterMut<'a, T> {
    59,738 ( 0.00%)          self.iter_mut()
    19,152 ( 0.00%)      }
         .           }
         .           
         .           #[cfg(not(no_global_oom_handling))]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T, A: Allocator> Extend<T> for Vec<T, A> {
         .               #[inline]
    51,789 ( 0.00%)      fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {
 6,815,746 ( 0.03%)          <Self as SpecExtend<T, I::IntoIter>>::spec_extend(self, iter.into_iter())
    37,678 ( 0.00%)      }
         .           
         .               #[inline]
         .               fn extend_one(&mut self, item: T) {
     6,144 ( 0.00%)          self.push(item);
         .               }
         .           
         .               #[inline]
         .               fn extend_reserve(&mut self, additional: usize) {
         .                   self.reserve(additional);
         .               }
         .           }
         .           
         .           impl<T, A: Allocator> Vec<T, A> {
         .               // leaf method to which various SpecFrom/SpecExtend implementations delegate when
         .               // they have no further optimizations to apply
         .               #[cfg(not(no_global_oom_handling))]
       384 ( 0.00%)      fn extend_desugared<I: Iterator<Item = T>>(&mut self, mut iterator: I) {
         .                   // This is the case for a general iterator.
         .                   //
         .                   // This function should be the moral equivalent of:
         .                   //
         .                   //      for item in iterator {
         .                   //          self.push(item);
         .                   //      }
 1,520,989 ( 0.01%)          while let Some(element) = iterator.next() {
   329,010 ( 0.00%)              let len = self.len();
 3,407,029 ( 0.02%)              if len == self.capacity() {
     2,424 ( 0.00%)                  let (lower, _) = iterator.size_hint();
         .                           self.reserve(lower.saturating_add(1));
         .                       }
         .                       unsafe {
     1,235 ( 0.00%)                  ptr::write(self.as_mut_ptr().add(len), element);
         .                           // Since next() executes user code which can panic we have to bump the length
         .                           // after each step.
         .                           // NB can't overflow since we would have had to alloc the address space
 2,461,732 ( 0.01%)                  self.set_len(len + 1);
         .                       }
        95 ( 0.00%)          }
    33,111 ( 0.00%)      }
         .           
         .               /// Creates a splicing iterator that replaces the specified range in the vector
         .               /// with the given `replace_with` iterator and yields the removed items.
         .               /// `replace_with` does not need to be the same length as `range`.
         .               ///
         .               /// `range` is removed even if the iterator is not consumed until the end.
         .               ///
         .               /// It is unspecified how many elements are removed from the vector
-- line 2666 ----------------------------------------
-- line 2693 ----------------------------------------
         .               #[cfg(not(no_global_oom_handling))]
         .               #[inline]
         .               #[stable(feature = "vec_splice", since = "1.21.0")]
         .               pub fn splice<R, I>(&mut self, range: R, replace_with: I) -> Splice<'_, I::IntoIter, A>
         .               where
         .                   R: RangeBounds<usize>,
         .                   I: IntoIterator<Item = T>,
         .               {
     5,500 ( 0.00%)          Splice { drain: self.drain(range), replace_with: replace_with.into_iter() }
         .               }
         .           
         .               /// Creates an iterator which uses a closure to determine if an element should be removed.
         .               ///
         .               /// If the closure returns true, then the element is removed and yielded.
         .               /// If the closure returns false, the element will remain in the vector and will not be yielded
         .               /// by the iterator.
         .               ///
-- line 2709 ----------------------------------------
-- line 2745 ----------------------------------------
         .               /// assert_eq!(evens, vec![2, 4, 6, 8, 14]);
         .               /// assert_eq!(odds, vec![1, 3, 5, 9, 11, 13, 15]);
         .               /// ```
         .               #[unstable(feature = "drain_filter", reason = "recently added", issue = "43244")]
         .               pub fn drain_filter<F>(&mut self, filter: F) -> DrainFilter<'_, T, F, A>
         .               where
         .                   F: FnMut(&mut T) -> bool,
         .               {
    12,796 ( 0.00%)          let old_len = self.len();
         .           
         .                   // Guard against us getting leaked (leak amplification)
         .                   unsafe {
         .                       self.set_len(0);
         .                   }
         .           
    33,712 ( 0.00%)          DrainFilter { vec: self, idx: 0, del: 0, old_len, pred: filter, panic_flag: false }
         .               }
         .           }
         .           
         .           /// Extend implementation that copies elements out of references before pushing them onto the Vec.
         .           ///
         .           /// This implementation is specialized for slice iterators, where it uses [`copy_from_slice`] to
         .           /// append the entire slice at once.
         .           ///
-- line 2768 ----------------------------------------
-- line 2803 ----------------------------------------
         .               #[inline]
         .               fn cmp(&self, other: &Self) -> Ordering {
         .                   Ord::cmp(&**self, &**other)
         .               }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           unsafe impl<#[may_dangle] T, A: Allocator> Drop for Vec<T, A> {
 7,643,110 ( 0.04%)      fn drop(&mut self) {
         .                   unsafe {
         .                       // use drop for [T]
         .                       // use a raw slice to refer to the elements of the vector as weakest necessary type;
         .                       // could avoid questions of validity in certain cases
 5,796,472 ( 0.03%)              ptr::drop_in_place(ptr::slice_from_raw_parts_mut(self.as_mut_ptr(), self.len))
         .                   }
         .                   // RawVec handles deallocation
 8,302,406 ( 0.04%)      }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           #[rustc_const_unstable(feature = "const_default_impls", issue = "87864")]
         .           impl<T> const Default for Vec<T> {
         .               /// Creates an empty `Vec<T>`.
         .               fn default() -> Vec<T> {
         .                   Vec::new()
-- line 2827 ----------------------------------------
-- line 2976 ----------------------------------------
         .               /// newly-allocated buffer with exactly the right capacity.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// assert_eq!(Box::from(vec![1, 2, 3]), vec![1, 2, 3].into_boxed_slice());
         .               /// ```
         .               fn from(v: Vec<T, A>) -> Self {
         4 ( 0.00%)          v.into_boxed_slice()
         .               }
         .           }
         .           
         .           #[cfg(not(no_global_oom_handling))]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl From<&str> for Vec<u8> {
         .               /// Allocate a `Vec<u8>` and fill it with a UTF-8 string.
         .               ///
-- line 2992 ----------------------------------------

24,352,617 ( 0.12%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/mem/mod.rs
--------------------------------------------------------------------------------
Ir                  

-- line 136 ----------------------------------------
         .           /// [`Box::leak`]: ../../std/boxed/struct.Box.html#method.leak
         .           /// [`Box::into_raw`]: ../../std/boxed/struct.Box.html#method.into_raw
         .           /// [`mem::drop`]: drop
         .           /// [ub]: ../../reference/behavior-considered-undefined.html
         .           #[inline]
         .           #[rustc_const_stable(feature = "const_forget", since = "1.46.0")]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           #[cfg_attr(not(test), rustc_diagnostic_item = "mem_forget")]
     9,608 ( 0.00%)  pub const fn forget<T>(t: T) {
       702 ( 0.00%)      let _ = ManuallyDrop::new(t);
     4,108 ( 0.00%)  }
         .           
         .           /// Like [`forget`], but also accepts unsized values.
         .           ///
         .           /// This function is just a shim intended to be removed when the `unsized_locals` feature gets
         .           /// stabilized.
         .           #[inline]
         .           #[unstable(feature = "forget_unsized", issue = "none")]
         .           pub fn forget_unsized<T: ?Sized>(t: T) {
-- line 154 ----------------------------------------
-- line 324 ----------------------------------------
         .           /// let y: &[u8] = &x;
         .           /// assert_eq!(13, mem::size_of_val(y));
         .           /// ```
         .           #[inline]
         .           #[must_use]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           #[rustc_const_unstable(feature = "const_size_of_val", issue = "46571")]
         .           #[cfg_attr(not(test), rustc_diagnostic_item = "mem_size_of_val")]
   954,103 ( 0.00%)  pub const fn size_of_val<T: ?Sized>(val: &T) -> usize {
         .               // SAFETY: `val` is a reference, so it's a valid raw pointer
 1,471,463 ( 0.01%)      unsafe { intrinsics::size_of_val(val) }
   685,894 ( 0.00%)  }
         .           
         .           /// Returns the size of the pointed-to value in bytes.
         .           ///
         .           /// This is usually the same as `size_of::<T>()`. However, when `T` *has* no
         .           /// statically-known size, e.g., a slice [`[T]`][slice] or a [trait object],
         .           /// then `size_of_val_raw` can be used to get the dynamically-known size.
         .           ///
         .           /// # Safety
-- line 343 ----------------------------------------
-- line 375 ----------------------------------------
         .           /// assert_eq!(13, unsafe { mem::size_of_val_raw(y) });
         .           /// ```
         .           #[inline]
         .           #[must_use]
         .           #[unstable(feature = "layout_for_ptr", issue = "69835")]
         .           #[rustc_const_unstable(feature = "const_size_of_val_raw", issue = "46571")]
         .           pub const unsafe fn size_of_val_raw<T: ?Sized>(val: *const T) -> usize {
         .               // SAFETY: the caller must provide a valid raw pointer
        14 ( 0.00%)      unsafe { intrinsics::size_of_val(val) }
         .           }
         .           
         .           /// Returns the [ABI]-required minimum alignment of a type.
         .           ///
         .           /// Every reference to a value of the type `T` must be a multiple of this number.
         .           ///
         .           /// This is the alignment used for struct fields. It may be smaller than the preferred alignment.
         .           ///
-- line 391 ----------------------------------------
-- line 467 ----------------------------------------
         .           ///
         .           /// assert_eq!(4, mem::align_of_val(&5i32));
         .           /// ```
         .           #[inline]
         .           #[must_use]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           #[rustc_const_unstable(feature = "const_align_of_val", issue = "46571")]
         .           #[allow(deprecated)]
   149,476 ( 0.00%)  pub const fn align_of_val<T: ?Sized>(val: &T) -> usize {
         .               // SAFETY: val is a reference, so it's a valid raw pointer
   224,214 ( 0.00%)      unsafe { intrinsics::min_align_of_val(val) }
   149,476 ( 0.00%)  }
         .           
         .           /// Returns the [ABI]-required minimum alignment of the type of the value that `val` points to.
         .           ///
         .           /// Every reference to a value of the type `T` must be a multiple of this number.
         .           ///
         .           /// [ABI]: https://en.wikipedia.org/wiki/Application_binary_interface
         .           ///
         .           /// # Safety
-- line 486 ----------------------------------------
-- line 578 ----------------------------------------
         .           ///     }
         .           /// }
         .           /// ```
         .           #[inline]
         .           #[must_use]
         .           #[stable(feature = "needs_drop", since = "1.21.0")]
         .           #[rustc_const_stable(feature = "const_needs_drop", since = "1.36.0")]
         .           #[rustc_diagnostic_item = "needs_drop"]
         1 ( 0.00%)  pub const fn needs_drop<T>() -> bool {
         3 ( 0.00%)      intrinsics::needs_drop::<T>()
         4 ( 0.00%)  }
         .           
         .           /// Returns the value of type `T` represented by the all-zero byte-pattern.
         .           ///
         .           /// This means that, for example, the padding byte in `(u8, u16)` is not
         .           /// necessarily zeroed.
         .           ///
         .           /// There is no guarantee that an all-zero byte-pattern represents a valid value
         .           /// of some type `T`. For example, the all-zero byte-pattern is not a valid value
-- line 596 ----------------------------------------
-- line 759 ----------------------------------------
         .           /// let mut buffer = Buffer { buf: vec![0, 1] };
         .           /// assert_eq!(buffer.buf.len(), 2);
         .           ///
         .           /// assert_eq!(buffer.get_and_reset(), vec![0, 1]);
         .           /// assert_eq!(buffer.buf.len(), 0);
         .           /// ```
         .           #[inline]
         .           #[stable(feature = "mem_take", since = "1.40.0")]
        60 ( 0.00%)  pub fn take<T: Default>(dest: &mut T) -> T {
        48 ( 0.00%)      replace(dest, T::default())
        24 ( 0.00%)  }
         .           
         .           /// Moves `src` into the referenced `dest`, returning the previous `dest` value.
         .           ///
         .           /// Neither value is dropped.
         .           ///
         .           /// * If you want to replace the values of two variables, see [`swap`].
         .           /// * If you want to replace with a default value, see [`take`].
         .           ///
-- line 777 ----------------------------------------
-- line 826 ----------------------------------------
         .           /// assert_eq!(buffer.replace_index(0, 2), 0);
         .           /// assert_eq!(buffer.buf[0], 2);
         .           /// ```
         .           #[inline]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           #[must_use = "if you don't need the old value, you can just assign the new value directly"]
         .           #[rustc_const_unstable(feature = "const_replace", issue = "83164")]
         .           #[cfg_attr(not(test), rustc_diagnostic_item = "mem_replace")]
 6,384,039 ( 0.03%)  pub const fn replace<T>(dest: &mut T, src: T) -> T {
         .               // SAFETY: We read from `dest` but directly write `src` into it afterwards,
         .               // such that the old value is not duplicated. Nothing is dropped and
         .               // nothing here can panic.
         .               unsafe {
10,216,087 ( 0.05%)          let result = ptr::read(dest);
75,530,045 ( 0.39%)          ptr::write(dest, src);
         .                   result
         .               }
 2,827,822 ( 0.01%)  }
         .           
         .           /// Disposes of a value.
         .           ///
         .           /// This does so by calling the argument's implementation of [`Drop`][drop].
         .           ///
         .           /// This effectively does nothing for types which implement `Copy`, e.g.
         .           /// integers. Such values are copied and _then_ moved into the function, so the
         .           /// value persists after this function call.
-- line 851 ----------------------------------------
-- line 901 ----------------------------------------
         .           ///
         .           /// println!("x: {}, y: {}", x, y.0); // still available
         .           /// ```
         .           ///
         .           /// [`RefCell`]: crate::cell::RefCell
         .           #[inline]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           #[cfg_attr(not(test), rustc_diagnostic_item = "mem_drop")]
 3,791,232 ( 0.02%)  pub fn drop<T>(_x: T) {}
         .           
         .           /// Interprets `src` as having type `&U`, and then reads `src` without moving
         .           /// the contained value.
         .           ///
         .           /// This function will unsafely assume the pointer `src` is valid for [`size_of::<U>`][size_of]
         .           /// bytes by transmuting `&T` to `&U` and then reading the `&U` (except that this is done in a way
         .           /// that is correct even when `&U` makes stricter alignment requirements than `&T`). It will also
         .           /// unsafely create a copy of the contained value instead of moving out of `src`.
-- line 917 ----------------------------------------
-- line 947 ----------------------------------------
         .           ///
         .           /// // The contents of 'foo_array' should not have changed
         .           /// assert_eq!(foo_array, [10]);
         .           /// ```
         .           #[inline]
         .           #[must_use]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           #[rustc_const_unstable(feature = "const_transmute_copy", issue = "83165")]
        30 ( 0.00%)  pub const unsafe fn transmute_copy<T, U>(src: &T) -> U {
         .               // If U has a higher alignment requirement, src might not be suitably aligned.
        12 ( 0.00%)      if align_of::<U>() > align_of::<T>() {
         .                   // SAFETY: `src` is a reference which is guaranteed to be valid for reads.
         .                   // The caller must guarantee that the actual transmutation is safe.
         .                   unsafe { ptr::read_unaligned(src as *const T as *const U) }
         .               } else {
         .                   // SAFETY: `src` is a reference which is guaranteed to be valid for reads.
         .                   // We just checked that `src as *const U` was properly aligned.
         .                   // The caller must guarantee that the actual transmutation is safe.
        12 ( 0.00%)          unsafe { ptr::read(src as *const T as *const U) }
         .               }
        12 ( 0.00%)  }
         .           
         .           /// Opaque type representing the discriminant of an enum.
         .           ///
         .           /// See the [`discriminant`] function in this module for more information.
         .           #[stable(feature = "discriminant_value", since = "1.21.0")]
         .           pub struct Discriminant<T>(<T as DiscriminantKind>::Discriminant);
         .           
         .           // N.B. These trait implementations cannot be derived because we don't want any bounds on T.
-- line 975 ----------------------------------------
-- line 991 ----------------------------------------
         .               }
         .           }
         .           
         .           #[stable(feature = "discriminant_value", since = "1.21.0")]
         .           impl<T> cmp::Eq for Discriminant<T> {}
         .           
         .           #[stable(feature = "discriminant_value", since = "1.21.0")]
         .           impl<T> hash::Hash for Discriminant<T> {
     7,210 ( 0.00%)      fn hash<H: hash::Hasher>(&self, state: &mut H) {
         .                   self.0.hash(state);
    12,300 ( 0.00%)      }
         .           }
         .           
         .           #[stable(feature = "discriminant_value", since = "1.21.0")]
         .           impl<T> fmt::Debug for Discriminant<T> {
         .               fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
         .                   fmt.debug_tuple("Discriminant").field(&self.0).finish()
         .               }
         .           }
-- line 1009 ----------------------------------------
-- line 1031 ----------------------------------------
         .           /// assert_eq!(mem::discriminant(&Foo::A("bar")), mem::discriminant(&Foo::A("baz")));
         .           /// assert_eq!(mem::discriminant(&Foo::B(1)), mem::discriminant(&Foo::B(2)));
         .           /// assert_ne!(mem::discriminant(&Foo::B(3)), mem::discriminant(&Foo::C(3)));
         .           /// ```
         .           #[stable(feature = "discriminant_value", since = "1.21.0")]
         .           #[rustc_const_unstable(feature = "const_discriminant", issue = "69821")]
         .           #[cfg_attr(not(test), rustc_diagnostic_item = "mem_discriminant")]
         .           pub const fn discriminant<T>(v: &T) -> Discriminant<T> {
   130,848 ( 0.00%)      Discriminant(intrinsics::discriminant_value(v))
         .           }
         .           
         .           /// Returns the number of variants in the enum type `T`.
         .           ///
         .           /// If `T` is not an enum, calling this function will not result in undefined behavior, but the
         .           /// return value is unspecified. Equally, if `T` is an enum with more variants than `usize::MAX`
         .           /// the return value is unspecified. Uninhabited variants will be counted.
         .           ///
-- line 1047 ----------------------------------------

 4,359,277 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/mem/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cmp.rs
--------------------------------------------------------------------------------
Ir                   

-- line 222 ----------------------------------------
          .               #[stable(feature = "rust1", since = "1.0.0")]
          .               fn eq(&self, other: &Rhs) -> bool;
          .           
          .               /// This method tests for `!=`.
          .               #[inline]
          .               #[must_use]
          .               #[stable(feature = "rust1", since = "1.0.0")]
          .               #[default_method_body_is_const]
    553,737 ( 0.00%)      fn ne(&self, other: &Rhs) -> bool {
    686,153 ( 0.00%)          !self.eq(other)
    738,316 ( 0.00%)      }
          .           }
          .           
          .           /// Derive macro generating an impl of the trait `PartialEq`.
          .           #[rustc_builtin_macro]
          .           #[stable(feature = "builtin_macro_prelude", since = "1.38.0")]
          .           #[allow_internal_unstable(core_intrinsics, structural_match)]
          .           pub macro PartialEq($item:item) {
          .               /* compiler built-in */
-- line 240 ----------------------------------------
-- line 328 ----------------------------------------
          .           /// assert_eq!(Ordering::Less, result);
          .           ///
          .           /// let result = 1.cmp(&1);
          .           /// assert_eq!(Ordering::Equal, result);
          .           ///
          .           /// let result = 2.cmp(&1);
          .           /// assert_eq!(Ordering::Greater, result);
          .           /// ```
    186,717 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Debug, Hash)]
          .           #[stable(feature = "rust1", since = "1.0.0")]
          .           #[repr(i8)]
          .           pub enum Ordering {
          .               /// An ordering where a compared value is less than another.
          .               #[stable(feature = "rust1", since = "1.0.0")]
          .               Less = -1,
          .               /// An ordering where a compared value is equal to another.
          .               #[stable(feature = "rust1", since = "1.0.0")]
-- line 344 ----------------------------------------
-- line 569 ----------------------------------------
          .               /// let result = x.0.cmp(&y.0).then_with(|| x.1.cmp(&y.1)).then_with(|| x.2.cmp(&y.2));
          .               ///
          .               /// assert_eq!(result, Ordering::Less);
          .               /// ```
          .               #[inline]
          .               #[must_use]
          .               #[stable(feature = "ordering_chaining", since = "1.17.0")]
          .               pub fn then_with<F: FnOnce() -> Ordering>(self, f: F) -> Ordering {
    203,083 ( 0.00%)          match self {
          .                       Equal => f(),
          .                       _ => self,
          .                   }
          .               }
          .           }
          .           
          .           /// A helper struct for reverse ordering.
          .           ///
-- line 585 ----------------------------------------
-- line 788 ----------------------------------------
          .               ///
          .               /// ```
          .               /// assert_eq!(2, 1.max(2));
          .               /// assert_eq!(2, 2.max(2));
          .               /// ```
          .               #[stable(feature = "ord_max_min", since = "1.21.0")]
          .               #[inline]
          .               #[must_use]
    829,602 ( 0.00%)      fn max(self, other: Self) -> Self
          .               where
          .                   Self: Sized,
          .               {
  1,420,780 ( 0.01%)          max_by(self, other, Ord::cmp)
    553,068 ( 0.00%)      }
          .           
          .               /// Compares and returns the minimum of two values.
          .               ///
          .               /// Returns the first argument if the comparison determines them to be equal.
          .               ///
          .               /// # Examples
          .               ///
          .               /// ```
-- line 809 ----------------------------------------
-- line 812 ----------------------------------------
          .               /// ```
          .               #[stable(feature = "ord_max_min", since = "1.21.0")]
          .               #[inline]
          .               #[must_use]
          .               fn min(self, other: Self) -> Self
          .               where
          .                   Self: Sized,
          .               {
     69,870 ( 0.00%)          min_by(self, other, Ord::cmp)
          .               }
          .           
          .               /// Restrict a value to a certain interval.
          .               ///
          .               /// Returns `max` if `self` is greater than `max`, and `min` if `self` is
          .               /// less than `min`. Otherwise this returns `self`.
          .               ///
          .               /// # Panics
-- line 828 ----------------------------------------
-- line 1097 ----------------------------------------
          .               /// let result = 2.0 < 1.0;
          .               /// assert_eq!(result, false);
          .               /// ```
          .               #[inline]
          .               #[must_use]
          .               #[stable(feature = "rust1", since = "1.0.0")]
          .               #[default_method_body_is_const]
          .               fn lt(&self, other: &Rhs) -> bool {
    330,274 ( 0.00%)          matches!(self.partial_cmp(other), Some(Less))
          .               }
          .           
          .               /// This method tests less than or equal to (for `self` and `other`) and is used by the `<=`
          .               /// operator.
          .               ///
          .               /// # Examples
          .               ///
          .               /// ```
-- line 1113 ----------------------------------------
-- line 1121 ----------------------------------------
          .               #[must_use]
          .               #[stable(feature = "rust1", since = "1.0.0")]
          .               #[default_method_body_is_const]
          .               fn le(&self, other: &Rhs) -> bool {
          .                   // Pattern `Some(Less | Eq)` optimizes worse than negating `None | Some(Greater)`.
          .                   // FIXME: The root cause was fixed upstream in LLVM with:
          .                   // https://github.com/llvm/llvm-project/commit/9bad7de9a3fb844f1ca2965f35d0c2a3d1e11775
          .                   // Revert this workaround once support for LLVM 12 gets dropped.
  3,631,931 ( 0.02%)          !matches!(self.partial_cmp(other), None | Some(Greater))
          .               }
          .           
          .               /// This method tests greater than (for `self` and `other`) and is used by the `>` operator.
          .               ///
          .               /// # Examples
          .               ///
          .               /// ```
          .               /// let result = 1.0 > 2.0;
-- line 1137 ----------------------------------------
-- line 1140 ----------------------------------------
          .               /// let result = 2.0 > 2.0;
          .               /// assert_eq!(result, false);
          .               /// ```
          .               #[inline]
          .               #[must_use]
          .               #[stable(feature = "rust1", since = "1.0.0")]
          .               #[default_method_body_is_const]
          .               fn gt(&self, other: &Rhs) -> bool {
  6,297,174 ( 0.03%)          matches!(self.partial_cmp(other), Some(Greater))
          .               }
          .           
          .               /// This method tests greater than or equal to (for `self` and `other`) and is used by the `>=`
          .               /// operator.
          .               ///
          .               /// # Examples
          .               ///
          .               /// ```
-- line 1156 ----------------------------------------
-- line 1159 ----------------------------------------
          .               ///
          .               /// let result = 2.0 >= 2.0;
          .               /// assert_eq!(result, true);
          .               /// ```
          .               #[inline]
          .               #[must_use]
          .               #[stable(feature = "rust1", since = "1.0.0")]
          .               #[default_method_body_is_const]
    107,376 ( 0.00%)      fn ge(&self, other: &Rhs) -> bool {
    503,003 ( 0.00%)          matches!(self.partial_cmp(other), Some(Greater | Equal))
    178,960 ( 0.00%)      }
          .           }
          .           
          .           /// Derive macro generating an impl of the trait `PartialOrd`.
          .           #[rustc_builtin_macro]
          .           #[stable(feature = "builtin_macro_prelude", since = "1.38.0")]
          .           #[allow_internal_unstable(core_intrinsics)]
          .           pub macro PartialOrd($item:item) {
          .               /* compiler built-in */
-- line 1177 ----------------------------------------
-- line 1210 ----------------------------------------
          .           ///
          .           /// assert_eq!(cmp::min_by(-2, 1, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), 1);
          .           /// assert_eq!(cmp::min_by(-2, 2, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), -2);
          .           /// ```
          .           #[inline]
          .           #[must_use]
          .           #[stable(feature = "cmp_min_max_by", since = "1.53.0")]
          .           pub fn min_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T {
  3,258,067 ( 0.02%)      match compare(&v1, &v2) {
          .                   Ordering::Less | Ordering::Equal => v1,
          .                   Ordering::Greater => v2,
          .               }
        732 ( 0.00%)  }
          .           
          .           /// Returns the element that gives the minimum value from the specified function.
          .           ///
          .           /// Returns the first argument if the comparison determines them to be equal.
          .           ///
          .           /// # Examples
          .           ///
          .           /// ```
-- line 1230 ----------------------------------------
-- line 1231 ----------------------------------------
          .           /// use std::cmp;
          .           ///
          .           /// assert_eq!(cmp::min_by_key(-2, 1, |x: &i32| x.abs()), 1);
          .           /// assert_eq!(cmp::min_by_key(-2, 2, |x: &i32| x.abs()), -2);
          .           /// ```
          .           #[inline]
          .           #[must_use]
          .           #[stable(feature = "cmp_min_max_by", since = "1.53.0")]
      4,392 ( 0.00%)  pub fn min_by_key<T, F: FnMut(&T) -> K, K: Ord>(v1: T, v2: T, mut f: F) -> T {
      2,928 ( 0.00%)      min_by(v1, v2, |v1, v2| f(v1).cmp(&f(v2)))
      2,928 ( 0.00%)  }
          .           
          .           /// Compares and returns the maximum of two values.
          .           ///
          .           /// Returns the second argument if the comparison determines them to be equal.
          .           ///
          .           /// Internally uses an alias to [`Ord::max`].
          .           ///
          .           /// # Examples
-- line 1249 ----------------------------------------
-- line 1253 ----------------------------------------
          .           ///
          .           /// assert_eq!(2, cmp::max(1, 2));
          .           /// assert_eq!(2, cmp::max(2, 2));
          .           /// ```
          .           #[inline]
          .           #[must_use]
          .           #[stable(feature = "rust1", since = "1.0.0")]
          .           #[cfg_attr(not(test), rustc_diagnostic_item = "cmp_max")]
    829,602 ( 0.00%)  pub fn max<T: Ord>(v1: T, v2: T) -> T {
    553,068 ( 0.00%)      v1.max(v2)
    553,068 ( 0.00%)  }
          .           
          .           /// Returns the maximum of two values with respect to the specified comparison function.
          .           ///
          .           /// Returns the second argument if the comparison determines them to be equal.
          .           ///
          .           /// # Examples
          .           ///
          .           /// ```
-- line 1271 ----------------------------------------
-- line 1272 ----------------------------------------
          .           /// use std::cmp;
          .           ///
          .           /// assert_eq!(cmp::max_by(-2, 1, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), -2);
          .           /// assert_eq!(cmp::max_by(-2, 2, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), 2);
          .           /// ```
          .           #[inline]
          .           #[must_use]
          .           #[stable(feature = "cmp_min_max_by", since = "1.53.0")]
    829,602 ( 0.00%)  pub fn max_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T {
  9,630,234 ( 0.05%)      match compare(&v1, &v2) {
    803,958 ( 0.00%)          Ordering::Less | Ordering::Equal => v2,
    264,471 ( 0.00%)          Ordering::Greater => v1,
          .               }
  2,300,429 ( 0.01%)  }
          .           
          .           /// Returns the element that gives the maximum value from the specified function.
          .           ///
          .           /// Returns the second argument if the comparison determines them to be equal.
          .           ///
          .           /// # Examples
          .           ///
          .           /// ```
-- line 1293 ----------------------------------------
-- line 1308 ----------------------------------------
          .               use crate::cmp::Ordering::{self, Equal, Greater, Less};
          .               use crate::hint::unreachable_unchecked;
          .           
          .               macro_rules! partial_eq_impl {
          .                   ($($t:ty)*) => ($(
          .                       #[stable(feature = "rust1", since = "1.0.0")]
          .                       impl PartialEq for $t {
          .                           #[inline]
    472,591 ( 0.00%)                  fn eq(&self, other: &$t) -> bool { (*self) == (*other) }
          .                           #[inline]
     95,985 ( 0.00%)                  fn ne(&self, other: &$t) -> bool { (*self) != (*other) }
          .                       }
          .                   )*)
          .               }
          .           
          .               #[stable(feature = "rust1", since = "1.0.0")]
          .               impl PartialEq for () {
          .                   #[inline]
          .                   fn eq(&self, _other: &()) -> bool {
-- line 1326 ----------------------------------------
-- line 1392 ----------------------------------------
          .                   ($($t:ty)*) => ($(
          .                       #[stable(feature = "rust1", since = "1.0.0")]
          .                       impl PartialOrd for $t {
          .                           #[inline]
          .                           fn partial_cmp(&self, other: &$t) -> Option<Ordering> {
          .                               Some(self.cmp(other))
          .                           }
          .                           #[inline]
 27,555,638 ( 0.14%)                  fn lt(&self, other: &$t) -> bool { (*self) < (*other) }
          .                           #[inline]
    570,952 ( 0.00%)                  fn le(&self, other: &$t) -> bool { (*self) <= (*other) }
          .                           #[inline]
          .                           fn ge(&self, other: &$t) -> bool { (*self) >= (*other) }
          .                           #[inline]
          .                           fn gt(&self, other: &$t) -> bool { (*self) > (*other) }
          .                       }
          .           
          .                       #[stable(feature = "rust1", since = "1.0.0")]
          .                       impl Ord for $t {
          .                           #[inline]
  1,561,630 ( 0.01%)                  fn cmp(&self, other: &$t) -> Ordering {
          .                               // The order here is important to generate more optimal assembly.
          .                               // See <https://github.com/rust-lang/rust/issues/63758> for more info.
186,118,097 ( 0.96%)                      if *self < *other { Less }
    622,247 ( 0.00%)                      else if *self == *other { Equal }
    123,259 ( 0.00%)                      else { Greater }
    936,978 ( 0.00%)                  }
          .                       }
          .                   )*)
          .               }
          .           
          .               #[stable(feature = "rust1", since = "1.0.0")]
          .               impl Ord for () {
          .                   #[inline]
          .                   fn cmp(&self, _other: &()) -> Ordering {
-- line 1426 ----------------------------------------
-- line 1430 ----------------------------------------
          .           
          .               #[stable(feature = "rust1", since = "1.0.0")]
          .               impl Ord for bool {
          .                   #[inline]
          .                   fn cmp(&self, other: &bool) -> Ordering {
          .                       // Casting to i8's and converting the difference to an Ordering generates
          .                       // more optimal assembly.
          .                       // See <https://github.com/rust-lang/rust/issues/66780> for more info.
     15,780 ( 0.00%)              match (*self as i8) - (*other as i8) {
          .                           -1 => Less,
          .                           0 => Equal,
          .                           1 => Greater,
          .                           // SAFETY: bool as i8 returns 0 or 1, so the difference can't be anything else
          .                           _ => unsafe { unreachable_unchecked() },
          .                       }
          .                   }
          .               }
-- line 1446 ----------------------------------------
-- line 1474 ----------------------------------------
          .               // & pointers
          .           
          .               #[stable(feature = "rust1", since = "1.0.0")]
          .               impl<A: ?Sized, B: ?Sized> PartialEq<&B> for &A
          .               where
          .                   A: PartialEq<B>,
          .               {
          .                   #[inline]
 11,811,011 ( 0.06%)          fn eq(&self, other: &&B) -> bool {
 24,109,873 ( 0.12%)              PartialEq::eq(*self, *other)
 10,393,600 ( 0.05%)          }
          .                   #[inline]
          .                   fn ne(&self, other: &&B) -> bool {
        300 ( 0.00%)              PartialEq::ne(*self, *other)
    567,945 ( 0.00%)          }
          .               }
          .               #[stable(feature = "rust1", since = "1.0.0")]
          .               impl<A: ?Sized, B: ?Sized> PartialOrd<&B> for &A
          .               where
          .                   A: PartialOrd<B>,
          .               {
          .                   #[inline]
          .                   fn partial_cmp(&self, other: &&B) -> Option<Ordering> {
-- line 1496 ----------------------------------------
-- line 1516 ----------------------------------------
          .               #[stable(feature = "rust1", since = "1.0.0")]
          .               impl<A: ?Sized> Ord for &A
          .               where
          .                   A: Ord,
          .               {
          .                   #[inline]
          .                   fn cmp(&self, other: &Self) -> Ordering {
          .                       Ord::cmp(*self, *other)
     59,577 ( 0.00%)          }
          .               }
          .               #[stable(feature = "rust1", since = "1.0.0")]
          .               impl<A: ?Sized> Eq for &A where A: Eq {}
          .           
          .               // &mut pointers
          .           
          .               #[stable(feature = "rust1", since = "1.0.0")]
          .               impl<A: ?Sized, B: ?Sized> PartialEq<&mut B> for &mut A
-- line 1532 ----------------------------------------
-- line 1597 ----------------------------------------
          .               }
          .           
          .               #[stable(feature = "rust1", since = "1.0.0")]
          .               impl<A: ?Sized, B: ?Sized> PartialEq<&B> for &mut A
          .               where
          .                   A: PartialEq<B>,
          .               {
          .                   #[inline]
     22,760 ( 0.00%)          fn eq(&self, other: &&B) -> bool {
     28,450 ( 0.00%)              PartialEq::eq(*self, *other)
     22,760 ( 0.00%)          }
          .                   #[inline]
          .                   fn ne(&self, other: &&B) -> bool {
          .                       PartialEq::ne(*self, *other)
          .                   }
          .               }
          .           }

 23,650,875 ( 0.12%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cmp.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs
--------------------------------------------------------------------------------
Ir                  

-- line 108 ----------------------------------------
         .                   suppress_errors: bool,
         .               },
         .           }
         .           
         .           impl RegionckMode {
         .               /// Indicates that the MIR borrowck will repeat these region
         .               /// checks, so we should ignore errors if NLL is (unconditionally)
         .               /// enabled.
     2,579 ( 0.00%)      pub fn for_item_body(tcx: TyCtxt<'_>) -> Self {
         .                   // FIXME(Centril): Once we actually remove `::Migrate` also make
         .                   // this always `true` and then proceed to eliminate the dead code.
     2,579 ( 0.00%)          match tcx.borrowck_mode() {
         .                       // If we're on Migrate mode, report AST region errors
         .                       BorrowckMode::Migrate => RegionckMode::Erase { suppress_errors: false },
         .           
         .                       // If we're on MIR, don't report AST region errors as they should be reported by NLL
         .                       BorrowckMode::Mir => RegionckMode::Erase { suppress_errors: true },
         .                   }
     5,158 ( 0.00%)      }
         .           }
         .           
         .           /// This type contains all the things within `InferCtxt` that sit within a
         .           /// `RefCell` and are involved with taking/rolling back snapshots. Snapshot
         .           /// operations are hot enough that we want only one call to `borrow_mut` per
         .           /// call to `start_snapshot` and `rollback_to`.
         .           pub struct InferCtxtInner<'tcx> {
         .               /// Cache for projections. This cache is snapshotted along with the infcx.
-- line 134 ----------------------------------------
-- line 202 ----------------------------------------
         .               /// type instantiations (`ty::Infer`) to the actual opaque
         .               /// type (`ty::Opaque`). Used during fallback to map unconstrained
         .               /// opaque type inference variables to their corresponding
         .               /// opaque type.
         .               pub opaque_types_vars: FxHashMap<Ty<'tcx>, Ty<'tcx>>,
         .           }
         .           
         .           impl<'tcx> InferCtxtInner<'tcx> {
   395,275 ( 0.00%)      fn new() -> InferCtxtInner<'tcx> {
 2,687,870 ( 0.01%)          InferCtxtInner {
         .                       projection_cache: Default::default(),
         .                       type_variable_storage: type_variable::TypeVariableStorage::new(),
         .                       undo_log: InferCtxtUndoLogs::default(),
         .                       const_unification_storage: ut::UnificationTableStorage::new(),
         .                       int_unification_storage: ut::UnificationTableStorage::new(),
         .                       float_unification_storage: ut::UnificationTableStorage::new(),
   237,165 ( 0.00%)              region_constraint_storage: Some(RegionConstraintStorage::new()),
         .                       region_obligations: vec![],
         .                       opaque_types: Default::default(),
         .                       opaque_types_vars: Default::default(),
         .                   }
   474,330 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn region_obligations(&self) -> &[(hir::HirId, RegionObligation<'tcx>)] {
         .                   &self.region_obligations
         .               }
         .           
         .               #[inline]
         .               pub fn projection_cache(&mut self) -> traits::ProjectionCache<'_, 'tcx> {
    21,681 ( 0.00%)          self.projection_cache.with_log(&mut self.undo_log)
         .               }
         .           
         .               #[inline]
         .               fn type_variables(&mut self) -> type_variable::TypeVariableTable<'_, 'tcx> {
 3,184,265 ( 0.02%)          self.type_variable_storage.with_log(&mut self.undo_log)
         .               }
         .           
         .               #[inline]
         .               fn int_unification_table(
         .                   &mut self,
         .               ) -> ut::UnificationTable<
         .                   ut::InPlace<
         .                       ty::IntVid,
-- line 245 ----------------------------------------
-- line 268 ----------------------------------------
         .                   &mut self,
         .               ) -> ut::UnificationTable<
         .                   ut::InPlace<
         .                       ty::ConstVid<'tcx>,
         .                       &mut ut::UnificationStorage<ty::ConstVid<'tcx>>,
         .                       &mut InferCtxtUndoLogs<'tcx>,
         .                   >,
         .               > {
    11,872 ( 0.00%)          self.const_unification_storage.with_log(&mut self.undo_log)
         .               }
         .           
         .               #[inline]
         .               pub fn unwrap_region_constraints(&mut self) -> RegionConstraintCollector<'_, 'tcx> {
   656,695 ( 0.00%)          self.region_constraint_storage
         .                       .as_mut()
         .                       .expect("region constraints already solved")
   842,839 ( 0.00%)              .with_log(&mut self.undo_log)
         .               }
         .           }
         .           
         .           pub struct InferCtxt<'a, 'tcx> {
         .               pub tcx: TyCtxt<'tcx>,
         .           
         .               /// The `DefId` of the item in whose context we are performing inference or typeck.
         .               /// It is used to check whether an opaque type use is a defining use.
-- line 292 ----------------------------------------
-- line 361 ----------------------------------------
         .               /// item we are type-checking, and just consider those names as
         .               /// part of the root universe. So this would only get incremented
         .               /// when we enter into a higher-ranked (`for<..>`) type or trait
         .               /// bound.
         .               universe: Cell<ty::UniverseIndex>,
         .           }
         .           
         .           /// See the `error_reporting` module for more details.
 1,062,048 ( 0.01%)  #[derive(Clone, Copy, Debug, PartialEq, Eq, TypeFoldable)]
         .           pub enum ValuePairs<'tcx> {
         .               Types(ExpectedFound<Ty<'tcx>>),
         .               Regions(ExpectedFound<ty::Region<'tcx>>),
         .               Consts(ExpectedFound<&'tcx ty::Const<'tcx>>),
         .               TraitRefs(ExpectedFound<ty::TraitRef<'tcx>>),
         .               PolyTraitRefs(ExpectedFound<ty::PolyTraitRef<'tcx>>),
         .           }
         .           
-- line 377 ----------------------------------------
-- line 383 ----------------------------------------
         .           pub struct TypeTrace<'tcx> {
         .               cause: ObligationCause<'tcx>,
         .               values: ValuePairs<'tcx>,
         .           }
         .           
         .           /// The origin of a `r1 <= r2` constraint.
         .           ///
         .           /// See `error_reporting` module for more details
   963,816 ( 0.00%)  #[derive(Clone, Debug)]
         .           pub enum SubregionOrigin<'tcx> {
         .               /// Arose from a subtyping relation
    51,854 ( 0.00%)      Subtype(Box<TypeTrace<'tcx>>),
         .           
         .               /// When casting `&'a T` to an `&'b Trait` object,
         .               /// relating `'a` to `'b`
         .               RelateObjectBound(Span),
         .           
         .               /// Some type parameter was instantiated with the given type,
         .               /// and that type must outlive some region.
    12,055 ( 0.00%)      RelateParamBound(Span, Ty<'tcx>, Option<Span>),
         .           
         .               /// The given region parameter was instantiated with a region
         .               /// that must outlive some other region.
         .               RelateRegionParamBound(Span),
         .           
         .               /// Creating a pointer `b` to contents of another reference
         .               Reborrow(Span),
         .           
         .               /// Creating a pointer `b` to contents of an upvar
         .               ReborrowUpvar(Span, ty::UpvarId),
         .           
         .               /// Data with type `Ty<'tcx>` was borrowed
     9,544 ( 0.00%)      DataBorrowed(Ty<'tcx>, Span),
         .           
         .               /// (&'a &'b T) where a >= b
     8,379 ( 0.00%)      ReferenceOutlivesReferent(Ty<'tcx>, Span),
         .           
         .               /// Comparing the signature and requirements of an impl method against
         .               /// the containing trait.
         .               CompareImplMethodObligation { span: Span, impl_item_def_id: DefId, trait_item_def_id: DefId },
         .           
         .               /// Comparing the signature and requirements of an impl associated type
         .               /// against the containing trait
         .               CompareImplTypeObligation { span: Span, impl_item_def_id: DefId, trait_item_def_id: DefId },
-- line 426 ----------------------------------------
-- line 554 ----------------------------------------
         .               defining_use_anchor: Option<LocalDefId>,
         .           }
         .           
         .           pub trait TyCtxtInferExt<'tcx> {
         .               fn infer_ctxt(self) -> InferCtxtBuilder<'tcx>;
         .           }
         .           
         .           impl<'tcx> TyCtxtInferExt<'tcx> for TyCtxt<'tcx> {
    79,055 ( 0.00%)      fn infer_ctxt(self) -> InferCtxtBuilder<'tcx> {
   237,165 ( 0.00%)          InferCtxtBuilder { tcx: self, defining_use_anchor: None, fresh_typeck_results: None }
    79,055 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> InferCtxtBuilder<'tcx> {
         .               /// Used only by `rustc_typeck` during body type-checking/inference,
         .               /// will initialize `in_progress_typeck_results` with fresh `TypeckResults`.
         .               /// Will also change the scope for opaque type defining use checks to the given owner.
    79,137 ( 0.00%)      pub fn with_fresh_in_progress_typeck_results(mut self, table_owner: LocalDefId) -> Self {
    96,723 ( 0.00%)          self.fresh_typeck_results = Some(RefCell::new(ty::TypeckResults::new(table_owner)));
    43,965 ( 0.00%)          self.with_opaque_type_inference(table_owner)
    61,551 ( 0.00%)      }
         .           
         .               /// Whenever the `InferCtxt` should be able to handle defining uses of opaque types,
         .               /// you need to call this function. Otherwise the opaque type will be treated opaquely.
         .               ///
         .               /// It is only meant to be called in two places, for typeck
         .               /// (via `with_fresh_in_progress_typeck_results`) and for the inference context used
         .               /// in mir borrowck.
     5,786 ( 0.00%)      pub fn with_opaque_type_inference(mut self, defining_use_anchor: LocalDefId) -> Self {
     2,893 ( 0.00%)          self.defining_use_anchor = Some(defining_use_anchor);
    23,372 ( 0.00%)          self
     8,679 ( 0.00%)      }
         .           
         .               /// Given a canonical value `C` as a starting point, create an
         .               /// inference context that contains each of the bound values
         .               /// within instantiated as a fresh variable. The `f` closure is
         .               /// invoked with the new infcx, along with the instantiated value
         .               /// `V` and a substitution `S`. This substitution `S` maps from
         .               /// the bound values in `C` to their instantiated values in `V`
         .               /// (in other words, `S(C) = V`).
   157,943 ( 0.00%)      pub fn enter_with_canonical<T, R>(
         .                   &mut self,
         .                   span: Span,
         .                   canonical: &Canonical<'tcx, T>,
         .                   f: impl for<'a> FnOnce(InferCtxt<'a, 'tcx>, T, CanonicalVarValues<'tcx>) -> R,
         .               ) -> R
         .               where
         .                   T: TypeFoldable<'tcx>,
         .               {
         .                   self.enter(|infcx| {
   214,264 ( 0.00%)              let (value, subst) =
    13,886 ( 0.00%)                  infcx.instantiate_canonical_with_fresh_inference_vars(span, canonical);
   310,920 ( 0.00%)              f(infcx, value, subst)
         .                   })
   172,400 ( 0.00%)      }
         .           
   388,347 ( 0.00%)      pub fn enter<R>(&mut self, f: impl for<'a> FnOnce(InferCtxt<'a, 'tcx>) -> R) -> R {
   227,054 ( 0.00%)          let InferCtxtBuilder { tcx, defining_use_anchor, ref fresh_typeck_results } = *self;
         .                   let in_progress_typeck_results = fresh_typeck_results.as_ref();
 3,345,776 ( 0.02%)          f(InferCtxt {
         .                       tcx,
         .                       defining_use_anchor,
         .                       in_progress_typeck_results,
    79,055 ( 0.00%)              inner: RefCell::new(InferCtxtInner::new()),
         .                       lexical_region_resolutions: RefCell::new(None),
         .                       selection_cache: Default::default(),
         .                       evaluation_cache: Default::default(),
         .                       reported_trait_errors: Default::default(),
         .                       reported_closure_mismatch: Default::default(),
         .                       tainted_by_errors_flag: Cell::new(false),
    79,055 ( 0.00%)              err_count_on_creation: tcx.sess.err_count(),
         .                       in_snapshot: Cell::new(false),
         .                       skip_leak_check: Cell::new(false),
         .                       universe: Cell::new(ty::UniverseIndex::ROOT),
         .                   })
   421,700 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx, T> InferOk<'tcx, T> {
         .               pub fn unit(self) -> InferOk<'tcx, ()> {
         .                   InferOk { value: (), obligations: self.obligations }
         .               }
         .           
         .               /// Extracts `value`, registering any obligations into `fulfill_cx`.
         .               pub fn into_value_registering_obligations(
         .                   self,
         .                   infcx: &InferCtxt<'_, 'tcx>,
         .                   fulfill_cx: &mut dyn TraitEngine<'tcx>,
         .               ) -> T {
     7,670 ( 0.00%)          let InferOk { value, obligations } = self;
    28,102 ( 0.00%)          for obligation in obligations {
         .                       fulfill_cx.register_predicate_obligation(infcx, obligation);
         .                   }
         .                   value
         .               }
         .           }
         .           
         .           impl<'tcx> InferOk<'tcx, ()> {
   104,588 ( 0.00%)      pub fn into_obligations(self) -> PredicateObligations<'tcx> {
   418,352 ( 0.00%)          self.obligations
   104,588 ( 0.00%)      }
         .           }
         .           
         .           #[must_use = "once you start a snapshot, you should always consume it"]
         .           pub struct CombinedSnapshot<'a, 'tcx> {
         .               undo_snapshot: Snapshot<'tcx>,
         .               region_constraints_snapshot: RegionSnapshot,
         .               universe: ty::UniverseIndex,
         .               was_in_snapshot: bool,
-- line 662 ----------------------------------------
-- line 674 ----------------------------------------
         .                   let canonical = self.canonicalize_query((a, b), &mut OriginalQueryValues::default());
         .                   debug!("canonical consts: {:?}", &canonical.value);
         .           
         .                   self.tcx.try_unify_abstract_consts(canonical.value)
         .               }
         .           
         .               pub fn is_in_snapshot(&self) -> bool {
         .                   self.in_snapshot.get()
   166,847 ( 0.00%)      }
         .           
 1,455,752 ( 0.01%)      pub fn freshen<T: TypeFoldable<'tcx>>(&self, t: T) -> T {
 1,637,721 ( 0.01%)          t.fold_with(&mut self.freshener())
 1,637,721 ( 0.01%)      }
         .           
         .               /// Returns the origin of the type variable identified by `vid`, or `None`
         .               /// if this is not a type variable.
         .               ///
         .               /// No attempt is made to resolve `ty`.
     2,358 ( 0.00%)      pub fn type_var_origin(&'a self, ty: Ty<'tcx>) -> Option<TypeVariableOrigin> {
     4,716 ( 0.00%)          match *ty.kind() {
     1,179 ( 0.00%)              ty::Infer(ty::TyVar(vid)) => {
     4,716 ( 0.00%)                  Some(*self.inner.borrow_mut().type_variables().var_origin(vid))
         .                       }
         .                       _ => None,
         .                   }
     4,716 ( 0.00%)      }
         .           
   181,969 ( 0.00%)      pub fn freshener<'b>(&'b self) -> TypeFreshener<'b, 'tcx> {
         .                   freshen::TypeFreshener::new(self, false)
   181,969 ( 0.00%)      }
         .           
         .               /// Like `freshener`, but does not replace `'static` regions.
   537,393 ( 0.00%)      pub fn freshener_keep_static<'b>(&'b self) -> TypeFreshener<'b, 'tcx> {
         .                   freshen::TypeFreshener::new(self, true)
   537,393 ( 0.00%)      }
         .           
    11,332 ( 0.00%)      pub fn unsolved_variables(&self) -> Vec<Ty<'tcx>> {
     5,666 ( 0.00%)          let mut inner = self.inner.borrow_mut();
     5,666 ( 0.00%)          let mut vars: Vec<Ty<'_>> = inner
         .                       .type_variables()
         .                       .unsolved_variables()
         .                       .into_iter()
     2,358 ( 0.00%)              .map(|t| self.tcx.mk_ty_var(t))
         .                       .collect();
         .                   vars.extend(
         .                       (0..inner.int_unification_table().len())
         .                           .map(|i| ty::IntVid { index: i as u32 })
         .                           .filter(|&vid| inner.int_unification_table().probe_value(vid).is_none())
         .                           .map(|v| self.tcx.mk_int_var(v)),
         .                   );
         .                   vars.extend(
         .                       (0..inner.float_unification_table().len())
         .                           .map(|i| ty::FloatVid { index: i as u32 })
         .                           .filter(|&vid| inner.float_unification_table().probe_value(vid).is_none())
         .                           .map(|v| self.tcx.mk_float_var(v)),
         .                   );
         .                   vars
    19,831 ( 0.00%)      }
         .           
   277,341 ( 0.00%)      fn combine_fields(
         .                   &'a self,
         .                   trace: TypeTrace<'tcx>,
         .                   param_env: ty::ParamEnv<'tcx>,
         .               ) -> CombineFields<'a, 'tcx> {
 1,111,124 ( 0.01%)          CombineFields {
         .                       infcx: self,
 2,777,810 ( 0.01%)              trace,
         .                       cause: None,
         .                       param_env,
         .                       obligations: PredicateObligations::new(),
         .                   }
   277,341 ( 0.00%)      }
         .           
         .               /// Clear the "currently in a snapshot" flag, invoke the closure,
         .               /// then restore the flag to its original value. This flag is a
         .               /// debugging measure designed to detect cases where we start a
         .               /// snapshot, create type variables, and register obligations
         .               /// which may involve those type variables in the fulfillment cx,
         .               /// potentially leaving "dangling type variables" behind.
         .               /// In such cases, an assertion will fail when attempting to
-- line 753 ----------------------------------------
-- line 755 ----------------------------------------
         .               /// better than grovelling through megabytes of `RUSTC_LOG` output.
         .               ///
         .               /// HOWEVER, in some cases the flag is unhelpful. In particular, we
         .               /// sometimes create a "mini-fulfilment-cx" in which we enroll
         .               /// obligations. As long as this fulfillment cx is fully drained
         .               /// before we return, this is not a problem, as there won't be any
         .               /// escaping obligations in the main cx. In those cases, you can
         .               /// use this function.
         8 ( 0.00%)      pub fn save_and_restore_in_snapshot_flag<F, R>(&self, func: F) -> R
         .               where
         .                   F: FnOnce(&Self) -> R,
         .               {
         .                   let flag = self.in_snapshot.replace(false);
    69,435 ( 0.00%)          let result = func(self);
         .                   self.in_snapshot.set(flag);
         .                   result
         9 ( 0.00%)      }
         .           
 1,712,038 ( 0.01%)      fn start_snapshot(&self) -> CombinedSnapshot<'a, 'tcx> {
         .                   debug!("start_snapshot()");
         .           
         .                   let in_snapshot = self.in_snapshot.replace(true);
         .           
         .                   let mut inner = self.inner.borrow_mut();
         .           
 5,136,114 ( 0.03%)          CombinedSnapshot {
         .                       undo_snapshot: inner.undo_log.start_snapshot(),
         .                       region_constraints_snapshot: inner.unwrap_region_constraints().start_snapshot(),
         .                       universe: self.universe(),
         .                       was_in_snapshot: in_snapshot,
         .                       // Borrow typeck results "in progress" (i.e., during typeck)
         .                       // to ban writes from within a snapshot to them.
   856,019 ( 0.00%)              _in_progress_typeck_results: self
         .                           .in_progress_typeck_results
         .                           .map(|typeck_results| typeck_results.borrow()),
         .                   }
 3,424,076 ( 0.02%)      }
         .           
 2,737,955 ( 0.01%)      #[instrument(skip(self, snapshot), level = "debug")]
         .               fn rollback_to(&self, cause: &str, snapshot: CombinedSnapshot<'a, 'tcx>) {
         .                   let CombinedSnapshot {
   248,905 ( 0.00%)              undo_snapshot,
   248,905 ( 0.00%)              region_constraints_snapshot,
   248,905 ( 0.00%)              universe,
   248,905 ( 0.00%)              was_in_snapshot,
   497,810 ( 0.00%)              _in_progress_typeck_results,
         .                   } = snapshot;
         .           
         .                   self.in_snapshot.set(was_in_snapshot);
         .                   self.universe.set(universe);
         .           
         .                   let mut inner = self.inner.borrow_mut();
   248,905 ( 0.00%)          inner.rollback_to(undo_snapshot);
         .                   inner.unwrap_region_constraints().rollback_to(region_constraints_snapshot);
         .               }
         .           
 9,106,710 ( 0.05%)      #[instrument(skip(self, snapshot), level = "debug")]
         .               fn commit_from(&self, snapshot: CombinedSnapshot<'a, 'tcx>) {
         .                   let CombinedSnapshot {
   607,114 ( 0.00%)              undo_snapshot,
         .                       region_constraints_snapshot: _,
         .                       universe: _,
   607,114 ( 0.00%)              was_in_snapshot,
 1,214,228 ( 0.01%)              _in_progress_typeck_results,
         .                   } = snapshot;
         .           
         .                   self.in_snapshot.set(was_in_snapshot);
         .           
         .                   self.inner.borrow_mut().commit(undo_snapshot);
         .               }
         .           
         .               /// Executes `f` and commit the bindings.
 1,094,762 ( 0.01%)      #[instrument(skip(self, f), level = "debug")]
 1,412,741 ( 0.01%)      pub fn commit_unconditionally<R, F>(&self, f: F) -> R
         .               where
         .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
         .               {
   128,431 ( 0.00%)          let snapshot = self.start_snapshot();
   738,440 ( 0.00%)          let r = f(&snapshot);
   899,017 ( 0.00%)          self.commit_from(snapshot);
   675,657 ( 0.00%)          r
         .               }
         .           
         .               /// Execute `f` and commit the bindings if closure `f` returns `Ok(_)`.
 3,048,718 ( 0.02%)      #[instrument(skip(self, f), level = "debug")]
 3,758,949 ( 0.02%)      pub fn commit_if_ok<T, E, F>(&self, f: F) -> Result<T, E>
         .               where
         .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> Result<T, E>,
         .               {
   580,910 ( 0.00%)          let snapshot = self.start_snapshot();
 1,728,307 ( 0.01%)          let r = f(&snapshot);
         .                   debug!("commit_if_ok() -- r.is_ok() = {}", r.is_ok());
   582,090 ( 0.00%)          match r {
         .                       Ok(_) => {
 3,417,710 ( 0.02%)                  self.commit_from(snapshot);
         .                       }
         .                       Err(_) => {
   509,130 ( 0.00%)                  self.rollback_to("commit_if_ok -- error", snapshot);
         .                       }
         .                   }
 3,275,159 ( 0.02%)          r
         .               }
         .           
         .               /// Execute `f` then unroll any bindings it creates.
 1,373,422 ( 0.01%)      #[instrument(skip(self, f), level = "debug")]
 1,590,454 ( 0.01%)      pub fn probe<R, F>(&self, f: F) -> R
         .               where
         .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
         .               {
   387,886 ( 0.00%)          let snapshot = self.start_snapshot();
   606,487 ( 0.00%)          let r = f(&snapshot);
 1,787,895 ( 0.01%)          self.rollback_to("probe", snapshot);
   261,109 ( 0.00%)          r
         .               }
         .           
         .               /// If `should_skip` is true, then execute `f` then unroll any bindings it creates.
         .               #[instrument(skip(self, f), level = "debug")]
         .               pub fn probe_maybe_skip_leak_check<R, F>(&self, should_skip: bool, f: F) -> R
         .               where
         .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
         .               {
-- line 875 ----------------------------------------
-- line 884 ----------------------------------------
         .                   r
         .               }
         .           
         .               /// Scan the constraints produced since `snapshot` began and returns:
         .               ///
         .               /// - `None` -- if none of them involve "region outlives" constraints
         .               /// - `Some(true)` -- if there are `'a: 'b` constraints where `'a` or `'b` is a placeholder
         .               /// - `Some(false)` -- if there are `'a: 'b` constraints but none involve placeholders
   118,060 ( 0.00%)      pub fn region_constraints_added_in_snapshot(
         .                   &self,
         .                   snapshot: &CombinedSnapshot<'a, 'tcx>,
         .               ) -> Option<bool> {
   236,120 ( 0.00%)          self.inner
         .                       .borrow_mut()
         .                       .unwrap_region_constraints()
         .                       .region_constraints_added_in_snapshot(&snapshot.undo_snapshot)
   177,090 ( 0.00%)      }
         .           
         .               pub fn add_given(&self, sub: ty::Region<'tcx>, sup: ty::RegionVid) {
         .                   self.inner.borrow_mut().unwrap_region_constraints().add_given(sub, sup);
         .               }
         .           
     5,844 ( 0.00%)      pub fn can_sub<T>(&self, param_env: ty::ParamEnv<'tcx>, a: T, b: T) -> UnitResult<'tcx>
         .               where
         .                   T: at::ToTrace<'tcx>,
         .               {
         .                   let origin = &ObligationCause::dummy();
         .                   self.probe(|_| {
         .                       self.at(origin, param_env).sub(a, b).map(|InferOk { obligations: _, .. }| {
         .                           // Ignore obligations, since we are unrolling
         .                           // everything anyway.
         .                       })
         .                   })
     4,383 ( 0.00%)      }
         .           
    38,688 ( 0.00%)      pub fn can_eq<T>(&self, param_env: ty::ParamEnv<'tcx>, a: T, b: T) -> UnitResult<'tcx>
         .               where
         .                   T: at::ToTrace<'tcx>,
         .               {
         .                   let origin = &ObligationCause::dummy();
         .                   self.probe(|_| {
         .                       self.at(origin, param_env).eq(a, b).map(|InferOk { obligations: _, .. }| {
         .                           // Ignore obligations, since we are unrolling
         .                           // everything anyway.
         .                       })
         .                   })
    29,016 ( 0.00%)      }
         .           
   491,540 ( 0.00%)      #[instrument(skip(self), level = "debug")]
         .               pub fn sub_regions(
         .                   &self,
         .                   origin: SubregionOrigin<'tcx>,
         .                   a: ty::Region<'tcx>,
         .                   b: ty::Region<'tcx>,
         .               ) {
   442,386 ( 0.00%)          self.inner.borrow_mut().unwrap_region_constraints().make_subregion(origin, a, b);
         .               }
         .           
         .               /// Require that the region `r` be equal to one of the regions in
         .               /// the set `regions`.
         5 ( 0.00%)      #[instrument(skip(self), level = "debug")]
         .               pub fn member_constraint(
         .                   &self,
         .                   opaque_type_def_id: DefId,
         .                   definition_span: Span,
         .                   hidden_ty: Ty<'tcx>,
         .                   region: ty::Region<'tcx>,
         .                   in_regions: &Lrc<Vec<ty::Region<'tcx>>>,
         .               ) {
         5 ( 0.00%)          self.inner.borrow_mut().unwrap_region_constraints().member_constraint(
         .                       opaque_type_def_id,
         .                       definition_span,
         .                       hidden_ty,
         .                       region,
         .                       in_regions,
         .                   );
         .               }
         .           
-- line 961 ----------------------------------------
-- line 983 ----------------------------------------
         .                   let subtype_predicate = predicate.map_bound(|p| ty::SubtypePredicate {
         .                       a_is_expected: false, // when coercing from `a` to `b`, `b` is expected
         .                       a: p.a,
         .                       b: p.b,
         .                   });
         .                   self.subtype_predicate(cause, param_env, subtype_predicate)
         .               }
         .           
    40,848 ( 0.00%)      pub fn subtype_predicate(
         .                   &self,
         .                   cause: &ObligationCause<'tcx>,
         .                   param_env: ty::ParamEnv<'tcx>,
         .                   predicate: ty::PolySubtypePredicate<'tcx>,
         .               ) -> Option<InferResult<'tcx, ()>> {
         .                   // Check for two unresolved inference variables, in which case we can
         .                   // make no progress. This is partly a micro-optimization, but it's
         .                   // also an opportunity to "sub-unify" the variables. This isn't
-- line 999 ----------------------------------------
-- line 1002 ----------------------------------------
         .                   // earlier that they are sub-unified).
         .                   //
         .                   // Note that we can just skip the binders here because
         .                   // type variables can't (at present, at
         .                   // least) capture any of the things bound by this binder.
         .                   //
         .                   // Note that this sub here is not just for diagnostics - it has semantic
         .                   // effects as well.
     3,404 ( 0.00%)          let r_a = self.shallow_resolve(predicate.skip_binder().a);
     3,404 ( 0.00%)          let r_b = self.shallow_resolve(predicate.skip_binder().b);
    25,280 ( 0.00%)          match (r_a.kind(), r_b.kind()) {
     5,928 ( 0.00%)              (&ty::Infer(ty::TyVar(a_vid)), &ty::Infer(ty::TyVar(b_vid))) => {
         .                           self.inner.borrow_mut().type_variables().sub(a_vid, b_vid);
     5,928 ( 0.00%)                  return None;
         .                       }
         .                       _ => {}
         .                   }
         .           
         .                   Some(self.commit_if_ok(|_snapshot| {
       440 ( 0.00%)              let ty::SubtypePredicate { a_is_expected, a, b } =
         .                           self.replace_bound_vars_with_placeholders(predicate);
         .           
       880 ( 0.00%)              let ok = self.at(cause, param_env).sub_exp(a_is_expected, a, b)?;
         .           
         .                       Ok(ok.unit())
         .                   }))
    30,636 ( 0.00%)      }
         .           
   117,480 ( 0.00%)      pub fn region_outlives_predicate(
         .                   &self,
         .                   cause: &traits::ObligationCause<'tcx>,
         .                   predicate: ty::PolyRegionOutlivesPredicate<'tcx>,
         .               ) -> UnitResult<'tcx> {
         .                   self.commit_if_ok(|_snapshot| {
         .                       let ty::OutlivesPredicate(r_a, r_b) =
         .                           self.replace_bound_vars_with_placeholders(predicate);
         .                       let origin = SubregionOrigin::from_obligation_cause(cause, || {
         .                           RelateRegionParamBound(cause.span)
         .                       });
    97,900 ( 0.00%)              self.sub_regions(origin, r_b, r_a); // `b : a` ==> `a <= b`
         .                       Ok(())
         .                   })
    78,320 ( 0.00%)      }
         .           
         .               /// Number of type variables created so far.
       254 ( 0.00%)      pub fn num_ty_vars(&self) -> usize {
         .                   self.inner.borrow_mut().type_variables().num_vars()
       508 ( 0.00%)      }
         .           
   128,152 ( 0.00%)      pub fn next_ty_var_id(&self, origin: TypeVariableOrigin) -> TyVid {
   640,760 ( 0.00%)          self.inner.borrow_mut().type_variables().new_var(self.universe(), origin)
   192,228 ( 0.00%)      }
         .           
   117,882 ( 0.00%)      pub fn next_ty_var(&self, origin: TypeVariableOrigin) -> Ty<'tcx> {
   443,397 ( 0.00%)          self.tcx.mk_ty_var(self.next_ty_var_id(origin))
   176,823 ( 0.00%)      }
         .           
    10,910 ( 0.00%)      pub fn next_ty_var_in_universe(
         .                   &self,
         .                   origin: TypeVariableOrigin,
         .                   universe: ty::UniverseIndex,
         .               ) -> Ty<'tcx> {
    60,005 ( 0.00%)          let vid = self.inner.borrow_mut().type_variables().new_var(universe, origin);
     5,455 ( 0.00%)          self.tcx.mk_ty_var(vid)
    16,365 ( 0.00%)      }
         .           
         .               pub fn next_const_var(
         .                   &self,
         .                   ty: Ty<'tcx>,
         .                   origin: ConstVariableOrigin,
         .               ) -> &'tcx ty::Const<'tcx> {
         .                   self.tcx.mk_const_var(self.next_const_var_id(origin), ty)
         .               }
-- line 1074 ----------------------------------------
-- line 1108 ----------------------------------------
         .           
         .               pub fn next_float_var(&self) -> Ty<'tcx> {
         .                   self.tcx.mk_float_var(self.next_float_var_id())
         .               }
         .           
         .               /// Creates a fresh region variable with the next available index.
         .               /// The variable will be created in the maximum universe created
         .               /// thus far, allowing it to name any region created thus far.
    83,049 ( 0.00%)      pub fn next_region_var(&self, origin: RegionVariableOrigin) -> ty::Region<'tcx> {
 1,502,799 ( 0.01%)          self.next_region_var_in_universe(origin, self.universe())
   166,098 ( 0.00%)      }
         .           
         .               /// Creates a fresh region variable with the next available index
         .               /// in the given universe; typically, you can use
         .               /// `next_region_var` and just use the maximal universe.
   648,688 ( 0.00%)      pub fn next_region_var_in_universe(
         .                   &self,
         .                   origin: RegionVariableOrigin,
         .                   universe: ty::UniverseIndex,
         .               ) -> ty::Region<'tcx> {
         .                   let region_var =
 4,216,472 ( 0.02%)              self.inner.borrow_mut().unwrap_region_constraints().new_region_var(universe, origin);
 1,621,720 ( 0.01%)          self.tcx.mk_region(ty::ReVar(region_var))
   973,032 ( 0.00%)      }
         .           
         .               /// Return the universe that the region `r` was created in.  For
         .               /// most regions (e.g., `'static`, named regions from the user,
         .               /// etc) this is the root universe U0. For inference variables or
         .               /// placeholders, however, it will return the universe which which
         .               /// they are associated.
   101,068 ( 0.00%)      pub fn universe_of_region(&self, r: ty::Region<'tcx>) -> ty::UniverseIndex {
         .                   self.inner.borrow_mut().unwrap_region_constraints().universe(r)
   151,602 ( 0.00%)      }
         .           
         .               /// Number of region variables created so far.
    23,762 ( 0.00%)      pub fn num_region_vars(&self) -> usize {
         .                   self.inner.borrow_mut().unwrap_region_constraints().num_region_vars()
    35,643 ( 0.00%)      }
         .           
         .               /// Just a convenient wrapper of `next_region_var` for using during NLL.
   121,435 ( 0.00%)      pub fn next_nll_region_var(&self, origin: NllRegionVariableOrigin) -> ty::Region<'tcx> {
         .                   self.next_region_var(RegionVariableOrigin::Nll(origin))
   242,870 ( 0.00%)      }
         .           
         .               /// Just a convenient wrapper of `next_region_var` for using during NLL.
     2,827 ( 0.00%)      pub fn next_nll_region_var_in_universe(
         .                   &self,
         .                   origin: NllRegionVariableOrigin,
         .                   universe: ty::UniverseIndex,
         .               ) -> ty::Region<'tcx> {
    23,961 ( 0.00%)          self.next_region_var_in_universe(RegionVariableOrigin::Nll(origin), universe)
     5,654 ( 0.00%)      }
         .           
 1,093,808 ( 0.01%)      pub fn var_for_def(&self, span: Span, param: &ty::GenericParamDef) -> GenericArg<'tcx> {
   611,912 ( 0.00%)          match param.kind {
         .                       GenericParamDefKind::Lifetime => {
         .                           // Create a region inference variable for the given
         .                           // region parameter definition.
    35,859 ( 0.00%)                  self.next_region_var(EarlyBoundRegion(span, param.name)).into()
         .                       }
         .                       GenericParamDefKind::Type { .. } => {
         .                           // Create a type inference variable for the given
         .                           // type parameter definition. The substitutions are
         .                           // for actual parameters that may be referred to by
         .                           // the default of this type parameter, if it exists.
         .                           // e.g., `struct Foo<A, B, C = (A, B)>(...);` when
         .                           // used in a path such as `Foo::<T, U>::new()` will
         .                           // use an inference variable for `C` with `[T, U]`
         .                           // as the substitutions for the default, `(T, U)`.
   403,208 ( 0.00%)                  let ty_var_id = self.inner.borrow_mut().type_variables().new_var(
         .                               self.universe(),
   504,010 ( 0.00%)                      TypeVariableOrigin {
         .                                   kind: TypeVariableOriginKind::TypeParameterDefinition(
   100,802 ( 0.00%)                              param.name,
   100,802 ( 0.00%)                              Some(param.def_id),
         .                                   ),
         .                                   span,
         .                               },
         .                           );
         .           
   100,802 ( 0.00%)                  self.tcx.mk_ty_var(ty_var_id).into()
         .                       }
         .                       GenericParamDefKind::Const { .. } => {
         .                           let origin = ConstVariableOrigin {
         .                               kind: ConstVariableOriginKind::ConstParameterDefinition(
         .                                   param.name,
         .                                   param.def_id,
         .                               ),
         .                               span,
         .                           };
         .                           let const_var_id =
       715 ( 0.00%)                      self.inner.borrow_mut().const_unification_table().new_key(ConstVarValue {
         .                                   origin,
         .                                   val: ConstVariableValue::Unknown { universe: self.universe() },
         .                               });
        65 ( 0.00%)                  self.tcx.mk_const_var(const_var_id, self.tcx.type_of(param.def_id)).into()
         .                       }
         .                   }
       520 ( 0.00%)      }
         .           
         .               /// Given a set of generics defined on a type or impl, returns a substitution mapping each
         .               /// type/region parameter to a fresh inference variable.
   204,711 ( 0.00%)      pub fn fresh_substs_for_item(&self, span: Span, def_id: DefId) -> SubstsRef<'tcx> {
 1,038,342 ( 0.01%)          InternalSubsts::for_item(self.tcx, def_id, |param, _| self.var_for_def(span, param))
   136,474 ( 0.00%)      }
         .           
         .               /// Returns `true` if errors have been reported since this infcx was
         .               /// created. This is sometimes used as a heuristic to skip
         .               /// reporting errors that often occur as a result of earlier
         .               /// errors, but where it's hard to be 100% sure (e.g., unresolved
         .               /// inference variables, regionck errors).
     7,520 ( 0.00%)      pub fn is_tainted_by_errors(&self) -> bool {
         .                   debug!(
         .                       "is_tainted_by_errors(err_count={}, err_count_on_creation={}, \
         .                        tainted_by_errors_flag={})",
         .                       self.tcx.sess.err_count(),
         .                       self.err_count_on_creation,
         .                       self.tainted_by_errors_flag.get()
         .                   );
         .           
   192,850 ( 0.00%)          if self.tcx.sess.err_count() > self.err_count_on_creation {
         .                       return true; // errors reported since this infcx was made
         .                   }
         .                   self.tainted_by_errors_flag.get()
    11,280 ( 0.00%)      }
         .           
         .               /// Set the "tainted by errors" flag to true. We call this when we
         .               /// observe an error from a prior pass.
         .               pub fn set_tainted_by_errors(&self) {
         .                   debug!("set_tainted_by_errors()");
         .                   self.tainted_by_errors_flag.set(true)
         .               }
         .           
         .               /// Process the region constraints and return any any errors that
         .               /// result. After this, no more unification operations should be
         .               /// done -- or the compiler will panic -- but it is legal to use
         .               /// `resolve_vars_if_possible` as well as `fully_resolve`.
   194,285 ( 0.00%)      pub fn resolve_regions(
         .                   &self,
         .                   region_context: DefId,
         .                   outlives_env: &OutlivesEnvironment<'tcx>,
         .                   mode: RegionckMode,
         .               ) -> Vec<RegionResolutionError<'tcx>> {
   527,345 ( 0.00%)          let (var_infos, data) = {
         .                       let mut inner = self.inner.borrow_mut();
         .                       let inner = &mut *inner;
    27,755 ( 0.00%)              assert!(
    83,265 ( 0.00%)                  self.is_tainted_by_errors() || inner.region_obligations.is_empty(),
         .                           "region_obligations not empty: {:#?}",
         .                           inner.region_obligations
         .                       );
         .                       inner
         .                           .region_constraint_storage
         .                           .take()
         .                           .expect("regions already resolved")
         .                           .with_log(&mut inner.undo_log)
         .                           .into_infos_and_data()
    27,755 ( 0.00%)          };
         .           
         .                   let region_rels =
    27,755 ( 0.00%)              &RegionRelations::new(self.tcx, region_context, outlives_env.free_region_map());
         .           
   249,795 ( 0.00%)          let (lexical_region_resolutions, errors) =
   666,120 ( 0.00%)              lexical_region_resolve::resolve(region_rels, var_infos, data, mode);
         .           
   111,020 ( 0.00%)          let old_value = self.lexical_region_resolutions.replace(Some(lexical_region_resolutions));
    27,755 ( 0.00%)          assert!(old_value.is_none());
         .           
         .                   errors
   249,795 ( 0.00%)      }
         .           
         .               /// Process the region constraints and report any errors that
         .               /// result. After this, no more unification operations should be
         .               /// done -- or the compiler will panic -- but it is legal to use
         .               /// `resolve_vars_if_possible` as well as `fully_resolve`.
   277,550 ( 0.00%)      pub fn resolve_regions_and_report_errors(
         .                   &self,
         .                   region_context: DefId,
         .                   outlives_env: &OutlivesEnvironment<'tcx>,
         .                   mode: RegionckMode,
         .               ) {
    55,510 ( 0.00%)          let errors = self.resolve_regions(region_context, outlives_env, mode);
         .           
    83,265 ( 0.00%)          if !self.is_tainted_by_errors() {
         .                       // As a heuristic, just skip reporting region errors
         .                       // altogether if other errors have been reported while
         .                       // this infcx was in use.  This is totally hokey but
         .                       // otherwise we have a hard time separating legit region
         .                       // errors from silly ones.
    55,510 ( 0.00%)              self.report_region_errors(&errors);
         .                   }
   138,775 ( 0.00%)      }
         .           
         .               /// Obtains (and clears) the current set of region
         .               /// constraints. The inference context is still usable: further
         .               /// unifications will simply add new constraints.
         .               ///
         .               /// This method is not meant to be used with normal lexical region
         .               /// resolution. Rather, it is used in the NLL mode as a kind of
         .               /// interim hack: basically we run normal type-check and generate
         .               /// region constraints as normal, but then we take them and
         .               /// translate them into the form that the NLL solver
         .               /// understands. See the NLL module for mode details.
         6 ( 0.00%)      pub fn take_and_reset_region_constraints(&self) -> RegionConstraintData<'tcx> {
         2 ( 0.00%)          assert!(
         .                       self.inner.borrow().region_obligations.is_empty(),
         .                       "region_obligations not empty: {:#?}",
         .                       self.inner.borrow().region_obligations
         .                   );
         .           
         8 ( 0.00%)          self.inner.borrow_mut().unwrap_region_constraints().take_and_reset_data()
        10 ( 0.00%)      }
         .           
         .               /// Gives temporary access to the region constraint data.
         .               pub fn with_region_constraints<R>(
         .                   &self,
         .                   op: impl FnOnce(&RegionConstraintData<'tcx>) -> R,
         .               ) -> R {
         .                   let mut inner = self.inner.borrow_mut();
    66,552 ( 0.00%)          op(inner.unwrap_region_constraints().data())
         .               }
         .           
         .               pub fn region_var_origin(&self, vid: ty::RegionVid) -> RegionVariableOrigin {
         .                   let mut inner = self.inner.borrow_mut();
         .                   let inner = &mut *inner;
         .                   inner
         .                       .region_constraint_storage
         .                       .as_mut()
-- line 1335 ----------------------------------------
-- line 1338 ----------------------------------------
         .                       .var_origin(vid)
         .               }
         .           
         .               /// Takes ownership of the list of variable regions. This implies
         .               /// that all the region constraints have already been taken, and
         .               /// hence that `resolve_regions_and_report_errors` can never be
         .               /// called. This is used only during NLL processing to "hand off" ownership
         .               /// of the set of region variables into the NLL region context.
    14,460 ( 0.00%)      pub fn take_region_var_origins(&self) -> VarInfos {
         .                   let mut inner = self.inner.borrow_mut();
    54,948 ( 0.00%)          let (var_infos, data) = inner
         .                       .region_constraint_storage
         .                       .take()
         .                       .expect("regions already resolved")
         .                       .with_log(&mut inner.undo_log)
     2,892 ( 0.00%)              .into_infos_and_data();
     2,892 ( 0.00%)          assert!(data.is_empty());
         .                   var_infos
    23,136 ( 0.00%)      }
         .           
         .               pub fn ty_to_string(&self, t: Ty<'tcx>) -> String {
         .                   self.resolve_vars_if_possible(t).to_string()
         .               }
         .           
         .               /// If `TyVar(vid)` resolves to a type, return that type. Else, return the
         .               /// universe index of `TyVar(vid)`.
    60,036 ( 0.00%)      pub fn probe_ty_var(&self, vid: TyVid) -> Result<Ty<'tcx>, ty::UniverseIndex> {
         .                   use self::type_variable::TypeVariableValue;
         .           
   180,108 ( 0.00%)          match self.inner.borrow_mut().type_variables().probe(vid) {
         .                       TypeVariableValue::Known { value } => Ok(value),
         .                       TypeVariableValue::Unknown { universe } => Err(universe),
         .                   }
   210,126 ( 0.00%)      }
         .           
         .               /// Resolve any type variables found in `value` -- but only one
         .               /// level.  So, if the variable `?X` is bound to some type
         .               /// `Foo<?Y>`, then this would return `Foo<?Y>` (but `?Y` may
         .               /// itself be bound to a type).
         .               ///
         .               /// Useful when you only need to inspect the outermost level of
         .               /// the type and don't care about nested types (or perhaps you
         .               /// will be resolving them as well, e.g. in a loop).
         .               pub fn shallow_resolve<T>(&self, value: T) -> T
         .               where
         .                   T: TypeFoldable<'tcx>,
         .               {
 1,269,849 ( 0.01%)          value.fold_with(&mut ShallowResolver { infcx: self })
         .               }
         .           
    99,550 ( 0.00%)      pub fn root_var(&self, var: ty::TyVid) -> ty::TyVid {
         .                   self.inner.borrow_mut().type_variables().root_var(var)
   149,325 ( 0.00%)      }
         .           
         .               /// Where possible, replaces type/const variables in
         .               /// `value` with their final value. Note that region variables
         .               /// are unaffected. If a type/const variable has not been unified, it
         .               /// is left as is. This is an idempotent operation that does
         .               /// not affect inference state in any way and so you can do it
         .               /// at will.
       344 ( 0.00%)      pub fn resolve_vars_if_possible<T>(&self, value: T) -> T
         .               where
         .                   T: TypeFoldable<'tcx>,
         .               {
 1,519,161 ( 0.01%)          if !value.needs_infer() {
   876,962 ( 0.00%)              return value; // Avoid duplicated subst-folding.
         .                   }
 1,489,858 ( 0.01%)          let mut r = resolve::OpportunisticVarResolver::new(self);
 1,636,528 ( 0.01%)          value.fold_with(&mut r)
       430 ( 0.00%)      }
         .           
         .               /// Returns the first unresolved variable contained in `T`. In the
         .               /// process of visiting `T`, this will resolve (where possible)
         .               /// type variables in `T`, but it never constructs the final,
         .               /// resolved type, so it's more efficient than
         .               /// `resolve_vars_if_possible()`.
         .               pub fn unresolved_type_vars<T>(&self, value: &T) -> Option<(Ty<'tcx>, Option<Span>)>
         .               where
         .                   T: TypeFoldable<'tcx>,
         .               {
   107,028 ( 0.00%)          value.visit_with(&mut resolve::UnresolvedTypeFinder::new(self)).break_value()
         .               }
         .           
         .               pub fn probe_const_var(
         .                   &self,
         .                   vid: ty::ConstVid<'tcx>,
         .               ) -> Result<&'tcx ty::Const<'tcx>, ty::UniverseIndex> {
         .                   match self.inner.borrow_mut().const_unification_table().probe_value(vid).val {
         .                       ConstVariableValue::Known { value } => Ok(value),
-- line 1426 ----------------------------------------
-- line 1490 ----------------------------------------
         .                   expected: &'tcx ty::Const<'tcx>,
         .                   actual: &'tcx ty::Const<'tcx>,
         .                   err: TypeError<'tcx>,
         .               ) -> DiagnosticBuilder<'tcx> {
         .                   let trace = TypeTrace::consts(cause, true, expected, actual);
         .                   self.report_and_explain_type_error(trace, &err)
         .               }
         .           
   120,141 ( 0.00%)      pub fn replace_bound_vars_with_fresh_vars<T>(
         .                   &self,
         .                   span: Span,
         .                   lbrct: LateBoundRegionConversionTime,
         .                   value: ty::Binder<'tcx, T>,
         .               ) -> (T, BTreeMap<ty::BoundRegion, ty::Region<'tcx>>)
         .               where
         .                   T: TypeFoldable<'tcx>,
         .               {
         .                   let fld_r =
   877,766 ( 0.00%)              |br: ty::BoundRegion| self.next_region_var(LateBoundRegion(span, br.kind, lbrct));
         .                   let fld_t = |_| {
         .                       self.next_ty_var(TypeVariableOrigin {
         .                           kind: TypeVariableOriginKind::MiscVariable,
         .                           span,
         .                       })
         .                   };
         .                   let fld_c = |_, ty| {
         .                       self.next_const_var(
         .                           ty,
         .                           ConstVariableOrigin { kind: ConstVariableOriginKind::MiscVariable, span },
         .                       )
         .                   };
   834,428 ( 0.00%)          self.tcx.replace_bound_vars(value, fld_r, fld_t, fld_c)
    80,094 ( 0.00%)      }
         .           
         .               /// See the [`region_constraints::RegionConstraintCollector::verify_generic_bound`] method.
    33,344 ( 0.00%)      pub fn verify_generic_bound(
         .                   &self,
         .                   origin: SubregionOrigin<'tcx>,
         .                   kind: GenericKind<'tcx>,
         .                   a: ty::Region<'tcx>,
         .                   bound: VerifyBound<'tcx>,
         .               ) {
         .                   debug!("verify_generic_bound({:?}, {:?} <: {:?})", kind, a, bound);
         .           
    12,504 ( 0.00%)          self.inner
         .                       .borrow_mut()
         .                       .unwrap_region_constraints()
    70,856 ( 0.00%)              .verify_generic_bound(origin, kind, a, bound);
    29,176 ( 0.00%)      }
         .           
         .               /// Obtains the latest type of the given closure; this may be a
         .               /// closure in the current function, in which case its
         .               /// `ClosureKind` may not yet be known.
     2,712 ( 0.00%)      pub fn closure_kind(&self, closure_substs: SubstsRef<'tcx>) -> Option<ty::ClosureKind> {
     5,424 ( 0.00%)          let closure_kind_ty = closure_substs.as_closure().kind_ty();
         .                   let closure_kind_ty = self.shallow_resolve(closure_kind_ty);
     4,068 ( 0.00%)          closure_kind_ty.to_opt_closure_kind()
         .               }
         .           
         .               /// Clears the selection, evaluation, and projection caches. This is useful when
         .               /// repeatedly attempting to select an `Obligation` while changing only
         .               /// its `ParamEnv`, since `FulfillmentContext` doesn't use probing.
         .               pub fn clear_caches(&self) {
         .                   self.selection_cache.clear();
         .                   self.evaluation_cache.clear();
         .                   self.inner.borrow_mut().projection_cache().clear();
         .               }
         .           
         .               pub fn universe(&self) -> ty::UniverseIndex {
 2,435,237 ( 0.01%)          self.universe.get()
   857,877 ( 0.00%)      }
         .           
         .               /// Creates and return a fresh universe that extends all previous
         .               /// universes. Updates `self.universe` to that new universe.
    18,066 ( 0.00%)      pub fn create_next_universe(&self) -> ty::UniverseIndex {
    18,758 ( 0.00%)          let u = self.universe.get().next_universe();
         .                   self.universe.set(u);
         .                   u
    18,066 ( 0.00%)      }
         .           
         .               /// Resolves and evaluates a constant.
         .               ///
         .               /// The constant can be located on a trait like `<A as B>::C`, in which case the given
         .               /// substitutions and environment are used to resolve the constant. Alternatively if the
         .               /// constant has generic parameters in scope the substitutions are used to evaluate the value of
         .               /// the constant. For example in `fn foo<T>() { let _ = [0; bar::<T>()]; }` the repeat count
         .               /// constant `bar::<T>()` requires a substitution for `T`, if the substitution for `T` is still
-- line 1576 ----------------------------------------
-- line 1606 ----------------------------------------
         .                   // variables, thus we don't need to substitute back the original values.
         .                   self.tcx.const_eval_resolve(param_env_erased, unevaluated, span)
         .               }
         .           
         .               /// If `typ` is a type variable of some kind, resolve it one level
         .               /// (but do not resolve types found in the result). If `typ` is
         .               /// not a type variable, just return it unmodified.
         .               // FIXME(eddyb) inline into `ShallowResolver::visit_ty`.
15,025,856 ( 0.08%)      fn shallow_resolve_ty(&self, typ: Ty<'tcx>) -> Ty<'tcx> {
 8,025,659 ( 0.04%)          match *typ.kind() {
         .                       ty::Infer(ty::TyVar(v)) => {
         .                           // Not entirely obvious: if `typ` is a type variable,
         .                           // it can be resolved to an int/float variable, which
         .                           // can then be recursively resolved, hence the
         .                           // recursion. Note though that we prevent type
         .                           // variables from unifying to other type variables
         .                           // directly (though they may be embedded
         .                           // structurally), and we prevent cycles in any case,
         .                           // so this recursion should always be of very limited
         .                           // depth.
         .                           //
         .                           // Note: if these two lines are combined into one we get
         .                           // dynamic borrow errors on `self.inner`.
 4,163,512 ( 0.02%)                  let known = self.inner.borrow_mut().type_variables().probe(v).known();
         .                           known.map_or(typ, |t| self.shallow_resolve_ty(t))
         .                       }
         .           
         .                       ty::Infer(ty::IntVar(v)) => self
         .                           .inner
         .                           .borrow_mut()
         .                           .int_unification_table()
         .                           .probe_value(v)
-- line 1637 ----------------------------------------
-- line 1643 ----------------------------------------
         .                           .borrow_mut()
         .                           .float_unification_table()
         .                           .probe_value(v)
         .                           .map(|v| v.to_type(self.tcx))
         .                           .unwrap_or(typ),
         .           
         .                       _ => typ,
         .                   }
16,904,088 ( 0.09%)      }
         .           
         .               /// `ty_or_const_infer_var_changed` is equivalent to one of these two:
         .               ///   * `shallow_resolve(ty) != ty` (where `ty.kind = ty::Infer(_)`)
         .               ///   * `shallow_resolve(ct) != ct` (where `ct.kind = ty::ConstKind::Infer(_)`)
         .               ///
         .               /// However, `ty_or_const_infer_var_changed` is more efficient. It's always
         .               /// inlined, despite being large, because it has only two call sites that
         .               /// are extremely hot (both in `traits::fulfill`'s checking of `stalled_on`
-- line 1659 ----------------------------------------
-- line 1662 ----------------------------------------
         .               #[inline(always)]
         .               pub fn ty_or_const_infer_var_changed(&self, infer_var: TyOrConstInferVar<'tcx>) -> bool {
         .                   match infer_var {
         .                       TyOrConstInferVar::Ty(v) => {
         .                           use self::type_variable::TypeVariableValue;
         .           
         .                           // If `inlined_probe` returns a `Known` value, it never equals
         .                           // `ty::Infer(ty::TyVar(v))`.
 4,539,166 ( 0.02%)                  match self.inner.borrow_mut().type_variables().inlined_probe(v) {
         .                               TypeVariableValue::Unknown { .. } => false,
         .                               TypeVariableValue::Known { .. } => true,
         .                           }
         .                       }
         .           
         .                       TyOrConstInferVar::TyInt(v) => {
         .                           // If `inlined_probe_value` returns a value it's always a
         .                           // `ty::Int(_)` or `ty::UInt(_)`, which never matches a
-- line 1678 ----------------------------------------
-- line 1716 ----------------------------------------
         .               /// Equivalent to `ty::ConstKind::Infer(ty::InferConst::Var(_))`.
         .               Const(ConstVid<'tcx>),
         .           }
         .           
         .           impl<'tcx> TyOrConstInferVar<'tcx> {
         .               /// Tries to extract an inference variable from a type or a constant, returns `None`
         .               /// for types other than `ty::Infer(_)` (or `InferTy::Fresh*`) and
         .               /// for constants other than `ty::ConstKind::Infer(_)` (or `InferConst::Fresh`).
    46,168 ( 0.00%)      pub fn maybe_from_generic_arg(arg: GenericArg<'tcx>) -> Option<Self> {
         .                   match arg.unpack() {
         .                       GenericArgKind::Type(ty) => Self::maybe_from_ty(ty),
         .                       GenericArgKind::Const(ct) => Self::maybe_from_const(ct),
         .                       GenericArgKind::Lifetime(_) => None,
         .                   }
    46,168 ( 0.00%)      }
         .           
         .               /// Tries to extract an inference variable from a type, returns `None`
         .               /// for types other than `ty::Infer(_)` (or `InferTy::Fresh*`).
     5,922 ( 0.00%)      pub fn maybe_from_ty(ty: Ty<'tcx>) -> Option<Self> {
   464,162 ( 0.00%)          match *ty.kind() {
   102,852 ( 0.00%)              ty::Infer(ty::TyVar(v)) => Some(TyOrConstInferVar::Ty(v)),
         .                       ty::Infer(ty::IntVar(v)) => Some(TyOrConstInferVar::TyInt(v)),
         .                       ty::Infer(ty::FloatVar(v)) => Some(TyOrConstInferVar::TyFloat(v)),
         .                       _ => None,
         .                   }
     5,922 ( 0.00%)      }
         .           
         .               /// Tries to extract an inference variable from a constant, returns `None`
         .               /// for constants other than `ty::ConstKind::Infer(_)` (or `InferConst::Fresh`).
         .               pub fn maybe_from_const(ct: &'tcx ty::Const<'tcx>) -> Option<Self> {
         .                   match ct.val {
         .                       ty::ConstKind::Infer(InferConst::Var(v)) => Some(TyOrConstInferVar::Const(v)),
         .                       _ => None,
         .                   }
-- line 1749 ----------------------------------------
-- line 1755 ----------------------------------------
         .           }
         .           
         .           impl<'a, 'tcx> TypeFolder<'tcx> for ShallowResolver<'a, 'tcx> {
         .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
         .                   self.infcx.tcx
         .               }
         .           
         .               fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {
 2,839,029 ( 0.01%)          self.infcx.shallow_resolve_ty(ty)
         .               }
         .           
     4,436 ( 0.00%)      fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
     2,348 ( 0.00%)          if let ty::Const { val: ty::ConstKind::Infer(InferConst::Var(vid)), .. } = ct {
       325 ( 0.00%)              self.infcx
         .                           .inner
         .                           .borrow_mut()
         .                           .const_unification_table()
       195 ( 0.00%)                  .probe_value(*vid)
         .                           .val
         .                           .known()
         .                           .unwrap_or(ct)
         .                   } else {
         .                       ct
         .                   }
     5,545 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> TypeTrace<'tcx> {
         .               pub fn span(&self) -> Span {
        54 ( 0.00%)          self.cause.span
         .               }
         .           
         .               pub fn types(
         .                   cause: &ObligationCause<'tcx>,
         .                   a_is_expected: bool,
         .                   a: Ty<'tcx>,
         .                   b: Ty<'tcx>,
         .               ) -> TypeTrace<'tcx> {
-- line 1792 ----------------------------------------
-- line 1800 ----------------------------------------
         .                   b: &'tcx ty::Const<'tcx>,
         .               ) -> TypeTrace<'tcx> {
         .                   TypeTrace { cause: cause.clone(), values: Consts(ExpectedFound::new(a_is_expected, a, b)) }
         .               }
         .           }
         .           
         .           impl<'tcx> SubregionOrigin<'tcx> {
         .               pub fn span(&self) -> Span {
       135 ( 0.00%)          match *self {
        27 ( 0.00%)              Subtype(ref a) => a.span(),
         .                       RelateObjectBound(a) => a,
         .                       RelateParamBound(a, ..) => a,
         .                       RelateRegionParamBound(a) => a,
         .                       Reborrow(a) => a,
         .                       ReborrowUpvar(a, _) => a,
         .                       DataBorrowed(_, a) => a,
         .                       ReferenceOutlivesReferent(_, a) => a,
         .                       CompareImplMethodObligation { span, .. } => span,
-- line 1817 ----------------------------------------
-- line 1818 ----------------------------------------
         .                       CompareImplTypeObligation { span, .. } => span,
         .                   }
         .               }
         .           
         .               pub fn from_obligation_cause<F>(cause: &traits::ObligationCause<'tcx>, default: F) -> Self
         .               where
         .                   F: FnOnce() -> Self,
         .               {
   156,441 ( 0.00%)          match *cause.code() {
    25,395 ( 0.00%)              traits::ObligationCauseCode::ReferenceOutlivesReferent(ref_type) => {
   126,975 ( 0.00%)                  SubregionOrigin::ReferenceOutlivesReferent(ref_type, cause.span)
         .                       }
         .           
         .                       traits::ObligationCauseCode::CompareImplMethodObligation {
       288 ( 0.00%)                  impl_item_def_id,
       288 ( 0.00%)                  trait_item_def_id,
       288 ( 0.00%)              } => SubregionOrigin::CompareImplMethodObligation {
       288 ( 0.00%)                  span: cause.span,
         .                           impl_item_def_id,
         .                           trait_item_def_id,
         .                       },
         .           
         .                       traits::ObligationCauseCode::CompareImplTypeObligation {
         .                           impl_item_def_id,
         .                           trait_item_def_id,
         .                       } => SubregionOrigin::CompareImplTypeObligation {
-- line 1843 ----------------------------------------

13,589,972 ( 0.07%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/non_null.rs
--------------------------------------------------------------------------------
Ir                  

-- line 186 ----------------------------------------
         .               /// use std::ptr::NonNull;
         .               ///
         .               /// // NEVER DO THAT!!! This is undefined behavior. ⚠️
         .               /// let ptr = unsafe { NonNull::<u32>::new_unchecked(std::ptr::null_mut()) };
         .               /// ```
         .               #[stable(feature = "nonnull", since = "1.25.0")]
         .               #[rustc_const_stable(feature = "const_nonnull_new_unchecked", since = "1.25.0")]
         .               #[inline]
 6,482,684 ( 0.03%)      pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
         .                   // SAFETY: the caller must guarantee that `ptr` is non-null.
21,247,073 ( 0.11%)          unsafe { NonNull { pointer: ptr as _ } }
 9,569,018 ( 0.05%)      }
         .           
         .               /// Creates a new `NonNull` if `ptr` is non-null.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// use std::ptr::NonNull;
         .               ///
-- line 205 ----------------------------------------
-- line 207 ----------------------------------------
         .               /// let ptr = NonNull::<u32>::new(&mut x as *mut _).expect("ptr is null!");
         .               ///
         .               /// if let Some(ptr) = NonNull::<u32>::new(std::ptr::null_mut()) {
         .               ///     unreachable!();
         .               /// }
         .               /// ```
         .               #[stable(feature = "nonnull", since = "1.25.0")]
         .               #[inline]
   916,917 ( 0.00%)      pub fn new(ptr: *mut T) -> Option<Self> {
 1,528,195 ( 0.01%)          if !ptr.is_null() {
         .                       // SAFETY: The pointer is already checked and is not null
   916,917 ( 0.00%)              Some(unsafe { Self::new_unchecked(ptr) })
         .                   } else {
         .                       None
         .                   }
   916,917 ( 0.00%)      }
         .           
         .               /// Performs the same functionality as [`std::ptr::from_raw_parts`], except that a
         .               /// `NonNull` pointer is returned, as opposed to a raw `*const` pointer.
         .               ///
         .               /// See the documentation of [`std::ptr::from_raw_parts`] for more details.
         .               ///
         .               /// [`std::ptr::from_raw_parts`]: crate::ptr::from_raw_parts
         .               #[unstable(feature = "ptr_metadata", issue = "81513")]
-- line 230 ----------------------------------------
-- line 268 ----------------------------------------
         .               /// unsafe { *ptr.as_ptr() += 2; }
         .               /// let x_value = unsafe { *ptr.as_ptr() };
         .               /// assert_eq!(x_value, 2);
         .               /// ```
         .               #[stable(feature = "nonnull", since = "1.25.0")]
         .               #[rustc_const_stable(feature = "const_nonnull_as_ptr", since = "1.32.0")]
         .               #[must_use]
         .               #[inline]
18,785,974 ( 0.10%)      pub const fn as_ptr(self) -> *mut T {
         .                   self.pointer as *mut T
12,110,628 ( 0.06%)      }
         .           
         .               /// Returns a shared reference to the value. If the value may be uninitialized, [`as_uninit_ref`]
         .               /// must be used instead.
         .               ///
         .               /// For the mutable counterpart see [`as_mut`].
         .               ///
         .               /// [`as_uninit_ref`]: NonNull::as_uninit_ref
         .               /// [`as_mut`]: NonNull::as_mut
-- line 286 ----------------------------------------
-- line 316 ----------------------------------------
         .               /// println!("{}", ref_x);
         .               /// ```
         .               ///
         .               /// [the module documentation]: crate::ptr#safety
         .               #[stable(feature = "nonnull", since = "1.25.0")]
         .               #[rustc_const_unstable(feature = "const_ptr_as_ref", issue = "91822")]
         .               #[must_use]
         .               #[inline]
 1,628,288 ( 0.01%)      pub const unsafe fn as_ref<'a>(&self) -> &'a T {
         .                   // SAFETY: the caller must guarantee that `self` meets all the
         .                   // requirements for a reference.
 2,442,432 ( 0.01%)          unsafe { &*self.as_ptr() }
 1,628,288 ( 0.01%)      }
         .           
         .               /// Returns a unique reference to the value. If the value may be uninitialized, [`as_uninit_mut`]
         .               /// must be used instead.
         .               ///
         .               /// For the shared counterpart see [`as_ref`].
         .               ///
         .               /// [`as_uninit_mut`]: NonNull::as_uninit_mut
         .               /// [`as_ref`]: NonNull::as_ref
-- line 336 ----------------------------------------
-- line 391 ----------------------------------------
         .               /// let casted_ptr = ptr.cast::<i8>();
         .               /// let raw_ptr: *mut i8 = casted_ptr.as_ptr();
         .               /// ```
         .               #[stable(feature = "nonnull_cast", since = "1.27.0")]
         .               #[rustc_const_stable(feature = "const_nonnull_cast", since = "1.36.0")]
         .               #[must_use = "this returns the result of the operation, \
         .                             without modifying the original"]
         .               #[inline]
   609,286 ( 0.00%)      pub const fn cast<U>(self) -> NonNull<U> {
         .                   // SAFETY: `self` is a `NonNull` pointer which is necessarily non-null
   912,540 ( 0.00%)          unsafe { NonNull::new_unchecked(self.as_ptr() as *mut U) }
   456,016 ( 0.00%)      }
         .           }
         .           
         .           impl<T> NonNull<[T]> {
         .               /// Creates a non-null raw slice from a thin pointer and a length.
         .               ///
         .               /// The `len` argument is the number of **elements**, not the number of bytes.
         .               ///
         .               /// This function is safe, but dereferencing the return value is unsafe.
-- line 410 ----------------------------------------
-- line 425 ----------------------------------------
         .               /// ```
         .               ///
         .               /// (Note that this example artificially demonstrates a use of this method,
         .               /// but `let slice = NonNull::from(&x[..]);` would be a better way to write code like this.)
         .               #[unstable(feature = "nonnull_slice_from_raw_parts", issue = "71941")]
         .               #[rustc_const_unstable(feature = "const_nonnull_slice_from_raw_parts", issue = "71941")]
         .               #[must_use]
         .               #[inline]
 1,240,064 ( 0.01%)      pub const fn slice_from_raw_parts(data: NonNull<T>, len: usize) -> Self {
         .                   // SAFETY: `data` is a `NonNull` pointer which is necessarily non-null
 2,480,128 ( 0.01%)          unsafe { Self::new_unchecked(super::slice_from_raw_parts_mut(data.as_ptr(), len)) }
   620,032 ( 0.00%)      }
         .           
         .               /// Returns the length of a non-null raw slice.
         .               ///
         .               /// The returned value is the number of **elements**, not the number of bytes.
         .               ///
         .               /// This function is safe, even when the non-null raw slice cannot be dereferenced to a slice
         .               /// because the pointer does not have a valid address.
         .               ///
-- line 444 ----------------------------------------
-- line 469 ----------------------------------------
         .               ///
         .               /// let slice: NonNull<[i8]> = NonNull::slice_from_raw_parts(NonNull::dangling(), 3);
         .               /// assert_eq!(slice.as_non_null_ptr(), NonNull::new(1 as *mut i8).unwrap());
         .               /// ```
         .               #[inline]
         .               #[must_use]
         .               #[unstable(feature = "slice_ptr_get", issue = "74265")]
         .               #[rustc_const_unstable(feature = "slice_ptr_get", issue = "74265")]
   470,238 ( 0.00%)      pub const fn as_non_null_ptr(self) -> NonNull<T> {
         .                   // SAFETY: We know `self` is non-null.
   783,730 ( 0.00%)          unsafe { NonNull::new_unchecked(self.as_ptr().as_mut_ptr()) }
   313,492 ( 0.00%)      }
         .           
         .               /// Returns a raw pointer to the slice's buffer.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```rust
         .               /// #![feature(slice_ptr_get, nonnull_slice_from_raw_parts)]
         .               /// use std::ptr::NonNull;
-- line 488 ----------------------------------------
-- line 489 ----------------------------------------
         .               ///
         .               /// let slice: NonNull<[i8]> = NonNull::slice_from_raw_parts(NonNull::dangling(), 3);
         .               /// assert_eq!(slice.as_mut_ptr(), 1 as *mut i8);
         .               /// ```
         .               #[inline]
         .               #[must_use]
         .               #[unstable(feature = "slice_ptr_get", issue = "74265")]
         .               #[rustc_const_unstable(feature = "slice_ptr_get", issue = "74265")]
   470,238 ( 0.00%)      pub const fn as_mut_ptr(self) -> *mut T {
   626,984 ( 0.00%)          self.as_non_null_ptr().as_ptr()
   313,492 ( 0.00%)      }
         .           
         .               /// Returns a shared reference to a slice of possibly uninitialized values. In contrast to
         .               /// [`as_ref`], this does not require that the value has to be initialized.
         .               ///
         .               /// For the mutable counterpart see [`as_uninit_slice_mut`].
         .               ///
         .               /// [`as_ref`]: NonNull::as_ref
         .               /// [`as_uninit_slice_mut`]: NonNull::as_uninit_slice_mut
-- line 507 ----------------------------------------
-- line 705 ----------------------------------------
         .                   self.as_ptr().hash(state)
         .               }
         .           }
         .           
         .           #[unstable(feature = "ptr_internals", issue = "none")]
         .           #[rustc_const_unstable(feature = "const_convert", issue = "88674")]
         .           impl<T: ?Sized> const From<Unique<T>> for NonNull<T> {
         .               #[inline]
 1,005,752 ( 0.01%)      fn from(unique: Unique<T>) -> Self {
         .                   // SAFETY: A Unique pointer cannot be null, so the conditions for
         .                   // new_unchecked() are respected.
 2,011,504 ( 0.01%)          unsafe { NonNull::new_unchecked(unique.as_ptr()) }
 1,005,752 ( 0.01%)      }
         .           }
         .           
         .           #[stable(feature = "nonnull", since = "1.25.0")]
         .           #[rustc_const_unstable(feature = "const_convert", issue = "88674")]
         .           impl<T: ?Sized> const From<&mut T> for NonNull<T> {
         .               #[inline]
   165,328 ( 0.00%)      fn from(reference: &mut T) -> Self {
         .                   // SAFETY: A mutable reference cannot be null.
   267,626 ( 0.00%)          unsafe { NonNull { pointer: reference as *mut T } }
   247,992 ( 0.00%)      }
         .           }
         .           
         .           #[stable(feature = "nonnull", since = "1.25.0")]
         .           #[rustc_const_unstable(feature = "const_convert", issue = "88674")]
         .           impl<T: ?Sized> const From<&T> for NonNull<T> {
         .               #[inline]
         .               fn from(reference: &T) -> Self {
         .                   // SAFETY: A reference cannot be null, so the conditions for
-- line 735 ----------------------------------------

 7,357,335 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/non_null.rs>

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./elf/../elf/dl-tls.c
  ./elf/../sysdeps/x86_64/tls_get_addr.S
  ./elf/dl-lookup.c
  ./malloc/malloc.c
  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S

--------------------------------------------------------------------------------
Ir                     
--------------------------------------------------------------------------------
8,313,950,002 (42.67%)  events annotated

