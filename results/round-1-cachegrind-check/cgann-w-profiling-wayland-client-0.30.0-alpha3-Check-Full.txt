--------------------------------------------------------------------------------
I1 cache:         65536 B, 64 B, 4-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         67108864 B, 64 B, 64-way associative
Command:          /usr/home/liquid/.rustup/toolchains/w-profiling/bin/rustc --crate-name wayland_client --edition=2018 src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 -C metadata=e528988b5ec12461 -C extra-filename=-e528988b5ec12461 --out-dir /usr/home/liquid/tmp/.tmpiepAZZ/target/debug/deps -L dependency=/usr/home/liquid/tmp/.tmpiepAZZ/target/debug/deps --extern bitflags=/usr/home/liquid/tmp/.tmpiepAZZ/target/debug/deps/libbitflags-96ce9d0595c920f6.rmeta --extern futures_channel=/usr/home/liquid/tmp/.tmpiepAZZ/target/debug/deps/libfutures_channel-334194915a0131df.rmeta --extern log=/usr/home/liquid/tmp/.tmpiepAZZ/target/debug/deps/liblog-7d12981a7e5e29bf.rmeta --extern nix=/usr/home/liquid/tmp/.tmpiepAZZ/target/debug/deps/libnix-0983fd0fb1ad5241.rmeta --extern thiserror=/usr/home/liquid/tmp/.tmpiepAZZ/target/debug/deps/libthiserror-d0d3c0f405481fdd.rmeta --extern wayland_backend=/usr/home/liquid/tmp/.tmpiepAZZ/target/debug/deps/libwayland_backend-491026d2555deaa1.rmeta --extern wayland_scanner=/usr/home/liquid/tmp/.tmpiepAZZ/target/debug/deps/libwayland_scanner-e73eeb2c3bd74a80.so -L native=/usr/home/liquid/tmp/.tmpiepAZZ/target/debug/build/wayland-backend-6594e89e0bb54133/out -L native=/usr/home/liquid/tmp/.tmpiepAZZ/target/debug/build/wayland-backend-6594e89e0bb54133/out -Adeprecated -Aunknown-lints -Zincremental-verify-ich
Data file:        results/cgout-w-profiling-wayland-client-0.30.0-alpha3-Check-Full
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Thresholds:       0.1
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                     
--------------------------------------------------------------------------------
4,790,162,144 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                    file:function
--------------------------------------------------------------------------------
138,826,599 ( 2.90%)  ./malloc/malloc.c:_int_free
113,855,316 ( 2.38%)  ./malloc/malloc.c:_int_malloc
 83,934,885 ( 1.75%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_avx_unaligned_erms
 80,579,541 ( 1.68%)  ./malloc/malloc.c:malloc
 40,590,665 ( 0.85%)  ./malloc/malloc.c:free
 29,160,178 ( 0.61%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.8.4/src/reader/lexer.rs:xml::reader::lexer::Lexer::next_token
 26,431,882 ( 0.55%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.8.4/src/util.rs:xml::util::next_char_from
 26,384,583 ( 0.55%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
 25,580,448 ( 0.53%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<core::slice::iter::Iter<T> as core::iter::traits::iterator::Iterator>::next
 23,359,812 ( 0.49%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs:<rustc_data_structures::sip128::SipHasher128>::short_write_process_buffer::<u64>
 22,674,246 ( 0.47%)  ./elf/dl-lookup.c:_dl_lookup_symbol_x
 20,134,764 ( 0.42%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/hash/sip.rs:<std::collections::hash::map::DefaultHasher as core::hash::Hasher>::write
 19,432,363 ( 0.41%)  /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/server.rs:<proc_macro::bridge::server::Dispatcher<proc_macro::bridge::server::MarkedTypes<rustc_expand::proc_macro_server::Rustc>> as proc_macro::bridge::server::DispatcherTrait>::dispatch
 19,345,236 ( 0.40%)  ./malloc/malloc.c:malloc_consolidate
 18,043,608 ( 0.38%)  ./elf/../elf/dl-tls.c:_dl_update_slotinfo
 16,664,330 ( 0.35%)  ./elf/dl-lookup.c:do_lookup_x
 15,669,936 ( 0.33%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs:<rustc_data_structures::sip128::SipHasher128>::short_write_process_buffer::<u64>
 14,856,877 ( 0.31%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lexer/src/unescape.rs:rustc_lexer::unescape::scan_escape
 14,846,706 ( 0.31%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mut_ptr.rs:core::ptr::mut_ptr::<impl *mut T>::guaranteed_eq
 14,636,755 ( 0.31%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs:alloc::vec::Vec<T,A>::push
 14,422,286 ( 0.30%)  ./malloc/malloc.c:realloc
 13,786,227 ( 0.29%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mut_ptr.rs:core::ptr::mut_ptr::<impl *mut T>::is_null
 13,731,138 ( 0.29%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilder<rustc_span::def_id::LocalDefId, (&rustc_middle::ty::context::TypeckResults, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_span::def_id::LocalDefId>
 13,555,023 ( 0.28%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/non_null.rs:core::ptr::non_null::NonNull<T>::as_ptr
 12,781,927 ( 0.27%)  /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/client.rs:proc_macro::bridge::scoped_cell::ScopedCell<T>::replace
 12,745,471 ( 0.27%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::TyKind as core::cmp::PartialEq>::eq
 12,425,176 ( 0.26%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.8.4/src/reader/parser/mod.rs:xml::reader::parser::PullParser::next
 12,207,815 ( 0.25%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
 12,116,359 ( 0.25%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs:<rustc_infer::infer::InferCtxt>::shallow_resolve_ty
 12,068,280 ( 0.25%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/const_ptr.rs:core::ptr::const_ptr::<impl *const T>::guaranteed_eq
 11,933,726 ( 0.25%)  ./malloc/malloc.c:unlink_chunk.constprop.0
 11,836,188 ( 0.25%)  /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs:__rdl_alloc
 11,734,632 ( 0.24%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/index.rs:<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::get_unchecked
 11,697,177 ( 0.24%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::CtxtInterners>::intern_ty
 11,473,716 ( 0.24%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.8.4/src/reader/lexer.rs:xml::reader::lexer::Lexer::normal
 11,206,260 ( 0.23%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/const_ptr.rs:core::ptr::const_ptr::<impl *const T>::is_null
 11,172,843 ( 0.23%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter.rs:core::slice::iter::Iter<T>::new
 11,101,151 ( 0.23%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lexer/src/unescape.rs:rustc_lexer::unescape::unescape_literal::<<rustc_ast::ast::LitKind>::from_lit_token::{closure#2}>
 11,012,815 ( 0.23%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/option.rs:core::option::Option<T>::map
 10,818,042 ( 0.23%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.8.4/src/reader/parser/mod.rs:xml::reader::parser::PullParser::dispatch_token
 10,605,275 ( 0.22%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/string.rs:alloc::string::String::push
 10,537,910 ( 0.22%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::TyKind as core::hash::Hash>::hash::<rustc_hash::FxHasher>
 10,272,572 ( 0.21%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs:<rustc_span::caching_source_map_view::CachingSourceMapView>::span_data_to_lines_and_cols
 10,106,437 ( 0.21%)  ./malloc/malloc.c:_int_realloc
  9,708,890 ( 0.20%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.8.4/src/reader/parser/outside_tag.rs:xml::reader::parser::outside_tag::<impl xml::reader::parser::PullParser>::outside_tag
  9,631,869 ( 0.20%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::Binder<rustc_middle::ty::PredicateKind>, rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>>::{closure#0}>
  9,519,152 ( 0.20%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/str/validations.rs:core::str::validations::next_code_point
  9,459,956 ( 0.20%)  /usr/home/liquid/rust/worktree-benchmarking/library/std/src/io/mod.rs:<std::io::Bytes<R> as core::iter::traits::iterator::Iterator>::next
  8,742,369 ( 0.18%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/index.rs:<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::index
  8,732,115 ( 0.18%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<rustc_span::span_encoding::Span as rustc_data_structures::stable_hasher::HashStable<rustc_query_system::ich::hcx::StableHashingContext>>::hash_stable
  8,399,340 ( 0.18%)  /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/rpc.rs:<proc_macro::bridge::api_tags::Method as proc_macro::bridge::rpc::DecodeMut<()>>::decode
  8,112,718 ( 0.17%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.8.4/src/reader/lexer.rs:xml::reader::lexer::Lexer::read_next_token
  8,096,357 ( 0.17%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<[rustc_middle::ty::subst::GenericArg], rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>>::{closure#0}>
  8,066,213 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/str/validations.rs:core::str::converts::from_utf8
  7,949,466 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/search.rs:<alloc::collections::btree::node::NodeRef<alloc::collections::btree::node::marker::Mut, rustc_infer::infer::region_constraints::Constraint, rustc_infer::infer::SubregionOrigin, alloc::collections::btree::node::marker::LeafOrInternal>>::search_tree::<rustc_infer::infer::region_constraints::Constraint>
  7,801,550 ( 0.16%)  ./malloc/malloc.c:calloc
  7,785,155 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs:core::ptr::drop_in_place<proc_macro::bridge::scoped_cell::ScopedCell<T>::replace::PutBackOnDrop<proc_macro::bridge::client::BridgeStateL>>
  7,654,864 ( 0.16%)  ./elf/../elf/dl-tls.c:update_get_addr
  7,476,747 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::TyCtxt>::_intern_substs
  7,459,944 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/obligation_forest/mod.rs:<rustc_data_structures::obligation_forest::ObligationForest<rustc_trait_selection::traits::fulfill::PendingPredicateObligation>>::process_obligations::<rustc_trait_selection::traits::fulfill::FulfillProcessor, rustc_data_structures::obligation_forest::Outcome<rustc_trait_selection::traits::fulfill::PendingPredicateObligation, rustc_infer::traits::FulfillmentErrorCode>>
  7,379,789 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_borrowck/src/lib.rs:<rustc_borrowck::MirBorrowckCtxt>::access_place
  7,284,068 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs:<rustc_middle::hir::map::Map>::attrs
  7,055,733 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<rustc_middle::ty::context::TyCtxt>::_intern_substs
  7,047,990 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/type_variable.rs:<rustc_infer::infer::type_variable::TypeVariableTable>::probe
  6,887,847 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/mem/mod.rs:proc_macro::bridge::scoped_cell::ScopedCell<T>::replace
  6,869,825 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::RegionKind as core::hash::Hash>::hash::<rustc_hash::FxHasher>
  6,859,280 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/scoped_cell.rs:proc_macro::bridge::scoped_cell::ScopedCell<T>::replace
  6,845,976 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/str/mod.rs:core::str::<impl str>::chars
  6,649,923 ( 0.14%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<[rustc_middle::ty::subst::GenericArg], rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>>::{closure#0}>
  6,641,566 ( 0.14%)  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:__memset_avx2_unaligned_erms
  6,529,915 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
  6,483,564 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs:<rustc_span::span_encoding::Span as rustc_data_structures::stable_hasher::HashStable<rustc_query_system::ich::hcx::StableHashingContext>>::hash_stable
  6,442,453 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs:core::unicode::unicode_data::grapheme_extend::lookup
  6,431,177 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/rpc.rs:<proc_macro::bridge::api_tags::Method as proc_macro::bridge::rpc::Encode<S>>::encode
  6,326,982 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/non_null.rs:core::ptr::non_null::NonNull<T>::new_unchecked
  6,316,890 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs:<rustc_span::source_map::SourceMap>::lookup_source_file_idx
  6,275,565 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs:core::ptr::slice_from_raw_parts
  6,121,433 ( 0.13%)  ./io/../sysdeps/unix/sysv/linux/read.c:read
  6,110,029 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/buffer.rs:proc_macro::bridge::scoped_cell::ScopedCell<T>::replace
  6,092,694 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs:proc_macro::bridge::scoped_cell::ScopedCell<T>::replace
  6,056,710 ( 0.13%)  ./elf/../sysdeps/x86_64/tls_get_addr.S:__tls_get_addr
  6,002,868 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::Parser>::check
  5,956,232 ( 0.12%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.8.4/src/reader/lexer.rs:xml::reader::lexer::Token::contains_char_data
  5,925,914 ( 0.12%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.8.4/src/common.rs:xml::common::is_whitespace_char
  5,903,122 ( 0.12%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.8.4/src/reader/lexer.rs:xml::reader::lexer::Lexer::dispatch_char
  5,888,418 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/option.rs:<core::option::Option<T> as core::ops::try_trait::Try>::branch
  5,767,830 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_dataflow/src/drop_flag_effects.rs:rustc_mir_dataflow::drop_flag_effects::on_all_children_bits::is_terminal_path
  5,732,208 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/hir/map/mod.rs:<rustc_middle::hir::map::Map>::attrs
  5,717,968 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::TokenCursor>::next
  5,713,803 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/hir/map/mod.rs:<rustc_middle::hir::map::Map>::find_parent_node
  5,631,743 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_privacy/src/lib.rs:<rustc_privacy::DefIdVisitorSkeleton<rustc_privacy::TypePrivacyVisitor> as rustc_middle::ty::fold::TypeVisitor>::visit_ty
  5,618,589 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::RegionKind as core::cmp::PartialEq>::eq
  5,604,692 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/rpc.rs:<core::result::Result<T,E> as proc_macro::bridge::rpc::DecodeMut<S>>::decode
  5,596,028 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::Parser>::bump
  5,551,791 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/mem/mod.rs:core::mem::replace
  5,531,652 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/graph/scc/mod.rs:<rustc_data_structures::graph::scc::SccsConstruction<rustc_borrowck::constraints::graph::RegionGraph<rustc_borrowck::constraints::graph::Normal>, rustc_borrowck::constraints::ConstraintSccIndex>>::start_walk_from
  5,478,930 ( 0.11%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.8.4/src/reader/parser/mod.rs:<xml::reader::parser::State as core::clone::Clone>::clone
  5,452,404 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/str/converts.rs:core::str::converts::from_utf8
  5,438,823 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/metadata.rs:core::ptr::metadata::from_raw_parts
  5,415,728 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/closure.rs:proc_macro::bridge::scoped_cell::ScopedCell<T>::replace
  5,401,986 ( 0.11%)  ./elf/../sysdeps/x86_64/dl-machine.h:_dl_relocate_object
  5,382,360 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/index.rs:<core::ops::range::RangeTo<usize> as core::slice::index::SliceIndex<[T]>>::index
  5,360,128 ( 0.11%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(rustc_span::def_id::DefId, rustc_query_system::query::plumbing::QueryResult<rustc_middle::dep_graph::dep_node::DepKind>)>>::remove_entry::<hashbrown::map::equivalent_key<rustc_span::def_id::DefId, rustc_span::def_id::DefId, rustc_query_system::query::plumbing::QueryResult<rustc_middle::dep_graph::dep_node::DepKind>>::{closure#0}>
  5,304,224 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs:core::ptr::read
  5,272,733 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/unicode/printable.rs:core::unicode::printable::check
  5,092,650 ( 0.11%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.8.4/src/reader/lexer.rs:xml::reader::lexer::Token::push_to_string
  5,054,375 ( 0.11%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilder<rustc_span::def_id::LocalDefId, (&rustc_middle::ty::context::TypeckResults, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_span::def_id::LocalDefId>
  5,030,103 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/buffer.rs:<proc_macro::bridge::api_tags::Method as proc_macro::bridge::rpc::Encode<S>>::encode
  5,014,800 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/vec_deque/mod.rs:alloc::collections::vec_deque::VecDeque<T,A>::is_empty
  5,008,260 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/region_constraints/mod.rs:<alloc::collections::btree::node::NodeRef<alloc::collections::btree::node::marker::Mut, rustc_infer::infer::region_constraints::Constraint, rustc_infer::infer::SubregionOrigin, alloc::collections::btree::node::marker::LeafOrInternal>>::search_tree::<rustc_infer::infer::region_constraints::Constraint>
  5,006,976 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/graph/scc/mod.rs:<rustc_data_structures::graph::scc::SccsConstruction<rustc_borrowck::constraints::graph::RegionGraph<rustc_borrowck::constraints::graph::Normal>, rustc_borrowck::constraints::ConstraintSccIndex>>::inspect_node
  4,882,481 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/hash/sip.rs:<std::collections::hash::map::DefaultHasher as core::hash::Hasher>::write

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs
--------------------------------------------------------------------------------
Ir                 

-- line 84 ----------------------------------------
        .           pub struct SessionGlobals {
        .               symbol_interner: symbol::Interner,
        .               span_interner: Lock<span_encoding::SpanInterner>,
        .               hygiene_data: Lock<hygiene::HygieneData>,
        .               source_map: Lock<Option<Lrc<SourceMap>>>,
        .           }
        .           
        .           impl SessionGlobals {
       12 ( 0.00%)      pub fn new(edition: Edition) -> SessionGlobals {
       50 ( 0.00%)          SessionGlobals {
        2 ( 0.00%)              symbol_interner: symbol::Interner::fresh(),
        .                       span_interner: Lock::new(span_encoding::SpanInterner::default()),
        6 ( 0.00%)              hygiene_data: Lock::new(hygiene::HygieneData::new(edition)),
        .                       source_map: Lock::new(None),
        .                   }
       10 ( 0.00%)      }
        .           }
        .           
        .           #[inline]
        .           pub fn create_session_globals_then<R>(edition: Edition, f: impl FnOnce() -> R) -> R {
        1 ( 0.00%)      assert!(
        .                   !SESSION_GLOBALS.is_set(),
        .                   "SESSION_GLOBALS should never be overwritten! \
        .                    Use another thread if you need another SessionGlobals"
        .               );
        3 ( 0.00%)      let session_globals = SessionGlobals::new(edition);
        7 ( 0.00%)      SESSION_GLOBALS.set(&session_globals, f)
        1 ( 0.00%)  }
        .           
        .           #[inline]
        .           pub fn set_session_globals_then<R>(session_globals: &SessionGlobals, f: impl FnOnce() -> R) -> R {
        .               assert!(
        .                   !SESSION_GLOBALS.is_set(),
        .                   "SESSION_GLOBALS should never be overwritten! \
        .                    Use another thread if you need another SessionGlobals"
        .               );
-- line 119 ----------------------------------------
-- line 120 ----------------------------------------
        .               SESSION_GLOBALS.set(session_globals, f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_default_session_if_not_set_then<R, F>(f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
        4 ( 0.00%)      create_session_if_not_set_then(edition::DEFAULT_EDITION, f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_session_if_not_set_then<R, F>(edition: Edition, f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
        1 ( 0.00%)      if !SESSION_GLOBALS.is_set() {
        3 ( 0.00%)          let session_globals = SessionGlobals::new(edition);
       11 ( 0.00%)          SESSION_GLOBALS.set(&session_globals, || SESSION_GLOBALS.with(f))
        1 ( 0.00%)      } else {
        .                   SESSION_GLOBALS.with(f)
        .               }
        .           }
        .           
        .           #[inline]
        .           pub fn with_session_globals<R, F>(f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
1,804,007 ( 0.04%)      SESSION_GLOBALS.with(f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_default_session_globals_then<R>(f: impl FnOnce() -> R) -> R {
        .               create_session_globals_then(edition::DEFAULT_EDITION, f)
        .           }
        .           
        .           // If this ever becomes non thread-local, `decode_syntax_context`
        .           // and `decode_expn_id` will need to be updated to handle concurrent
        .           // deserialization.
        .           scoped_tls::scoped_thread_local!(static SESSION_GLOBALS: SessionGlobals);
        .           
        .           // FIXME: We should use this enum or something like it to get rid of the
        .           // use of magic `/rust/1.x/...` paths across the board.
       19 ( 0.00%)  #[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd)]
    1,328 ( 0.00%)  #[derive(Decodable)]
        .           pub enum RealFileName {
        .               LocalPath(PathBuf),
        .               /// For remapped paths (namely paths into libstd that have been mapped
        .               /// to the appropriate spot on the local host's file system, and local file
        .               /// system paths that have been remapped with `FilePathMapping`),
        .               Remapped {
        .                   /// `local_path` is the (host-dependent) local path to the file. This is
        .                   /// None if the file was imported from another crate
-- line 173 ----------------------------------------
-- line 179 ----------------------------------------
        .           }
        .           
        .           impl Hash for RealFileName {
        .               fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
        .                   // To prevent #70924 from happening again we should only hash the
        .                   // remapped (virtualized) path if that exists. This is because
        .                   // virtualized paths to sysroot crates (/rust/$hash or /rust/$version)
        .                   // remain stable even if the corresponding local_path changes
    3,402 ( 0.00%)          self.remapped_path_if_available().hash(state)
        .               }
        .           }
        .           
        .           // This is functionally identical to #[derive(Encodable)], with the exception of
        .           // an added assert statement
        .           impl<S: Encoder> Encodable<S> for RealFileName {
        .               fn encode(&self, encoder: &mut S) -> Result<(), S::Error> {
        8 ( 0.00%)          encoder.emit_enum(|encoder| match *self {
        .                       RealFileName::LocalPath(ref local_path) => {
       32 ( 0.00%)                  encoder.emit_enum_variant("LocalPath", 0, 1, |encoder| {
        .                               encoder.emit_enum_variant_arg(true, |encoder| local_path.encode(encoder))?;
        .                               Ok(())
        .                           })
        .                       }
        .           
        .                       RealFileName::Remapped { ref local_path, ref virtual_name } => encoder
        .                           .emit_enum_variant("Remapped", 1, 2, |encoder| {
        .                               // For privacy and build reproducibility, we must not embed host-dependant path in artifacts
-- line 205 ----------------------------------------
-- line 213 ----------------------------------------
        .               }
        .           }
        .           
        .           impl RealFileName {
        .               /// Returns the path suitable for reading from the file system on the local host,
        .               /// if this information exists.
        .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
        .               pub fn local_path(&self) -> Option<&Path> {
        4 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(p) => Some(p),
        .                       RealFileName::Remapped { local_path: p, virtual_name: _ } => {
        .                           p.as_ref().map(PathBuf::as_path)
        .                       }
        .                   }
        .               }
        .           
        .               /// Returns the path suitable for reading from the file system on the local host,
        .               /// if this information exists.
        .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
        2 ( 0.00%)      pub fn into_local_path(self) -> Option<PathBuf> {
        2 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(p) => Some(p),
        .                       RealFileName::Remapped { local_path: p, virtual_name: _ } => p,
        .                   }
        3 ( 0.00%)      }
        .           
        .               /// Returns the path suitable for embedding into build artifacts. This would still
        .               /// be a local path if it has not been remapped. A remapped path will not correspond
        .               /// to a valid file system path: see `local_path_if_available()` for something that
        .               /// is more likely to return paths into the local host file system.
        .               pub fn remapped_path_if_available(&self) -> &Path {
    2,712 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(p)
        .                       | RealFileName::Remapped { local_path: _, virtual_name: p } => &p,
        .                   }
        5 ( 0.00%)      }
        .           
        .               /// Returns the path suitable for reading from the file system on the local host,
        .               /// if this information exists. Otherwise returns the remapped name.
        .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
        .               pub fn local_path_if_available(&self) -> &Path {
        4 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(path)
        .                       | RealFileName::Remapped { local_path: None, virtual_name: path }
        .                       | RealFileName::Remapped { local_path: Some(path), virtual_name: _ } => path,
        .                   }
        .               }
        .           
        .               pub fn to_string_lossy(&self, display_pref: FileNameDisplayPreference) -> Cow<'_, str> {
        6 ( 0.00%)          match display_pref {
        .                       FileNameDisplayPreference::Local => self.local_path_if_available().to_string_lossy(),
        .                       FileNameDisplayPreference::Remapped => {
        .                           self.remapped_path_if_available().to_string_lossy()
        .                       }
        .                   }
        .               }
        .           }
        .           
        .           /// Differentiates between real files and common virtual files.
   13,788 ( 0.00%)  #[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd, Hash)]
    8,060 ( 0.00%)  #[derive(Decodable, Encodable)]
        .           pub enum FileName {
        .               Real(RealFileName),
        .               /// Call to `quote!`.
        .               QuoteExpansion(u64),
        .               /// Command line.
        .               Anon(u64),
        .               /// Hack in `src/librustc_ast/parse.rs`.
        .               // FIXME(jseyfried)
        .               MacroExpansion(u64),
      172 ( 0.00%)      ProcMacroSourceCode(u64),
        .               /// Strings provided as `--cfg [cfgspec]` stored in a `crate_cfg`.
        .               CfgSpec(u64),
        .               /// Strings provided as crate attributes in the CLI.
        .               CliCrateAttr(u64),
        .               /// Custom sources for explicit parser calls from plugins and drivers.
        .               Custom(String),
        .               DocTest(PathBuf, isize),
        .               /// Post-substitution inline assembly from LLVM.
        .               InlineAsm(u64),
        .           }
        .           
        .           impl From<PathBuf> for FileName {
       28 ( 0.00%)      fn from(p: PathBuf) -> Self {
        8 ( 0.00%)          assert!(!p.to_string_lossy().ends_with('>'));
       24 ( 0.00%)          FileName::Real(RealFileName::LocalPath(p))
       28 ( 0.00%)      }
        .           }
        .           
        2 ( 0.00%)  #[derive(Clone, Copy, Eq, PartialEq, Hash, Debug)]
        .           pub enum FileNameDisplayPreference {
        .               Remapped,
        .               Local,
        .           }
        .           
        .           pub struct FileNameDisplay<'a> {
        .               inner: &'a FileName,
        .               display_pref: FileNameDisplayPreference,
        .           }
        .           
        .           impl fmt::Display for FileNameDisplay<'_> {
       16 ( 0.00%)      fn fmt(&self, fmt: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        .                   use FileName::*;
       24 ( 0.00%)          match *self.inner {
        .                       Real(ref name) => {
       24 ( 0.00%)                  write!(fmt, "{}", name.to_string_lossy(self.display_pref))
        .                       }
        .                       QuoteExpansion(_) => write!(fmt, "<quote expansion>"),
        .                       MacroExpansion(_) => write!(fmt, "<macro expansion>"),
        .                       Anon(_) => write!(fmt, "<anon>"),
        .                       ProcMacroSourceCode(_) => write!(fmt, "<proc-macro source code>"),
        .                       CfgSpec(_) => write!(fmt, "<cfgspec>"),
        .                       CliCrateAttr(_) => write!(fmt, "<crate attribute>"),
        .                       Custom(ref s) => write!(fmt, "<{}>", s),
        .                       DocTest(ref path, _) => write!(fmt, "{}", path.display()),
        .                       InlineAsm(_) => write!(fmt, "<inline asm>"),
        .                   }
       20 ( 0.00%)      }
        .           }
        .           
        .           impl FileNameDisplay<'_> {
        8 ( 0.00%)      pub fn to_string_lossy(&self) -> Cow<'_, str> {
        6 ( 0.00%)          match self.inner {
        2 ( 0.00%)              FileName::Real(ref inner) => inner.to_string_lossy(self.display_pref),
        .                       _ => Cow::from(format!("{}", self)),
        .                   }
        8 ( 0.00%)      }
        .           }
        .           
        .           impl FileName {
        .               pub fn is_real(&self) -> bool {
        .                   use FileName::*;
    1,368 ( 0.00%)          match *self {
        .                       Real(_) => true,
        .                       Anon(_)
        .                       | MacroExpansion(_)
        .                       | ProcMacroSourceCode(_)
        .                       | CfgSpec(_)
        .                       | CliCrateAttr(_)
        .                       | Custom(_)
        .                       | QuoteExpansion(_)
        .                       | DocTest(_, _)
        .                       | InlineAsm(_) => false,
        .                   }
        .               }
        .           
        2 ( 0.00%)      pub fn prefer_remapped(&self) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref: FileNameDisplayPreference::Remapped }
        4 ( 0.00%)      }
        .           
        .               // This may include transient local filesystem information.
        .               // Must not be embedded in build outputs.
        4 ( 0.00%)      pub fn prefer_local(&self) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref: FileNameDisplayPreference::Local }
        8 ( 0.00%)      }
        .           
        .               pub fn display(&self, display_pref: FileNameDisplayPreference) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref }
        .               }
        .           
        .               pub fn macro_expansion_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
-- line 375 ----------------------------------------
-- line 377 ----------------------------------------
        .               }
        .           
        .               pub fn anon_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
        .                   FileName::Anon(hasher.finish())
        .               }
        .           
      860 ( 0.00%)      pub fn proc_macro_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
      344 ( 0.00%)          FileName::ProcMacroSourceCode(hasher.finish())
      860 ( 0.00%)      }
        .           
        .               pub fn cfg_spec_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
        .                   FileName::QuoteExpansion(hasher.finish())
        .               }
        .           
        .               pub fn cli_crate_attr_source_code(src: &str) -> FileName {
-- line 397 ----------------------------------------
-- line 423 ----------------------------------------
        .           /// that the length of the span is equal to `span.hi - span.lo`; there may be space in the
        .           /// [`BytePos`] range between files.
        .           ///
        .           /// `SpanData` is public because `Span` uses a thread-local interner and can't be
        .           /// sent to other threads, but some pieces of performance infra run in a separate thread.
        .           /// Using `Span` is generally preferred.
        .           #[derive(Clone, Copy, Hash, PartialEq, Eq)]
        .           pub struct SpanData {
       67 ( 0.00%)      pub lo: BytePos,
       67 ( 0.00%)      pub hi: BytePos,
        .               /// Information about where the macro came from, if this piece of
        .               /// code was created by a macro expansion.
      179 ( 0.00%)      pub ctxt: SyntaxContext,
       56 ( 0.00%)      pub parent: Option<LocalDefId>,
        .           }
        .           
        .           // Order spans by position in the file.
        .           impl Ord for SpanData {
        .               fn cmp(&self, other: &Self) -> Ordering {
        .                   let SpanData {
        .                       lo: s_lo,
        .                       hi: s_hi,
-- line 444 ----------------------------------------
-- line 485 ----------------------------------------
        .               }
        .               #[inline]
        .               pub fn with_parent(&self, parent: Option<LocalDefId>) -> Span {
        .                   Span::new(self.lo, self.hi, self.ctxt, parent)
        .               }
        .               /// Returns `true` if this is a dummy span with any hygienic context.
        .               #[inline]
        .               pub fn is_dummy(self) -> bool {
  517,919 ( 0.01%)          self.lo.0 == 0 && self.hi.0 == 0
        .               }
        .               /// Returns `true` if `self` fully encloses `other`.
        .               pub fn contains(self, other: Self) -> bool {
    4,335 ( 0.00%)          self.lo <= other.lo && other.hi <= self.hi
        .               }
        .           }
        .           
        .           // The interner is pointed to by a thread local value which is only set on the main thread
        .           // with parallelization is disabled. So we don't allow `Span` to transfer between threads
        .           // to avoid panics and other errors, even though it would be memory safe to do so.
        .           #[cfg(not(parallel_compiler))]
        .           impl !Send for Span {}
        .           #[cfg(not(parallel_compiler))]
        .           impl !Sync for Span {}
        .           
        .           impl PartialOrd for Span {
   77,504 ( 0.00%)      fn partial_cmp(&self, rhs: &Self) -> Option<Ordering> {
   58,128 ( 0.00%)          PartialOrd::partial_cmp(&self.data(), &rhs.data())
   77,504 ( 0.00%)      }
        .           }
        .           impl Ord for Span {
        .               fn cmp(&self, rhs: &Self) -> Ordering {
        .                   Ord::cmp(&self.data(), &rhs.data())
        .               }
        .           }
        .           
        .           /// A collection of `Span`s.
-- line 520 ----------------------------------------
-- line 532 ----------------------------------------
        .           }
        .           
        .           impl Span {
        .               #[inline]
        .               pub fn lo(self) -> BytePos {
        .                   self.data().lo
        .               }
        .               #[inline]
  172,440 ( 0.00%)      pub fn with_lo(self, lo: BytePos) -> Span {
        .                   self.data().with_lo(lo)
  114,960 ( 0.00%)      }
        .               #[inline]
   10,344 ( 0.00%)      pub fn hi(self) -> BytePos {
        .                   self.data().hi
   10,344 ( 0.00%)      }
        .               #[inline]
   42,426 ( 0.00%)      pub fn with_hi(self, hi: BytePos) -> Span {
        .                   self.data().with_hi(hi)
   28,284 ( 0.00%)      }
        .               #[inline]
        .               pub fn ctxt(self) -> SyntaxContext {
        .                   self.data_untracked().ctxt
        .               }
        .               #[inline]
   17,870 ( 0.00%)      pub fn with_ctxt(self, ctxt: SyntaxContext) -> Span {
        .                   self.data_untracked().with_ctxt(ctxt)
   10,722 ( 0.00%)      }
        .               #[inline]
        .               pub fn parent(self) -> Option<LocalDefId> {
        .                   self.data().parent
        .               }
        .               #[inline]
        .               pub fn with_parent(self, ctxt: Option<LocalDefId>) -> Span {
        .                   self.data().with_parent(ctxt)
        .               }
-- line 566 ----------------------------------------
-- line 568 ----------------------------------------
        .               /// Returns `true` if this is a dummy span with any hygienic context.
        .               #[inline]
        .               pub fn is_dummy(self) -> bool {
        .                   self.data_untracked().is_dummy()
        .               }
        .           
        .               /// Returns `true` if this span comes from a macro or desugaring.
        .               #[inline]
       60 ( 0.00%)      pub fn from_expansion(self) -> bool {
        .                   self.ctxt() != SyntaxContext::root()
       40 ( 0.00%)      }
        .           
        .               /// Returns `true` if `span` originates in a derive-macro's expansion.
        .               pub fn in_derive_expansion(self) -> bool {
        .                   matches!(self.ctxt().outer_expn_data().kind, ExpnKind::Macro(MacroKind::Derive, _))
        .               }
        .           
        .               /// Gate suggestions that would not be appropriate in a context the user didn't write.
        .               pub fn can_be_used_for_suggestions(self) -> bool {
-- line 586 ----------------------------------------
-- line 600 ----------------------------------------
        .               /// Returns a new span representing an empty span at the beginning of this span.
        .               #[inline]
        .               pub fn shrink_to_lo(self) -> Span {
        .                   let span = self.data_untracked();
        .                   span.with_hi(span.lo)
        .               }
        .               /// Returns a new span representing an empty span at the end of this span.
        .               #[inline]
      234 ( 0.00%)      pub fn shrink_to_hi(self) -> Span {
        .                   let span = self.data_untracked();
        .                   span.with_lo(span.hi)
      156 ( 0.00%)      }
        .           
        .               #[inline]
        .               /// Returns `true` if `hi == lo`.
        .               pub fn is_empty(self) -> bool {
        .                   let span = self.data_untracked();
        .                   span.hi == span.lo
        .               }
        .           
        .               /// Returns `self` if `self` is not the dummy span, and `other` otherwise.
        .               pub fn substitute_dummy(self, other: Span) -> Span {
        .                   if self.is_dummy() { other } else { self }
        .               }
        .           
        .               /// Returns `true` if `self` fully encloses `other`.
   13,005 ( 0.00%)      pub fn contains(self, other: Span) -> bool {
        .                   let span = self.data();
        .                   let other = other.data();
        .                   span.contains(other)
    8,670 ( 0.00%)      }
        .           
        .               /// Returns `true` if `self` touches `other`.
        .               pub fn overlaps(self, other: Span) -> bool {
        .                   let span = self.data();
        .                   let other = other.data();
        .                   span.lo < other.hi && other.lo < span.hi
        .               }
        .           
-- line 638 ----------------------------------------
-- line 663 ----------------------------------------
        .               /// The `Span` for the tokens in the previous macro expansion from which `self` was generated,
        .               /// if any.
        .               pub fn parent_callsite(self) -> Option<Span> {
        .                   let expn_data = self.ctxt().outer_expn_data();
        .                   if !expn_data.is_root() { Some(expn_data.call_site) } else { None }
        .               }
        .           
        .               /// Walk down the expansion ancestors to find a span that's contained within `outer`.
   10,060 ( 0.00%)      pub fn find_ancestor_inside(mut self, outer: Span) -> Option<Span> {
    5,030 ( 0.00%)          while !outer.contains(self) {
        .                       self = self.parent_callsite()?;
        .                   }
        .                   Some(self)
   11,066 ( 0.00%)      }
        .           
        .               /// Edition of the crate from which this span came.
   45,948 ( 0.00%)      pub fn edition(self) -> edition::Edition {
        .                   self.ctxt().edition()
   30,632 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn rust_2015(self) -> bool {
   10,247 ( 0.00%)          self.edition() == edition::Edition::Edition2015
        .               }
        .           
        .               #[inline]
        .               pub fn rust_2018(self) -> bool {
    4,367 ( 0.00%)          self.edition() >= edition::Edition::Edition2018
        .               }
        .           
        .               #[inline]
        .               pub fn rust_2021(self) -> bool {
    5,907 ( 0.00%)          self.edition() >= edition::Edition::Edition2021
        .               }
        .           
        .               /// Returns the source callee.
        .               ///
        .               /// Returns `None` if the supplied span has no expansion trace,
        .               /// else returns the `ExpnData` for the macro definition
        .               /// corresponding to the source callsite.
        .               pub fn source_callee(self) -> Option<ExpnData> {
-- line 703 ----------------------------------------
-- line 707 ----------------------------------------
        .                   }
        .                   let expn_data = self.ctxt().outer_expn_data();
        .                   if !expn_data.is_root() { Some(source_callee(expn_data)) } else { None }
        .               }
        .           
        .               /// Checks if a span is "internal" to a macro in which `#[unstable]`
        .               /// items can be used (that is, a macro marked with
        .               /// `#[allow_internal_unstable]`).
    1,940 ( 0.00%)      pub fn allows_unstable(self, feature: Symbol) -> bool {
      388 ( 0.00%)          self.ctxt()
        .                       .outer_expn_data()
        .                       .allow_internal_unstable
        .                       .map_or(false, |features| features.iter().any(|&f| f == feature))
    1,552 ( 0.00%)      }
        .           
        .               /// Checks if this span arises from a compiler desugaring of kind `kind`.
   36,659 ( 0.00%)      pub fn is_desugaring(self, kind: DesugaringKind) -> bool {
   31,422 ( 0.00%)          match self.ctxt().outer_expn_data().kind {
        .                       ExpnKind::Desugaring(k) => k == kind,
        .                       _ => false,
        .                   }
   26,185 ( 0.00%)      }
        .           
        .               /// Returns the compiler desugaring that created this span, or `None`
        .               /// if this span is not from a desugaring.
    1,065 ( 0.00%)      pub fn desugaring_kind(self) -> Option<DesugaringKind> {
    1,278 ( 0.00%)          match self.ctxt().outer_expn_data().kind {
        .                       ExpnKind::Desugaring(k) => Some(k),
        .                       _ => None,
        .                   }
      852 ( 0.00%)      }
        .           
        .               /// Checks if a span is "internal" to a macro in which `unsafe`
        .               /// can be used without triggering the `unsafe_code` lint.
        .               //  (that is, a macro marked with `#[allow_internal_unsafe]`).
      928 ( 0.00%)      pub fn allows_unsafe(self) -> bool {
      232 ( 0.00%)          self.ctxt().outer_expn_data().allow_internal_unsafe
      928 ( 0.00%)      }
        .           
        .               pub fn macro_backtrace(mut self) -> impl Iterator<Item = ExpnData> {
        .                   let mut prev_span = DUMMY_SP;
        .                   std::iter::from_fn(move || {
        .                       loop {
        .                           let expn_data = self.ctxt().outer_expn_data();
        .                           if expn_data.is_root() {
        .                               return None;
-- line 752 ----------------------------------------
-- line 767 ----------------------------------------
        .           
        .               /// Returns a `Span` that would enclose both `self` and `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///     ^^^^^^^^^^^^^^^^^^^^
        .               /// ```
  819,511 ( 0.02%)      pub fn to(self, end: Span) -> Span {
        .                   let span_data = self.data();
        .                   let end_data = end.data();
        .                   // FIXME(jseyfried): `self.ctxt` should always equal `end.ctxt` here (cf. issue #23480).
        .                   // Return the macro span on its own to avoid weird diagnostic output. It is preferable to
        .                   // have an incomplete span than a completely nonsensical one.
  146,585 ( 0.00%)          if span_data.ctxt != end_data.ctxt {
    2,417 ( 0.00%)              if span_data.ctxt == SyntaxContext::root() {
        .                           return end;
    2,367 ( 0.00%)              } else if end_data.ctxt == SyntaxContext::root() {
        .                           return self;
        .                       }
        .                       // Both spans fall within a macro.
        .                       // FIXME(estebank): check if it is the *same* macro.
        .                   }
        .                   Span::new(
        .                       cmp::min(span_data.lo, end_data.lo),
        .                       cmp::max(span_data.hi, end_data.hi),
        .                       if span_data.ctxt == SyntaxContext::root() { end_data.ctxt } else { span_data.ctxt },
  511,903 ( 0.01%)              if span_data.parent == end_data.parent { span_data.parent } else { None },
        .                   )
  670,509 ( 0.01%)      }
        .           
        .               /// Returns a `Span` between the end of `self` to the beginning of `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///         ^^^^^^^^^^^^^
        .               /// ```
    2,860 ( 0.00%)      pub fn between(self, end: Span) -> Span {
        .                   let span = self.data();
        .                   let end = end.data();
        .                   Span::new(
        .                       span.hi,
        .                       end.lo,
        .                       if end.ctxt == SyntaxContext::root() { end.ctxt } else { span.ctxt },
    1,820 ( 0.00%)              if span.parent == end.parent { span.parent } else { None },
        .                   )
    2,080 ( 0.00%)      }
        .           
        .               /// Returns a `Span` from the beginning of `self` until the beginning of `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///     ^^^^^^^^^^^^^^^^^
        .               /// ```
    6,743 ( 0.00%)      pub fn until(self, end: Span) -> Span {
        .                   // Most of this function's body is copied from `to`.
        .                   // We can't just do `self.to(end.shrink_to_lo())`,
        .                   // because to also does some magic where it uses min/max so
        .                   // it can handle overlapping spans. Some advanced mis-use of
        .                   // `until` with different ctxts makes this visible.
        .                   let span_data = self.data();
        .                   let end_data = end.data();
        .                   // FIXME(jseyfried): `self.ctxt` should always equal `end.ctxt` here (cf. issue #23480).
        .                   // Return the macro span on its own to avoid weird diagnostic output. It is preferable to
        .                   // have an incomplete span than a completely nonsensical one.
    1,226 ( 0.00%)          if span_data.ctxt != end_data.ctxt {
        .                       if span_data.ctxt == SyntaxContext::root() {
        .                           return end;
        .                       } else if end_data.ctxt == SyntaxContext::root() {
        .                           return self;
        .                       }
        .                       // Both spans fall within a macro.
        .                       // FIXME(estebank): check if it is the *same* macro.
        .                   }
        .                   Span::new(
        .                       span_data.lo,
        .                       end_data.lo,
        .                       if end_data.ctxt == SyntaxContext::root() { end_data.ctxt } else { span_data.ctxt },
    4,291 ( 0.00%)              if span_data.parent == end_data.parent { span_data.parent } else { None },
        .                   )
    5,517 ( 0.00%)      }
        .           
      165 ( 0.00%)      pub fn from_inner(self, inner: InnerSpan) -> Span {
        .                   let span = self.data();
        .                   Span::new(
        .                       span.lo + BytePos::from_usize(inner.start),
        .                       span.lo + BytePos::from_usize(inner.end),
        .                       span.ctxt,
        .                       span.parent,
        .                   )
      105 ( 0.00%)      }
        .           
        .               /// Equivalent of `Span::def_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_def_site_ctxt(self, expn_id: ExpnId) -> Span {
    4,074 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::Opaque)
        .               }
        .           
        .               /// Equivalent of `Span::call_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_call_site_ctxt(self, expn_id: ExpnId) -> Span {
       16 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::Transparent)
        .               }
        .           
        .               /// Equivalent of `Span::mixed_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_mixed_site_ctxt(self, expn_id: ExpnId) -> Span {
       10 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::SemiTransparent)
        .               }
        .           
        .               /// Produces a span with the same location as `self` and context produced by a macro with the
        .               /// given ID and transparency, assuming that macro was defined directly and not produced by
        .               /// some other macro (which is the case for built-in and procedural macros).
   24,600 ( 0.00%)      pub fn with_ctxt_from_mark(self, expn_id: ExpnId, transparency: Transparency) -> Span {
        .                   self.with_ctxt(SyntaxContext::root().apply_mark(expn_id, transparency))
   14,350 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn apply_mark(self, expn_id: ExpnId, transparency: Transparency) -> Span {
        .                   let span = self.data();
  179,271 ( 0.00%)          span.with_ctxt(span.ctxt.apply_mark(expn_id, transparency))
        .               }
        .           
        .               #[inline]
        .               pub fn remove_mark(&mut self) -> ExpnId {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.remove_mark();
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
-- line 897 ----------------------------------------
-- line 901 ----------------------------------------
        .               pub fn adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.adjust(expn_id);
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
        .           
        .               #[inline]
  212,742 ( 0.00%)      pub fn normalize_to_macros_2_0_and_adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
  141,828 ( 0.00%)          let mut span = self.data();
  116,884 ( 0.00%)          let mark = span.ctxt.normalize_to_macros_2_0_and_adjust(expn_id);
  212,742 ( 0.00%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
  235,074 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn glob_adjust(&mut self, expn_id: ExpnId, glob_span: Span) -> Option<Option<ExpnId>> {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.glob_adjust(expn_id, glob_span);
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
        .           
        .               #[inline]
    1,080 ( 0.00%)      pub fn reverse_glob_adjust(
        .                   &mut self,
        .                   expn_id: ExpnId,
        .                   glob_span: Span,
        .               ) -> Option<Option<ExpnId>> {
      720 ( 0.00%)          let mut span = self.data();
      600 ( 0.00%)          let mark = span.ctxt.reverse_glob_adjust(expn_id, glob_span);
    1,080 ( 0.00%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
    1,200 ( 0.00%)      }
        .           
        .               #[inline]
  134,496 ( 0.00%)      pub fn normalize_to_macros_2_0(self) -> Span {
        .                   let span = self.data();
        .                   span.with_ctxt(span.ctxt.normalize_to_macros_2_0())
  117,684 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn normalize_to_macro_rules(self) -> Span {
        .                   let span = self.data();
        .                   span.with_ctxt(span.ctxt.normalize_to_macro_rules())
        .               }
        .           }
        .           
-- line 948 ----------------------------------------
-- line 958 ----------------------------------------
        .           
        .               /// What label should we attach to this span (if any)?
        .               pub label: Option<String>,
        .           }
        .           
        .           impl Default for Span {
        .               fn default() -> Self {
        .                   DUMMY_SP
        2 ( 0.00%)      }
        .           }
        .           
        .           impl<E: Encoder> Encodable<E> for Span {
        .               default fn encode(&self, s: &mut E) -> Result<(), E::Error> {
        .                   let span = self.data();
        .                   s.emit_struct(false, |s| {
        .                       s.emit_struct_field("lo", true, |s| span.lo.encode(s))?;
        .                       s.emit_struct_field("hi", false, |s| span.hi.encode(s))
-- line 974 ----------------------------------------
-- line 990 ----------------------------------------
        .           /// any spans that are debug-printed during the closure's execution.
        .           ///
        .           /// Normally, the global `TyCtxt` is used to retrieve the `SourceMap`
        .           /// (see `rustc_interface::callbacks::span_debug1`). However, some parts
        .           /// of the compiler (e.g. `rustc_parse`) may debug-print `Span`s before
        .           /// a `TyCtxt` is available. In this case, we fall back to
        .           /// the `SourceMap` provided to this function. If that is not available,
        .           /// we fall back to printing the raw `Span` field values.
        9 ( 0.00%)  pub fn with_source_map<T, F: FnOnce() -> T>(source_map: Lrc<SourceMap>, f: F) -> T {
        .               with_session_globals(|session_globals| {
        2 ( 0.00%)          *session_globals.source_map.borrow_mut() = Some(source_map);
        .               });
        .               struct ClearSourceMap;
        .               impl Drop for ClearSourceMap {
        .                   fn drop(&mut self) {
        .                       with_session_globals(|session_globals| {
        1 ( 0.00%)                  session_globals.source_map.borrow_mut().take();
        .                       });
        .                   }
        .               }
        .           
        .               let _guard = ClearSourceMap;
        4 ( 0.00%)      f()
        8 ( 0.00%)  }
        .           
        .           pub fn debug_with_source_map(
        .               span: Span,
        .               f: &mut fmt::Formatter<'_>,
        .               source_map: &SourceMap,
        .           ) -> fmt::Result {
        .               write!(f, "{} ({:?})", source_map.span_to_diagnostic_string(span), span.ctxt())
        .           }
-- line 1021 ----------------------------------------
-- line 1048 ----------------------------------------
        .           
        .           impl MultiSpan {
        .               #[inline]
        .               pub fn new() -> MultiSpan {
        .                   MultiSpan { primary_spans: vec![], span_labels: vec![] }
        .               }
        .           
        .               pub fn from_span(primary_span: Span) -> MultiSpan {
    7,980 ( 0.00%)          MultiSpan { primary_spans: vec![primary_span], span_labels: vec![] }
        .               }
        .           
       90 ( 0.00%)      pub fn from_spans(mut vec: Vec<Span>) -> MultiSpan {
        .                   vec.sort();
    1,480 ( 0.00%)          MultiSpan { primary_spans: vec, span_labels: vec![] }
       90 ( 0.00%)      }
        .           
        .               pub fn push_span_label(&mut self, span: Span, label: String) {
        .                   self.span_labels.push((span, label));
        .               }
        .           
        .               /// Selects the first primary span (if any).
        .               pub fn primary_span(&self) -> Option<Span> {
        .                   self.primary_spans.first().cloned()
      847 ( 0.00%)      }
        .           
        .               /// Returns all primary spans.
        .               pub fn primary_spans(&self) -> &[Span] {
        .                   &self.primary_spans
      195 ( 0.00%)      }
        .           
        .               /// Returns `true` if any of the primary spans are displayable.
        .               pub fn has_primary_spans(&self) -> bool {
        .                   self.primary_spans.iter().any(|sp| !sp.is_dummy())
        .               }
        .           
        .               /// Returns `true` if this contains only a dummy primary span with any hygienic context.
        .               pub fn is_dummy(&self) -> bool {
-- line 1084 ----------------------------------------
-- line 1139 ----------------------------------------
        .           
        .               /// Returns `true` if any of the span labels is displayable.
        .               pub fn has_span_labels(&self) -> bool {
        .                   self.span_labels.iter().any(|(sp, _)| !sp.is_dummy())
        .               }
        .           }
        .           
        .           impl From<Span> for MultiSpan {
    7,980 ( 0.00%)      fn from(span: Span) -> MultiSpan {
        .                   MultiSpan::from_span(span)
    7,980 ( 0.00%)      }
        .           }
        .           
        .           impl From<Vec<Span>> for MultiSpan {
    1,390 ( 0.00%)      fn from(spans: Vec<Span>) -> MultiSpan {
    1,112 ( 0.00%)          MultiSpan::from_spans(spans)
    1,390 ( 0.00%)      }
        .           }
        .           
        .           /// Identifies an offset of a multi-byte character in a `SourceFile`.
        .           #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub struct MultiByteChar {
        .               /// The absolute offset of the character in the `SourceMap`.
        .               pub pos: BytePos,
        .               /// The number of bytes, `>= 2`.
        .               pub bytes: u8,
        .           }
        .           
        .           /// Identifies an offset of a non-narrow character in a `SourceFile`.
      308 ( 0.00%)  #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub enum NonNarrowChar {
        .               /// Represents a zero-width character.
        .               ZeroWidth(BytePos),
        .               /// Represents a wide (full-width) character.
        .               Wide(BytePos),
        .               /// Represents a tab character, represented visually with a width of 4 characters.
        .               Tab(BytePos),
        .           }
-- line 1176 ----------------------------------------
-- line 1201 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           impl Add<BytePos> for NonNarrowChar {
        .               type Output = Self;
        .           
        .               fn add(self, rhs: BytePos) -> Self {
      532 ( 0.00%)          match self {
        .                       NonNarrowChar::ZeroWidth(pos) => NonNarrowChar::ZeroWidth(pos + rhs),
        .                       NonNarrowChar::Wide(pos) => NonNarrowChar::Wide(pos + rhs),
        .                       NonNarrowChar::Tab(pos) => NonNarrowChar::Tab(pos + rhs),
        .                   }
        .               }
        .           }
        .           
        .           impl Sub<BytePos> for NonNarrowChar {
        .               type Output = Self;
        .           
      154 ( 0.00%)      fn sub(self, rhs: BytePos) -> Self {
      532 ( 0.00%)          match self {
        .                       NonNarrowChar::ZeroWidth(pos) => NonNarrowChar::ZeroWidth(pos - rhs),
        .                       NonNarrowChar::Wide(pos) => NonNarrowChar::Wide(pos - rhs),
        .                       NonNarrowChar::Tab(pos) => NonNarrowChar::Tab(pos - rhs),
        .                   }
      462 ( 0.00%)      }
        .           }
        .           
        .           /// Identifies an offset of a character that was normalized away from `SourceFile`.
        .           #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub struct NormalizedPos {
        .               /// The absolute offset of the character in the `SourceMap`.
        .               pub pos: BytePos,
        .               /// The difference between original and normalized string at position.
        .               pub diff: u32,
        .           }
        .           
       12 ( 0.00%)  #[derive(PartialEq, Eq, Clone, Debug)]
        .           pub enum ExternalSource {
        .               /// No external source has to be loaded, since the `SourceFile` represents a local crate.
        .               Unneeded,
        .               Foreign {
        .                   kind: ExternalSourceKind,
        .                   /// This SourceFile's byte-offset within the source_map of its original crate.
        .                   original_start_pos: BytePos,
        .                   /// The end of this SourceFile within the source_map of its original crate.
-- line 1246 ----------------------------------------
-- line 1257 ----------------------------------------
        .               AbsentOk,
        .               /// A failed attempt has been made to load the external source.
        .               AbsentErr,
        .               Unneeded,
        .           }
        .           
        .           impl ExternalSource {
        .               pub fn get_source(&self) -> Option<&Lrc<String>> {
    4,361 ( 0.00%)          match self {
        .                       ExternalSource::Foreign { kind: ExternalSourceKind::Present(ref src), .. } => Some(src),
        .                       _ => None,
        .                   }
        .               }
        .           }
        .           
        .           #[derive(Debug)]
        .           pub struct OffsetOverflowError;
        .           
    1,344 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash, Encodable, Decodable)]
        .           pub enum SourceFileHashAlgorithm {
        .               Md5,
        .               Sha1,
        .               Sha256,
        .           }
        .           
        .           impl FromStr for SourceFileHashAlgorithm {
        .               type Err = ();
-- line 1283 ----------------------------------------
-- line 1290 ----------------------------------------
        .                       _ => Err(()),
        .                   }
        .               }
        .           }
        .           
        .           rustc_data_structures::impl_stable_hash_via_hash!(SourceFileHashAlgorithm);
        .           
        .           /// The hash of the on-disk source file used for debug info.
       24 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Debug)]
    2,688 ( 0.00%)  #[derive(HashStable_Generic, Encodable, Decodable)]
        .           pub struct SourceFileHash {
        .               pub kind: SourceFileHashAlgorithm,
        .               value: [u8; 32],
        .           }
        .           
        .           impl SourceFileHash {
        .               pub fn new(kind: SourceFileHashAlgorithm, src: &str) -> SourceFileHash {
        2 ( 0.00%)          let mut hash = SourceFileHash { kind, value: Default::default() };
        .                   let len = hash.hash_len();
        .                   let value = &mut hash.value[..len];
        .                   let data = src.as_bytes();
        .                   match kind {
        .                       SourceFileHashAlgorithm::Md5 => {
       45 ( 0.00%)                  value.copy_from_slice(&Md5::digest(data));
        .                       }
        .                       SourceFileHashAlgorithm::Sha1 => {
        .                           value.copy_from_slice(&Sha1::digest(data));
        .                       }
        .                       SourceFileHashAlgorithm::Sha256 => {
        .                           value.copy_from_slice(&Sha256::digest(data));
        .                       }
        .                   }
        .                   hash
        .               }
        .           
        .               /// Check if the stored hash matches the hash of the string.
        .               pub fn matches(&self, src: &str) -> bool {
        2 ( 0.00%)          Self::new(self.kind, src) == *self
        .               }
        .           
        .               /// The bytes of the hash.
        .               pub fn hash_bytes(&self) -> &[u8] {
        .                   let len = self.hash_len();
        .                   &self.value[..len]
        .               }
        .           
        .               fn hash_len(&self) -> usize {
       43 ( 0.00%)          match self.kind {
        .                       SourceFileHashAlgorithm::Md5 => 16,
        .                       SourceFileHashAlgorithm::Sha1 => 20,
        .                       SourceFileHashAlgorithm::Sha256 => 32,
        .                   }
        .               }
        .           }
        .           
        .           /// A single source in the [`SourceMap`].
      232 ( 0.00%)  #[derive(Clone)]
        .           pub struct SourceFile {
        .               /// The name of the file that the source came from. Source that doesn't
        .               /// originate from files has names between angle brackets by convention
        .               /// (e.g., `<anon>`).
        .               pub name: FileName,
        .               /// The complete source code.
        4 ( 0.00%)      pub src: Option<Lrc<String>>,
        .               /// The source code's hash.
        .               pub src_hash: SourceFileHash,
        .               /// The external source code (used for external crates, which will have a `None`
        .               /// value as `self.src`.
        .               pub external_src: Lock<ExternalSource>,
        .               /// The start position of this source in the `SourceMap`.
        .               pub start_pos: BytePos,
        .               /// The end position of this source in the `SourceMap`.
-- line 1361 ----------------------------------------
-- line 1364 ----------------------------------------
        .               pub lines: Vec<BytePos>,
        .               /// Locations of multi-byte characters in the source code.
        .               pub multibyte_chars: Vec<MultiByteChar>,
        .               /// Width of characters that are not narrow in the source code.
        .               pub non_narrow_chars: Vec<NonNarrowChar>,
        .               /// Locations of characters removed during normalization.
        .               pub normalized_pos: Vec<NormalizedPos>,
        .               /// A hash of the filename, used for speeding up hashing in incremental compilation.
        4 ( 0.00%)      pub name_hash: u128,
        .               /// Indicates which crate this `SourceFile` was imported from.
        4 ( 0.00%)      pub cnum: CrateNum,
        .           }
        .           
        .           impl<S: Encoder> Encodable<S> for SourceFile {
        .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
        .                   s.emit_struct(false, |s| {
        .                       s.emit_struct_field("name", true, |s| self.name.encode(s))?;
        .                       s.emit_struct_field("src_hash", false, |s| self.src_hash.encode(s))?;
        .                       s.emit_struct_field("start_pos", false, |s| self.start_pos.encode(s))?;
        .                       s.emit_struct_field("end_pos", false, |s| self.end_pos.encode(s))?;
        .                       s.emit_struct_field("lines", false, |s| {
        .                           let lines = &self.lines[..];
        .                           // Store the length.
        .                           s.emit_u32(lines.len() as u32)?;
        .           
       16 ( 0.00%)                  if !lines.is_empty() {
        .                               // In order to preserve some space, we exploit the fact that
        .                               // the lines list is sorted and individual lines are
        .                               // probably not that long. Because of that we can store lines
        .                               // as a difference list, using as little space as possible
        .                               // for the differences.
        .                               let max_line_length = if lines.len() == 1 {
        .                                   0
        .                               } else {
-- line 1397 ----------------------------------------
-- line 1399 ----------------------------------------
        .                                       .array_windows()
        .                                       .map(|&[fst, snd]| snd - fst)
        .                                       .map(|bp| bp.to_usize())
        .                                       .max()
        .                                       .unwrap()
        .                               };
        .           
        .                               let bytes_per_diff: u8 = match max_line_length {
        8 ( 0.00%)                          0..=0xFF => 1,
        .                                   0x100..=0xFFFF => 2,
        .                                   _ => 4,
        .                               };
        .           
        .                               // Encode the number of bytes used per diff.
        .                               bytes_per_diff.encode(s)?;
        .           
        .                               // Encode the first element.
        .                               lines[0].encode(s)?;
        .           
        .                               let diff_iter = lines.array_windows().map(|&[fst, snd]| snd - fst);
        .           
        8 ( 0.00%)                      match bytes_per_diff {
        .                                   1 => {
        .                                       for diff in diff_iter {
        .                                           (diff.0 as u8).encode(s)?
        .                                       }
        .                                   }
        .                                   2 => {
        .                                       for diff in diff_iter {
        .                                           (diff.0 as u16).encode(s)?
-- line 1428 ----------------------------------------
-- line 1436 ----------------------------------------
        .                                   _ => unreachable!(),
        .                               }
        .                           }
        .           
        .                           Ok(())
        .                       })?;
        .                       s.emit_struct_field("multibyte_chars", false, |s| self.multibyte_chars.encode(s))?;
        .                       s.emit_struct_field("non_narrow_chars", false, |s| self.non_narrow_chars.encode(s))?;
       12 ( 0.00%)              s.emit_struct_field("name_hash", false, |s| self.name_hash.encode(s))?;
        .                       s.emit_struct_field("normalized_pos", false, |s| self.normalized_pos.encode(s))?;
       44 ( 0.00%)              s.emit_struct_field("cnum", false, |s| self.cnum.encode(s))
        .                   })
        .               }
        .           }
        .           
        .           impl<D: Decoder> Decodable<D> for SourceFile {
    6,048 ( 0.00%)      fn decode(d: &mut D) -> SourceFile {
        .                   d.read_struct(|d| {
        .                       let name: FileName = d.read_struct_field("name", |d| Decodable::decode(d));
        .                       let src_hash: SourceFileHash =
        .                           d.read_struct_field("src_hash", |d| Decodable::decode(d));
        .                       let start_pos: BytePos = d.read_struct_field("start_pos", |d| Decodable::decode(d));
        .                       let end_pos: BytePos = d.read_struct_field("end_pos", |d| Decodable::decode(d));
        .                       let lines: Vec<BytePos> = d.read_struct_field("lines", |d| {
        .                           let num_lines: u32 = Decodable::decode(d);
      672 ( 0.00%)                  let mut lines = Vec::with_capacity(num_lines as usize);
        .           
        .                           if num_lines > 0 {
        .                               // Read the number of bytes used per diff.
        .                               let bytes_per_diff: u8 = Decodable::decode(d);
        .           
        .                               // Read the first element.
        .                               let mut line_start: BytePos = Decodable::decode(d);
        .                               lines.push(line_start);
        .           
        .                               for _ in 1..num_lines {
  977,812 ( 0.02%)                          let diff = match bytes_per_diff {
        .                                       1 => d.read_u8() as u32,
        .                                       2 => d.read_u16() as u32,
        .                                       4 => d.read_u32(),
        .                                       _ => unreachable!(),
        .                                   };
        .           
        .                                   line_start = line_start + BytePos(diff);
        .           
-- line 1480 ----------------------------------------
-- line 1483 ----------------------------------------
        .                           }
        .           
        .                           lines
        .                       });
        .                       let multibyte_chars: Vec<MultiByteChar> =
        .                           d.read_struct_field("multibyte_chars", |d| Decodable::decode(d));
        .                       let non_narrow_chars: Vec<NonNarrowChar> =
        .                           d.read_struct_field("non_narrow_chars", |d| Decodable::decode(d));
    1,344 ( 0.00%)              let name_hash: u128 = d.read_struct_field("name_hash", |d| Decodable::decode(d));
        .                       let normalized_pos: Vec<NormalizedPos> =
        .                           d.read_struct_field("normalized_pos", |d| Decodable::decode(d));
        .                       let cnum: CrateNum = d.read_struct_field("cnum", |d| Decodable::decode(d));
    7,392 ( 0.00%)              SourceFile {
    5,376 ( 0.00%)                  name,
        .                           start_pos,
        .                           end_pos,
        .                           src: None,
    2,688 ( 0.00%)                  src_hash,
        .                           // Unused - the metadata decoder will construct
        .                           // a new SourceFile, filling in `external_src` properly
        .                           external_src: Lock::new(ExternalSource::Unneeded),
    2,688 ( 0.00%)                  lines,
    2,688 ( 0.00%)                  multibyte_chars,
    2,688 ( 0.00%)                  non_narrow_chars,
    2,688 ( 0.00%)                  normalized_pos,
        .                           name_hash,
        .                           cnum,
        .                       }
        .                   })
    6,048 ( 0.00%)      }
        .           }
        .           
        .           impl fmt::Debug for SourceFile {
        .               fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   write!(fmt, "SourceFile({:?})", self.name)
        .               }
        .           }
        .           
        .           impl SourceFile {
      143 ( 0.00%)      pub fn new(
        .                   name: FileName,
        .                   mut src: String,
        .                   start_pos: BytePos,
        .                   hash_kind: SourceFileHashAlgorithm,
        .               ) -> Self {
        .                   // Compute the file hash before any normalization.
        .                   let src_hash = SourceFileHash::new(hash_kind, &src);
       39 ( 0.00%)          let normalized_pos = normalize_src(&mut src, start_pos);
        .           
        .                   let name_hash = {
        .                       let mut hasher: StableHasher = StableHasher::new();
       26 ( 0.00%)              name.hash(&mut hasher);
        .                       hasher.finish::<u128>()
        .                   };
       26 ( 0.00%)          let end_pos = start_pos.to_usize() + src.len();
       39 ( 0.00%)          assert!(end_pos <= u32::MAX as usize);
        .           
      156 ( 0.00%)          let (lines, multibyte_chars, non_narrow_chars) =
       26 ( 0.00%)              analyze_source_file::analyze_source_file(&src, start_pos);
        .           
      221 ( 0.00%)          SourceFile {
        .                       name,
        .                       src: Some(Lrc::new(src)),
      143 ( 0.00%)              src_hash,
        .                       external_src: Lock::new(ExternalSource::Unneeded),
        .                       start_pos,
        .                       end_pos: Pos::from_usize(end_pos),
       52 ( 0.00%)              lines,
       52 ( 0.00%)              multibyte_chars,
       52 ( 0.00%)              non_narrow_chars,
       52 ( 0.00%)              normalized_pos,
        .                       name_hash,
        .                       cnum: LOCAL_CRATE,
        .                   }
      117 ( 0.00%)      }
        .           
        .               /// Returns the `BytePos` of the beginning of the current line.
        .               pub fn line_begin_pos(&self, pos: BytePos) -> BytePos {
        .                   let line_index = self.lookup_line(pos).unwrap();
        .                   self.lines[line_index]
        .               }
        .           
        .               /// Add externally loaded source.
        .               /// If the hash of the input doesn't match or no input is supplied via None,
        .               /// it is interpreted as an error and the corresponding enum variant is set.
        .               /// The return value signifies whether some kind of source is present.
    9,149 ( 0.00%)      pub fn add_external_src<F>(&self, get_src: F) -> bool
        .               where
        .                   F: FnOnce() -> Option<String>,
        .               {
    1,887 ( 0.00%)          if matches!(
    2,614 ( 0.00%)              *self.external_src.borrow(),
        .                       ExternalSource::Foreign { kind: ExternalSourceKind::AbsentOk, .. }
        .                   ) {
        2 ( 0.00%)              let src = get_src();
        .                       let mut external_src = self.external_src.borrow_mut();
        .                       // Check that no-one else have provided the source while we were getting it
        6 ( 0.00%)              if let ExternalSource::Foreign {
        .                           kind: src_kind @ ExternalSourceKind::AbsentOk, ..
        .                       } = &mut *external_src
        .                       {
       10 ( 0.00%)                  if let Some(mut src) = src {
        .                               // The src_hash needs to be computed on the pre-normalized src.
        2 ( 0.00%)                      if self.src_hash.matches(&src) {
        6 ( 0.00%)                          normalize_src(&mut src, BytePos::from_usize(0));
       16 ( 0.00%)                          *src_kind = ExternalSourceKind::Present(Lrc::new(src));
        .                                   return true;
        .                               }
        .                           } else {
        .                               *src_kind = ExternalSourceKind::AbsentErr;
        .                           }
        .           
        .                           false
        .                       } else {
        .                           self.src.is_some() || external_src.get_source().is_some()
        .                       }
        .                   } else {
    1,305 ( 0.00%)              self.src.is_some() || self.external_src.borrow().get_source().is_some()
        .                   }
   11,763 ( 0.00%)      }
        .           
        .               /// Gets a line from the list of pre-computed line-beginnings.
        .               /// The line number here is 0-based.
        .               pub fn get_line(&self, line_number: usize) -> Option<Cow<'_, str>> {
        .                   fn get_until_newline(src: &str, begin: usize) -> &str {
        .                       // We can't use `lines.get(line_number+1)` because we might
        .                       // be parsing when we call this function and thus the current
        .                       // line is the last one we have line info for.
-- line 1610 ----------------------------------------
-- line 1627 ----------------------------------------
        .                       Some(Cow::Owned(String::from(get_until_newline(src, begin))))
        .                   } else {
        .                       None
        .                   }
        .               }
        .           
        .               pub fn is_real_file(&self) -> bool {
        .                   self.name.is_real()
      684 ( 0.00%)      }
        .           
        .               pub fn is_imported(&self) -> bool {
        .                   self.src.is_none()
   43,339 ( 0.00%)      }
        .           
        .               pub fn count_lines(&self) -> usize {
        .                   self.lines.len()
        .               }
        .           
        .               /// Finds the line containing the given position. The return value is the
        .               /// index into the `lines` array of this `SourceFile`, not the 1-based line
        .               /// number. If the source_file is empty or the position is located before the
        .               /// first line, `None` is returned.
        .               pub fn lookup_line(&self, pos: BytePos) -> Option<usize> {
   13,176 ( 0.00%)          match self.lines.binary_search(&pos) {
        .                       Ok(idx) => Some(idx),
        .                       Err(0) => None,
        .                       Err(idx) => Some(idx - 1),
        .                   }
        .               }
        .           
        .               pub fn line_bounds(&self, line_index: usize) -> Range<BytePos> {
   36,202 ( 0.00%)          if self.is_empty() {
        .                       return self.start_pos..self.end_pos;
        .                   }
        .           
   24,447 ( 0.00%)          assert!(line_index < self.lines.len());
   34,779 ( 0.00%)          if line_index == (self.lines.len() - 1) {
      228 ( 0.00%)              self.lines[line_index]..self.end_pos
        .                   } else {
   23,028 ( 0.00%)              self.lines[line_index]..self.lines[line_index + 1]
        .                   }
        .               }
        .           
        .               /// Returns whether or not the file contains the given `SourceMap` byte
        .               /// position. The position one past the end of the file is considered to be
        .               /// contained by the file. This implies that files for which `is_empty`
        .               /// returns true still contain one byte position according to this function.
        .               #[inline]
-- line 1674 ----------------------------------------
-- line 1692 ----------------------------------------
        .                       Err(i) if i == 0 => 0,
        .                       Err(i) => self.normalized_pos[i - 1].diff,
        .                   };
        .           
        .                   BytePos::from_u32(pos.0 - self.start_pos.0 + diff)
        .               }
        .           
        .               /// Converts an absolute `BytePos` to a `CharPos` relative to the `SourceFile`.
       10 ( 0.00%)      pub fn bytepos_to_file_charpos(&self, bpos: BytePos) -> CharPos {
        .                   // The number of extra bytes due to multibyte chars in the `SourceFile`.
        .                   let mut total_extra_bytes = 0;
        .           
       30 ( 0.00%)          for mbc in self.multibyte_chars.iter() {
        .                       debug!("{}-byte char at {:?}", mbc.bytes, mbc.pos);
        .                       if mbc.pos < bpos {
        .                           // Every character is at least one byte, so we only
        .                           // count the actual extra bytes.
        .                           total_extra_bytes += mbc.bytes as u32 - 1;
        .                           // We should never see a byte position in the middle of a
        .                           // character.
        .                           assert!(bpos.to_u32() >= mbc.pos.to_u32() + mbc.bytes as u32);
        .                       } else {
        .                           break;
        .                       }
        .                   }
        .           
       60 ( 0.00%)          assert!(self.start_pos.to_u32() + total_extra_bytes <= bpos.to_u32());
       50 ( 0.00%)          CharPos(bpos.to_usize() - self.start_pos.to_usize() - total_extra_bytes as usize)
       20 ( 0.00%)      }
        .           
        .               /// Looks up the file's (1-based) line number and (0-based `CharPos`) column offset, for a
        .               /// given `BytePos`.
       35 ( 0.00%)      pub fn lookup_file_pos(&self, pos: BytePos) -> (usize, CharPos) {
       10 ( 0.00%)          let chpos = self.bytepos_to_file_charpos(pos);
        4 ( 0.00%)          match self.lookup_line(pos) {
        .                       Some(a) => {
        .                           let line = a + 1; // Line numbers start at 1
        5 ( 0.00%)                  let linebpos = self.lines[a];
       10 ( 0.00%)                  let linechpos = self.bytepos_to_file_charpos(linebpos);
        .                           let col = chpos - linechpos;
        .                           debug!("byte pos {:?} is on the line at byte pos {:?}", pos, linebpos);
        .                           debug!("char pos {:?} is on the line at char pos {:?}", chpos, linechpos);
        .                           debug!("byte is on line: {}", line);
        5 ( 0.00%)                  assert!(chpos >= linechpos);
        .                           (line, col)
        .                       }
        .                       None => (0, chpos),
        .                   }
       40 ( 0.00%)      }
        .           
        .               /// Looks up the file's (1-based) line number, (0-based `CharPos`) column offset, and (0-based)
        .               /// column offset when displayed, for a given `BytePos`.
       40 ( 0.00%)      pub fn lookup_file_pos_with_col_display(&self, pos: BytePos) -> (usize, CharPos, usize) {
       15 ( 0.00%)          let (line, col_or_chpos) = self.lookup_file_pos(pos);
       10 ( 0.00%)          if line > 0 {
        .                       let col = col_or_chpos;
        5 ( 0.00%)              let linebpos = self.lines[line - 1];
        .                       let col_display = {
        .                           let start_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&linebpos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let end_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&pos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let special_chars = end_width_idx - start_width_idx;
        .                           let non_narrow: usize = self.non_narrow_chars[start_width_idx..end_width_idx]
        .                               .iter()
        .                               .map(|x| x.width())
        .                               .sum();
       25 ( 0.00%)                  col.0 - special_chars + non_narrow
        .                       };
        .                       (line, col, col_display)
        .                   } else {
        .                       let chpos = col_or_chpos;
        .                       let col_display = {
        .                           let end_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&pos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let non_narrow: usize =
        .                               self.non_narrow_chars[0..end_width_idx].iter().map(|x| x.width()).sum();
        .                           chpos.0 - end_width_idx + non_narrow
        .                       };
        .                       (0, chpos, col_display)
        .                   }
       35 ( 0.00%)      }
        .           }
        .           
        .           /// Normalizes the source code and records the normalizations.
      150 ( 0.00%)  fn normalize_src(src: &mut String, start_pos: BytePos) -> Vec<NormalizedPos> {
        .               let mut normalized_pos = vec![];
        .               remove_bom(src, &mut normalized_pos);
        .               normalize_newlines(src, &mut normalized_pos);
        .           
        .               // Offset all the positions by start_pos to match the final file positions.
        .               for np in &mut normalized_pos {
        .                   np.pos.0 += start_pos.0;
        .               }
        .           
        .               normalized_pos
      135 ( 0.00%)  }
        .           
        .           /// Removes UTF-8 BOM, if any.
        .           fn remove_bom(src: &mut String, normalized_pos: &mut Vec<NormalizedPos>) {
       13 ( 0.00%)      if src.starts_with('\u{feff}') {
        .                   src.drain(..3);
        .                   normalized_pos.push(NormalizedPos { pos: BytePos(0), diff: 3 });
        .               }
        .           }
        .           
        .           /// Replaces `\r\n` with `\n` in-place in `src`.
        .           ///
        .           /// Returns error if there's a lone `\r` in the string.
        .           fn normalize_newlines(src: &mut String, normalized_pos: &mut Vec<NormalizedPos>) {
       15 ( 0.00%)      if !src.as_bytes().contains(&b'\r') {
        .                   return;
        .               }
        .           
        .               // We replace `\r\n` with `\n` in-place, which doesn't break utf-8 encoding.
        .               // While we *can* call `as_mut_vec` and do surgery on the live string
        .               // directly, let's rather steal the contents of `src`. This makes the code
        .               // safe even if a panic occurs.
        .           
-- line 1816 ----------------------------------------
-- line 1877 ----------------------------------------
        .               (
        .                   $(
        .                       $(#[$attr:meta])*
        .                       $vis:vis struct $ident:ident($inner_vis:vis $inner_ty:ty);
        .                   )*
        .               ) => {
        .                   $(
        .                       $(#[$attr])*
   80,306 ( 0.00%)              $vis struct $ident($inner_vis $inner_ty);
        .           
        .                       impl Pos for $ident {
        .                           #[inline(always)]
        .                           fn from_usize(n: usize) -> $ident {
      846 ( 0.00%)                      $ident(n as $inner_ty)
        .                           }
        .           
        .                           #[inline(always)]
        .                           fn to_usize(&self) -> usize {
   18,116 ( 0.00%)                      self.0 as usize
        .                           }
        .           
        .                           #[inline(always)]
        .                           fn from_u32(n: u32) -> $ident {
        .                               $ident(n as $inner_ty)
        .                           }
        .           
        .                           #[inline(always)]
-- line 1903 ----------------------------------------
-- line 1906 ----------------------------------------
        .                           }
        .                       }
        .           
        .                       impl Add for $ident {
        .                           type Output = $ident;
        .           
        .                           #[inline(always)]
        .                           fn add(self, rhs: $ident) -> $ident {
1,863,686 ( 0.04%)                      $ident(self.0 + rhs.0)
        .                           }
        .                       }
        .           
        .                       impl Sub for $ident {
        .                           type Output = $ident;
        .           
        .                           #[inline(always)]
        .                           fn sub(self, rhs: $ident) -> $ident {
2,168,123 ( 0.05%)                      $ident(self.0 - rhs.0)
        .                           }
        .                       }
        .                   )*
        .               };
        .           }
        .           
        .           impl_pos! {
        .               /// A byte offset.
-- line 1931 ----------------------------------------
-- line 1946 ----------------------------------------
        .           impl<S: rustc_serialize::Encoder> Encodable<S> for BytePos {
        .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
        .                   s.emit_u32(self.0)
        .               }
        .           }
        .           
        .           impl<D: rustc_serialize::Decoder> Decodable<D> for BytePos {
        .               fn decode(d: &mut D) -> BytePos {
  180,472 ( 0.00%)          BytePos(d.read_u32())
        .               }
        .           }
        .           
        .           // _____________________________________________________________________________
        .           // Loc, SourceFileAndLine, SourceFileAndBytePos
        .           //
        .           
        .           /// A source code location used for error reporting.
-- line 1962 ----------------------------------------
-- line 2037 ----------------------------------------
        .               pub source_len: usize,
        .               pub begin_pos: BytePos,
        .               pub end_pos: BytePos,
        .           }
        .           
        .           /// Range inside of a `Span` used for diagnostics when we only have access to relative positions.
        .           #[derive(Copy, Clone, PartialEq, Eq, Debug)]
        .           pub struct InnerSpan {
        1 ( 0.00%)      pub start: usize,
        .               pub end: usize,
        .           }
        .           
        .           impl InnerSpan {
       84 ( 0.00%)      pub fn new(start: usize, end: usize) -> InnerSpan {
        .                   InnerSpan { start, end }
       42 ( 0.00%)      }
        .           }
        .           
        .           /// Requirements for a `StableHashingContext` to be used in this crate.
        .           ///
        .           /// This is a hack to allow using the [`HashStable_Generic`] derive macro
        .           /// instead of implementing everything in rustc_middle.
        .           pub trait HashStableContext {
        .               fn def_path_hash(&self, def_id: DefId) -> DefPathHash;
-- line 2060 ----------------------------------------
-- line 2079 ----------------------------------------
        .               /// offsets into the `SourceMap`). Instead, we hash the (file name, line, column)
        .               /// triple, which stays the same even if the containing `SourceFile` has moved
        .               /// within the `SourceMap`.
        .               ///
        .               /// Also note that we are hashing byte offsets for the column, not unicode
        .               /// codepoint offsets. For the purpose of the hash that's sufficient.
        .               /// Also, hashing filenames is expensive so we avoid doing it twice when the
        .               /// span starts and ends in the same file, which is almost always the case.
1,124,396 ( 0.02%)      fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {
        .                   const TAG_VALID_SPAN: u8 = 0;
        .                   const TAG_INVALID_SPAN: u8 = 1;
        .                   const TAG_RELATIVE_SPAN: u8 = 2;
        .           
  202,030 ( 0.00%)          if !ctx.hash_spans() {
        .                       return;
        .                   }
        .           
  922,366 ( 0.02%)          let span = self.data_untracked();
  357,678 ( 0.01%)          span.ctxt.hash_stable(ctx, hasher);
  481,884 ( 0.01%)          span.parent.hash_stable(ctx, hasher);
        .           
  324,346 ( 0.01%)          if span.is_dummy() {
        .                       Hash::hash(&TAG_INVALID_SPAN, hasher);
        .                       return;
        .                   }
        .           
  315,076 ( 0.01%)          if let Some(parent) = span.parent {
        .                       let def_span = ctx.def_span(parent).data_untracked();
        .                       if def_span.contains(span) {
        .                           // This span is enclosed in a definition: only hash the relative position.
        .                           Hash::hash(&TAG_RELATIVE_SPAN, hasher);
        .                           (span.lo - def_span.lo).to_u32().hash_stable(ctx, hasher);
        .                           (span.hi - def_span.lo).to_u32().hash_stable(ctx, hasher);
        .                           return;
        .                       }
        .                   }
        .           
        .                   // If this is not an empty or invalid span, we want to hash the last
        .                   // position that belongs to it, as opposed to hashing the first
        .                   // position past it.
  629,875 ( 0.01%)          let (file, line_lo, col_lo, line_hi, col_hi) = match ctx.span_data_to_lines_and_cols(&span)
        .                   {
  314,522 ( 0.01%)              Some(pos) => pos,
        .                       None => {
        .                           Hash::hash(&TAG_INVALID_SPAN, hasher);
        .                           return;
        .                       }
        .                   };
        .           
        .                   Hash::hash(&TAG_VALID_SPAN, hasher);
        .                   // We truncate the stable ID hash and line and column numbers. The chances
-- line 2129 ----------------------------------------
-- line 2134 ----------------------------------------
        .                   // hash only the length, for example, then two otherwise equal spans with
        .                   // different end locations will have the same hash. This can cause a problem
        .                   // during incremental compilation wherein a previous result for a query that
        .                   // depends on the end location of a span will be incorrectly reused when the
        .                   // end location of the span it depends on has changed (see issue #74890). A
        .                   // similar analysis applies if some query depends specifically on the length
        .                   // of the span, but we only hash the end location. So hash both.
        .           
  157,261 ( 0.00%)          let col_lo_trunc = (col_lo.0 as u64) & 0xFF;
        .                   let line_lo_trunc = ((line_lo as u64) & 0xFF_FF_FF) << 8;
        .                   let col_hi_trunc = (col_hi.0 as u64) & 0xFF << 32;
        .                   let line_hi_trunc = ((line_hi as u64) & 0xFF_FF_FF) << 40;
        .                   let col_line = col_lo_trunc | line_lo_trunc | col_hi_trunc | line_hi_trunc;
  157,261 ( 0.00%)          let len = (span.hi - span.lo).0;
        .                   Hash::hash(&col_line, hasher);
        .                   Hash::hash(&len, hasher);
1,285,024 ( 0.03%)      }
        .           }

3,464,559 ( 0.07%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lexer/src/unescape.rs
--------------------------------------------------------------------------------
Ir                 

-- line 73 ----------------------------------------
        .                       EscapeError::UnskippedWhitespaceWarning | EscapeError::MultipleSkippedLinesWarning
        .                   )
        .               }
        .           }
        .           
        .           /// Takes a contents of a literal (without quotes) and produces a
        .           /// sequence of escaped characters or errors.
        .           /// Values are returned through invoking of the provided callback.
   20,898 ( 0.00%)  pub fn unescape_literal<F>(literal_text: &str, mode: Mode, callback: &mut F)
        .           where
        .               F: FnMut(Range<usize>, Result<char, EscapeError>),
        .           {
        .               match mode {
        .                   Mode::Char | Mode::Byte => {
        .                       let mut chars = literal_text.chars();
        .                       let result = unescape_char_or_byte(&mut chars, mode);
        .                       // The Chars iterator moved forward.
-- line 89 ----------------------------------------
-- line 91 ----------------------------------------
        .                   }
        .                   Mode::Str | Mode::ByteStr => unescape_str_or_byte_str(literal_text, mode, callback),
        .                   // NOTE: Raw strings do not perform any explicit character escaping, here we
        .                   // only translate CRLF to LF and produce errors on bare CR.
        .                   Mode::RawStr | Mode::RawByteStr => {
        .                       unescape_raw_str_or_byte_str(literal_text, mode, callback)
        .                   }
        .               }
    9,288 ( 0.00%)  }
        .           
        .           /// Takes a contents of a byte, byte string or raw byte string (without quotes)
        .           /// and produces a sequence of bytes or errors.
        .           /// Values are returned through invoking of the provided callback.
    2,926 ( 0.00%)  pub fn unescape_byte_literal<F>(literal_text: &str, mode: Mode, callback: &mut F)
        .           where
        .               F: FnMut(Range<usize>, Result<u8, EscapeError>),
        .           {
    1,064 ( 0.00%)      assert!(mode.is_bytes());
        .               unescape_literal(literal_text, mode, &mut |range, result| {
        .                   callback(range, result.map(byte_from_char));
        .               })
    2,128 ( 0.00%)  }
        .           
        .           /// Takes a contents of a char literal (without quotes), and returns an
        .           /// unescaped char or an error
        .           pub fn unescape_char(literal_text: &str) -> Result<char, (usize, EscapeError)> {
        .               let mut chars = literal_text.chars();
        .               unescape_char_or_byte(&mut chars, Mode::Char)
        .                   .map_err(|err| (literal_text.len() - chars.as_str().len(), err))
        .           }
-- line 120 ----------------------------------------
-- line 136 ----------------------------------------
        .               Byte,
        .               ByteStr,
        .               RawStr,
        .               RawByteStr,
        .           }
        .           
        .           impl Mode {
        .               pub fn in_single_quotes(self) -> bool {
    2,854 ( 0.00%)          match self {
        .                       Mode::Char | Mode::Byte => true,
        .                       Mode::Str | Mode::ByteStr | Mode::RawStr | Mode::RawByteStr => false,
        .                   }
        .               }
        .           
    2,854 ( 0.00%)      pub fn in_double_quotes(self) -> bool {
        .                   !self.in_single_quotes()
    1,427 ( 0.00%)      }
        .           
   12,748 ( 0.00%)      pub fn is_bytes(self) -> bool {
   12,748 ( 0.00%)          match self {
        .                       Mode::Byte | Mode::ByteStr | Mode::RawByteStr => true,
        .                       Mode::Char | Mode::Str | Mode::RawStr => false,
        .                   }
    6,374 ( 0.00%)      }
        .           }
        .           
4,843,660 ( 0.10%)  fn scan_escape(first_char: char, chars: &mut Chars<'_>, mode: Mode) -> Result<char, EscapeError> {
2,286,984 ( 0.05%)      if first_char != '\\' {
        .                   // Previous character was not a slash, and we don't expect it to be
        .                   // an escape-only character.
        .                   return match first_char {
        .                       '\t' | '\n' => Err(EscapeError::EscapeOnlyChar),
        .                       '\r' => Err(EscapeError::BareCarriageReturn),
        .                       '\'' if mode.in_single_quotes() => Err(EscapeError::EscapeOnlyChar),
        .                       '"' if mode.in_double_quotes() => Err(EscapeError::EscapeOnlyChar),
        .                       _ => {
  472,220 ( 0.01%)                  if mode.is_bytes() && !first_char.is_ascii() {
        .                               // Byte literal can't be a non-ascii character.
        .                               return Err(EscapeError::NonAsciiCharInByte);
        .                           }
        .                           Ok(first_char)
        .                       }
        .                   };
        .               }
        .           
        .               // Previous character is '\\', try to unescape it.
        .           
   36,438 ( 0.00%)      let second_char = chars.next().ok_or(EscapeError::LoneSlash)?;
        .           
        .               let res = match second_char {
        .                   '"' => '"',
        .                   'n' => '\n',
        .                   'r' => '\r',
        .                   't' => '\t',
        .                   '\\' => '\\',
        .                   '\'' => '\'',
        .                   '0' => '\0',
        .           
        .                   'x' => {
        .                       // Parse hexadecimal character code.
        .           
    1,330 ( 0.00%)              let hi = chars.next().ok_or(EscapeError::TooShortHexEscape)?;
        .                       let hi = hi.to_digit(16).ok_or(EscapeError::InvalidCharInHexEscape)?;
        .           
      798 ( 0.00%)              let lo = chars.next().ok_or(EscapeError::TooShortHexEscape)?;
        .                       let lo = lo.to_digit(16).ok_or(EscapeError::InvalidCharInHexEscape)?;
        .           
    1,862 ( 0.00%)              let value = hi * 16 + lo;
        .           
        .                       // For a byte literal verify that it is within ASCII range.
      266 ( 0.00%)              if !mode.is_bytes() && !is_ascii(value) {
        .                           return Err(EscapeError::OutOfRangeHexEscape);
        .                       }
        .                       let value = value as u8;
        .           
        .                       value as char
        .                   }
        .           
        .                   'u' => {
-- line 214 ----------------------------------------
-- line 263 ----------------------------------------
        .                                   value = value * 16 + digit;
        .                               }
        .                           };
        .                       }
        .                   }
        .                   _ => return Err(EscapeError::InvalidEscape),
        .               };
        .               Ok(res)
5,812,392 ( 0.12%)  }
        .           
        .           fn unescape_char_or_byte(chars: &mut Chars<'_>, mode: Mode) -> Result<char, EscapeError> {
        .               let first_char = chars.next().ok_or(EscapeError::ZeroChars)?;
        .               let res = scan_escape(first_char, chars, mode)?;
        .               if chars.next().is_some() {
        .                   return Err(EscapeError::MoreThanOneChar);
        .               }
        .               Ok(res)
-- line 279 ----------------------------------------
-- line 280 ----------------------------------------
        .           }
        .           
        .           /// Takes a contents of a string literal (without quotes) and produces a
        .           /// sequence of escaped characters or errors.
        .           fn unescape_str_or_byte_str<F>(src: &str, mode: Mode, callback: &mut F)
        .           where
        .               F: FnMut(Range<usize>, Result<char, EscapeError>),
        .           {
    4,926 ( 0.00%)      assert!(mode.in_double_quotes());
        .               let initial_len = src.len();
    1,305 ( 0.00%)      let mut chars = src.chars();
        .               while let Some(first_char) = chars.next() {
2,421,835 ( 0.05%)          let start = initial_len - chars.as_str().len() - first_char.len_utf8();
        .           
2,857,614 ( 0.06%)          let unescaped_char = match first_char {
        .                       '\\' => {
        .                           let second_char = chars.clone().next();
   24,294 ( 0.00%)                  match second_char {
        .                               Some('\n') => {
        .                                   // Rust language specification requires us to skip whitespaces
        .                                   // if unescaped '\' character is followed by '\n'.
        .                                   // For details see [Rust language reference]
        .                                   // (https://doc.rust-lang.org/reference/tokens.html#string-literals).
        .                                   skip_ascii_whitespace(&mut chars, start, callback);
        .                                   continue;
        .                               }
   12,146 ( 0.00%)                      _ => scan_escape(first_char, &mut chars, mode),
        .                           }
        .                       }
        .                       '\n' => Ok('\n'),
        .                       '\t' => Ok('\t'),
        .                       _ => scan_escape(first_char, &mut chars, mode),
        .                   };
  969,517 ( 0.02%)          let end = initial_len - chars.as_str().len();
1,460,948 ( 0.03%)          callback(start..end, unescaped_char);
        .               }
        .           
        .               fn skip_ascii_whitespace<F>(chars: &mut Chars<'_>, start: usize, callback: &mut F)
        .               where
        .                   F: FnMut(Range<usize>, Result<char, EscapeError>),
        .               {
        .                   let tail = chars.as_str();
        .                   let first_non_space = tail
        .                       .bytes()
       47 ( 0.00%)              .position(|b| b != b' ' && b != b'\t' && b != b'\n' && b != b'\r')
        .                       .unwrap_or(tail.len());
        2 ( 0.00%)          if tail[1..first_non_space].contains('\n') {
        .                       // The +1 accounts for the escaping slash.
        .                       let end = start + first_non_space + 1;
        .                       callback(start..end, Err(EscapeError::MultipleSkippedLinesWarning));
        .                   }
        .                   let tail = &tail[first_non_space..];
        .                   if let Some(c) = tail.chars().nth(0) {
        .                       // For error reporting, we would like the span to contain the character that was not
        .                       // skipped.  The +1 is necessary to account for the leading \ that started the escape.
        6 ( 0.00%)              let end = start + first_non_space + c.len_utf8() + 1;
        .                       if c.is_whitespace() {
        .                           callback(start..end, Err(EscapeError::UnskippedWhitespaceWarning));
        .                       }
        .                   }
        3 ( 0.00%)          *chars = tail.chars();
        .               }
        .           }
        .           
        .           /// Takes a contents of a string literal (without quotes) and produces a
        .           /// sequence of characters or errors.
        .           /// NOTE: Raw strings do not perform any explicit character escaping, here we
        .           /// only translate CRLF to LF and produce errors on bare CR.
        .           fn unescape_raw_str_or_byte_str<F>(literal_text: &str, mode: Mode, callback: &mut F)
        .           where
        .               F: FnMut(Range<usize>, Result<char, EscapeError>),
        .           {
    1,198 ( 0.00%)      assert!(mode.in_double_quotes());
        .               let initial_len = literal_text.len();
        .           
        .               let mut chars = literal_text.chars();
        .               while let Some(curr) = chars.next() {
   30,540 ( 0.00%)          let start = initial_len - chars.as_str().len() - curr.len_utf8();
        .           
   12,216 ( 0.00%)          let result = match curr {
        .                       '\r' => Err(EscapeError::BareCarriageReturnInRawString),
   18,324 ( 0.00%)              c if mode.is_bytes() && !c.is_ascii() => Err(EscapeError::NonAsciiCharInByteString),
        .                       c => Ok(c),
        .                   };
        .                   let end = initial_len - chars.as_str().len();
        .           
   67,188 ( 0.00%)          callback(start..end, result);
        .               }
        .           }
        .           
        .           fn byte_from_char(c: char) -> u8 {
        .               let res = c as u32;
    3,560 ( 0.00%)      assert!(res <= u8::MAX as u32, "guaranteed because of Mode::ByteStr");
        .               res as u8
    3,560 ( 0.00%)  }
        .           
        .           fn is_ascii(x: u32) -> bool {
      266 ( 0.00%)      x <= 0x7F
        .           }

4,823,825 ( 0.10%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lexer/src/unescape.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs
--------------------------------------------------------------------------------
Ir                 

-- line 118 ----------------------------------------
        .               stability: InternedSet<'tcx, attr::Stability>,
        .           
        .               /// `#[rustc_const_stable]` and `#[rustc_const_unstable]` attributes
        .               const_stability: InternedSet<'tcx, attr::ConstStability>,
        .           }
        .           
        .           impl<'tcx> CtxtInterners<'tcx> {
        .               fn new(arena: &'tcx WorkerLocal<Arena<'tcx>>) -> CtxtInterners<'tcx> {
       17 ( 0.00%)          CtxtInterners {
        .                       arena,
        .                       type_: Default::default(),
        .                       type_list: Default::default(),
        .                       substs: Default::default(),
        .                       region: Default::default(),
        .                       poly_existential_predicates: Default::default(),
        .                       canonical_var_infos: Default::default(),
        .                       predicate: Default::default(),
-- line 134 ----------------------------------------
-- line 143 ----------------------------------------
        .                       stability: Default::default(),
        .                       const_stability: Default::default(),
        .                   }
        .               }
        .           
        .               /// Interns a type.
        .               #[allow(rustc::usage_of_ty_tykind)]
        .               #[inline(never)]
4,114,224 ( 0.09%)      fn intern_ty(&self, kind: TyKind<'tcx>) -> Ty<'tcx> {
        .                   self.type_
2,571,390 ( 0.05%)              .intern(kind, |kind| {
  109,446 ( 0.00%)                  let flags = super::flags::FlagComputation::for_kind(&kind);
        .           
        .                           let ty_struct = TyS {
  218,892 ( 0.00%)                      kind,
        .                               flags: flags.flags,
        .                               outer_exclusive_binder: flags.outer_exclusive_binder,
        .                           };
        .           
        .                           Interned(self.arena.alloc(ty_struct))
        .                       })
        .                       .0
4,628,502 ( 0.10%)      }
        .           
        .               #[inline(never)]
1,415,504 ( 0.03%)      fn intern_predicate(
        .                   &self,
        .                   kind: Binder<'tcx, PredicateKind<'tcx>>,
        .               ) -> &'tcx PredicateInner<'tcx> {
        .                   self.predicate
1,238,566 ( 0.03%)              .intern(kind, |kind| {
  240,402 ( 0.01%)                  let flags = super::flags::FlagComputation::for_predicate(kind);
        .           
        .                           let predicate_struct = PredicateInner {
        .                               kind,
        .                               flags: flags.flags,
        .                               outer_exclusive_binder: flags.outer_exclusive_binder,
        .                           };
        .           
        .                           Interned(self.arena.alloc(predicate_struct))
        .                       })
        .                       .0
1,592,442 ( 0.03%)      }
        .           }
        .           
        .           pub struct CommonTypes<'tcx> {
        .               pub unit: Ty<'tcx>,
        .               pub bool: Ty<'tcx>,
        .               pub char: Ty<'tcx>,
        .               pub isize: Ty<'tcx>,
        .               pub i8: Ty<'tcx>,
-- line 193 ----------------------------------------
-- line 237 ----------------------------------------
        .           /// safely used as a key in the maps of a TypeckResults. For that to be
        .           /// the case, the HirId must have the same `owner` as all the other IDs in
        .           /// this table (signified by `hir_owner`). Otherwise the HirId
        .           /// would be in a different frame of reference and using its `local_id`
        .           /// would result in lookup errors, or worse, in silently wrong data being
        .           /// stored/returned.
        .           #[inline]
        .           fn validate_hir_id_for_typeck_results(hir_owner: LocalDefId, hir_id: hir::HirId) {
  622,646 ( 0.01%)      if hir_id.owner != hir_owner {
        .                   invalid_hir_id_for_typeck_results(hir_owner, hir_id);
        .               }
        .           }
        .           
        .           #[cold]
        .           #[inline(never)]
        .           fn invalid_hir_id_for_typeck_results(hir_owner: LocalDefId, hir_id: hir::HirId) {
        .               ty::tls::with(|tcx| {
-- line 253 ----------------------------------------
-- line 261 ----------------------------------------
        .           }
        .           
        .           impl<'a, V> LocalTableInContext<'a, V> {
        .               pub fn contains_key(&self, id: hir::HirId) -> bool {
        .                   validate_hir_id_for_typeck_results(self.hir_owner, id);
        .                   self.data.contains_key(&id.local_id)
        .               }
        .           
  466,028 ( 0.01%)      pub fn get(&self, id: hir::HirId) -> Option<&V> {
   93,188 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
   93,188 ( 0.00%)          self.data.get(&id.local_id)
  373,668 ( 0.01%)      }
        .           
        .               pub fn iter(&self) -> hash_map::Iter<'_, hir::ItemLocalId, V> {
        .                   self.data.iter()
        .               }
        .           }
        .           
        .           impl<'a, V> ::std::ops::Index<hir::HirId> for LocalTableInContext<'a, V> {
        .               type Output = V;
        .           
    4,968 ( 0.00%)      fn index(&self, key: hir::HirId) -> &V {
        .                   self.get(key).expect("LocalTableInContext: key not found")
    3,312 ( 0.00%)      }
        .           }
        .           
        .           pub struct LocalTableInContextMut<'a, V> {
        .               hir_owner: LocalDefId,
        .               data: &'a mut ItemLocalMap<V>,
        .           }
        .           
        .           impl<'a, V> LocalTableInContextMut<'a, V> {
-- line 292 ----------------------------------------
-- line 507 ----------------------------------------
        .               pub treat_byte_string_as_slice: ItemLocalSet,
        .           
        .               /// Contains the data for evaluating the effect of feature `capture_disjoint_fields`
        .               /// on closure size.
        .               pub closure_size_eval: FxHashMap<DefId, ClosureSizeProfileData<'tcx>>,
        .           }
        .           
        .           impl<'tcx> TypeckResults<'tcx> {
   26,130 ( 0.00%)      pub fn new(hir_owner: LocalDefId) -> TypeckResults<'tcx> {
  309,205 ( 0.01%)          TypeckResults {
        .                       hir_owner,
        .                       type_dependent_defs: Default::default(),
        .                       field_indices: Default::default(),
        .                       user_provided_types: Default::default(),
        .                       user_provided_sigs: Default::default(),
        .                       node_types: Default::default(),
        .                       node_substs: Default::default(),
        .                       adjustments: Default::default(),
-- line 524 ----------------------------------------
-- line 532 ----------------------------------------
        .                       tainted_by_errors: None,
        .                       concrete_opaque_types: Default::default(),
        .                       closure_min_captures: Default::default(),
        .                       closure_fake_reads: Default::default(),
        .                       generator_interior_types: ty::Binder::dummy(Default::default()),
        .                       treat_byte_string_as_slice: Default::default(),
        .                       closure_size_eval: Default::default(),
        .                   }
   26,130 ( 0.00%)      }
        .           
        .               /// Returns the final resolution of a `QPath` in an `Expr` or `Pat` node.
   93,198 ( 0.00%)      pub fn qpath_res(&self, qpath: &hir::QPath<'_>, id: hir::HirId) -> Res {
   62,132 ( 0.00%)          match *qpath {
  146,520 ( 0.00%)              hir::QPath::Resolved(_, ref path) => path.res,
        .                       hir::QPath::TypeRelative(..) | hir::QPath::LangItem(..) => self
        .                           .type_dependent_def(id)
   39,876 ( 0.00%)                  .map_or(Res::Err, |(kind, def_id)| Res::Def(kind, def_id)),
        .                   }
  155,330 ( 0.00%)      }
        .           
    1,299 ( 0.00%)      pub fn type_dependent_defs(
        .                   &self,
        .               ) -> LocalTableInContext<'_, Result<(DefKind, DefId), ErrorReported>> {
    6,991 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.type_dependent_defs }
    1,299 ( 0.00%)      }
        .           
   10,304 ( 0.00%)      pub fn type_dependent_def(&self, id: HirId) -> Option<(DefKind, DefId)> {
   20,306 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
        .                   self.type_dependent_defs.get(&id.local_id).cloned().and_then(|r| r.ok())
   20,608 ( 0.00%)      }
        .           
   13,424 ( 0.00%)      pub fn type_dependent_def_id(&self, id: HirId) -> Option<DefId> {
        .                   self.type_dependent_def(id).map(|(_, def_id)| def_id)
   13,424 ( 0.00%)      }
        .           
   39,632 ( 0.00%)      pub fn type_dependent_defs_mut(
        .                   &mut self,
        .               ) -> LocalTableInContextMut<'_, Result<(DefKind, DefId), ErrorReported>> {
   39,632 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.type_dependent_defs }
   39,632 ( 0.00%)      }
        .           
        .               pub fn field_indices(&self) -> LocalTableInContext<'_, usize> {
   12,094 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.field_indices }
    1,747 ( 0.00%)      }
        .           
        .               pub fn field_indices_mut(&mut self) -> LocalTableInContextMut<'_, usize> {
   22,542 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.field_indices }
   11,271 ( 0.00%)      }
        .           
        .               pub fn user_provided_types(&self) -> LocalTableInContext<'_, CanonicalUserType<'tcx>> {
   18,568 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.user_provided_types }
    9,284 ( 0.00%)      }
        .           
        .               pub fn user_provided_types_mut(
        .                   &mut self,
        .               ) -> LocalTableInContextMut<'_, CanonicalUserType<'tcx>> {
    4,784 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.user_provided_types }
    2,392 ( 0.00%)      }
        .           
        .               pub fn node_types(&self) -> LocalTableInContext<'_, Ty<'tcx>> {
   88,380 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.node_types }
   44,190 ( 0.00%)      }
        .           
        .               pub fn node_types_mut(&mut self) -> LocalTableInContextMut<'_, Ty<'tcx>> {
  154,266 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.node_types }
   77,133 ( 0.00%)      }
        .           
  658,698 ( 0.01%)      pub fn node_type(&self, id: hir::HirId) -> Ty<'tcx> {
  109,783 ( 0.00%)          self.node_type_opt(id).unwrap_or_else(|| {
        .                       bug!("node_type: no type for node `{}`", tls::with(|tcx| tcx.hir().node_to_string(id)))
        .                   })
  548,915 ( 0.01%)      }
        .           
  140,997 ( 0.00%)      pub fn node_type_opt(&self, id: hir::HirId) -> Option<Ty<'tcx>> {
  140,997 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
        .                   self.node_types.get(&id.local_id).cloned()
  281,994 ( 0.01%)      }
        .           
        .               pub fn node_substs_mut(&mut self) -> LocalTableInContextMut<'_, SubstsRef<'tcx>> {
   16,840 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.node_substs }
    8,420 ( 0.00%)      }
        .           
   46,491 ( 0.00%)      pub fn node_substs(&self, id: hir::HirId) -> SubstsRef<'tcx> {
   46,491 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
        .                   self.node_substs.get(&id.local_id).cloned().unwrap_or_else(|| InternalSubsts::empty())
   92,982 ( 0.00%)      }
        .           
   32,408 ( 0.00%)      pub fn node_substs_opt(&self, id: hir::HirId) -> Option<SubstsRef<'tcx>> {
   32,408 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
        .                   self.node_substs.get(&id.local_id).cloned()
   64,816 ( 0.00%)      }
        .           
        .               // Returns the type of a pattern as a monotype. Like @expr_ty, this function
        .               // doesn't provide type parameter substitutions.
        .               pub fn pat_ty(&self, pat: &hir::Pat<'_>) -> Ty<'tcx> {
   12,660 ( 0.00%)          self.node_type(pat.hir_id)
        .               }
        .           
        .               // Returns the type of an expression as a monotype.
        .               //
        .               // NB (1): This is the PRE-ADJUSTMENT TYPE for the expression.  That is, in
        .               // some cases, we insert `Adjustment` annotations such as auto-deref or
        .               // auto-ref.  The type returned by this function does not consider such
        .               // adjustments.  See `expr_ty_adjusted()` instead.
        .               //
        .               // NB (2): This type doesn't provide type parameter substitutions; e.g., if you
        .               // ask for the type of "id" in "id(3)", it will return "fn(&isize) -> isize"
        .               // instead of "fn(ty) -> T with T = isize".
        .               pub fn expr_ty(&self, expr: &hir::Expr<'_>) -> Ty<'tcx> {
  125,791 ( 0.00%)          self.node_type(expr.hir_id)
        .               }
        .           
        .               pub fn expr_ty_opt(&self, expr: &hir::Expr<'_>) -> Option<Ty<'tcx>> {
  118,167 ( 0.00%)          self.node_type_opt(expr.hir_id)
        .               }
        .           
        .               pub fn adjustments(&self) -> LocalTableInContext<'_, Vec<ty::adjustment::Adjustment<'tcx>>> {
   60,412 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.adjustments }
   30,206 ( 0.00%)      }
        .           
        .               pub fn adjustments_mut(
        .                   &mut self,
        .               ) -> LocalTableInContextMut<'_, Vec<ty::adjustment::Adjustment<'tcx>>> {
   91,166 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.adjustments }
   45,583 ( 0.00%)      }
        .           
   53,380 ( 0.00%)      pub fn expr_adjustments(&self, expr: &hir::Expr<'_>) -> &[ty::adjustment::Adjustment<'tcx>] {
  106,760 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, expr.hir_id);
        .                   self.adjustments.get(&expr.hir_id.local_id).map_or(&[], |a| &a[..])
  106,760 ( 0.00%)      }
        .           
        .               /// Returns the type of `expr`, considering any `Adjustment`
        .               /// entry recorded for that expression.
    6,280 ( 0.00%)      pub fn expr_ty_adjusted(&self, expr: &hir::Expr<'_>) -> Ty<'tcx> {
    1,256 ( 0.00%)          self.expr_adjustments(expr).last().map_or_else(|| self.expr_ty(expr), |adj| adj.target)
    1,884 ( 0.00%)      }
        .           
    1,590 ( 0.00%)      pub fn expr_ty_adjusted_opt(&self, expr: &hir::Expr<'_>) -> Option<Ty<'tcx>> {
      318 ( 0.00%)          self.expr_adjustments(expr).last().map(|adj| adj.target).or_else(|| self.expr_ty_opt(expr))
    1,044 ( 0.00%)      }
        .           
    5,692 ( 0.00%)      pub fn is_method_call(&self, expr: &hir::Expr<'_>) -> bool {
        .                   // Only paths and method calls/overloaded operators have
        .                   // entries in type_dependent_defs, ignore the former here.
   11,384 ( 0.00%)          if let hir::ExprKind::Path(_) = expr.kind {
        .                       return false;
        .                   }
        .           
   12,656 ( 0.00%)          matches!(self.type_dependent_defs().get(expr.hir_id), Some(Ok((DefKind::AssocFn, _))))
   11,384 ( 0.00%)      }
        .           
   24,432 ( 0.00%)      pub fn extract_binding_mode(&self, s: &Session, id: HirId, sp: Span) -> Option<BindingMode> {
        .                   self.pat_binding_modes().get(id).copied().or_else(|| {
        .                       s.delay_span_bug(sp, "missing binding mode");
        .                       None
        .                   })
   32,576 ( 0.00%)      }
        .           
        .               pub fn pat_binding_modes(&self) -> LocalTableInContext<'_, BindingMode> {
   20,714 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.pat_binding_modes }
    6,285 ( 0.00%)      }
        .           
        .               pub fn pat_binding_modes_mut(&mut self) -> LocalTableInContextMut<'_, BindingMode> {
   10,940 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.pat_binding_modes }
    5,470 ( 0.00%)      }
        .           
        .               pub fn pat_adjustments(&self) -> LocalTableInContext<'_, Vec<Ty<'tcx>>> {
   31,234 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.pat_adjustments }
   15,617 ( 0.00%)      }
        .           
        .               pub fn pat_adjustments_mut(&mut self) -> LocalTableInContextMut<'_, Vec<Ty<'tcx>>> {
   10,098 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.pat_adjustments }
    5,049 ( 0.00%)      }
        .           
        .               /// For a given closure, returns the iterator of `ty::CapturedPlace`s that are captured
        .               /// by the closure.
    6,708 ( 0.00%)      pub fn closure_min_captures_flattened(
        .                   &self,
        .                   closure_def_id: DefId,
        .               ) -> impl Iterator<Item = &ty::CapturedPlace<'tcx>> {
        .                   self.closure_min_captures
        .                       .get(&closure_def_id)
        .                       .map(|closure_min_captures| closure_min_captures.values().flat_map(|v| v.iter()))
        .                       .into_iter()
        .                       .flatten()
    8,385 ( 0.00%)      }
        .           
        .               pub fn closure_kind_origins(&self) -> LocalTableInContext<'_, (Span, HirPlace<'tcx>)> {
    2,572 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.closure_kind_origins }
    1,286 ( 0.00%)      }
        .           
        .               pub fn closure_kind_origins_mut(
        .                   &mut self,
        .               ) -> LocalTableInContextMut<'_, (Span, HirPlace<'tcx>)> {
        .                   LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.closure_kind_origins }
        .               }
        .           
        .               pub fn liberated_fn_sigs(&self) -> LocalTableInContext<'_, ty::FnSig<'tcx>> {
    5,884 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.liberated_fn_sigs }
    2,942 ( 0.00%)      }
        .           
        .               pub fn liberated_fn_sigs_mut(&mut self) -> LocalTableInContextMut<'_, ty::FnSig<'tcx>> {
    3,312 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.liberated_fn_sigs }
    1,656 ( 0.00%)      }
        .           
        .               pub fn fru_field_types(&self) -> LocalTableInContext<'_, Vec<Ty<'tcx>>> {
    2,572 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.fru_field_types }
    1,286 ( 0.00%)      }
        .           
        .               pub fn fru_field_types_mut(&mut self) -> LocalTableInContextMut<'_, Vec<Ty<'tcx>>> {
        .                   LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.fru_field_types }
        .               }
        .           
    2,550 ( 0.00%)      pub fn is_coercion_cast(&self, hir_id: hir::HirId) -> bool {
      850 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, hir_id);
        .                   self.coercion_casts.contains(&hir_id.local_id)
    1,700 ( 0.00%)      }
        .           
        .               pub fn set_coercion_cast(&mut self, id: ItemLocalId) {
        .                   self.coercion_casts.insert(id);
        .               }
        .           
        .               pub fn coercion_casts(&self) -> &ItemLocalSet {
    1,286 ( 0.00%)          &self.coercion_casts
    1,286 ( 0.00%)      }
        .           }
        .           
        .           impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for TypeckResults<'tcx> {
        .               fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {
        .                   let ty::TypeckResults {
        .                       hir_owner,
        .                       ref type_dependent_defs,
        .                       ref field_indices,
-- line 764 ----------------------------------------
-- line 819 ----------------------------------------
        .                   const START_INDEX = 0,
        .               }
        .           }
        .           
        .           /// Mapping of type annotation indices to canonical user type annotations.
        .           pub type CanonicalUserTypeAnnotations<'tcx> =
        .               IndexVec<UserTypeAnnotationIndex, CanonicalUserTypeAnnotation<'tcx>>;
        .           
    2,298 ( 0.00%)  #[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable, TypeFoldable, Lift)]
        .           pub struct CanonicalUserTypeAnnotation<'tcx> {
        .               pub user_ty: CanonicalUserType<'tcx>,
        .               pub span: Span,
    1,206 ( 0.00%)      pub inferred_ty: Ty<'tcx>,
        .           }
        .           
        .           /// Canonicalized user type annotation.
        .           pub type CanonicalUserType<'tcx> = Canonical<'tcx, UserType<'tcx>>;
        .           
        .           impl<'tcx> CanonicalUserType<'tcx> {
        .               /// Returns `true` if this represents a substitution of the form `[?0, ?1, ?2]`,
        .               /// i.e., each thing is mapped to a canonical variable with the same index.
    2,859 ( 0.00%)      pub fn is_identity(&self) -> bool {
    5,718 ( 0.00%)          match self.value {
        .                       UserType::Ty(_) => false,
        .                       UserType::TypeOf(_, user_substs) => {
    2,859 ( 0.00%)                  if user_substs.user_self_ty.is_some() {
        .                               return false;
        .                           }
        .           
        .                           iter::zip(user_substs.substs, BoundVar::new(0)..).all(|(kind, cvar)| {
        .                               match kind.unpack() {
    5,660 ( 0.00%)                          GenericArgKind::Type(ty) => match ty.kind() {
        .                                       ty::Bound(debruijn, b) => {
        .                                           // We only allow a `ty::INNERMOST` index in substitutions.
    2,787 ( 0.00%)                                  assert_eq!(*debruijn, ty::INNERMOST);
        .                                           cvar == b.var
        .                                       }
        .                                       _ => false,
        .                                   },
        .           
      154 ( 0.00%)                          GenericArgKind::Lifetime(r) => match r {
        .                                       ty::ReLateBound(debruijn, br) => {
        .                                           // We only allow a `ty::INNERMOST` index in substitutions.
        .                                           assert_eq!(*debruijn, ty::INNERMOST);
        .                                           cvar == br.var
        .                                       }
        .                                       _ => false,
        .                                   },
        .           
-- line 867 ----------------------------------------
-- line 872 ----------------------------------------
        .                                           cvar == b
        .                                       }
        .                                       _ => false,
        .                                   },
        .                               }
        .                           })
        .                       }
        .                   }
    5,718 ( 0.00%)      }
        .           }
        .           
        .           /// A user-given type annotation attached to a constant. These arise
        .           /// from constants that are named via paths, like `Foo::<A>::new` and
        .           /// so forth.
    7,236 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, TyEncodable, TyDecodable)]
   40,559 ( 0.00%)  #[derive(HashStable, TypeFoldable, Lift)]
        .           pub enum UserType<'tcx> {
        .               Ty(Ty<'tcx>),
        .           
        .               /// The canonical type is the result of `type_of(def_id)` with the
        .               /// given substitutions applied.
        .               TypeOf(DefId, UserSubsts<'tcx>),
        .           }
        .           
        .           impl<'tcx> CommonTypes<'tcx> {
        .               fn new(interners: &CtxtInterners<'tcx>) -> CommonTypes<'tcx> {
      111 ( 0.00%)          let mk = |ty| interners.intern_ty(ty);
        .           
        .                   CommonTypes {
        .                       unit: mk(Tuple(List::empty())),
        .                       bool: mk(Bool),
        .                       char: mk(Char),
        .                       never: mk(Never),
        .                       isize: mk(Int(ty::IntTy::Isize)),
        .                       i8: mk(Int(ty::IntTy::I8)),
-- line 906 ----------------------------------------
-- line 921 ----------------------------------------
        .           
        .                       trait_object_dummy_self: mk(Infer(ty::FreshTy(0))),
        .                   }
        .               }
        .           }
        .           
        .           impl<'tcx> CommonLifetimes<'tcx> {
        .               fn new(interners: &CtxtInterners<'tcx>) -> CommonLifetimes<'tcx> {
       67 ( 0.00%)          let mk = |r| interners.region.intern(r, |r| Interned(interners.arena.alloc(r))).0;
        .           
        .                   CommonLifetimes {
        5 ( 0.00%)              re_root_empty: mk(RegionKind::ReEmpty(ty::UniverseIndex::ROOT)),
        5 ( 0.00%)              re_static: mk(RegionKind::ReStatic),
        5 ( 0.00%)              re_erased: mk(RegionKind::ReErased),
        .                   }
        .               }
        .           }
        .           
        .           impl<'tcx> CommonConsts<'tcx> {
        .               fn new(interners: &CtxtInterners<'tcx>, types: &CommonTypes<'tcx>) -> CommonConsts<'tcx> {
        6 ( 0.00%)          let mk_const = |c| interners.const_.intern(c, |c| Interned(interners.arena.alloc(c))).0;
        .           
        .                   CommonConsts {
        .                       unit: mk_const(ty::Const {
        .                           val: ty::ConstKind::Value(ConstValue::Scalar(Scalar::ZST)),
        .                           ty: types.unit,
        .                       }),
        .                   }
        .               }
-- line 949 ----------------------------------------
-- line 1045 ----------------------------------------
        .           
        .               /// Stores memory for globals (statics/consts).
        .               pub(crate) alloc_map: Lock<interpret::AllocMap<'tcx>>,
        .           
        .               output_filenames: Arc<OutputFilenames>,
        .           }
        .           
        .           impl<'tcx> TyCtxt<'tcx> {
   63,840 ( 0.00%)      pub fn typeck_opt_const_arg(
        .                   self,
        .                   def: ty::WithOptConstParam<LocalDefId>,
        .               ) -> &'tcx TypeckResults<'tcx> {
   25,536 ( 0.00%)          if let Some(param_did) = def.const_param_did {
        .                       self.typeck_const_arg((def.did, param_did))
        .                   } else {
        .                       self.typeck(def.did)
        .                   }
   51,072 ( 0.00%)      }
        .           
    4,089 ( 0.00%)      pub fn alloc_steal_thir(self, thir: Thir<'tcx>) -> &'tcx Steal<Thir<'tcx>> {
    1,363 ( 0.00%)          self.arena.alloc(Steal::new(thir))
    5,452 ( 0.00%)      }
        .           
   23,495 ( 0.00%)      pub fn alloc_steal_mir(self, mir: Body<'tcx>) -> &'tcx Steal<Body<'tcx>> {
    4,699 ( 0.00%)          self.arena.alloc(Steal::new(mir))
   32,893 ( 0.00%)      }
        .           
    5,452 ( 0.00%)      pub fn alloc_steal_promoted(
        .                   self,
        .                   promoted: IndexVec<Promoted, Body<'tcx>>,
        .               ) -> &'tcx Steal<IndexVec<Promoted, Body<'tcx>>> {
    1,363 ( 0.00%)          self.arena.alloc(Steal::new(promoted))
    6,815 ( 0.00%)      }
        .           
    1,989 ( 0.00%)      pub fn alloc_adt_def(
        .                   self,
        .                   did: DefId,
        .                   kind: AdtKind,
        .                   variants: IndexVec<VariantIdx, ty::VariantDef>,
        .                   repr: ReprOptions,
        .               ) -> &'tcx ty::AdtDef {
    3,536 ( 0.00%)          self.intern_adt_def(ty::AdtDef::new(self, did, kind, variants, repr))
      884 ( 0.00%)      }
        .           
        .               /// Allocates a read-only byte or string literal for `mir::interpret`.
      875 ( 0.00%)      pub fn allocate_bytes(self, bytes: &[u8]) -> interpret::AllocId {
        .                   // Create an allocation that just contains these bytes.
      175 ( 0.00%)          let alloc = interpret::Allocation::from_bytes_byte_aligned_immutable(bytes);
    2,275 ( 0.00%)          let alloc = self.intern_const_alloc(alloc);
        .                   self.create_memory_alloc(alloc)
      875 ( 0.00%)      }
        .           
        .               /// Returns a range of the start/end indices specified with the
        .               /// `rustc_layout_scalar_valid_range` attribute.
        .               // FIXME(eddyb) this is an awkward spot for this method, maybe move it?
   25,424 ( 0.00%)      pub fn layout_scalar_valid_range(self, def_id: DefId) -> (Bound<u128>, Bound<u128>) {
   12,712 ( 0.00%)          let attrs = self.get_attrs(def_id);
   54,026 ( 0.00%)          let get = |name| {
   12,712 ( 0.00%)              let attr = match attrs.iter().find(|a| a.has_name(name)) {
        .                           Some(attr) => attr,
        .                           None => return Bound::Unbounded,
        .                       };
        .                       debug!("layout_scalar_valid_range: attr={:?}", attr);
       88 ( 0.00%)              if let Some(
        .                           &[
        .                               ast::NestedMetaItem::Literal(ast::Lit {
       44 ( 0.00%)                          kind: ast::LitKind::Int(a, _), ..
        .                               }),
        .                           ],
       22 ( 0.00%)              ) = attr.meta_item_list().as_deref()
        .                       {
        .                           Bound::Included(a)
        .                       } else {
        .                           self.sess
        .                               .delay_span_bug(attr.span, "invalid rustc_layout_scalar_valid_range attribute");
        .                           Bound::Unbounded
        .                       }
   63,560 ( 0.00%)          };
   19,068 ( 0.00%)          (
   19,068 ( 0.00%)              get(sym::rustc_layout_scalar_valid_range_start),
    9,534 ( 0.00%)              get(sym::rustc_layout_scalar_valid_range_end),
        .                   )
   25,424 ( 0.00%)      }
        .           
        .               pub fn lift<T: Lift<'tcx>>(self, value: T) -> Option<T::Lifted> {
        .                   value.lift_to_tcx(self)
        .               }
        .           
        .               /// Creates a type context and call the closure with a `TyCtxt` reference
        .               /// to the context. The closure enforces that the type context and any interned
        .               /// value (types, substs, etc.) can only be used while `ty::tls` has a valid
        .               /// reference to the context, to allow formatting values that need it.
       23 ( 0.00%)      pub fn create_global_ctxt(
        .                   s: &'tcx Session,
        .                   lint_store: Lrc<dyn Any + sync::Send + sync::Sync>,
        .                   arena: &'tcx WorkerLocal<Arena<'tcx>>,
        .                   resolutions: ty::ResolverOutputs,
        .                   krate: &'tcx hir::Crate<'tcx>,
        .                   dep_graph: DepGraph,
        .                   on_disk_cache: Option<&'tcx dyn OnDiskCache<'tcx>>,
        .                   queries: &'tcx dyn query::QueryEngine<'tcx>,
        .                   query_kinds: &'tcx [DepKindStruct],
        .                   crate_name: &str,
        .                   output_filenames: OutputFilenames,
        .               ) -> GlobalCtxt<'tcx> {
        1 ( 0.00%)          let data_layout = TargetDataLayout::parse(&s.target).unwrap_or_else(|err| {
        .                       s.fatal(&err);
        .                   });
        .                   let interners = CtxtInterners::new(arena);
        .                   let common_types = CommonTypes::new(&interners);
        .                   let common_lifetimes = CommonLifetimes::new(&interners);
        .                   let common_consts = CommonConsts::new(&interners, &common_types);
        .           
      127 ( 0.00%)          GlobalCtxt {
        .                       sess: s,
        6 ( 0.00%)              lint_store,
        .                       arena,
        2 ( 0.00%)              interners,
        5 ( 0.00%)              dep_graph,
        4 ( 0.00%)              untracked_resolutions: resolutions,
        2 ( 0.00%)              prof: s.prof.clone(),
        .                       types: common_types,
        .                       lifetimes: common_lifetimes,
        .                       consts: common_consts,
        .                       untracked_crate: krate,
        .                       on_disk_cache,
        .                       queries,
        .                       query_caches: query::QueryCaches::default(),
        .                       query_kinds,
        .                       ty_rcache: Default::default(),
        .                       pred_rcache: Default::default(),
        .                       selection_cache: Default::default(),
        .                       evaluation_cache: Default::default(),
        1 ( 0.00%)              crate_name: Symbol::intern(crate_name),
        .                       data_layout,
        .                       alloc_map: Lock::new(interpret::AllocMap::new()),
        .                       output_filenames: Arc::new(output_filenames),
        .                   }
        9 ( 0.00%)      }
        .           
        .               crate fn query_kind(self, k: DepKind) -> &'tcx DepKindStruct {
        .                   &self.query_kinds[k as usize]
        .               }
        .           
        .               /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` to ensure it gets used.
        .               #[track_caller]
        .               pub fn ty_error(self) -> Ty<'tcx> {
-- line 1191 ----------------------------------------
-- line 1217 ----------------------------------------
        .                   ty: Ty<'tcx>,
        .                   span: S,
        .                   msg: &str,
        .               ) -> &'tcx Const<'tcx> {
        .                   self.sess.delay_span_bug(span, msg);
        .                   self.mk_const(ty::Const { val: ty::ConstKind::Error(DelaySpanBugEmitted(())), ty })
        .               }
        .           
    1,274 ( 0.00%)      pub fn consider_optimizing<T: Fn() -> String>(self, msg: T) -> bool {
      182 ( 0.00%)          let cname = self.crate_name(LOCAL_CRATE);
    1,380 ( 0.00%)          self.sess.consider_optimizing(cname.as_str(), msg)
    1,456 ( 0.00%)      }
        .           
        .               /// Obtain all lang items of this crate and all dependencies (recursively)
1,361,850 ( 0.03%)      pub fn lang_items(self) -> &'tcx rustc_hir::lang_items::LanguageItems {
        .                   self.get_lang_items(())
1,750,950 ( 0.04%)      }
        .           
        .               /// Obtain the given diagnostic item's `DefId`. Use `is_diagnostic_item` if you just want to
        .               /// compare against another `DefId`, since `is_diagnostic_item` is cheaper.
      721 ( 0.00%)      pub fn get_diagnostic_item(self, name: Symbol) -> Option<DefId> {
        .                   self.all_diagnostic_items(()).name_to_id.get(&name).copied()
      824 ( 0.00%)      }
        .           
        .               /// Obtain the diagnostic item's name
   57,911 ( 0.00%)      pub fn get_diagnostic_name(self, id: DefId) -> Option<Symbol> {
        .                   self.diagnostic_items(id.krate).id_to_name.get(&id).copied()
   66,184 ( 0.00%)      }
        .           
        .               /// Check whether the diagnostic item with the given `name` has the given `DefId`.
   30,695 ( 0.00%)      pub fn is_diagnostic_item(self, name: Symbol, did: DefId) -> bool {
        .                   self.diagnostic_items(did.krate).name_to_id.get(&name) == Some(&did)
   35,080 ( 0.00%)      }
        .           
   19,145 ( 0.00%)      pub fn stability(self) -> &'tcx stability::Index<'tcx> {
        .                   self.stability_index(())
   24,615 ( 0.00%)      }
        .           
  674,604 ( 0.01%)      pub fn features(self) -> &'tcx rustc_feature::Features {
        .                   self.features_query(())
  770,976 ( 0.02%)      }
        .           
       20 ( 0.00%)      pub fn def_key(self, id: DefId) -> rustc_hir::definitions::DefKey {
        .                   // Accessing the DefKey is ok, since it is part of DefPathHash.
   35,897 ( 0.00%)          if let Some(id) = id.as_local() {
        .                       self.untracked_resolutions.definitions.def_key(id)
        .                   } else {
   22,119 ( 0.00%)              self.untracked_resolutions.cstore.def_key(id)
        .                   }
       40 ( 0.00%)      }
        .           
        .               /// Converts a `DefId` into its fully expanded `DefPath` (every
        .               /// `DefId` is really just an interned `DefPath`).
        .               ///
        .               /// Note that if `id` is not local to this crate, the result will
        .               ///  be a non-local `DefPath`.
        .               pub fn def_path(self, id: DefId) -> rustc_hir::definitions::DefPath {
        .                   // Accessing the DefPath is ok, since it is part of DefPathHash.
-- line 1274 ----------------------------------------
-- line 1277 ----------------------------------------
        .                   } else {
        .                       self.untracked_resolutions.cstore.def_path(id)
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn def_path_hash(self, def_id: DefId) -> rustc_hir::definitions::DefPathHash {
        .                   // Accessing the DefPathHash is ok, it is incr. comp. stable.
   10,255 ( 0.00%)          if let Some(def_id) = def_id.as_local() {
        .                       self.untracked_resolutions.definitions.def_path_hash(def_id)
        .                   } else {
      392 ( 0.00%)              self.untracked_resolutions.cstore.def_path_hash(def_id)
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn stable_crate_id(self, crate_num: CrateNum) -> StableCrateId {
        .                   if crate_num == LOCAL_CRATE {
        .                       self.sess.local_stable_crate_id()
        .                   } else {
-- line 1296 ----------------------------------------
-- line 1353 ----------------------------------------
        .                       &(format!("{:08x}", stable_crate_id.to_u64()))[..4],
        .                       self.def_path(def_id).to_string_no_crate_verbose()
        .                   )
        .               }
        .           
        .               /// Note that this is *untracked* and should only be used within the query
        .               /// system if the result is otherwise tracked through queries
        .               pub fn cstore_untracked(self) -> &'tcx ty::CrateStoreDyn {
   80,410 ( 0.00%)          &*self.untracked_resolutions.cstore
   40,205 ( 0.00%)      }
        .           
        .               /// Note that this is *untracked* and should only be used within the query
        .               /// system if the result is otherwise tracked through queries
        .               pub fn definitions_untracked(self) -> &'tcx hir::definitions::Definitions {
        .                   &self.untracked_resolutions.definitions
        .               }
        .           
        .               #[inline(always)]
        .               pub fn create_stable_hashing_context(self) -> StableHashingContext<'tcx> {
      450 ( 0.00%)          let resolutions = &self.gcx.untracked_resolutions;
    2,249 ( 0.00%)          StableHashingContext::new(self.sess, &resolutions.definitions, &*resolutions.cstore)
        .               }
        .           
        .               #[inline(always)]
        .               pub fn create_no_span_stable_hashing_context(self) -> StableHashingContext<'tcx> {
        .                   let resolutions = &self.gcx.untracked_resolutions;
        .                   StableHashingContext::ignore_spans(
        .                       self.sess,
        .                       &resolutions.definitions,
-- line 1381 ----------------------------------------
-- line 1390 ----------------------------------------
        .               /// If `true`, we should use the MIR-based borrowck, but also
        .               /// fall back on the AST borrowck if the MIR-based one errors.
        .               pub fn migrate_borrowck(self) -> bool {
        .                   self.borrowck_mode().migrate()
        .               }
        .           
        .               /// What mode(s) of borrowck should we run? AST? MIR? both?
        .               /// (Also considers the `#![feature(nll)]` setting.)
    2,572 ( 0.00%)      pub fn borrowck_mode(self) -> BorrowckMode {
        .                   // Here are the main constraints we need to deal with:
        .                   //
        .                   // 1. An opts.borrowck_mode of `BorrowckMode::Migrate` is
        .                   //    synonymous with no `-Z borrowck=...` flag at all.
        .                   //
        .                   // 2. We want to allow developers on the Nightly channel
        .                   //    to opt back into the "hard error" mode for NLL,
        .                   //    (which they can do via specifying `#![feature(nll)]`
-- line 1406 ----------------------------------------
-- line 1413 ----------------------------------------
        .                   //   errors. (To simplify the code here, it now even overrides
        .                   //   a user's attempt to specify `-Z borrowck=compare`, which
        .                   //   we arguably do not need anymore and should remove.)
        .                   //
        .                   // * Otherwise, if no `-Z borrowck=...` then use migrate mode
        .                   //
        .                   // * Otherwise, use the behavior requested via `-Z borrowck=...`
        .           
    3,858 ( 0.00%)          if self.features().nll {
        .                       return BorrowckMode::Mir;
        .                   }
        .           
    1,286 ( 0.00%)          self.sess.opts.borrowck_mode
    5,144 ( 0.00%)      }
        .           
        .               /// If `true`, we should use lazy normalization for constants, otherwise
        .               /// we still evaluate them eagerly.
        .               #[inline]
        .               pub fn lazy_normalization(self) -> bool {
    1,306 ( 0.00%)          let features = self.features();
        .                   // Note: We only use lazy normalization for generic const expressions.
      834 ( 0.00%)          features.generic_const_exprs
        .               }
        .           
        .               #[inline]
        .               pub fn local_crate_exports_generics(self) -> bool {
        .                   debug_assert!(self.sess.opts.share_generics());
        .           
        .                   self.sess.crate_types().iter().any(|crate_type| {
        .                       match crate_type {
-- line 1442 ----------------------------------------
-- line 1554 ----------------------------------------
        .                   self.mk_imm_ref(
        .                       self.lifetimes.re_static,
        .                       self.type_of(self.require_lang_item(LangItem::PanicLocation, None))
        .                           .subst(self, self.mk_substs([self.lifetimes.re_static.into()].iter())),
        .                   )
        .               }
        .           
        .               /// Returns a displayable description and article for the given `def_id` (e.g. `("a", "struct")`).
    6,732 ( 0.00%)      pub fn article_and_description(self, def_id: DefId) -> (&'static str, &'static str) {
    4,896 ( 0.00%)          match self.def_kind(def_id) {
        .                       DefKind::Generator => match self.generator_kind(def_id).unwrap() {
        .                           rustc_hir::GeneratorKind::Async(..) => ("an", "async closure"),
        .                           rustc_hir::GeneratorKind::Gen => ("a", "generator"),
        .                       },
   11,016 ( 0.00%)              def_kind => (def_kind.article(), def_kind.descr(def_id)),
        .                   }
    5,508 ( 0.00%)      }
        .           
        .               pub fn type_length_limit(self) -> Limit {
        .                   self.limits(()).type_length_limit
        .               }
        .           
  415,814 ( 0.01%)      pub fn recursion_limit(self) -> Limit {
        .                   self.limits(()).recursion_limit
  475,216 ( 0.01%)      }
        .           
        .               pub fn move_size_limit(self) -> Limit {
        .                   self.limits(()).move_size_limit
        .               }
        .           
    9,443 ( 0.00%)      pub fn const_eval_limit(self) -> Limit {
        .                   self.limits(()).const_eval_limit
   10,792 ( 0.00%)      }
        .           
        .               pub fn all_traits(self) -> impl Iterator<Item = DefId> + 'tcx {
        .                   iter::once(LOCAL_CRATE)
        .                       .chain(self.crates(()).iter().copied())
        .                       .flat_map(move |cnum| self.traits_in_crate(cnum).iter().copied())
        .               }
        .           }
        .           
-- line 1594 ----------------------------------------
-- line 1684 ----------------------------------------
        .               /// This is the implicit state of rustc. It contains the current
        .               /// `TyCtxt` and query. It is updated when creating a local interner or
        .               /// executing a new query. Whenever there's a `TyCtxt` value available
        .               /// you should also have access to an `ImplicitCtxt` through the functions
        .               /// in this module.
        .               #[derive(Clone)]
        .               pub struct ImplicitCtxt<'a, 'tcx> {
        .                   /// The current `TyCtxt`.
        1 ( 0.00%)          pub tcx: TyCtxt<'tcx>,
        .           
        .                   /// The current query job, if any. This is updated by `JobOwner::start` in
        .                   /// `ty::query::plumbing` when executing a query.
        .                   pub query: Option<query::QueryJobId<DepKind>>,
        .           
        .                   /// Where to store diagnostics for the current query job, if any.
        .                   /// This is updated by `JobOwner::start` in `ty::query::plumbing` when executing a query.
        .                   pub diagnostics: Option<&'a Lock<ThinVec<Diagnostic>>>,
-- line 1700 ----------------------------------------
-- line 1703 ----------------------------------------
        .                   pub layout_depth: usize,
        .           
        .                   /// The current dep graph task. This is used to add dependencies to queries
        .                   /// when executing them.
        .                   pub task_deps: TaskDepsRef<'a>,
        .               }
        .           
        .               impl<'a, 'tcx> ImplicitCtxt<'a, 'tcx> {
        5 ( 0.00%)          pub fn new(gcx: &'tcx GlobalCtxt<'tcx>) -> Self {
        .                       let tcx = TyCtxt { gcx };
       25 ( 0.00%)              ImplicitCtxt {
        .                           tcx,
        .                           query: None,
        .                           diagnostics: None,
        .                           layout_depth: 0,
        .                           task_deps: TaskDepsRef::Ignore,
        .                       }
        5 ( 0.00%)          }
        .               }
        .           
        .               /// Sets Rayon's thread-local variable, which is preserved for Rayon jobs
        .               /// to `value` during the call to `f`. It is restored to its previous value after.
        .               /// This is used to set the pointer to the new `ImplicitCtxt`.
        .               #[cfg(parallel_compiler)]
        .               #[inline]
        .               fn set_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {
-- line 1728 ----------------------------------------
-- line 1745 ----------------------------------------
        .           
        .               /// Sets TLV to `value` during the call to `f`.
        .               /// It is restored to its previous value after.
        .               /// This is used to set the pointer to the new `ImplicitCtxt`.
        .               #[cfg(not(parallel_compiler))]
        .               #[inline]
        .               fn set_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {
        .                   let old = get_tlv();
  158,231 ( 0.00%)          let _reset = rustc_data_structures::OnDrop(move || TLV.with(|tlv| tlv.set(old)));
        .                   TLV.with(|tlv| tlv.set(value));
        .                   f()
        .               }
        .           
        .               /// Gets the pointer to the current `ImplicitCtxt`.
        .               #[cfg(not(parallel_compiler))]
        .               #[inline]
        .               fn get_tlv() -> usize {
-- line 1761 ----------------------------------------
-- line 1763 ----------------------------------------
        .               }
        .           
        .               /// Sets `context` as the new current `ImplicitCtxt` for the duration of the function `f`.
        .               #[inline]
        .               pub fn enter_context<'a, 'tcx, F, R>(context: &ImplicitCtxt<'a, 'tcx>, f: F) -> R
        .               where
        .                   F: FnOnce(&ImplicitCtxt<'a, 'tcx>) -> R,
        .               {
        1 ( 0.00%)          set_tlv(context as *const _ as usize, || f(&context))
        .               }
        .           
        .               /// Allows access to the current `ImplicitCtxt` in a closure if one is available.
        .               #[inline]
        .               pub fn with_context_opt<F, R>(f: F) -> R
        .               where
        .                   F: for<'a, 'tcx> FnOnce(Option<&ImplicitCtxt<'a, 'tcx>>) -> R,
        .               {
        .                   let context = get_tlv();
  642,467 ( 0.01%)          if context == 0 {
        .                       f(None)
        .                   } else {
        .                       // We could get an `ImplicitCtxt` pointer from another thread.
        .                       // Ensure that `ImplicitCtxt` is `Sync`.
        .                       sync::assert_sync::<ImplicitCtxt<'_, '_>>();
        .           
        .                       unsafe { f(Some(&*(context as *const ImplicitCtxt<'_, '_>))) }
        .                   }
-- line 1789 ----------------------------------------
-- line 1805 ----------------------------------------
        .               /// This will panic if you pass it a `TyCtxt` which is different from the current
        .               /// `ImplicitCtxt`'s `tcx` field.
        .               #[inline]
        .               pub fn with_related_context<'tcx, F, R>(tcx: TyCtxt<'tcx>, f: F) -> R
        .               where
        .                   F: FnOnce(&ImplicitCtxt<'_, 'tcx>) -> R,
        .               {
        .                   with_context(|context| unsafe {
  317,043 ( 0.01%)              assert!(ptr_eq(context.tcx.gcx, tcx.gcx));
        .                       let context: &ImplicitCtxt<'_, '_> = mem::transmute(context);
  316,538 ( 0.01%)              f(context)
        .                   })
        .               }
        .           
        .               /// Allows access to the `TyCtxt` in the current `ImplicitCtxt`.
        .               /// Panics if there is no `ImplicitCtxt` available.
        .               #[inline]
        .               pub fn with<F, R>(f: F) -> R
        .               where
-- line 1823 ----------------------------------------
-- line 1981 ----------------------------------------
        .               fn into_pointer(&self) -> *const () {
        .                   self.0 as *const _ as *const ()
        .               }
        .           }
        .           
        .           #[allow(rustc::usage_of_ty_tykind)]
        .           impl<'tcx> Borrow<TyKind<'tcx>> for Interned<'tcx, TyS<'tcx>> {
        .               fn borrow<'a>(&'a self) -> &'a TyKind<'tcx> {
  469,214 ( 0.01%)          &self.0.kind()
        .               }
        .           }
        .           
        .           impl<'tcx> PartialEq for Interned<'tcx, TyS<'tcx>> {
        .               fn eq(&self, other: &Interned<'tcx, TyS<'tcx>>) -> bool {
        .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
        .                   // `x == y`.
        .                   self.0.kind() == other.0.kind()
-- line 1997 ----------------------------------------
-- line 1998 ----------------------------------------
        .               }
        .           }
        .           
        .           impl<'tcx> Eq for Interned<'tcx, TyS<'tcx>> {}
        .           
        .           impl<'tcx> Hash for Interned<'tcx, TyS<'tcx>> {
        .               fn hash<H: Hasher>(&self, s: &mut H) {
        .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
  172,020 ( 0.00%)          self.0.kind().hash(s)
        .               }
        .           }
        .           
        .           impl<'tcx> Borrow<Binder<'tcx, PredicateKind<'tcx>>> for Interned<'tcx, PredicateInner<'tcx>> {
        .               fn borrow<'a>(&'a self) -> &'a Binder<'tcx, PredicateKind<'tcx>> {
  141,430 ( 0.00%)          &self.0.kind
        .               }
        .           }
        .           
        .           impl<'tcx> PartialEq for Interned<'tcx, PredicateInner<'tcx>> {
        .               fn eq(&self, other: &Interned<'tcx, PredicateInner<'tcx>>) -> bool {
        .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
        .                   // `x == y`.
        .                   self.0.kind == other.0.kind
-- line 2020 ----------------------------------------
-- line 2021 ----------------------------------------
        .               }
        .           }
        .           
        .           impl<'tcx> Eq for Interned<'tcx, PredicateInner<'tcx>> {}
        .           
        .           impl<'tcx> Hash for Interned<'tcx, PredicateInner<'tcx>> {
        .               fn hash<H: Hasher>(&self, s: &mut H) {
        .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
   57,340 ( 0.00%)          self.0.kind.hash(s)
        .               }
        .           }
        .           
        .           impl<'tcx, T> Borrow<[T]> for Interned<'tcx, List<T>> {
        .               fn borrow<'a>(&'a self) -> &'a [T] {
  420,772 ( 0.01%)          &self.0[..]
        .               }
        .           }
        .           
        .           impl<'tcx, T: PartialEq> PartialEq for Interned<'tcx, List<T>> {
        .               fn eq(&self, other: &Interned<'tcx, List<T>>) -> bool {
        .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
        .                   // `x == y`.
        .                   self.0[..] == other.0[..]
-- line 2043 ----------------------------------------
-- line 2044 ----------------------------------------
        .               }
        .           }
        .           
        .           impl<'tcx, T: Eq> Eq for Interned<'tcx, List<T>> {}
        .           
        .           impl<'tcx, T: Hash> Hash for Interned<'tcx, List<T>> {
        .               fn hash<H: Hasher>(&self, s: &mut H) {
        .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
   73,990 ( 0.00%)          self.0[..].hash(s)
        .               }
        .           }
        .           
        .           macro_rules! direct_interners {
        .               ($($name:ident: $method:ident($ty:ty),)+) => {
        .                   $(impl<'tcx> Borrow<$ty> for Interned<'tcx, $ty> {
        .                       fn borrow<'a>(&'a self) -> &'a $ty {
  153,853 ( 0.00%)                  &self.0
        .                       }
        .                   }
        .           
        .                   impl<'tcx> PartialEq for Interned<'tcx, $ty> {
        .                       fn eq(&self, other: &Self) -> bool {
        .                           // The `Borrow` trait requires that `x.borrow() == y.borrow()`
        .                           // equals `x == y`.
        .                           self.0 == other.0
-- line 2068 ----------------------------------------
-- line 2070 ----------------------------------------
        .                   }
        .           
        .                   impl<'tcx> Eq for Interned<'tcx, $ty> {}
        .           
        .                   impl<'tcx> Hash for Interned<'tcx, $ty> {
        .                       fn hash<H: Hasher>(&self, s: &mut H) {
        .                           // The `Borrow` trait requires that `x.borrow().hash(s) ==
        .                           // x.hash(s)`.
   49,472 ( 0.00%)                  self.0.hash(s)
        .                       }
        .                   }
        .           
        .                   impl<'tcx> TyCtxt<'tcx> {
1,309,199 ( 0.03%)              pub fn $method(self, v: $ty) -> &'tcx $ty {
  684,040 ( 0.01%)                  self.interners.$name.intern(v, |v| {
   10,649 ( 0.00%)                      Interned(self.interners.arena.alloc(v))
        .                           }).0
1,468,530 ( 0.03%)              }
        .                   })+
        .               }
        .           }
        .           
        .           direct_interners! {
        .               region: mk_region(RegionKind),
        .               const_: mk_const(Const<'tcx>),
        .               const_allocation: intern_const_alloc(Allocation),
-- line 2095 ----------------------------------------
-- line 2097 ----------------------------------------
        .               adt_def: intern_adt_def(AdtDef),
        .               stability: intern_stability(attr::Stability),
        .               const_stability: intern_const_stability(attr::ConstStability),
        .           }
        .           
        .           macro_rules! slice_interners {
        .               ($($field:ident: $method:ident($ty:ty)),+ $(,)?) => (
        .                   impl<'tcx> TyCtxt<'tcx> {
4,708,234 ( 0.10%)              $(pub fn $method(self, v: &[$ty]) -> &'tcx List<$ty> {
        .                           self.interners.$field.intern_ref(v, || {
        .                               Interned(List::from_arena(&*self.arena, v))
        .                           }).0
4,203,711 ( 0.09%)              })+
        .                   }
        .               );
        .           }
        .           
        .           slice_interners!(
        .               type_list: _intern_type_list(Ty<'tcx>),
        .               substs: _intern_substs(GenericArg<'tcx>),
        .               canonical_var_infos: _intern_canonical_var_infos(CanonicalVarInfo<'tcx>),
-- line 2117 ----------------------------------------
-- line 2129 ----------------------------------------
        .               /// unsafe.
        .               pub fn safe_to_unsafe_fn_ty(self, sig: PolyFnSig<'tcx>) -> Ty<'tcx> {
        .                   assert_eq!(sig.unsafety(), hir::Unsafety::Normal);
        .                   self.mk_fn_ptr(sig.map_bound(|sig| ty::FnSig { unsafety: hir::Unsafety::Unsafe, ..sig }))
        .               }
        .           
        .               /// Given the def_id of a Trait `trait_def_id` and the name of an associated item `assoc_name`
        .               /// returns true if the `trait_def_id` defines an associated item of name `assoc_name`.
       96 ( 0.00%)      pub fn trait_may_define_assoc_type(self, trait_def_id: DefId, assoc_name: Ident) -> bool {
        .                   self.super_traits_of(trait_def_id).any(|trait_did| {
        .                       self.associated_items(trait_did)
        .                           .find_by_name_and_kind(self, assoc_name, ty::AssocKind::Type, trait_did)
        .                           .is_some()
        .                   })
       72 ( 0.00%)      }
        .           
        .               /// Computes the def-ids of the transitive supertraits of `trait_def_id`. This (intentionally)
        .               /// does not compute the full elaborated super-predicates but just the set of def-ids. It is used
        .               /// to identify which traits may define a given associated type to help avoid cycle errors.
        .               /// Returns a `DefId` iterator.
        .               fn super_traits_of(self, trait_def_id: DefId) -> impl Iterator<Item = DefId> + 'tcx {
        .                   let mut set = FxHashSet::default();
       16 ( 0.00%)          let mut stack = vec![trait_def_id];
        .           
        .                   set.insert(trait_def_id);
        .           
       72 ( 0.00%)          iter::from_fn(move || -> Option<DefId> {
       16 ( 0.00%)              let trait_did = stack.pop()?;
        8 ( 0.00%)              let generic_predicates = self.super_predicates_of(trait_did);
        .           
        .                       for (predicate, _) in generic_predicates.predicates {
        9 ( 0.00%)                  if let ty::PredicateKind::Trait(data) = predicate.kind().skip_binder() {
        6 ( 0.00%)                      if set.insert(data.def_id()) {
        .                                   stack.push(data.def_id());
        .                               }
        .                           }
        .                       }
        .           
        .                       Some(trait_did)
        .                   })
        .               }
-- line 2169 ----------------------------------------
-- line 2188 ----------------------------------------
        .                       self.mk_fn_sig(params_iter, s.output(), s.c_variadic, unsafety, abi::Abi::Rust)
        .                   })
        .               }
        .           
        .               /// Same a `self.mk_region(kind)`, but avoids accessing the interners if
        .               /// `*r == kind`.
        .               #[inline]
        .               pub fn reuse_or_mk_region(self, r: Region<'tcx>, kind: RegionKind) -> Region<'tcx> {
  135,064 ( 0.00%)          if *r == kind { r } else { self.mk_region(kind) }
        .               }
        .           
        .               #[allow(rustc::usage_of_ty_tykind)]
        .               #[inline]
        .               pub fn mk_ty(self, st: TyKind<'tcx>) -> Ty<'tcx> {
3,545,903 ( 0.07%)          self.interners.intern_ty(st)
        .               }
        .           
        .               #[inline]
        .               pub fn mk_predicate(self, binder: Binder<'tcx, PredicateKind<'tcx>>) -> Predicate<'tcx> {
1,918,852 ( 0.04%)          let inner = self.interners.intern_predicate(binder);
        .                   Predicate { inner }
        .               }
        .           
        .               #[inline]
1,542,080 ( 0.03%)      pub fn reuse_or_mk_predicate(
        .                   self,
        .                   pred: Predicate<'tcx>,
        .                   binder: Binder<'tcx, PredicateKind<'tcx>>,
        .               ) -> Predicate<'tcx> {
  107,892 ( 0.00%)          if pred.kind() != binder { self.mk_predicate(binder) } else { pred }
1,542,080 ( 0.03%)      }
        .           
        .               pub fn mk_mach_int(self, tm: IntTy) -> Ty<'tcx> {
      257 ( 0.00%)          match tm {
        .                       IntTy::Isize => self.types.isize,
        .                       IntTy::I8 => self.types.i8,
        .                       IntTy::I16 => self.types.i16,
        .                       IntTy::I32 => self.types.i32,
        .                       IntTy::I64 => self.types.i64,
        .                       IntTy::I128 => self.types.i128,
        .                   }
      257 ( 0.00%)      }
        .           
        .               pub fn mk_mach_uint(self, tm: UintTy) -> Ty<'tcx> {
    1,954 ( 0.00%)          match tm {
        .                       UintTy::Usize => self.types.usize,
        .                       UintTy::U8 => self.types.u8,
        .                       UintTy::U16 => self.types.u16,
        .                       UintTy::U32 => self.types.u32,
        .                       UintTy::U64 => self.types.u64,
        .                       UintTy::U128 => self.types.u128,
        .                   }
    1,954 ( 0.00%)      }
        .           
        .               pub fn mk_mach_float(self, tm: FloatTy) -> Ty<'tcx> {
       65 ( 0.00%)          match tm {
        .                       FloatTy::F32 => self.types.f32,
        .                       FloatTy::F64 => self.types.f64,
        .                   }
       65 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn mk_static_str(self) -> Ty<'tcx> {
    1,652 ( 0.00%)          self.mk_imm_ref(self.lifetimes.re_static, self.types.str_)
        .               }
        .           
        .               #[inline]
        .               pub fn mk_adt(self, def: &'tcx AdtDef, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
        .                   // Take a copy of substs so that we own the vectors inside.
        .                   self.mk_ty(Adt(def, substs))
        .               }
        .           
        .               #[inline]
        .               pub fn mk_foreign(self, def_id: DefId) -> Ty<'tcx> {
        .                   self.mk_ty(Foreign(def_id))
        .               }
        .           
    1,104 ( 0.00%)      fn mk_generic_adt(self, wrapper_def_id: DefId, ty_param: Ty<'tcx>) -> Ty<'tcx> {
        .                   let adt_def = self.adt_def(wrapper_def_id);
        .                   let substs =
    2,070 ( 0.00%)              InternalSubsts::for_item(self, wrapper_def_id, |param, substs| match param.kind {
        .                           GenericParamDefKind::Lifetime | GenericParamDefKind::Const { .. } => bug!(),
      138 ( 0.00%)                  GenericParamDefKind::Type { has_default, .. } => {
      552 ( 0.00%)                      if param.index == 0 {
        .                                   ty_param.into()
        .                               } else {
      138 ( 0.00%)                          assert!(has_default);
      414 ( 0.00%)                          self.type_of(param.def_id).subst(self, substs).into()
        .                               }
        .                           }
        .                       });
      138 ( 0.00%)          self.mk_ty(Adt(adt_def, substs))
    1,104 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn mk_box(self, ty: Ty<'tcx>) -> Ty<'tcx> {
      690 ( 0.00%)          let def_id = self.require_lang_item(LangItem::OwnedBox, None);
    1,518 ( 0.00%)          self.mk_generic_adt(def_id, ty)
        .               }
        .           
        .               #[inline]
        .               pub fn mk_lang_item(self, ty: Ty<'tcx>, item: LangItem) -> Option<Ty<'tcx>> {
        .                   let def_id = self.lang_items().require(item).ok()?;
        .                   Some(self.mk_generic_adt(def_id, ty))
        .               }
        .           
-- line 2293 ----------------------------------------
-- line 2329 ----------------------------------------
        .               }
        .           
        .               #[inline]
        .               pub fn mk_imm_ptr(self, ty: Ty<'tcx>) -> Ty<'tcx> {
        .                   self.mk_ptr(TypeAndMut { ty, mutbl: hir::Mutability::Not })
        .               }
        .           
        .               #[inline]
   11,821 ( 0.00%)      pub fn mk_array(self, ty: Ty<'tcx>, n: u64) -> Ty<'tcx> {
        .                   self.mk_ty(Array(ty, ty::Const::from_usize(self, n)))
   12,520 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn mk_slice(self, ty: Ty<'tcx>) -> Ty<'tcx> {
        .                   self.mk_ty(Slice(ty))
        .               }
        .           
        .               #[inline]
        .               pub fn intern_tup(self, ts: &[Ty<'tcx>]) -> Ty<'tcx> {
      808 ( 0.00%)          let kinds: Vec<_> = ts.iter().map(|&t| GenericArg::from(t)).collect();
    1,562 ( 0.00%)          self.mk_ty(Tuple(self.intern_substs(&kinds)))
        .               }
        .           
        .               pub fn mk_tup<I: InternAs<[Ty<'tcx>], Ty<'tcx>>>(self, iter: I) -> I::Output {
   18,026 ( 0.00%)          iter.intern_with(|ts| {
    6,487 ( 0.00%)              let kinds: Vec<_> = ts.iter().map(|&t| GenericArg::from(t)).collect();
   29,847 ( 0.00%)              self.mk_ty(Tuple(self.intern_substs(&kinds)))
   16,218 ( 0.00%)          })
        .               }
        .           
        .               #[inline]
        .               pub fn mk_unit(self) -> Ty<'tcx> {
      556 ( 0.00%)          self.types.unit
        .               }
        .           
        .               #[inline]
        .               pub fn mk_diverging_default(self) -> Ty<'tcx> {
       16 ( 0.00%)          if self.features().never_type_fallback { self.types.never } else { self.types.unit }
        .               }
        .           
        .               #[inline]
        .               pub fn mk_fn_def(self, def_id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
        .                   self.mk_ty(FnDef(def_id, substs))
        .               }
        .           
        .               #[inline]
        .               pub fn mk_fn_ptr(self, fty: PolyFnSig<'tcx>) -> Ty<'tcx> {
    2,014 ( 0.00%)          self.mk_ty(FnPtr(fty))
        .               }
        .           
        .               #[inline]
        .               pub fn mk_dynamic(
        .                   self,
        .                   obj: &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>>,
        .                   reg: ty::Region<'tcx>,
        .               ) -> Ty<'tcx> {
-- line 2384 ----------------------------------------
-- line 2412 ----------------------------------------
        .           
        .               #[inline]
        .               pub fn mk_ty_var(self, v: TyVid) -> Ty<'tcx> {
        .                   self.mk_ty_infer(TyVar(v))
        .               }
        .           
        .               #[inline]
        .               pub fn mk_const_var(self, v: ConstVid<'tcx>, ty: Ty<'tcx>) -> &'tcx Const<'tcx> {
       30 ( 0.00%)          self.mk_const(ty::Const { val: ty::ConstKind::Infer(InferConst::Var(v)), ty })
        .               }
        .           
        .               #[inline]
        .               pub fn mk_int_var(self, v: IntVid) -> Ty<'tcx> {
        .                   self.mk_ty_infer(IntVar(v))
        .               }
        .           
        .               #[inline]
-- line 2428 ----------------------------------------
-- line 2445 ----------------------------------------
        .                   self.mk_ty(Param(ParamTy { index, name }))
        .               }
        .           
        .               #[inline]
        .               pub fn mk_const_param(self, index: u32, name: Symbol, ty: Ty<'tcx>) -> &'tcx Const<'tcx> {
        .                   self.mk_const(ty::Const { val: ty::ConstKind::Param(ParamConst { index, name }), ty })
        .               }
        .           
   12,488 ( 0.00%)      pub fn mk_param_from_def(self, param: &ty::GenericParamDef) -> GenericArg<'tcx> {
    8,830 ( 0.00%)          match param.kind {
        .                       GenericParamDefKind::Lifetime => {
      270 ( 0.00%)                  self.mk_region(ty::ReEarlyBound(param.to_early_bound_region_data())).into()
        .                       }
    3,478 ( 0.00%)              GenericParamDefKind::Type { .. } => self.mk_ty_param(param.index, param.name).into(),
        .                       GenericParamDefKind::Const { .. } => {
        .                           self.mk_const_param(param.index, param.name, self.type_of(param.def_id)).into()
        .                       }
        .                   }
   12,488 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn mk_opaque(self, def_id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
        .                   self.mk_ty(Opaque(def_id, substs))
        .               }
        .           
    1,724 ( 0.00%)      pub fn mk_place_field(self, place: Place<'tcx>, f: Field, ty: Ty<'tcx>) -> Place<'tcx> {
    1,724 ( 0.00%)          self.mk_place_elem(place, PlaceElem::Field(f, ty))
    3,448 ( 0.00%)      }
        .           
       92 ( 0.00%)      pub fn mk_place_deref(self, place: Place<'tcx>) -> Place<'tcx> {
      276 ( 0.00%)          self.mk_place_elem(place, PlaceElem::Deref)
      184 ( 0.00%)      }
        .           
      429 ( 0.00%)      pub fn mk_place_downcast(
        .                   self,
        .                   place: Place<'tcx>,
        .                   adt_def: &'tcx AdtDef,
        .                   variant_index: VariantIdx,
        .               ) -> Place<'tcx> {
      429 ( 0.00%)          self.mk_place_elem(
        .                       place,
      858 ( 0.00%)              PlaceElem::Downcast(Some(adt_def.variants[variant_index].name), variant_index),
        .                   )
      858 ( 0.00%)      }
        .           
        .               pub fn mk_place_downcast_unnamed(
        .                   self,
        .                   place: Place<'tcx>,
        .                   variant_index: VariantIdx,
        .               ) -> Place<'tcx> {
        .                   self.mk_place_elem(place, PlaceElem::Downcast(None, variant_index))
        .               }
-- line 2496 ----------------------------------------
-- line 2497 ----------------------------------------
        .           
        .               pub fn mk_place_index(self, place: Place<'tcx>, index: Local) -> Place<'tcx> {
        .                   self.mk_place_elem(place, PlaceElem::Index(index))
        .               }
        .           
        .               /// This method copies `Place`'s projection, add an element and reintern it. Should not be used
        .               /// to build a full `Place` it's just a convenient way to grab a projection and modify it in
        .               /// flight.
   20,205 ( 0.00%)      pub fn mk_place_elem(self, place: Place<'tcx>, elem: PlaceElem<'tcx>) -> Place<'tcx> {
        .                   let mut projection = place.projection.to_vec();
        .                   projection.push(elem);
        .           
        .                   Place { local: place.local, projection: self.intern_place_elems(&projection) }
   22,450 ( 0.00%)      }
        .           
   32,837 ( 0.00%)      pub fn intern_poly_existential_predicates(
        .                   self,
        .                   eps: &[ty::Binder<'tcx, ExistentialPredicate<'tcx>>],
        .               ) -> &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>> {
    4,738 ( 0.00%)          assert!(!eps.is_empty());
        .                   assert!(
        .                       eps.array_windows()
    3,399 ( 0.00%)                  .all(|[a, b]| a.skip_binder().stable_cmp(self, &b.skip_binder())
        .                               != Ordering::Greater)
        .                   );
   18,952 ( 0.00%)          self._intern_poly_existential_predicates(eps)
   37,528 ( 0.00%)      }
        .           
        .               pub fn intern_predicates(self, preds: &[Predicate<'tcx>]) -> &'tcx List<Predicate<'tcx>> {
        .                   // FIXME consider asking the input slice to be sorted to avoid
        .                   // re-interning permutations, in which case that would be asserted
        .                   // here.
   16,328 ( 0.00%)          if preds.is_empty() {
        .                       // The macro-generated method below asserts we don't intern an empty slice.
        .                       List::empty()
        .                   } else {
    3,599 ( 0.00%)              self._intern_predicates(preds)
        .                   }
   25,728 ( 0.00%)      }
        .           
        .               pub fn intern_type_list(self, ts: &[Ty<'tcx>]) -> &'tcx List<Ty<'tcx>> {
   63,435 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_type_list(ts) }
      406 ( 0.00%)      }
        .           
        .               pub fn intern_substs(self, ts: &[GenericArg<'tcx>]) -> &'tcx List<GenericArg<'tcx>> {
  777,687 ( 0.02%)          if ts.is_empty() { List::empty() } else { self._intern_substs(ts) }
   90,150 ( 0.00%)      }
        .           
        .               pub fn intern_projs(self, ps: &[ProjectionKind]) -> &'tcx List<ProjectionKind> {
        .                   if ps.is_empty() { List::empty() } else { self._intern_projs(ps) }
        .               }
        .           
        .               pub fn intern_place_elems(self, ts: &[PlaceElem<'tcx>]) -> &'tcx List<PlaceElem<'tcx>> {
   24,393 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_place_elems(ts) }
    8,306 ( 0.00%)      }
        .           
        .               pub fn intern_canonical_var_infos(
        .                   self,
        .                   ts: &[CanonicalVarInfo<'tcx>],
        .               ) -> CanonicalVarInfos<'tcx> {
   48,578 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_canonical_var_infos(ts) }
    6,812 ( 0.00%)      }
        .           
        .               pub fn intern_bound_variable_kinds(
        .                   self,
        .                   ts: &[ty::BoundVariableKind],
        .               ) -> &'tcx List<ty::BoundVariableKind> {
   16,743 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_bound_variable_kinds(ts) }
   27,176 ( 0.00%)      }
        .           
        .               pub fn mk_fn_sig<I>(
        .                   self,
        .                   inputs: I,
        .                   output: I::Item,
        .                   c_variadic: bool,
        .                   unsafety: hir::Unsafety,
        .                   abi: abi::Abi,
        .               ) -> <I::Item as InternIteratorElement<Ty<'tcx>, ty::FnSig<'tcx>>>::Output
        .               where
        .                   I: Iterator<Item: InternIteratorElement<Ty<'tcx>, ty::FnSig<'tcx>>>,
        .               {
        .                   inputs.chain(iter::once(output)).intern_with(|xs| ty::FnSig {
    5,956 ( 0.00%)              inputs_and_output: self.intern_type_list(xs),
    1,323 ( 0.00%)              c_variadic,
    1,682 ( 0.00%)              unsafety,
    1,928 ( 0.00%)              abi,
      750 ( 0.00%)          })
        .               }
        .           
        .               pub fn mk_poly_existential_predicates<
        .                   I: InternAs<
        .                       [ty::Binder<'tcx, ExistentialPredicate<'tcx>>],
        .                       &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>>,
        .                   >,
        .               >(
        .                   self,
        .                   iter: I,
        .               ) -> I::Output {
   18,059 ( 0.00%)          iter.intern_with(|xs| self.intern_poly_existential_predicates(xs))
        .               }
        .           
        .               pub fn mk_predicates<I: InternAs<[Predicate<'tcx>], &'tcx List<Predicate<'tcx>>>>(
        .                   self,
        .                   iter: I,
        .               ) -> I::Output {
       12 ( 0.00%)          iter.intern_with(|xs| self.intern_predicates(xs))
        .               }
        .           
        .               pub fn mk_type_list<I: InternAs<[Ty<'tcx>], &'tcx List<Ty<'tcx>>>>(self, iter: I) -> I::Output {
    5,849 ( 0.00%)          iter.intern_with(|xs| self.intern_type_list(xs))
        .               }
        .           
        .               pub fn mk_substs<I: InternAs<[GenericArg<'tcx>], &'tcx List<GenericArg<'tcx>>>>(
        .                   self,
        .                   iter: I,
        .               ) -> I::Output {
  562,390 ( 0.01%)          iter.intern_with(|xs| self.intern_substs(xs))
        .               }
        .           
        .               pub fn mk_place_elems<I: InternAs<[PlaceElem<'tcx>], &'tcx List<PlaceElem<'tcx>>>>(
        .                   self,
        .                   iter: I,
        .               ) -> I::Output {
    4,824 ( 0.00%)          iter.intern_with(|xs| self.intern_place_elems(xs))
        .               }
        .           
   48,906 ( 0.00%)      pub fn mk_substs_trait(self, self_ty: Ty<'tcx>, rest: &[GenericArg<'tcx>]) -> SubstsRef<'tcx> {
        .                   self.mk_substs(iter::once(self_ty.into()).chain(rest.iter().cloned()))
   97,812 ( 0.00%)      }
        .           
        .               pub fn mk_bound_variable_kinds<
        .                   I: InternAs<[ty::BoundVariableKind], &'tcx List<ty::BoundVariableKind>>,
        .               >(
        .                   self,
        .                   iter: I,
        .               ) -> I::Output {
   85,753 ( 0.00%)          iter.intern_with(|xs| self.intern_bound_variable_kinds(xs))
        .               }
        .           
        .               /// Walks upwards from `id` to find a node which might change lint levels with attributes.
        .               /// It stops at `bound` and just returns it if reached.
  360,332 ( 0.01%)      pub fn maybe_lint_level_root_bounded(self, mut id: HirId, bound: HirId) -> HirId {
  360,332 ( 0.01%)          let hir = self.hir();
        .                   loop {
  714,525 ( 0.01%)              if id == bound {
        .                           return bound;
        .                       }
        .           
  945,599 ( 0.02%)              if hir.attrs(id).iter().any(|attr| Level::from_symbol(attr.name_or_empty()).is_some()) {
        .                           return id;
        .                       }
        .                       let next = hir.get_parent_node(id);
  560,097 ( 0.01%)              if next == id {
        .                           bug!("lint traversal reached the root of the crate");
        .                       }
        .                       id = next;
        .                   }
  514,760 ( 0.01%)      }
        .           
   21,312 ( 0.00%)      pub fn lint_level_at_node(
        .                   self,
        .                   lint: &'static Lint,
        .                   mut id: hir::HirId,
        .               ) -> (Level, LintLevelSource) {
        .                   let sets = self.lint_levels(());
        .                   loop {
  107,937 ( 0.00%)              if let Some(pair) = sets.level_and_source(lint, id, self.sess) {
        .                           return pair;
        .                       }
    7,849 ( 0.00%)              let next = self.hir().get_parent_node(id);
   23,547 ( 0.00%)              if next == id {
        .                           bug!("lint traversal reached the root of the crate");
        .                       }
        .                       id = next;
        .                   }
   21,312 ( 0.00%)      }
        .           
    3,892 ( 0.00%)      pub fn struct_span_lint_hir(
        .                   self,
        .                   lint: &'static Lint,
        .                   hir_id: HirId,
        .                   span: impl Into<MultiSpan>,
        .                   decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),
        .               ) {
    7,284 ( 0.00%)          let (level, src) = self.lint_level_at_node(lint, hir_id);
    3,180 ( 0.00%)          struct_lint_level(self.sess, lint, level, src, Some(span.into()), decorate);
    2,224 ( 0.00%)      }
        .           
        .               pub fn struct_lint_node(
        .                   self,
        .                   lint: &'static Lint,
        .                   id: HirId,
        .                   decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),
        .               ) {
        .                   let (level, src) = self.lint_level_at_node(lint, id);
        .                   struct_lint_level(self.sess, lint, level, src, None, decorate);
        .               }
        .           
   16,632 ( 0.00%)      pub fn in_scope_traits(self, id: HirId) -> Option<&'tcx [TraitCandidate]> {
    4,752 ( 0.00%)          let map = self.in_scope_traits_map(id.owner)?;
        .                   let candidates = map.get(&id.local_id)?;
    4,752 ( 0.00%)          Some(&*candidates)
   19,008 ( 0.00%)      }
        .           
   32,886 ( 0.00%)      pub fn named_region(self, id: HirId) -> Option<resolve_lifetime::Region> {
        .                   debug!(?id, "named_region");
        .                   self.named_region_map(id.owner).and_then(|map| map.get(&id.local_id).cloned())
   42,282 ( 0.00%)      }
        .           
      108 ( 0.00%)      pub fn is_late_bound(self, id: HirId) -> bool {
        .                   self.is_late_bound_map(id.owner)
        6 ( 0.00%)              .map_or(false, |(owner, set)| owner == id.owner && set.contains(&id.local_id))
       96 ( 0.00%)      }
        .           
   26,635 ( 0.00%)      pub fn object_lifetime_defaults(self, id: HirId) -> Option<Vec<ObjectLifetimeDefault>> {
        .                   self.object_lifetime_defaults_map(id.owner)
   34,245 ( 0.00%)      }
        .           
   15,561 ( 0.00%)      pub fn late_bound_vars(self, id: HirId) -> &'tcx List<ty::BoundVariableKind> {
        .                   self.mk_bound_variable_kinds(
        .                       self.late_bound_vars_map(id.owner)
        .                           .and_then(|map| map.get(&id.local_id).cloned())
        .                           .unwrap_or_else(|| {
        .                               bug!("No bound vars found for {:?} ({:?})", self.hir().node_to_string(id), id)
        .                           })
        .                           .iter(),
        .                   )
   15,561 ( 0.00%)      }
        .           
        .               pub fn lifetime_scope(self, id: HirId) -> Option<LifetimeScopeForPath> {
        .                   self.lifetime_scope_map(id.owner).and_then(|mut map| map.remove(&id.local_id))
        .               }
        .           
        .               /// Whether the `def_id` counts as const fn in the current crate, considering all active
        .               /// feature gates
      290 ( 0.00%)      pub fn is_const_fn(self, def_id: DefId) -> bool {
       29 ( 0.00%)          if self.is_const_fn_raw(def_id) {
       25 ( 0.00%)              match self.lookup_const_stability(def_id) {
        .                           Some(stability) if stability.level.is_unstable() => {
        .                               // has a `rustc_const_unstable` attribute, check whether the user enabled the
        .                               // corresponding feature gate.
        .                               self.features()
        .                                   .declared_lib_features
        .                                   .iter()
        .                                   .any(|&(sym, _)| sym == stability.feature)
        .                           }
-- line 2742 ----------------------------------------
-- line 2743 ----------------------------------------
        .                           // functions without const stability are either stable user written
        .                           // const fn or the user is using feature gates and we thus don't
        .                           // care what they do
        .                           _ => true,
        .                       }
        .                   } else {
        .                       false
        .                   }
      261 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> TyCtxtAt<'tcx> {
        .               /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` to ensure it gets used.
        .               #[track_caller]
        .               pub fn ty_error(self) -> Ty<'tcx> {
        .                   self.tcx.ty_error_with_message(self.span, "TyKind::Error constructed but no error reported")
        .               }
-- line 2759 ----------------------------------------
-- line 2774 ----------------------------------------
        .           }
        .           
        .           impl<I, T, R, E> InternAs<[T], R> for I
        .           where
        .               E: InternIteratorElement<T, R>,
        .               I: Iterator<Item = E>,
        .           {
        .               type Output = E::Output;
  142,208 ( 0.00%)      fn intern_with<F>(self, f: F) -> Self::Output
        .               where
        .                   F: FnOnce(&[T]) -> R,
        .               {
2,006,668 ( 0.04%)          E::intern_with(self, f)
  142,389 ( 0.00%)      }
        .           }
        .           
        .           pub trait InternIteratorElement<T, R>: Sized {
        .               type Output;
        .               fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(iter: I, f: F) -> Self::Output;
        .           }
        .           
        .           impl<T, R> InternIteratorElement<T, R> for T {
        .               type Output = R;
  331,740 ( 0.01%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(
        .                   mut iter: I,
        .                   f: F,
        .               ) -> Self::Output {
        .                   // This code is hot enough that it's worth specializing for the most
        .                   // common length lists, to avoid the overhead of `SmallVec` creation.
        .                   // Lengths 0, 1, and 2 typically account for ~95% of cases. If
        .                   // `size_hint` is incorrect a panic will occur via an `unwrap` or an
        .                   // `assert`.
  400,744 ( 0.01%)          match iter.size_hint() {
        .                       (0, Some(0)) => {
       27 ( 0.00%)                  assert!(iter.next().is_none());
        .                           f(&[])
        .                       }
        .                       (1, Some(1)) => {
        .                           let t0 = iter.next().unwrap();
       36 ( 0.00%)                  assert!(iter.next().is_none());
   53,785 ( 0.00%)                  f(&[t0])
        .                       }
        .                       (2, Some(2)) => {
        .                           let t0 = iter.next().unwrap();
        .                           let t1 = iter.next().unwrap();
      436 ( 0.00%)                  assert!(iter.next().is_none());
   46,148 ( 0.00%)                  f(&[t0, t1])
        .                       }
    3,556 ( 0.00%)              _ => f(&iter.collect::<SmallVec<[_; 8]>>()),
        .                   }
  317,604 ( 0.01%)      }
        .           }
        .           
        .           impl<'a, T, R> InternIteratorElement<T, R> for &'a T
        .           where
        .               T: Clone + 'a,
        .           {
        .               type Output = R;
    9,774 ( 0.00%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(iter: I, f: F) -> Self::Output {
        .                   // This code isn't hot.
      300 ( 0.00%)          f(&iter.cloned().collect::<SmallVec<[_; 8]>>())
    8,090 ( 0.00%)      }
        .           }
        .           
        .           impl<T, R, E> InternIteratorElement<T, R> for Result<T, E> {
        .               type Output = Result<R, E>;
  691,492 ( 0.01%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(
        .                   mut iter: I,
        .                   f: F,
        .               ) -> Self::Output {
        .                   // This code is hot enough that it's worth specializing for the most
        .                   // common length lists, to avoid the overhead of `SmallVec` creation.
        .                   // Lengths 0, 1, and 2 typically account for ~95% of cases. If
        .                   // `size_hint` is incorrect a panic will occur via an `unwrap` or an
        .                   // `assert`, unless a failure happens first, in which case the result
        .                   // will be an error anyway.
  497,076 ( 0.01%)          Ok(match iter.size_hint() {
        .                       (0, Some(0)) => {
        .                           assert!(iter.next().is_none());
        .                           f(&[])
        .                       }
        .                       (1, Some(1)) => {
   12,786 ( 0.00%)                  let t0 = iter.next().unwrap()?;
        .                           assert!(iter.next().is_none());
   52,159 ( 0.00%)                  f(&[t0])
        .                       }
        .                       (2, Some(2)) => {
      794 ( 0.00%)                  let t0 = iter.next().unwrap()?;
      794 ( 0.00%)                  let t1 = iter.next().unwrap()?;
    1,191 ( 0.00%)                  assert!(iter.next().is_none());
   46,374 ( 0.00%)                  f(&[t0, t1])
        .                       }
    3,762 ( 0.00%)              _ => f(&iter.collect::<Result<SmallVec<[_; 8]>, _>>()?),
        .                   })
  772,115 ( 0.02%)      }
        .           }
        .           
        .           // We are comparing types with different invariant lifetimes, so `ptr::eq`
        .           // won't work for us.
        .           fn ptr_eq<T, U>(t: *const T, u: *const U) -> bool {
  317,043 ( 0.01%)      t as *const () == u as *const ()
        .           }
        .           
        .           pub fn provide(providers: &mut ty::query::Providers) {
        2 ( 0.00%)      providers.in_scope_traits_map =
        .                   |tcx, id| tcx.hir_crate(()).owners[id].as_ref().map(|owner_info| &owner_info.trait_map);
        3 ( 0.00%)      providers.resolutions = |tcx, ()| &tcx.untracked_resolutions;
        2 ( 0.00%)      providers.module_reexports =
        .                   |tcx, id| tcx.resolutions(()).reexport_map.get(&id).map(|v| &v[..]);
        2 ( 0.00%)      providers.crate_name = |tcx, id| {
        1 ( 0.00%)          assert_eq!(id, LOCAL_CRATE);
        1 ( 0.00%)          tcx.crate_name
        .               };
        2 ( 0.00%)      providers.maybe_unused_trait_import =
        .                   |tcx, id| tcx.resolutions(()).maybe_unused_trait_imports.contains(&id);
        2 ( 0.00%)      providers.maybe_unused_extern_crates =
        .                   |tcx, ()| &tcx.resolutions(()).maybe_unused_extern_crates[..];
        2 ( 0.00%)      providers.names_imported_by_glob_use = |tcx, id| {
        .                   tcx.arena.alloc(tcx.resolutions(()).glob_map.get(&id).cloned().unwrap_or_default())
        .               };
        .           
      236 ( 0.00%)      providers.lookup_stability = |tcx, id| tcx.stability().local_stability(id.expect_local());
        2 ( 0.00%)      providers.lookup_const_stability =
      225 ( 0.00%)          |tcx, id| tcx.stability().local_const_stability(id.expect_local());
        2 ( 0.00%)      providers.lookup_deprecation_entry =
   21,464 ( 0.00%)          |tcx, id| tcx.stability().local_deprecation_entry(id.expect_local());
        2 ( 0.00%)      providers.extern_mod_stmt_cnum =
        .                   |tcx, id| tcx.resolutions(()).extern_crate_map.get(&id).cloned();
        3 ( 0.00%)      providers.output_filenames = |tcx, ()| tcx.output_filenames.clone();
        3 ( 0.00%)      providers.features_query = |tcx, ()| tcx.sess.features_untracked();
        2 ( 0.00%)      providers.is_panic_runtime = |tcx, cnum| {
        .                   assert_eq!(cnum, LOCAL_CRATE);
        .                   tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::panic_runtime)
        .               };
        2 ( 0.00%)      providers.is_compiler_builtins = |tcx, cnum| {
        .                   assert_eq!(cnum, LOCAL_CRATE);
        .                   tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::compiler_builtins)
        .               };
        2 ( 0.00%)      providers.has_panic_handler = |tcx, cnum| {
        1 ( 0.00%)          assert_eq!(cnum, LOCAL_CRATE);
        .                   // We want to check if the panic handler was defined in this crate
        3 ( 0.00%)          tcx.lang_items().panic_impl().map_or(false, |did| did.is_local())
        .               };
        .           }

2,074,246 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/option.rs
--------------------------------------------------------------------------------
Ir                 

-- line 504 ----------------------------------------
        .           use crate::panicking::{panic, panic_str};
        .           use crate::pin::Pin;
        .           use crate::{
        .               convert, hint, mem,
        .               ops::{self, ControlFlow, Deref, DerefMut},
        .           };
        .           
        .           /// The `Option` type. See [the module level documentation](self) for more.
3,012,443 ( 0.06%)  #[derive(Copy, PartialEq, PartialOrd, Eq, Ord, Debug, Hash)]
        .           #[rustc_diagnostic_item = "Option"]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           pub enum Option<T> {
        .               /// No value.
        .               #[lang = "None"]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               None,
        .               /// Some value of type `T`.
        .               #[lang = "Some"]
        .               #[stable(feature = "rust1", since = "1.0.0")]
   20,875 ( 0.00%)      Some(#[stable(feature = "rust1", since = "1.0.0")] T),
        .           }
        .           
        .           /////////////////////////////////////////////////////////////////////////////
        .           // Type implementation
        .           /////////////////////////////////////////////////////////////////////////////
        .           
        .           impl<T> Option<T> {
        .               /////////////////////////////////////////////////////////////////////////
-- line 531 ----------------------------------------
-- line 542 ----------------------------------------
        .               ///
        .               /// let x: Option<u32> = None;
        .               /// assert_eq!(x.is_some(), false);
        .               /// ```
        .               #[must_use = "if you intended to assert that this has a value, consider `.unwrap()` instead"]
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_stable(feature = "const_option", since = "1.48.0")]
   17,262 ( 0.00%)      pub const fn is_some(&self) -> bool {
3,890,734 ( 0.08%)          matches!(*self, Some(_))
   43,155 ( 0.00%)      }
        .           
        .               /// Returns `true` if the option is a [`Some`] wrapping a value matching the predicate.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// #![feature(is_some_with)]
        .               ///
-- line 560 ----------------------------------------
-- line 585 ----------------------------------------
        .               /// let x: Option<u32> = None;
        .               /// assert_eq!(x.is_none(), true);
        .               /// ```
        .               #[must_use = "if you intended to assert that this doesn't have a value, consider \
        .                             `.and_then(|_| panic!(\"`Option` had a value when expected `None`\"))` instead"]
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_stable(feature = "const_option", since = "1.48.0")]
    9,076 ( 0.00%)      pub const fn is_none(&self) -> bool {
   13,614 ( 0.00%)          !self.is_some()
   18,152 ( 0.00%)      }
        .           
        .               /////////////////////////////////////////////////////////////////////////
        .               // Adapter for working with references
        .               /////////////////////////////////////////////////////////////////////////
        .           
        .               /// Converts from `&Option<T>` to `Option<&T>`.
        .               ///
        .               /// # Examples
-- line 603 ----------------------------------------
-- line 615 ----------------------------------------
        .               /// // First, cast `Option<String>` to `Option<&String>` with `as_ref`,
        .               /// // then consume *that* with `map`, leaving `text` on the stack.
        .               /// let text_length: Option<usize> = text.as_ref().map(|s| s.len());
        .               /// println!("still can print text: {:?}", text);
        .               /// ```
        .               #[inline]
        .               #[rustc_const_stable(feature = "const_option", since = "1.48.0")]
        .               #[stable(feature = "rust1", since = "1.0.0")]
   69,579 ( 0.00%)      pub const fn as_ref(&self) -> Option<&T> {
8,867,198 ( 0.19%)          match *self {
    5,227 ( 0.00%)              Some(ref x) => Some(x),
   41,182 ( 0.00%)              None => None,
        .                   }
   69,579 ( 0.00%)      }
        .           
        .               /// Converts from `&mut Option<T>` to `Option<&mut T>`.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let mut x = Some(2);
        .               /// match x.as_mut() {
-- line 636 ----------------------------------------
-- line 637 ----------------------------------------
        .               ///     Some(v) => *v = 42,
        .               ///     None => {},
        .               /// }
        .               /// assert_eq!(x, Some(42));
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_option", issue = "67441")]
   13,944 ( 0.00%)      pub const fn as_mut(&mut self) -> Option<&mut T> {
3,301,831 ( 0.07%)          match *self {
    8,729 ( 0.00%)              Some(ref mut x) => Some(x),
      574 ( 0.00%)              None => None,
        .                   }
   13,944 ( 0.00%)      }
        .           
        .               /// Converts from <code>[Pin]<[&]Option\<T>></code> to <code>Option<[Pin]<[&]T>></code>.
        .               ///
        .               /// [&]: reference "shared reference"
        .               #[inline]
        .               #[must_use]
        .               #[stable(feature = "pin", since = "1.33.0")]
        .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
-- line 658 ----------------------------------------
-- line 704 ----------------------------------------
        .               /// ```should_panic
        .               /// let x: Option<&str> = None;
        .               /// x.expect("fruits are healthy"); // panics with `fruits are healthy`
        .               /// ```
        .               #[inline]
        .               #[track_caller]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_option", issue = "67441")]
   12,728 ( 0.00%)      pub const fn expect(self, msg: &str) -> T {
1,873,261 ( 0.04%)          match self {
  756,430 ( 0.02%)              Some(val) => val,
        .                       None => expect_failed(msg),
        .                   }
    3,182 ( 0.00%)      }
        .           
        .               /// Returns the contained [`Some`] value, consuming the `self` value.
        .               ///
        .               /// Because this function may panic, its use is generally discouraged.
        .               /// Instead, prefer to use pattern matching and handle the [`None`]
        .               /// case explicitly, or call [`unwrap_or`], [`unwrap_or_else`], or
        .               /// [`unwrap_or_default`].
        .               ///
-- line 725 ----------------------------------------
-- line 741 ----------------------------------------
        .               /// ```should_panic
        .               /// let x: Option<&str> = None;
        .               /// assert_eq!(x.unwrap(), "air"); // fails
        .               /// ```
        .               #[inline]
        .               #[track_caller]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_option", issue = "67441")]
  108,124 ( 0.00%)      pub const fn unwrap(self) -> T {
5,867,747 ( 0.12%)          match self {
1,064,514 ( 0.02%)              Some(val) => val,
        .                       None => panic("called `Option::unwrap()` on a `None` value"),
        .                   }
   50,580 ( 0.00%)      }
        .           
        .               /// Returns the contained [`Some`] value or a provided default.
        .               ///
        .               /// Arguments passed to `unwrap_or` are eagerly evaluated; if you are passing
        .               /// the result of a function call, it is recommended to use [`unwrap_or_else`],
        .               /// which is lazily evaluated.
        .               ///
        .               /// [`unwrap_or_else`]: Option::unwrap_or_else
-- line 762 ----------------------------------------
-- line 765 ----------------------------------------
        .               ///
        .               /// ```
        .               /// assert_eq!(Some("car").unwrap_or("bike"), "car");
        .               /// assert_eq!(None.unwrap_or("bike"), "bike");
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
   17,697 ( 0.00%)      pub const fn unwrap_or(self, default: T) -> T
        .               where
        .                   T: ~const Drop,
        .               {
1,862,482 ( 0.04%)          match self {
    2,230 ( 0.00%)              Some(x) => x,
   17,687 ( 0.00%)              None => default,
        .                   }
   21,376 ( 0.00%)      }
        .           
        .               /// Returns the contained [`Some`] value or computes it from a closure.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let k = 10;
        .               /// assert_eq!(Some(4).unwrap_or_else(|| 2 * k), 4);
        .               /// assert_eq!(None.unwrap_or_else(|| 2 * k), 20);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
    6,832 ( 0.00%)      pub const fn unwrap_or_else<F>(self, f: F) -> T
        .               where
        .                   F: ~const FnOnce() -> T,
        .                   F: ~const Drop,
        .               {
1,520,716 ( 0.03%)          match self {
  157,714 ( 0.00%)              Some(x) => x,
   31,869 ( 0.00%)              None => f(),
        .                   }
   10,274 ( 0.00%)      }
        .           
        .               /// Returns the contained [`Some`] value or a default.
        .               ///
        .               /// Consumes the `self` argument then, if [`Some`], returns the contained
        .               /// value, otherwise if [`None`], returns the [default value] for that
        .               /// type.
        .               ///
        .               /// # Examples
-- line 812 ----------------------------------------
-- line 831 ----------------------------------------
        .               /// [`FromStr`]: crate::str::FromStr
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
        .               pub const fn unwrap_or_default(self) -> T
        .               where
        .                   T: ~const Default,
        .               {
   16,927 ( 0.00%)          match self {
   13,177 ( 0.00%)              Some(x) => x,
        .                       None => Default::default(),
        .                   }
        .               }
        .           
        .               /// Returns the contained [`Some`] value, consuming the `self` value,
        .               /// without checking that the value is not [`None`].
        .               ///
        .               /// # Safety
-- line 848 ----------------------------------------
-- line 861 ----------------------------------------
        .               /// ```no_run
        .               /// let x: Option<&str> = None;
        .               /// assert_eq!(unsafe { x.unwrap_unchecked() }, "air"); // Undefined behavior!
        .               /// ```
        .               #[inline]
        .               #[track_caller]
        .               #[stable(feature = "option_result_unwrap_unchecked", since = "1.58.0")]
        .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
    8,708 ( 0.00%)      pub const unsafe fn unwrap_unchecked(self) -> T {
    8,708 ( 0.00%)          debug_assert!(self.is_some());
   30,478 ( 0.00%)          match self {
   13,062 ( 0.00%)              Some(val) => val,
        .                       // SAFETY: the safety contract must be upheld by the caller.
        .                       None => unsafe { hint::unreachable_unchecked() },
        .                   }
    8,708 ( 0.00%)      }
        .           
        .               /////////////////////////////////////////////////////////////////////////
        .               // Transforming contained values
        .               /////////////////////////////////////////////////////////////////////////
        .           
        .               /// Maps an `Option<T>` to `Option<U>` by applying a function to a contained value.
        .               ///
        .               /// # Examples
-- line 884 ----------------------------------------
-- line 892 ----------------------------------------
        .               /// // `Option::map` takes self *by value*, consuming `maybe_some_string`
        .               /// let maybe_some_len = maybe_some_string.map(|s| s.len());
        .               ///
        .               /// assert_eq!(maybe_some_len, Some(13));
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
1,332,693 ( 0.03%)      pub const fn map<U, F>(self, f: F) -> Option<U>
        .               where
        .                   F: ~const FnOnce(T) -> U,
        .                   F: ~const Drop,
        .               {
7,976,443 ( 0.17%)          match self {
6,620,333 ( 0.14%)              Some(x) => Some(f(x)),
  283,933 ( 0.01%)              None => None,
        .                   }
2,493,003 ( 0.05%)      }
        .           
        .               /// Calls the provided closure with a reference to the contained value (if [`Some`]).
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// #![feature(result_option_inspect)]
        .               ///
-- line 917 ----------------------------------------
-- line 954 ----------------------------------------
        .               /// assert_eq!(x.map_or(42, |v| v.len()), 3);
        .               ///
        .               /// let x: Option<&str> = None;
        .               /// assert_eq!(x.map_or(42, |v| v.len()), 42);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
    8,324 ( 0.00%)      pub const fn map_or<U, F>(self, default: U, f: F) -> U
        .               where
        .                   F: ~const FnOnce(T) -> U,
        .                   F: ~const Drop,
        .                   U: ~const Drop,
        .               {
1,352,115 ( 0.03%)          match self {
   67,988 ( 0.00%)              Some(t) => f(t),
   35,939 ( 0.00%)              None => default,
        .                   }
   13,298 ( 0.00%)      }
        .           
        .               /// Computes a default function result (if none), or
        .               /// applies a different function to the contained value (if any).
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let k = 21;
-- line 980 ----------------------------------------
-- line 990 ----------------------------------------
        .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
        .               pub const fn map_or_else<U, D, F>(self, default: D, f: F) -> U
        .               where
        .                   D: ~const FnOnce() -> U,
        .                   D: ~const Drop,
        .                   F: ~const FnOnce(T) -> U,
        .                   F: ~const Drop,
        .               {
   29,024 ( 0.00%)          match self {
    1,776 ( 0.00%)              Some(t) => f(t),
        .                       None => default(),
        .                   }
        .               }
        .           
        .               /// Transforms the `Option<T>` into a [`Result<T, E>`], mapping [`Some(v)`] to
        .               /// [`Ok(v)`] and [`None`] to [`Err(err)`].
        .               ///
        .               /// Arguments passed to `ok_or` are eagerly evaluated; if you are passing the
-- line 1007 ----------------------------------------
-- line 1020 ----------------------------------------
        .               /// assert_eq!(x.ok_or(0), Ok("foo"));
        .               ///
        .               /// let x: Option<&str> = None;
        .               /// assert_eq!(x.ok_or(0), Err(0));
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
  579,719 ( 0.01%)      pub const fn ok_or<E>(self, err: E) -> Result<T, E>
        .               where
        .                   E: ~const Drop,
        .               {
1,706,814 ( 0.04%)          match self {
  535,218 ( 0.01%)              Some(v) => Ok(v),
    9,569 ( 0.00%)              None => Err(err),
        .                   }
  824,575 ( 0.02%)      }
        .           
        .               /// Transforms the `Option<T>` into a [`Result<T, E>`], mapping [`Some(v)`] to
        .               /// [`Ok(v)`] and [`None`] to [`Err(err())`].
        .               ///
        .               /// [`Ok(v)`]: Ok
        .               /// [`Err(err())`]: Err
        .               /// [`Some(v)`]: Some
        .               ///
-- line 1044 ----------------------------------------
-- line 1049 ----------------------------------------
        .               /// assert_eq!(x.ok_or_else(|| 0), Ok("foo"));
        .               ///
        .               /// let x: Option<&str> = None;
        .               /// assert_eq!(x.ok_or_else(|| 0), Err(0));
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
    3,340 ( 0.00%)      pub const fn ok_or_else<E, F>(self, err: F) -> Result<T, E>
        .               where
        .                   F: ~const FnOnce() -> E,
        .                   F: ~const Drop,
        .               {
  124,120 ( 0.00%)          match self {
  119,194 ( 0.00%)              Some(v) => Ok(v),
   38,137 ( 0.00%)              None => Err(err()),
        .                   }
    4,140 ( 0.00%)      }
        .           
        .               /// Converts from `Option<T>` (or `&Option<T>`) to `Option<&T::Target>`.
        .               ///
        .               /// Leaves the original Option in-place, creating a new one with a reference
        .               /// to the original one, additionally coercing the contents via [`Deref`].
        .               ///
        .               /// # Examples
        .               ///
-- line 1074 ----------------------------------------
-- line 1080 ----------------------------------------
        .               /// assert_eq!(x.as_deref(), None);
        .               /// ```
        .               #[stable(feature = "option_deref", since = "1.40.0")]
        .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
        .               pub const fn as_deref(&self) -> Option<&T::Target>
        .               where
        .                   T: ~const Deref,
        .               {
   39,273 ( 0.00%)          match self.as_ref() {
        .                       Some(t) => Some(t.deref()),
        .                       None => None,
        .                   }
        .               }
        .           
        .               /// Converts from `Option<T>` (or `&mut Option<T>`) to `Option<&mut T::Target>`.
        .               ///
        .               /// Leaves the original `Option` in-place, creating a new one containing a mutable reference to
-- line 1096 ----------------------------------------
-- line 1213 ----------------------------------------
        .               /// assert_eq!(Some(2).and_then(sq).and_then(sq), Some(16));
        .               /// assert_eq!(Some(2).and_then(sq).and_then(nope), None);
        .               /// assert_eq!(Some(2).and_then(nope).and_then(sq), None);
        .               /// assert_eq!(None.and_then(sq).and_then(sq), None);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
   14,408 ( 0.00%)      pub const fn and_then<U, F>(self, f: F) -> Option<U>
        .               where
        .                   F: ~const FnOnce(T) -> Option<U>,
        .                   F: ~const Drop,
        .               {
  228,074 ( 0.00%)          match self {
   63,987 ( 0.00%)              Some(x) => f(x),
      226 ( 0.00%)              None => None,
        .                   }
   85,115 ( 0.00%)      }
        .           
        .               /// Returns [`None`] if the option is [`None`], otherwise calls `predicate`
        .               /// with the wrapped value and returns:
        .               ///
        .               /// - [`Some(t)`] if `predicate` returns `true` (where `t` is the wrapped
        .               ///   value), and
        .               /// - [`None`] if `predicate` returns `false`.
        .               ///
-- line 1238 ----------------------------------------
-- line 1257 ----------------------------------------
        .               #[stable(feature = "option_filter", since = "1.27.0")]
        .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
        .               pub const fn filter<P>(self, predicate: P) -> Self
        .               where
        .                   T: ~const Drop,
        .                   P: ~const FnOnce(&T) -> bool,
        .                   P: ~const Drop,
        .               {
   13,195 ( 0.00%)          if let Some(x) = self {
   12,353 ( 0.00%)              if predicate(&x) {
        .                           return Some(x);
        .                       }
        .                   }
        .                   None
      558 ( 0.00%)      }
        .           
        .               /// Returns the option if it contains a value, otherwise returns `optb`.
        .               ///
        .               /// Arguments passed to `or` are eagerly evaluated; if you are passing the
        .               /// result of a function call, it is recommended to use [`or_else`], which is
        .               /// lazily evaluated.
        .               ///
        .               /// [`or_else`]: Option::or_else
-- line 1279 ----------------------------------------
-- line 1295 ----------------------------------------
        .               ///
        .               /// let x: Option<u32> = None;
        .               /// let y = None;
        .               /// assert_eq!(x.or(y), None);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
   19,607 ( 0.00%)      pub const fn or(self, optb: Option<T>) -> Option<T>
        .               where
        .                   T: ~const Drop,
        .               {
   33,005 ( 0.00%)          match self {
   14,637 ( 0.00%)              Some(x) => Some(x),
   11,209 ( 0.00%)              None => optb,
        .                   }
   14,020 ( 0.00%)      }
        .           
        .               /// Returns the option if it contains a value, otherwise calls `f` and
        .               /// returns the result.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// fn nobody() -> Option<&'static str> { None }
-- line 1319 ----------------------------------------
-- line 1321 ----------------------------------------
        .               ///
        .               /// assert_eq!(Some("barbarians").or_else(vikings), Some("barbarians"));
        .               /// assert_eq!(None.or_else(vikings), Some("vikings"));
        .               /// assert_eq!(None.or_else(nobody), None);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
    2,510 ( 0.00%)      pub const fn or_else<F>(self, f: F) -> Option<T>
        .               where
        .                   F: ~const FnOnce() -> Option<T>,
        .                   F: ~const Drop,
        .               {
   83,642 ( 0.00%)          match self {
   37,865 ( 0.00%)              Some(x) => Some(x),
    1,650 ( 0.00%)              None => f(),
        .                   }
    2,265 ( 0.00%)      }
        .           
        .               /// Returns [`Some`] if exactly one of `self`, `optb` is [`Some`], otherwise returns [`None`].
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let x = Some(2);
        .               /// let y: Option<u32> = None;
-- line 1346 ----------------------------------------
-- line 1431 ----------------------------------------
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "option_entry", since = "1.20.0")]
        .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
        .               pub const fn get_or_insert(&mut self, value: T) -> &mut T
        .               where
        .                   T: ~const Drop,
        .               {
  119,940 ( 0.00%)          if let None = *self {
  279,860 ( 0.01%)              *self = Some(value);
        .                   }
        .           
        .                   // SAFETY: a `None` variant for `self` would have been replaced by a `Some`
        .                   // variant in the code above.
        .                   unsafe { self.as_mut().unwrap_unchecked() }
        .               }
        .           
        .               /// Inserts the default value into the option if it is [`None`], then
-- line 1448 ----------------------------------------
-- line 1494 ----------------------------------------
        .               ///     *y = 7;
        .               /// }
        .               ///
        .               /// assert_eq!(x, Some(7));
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "option_entry", since = "1.20.0")]
        .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
   13,040 ( 0.00%)      pub const fn get_or_insert_with<F>(&mut self, f: F) -> &mut T
        .               where
        .                   F: ~const FnOnce() -> T,
        .                   F: ~const Drop,
        .               {
1,027,485 ( 0.02%)          if let None = *self {
        .                       // the compiler isn't smart enough to know that we are not dropping a `T`
        .                       // here and wants us to ensure `T` can be dropped at compile time.
   26,273 ( 0.00%)              mem::forget(mem::replace(self, Some(f())))
        .                   }
        .           
        .                   // SAFETY: a `None` variant for `self` would have been replaced by a `Some`
        .                   // variant in the code above.
   47,718 ( 0.00%)          unsafe { self.as_mut().unwrap_unchecked() }
   21,710 ( 0.00%)      }
        .           
        .               /////////////////////////////////////////////////////////////////////////
        .               // Misc
        .               /////////////////////////////////////////////////////////////////////////
        .           
        .               /// Takes the value out of the option, leaving a [`None`] in its place.
        .               ///
        .               /// # Examples
-- line 1524 ----------------------------------------
-- line 1532 ----------------------------------------
        .               /// let mut x: Option<u32> = None;
        .               /// let y = x.take();
        .               /// assert_eq!(x, None);
        .               /// assert_eq!(y, None);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_option", issue = "67441")]
  563,668 ( 0.01%)      pub const fn take(&mut self) -> Option<T> {
        .                   // FIXME replace `mem::replace` by `mem::take` when the latter is const ready
  559,942 ( 0.01%)          mem::replace(self, None)
  339,870 ( 0.01%)      }
        .           
        .               /// Replaces the actual value in the option by the value given in parameter,
        .               /// returning the old value if present,
        .               /// leaving a [`Some`] in its place without deinitializing either one.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 1551 ----------------------------------------
-- line 1558 ----------------------------------------
        .               /// let old = x.replace(3);
        .               /// assert_eq!(x, Some(3));
        .               /// assert_eq!(old, None);
        .               /// ```
        .               #[inline]
        .               #[rustc_const_unstable(feature = "const_option", issue = "67441")]
        .               #[stable(feature = "option_replace", since = "1.31.0")]
        .               pub const fn replace(&mut self, value: T) -> Option<T> {
    5,584 ( 0.00%)          mem::replace(self, Some(value))
        .               }
        .           
        .               /// Returns `true` if the option is a [`Some`] value containing the given value.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// #![feature(option_result_contains)]
-- line 1574 ----------------------------------------
-- line 1712 ----------------------------------------
        .               #[stable(feature = "copied", since = "1.35.0")]
        .               #[rustc_const_unstable(feature = "const_option", issue = "67441")]
        .               pub const fn copied(self) -> Option<T>
        .               where
        .                   T: Copy,
        .               {
        .                   // FIXME: this implementation, which sidesteps using `Option::map` since it's not const
        .                   // ready yet, should be reverted when possible to avoid code repetition
   78,095 ( 0.00%)          match self {
  890,388 ( 0.02%)              Some(&v) => Some(v),
    6,239 ( 0.00%)              None => None,
        .                   }
       14 ( 0.00%)      }
        .           
        .               /// Maps an `Option<&T>` to an `Option<T>` by cloning the contents of the
        .               /// option.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let x = 12;
-- line 1732 ----------------------------------------
-- line 1733 ----------------------------------------
        .               /// let opt_x = Some(&x);
        .               /// assert_eq!(opt_x, Some(&12));
        .               /// let cloned = opt_x.cloned();
        .               /// assert_eq!(cloned, Some(12));
        .               /// ```
        .               #[must_use = "`self` will be dropped if the result is not used"]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_option_cloned", issue = "91582")]
   54,692 ( 0.00%)      pub const fn cloned(self) -> Option<T>
        .               where
        .                   T: ~const Clone,
        .               {
  330,538 ( 0.01%)          match self {
  901,206 ( 0.02%)              Some(t) => Some(t.clone()),
   34,993 ( 0.00%)              None => None,
        .                   }
  124,223 ( 0.00%)      }
        .           }
        .           
        .           impl<T> Option<&mut T> {
        .               /// Maps an `Option<&mut T>` to an `Option<T>` by copying the contents of the
        .               /// option.
        .               ///
        .               /// # Examples
        .               ///
-- line 1757 ----------------------------------------
-- line 1842 ----------------------------------------
        .           
        .           /////////////////////////////////////////////////////////////////////////////
        .           // Trait implementations
        .           /////////////////////////////////////////////////////////////////////////////
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T: Clone> Clone for Option<T> {
        .               #[inline]
   68,380 ( 0.00%)      fn clone(&self) -> Self {
3,658,701 ( 0.08%)          match self {
   82,112 ( 0.00%)              Some(x) => Some(x.clone()),
   38,555 ( 0.00%)              None => None,
        .                   }
1,277,744 ( 0.03%)      }
        .           
        .               #[inline]
        .               fn clone_from(&mut self, source: &Self) {
        .                   match (self, source) {
        .                       (Some(to), Some(from)) => to.clone_from(from),
        .                       (to, from) => *to = from.clone(),
        .                   }
        .               }
-- line 1863 ----------------------------------------
-- line 1870 ----------------------------------------
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let opt: Option<u32> = Option::default();
        .               /// assert!(opt.is_none());
        .               /// ```
        .               #[inline]
       87 ( 0.00%)      fn default() -> Option<T> {
       87 ( 0.00%)          None
      261 ( 0.00%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T> IntoIterator for Option<T> {
        .               type Item = T;
        .               type IntoIter = IntoIter<T>;
        .           
        .               /// Returns a consuming iterator over the possibly contained value.
-- line 1888 ----------------------------------------
-- line 1894 ----------------------------------------
        .               /// let v: Vec<&str> = x.into_iter().collect();
        .               /// assert_eq!(v, ["string"]);
        .               ///
        .               /// let x = None;
        .               /// let v: Vec<&str> = x.into_iter().collect();
        .               /// assert!(v.is_empty());
        .               /// ```
        .               #[inline]
  234,479 ( 0.00%)      fn into_iter(self) -> IntoIter<T> {
  800,121 ( 0.02%)          IntoIter { inner: Item { opt: self } }
  160,980 ( 0.00%)      }
        .           }
        .           
        .           #[stable(since = "1.4.0", feature = "option_iter")]
        .           impl<'a, T> IntoIterator for &'a Option<T> {
        .               type Item = &'a T;
        .               type IntoIter = Iter<'a, T>;
        .           
        .               fn into_iter(self) -> Iter<'a, T> {
-- line 1912 ----------------------------------------
-- line 2000 ----------------------------------------
        .           struct Item<A> {
        .               opt: Option<A>,
        .           }
        .           
        .           impl<A> Iterator for Item<A> {
        .               type Item = A;
        .           
        .               #[inline]
  533,212 ( 0.01%)      fn next(&mut self) -> Option<A> {
  229,686 ( 0.00%)          self.opt.take()
  321,690 ( 0.01%)      }
        .           
        .               #[inline]
       56 ( 0.00%)      fn size_hint(&self) -> (usize, Option<usize>) {
   55,358 ( 0.00%)          match self.opt {
        .                       Some(_) => (1, Some(1)),
      112 ( 0.00%)              None => (0, Some(0)),
        .                   }
       28 ( 0.00%)      }
        .           }
        .           
        .           impl<A> DoubleEndedIterator for Item<A> {
        .               #[inline]
        .               fn next_back(&mut self) -> Option<A> {
        .                   self.opt.take()
        .               }
        .           }
-- line 2026 ----------------------------------------
-- line 2131 ----------------------------------------
        .               inner: Item<A>,
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<A> Iterator for IntoIter<A> {
        .               type Item = A;
        .           
        .               #[inline]
  533,212 ( 0.01%)      fn next(&mut self) -> Option<A> {
  229,686 ( 0.00%)          self.inner.next()
  321,690 ( 0.01%)      }
        .               #[inline]
       56 ( 0.00%)      fn size_hint(&self) -> (usize, Option<usize>) {
       99 ( 0.00%)          self.inner.size_hint()
       28 ( 0.00%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<A> DoubleEndedIterator for IntoIter<A> {
        .               #[inline]
        .               fn next_back(&mut self) -> Option<A> {
        .                   self.inner.next_back()
        .               }
-- line 2153 ----------------------------------------
-- line 2239 ----------------------------------------
        .           
        .           #[unstable(feature = "try_trait_v2", issue = "84277")]
        .           #[rustc_const_unstable(feature = "const_convert", issue = "88674")]
        .           impl<T> const ops::Try for Option<T> {
        .               type Output = T;
        .               type Residual = Option<convert::Infallible>;
        .           
        .               #[inline]
    3,182 ( 0.00%)      fn from_output(output: Self::Output) -> Self {
    3,182 ( 0.00%)          Some(output)
   13,344 ( 0.00%)      }
        .           
        .               #[inline]
  802,713 ( 0.02%)      fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {
3,755,238 ( 0.08%)          match self {
1,307,723 ( 0.03%)              Some(v) => ControlFlow::Continue(v),
   34,080 ( 0.00%)              None => ControlFlow::Break(None),
        .                   }
1,182,766 ( 0.02%)      }
        .           }
        .           
        .           #[unstable(feature = "try_trait_v2", issue = "84277")]
        .           #[rustc_const_unstable(feature = "const_convert", issue = "88674")]
        .           impl<T> const ops::FromResidual for Option<T> {
        .               #[inline]
   18,916 ( 0.00%)      fn from_residual(residual: Option<convert::Infallible>) -> Self {
        .                   match residual {
  140,945 ( 0.00%)              None => None,
        .                   }
   56,883 ( 0.00%)      }
        .           }
        .           
        .           #[unstable(feature = "try_trait_v2_residual", issue = "91285")]
        .           impl<T> ops::Residual<T> for Option<convert::Infallible> {
        .               type TryType = Option<T>;
        .           }
        .           
        .           impl<T> Option<Option<T>> {
-- line 2276 ----------------------------------------
-- line 2297 ----------------------------------------
        .               /// let x: Option<Option<Option<u32>>> = Some(Some(Some(6)));
        .               /// assert_eq!(Some(Some(6)), x.flatten());
        .               /// assert_eq!(Some(6), x.flatten().flatten());
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "option_flattening", since = "1.40.0")]
        .               #[rustc_const_unstable(feature = "const_option", issue = "67441")]
        .               pub const fn flatten(self) -> Option<T> {
      298 ( 0.00%)          match self {
    1,639 ( 0.00%)              Some(inner) => inner,
        .                       None => None,
        .                   }
        .               }
        .           }

7,642,636 ( 0.16%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/option.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/client.rs
--------------------------------------------------------------------------------
Ir                 

-- line 18 ----------------------------------------
        .                       // FIXME(eddyb) use a reference to the `static COUNTERS`, instead of
        .                       // a wrapper `fn` pointer, once `const fn` can reference `static`s.
        .                       extern "C" fn get() -> &'static Self {
        .                           static COUNTERS: HandleCounters = HandleCounters {
        .                               $($oty: AtomicUsize::new(1),)*
        .                               $($ity: AtomicUsize::new(1),)*
        .                           };
        .                           &COUNTERS
       10 ( 0.00%)              }
        .                   }
        .           
        .                   // FIXME(eddyb) generate the definition of `HandleStore` in `server.rs`.
        .                   #[repr(C)]
        .                   #[allow(non_snake_case)]
        .                   pub(super) struct HandleStore<S: server::Types> {
        .                       $($oty: handle::OwnedStore<S::$oty>,)*
        .                       $($ity: handle::InternedStore<S::$ity>,)*
        .                   }
        .           
        .                   impl<S: server::Types> HandleStore<S> {
       30 ( 0.00%)              pub(super) fn new(handle_counters: &'static HandleCounters) -> Self {
      295 ( 0.00%)                  HandleStore {
        .                               $($oty: handle::OwnedStore::new(&handle_counters.$oty),)*
        .                               $($ity: handle::InternedStore::new(&handle_counters.$ity),)*
        .                           }
       40 ( 0.00%)              }
        .                   }
        .           
        .                   $(
        .                       #[repr(C)]
        .                       pub(crate) struct $oty(handle::Handle);
        .                       impl !Send for $oty {}
        .                       impl !Sync for $oty {}
        .           
        .                       // Forward `Drop::drop` to the inherent `drop` method.
        .                       impl Drop for $oty {
    4,930 ( 0.00%)                  fn drop(&mut self) {
   24,208 ( 0.00%)                      $oty(self.0).drop();
    7,395 ( 0.00%)                  }
        .                       }
        .           
        .                       impl<S> Encode<S> for $oty {
       40 ( 0.00%)                  fn encode(self, w: &mut Writer, s: &mut S) {
       15 ( 0.00%)                      let handle = self.0;
       20 ( 0.00%)                      mem::forget(self);
        5 ( 0.00%)                      handle.encode(w, s);
       10 ( 0.00%)                  }
        .                       }
        .           
        .                       impl<S: server::Types> DecodeMut<'_, '_, HandleStore<server::MarkedTypes<S>>>
        .                           for Marked<S::$oty, $oty>
        .                       {
  292,095 ( 0.01%)                  fn decode(r: &mut Reader<'_>, s: &mut HandleStore<server::MarkedTypes<S>>) -> Self {
        .                               s.$oty.take(handle::Handle::decode(r, &mut ()))
  389,460 ( 0.01%)                  }
        .                       }
        .           
        .                       impl<S> Encode<S> for &$oty {
        .                           fn encode(self, w: &mut Writer, s: &mut S) {
   24,381 ( 0.00%)                      self.0.encode(w, s);
        .                           }
        .                       }
        .           
        .                       impl<'s, S: server::Types> Decode<'_, 's, HandleStore<server::MarkedTypes<S>>>
        .                           for &'s Marked<S::$oty, $oty>
        .                       {
    8,127 ( 0.00%)                  fn decode(r: &mut Reader<'_>, s: &'s HandleStore<server::MarkedTypes<S>>) -> Self {
        .                               &s.$oty[handle::Handle::decode(r, &mut ())]
   16,254 ( 0.00%)                  }
        .                       }
        .           
        .                       impl<S> Encode<S> for &mut $oty {
        .                           fn encode(self, w: &mut Writer, s: &mut S) {
  221,412 ( 0.00%)                      self.0.encode(w, s);
        .                           }
        .                       }
        .           
        .                       impl<'s, S: server::Types> DecodeMut<'_, 's, HandleStore<server::MarkedTypes<S>>>
        .                           for &'s mut Marked<S::$oty, $oty>
        .                       {
   73,804 ( 0.00%)                  fn decode(
        .                               r: &mut Reader<'_>,
        .                               s: &'s mut HandleStore<server::MarkedTypes<S>>
        .                           ) -> Self {
        .                               &mut s.$oty[handle::Handle::decode(r, &mut ())]
  147,608 ( 0.00%)                  }
        .                       }
        .           
        .                       impl<S: server::Types> Encode<HandleStore<server::MarkedTypes<S>>>
        .                           for Marked<S::$oty, $oty>
        .                       {
  602,323 ( 0.01%)                  fn encode(self, w: &mut Writer, s: &mut HandleStore<server::MarkedTypes<S>>) {
  102,572 ( 0.00%)                      s.$oty.alloc(self).encode(w, s);
        .                           }
        .                       }
        .           
        .                       impl<S> DecodeMut<'_, '_, S> for $oty {
       15 ( 0.00%)                  fn decode(r: &mut Reader<'_>, s: &mut S) -> Self {
       15 ( 0.00%)                      $oty(handle::Handle::decode(r, s))
       15 ( 0.00%)                  }
        .                       }
        .                   )*
        .           
        .                   $(
        .                       #[repr(C)]
  100,618 ( 0.00%)              #[derive(Copy, Clone, PartialEq, Eq, Hash)]
        .                       pub(crate) struct $ity(handle::Handle);
        .                       impl !Send for $ity {}
        .                       impl !Sync for $ity {}
        .           
        .                       impl<S> Encode<S> for $ity {
        .                           fn encode(self, w: &mut Writer, s: &mut S) {
        .                               self.0.encode(w, s);
        .                           }
        .                       }
        .           
        .                       impl<S: server::Types> DecodeMut<'_, '_, HandleStore<server::MarkedTypes<S>>>
        .                           for Marked<S::$ity, $ity>
        .                       {
   72,475 ( 0.00%)                  fn decode(r: &mut Reader<'_>, s: &mut HandleStore<server::MarkedTypes<S>>) -> Self {
        .                               s.$ity.copy(handle::Handle::decode(r, &mut ()))
  144,950 ( 0.00%)                  }
        .                       }
        .           
        .                       impl<S: server::Types> Encode<HandleStore<server::MarkedTypes<S>>>
        .                           for Marked<S::$ity, $ity>
        .                       {
        .                           fn encode(self, w: &mut Writer, s: &mut HandleStore<server::MarkedTypes<S>>) {
  670,542 ( 0.01%)                      s.$ity.alloc(self).encode(w, s);
        .                           }
        .                       }
        .           
        .                       impl<S> DecodeMut<'_, '_, S> for $ity {
        .                           fn decode(r: &mut Reader<'_>, s: &mut S) -> Self {
        .                               $ity(handle::Handle::decode(r, s))
        .                           }
        .                       }
-- line 154 ----------------------------------------
-- line 175 ----------------------------------------
        .           
        .           // FIXME(eddyb) generate these impls by pattern-matching on the
        .           // names of methods - also could use the presence of `fn drop`
        .           // to distinguish between 'owned and 'interned, above.
        .           // Alternatively, special 'modes" could be listed of types in with_api
        .           // instead of pattern matching on methods, here and in server decl.
        .           
        .           impl Clone for TokenStream {
   11,319 ( 0.00%)      fn clone(&self) -> Self {
        .                   self.clone()
   11,319 ( 0.00%)      }
        .           }
        .           
        .           impl Clone for TokenStreamIter {
        .               fn clone(&self) -> Self {
        .                   self.clone()
        .               }
        .           }
        .           
        .           impl Clone for Group {
    7,293 ( 0.00%)      fn clone(&self) -> Self {
        .                   self.clone()
    7,293 ( 0.00%)      }
        .           }
        .           
        .           impl Clone for Literal {
    3,888 ( 0.00%)      fn clone(&self) -> Self {
        .                   self.clone()
    3,888 ( 0.00%)      }
        .           }
        .           
        .           impl fmt::Debug for Literal {
        .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   f.debug_struct("Literal")
        .                       // format the kind without quotes, as in `kind: Float`
        .                       .field("kind", &format_args!("{}", &self.debug_kind()))
        .                       .field("symbol", &self.symbol())
-- line 211 ----------------------------------------
-- line 219 ----------------------------------------
        .           impl Clone for SourceFile {
        .               fn clone(&self) -> Self {
        .                   self.clone()
        .               }
        .           }
        .           
        .           impl fmt::Debug for Span {
        .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
       35 ( 0.00%)          f.write_str(&self.debug())
        .               }
        .           }
        .           
        .           macro_rules! define_client_side {
        .               ($($name:ident {
        .                   $(fn $method:ident($($arg:ident: $arg_ty:ty),* $(,)?) $(-> $ret_ty:ty)*;)*
        .               }),* $(,)?) => {
        .                   $(impl $name {
  440,526 ( 0.01%)              $(pub(crate) fn $method($($arg: $arg_ty),*) $(-> $ret_ty)* {
  226,237 ( 0.00%)                  Bridge::with(|bridge| {
        .                               let mut b = bridge.cached_buffer.take();
        .           
        .                               b.clear();
1,015,449 ( 0.02%)                      api_tags::Method::$name(api_tags::$name::$method).encode(&mut b, &mut ());
  303,405 ( 0.01%)                      reverse_encode!(b; $($arg),*);
        .           
2,030,898 ( 0.04%)                      b = bridge.dispatch.call(b);
        .           
1,406,875 ( 0.03%)                      let r = Result::<_, PanicMessage>::decode(&mut &b[..], &mut ());
        .           
4,061,796 ( 0.08%)                      bridge.cached_buffer = b;
        .           
  487,111 ( 0.01%)                      r.unwrap_or_else(|e| panic::resume_unwind(e.into()))
        .                           })
  367,105 ( 0.01%)              })*
        .                   })*
        .               }
        .           }
        .           with_api!(self, self, define_client_side);
        .           
        .           enum BridgeState<'a> {
        .               /// No server is currently connected to this client.
        .               NotConnected,
-- line 260 ----------------------------------------
-- line 270 ----------------------------------------
        .           enum BridgeStateL {}
        .           
        .           impl<'a> scoped_cell::ApplyL<'a> for BridgeStateL {
        .               type Out = BridgeState<'a>;
        .           }
        .           
        .           thread_local! {
        .               static BRIDGE_STATE: scoped_cell::ScopedCell<BridgeStateL> =
        3 ( 0.00%)          scoped_cell::ScopedCell::new(BridgeState::NotConnected);
        .           }
        .           
        .           impl BridgeState<'_> {
        .               /// Take exclusive control of the thread-local
        .               /// `BridgeState`, and pass it to `f`, mutably.
        .               /// The state will be restored after `f` exits, even
        .               /// by panic, including modifications made to it by `f`.
        .               ///
        .               /// N.B., while `f` is running, the thread-local state
        .               /// is `BridgeState::InUse`.
  165,335 ( 0.00%)      fn with<R>(f: impl FnOnce(&mut BridgeState<'_>) -> R) -> R {
  131,599 ( 0.00%)          BRIDGE_STATE.with(|state| {
1,873,445 ( 0.04%)              state.replace(BridgeState::InUse, |mut state| {
        .                           // FIXME(#52812) pass `f` directly to `replace` when `RefMutL` is gone
      120 ( 0.00%)                  f(&mut *state)
       20 ( 0.00%)              })
       20 ( 0.00%)          })
  146,052 ( 0.00%)      }
        .           }
        .           
        .           impl Bridge<'_> {
        .               pub(crate) fn is_available() -> bool {
        6 ( 0.00%)          BridgeState::with(|state| match state {
        .                       BridgeState::Connected(_) | BridgeState::InUse => true,
        .                       BridgeState::NotConnected => false,
        .                   })
        .               }
        .           
       30 ( 0.00%)      fn enter<R>(self, f: impl FnOnce() -> R) -> R {
       35 ( 0.00%)          let force_show_panics = self.force_show_panics;
        .                   // Hide the default panic output within `proc_macro` expansions.
        .                   // NB. the server can't do this because it may use a different libstd.
        .                   static HIDE_PANICS_DURING_EXPANSION: Once = Once::new();
       27 ( 0.00%)          HIDE_PANICS_DURING_EXPANSION.call_once(|| {
        7 ( 0.00%)              panic::update_hook(move |prev, info| {
        .                           let show = BridgeState::with(|state| match state {
        .                               BridgeState::NotConnected => true,
        .                               BridgeState::Connected(_) | BridgeState::InUse => force_show_panics,
        .                           });
        .                           if show {
        .                               prev(info)
        .                           }
        .                       });
        2 ( 0.00%)          });
        .           
      185 ( 0.00%)          BRIDGE_STATE.with(|state| state.set(BridgeState::Connected(self), f))
       10 ( 0.00%)      }
        .           
       25 ( 0.00%)      fn with<R>(f: impl FnOnce(&mut Bridge<'_>) -> R) -> R {
2,388,884 ( 0.05%)          BridgeState::with(|state| match state {
        .                       BridgeState::NotConnected => {
        .                           panic!("procedural macro API is used outside of a procedural macro");
        .                       }
        .                       BridgeState::InUse => {
        .                           panic!("procedural macro API is used while it's already in use");
        .                       }
       65 ( 0.00%)              BridgeState::Connected(bridge) => f(bridge),
       20 ( 0.00%)          })
       20 ( 0.00%)      }
        .           }
        .           
        .           /// A client-side "global object" (usually a function pointer),
        .           /// which may be using a different `proc_macro` from the one
        .           /// used by the server, but can be interacted with compatibly.
        .           ///
        .           /// N.B., `F` must have FFI-friendly memory layout (e.g., a pointer).
        .           /// The call ABI of function pointers used for `F` doesn't
-- line 345 ----------------------------------------
-- line 353 ----------------------------------------
        .               pub(super) get_handle_counters: extern "C" fn() -> &'static HandleCounters,
        .               pub(super) run: extern "C" fn(Bridge<'_>, F) -> Buffer<u8>,
        .               pub(super) f: F,
        .           }
        .           
        .           /// Client-side helper for handling client panics, entering the bridge,
        .           /// deserializing input and serializing output.
        .           // FIXME(eddyb) maybe replace `Bridge::enter` with this?
       35 ( 0.00%)  fn run_client<A: for<'a, 's> DecodeMut<'a, 's, ()>, R: Encode<()>>(
        .               mut bridge: Bridge<'_>,
        .               f: impl FnOnce(A) -> R,
        .           ) -> Buffer<u8> {
        .               // The initial `cached_buffer` contains the input.
       30 ( 0.00%)      let mut b = bridge.cached_buffer.take();
        .           
      180 ( 0.00%)      panic::catch_unwind(panic::AssertUnwindSafe(|| {
       75 ( 0.00%)          bridge.enter(|| {
       95 ( 0.00%)              let reader = &mut &b[..];
       35 ( 0.00%)              let input = A::decode(reader, &mut ());
        .           
        .                       // Put the `cached_buffer` back in the `Bridge`, for requests.
      100 ( 0.00%)              Bridge::with(|bridge| bridge.cached_buffer = b.take());
        .           
       80 ( 0.00%)              let output = f(input);
        .           
        .                       // Take the `cached_buffer` back out, for the output value.
       95 ( 0.00%)              b = Bridge::with(|bridge| bridge.cached_buffer.take());
        .           
        .                       // HACK(eddyb) Separate encoding a success value (`Ok(output)`)
        .                       // from encoding a panic (`Err(e: PanicMessage)`) to avoid
        .                       // having handles outside the `bridge.enter(|| ...)` scope, and
        .                       // to catch panics that could happen while encoding the success.
        .                       //
        .                       // Note that panics should be impossible beyond this point, but
        .                       // this is defensively trying to avoid any accidental panicking
        .                       // reaching the `extern "C"` (which should `abort` but might not
        .                       // at the moment, so this is also potentially preventing UB).
       15 ( 0.00%)              b.clear();
       50 ( 0.00%)              Ok::<_, ()>(output).encode(&mut b, &mut ());
       20 ( 0.00%)          })
       10 ( 0.00%)      }))
        .               .map_err(PanicMessage::from)
        5 ( 0.00%)      .unwrap_or_else(|e| {
        .                   b.clear();
        .                   Err::<(), _>(e).encode(&mut b, &mut ());
        .               });
        .               b
       10 ( 0.00%)  }
        .           
        .           impl Client<fn(crate::TokenStream) -> crate::TokenStream> {
        .               #[rustc_allow_const_fn_unstable(const_fn)]
        1 ( 0.00%)      pub const fn expand1(f: fn(crate::TokenStream) -> crate::TokenStream) -> Self {
       35 ( 0.00%)          extern "C" fn run(
        .                       bridge: Bridge<'_>,
        .                       f: impl FnOnce(crate::TokenStream) -> crate::TokenStream,
        .                   ) -> Buffer<u8> {
      150 ( 0.00%)              run_client(bridge, |input| f(crate::TokenStream(input)).0)
       10 ( 0.00%)          }
        5 ( 0.00%)          Client { get_handle_counters: HandleCounters::get, run, f }
        1 ( 0.00%)      }
        .           }
        .           
        .           impl Client<fn(crate::TokenStream, crate::TokenStream) -> crate::TokenStream> {
        .               #[rustc_allow_const_fn_unstable(const_fn)]
        .               pub const fn expand2(
        .                   f: fn(crate::TokenStream, crate::TokenStream) -> crate::TokenStream,
        .               ) -> Self {
        .                   extern "C" fn run(
-- line 420 ----------------------------------------

  861,810 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/client.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/str/converts.rs
--------------------------------------------------------------------------------
Ir                 

-- line 78 ----------------------------------------
        .           ///
        .           /// // We know these bytes are valid, so just use `unwrap()`.
        .           /// let sparkle_heart = str::from_utf8(&sparkle_heart).unwrap();
        .           ///
        .           /// assert_eq!("💖", sparkle_heart);
        .           /// ```
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[rustc_const_unstable(feature = "const_str_from_utf8", issue = "91006")]
1,817,448 ( 0.04%)  pub const fn from_utf8(v: &[u8]) -> Result<&str, Utf8Error> {
        .               // This should use `?` again, once it's `const`
        .               match run_utf8_validation(v) {
        .                   Ok(_) => {
        .                       // SAFETY: validation succeeded.
1,514,492 ( 0.03%)              Ok(unsafe { from_utf8_unchecked(v) })
        .                   }
       72 ( 0.00%)          Err(err) => Err(err),
        .               }
2,120,356 ( 0.04%)  }
        .           
        .           /// Converts a mutable slice of bytes to a mutable string slice.
        .           ///
        .           /// # Examples
        .           ///
        .           /// Basic usage:
        .           ///
        .           /// ```
-- line 103 ----------------------------------------
-- line 165 ----------------------------------------
        .           /// };
        .           ///
        .           /// assert_eq!("💖", sparkle_heart);
        .           /// ```
        .           #[inline]
        .           #[must_use]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[rustc_const_stable(feature = "const_str_from_utf8_unchecked", since = "1.55.0")]
  120,957 ( 0.00%)  pub const unsafe fn from_utf8_unchecked(v: &[u8]) -> &str {
        .               // SAFETY: the caller must guarantee that the bytes `v` are valid UTF-8.
        .               // Also relies on `&str` and `&[u8]` having the same layout.
  241,914 ( 0.01%)      unsafe { mem::transmute(v) }
   80,638 ( 0.00%)  }
        .           
        .           /// Converts a slice of bytes to a string slice without checking
        .           /// that the string contains valid UTF-8; mutable version.
        .           ///
        .           /// See the immutable version, [`from_utf8_unchecked()`] for more information.
        .           ///
        .           /// # Examples
        .           ///
-- line 185 ----------------------------------------
-- line 192 ----------------------------------------
        .           /// let heart = unsafe { str::from_utf8_unchecked_mut(&mut heart) };
        .           ///
        .           /// assert_eq!("💖", heart);
        .           /// ```
        .           #[inline]
        .           #[must_use]
        .           #[stable(feature = "str_mut_extras", since = "1.20.0")]
        .           #[rustc_const_unstable(feature = "const_str_from_utf8_unchecked_mut", issue = "91005")]
   34,080 ( 0.00%)  pub const unsafe fn from_utf8_unchecked_mut(v: &mut [u8]) -> &mut str {
        .               // SAFETY: the caller must guarantee that the bytes `v`
        .               // are valid UTF-8, thus the cast to `*mut str` is safe.
        .               // Also, the pointer dereference is safe because that pointer
        .               // comes from a reference which is guaranteed to be valid for writes.
        .               unsafe { &mut *(v as *mut [u8] as *mut str) }
   13,632 ( 0.00%)  }

   80,674 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/str/converts.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.8.4/src/reader/lexer.rs
--------------------------------------------------------------------------------
Ir                 

-- line 9 ----------------------------------------
        .           use std::borrow::Cow;
        .           
        .           use common::{Position, TextPosition, is_whitespace_char, is_name_char};
        .           use reader::Error;
        .           use util;
        .           
        .           /// `Token` represents a single lexeme of an XML document. These lexemes
        .           /// are used to perform actual parsing.
  104,948 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Debug)]
        .           pub enum Token {
        .               /// `<?`
        .               ProcessingInstructionStart,
        .               /// `?>`
        .               ProcessingInstructionEnd,
        .               /// `<!DOCTYPE
        .               DoctypeStart,
        .               /// `<`
-- line 25 ----------------------------------------
-- line 80 ----------------------------------------
        .                           Token::DoubleQuote                => "\"",
        .                           _                          => unreachable!()
        .                       })
        .                   }
        .               }
        .           }
        .           
        .           impl Token {
  544,428 ( 0.01%)      pub fn as_static_str(&self) -> Option<&'static str> {
  725,904 ( 0.02%)          match *self {
        .                       Token::OpeningTagStart            => Some("<"),
        .                       Token::ProcessingInstructionStart => Some("<?"),
        .                       Token::DoctypeStart               => Some("<!DOCTYPE"),
        .                       Token::ClosingTagStart            => Some("</"),
        .                       Token::CommentStart               => Some("<!--"),
        .                       Token::CDataStart                 => Some("<![CDATA["),
        .                       Token::TagEnd                     => Some(">"),
        .                       Token::EmptyTagEnd                => Some("/>"),
        .                       Token::ProcessingInstructionEnd   => Some("?>"),
        .                       Token::CommentEnd                 => Some("-->"),
        .                       Token::CDataEnd                   => Some("]]>"),
        .                       Token::ReferenceStart             => Some("&"),
       48 ( 0.00%)              Token::ReferenceEnd               => Some(";"),
        .                       Token::EqualsSign                 => Some("="),
      576 ( 0.00%)              Token::SingleQuote                => Some("'"),
      488 ( 0.00%)              Token::DoubleQuote                => Some("\""),
        .                       Token::Chunk(s)                   => Some(s),
  362,388 ( 0.01%)              _                                 => None
        .                   }
  725,904 ( 0.02%)      }
        .           
        .               // using String.push_str(token.to_string()) is simply way too slow
  907,380 ( 0.02%)      pub fn push_to_string(&self, target: &mut String) {
1,452,372 ( 0.03%)          match self.as_static_str() {
    1,410 ( 0.00%)              Some(s) => { target.push_str(s); }
        .                       None => {
  914,458 ( 0.02%)                  match *self {
  905,970 ( 0.02%)                      Token::Character(c) | Token::Whitespace(c) => target.push(c),
        .                               _ => unreachable!()
        .                           }
        .                       }
        .                   }
  362,952 ( 0.01%)      }
        .           
        .               /// Returns `true` if this token contains data that can be interpreted
        .               /// as a part of the text. Surprisingly, this also means '>' and '=' and '"' and "'" and '-->'.
        .               #[inline]
  539,128 ( 0.01%)      pub fn contains_char_data(&self) -> bool {
3,251,984 ( 0.07%)          match *self {
        .                       Token::Whitespace(_) | Token::Chunk(_) | Token::Character(_) | Token::CommentEnd |
        .                       Token::TagEnd | Token::EqualsSign | Token::DoubleQuote | Token::SingleQuote | Token::CDataEnd | 
  265,260 ( 0.01%)              Token::ProcessingInstructionEnd | Token::EmptyTagEnd => true,
    8,608 ( 0.00%)              _ => false
        .                   }
1,347,820 ( 0.03%)      }
        .           
        .               /// Returns `true` if this token corresponds to a white space character.
        .               #[inline]
        .               pub fn is_whitespace(&self) -> bool {
        .                   match *self {
        .                       Token::Whitespace(_) => true,
        .                       _ => false
        .                   }
-- line 142 ----------------------------------------
-- line 225 ----------------------------------------
        .               inside_comment: bool,
        .               inside_token: bool,
        .               eof_handled: bool
        .           }
        .           
        .           impl Position for Lexer {
        .               #[inline]
        .               /// Returns the position of the last token produced by the lexer
   14,532 ( 0.00%)      fn position(&self) -> TextPosition { self.pos }
        .           }
        .           
        .           impl Lexer {
        .               /// Returns a new lexer with default state.
        6 ( 0.00%)      pub fn new() -> Lexer {
       40 ( 0.00%)          Lexer {
        6 ( 0.00%)              pos: TextPosition::new(),
        6 ( 0.00%)              head_pos: TextPosition::new(),
        6 ( 0.00%)              char_queue: VecDeque::with_capacity(4),  // TODO: check size
        2 ( 0.00%)              st: State::Normal,
        .                       skip_errors: false,
        .                       inside_comment: false,
        .                       inside_token: false,
        .                       eof_handled: false
        .                   }
        4 ( 0.00%)      }
        .           
        .               /// Enables error handling so `next_token` will return `Some(Err(..))`
        .               /// upon invalid lexeme.
        .               #[inline]
        .               pub fn enable_errors(&mut self) { self.skip_errors = false; }
        .           
        .               /// Disables error handling so `next_token` will return `Some(Chunk(..))`
        .               /// upon invalid lexeme with this lexeme content.
        .               #[inline]
        .               pub fn disable_errors(&mut self) { self.skip_errors = true; }
        .           
        .               /// Enables special handling of some lexemes which should be done when we're parsing comment
        .               /// internals.
        .               #[inline]
      200 ( 0.00%)      pub fn inside_comment(&mut self) { self.inside_comment = true; }
        .           
        .               /// Disables the effect of `inside_comment()` method.
        .               #[inline]
      200 ( 0.00%)      pub fn outside_comment(&mut self) { self.inside_comment = false; }
        .           
        .               /// Reset the eof handled flag of the lexer.
        .               #[inline]
        .               pub fn reset_eof_handled(&mut self) { self.eof_handled = false; }
        .           
        .               /// Tries to read the next token from the buffer.
        .               ///
        .               /// It is possible to pass different instaces of `BufReader` each time
        .               /// this method is called, but the resulting behavior is undefined in this case.
        .               ///
        .               /// Return value:
        .               /// * `Err(reason) where reason: reader::Error` - when an error occurs;
        .               /// * `Ok(None)` - upon end of stream is reached;
        .               /// * `Ok(Some(token)) where token: Token` - in case a complete-token has been read from the stream.
1,936,074 ( 0.04%)      pub fn next_token<B: Read>(&mut self, b: &mut B) -> Result {
        .                   // Already reached end of buffer
  553,164 ( 0.01%)          if self.eof_handled {
        .                       return Ok(None);
        .                   }
        .           
1,382,910 ( 0.03%)          if !self.inside_token {
1,106,328 ( 0.02%)              self.pos = self.head_pos;
  276,582 ( 0.01%)              self.inside_token = true;
        .                   }
        .           
        .                   // Check if we have saved a char or two for ourselves
3,323,776 ( 0.07%)          while let Some(c) = self.char_queue.pop_front() {
   50,316 ( 0.00%)              match try!(self.read_next_token(c)) {
   14,376 ( 0.00%)                  Some(t) => {
    2,396 ( 0.00%)                      self.inside_token = false;
   45,524 ( 0.00%)                      return Ok(Some(t));
        .                           }
        .                           None => {}  // continue
        .                       }
        .                   }
        .           
    4,036 ( 0.00%)          loop {
        .                       // TODO: this should handle multiple encodings
4,173,330 ( 0.09%)              let c = match try!(util::next_char_from(b)) {
  834,666 ( 0.02%)                  Some(c) => c,   // got next char
        .                           None => break,  // nothing to read left
        .                       };
        .           
5,556,368 ( 0.12%)              match try!(self.read_next_token(c)) {
1,645,116 ( 0.03%)                  Some(t) => {
  274,186 ( 0.01%)                      self.inside_token = false;
5,209,534 ( 0.11%)                      return Ok(Some(t));
        .                           }
        .                           None => {
        .                               // continue
        .                           }
        .                       }
        .                   }
        .           
        .                   // Handle end of stream
-- line 323 ----------------------------------------
-- line 337 ----------------------------------------
        .                           Ok(Some(Token::Character('-'))),
        .                       State::CDataClosing(ClosingSubstate::First) =>
        .                           Ok(Some(Token::Character(']'))),
        .                       State::CDataClosing(ClosingSubstate::Second) =>
        .                           Ok(Some(Token::Chunk("]]"))),
        .                       State::Normal =>
        .                           Ok(None)
        .                   }
  553,164 ( 0.01%)      }
        .           
        .               #[inline]
        .               fn error<M: Into<Cow<'static, str>>>(&self, msg: M) -> Error {
        .                   (self, msg).into()
        .               }
        .           
        .               #[inline]
2,244,944 ( 0.05%)      fn read_next_token(&mut self, c: char) -> Result {
  280,618 ( 0.01%)          let res = self.dispatch_char(c);
1,686,104 ( 0.04%)          if self.char_queue.is_empty() {
  556,444 ( 0.01%)              if c == '\n' {
   24,144 ( 0.00%)                  self.head_pos.new_line();
        .                       } else {
1,360,930 ( 0.03%)                  self.head_pos.advance(1);
        .                       }
        .                   }
        .                   res
  561,236 ( 0.01%)      }
        .           
1,964,326 ( 0.04%)      fn dispatch_char(&mut self, c: char) -> Result {
  561,236 ( 0.01%)          match self.st {
  276,582 ( 0.01%)              State::Normal                         => self.normal(c),
    4,280 ( 0.00%)              State::TagStarted                     => self.tag_opened(c),
       80 ( 0.00%)              State::CommentOrCDataOrDoctypeStarted => self.comment_or_cdata_or_doctype_started(c),
       80 ( 0.00%)              State::CommentStarted                 => self.comment_started(c),
        .                       State::CDataStarted(s)                => self.cdata_started(c, s),
        .                       State::DoctypeStarted(s)              => self.doctype_started(c, s),
        .                       State::DoctypeFinishing(d)            => self.doctype_finishing(c, d),
        4 ( 0.00%)              State::ProcessingInstructionClosing   => self.processing_instruction_closing(c),
    1,592 ( 0.00%)              State::EmptyTagClosing                => self.empty_element_closing(c),
    6,960 ( 0.00%)              State::CommentClosing(s)              => self.comment_closing(c, s),
    1,184 ( 0.00%)              State::CDataClosing(s)                => self.cdata_closing(c, s)
        .                   }
  561,236 ( 0.01%)      }
        .           
        .               #[inline]
   20,180 ( 0.00%)      fn move_to(&mut self, st: State) -> Result {
    8,072 ( 0.00%)          self.st = st;
   32,288 ( 0.00%)          Ok(None)
    8,072 ( 0.00%)      }
        .           
        .               #[inline]
   19,580 ( 0.00%)      fn move_to_with(&mut self, st: State, token: Token) -> Result {
    7,832 ( 0.00%)          self.st = st;
   74,404 ( 0.00%)          Ok(Some(token))
    7,832 ( 0.00%)      }
        .           
        .               #[inline]
   45,524 ( 0.00%)      fn move_to_with_unread(&mut self, st: State, cs: &[char], token: Token) -> Result {
   16,772 ( 0.00%)          self.char_queue.extend(cs.iter().cloned());
   23,960 ( 0.00%)          self.move_to_with(st, token)
    4,792 ( 0.00%)      }
        .           
        .               fn handle_error(&mut self, chunk: &'static str, c: char) -> Result {
        .                   self.char_queue.push_back(c);
        .                   if self.skip_errors || (self.inside_comment && chunk != "--") {  // FIXME: looks hacky
        .                       self.move_to_with(State::Normal, Token::Chunk(chunk))
        .                   } else {
        .                       Err(self.error(format!("Unexpected token '{}' before '{}'", chunk, c)))
        .                   }
        .               }
        .           
        .               /// Encountered a char
2,212,656 ( 0.05%)      fn normal(&mut self, c: char) -> Result {
1,382,910 ( 0.03%)          match c {
   12,840 ( 0.00%)              '<'                        => self.move_to(State::TagStarted),
   19,860 ( 0.00%)              '>'                        => Ok(Some(Token::TagEnd)),
    4,776 ( 0.00%)              '/'                        => self.move_to(State::EmptyTagClosing),
   49,050 ( 0.00%)              '='                        => Ok(Some(Token::EqualsSign)),
   99,930 ( 0.00%)              '"'                        => Ok(Some(Token::DoubleQuote)),
    2,190 ( 0.00%)              '\''                       => Ok(Some(Token::SingleQuote)),
       12 ( 0.00%)              '?'                        => self.move_to(State::ProcessingInstructionClosing),
    5,810 ( 0.00%)              '-'                        => self.move_to(State::CommentClosing(ClosingSubstate::First)),
    1,036 ( 0.00%)              ']'                        => self.move_to(State::CDataClosing(ClosingSubstate::First)),
        .                       '&'                        => Ok(Some(Token::ReferenceStart)),
      240 ( 0.00%)              ';'                        => Ok(Some(Token::ReferenceEnd)),
2,302,964 ( 0.05%)              _ if is_whitespace_char(c) => Ok(Some(Token::Whitespace(c))),
3,339,424 ( 0.07%)              _                          => Ok(Some(Token::Character(c)))
        .                   }
  553,164 ( 0.01%)      }
        .           
        .               /// Encountered '<'
   14,980 ( 0.00%)      fn tag_opened(&mut self, c: char) -> Result {
   16,330 ( 0.00%)          match c {
       16 ( 0.00%)              '?'                        => self.move_to_with(State::Normal, Token::ProcessingInstructionStart),
    5,296 ( 0.00%)              '/'                        => self.move_to_with(State::Normal, Token::ClosingTagStart),
      240 ( 0.00%)              '!'                        => self.move_to(State::CommentOrCDataOrDoctypeStarted),
    8,616 ( 0.00%)              _ if is_whitespace_char(c) => self.move_to_with_unread(State::Normal, &[c], Token::OpeningTagStart),
   24,412 ( 0.00%)              _ if is_name_char(c)       => self.move_to_with_unread(State::Normal, &[c], Token::OpeningTagStart),
        .                       _                          => self.handle_error("<", c)
        .                   }
    4,280 ( 0.00%)      }
        .           
        .               /// Encountered '<!'
      280 ( 0.00%)      fn comment_or_cdata_or_doctype_started(&mut self, c: char) -> Result {
       80 ( 0.00%)          match c {
      240 ( 0.00%)              '-' => self.move_to(State::CommentStarted),
        .                       '[' => self.move_to(State::CDataStarted(CDataStartedSubstate::E)),
        .                       'D' => self.move_to(State::DoctypeStarted(DoctypeStartedSubstate::D)),
        .                       _   => self.handle_error("<!", c)
        .                   }
       80 ( 0.00%)      }
        .           
        .               /// Encountered '<!-'
      280 ( 0.00%)      fn comment_started(&mut self, c: char) -> Result {
       80 ( 0.00%)          match c {
      320 ( 0.00%)              '-' => self.move_to_with(State::Normal, Token::CommentStart),
        .                       _   => self.handle_error("<!-", c)
        .                   }
       80 ( 0.00%)      }
        .           
        .               /// Encountered '<!['
        .               fn cdata_started(&mut self, c: char, s: CDataStartedSubstate) -> Result {
        .                   use self::CDataStartedSubstate::{E, C, CD, CDA, CDAT, CDATA};
        .                   dispatch_on_enum_state!(self, s, c, State::CDataStarted,
        .                       E     ; 'C' ; C     ; "<![",
        .                       C     ; 'D' ; CD    ; "<![C",
        .                       CD    ; 'A' ; CDA   ; "<![CD",
-- line 463 ----------------------------------------
-- line 486 ----------------------------------------
        .                       '<' => self.move_to(State::DoctypeFinishing(d + 1)),
        .                       '>' if d == 1 => self.move_to_with(State::Normal, Token::TagEnd),
        .                       '>' => self.move_to(State::DoctypeFinishing(d - 1)),
        .                       _ => Ok(None),
        .                   }
        .               }
        .           
        .               /// Encountered '?'
       14 ( 0.00%)      fn processing_instruction_closing(&mut self, c: char) -> Result {
        4 ( 0.00%)          match c {
       16 ( 0.00%)              '>' => self.move_to_with(State::Normal, Token::ProcessingInstructionEnd),
        .                       _   => self.move_to_with_unread(State::Normal, &[c], Token::Character('?')),
        .                   }
        4 ( 0.00%)      }
        .           
        .               /// Encountered '/'
    5,572 ( 0.00%)      fn empty_element_closing(&mut self, c: char) -> Result {
    1,592 ( 0.00%)          match c {
    6,192 ( 0.00%)              '>' => self.move_to_with(State::Normal, Token::EmptyTagEnd),
      264 ( 0.00%)              _   => self.move_to_with_unread(State::Normal, &[c], Token::Character('/')),
        .                   }
    1,592 ( 0.00%)      }
        .           
        .               /// Encountered '-'
    8,700 ( 0.00%)      fn comment_closing(&mut self, c: char, s: ClosingSubstate) -> Result {
    2,690 ( 0.00%)          match s {
    2,450 ( 0.00%)              ClosingSubstate::First => match c {
      280 ( 0.00%)                  '-' => self.move_to(State::CommentClosing(ClosingSubstate::Second)),
   10,270 ( 0.00%)                  _   => self.move_to_with_unread(State::Normal, &[c], Token::Character('-'))
        .                       },
       80 ( 0.00%)              ClosingSubstate::Second => match c {
      320 ( 0.00%)                  '>'                      => self.move_to_with(State::Normal, Token::CommentEnd),
        .                           // double dash not followed by a greater-than is a hard error inside comment
        .                           _ if self.inside_comment => self.handle_error("--", c),
        .                           // nothing else except comment closing starts with a double dash, and comment
        .                           // closing can never be after another dash, and also we're outside of a comment,
        .                           // therefore it is safe to push only the last read character to the list of unread
        .                           // characters and pass the double dash directly to the output
        .                           _                        => self.move_to_with_unread(State::Normal, &[c], Token::Chunk("--"))
        .                       }
        .                   }
    1,740 ( 0.00%)      }
        .           
        .               /// Encountered ']'
    1,480 ( 0.00%)      fn cdata_closing(&mut self, c: char, s: ClosingSubstate) -> Result {
      444 ( 0.00%)          match s {
      444 ( 0.00%)              ClosingSubstate::First => match c {
        .                           ']' => self.move_to(State::CDataClosing(ClosingSubstate::Second)),
    1,924 ( 0.00%)                  _   => self.move_to_with_unread(State::Normal, &[c], Token::Character(']'))
        .                       },
        .                       ClosingSubstate::Second => match c {
        .                           '>' => self.move_to_with(State::Normal, Token::CDataEnd),
        .                           _   => self.move_to_with_unread(State::Normal, &[']', c], Token::Character(']'))
        .                       }
        .                   }
      296 ( 0.00%)      }
        .           }
        .           
        .           #[cfg(test)]
        .           mod tests {
        .               use common::{Position};
        .               use std::io::{BufReader, Cursor};
        .           
        .               use super::{Lexer, Token};
-- line 549 ----------------------------------------

9,697,026 ( 0.20%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.8.4/src/reader/lexer.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs
--------------------------------------------------------------------------------
Ir                  

-- line 21 ----------------------------------------
         .           use rustc_target::spec::abi;
         .           use std::borrow::Cow;
         .           use std::cmp::Ordering;
         .           use std::marker::PhantomData;
         .           use std::ops::Range;
         .           use ty::util::IntTypeExt;
         .           
         .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
         1 ( 0.00%)  #[derive(HashStable, TypeFoldable, Lift)]
         .           pub struct TypeAndMut<'tcx> {
    15,621 ( 0.00%)      pub ty: Ty<'tcx>,
    78,105 ( 0.00%)      pub mutbl: hir::Mutability,
         .           }
         .           
         .           #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, TyEncodable, TyDecodable, Copy)]
         .           #[derive(HashStable)]
         .           /// A "free" region `fr` can be interpreted as "some region
         .           /// at least as big as the scope `fr.scope`".
         .           pub struct FreeRegion {
    82,780 ( 0.00%)      pub scope: DefId,
   131,211 ( 0.00%)      pub bound_region: BoundRegionKind,
         .           }
         .           
   519,150 ( 0.01%)  #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, TyEncodable, TyDecodable, Copy)]
         .           #[derive(HashStable)]
         .           pub enum BoundRegionKind {
         .               /// An anonymous region parameter for a given fn (&T)
    13,476 ( 0.00%)      BrAnon(u32),
         .           
         .               /// Named region parameters for functions (a in &'a T)
         .               ///
         .               /// The `DefId` is needed to distinguish free regions in
         .               /// the event of shadowing.
       580 ( 0.00%)      BrNamed(DefId, Symbol),
         .           
         .               /// Anonymous region for the implicit env pointer parameter
         .               /// to a closure
         .               BrEnv,
         .           }
         .           
     1,278 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable, Debug, PartialOrd, Ord)]
         .           #[derive(HashStable)]
         .           pub struct BoundRegion {
    99,446 ( 0.00%)      pub var: BoundVar,
    75,060 ( 0.00%)      pub kind: BoundRegionKind,
         .           }
         .           
         .           impl BoundRegionKind {
         .               pub fn is_named(&self) -> bool {
         .                   match *self {
         .                       BoundRegionKind::BrNamed(_, name) => name != kw::UnderscoreLifetime,
         .                       _ => false,
         .                   }
         .               }
         .           }
         .           
         .           /// Defines the kinds of types.
         .           ///
         .           /// N.B., if you change this, you'll probably want to change the corresponding
         .           /// AST structure in `rustc_ast/src/ast.rs` as well.
15,222,389 ( 0.32%)  #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable, Debug)]
         .           #[derive(HashStable)]
         .           #[rustc_diagnostic_item = "TyKind"]
         .           pub enum TyKind<'tcx> {
         .               /// The primitive boolean type. Written as `bool`.
         .               Bool,
         .           
         .               /// The primitive character type; holds a Unicode scalar value
         .               /// (a non-surrogate code point). Written as `char`.
-- line 89 ----------------------------------------
-- line 99 ----------------------------------------
         .               Float(ty::FloatTy),
         .           
         .               /// Algebraic data types (ADT). For example: structures, enumerations and unions.
         .               ///
         .               /// InternalSubsts here, possibly against intuition, *may* contain `Param`s.
         .               /// That is, even after substitution it is possible that there are type
         .               /// variables. This happens when the `Adt` corresponds to an ADT
         .               /// definition and not a concrete use of it.
 2,087,049 ( 0.04%)      Adt(&'tcx AdtDef, SubstsRef<'tcx>),
         .           
         .               /// An unsized FFI type that is opaque to Rust. Written as `extern type T`.
         .               Foreign(DefId),
         .           
         .               /// The pointee of a string slice. Written as `str`.
         .               Str,
         .           
         .               /// An array with the given length. Written as `[T; n]`.
   126,314 ( 0.00%)      Array(Ty<'tcx>, &'tcx ty::Const<'tcx>),
         .           
         .               /// The pointee of an array slice. Written as `[T]`.
         .               Slice(Ty<'tcx>),
         .           
         .               /// A raw pointer. Written as `*mut T` or `*const T`
         .               RawPtr(TypeAndMut<'tcx>),
         .           
         .               /// A reference; a pointer with an associated lifetime. Written as
         .               /// `&'a mut T` or `&'a T`.
 1,671,798 ( 0.03%)      Ref(Region<'tcx>, Ty<'tcx>, hir::Mutability),
         .           
         .               /// The anonymous type of a function declaration/definition. Each
         .               /// function has a unique type, which is output (for a function
         .               /// named `foo` returning an `i32`) as `fn() -> i32 {foo}`.
         .               ///
         .               /// For example the type of `bar` here:
         .               ///
         .               /// ```rust
-- line 134 ----------------------------------------
-- line 143 ----------------------------------------
         .               ///
         .               /// ```rust
         .               /// fn foo() -> i32 { 1 }
         .               /// let bar: fn() -> i32 = foo;
         .               /// ```
         .               FnPtr(PolyFnSig<'tcx>),
         .           
         .               /// A trait object. Written as `dyn for<'b> Trait<'b, Assoc = u32> + Send + 'a`.
   158,232 ( 0.00%)      Dynamic(&'tcx List<Binder<'tcx, ExistentialPredicate<'tcx>>>, ty::Region<'tcx>),
         .           
         .               /// The anonymous type of a closure. Used to represent the type of
         .               /// `|a| a`.
         .               Closure(DefId, SubstsRef<'tcx>),
         .           
         .               /// The anonymous type of a generator. Used to represent the type of
         .               /// `|a| yield a`.
         .               Generator(DefId, SubstsRef<'tcx>, hir::Movability),
-- line 159 ----------------------------------------
-- line 180 ----------------------------------------
         .               /// The substitutions are for the generics of the function in question.
         .               /// After typeck, the concrete type can be found in the `types` map.
         .               Opaque(DefId, SubstsRef<'tcx>),
         .           
         .               /// A type parameter; for example, `T` in `fn f<T>(x: T) {}`.
         .               Param(ParamTy),
         .           
         .               /// Bound type variable, used only when preparing a trait query.
     6,875 ( 0.00%)      Bound(ty::DebruijnIndex, BoundTy),
         .           
         .               /// A placeholder type - universally quantified higher-ranked type.
         .               Placeholder(ty::PlaceholderType),
         .           
         .               /// A type variable used during type checking.
         .               Infer(InferTy),
         .           
         .               /// A placeholder for a type which could not be computed; this is
-- line 196 ----------------------------------------
-- line 330 ----------------------------------------
         .               pub closure_kind_ty: T,
         .               pub closure_sig_as_fn_ptr_ty: T,
         .               pub tupled_upvars_ty: T,
         .           }
         .           
         .           impl<'tcx> ClosureSubsts<'tcx> {
         .               /// Construct `ClosureSubsts` from `ClosureSubstsParts`, containing `Substs`
         .               /// for the closure parent, alongside additional closure-specific components.
        77 ( 0.00%)      pub fn new(
         .                   tcx: TyCtxt<'tcx>,
         .                   parts: ClosureSubstsParts<'tcx, Ty<'tcx>>,
         .               ) -> ClosureSubsts<'tcx> {
         .                   ClosureSubsts {
         .                       substs: tcx.mk_substs(
       154 ( 0.00%)                  parts.parent_substs.iter().copied().chain(
       308 ( 0.00%)                      [parts.closure_kind_ty, parts.closure_sig_as_fn_ptr_ty, parts.tupled_upvars_ty]
         .                                   .iter()
         .                                   .map(|&ty| ty.into()),
         .                           ),
         .                       ),
         .                   }
       154 ( 0.00%)      }
         .           
         .               /// Divides the closure substs into their respective components.
         .               /// The ordering assumed here must match that used by `ClosureSubsts::new` above.
       836 ( 0.00%)      fn split(self) -> ClosureSubstsParts<'tcx, GenericArg<'tcx>> {
         .                   match self.substs[..] {
     8,794 ( 0.00%)              [
     2,360 ( 0.00%)                  ref parent_substs @ ..,
     2,257 ( 0.00%)                  closure_kind_ty,
     1,378 ( 0.00%)                  closure_sig_as_fn_ptr_ty,
     1,600 ( 0.00%)                  tupled_upvars_ty,
     3,344 ( 0.00%)              ] => ClosureSubstsParts {
         .                           parent_substs,
         .                           closure_kind_ty,
         .                           closure_sig_as_fn_ptr_ty,
         .                           tupled_upvars_ty,
         .                       },
         .                       _ => bug!("closure substs missing synthetics"),
         .                   }
     2,508 ( 0.00%)      }
         .           
         .               /// Returns `true` only if enough of the synthetic types are known to
         .               /// allow using all of the methods on `ClosureSubsts` without panicking.
         .               ///
         .               /// Used primarily by `ty::print::pretty` to be able to handle closure
         .               /// types that haven't had their synthetic types substituted in.
         2 ( 0.00%)      pub fn is_valid(self) -> bool {
         4 ( 0.00%)          self.substs.len() >= 3
         4 ( 0.00%)              && matches!(self.split().tupled_upvars_ty.expect_ty().kind(), Tuple(_))
         4 ( 0.00%)      }
         .           
         .               /// Returns the substitutions of the closure's parent.
         .               pub fn parent_substs(self) -> &'tcx [GenericArg<'tcx>] {
         .                   self.split().parent_substs
         .               }
         .           
         .               /// Returns an iterator over the list of types of captured paths by the closure.
         .               /// In case there was a type error in figuring out the types of the captured path, an
         .               /// empty iterator is returned.
         .               #[inline]
        18 ( 0.00%)      pub fn upvar_tys(self) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {
       255 ( 0.00%)          match self.tupled_upvars_ty().kind() {
         .                       TyKind::Error(_) => None,
       172 ( 0.00%)              TyKind::Tuple(..) => Some(self.tupled_upvars_ty().tuple_fields()),
         .                       TyKind::Infer(_) => bug!("upvar_tys called before capture types are inferred"),
         .                       ty => bug!("Unexpected representation of upvar types tuple {:?}", ty),
         .                   }
         .                   .into_iter()
         .                   .flatten()
        12 ( 0.00%)      }
         .           
         .               /// Returns the tuple type representing the upvars for this closure.
         .               #[inline]
         .               pub fn tupled_upvars_ty(self) -> Ty<'tcx> {
     3,757 ( 0.00%)          self.split().tupled_upvars_ty.expect_ty()
         .               }
         .           
         .               /// Returns the closure kind for this closure; may return a type
         .               /// variable during inference. To get the closure kind during
         .               /// inference, use `infcx.closure_kind(substs)`.
       502 ( 0.00%)      pub fn kind_ty(self) -> Ty<'tcx> {
         .                   self.split().closure_kind_ty.expect_ty()
     1,004 ( 0.00%)      }
         .           
         .               /// Returns the `fn` pointer type representing the closure signature for this
         .               /// closure.
         .               // FIXME(eddyb) this should be unnecessary, as the shallowly resolved
         .               // type is known at the time of the creation of `ClosureSubsts`,
         .               // see `rustc_typeck::check::closure`.
         .               pub fn sig_as_fn_ptr_ty(self) -> Ty<'tcx> {
         .                   self.split().closure_sig_as_fn_ptr_ty.expect_ty()
         .               }
         .           
         .               /// Returns the closure kind for this closure; only usable outside
         .               /// of an inference context, because in that context we know that
         .               /// there are no type variables.
         .               ///
         .               /// If you have an inference context, use `infcx.closure_kind()`.
         3 ( 0.00%)      pub fn kind(self) -> ty::ClosureKind {
         3 ( 0.00%)          self.kind_ty().to_opt_closure_kind().unwrap()
         6 ( 0.00%)      }
         .           
         .               /// Extracts the signature from the closure.
       616 ( 0.00%)      pub fn sig(self) -> ty::PolyFnSig<'tcx> {
         .                   let ty = self.sig_as_fn_ptr_ty();
     1,232 ( 0.00%)          match ty.kind() {
     2,464 ( 0.00%)              ty::FnPtr(sig) => *sig,
         .                       _ => bug!("closure_sig_as_fn_ptr_ty is not a fn-ptr: {:?}", ty.kind()),
         .                   }
     1,848 ( 0.00%)      }
         .           }
         .           
         .           /// Similar to `ClosureSubsts`; see the above documentation for more.
         .           #[derive(Copy, Clone, Debug, TypeFoldable)]
         .           pub struct GeneratorSubsts<'tcx> {
         .               pub substs: SubstsRef<'tcx>,
         .           }
         .           
-- line 448 ----------------------------------------
-- line 676 ----------------------------------------
         .           }
         .           
         .           impl<'tcx> UpvarSubsts<'tcx> {
         .               /// Returns an iterator over the list of types of captured paths by the closure/generator.
         .               /// In case there was a type error in figuring out the types of the captured path, an
         .               /// empty iterator is returned.
         .               #[inline]
         .               pub fn upvar_tys(self) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {
       160 ( 0.00%)          let tupled_tys = match self {
       237 ( 0.00%)              UpvarSubsts::Closure(substs) => substs.as_closure().tupled_upvars_ty(),
         .                       UpvarSubsts::Generator(substs) => substs.as_generator().tupled_upvars_ty(),
         .                   };
         .           
       394 ( 0.00%)          match tupled_tys.kind() {
         .                       TyKind::Error(_) => None,
       317 ( 0.00%)              TyKind::Tuple(..) => Some(self.tupled_upvars_ty().tuple_fields()),
         .                       TyKind::Infer(_) => bug!("upvar_tys called before capture types are inferred"),
         .                       ty => bug!("Unexpected representation of upvar types tuple {:?}", ty),
         .                   }
         .                   .into_iter()
         .                   .flatten()
         .               }
         .           
         .               #[inline]
         .               pub fn tupled_upvars_ty(self) -> Ty<'tcx> {
       314 ( 0.00%)          match self {
       317 ( 0.00%)              UpvarSubsts::Closure(substs) => substs.as_closure().tupled_upvars_ty(),
         .                       UpvarSubsts::Generator(substs) => substs.as_generator().tupled_upvars_ty(),
         .                   }
         .               }
         .           }
         .           
         .           /// An inline const is modeled like
         .           ///
         .           ///     const InlineConst<'l0...'li, T0...Tj, R>: R;
-- line 710 ----------------------------------------
-- line 760 ----------------------------------------
         .               }
         .           
         .               /// Returns the type of this inline const.
         .               pub fn ty(self) -> Ty<'tcx> {
         .                   self.split().ty.expect_ty()
         .               }
         .           }
         .           
   137,831 ( 0.00%)  #[derive(Debug, Copy, Clone, PartialEq, PartialOrd, Ord, Eq, Hash, TyEncodable, TyDecodable)]
   128,650 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub enum ExistentialPredicate<'tcx> {
         .               /// E.g., `Iterator`.
         .               Trait(ExistentialTraitRef<'tcx>),
         .               /// E.g., `Iterator::Item = T`.
         .               Projection(ExistentialProjection<'tcx>),
         .               /// E.g., `Send`.
     1,008 ( 0.00%)      AutoTrait(DefId),
         .           }
         .           
         .           impl<'tcx> ExistentialPredicate<'tcx> {
         .               /// Compares via an ordering that will not change if modules are reordered or other changes are
         .               /// made to the tree. In particular, this ordering is preserved across incremental compilations.
     5,845 ( 0.00%)      pub fn stable_cmp(&self, tcx: TyCtxt<'tcx>, other: &Self) -> Ordering {
         .                   use self::ExistentialPredicate::*;
     8,760 ( 0.00%)          match (*self, *other) {
         .                       (Trait(_), Trait(_)) => Ordering::Equal,
         .                       (Projection(ref a), Projection(ref b)) => {
         .                           tcx.def_path_hash(a.item_def_id).cmp(&tcx.def_path_hash(b.item_def_id))
         .                       }
         .                       (AutoTrait(ref a), AutoTrait(ref b)) => {
         .                           tcx.def_path_hash(*a).cmp(&tcx.def_path_hash(*b))
         .                       }
         .                       (Trait(_), _) => Ordering::Less,
         .                       (Projection(_), Trait(_)) => Ordering::Greater,
         .                       (Projection(_), _) => Ordering::Less,
         .                       (AutoTrait(_), _) => Ordering::Greater,
         .                   }
     7,014 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> Binder<'tcx, ExistentialPredicate<'tcx>> {
    12,798 ( 0.00%)      pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::Predicate<'tcx> {
         .                   use crate::ty::ToPredicate;
     7,294 ( 0.00%)          match self.skip_binder() {
         .                       ExistentialPredicate::Trait(tr) => {
         .                           self.rebind(tr).with_self_ty(tcx, self_ty).without_const().to_predicate(tcx)
         .                       }
         .                       ExistentialPredicate::Projection(p) => {
         4 ( 0.00%)                  self.rebind(p.with_self_ty(tcx, self_ty)).to_predicate(tcx)
         .                       }
         .                       ExistentialPredicate::AutoTrait(did) => {
       126 ( 0.00%)                  let trait_ref = self.rebind(ty::TraitRef {
         .                               def_id: did,
         .                               substs: tcx.mk_substs_trait(self_ty, &[]),
         .                           });
         .                           trait_ref.without_const().to_predicate(tcx)
         .                       }
         .                   }
    11,376 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>> {
         .               /// Returns the "principal `DefId`" of this set of existential predicates.
         .               ///
         .               /// A Rust trait object type consists (in addition to a lifetime bound)
         .               /// of a set of trait bounds, which are separated into any number
         .               /// of auto-trait bounds, and at most one non-auto-trait bound. The
-- line 826 ----------------------------------------
-- line 839 ----------------------------------------
         .               /// are the set `{Sync}`.
         .               ///
         .               /// It is also possible to have a "trivial" trait object that
         .               /// consists only of auto traits, with no principal - for example,
         .               /// `dyn Send + Sync`. In that case, the set of auto-trait bounds
         .               /// is `{Send, Sync}`, while there is no principal. These trait objects
         .               /// have a "trivial" vtable consisting of just the size, alignment,
         .               /// and destructor.
       169 ( 0.00%)      pub fn principal(&self) -> Option<ty::Binder<'tcx, ExistentialTraitRef<'tcx>>> {
     4,658 ( 0.00%)          self[0]
     4,151 ( 0.00%)              .map_bound(|this| match this {
         .                           ExistentialPredicate::Trait(tr) => Some(tr),
         .                           _ => None,
       676 ( 0.00%)              })
         .                       .transpose()
       507 ( 0.00%)      }
         .           
     1,306 ( 0.00%)      pub fn principal_def_id(&self) -> Option<DefId> {
         .                   self.principal().map(|trait_ref| trait_ref.skip_binder().def_id)
     2,612 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn projection_bounds<'a>(
         .                   &'a self,
         .               ) -> impl Iterator<Item = ty::Binder<'tcx, ExistentialProjection<'tcx>>> + 'a {
         .                   self.iter().filter_map(|predicate| {
        96 ( 0.00%)              predicate
       376 ( 0.00%)                  .map_bound(|pred| match pred {
        18 ( 0.00%)                      ExistentialPredicate::Projection(projection) => Some(projection),
         .                               _ => None,
         .                           })
         .                           .transpose()
         .                   })
         .               }
         .           
         .               #[inline]
         .               pub fn auto_traits<'a>(&'a self) -> impl Iterator<Item = DefId> + 'a {
        38 ( 0.00%)          self.iter().filter_map(|predicate| match predicate.skip_binder() {
         .                       ExistentialPredicate::AutoTrait(did) => Some(did),
         .                       _ => None,
         .                   })
         .               }
         .           }
         .           
         .           /// A complete reference to a trait. These take numerous guises in syntax,
         .           /// but perhaps the most recognizable form is in a where-clause:
-- line 884 ----------------------------------------
-- line 886 ----------------------------------------
         .           ///     T: Foo<U>
         .           ///
         .           /// This would be represented by a trait-reference where the `DefId` is the
         .           /// `DefId` for the trait `Foo` and the substs define `T` as parameter 0,
         .           /// and `U` as parameter 1.
         .           ///
         .           /// Trait references also appear in object types like `Foo<U>`, but in
         .           /// that case the `Self` parameter is absent from the substitutions.
    40,854 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
 1,183,532 ( 0.02%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct TraitRef<'tcx> {
       978 ( 0.00%)      pub def_id: DefId,
   875,913 ( 0.02%)      pub substs: SubstsRef<'tcx>,
         .           }
         .           
         .           impl<'tcx> TraitRef<'tcx> {
     3,058 ( 0.00%)      pub fn new(def_id: DefId, substs: SubstsRef<'tcx>) -> TraitRef<'tcx> {
         .                   TraitRef { def_id, substs }
    12,232 ( 0.00%)      }
         .           
         .               /// Returns a `TraitRef` of the form `P0: Foo<P1..Pn>` where `Pi`
         .               /// are the parameters defined on trait.
     8,955 ( 0.00%)      pub fn identity(tcx: TyCtxt<'tcx>, def_id: DefId) -> Binder<'tcx, TraitRef<'tcx>> {
     3,980 ( 0.00%)          ty::Binder::dummy(TraitRef {
         .                       def_id,
     5,970 ( 0.00%)              substs: InternalSubsts::identity_for_item(tcx, def_id),
         .                   })
     7,960 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn self_ty(&self) -> Ty<'tcx> {
         .                   self.substs.type_at(0)
         .               }
         .           
     1,168 ( 0.00%)      pub fn from_method(
         .                   tcx: TyCtxt<'tcx>,
         .                   trait_id: DefId,
         .                   substs: SubstsRef<'tcx>,
         .               ) -> ty::TraitRef<'tcx> {
         .                   let defs = tcx.generics_of(trait_id);
         .           
       146 ( 0.00%)          ty::TraitRef { def_id: trait_id, substs: tcx.intern_substs(&substs[..defs.params.len()]) }
     1,606 ( 0.00%)      }
         .           }
         .           
         .           pub type PolyTraitRef<'tcx> = Binder<'tcx, TraitRef<'tcx>>;
         .           
         .           impl<'tcx> PolyTraitRef<'tcx> {
         .               pub fn self_ty(&self) -> Binder<'tcx, Ty<'tcx>> {
         .                   self.map_bound_ref(|tr| tr.self_ty())
         .               }
         .           
         .               pub fn def_id(&self) -> DefId {
     6,252 ( 0.00%)          self.skip_binder().def_id
     2,084 ( 0.00%)      }
         .           
     2,313 ( 0.00%)      pub fn to_poly_trait_predicate(&self) -> ty::PolyTraitPredicate<'tcx> {
     4,626 ( 0.00%)          self.map_bound(|trait_ref| ty::TraitPredicate {
         .                       trait_ref,
         .                       constness: ty::BoundConstness::NotConst,
         .                       polarity: ty::ImplPolarity::Positive,
         .                   })
     2,313 ( 0.00%)      }
         .           }
         .           
         .           /// An existential reference to a trait, where `Self` is erased.
         .           /// For example, the trait object `Trait<'a, 'b, X, Y>` is:
         .           ///
         .           ///     exists T. T: Trait<'a, 'b, X, Y>
         .           ///
         .           /// The substitutions don't include the erased `Self`, only trait
         .           /// type and lifetime parameters (`[X, Y]` and `['a, 'b]` above).
       136 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
    61,050 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct ExistentialTraitRef<'tcx> {
     9,386 ( 0.00%)      pub def_id: DefId,
    73,840 ( 0.00%)      pub substs: SubstsRef<'tcx>,
         .           }
         .           
         .           impl<'tcx> ExistentialTraitRef<'tcx> {
       788 ( 0.00%)      pub fn erase_self_ty(
         .                   tcx: TyCtxt<'tcx>,
         .                   trait_ref: ty::TraitRef<'tcx>,
         .               ) -> ty::ExistentialTraitRef<'tcx> {
         .                   // Assert there is a Self.
         .                   trait_ref.substs.type_at(0);
         .           
         .                   ty::ExistentialTraitRef {
         .                       def_id: trait_ref.def_id,
         .                       substs: tcx.intern_substs(&trait_ref.substs[1..]),
         .                   }
       788 ( 0.00%)      }
         .           
         .               /// Object types don't have a self type specified. Therefore, when
         .               /// we convert the principal trait-ref into a normal trait-ref,
         .               /// you must give *some* self type. A common choice is `mk_err()`
         .               /// or some placeholder type.
        46 ( 0.00%)      pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::TraitRef<'tcx> {
         .                   // otherwise the escaping vars would be captured by the binder
         .                   // debug_assert!(!self_ty.has_escaping_bound_vars());
         .           
        23 ( 0.00%)          ty::TraitRef { def_id: self.def_id, substs: tcx.mk_substs_trait(self_ty, self.substs) }
       115 ( 0.00%)      }
         .           }
         .           
         .           pub type PolyExistentialTraitRef<'tcx> = Binder<'tcx, ExistentialTraitRef<'tcx>>;
         .           
         .           impl<'tcx> PolyExistentialTraitRef<'tcx> {
         .               pub fn def_id(&self) -> DefId {
         .                   self.skip_binder().def_id
         .               }
         .           
         .               /// Object types don't have a self type specified. Therefore, when
         .               /// we convert the principal trait-ref into a normal trait-ref,
         .               /// you must give *some* self type. A common choice is `mk_err()`
         .               /// or some placeholder type.
       204 ( 0.00%)      pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::PolyTraitRef<'tcx> {
       204 ( 0.00%)          self.map_bound(|trait_ref| trait_ref.with_self_ty(tcx, self_ty))
       272 ( 0.00%)      }
         .           }
         .           
    49,033 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
         .           #[derive(HashStable)]
         .           pub enum BoundVariableKind {
         .               Ty(BoundTyKind),
         .               Region(BoundRegionKind),
         .               Const,
         .           }
         .           
         .           /// Binder is a binder for higher-ranked lifetimes or types. It is part of the
-- line 1015 ----------------------------------------
-- line 1016 ----------------------------------------
         .           /// compiler's representation for things like `for<'a> Fn(&'a isize)`
         .           /// (which would be represented by the type `PolyTraitRef ==
         .           /// Binder<'tcx, TraitRef>`). Note that when we instantiate,
         .           /// erase, or otherwise "discharge" these bound vars, we change the
         .           /// type from `Binder<'tcx, T>` to just `T` (see
         .           /// e.g., `liberate_late_bound_regions`).
         .           ///
         .           /// `Decodable` and `Encodable` are implemented for `Binder<T>` using the `impl_binder_encode_decode!` macro.
   162,708 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
   608,649 ( 0.01%)  pub struct Binder<'tcx, T>(T, &'tcx List<BoundVariableKind>);
         .           
         .           impl<'tcx, T> Binder<'tcx, T>
         .           where
         .               T: TypeFoldable<'tcx>,
         .           {
         .               /// Wraps `value` in a binder, asserting that `value` does not
         .               /// contain any bound vars that would be bound by the
         .               /// binder. This is commonly used to 'inject' a value T into a
         .               /// different binding level.
    50,275 ( 0.00%)      pub fn dummy(value: T) -> Binder<'tcx, T> {
   219,527 ( 0.00%)          assert!(!value.has_escaping_bound_vars());
   497,428 ( 0.01%)          Binder(value, ty::List::empty())
    49,939 ( 0.00%)      }
         .           
         .               pub fn bind_with_vars(value: T, vars: &'tcx List<BoundVariableKind>) -> Binder<'tcx, T> {
         .                   if cfg!(debug_assertions) {
         .                       let mut validator = ValidateBoundVars::new(vars);
         .                       value.visit_with(&mut validator);
         .                   }
    37,750 ( 0.00%)          Binder(value, vars)
         .               }
         .           }
         .           
         .           impl<'tcx, T> Binder<'tcx, T> {
         .               /// Skips the binder and returns the "bound" value. This is a
         .               /// risky thing to do because it's easy to get confused about
         .               /// De Bruijn indices and the like. It is usually better to
         .               /// discharge the binder using `no_bound_vars` or
-- line 1053 ----------------------------------------
-- line 1059 ----------------------------------------
         .               /// accounting.
         .               ///
         .               /// Some examples where `skip_binder` is reasonable:
         .               ///
         .               /// - extracting the `DefId` from a PolyTraitRef;
         .               /// - comparing the self type of a PolyTraitRef to see if it is equal to
         .               ///   a type parameter `X`, since the type `X` does not reference any regions
         .               pub fn skip_binder(self) -> T {
 1,567,067 ( 0.03%)          self.0
         .               }
         .           
         .               pub fn bound_vars(&self) -> &'tcx List<BoundVariableKind> {
     7,631 ( 0.00%)          self.1
         .               }
         .           
         .               pub fn as_ref(&self) -> Binder<'tcx, &T> {
     4,245 ( 0.00%)          Binder(&self.0, self.1)
         .               }
         .           
         .               pub fn map_bound_ref_unchecked<F, U>(&self, f: F) -> Binder<'tcx, U>
         .               where
         .                   F: FnOnce(&T) -> U,
         .               {
         .                   let value = f(&self.0);
         .                   Binder(value, self.1)
-- line 1083 ----------------------------------------
-- line 1085 ----------------------------------------
         .           
         .               pub fn map_bound_ref<F, U: TypeFoldable<'tcx>>(&self, f: F) -> Binder<'tcx, U>
         .               where
         .                   F: FnOnce(&T) -> U,
         .               {
         .                   self.as_ref().map_bound(f)
         .               }
         .           
     1,968 ( 0.00%)      pub fn map_bound<F, U: TypeFoldable<'tcx>>(self, f: F) -> Binder<'tcx, U>
         .               where
         .                   F: FnOnce(T) -> U,
         .               {
    37,467 ( 0.00%)          let value = f(self.0);
         .                   if cfg!(debug_assertions) {
         .                       let mut validator = ValidateBoundVars::new(self.1);
         .                       value.visit_with(&mut validator);
         .                   }
   406,477 ( 0.01%)          Binder(value, self.1)
     1,964 ( 0.00%)      }
         .           
         .               pub fn try_map_bound<F, U: TypeFoldable<'tcx>, E>(self, f: F) -> Result<Binder<'tcx, U>, E>
         .               where
         .                   F: FnOnce(T) -> Result<U, E>,
         .               {
         .                   let value = f(self.0)?;
         .                   if cfg!(debug_assertions) {
         .                       let mut validator = ValidateBoundVars::new(self.1);
         .                       value.visit_with(&mut validator);
         .                   }
    16,106 ( 0.00%)          Ok(Binder(value, self.1))
         .               }
         .           
         .               /// Wraps a `value` in a binder, using the same bound variables as the
         .               /// current `Binder`. This should not be used if the new value *changes*
         .               /// the bound variables. Note: the (old or new) value itself does not
         .               /// necessarily need to *name* all the bound variables.
         .               ///
         .               /// This currently doesn't do anything different than `bind`, because we
-- line 1122 ----------------------------------------
-- line 1126 ----------------------------------------
         .               pub fn rebind<U>(&self, value: U) -> Binder<'tcx, U>
         .               where
         .                   U: TypeFoldable<'tcx>,
         .               {
         .                   if cfg!(debug_assertions) {
         .                       let mut validator = ValidateBoundVars::new(self.bound_vars());
         .                       value.visit_with(&mut validator);
         .                   }
    30,148 ( 0.00%)          Binder(value, self.1)
         .               }
         .           
         .               /// Unwraps and returns the value within, but only if it contains
         .               /// no bound vars at all. (In other words, if this binder --
         .               /// and indeed any enclosing binder -- doesn't bind anything at
         .               /// all.) Otherwise, returns `None`.
         .               ///
         .               /// (One could imagine having a method that just unwraps a single
-- line 1142 ----------------------------------------
-- line 1143 ----------------------------------------
         .               /// binder, but permits late-bound vars bound by enclosing
         .               /// binders, but that would require adjusting the debruijn
         .               /// indices, and given the shallow binding structure we often use,
         .               /// would not be that useful.)
         .               pub fn no_bound_vars(self) -> Option<T>
         .               where
         .                   T: TypeFoldable<'tcx>,
         .               {
   257,270 ( 0.01%)          if self.0.has_escaping_bound_vars() { None } else { Some(self.skip_binder()) }
       970 ( 0.00%)      }
         .           
         .               /// Splits the contents into two things that share the same binder
         .               /// level as the original, returning two distinct binders.
         .               ///
         .               /// `f` should consider bound regions at depth 1 to be free, and
         .               /// anything it produces with bound regions at depth 1 will be
         .               /// bound in the resulting return values.
         .               pub fn split<U, V, F>(self, f: F) -> (Binder<'tcx, U>, Binder<'tcx, V>)
-- line 1160 ----------------------------------------
-- line 1170 ----------------------------------------
         .               pub fn transpose(self) -> Option<Binder<'tcx, T>> {
         .                   let bound_vars = self.1;
         .                   self.0.map(|v| Binder(v, bound_vars))
         .               }
         .           }
         .           
         .           /// Represents the projection of an associated type. In explicit UFCS
         .           /// form this would be written `<T as Trait<..>>::N`.
     1,210 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
    38,768 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct ProjectionTy<'tcx> {
         .               /// The parameters of the associated item.
    24,377 ( 0.00%)      pub substs: SubstsRef<'tcx>,
         .           
         .               /// The `DefId` of the `TraitItem` for the associated type `N`.
         .               ///
         .               /// Note that this is not the `DefId` of the `TraitRef` containing this
         .               /// associated type, which is in `tcx.associated_item(item_def_id).container`.
    24,615 ( 0.00%)      pub item_def_id: DefId,
         .           }
         .           
         .           impl<'tcx> ProjectionTy<'tcx> {
    17,066 ( 0.00%)      pub fn trait_def_id(&self, tcx: TyCtxt<'tcx>) -> DefId {
     4,876 ( 0.00%)          tcx.associated_item(self.item_def_id).container.id()
    19,504 ( 0.00%)      }
         .           
         .               /// Extracts the underlying trait reference and own substs from this projection.
         .               /// For example, if this is a projection of `<T as StreamingIterator>::Item<'a>`,
         .               /// then this function would return a `T: Iterator` trait reference and `['a]` as the own substs
     7,245 ( 0.00%)      pub fn trait_ref_and_own_substs(
         .                   &self,
         .                   tcx: TyCtxt<'tcx>,
         .               ) -> (ty::TraitRef<'tcx>, &'tcx [ty::GenericArg<'tcx>]) {
     3,105 ( 0.00%)          let def_id = tcx.associated_item(self.item_def_id).container.id();
         .                   let trait_generics = tcx.generics_of(def_id);
     5,175 ( 0.00%)          (
         .                       ty::TraitRef { def_id, substs: self.substs.truncate_to(tcx, trait_generics) },
         .                       &self.substs[trait_generics.count()..],
         .                   )
     9,315 ( 0.00%)      }
         .           
         .               /// Extracts the underlying trait reference from this projection.
         .               /// For example, if this is a projection of `<T as Iterator>::Item`,
         .               /// then this function would return a `T: Iterator` trait reference.
         .               ///
         .               /// WARNING: This will drop the substs for generic associated types
         .               /// consider calling [Self::trait_ref_and_own_substs] to get those
         .               /// as well.
    21,267 ( 0.00%)      pub fn trait_ref(&self, tcx: TyCtxt<'tcx>) -> ty::TraitRef<'tcx> {
     2,363 ( 0.00%)          let def_id = self.trait_def_id(tcx);
     2,363 ( 0.00%)          ty::TraitRef { def_id, substs: self.substs.truncate_to(tcx, tcx.generics_of(def_id)) }
    25,993 ( 0.00%)      }
         .           
     4,583 ( 0.00%)      pub fn self_ty(&self) -> Ty<'tcx> {
    13,749 ( 0.00%)          self.substs.type_at(0)
     9,166 ( 0.00%)      }
         .           }
         .           
         .           #[derive(Copy, Clone, Debug, TypeFoldable)]
         .           pub struct GenSig<'tcx> {
         .               pub resume_ty: Ty<'tcx>,
         .               pub yield_ty: Ty<'tcx>,
         .               pub return_ty: Ty<'tcx>,
         .           }
-- line 1233 ----------------------------------------
-- line 1235 ----------------------------------------
         .           pub type PolyGenSig<'tcx> = Binder<'tcx, GenSig<'tcx>>;
         .           
         .           /// Signature of a function type, which we have arbitrarily
         .           /// decided to use to refer to the input/output types.
         .           ///
         .           /// - `inputs`: is the list of arguments and their modes.
         .           /// - `output`: is the return type.
         .           /// - `c_variadic`: indicates whether this is a C-variadic function.
    60,548 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
    34,386 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct FnSig<'tcx> {
     4,538 ( 0.00%)      pub inputs_and_output: &'tcx List<Ty<'tcx>>,
    41,203 ( 0.00%)      pub c_variadic: bool,
     8,201 ( 0.00%)      pub unsafety: hir::Unsafety,
    38,222 ( 0.00%)      pub abi: abi::Abi,
         .           }
         .           
         .           impl<'tcx> FnSig<'tcx> {
    39,399 ( 0.00%)      pub fn inputs(&self) -> &'tcx [Ty<'tcx>] {
   166,692 ( 0.00%)          &self.inputs_and_output[..self.inputs_and_output.len() - 1]
    78,798 ( 0.00%)      }
         .           
    24,984 ( 0.00%)      pub fn output(&self) -> Ty<'tcx> {
   182,601 ( 0.00%)          self.inputs_and_output[self.inputs_and_output.len() - 1]
    49,968 ( 0.00%)      }
         .           
         .               // Creates a minimal `FnSig` to be used when encountering a `TyKind::Error` in a fallible
         .               // method.
         .               fn fake() -> FnSig<'tcx> {
         .                   FnSig {
         .                       inputs_and_output: List::empty(),
         .                       c_variadic: false,
         .                       unsafety: hir::Unsafety::Normal,
-- line 1267 ----------------------------------------
-- line 1270 ----------------------------------------
         .               }
         .           }
         .           
         .           pub type PolyFnSig<'tcx> = Binder<'tcx, FnSig<'tcx>>;
         .           
         .           impl<'tcx> PolyFnSig<'tcx> {
         .               #[inline]
         .               pub fn inputs(&self) -> Binder<'tcx, &'tcx [Ty<'tcx>]> {
     7,904 ( 0.00%)          self.map_bound_ref_unchecked(|fn_sig| fn_sig.inputs())
         .               }
         .               #[inline]
         .               pub fn input(&self, index: usize) -> ty::Binder<'tcx, Ty<'tcx>> {
    22,306 ( 0.00%)          self.map_bound_ref(|fn_sig| fn_sig.inputs()[index])
         .               }
         .               pub fn inputs_and_output(&self) -> ty::Binder<'tcx, &'tcx List<Ty<'tcx>>> {
         .                   self.map_bound_ref(|fn_sig| fn_sig.inputs_and_output)
       828 ( 0.00%)      }
         .               #[inline]
         .               pub fn output(&self) -> ty::Binder<'tcx, Ty<'tcx>> {
    14,143 ( 0.00%)          self.map_bound_ref(|fn_sig| fn_sig.output())
         .               }
         .               pub fn c_variadic(&self) -> bool {
     1,652 ( 0.00%)          self.skip_binder().c_variadic
       826 ( 0.00%)      }
         .               pub fn unsafety(&self) -> hir::Unsafety {
     6,142 ( 0.00%)          self.skip_binder().unsafety
     3,071 ( 0.00%)      }
         .               pub fn abi(&self) -> abi::Abi {
     6,668 ( 0.00%)          self.skip_binder().abi
     1,667 ( 0.00%)      }
         .           }
         .           
         .           pub type CanonicalPolyFnSig<'tcx> = Canonical<'tcx, Binder<'tcx, FnSig<'tcx>>>;
         .           
        44 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
         .           #[derive(HashStable)]
         .           pub struct ParamTy {
        96 ( 0.00%)      pub index: u32,
         .               pub name: Symbol,
         .           }
         .           
         .           impl<'tcx> ParamTy {
       172 ( 0.00%)      pub fn new(index: u32, name: Symbol) -> ParamTy {
         .                   ParamTy { index, name }
        86 ( 0.00%)      }
         .           
         .               pub fn for_def(def: &ty::GenericParamDef) -> ParamTy {
        26 ( 0.00%)          ParamTy::new(def.index, def.name)
        13 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn to_ty(self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
         .                   tcx.mk_ty_param(self.index, self.name)
         .               }
         .           }
         .           
         .           #[derive(Copy, Clone, Hash, TyEncodable, TyDecodable, Eq, PartialEq, Ord, PartialOrd)]
         .           #[derive(HashStable)]
         .           pub struct ParamConst {
       108 ( 0.00%)      pub index: u32,
       108 ( 0.00%)      pub name: Symbol,
         .           }
         .           
         .           impl ParamConst {
         .               pub fn new(index: u32, name: Symbol) -> ParamConst {
         .                   ParamConst { index, name }
         .               }
         .           
         .               pub fn for_def(def: &ty::GenericParamDef) -> ParamConst {
-- line 1338 ----------------------------------------
-- line 1440 ----------------------------------------
         .           /// the inference variable is supposed to satisfy the relation
         .           /// *for every value of the placeholder region*. To ensure that doesn't
         .           /// happen, you can use `leak_check`. This is more clearly explained
         .           /// by the [rustc dev guide].
         .           ///
         .           /// [1]: https://smallcultfollowing.com/babysteps/blog/2013/10/29/intermingled-parameter-lists/
         .           /// [2]: https://smallcultfollowing.com/babysteps/blog/2013/11/04/intermingled-parameter-lists/
         .           /// [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/traits/hrtb.html
 5,846,062 ( 0.12%)  #[derive(Clone, PartialEq, Eq, Hash, Copy, TyEncodable, TyDecodable, PartialOrd, Ord)]
        74 ( 0.00%)  pub enum RegionKind {
         .               /// Region bound in a type or fn declaration which will be
         .               /// substituted 'early' -- that is, at the same time when type
         .               /// parameters are substituted.
         .               ReEarlyBound(EarlyBoundRegion),
         .           
         .               /// Region bound in a function scope, which will be substituted when the
         .               /// function is called.
   149,096 ( 0.00%)      ReLateBound(ty::DebruijnIndex, BoundRegion),
         .           
         .               /// When checking a function body, the types of all arguments and so forth
         .               /// that refer to bound region parameters are modified to refer to free
         .               /// region parameters.
         .               ReFree(FreeRegion),
         .           
         .               /// Static data that has an "infinite" lifetime. Top in the region lattice.
         .               ReStatic,
-- line 1465 ----------------------------------------
-- line 1478 ----------------------------------------
         .               /// regions visible from `U`, but not less than regions not visible
         .               /// from `U`.
         .               ReEmpty(ty::UniverseIndex),
         .           
         .               /// Erased region, used by trait selection, in MIR and during codegen.
         .               ReErased,
         .           }
         .           
    19,176 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable, Debug, PartialOrd, Ord)]
         .           pub struct EarlyBoundRegion {
       578 ( 0.00%)      pub def_id: DefId,
    14,844 ( 0.00%)      pub index: u32,
     4,824 ( 0.00%)      pub name: Symbol,
         .           }
         .           
         .           /// A **`const`** **v**ariable **ID**.
         .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
         .           pub struct ConstVid<'tcx> {
     3,056 ( 0.00%)      pub index: u32,
         5 ( 0.00%)      pub phantom: PhantomData<&'tcx ()>,
         .           }
         .           
         .           rustc_index::newtype_index! {
         .               /// A **region** (lifetime) **v**ariable **ID**.
         .               pub struct RegionVid {
         .                   DEBUG_FORMAT = custom,
         .               }
         .           }
-- line 1505 ----------------------------------------
-- line 1513 ----------------------------------------
         .           rustc_index::newtype_index! {
         .               pub struct BoundVar { .. }
         .           }
         .           
         .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
         .           #[derive(HashStable)]
         .           pub struct BoundTy {
         .               pub var: BoundVar,
     6,875 ( 0.00%)      pub kind: BoundTyKind,
         .           }
         .           
   116,932 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
         .           #[derive(HashStable)]
         .           pub enum BoundTyKind {
         .               Anon,
         .               Param(Symbol),
         .           }
         .           
         .           impl From<BoundVar> for BoundTy {
         .               fn from(var: BoundVar) -> Self {
         .                   BoundTy { var, kind: BoundTyKind::Anon }
         .               }
         .           }
         .           
         .           /// A `ProjectionPredicate` for an `ExistentialTraitRef`.
        13 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
     1,268 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct ExistentialProjection<'tcx> {
       358 ( 0.00%)      pub item_def_id: DefId,
     1,656 ( 0.00%)      pub substs: SubstsRef<'tcx>,
       414 ( 0.00%)      pub term: Term<'tcx>,
         .           }
         .           
         .           pub type PolyExistentialProjection<'tcx> = Binder<'tcx, ExistentialProjection<'tcx>>;
         .           
         .           impl<'tcx> ExistentialProjection<'tcx> {
         .               /// Extracts the underlying existential trait reference from this projection.
         .               /// For example, if this is a projection of `exists T. <T as Iterator>::Item == X`,
         .               /// then this function would return an `exists T. T: Iterator` existential trait
         .               /// reference.
       161 ( 0.00%)      pub fn trait_ref(&self, tcx: TyCtxt<'tcx>) -> ty::ExistentialTraitRef<'tcx> {
        69 ( 0.00%)          let def_id = tcx.associated_item(self.item_def_id).container.id();
        46 ( 0.00%)          let subst_count = tcx.generics_of(def_id).count() - 1;
        23 ( 0.00%)          let substs = tcx.intern_substs(&self.substs[..subst_count]);
         .                   ty::ExistentialTraitRef { def_id, substs }
       207 ( 0.00%)      }
         .           
         .               pub fn with_self_ty(
         .                   &self,
         .                   tcx: TyCtxt<'tcx>,
         .                   self_ty: Ty<'tcx>,
         .               ) -> ty::ProjectionPredicate<'tcx> {
         .                   // otherwise the escaping regions would be captured by the binders
         .                   debug_assert!(!self_ty.has_escaping_bound_vars());
-- line 1566 ----------------------------------------
-- line 1569 ----------------------------------------
         .                       projection_ty: ty::ProjectionTy {
         .                           item_def_id: self.item_def_id,
         .                           substs: tcx.mk_substs_trait(self_ty, self.substs),
         .                       },
         .                       term: self.term,
         .                   }
         .               }
         .           
        10 ( 0.00%)      pub fn erase_self_ty(
         .                   tcx: TyCtxt<'tcx>,
         .                   projection_predicate: ty::ProjectionPredicate<'tcx>,
         .               ) -> Self {
         .                   // Assert there is a Self.
         6 ( 0.00%)          projection_predicate.projection_ty.substs.type_at(0);
         .           
         8 ( 0.00%)          Self {
         4 ( 0.00%)              item_def_id: projection_predicate.projection_ty.item_def_id,
         .                       substs: tcx.intern_substs(&projection_predicate.projection_ty.substs[1..]),
         2 ( 0.00%)              term: projection_predicate.term,
         .                   }
        14 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> PolyExistentialProjection<'tcx> {
        40 ( 0.00%)      pub fn with_self_ty(
         .                   &self,
         .                   tcx: TyCtxt<'tcx>,
         .                   self_ty: Ty<'tcx>,
         .               ) -> ty::PolyProjectionPredicate<'tcx> {
        40 ( 0.00%)          self.map_bound(|p| p.with_self_ty(tcx, self_ty))
        48 ( 0.00%)      }
         .           
         .               pub fn item_def_id(&self) -> DefId {
        16 ( 0.00%)          self.skip_binder().item_def_id
         8 ( 0.00%)      }
         .           }
         .           
         .           /// Region utilities
         .           impl RegionKind {
         .               /// Is this region named by the user?
         .               pub fn has_name(&self) -> bool {
         .                   match *self {
         .                       RegionKind::ReEarlyBound(ebr) => ebr.has_name(),
-- line 1611 ----------------------------------------
-- line 1616 ----------------------------------------
         .                       RegionKind::RePlaceholder(placeholder) => placeholder.name.is_named(),
         .                       RegionKind::ReEmpty(_) => false,
         .                       RegionKind::ReErased => false,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_late_bound(&self) -> bool {
     9,593 ( 0.00%)          matches!(*self, ty::ReLateBound(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_placeholder(&self) -> bool {
         .                   matches!(*self, ty::RePlaceholder(..))
         .               }
         .           
         .               #[inline]
         .               pub fn bound_at_or_above_binder(&self, index: ty::DebruijnIndex) -> bool {
   191,177 ( 0.00%)          match *self {
         .                       ty::ReLateBound(debruijn, _) => debruijn >= index,
         .                       _ => false,
         .                   }
         .               }
         .           
         .               pub fn type_flags(&self) -> TypeFlags {
         .                   let mut flags = TypeFlags::empty();
         .           
   237,359 ( 0.00%)          match *self {
         .                       ty::ReVar(..) => {
         .                           flags = flags | TypeFlags::HAS_FREE_REGIONS;
         .                           flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;
         .                           flags = flags | TypeFlags::HAS_RE_INFER;
         .                       }
         .                       ty::RePlaceholder(..) => {
         .                           flags = flags | TypeFlags::HAS_FREE_REGIONS;
         .                           flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;
-- line 1651 ----------------------------------------
-- line 1669 ----------------------------------------
         .                       ty::ReErased => {
         .                           flags = flags | TypeFlags::HAS_RE_ERASED;
         .                       }
         .                   }
         .           
         .                   debug!("type_flags({:?}) = {:?}", self, flags);
         .           
         .                   flags
    10,316 ( 0.00%)      }
         .           
         .               /// Given an early-bound or free region, returns the `DefId` where it was bound.
         .               /// For example, consider the regions in this snippet of code:
         .               ///
         .               /// ```
         .               /// impl<'a> Foo {
         .               ///      ^^ -- early bound, declared on an impl
         .               ///
-- line 1685 ----------------------------------------
-- line 1713 ----------------------------------------
         .           
         .               #[inline(always)]
         .               pub fn flags(&self) -> TypeFlags {
         .                   self.flags
         .               }
         .           
         .               #[inline]
         .               pub fn is_unit(&self) -> bool {
     4,996 ( 0.00%)          match self.kind() {
       707 ( 0.00%)              Tuple(ref tys) => tys.is_empty(),
         .                       _ => false,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_never(&self) -> bool {
    84,636 ( 0.00%)          matches!(self.kind(), Never)
         .               }
         .           
         .               #[inline]
         .               pub fn is_primitive(&self) -> bool {
         .                   self.kind().is_primitive()
         .               }
         .           
         .               #[inline]
-- line 1737 ----------------------------------------
-- line 1741 ----------------------------------------
         .           
         .               #[inline]
         .               pub fn is_ref(&self) -> bool {
         .                   matches!(self.kind(), Ref(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_ty_var(&self) -> bool {
   105,593 ( 0.00%)          matches!(self.kind(), Infer(TyVar(_)))
         .               }
         .           
         .               #[inline]
         .               pub fn ty_vid(&self) -> Option<ty::TyVid> {
    64,824 ( 0.00%)          match self.kind() {
    10,105 ( 0.00%)              &Infer(TyVar(vid)) => Some(vid),
         .                       _ => None,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_ty_infer(&self) -> bool {
       231 ( 0.00%)          matches!(self.kind(), Infer(_))
         .               }
         .           
         .               #[inline]
         .               pub fn is_phantom_data(&self) -> bool {
         .                   if let Adt(def, _) = self.kind() { def.is_phantom_data() } else { false }
         .               }
         .           
         .               #[inline]
         .               pub fn is_bool(&self) -> bool {
       534 ( 0.00%)          *self.kind() == Bool
         .               }
         .           
         .               /// Returns `true` if this type is a `str`.
         .               #[inline]
         .               pub fn is_str(&self) -> bool {
         .                   *self.kind() == Str
         .               }
         .           
         .               #[inline]
         .               pub fn is_param(&self, index: u32) -> bool {
        81 ( 0.00%)          match self.kind() {
         .                       ty::Param(ref data) => data.index == index,
         .                       _ => false,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_slice(&self) -> bool {
         .                   match self.kind() {
         .                       RawPtr(TypeAndMut { ty, .. }) | Ref(_, ty, _) => matches!(ty.kind(), Slice(_) | Str),
         .                       _ => false,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_array(&self) -> bool {
       427 ( 0.00%)          matches!(self.kind(), Array(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_simd(&self) -> bool {
         .                   match self.kind() {
         .                       Adt(def, _) => def.repr.simd(),
         .                       _ => false,
         .                   }
         .               }
         .           
       866 ( 0.00%)      pub fn sequence_element_type(&self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
     1,732 ( 0.00%)          match self.kind() {
         .                       Array(ty, _) | Slice(ty) => ty,
         .                       Str => tcx.mk_mach_uint(ty::UintTy::U8),
         .                       _ => bug!("`sequence_element_type` called on non-sequence value: {}", self),
         .                   }
       866 ( 0.00%)      }
         .           
         .               pub fn simd_size_and_type(&self, tcx: TyCtxt<'tcx>) -> (u64, Ty<'tcx>) {
         .                   match self.kind() {
         .                       Adt(def, substs) => {
         .                           assert!(def.repr.simd(), "`simd_size_and_type` called on non-SIMD type");
         .                           let variant = def.non_enum_variant();
         .                           let f0_ty = variant.fields[0].ty(tcx, substs);
         .           
-- line 1824 ----------------------------------------
-- line 1838 ----------------------------------------
         .                           }
         .                       }
         .                       _ => bug!("`simd_size_and_type` called on invalid type"),
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_region_ptr(&self) -> bool {
       788 ( 0.00%)          matches!(self.kind(), Ref(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_mutable_ptr(&self) -> bool {
         .                   matches!(
         .                       self.kind(),
         .                       RawPtr(TypeAndMut { mutbl: hir::Mutability::Mut, .. })
         .                           | Ref(_, _, hir::Mutability::Mut)
-- line 1854 ----------------------------------------
-- line 1861 ----------------------------------------
         .                   match self.kind() {
         .                       Ref(_, _, mutability) => Some(*mutability),
         .                       _ => None,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_unsafe_ptr(&self) -> bool {
     6,684 ( 0.00%)          matches!(self.kind(), RawPtr(_))
         .               }
         .           
         .               /// Tests if this is any kind of primitive pointer type (reference, raw pointer, fn pointer).
         .               #[inline]
         .               pub fn is_any_ptr(&self) -> bool {
       648 ( 0.00%)          self.is_region_ptr() || self.is_unsafe_ptr() || self.is_fn_ptr()
         .               }
         .           
         .               #[inline]
         .               pub fn is_box(&self) -> bool {
   104,582 ( 0.00%)          match self.kind() {
    24,837 ( 0.00%)              Adt(def, _) => def.is_box(),
         .                       _ => false,
         .                   }
         .               }
         .           
         .               /// Panics if called on any type other than `Box<T>`.
     2,258 ( 0.00%)      pub fn boxed_ty(&self) -> Ty<'tcx> {
     2,258 ( 0.00%)          match self.kind() {
     5,645 ( 0.00%)              Adt(def, substs) if def.is_box() => substs.type_at(0),
         .                       _ => bug!("`boxed_ty` is called on non-box type {:?}", self),
         .                   }
     2,258 ( 0.00%)      }
         .           
         .               /// A scalar type is one that denotes an atomic datum, with no sub-components.
         .               /// (A RawPtr is scalar because it represents a non-managed pointer, so its
         .               /// contents are abstract to rustc.)
         .               #[inline]
         .               pub fn is_scalar(&self) -> bool {
     1,492 ( 0.00%)          matches!(
     3,358 ( 0.00%)              self.kind(),
         .                       Bool | Char
         .                           | Int(_)
         .                           | Float(_)
         .                           | Uint(_)
         .                           | FnDef(..)
         .                           | FnPtr(_)
         .                           | RawPtr(_)
         .                           | Infer(IntVar(_) | FloatVar(_))
         .                   )
         .               }
         .           
         .               /// Returns `true` if this type is a floating point type.
         .               #[inline]
         .               pub fn is_floating_point(&self) -> bool {
       128 ( 0.00%)          matches!(self.kind(), Float(_) | Infer(FloatVar(_)))
         .               }
         .           
         .               #[inline]
         .               pub fn is_trait(&self) -> bool {
         .                   matches!(self.kind(), Dynamic(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_enum(&self) -> bool {
       648 ( 0.00%)          matches!(self.kind(), Adt(adt_def, _) if adt_def.is_enum())
         .               }
         .           
         .               #[inline]
         .               pub fn is_union(&self) -> bool {
    12,284 ( 0.00%)          matches!(self.kind(), Adt(adt_def, _) if adt_def.is_union())
         .               }
         .           
         .               #[inline]
         .               pub fn is_closure(&self) -> bool {
     2,474 ( 0.00%)          matches!(self.kind(), Closure(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_generator(&self) -> bool {
     3,765 ( 0.00%)          matches!(self.kind(), Generator(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_integral(&self) -> bool {
    13,506 ( 0.00%)          matches!(self.kind(), Infer(IntVar(_)) | Int(_) | Uint(_))
         .               }
         .           
         .               #[inline]
         .               pub fn is_fresh_ty(&self) -> bool {
         .                   matches!(self.kind(), Infer(FreshTy(_)))
         .               }
         .           
         .               #[inline]
         .               pub fn is_fresh(&self) -> bool {
     4,091 ( 0.00%)          matches!(self.kind(), Infer(FreshTy(_) | FreshIntTy(_) | FreshFloatTy(_)))
         .               }
         .           
         .               #[inline]
         .               pub fn is_char(&self) -> bool {
         .                   matches!(self.kind(), Char)
         .               }
         .           
         .               #[inline]
-- line 1963 ----------------------------------------
-- line 1967 ----------------------------------------
         .           
         .               #[inline]
         .               pub fn is_signed(&self) -> bool {
         .                   matches!(self.kind(), Int(_))
         .               }
         .           
         .               #[inline]
         .               pub fn is_ptr_sized_integral(&self) -> bool {
     3,297 ( 0.00%)          matches!(self.kind(), Int(ty::IntTy::Isize) | Uint(ty::UintTy::Usize))
         .               }
         .           
         .               #[inline]
         .               pub fn has_concrete_skeleton(&self) -> bool {
         .                   !matches!(self.kind(), Param(_) | Infer(_) | Error(_))
         .               }
         .           
         .               /// Returns the type and mutability of `*ty`.
         .               ///
         .               /// The parameter `explicit` indicates if this is an *explicit* dereference.
         .               /// Some types -- notably unsafe ptrs -- can only be dereferenced explicitly.
    24,155 ( 0.00%)      pub fn builtin_deref(&self, explicit: bool) -> Option<TypeAndMut<'tcx>> {
   148,273 ( 0.00%)          match self.kind() {
     6,804 ( 0.00%)              Adt(def, _) if def.is_box() => {
     3,164 ( 0.00%)                  Some(TypeAndMut { ty: self.boxed_ty(), mutbl: hir::Mutability::Not })
         .                       }
    70,188 ( 0.00%)              Ref(_, ty, mutbl) => Some(TypeAndMut { ty, mutbl: *mutbl }),
     8,008 ( 0.00%)              RawPtr(mt) if explicit => Some(*mt),
         .                       _ => None,
         .                   }
    48,310 ( 0.00%)      }
         .           
         .               /// Returns the type of `ty[i]`.
         .               pub fn builtin_index(&self) -> Option<Ty<'tcx>> {
     4,332 ( 0.00%)          match self.kind() {
         .                       Array(ty, _) | Slice(ty) => Some(ty),
         .                       _ => None,
         .                   }
       273 ( 0.00%)      }
         .           
    72,552 ( 0.00%)      pub fn fn_sig(&self, tcx: TyCtxt<'tcx>) -> PolyFnSig<'tcx> {
    36,276 ( 0.00%)          match self.kind() {
    27,201 ( 0.00%)              FnDef(def_id, substs) => tcx.fn_sig(*def_id).subst(tcx, substs),
        10 ( 0.00%)              FnPtr(f) => *f,
         .                       Error(_) => {
         .                           // ignore errors (#54954)
         .                           ty::Binder::dummy(FnSig::fake())
         .                       }
         .                       Closure(..) => bug!(
         .                           "to get the signature of a closure, use `substs.as_closure().sig()` not `fn_sig()`",
         .                       ),
         .                       _ => bug!("Ty::fn_sig() called on non-fn type: {:?}", self),
         .                   }
    81,621 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn is_fn(&self) -> bool {
       528 ( 0.00%)          matches!(self.kind(), FnDef(..) | FnPtr(_))
         .               }
         .           
         .               #[inline]
         .               pub fn is_fn_ptr(&self) -> bool {
         .                   matches!(self.kind(), FnPtr(_))
         .               }
         .           
         .               #[inline]
         .               pub fn is_impl_trait(&self) -> bool {
         .                   matches!(self.kind(), Opaque(..))
         .               }
         .           
         .               #[inline]
         .               pub fn ty_adt_def(&self) -> Option<&'tcx AdtDef> {
    11,590 ( 0.00%)          match self.kind() {
         .                       Adt(adt, _) => Some(adt),
         .                       _ => None,
         .                   }
         .               }
         .           
         .               /// Iterates over tuple fields.
         .               /// Panics when called on anything but a tuple.
       178 ( 0.00%)      pub fn tuple_fields(&self) -> impl DoubleEndedIterator<Item = Ty<'tcx>> {
     1,494 ( 0.00%)          match self.kind() {
       790 ( 0.00%)              Tuple(substs) => substs.iter().map(|field| field.expect_ty()),
         .                       _ => bug!("tuple_fields called on non-tuple"),
         .                   }
       356 ( 0.00%)      }
         .           
         .               /// Get the `i`-th element of a tuple.
         .               /// Panics when called on anything but a tuple.
         9 ( 0.00%)      pub fn tuple_element_ty(&self, i: usize) -> Option<Ty<'tcx>> {
        18 ( 0.00%)          match self.kind() {
        18 ( 0.00%)              Tuple(substs) => substs.iter().nth(i).map(|field| field.expect_ty()),
         .                       _ => bug!("tuple_fields called on non-tuple"),
         .                   }
        18 ( 0.00%)      }
         .           
         .               /// If the type contains variants, returns the valid range of variant indices.
         .               //
         .               // FIXME: This requires the optimized MIR in the case of generators.
         .               #[inline]
         .               pub fn variant_range(&self, tcx: TyCtxt<'tcx>) -> Option<Range<VariantIdx>> {
         .                   match self.kind() {
         .                       TyKind::Adt(adt, _) => Some(adt.variant_range()),
-- line 2068 ----------------------------------------
-- line 2073 ----------------------------------------
         .                   }
         .               }
         .           
         .               /// If the type contains variants, returns the variant for `variant_index`.
         .               /// Panics if `variant_index` is out of range.
         .               //
         .               // FIXME: This requires the optimized MIR in the case of generators.
         .               #[inline]
     5,960 ( 0.00%)      pub fn discriminant_for_variant(
         .                   &self,
         .                   tcx: TyCtxt<'tcx>,
         .                   variant_index: VariantIdx,
         .               ) -> Option<Discr<'tcx>> {
     2,980 ( 0.00%)          match self.kind() {
       544 ( 0.00%)              TyKind::Adt(adt, _) if adt.variants.is_empty() => {
         .                           // This can actually happen during CTFE, see
         .                           // https://github.com/rust-lang/rust/issues/89765.
         .                           None
         .                       }
       272 ( 0.00%)              TyKind::Adt(adt, _) if adt.is_enum() => {
         .                           Some(adt.discriminant_for_variant(tcx, variant_index))
         .                       }
         .                       TyKind::Generator(def_id, substs, _) => {
         .                           Some(substs.as_generator().discriminant_for_variant(*def_id, tcx, variant_index))
         .                       }
         .                       _ => None,
         .                   }
     4,768 ( 0.00%)      }
         .           
         .               /// Returns the type of the discriminant of this type.
    19,540 ( 0.00%)      pub fn discriminant_ty(&'tcx self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
     9,770 ( 0.00%)          match self.kind() {
    15,632 ( 0.00%)              ty::Adt(adt, _) if adt.is_enum() => adt.repr.discr_type().to_ty(tcx),
         .                       ty::Generator(_, substs, _) => substs.as_generator().discr_ty(tcx),
         .           
         .                       ty::Param(_) | ty::Projection(_) | ty::Opaque(..) | ty::Infer(ty::TyVar(_)) => {
         .                           let assoc_items = tcx.associated_item_def_ids(
         .                               tcx.require_lang_item(hir::LangItem::DiscriminantKind, None),
         .                           );
         .                           tcx.mk_projection(assoc_items[0], tcx.intern_substs(&[self.into()]))
         .                       }
-- line 2113 ----------------------------------------
-- line 2135 ----------------------------------------
         .                       | ty::Infer(IntVar(_) | FloatVar(_)) => tcx.types.u8,
         .           
         .                       ty::Bound(..)
         .                       | ty::Placeholder(_)
         .                       | ty::Infer(FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
         .                           bug!("`discriminant_ty` applied to unexpected type: {:?}", self)
         .                       }
         .                   }
    15,632 ( 0.00%)      }
         .           
         .               /// Returns the type of metadata for (potentially fat) pointers to this type.
         .               pub fn ptr_metadata_ty(
         .                   &'tcx self,
         .                   tcx: TyCtxt<'tcx>,
         .                   normalize: impl FnMut(Ty<'tcx>) -> Ty<'tcx>,
         .               ) -> Ty<'tcx> {
         .                   let tail = tcx.struct_tail_with_normalize(self, normalize);
-- line 2151 ----------------------------------------
-- line 2200 ----------------------------------------
         .               /// function converts such a special type into the closure
         .               /// kind. To go the other way, use
         .               /// `tcx.closure_kind_ty(closure_kind)`.
         .               ///
         .               /// Note that during type checking, we use an inference variable
         .               /// to represent the closure kind, because it has not yet been
         .               /// inferred. Once upvar inference (in `rustc_typeck/src/check/upvar.rs`)
         .               /// is complete, that type variable will be unified.
     1,314 ( 0.00%)      pub fn to_opt_closure_kind(&self) -> Option<ty::ClosureKind> {
     2,628 ( 0.00%)          match self.kind() {
     2,516 ( 0.00%)              Int(int_ty) => match int_ty {
         .                           ty::IntTy::I8 => Some(ty::ClosureKind::Fn),
         .                           ty::IntTy::I16 => Some(ty::ClosureKind::FnMut),
         .                           ty::IntTy::I32 => Some(ty::ClosureKind::FnOnce),
         .                           _ => bug!("cannot convert type `{:?}` to a closure kind", self),
         .                       },
         .           
         .                       // "Bound" types appear in canonical queries when the
         .                       // closure type is not yet known
         .                       Bound(..) | Infer(_) => None,
         .           
         .                       Error(_) => Some(ty::ClosureKind::Fn),
         .           
         .                       _ => bug!("cannot convert type `{:?}` to a closure kind", self),
         .                   }
     1,314 ( 0.00%)      }
         .           
         .               /// Fast path helper for testing if a type is `Sized`.
         .               ///
         .               /// Returning true means the type is known to be sized. Returning
         .               /// `false` means nothing -- could be sized, might not be.
         .               ///
         .               /// Note that we could never rely on the fact that a type such as `[_]` is
         .               /// trivially `!Sized` because we could be in a type environment with a
         .               /// bound such as `[_]: Copy`. A function with such a bound obviously never
         .               /// can be called, but that doesn't mean it shouldn't typecheck. This is why
         .               /// this method doesn't return `Option<bool>`.
   360,702 ( 0.01%)      pub fn is_trivially_sized(&self, tcx: TyCtxt<'tcx>) -> bool {
   240,468 ( 0.01%)          match self.kind() {
         .                       ty::Infer(ty::IntVar(_) | ty::FloatVar(_))
         .                       | ty::Uint(_)
         .                       | ty::Int(_)
         .                       | ty::Bool
         .                       | ty::Float(_)
         .                       | ty::FnDef(..)
         .                       | ty::FnPtr(_)
         .                       | ty::RawPtr(..)
-- line 2246 ----------------------------------------
-- line 2250 ----------------------------------------
         .                       | ty::GeneratorWitness(..)
         .                       | ty::Array(..)
         .                       | ty::Closure(..)
         .                       | ty::Never
         .                       | ty::Error(_) => true,
         .           
         .                       ty::Str | ty::Slice(_) | ty::Dynamic(..) | ty::Foreign(..) => false,
         .           
     4,392 ( 0.00%)              ty::Tuple(tys) => tys.iter().all(|ty| ty.expect_ty().is_trivially_sized(tcx)),
         .           
    31,395 ( 0.00%)              ty::Adt(def, _substs) => def.sized_constraint(tcx).is_empty(),
         .           
         .                       ty::Projection(_) | ty::Param(_) | ty::Opaque(..) => false,
         .           
         .                       ty::Infer(ty::TyVar(_)) => false,
         .           
         .                       ty::Bound(..)
         .                       | ty::Placeholder(..)
         .                       | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
         .                           bug!("`is_trivially_sized` applied to unexpected type: {:?}", self)
         .                       }
         .                   }
   360,702 ( 0.01%)      }
         .           }
         .           
         .           /// Extra information about why we ended up with a particular variance.
         .           /// This is only used to add more information to error messages, and
         .           /// has no effect on soundness. While choosing the 'wrong' `VarianceDiagInfo`
         .           /// may lead to confusing notes in error messages, it will never cause
         .           /// a miscompilation or unsoundness.
         .           ///
         .           /// When in doubt, use `VarianceDiagInfo::default()`
     1,056 ( 0.00%)  #[derive(Copy, Clone, Debug, Default, PartialEq, Eq, PartialOrd, Ord)]
         .           pub enum VarianceDiagInfo<'tcx> {
         .               /// No additional information - this is the default.
         .               /// We will not add any additional information to error messages.
         .               #[default]
         .               None,
         .               /// We switched our variance because a generic argument occurs inside
         .               /// the invariant generic argument of another type.
         .               Invariant {
-- line 2290 ----------------------------------------
-- line 2295 ----------------------------------------
         .                   /// (e.g. `0` for `*mut T`, `1` for `MyStruct<'CovariantParam, 'InvariantParam>`)
         .                   param_index: u32,
         .               },
         .           }
         .           
         .           impl<'tcx> VarianceDiagInfo<'tcx> {
         .               /// Mirrors `Variance::xform` - used to 'combine' the existing
         .               /// and new `VarianceDiagInfo`s when our variance changes.
    86,236 ( 0.00%)      pub fn xform(self, other: VarianceDiagInfo<'tcx>) -> VarianceDiagInfo<'tcx> {
         .                   // For now, just use the first `VarianceDiagInfo::Invariant` that we see
   129,354 ( 0.00%)          match self {
         .                       VarianceDiagInfo::None => other,
         .                       VarianceDiagInfo::Invariant { .. } => self,
         .                   }
    43,118 ( 0.00%)      }
         .           }

21,270,583 ( 0.44%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_borrowck/src/lib.rs
--------------------------------------------------------------------------------
Ir                 

-- line 97 ----------------------------------------
        .           
        .               /// If true, the capture is behind a reference.
        .               by_ref: bool,
        .           }
        .           
        .           const DEREF_PROJECTION: &[PlaceElem<'_>; 1] = &[ProjectionElem::Deref];
        .           
        .           pub fn provide(providers: &mut Providers) {
        4 ( 0.00%)      *providers = Providers {
        .                   mir_borrowck: |tcx, did| {
    1,363 ( 0.00%)              if let Some(def) = ty::WithOptConstParam::try_lookup(did, tcx) {
        .                           tcx.mir_borrowck_const_arg(def)
        .                       } else {
    5,452 ( 0.00%)                  mir_borrowck(tcx, ty::WithOptConstParam::unknown(did))
        .                       }
        .                   },
        .                   mir_borrowck_const_arg: |tcx, (did, param_did)| {
        .                       mir_borrowck(tcx, ty::WithOptConstParam { did, const_param_did: Some(param_did) })
        .                   },
        .                   ..*providers
        .               };
        1 ( 0.00%)  }
        .           
   13,630 ( 0.00%)  fn mir_borrowck<'tcx>(
        .               tcx: TyCtxt<'tcx>,
        .               def: ty::WithOptConstParam<LocalDefId>,
        .           ) -> &'tcx BorrowCheckResult<'tcx> {
        .               let (input_body, promoted) = tcx.mir_promoted(def);
        .               debug!("run query mir_borrowck: {}", tcx.def_path_str(def.did.to_def_id()));
        .           
   17,719 ( 0.00%)      let opt_closure_req = tcx.infer_ctxt().with_opaque_type_inference(def.did).enter(|infcx| {
        .                   let input_body: &Body<'_> = &input_body.borrow();
        .                   let promoted: &IndexVec<_, _> = &promoted.borrow();
   19,082 ( 0.00%)          do_mir_borrowck(&infcx, input_body, promoted, false).0
    5,452 ( 0.00%)      });
        .               debug!("mir_borrowck done");
        .           
    1,363 ( 0.00%)      tcx.arena.alloc(opt_closure_req)
   10,904 ( 0.00%)  }
        .           
        .           /// Perform the actual borrow checking.
        .           ///
        .           /// If `return_body_with_facts` is true, then return the body with non-erased
        .           /// region ids on which the borrow checking was performed together with Polonius
        .           /// facts.
   29,986 ( 0.00%)  #[instrument(skip(infcx, input_body, input_promoted), level = "debug")]
        .           fn do_mir_borrowck<'a, 'tcx>(
        .               infcx: &InferCtxt<'a, 'tcx>,
        .               input_body: &Body<'tcx>,
        .               input_promoted: &IndexVec<Promoted, Body<'tcx>>,
        .               return_body_with_facts: bool,
        .           ) -> (BorrowCheckResult<'tcx>, Option<Box<BodyWithBorrowckFacts<'tcx>>>) {
   13,630 ( 0.00%)      let def = input_body.source.with_opt_param().as_local().unwrap();
        .           
        .               debug!(?def);
        .           
    2,726 ( 0.00%)      let tcx = infcx.tcx;
        .               let param_env = tcx.param_env(def.did);
    1,363 ( 0.00%)      let id = tcx.hir().local_def_id_to_hir_id(def.did);
        .           
    2,726 ( 0.00%)      let mut local_names = IndexVec::from_elem(None, &input_body.local_decls);
        .               for var_debug_info in &input_body.var_debug_info {
   10,581 ( 0.00%)          if let VarDebugInfoContents::Place(place) = var_debug_info.value {
    5,475 ( 0.00%)              if let Some(local) = place.as_local() {
    8,208 ( 0.00%)                  if let Some(prev_name) = local_names[local] {
        .                               if var_debug_info.name != prev_name {
        .                                   span_bug!(
        .                                       var_debug_info.source_info.span,
        .                                       "local {:?} has many names (`{}` vs `{}`)",
        .                                       local,
        .                                       prev_name,
        .                                       var_debug_info.name
        .                                   );
        .                               }
        .                           }
    8,208 ( 0.00%)                  local_names[local] = Some(var_debug_info.name);
        .                       }
        .                   }
        .               }
        .           
        .               // Gather the upvars of a closure, if any.
    5,452 ( 0.00%)      let tables = tcx.typeck_opt_const_arg(def);
    2,726 ( 0.00%)      if let Some(ErrorReported) = tables.tainted_by_errors {
        .                   infcx.set_tainted_by_errors();
        .               }
    5,452 ( 0.00%)      let upvars: Vec<_> = tables
        .                   .closure_min_captures_flattened(def.did.to_def_id())
        .                   .map(|captured_place| {
        .                       let capture = captured_place.info.capture_kind;
        3 ( 0.00%)              let by_ref = match capture {
        .                           ty::UpvarCapture::ByValue => false,
        .                           ty::UpvarCapture::ByRef(..) => true,
        .                       };
        .                       Upvar { place: captured_place.clone(), by_ref }
        .                   })
        .                   .collect();
        .           
        .               // Replace all regions with fresh inference variables. This
        .               // requires first making our own copy of the MIR. This copy will
        .               // be modified (in place) to contain non-lexical lifetimes. It
        .               // will have a lifetime tied to the inference context.
    2,726 ( 0.00%)      let mut body_owned = input_body.clone();
        .               let mut promoted = input_promoted.clone();
        .               let free_regions =
    4,089 ( 0.00%)          nll::replace_regions_in_mir(infcx, param_env, &mut body_owned, &mut promoted);
        .               let body = &body_owned; // no further changes
        .           
    1,363 ( 0.00%)      let location_table_owned = LocationTable::new(body);
        .               let location_table = &location_table_owned;
        .           
        .               let mut errors_buffer = Vec::new();
    4,089 ( 0.00%)      let (move_data, move_errors): (MoveData<'tcx>, Vec<(Place<'tcx>, MoveError<'tcx>)>) =
    9,541 ( 0.00%)          match MoveData::gather_moves(&body, tcx, param_env) {
    8,178 ( 0.00%)              Ok(move_data) => (move_data, Vec::new()),
        .                       Err((move_data, move_errors)) => (move_data, move_errors),
        .                   };
        .               let promoted_errors = promoted
        .                   .iter_enumerated()
      660 ( 0.00%)          .map(|(idx, body)| (idx, MoveData::gather_moves(&body, tcx, param_env)));
        .           
    8,178 ( 0.00%)      let mdpe = MoveDataParamEnv { move_data, param_env };
        .           
   10,904 ( 0.00%)      let mut flow_inits = MaybeInitializedPlaces::new(tcx, &body, &mdpe)
    1,363 ( 0.00%)          .into_engine(tcx, &body)
        .                   .pass_name("borrowck")
        .                   .iterate_to_fixpoint()
        .                   .into_results_cursor(&body);
        .           
   16,356 ( 0.00%)      let locals_are_invalidated_at_exit = tcx.hir().body_owner_kind(id).is_fn_or_closure();
        .               let borrow_set =
   13,630 ( 0.00%)          Rc::new(BorrowSet::build(tcx, body, locals_are_invalidated_at_exit, &mdpe.move_data));
        .           
    6,815 ( 0.00%)      let use_polonius = return_body_with_facts || infcx.tcx.sess.opts.debugging_opts.polonius;
        .           
        .               // Compute non-lexical lifetimes.
        .               let nll::NllOutput {
    4,089 ( 0.00%)          regioncx,
    5,452 ( 0.00%)          opaque_type_values,
    2,726 ( 0.00%)          polonius_input,
    4,089 ( 0.00%)          polonius_output,
    5,452 ( 0.00%)          opt_closure_req,
   13,630 ( 0.00%)          nll_errors,
   24,534 ( 0.00%)      } = nll::compute_regions(
        .                   infcx,
   21,808 ( 0.00%)          free_regions,
        .                   body,
        .                   &promoted,
        .                   location_table,
        .                   param_env,
        .                   &mut flow_inits,
        .                   &mdpe.move_data,
        .                   &borrow_set,
        .                   &upvars,
        .                   use_polonius,
        .               );
        .           
        .               // Dump MIR results into a file, if that is enabled. This let us
        .               // write unit-tests, as well as helping with debugging.
    4,089 ( 0.00%)      nll::dump_mir_results(infcx, &body, &regioncx, &opt_closure_req);
        .           
        .               // We also have a `#[rustc_regions]` annotation that causes us to dump
        .               // information.
    2,726 ( 0.00%)      nll::dump_annotation(
        .                   infcx,
        .                   &body,
        .                   &regioncx,
        .                   &opt_closure_req,
        .                   &opaque_type_values,
        .                   &mut errors_buffer,
        .               );
        .           
        .               // The various `flow_*` structures can be large. We drop `flow_inits` here
        .               // so it doesn't overlap with the others below. This reduces peak memory
        .               // usage significantly on some benchmarks.
   21,808 ( 0.00%)      drop(flow_inits);
        .           
    1,363 ( 0.00%)      let regioncx = Rc::new(regioncx);
        .           
    8,178 ( 0.00%)      let flow_borrows = Borrows::new(tcx, body, &regioncx, &borrow_set)
    1,363 ( 0.00%)          .into_engine(tcx, body)
        .                   .pass_name("borrowck")
        .                   .iterate_to_fixpoint();
    8,178 ( 0.00%)      let flow_uninits = MaybeUninitializedPlaces::new(tcx, body, &mdpe)
    1,363 ( 0.00%)          .into_engine(tcx, body)
        .                   .pass_name("borrowck")
        .                   .iterate_to_fixpoint();
    8,178 ( 0.00%)      let flow_ever_inits = EverInitializedPlaces::new(tcx, body, &mdpe)
    1,363 ( 0.00%)          .into_engine(tcx, body)
        .                   .pass_name("borrowck")
        .                   .iterate_to_fixpoint();
        .           
    3,034 ( 0.00%)      let movable_generator = !matches!(
    8,486 ( 0.00%)          tcx.hir().get(id),
        .                   Node::Expr(&hir::Expr {
        .                       kind: hir::ExprKind::Closure(.., Some(hir::Movability::Static)),
        .                       ..
        .                   })
        .               );
        .           
      462 ( 0.00%)      for (idx, move_data_results) in promoted_errors {
        .                   let promoted_body = &promoted[idx];
        .           
      132 ( 0.00%)          if let Err((move_data, move_errors)) = move_data_results {
        .                       let mut promoted_mbcx = MirBorrowckCtxt {
        .                           infcx,
        .                           param_env,
        .                           body: promoted_body,
        .                           move_data: &move_data,
        .                           location_table, // no need to create a real one for the promoted, it is not used
        .                           movable_generator,
        .                           fn_self_span_reported: Default::default(),
-- line 307 ----------------------------------------
-- line 325 ----------------------------------------
        .                       };
        .                       promoted_mbcx.report_move_errors(move_errors);
        .                       errors_buffer = promoted_mbcx.errors_buffer;
        .                   };
        .               }
        .           
        .               let dominators = body.dominators();
        .           
   61,335 ( 0.00%)      let mut mbcx = MirBorrowckCtxt {
        .                   infcx,
        .                   param_env,
        .                   body,
        .                   move_data: &mdpe.move_data,
        .                   location_table,
        .                   movable_generator,
        .                   locals_are_invalidated_at_exit,
        .                   fn_self_span_reported: Default::default(),
        .                   access_place_error_reported: Default::default(),
        .                   reservation_error_reported: Default::default(),
        .                   reservation_warnings: Default::default(),
        .                   move_error_reported: BTreeMap::new(),
        .                   uninitialized_error_reported: Default::default(),
    5,452 ( 0.00%)          errors_buffer,
    1,363 ( 0.00%)          regioncx: Rc::clone(&regioncx),
        .                   used_mut: Default::default(),
        .                   used_mut_upvars: SmallVec::new(),
    1,363 ( 0.00%)          borrow_set: Rc::clone(&borrow_set),
    8,178 ( 0.00%)          dominators,
    5,452 ( 0.00%)          upvars,
    5,452 ( 0.00%)          local_names,
        .                   region_names: RefCell::default(),
        .                   next_region_name: RefCell::new(1),
        .                   polonius_output,
        .               };
        .           
        .               // Compute and report region errors, if any.
    4,089 ( 0.00%)      mbcx.report_region_errors(nll_errors);
        .           
        .               let results = BorrowckResults {
    8,178 ( 0.00%)          ever_inits: flow_ever_inits,
   10,904 ( 0.00%)          uninits: flow_uninits,
   14,993 ( 0.00%)          borrows: flow_borrows,
        .               };
        .           
    8,178 ( 0.00%)      mbcx.report_move_errors(move_errors);
        .           
    1,363 ( 0.00%)      rustc_mir_dataflow::visit_results(
        .                   body,
    1,363 ( 0.00%)          traversal::reverse_postorder(body).map(|(bb, _)| bb),
        .                   &results,
        .                   &mut mbcx,
        .               );
        .           
        .               // Convert any reservation warnings into lints.
        .               let reservation_warnings = mem::take(&mut mbcx.reservation_warnings);
        .               for (_, (place, span, location, bk, borrow)) in reservation_warnings {
        .                   let mut initial_diag = mbcx.report_conflicting_borrow(location, (place, span), bk, &borrow);
-- line 381 ----------------------------------------
-- line 406 ----------------------------------------
        .               // For each non-user used mutable variable, check if it's been assigned from
        .               // a user-declared local. If so, then put that local into the used_mut set.
        .               // Note that this set is expected to be small - only upvars from closures
        .               // would have a chance of erroneously adding non-user-defined mutable vars
        .               // to the set.
        .               let temporary_used_locals: FxHashSet<Local> = mbcx
        .                   .used_mut
        .                   .iter()
    1,363 ( 0.00%)          .filter(|&local| !mbcx.body.local_decls[*local].is_user_variable())
        .                   .cloned()
        .                   .collect();
        .               // For the remaining unused locals that are marked as mutable, we avoid linting any that
        .               // were never initialized. These locals may have been removed as unreachable code; or will be
        .               // linted as unused variables.
        .               let unused_mut_locals =
    1,363 ( 0.00%)          mbcx.body.mut_vars_iter().filter(|local| !mbcx.used_mut.contains(local)).collect();
    5,452 ( 0.00%)      mbcx.gather_used_muts(temporary_used_locals, unused_mut_locals);
        .           
        .               debug!("mbcx.used_mut: {:?}", mbcx.used_mut);
    5,452 ( 0.00%)      let used_mut = mbcx.used_mut;
    1,363 ( 0.00%)      for local in mbcx.body.mut_vars_and_args_iter().filter(|local| !used_mut.contains(local)) {
      112 ( 0.00%)          let local_decl = &mbcx.body.local_decls[local];
      672 ( 0.00%)          let lint_root = match &mbcx.body.source_scopes[local_decl.source_info.scope].local_data {
        .                       ClearCrossCrate::Set(data) => data.lint_root,
        .                       _ => continue,
        .                   };
        .           
        .                   // Skip over locals that begin with an underscore or have no name
      336 ( 0.00%)          match mbcx.local_names[local] {
       19 ( 0.00%)              Some(name) => {
       57 ( 0.00%)                  if name.as_str().starts_with('_') {
        .                               continue;
        .                           }
        .                       }
        .                       None => continue,
        .                   }
        .           
       38 ( 0.00%)          let span = local_decl.source_info.span;
       38 ( 0.00%)          if span.desugaring_kind().is_some() {
        .                       // If the `mut` arises as part of a desugaring, we should ignore it.
        .                       continue;
        .                   }
        .           
       95 ( 0.00%)          tcx.struct_span_lint_hir(UNUSED_MUT, lint_root, span, |lint| {
        .                       let mut_span = tcx.sess.source_map().span_until_non_whitespace(span);
        .                       lint.build("variable does not need to be mutable")
        .                           .span_suggestion_short(
        .                               mut_span,
        .                               "remove this `mut`",
        .                               String::new(),
        .                               Applicability::MachineApplicable,
        .                           )
        .                           .emit();
        .                   })
        .               }
        .           
        .               // Buffer any move errors that we collected and de-duplicated.
   12,267 ( 0.00%)      for (_, (_, diag)) in mbcx.move_error_reported {
        .                   diag.buffer(&mut mbcx.errors_buffer);
        .               }
        .           
    1,363 ( 0.00%)      if !mbcx.errors_buffer.is_empty() {
        .                   mbcx.errors_buffer.sort_by_key(|diag| diag.sort_span);
        .           
        .                   for diag in mbcx.errors_buffer.drain(..) {
        .                       mbcx.infcx.tcx.sess.diagnostic().emit_diagnostic(&diag);
        .                   }
        .               }
        .           
        .               let result = BorrowCheckResult {
    5,452 ( 0.00%)          concrete_opaque_types: opaque_type_values,
    6,815 ( 0.00%)          closure_requirements: opt_closure_req,
    8,178 ( 0.00%)          used_mut_upvars: mbcx.used_mut_upvars,
        .               };
        .           
    2,726 ( 0.00%)      let body_with_facts = if return_body_with_facts {
        .                   let output_facts = mbcx.polonius_output.expect("Polonius output was not computed");
        .                   Some(Box::new(BodyWithBorrowckFacts {
        .                       body: body_owned,
        .                       input_facts: *polonius_input.expect("Polonius input facts were not generated"),
        .                       output_facts,
        .                       location_table: location_table_owned,
        .                   }))
        .               } else {
        .                   None
        .               };
        .           
        .               debug!("do_mir_borrowck: result = {:#?}", result);
        .           
   19,082 ( 0.00%)      (result, body_with_facts)
   16,356 ( 0.00%)  }
        .           
        .           /// A `Body` with information computed by the borrow checker. This struct is
        .           /// intended to be consumed by compiler consumers.
        .           ///
        .           /// We need to include the MIR body here because the region identifiers must
        .           /// match the ones in the Polonius facts.
        .           pub struct BodyWithBorrowckFacts<'tcx> {
        .               /// A mir body that contains region identifiers.
-- line 504 ----------------------------------------
-- line 608 ----------------------------------------
        .           // Check that:
        .           // 1. assignments are always made to mutable locations (FIXME: does that still really go here?)
        .           // 2. loans made in overlapping scopes do not conflict
        .           // 3. assignments do not affect things loaned out as immutable
        .           // 4. moves do not affect things loaned out in any way
        .           impl<'cx, 'tcx> rustc_mir_dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtxt<'cx, 'tcx> {
        .               type FlowState = Flows<'cx, 'tcx>;
        .           
  407,628 ( 0.01%)      fn visit_statement_before_primary_effect(
        .                   &mut self,
        .                   flow_state: &Flows<'cx, 'tcx>,
        .                   stmt: &'cx Statement<'tcx>,
        .                   location: Location,
        .               ) {
        .                   debug!("MirBorrowckCtxt::process_statement({:?}, {:?}): {:?}", location, stmt, flow_state);
        .                   let span = stmt.source_info.span;
        .           
        .                   self.check_activations(location, span, flow_state);
        .           
  226,460 ( 0.00%)          match &stmt.kind {
   29,354 ( 0.00%)              StatementKind::Assign(box (lhs, ref rhs)) => {
        .                           self.consume_rvalue(location, (rhs, span), flow_state);
        .           
   58,708 ( 0.00%)                  self.mutate_place(location, (*lhs, span), Shallow(None), flow_state);
        .                       }
      946 ( 0.00%)              StatementKind::FakeRead(box (_, ref place)) => {
        .                           // Read for match doesn't access any memory and is used to
        .                           // assert that a place is safe and live. So we don't have to
        .                           // do any checks here.
        .                           //
        .                           // FIXME: Remove check that the place is initialized. This is
        .                           // needed for now because matches don't have never patterns yet.
        .                           // So this is the only place we prevent
        .                           //      let x: !;
        .                           //      match x {};
        .                           // from compiling.
    3,784 ( 0.00%)                  self.check_if_path_or_subpath_is_moved(
        .                               location,
        .                               InitializationRequiringAction::Use,
    8,514 ( 0.00%)                      (place.as_ref(), span),
        .                               flow_state,
        .                           );
        .                       }
        .                       StatementKind::SetDiscriminant { place, variant_index: _ } => {
        .                           self.mutate_place(location, (**place, span), Shallow(None), flow_state);
        .                       }
        .                       StatementKind::CopyNonOverlapping(box rustc_middle::mir::CopyNonOverlapping {
        .                           ..
-- line 655 ----------------------------------------
-- line 663 ----------------------------------------
        .                       | StatementKind::Coverage(..)
        .                       | StatementKind::AscribeUserType(..)
        .                       | StatementKind::Retag { .. }
        .                       | StatementKind::StorageLive(..) => {
        .                           // `Nop`, `AscribeUserType`, `Retag`, and `StorageLive` are irrelevant
        .                           // to borrow check.
        .                       }
        .                       StatementKind::StorageDead(local) => {
   90,408 ( 0.00%)                  self.access_place(
        .                               location,
  165,748 ( 0.00%)                      (Place::from(*local), span),
        .                               (Shallow(None), Write(WriteKind::StorageDeadOrDrop)),
        .                               LocalMutationIsAllowed::Yes,
        .                               flow_state,
        .                           );
        .                       }
        .                   }
  362,336 ( 0.01%)      }
        .           
   87,280 ( 0.00%)      fn visit_terminator_before_primary_effect(
        .                   &mut self,
        .                   flow_state: &Flows<'cx, 'tcx>,
        .                   term: &'cx Terminator<'tcx>,
        .                   loc: Location,
        .               ) {
        .                   debug!("MirBorrowckCtxt::process_terminator({:?}, {:?}): {:?}", loc, term, flow_state);
        .                   let span = term.source_info.span;
        .           
        .                   self.check_activations(loc, span, flow_state);
        .           
   54,550 ( 0.00%)          match term.kind {
    2,768 ( 0.00%)              TerminatorKind::SwitchInt { ref discr, switch_ty: _, targets: _ } => {
    2,768 ( 0.00%)                  self.consume_operand(loc, (discr, span), flow_state);
        .                       }
    5,664 ( 0.00%)              TerminatorKind::Drop { place, target: _, unwind: _ } => {
        .                           debug!(
        .                               "visit_terminator_drop \
        .                                loc: {:?} term: {:?} place: {:?} span: {:?}",
        .                               loc, term, place, span
        .                           );
        .           
   16,992 ( 0.00%)                  self.access_place(
        .                               loc,
   25,488 ( 0.00%)                      (place, span),
        .                               (AccessDepth::Drop, Write(WriteKind::StorageDeadOrDrop)),
        .                               LocalMutationIsAllowed::Yes,
        .                               flow_state,
        .                           );
        .                       }
        .                       TerminatorKind::DropAndReplace {
        .                           place: drop_place,
        .                           value: ref new_value,
        .                           target: _,
        .                           unwind: _,
        .                       } => {
        .                           self.mutate_place(loc, (drop_place, span), Deep, flow_state);
        .                           self.consume_operand(loc, (new_value, span), flow_state);
        .                       }
        .                       TerminatorKind::Call {
    9,063 ( 0.00%)                  ref func,
        .                           ref args,
        .                           ref destination,
        .                           cleanup: _,
        .                           from_hir_call: _,
        .                           fn_span: _,
        .                       } => {
   24,168 ( 0.00%)                  self.consume_operand(loc, (func, span), flow_state);
        .                           for arg in args {
   27,252 ( 0.00%)                      self.consume_operand(loc, (arg, span), flow_state);
        .                           }
   12,073 ( 0.00%)                  if let Some((dest, _ /*bb*/)) = *destination {
   36,120 ( 0.00%)                      self.mutate_place(loc, (dest, span), Deep, flow_state);
        .                           }
        .                       }
      606 ( 0.00%)              TerminatorKind::Assert { ref cond, expected: _, ref msg, target: _, cleanup: _ } => {
      101 ( 0.00%)                  self.consume_operand(loc, (cond, span), flow_state);
        .                           use rustc_middle::mir::AssertKind;
      202 ( 0.00%)                  if let AssertKind::BoundsCheck { ref len, ref index } = *msg {
        .                               self.consume_operand(loc, (len, span), flow_state);
        .                               self.consume_operand(loc, (index, span), flow_state);
        .                           }
        .                       }
        .           
        .                       TerminatorKind::Yield { ref value, resume: _, resume_arg, drop: _ } => {
        .                           self.consume_operand(loc, (value, span), flow_state);
        .                           self.mutate_place(loc, (resume_arg, span), Deep, flow_state);
-- line 748 ----------------------------------------
-- line 790 ----------------------------------------
        .                       | TerminatorKind::Resume
        .                       | TerminatorKind::Return
        .                       | TerminatorKind::GeneratorDrop
        .                       | TerminatorKind::FalseEdge { real_target: _, imaginary_target: _ }
        .                       | TerminatorKind::FalseUnwind { real_target: _, unwind: _ } => {
        .                           // no data used, thus irrelevant to borrowck
        .                       }
        .                   }
   81,744 ( 0.00%)      }
        .           
   76,370 ( 0.00%)      fn visit_terminator_after_primary_effect(
        .                   &mut self,
        .                   flow_state: &Flows<'cx, 'tcx>,
        .                   term: &'cx Terminator<'tcx>,
        .                   loc: Location,
        .               ) {
   10,910 ( 0.00%)          let span = term.source_info.span;
        .           
   43,640 ( 0.00%)          match term.kind {
        .                       TerminatorKind::Yield { value: _, resume: _, resume_arg: _, drop: _ } => {
        .                           if self.movable_generator {
        .                               // Look for any active borrows to locals
        .                               let borrow_set = self.borrow_set.clone();
        .                               for i in flow_state.borrows.iter() {
        .                                   let borrow = &borrow_set[i];
        .                                   self.check_for_local_borrow(borrow, span);
        .                               }
-- line 816 ----------------------------------------
-- line 817 ----------------------------------------
        .                           }
        .                       }
        .           
        .                       TerminatorKind::Resume | TerminatorKind::Return | TerminatorKind::GeneratorDrop => {
        .                           // Returning from the function implicitly kills storage for all locals and statics.
        .                           // Often, the storage will already have been killed by an explicit
        .                           // StorageDead, but we don't always emit those (notably on unwind paths),
        .                           // so this "extra check" serves as a kind of backup.
    3,714 ( 0.00%)                  let borrow_set = self.borrow_set.clone();
        .                           for i in flow_state.borrows.iter() {
        .                               let borrow = &borrow_set[i];
        .                               self.check_for_invalidation_at_exit(loc, borrow, span);
        .                           }
        .                       }
        .           
        .                       TerminatorKind::Abort
        .                       | TerminatorKind::Assert { .. }
-- line 833 ----------------------------------------
-- line 836 ----------------------------------------
        .                       | TerminatorKind::DropAndReplace { .. }
        .                       | TerminatorKind::FalseEdge { real_target: _, imaginary_target: _ }
        .                       | TerminatorKind::FalseUnwind { real_target: _, unwind: _ }
        .                       | TerminatorKind::Goto { .. }
        .                       | TerminatorKind::SwitchInt { .. }
        .                       | TerminatorKind::Unreachable
        .                       | TerminatorKind::InlineAsm { .. } => {}
        .                   }
   87,280 ( 0.00%)      }
        .           }
        .           
        .           use self::AccessDepth::{Deep, Shallow};
        .           use self::ReadOrWrite::{Activation, Read, Reservation, Write};
        .           
        .           #[derive(Copy, Clone, PartialEq, Eq, Debug)]
        .           enum ArtificialField {
        .               ArrayLength,
-- line 852 ----------------------------------------
-- line 913 ----------------------------------------
        .           /// When checking permissions for a place access, this flag is used to indicate that an immutable
        .           /// local place can be mutated.
        .           //
        .           // FIXME: @nikomatsakis suggested that this flag could be removed with the following modifications:
        .           // - Merge `check_access_permissions()` and `check_if_reassignment_to_immutable_state()`.
        .           // - Split `is_mutable()` into `is_assignable()` (can be directly assigned) and
        .           //   `is_declared_mutable()`.
        .           // - Take flow state into consideration in `is_assignable()` for local variables.
   15,023 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Debug)]
        .           enum LocalMutationIsAllowed {
        .               Yes,
        .               /// We want use of immutable upvars to cause a "write to immutable upvar"
        .               /// error, not an "reassignment" error.
        .               ExceptUpvars,
        .               No,
        .           }
        .           
-- line 929 ----------------------------------------
-- line 970 ----------------------------------------
        .               }
        .           
        .               /// Checks an access to the given place to see if it is allowed. Examines the set of borrows
        .               /// that are in scope, as well as which paths have been initialized, to ensure that (a) the
        .               /// place is initialized and (b) it is not borrowed in some way that would prevent this
        .               /// access.
        .               ///
        .               /// Returns `true` if an error is reported.
  818,528 ( 0.02%)      fn access_place(
        .                   &mut self,
        .                   location: Location,
        .                   place_span: (Place<'tcx>, Span),
        .                   kind: (AccessDepth, ReadOrWrite),
        .                   is_local_mutation_allowed: LocalMutationIsAllowed,
        .                   flow_state: &Flows<'cx, 'tcx>,
        .               ) {
        .                   let (sd, rw) = kind;
        .           
  204,632 ( 0.00%)          if let Activation(_, borrow_index) = rw {
    2,444 ( 0.00%)              if self.reservation_error_reported.contains(&place_span.0) {
        .                           debug!(
        .                               "skipping access_place for activation of invalid reservation \
        .                                place: {:?} borrow_index: {:?}",
        .                               place_span.0, borrow_index
        .                           );
        .                           return;
        .                       }
        .                   }
        .           
        .                   // Check is_empty() first because it's the common case, and doing that
        .                   // way we avoid the clone() call.
   51,158 ( 0.00%)          if !self.access_place_error_reported.is_empty()
        .                       && self.access_place_error_reported.contains(&(place_span.0, place_span.1))
        .                   {
        .                       debug!(
        .                           "access_place: suppressing error place_span=`{:?}` kind=`{:?}`",
        .                           place_span, kind
        .                       );
        .                       return;
        .                   }
        .           
  306,948 ( 0.01%)          let mutability_error = self.check_access_permissions(
  204,632 ( 0.00%)              place_span,
        .                       rw,
        .                       is_local_mutation_allowed,
        .                       flow_state,
        .                       location,
        .                   );
        .                   let conflict_error =
  562,738 ( 0.01%)              self.check_access_for_conflict(location, place_span, sd, rw, flow_state);
        .           
  153,474 ( 0.00%)          if let (Activation(_, borrow_idx), true) = (kind.1, conflict_error) {
        .                       // Suppress this warning when there's an error being emitted for the
        .                       // same borrow: fixing the error is likely to fix the warning.
        .                       self.reservation_warnings.remove(&borrow_idx);
        .                   }
        .           
  153,474 ( 0.00%)          if conflict_error || mutability_error {
        .                       debug!("access_place: logging error place_span=`{:?}` kind=`{:?}`", place_span, kind);
        .           
        .                       self.access_place_error_reported.insert((place_span.0, place_span.1));
        .                   }
  409,264 ( 0.01%)      }
        .           
        .               fn check_access_for_conflict(
        .                   &mut self,
        .                   location: Location,
        .                   place_span: (Place<'tcx>, Span),
        .                   sd: AccessDepth,
        .                   rw: ReadOrWrite,
        .                   flow_state: &Flows<'cx, 'tcx>,
        .               ) -> bool {
        .                   debug!(
        .                       "check_access_for_conflict(location={:?}, place_span={:?}, sd={:?}, rw={:?})",
        .                       location, place_span, sd, rw,
        .                   );
        .           
   51,158 ( 0.00%)          let mut error_reported = false;
  153,474 ( 0.00%)          let tcx = self.infcx.tcx;
        .                   let body = self.body;
  102,316 ( 0.00%)          let borrow_set = self.borrow_set.clone();
        .           
        .                   // Use polonius output if it has been enabled.
  102,316 ( 0.00%)          let polonius_output = self.polonius_output.clone();
        .                   let borrows_in_scope = if let Some(polonius) = &polonius_output {
        .                       let location = self.location_table.start_index(location);
        .                       Either::Left(polonius.errors_at(location).iter().copied())
        .                   } else {
        .                       Either::Right(flow_state.borrows.iter())
        .                   };
        .           
  665,054 ( 0.01%)          each_borrow_involving_path(
        .                       self,
        .                       tcx,
        .                       body,
        .                       location,
  306,948 ( 0.01%)              (sd, place_span.0),
        .                       &borrow_set,
  306,948 ( 0.01%)              borrows_in_scope,
  578,643 ( 0.01%)              |this, borrow_index, borrow| match (rw, borrow.kind) {
        .                           // Obviously an activation is compatible with its own
        .                           // reservation (or even prior activating uses of same
        .                           // borrow); so don't check if they interfere.
        .                           //
        .                           // NOTE: *reservations* do conflict with themselves;
        .                           // thus aren't injecting unsoundenss w/ this check.)
    1,222 ( 0.00%)                  (Activation(_, activating), _) if activating == borrow_index => {
        .                               debug!(
        .                                   "check_access_for_conflict place_span: {:?} sd: {:?} rw: {:?} \
        .                                    skipping {:?} b/c activation of same borrow_index",
        .                                   place_span,
        .                                   sd,
        .                                   rw,
        .                                   (borrow_index, borrow),
        .                               );
-- line 1084 ----------------------------------------
-- line 1179 ----------------------------------------
        .                                   }
        .                               }
        .                               Control::Break
        .                           }
        .                       },
        .                   );
        .           
        .                   error_reported
  153,474 ( 0.00%)      }
        .           
  176,870 ( 0.00%)      fn mutate_place(
        .                   &mut self,
        .                   location: Location,
        .                   place_span: (Place<'tcx>, Span),
        .                   kind: AccessDepth,
        .                   flow_state: &Flows<'cx, 'tcx>,
        .               ) {
        .                   // Write of P[i] or *P requires P init'd.
  159,183 ( 0.00%)          self.check_if_assigned_path_is_moved(location, place_span, flow_state);
        .           
        .                   // Special case: you can assign an immutable local variable
        .                   // (e.g., `x = ...`) so long as it has never been initialized
        .                   // before (at this point in the flow).
   17,687 ( 0.00%)          if let Some(local) = place_span.0.as_local() {
   70,424 ( 0.00%)              if let Mutability::Not = self.body.local_decls[local].mutability {
        .                           // check for reassignments to immutable local variables
        .                           self.check_if_reassignment_to_immutable_state(
        .                               location, local, place_span, flow_state,
        .                           );
        .                           return;
        .                       }
        .                   }
        .           
        .                   // Otherwise, use the normal access permission rules.
  163,740 ( 0.00%)          self.access_place(
        .                       location,
   54,580 ( 0.00%)              place_span,
        .                       (kind, Write(WriteKind::Mutate)),
        .                       LocalMutationIsAllowed::No,
        .                       flow_state,
        .                   );
  141,496 ( 0.00%)      }
        .           
        .               fn consume_rvalue(
        .                   &mut self,
        .                   location: Location,
        .                   (rvalue, span): (&'cx Rvalue<'tcx>, Span),
        .                   flow_state: &Flows<'cx, 'tcx>,
        .               ) {
   88,062 ( 0.00%)          match *rvalue {
   15,480 ( 0.00%)              Rvalue::Ref(_ /*rgn*/, bk, place) => {
   59,164 ( 0.00%)                  let access_kind = match bk {
        .                               BorrowKind::Shallow => {
        .                                   (Shallow(Some(ArtificialField::ShallowBorrow)), Read(ReadKind::Borrow(bk)))
        .                               }
        .                               BorrowKind::Shared => (Deep, Read(ReadKind::Borrow(bk))),
        .                               BorrowKind::Unique | BorrowKind::Mut { .. } => {
        .                                   let wk = WriteKind::MutableBorrow(bk);
    2,756 ( 0.00%)                          if allow_two_phase_borrow(bk) {
        .                                       (Deep, Reservation(wk))
        .                                   } else {
        .                                       (Deep, Write(wk))
        .                                   }
        .                               }
        .                           };
        .           
  108,360 ( 0.00%)                  self.access_place(
        .                               location,
   20,640 ( 0.00%)                      (place, span),
        .                               access_kind,
        .                               LocalMutationIsAllowed::No,
        .                               flow_state,
        .                           );
        .           
        .                           let action = if bk == BorrowKind::Shallow {
        .                               InitializationRequiringAction::MatchOn
        .                           } else {
        .                               InitializationRequiringAction::Borrow
        .                           };
        .           
   36,120 ( 0.00%)                  self.check_if_path_or_subpath_is_moved(
        .                               location,
        .                               action,
   36,120 ( 0.00%)                      (place.as_ref(), span),
        .                               flow_state,
        .                           );
        .                       }
        .           
    2,820 ( 0.00%)              Rvalue::AddressOf(mutability, place) => {
      940 ( 0.00%)                  let access_kind = match mutability {
        .                               Mutability::Mut => (
        .                                   Deep,
        .                                   Write(WriteKind::MutableBorrow(BorrowKind::Mut {
        .                                       allow_two_phase_borrow: false,
        .                                   })),
        .                               ),
        .                               Mutability::Not => (Deep, Read(ReadKind::Borrow(BorrowKind::Shared))),
        .                           };
        .           
    7,990 ( 0.00%)                  self.access_place(
        .                               location,
    1,880 ( 0.00%)                      (place, span),
        .                               access_kind,
        .                               LocalMutationIsAllowed::No,
        .                               flow_state,
        .                           );
        .           
    3,290 ( 0.00%)                  self.check_if_path_or_subpath_is_moved(
        .                               location,
        .                               InitializationRequiringAction::Borrow,
    3,290 ( 0.00%)                      (place.as_ref(), span),
        .                               flow_state,
        .                           );
        .                       }
        .           
        .                       Rvalue::ThreadLocalRef(_) => {}
        .           
        .                       Rvalue::Use(ref operand)
        .                       | Rvalue::Repeat(ref operand, _)
-- line 1297 ----------------------------------------
-- line 1302 ----------------------------------------
        .                       }
        .           
        .                       Rvalue::Len(place) | Rvalue::Discriminant(place) => {
        .                           let af = match *rvalue {
        .                               Rvalue::Len(..) => Some(ArtificialField::ArrayLength),
        .                               Rvalue::Discriminant(..) => None,
        .                               _ => unreachable!(),
        .                           };
    6,512 ( 0.00%)                  self.access_place(
        .                               location,
    1,628 ( 0.00%)                      (place, span),
        .                               (Shallow(af), Read(ReadKind::Copy)),
        .                               LocalMutationIsAllowed::No,
        .                               flow_state,
        .                           );
    2,849 ( 0.00%)                  self.check_if_path_or_subpath_is_moved(
        .                               location,
        .                               InitializationRequiringAction::Use,
    2,849 ( 0.00%)                      (place.as_ref(), span),
        .                               flow_state,
        .                           );
        .                       }
        .           
        .                       Rvalue::BinaryOp(_bin_op, box (ref operand1, ref operand2))
        .                       | Rvalue::CheckedBinaryOp(_bin_op, box (ref operand1, ref operand2)) => {
    4,860 ( 0.00%)                  self.consume_operand(location, (operand1, span), flow_state);
    3,402 ( 0.00%)                  self.consume_operand(location, (operand2, span), flow_state);
        .                       }
        .           
        .                       Rvalue::NullaryOp(_op, _ty) => {
        .                           // nullary ops take no dynamic input; no borrowck effect.
        .                       }
        .           
        .                       Rvalue::Aggregate(ref aggregate_kind, ref operands) => {
        .                           // We need to report back the list of mutable upvars that were
        .                           // moved into the closure and subsequently used by the closure,
        .                           // in order to populate our used_mut set.
    6,312 ( 0.00%)                  match **aggregate_kind {
        .                               AggregateKind::Closure(def_id, _) | AggregateKind::Generator(def_id, _, _) => {
        .                                   let BorrowCheckResult { used_mut_upvars, .. } =
      308 ( 0.00%)                              self.infcx.tcx.mir_borrowck(def_id.expect_local());
        .                                   debug!("{:?} used_mut_upvars={:?}", def_id, used_mut_upvars);
        .                                   for field in used_mut_upvars {
        .                                       self.propagate_closure_used_mut_upvar(&operands[field.index()]);
        .                                   }
        .                               }
        .                               AggregateKind::Adt(..)
        .                               | AggregateKind::Array(..)
        .                               | AggregateKind::Tuple { .. } => (),
-- line 1350 ----------------------------------------
-- line 1448 ----------------------------------------
        .                               }
        .                               _ => propagate_closure_used_mut_place(self, place),
        .                           }
        .                       }
        .                       Operand::Constant(..) => {}
        .                   }
        .               }
        .           
  183,432 ( 0.00%)      fn consume_operand(
        .                   &mut self,
        .                   location: Location,
        .                   (operand, span): (&'cx Operand<'tcx>, Span),
        .                   flow_state: &Flows<'cx, 'tcx>,
        .               ) {
   96,934 ( 0.00%)          match *operand {
    5,079 ( 0.00%)              Operand::Copy(place) => {
        .                           // copy of place: check if this is "copy of frozen path"
        .                           // (FIXME: see check_loans.rs)
   10,158 ( 0.00%)                  self.access_place(
        .                               location,
    8,465 ( 0.00%)                      (place, span),
        .                               (Deep, Read(ReadKind::Copy)),
        .                               LocalMutationIsAllowed::No,
        .                               flow_state,
        .                           );
        .           
        .                           // Finally, check if path was already moved.
        .                           self.check_if_path_or_subpath_is_moved(
        .                               location,
        .                               InitializationRequiringAction::Use,
        .                               (place.as_ref(), span),
        .                               flow_state,
        .                           );
        .                       }
   31,983 ( 0.00%)              Operand::Move(place) => {
        .                           // move of place: check if this is move of already borrowed path
   90,317 ( 0.00%)                  self.access_place(
        .                               location,
   53,305 ( 0.00%)                      (place, span),
        .                               (Deep, Write(WriteKind::Move)),
        .                               LocalMutationIsAllowed::Yes,
        .                               flow_state,
        .                           );
        .           
        .                           // Finally, check if path was already moved.
   20,920 ( 0.00%)                  self.check_if_path_or_subpath_is_moved(
        .                               location,
        .                               InitializationRequiringAction::Use,
   15,690 ( 0.00%)                      (place.as_ref(), span),
        .                               flow_state,
        .                           );
        .                       }
        .                       Operand::Constant(_) => {}
        .                   }
  122,288 ( 0.00%)      }
        .           
        .               /// Checks whether a borrow of this place is invalidated when the function
        .               /// exits
        .               fn check_for_invalidation_at_exit(
        .                   &mut self,
        .                   location: Location,
        .                   borrow: &BorrowData<'tcx>,
        .                   span: Span,
        .               ) {
        .                   debug!("check_for_invalidation_at_exit({:?})", borrow);
        8 ( 0.00%)          let place = borrow.borrowed_place;
        .                   let mut root_place = PlaceRef { local: place.local, projection: &[] };
        .           
        .                   // FIXME(nll-rfc#40): do more precise destructor tracking here. For now
        .                   // we just know that all locals are dropped at function exit (otherwise
        .                   // we'll have a memory leak) and assume that all statics have a destructor.
        .                   //
        .                   // FIXME: allow thread-locals to borrow other thread locals?
        .           
        .                   let (might_be_alive, will_be_dropped) =
       56 ( 0.00%)              if self.body.local_decls[root_place.local].is_ref_to_thread_local() {
        .                           // Thread-locals might be dropped after the function exits
        .                           // We have to dereference the outer reference because
        .                           // borrows don't conflict behind shared references.
        .                           root_place.projection = DEREF_PROJECTION;
        .                           (true, true)
        .                       } else {
        .                           (false, self.locals_are_invalidated_at_exit)
        .                       };
        .           
       40 ( 0.00%)          if !will_be_dropped {
        .                       debug!("place_is_invalidated_at_exit({:?}) - won't be dropped", place);
        .                       return;
        .                   }
        .           
        .                   let sd = if might_be_alive { Deep } else { Shallow(None) };
        .           
       96 ( 0.00%)          if places_conflict::borrow_conflicts_with_place(
       16 ( 0.00%)              self.infcx.tcx,
        .                       &self.body,
        .                       place,
        .                       borrow.kind,
       32 ( 0.00%)              root_place,
        .                       sd,
        .                       places_conflict::PlaceConflictBias::Overlap,
        .                   ) {
        .                       debug!("check_for_invalidation_at_exit({:?}): INVALID", place);
        .                       // FIXME: should be talking about the region lifetime instead
        .                       // of just a span here.
        .                       let span = self.infcx.tcx.sess.source_map().end_point(span);
        .                       self.report_borrowed_value_does_not_live_long_enough(
-- line 1553 ----------------------------------------
-- line 1573 ----------------------------------------
        .                       err.buffer(&mut self.errors_buffer);
        .                   }
        .               }
        .           
        .               fn check_activations(&mut self, location: Location, span: Span, flow_state: &Flows<'cx, 'tcx>) {
        .                   // Two-phase borrow support: For each activation that is newly
        .                   // generated at this statement, check if it interferes with
        .                   // another borrow.
  112,404 ( 0.00%)          let borrow_set = self.borrow_set.clone();
  215,120 ( 0.00%)          for &borrow_index in borrow_set.activations_at_location(location) {
        .                       let borrow = &borrow_set[borrow_index];
        .           
        .                       // only mutable borrows should be 2-phase
    6,110 ( 0.00%)              assert!(match borrow.kind {
        .                           BorrowKind::Shared | BorrowKind::Shallow => false,
        .                           BorrowKind::Unique | BorrowKind::Mut { .. } => true,
        .                       });
        .           
   14,664 ( 0.00%)              self.access_place(
        .                           location,
    7,332 ( 0.00%)                  (borrow.borrowed_place, span),
   10,998 ( 0.00%)                  (Deep, Activation(WriteKind::MutableBorrow(borrow.kind), borrow_index)),
        .                           LocalMutationIsAllowed::No,
        .                           flow_state,
        .                       );
        .                       // We do not need to call `check_if_path_or_subpath_is_moved`
        .                       // again, as we already called it when we made the
        .                       // initial reservation.
        .                   }
        .               }
-- line 1602 ----------------------------------------
-- line 1606 ----------------------------------------
        .                   location: Location,
        .                   local: Local,
        .                   place_span: (Place<'tcx>, Span),
        .                   flow_state: &Flows<'cx, 'tcx>,
        .               ) {
        .                   debug!("check_if_reassignment_to_immutable_state({:?})", local);
        .           
        .                   // Check if any of the initializiations of `local` have happened yet:
   24,252 ( 0.00%)          if let Some(init_index) = self.is_local_ever_initialized(local, flow_state) {
        .                       // And, if so, report an error.
        .                       let init = &self.move_data.inits[init_index];
        .                       let span = init.span(&self.body);
        .                       self.report_illegal_reassignment(location, place_span, span, place_span.0);
        .                   }
        .               }
        .           
  252,434 ( 0.01%)      fn check_if_full_path_is_moved(
        .                   &mut self,
        .                   location: Location,
        .                   desired_action: InitializationRequiringAction,
        .                   place_span: (PlaceRef<'tcx>, Span),
        .                   flow_state: &Flows<'cx, 'tcx>,
        .               ) {
        .                   let maybe_uninits = &flow_state.uninits;
        .           
-- line 1630 ----------------------------------------
-- line 1660 ----------------------------------------
        .                   // Therefore, if we seek out the *closest* prefix for which we
        .                   // have a MovePath, that should capture the initialization
        .                   // state for the place scenario.
        .                   //
        .                   // This code covers scenarios 1, 2, and 3.
        .           
        .                   debug!("check_if_full_path_is_moved place: {:?}", place_span.0);
        .                   let (prefix, mpi) = self.move_path_closest_to(place_span.0);
   19,418 ( 0.00%)          if maybe_uninits.contains(mpi) {
        .                       self.report_use_of_moved_or_uninitialized(
        .                           location,
        .                           desired_action,
        .                           (prefix, place_span.0, place_span.1),
        .                           mpi,
        .                       );
        .                   } // Only query longest prefix with a MovePath, not further
        .                   // ancestors; dataflow recurs on children when parents
        .                   // move (to support partial (re)inits).
        .                   //
        .                   // (I.e., querying parents breaks scenario 7; but may want
        .                   // to do such a query based on partial-init feature-gate.)
  155,344 ( 0.00%)      }
        .           
        .               /// Subslices correspond to multiple move paths, so we iterate through the
        .               /// elements of the base array. For each element we check
        .               ///
        .               /// * Does this element overlap with our slice.
        .               /// * Is any part of it uninitialized.
        .               fn check_if_subslice_element_is_moved(
        .                   &mut self,
-- line 1689 ----------------------------------------
-- line 1719 ----------------------------------------
        .                                       return; // don't bother finding other problems.
        .                                   }
        .                               }
        .                           }
        .                       }
        .                   }
        .               }
        .           
  212,707 ( 0.00%)      fn check_if_path_or_subpath_is_moved(
        .                   &mut self,
        .                   location: Location,
        .                   desired_action: InitializationRequiringAction,
        .                   place_span: (PlaceRef<'tcx>, Span),
        .                   flow_state: &Flows<'cx, 'tcx>,
        .               ) {
   38,674 ( 0.00%)          let maybe_uninits = &flow_state.uninits;
        .           
        .                   // Bad scenarios:
        .                   //
        .                   // 1. Move of `a.b.c`, use of `a` or `a.b`
        .                   //    partial initialization support, one might have `a.x`
        .                   //    initialized but not `a.b`.
        .                   // 2. All bad scenarios from `check_if_full_path_is_moved`
        .                   //
-- line 1742 ----------------------------------------
-- line 1743 ----------------------------------------
        .                   // OK scenarios:
        .                   //
        .                   // 3. Move of `a.b.c`, use of `a.b.d`
        .                   // 4. Uninitialized `a.x`, initialized `a.b`, use of `a.b`
        .                   // 5. Copied `(a.b: &_)`, use of `*(a.b).c`; note that `a.b`
        .                   //    must have been initialized for the use to be sound.
        .                   // 6. Move of `a.b.c` then reinit of `a.b.c.d`, use of `a.b.c.d`
        .           
  135,359 ( 0.00%)          self.check_if_full_path_is_moved(location, desired_action, place_span, flow_state);
        .           
   25,596 ( 0.00%)          if let Some((place_base, ProjectionElem::Subslice { from, to, from_end: false })) =
   19,337 ( 0.00%)              place_span.0.last_projection()
        .                   {
        .                       let place_ty = place_base.ty(self.body(), self.infcx.tcx);
        .                       if let ty::Array(..) = place_ty.ty.kind() {
        .                           self.check_if_subslice_element_is_moved(
        .                               location,
        .                               desired_action,
        .                               (place_base, place_span.1),
        .                               maybe_uninits,
-- line 1762 ----------------------------------------
-- line 1772 ----------------------------------------
        .                   //
        .                   // (Distinct from handling of scenarios 1+2+4 above because
        .                   // `place` does not interfere with suffixes of its prefixes,
        .                   // e.g., `a.b.c` does not interfere with `a.b.d`)
        .                   //
        .                   // This code covers scenario 1.
        .           
        .                   debug!("check_if_path_or_subpath_is_moved place: {:?}", place_span.0);
   77,348 ( 0.00%)          if let Some(mpi) = self.move_path_for_place(place_span.0) {
   53,332 ( 0.00%)              let uninit_mpi = self
        .                           .move_data
        .                           .find_in_move_path_or_its_descendants(mpi, |mpi| maybe_uninits.contains(mpi));
        .           
   26,666 ( 0.00%)              if let Some(uninit_mpi) = uninit_mpi {
        .                           self.report_use_of_moved_or_uninitialized(
        .                               location,
        .                               desired_action,
        .                               (place_span.0, place_span.0, place_span.1),
        .                               uninit_mpi,
        .                           );
        .                           return; // don't bother finding other problems.
        .                       }
        .                   }
  154,696 ( 0.00%)      }
        .           
        .               /// Currently MoveData does not store entries for all places in
        .               /// the input MIR. For example it will currently filter out
        .               /// places that are Copy; thus we do not track places of shared
        .               /// reference type. This routine will walk up a place along its
        .               /// prefixes, searching for a foundational place that *is*
        .               /// tracked in the MoveData.
        .               ///
        .               /// An Err result includes a tag indicated why the search failed.
        .               /// Currently this can only occur if the place is built off of a
        .               /// static variable, as we do not track those in the MoveData.
        .               fn move_path_closest_to(&mut self, place: PlaceRef<'tcx>) -> (PlaceRef<'tcx>, MovePathIndex) {
  252,434 ( 0.01%)          match self.move_data.rev_lookup.find(place) {
        .                       LookupResult::Parent(Some(mpi)) | LookupResult::Exact(mpi) => {
        .                           (self.move_data.move_paths[mpi].place.as_ref(), mpi)
        .                       }
        .                       LookupResult::Parent(None) => panic!("should have move path for every Local"),
        .                   }
        .               }
        .           
        .               fn move_path_for_place(&mut self, place: PlaceRef<'tcx>) -> Option<MovePathIndex> {
        .                   // If returns None, then there is no move path corresponding
        .                   // to a direct owner of `place` (which means there is nothing
        .                   // that borrowck tracks for its analysis).
        .           
  174,313 ( 0.00%)          match self.move_data.rev_lookup.find(place) {
        .                       LookupResult::Parent(_) => None,
        .                       LookupResult::Exact(mpi) => Some(mpi),
        .                   }
        .               }
        .           
        .               fn check_if_assigned_path_is_moved(
        .                   &mut self,
        .                   location: Location,
        .                   (place, span): (Place<'tcx>, Span),
        .                   flow_state: &Flows<'cx, 'tcx>,
        .               ) {
        .                   debug!("check_if_assigned_path_is_moved place: {:?}", place);
        .           
        .                   // None case => assigning to `x` does not require `x` be initialized.
       81 ( 0.00%)          for (place_base, elem) in place.iter_projections().rev() {
      464 ( 0.00%)              match elem {
        .                           ProjectionElem::Index(_/*operand*/) |
        .                           ProjectionElem::ConstantIndex { .. } |
        .                           // assigning to P[i] requires P to be valid.
        .                           ProjectionElem::Downcast(_/*adt_def*/, _/*variant_idx*/) =>
        .                           // assigning to (P->variant) is okay if assigning to `P` is okay
        .                           //
        .                           // FIXME: is this true even if P is an adt with a dtor?
        .                           { }
        .           
        .                           // assigning to (*P) requires P to be initialized
        .                           ProjectionElem::Deref => {
      567 ( 0.00%)                      self.check_if_full_path_is_moved(
        .                                   location, InitializationRequiringAction::Use,
      486 ( 0.00%)                          (place_base, span), flow_state);
        .                               // (base initialized; no need to
        .                               // recur further)
        .                               break;
        .                           }
        .           
        .                           ProjectionElem::Subslice { .. } => {
        .                               panic!("we don't allow assignments to subslices, location: {:?}",
        .                                      location);
        .                           }
        .           
        .                           ProjectionElem::Field(..) => {
        .                               // if type of `P` has a dtor, then
        .                               // assigning to `P.f` requires `P` itself
        .                               // be already initialized
        .                               let tcx = self.infcx.tcx;
       35 ( 0.00%)                      let base_ty = place_base.ty(self.body(), tcx).ty;
      105 ( 0.00%)                      match base_ty.kind() {
      210 ( 0.00%)                          ty::Adt(def, _) if def.has_dtor(tcx) => {
        .                                       self.check_if_path_or_subpath_is_moved(
        .                                           location, InitializationRequiringAction::Assignment,
        .                                           (place_base, span), flow_state);
        .           
        .                                       // (base initialized; no need to
        .                                       // recur further)
        .                                       break;
        .                                   }
-- line 1877 ----------------------------------------
-- line 1931 ----------------------------------------
        .           
        .                       // Shallow so that we'll stop at any dereference; we'll
        .                       // report errors about issues with such bases elsewhere.
        .                       let maybe_uninits = &flow_state.uninits;
        .           
        .                       // Find the shortest uninitialized prefix you can reach
        .                       // without going over a Deref.
        .                       let mut shortest_uninit_seen = None;
      770 ( 0.00%)              for prefix in this.prefixes(base, PrefixSet::Shallow) {
       35 ( 0.00%)                  let mpi = match this.move_path_for_place(prefix) {
        .                               Some(mpi) => mpi,
        .                               None => continue,
        .                           };
        .           
        .                           if maybe_uninits.contains(mpi) {
        .                               debug!(
        .                                   "check_parent_of_field updating shortest_uninit_seen from {:?} to {:?}",
        .                                   shortest_uninit_seen,
-- line 1948 ----------------------------------------
-- line 1949 ----------------------------------------
        .                                   Some((prefix, mpi))
        .                               );
        .                               shortest_uninit_seen = Some((prefix, mpi));
        .                           } else {
        .                               debug!("check_parent_of_field {:?} is definitely initialized", (prefix, mpi));
        .                           }
        .                       }
        .           
      105 ( 0.00%)              if let Some((prefix, mpi)) = shortest_uninit_seen {
        .                           // Check for a reassignment into an uninitialized field of a union (for example,
        .                           // after a move out). In this case, do not report an error here. There is an
        .                           // exception, if this is the first assignment into the union (that is, there is
        .                           // no move out from an earlier location) then this is an attempt at initialization
        .                           // of the union - we should error in that case.
        .                           let tcx = this.infcx.tcx;
        .                           if base.ty(this.body(), tcx).ty.is_union() {
        .                               if this.move_data.path_map[mpi].iter().any(|moi| {
-- line 1965 ----------------------------------------
-- line 1979 ----------------------------------------
        .                   }
        .               }
        .           
        .               /// Checks the permissions for the given place and read or write kind
        .               ///
        .               /// Returns `true` if an error is reported.
        .               fn check_access_permissions(
        .                   &mut self,
  102,316 ( 0.00%)          (place, span): (Place<'tcx>, Span),
        .                   kind: ReadOrWrite,
        .                   is_local_mutation_allowed: LocalMutationIsAllowed,
        .                   flow_state: &Flows<'cx, 'tcx>,
        .                   location: Location,
        .               ) -> bool {
        .                   debug!(
        .                       "check_access_permissions({:?}, {:?}, is_local_mutation_allowed: {:?})",
        .                       place, kind, is_local_mutation_allowed
        .                   );
        .           
        .                   let error_access;
        .                   let the_place_err;
        .           
  799,458 ( 0.02%)          match kind {
        .                       Reservation(WriteKind::MutableBorrow(
        .                           borrow_kind @ (BorrowKind::Unique | BorrowKind::Mut { .. }),
        .                       ))
        .                       | Write(WriteKind::MutableBorrow(
        .                           borrow_kind @ (BorrowKind::Unique | BorrowKind::Mut { .. }),
        .                       )) => {
   13,780 ( 0.00%)                  let is_local_mutation_allowed = match borrow_kind {
        .                               BorrowKind::Unique => LocalMutationIsAllowed::Yes,
        .                               BorrowKind::Mut { .. } => is_local_mutation_allowed,
        .                               BorrowKind::Shared | BorrowKind::Shallow => unreachable!(),
        .                           };
    9,646 ( 0.00%)                  match self.is_mutable(place.as_ref(), is_local_mutation_allowed) {
        .                               Ok(root_place) => {
        .                                   self.add_used_mut(root_place, flow_state);
        .                                   return false;
        .                               }
        .                               Err(place_err) => {
        .                                   error_access = AccessKind::MutableBorrow;
        .                                   the_place_err = place_err;
        .                               }
        .                           }
        .                       }
        .                       Reservation(WriteKind::Mutate) | Write(WriteKind::Mutate) => {
   95,515 ( 0.00%)                  match self.is_mutable(place.as_ref(), is_local_mutation_allowed) {
        .                               Ok(root_place) => {
        .                                   self.add_used_mut(root_place, flow_state);
        .                                   return false;
        .                               }
        .                               Err(place_err) => {
        .                                   error_access = AccessKind::Mutate;
        .                                   the_place_err = place_err;
        .                               }
-- line 2033 ----------------------------------------
-- line 2041 ----------------------------------------
        .                           | WriteKind::MutableBorrow(BorrowKind::Shallow),
        .                       )
        .                       | Write(
        .                           WriteKind::Move
        .                           | WriteKind::StorageDeadOrDrop
        .                           | WriteKind::MutableBorrow(BorrowKind::Shared)
        .                           | WriteKind::MutableBorrow(BorrowKind::Shallow),
        .                       ) => {
   57,122 ( 0.00%)                  if let (Err(_), true) = (
  199,927 ( 0.00%)                      self.is_mutable(place.as_ref(), is_local_mutation_allowed),
        .                               self.errors_buffer.is_empty(),
        .                           ) {
        .                               // rust-lang/rust#46908: In pure NLL mode this code path should be
        .                               // unreachable, but we use `delay_span_bug` because we can hit this when
        .                               // dereferencing a non-Copy raw pointer *and* have `-Ztreat-err-as-bug`
        .                               // enabled. We don't want to ICE for that case, as other errors will have
        .                               // been emitted (#52262).
        .                               self.infcx.tcx.sess.delay_span_bug(
-- line 2058 ----------------------------------------
-- line 2094 ----------------------------------------
        .                   if previously_initialized {
        .                       self.report_mutability_error(place, span, the_place_err, error_access, location);
        .                       true
        .                   } else {
        .                       false
        .                   }
        .               }
        .           
   89,520 ( 0.00%)      fn is_local_ever_initialized(
        .                   &self,
        .                   local: Local,
        .                   flow_state: &Flows<'cx, 'tcx>,
        .               ) -> Option<InitIndex> {
   53,712 ( 0.00%)          let mpi = self.move_data.rev_lookup.find_local(local);
   17,904 ( 0.00%)          let ii = &self.move_data.init_path_map[mpi];
   99,754 ( 0.00%)          for &index in ii {
   92,084 ( 0.00%)              if flow_state.ever_inits.contains(index) {
        .                           return Some(index);
        .                       }
        .                   }
        .                   None
   71,616 ( 0.00%)      }
        .           
        .               /// Adds the place into the used mutable variables set
   60,092 ( 0.00%)      fn add_used_mut(&mut self, root_place: RootPlace<'tcx>, flow_state: &Flows<'cx, 'tcx>) {
        .                   match root_place {
   45,069 ( 0.00%)              RootPlace { place_local: local, place_projection: [], is_local_mutation_allowed } => {
        .                           // If the local may have been initialized, and it is now currently being
        .                           // mutated, then it is justified to be annotated with the `mut`
        .                           // keyword, since the mutation may be a possible reassignment.
   28,885 ( 0.00%)                  if is_local_mutation_allowed != LocalMutationIsAllowed::Yes
   41,586 ( 0.00%)                      && self.is_local_ever_initialized(local, flow_state).is_some()
        .                           {
        .                               self.used_mut.insert(local);
        .                           }
        .                       }
        .                       RootPlace {
        .                           place_local: _,
        .                           place_projection: _,
        .                           is_local_mutation_allowed: LocalMutationIsAllowed::Yes,
-- line 2133 ----------------------------------------
-- line 2140 ----------------------------------------
        .                           if let Some(field) = self.is_upvar_field_projection(PlaceRef {
        .                               local: place_local,
        .                               projection: place_projection,
        .                           }) {
        .                               self.used_mut_upvars.push(field);
        .                           }
        .                       }
        .                   }
   58,712 ( 0.00%)      }
        .           
        .               /// Whether this value can be written or borrowed mutably.
        .               /// Returns the root place if the place passed in is a projection.
  498,861 ( 0.01%)      fn is_mutable(
        .                   &self,
        .                   place: PlaceRef<'tcx>,
        .                   is_local_mutation_allowed: LocalMutationIsAllowed,
        .               ) -> Result<RootPlace<'tcx>, PlaceRef<'tcx>> {
        .                   debug!("is_mutable: place={:?}, is_local...={:?}", place, is_local_mutation_allowed);
  139,587 ( 0.00%)          match place.last_projection() {
        .                       None => {
   43,584 ( 0.00%)                  let local = &self.body.local_decls[place.local];
  130,752 ( 0.00%)                  match local.mutability {
   12,396 ( 0.00%)                      Mutability::Not => match is_local_mutation_allowed {
   37,188 ( 0.00%)                          LocalMutationIsAllowed::Yes => Ok(RootPlace {
        .                                       place_local: place.local,
        .                                       place_projection: place.projection,
        .                                       is_local_mutation_allowed: LocalMutationIsAllowed::Yes,
        .                                   }),
        .                                   LocalMutationIsAllowed::ExceptUpvars => Ok(RootPlace {
        .                                       place_local: place.local,
        .                                       place_projection: place.projection,
        .                                       is_local_mutation_allowed: LocalMutationIsAllowed::ExceptUpvars,
        .                                   }),
        .                                   LocalMutationIsAllowed::No => Err(place),
        .                               },
   74,772 ( 0.00%)                      Mutability::Mut => Ok(RootPlace {
        .                                   place_local: place.local,
        .                                   place_projection: place.projection,
        .                                   is_local_mutation_allowed,
        .                               }),
        .                           }
        .                       }
        .                       Some((place_base, elem)) => {
    5,301 ( 0.00%)                  match elem {
        .                               ProjectionElem::Deref => {
    2,418 ( 0.00%)                          let base_ty = place_base.ty(self.body(), self.infcx.tcx).ty;
        .           
        .                                   // Check the kind of deref to decide
    7,254 ( 0.00%)                          match base_ty.kind() {
        .                                       ty::Ref(_, _, mutbl) => {
    2,324 ( 0.00%)                                  match mutbl {
        .                                               // Shared borrowed data is never mutable
        .                                               hir::Mutability::Not => Err(place),
        .                                               // Mutably borrowed data is mutable, but only if we have a
        .                                               // unique path to the `&mut`
        .                                               hir::Mutability::Mut => {
    2,324 ( 0.00%)                                          let mode = match self.is_upvar_field_projection(place) {
        .                                                       Some(field) if self.upvars[field.index()].by_ref => {
        .                                                           is_local_mutation_allowed
        .                                                       }
        .                                                       _ => LocalMutationIsAllowed::Yes,
        .                                                   };
        .           
    6,972 ( 0.00%)                                          self.is_mutable(place_base, mode)
        .                                               }
        .                                           }
        .                                       }
        .                                       ty::RawPtr(tnm) => {
        .                                           match tnm.mutbl {
        .                                               // `*const` raw pointers are not mutable
        .                                               hir::Mutability::Not => Err(place),
        .                                               // `*mut` raw pointers are always mutable, regardless of
-- line 2211 ----------------------------------------
-- line 2213 ----------------------------------------
        .                                               hir::Mutability::Mut => Ok(RootPlace {
        .                                                   place_local: place.local,
        .                                                   place_projection: place.projection,
        .                                                   is_local_mutation_allowed,
        .                                               }),
        .                                           }
        .                                       }
        .                                       // `Box<T>` owns its content, so mutable if its location is mutable
       47 ( 0.00%)                              _ if base_ty.is_box() => {
        .                                           self.is_mutable(place_base, is_local_mutation_allowed)
        .                                       }
        .                                       // Deref should only be for reference, pointers or boxes
        .                                       _ => bug!("Deref of unexpected type: {:?}", base_ty),
        .                                   }
        .                               }
        .                               // All other projections are owned by their base path, so mutable if
        .                               // base path is mutable
        .                               ProjectionElem::Field(..)
        .                               | ProjectionElem::Index(..)
        .                               | ProjectionElem::ConstantIndex { .. }
        .                               | ProjectionElem::Subslice { .. }
        .                               | ProjectionElem::Downcast(..) => {
        .                                   let upvar_field_projection = self.is_upvar_field_projection(place);
    1,116 ( 0.00%)                          if let Some(field) = upvar_field_projection {
        .                                       let upvar = &self.upvars[field.index()];
        .                                       debug!(
        .                                           "is_mutable: upvar.mutability={:?} local_mutation_is_allowed={:?} \
        .                                            place={:?}, place_base={:?}",
        .                                           upvar, is_local_mutation_allowed, place, place_base
        .                                       );
        .                                       match (upvar.place.mutability, is_local_mutation_allowed) {
        .                                           (
-- line 2244 ----------------------------------------
-- line 2285 ----------------------------------------
        .                                       }
        .                                   } else {
        .                                       self.is_mutable(place_base, is_local_mutation_allowed)
        .                                   }
        .                               }
        .                           }
        .                       }
        .                   }
  362,808 ( 0.01%)      }
        .           
        .               /// If `place` is a field projection, and the field is being projected from a closure type,
        .               /// then returns the index of the field being projected. Note that this closure will always
        .               /// be `self` in the current MIR, because that is the only time we directly access the fields
        .               /// of a closure type.
        .               fn is_upvar_field_projection(&self, place_ref: PlaceRef<'tcx>) -> Option<Field> {
   15,480 ( 0.00%)          path_utils::is_upvar_field_projection(self.infcx.tcx, &self.upvars, place_ref, self.body())
        .               }
        .           }
        .           
        .           /// The degree of overlap between 2 places for borrow-checking.
        .           enum Overlap {
        .               /// The places might partially overlap - in this case, we give
        .               /// up and say that they might conflict. This occurs when
        .               /// different fields of a union are borrowed. For example,
-- line 2308 ----------------------------------------

1,610,111 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_borrowck/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/const_ptr.rs
--------------------------------------------------------------------------------
Ir                  

-- line 29 ----------------------------------------
         .               /// ```
         .               /// let s: &str = "Follow the rabbit";
         .               /// let ptr: *const u8 = s.as_ptr();
         .               /// assert!(!ptr.is_null());
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_ptr_is_null", issue = "74939")]
         .               #[inline]
 3,448,080 ( 0.07%)      pub const fn is_null(self) -> bool {
         .                   // Compare via a cast to a thin pointer, so fat pointers are only
         .                   // considering their "data" part for null-ness.
 3,448,080 ( 0.07%)          (self as *const u8).guaranteed_eq(null())
 3,448,080 ( 0.07%)      }
         .           
         .               /// Casts to a pointer of another type.
         .               #[stable(feature = "ptr_cast", since = "1.38.0")]
         .               #[rustc_const_stable(feature = "const_ptr_cast", since = "1.38.0")]
         .               #[inline]
 1,278,435 ( 0.03%)      pub const fn cast<U>(self) -> *const U {
         .                   self as _
   852,290 ( 0.02%)      }
         .           
         .               /// Changes constness without changing the type.
         .               ///
         .               /// This is a bit safer than `as` because it wouldn't silently change the type if the code is
         .               /// refactored.
         .               #[unstable(feature = "ptr_const_cast", issue = "92675")]
         .               #[rustc_const_unstable(feature = "ptr_const_cast", issue = "92675")]
         .               pub const fn as_mut(self) -> *mut T {
-- line 57 ----------------------------------------
-- line 287 ----------------------------------------
         .               #[must_use = "returns a new pointer rather than modifying its argument"]
         .               #[rustc_const_unstable(feature = "const_ptr_offset", issue = "71499")]
         .               #[inline(always)]
         .               pub const unsafe fn offset(self, count: isize) -> *const T
         .               where
         .                   T: Sized,
         .               {
         .                   // SAFETY: the caller must uphold the safety contract for `offset`.
12,313,743 ( 0.26%)          unsafe { intrinsics::offset(self, count) }
         .               }
         .           
         .               /// Calculates the offset from a pointer using wrapping arithmetic.
         .               ///
         .               /// `count` is in units of T; e.g., a `count` of 3 represents a pointer
         .               /// offset of `3 * size_of::<T>()` bytes.
         .               ///
         .               /// # Safety
-- line 303 ----------------------------------------
-- line 436 ----------------------------------------
         .               /// // they point to the same address!
         .               /// unsafe {
         .               ///     let zero = ptr2_other.offset_from(ptr2); // Undefined Behavior
         .               /// }
         .               /// ```
         .               #[stable(feature = "ptr_offset_from", since = "1.47.0")]
         .               #[rustc_const_unstable(feature = "const_ptr_offset_from", issue = "92980")]
         .               #[inline]
     7,625 ( 0.00%)      pub const unsafe fn offset_from(self, origin: *const T) -> isize
         .               where
         .                   T: Sized,
         .               {
     1,525 ( 0.00%)          let pointee_size = mem::size_of::<T>();
    19,825 ( 0.00%)          assert!(0 < pointee_size && pointee_size <= isize::MAX as usize);
         .                   // SAFETY: the caller must uphold the safety contract for `ptr_offset_from`.
 2,622,426 ( 0.05%)          unsafe { intrinsics::ptr_offset_from(self, origin) }
     3,050 ( 0.00%)      }
         .           
         .               /// Returns whether two pointers are guaranteed to be equal.
         .               ///
         .               /// At runtime this function behaves like `self == other`.
         .               /// However, in some contexts (e.g., compile-time evaluation),
         .               /// it is not always possible to determine equality of two pointers, so this function may
         .               /// spuriously return `false` for pointers that later actually turn out to be equal.
         .               /// But when it returns `true`, the pointers are guaranteed to be equal.
-- line 460 ----------------------------------------
-- line 470 ----------------------------------------
         .               /// affect the outcome, but just the performance.
         .               /// The consequences of using this method to make runtime and compile-time code behave
         .               /// differently have not been explored. This method should not be used to introduce such
         .               /// differences, and it should also not be stabilized before we have a better understanding
         .               /// of this issue.
         .               #[unstable(feature = "const_raw_ptr_comparison", issue = "53020")]
         .               #[rustc_const_unstable(feature = "const_raw_ptr_comparison", issue = "53020")]
         .               #[inline]
 2,586,060 ( 0.05%)      pub const fn guaranteed_eq(self, other: *const T) -> bool
         .               where
         .                   T: Sized,
         .               {
 5,172,148 ( 0.11%)          intrinsics::ptr_guaranteed_eq(self, other)
 3,448,080 ( 0.07%)      }
         .           
         .               /// Returns whether two pointers are guaranteed to be unequal.
         .               ///
         .               /// At runtime this function behaves like `self != other`.
         .               /// However, in some contexts (e.g., compile-time evaluation),
         .               /// it is not always possible to determine the inequality of two pointers, so this function may
         .               /// spuriously return `false` for pointers that later actually turn out to be unequal.
         .               /// But when it returns `true`, the pointers are guaranteed to be unequal.
-- line 491 ----------------------------------------
-- line 569 ----------------------------------------
         .               #[rustc_const_unstable(feature = "const_ptr_offset", issue = "71499")]
         .               #[inline(always)]
         .               pub const unsafe fn add(self, count: usize) -> Self
         .               where
         .                   T: Sized,
         .               {
         .                   // SAFETY: the caller must uphold the safety contract for `offset`.
         .                   unsafe { self.offset(count as isize) }
        41 ( 0.00%)      }
         .           
         .               /// Calculates the offset from a pointer (convenience for
         .               /// `.offset((count as isize).wrapping_neg())`).
         .               ///
         .               /// `count` is in units of T; e.g., a `count` of 3 represents a pointer
         .               /// offset of `3 * size_of::<T>()` bytes.
         .               ///
         .               /// # Safety
-- line 585 ----------------------------------------
-- line 809 ----------------------------------------
         .               /// memory in `self` unchanged.
         .               ///
         .               /// See [`ptr::read`] for safety concerns and examples.
         .               ///
         .               /// [`ptr::read`]: crate::ptr::read()
         .               #[stable(feature = "pointer_methods", since = "1.26.0")]
         .               #[rustc_const_unstable(feature = "const_ptr_read", issue = "80377")]
         .               #[inline]
        28 ( 0.00%)      pub const unsafe fn read(self) -> T
         .               where
         .                   T: Sized,
         .               {
         .                   // SAFETY: the caller must uphold the safety contract for `read`.
        28 ( 0.00%)          unsafe { read(self) }
        28 ( 0.00%)      }
         .           
         .               /// Performs a volatile read of the value from `self` without moving it. This
         .               /// leaves the memory in `self` unchanged.
         .               ///
         .               /// Volatile operations are intended to act on I/O memory, and are guaranteed
         .               /// to not be elided or reordered by the compiler across other volatile
         .               /// operations.
         .               ///
-- line 831 ----------------------------------------
-- line 886 ----------------------------------------
         .               /// NOTE: this has the *same* argument order as [`ptr::copy_nonoverlapping`].
         .               ///
         .               /// See [`ptr::copy_nonoverlapping`] for safety concerns and examples.
         .               ///
         .               /// [`ptr::copy_nonoverlapping`]: crate::ptr::copy_nonoverlapping()
         .               #[rustc_const_unstable(feature = "const_intrinsic_copy", issue = "80697")]
         .               #[stable(feature = "pointer_methods", since = "1.26.0")]
         .               #[inline]
    23,756 ( 0.00%)      pub const unsafe fn copy_to_nonoverlapping(self, dest: *mut T, count: usize)
         .               where
         .                   T: Sized,
         .               {
         .                   // SAFETY: the caller must uphold the safety contract for `copy_nonoverlapping`.
     5,939 ( 0.00%)          unsafe { copy_nonoverlapping(self, dest, count) }
    11,878 ( 0.00%)      }
         .           
         .               /// Computes the offset that needs to be applied to the pointer in order to make it aligned to
         .               /// `align`.
         .               ///
         .               /// If it is not possible to align the pointer, the implementation returns
         .               /// `usize::MAX`. It is permissible for the implementation to *always*
         .               /// return `usize::MAX`. Only your algorithm's performance can depend
         .               /// on getting a usable offset here, not its correctness.
-- line 908 ----------------------------------------
-- line 983 ----------------------------------------
         .               /// use std::ptr;
         .               ///
         .               /// let slice: *const [i8] = ptr::slice_from_raw_parts(ptr::null(), 3);
         .               /// assert_eq!(slice.len(), 3);
         .               /// ```
         .               #[inline]
         .               #[unstable(feature = "slice_ptr_len", issue = "71146")]
         .               #[rustc_const_unstable(feature = "const_slice_ptr_len", issue = "71146")]
    22,455 ( 0.00%)      pub const fn len(self) -> usize {
    14,970 ( 0.00%)          metadata(self)
    14,970 ( 0.00%)      }
         .           
         .               /// Returns a raw pointer to the slice's buffer.
         .               ///
         .               /// This is equivalent to casting `self` to `*const T`, but more type-safe.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```rust
-- line 1001 ----------------------------------------
-- line 1003 ----------------------------------------
         .               /// use std::ptr;
         .               ///
         .               /// let slice: *const [i8] = ptr::slice_from_raw_parts(ptr::null(), 3);
         .               /// assert_eq!(slice.as_ptr(), 0 as *const i8);
         .               /// ```
         .               #[inline]
         .               #[unstable(feature = "slice_ptr_get", issue = "74265")]
         .               #[rustc_const_unstable(feature = "slice_ptr_get", issue = "74265")]
 1,471,732 ( 0.03%)      pub const fn as_ptr(self) -> *const T {
         .                   self as *const T
   735,866 ( 0.02%)      }
         .           
         .               /// Returns a raw pointer to an element or subslice, without doing bounds
         .               /// checking.
         .               ///
         .               /// Calling this method with an out-of-bounds index or when `self` is not dereferenceable
         .               /// is *[undefined behavior]* even if the resulting pointer is not used.
         .               ///
         .               /// [undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html
-- line 1021 ----------------------------------------

 2,817,312 ( 0.06%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/const_ptr.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.8.4/src/reader/parser/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 17 ----------------------------------------
        .           use reader::config::ParserConfig;
        .           use reader::lexer::{Lexer, Token};
        .           
        .           macro_rules! gen_takes(
        .               ($($field:ident -> $method:ident, $t:ty, $def:expr);+) => (
        .                   $(
        .                   impl MarkupData {
        .                       #[inline]
   27,216 ( 0.00%)              fn $method(&mut self) -> $t {
   21,858 ( 0.00%)                  mem::replace(&mut self.$field, $def)
   13,612 ( 0.00%)              }
        .                   }
        .                   )+
        .               )
        .           );
        .           
        .           gen_takes!(
        .               name         -> take_name, String, String::new();
        .               ref_data     -> take_ref_data, String, String::new();
        .           
        2 ( 0.00%)      version      -> take_version, Option<common::XmlVersion>, None;
        2 ( 0.00%)      encoding     -> take_encoding, Option<String>, None;
        2 ( 0.00%)      standalone   -> take_standalone, Option<bool>, None;
        .           
    2,098 ( 0.00%)      element_name -> take_element_name, Option<OwnedName>, None;
        .           
    3,266 ( 0.00%)      attr_name    -> take_attr_name, Option<OwnedName>, None;
    2,872 ( 0.00%)      attributes   -> take_attributes, Vec<OwnedAttribute>, vec!()
        .           );
        .           
        .           macro_rules! self_error(
        .               ($this:ident; $msg:expr) => ($this.error($msg));
        .               ($this:ident; $fmt:expr, $($arg:expr),+) => ($this.error(format!($fmt, $($arg),+)))
        .           );
        .           
        .           mod outside_tag;
-- line 52 ----------------------------------------
-- line 84 ----------------------------------------
        .               parsed_declaration: bool,
        .               inside_whitespace: bool,
        .               read_prefix_separator: bool,
        .               pop_namespace: bool
        .           }
        .           
        .           impl PullParser {
        .               /// Returns a new parser using the given config.
        6 ( 0.00%)      pub fn new(config: ParserConfig) -> PullParser {
      116 ( 0.00%)          PullParser {
       18 ( 0.00%)              config: config,
        4 ( 0.00%)              lexer: Lexer::new(),
        4 ( 0.00%)              st: State::OutsideTag,
        4 ( 0.00%)              buf: String::new(),
        4 ( 0.00%)              nst: NamespaceStack::default(),
        .           
       84 ( 0.00%)              data: MarkupData {
        4 ( 0.00%)                  name: String::new(),
        2 ( 0.00%)                  version: None,
        2 ( 0.00%)                  encoding: None,
        4 ( 0.00%)                  standalone: None,
        4 ( 0.00%)                  ref_data: String::new(),
        2 ( 0.00%)                  element_name: None,
        2 ( 0.00%)                  quote: None,
        2 ( 0.00%)                  attr_name: None,
        8 ( 0.00%)                  attributes: Vec::new()
        .                       },
        2 ( 0.00%)              final_result: None,
        2 ( 0.00%)              next_event: None,
        8 ( 0.00%)              est: Vec::new(),
       28 ( 0.00%)              pos: vec![TextPosition::new()],
        .           
        .                       encountered_element: false,
        .                       parsed_declaration: false,
        .                       inside_whitespace: true,
        .                       read_prefix_separator: false,
        .                       pop_namespace: false
        .                   }
        4 ( 0.00%)      }
        .           
        .               /// Checks if this parser ignores the end of stream errors.
        .               pub fn is_ignoring_end_of_stream(&self) -> bool { self.config.ignore_end_of_stream }
        .           }
        .           
        .           impl Position for PullParser {
        .               /// Returns the position of the last event produced by the parser
        .               #[inline]
        .               fn position(&self) -> TextPosition {
        .                   self.pos[0]
        .               }
        .           }
        .           
3,421,626 ( 0.07%)  #[derive(Clone, PartialEq)]
        .           pub enum State {
        .               OutsideTag,
  539,880 ( 0.01%)      InsideOpeningTag(OpeningTagSubstate),
   37,752 ( 0.00%)      InsideClosingTag(ClosingTagSubstate),
       48 ( 0.00%)      InsideProcessingInstruction(ProcessingInstructionSubstate),
        .               InsideComment,
        .               InsideCData,
      372 ( 0.00%)      InsideDeclaration(DeclarationSubstate),
        .               InsideDoctype,
        .               InsideReference(Box<State>)
        .           }
        .           
  934,430 ( 0.02%)  #[derive(Clone, PartialEq)]
        .           pub enum OpeningTagSubstate {
        .               InsideName,
        .           
        .               InsideTag,
        .           
        .               InsideAttributeName,
        .               AfterAttributeName,
        .           
        .               InsideAttributeValue,
        .           }
        .           
   88,088 ( 0.00%)  #[derive(Clone, PartialEq)]
        .           pub enum ClosingTagSubstate {
        .               CTInsideName,
        .               CTAfterName
        .           }
        .           
      112 ( 0.00%)  #[derive(Clone, PartialEq)]
        .           pub enum ProcessingInstructionSubstate {
        .               PIInsideName,
        .               PIInsideData
        .           }
        .           
      682 ( 0.00%)  #[derive(Clone, PartialEq)]
        .           pub enum DeclarationSubstate {
        .               BeforeVersion,
        .               InsideVersion,
        .               AfterVersion,
        .           
        .               InsideVersionValue,
        .               AfterVersionValue,
        .           
-- line 181 ----------------------------------------
-- line 187 ----------------------------------------
        .               BeforeStandaloneDecl,
        .               InsideStandaloneDecl,
        .               AfterStandaloneDecl,
        .           
        .               InsideStandaloneDeclValue,
        .               AfterStandaloneDeclValue
        .           }
        .           
   69,602 ( 0.00%)  #[derive(PartialEq)]
        .           enum QualifiedNameTarget {
        .               AttributeNameTarget,
        .               OpeningTagNameTarget,
        .               ClosingTagNameTarget
        .           }
        .           
        .           #[derive(Copy, Clone, PartialEq, Eq)]
        .           enum QuoteToken {
        .               SingleQuoteToken,
        .               DoubleQuoteToken
        .           }
        .           
        .           impl QuoteToken {
    6,540 ( 0.00%)      fn from_token(t: &Token) -> QuoteToken {
   26,160 ( 0.00%)          match *t {
        .                       Token::SingleQuote => QuoteToken::SingleQuoteToken,
    6,540 ( 0.00%)              Token::DoubleQuote => QuoteToken::DoubleQuoteToken,
        .                       _ => panic!("Unexpected token: {}", t)
        .                   }
   16,350 ( 0.00%)      }
        .           
   19,680 ( 0.00%)      fn as_token(self) -> Token {
   16,400 ( 0.00%)          match self {
        .                       QuoteToken::SingleQuoteToken => Token::SingleQuote,
    3,280 ( 0.00%)              QuoteToken::DoubleQuoteToken => Token::DoubleQuote
        .                   }
    6,560 ( 0.00%)      }
        .           }
        .           
        .           struct MarkupData {
        .               name: String,     // used for processing instruction name
        .               ref_data: String,  // used for reference content
        .           
        .               version: Option<common::XmlVersion>,  // used for XML declaration version
        .               encoding: Option<String>,  // used for XML declaration encoding
-- line 230 ----------------------------------------
-- line 237 ----------------------------------------
        .               attributes: Vec<OwnedAttribute>   // used to hold all accumulated attributes
        .           }
        .           
        .           impl PullParser {
        .               /// Returns next event read from the given buffer.
        .               ///
        .               /// This method should be always called with the same buffer. If you call it
        .               /// providing different buffers each time, the result will be undefined.
   22,372 ( 0.00%)      pub fn next<R: Read>(&mut self, r: &mut R) -> Result {
   31,960 ( 0.00%)          if let Some(ref ev) = self.final_result {
        .                       return ev.clone();
        .                   }
        .           
   39,026 ( 0.00%)          if let Some(ev) = self.next_event.take() {
    2,322 ( 0.00%)              return ev;
    4,844 ( 0.00%)          }
        .           
    4,844 ( 0.00%)          if self.pop_namespace {
    1,434 ( 0.00%)              self.pop_namespace = false;
    8,604 ( 0.00%)              self.nst.pop();
        .                   }
        .           
  274,160 ( 0.01%)          loop {
        .                       // While lexer gives us Ok(maybe_token) -- we loop.
        .                       // Upon having a complete XML-event -- we return from the whole function.
1,936,074 ( 0.04%)              match self.lexer.next_token(r) {
1,106,328 ( 0.02%)                  Ok(maybe_token) =>
1,936,074 ( 0.04%)                      match maybe_token {
        .                                   None => break,
1,659,492 ( 0.03%)                          Some(token) =>
4,170,528 ( 0.09%)                              match self.dispatch_token(token) {
        .                                           None => {} // continue
        .                                           Some(Ok(XmlEvent::EndDocument)) =>
        .                                               return {
        .                                                   self.next_pos();
        .                                                   self.set_final_result(Ok(XmlEvent::EndDocument))
        .                                               },
   41,174 ( 0.00%)                                  Some(Ok(xml_event)) =>
        .                                               return {
    4,844 ( 0.00%)                                          self.next_pos();
   26,642 ( 0.00%)                                          Ok(xml_event)
        .                                               },
        .                                           Some(Err(xml_error)) =>
        .                                               return {
        .                                                   self.next_pos();
        .                                                   self.set_final_result(Err(xml_error))
        .                                               },
  305,646 ( 0.01%)                              }
        .                               },
        .                           Err(lexer_error) =>
        .                               return self.set_final_result(Err(lexer_error)),
        .                       }
        .                   }
        .           
        .                   // Handle end of stream
        .                   // Forward pos to the lexer head
-- line 292 ----------------------------------------
-- line 304 ----------------------------------------
        .                           self.final_result = None;
        .                           self.lexer.reset_eof_handled();
        .                           return self_error!(self; "Unexpected end of stream: still inside the root element");
        .                       } else {
        .                           self_error!(self; "Unexpected end of stream: still inside the root element")
        .                       }
        .                   };
        .                   self.set_final_result(ev)
    6,392 ( 0.00%)      }
        .           
        .               // This function is to be called when a terminal event is reached.
        .               // The function sets up the `self.final_result` into `Some(result)` and return `result`.
        .               fn set_final_result(&mut self, result: Result) -> Result {
        .                   self.final_result = Some(result.clone());
        .                   result
        .               }
        .           
        .               #[inline]
        .               fn error<M: Into<Cow<'static, str>>>(&self, msg: M) -> Result {
        .                   Err((&self.lexer, msg).into())
        .               }
        .           
        .               #[inline]
    7,266 ( 0.00%)      fn next_pos(&mut self) {
   12,110 ( 0.00%)          if self.pos.len() > 1 {
   12,110 ( 0.00%)              self.pos.remove(0);
        .                   } else {
        .                       self.pos[0] = self.lexer.position();
        .                   }
    4,844 ( 0.00%)      }
        .           
        .               #[inline]
    4,844 ( 0.00%)      fn push_pos(&mut self) {
   19,376 ( 0.00%)          self.pos.push(self.lexer.position());
    4,844 ( 0.00%)      }
        .           
2,212,656 ( 0.05%)      fn dispatch_token(&mut self, t: Token) -> Option<Result> {
2,765,820 ( 0.06%)          match self.st.clone() {
1,612,134 ( 0.03%)              State::OutsideTag                     => self.outside_tag(t),
      120 ( 0.00%)              State::InsideProcessingInstruction(s) => self.inside_processing_instruction(t, s),
      744 ( 0.00%)              State::InsideDeclaration(s)           => self.inside_declaration(t, s),
        .                       State::InsideDoctype                  => self.inside_doctype(t),
1,079,760 ( 0.02%)              State::InsideOpeningTag(s)            => self.inside_opening_tag(t, s),
   94,380 ( 0.00%)              State::InsideClosingTag(s)            => self.inside_closing_tag_name(t, s),
   10,026 ( 0.00%)              State::InsideComment                  => self.inside_comment(t),
        .                       State::InsideCData                    => self.inside_cdata(t),
        .                       State::InsideReference(s)             => self.inside_reference(t, *s)
        .                   }
  553,164 ( 0.01%)      }
        .           
        .               #[inline]
  355,272 ( 0.01%)      fn depth(&self) -> usize {
  532,908 ( 0.01%)          self.est.len()
  355,272 ( 0.01%)      }
        .           
        .               #[inline]
  532,488 ( 0.01%)      fn buf_has_data(&self) -> bool {
1,331,220 ( 0.03%)          self.buf.len() > 0
1,064,976 ( 0.02%)      }
        .           
        .               #[inline]
   35,848 ( 0.00%)      fn take_buf(&mut self) -> String {
   53,772 ( 0.00%)          mem::replace(&mut self.buf, String::new())
   17,924 ( 0.00%)      }
        .           
        .               #[inline]
  667,590 ( 0.01%)      fn append_char_continue(&mut self, c: char) -> Option<Result> {
  121,380 ( 0.00%)          self.buf.push(c);
   60,690 ( 0.00%)          None
  121,380 ( 0.00%)      }
        .           
        .               #[inline]
  186,312 ( 0.00%)      fn into_state(&mut self, st: State, ev: Option<Result>) -> Option<Result> {
  155,260 ( 0.00%)          self.st = st;
   46,578 ( 0.00%)          ev
   31,052 ( 0.00%)      }
        .           
        .               #[inline]
   90,608 ( 0.00%)      fn into_state_continue(&mut self, st: State) -> Option<Result> {
   79,282 ( 0.00%)          self.into_state(st, None)
   22,652 ( 0.00%)      }
        .           
        .               #[inline]
   25,200 ( 0.00%)      fn into_state_emit(&mut self, st: State, ev: Result) -> Option<Result> {
   42,000 ( 0.00%)          self.into_state(st, Some(ev))
    4,200 ( 0.00%)      }
        .           
        .               /// Dispatches tokens in order to process qualified name. If qualified name cannot be parsed,
        .               /// an error is returned.
        .               ///
        .               /// # Parameters
        .               /// * `t`       --- next token;
        .               /// * `on_name` --- a callback which is executed when whitespace is encountered.
  339,480 ( 0.01%)      fn read_qualified_name<F>(&mut self, t: Token, target: QualifiedNameTarget, on_name: F) -> Option<Result>
        .                 where F: Fn(&mut PullParser, Token, OwnedName) -> Option<Result> {
        .                   // We can get here for the first time only when self.data.name contains zero or one character,
        .                   // but first character cannot be a colon anyway
  203,688 ( 0.00%)          if self.buf.len() <= 1 {
    7,470 ( 0.00%)              self.read_prefix_separator = false;
        .                   }
        .           
   87,628 ( 0.00%)          let invoke_callback = |this: &mut PullParser, t| {
   10,736 ( 0.00%)              let name = this.take_buf();
   69,784 ( 0.00%)              match name.parse() {
  246,928 ( 0.01%)                  Ok(name) => on_name(this, t, name),
        .                           Err(_) => Some(self_error!(this; "Qualified name is invalid: {}", name))
        .                       }
   26,840 ( 0.00%)          };
        .           
  255,480 ( 0.01%)          match t {
        .                       // There can be only one colon, and not as the first character
        .                       Token::Character(':') if self.buf_has_data() && !self.read_prefix_separator => {
        .                           self.buf.push(':');
        .                           self.read_prefix_separator = true;
        .                           None
        .                       }
        .           
  718,704 ( 0.02%)              Token::Character(c) if c != ':' && (!self.buf_has_data() && is_name_start_char(c) ||
  317,736 ( 0.01%)                                            self.buf_has_data() && is_name_char(c)) =>
   85,740 ( 0.00%)                  self.append_char_continue(c),
        .           
   71,940 ( 0.00%)              Token::EqualsSign if target == QualifiedNameTarget::AttributeNameTarget => invoke_callback(self, t),
        .           
        .                       Token::EmptyTagEnd if target == QualifiedNameTarget::OpeningTagNameTarget => invoke_callback(self, t),
        .           
    8,626 ( 0.00%)              Token::TagEnd if target == QualifiedNameTarget::OpeningTagNameTarget ||
   13,270 ( 0.00%)                        target == QualifiedNameTarget::ClosingTagNameTarget => invoke_callback(self, t),
        .           
   21,510 ( 0.00%)              Token::Whitespace(_) => invoke_callback(self, t),
        .           
        .                       _ => Some(self_error!(self; "Unexpected token inside qualified name: {}", t))
        .                   }
  101,844 ( 0.00%)      }
        .           
        .               /// Dispatches tokens in order to process attribute value.
        .               ///
        .               /// # Parameters
        .               /// * `t`        --- next token;
        .               /// * `on_value` --- a callback which is called when terminating quote is encountered.
  332,244 ( 0.01%)      fn read_attribute_value<F>(&mut self, t: Token, on_value: F) -> Option<Result>
        .                 where F: Fn(&mut PullParser, String) -> Option<Result> {
  276,870 ( 0.01%)          match t {
   33,952 ( 0.00%)              Token::Whitespace(_) if self.data.quote.is_none() => None,  // skip leading whitespace
        .           
   49,140 ( 0.00%)              Token::DoubleQuote | Token::SingleQuote => match self.data.quote {
        .                           None => {  // Entered attribute value
   22,890 ( 0.00%)                      self.data.quote = Some(QuoteToken::from_token(&t));
    6,540 ( 0.00%)                      None
        .                           }
   45,910 ( 0.00%)                  Some(q) if q.as_token() == t => {
   13,080 ( 0.00%)                      self.data.quote = None;
    6,540 ( 0.00%)                      let value = self.take_buf();
   49,050 ( 0.00%)                      on_value(self, value)
        .                           }
        .                           _ => {
       30 ( 0.00%)                      t.push_to_string(&mut self.buf);
       20 ( 0.00%)                      None
        .                           }
        .                       },
        .           
        .                       Token::ReferenceStart => {
        .                           let st = Box::new(self.st.clone());
        .                           self.into_state_continue(State::InsideReference(st))
        .                       }
        .           
        .                       Token::OpeningTagStart =>
        .                           Some(self_error!(self; "Unexpected token inside attribute value: <")),
        .           
        .                       // Every character except " and ' and < is okay
        .                       _  => {
  146,472 ( 0.00%)                  t.push_to_string(&mut self.buf);
   97,648 ( 0.00%)                  None
        .                       }
        .                   }
  166,122 ( 0.00%)      }
        .           
   12,924 ( 0.00%)      fn emit_start_element(&mut self, emit_end_element: bool) -> Option<Result> {
   17,232 ( 0.00%)          let mut name = self.data.take_element_name().unwrap();
    7,180 ( 0.00%)          let mut attributes = self.data.take_attributes();
        .           
        .                   // check whether the name prefix is bound and fix its namespace
   35,900 ( 0.00%)          match self.nst.get(name.borrow().prefix_repr()) {
   33,028 ( 0.00%)              Some("") => name.namespace = None,  // default namespace
        .                       Some(ns) => name.namespace = Some(ns.into()),
        .                       None => return Some(self_error!(self; "Element {} prefix is unbound", name))
        .                   }
        .           
        .                   // check and fix accumulated attributes prefixes
   93,900 ( 0.00%)          for attr in attributes.iter_mut() {
   19,596 ( 0.00%)              if let Some(ref pfx) = attr.name.prefix {
        .                           let new_ns = match self.nst.get(pfx) {
        .                               Some("") => None,  // default namespace
        .                               Some(ns) => Some(ns.into()),
        .                               None => return Some(self_error!(self; "Attribute {} prefix is unbound", attr.name))
        .                           };
        .                           attr.name.namespace = new_ns;
        .                       }
        .                   }
        .           
    4,308 ( 0.00%)          if emit_end_element {
    2,322 ( 0.00%)              self.pop_namespace = true;
   32,508 ( 0.00%)              self.next_event = Some(Ok(XmlEvent::EndElement {
    1,548 ( 0.00%)                  name: name.clone()
        .                       }));
        .                   } else {
    7,282 ( 0.00%)              self.est.push(name.clone());
        .                   }
    7,180 ( 0.00%)          let namespace = self.nst.squash();
   60,312 ( 0.00%)          self.into_state_emit(State::OutsideTag, Ok(XmlEvent::StartElement {
   17,232 ( 0.00%)              name: name,
    7,180 ( 0.00%)              attributes: attributes,
    5,744 ( 0.00%)              namespace: namespace
        .                   }))
    7,180 ( 0.00%)      }
        .           
    3,310 ( 0.00%)      fn emit_end_element(&mut self) -> Option<Result> {
    7,282 ( 0.00%)          let mut name = self.data.take_element_name().unwrap();
        .           
        .                   // check whether the name prefix is bound and fix its namespace
   16,550 ( 0.00%)          match self.nst.get(name.borrow().prefix_repr()) {
   15,226 ( 0.00%)              Some("") => name.namespace = None,  // default namespace
        .                       Some(ns) => name.namespace = Some(ns.into()),
        .                       None => return Some(self_error!(self; "Element {} prefix is unbound", name))
        .                   }
        .           
    7,282 ( 0.00%)          let op_name = self.est.pop().unwrap();
        .           
    3,310 ( 0.00%)          if name == op_name {
      662 ( 0.00%)              self.pop_namespace = true;
   31,114 ( 0.00%)              self.into_state_emit(State::OutsideTag, Ok(XmlEvent::EndElement { name: name }))
        .                   } else {
        .                       Some(self_error!(self; "Unexpected closing tag: {}, expected {}", name, op_name))
        .                   }
   11,916 ( 0.00%)      }
        .           
        .           }
        .           
        .           #[cfg(test)]
        .           mod tests {
        .               use std::io::BufReader;
        .           
        .               use common::{Position, TextPosition};
-- line 545 ----------------------------------------

7,244,952 ( 0.15%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.8.4/src/reader/parser/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/closure.rs
--------------------------------------------------------------------------------
Ir                 

-- line 10 ----------------------------------------
        .               type Env;
        .           }
        .           
        .           impl<'a, A, R> !Sync for Closure<'a, A, R> {}
        .           impl<'a, A, R> !Send for Closure<'a, A, R> {}
        .           
        .           impl<'a, A, R, F: FnMut(A) -> R> From<&'a mut F> for Closure<'a, A, R> {
        .               fn from(f: &'a mut F) -> Self {
1,015,449 ( 0.02%)          unsafe extern "C" fn call<A, R, F: FnMut(A) -> R>(env: &mut Env, arg: A) -> R {
        .                       (*(env as *mut _ as *mut F))(arg)
1,353,932 ( 0.03%)          }
        .                   Closure { call: call::<A, R, F>, env: unsafe { &mut *(f as *mut _ as *mut Env) } }
        .               }
        .           }
        .           
        .           impl<'a, A, R> Closure<'a, A, R> {
        .               pub fn call(&mut self, arg: A) -> R {
5,415,728 ( 0.11%)          unsafe { (self.call)(self.env, arg) }
        .               }
        .           }

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/search.rs
--------------------------------------------------------------------------------
Ir                  

-- line 40 ----------------------------------------
         .           
         .           impl<BorrowType: marker::BorrowType, K, V> NodeRef<BorrowType, K, V, marker::LeafOrInternal> {
         .               /// Looks up a given key in a (sub)tree headed by the node, recursively.
         .               /// Returns a `Found` with the handle of the matching KV, if any. Otherwise,
         .               /// returns a `GoDown` with the handle of the leaf edge where the key belongs.
         .               ///
         .               /// The result is meaningful only if the tree is ordered by key, like the tree
         .               /// in a `BTreeMap` is.
 2,176,398 ( 0.05%)      pub fn search_tree<Q: ?Sized>(
         .                   mut self,
         .                   key: &Q,
         .               ) -> SearchResult<BorrowType, K, V, marker::LeafOrInternal, marker::Leaf>
         .               where
         .                   Q: Ord,
         .                   K: Borrow<Q>,
         .               {
         .                   loop {
    53,647 ( 0.00%)              self = match self.search_node(key) {
    39,862 ( 0.00%)                  Found(handle) => return Found(handle),
   379,938 ( 0.01%)                  GoDown(handle) => match handle.force() {
    82,251 ( 0.00%)                      Leaf(leaf) => return GoDown(leaf),
         .                               Internal(internal) => internal.descend(),
         .                           },
         .                       }
         .                   }
   960,832 ( 0.02%)      }
         .           
         .               /// Descends to the nearest node where the edge matching the lower bound
         .               /// of the range is different from the edge matching the upper bound, i.e.,
         .               /// the nearest node that has at least one key contained in the range.
         .               ///
         .               /// If found, returns an `Ok` with that node, the strictly ascending pair of
         .               /// edge indices in the node delimiting the range, and the corresponding
         .               /// pair of bounds for continuing the search in the child nodes, in case
-- line 73 ----------------------------------------
-- line 175 ----------------------------------------
         .           impl<BorrowType, K, V, Type> NodeRef<BorrowType, K, V, Type> {
         .               /// Looks up a given key in the node, without recursion.
         .               /// Returns a `Found` with the handle of the matching KV, if any. Otherwise,
         .               /// returns a `GoDown` with the handle of the edge where the key might be found
         .               /// (if the node is internal) or where the key can be inserted.
         .               ///
         .               /// The result is meaningful only if the tree is ordered by key, like the tree
         .               /// in a `BTreeMap` is.
    66,280 ( 0.00%)      pub fn search_node<Q: ?Sized>(self, key: &Q) -> SearchResult<BorrowType, K, V, Type, Type>
         .               where
         .                   Q: Ord,
         .                   K: Borrow<Q>,
         .               {
    70,770 ( 0.00%)          match unsafe { self.find_key_index(key, 0) } {
    31,470 ( 0.00%)              IndexResult::KV(idx) => Found(unsafe { Handle::new_kv(self, idx) }),
    56,277 ( 0.00%)              IndexResult::Edge(idx) => GoDown(unsafe { Handle::new_edge(self, idx) }),
         .                   }
    12,854 ( 0.00%)      }
         .           
         .               /// Returns either the KV index in the node at which the key (or an equivalent)
         .               /// exists, or the edge index where the key belongs, starting from a particular index.
         .               ///
         .               /// The result is meaningful only if the tree is ordered by key, like the tree
         .               /// in a `BTreeMap` is.
         .               ///
         .               /// # Safety
         .               /// `start_index` must be a valid edge index for the node.
    42,758 ( 0.00%)      unsafe fn find_key_index<Q: ?Sized>(&self, key: &Q, start_index: usize) -> IndexResult
         .               where
         .                   Q: Ord,
         .                   K: Borrow<Q>,
         .               {
    25,693 ( 0.00%)          let node = self.reborrow();
    38,562 ( 0.00%)          let keys = node.keys();
         .                   debug_assert!(start_index <= keys.len());
 3,628,349 ( 0.08%)          for (offset, k) in unsafe { keys.get_unchecked(start_index..) }.iter().enumerate() {
14,277,108 ( 0.30%)              match key.cmp(k.borrow()) {
         .                           Ordering::Greater => {}
    18,882 ( 0.00%)                  Ordering::Equal => return IndexResult::KV(start_index + offset),
        45 ( 0.00%)                  Ordering::Less => return IndexResult::Edge(start_index + offset),
         .                       }
         .                   }
     8,648 ( 0.00%)          IndexResult::Edge(keys.len())
    32,135 ( 0.00%)      }
         .           
         .               /// Finds an edge index in the node delimiting the lower bound of a range.
         .               /// Also returns the lower bound to be used for continuing the search in
         .               /// the matching child node, if `self` is an internal node.
         .               ///
         .               /// The result is meaningful only if the tree is ordered by key.
         .               fn find_lower_bound_index<'r, Q>(
         .                   &self,
-- line 226 ----------------------------------------

 1,996,825 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/search.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs
--------------------------------------------------------------------------------
Ir                  

-- line 180 ----------------------------------------
         .           /// assert_eq!(v, &[0.into()]);
         .           ///
         .           /// // Ensure that the last item was dropped.
         .           /// assert!(weak.upgrade().is_none());
         .           /// ```
         .           #[stable(feature = "drop_in_place", since = "1.8.0")]
         .           #[lang = "drop_in_place"]
         .           #[allow(unconditional_recursion)]
52,814,747 ( 1.10%)  pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
         .               // Code here does not matter - this is replaced by the
         .               // real drop glue by the compiler.
         .           
         .               // SAFETY: see comment above
         .               unsafe { drop_in_place(to_drop) }
         .           }
         .           
         .           /// Creates a null raw pointer.
-- line 196 ----------------------------------------
-- line 206 ----------------------------------------
         .           #[inline(always)]
         .           #[must_use]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           #[rustc_promotable]
         .           #[rustc_const_stable(feature = "const_ptr_null", since = "1.24.0")]
         .           #[rustc_diagnostic_item = "ptr_null"]
         .           pub const fn null<T>() -> *const T {
         .               0 as *const T
        41 ( 0.00%)  }
         .           
         .           /// Creates a null mutable raw pointer.
         .           ///
         .           /// # Examples
         .           ///
         .           /// ```
         .           /// use std::ptr;
         .           ///
-- line 222 ----------------------------------------
-- line 251 ----------------------------------------
         .           /// let x = [5, 6, 7];
         .           /// let raw_pointer = x.as_ptr();
         .           /// let slice = ptr::slice_from_raw_parts(raw_pointer, 3);
         .           /// assert_eq!(unsafe { &*slice }[2], 7);
         .           /// ```
         .           #[inline]
         .           #[stable(feature = "slice_from_raw_parts", since = "1.42.0")]
         .           #[rustc_const_unstable(feature = "const_slice_from_raw_parts", issue = "67456")]
 1,673,484 ( 0.03%)  pub const fn slice_from_raw_parts<T>(data: *const T, len: usize) -> *const [T] {
 2,091,855 ( 0.04%)      from_raw_parts(data.cast(), len)
   836,742 ( 0.02%)  }
         .           
         .           /// Performs the same functionality as [`slice_from_raw_parts`], except that a
         .           /// raw mutable slice is returned, as opposed to a raw immutable slice.
         .           ///
         .           /// See the documentation of [`slice_from_raw_parts`] for more details.
         .           ///
         .           /// This function is safe, but actually using the return value is unsafe.
         .           /// See the documentation of [`slice::from_raw_parts_mut`] for slice safety requirements.
-- line 269 ----------------------------------------
-- line 283 ----------------------------------------
         .           ///     (*slice)[2] = 99; // assign a value at an index in the slice
         .           /// };
         .           ///
         .           /// assert_eq!(unsafe { &*slice }[2], 99);
         .           /// ```
         .           #[inline]
         .           #[stable(feature = "slice_from_raw_parts", since = "1.42.0")]
         .           #[rustc_const_unstable(feature = "const_slice_from_raw_parts", issue = "67456")]
 1,297,040 ( 0.03%)  pub const fn slice_from_raw_parts_mut<T>(data: *mut T, len: usize) -> *mut [T] {
   486,390 ( 0.01%)      from_raw_parts_mut(data.cast(), len)
   324,260 ( 0.01%)  }
         .           
         .           /// Swaps the values at two mutable locations of the same type, without
         .           /// deinitializing either.
         .           ///
         .           /// But for the following two exceptions, this function is semantically
         .           /// equivalent to [`mem::swap`]:
         .           ///
         .           /// * It operates on raw pointers instead of references. When references are
-- line 301 ----------------------------------------
-- line 366 ----------------------------------------
         .               let mut tmp = MaybeUninit::<T>::uninit();
         .           
         .               // Perform the swap
         .               // SAFETY: the caller must guarantee that `x` and `y` are
         .               // valid for writes and properly aligned. `tmp` cannot be
         .               // overlapping either `x` or `y` because `tmp` was just allocated
         .               // on the stack as a separate allocated object.
         .               unsafe {
        11 ( 0.00%)          copy_nonoverlapping(x, tmp.as_mut_ptr(), 1);
        11 ( 0.00%)          copy(y, x, 1); // `x` and `y` may overlap
         .                   copy_nonoverlapping(tmp.as_ptr(), y, 1);
         .               }
         .           }
         .           
         .           /// Swaps `count * size_of::<T>()` bytes between the two regions of memory
         .           /// beginning at `x` and `y`. The two regions must *not* overlap.
         .           ///
         .           /// # Safety
-- line 383 ----------------------------------------
-- line 413 ----------------------------------------
         .           /// }
         .           ///
         .           /// assert_eq!(x, [7, 8, 3, 4]);
         .           /// assert_eq!(y, [1, 2, 9]);
         .           /// ```
         .           #[inline]
         .           #[stable(feature = "swap_nonoverlapping", since = "1.27.0")]
         .           #[rustc_const_unstable(feature = "const_swap", issue = "83163")]
        24 ( 0.00%)  pub const unsafe fn swap_nonoverlapping<T>(x: *mut T, y: *mut T, count: usize) {
         8 ( 0.00%)      let x = x as *mut u8;
         4 ( 0.00%)      let y = y as *mut u8;
        28 ( 0.00%)      let len = mem::size_of::<T>() * count;
         .               // SAFETY: the caller must guarantee that `x` and `y` are
         .               // valid for writes and properly aligned.
         8 ( 0.00%)      unsafe { swap_nonoverlapping_bytes(x, y, len) }
         8 ( 0.00%)  }
         .           
         .           #[inline]
         .           #[rustc_const_unstable(feature = "const_swap", issue = "83163")]
        20 ( 0.00%)  pub(crate) const unsafe fn swap_nonoverlapping_one<T>(x: *mut T, y: *mut T) {
         .               // NOTE(eddyb) SPIR-V's Logical addressing model doesn't allow for arbitrary
         .               // reinterpretation of values as (chunkable) byte arrays, and the loop in the
         .               // block optimization in `swap_nonoverlapping_bytes` is hard to rewrite back
         .               // into the (unoptimized) direct swapping implementation, so we disable it.
         .               // FIXME(eddyb) the block optimization also prevents MIR optimizations from
         .               // understanding `mem::replace`, `Option::take`, etc. - a better overall
         .               // solution might be to make `swap_nonoverlapping` into an intrinsic, which
         .               // a backend can choose to implement using the block optimization, or not.
         .               #[cfg(not(target_arch = "spirv"))]
         4 ( 0.00%)      {
         .                   // Only apply the block optimization in `swap_nonoverlapping_bytes` for types
         .                   // at least as large as the block size, to avoid pessimizing codegen.
         4 ( 0.00%)          if mem::size_of::<T>() >= 32 {
         .                       // SAFETY: the caller must uphold the safety contract for `swap_nonoverlapping`.
         8 ( 0.00%)              unsafe { swap_nonoverlapping(x, y, 1) };
         .                       return;
         .                   }
         .               }
         .           
         .               // Direct swapping, for the cases not going through the block optimization.
         .               // SAFETY: the caller must guarantee that `x` and `y` are valid
         .               // for writes, properly aligned, and non-overlapping.
         .               unsafe {
        34 ( 0.00%)          let z = read(x);
        18 ( 0.00%)          copy_nonoverlapping(y, x, 1);
         .                   write(y, z);
         .               }
        12 ( 0.00%)  }
         .           
         .           #[inline]
         .           #[rustc_const_unstable(feature = "const_swap", issue = "83163")]
        40 ( 0.00%)  const unsafe fn swap_nonoverlapping_bytes(x: *mut u8, y: *mut u8, len: usize) {
         .               // The approach here is to utilize simd to swap x & y efficiently. Testing reveals
         .               // that swapping either 32 bytes or 64 bytes at a time is most efficient for Intel
         .               // Haswell E processors. LLVM is more able to optimize if we give a struct a
         .               // #[repr(simd)], even if we don't actually use this struct directly.
         .               //
         .               // FIXME repr(simd) broken on emscripten and redox
         .               #[cfg_attr(not(any(target_os = "emscripten", target_os = "redox")), repr(simd))]
         .               struct Block(u64, u64, u64, u64);
         .               struct UnalignedBlock(u64, u64, u64, u64);
         .           
         4 ( 0.00%)      let block_size = mem::size_of::<Block>();
         .           
         .               // Loop through x & y, copying them `Block` at a time
         .               // The optimizer should unroll the loop fully for most types
         .               // N.B. We can't use a for loop as the `range` impl calls `mem::swap` recursively
         4 ( 0.00%)      let mut i = 0;
        72 ( 0.00%)      while i + block_size <= len {
         .                   // Create some uninitialized memory as scratch space
         .                   // Declaring `t` here avoids aligning the stack when this loop is unused
         .                   let mut t = mem::MaybeUninit::<Block>::uninit();
        12 ( 0.00%)          let t = t.as_mut_ptr() as *mut u8;
         .           
         .                   // SAFETY: As `i < len`, and as the caller must guarantee that `x` and `y` are valid
         .                   // for `len` bytes, `x + i` and `y + i` must be valid addresses, which fulfills the
         .                   // safety contract for `add`.
         .                   //
         .                   // Also, the caller must guarantee that `x` and `y` are valid for writes, properly aligned,
         .                   // and non-overlapping, which fulfills the safety contract for `copy_nonoverlapping`.
         .                   unsafe {
        24 ( 0.00%)              let x = x.add(i);
        24 ( 0.00%)              let y = y.add(i);
         .           
         .                       // Swap a block of bytes of x & y, using t as a temporary buffer
         .                       // This should be optimized into efficient SIMD operations where available
         8 ( 0.00%)              copy_nonoverlapping(x, t, block_size);
         8 ( 0.00%)              copy_nonoverlapping(y, x, block_size);
         8 ( 0.00%)              copy_nonoverlapping(t, y, block_size);
         .                   }
        28 ( 0.00%)          i += block_size;
         .               }
         .           
        12 ( 0.00%)      if i < len {
         .                   // Swap any remaining bytes
         .                   let mut t = mem::MaybeUninit::<UnalignedBlock>::uninit();
         .                   let rem = len - i;
         .           
         .                   let t = t.as_mut_ptr() as *mut u8;
         .           
         .                   // SAFETY: see previous safety comment.
         .                   unsafe {
-- line 514 ----------------------------------------
-- line 515 ----------------------------------------
         .                       let x = x.add(i);
         .                       let y = y.add(i);
         .           
         .                       copy_nonoverlapping(x, t, rem);
         .                       copy_nonoverlapping(y, x, rem);
         .                       copy_nonoverlapping(t, y, rem);
         .                   }
         .               }
        12 ( 0.00%)  }
         .           
         .           /// Moves `src` into the pointed `dst`, returning the previous `dst` value.
         .           ///
         .           /// Neither value is dropped.
         .           ///
         .           /// This function is semantically equivalent to [`mem::replace`] except that it
         .           /// operates on raw pointers instead of references. When references are
         .           /// available, [`mem::replace`] should be preferred.
-- line 531 ----------------------------------------
-- line 677 ----------------------------------------
         .           ///
         .           /// assert_eq!(s, "bar");
         .           /// ```
         .           ///
         .           /// [valid]: self#safety
         .           #[inline]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           #[rustc_const_unstable(feature = "const_ptr_read", issue = "80377")]
 1,523,854 ( 0.03%)  pub const unsafe fn read<T>(src: *const T) -> T {
         .               // We are calling the intrinsics directly to avoid function calls in the generated code
         .               // as `intrinsics::copy_nonoverlapping` is a wrapper function.
         .               extern "rust-intrinsic" {
         .                   #[rustc_const_unstable(feature = "const_intrinsic_copy", issue = "80697")]
         .                   fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize);
         .               }
         .           
   337,353 ( 0.01%)      let mut tmp = MaybeUninit::<T>::uninit();
         .               // SAFETY: the caller must guarantee that `src` is valid for reads.
         .               // `src` cannot overlap `tmp` because `tmp` was just allocated on
         .               // the stack as a separate allocated object.
         .               //
         .               // Also, since we just wrote a valid value into `tmp`, it is guaranteed
         .               // to be properly initialized.
         .               unsafe {
 2,439,878 ( 0.05%)          copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);
15,915,325 ( 0.33%)          tmp.assume_init()
         .               }
   675,661 ( 0.01%)  }
         .           
         .           /// Reads the value from `src` without moving it. This leaves the
         .           /// memory in `src` unchanged.
         .           ///
         .           /// Unlike [`read`], `read_unaligned` works with unaligned pointers.
         .           ///
         .           /// # Safety
         .           ///
-- line 712 ----------------------------------------
-- line 872 ----------------------------------------
         .           /// swap(&mut foo, &mut bar);
         .           ///
         .           /// assert_eq!(foo, "bar");
         .           /// assert_eq!(bar, "foo");
         .           /// ```
         .           #[inline]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           #[rustc_const_unstable(feature = "const_ptr_write", issue = "86302")]
 1,929,685 ( 0.04%)  pub const unsafe fn write<T>(dst: *mut T, src: T) {
         .               // We are calling the intrinsics directly to avoid function calls in the generated code
         .               // as `intrinsics::copy_nonoverlapping` is a wrapper function.
         .               extern "rust-intrinsic" {
         .                   #[rustc_const_unstable(feature = "const_intrinsic_copy", issue = "80697")]
         .                   fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize);
         .               }
         .           
         .               // SAFETY: the caller must guarantee that `dst` is valid for writes.
         .               // `dst` cannot overlap `src` because the caller has mutable access
         .               // to `dst` while `src` is owned by this function.
         .               unsafe {
54,716,709 ( 1.14%)          copy_nonoverlapping(&src as *const T, dst, 1);
         .                   intrinsics::forget(src);
         .               }
 1,075,404 ( 0.02%)  }
         .           
         .           /// Overwrites a memory location with the given value without reading or
         .           /// dropping the old value.
         .           ///
         .           /// Unlike [`write()`], the pointer may be unaligned.
         .           ///
         .           /// `write_unaligned` does not drop the contents of `dst`. This is safe, but it
         .           /// could leak allocations or resources, so care should be taken not to overwrite
-- line 903 ----------------------------------------
-- line 1206 ----------------------------------------
         .               if stride == 1 {
         .                   // `stride == 1` case can be computed more simply through `-p (mod a)`, but doing so
         .                   // inhibits LLVM's ability to select instructions like `lea`. Instead we compute
         .                   //
         .                   //    round_up_to_next_alignment(p, a) - p
         .                   //
         .                   // which distributes operations around the load-bearing, but pessimizing `and` sufficiently
         .                   // for LLVM to be able to utilize the various optimizations it knows about.
    13,077 ( 0.00%)          return wrapping_sub(
    38,820 ( 0.00%)              wrapping_add(p as usize, a_minus_one) & wrapping_sub(0, a),
         .                       p as usize,
         .                   );
         .               }
         .           
         .               let pmoda = p as usize & a_minus_one;
         .               if pmoda == 0 {
         .                   // Already aligned. Yay!
         .                   return 0;
-- line 1223 ----------------------------------------
-- line 1348 ----------------------------------------
         .           /// assert!(std::ptr::eq(
         .           ///     &wrapper as &dyn Trait as *const dyn Trait as *const u8,
         .           ///     &wrapper.member as &dyn Trait as *const dyn Trait as *const u8,
         .           /// ));
         .           /// ```
         .           #[stable(feature = "ptr_eq", since = "1.17.0")]
         .           #[inline]
         .           pub fn eq<T: ?Sized>(a: *const T, b: *const T) -> bool {
 2,089,224 ( 0.04%)      a == b
         .           }
         .           
         .           /// Hash a raw pointer.
         .           ///
         .           /// This can be used to hash a `&T` reference (which coerces to `*const T` implicitly)
         .           /// by its address rather than the value it points to
         .           /// (which is what the `Hash for &T` implementation does).
         .           ///
-- line 1364 ----------------------------------------

10,563,332 ( 0.22%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/index.rs
--------------------------------------------------------------------------------
Ir                  

-- line 6 ----------------------------------------
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T, I> ops::Index<I> for [T]
         .           where
         .               I: SliceIndex<[T]>,
         .           {
         .               type Output = I::Output;
         .           
         .               #[inline]
 2,419,210 ( 0.05%)      fn index(&self, index: I) -> &I::Output {
   904,456 ( 0.02%)          index.index(self)
   602,978 ( 0.01%)      }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T, I> ops::IndexMut<I> for [T]
         .           where
         .               I: SliceIndex<[T]>,
         .           {
         .               #[inline]
    74,998 ( 0.00%)      fn index_mut(&mut self, index: I) -> &mut I::Output {
    40,902 ( 0.00%)          index.index_mut(self)
    27,268 ( 0.00%)      }
         .           }
         .           
         .           #[cfg_attr(not(feature = "panic_immediate_abort"), inline(never))]
         .           #[cfg_attr(feature = "panic_immediate_abort", inline)]
         .           #[cold]
         .           #[track_caller]
         .           fn slice_start_index_len_fail(index: usize, len: usize) -> ! {
         .               panic!("range start index {} out of range for slice of length {}", index, len);
-- line 35 ----------------------------------------
-- line 152 ----------------------------------------
         .               fn index_mut(self, slice: &mut T) -> &mut Self::Output;
         .           }
         .           
         .           #[stable(feature = "slice_get_slice_impls", since = "1.15.0")]
         .           unsafe impl<T> SliceIndex<[T]> for usize {
         .               type Output = T;
         .           
         .               #[inline]
     7,385 ( 0.00%)      fn get(self, slice: &[T]) -> Option<&T> {
         .                   // SAFETY: `self` is checked to be in bounds.
 1,754,152 ( 0.04%)          if self < slice.len() { unsafe { Some(&*self.get_unchecked(slice)) } } else { None }
     3,165 ( 0.00%)      }
         .           
         .               #[inline]
         .               fn get_mut(self, slice: &mut [T]) -> Option<&mut T> {
         .                   // SAFETY: `self` is checked to be in bounds.
   516,327 ( 0.01%)          if self < slice.len() { unsafe { Some(&mut *self.get_unchecked_mut(slice)) } } else { None }
         .               }
         .           
         .               #[inline]
   253,979 ( 0.01%)      unsafe fn get_unchecked(self, slice: *const [T]) -> *const T {
         .                   // SAFETY: the caller guarantees that `slice` is not dangling, so it
         .                   // cannot be longer than `isize::MAX`. They also guarantee that
         .                   // `self` is in bounds of `slice` so `self` cannot overflow an `isize`,
         .                   // so the call to `add` is safe.
    46,178 ( 0.00%)          unsafe { slice.as_ptr().add(self) }
    46,178 ( 0.00%)      }
         .           
         .               #[inline]
   182,210 ( 0.00%)      unsafe fn get_unchecked_mut(self, slice: *mut [T]) -> *mut T {
         .                   // SAFETY: see comments for `get_unchecked` above.
         .                   unsafe { slice.as_mut_ptr().add(self) }
    26,030 ( 0.00%)      }
         .           
         .               #[inline]
        88 ( 0.00%)      fn index(self, slice: &[T]) -> &T {
         .                   // N.B., use intrinsic indexing
17,550,986 ( 0.37%)          &(*slice)[self]
        22 ( 0.00%)      }
         .           
         .               #[inline]
         .               fn index_mut(self, slice: &mut [T]) -> &mut T {
         .                   // N.B., use intrinsic indexing
 5,755,554 ( 0.12%)          &mut (*slice)[self]
         .               }
         .           }
         .           
         .           #[stable(feature = "slice_get_slice_impls", since = "1.15.0")]
         .           unsafe impl<T> SliceIndex<[T]> for ops::Range<usize> {
         .               type Output = [T];
         .           
         .               #[inline]
   104,715 ( 0.00%)      fn get(self, slice: &[T]) -> Option<&[T]> {
   173,505 ( 0.00%)          if self.start > self.end || self.end > slice.len() {
         .                       None
         .                   } else {
         .                       // SAFETY: `self` is checked to be valid and in bounds above.
    69,810 ( 0.00%)              unsafe { Some(&*self.get_unchecked(slice)) }
         .                   }
    46,540 ( 0.00%)      }
         .           
         .               #[inline]
         .               fn get_mut(self, slice: &mut [T]) -> Option<&mut [T]> {
         .                   if self.start > self.end || self.end > slice.len() {
         .                       None
         .                   } else {
         .                       // SAFETY: `self` is checked to be valid and in bounds above.
         .                       unsafe { Some(&mut *self.get_unchecked_mut(slice)) }
         .                   }
         .               }
         .           
         .               #[inline]
 4,237,506 ( 0.09%)      unsafe fn get_unchecked(self, slice: *const [T]) -> *const [T] {
         .                   // SAFETY: the caller guarantees that `slice` is not dangling, so it
         .                   // cannot be longer than `isize::MAX`. They also guarantee that
         .                   // `self` is in bounds of `slice` so `self` cannot overflow an `isize`,
         .                   // so the call to `add` is safe.
 6,198,048 ( 0.13%)          unsafe { ptr::slice_from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start) }
   651,924 ( 0.01%)      }
         .           
         .               #[inline]
   273,072 ( 0.01%)      unsafe fn get_unchecked_mut(self, slice: *mut [T]) -> *mut [T] {
         .                   // SAFETY: see comments for `get_unchecked` above.
         .                   unsafe {
   275,638 ( 0.01%)              ptr::slice_from_raw_parts_mut(slice.as_mut_ptr().add(self.start), self.end - self.start)
         .                   }
    34,134 ( 0.00%)      }
         .           
         .               #[inline]
 3,014,610 ( 0.06%)      fn index(self, slice: &[T]) -> &[T] {
   752,455 ( 0.02%)          if self.start > self.end {
         .                       slice_index_order_fail(self.start, self.end);
 3,066,411 ( 0.06%)          } else if self.end > slice.len() {
         .                       slice_end_index_len_fail(self.end, slice.len());
         .                   }
         .                   // SAFETY: `self` is checked to be valid and in bounds above.
 1,205,844 ( 0.03%)          unsafe { &*self.get_unchecked(slice) }
   602,922 ( 0.01%)      }
         .           
         .               #[inline]
    68,180 ( 0.00%)      fn index_mut(self, slice: &mut [T]) -> &mut [T] {
    24,845 ( 0.00%)          if self.start > self.end {
         .                       slice_index_order_fail(self.start, self.end);
   105,765 ( 0.00%)          } else if self.end > slice.len() {
         .                       slice_end_index_len_fail(self.end, slice.len());
         .                   }
         .                   // SAFETY: `self` is checked to be valid and in bounds above.
    27,272 ( 0.00%)          unsafe { &mut *self.get_unchecked_mut(slice) }
    13,636 ( 0.00%)      }
         .           }
         .           
         .           #[stable(feature = "slice_get_slice_impls", since = "1.15.0")]
         .           unsafe impl<T> SliceIndex<[T]> for ops::RangeTo<usize> {
         .               type Output = [T];
         .           
         .               #[inline]
         .               fn get(self, slice: &[T]) -> Option<&[T]> {
-- line 268 ----------------------------------------
-- line 270 ----------------------------------------
         .               }
         .           
         .               #[inline]
         .               fn get_mut(self, slice: &mut [T]) -> Option<&mut [T]> {
         .                   (0..self.end).get_mut(slice)
         .               }
         .           
         .               #[inline]
    38,562 ( 0.00%)      unsafe fn get_unchecked(self, slice: *const [T]) -> *const [T] {
         .                   // SAFETY: the caller has to uphold the safety contract for `get_unchecked`.
    44,989 ( 0.00%)          unsafe { (0..self.end).get_unchecked(slice) }
    12,854 ( 0.00%)      }
         .           
         .               #[inline]
    61,494 ( 0.00%)      unsafe fn get_unchecked_mut(self, slice: *mut [T]) -> *mut [T] {
         .                   // SAFETY: the caller has to uphold the safety contract for `get_unchecked_mut`.
    71,743 ( 0.00%)          unsafe { (0..self.end).get_unchecked_mut(slice) }
    20,498 ( 0.00%)      }
         .           
         .               #[inline]
 2,093,140 ( 0.04%)      fn index(self, slice: &[T]) -> &[T] {
 2,093,140 ( 0.04%)          (0..self.end).index(slice)
   598,040 ( 0.01%)      }
         .           
         .               #[inline]
    47,712 ( 0.00%)      fn index_mut(self, slice: &mut [T]) -> &mut [T] {
    47,712 ( 0.00%)          (0..self.end).index_mut(slice)
    13,632 ( 0.00%)      }
         .           }
         .           
         .           #[stable(feature = "slice_get_slice_impls", since = "1.15.0")]
         .           unsafe impl<T> SliceIndex<[T]> for ops::RangeFrom<usize> {
         .               type Output = [T];
         .           
         .               #[inline]
         .               fn get(self, slice: &[T]) -> Option<&[T]> {
-- line 305 ----------------------------------------
-- line 307 ----------------------------------------
         .               }
         .           
         .               #[inline]
         .               fn get_mut(self, slice: &mut [T]) -> Option<&mut [T]> {
         .                   (self.start..slice.len()).get_mut(slice)
         .               }
         .           
         .               #[inline]
    83,707 ( 0.00%)      unsafe fn get_unchecked(self, slice: *const [T]) -> *const [T] {
         .                   // SAFETY: the caller has to uphold the safety contract for `get_unchecked`.
    57,951 ( 0.00%)          unsafe { (self.start..slice.len()).get_unchecked(slice) }
    12,878 ( 0.00%)      }
         .           
         .               #[inline]
         .               unsafe fn get_unchecked_mut(self, slice: *mut [T]) -> *mut [T] {
         .                   // SAFETY: the caller has to uphold the safety contract for `get_unchecked_mut`.
         .                   unsafe { (self.start..slice.len()).get_unchecked_mut(slice) }
         .               }
         .           
         .               #[inline]
        96 ( 0.00%)      fn index(self, slice: &[T]) -> &[T] {
   379,197 ( 0.01%)          if self.start > slice.len() {
         .                       slice_start_index_len_fail(self.start, slice.len());
         .                   }
         .                   // SAFETY: `self` is checked to be valid and in bounds above.
        48 ( 0.00%)          unsafe { &*self.get_unchecked(slice) }
        24 ( 0.00%)      }
         .           
         .               #[inline]
         .               fn index_mut(self, slice: &mut [T]) -> &mut [T] {
    12,665 ( 0.00%)          if self.start > slice.len() {
         .                       slice_start_index_len_fail(self.start, slice.len());
         .                   }
         .                   // SAFETY: `self` is checked to be valid and in bounds above.
         .                   unsafe { &mut *self.get_unchecked_mut(slice) }
         .               }
         .           }
         .           
         .           #[stable(feature = "slice_get_slice_impls", since = "1.15.0")]
-- line 345 ----------------------------------------
-- line 362 ----------------------------------------
         .               }
         .           
         .               #[inline]
         .               unsafe fn get_unchecked_mut(self, slice: *mut [T]) -> *mut [T] {
         .                   slice
         .               }
         .           
         .               #[inline]
        30 ( 0.00%)      fn index(self, slice: &[T]) -> &[T] {
         .                   slice
        10 ( 0.00%)      }
         .           
         .               #[inline]
    40,896 ( 0.00%)      fn index_mut(self, slice: &mut [T]) -> &mut [T] {
         .                   slice
    13,632 ( 0.00%)      }
         .           }
         .           
         .           #[stable(feature = "inclusive_range", since = "1.26.0")]
         .           unsafe impl<T> SliceIndex<[T]> for ops::RangeInclusive<usize> {
         .               type Output = [T];
         .           
         .               #[inline]
         .               fn get(self, slice: &[T]) -> Option<&[T]> {
-- line 385 ----------------------------------------
-- line 515 ----------------------------------------
         .           /// use std::slice;
         .           ///
         .           /// slice::range(1..=usize::MAX, ..3);
         .           /// ```
         .           ///
         .           /// [`Index::index`]: ops::Index::index
         .           #[track_caller]
         .           #[unstable(feature = "slice_range", issue = "76393")]
    39,272 ( 0.00%)  pub fn range<R>(range: R, bounds: ops::RangeTo<usize>) -> ops::Range<usize>
         .           where
         .               R: ops::RangeBounds<usize>,
         .           {
     9,818 ( 0.00%)      let len = bounds.end;
         .           
    78,544 ( 0.00%)      let start: ops::Bound<&usize> = range.start_bound();
    88,362 ( 0.00%)      let start = match start {
         .                   ops::Bound::Included(&start) => start,
         .                   ops::Bound::Excluded(start) => {
         .                       start.checked_add(1).unwrap_or_else(|| slice_start_index_overflow_fail())
         .                   }
     9,818 ( 0.00%)          ops::Bound::Unbounded => 0,
         .               };
         .           
    78,544 ( 0.00%)      let end: ops::Bound<&usize> = range.end_bound();
    88,362 ( 0.00%)      let end = match end {
         .                   ops::Bound::Included(end) => {
         .                       end.checked_add(1).unwrap_or_else(|| slice_end_index_overflow_fail())
         .                   }
         .                   ops::Bound::Excluded(&end) => end,
     9,818 ( 0.00%)          ops::Bound::Unbounded => len,
         .               };
         .           
    89,836 ( 0.00%)      if start > end {
         .                   slice_index_order_fail(start, end);
         .               }
    31,345 ( 0.00%)      if end > len {
         .                   slice_end_index_len_fail(end, len);
         .               }
         .           
    39,272 ( 0.00%)      ops::Range { start, end }
    49,090 ( 0.00%)  }
         .           
         .           /// Convert pair of `ops::Bound`s into `ops::Range` without performing any bounds checking and (in debug) overflow checking
         .           fn into_range_unchecked(
         .               len: usize,
         .               (start, end): (ops::Bound<usize>, ops::Bound<usize>),
         .           ) -> ops::Range<usize> {
         .               use ops::Bound;
         .               let start = match start {
-- line 563 ----------------------------------------

11,010,709 ( 0.23%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/index.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/string.rs
--------------------------------------------------------------------------------
Ir                 

-- line 283 ----------------------------------------
        .           /// Here, there's no need to allocate more memory inside the loop.
        .           ///
        .           /// [str]: prim@str "str"
        .           /// [`str`]: prim@str "str"
        .           /// [`&str`]: prim@str "&str"
        .           /// [Deref]: core::ops::Deref "ops::Deref"
        .           /// [`Deref`]: core::ops::Deref "ops::Deref"
        .           /// [`as_str()`]: String::as_str
   25,896 ( 0.00%)  #[derive(PartialOrd, Eq, Ord)]
        .           #[cfg_attr(not(test), rustc_diagnostic_item = "String")]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           pub struct String {
   38,844 ( 0.00%)      vec: Vec<u8>,
        .           }
        .           
        .           /// A possible error value when converting a `String` from a UTF-8 byte vector.
        .           ///
        .           /// This type is the error type for the [`from_utf8`] method on [`String`]. It
        .           /// is designed in such a way to carefully avoid reallocations: the
        .           /// [`into_bytes`] method will give back the byte vector that was used in the
        .           /// conversion attempt.
-- line 303 ----------------------------------------
-- line 374 ----------------------------------------
        .               ///
        .               /// ```
        .               /// let s = String::new();
        .               /// ```
        .               #[inline]
        .               #[rustc_const_stable(feature = "const_string_new", since = "1.39.0")]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[must_use]
   34,608 ( 0.00%)      pub const fn new() -> String {
   98,334 ( 0.00%)          String { vec: Vec::new() }
   23,072 ( 0.00%)      }
        .           
        .               /// Creates a new empty `String` with a particular capacity.
        .               ///
        .               /// `String`s have an internal buffer to hold their data. The capacity is
        .               /// the length of that buffer, and can be queried with the [`capacity`]
        .               /// method. This method creates an empty `String`, but one with an initial
        .               /// buffer that can hold `capacity` bytes. This is useful when you may be
        .               /// appending a bunch of data to the `String`, reducing the number of
-- line 392 ----------------------------------------
-- line 420 ----------------------------------------
        .               /// // ...but this may make the string reallocate
        .               /// s.push('a');
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[must_use]
        .               pub fn with_capacity(capacity: usize) -> String {
   49,505 ( 0.00%)          String { vec: Vec::with_capacity(capacity) }
        .               }
        .           
        .               // HACK(japaric): with cfg(test) the inherent `[T]::to_vec` method, which is
        .               // required for this method definition, is not available. Since we don't
        .               // require this method for testing purposes, I'll just stub it
        .               // NB see the slice::hack module in slice.rs for more information
        .               #[inline]
        .               #[cfg(test)]
-- line 436 ----------------------------------------
-- line 492 ----------------------------------------
        .               ///
        .               /// [`from_utf8_unchecked`]: String::from_utf8_unchecked
        .               /// [`Vec<u8>`]: crate::vec::Vec "Vec"
        .               /// [`&str`]: prim@str "&str"
        .               /// [`into_bytes`]: String::into_bytes
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn from_utf8(vec: Vec<u8>) -> Result<String, FromUtf8Error> {
      225 ( 0.00%)          match str::from_utf8(&vec) {
        .                       Ok(..) => Ok(String { vec }),
        .                       Err(e) => Err(FromUtf8Error { bytes: vec, error: e }),
        .                   }
        .               }
        .           
        .               /// Converts a slice of bytes to a string, including invalid characters.
        .               ///
        .               /// Strings are made of bytes ([`u8`]), and a slice of bytes
-- line 508 ----------------------------------------
-- line 550 ----------------------------------------
        .               /// let input = b"Hello \xF0\x90\x80World";
        .               /// let output = String::from_utf8_lossy(input);
        .               ///
        .               /// assert_eq!("Hello �World", output);
        .               /// ```
        .               #[must_use]
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
       99 ( 0.00%)      pub fn from_utf8_lossy(v: &[u8]) -> Cow<'_, str> {
      110 ( 0.00%)          let mut iter = lossy::Utf8Lossy::from_bytes(v).chunks();
        .           
       55 ( 0.00%)          let first_valid = if let Some(chunk) = iter.next() {
        .                       let lossy::Utf8LossyChunk { valid, broken } = chunk;
       11 ( 0.00%)              if broken.is_empty() {
        .                           debug_assert_eq!(valid.len(), v.len());
       11 ( 0.00%)                  return Cow::Borrowed(valid);
        .                       }
        .                       valid
        .                   } else {
        .                       return Cow::Borrowed("");
        .                   };
        .           
        .                   const REPLACEMENT: &str = "\u{FFFD}";
        .           
-- line 573 ----------------------------------------
-- line 578 ----------------------------------------
        .                   for lossy::Utf8LossyChunk { valid, broken } in iter {
        .                       res.push_str(valid);
        .                       if !broken.is_empty() {
        .                           res.push_str(REPLACEMENT);
        .                       }
        .                   }
        .           
        .                   Cow::Owned(res)
       88 ( 0.00%)      }
        .           
        .               /// Decode a UTF-16–encoded vector `v` into a `String`, returning [`Err`]
        .               /// if `v` contains any invalid data.
        .               ///
        .               /// # Examples
        .               ///
        .               /// Basic usage:
        .               ///
-- line 594 ----------------------------------------
-- line 761 ----------------------------------------
        .               ///     String::from_utf8_unchecked(sparkle_heart)
        .               /// };
        .               ///
        .               /// assert_eq!("💖", sparkle_heart);
        .               /// ```
        .               #[inline]
        .               #[must_use]
        .               #[stable(feature = "rust1", since = "1.0.0")]
   15,050 ( 0.00%)      pub unsafe fn from_utf8_unchecked(bytes: Vec<u8>) -> String {
   97,021 ( 0.00%)          String { vec: bytes }
   15,050 ( 0.00%)      }
        .           
        .               /// Converts a `String` into a byte vector.
        .               ///
        .               /// This consumes the `String`, so we do not need to copy its contents.
        .               ///
        .               /// # Examples
        .               ///
        .               /// Basic usage:
-- line 779 ----------------------------------------
-- line 800 ----------------------------------------
        .               /// ```
        .               /// let s = String::from("foo");
        .               ///
        .               /// assert_eq!("foo", s.as_str());
        .               /// ```
        .               #[inline]
        .               #[must_use]
        .               #[stable(feature = "string_as_str", since = "1.7.0")]
      414 ( 0.00%)      pub fn as_str(&self) -> &str {
      621 ( 0.00%)          self
      414 ( 0.00%)      }
        .           
        .               /// Converts a `String` into a mutable string slice.
        .               ///
        .               /// # Examples
        .               ///
        .               /// Basic usage:
        .               ///
        .               /// ```
-- line 818 ----------------------------------------
-- line 841 ----------------------------------------
        .               ///
        .               /// s.push_str("bar");
        .               ///
        .               /// assert_eq!("foobar", s);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
    4,375 ( 0.00%)      pub fn push_str(&mut self, string: &str) {
      625 ( 0.00%)          self.vec.extend_from_slice(string.as_bytes())
    1,250 ( 0.00%)      }
        .           
        .               /// Copies elements from `src` range to the end of the string.
        .               ///
        .               /// ## Panics
        .               ///
        .               /// Panics if the starting point or end point do not lie on a [`char`]
        .               /// boundary, or if they're out of bounds.
        .               ///
-- line 859 ----------------------------------------
-- line 946 ----------------------------------------
        .               /// s.reserve(8);
        .               ///
        .               /// // ... doesn't actually increase.
        .               /// assert_eq!(10, s.capacity());
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
    2,469 ( 0.00%)      pub fn reserve(&mut self, additional: usize) {
      823 ( 0.00%)          self.vec.reserve(additional)
    1,646 ( 0.00%)      }
        .           
        .               /// Ensures that this `String`'s capacity is `additional` bytes
        .               /// larger than its length.
        .               ///
        .               /// Consider using the [`reserve`] method unless you absolutely know
        .               /// better than the allocator.
        .               ///
        .               /// [`reserve`]: String::reserve
-- line 964 ----------------------------------------
-- line 1138 ----------------------------------------
        .               /// s.push('2');
        .               /// s.push('3');
        .               ///
        .               /// assert_eq!("abc123", s);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
5,522,968 ( 0.12%)      pub fn push(&mut self, ch: char) {
1,010,528 ( 0.02%)          match ch.len_utf8() {
1,010,488 ( 0.02%)              1 => self.vec.push(ch as u8),
      149 ( 0.00%)              _ => self.vec.extend_from_slice(ch.encode_utf8(&mut [0; 4]).as_bytes()),
        .                   }
3,423,524 ( 0.07%)      }
        .           
        .               /// Returns a byte slice of this `String`'s contents.
        .               ///
        .               /// The inverse of this method is [`from_utf8`].
        .               ///
        .               /// [`from_utf8`]: String::from_utf8
        .               ///
        .               /// # Examples
-- line 1159 ----------------------------------------
-- line 1163 ----------------------------------------
        .               /// ```
        .               /// let s = String::from("hello");
        .               ///
        .               /// assert_eq!(&[104, 101, 108, 108, 111], s.as_bytes());
        .               /// ```
        .               #[inline]
        .               #[must_use]
        .               #[stable(feature = "rust1", since = "1.0.0")]
       78 ( 0.00%)      pub fn as_bytes(&self) -> &[u8] {
      117 ( 0.00%)          &self.vec
       78 ( 0.00%)      }
        .           
        .               /// Shortens this `String` to the specified length.
        .               ///
        .               /// If `new_len` is greater than the string's current length, this has no
        .               /// effect.
        .               ///
        .               /// Note that this method has no effect on the allocated capacity
        .               /// of the string
-- line 1181 ----------------------------------------
-- line 1542 ----------------------------------------
        .               ///
        .               /// let fancy_f = String::from("ƒoo");
        .               /// assert_eq!(fancy_f.len(), 4);
        .               /// assert_eq!(fancy_f.chars().count(), 3);
        .               /// ```
        .               #[inline]
        .               #[must_use]
        .               #[stable(feature = "rust1", since = "1.0.0")]
  600,384 ( 0.01%)      pub fn len(&self) -> usize {
  600,423 ( 0.01%)          self.vec.len()
  600,384 ( 0.01%)      }
        .           
        .               /// Returns `true` if this `String` has a length of zero, and `false` otherwise.
        .               ///
        .               /// # Examples
        .               ///
        .               /// Basic usage:
        .               ///
        .               /// ```
-- line 1560 ----------------------------------------
-- line 1563 ----------------------------------------
        .               ///
        .               /// v.push('a');
        .               /// assert!(!v.is_empty());
        .               /// ```
        .               #[inline]
        .               #[must_use]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn is_empty(&self) -> bool {
       11 ( 0.00%)          self.len() == 0
        .               }
        .           
        .               /// Splits the string into two at the given byte index.
        .               ///
        .               /// Returns a newly allocated `String`. `self` contains bytes `[0, at)`, and
        .               /// the returned `String` contains bytes `[at, len)`. `at` must be on the
        .               /// boundary of a UTF-8 code point.
        .               ///
-- line 1579 ----------------------------------------
-- line 1747 ----------------------------------------
        .               /// let s = String::from("hello");
        .               ///
        .               /// let b = s.into_boxed_str();
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "box_str", since = "1.4.0")]
        .               #[must_use = "`self` will be dropped if the result is not used"]
        .               #[inline]
       36 ( 0.00%)      pub fn into_boxed_str(self) -> Box<str> {
      432 ( 0.00%)          let slice = self.vec.into_boxed_slice();
      108 ( 0.00%)          unsafe { from_boxed_utf8_unchecked(slice) }
       72 ( 0.00%)      }
        .           }
        .           
        .           impl FromUtf8Error {
        .               /// Returns a slice of [`u8`]s bytes that were attempted to convert to a `String`.
        .               ///
        .               /// # Examples
        .               ///
        .               /// Basic usage:
-- line 1766 ----------------------------------------
-- line 1845 ----------------------------------------
        .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   fmt::Display::fmt("invalid utf-16: lone surrogate found", f)
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl Clone for String {
   95,082 ( 0.00%)      fn clone(&self) -> Self {
   47,541 ( 0.00%)          String { vec: self.vec.clone() }
  110,929 ( 0.00%)      }
        .           
        .               fn clone_from(&mut self, source: &Self) {
        .                   self.vec.clone_from(&source.vec);
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl FromIterator<char> for String {
    6,318 ( 0.00%)      fn from_iter<I: IntoIterator<Item = char>>(iter: I) -> String {
    3,292 ( 0.00%)          let mut buf = String::new();
   16,460 ( 0.00%)          buf.extend(iter);
        .                   buf
    4,130 ( 0.00%)      }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "string_from_iter_by_ref", since = "1.17.0")]
        .           impl<'a> FromIterator<&'a char> for String {
        .               fn from_iter<I: IntoIterator<Item = &'a char>>(iter: I) -> String {
        .                   let mut buf = String::new();
        .                   buf.extend(iter);
-- line 1877 ----------------------------------------
-- line 1936 ----------------------------------------
        .                       }
        .                   }
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl Extend<char> for String {
    2,469 ( 0.00%)      fn extend<I: IntoIterator<Item = char>>(&mut self, iter: I) {
  406,419 ( 0.01%)          let iterator = iter.into_iter();
  401,988 ( 0.01%)          let (lower_bound, _) = iterator.size_hint();
    1,646 ( 0.00%)          self.reserve(lower_bound);
  372,570 ( 0.01%)          iterator.for_each(move |c| self.push(c));
    2,469 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn extend_one(&mut self, c: char) {
        .                   self.push(c);
        .               }
        .           
        .               #[inline]
        .               fn extend_reserve(&mut self, additional: usize) {
-- line 1957 ----------------------------------------
-- line 2067 ----------------------------------------
        .               fn strip_suffix_of(self, haystack: &'a str) -> Option<&'a str> {
        .                   self[..].strip_suffix_of(haystack)
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl PartialEq for String {
        .               #[inline]
   14,504 ( 0.00%)      fn eq(&self, other: &String) -> bool {
   36,260 ( 0.00%)          PartialEq::eq(&self[..], &other[..])
   14,504 ( 0.00%)      }
        .               #[inline]
        .               fn ne(&self, other: &String) -> bool {
        .                   PartialEq::ne(&self[..], &other[..])
        .               }
        .           }
        .           
        .           macro_rules! impl_eq {
        .               ($lhs:ty, $rhs: ty) => {
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[allow(unused_lifetimes)]
        .                   impl<'a, 'b> PartialEq<$rhs> for $lhs {
        .                       #[inline]
    6,728 ( 0.00%)              fn eq(&self, other: &$rhs) -> bool {
   20,184 ( 0.00%)                  PartialEq::eq(&self[..], &other[..])
    6,728 ( 0.00%)              }
        .                       #[inline]
        .                       fn ne(&self, other: &$rhs) -> bool {
        .                           PartialEq::ne(&self[..], &other[..])
        .                       }
        .                   }
        .           
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[allow(unused_lifetimes)]
-- line 2100 ----------------------------------------
-- line 2128 ----------------------------------------
        .               fn default() -> String {
        .                   String::new()
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl fmt::Display for String {
        .               #[inline]
    8,482 ( 0.00%)      fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
   11,330 ( 0.00%)          fmt::Display::fmt(&**self, f)
    7,656 ( 0.00%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl fmt::Debug for String {
        .               #[inline]
        .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   fmt::Debug::fmt(&**self, f)
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl hash::Hash for String {
        .               #[inline]
       64 ( 0.00%)      fn hash<H: hash::Hasher>(&self, hasher: &mut H) {
    3,590 ( 0.00%)          (**self).hash(hasher)
       32 ( 0.00%)      }
        .           }
        .           
        .           /// Implements the `+` operator for concatenating two strings.
        .           ///
        .           /// This consumes the `String` on the left-hand side and re-uses its buffer (growing it if
        .           /// necessary). This is done to avoid allocating a new `String` and copying the entire contents on
        .           /// every operation, which would lead to *O*(*n*^2) running time when building an *n*-byte string by
        .           /// repeated concatenation.
-- line 2162 ----------------------------------------
-- line 2194 ----------------------------------------
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl Add<&str> for String {
        .               type Output = String;
        .           
        .               #[inline]
        .               fn add(mut self, other: &str) -> String {
        .                   self.push_str(other);
        2 ( 0.00%)          self
        .               }
        .           }
        .           
        .           /// Implements the `+=` operator for appending to a `String`.
        .           ///
        .           /// This has the same behavior as the [`push_str`][String::push_str] method.
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "stringaddassign", since = "1.12.0")]
        .           impl AddAssign<&str> for String {
        .               #[inline]
      752 ( 0.00%)      fn add_assign(&mut self, other: &str) {
      188 ( 0.00%)          self.push_str(other);
      376 ( 0.00%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl ops::Index<ops::Range<usize>> for String {
        .               type Output = str;
        .           
        .               #[inline]
        .               fn index(&self, index: ops::Range<usize>) -> &str {
-- line 2223 ----------------------------------------
-- line 2233 ----------------------------------------
        .                   &self[..][index]
        .               }
        .           }
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl ops::Index<ops::RangeFrom<usize>> for String {
        .               type Output = str;
        .           
        .               #[inline]
    6,994 ( 0.00%)      fn index(&self, index: ops::RangeFrom<usize>) -> &str {
    1,308 ( 0.00%)          &self[..][index]
    5,686 ( 0.00%)      }
        .           }
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl ops::Index<ops::RangeFull> for String {
        .               type Output = str;
        .           
        .               #[inline]
   38,466 ( 0.00%)      fn index(&self, _index: ops::RangeFull) -> &str {
  115,398 ( 0.00%)          unsafe { str::from_utf8_unchecked(&self.vec) }
   38,466 ( 0.00%)      }
        .           }
        .           #[stable(feature = "inclusive_range", since = "1.26.0")]
        .           impl ops::Index<ops::RangeInclusive<usize>> for String {
        .               type Output = str;
        .           
        .               #[inline]
        .               fn index(&self, index: ops::RangeInclusive<usize>) -> &str {
        .                   Index::index(&**self, index)
-- line 2260 ----------------------------------------
-- line 2313 ----------------------------------------
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl ops::Deref for String {
        .               type Target = str;
        .           
        .               #[inline]
   42,172 ( 0.00%)      fn deref(&self) -> &str {
  126,516 ( 0.00%)          unsafe { str::from_utf8_unchecked(&self.vec) }
   42,172 ( 0.00%)      }
        .           }
        .           
        .           #[stable(feature = "derefmut_for_string", since = "1.3.0")]
        .           impl ops::DerefMut for String {
        .               #[inline]
        .               fn deref_mut(&mut self) -> &mut str {
        .                   unsafe { str::from_utf8_unchecked_mut(&mut *self.vec) }
        .               }
-- line 2331 ----------------------------------------
-- line 2386 ----------------------------------------
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T: fmt::Display + ?Sized> ToString for T {
        .               // A common guideline is to not inline generic functions. However,
        .               // removing `#[inline]` from this method causes non-negligible regressions.
        .               // See <https://github.com/rust-lang/rust/pull/74852>, the last attempt
        .               // to try to remove it.
        .               #[inline]
      930 ( 0.00%)      default fn to_string(&self) -> String {
      155 ( 0.00%)          let mut buf = String::new();
   20,114 ( 0.00%)          let mut formatter = core::fmt::Formatter::new(&mut buf);
        .                   // Bypass format_args!() to avoid write_str with zero-length strs
    6,847 ( 0.00%)          fmt::Display::fmt(self, &mut formatter)
        .                       .expect("a Display implementation returned an error unexpectedly");
        .                   buf
      310 ( 0.00%)      }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "char_to_string_specialization", since = "1.46.0")]
        .           impl ToString for char {
        .               #[inline]
        .               fn to_string(&self) -> String {
        .                   String::from(self.encode_utf8(&mut [0; 4]))
-- line 2409 ----------------------------------------
-- line 2494 ----------------------------------------
        .               fn as_mut(&mut self) -> &mut str {
        .                   self
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl AsRef<[u8]> for String {
        .               #[inline]
       18 ( 0.00%)      fn as_ref(&self) -> &[u8] {
       27 ( 0.00%)          self.as_bytes()
       18 ( 0.00%)      }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl From<&str> for String {
        .               /// Converts a `&str` into a [`String`].
        .               ///
        .               /// The result is allocated on the heap.
        .               #[inline]
   28,520 ( 0.00%)      fn from(s: &str) -> String {
    5,704 ( 0.00%)          s.to_owned()
   11,408 ( 0.00%)      }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "from_mut_str_for_string", since = "1.44.0")]
        .           impl From<&mut str> for String {
        .               /// Converts a `&mut str` into a [`String`].
        .               ///
        .               /// The result is allocated on the heap.
-- line 2524 ----------------------------------------
-- line 2553 ----------------------------------------
        .               ///
        .               /// ```
        .               /// let s1: String = String::from("hello world");
        .               /// let s2: Box<str> = s1.into_boxed_str();
        .               /// let s3: String = String::from(s2);
        .               ///
        .               /// assert_eq!("hello world", s3)
        .               /// ```
        9 ( 0.00%)      fn from(s: Box<str>) -> String {
        .                   s.into_string()
        9 ( 0.00%)      }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "box_from_str", since = "1.20.0")]
        .           impl From<String> for Box<str> {
        .               /// Converts the given [`String`] to a boxed `str` slice that is owned.
        .               ///
        .               /// # Examples
-- line 2571 ----------------------------------------
-- line 2620 ----------------------------------------
        .               /// ```
        .               /// # use std::borrow::Cow;
        .               /// assert_eq!(Cow::from("eggplant"), Cow::Borrowed("eggplant"));
        .               /// ```
        .               ///
        .               /// [`Borrowed`]: crate::borrow::Cow::Borrowed "borrow::Cow::Borrowed"
        .               #[inline]
        .               fn from(s: &'a str) -> Cow<'a, str> {
   20,694 ( 0.00%)          Cow::Borrowed(s)
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<'a> From<String> for Cow<'a, str> {
        .               /// Converts a [`String`] into an [`Owned`] variant.
        .               /// No heap allocation is performed, and the string
-- line 2636 ----------------------------------------
-- line 2643 ----------------------------------------
        .               /// let s = "eggplant".to_string();
        .               /// let s2 = "eggplant".to_string();
        .               /// assert_eq!(Cow::from(s), Cow::<'static, str>::Owned(s2));
        .               /// ```
        .               ///
        .               /// [`Owned`]: crate::borrow::Cow::Owned "borrow::Cow::Owned"
        .               #[inline]
        .               fn from(s: String) -> Cow<'a, str> {
    8,895 ( 0.00%)          Cow::Owned(s)
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "cow_from_string_ref", since = "1.28.0")]
        .           impl<'a> From<&'a String> for Cow<'a, str> {
        .               /// Converts a [`String`] reference into a [`Borrowed`] variant.
        .               /// No heap allocation is performed, and the string
-- line 2659 ----------------------------------------
-- line 2709 ----------------------------------------
        .               /// ```
        .               /// let s1 = String::from("hello world");
        .               /// let v1 = Vec::from(s1);
        .               ///
        .               /// for b in v1 {
        .               ///     println!("{}", b);
        .               /// }
        .               /// ```
        3 ( 0.00%)      fn from(string: String) -> Vec<u8> {
       12 ( 0.00%)          string.into_bytes()
        3 ( 0.00%)      }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl fmt::Write for String {
        .               #[inline]
   33,516 ( 0.00%)      fn write_str(&mut self, s: &str) -> fmt::Result {
      155 ( 0.00%)          self.push_str(s);
      155 ( 0.00%)          Ok(())
   29,559 ( 0.00%)      }
        .           
        .               #[inline]
   28,386 ( 0.00%)      fn write_char(&mut self, c: char) -> fmt::Result {
        4 ( 0.00%)          self.push(c);
        .                   Ok(())
   28,386 ( 0.00%)      }
        .           }
        .           
        .           /// A draining iterator for `String`.
        .           ///
        .           /// This struct is created by the [`drain`] method on [`String`]. See its
        .           /// documentation for more.
        .           ///
        .           /// [`drain`]: String::drain
-- line 2743 ----------------------------------------

1,307,814 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/string.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/graph/scc/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 35 ----------------------------------------
        .           
        .               /// Contains the successors for all the Sccs, concatenated. The
        .               /// range of indices corresponding to a given SCC is found in its
        .               /// SccData.
        .               all_successors: Vec<S>,
        .           }
        .           
        .           impl<N: Idx, S: Idx + Ord> Sccs<N, S> {
   12,267 ( 0.00%)      pub fn new(graph: &(impl DirectedGraph<Node = N> + WithNumNodes + WithSuccessors)) -> Self {
        .                   SccsConstruction::construct(graph)
   12,267 ( 0.00%)      }
        .           
        .               /// Returns the number of SCCs in the graph.
        .               pub fn num_sccs(&self) -> usize {
        .                   self.scc_data.len()
        .               }
        .           
        .               /// Returns an iterator over the SCCs in the graph.
        .               ///
-- line 53 ----------------------------------------
-- line 56 ----------------------------------------
        .               /// This is convenient when the edges represent dependencies: when you visit
        .               /// `S1`, the value for `S2` will already have been computed.
        .               pub fn all_sccs(&self) -> impl Iterator<Item = S> {
        .                   (0..self.scc_data.len()).map(S::new)
        .               }
        .           
        .               /// Returns the SCC to which a node `r` belongs.
        .               pub fn scc(&self, r: N) -> S {
   84,963 ( 0.00%)          self.scc_indices[r]
        .               }
        .           
        .               /// Returns the successors of the given SCC.
        .               pub fn successors(&self, scc: S) -> &[S] {
        .                   self.scc_data.successors(scc)
        .               }
        .           
        .               /// Construct the reverse graph of the SCC graph.
-- line 72 ----------------------------------------
-- line 116 ----------------------------------------
        .                   self.ranges.len()
        .               }
        .           
        .               /// Returns the successors of the given SCC.
        .               fn successors(&self, scc: S) -> &[S] {
        .                   // Annoyingly, `range` does not implement `Copy`, so we have
        .                   // to do `range.start..range.end`:
        .                   let range = &self.ranges[scc];
  200,616 ( 0.00%)          &self.all_successors[range.start..range.end]
        .               }
        .           
        .               /// Creates a new SCC with `successors` as its successors and
        .               /// returns the resulting index.
        .               fn create_scc(&mut self, successors: impl IntoIterator<Item = S>) -> S {
        .                   // Store the successors on `scc_successors_vec`, remembering
        .                   // the range of indices.
   25,077 ( 0.00%)          let all_successors_start = self.all_successors.len();
        .                   self.all_successors.extend(successors);
        .                   let all_successors_end = self.all_successors.len();
        .           
        .                   debug!(
        .                       "create_scc({:?}) successors={:?}",
        .                       self.ranges.len(),
        .                       &self.all_successors[all_successors_start..all_successors_end],
        .                   );
-- line 140 ----------------------------------------
-- line 164 ----------------------------------------
        .               /// into the successors_stack, we sometimes get duplicate entries.
        .               /// We use this set to remove those -- we also keep its storage
        .               /// around between successors to amortize memory allocation costs.
        .               duplicate_set: FxHashSet<S>,
        .           
        .               scc_data: SccData<S>,
        .           }
        .           
    6,815 ( 0.00%)  #[derive(Copy, Clone, Debug)]
        .           enum NodeState<N, S> {
        .               /// This node has not yet been visited as part of the DFS.
        .               ///
        .               /// After SCC construction is complete, this state ought to be
        .               /// impossible.
        .               NotVisited,
        .           
        .               /// This node is currently being walk as part of our DFS. It is on
-- line 180 ----------------------------------------
-- line 216 ----------------------------------------
        .               /// N with depth D can reach some other node N' with lower depth
        .               /// D' (i.e., D' < D), we know that N, N', and all nodes in
        .               /// between them on the stack are part of an SCC.
        .               ///
        .               /// [wikipedia]: https://bit.ly/2EZIx84
        .               fn construct(graph: &'c G) -> Sccs<G::Node, S> {
        .                   let num_nodes = graph.num_nodes();
        .           
   14,993 ( 0.00%)          let mut this = Self {
        .                       graph,
        .                       node_states: IndexVec::from_elem_n(NodeState::NotVisited, num_nodes),
        .                       node_stack: Vec::with_capacity(num_nodes),
        .                       successors_stack: Vec::new(),
        .                       scc_data: SccData { ranges: IndexVec::new(), all_successors: Vec::new() },
        .                       duplicate_set: FxHashSet::default(),
        .                   };
        .           
        .                   let scc_indices = (0..num_nodes)
        .                       .map(G::Node::new)
  239,880 ( 0.01%)              .map(|node| match this.start_walk_from(node) {
        .                           WalkReturn::Complete { scc_index } => scc_index,
        .                           WalkReturn::Cycle { min_depth } => panic!(
        .                               "`start_walk_node({:?})` returned cycle with depth {:?}",
        .                               node, min_depth
        .                           ),
        .                       })
        .                       .collect();
        .           
    8,178 ( 0.00%)          Sccs { scc_indices, scc_data: this.scc_data }
        .               }
        .           
  359,820 ( 0.01%)      fn start_walk_from(&mut self, node: G::Node) -> WalkReturn<S> {
  159,920 ( 0.00%)          if let Some(result) = self.inspect_node(node) {
        .                       result
        .                   } else {
        .                       self.walk_unvisited_node(node)
        .                   }
  399,800 ( 0.01%)      }
        .           
        .               /// Inspect a node during the DFS. We first examine its current
        .               /// state -- if it is not yet visited (`NotVisited`), return `None` so
        .               /// that the caller might push it onto the stack and start walking its
        .               /// successors.
        .               ///
        .               /// If it is already on the DFS stack it will be in the state
        .               /// `BeingVisited`. In that case, we have found a cycle and we
        .               /// return the depth from the stack.
        .               ///
        .               /// Otherwise, we are looking at a node that has already been
        .               /// completely visited. We therefore return `WalkReturn::Complete`
        .               /// with its associated SCC index.
  498,720 ( 0.01%)      fn inspect_node(&mut self, node: G::Node) -> Option<WalkReturn<S>> {
  997,440 ( 0.02%)          Some(match self.find_state(node) {
  203,439 ( 0.00%)              NodeState::InCycle { scc_index } => WalkReturn::Complete { scc_index },
        .           
   50,661 ( 0.00%)              NodeState::BeingVisited { depth: min_depth } => WalkReturn::Cycle { min_depth },
        .           
        .                       NodeState::NotVisited => return None,
        .           
        .                       NodeState::InCycleWith { parent } => panic!(
        .                           "`find_state` returned `InCycleWith({:?})`, which ought to be impossible",
        .                           parent
        .                       ),
        .                   })
  872,760 ( 0.02%)      }
        .           
        .               /// Fetches the state of the node `r`. If `r` is recorded as being
        .               /// in a cycle with some other node `r2`, then fetches the state
        .               /// of `r2` (and updates `r` to reflect current result). This is
        .               /// basically the "find" part of a standard union-find algorithm
        .               /// (with path compression).
        .               fn find_state(&mut self, mut node: G::Node) -> NodeState<G::Node, S> {
        .                   // To avoid recursion we temporarily reuse the `parent` of each
-- line 288 ----------------------------------------
-- line 299 ----------------------------------------
        .                   // following links downwards is then simply as soon as we have
        .                   // found the initial self-loop.
        .                   let mut previous_node = node;
        .           
        .                   // Ultimately assigned by the parent when following
        .                   // `InCycleWith` upwards.
        .                   let node_state = loop {
        .                       debug!("find_state(r = {:?} in state {:?})", node, self.node_states[node]);
1,007,216 ( 0.02%)              match self.node_states[node] {
  271,252 ( 0.01%)                  NodeState::InCycle { scc_index } => break NodeState::InCycle { scc_index },
   67,548 ( 0.00%)                  NodeState::BeingVisited { depth } => break NodeState::BeingVisited { depth },
   39,980 ( 0.00%)                  NodeState::NotVisited => break NodeState::NotVisited,
   22,434 ( 0.00%)                  NodeState::InCycleWith { parent } => {
        .                               // We test this, to be extremely sure that we never
        .                               // ever break our termination condition for the
        .                               // reverse iteration loop.
   22,434 ( 0.00%)                      assert!(node != parent, "Node can not be in cycle with itself");
        .                               // Store the previous node as an inverted list link
  112,170 ( 0.00%)                      self.node_states[node] = NodeState::InCycleWith { parent: previous_node };
        .                               // Update to parent node.
        .                               previous_node = node;
        .                               node = parent;
        .                           }
        .                       }
        .                   };
        .           
        .                   // The states form a graph where up to one outgoing link is stored at
-- line 325 ----------------------------------------
-- line 355 ----------------------------------------
        .                   // We can then walk backwards, starting from `previous_node`, and assign
        .                   // each node in the list with the updated state. The loop terminates
        .                   // when we reach the self-cycle.
        .           
        .                   // Move backwards until we found the node where we started. We
        .                   // will know when we hit the state where previous_node == node.
        .                   loop {
        .                       // Back at the beginning, we can return.
  199,892 ( 0.00%)              if previous_node == node {
        .                           return node_state;
        .                       }
        .                       // Update to previous node in the link.
   44,868 ( 0.00%)              match self.node_states[previous_node] {
   22,434 ( 0.00%)                  NodeState::InCycleWith { parent: previous } => {
        .                               node = previous_node;
        .                               previous_node = previous;
        .                           }
        .                           // Only InCycleWith nodes were added to the reverse linked list.
        .                           other => panic!("Invalid previous link while compressing cycle: {:?}", other),
        .                       }
        .           
        .                       debug!("find_state: parent_state = {:?}", node_state);
        .           
        .                       // Update the node state from the parent state. The assigned
        .                       // state is actually a loop invariant but it will only be
        .                       // evaluated if there is at least one backlink to follow.
        .                       // Fully trusting llvm here to find this loop optimization.
   89,736 ( 0.00%)              match node_state {
        .                           // Path compression, make current node point to the same root.
        .                           NodeState::InCycle { .. } => {
   29,806 ( 0.00%)                      self.node_states[node] = node_state;
        .                           }
        .                           // Still visiting nodes, compress to cycle to the node
        .                           // at that depth.
    7,531 ( 0.00%)                  NodeState::BeingVisited { depth } => {
   15,062 ( 0.00%)                      self.node_states[node] =
    7,531 ( 0.00%)                          NodeState::InCycleWith { parent: self.node_stack[depth] };
        .                           }
        .                           // These are never allowed as parent nodes. InCycleWith
        .                           // should have been followed to a real parent and
        .                           // NotVisited can not be part of a cycle since it should
        .                           // have instead gotten explored.
        .                           NodeState::NotVisited | NodeState::InCycleWith { .. } => {
        .                               panic!("invalid parent state: {:?}", node_state)
        .                           }
        .                       }
        .                   }
  249,360 ( 0.01%)      }
        .           
        .               /// Walks a node that has never been visited before.
        .               ///
        .               /// Call this method when `inspect_node` has returned `None`. Having the
        .               /// caller decide avoids mutual recursion between the two methods and allows
        .               /// us to maintain an allocated stack for nodes on the path between calls.
        .               #[instrument(skip(self, initial), level = "debug")]
        .               fn walk_unvisited_node(&mut self, initial: G::Node) -> WalkReturn<S> {
-- line 410 ----------------------------------------
-- line 418 ----------------------------------------
        .                       successor_node: G::Node,
        .                   }
        .           
        .                   // Move the stack to a local variable. We want to utilize the existing allocation and
        .                   // mutably borrow it without borrowing self at the same time.
        .                   let mut successors_stack = core::mem::take(&mut self.successors_stack);
        .                   debug_assert_eq!(successors_stack.len(), 0);
        .           
    9,541 ( 0.00%)          let mut stack: Vec<VisitingNodeFrame<G, _>> = vec![VisitingNodeFrame {
        .                       node: initial,
        .                       depth: 0,
        .                       min_depth: 0,
        .                       iter: None,
        .                       successors_len: 0,
        .                       min_cycle_root: initial,
        .                       successor_node: initial,
        .                   }];
        .           
        .                   let mut return_value = None;
        .           
   39,980 ( 0.00%)          'recurse: while let Some(frame) = stack.last_mut() {
        .                       let VisitingNodeFrame {
  157,194 ( 0.00%)                  node,
        .                           depth,
        .                           iter,
  157,194 ( 0.00%)                  successors_len,
        .                           min_depth,
        .                           min_cycle_root,
        .                           successor_node,
        .                       } = frame;
        .           
   78,597 ( 0.00%)              let node = *node;
  157,194 ( 0.00%)              let depth = *depth;
        .           
  235,791 ( 0.00%)              let successors = match iter {
        .                           Some(iter) => iter,
        .                           None => {
        .                               // This None marks that we still have the initialize this node's frame.
        .                               debug!(?depth, ?node);
        .           
        .                               debug_assert!(matches!(self.node_states[node], NodeState::NotVisited));
        .           
        .                               // Push `node` onto the stack.
  159,920 ( 0.00%)                      self.node_states[node] = NodeState::BeingVisited { depth };
        .                               self.node_stack.push(node);
        .           
        .                               // Walk each successor of the node, looking to see if any of
        .                               // them can reach a node that is presently on the stack. If
        .                               // so, that means they can also reach us.
   79,960 ( 0.00%)                      *successors_len = successors_stack.len();
        .                               // Set and return a reference, this is currently empty.
  159,920 ( 0.00%)                      iter.get_or_insert(self.graph.successors(node))
        .                           }
        .                       };
        .           
        .                       // Now that iter is initialized, this is a constant for this frame.
  157,194 ( 0.00%)              let successors_len = *successors_len;
        .           
        .                       // Construct iterators for the nodes and walk results. There are two cases:
        .                       // * The walk of a successor node returned.
        .                       // * The remaining successor nodes.
        .                       let returned_walk =
        .                           return_value.take().into_iter().map(|walk| (*successor_node, Some(walk)));
        .           
        .                       let successor_walk = successors.by_ref().map(|successor_node| {
        .                           debug!(?node, ?successor_node);
  254,100 ( 0.01%)                  (successor_node, self.inspect_node(successor_node))
        .                       });
        .           
  326,594 ( 0.01%)              for (successor_node, walk) in returned_walk.chain(successor_walk) {
  429,688 ( 0.01%)                  match walk {
        .                               Some(WalkReturn::Cycle { min_depth: successor_min_depth }) => {
        .                                   // Track the minimum depth we can reach.
   63,580 ( 0.00%)                          assert!(successor_min_depth <= depth);
   78,724 ( 0.00%)                          if successor_min_depth < *min_depth {
        .                                       debug!(?node, ?successor_min_depth);
   45,432 ( 0.00%)                              *min_depth = successor_min_depth;
   15,144 ( 0.00%)                              *min_cycle_root = successor_node;
        .                                   }
        .                               }
        .           
        .                               Some(WalkReturn::Complete { scc_index: successor_scc_index }) => {
        .                                   // Push the completed SCC indices onto
        .                                   // the `successors_stack` for later.
        .                                   debug!(?node, ?successor_scc_index);
        .                                   successors_stack.push(successor_scc_index);
        .                               }
        .           
        .                               None => {
   77,234 ( 0.00%)                          let depth = depth + 1;
        .                                   debug!(?depth, ?successor_node);
        .                                   // Remember which node the return value will come from.
   38,617 ( 0.00%)                          frame.successor_node = successor_node;
        .                                   // Start a new stack frame the step into it.
        .                                   stack.push(VisitingNodeFrame {
        .                                       node: successor_node,
        .                                       depth,
        .                                       iter: None,
        .                                       successors_len: 0,
        .                                       min_depth: depth,
        .                                       min_cycle_root: successor_node,
-- line 518 ----------------------------------------
-- line 531 ----------------------------------------
        .                       let frame = stack.pop().unwrap();
        .           
        .                       // If `min_depth == depth`, then we are the root of the
        .                       // cycle: we can't reach anyone further down the stack.
        .           
        .                       // Pass the 'return value' down the stack.
        .                       // We return one frame at a time so there can't be another return value.
        .                       debug_assert!(return_value.is_none());
   79,960 ( 0.00%)              return_value = Some(if frame.min_depth == depth {
        .                           // Note that successor stack may have duplicates, so we
        .                           // want to remove those:
        .                           let deduplicated_successors = {
        .                               let duplicate_set = &mut self.duplicate_set;
        .                               duplicate_set.clear();
        .                               successors_stack
        .                                   .drain(successors_len..)
   52,910 ( 0.00%)                          .filter(move |&i| duplicate_set.insert(i))
        .                           };
        .                           let scc_index = self.scc_data.create_scc(deduplicated_successors);
  150,462 ( 0.00%)                  self.node_states[node] = NodeState::InCycle { scc_index };
        .                           WalkReturn::Complete { scc_index }
        .                       } else {
        .                           // We are not the head of the cycle. Return back to our
        .                           // caller. They will take ownership of the
        .                           // `self.successors` data that we pushed.
   89,418 ( 0.00%)                  self.node_states[node] = NodeState::InCycleWith { parent: frame.min_cycle_root };
        .                           WalkReturn::Cycle { min_depth: frame.min_depth }
        .                       });
        .                   }
        .           
        .                   // Keep the allocation we used for successors_stack.
   12,267 ( 0.00%)          self.successors_stack = successors_stack;
        .                   debug_assert_eq!(self.successors_stack.len(), 0);
        .           
        .                   return_value.unwrap()
        .               }
        .           }

1,788,715 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/graph/scc/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/server.rs
--------------------------------------------------------------------------------
Ir                 

-- line 28 ----------------------------------------
        .                   (type SourceFile: 'static + Clone;);
        .               (type MultiSpan) =>
        .                   (type MultiSpan: 'static;);
        .               (type Diagnostic) =>
        .                   (type Diagnostic: 'static;);
        .               (type Span) =>
        .                   (type Span: 'static + Copy + Eq + Hash;);
        .               (fn drop(&mut self, $arg:ident: $arg_ty:ty)) =>
    9,261 ( 0.00%)          (fn drop(&mut self, $arg: $arg_ty) { mem::drop($arg) });
        .               (fn clone(&mut self, $arg:ident: $arg_ty:ty) -> $ret_ty:ty) =>
    3,773 ( 0.00%)          (fn clone(&mut self, $arg: $arg_ty) -> $ret_ty { $arg.clone() });
        .               ($($item:tt)*) => ($($item)*;)
        .           }
        .           
        .           macro_rules! declare_server_traits {
        .               ($($name:ident {
        .                   $(fn $method:ident($($arg:ident: $arg_ty:ty),* $(,)?) $(-> $ret_ty:ty)?;)*
        .               }),* $(,)?) => {
        .                   pub trait Types {
-- line 46 ----------------------------------------
-- line 63 ----------------------------------------
        .               ($($name:ident {
        .                   $(fn $method:ident($($arg:ident: $arg_ty:ty),* $(,)?) $(-> $ret_ty:ty)?;)*
        .               }),* $(,)?) => {
        .                   impl<S: Types> Types for MarkedTypes<S> {
        .                       $(type $name = Marked<S::$name, client::$name>;)*
        .                   }
        .           
        .                   $(impl<S: $name> $name for MarkedTypes<S> {
    1,032 ( 0.00%)              $(fn $method(&mut self, $($arg: $arg_ty),*) $(-> $ret_ty)? {
1,389,302 ( 0.03%)                  <_>::mark($name::$method(&mut self.0, $($arg.unmark()),*))
    1,032 ( 0.00%)              })*
        .                   })*
        .               }
        .           }
        .           with_api!(Self, self_, define_mark_types_impls);
        .           
        .           struct Dispatcher<S: Types> {
        .               handle_store: HandleStore<S>,
        .               server: S,
-- line 81 ----------------------------------------
-- line 89 ----------------------------------------
        .                   pub trait DispatcherTrait {
        .                       // HACK(eddyb) these are here to allow `Self::$name` to work below.
        .                       $(type $name;)*
        .                       fn dispatch(&mut self, b: Buffer<u8>) -> Buffer<u8>;
        .                   }
        .           
        .                   impl<S: Server> DispatcherTrait for Dispatcher<MarkedTypes<S>> {
        .                       $(type $name = <MarkedTypes<S> as Types>::$name;)*
3,384,830 ( 0.07%)              fn dispatch(&mut self, mut b: Buffer<u8>) -> Buffer<u8> {
        .                           let Dispatcher { handle_store, server } = self;
        .           
1,015,449 ( 0.02%)                  let mut reader = &b[..];
2,369,381 ( 0.05%)                  match api_tags::Method::decode(&mut reader, &mut ()) {
1,625,703 ( 0.03%)                      $(api_tags::Method::$name(m) => match m {
        .                                   $(api_tags::$name::$method => {
        .                                       let mut call_method = || {
1,125,338 ( 0.02%)                                  reverse_decode!(reader, handle_store; $($arg: $arg_ty),*);
      516 ( 0.00%)                                  $name::$method(server, $($arg),*)
        .                                       };
        .                                       // HACK(eddyb) don't use `panic::catch_unwind` in a panic.
        .                                       // If client and server happen to use the same `libstd`,
        .                                       // `catch_unwind` asserts that the panic counter was 0,
        .                                       // even when the closure passed to it didn't panic.
        .                                       let r = if thread::panicking() {
        .                                           Ok(call_method())
        .                                       } else {
1,497,386 ( 0.03%)                                  panic::catch_unwind(panic::AssertUnwindSafe(call_method))
        .                                               .map_err(PanicMessage::from)
        .                                       };
        .           
        .                                       b.clear();
3,715,955 ( 0.08%)                              r.encode(&mut b, handle_store);
        .                                   })*
        .                               }),*
        .                           }
2,030,898 ( 0.04%)                  b
3,046,347 ( 0.06%)              }
        .                   }
        .               }
        .           }
        .           with_api!(Self, self_, define_dispatcher_impl);
        .           
        .           pub trait ExecutionStrategy {
        .               fn run_bridge_and_client<D: Copy + Send + 'static>(
        .                   &self,
-- line 133 ----------------------------------------
-- line 145 ----------------------------------------
        .               fn run_bridge_and_client<D: Copy + Send + 'static>(
        .                   &self,
        .                   dispatcher: &mut impl DispatcherTrait,
        .                   input: Buffer<u8>,
        .                   run_client: extern "C" fn(Bridge<'_>, D) -> Buffer<u8>,
        .                   client_data: D,
        .                   force_show_panics: bool,
        .               ) -> Buffer<u8> {
3,046,352 ( 0.06%)          let mut dispatch = |b| dispatcher.dispatch(b);
        .           
       50 ( 0.00%)          run_client(
       55 ( 0.00%)              Bridge { cached_buffer: input, dispatch: (&mut dispatch).into(), force_show_panics },
        .                       client_data,
        .                   )
        .               }
        .           }
        .           
        .           // NOTE(eddyb) Two implementations are provided, the second one is a bit
        .           // faster but neither is anywhere near as fast as same-thread execution.
        .           
-- line 164 ----------------------------------------
-- line 263 ----------------------------------------
        .                       *state.lock().unwrap() = State::Res(b);
        .                       join_handle.thread().unpark();
        .                   }
        .           
        .                   join_handle.join().unwrap()
        .               }
        .           }
        .           
       65 ( 0.00%)  fn run_server<
        .               S: Server,
        .               I: Encode<HandleStore<MarkedTypes<S>>>,
        .               O: for<'a, 's> DecodeMut<'a, 's, HandleStore<MarkedTypes<S>>>,
        .               D: Copy + Send + 'static,
        .           >(
        .               strategy: &impl ExecutionStrategy,
        .               handle_counters: &'static client::HandleCounters,
        .               server: S,
        .               input: I,
        .               run_client: extern "C" fn(Bridge<'_>, D) -> Buffer<u8>,
        .               client_data: D,
        .               force_show_panics: bool,
        .           ) -> Result<O, PanicMessage> {
        .               let mut dispatcher =
       85 ( 0.00%)          Dispatcher { handle_store: HandleStore::new(handle_counters), server: MarkedTypes(server) };
        .           
        .               let mut b = Buffer::new();
       15 ( 0.00%)      input.encode(&mut b, &mut dispatcher.handle_store);
        .           
       30 ( 0.00%)      b = strategy.run_bridge_and_client(
        .                   &mut dispatcher,
        .                   b,
        .                   run_client,
        .                   client_data,
        .                   force_show_panics,
        .               );
        .           
       25 ( 0.00%)      Result::decode(&mut &b[..], &mut dispatcher.handle_store)
       50 ( 0.00%)  }
        .           
        .           impl client::Client<fn(crate::TokenStream) -> crate::TokenStream> {
        .               pub fn run<S: Server>(
        .                   &self,
        .                   strategy: &impl ExecutionStrategy,
        .                   server: S,
        .                   input: S::TokenStream,
        .                   force_show_panics: bool,
        .               ) -> Result<S::TokenStream, PanicMessage> {
       10 ( 0.00%)          let client::Client { get_handle_counters, run, f } = *self;
       55 ( 0.00%)          run_server(
        .                       strategy,
        5 ( 0.00%)              get_handle_counters(),
       50 ( 0.00%)              server,
        .                       <MarkedTypes<S> as Types>::TokenStream::mark(input),
        .                       run,
        .                       f,
        .                       force_show_panics,
        .                   )
        .                   .map(<MarkedTypes<S> as Types>::TokenStream::unmark)
        .               }
        .           }
-- line 322 ----------------------------------------

  761,391 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/server.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs
--------------------------------------------------------------------------------
Ir                  

-- line 110 ----------------------------------------
         .           /// Control byte value for an empty bucket.
         .           const EMPTY: u8 = 0b1111_1111;
         .           
         .           /// Control byte value for a deleted bucket.
         .           const DELETED: u8 = 0b1000_0000;
         .           
         .           /// Checks whether a control byte represents a full bucket (top bit is clear).
         .           #[inline]
        45 ( 0.00%)  fn is_full(ctrl: u8) -> bool {
 3,640,172 ( 0.08%)      ctrl & 0x80 == 0
        60 ( 0.00%)  }
         .           
         .           /// Checks whether a control byte represents a special value (top bit is set).
         .           #[inline]
         .           fn is_special(ctrl: u8) -> bool {
         .               ctrl & 0x80 != 0
         .           }
         .           
         .           /// Checks whether a special control value is EMPTY (just check 1 bit).
         .           #[inline]
        33 ( 0.00%)  fn special_is_empty(ctrl: u8) -> bool {
         .               debug_assert!(is_special(ctrl));
   260,341 ( 0.01%)      ctrl & 0x01 != 0
        44 ( 0.00%)  }
         .           
         .           /// Primary hash function, used to select the initial bucket to probe from.
         .           #[inline]
         .           #[allow(clippy::cast_possible_truncation)]
        93 ( 0.00%)  fn h1(hash: u64) -> usize {
         .               // On 32-bit platforms we simply ignore the higher hash bits.
         .               hash as usize
        62 ( 0.00%)  }
         .           
         .           /// Secondary hash function, saved in the low 7 bits of the control byte.
         .           #[inline]
         .           #[allow(clippy::cast_possible_truncation)]
        81 ( 0.00%)  fn h2(hash: u64) -> u8 {
         .               // Grab the top 7 bits of the hash. While the hash is normally a full 64-bit
         .               // value, some hash functions (such as FxHash) produce a usize result
         .               // instead, which means that the top 32 bits are 0 on 32-bit platforms.
       162 ( 0.00%)      let hash_len = usize::min(mem::size_of::<usize>(), mem::size_of::<u64>());
70,913,214 ( 1.48%)      let top7 = hash >> (hash_len * 8 - 7);
        27 ( 0.00%)      (top7 & 0x7f) as u8 // truncation
        54 ( 0.00%)  }
         .           
         .           /// Probe sequence based on triangular numbers, which is guaranteed (since our
         .           /// table size is a power of two) to visit every group of elements exactly once.
         .           ///
         .           /// A triangular probe has us jump by 1 more group every time. So first we
         .           /// jump by 1 group (meaning we just continue our linear scan), then 2 groups
         .           /// (skipping over 1 group), then 3 groups (skipping over 2 groups), and so on.
         .           ///
-- line 161 ----------------------------------------
-- line 170 ----------------------------------------
         .               #[inline]
         .               fn move_next(&mut self, bucket_mask: usize) {
         .                   // We should have found an empty bucket by now and ended the probe.
         .                   debug_assert!(
         .                       self.stride <= bucket_mask,
         .                       "Went past end of probe sequence"
         .                   );
         .           
   431,434 ( 0.01%)          self.stride += Group::WIDTH;
   431,434 ( 0.01%)          self.pos += self.stride;
   372,186 ( 0.01%)          self.pos &= bucket_mask;
         .               }
         .           }
         .           
         .           /// Returns the number of buckets needed to hold the given number of items,
         .           /// taking the maximum load factor into account.
         .           ///
         .           /// Returns `None` if an overflow occurs.
         .           // Workaround for emscripten bug emscripten-core/emscripten-fastcomp#258
         .           #[cfg_attr(target_os = "emscripten", inline(never))]
         .           #[cfg_attr(not(target_os = "emscripten"), inline)]
        12 ( 0.00%)  fn capacity_to_buckets(cap: usize) -> Option<usize> {
         .               debug_assert_ne!(cap, 0);
         .           
         .               // For small tables we require at least 1 empty bucket so that lookups are
         .               // guaranteed to terminate if an element doesn't exist in the table.
   288,522 ( 0.01%)      if cap < 8 {
         .                   // We don't bother with a table size of 2 buckets since that can only
         .                   // hold a single element. Instead we skip directly to a 4 bucket table
         .                   // which can hold 3 elements.
   620,664 ( 0.01%)          return Some(if cap < 4 { 4 } else { 8 });
         .               }
         .           
         .               // Otherwise require 1/8 buckets to be empty (87.5% load)
         .               //
         .               // Be careful when modifying this, calculate_layout relies on the
         .               // overflow check here.
   120,774 ( 0.00%)      let adjusted_cap = cap.checked_mul(8)? / 7;
         .           
         .               // Any overflows will have been caught by the checked_mul. Also, any
         .               // rounding errors from the division above will be cleaned up by
         .               // next_power_of_two (which can't overflow because of the previous division).
         .               Some(adjusted_cap.next_power_of_two())
        16 ( 0.00%)  }
         .           
         .           /// Returns the maximum effective capacity for the given bucket mask, taking
         .           /// the maximum load factor into account.
         .           #[inline]
        24 ( 0.00%)  fn bucket_mask_to_capacity(bucket_mask: usize) -> usize {
   756,822 ( 0.02%)      if bucket_mask < 8 {
         .                   // For tables with 1/2/4/8 buckets, we always reserve one empty slot.
         .                   // Keep in mind that the bucket mask is one less than the bucket count.
         8 ( 0.00%)          bucket_mask
         .               } else {
         .                   // For larger tables we reserve 12.5% of the slots as empty.
   166,516 ( 0.00%)          ((bucket_mask + 1) / 8) * 7
         .               }
        24 ( 0.00%)  }
         .           
         .           /// Helper which allows the max calculation for ctrl_align to be statically computed for each T
         .           /// while keeping the rest of `calculate_layout_for` independent of `T`
         .           #[derive(Copy, Clone)]
         .           struct TableLayout {
         .               size: usize,
         .               ctrl_align: usize,
         .           }
         .           
         .           impl TableLayout {
         .               #[inline]
         8 ( 0.00%)      fn new<T>() -> Self {
        24 ( 0.00%)          let layout = Layout::new::<T>();
        16 ( 0.00%)          Self {
        24 ( 0.00%)              size: layout.size(),
        48 ( 0.00%)              ctrl_align: usize::max(layout.align(), Group::WIDTH),
         .                   }
        32 ( 0.00%)      }
         .           
         .               #[inline]
       104 ( 0.00%)      fn calculate_layout_for(self, buckets: usize) -> Option<(Layout, usize)> {
         .                   debug_assert!(buckets.is_power_of_two());
         .           
        16 ( 0.00%)          let TableLayout { size, ctrl_align } = self;
         .                   // Manual layout calculation since Layout methods are not yet stable.
         .                   let ctrl_offset =
   590,280 ( 0.01%)              size.checked_mul(buckets)?.checked_add(ctrl_align - 1)? & !(ctrl_align - 1);
   786,340 ( 0.02%)          let len = ctrl_offset.checked_add(buckets + Group::WIDTH)?;
         .           
        72 ( 0.00%)          Some((
        32 ( 0.00%)              unsafe { Layout::from_size_align_unchecked(len, ctrl_align) },
         .                       ctrl_offset,
         .                   ))
        24 ( 0.00%)      }
         .           }
         .           
         .           /// Returns a Layout which describes the allocation required for a hash table,
         .           /// and the offset of the control bytes in the allocation.
         .           /// (the offset is also one past last element of buckets)
         .           ///
         .           /// Returns `None` if an overflow occurs.
         .           #[cfg_attr(feature = "inline-more", inline)]
-- line 269 ----------------------------------------
-- line 292 ----------------------------------------
         .               #[inline]
         .               fn clone(&self) -> Self {
         .                   Self { ptr: self.ptr }
         .               }
         .           }
         .           
         .           impl<T> Bucket<T> {
         .               #[inline]
       165 ( 0.00%)      unsafe fn from_base_index(base: NonNull<T>, index: usize) -> Self {
       132 ( 0.00%)          let ptr = if mem::size_of::<T>() == 0 {
         .                       // won't overflow because index must be less than length
         .                       (index + 1) as *mut T
         .                   } else {
       132 ( 0.00%)              base.as_ptr().sub(index)
         .                   };
        33 ( 0.00%)          Self {
       132 ( 0.00%)              ptr: NonNull::new_unchecked(ptr),
         .                   }
        99 ( 0.00%)      }
         .               #[inline]
         .               unsafe fn to_base_index(&self, base: NonNull<T>) -> usize {
         .                   if mem::size_of::<T>() == 0 {
         .                       self.ptr.as_ptr() as usize - 1
         .                   } else {
         .                       offset_from(base.as_ptr(), self.ptr.as_ptr())
         .                   }
         .               }
         .               #[inline]
        99 ( 0.00%)      pub fn as_ptr(&self) -> *mut T {
       132 ( 0.00%)          if mem::size_of::<T>() == 0 {
         .                       // Just return an arbitrary ZST pointer which is properly aligned
         .                       mem::align_of::<T>() as *mut T
         .                   } else {
       198 ( 0.00%)              unsafe { self.ptr.as_ptr().sub(1) }
         .                   }
        99 ( 0.00%)      }
         .               #[inline]
         .               unsafe fn next_n(&self, offset: usize) -> Self {
         .                   let ptr = if mem::size_of::<T>() == 0 {
         .                       (self.ptr.as_ptr() as usize + offset) as *mut T
         .                   } else {
         .                       self.ptr.as_ptr().sub(offset)
         .                   };
         .                   Self {
-- line 335 ----------------------------------------
-- line 337 ----------------------------------------
         .                   }
         .               }
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub unsafe fn drop(&self) {
         .                   self.as_ptr().drop_in_place();
         .               }
         .               #[inline]
         .               pub unsafe fn read(&self) -> T {
     7,514 ( 0.00%)          self.as_ptr().read()
         .               }
         .               #[inline]
        42 ( 0.00%)      pub unsafe fn write(&self, val: T) {
        63 ( 0.00%)          self.as_ptr().write(val);
        14 ( 0.00%)      }
         .               #[inline]
        52 ( 0.00%)      pub unsafe fn as_ref<'a>(&self) -> &'a T {
        52 ( 0.00%)          &*self.as_ptr()
        52 ( 0.00%)      }
         .               #[inline]
         .               pub unsafe fn as_mut<'a>(&self) -> &'a mut T {
         .                   &mut *self.as_ptr()
         .               }
         .               #[cfg(feature = "raw")]
         .               #[inline]
         .               pub unsafe fn copy_from_nonoverlapping(&self, other: &Self) {
         .                   self.as_ptr().copy_from_nonoverlapping(other.as_ptr(), 1);
-- line 362 ----------------------------------------
-- line 392 ----------------------------------------
         .           
         .           impl<T> RawTable<T, Global> {
         .               /// Creates a new empty hash table without allocating any memory.
         .               ///
         .               /// In effect this returns a table with exactly 1 bucket. However we can
         .               /// leave the data pointer dangling since that bucket is never written to
         .               /// due to our load factor forcing us to always have at least 1 free bucket.
         .               #[inline]
        27 ( 0.00%)      pub const fn new() -> Self {
        72 ( 0.00%)          Self {
        18 ( 0.00%)              table: RawTableInner::new_in(Global),
         .                       marker: PhantomData,
         .                   }
        18 ( 0.00%)      }
         .           
         .               /// Attempts to allocate a new hash table with at least enough capacity
         .               /// for inserting the given number of elements without reallocating.
         .               #[cfg(feature = "raw")]
         .               pub fn try_with_capacity(capacity: usize) -> Result<Self, TryReserveError> {
         .                   Self::try_with_capacity_in(capacity, Global)
         .               }
         .           
-- line 413 ----------------------------------------
-- line 422 ----------------------------------------
         .               /// Creates a new empty hash table without allocating any memory, using the
         .               /// given allocator.
         .               ///
         .               /// In effect this returns a table with exactly 1 bucket. However we can
         .               /// leave the data pointer dangling since that bucket is never written to
         .               /// due to our load factor forcing us to always have at least 1 free bucket.
         .               #[inline]
         .               pub fn new_in(alloc: A) -> Self {
     6,090 ( 0.00%)          Self {
         .                       table: RawTableInner::new_in(alloc),
         .                       marker: PhantomData,
         .                   }
         .               }
         .           
         .               /// Allocates a new hash table with the given number of buckets.
         .               ///
         .               /// The control bytes are left uninitialized.
-- line 438 ----------------------------------------
-- line 440 ----------------------------------------
         .               unsafe fn new_uninitialized(
         .                   alloc: A,
         .                   buckets: usize,
         .                   fallibility: Fallibility,
         .               ) -> Result<Self, TryReserveError> {
         .                   debug_assert!(buckets.is_power_of_two());
         .           
         .                   Ok(Self {
       270 ( 0.00%)              table: RawTableInner::new_uninitialized(
         .                           alloc,
         .                           TableLayout::new::<T>(),
         .                           buckets,
         .                           fallibility,
         .                       )?,
         .                       marker: PhantomData,
         .                   })
         .               }
-- line 456 ----------------------------------------
-- line 458 ----------------------------------------
         .               /// Attempts to allocate a new hash table with at least enough capacity
         .               /// for inserting the given number of elements without reallocating.
         .               fn fallible_with_capacity(
         .                   alloc: A,
         .                   capacity: usize,
         .                   fallibility: Fallibility,
         .               ) -> Result<Self, TryReserveError> {
         .                   Ok(Self {
    20,758 ( 0.00%)              table: RawTableInner::fallible_with_capacity(
         .                           alloc,
         .                           TableLayout::new::<T>(),
         .                           capacity,
         .                           fallibility,
         .                       )?,
         .                       marker: PhantomData,
         .                   })
         .               }
-- line 474 ----------------------------------------
-- line 493 ----------------------------------------
         .               /// Returns a reference to the underlying allocator.
         .               #[inline]
         .               pub fn allocator(&self) -> &A {
         .                   &self.table.alloc
         .               }
         .           
         .               /// Deallocates the table without dropping any entries.
         .               #[cfg_attr(feature = "inline-more", inline)]
        12 ( 0.00%)      unsafe fn free_buckets(&mut self) {
        16 ( 0.00%)          self.table.free_buckets(TableLayout::new::<T>());
         8 ( 0.00%)      }
         .           
         .               /// Returns pointer to one past last element of data table.
         .               #[inline]
        66 ( 0.00%)      pub unsafe fn data_end(&self) -> NonNull<T> {
       165 ( 0.00%)          NonNull::new_unchecked(self.table.ctrl.as_ptr().cast())
        66 ( 0.00%)      }
         .           
         .               /// Returns pointer to start of data table.
         .               #[inline]
         .               #[cfg(feature = "nightly")]
         .               pub unsafe fn data_start(&self) -> *mut T {
         .                   self.data_end().as_ptr().wrapping_sub(self.buckets())
         .               }
         .           
-- line 517 ----------------------------------------
-- line 518 ----------------------------------------
         .               /// Returns the index of a bucket from a `Bucket`.
         .               #[inline]
         .               pub unsafe fn bucket_index(&self, bucket: &Bucket<T>) -> usize {
         .                   bucket.to_base_index(self.data_end())
         .               }
         .           
         .               /// Returns a pointer to an element in the table.
         .               #[inline]
       132 ( 0.00%)      pub unsafe fn bucket(&self, index: usize) -> Bucket<T> {
         .                   debug_assert_ne!(self.table.bucket_mask, 0);
         .                   debug_assert!(index < self.buckets());
       132 ( 0.00%)          Bucket::from_base_index(self.data_end(), index)
        66 ( 0.00%)      }
         .           
         .               /// Erases an element from the table without dropping it.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[deprecated(since = "0.8.1", note = "use erase or remove instead")]
    48,713 ( 0.00%)      pub unsafe fn erase_no_drop(&mut self, item: &Bucket<T>) {
    48,713 ( 0.00%)          let index = self.bucket_index(item);
         .                   self.table.erase(index);
    97,426 ( 0.00%)      }
         .           
         .               /// Erases an element from the table, dropping it in place.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[allow(clippy::needless_pass_by_value)]
         .               #[allow(deprecated)]
         .               pub unsafe fn erase(&mut self, item: Bucket<T>) {
         .                   // Erase the element from the table first since drop might panic.
    28,076 ( 0.00%)          self.erase_no_drop(&item);
         .                   item.drop();
         .               }
         .           
         .               /// Finds and erases an element from the table, dropping it in place.
         .               /// Returns true if an element was found.
         .               #[cfg(feature = "raw")]
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn erase_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> bool {
-- line 554 ----------------------------------------
-- line 563 ----------------------------------------
         .                   }
         .               }
         .           
         .               /// Removes an element from the table, returning it.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[allow(clippy::needless_pass_by_value)]
         .               #[allow(deprecated)]
         .               pub unsafe fn remove(&mut self, item: Bucket<T>) -> T {
    69,350 ( 0.00%)          self.erase_no_drop(&item);
       388 ( 0.00%)          item.read()
         .               }
         .           
         .               /// Finds and removes an element from the table, returning it.
         .               #[cfg_attr(feature = "inline-more", inline)]
 1,377,977 ( 0.03%)      pub fn remove_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<T> {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
     5,772 ( 0.00%)          match self.find(hash, eq) {
    22,561 ( 0.00%)              Some(bucket) => Some(unsafe { self.remove(bucket) }),
   316,117 ( 0.01%)              None => None,
         .                   }
 1,942,473 ( 0.04%)      }
         .           
         .               /// Marks all table buckets as empty without dropping their contents.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn clear_no_drop(&mut self) {
         .                   self.table.clear_no_drop();
         .               }
         .           
         .               /// Removes all elements from the table without freeing the backing memory.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn clear(&mut self) {
         .                   // Ensure that the table is reset even if one of the drops panic
         .                   let mut self_ = guard(self, |self_| self_.clear_no_drop());
         .                   unsafe {
         1 ( 0.00%)              self_.drop_elements();
         .                   }
         .               }
         .           
        19 ( 0.00%)      unsafe fn drop_elements(&mut self) {
    31,660 ( 0.00%)          if mem::needs_drop::<T>() && !self.is_empty() {
         .                       for item in self.iter() {
         .                           item.drop();
         .                       }
         .                   }
        16 ( 0.00%)      }
         .           
         .               /// Shrinks the table to fit `max(self.len(), min_size)` elements.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn shrink_to(&mut self, min_size: usize, hasher: impl Fn(&T) -> u64) {
         .                   // Calculate the minimal number of elements that we need to reserve
         .                   // space for.
         .                   let min_size = usize::max(self.table.items, min_size);
         .                   if min_size == 0 {
-- line 615 ----------------------------------------
-- line 641 ----------------------------------------
         .                           }
         .                       }
         .                   }
         .               }
         .           
         .               /// Ensures that at least `additional` items can be inserted into the table
         .               /// without reallocation.
         .               #[cfg_attr(feature = "inline-more", inline)]
        28 ( 0.00%)      pub fn reserve(&mut self, additional: usize, hasher: impl Fn(&T) -> u64) {
   733,469 ( 0.02%)          if additional > self.table.growth_left {
         .                       // Avoid `Result::unwrap_or_else` because it bloats LLVM IR.
   497,870 ( 0.01%)              if self
         8 ( 0.00%)                  .reserve_rehash(additional, hasher, Fallibility::Infallible)
         .                           .is_err()
         .                       {
         .                           unsafe { hint::unreachable_unchecked() }
         .                       }
         .                   }
        20 ( 0.00%)      }
         .           
         .               /// Tries to ensure that at least `additional` items can be inserted into
         .               /// the table without reallocation.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn try_reserve(
         .                   &mut self,
         .                   additional: usize,
         .                   hasher: impl Fn(&T) -> u64,
-- line 667 ----------------------------------------
-- line 671 ----------------------------------------
         .                   } else {
         .                       Ok(())
         .                   }
         .               }
         .           
         .               /// Out-of-line slow path for `reserve` and `try_reserve`.
         .               #[cold]
         .               #[inline(never)]
 1,157,924 ( 0.02%)      fn reserve_rehash(
         .                   &mut self,
         .                   additional: usize,
         .                   hasher: impl Fn(&T) -> u64,
         .                   fallibility: Fallibility,
         .               ) -> Result<(), TryReserveError> {
         .                   unsafe {
        48 ( 0.00%)              self.table.reserve_rehash_inner(
         .                           additional,
        12 ( 0.00%)                  &|table, index| hasher(table.bucket::<T>(index).as_ref()),
         .                           fallibility,
        16 ( 0.00%)                  TableLayout::new::<T>(),
        28 ( 0.00%)                  if mem::needs_drop::<T>() {
         .                               Some(mem::transmute(ptr::drop_in_place::<T> as unsafe fn(*mut T)))
         .                           } else {
         4 ( 0.00%)                      None
         .                           },
         .                       )
         .                   }
   828,508 ( 0.02%)      }
         .           
         .               /// Allocates a new table of a different size and moves the contents of the
         .               /// current table into it.
         .               fn resize(
         .                   &mut self,
         .                   capacity: usize,
         .                   hasher: impl Fn(&T) -> u64,
         .                   fallibility: Fallibility,
-- line 706 ----------------------------------------
-- line 714 ----------------------------------------
         .                       )
         .                   }
         .               }
         .           
         .               /// Inserts a new element into the table, and returns its raw bucket.
         .               ///
         .               /// This does not check if the given element already exists in the table.
         .               #[cfg_attr(feature = "inline-more", inline)]
 5,030,315 ( 0.11%)      pub fn insert(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> Bucket<T> {
         .                   unsafe {
        56 ( 0.00%)              let mut index = self.table.find_insert_slot(hash);
         .           
         .                       // We can avoid growing the table once we have reached our load
         .                       // factor if we are replacing a tombstone. This works since the
         .                       // number of EMPTY slots does not change in this case.
    12,738 ( 0.00%)              let old_ctrl = *self.table.ctrl(index);
 3,586,899 ( 0.07%)              if unlikely(self.table.growth_left == 0 && special_is_empty(old_ctrl)) {
        16 ( 0.00%)                  self.reserve(1, hasher);
        16 ( 0.00%)                  index = self.table.find_insert_slot(hash);
         .                       }
         .           
        28 ( 0.00%)              self.table.record_item_insert_at(index, old_ctrl, hash);
         .           
        35 ( 0.00%)              let bucket = self.bucket(index);
        30 ( 0.00%)              bucket.write(value);
        14 ( 0.00%)              bucket
         .                   }
 3,706,317 ( 0.08%)      }
         .           
         .               /// Attempts to insert a new element without growing the table and return its raw bucket.
         .               ///
         .               /// Returns an `Err` containing the given element if inserting it would require growing the
         .               /// table.
         .               ///
         .               /// This does not check if the given element already exists in the table.
         .               #[cfg(feature = "raw")]
-- line 749 ----------------------------------------
-- line 760 ----------------------------------------
         .                       }
         .                   }
         .               }
         .           
         .               /// Inserts a new element into the table, and returns a mutable reference to it.
         .               ///
         .               /// This does not check if the given element already exists in the table.
         .               #[cfg_attr(feature = "inline-more", inline)]
 1,280,320 ( 0.03%)      pub fn insert_entry(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> &mut T {
       448 ( 0.00%)          unsafe { self.insert(hash, value, hasher).as_mut() }
   960,240 ( 0.02%)      }
         .           
         .               /// Inserts a new element into the table, without growing the table.
         .               ///
         .               /// There must be enough space in the table to insert the new element.
         .               ///
         .               /// This does not check if the given element already exists in the table.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[cfg(any(feature = "raw", feature = "rustc-internal-api"))]
     5,422 ( 0.00%)      pub unsafe fn insert_no_grow(&mut self, hash: u64, value: T) -> Bucket<T> {
   719,999 ( 0.02%)          let (index, old_ctrl) = self.table.prepare_insert_slot(hash);
    21,566 ( 0.00%)          let bucket = self.table.bucket(index);
         .           
         .                   // If we are replacing a DELETED entry then we don't need to update
         .                   // the load counter.
 1,513,819 ( 0.03%)          self.table.growth_left -= special_is_empty(old_ctrl) as usize;
         .           
         .                   bucket.write(value);
 1,215,104 ( 0.03%)          self.table.items += 1;
         .                   bucket
    10,375 ( 0.00%)      }
         .           
         .               /// Temporary removes a bucket, applying the given function to the removed
         .               /// element and optionally put back the returned value in the same bucket.
         .               ///
         .               /// Returns `true` if the bucket still contains an element
         .               ///
         .               /// This does not check if the given bucket is actually occupied.
         .               #[cfg_attr(feature = "inline-more", inline)]
-- line 798 ----------------------------------------
-- line 813 ----------------------------------------
         .                       true
         .                   } else {
         .                       false
         .                   }
         .               }
         .           
         .               /// Searches for an element in the table.
         .               #[inline]
    10,672 ( 0.00%)      pub fn find(&self, hash: u64, mut eq: impl FnMut(&T) -> bool) -> Option<Bucket<T>> {
    22,136 ( 0.00%)          let result = self.table.find_inner(hash, &mut |index| unsafe {
    59,589 ( 0.00%)              eq(self.bucket(index).as_ref())
     8,944 ( 0.00%)          });
         .           
         .                   // Avoid `Option::map` because it bloats LLVM IR.
        86 ( 0.00%)          match result {
     2,737 ( 0.00%)              Some(index) => Some(unsafe { self.bucket(index) }),
        14 ( 0.00%)              None => None,
         .                   }
    10,632 ( 0.00%)      }
         .           
         .               /// Gets a reference to an element in the table.
         .               #[inline]
        52 ( 0.00%)      pub fn get(&self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&T> {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
    38,215 ( 0.00%)          match self.find(hash, eq) {
        78 ( 0.00%)              Some(bucket) => Some(unsafe { bucket.as_ref() }),
         .                       None => None,
         .                   }
        39 ( 0.00%)      }
         .           
         .               /// Gets a mutable reference to an element in the table.
         .               #[inline]
        28 ( 0.00%)      pub fn get_mut(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&mut T> {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
     7,677 ( 0.00%)          match self.find(hash, eq) {
         .                       Some(bucket) => Some(unsafe { bucket.as_mut() }),
        14 ( 0.00%)              None => None,
         .                   }
        21 ( 0.00%)      }
         .           
         .               /// Attempts to get mutable references to `N` entries in the table at once.
         .               ///
         .               /// Returns an array of length `N` with the results of each query.
         .               ///
         .               /// At most one mutable reference will be returned to any entry. `None` will be returned if any
         .               /// of the hashes are duplicates. `None` will be returned if the hash is not found.
         .               ///
-- line 859 ----------------------------------------
-- line 913 ----------------------------------------
         .               /// more, but is guaranteed to be able to hold at least this many.
         .               #[inline]
         .               pub fn capacity(&self) -> usize {
         .                   self.table.items + self.table.growth_left
         .               }
         .           
         .               /// Returns the number of elements in the table.
         .               #[inline]
        26 ( 0.00%)      pub fn len(&self) -> usize {
        13 ( 0.00%)          self.table.items
        26 ( 0.00%)      }
         .           
         .               /// Returns `true` if the table contains no elements.
         .               #[inline]
        26 ( 0.00%)      pub fn is_empty(&self) -> bool {
 2,010,840 ( 0.04%)          self.len() == 0
        52 ( 0.00%)      }
         .           
         .               /// Returns the number of buckets in the table.
         .               #[inline]
         .               pub fn buckets(&self) -> usize {
         .                   self.table.bucket_mask + 1
         .               }
         .           
         .               /// Returns an iterator over every element in the table. It is up to
-- line 937 ----------------------------------------
-- line 938 ----------------------------------------
         .               /// the caller to ensure that the `RawTable` outlives the `RawIter`.
         .               /// Because we cannot make the `next` method unsafe on the `RawIter`
         .               /// struct, we have to make the `iter` method unsafe.
         .               #[inline]
         .               pub unsafe fn iter(&self) -> RawIter<T> {
         .                   let data = Bucket::from_base_index(self.data_end(), 0);
         .                   RawIter {
         .                       iter: RawIterRange::new(self.table.ctrl.as_ptr(), data, self.table.buckets()),
   252,665 ( 0.01%)              items: self.table.items,
         .                   }
         .               }
         .           
         .               /// Returns an iterator over occupied buckets that could match a given hash.
         .               ///
         .               /// `RawTable` only stores 7 bits of the hash value, so this iterator may
         .               /// return items that have a hash value different than the one provided. You
         .               /// should always validate the returned values before using them.
-- line 954 ----------------------------------------
-- line 995 ----------------------------------------
         .               /// Iteration starts at the provided iterator's current location.
         .               ///
         .               /// It is up to the caller to ensure that the iterator is valid for this
         .               /// `RawTable` and covers all items that remain in the table.
         .               pub unsafe fn into_iter_from(self, iter: RawIter<T>) -> RawIntoIter<T, A> {
         .                   debug_assert_eq!(iter.len(), self.len());
         .           
         .                   let alloc = self.table.alloc.clone();
    21,264 ( 0.00%)          let allocation = self.into_allocation();
    15,948 ( 0.00%)          RawIntoIter {
    26,580 ( 0.00%)              iter,
         .                       allocation,
         .                       marker: PhantomData,
         .                       alloc,
         .                   }
         .               }
         .           
         .               /// Converts the table into a raw allocation. The contents of the table
         .               /// should be dropped using a `RawIter` before freeing the allocation.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub(crate) fn into_allocation(self) -> Option<(NonNull<u8>, Layout)> {
     9,331 ( 0.00%)          let alloc = if self.table.is_empty_singleton() {
         .                       None
         .                   } else {
         .                       // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
         .                       let (layout, ctrl_offset) = match calculate_layout::<T>(self.table.buckets()) {
         .                           Some(lco) => lco,
         .                           None => unsafe { hint::unreachable_unchecked() },
         .                       };
         .                       Some((
     1,054 ( 0.00%)                  unsafe { NonNull::new_unchecked(self.table.ctrl.as_ptr().sub(ctrl_offset)) },
         .                           layout,
         .                       ))
         .                   };
         .                   mem::forget(self);
         .                   alloc
         .               }
         .           }
         .           
-- line 1033 ----------------------------------------
-- line 1041 ----------------------------------------
         .           where
         .               T: Sync,
         .               A: Sync,
         .           {
         .           }
         .           
         .           impl<A> RawTableInner<A> {
         .               #[inline]
        27 ( 0.00%)      const fn new_in(alloc: A) -> Self {
 1,685,853 ( 0.04%)          Self {
         .                       // Be careful to cast the entire slice to a raw pointer.
        63 ( 0.00%)              ctrl: unsafe { NonNull::new_unchecked(Group::static_empty() as *const _ as *mut u8) },
         .                       bucket_mask: 0,
         .                       items: 0,
         .                       growth_left: 0,
         .                       alloc,
         .                   }
        18 ( 0.00%)      }
         .           }
         .           
         .           impl<A: Allocator + Clone> RawTableInner<A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
 1,082,195 ( 0.02%)      unsafe fn new_uninitialized(
         .                   alloc: A,
         .                   table_layout: TableLayout,
         .                   buckets: usize,
         .                   fallibility: Fallibility,
         .               ) -> Result<Self, TryReserveError> {
         .                   debug_assert!(buckets.is_power_of_two());
         .           
         .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
        64 ( 0.00%)          let (layout, ctrl_offset) = match table_layout.calculate_layout_for(buckets) {
        48 ( 0.00%)              Some(lco) => lco,
         .                       None => return Err(fallibility.capacity_overflow()),
         .                   };
         .           
         .                   // We need an additional check to ensure that the allocation doesn't
         .                   // exceed `isize::MAX`. We can skip this check on 64-bit systems since
         .                   // such allocations will never succeed anyways.
         .                   //
         .                   // This mirrors what Vec does in the standard library.
        16 ( 0.00%)          if mem::size_of::<usize>() < 8 && layout.size() > isize::MAX as usize {
         .                       return Err(fallibility.capacity_overflow());
         .                   }
         .           
   250,314 ( 0.01%)          let ptr: NonNull<u8> = match do_alloc(&alloc, layout) {
        24 ( 0.00%)              Ok(block) => block.cast(),
         .                       Err(_) => return Err(fallibility.alloc_err(layout)),
         .                   };
         .           
        36 ( 0.00%)          let ctrl = NonNull::new_unchecked(ptr.as_ptr().add(ctrl_offset));
   595,210 ( 0.01%)          Ok(Self {
         .                       ctrl,
   243,524 ( 0.01%)              bucket_mask: buckets - 1,
         .                       items: 0,
        36 ( 0.00%)              growth_left: bucket_mask_to_capacity(buckets - 1),
         .                       alloc,
         .                   })
   787,568 ( 0.02%)      }
         .           
         .               #[inline]
    54,494 ( 0.00%)      fn fallible_with_capacity(
         .                   alloc: A,
         .                   table_layout: TableLayout,
         .                   capacity: usize,
         .                   fallibility: Fallibility,
         .               ) -> Result<Self, TryReserveError> {
    14,592 ( 0.00%)          if capacity == 0 {
    14,262 ( 0.00%)              Ok(Self::new_in(alloc))
         .                   } else {
         .                       unsafe {
         .                           let buckets =
        68 ( 0.00%)                      capacity_to_buckets(capacity).ok_or_else(|| fallibility.capacity_overflow())?;
         .           
   490,884 ( 0.01%)                  let result = Self::new_uninitialized(alloc, table_layout, buckets, fallibility)?;
        24 ( 0.00%)                  result.ctrl(0).write_bytes(EMPTY, result.num_ctrl_bytes());
         .           
    25,139 ( 0.00%)                  Ok(result)
         .                       }
         .                   }
    54,458 ( 0.00%)      }
         .           
         .               /// Searches for an empty or deleted bucket which is suitable for inserting
         .               /// a new element and sets the hash for that slot.
         .               ///
         .               /// There must be at least 1 empty bucket in the table.
         .               #[inline]
   255,239 ( 0.01%)      unsafe fn prepare_insert_slot(&self, hash: u64) -> (usize, u8) {
         .                   let index = self.find_insert_slot(hash);
   255,239 ( 0.01%)          let old_ctrl = *self.ctrl(index);
         .                   self.set_ctrl_h2(index, hash);
         .                   (index, old_ctrl)
   510,478 ( 0.01%)      }
         .           
         .               /// Searches for an empty or deleted bucket which is suitable for inserting
         .               /// a new element.
         .               ///
         .               /// There must be at least 1 empty bucket in the table.
         .               #[inline]
        44 ( 0.00%)      fn find_insert_slot(&self, hash: u64) -> usize {
        33 ( 0.00%)          let mut probe_seq = self.probe_seq(hash);
        11 ( 0.00%)          loop {
         .                       unsafe {
        88 ( 0.00%)                  let group = Group::load(self.ctrl(probe_seq.pos));
 2,364,927 ( 0.05%)                  if let Some(bit) = group.match_empty_or_deleted().lowest_set_bit() {
 6,943,095 ( 0.14%)                      let result = (probe_seq.pos + bit) & self.bucket_mask;
         .           
         .                               // In tables smaller than the group width, trailing control
         .                               // bytes outside the range of the table are filled with
         .                               // EMPTY entries. These will unfortunately trigger a
         .                               // match, but once masked may point to a full bucket that
         .                               // is already occupied. We detect this situation here and
         .                               // perform a second scan starting at the beginning of the
         .                               // table. This second scan is guaranteed to find an empty
         .                               // slot (due to the load factor) before hitting the trailing
         .                               // control bytes (containing EMPTY).
 3,208,580 ( 0.07%)                      if unlikely(is_full(*self.ctrl(result))) {
         .                                   debug_assert!(self.bucket_mask < Group::WIDTH);
         .                                   debug_assert_ne!(probe_seq.pos, 0);
         .                                   return Group::load_aligned(self.ctrl(0))
         .                                       .match_empty_or_deleted()
         .                                       .lowest_set_bit_nonzero();
         .                               }
         .           
        22 ( 0.00%)                      return result;
         .                           }
         .                       }
         .                       probe_seq.move_next(self.bucket_mask);
         .                   }
        33 ( 0.00%)      }
         .           
         .               /// Searches for an element in the table. This uses dynamic dispatch to reduce the amount of
         .               /// code generated, but it is eliminated by LLVM optimizations.
         .               #[inline]
       240 ( 0.00%)      fn find_inner(&self, hash: u64, eq: &mut dyn FnMut(usize) -> bool) -> Option<usize> {
        60 ( 0.00%)          let h2_hash = h2(hash);
        60 ( 0.00%)          let mut probe_seq = self.probe_seq(hash);
         .           
   140,340 ( 0.00%)          loop {
       160 ( 0.00%)              let group = unsafe { Group::load(self.ctrl(probe_seq.pos)) };
         .           
 7,808,856 ( 0.16%)              for bit in group.match_byte(h2_hash) {
14,888,692 ( 0.31%)                  let index = (probe_seq.pos + bit) & self.bucket_mask;
         .           
 9,565,403 ( 0.20%)                  if likely(eq(index)) {
        26 ( 0.00%)                      return Some(index);
         .                           }
         .                       }
         .           
 2,449,628 ( 0.05%)              if likely(group.match_empty().any_bit_set()) {
         7 ( 0.00%)                  return None;
         .                       }
         .           
         .                       probe_seq.move_next(self.bucket_mask);
         .                   }
        80 ( 0.00%)      }
         .           
         .               #[allow(clippy::mut_mut)]
         .               #[inline]
         .               unsafe fn prepare_rehash_in_place(&mut self) {
         .                   // Bulk convert all full control bytes to DELETED, and all DELETED
         .                   // control bytes to EMPTY. This effectively frees up all buckets
         .                   // containing a DELETED entry.
         3 ( 0.00%)          for i in (0..self.buckets()).step_by(Group::WIDTH) {
         .                       let group = Group::load_aligned(self.ctrl(i));
         .                       let group = group.convert_special_to_empty_and_full_to_deleted();
         .                       group.store_aligned(self.ctrl(i));
         .                   }
         .           
         .                   // Fix up the trailing control bytes. See the comments in set_ctrl
         .                   // for the handling of tables smaller than the group width.
         3 ( 0.00%)          if self.buckets() < Group::WIDTH {
         .                       self.ctrl(0)
         .                           .copy_to(self.ctrl(Group::WIDTH), self.buckets());
         .                   } else {
         .                       self.ctrl(0)
         .                           .copy_to(self.ctrl(self.buckets()), Group::WIDTH);
         .                   }
         .               }
         .           
-- line 1220 ----------------------------------------
-- line 1225 ----------------------------------------
         .                   Bucket::from_base_index(self.data_end(), index)
         .               }
         .           
         .               #[inline]
         .               unsafe fn bucket_ptr(&self, index: usize, size_of: usize) -> *mut u8 {
         .                   debug_assert_ne!(self.bucket_mask, 0);
         .                   debug_assert!(index < self.buckets());
         .                   let base: *mut u8 = self.data_end().as_ptr();
 8,488,336 ( 0.18%)          base.sub((index + 1) * size_of)
         .               }
         .           
         .               #[inline]
         .               unsafe fn data_end<T>(&self) -> NonNull<T> {
         .                   NonNull::new_unchecked(self.ctrl.as_ptr().cast())
         .               }
         .           
         .               /// Returns an iterator-like object for a probe sequence on the table.
         .               ///
         .               /// This iterator never terminates, but is guaranteed to visit each bucket
         .               /// group exactly once. The loop using `probe_seq` must terminate upon
         .               /// reaching a group containing an empty bucket.
         .               #[inline]
       217 ( 0.00%)      fn probe_seq(&self, hash: u64) -> ProbeSeq {
        62 ( 0.00%)          ProbeSeq {
43,012,990 ( 0.90%)              pos: h1(hash) & self.bucket_mask,
         .                       stride: 0,
         .                   }
       124 ( 0.00%)      }
         .           
         .               /// Returns the index of a bucket for which a value must be inserted if there is enough rooom
         .               /// in the table, otherwise returns error
         .               #[cfg(feature = "raw")]
         .               #[inline]
         .               unsafe fn prepare_insert_no_grow(&mut self, hash: u64) -> Result<usize, ()> {
         .                   let index = self.find_insert_slot(hash);
         .                   let old_ctrl = *self.ctrl(index);
-- line 1260 ----------------------------------------
-- line 1262 ----------------------------------------
         .                       Err(())
         .                   } else {
         .                       self.record_item_insert_at(index, old_ctrl, hash);
         .                       Ok(index)
         .                   }
         .               }
         .           
         .               #[inline]
        63 ( 0.00%)      unsafe fn record_item_insert_at(&mut self, index: usize, old_ctrl: u8, hash: u64) {
 4,476,849 ( 0.09%)          self.growth_left -= special_is_empty(old_ctrl) as usize;
        14 ( 0.00%)          self.set_ctrl_h2(index, hash);
 3,581,461 ( 0.07%)          self.items += 1;
        14 ( 0.00%)      }
         .           
         .               #[inline]
         .               fn is_in_same_group(&self, i: usize, new_i: usize, hash: u64) -> bool {
         .                   let probe_seq_pos = self.probe_seq(hash).pos;
         .                   let probe_index =
         .                       |pos: usize| (pos.wrapping_sub(probe_seq_pos) & self.bucket_mask) / Group::WIDTH;
        39 ( 0.00%)          probe_index(i) == probe_index(new_i)
         .               }
         .           
         .               /// Sets a control byte to the hash, and possibly also the replicated control byte at
         .               /// the end of the array.
         .               #[inline]
        63 ( 0.00%)      unsafe fn set_ctrl_h2(&self, index: usize, hash: u64) {
        28 ( 0.00%)          self.set_ctrl(index, h2(hash));
        14 ( 0.00%)      }
         .           
         .               #[inline]
         .               unsafe fn replace_ctrl_h2(&self, index: usize, hash: u64) -> u8 {
         .                   let prev_ctrl = *self.ctrl(index);
         .                   self.set_ctrl_h2(index, hash);
         .                   prev_ctrl
         .               }
         .           
         .               /// Sets a control byte, and possibly also the replicated control byte at
         .               /// the end of the array.
         .               #[inline]
        70 ( 0.00%)      unsafe fn set_ctrl(&self, index: usize, ctrl: u8) {
         .                   // Replicate the first Group::WIDTH control bytes at the end of
         .                   // the array without using a branch:
         .                   // - If index >= Group::WIDTH then index == index2.
         .                   // - Otherwise index2 == self.bucket_mask + 1 + index.
         .                   //
         .                   // The very last replicated control byte is never actually read because
         .                   // we mask the initial index for unaligned loads, but we write it
         .                   // anyways because it makes the set_ctrl implementation simpler.
-- line 1309 ----------------------------------------
-- line 1312 ----------------------------------------
         .                   // replicate the buckets at the end of the trailing group. For example
         .                   // with 2 buckets and a group size of 4, the control bytes will look
         .                   // like this:
         .                   //
         .                   //     Real    |             Replicated
         .                   // ---------------------------------------------
         .                   // | [A] | [B] | [EMPTY] | [EMPTY] | [A] | [B] |
         .                   // ---------------------------------------------
 6,650,158 ( 0.14%)          let index2 = ((index.wrapping_sub(Group::WIDTH)) & self.bucket_mask) + Group::WIDTH;
         .           
 2,216,731 ( 0.05%)          *self.ctrl(index) = ctrl;
 2,218,268 ( 0.05%)          *self.ctrl(index2) = ctrl;
        14 ( 0.00%)      }
         .           
         .               /// Returns a pointer to a control byte.
         .               #[inline]
       284 ( 0.00%)      unsafe fn ctrl(&self, index: usize) -> *mut u8 {
         .                   debug_assert!(index < self.num_ctrl_bytes());
       213 ( 0.00%)          self.ctrl.as_ptr().add(index)
       142 ( 0.00%)      }
         .           
         .               #[inline]
        16 ( 0.00%)      fn buckets(&self) -> usize {
   734,552 ( 0.02%)          self.bucket_mask + 1
        16 ( 0.00%)      }
         .           
         .               #[inline]
         8 ( 0.00%)      fn num_ctrl_bytes(&self) -> usize {
   632,523 ( 0.01%)          self.bucket_mask + 1 + Group::WIDTH
         8 ( 0.00%)      }
         .           
         .               #[inline]
        26 ( 0.00%)      fn is_empty_singleton(&self) -> bool {
 3,043,504 ( 0.06%)          self.bucket_mask == 0
        52 ( 0.00%)      }
         .           
         .               #[allow(clippy::mut_mut)]
         .               #[inline]
        68 ( 0.00%)      unsafe fn prepare_resize(
         .                   &self,
         .                   table_layout: TableLayout,
         .                   capacity: usize,
         .                   fallibility: Fallibility,
         .               ) -> Result<crate::scopeguard::ScopeGuard<Self, impl FnMut(&mut Self)>, TryReserveError> {
         4 ( 0.00%)          debug_assert!(self.items <= capacity);
         .           
         .                   // Allocate and initialize the new table.
     5,439 ( 0.00%)          let mut new_table = RawTableInner::fallible_with_capacity(
         4 ( 0.00%)              self.alloc.clone(),
         .                       table_layout,
         .                       capacity,
         .                       fallibility,
         .                   )?;
   312,660 ( 0.01%)          new_table.growth_left -= self.items;
         8 ( 0.00%)          new_table.items = self.items;
         .           
         .                   // The hash function may panic, in which case we simply free the new
         .                   // table without dropping any elements that may have been copied into
         .                   // it.
         .                   //
         .                   // This guard is also used to free the old table on success, see
         .                   // the comment at the bottom of this function.
       108 ( 0.00%)          Ok(guard(new_table, move |self_| {
   141,875 ( 0.00%)              if !self_.is_empty_singleton() {
         .                           self_.free_buckets(table_layout);
         .                       }
         8 ( 0.00%)          }))
        16 ( 0.00%)      }
         .           
         .               /// Reserves or rehashes to make room for `additional` more elements.
         .               ///
         .               /// This uses dynamic dispatch to reduce the amount of
         .               /// code generated, but it is eliminated by LLVM optimizations when inlined.
         .               #[allow(clippy::inline_always)]
         .               #[inline(always)]
         .               unsafe fn reserve_rehash_inner(
-- line 1387 ----------------------------------------
-- line 1388 ----------------------------------------
         .                   &mut self,
         .                   additional: usize,
         .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
         .                   fallibility: Fallibility,
         .                   layout: TableLayout,
         .                   drop: Option<fn(*mut u8)>,
         .               ) -> Result<(), TryReserveError> {
         .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
   283,767 ( 0.01%)          let new_items = match self.items.checked_add(additional) {
        16 ( 0.00%)              Some(new_items) => new_items,
         .                       None => return Err(fallibility.capacity_overflow()),
         .                   };
   283,732 ( 0.01%)          let full_capacity = bucket_mask_to_capacity(self.bucket_mask);
   597,855 ( 0.01%)          if new_items <= full_capacity / 2 {
         .                       // Rehash in-place without re-allocating if we have plenty of spare
         .                       // capacity that is locked up due to DELETED entries.
         .                       self.rehash_in_place(hasher, layout.size, drop);
         2 ( 0.00%)              Ok(())
         .                   } else {
         .                       // Otherwise, conservatively resize to at least the next size up
         .                       // to avoid churning deletes into frequent rehashes.
         .                       self.resize_inner(
   141,895 ( 0.00%)                  usize::max(new_items, full_capacity + 1),
         .                           hasher,
         .                           fallibility,
         .                           layout,
         .                       )
         .                   }
         8 ( 0.00%)      }
         .           
         .               /// Allocates a new table of a different size and moves the contents of the
         .               /// current table into it.
         .               ///
         .               /// This uses dynamic dispatch to reduce the amount of
         .               /// code generated, but it is eliminated by LLVM optimizations when inlined.
         .               #[allow(clippy::inline_always)]
         .               #[inline(always)]
         .               unsafe fn resize_inner(
         .                   &mut self,
         .                   capacity: usize,
         .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
         .                   fallibility: Fallibility,
         .                   layout: TableLayout,
         .               ) -> Result<(), TryReserveError> {
    13,007 ( 0.00%)          let mut new_table = self.prepare_resize(layout, capacity, fallibility)?;
         .           
         .                   // Copy all elements to the new table.
       164 ( 0.00%)          for i in 0..self.buckets() {
 1,327,083 ( 0.03%)              if !is_full(*self.ctrl(i)) {
         .                           continue;
         .                       }
         .           
         .                       // This may panic.
         .                       let hash = hasher(self, i);
         .           
         .                       // We can use a simpler version of insert() here since:
         .                       // - there are no DELETED entries.
-- line 1444 ----------------------------------------
-- line 1452 ----------------------------------------
         .                           layout.size,
         .                       );
         .                   }
         .           
         .                   // We successfully copied all elements without panicking. Now replace
         .                   // self with the new table. The old table will have its memory freed but
         .                   // the items will not be dropped (since they have been moved into the
         .                   // new table).
        20 ( 0.00%)          mem::swap(self, &mut new_table);
         .           
   141,863 ( 0.00%)          Ok(())
        16 ( 0.00%)      }
         .           
         .               /// Rehashes the contents of the table in place (i.e. without changing the
         .               /// allocation).
         .               ///
         .               /// If `hasher` panics then some the table's contents may be lost.
         .               ///
         .               /// This uses dynamic dispatch to reduce the amount of
         .               /// code generated, but it is eliminated by LLVM optimizations when inlined.
-- line 1471 ----------------------------------------
-- line 1496 ----------------------------------------
         .                       }
         .                       self_.growth_left = bucket_mask_to_capacity(self_.bucket_mask) - self_.items;
         .                   });
         .           
         .                   // At this point, DELETED elements are elements that we haven't
         .                   // rehashed yet. Find them and re-insert them at their ideal
         .                   // position.
         .                   'outer: for i in 0..guard.buckets() {
        64 ( 0.00%)              if *guard.ctrl(i) != DELETED {
         .                           continue;
         .                       }
         .           
         .                       let i_p = guard.bucket_ptr(i, size_of);
         .           
         .                       'inner: loop {
         .                           // Hash the current item
         .                           let hash = hasher(*guard, i);
-- line 1512 ----------------------------------------
-- line 1515 ----------------------------------------
         .                           let new_i = guard.find_insert_slot(hash);
         .                           let new_i_p = guard.bucket_ptr(new_i, size_of);
         .           
         .                           // Probing works by scanning through all of the control
         .                           // bytes in groups, which may not be aligned to the group
         .                           // size. If both the new and old position fall within the
         .                           // same unaligned group, then there is no benefit in moving
         .                           // it and we can just continue to the next item.
        13 ( 0.00%)                  if likely(guard.is_in_same_group(i, new_i, hash)) {
         .                               guard.set_ctrl_h2(i, hash);
         .                               continue 'outer;
         .                           }
         .           
         .                           // We are moving the current item to a new position. Write
         .                           // our H2 to the control byte of the new position.
         .                           let prev_ctrl = guard.replace_ctrl_h2(new_i, hash);
         .                           if prev_ctrl == EMPTY {
-- line 1531 ----------------------------------------
-- line 1541 ----------------------------------------
         .                               // swapped into the old slot.
         .                               debug_assert_eq!(prev_ctrl, DELETED);
         .                               ptr::swap_nonoverlapping(i_p, new_i_p, size_of);
         .                               continue 'inner;
         .                           }
         .                       }
         .                   }
         .           
         3 ( 0.00%)          guard.growth_left = bucket_mask_to_capacity(guard.bucket_mask) - guard.items;
         .           
         .                   mem::forget(guard);
         .               }
         .           
         .               #[inline]
        28 ( 0.00%)      unsafe fn free_buckets(&mut self, table_layout: TableLayout) {
         .                   // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
        80 ( 0.00%)          let (layout, ctrl_offset) = match table_layout.calculate_layout_for(self.buckets()) {
        48 ( 0.00%)              Some(lco) => lco,
         .                       None => hint::unreachable_unchecked(),
         .                   };
        12 ( 0.00%)          self.alloc.deallocate(
    96,652 ( 0.00%)              NonNull::new_unchecked(self.ctrl.as_ptr().sub(ctrl_offset)),
         .                       layout,
         .                   );
         8 ( 0.00%)      }
         .           
         .               /// Marks all table buckets as empty without dropping their contents.
         .               #[inline]
         .               fn clear_no_drop(&mut self) {
    25,546 ( 0.00%)          if !self.is_empty_singleton() {
         .                       unsafe {
         .                           self.ctrl(0).write_bytes(EMPTY, self.num_ctrl_bytes());
         .                       }
         .                   }
    31,510 ( 0.00%)          self.items = 0;
    25,546 ( 0.00%)          self.growth_left = bucket_mask_to_capacity(self.bucket_mask);
         .               }
         .           
         .               #[inline]
         .               unsafe fn erase(&mut self, index: usize) {
         .                   debug_assert!(is_full(*self.ctrl(index)));
   232,319 ( 0.00%)          let index_before = index.wrapping_sub(Group::WIDTH) & self.bucket_mask;
         .                   let empty_before = Group::load(self.ctrl(index_before)).match_empty();
         .                   let empty_after = Group::load(self.ctrl(index)).match_empty();
         .           
         .                   // If we are inside a continuous block of Group::WIDTH full or deleted
         .                   // cells then a probe window may have seen a full block when trying to
         .                   // insert. We therefore need to keep that block non-empty so that
         .                   // lookups will continue searching to the next probe window.
         .                   //
         .                   // Note that in this context `leading_zeros` refers to the bytes at the
         .                   // end of a group, while `trailing_zeros` refers to the bytes at the
         .                   // beginning of a group.
   929,276 ( 0.02%)          let ctrl = if empty_before.leading_zeros() + empty_after.trailing_zeros() >= Group::WIDTH {
         .                       DELETED
         .                   } else {
 1,137,155 ( 0.02%)              self.growth_left += 1;
         .                       EMPTY
         .                   };
         .                   self.set_ctrl(index, ctrl);
   929,276 ( 0.02%)          self.items -= 1;
         .               }
         .           }
         .           
         .           impl<T: Clone, A: Allocator + Clone> Clone for RawTable<T, A> {
    16,256 ( 0.00%)      fn clone(&self) -> Self {
     2,088 ( 0.00%)          if self.table.is_empty_singleton() {
         .                       Self::new_in(self.table.alloc.clone())
         .                   } else {
         .                       unsafe {
         .                           let mut new_table = ManuallyDrop::new(
         .                               // Avoid `Result::ok_or_else` because it bloats LLVM IR.
         .                               match Self::new_uninitialized(
         .                                   self.table.alloc.clone(),
         .                                   self.table.buckets(),
-- line 1615 ----------------------------------------
-- line 1624 ----------------------------------------
         .                               // We need to free the memory allocated for the new table.
         .                               new_table.free_buckets();
         .                           });
         .           
         .                           // Return the newly created table.
         .                           ManuallyDrop::into_inner(new_table)
         .                       }
         .                   }
    18,288 ( 0.00%)      }
         .           
         .               fn clone_from(&mut self, source: &Self) {
         .                   if source.table.is_empty_singleton() {
         .                       *self = Self::new_in(self.table.alloc.clone());
         .                   } else {
         .                       unsafe {
         .                           // First, drop all our elements without clearing the control bytes.
         .                           self.drop_elements();
-- line 1640 ----------------------------------------
-- line 1687 ----------------------------------------
         .                       .table
         .                       .ctrl(0)
         .                       .copy_to_nonoverlapping(self.table.ctrl(0), self.table.num_ctrl_bytes());
         .                   source
         .                       .data_start()
         .                       .copy_to_nonoverlapping(self.data_start(), self.table.buckets());
         .           
         .                   self.table.items = source.table.items;
       108 ( 0.00%)          self.table.growth_left = source.table.growth_left;
         .               }
         .           }
         .           
         .           impl<T: Clone, A: Allocator + Clone> RawTable<T, A> {
         .               /// Common code for clone and clone_from. Assumes `self.buckets() == source.buckets()`.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               unsafe fn clone_from_impl(&mut self, source: &Self, mut on_panic: impl FnMut(&mut Self)) {
         .                   // Copy the control bytes unchanged. We do this in a single pass
-- line 1703 ----------------------------------------
-- line 1790 ----------------------------------------
         .               fn default() -> Self {
         .                   Self::new_in(Default::default())
         .               }
         .           }
         .           
         .           #[cfg(feature = "nightly")]
         .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawTable<T, A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
 1,523,033 ( 0.03%)      fn drop(&mut self) {
 1,309,189 ( 0.03%)          if !self.table.is_empty_singleton() {
         .                       unsafe {
         4 ( 0.00%)                  self.drop_elements();
         4 ( 0.00%)                  self.free_buckets();
         .                       }
         .                   }
 1,642,562 ( 0.03%)      }
         .           }
         .           #[cfg(not(feature = "nightly"))]
         .           impl<T, A: Allocator + Clone> Drop for RawTable<T, A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn drop(&mut self) {
         .                   if !self.table.is_empty_singleton() {
         .                       unsafe {
         .                           self.drop_elements();
-- line 1813 ----------------------------------------
-- line 1817 ----------------------------------------
         .               }
         .           }
         .           
         .           impl<T, A: Allocator + Clone> IntoIterator for RawTable<T, A> {
         .               type Item = T;
         .               type IntoIter = RawIntoIter<T, A>;
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
    21,264 ( 0.00%)      fn into_iter(self) -> RawIntoIter<T, A> {
         .                   unsafe {
         .                       let iter = self.iter();
         .                       self.into_iter_from(iter)
         .                   }
    26,580 ( 0.00%)      }
         .           }
         .           
         .           /// Iterator over a sub-range of a table. Unlike `RawIter` this iterator does
         .           /// not track an item count.
         .           pub(crate) struct RawIterRange<T> {
         .               // Mask of full buckets in the current group. Bits are cleared from this
         .               // mask as each element is processed.
         .               current_group: BitMask,
-- line 1838 ----------------------------------------
-- line 1934 ----------------------------------------
         .           
         .           impl<T> Iterator for RawIterRange<T> {
         .               type Item = Bucket<T>;
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn next(&mut self) -> Option<Bucket<T>> {
         .                   unsafe {
         .                       loop {
   547,653 ( 0.01%)                  if let Some(index) = self.current_group.lowest_set_bit() {
    88,189 ( 0.00%)                      self.current_group = self.current_group.remove_lowest_bit();
   149,646 ( 0.00%)                      return Some(self.data.next_n(index));
         .                           }
         .           
   498,019 ( 0.01%)                  if self.next_ctrl >= self.end {
         .                               return None;
         .                           }
         .           
         .                           // We might read past self.end up to the next group boundary,
         .                           // but this is fine because it only occurs on tables smaller
         .                           // than the group size where the trailing control bytes are all
         .                           // EMPTY. On larger tables self.end is guaranteed to be aligned
         .                           // to the group size (since tables are power-of-two sized).
    11,293 ( 0.00%)                  self.current_group = Group::load_aligned(self.next_ctrl).match_full();
    13,054 ( 0.00%)                  self.data = self.data.next_n(Group::WIDTH);
    18,228 ( 0.00%)                  self.next_ctrl = self.next_ctrl.add(Group::WIDTH);
         .                       }
         .                   }
         .               }
         .           
         .               #[inline]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
         .                   // We don't have an item count, so just guess based on the range size.
         .                   (
-- line 1966 ----------------------------------------
-- line 2102 ----------------------------------------
         .                           }
         .                       } else {
         .                           // We must have already iterated past the removed item.
         .                       }
         .                   }
         .               }
         .           
         .               unsafe fn drop_elements(&mut self) {
     4,062 ( 0.00%)          if mem::needs_drop::<T>() && self.len() != 0 {
         .                       for item in self {
         .                           item.drop();
         .                       }
         .                   }
         .               }
         .           }
         .           
         .           impl<T> Clone for RawIter<T> {
-- line 2118 ----------------------------------------
-- line 2124 ----------------------------------------
         .                   }
         .               }
         .           }
         .           
         .           impl<T> Iterator for RawIter<T> {
         .               type Item = Bucket<T>;
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
   108,936 ( 0.00%)      fn next(&mut self) -> Option<Bucket<T>> {
   277,966 ( 0.01%)          if let Some(b) = self.iter.next() {
   794,396 ( 0.02%)              self.items -= 1;
         .                       Some(b)
         .                   } else {
         .                       // We don't check against items == 0 here to allow the
         .                       // compiler to optimize away the item count entirely if the
         .                       // iterator length is never queried.
         .                       debug_assert_eq!(self.items, 0);
         .                       None
         .                   }
   217,872 ( 0.00%)      }
         .           
         .               #[inline]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
         .                   (self.items, Some(self.items))
         .               }
         .           }
         .           
         .           impl<T> ExactSizeIterator for RawIter<T> {}
-- line 2151 ----------------------------------------
-- line 2177 ----------------------------------------
         .               T: Sync,
         .               A: Sync,
         .           {
         .           }
         .           
         .           #[cfg(feature = "nightly")]
         .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
     7,246 ( 0.00%)      fn drop(&mut self) {
         .                   unsafe {
         .                       // Drop all remaining elements
         .                       self.iter.drop_elements();
         .           
         .                       // Free the table
    43,648 ( 0.00%)              if let Some((ptr, layout)) = self.allocation {
         .                           self.alloc.deallocate(ptr, layout);
         .                       }
         .                   }
     2,168 ( 0.00%)      }
         .           }
         .           #[cfg(not(feature = "nightly"))]
         .           impl<T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn drop(&mut self) {
         .                   unsafe {
         .                       // Drop all remaining elements
         .                       self.iter.drop_elements();
-- line 2203 ----------------------------------------
-- line 2209 ----------------------------------------
         .                   }
         .               }
         .           }
         .           
         .           impl<T, A: Allocator + Clone> Iterator for RawIntoIter<T, A> {
         .               type Item = T;
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
     1,633 ( 0.00%)      fn next(&mut self) -> Option<T> {
       957 ( 0.00%)          unsafe { Some(self.iter.next()?.read()) }
     3,266 ( 0.00%)      }
         .           
         .               #[inline]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
         4 ( 0.00%)          self.iter.size_hint()
         .               }
         .           }
         .           
         .           impl<T, A: Allocator + Clone> ExactSizeIterator for RawIntoIter<T, A> {}
         .           impl<T, A: Allocator + Clone> FusedIterator for RawIntoIter<T, A> {}
         .           
         .           /// Iterator which consumes elements without freeing the table storage.
         .           pub struct RawDrain<'a, T, A: Allocator + Clone = Global> {
-- line 2231 ----------------------------------------
-- line 2259 ----------------------------------------
         .           where
         .               T: Sync,
         .               A: Sync,
         .           {
         .           }
         .           
         .           impl<T, A: Allocator + Clone> Drop for RawDrain<'_, T, A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
     3,288 ( 0.00%)      fn drop(&mut self) {
         .                   unsafe {
         .                       // Drop all remaining elements. Note that this may panic.
         .                       self.iter.drop_elements();
         .           
         .                       // Reset the contents of the table now that all elements have been
         .                       // dropped.
         .                       self.table.clear_no_drop();
         .           
         .                       // Move the now empty table back to its original location.
       411 ( 0.00%)              self.orig_table
         .                           .as_ptr()
         .                           .copy_from_nonoverlapping(&*self.table, 1);
         .                   }
     3,288 ( 0.00%)      }
         .           }
         .           
         .           impl<T, A: Allocator + Clone> Iterator for RawDrain<'_, T, A> {
         .               type Item = T;
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn next(&mut self) -> Option<T> {
         .                   unsafe {
-- line 2289 ----------------------------------------

23,542,235 ( 0.49%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 108 ----------------------------------------
        .                   suppress_errors: bool,
        .               },
        .           }
        .           
        .           impl RegionckMode {
        .               /// Indicates that the MIR borrowck will repeat these region
        .               /// checks, so we should ignore errors if NLL is (unconditionally)
        .               /// enabled.
    1,286 ( 0.00%)      pub fn for_item_body(tcx: TyCtxt<'_>) -> Self {
        .                   // FIXME(Centril): Once we actually remove `::Migrate` also make
        .                   // this always `true` and then proceed to eliminate the dead code.
    1,286 ( 0.00%)          match tcx.borrowck_mode() {
        .                       // If we're on Migrate mode, report AST region errors
        .                       BorrowckMode::Migrate => RegionckMode::Erase { suppress_errors: false },
        .           
        .                       // If we're on MIR, don't report AST region errors as they should be reported by NLL
        .                       BorrowckMode::Mir => RegionckMode::Erase { suppress_errors: true },
        .                   }
    2,572 ( 0.00%)      }
        .           }
        .           
        .           /// This type contains all the things within `InferCtxt` that sit within a
        .           /// `RefCell` and are involved with taking/rolling back snapshots. Snapshot
        .           /// operations are hot enough that we want only one call to `borrow_mut` per
        .           /// call to `start_snapshot` and `rollback_to`.
        .           pub struct InferCtxtInner<'tcx> {
        .               /// Cache for projections. This cache is snapshotted along with the infcx.
-- line 134 ----------------------------------------
-- line 202 ----------------------------------------
        .               /// type instantiations (`ty::Infer`) to the actual opaque
        .               /// type (`ty::Opaque`). Used during fallback to map unconstrained
        .               /// opaque type inference variables to their corresponding
        .               /// opaque type.
        .               pub opaque_types_vars: FxHashMap<Ty<'tcx>, Ty<'tcx>>,
        .           }
        .           
        .           impl<'tcx> InferCtxtInner<'tcx> {
  123,315 ( 0.00%)      fn new() -> InferCtxtInner<'tcx> {
  838,542 ( 0.02%)          InferCtxtInner {
        .                       projection_cache: Default::default(),
        .                       type_variable_storage: type_variable::TypeVariableStorage::new(),
        .                       undo_log: InferCtxtUndoLogs::default(),
        .                       const_unification_storage: ut::UnificationTableStorage::new(),
        .                       int_unification_storage: ut::UnificationTableStorage::new(),
        .                       float_unification_storage: ut::UnificationTableStorage::new(),
   73,989 ( 0.00%)              region_constraint_storage: Some(RegionConstraintStorage::new()),
        .                       region_obligations: vec![],
        .                       opaque_types: Default::default(),
        .                       opaque_types_vars: Default::default(),
        .                   }
  147,978 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn region_obligations(&self) -> &[(hir::HirId, RegionObligation<'tcx>)] {
        .                   &self.region_obligations
        .               }
        .           
        .               #[inline]
        .               pub fn projection_cache(&mut self) -> traits::ProjectionCache<'_, 'tcx> {
    6,892 ( 0.00%)          self.projection_cache.with_log(&mut self.undo_log)
        .               }
        .           
        .               #[inline]
        .               fn type_variables(&mut self) -> type_variable::TypeVariableTable<'_, 'tcx> {
  869,422 ( 0.02%)          self.type_variable_storage.with_log(&mut self.undo_log)
        .               }
        .           
        .               #[inline]
        .               fn int_unification_table(
        .                   &mut self,
        .               ) -> ut::UnificationTable<
        .                   ut::InPlace<
        .                       ty::IntVid,
        .                       &mut ut::UnificationStorage<ty::IntVid>,
        .                       &mut InferCtxtUndoLogs<'tcx>,
        .                   >,
        .               > {
    2,180 ( 0.00%)          self.int_unification_storage.with_log(&mut self.undo_log)
        .               }
        .           
        .               #[inline]
        .               fn float_unification_table(
        .                   &mut self,
        .               ) -> ut::UnificationTable<
        .                   ut::InPlace<
        .                       ty::FloatVid,
        .                       &mut ut::UnificationStorage<ty::FloatVid>,
        .                       &mut InferCtxtUndoLogs<'tcx>,
        .                   >,
        .               > {
      419 ( 0.00%)          self.float_unification_storage.with_log(&mut self.undo_log)
        .               }
        .           
        .               #[inline]
        .               fn const_unification_table(
        .                   &mut self,
        .               ) -> ut::UnificationTable<
        .                   ut::InPlace<
        .                       ty::ConstVid<'tcx>,
        .                       &mut ut::UnificationStorage<ty::ConstVid<'tcx>>,
        .                       &mut InferCtxtUndoLogs<'tcx>,
        .                   >,
        .               > {
    4,107 ( 0.00%)          self.const_unification_storage.with_log(&mut self.undo_log)
        .               }
        .           
        .               #[inline]
        .               pub fn unwrap_region_constraints(&mut self) -> RegionConstraintCollector<'_, 'tcx> {
  138,441 ( 0.00%)          self.region_constraint_storage
        .                       .as_mut()
        .                       .expect("region constraints already solved")
  164,542 ( 0.00%)              .with_log(&mut self.undo_log)
        .               }
        .           }
        .           
        .           pub struct InferCtxt<'a, 'tcx> {
        .               pub tcx: TyCtxt<'tcx>,
        .           
        .               /// The `DefId` of the item in whose context we are performing inference or typeck.
        .               /// It is used to check whether an opaque type use is a defining use.
-- line 292 ----------------------------------------
-- line 361 ----------------------------------------
        .               /// item we are type-checking, and just consider those names as
        .               /// part of the root universe. So this would only get incremented
        .               /// when we enter into a higher-ranked (`for<..>`) type or trait
        .               /// bound.
        .               universe: Cell<ty::UniverseIndex>,
        .           }
        .           
        .           /// See the `error_reporting` module for more details.
  244,544 ( 0.01%)  #[derive(Clone, Copy, Debug, PartialEq, Eq, TypeFoldable)]
        .           pub enum ValuePairs<'tcx> {
        .               Types(ExpectedFound<Ty<'tcx>>),
        .               Regions(ExpectedFound<ty::Region<'tcx>>),
        .               Consts(ExpectedFound<&'tcx ty::Const<'tcx>>),
        .               TraitRefs(ExpectedFound<ty::TraitRef<'tcx>>),
        .               PolyTraitRefs(ExpectedFound<ty::PolyTraitRef<'tcx>>),
        .           }
        .           
-- line 377 ----------------------------------------
-- line 383 ----------------------------------------
        .           pub struct TypeTrace<'tcx> {
        .               cause: ObligationCause<'tcx>,
        .               values: ValuePairs<'tcx>,
        .           }
        .           
        .           /// The origin of a `r1 <= r2` constraint.
        .           ///
        .           /// See `error_reporting` module for more details
  231,087 ( 0.00%)  #[derive(Clone, Debug)]
        .           pub enum SubregionOrigin<'tcx> {
        .               /// Arose from a subtyping relation
   11,699 ( 0.00%)      Subtype(Box<TypeTrace<'tcx>>),
        .           
        .               /// When casting `&'a T` to an `&'b Trait` object,
        .               /// relating `'a` to `'b`
        .               RelateObjectBound(Span),
        .           
        .               /// Some type parameter was instantiated with the given type,
        .               /// and that type must outlive some region.
    3,460 ( 0.00%)      RelateParamBound(Span, Ty<'tcx>, Option<Span>),
        .           
        .               /// The given region parameter was instantiated with a region
        .               /// that must outlive some other region.
        .               RelateRegionParamBound(Span),
        .           
        .               /// Creating a pointer `b` to contents of another reference
        .               Reborrow(Span),
        .           
        .               /// Creating a pointer `b` to contents of an upvar
        .               ReborrowUpvar(Span, ty::UpvarId),
        .           
        .               /// Data with type `Ty<'tcx>` was borrowed
    2,990 ( 0.00%)      DataBorrowed(Ty<'tcx>, Span),
        .           
        .               /// (&'a &'b T) where a >= b
    2,516 ( 0.00%)      ReferenceOutlivesReferent(Ty<'tcx>, Span),
        .           
        .               /// Comparing the signature and requirements of an impl method against
        .               /// the containing trait.
       22 ( 0.00%)      CompareImplMethodObligation { span: Span, impl_item_def_id: DefId, trait_item_def_id: DefId },
        .           
        .               /// Comparing the signature and requirements of an impl associated type
        .               /// against the containing trait
        .               CompareImplTypeObligation { span: Span, impl_item_def_id: DefId, trait_item_def_id: DefId },
        .           }
        .           
        .           // `SubregionOrigin` is used a lot. Make sure it doesn't unintentionally get bigger.
        .           #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
-- line 430 ----------------------------------------
-- line 554 ----------------------------------------
        .               defining_use_anchor: Option<LocalDefId>,
        .           }
        .           
        .           pub trait TyCtxtInferExt<'tcx> {
        .               fn infer_ctxt(self) -> InferCtxtBuilder<'tcx>;
        .           }
        .           
        .           impl<'tcx> TyCtxtInferExt<'tcx> for TyCtxt<'tcx> {
   24,663 ( 0.00%)      fn infer_ctxt(self) -> InferCtxtBuilder<'tcx> {
   73,989 ( 0.00%)          InferCtxtBuilder { tcx: self, defining_use_anchor: None, fresh_typeck_results: None }
   24,663 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> InferCtxtBuilder<'tcx> {
        .               /// Used only by `rustc_typeck` during body type-checking/inference,
        .               /// will initialize `in_progress_typeck_results` with fresh `TypeckResults`.
        .               /// Will also change the scope for opaque type defining use checks to the given owner.
   27,621 ( 0.00%)      pub fn with_fresh_in_progress_typeck_results(mut self, table_owner: LocalDefId) -> Self {
   33,759 ( 0.00%)          self.fresh_typeck_results = Some(RefCell::new(ty::TypeckResults::new(table_owner)));
   15,345 ( 0.00%)          self.with_opaque_type_inference(table_owner)
   21,483 ( 0.00%)      }
        .           
        .               /// Whenever the `InferCtxt` should be able to handle defining uses of opaque types,
        .               /// you need to call this function. Otherwise the opaque type will be treated opaquely.
        .               ///
        .               /// It is only meant to be called in two places, for typeck
        .               /// (via `with_fresh_in_progress_typeck_results`) and for the inference context used
        .               /// in mir borrowck.
    2,726 ( 0.00%)      pub fn with_opaque_type_inference(mut self, defining_use_anchor: LocalDefId) -> Self {
    1,363 ( 0.00%)          self.defining_use_anchor = Some(defining_use_anchor);
    8,864 ( 0.00%)          self
    4,089 ( 0.00%)      }
        .           
        .               /// Given a canonical value `C` as a starting point, create an
        .               /// inference context that contains each of the bound values
        .               /// within instantiated as a fresh variable. The `f` closure is
        .               /// invoked with the new infcx, along with the instantiated value
        .               /// `V` and a substitution `S`. This substitution `S` maps from
        .               /// the bound values in `C` to their instantiated values in `V`
        .               /// (in other words, `S(C) = V`).
   34,553 ( 0.00%)      pub fn enter_with_canonical<T, R>(
        .                   &mut self,
        .                   span: Span,
        .                   canonical: &Canonical<'tcx, T>,
        .                   f: impl for<'a> FnOnce(InferCtxt<'a, 'tcx>, T, CanonicalVarValues<'tcx>) -> R,
        .               ) -> R
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
        .                   self.enter(|infcx| {
   46,430 ( 0.00%)              let (value, subst) =
    4,008 ( 0.00%)                  infcx.instantiate_canonical_with_fresh_inference_vars(span, canonical);
   68,041 ( 0.00%)              f(infcx, value, subst)
        .                   })
   37,370 ( 0.00%)      }
        .           
  150,308 ( 0.00%)      pub fn enter<R>(&mut self, f: impl for<'a> FnOnce(InferCtxt<'a, 'tcx>) -> R) -> R {
   70,754 ( 0.00%)          let InferCtxtBuilder { tcx, defining_use_anchor, ref fresh_typeck_results } = *self;
        .                   let in_progress_typeck_results = fresh_typeck_results.as_ref();
1,036,600 ( 0.02%)          f(InferCtxt {
        .                       tcx,
        .                       defining_use_anchor,
        .                       in_progress_typeck_results,
   24,663 ( 0.00%)              inner: RefCell::new(InferCtxtInner::new()),
        .                       lexical_region_resolutions: RefCell::new(None),
        .                       selection_cache: Default::default(),
        .                       evaluation_cache: Default::default(),
        .                       reported_trait_errors: Default::default(),
        .                       reported_closure_mismatch: Default::default(),
        .                       tainted_by_errors_flag: Cell::new(false),
   24,663 ( 0.00%)              err_count_on_creation: tcx.sess.err_count(),
        .                       in_snapshot: Cell::new(false),
        .                       skip_leak_check: Cell::new(false),
        .                       universe: Cell::new(ty::UniverseIndex::ROOT),
        .                   })
  159,971 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx, T> InferOk<'tcx, T> {
        .               pub fn unit(self) -> InferOk<'tcx, ()> {
        .                   InferOk { value: (), obligations: self.obligations }
        .               }
        .           
        .               /// Extracts `value`, registering any obligations into `fulfill_cx`.
        .               pub fn into_value_registering_obligations(
        .                   self,
        .                   infcx: &InferCtxt<'_, 'tcx>,
        .                   fulfill_cx: &mut dyn TraitEngine<'tcx>,
        .               ) -> T {
      725 ( 0.00%)          let InferOk { value, obligations } = self;
    2,672 ( 0.00%)          for obligation in obligations {
        .                       fulfill_cx.register_predicate_obligation(infcx, obligation);
        .                   }
        .                   value
        .               }
        .           }
        .           
        .           impl<'tcx> InferOk<'tcx, ()> {
   27,792 ( 0.00%)      pub fn into_obligations(self) -> PredicateObligations<'tcx> {
  111,168 ( 0.00%)          self.obligations
   27,792 ( 0.00%)      }
        .           }
        .           
        .           #[must_use = "once you start a snapshot, you should always consume it"]
        .           pub struct CombinedSnapshot<'a, 'tcx> {
        .               undo_snapshot: Snapshot<'tcx>,
        .               region_constraints_snapshot: RegionSnapshot,
        .               universe: ty::UniverseIndex,
        .               was_in_snapshot: bool,
-- line 662 ----------------------------------------
-- line 674 ----------------------------------------
        .                   let canonical = self.canonicalize_query((a, b), &mut OriginalQueryValues::default());
        .                   debug!("canonical consts: {:?}", &canonical.value);
        .           
        .                   self.tcx.try_unify_abstract_consts(canonical.value)
        .               }
        .           
        .               pub fn is_in_snapshot(&self) -> bool {
        .                   self.in_snapshot.get()
   44,183 ( 0.00%)      }
        .           
  291,008 ( 0.01%)      pub fn freshen<T: TypeFoldable<'tcx>>(&self, t: T) -> T {
  327,384 ( 0.01%)          t.fold_with(&mut self.freshener())
  327,384 ( 0.01%)      }
        .           
        .               /// Returns the origin of the type variable identified by `vid`, or `None`
        .               /// if this is not a type variable.
        .               ///
        .               /// No attempt is made to resolve `ty`.
      218 ( 0.00%)      pub fn type_var_origin(&'a self, ty: Ty<'tcx>) -> Option<TypeVariableOrigin> {
      436 ( 0.00%)          match *ty.kind() {
      109 ( 0.00%)              ty::Infer(ty::TyVar(vid)) => {
      436 ( 0.00%)                  Some(*self.inner.borrow_mut().type_variables().var_origin(vid))
        .                       }
        .                       _ => None,
        .                   }
      436 ( 0.00%)      }
        .           
   36,376 ( 0.00%)      pub fn freshener<'b>(&'b self) -> TypeFreshener<'b, 'tcx> {
        .                   freshen::TypeFreshener::new(self, false)
   36,376 ( 0.00%)      }
        .           
        .               /// Like `freshener`, but does not replace `'static` regions.
  156,501 ( 0.00%)      pub fn freshener_keep_static<'b>(&'b self) -> TypeFreshener<'b, 'tcx> {
        .                   freshen::TypeFreshener::new(self, true)
  156,501 ( 0.00%)      }
        .           
    5,368 ( 0.00%)      pub fn unsolved_variables(&self) -> Vec<Ty<'tcx>> {
    2,684 ( 0.00%)          let mut inner = self.inner.borrow_mut();
    2,684 ( 0.00%)          let mut vars: Vec<Ty<'_>> = inner
        .                       .type_variables()
        .                       .unsolved_variables()
        .                       .into_iter()
      216 ( 0.00%)              .map(|t| self.tcx.mk_ty_var(t))
        .                       .collect();
        .                   vars.extend(
        .                       (0..inner.int_unification_table().len())
        .                           .map(|i| ty::IntVid { index: i as u32 })
      330 ( 0.00%)                  .filter(|&vid| inner.int_unification_table().probe_value(vid).is_none())
        .                           .map(|v| self.tcx.mk_int_var(v)),
        .                   );
        .                   vars.extend(
        .                       (0..inner.float_unification_table().len())
        .                           .map(|i| ty::FloatVid { index: i as u32 })
       48 ( 0.00%)                  .filter(|&vid| inner.float_unification_table().probe_value(vid).is_none())
        .                           .map(|v| self.tcx.mk_float_var(v)),
        .                   );
        .                   vars
    9,394 ( 0.00%)      }
        .           
   73,884 ( 0.00%)      fn combine_fields(
        .                   &'a self,
        .                   trace: TypeTrace<'tcx>,
        .                   param_env: ty::ParamEnv<'tcx>,
        .               ) -> CombineFields<'a, 'tcx> {
  296,528 ( 0.01%)          CombineFields {
        .                       infcx: self,
  741,320 ( 0.02%)              trace,
        .                       cause: None,
        .                       param_env,
        .                       obligations: PredicateObligations::new(),
        .                   }
   73,884 ( 0.00%)      }
        .           
        .               /// Clear the "currently in a snapshot" flag, invoke the closure,
        .               /// then restore the flag to its original value. This flag is a
        .               /// debugging measure designed to detect cases where we start a
        .               /// snapshot, create type variables, and register obligations
        .               /// which may involve those type variables in the fulfillment cx,
        .               /// potentially leaving "dangling type variables" behind.
        .               /// In such cases, an assertion will fail when attempting to
-- line 753 ----------------------------------------
-- line 760 ----------------------------------------
        .               /// before we return, this is not a problem, as there won't be any
        .               /// escaping obligations in the main cx. In those cases, you can
        .               /// use this function.
        .               pub fn save_and_restore_in_snapshot_flag<F, R>(&self, func: F) -> R
        .               where
        .                   F: FnOnce(&Self) -> R,
        .               {
        .                   let flag = self.in_snapshot.replace(false);
   22,650 ( 0.00%)          let result = func(self);
        .                   self.in_snapshot.set(flag);
        .                   result
        .               }
        .           
  391,224 ( 0.01%)      fn start_snapshot(&self) -> CombinedSnapshot<'a, 'tcx> {
        .                   debug!("start_snapshot()");
        .           
        .                   let in_snapshot = self.in_snapshot.replace(true);
        .           
        .                   let mut inner = self.inner.borrow_mut();
        .           
1,173,672 ( 0.02%)          CombinedSnapshot {
        .                       undo_snapshot: inner.undo_log.start_snapshot(),
        .                       region_constraints_snapshot: inner.unwrap_region_constraints().start_snapshot(),
        .                       universe: self.universe(),
        .                       was_in_snapshot: in_snapshot,
        .                       // Borrow typeck results "in progress" (i.e., during typeck)
        .                       // to ban writes from within a snapshot to them.
  195,612 ( 0.00%)              _in_progress_typeck_results: self
        .                           .in_progress_typeck_results
        .                           .map(|typeck_results| typeck_results.borrow()),
        .                   }
  782,448 ( 0.02%)      }
        .           
  539,495 ( 0.01%)      #[instrument(skip(self, snapshot), level = "debug")]
        .               fn rollback_to(&self, cause: &str, snapshot: CombinedSnapshot<'a, 'tcx>) {
        .                   let CombinedSnapshot {
   49,045 ( 0.00%)              undo_snapshot,
   49,045 ( 0.00%)              region_constraints_snapshot,
   49,045 ( 0.00%)              universe,
   49,045 ( 0.00%)              was_in_snapshot,
   98,090 ( 0.00%)              _in_progress_typeck_results,
        .                   } = snapshot;
        .           
        .                   self.in_snapshot.set(was_in_snapshot);
        .                   self.universe.set(universe);
        .           
        .                   let mut inner = self.inner.borrow_mut();
   49,045 ( 0.00%)          inner.rollback_to(undo_snapshot);
        .                   inner.unwrap_region_constraints().rollback_to(region_constraints_snapshot);
        .               }
        .           
2,198,505 ( 0.05%)      #[instrument(skip(self, snapshot), level = "debug")]
        .               fn commit_from(&self, snapshot: CombinedSnapshot<'a, 'tcx>) {
        .                   let CombinedSnapshot {
  146,567 ( 0.00%)              undo_snapshot,
        .                       region_constraints_snapshot: _,
        .                       universe: _,
  146,567 ( 0.00%)              was_in_snapshot,
  293,134 ( 0.01%)              _in_progress_typeck_results,
        .                   } = snapshot;
        .           
        .                   self.in_snapshot.set(was_in_snapshot);
        .           
        .                   self.inner.borrow_mut().commit(undo_snapshot);
        .               }
        .           
        .               /// Executes `f` and commit the bindings.
   83,671 ( 0.00%)      #[instrument(skip(self, f), level = "debug")]
  103,015 ( 0.00%)      pub fn commit_unconditionally<R, F>(&self, f: F) -> R
        .               where
        .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
        .               {
    9,365 ( 0.00%)          let snapshot = self.start_snapshot();
   31,145 ( 0.00%)          let r = f(&snapshot);
   65,555 ( 0.00%)          self.commit_from(snapshot);
   56,236 ( 0.00%)          r
        .               }
        .           
        .               /// Execute `f` and commit the bindings if closure `f` returns `Ok(_)`.
  822,968 ( 0.02%)      #[instrument(skip(self, f), level = "debug")]
1,016,613 ( 0.02%)      pub fn commit_if_ok<T, E, F>(&self, f: F) -> Result<T, E>
        .               where
        .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> Result<T, E>,
        .               {
  174,364 ( 0.00%)          let snapshot = self.start_snapshot();
  470,353 ( 0.01%)          let r = f(&snapshot);
        .                   debug!("commit_if_ok() -- r.is_ok() = {}", r.is_ok());
  183,788 ( 0.00%)          match r {
        .                       Ok(_) => {
  975,479 ( 0.02%)                  self.commit_from(snapshot);
        .                       }
        .                       Err(_) => {
  205,671 ( 0.00%)                  self.rollback_to("commit_if_ok -- error", snapshot);
        .                       }
        .                   }
  995,029 ( 0.02%)          r
        .               }
        .           
        .               /// Execute `f` then unroll any bindings it creates.
  186,362 ( 0.00%)      #[instrument(skip(self, f), level = "debug")]
  216,938 ( 0.00%)      pub fn probe<R, F>(&self, f: F) -> R
        .               where
        .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
        .               {
   51,914 ( 0.00%)          let snapshot = self.start_snapshot();
   85,211 ( 0.00%)          let r = f(&snapshot);
  255,261 ( 0.01%)          self.rollback_to("probe", snapshot);
   79,136 ( 0.00%)          r
        .               }
        .           
        .               /// If `should_skip` is true, then execute `f` then unroll any bindings it creates.
      459 ( 0.00%)      #[instrument(skip(self, f), level = "debug")]
      612 ( 0.00%)      pub fn probe_maybe_skip_leak_check<R, F>(&self, should_skip: bool, f: F) -> R
        .               where
        .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
        .               {
      102 ( 0.00%)          let snapshot = self.start_snapshot();
       51 ( 0.00%)          let was_skip_leak_check = self.skip_leak_check.get();
      102 ( 0.00%)          if should_skip {
        .                       self.skip_leak_check.set(true);
        .                   }
      204 ( 0.00%)          let r = f(&snapshot);
      459 ( 0.00%)          self.rollback_to("probe", snapshot);
        .                   self.skip_leak_check.set(was_skip_leak_check);
      612 ( 0.00%)          r
        .               }
        .           
        .               /// Scan the constraints produced since `snapshot` began and returns:
        .               ///
        .               /// - `None` -- if none of them involve "region outlives" constraints
        .               /// - `Some(true)` -- if there are `'a: 'b` constraints where `'a` or `'b` is a placeholder
        .               /// - `Some(false)` -- if there are `'a: 'b` constraints but none involve placeholders
   14,122 ( 0.00%)      pub fn region_constraints_added_in_snapshot(
        .                   &self,
        .                   snapshot: &CombinedSnapshot<'a, 'tcx>,
        .               ) -> Option<bool> {
   28,244 ( 0.00%)          self.inner
        .                       .borrow_mut()
        .                       .unwrap_region_constraints()
        .                       .region_constraints_added_in_snapshot(&snapshot.undo_snapshot)
   21,183 ( 0.00%)      }
        .           
        .               pub fn add_given(&self, sub: ty::Region<'tcx>, sup: ty::RegionVid) {
        .                   self.inner.borrow_mut().unwrap_region_constraints().add_given(sub, sup);
        .               }
        .           
      192 ( 0.00%)      pub fn can_sub<T>(&self, param_env: ty::ParamEnv<'tcx>, a: T, b: T) -> UnitResult<'tcx>
        .               where
        .                   T: at::ToTrace<'tcx>,
        .               {
        .                   let origin = &ObligationCause::dummy();
        .                   self.probe(|_| {
        .                       self.at(origin, param_env).sub(a, b).map(|InferOk { obligations: _, .. }| {
        .                           // Ignore obligations, since we are unrolling
        .                           // everything anyway.
        .                       })
        .                   })
      144 ( 0.00%)      }
        .           
   13,728 ( 0.00%)      pub fn can_eq<T>(&self, param_env: ty::ParamEnv<'tcx>, a: T, b: T) -> UnitResult<'tcx>
        .               where
        .                   T: at::ToTrace<'tcx>,
        .               {
        .                   let origin = &ObligationCause::dummy();
        .                   self.probe(|_| {
        .                       self.at(origin, param_env).eq(a, b).map(|InferOk { obligations: _, .. }| {
        .                           // Ignore obligations, since we are unrolling
        .                           // everything anyway.
        .                       })
        .                   })
   10,296 ( 0.00%)      }
        .           
  134,300 ( 0.00%)      #[instrument(skip(self), level = "debug")]
        .               pub fn sub_regions(
        .                   &self,
        .                   origin: SubregionOrigin<'tcx>,
        .                   a: ty::Region<'tcx>,
        .                   b: ty::Region<'tcx>,
        .               ) {
  120,870 ( 0.00%)          self.inner.borrow_mut().unwrap_region_constraints().make_subregion(origin, a, b);
        .               }
        .           
        .               /// Require that the region `r` be equal to one of the regions in
        .               /// the set `regions`.
        .               #[instrument(skip(self), level = "debug")]
        .               pub fn member_constraint(
        .                   &self,
        .                   opaque_type_def_id: DefId,
-- line 947 ----------------------------------------
-- line 969 ----------------------------------------
        .               /// to `subtype_predicate` -- that is, "coercing" `a` to `b` winds up
        .               /// actually requiring `a <: b`. This is of course a valid coercion,
        .               /// but it's not as flexible as `FnCtxt::coerce` would be.
        .               ///
        .               /// (We may refactor this in the future, but there are a number of
        .               /// practical obstacles. Among other things, `FnCtxt::coerce` presently
        .               /// records adjustments that are required on the HIR in order to perform
        .               /// the coercion, and we don't currently have a way to manage that.)
       30 ( 0.00%)      pub fn coerce_predicate(
        .                   &self,
        .                   cause: &ObligationCause<'tcx>,
        .                   param_env: ty::ParamEnv<'tcx>,
        .                   predicate: ty::PolyCoercePredicate<'tcx>,
        .               ) -> Option<InferResult<'tcx, ()>> {
       20 ( 0.00%)          let subtype_predicate = predicate.map_bound(|p| ty::SubtypePredicate {
        .                       a_is_expected: false, // when coercing from `a` to `b`, `b` is expected
        .                       a: p.a,
        .                       b: p.b,
        .                   });
       50 ( 0.00%)          self.subtype_predicate(cause, param_env, subtype_predicate)
       40 ( 0.00%)      }
        .           
   10,812 ( 0.00%)      pub fn subtype_predicate(
        .                   &self,
        .                   cause: &ObligationCause<'tcx>,
        .                   param_env: ty::ParamEnv<'tcx>,
        .                   predicate: ty::PolySubtypePredicate<'tcx>,
        .               ) -> Option<InferResult<'tcx, ()>> {
        .                   // Check for two unresolved inference variables, in which case we can
        .                   // make no progress. This is partly a micro-optimization, but it's
        .                   // also an opportunity to "sub-unify" the variables. This isn't
-- line 999 ----------------------------------------
-- line 1002 ----------------------------------------
        .                   // earlier that they are sub-unified).
        .                   //
        .                   // Note that we can just skip the binders here because
        .                   // type variables can't (at present, at
        .                   // least) capture any of the things bound by this binder.
        .                   //
        .                   // Note that this sub here is not just for diagnostics - it has semantic
        .                   // effects as well.
      901 ( 0.00%)          let r_a = self.shallow_resolve(predicate.skip_binder().a);
      901 ( 0.00%)          let r_b = self.shallow_resolve(predicate.skip_binder().b);
    6,350 ( 0.00%)          match (r_a.kind(), r_b.kind()) {
    1,408 ( 0.00%)              (&ty::Infer(ty::TyVar(a_vid)), &ty::Infer(ty::TyVar(b_vid))) => {
        .                           self.inner.borrow_mut().type_variables().sub(a_vid, b_vid);
    1,408 ( 0.00%)                  return None;
        .                       }
        .                       _ => {}
        .                   }
        .           
        .                   Some(self.commit_if_ok(|_snapshot| {
      197 ( 0.00%)              let ty::SubtypePredicate { a_is_expected, a, b } =
        .                           self.replace_bound_vars_with_placeholders(predicate);
        .           
      394 ( 0.00%)              let ok = self.at(cause, param_env).sub_exp(a_is_expected, a, b)?;
        .           
        .                       Ok(ok.unit())
        .                   }))
    8,109 ( 0.00%)      }
        .           
   44,916 ( 0.00%)      pub fn region_outlives_predicate(
        .                   &self,
        .                   cause: &traits::ObligationCause<'tcx>,
        .                   predicate: ty::PolyRegionOutlivesPredicate<'tcx>,
        .               ) -> UnitResult<'tcx> {
        .                   self.commit_if_ok(|_snapshot| {
        .                       let ty::OutlivesPredicate(r_a, r_b) =
        .                           self.replace_bound_vars_with_placeholders(predicate);
        .                       let origin = SubregionOrigin::from_obligation_cause(cause, || {
        .                           RelateRegionParamBound(cause.span)
        .                       });
   37,430 ( 0.00%)              self.sub_regions(origin, r_b, r_a); // `b : a` ==> `a <= b`
        .                       Ok(())
        .                   })
   29,944 ( 0.00%)      }
        .           
        .               /// Number of type variables created so far.
       56 ( 0.00%)      pub fn num_ty_vars(&self) -> usize {
        .                   self.inner.borrow_mut().type_variables().num_vars()
      112 ( 0.00%)      }
        .           
   40,982 ( 0.00%)      pub fn next_ty_var_id(&self, origin: TypeVariableOrigin) -> TyVid {
  204,910 ( 0.00%)          self.inner.borrow_mut().type_variables().new_var(self.universe(), origin)
   61,473 ( 0.00%)      }
        .           
   37,642 ( 0.00%)      pub fn next_ty_var(&self, origin: TypeVariableOrigin) -> Ty<'tcx> {
  141,767 ( 0.00%)          self.tcx.mk_ty_var(self.next_ty_var_id(origin))
   56,463 ( 0.00%)      }
        .           
    2,608 ( 0.00%)      pub fn next_ty_var_in_universe(
        .                   &self,
        .                   origin: TypeVariableOrigin,
        .                   universe: ty::UniverseIndex,
        .               ) -> Ty<'tcx> {
   14,344 ( 0.00%)          let vid = self.inner.borrow_mut().type_variables().new_var(universe, origin);
    1,304 ( 0.00%)          self.tcx.mk_ty_var(vid)
    3,912 ( 0.00%)      }
        .           
        .               pub fn next_const_var(
        .                   &self,
        .                   ty: Ty<'tcx>,
        .                   origin: ConstVariableOrigin,
        .               ) -> &'tcx ty::Const<'tcx> {
        .                   self.tcx.mk_const_var(self.next_const_var_id(origin), ty)
        .               }
-- line 1074 ----------------------------------------
-- line 1090 ----------------------------------------
        .               pub fn next_const_var_id(&self, origin: ConstVariableOrigin) -> ConstVid<'tcx> {
        .                   self.inner.borrow_mut().const_unification_table().new_key(ConstVarValue {
        .                       origin,
        .                       val: ConstVariableValue::Unknown { universe: self.universe() },
        .                   })
        .               }
        .           
        .               fn next_int_var_id(&self) -> IntVid {
      830 ( 0.00%)          self.inner.borrow_mut().int_unification_table().new_key(None)
        .               }
        .           
      498 ( 0.00%)      pub fn next_int_var(&self) -> Ty<'tcx> {
        .                   self.tcx.mk_int_var(self.next_int_var_id())
      664 ( 0.00%)      }
        .           
        .               fn next_float_var_id(&self) -> FloatVid {
       80 ( 0.00%)          self.inner.borrow_mut().float_unification_table().new_key(None)
        .               }
        .           
       48 ( 0.00%)      pub fn next_float_var(&self) -> Ty<'tcx> {
        .                   self.tcx.mk_float_var(self.next_float_var_id())
       64 ( 0.00%)      }
        .           
        .               /// Creates a fresh region variable with the next available index.
        .               /// The variable will be created in the maximum universe created
        .               /// thus far, allowing it to name any region created thus far.
   18,322 ( 0.00%)      pub fn next_region_var(&self, origin: RegionVariableOrigin) -> ty::Region<'tcx> {
  371,307 ( 0.01%)          self.next_region_var_in_universe(origin, self.universe())
   36,644 ( 0.00%)      }
        .           
        .               /// Creates a fresh region variable with the next available index
        .               /// in the given universe; typically, you can use
        .               /// `next_region_var` and just use the maximal universe.
  145,356 ( 0.00%)      pub fn next_region_var_in_universe(
        .                   &self,
        .                   origin: RegionVariableOrigin,
        .                   universe: ty::UniverseIndex,
        .               ) -> ty::Region<'tcx> {
        .                   let region_var =
  944,814 ( 0.02%)              self.inner.borrow_mut().unwrap_region_constraints().new_region_var(universe, origin);
  363,390 ( 0.01%)          self.tcx.mk_region(ty::ReVar(region_var))
  218,034 ( 0.00%)      }
        .           
        .               /// Return the universe that the region `r` was created in.  For
        .               /// most regions (e.g., `'static`, named regions from the user,
        .               /// etc) this is the root universe U0. For inference variables or
        .               /// placeholders, however, it will return the universe which which
        .               /// they are associated.
   18,850 ( 0.00%)      pub fn universe_of_region(&self, r: ty::Region<'tcx>) -> ty::UniverseIndex {
        .                   self.inner.borrow_mut().unwrap_region_constraints().universe(r)
   28,275 ( 0.00%)      }
        .           
        .               /// Number of region variables created so far.
   11,058 ( 0.00%)      pub fn num_region_vars(&self) -> usize {
        .                   self.inner.borrow_mut().unwrap_region_constraints().num_region_vars()
   16,587 ( 0.00%)      }
        .           
        .               /// Just a convenient wrapper of `next_region_var` for using during NLL.
   34,108 ( 0.00%)      pub fn next_nll_region_var(&self, origin: NllRegionVariableOrigin) -> ty::Region<'tcx> {
        .                   self.next_region_var(RegionVariableOrigin::Nll(origin))
   68,216 ( 0.00%)      }
        .           
        .               /// Just a convenient wrapper of `next_region_var` for using during NLL.
      380 ( 0.00%)      pub fn next_nll_region_var_in_universe(
        .                   &self,
        .                   origin: NllRegionVariableOrigin,
        .                   universe: ty::UniverseIndex,
        .               ) -> ty::Region<'tcx> {
    2,744 ( 0.00%)          self.next_region_var_in_universe(RegionVariableOrigin::Nll(origin), universe)
      760 ( 0.00%)      }
        .           
  218,752 ( 0.00%)      pub fn var_for_def(&self, span: Span, param: &ty::GenericParamDef) -> GenericArg<'tcx> {
  122,476 ( 0.00%)          match param.kind {
        .                       GenericParamDefKind::Lifetime => {
        .                           // Create a region inference variable for the given
        .                           // region parameter definition.
    7,122 ( 0.00%)                  self.next_region_var(EarlyBoundRegion(span, param.name)).into()
        .                       }
        .                       GenericParamDefKind::Type { .. } => {
        .                           // Create a type inference variable for the given
        .                           // type parameter definition. The substitutions are
        .                           // for actual parameters that may be referred to by
        .                           // the default of this type parameter, if it exists.
        .                           // e.g., `struct Foo<A, B, C = (A, B)>(...);` when
        .                           // used in a path such as `Foo::<T, U>::new()` will
        .                           // use an inference variable for `C` with `[T, U]`
        .                           // as the substitutions for the default, `(T, U)`.
   80,868 ( 0.00%)                  let ty_var_id = self.inner.borrow_mut().type_variables().new_var(
        .                               self.universe(),
  101,085 ( 0.00%)                      TypeVariableOrigin {
        .                                   kind: TypeVariableOriginKind::TypeParameterDefinition(
   20,217 ( 0.00%)                              param.name,
   20,217 ( 0.00%)                              Some(param.def_id),
        .                                   ),
        .                                   span,
        .                               },
        .                           );
        .           
   20,217 ( 0.00%)                  self.tcx.mk_ty_var(ty_var_id).into()
        .                       }
        .                       GenericParamDefKind::Const { .. } => {
        .                           let origin = ConstVariableOrigin {
        .                               kind: ConstVariableOriginKind::ConstParameterDefinition(
        .                                   param.name,
        .                                   param.def_id,
        .                               ),
        .                               span,
        .                           };
        .                           let const_var_id =
       55 ( 0.00%)                      self.inner.borrow_mut().const_unification_table().new_key(ConstVarValue {
        .                                   origin,
        .                                   val: ConstVariableValue::Unknown { universe: self.universe() },
        .                               });
        5 ( 0.00%)                  self.tcx.mk_const_var(const_var_id, self.tcx.type_of(param.def_id)).into()
        .                       }
        .                   }
       40 ( 0.00%)      }
        .           
        .               /// Given a set of generics defined on a type or impl, returns a substitution mapping each
        .               /// type/region parameter to a fresh inference variable.
   39,639 ( 0.00%)      pub fn fresh_substs_for_item(&self, span: Span, def_id: DefId) -> SubstsRef<'tcx> {
  199,683 ( 0.00%)          InternalSubsts::for_item(self.tcx, def_id, |param, _| self.var_for_def(span, param))
   26,426 ( 0.00%)      }
        .           
        .               /// Returns `true` if errors have been reported since this infcx was
        .               /// created. This is sometimes used as a heuristic to skip
        .               /// reporting errors that often occur as a result of earlier
        .               /// errors, but where it's hard to be 100% sure (e.g., unresolved
        .               /// inference variables, regionck errors).
    2,790 ( 0.00%)      pub fn is_tainted_by_errors(&self) -> bool {
        .                   debug!(
        .                       "is_tainted_by_errors(err_count={}, err_count_on_creation={}, \
        .                        tainted_by_errors_flag={})",
        .                       self.tcx.sess.err_count(),
        .                       self.err_count_on_creation,
        .                       self.tainted_by_errors_flag.get()
        .                   );
        .           
   74,613 ( 0.00%)          if self.tcx.sess.err_count() > self.err_count_on_creation {
        .                       return true; // errors reported since this infcx was made
        .                   }
        .                   self.tainted_by_errors_flag.get()
    4,185 ( 0.00%)      }
        .           
        .               /// Set the "tainted by errors" flag to true. We call this when we
        .               /// observe an error from a prior pass.
        .               pub fn set_tainted_by_errors(&self) {
        .                   debug!("set_tainted_by_errors()");
        .                   self.tainted_by_errors_flag.set(true)
        .               }
        .           
        .               /// Process the region constraints and return any any errors that
        .               /// result. After this, no more unification operations should be
        .               /// done -- or the compiler will panic -- but it is legal to use
        .               /// `resolve_vars_if_possible` as well as `fully_resolve`.
   75,656 ( 0.00%)      pub fn resolve_regions(
        .                   &self,
        .                   region_context: DefId,
        .                   outlives_env: &OutlivesEnvironment<'tcx>,
        .                   mode: RegionckMode,
        .               ) -> Vec<RegionResolutionError<'tcx>> {
  205,352 ( 0.00%)          let (var_infos, data) = {
        .                       let mut inner = self.inner.borrow_mut();
        .                       let inner = &mut *inner;
   10,808 ( 0.00%)              assert!(
   32,424 ( 0.00%)                  self.is_tainted_by_errors() || inner.region_obligations.is_empty(),
        .                           "region_obligations not empty: {:#?}",
        .                           inner.region_obligations
        .                       );
        .                       inner
        .                           .region_constraint_storage
        .                           .take()
        .                           .expect("regions already resolved")
        .                           .with_log(&mut inner.undo_log)
        .                           .into_infos_and_data()
   10,808 ( 0.00%)          };
        .           
        .                   let region_rels =
   10,808 ( 0.00%)              &RegionRelations::new(self.tcx, region_context, outlives_env.free_region_map());
        .           
   97,272 ( 0.00%)          let (lexical_region_resolutions, errors) =
  259,392 ( 0.01%)              lexical_region_resolve::resolve(region_rels, var_infos, data, mode);
        .           
   43,232 ( 0.00%)          let old_value = self.lexical_region_resolutions.replace(Some(lexical_region_resolutions));
   10,808 ( 0.00%)          assert!(old_value.is_none());
        .           
        .                   errors
   97,272 ( 0.00%)      }
        .           
        .               /// Process the region constraints and report any errors that
        .               /// result. After this, no more unification operations should be
        .               /// done -- or the compiler will panic -- but it is legal to use
        .               /// `resolve_vars_if_possible` as well as `fully_resolve`.
  108,080 ( 0.00%)      pub fn resolve_regions_and_report_errors(
        .                   &self,
        .                   region_context: DefId,
        .                   outlives_env: &OutlivesEnvironment<'tcx>,
        .                   mode: RegionckMode,
        .               ) {
   21,616 ( 0.00%)          let errors = self.resolve_regions(region_context, outlives_env, mode);
        .           
   32,424 ( 0.00%)          if !self.is_tainted_by_errors() {
        .                       // As a heuristic, just skip reporting region errors
        .                       // altogether if other errors have been reported while
        .                       // this infcx was in use.  This is totally hokey but
        .                       // otherwise we have a hard time separating legit region
        .                       // errors from silly ones.
   21,616 ( 0.00%)              self.report_region_errors(&errors);
        .                   }
   54,040 ( 0.00%)      }
        .           
        .               /// Obtains (and clears) the current set of region
        .               /// constraints. The inference context is still usable: further
        .               /// unifications will simply add new constraints.
        .               ///
        .               /// This method is not meant to be used with normal lexical region
        .               /// resolution. Rather, it is used in the NLL mode as a kind of
        .               /// interim hack: basically we run normal type-check and generate
-- line 1307 ----------------------------------------
-- line 1319 ----------------------------------------
        .               }
        .           
        .               /// Gives temporary access to the region constraint data.
        .               pub fn with_region_constraints<R>(
        .                   &self,
        .                   op: impl FnOnce(&RegionConstraintData<'tcx>) -> R,
        .               ) -> R {
        .                   let mut inner = self.inner.borrow_mut();
   14,536 ( 0.00%)          op(inner.unwrap_region_constraints().data())
        .               }
        .           
        .               pub fn region_var_origin(&self, vid: ty::RegionVid) -> RegionVariableOrigin {
        .                   let mut inner = self.inner.borrow_mut();
        .                   let inner = &mut *inner;
        .                   inner
        .                       .region_constraint_storage
        .                       .as_mut()
-- line 1335 ----------------------------------------
-- line 1338 ----------------------------------------
        .                       .var_origin(vid)
        .               }
        .           
        .               /// Takes ownership of the list of variable regions. This implies
        .               /// that all the region constraints have already been taken, and
        .               /// hence that `resolve_regions_and_report_errors` can never be
        .               /// called. This is used only during NLL processing to "hand off" ownership
        .               /// of the set of region variables into the NLL region context.
    6,815 ( 0.00%)      pub fn take_region_var_origins(&self) -> VarInfos {
        .                   let mut inner = self.inner.borrow_mut();
   25,897 ( 0.00%)          let (var_infos, data) = inner
        .                       .region_constraint_storage
        .                       .take()
        .                       .expect("regions already resolved")
        .                       .with_log(&mut inner.undo_log)
    1,363 ( 0.00%)              .into_infos_and_data();
    1,363 ( 0.00%)          assert!(data.is_empty());
        .                   var_infos
   10,904 ( 0.00%)      }
        .           
        .               pub fn ty_to_string(&self, t: Ty<'tcx>) -> String {
        .                   self.resolve_vars_if_possible(t).to_string()
        .               }
        .           
        .               /// If `TyVar(vid)` resolves to a type, return that type. Else, return the
        .               /// universe index of `TyVar(vid)`.
   16,548 ( 0.00%)      pub fn probe_ty_var(&self, vid: TyVid) -> Result<Ty<'tcx>, ty::UniverseIndex> {
        .                   use self::type_variable::TypeVariableValue;
        .           
   49,644 ( 0.00%)          match self.inner.borrow_mut().type_variables().probe(vid) {
        .                       TypeVariableValue::Known { value } => Ok(value),
        .                       TypeVariableValue::Unknown { universe } => Err(universe),
        .                   }
   57,918 ( 0.00%)      }
        .           
        .               /// Resolve any type variables found in `value` -- but only one
        .               /// level.  So, if the variable `?X` is bound to some type
        .               /// `Foo<?Y>`, then this would return `Foo<?Y>` (but `?Y` may
        .               /// itself be bound to a type).
        .               ///
        .               /// Useful when you only need to inspect the outermost level of
        .               /// the type and don't care about nested types (or perhaps you
        .               /// will be resolving them as well, e.g. in a loop).
        .               pub fn shallow_resolve<T>(&self, value: T) -> T
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
  354,668 ( 0.01%)          value.fold_with(&mut ShallowResolver { infcx: self })
        .               }
        .           
   18,526 ( 0.00%)      pub fn root_var(&self, var: ty::TyVid) -> ty::TyVid {
        .                   self.inner.borrow_mut().type_variables().root_var(var)
   27,789 ( 0.00%)      }
        .           
        .               /// Where possible, replaces type/const variables in
        .               /// `value` with their final value. Note that region variables
        .               /// are unaffected. If a type/const variable has not been unified, it
        .               /// is left as is. This is an idempotent operation that does
        .               /// not affect inference state in any way and so you can do it
        .               /// at will.
    1,360 ( 0.00%)      pub fn resolve_vars_if_possible<T>(&self, value: T) -> T
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
  320,325 ( 0.01%)          if !value.needs_infer() {
  247,184 ( 0.01%)              return value; // Avoid duplicated subst-folding.
        .                   }
  299,149 ( 0.01%)          let mut r = resolve::OpportunisticVarResolver::new(self);
  378,677 ( 0.01%)          value.fold_with(&mut r)
    1,343 ( 0.00%)      }
        .           
        .               /// Returns the first unresolved variable contained in `T`. In the
        .               /// process of visiting `T`, this will resolve (where possible)
        .               /// type variables in `T`, but it never constructs the final,
        .               /// resolved type, so it's more efficient than
        .               /// `resolve_vars_if_possible()`.
        .               pub fn unresolved_type_vars<T>(&self, value: &T) -> Option<(Ty<'tcx>, Option<Span>)>
        .               where
-- line 1415 ----------------------------------------
-- line 1490 ----------------------------------------
        .                   expected: &'tcx ty::Const<'tcx>,
        .                   actual: &'tcx ty::Const<'tcx>,
        .                   err: TypeError<'tcx>,
        .               ) -> DiagnosticBuilder<'tcx> {
        .                   let trace = TypeTrace::consts(cause, true, expected, actual);
        .                   self.report_and_explain_type_error(trace, &err)
        .               }
        .           
   29,736 ( 0.00%)      pub fn replace_bound_vars_with_fresh_vars<T>(
        .                   &self,
        .                   span: Span,
        .                   lbrct: LateBoundRegionConversionTime,
        .                   value: ty::Binder<'tcx, T>,
        .               ) -> (T, BTreeMap<ty::BoundRegion, ty::Region<'tcx>>)
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
        .                   let fld_r =
  172,697 ( 0.00%)              |br: ty::BoundRegion| self.next_region_var(LateBoundRegion(span, br.kind, lbrct));
        .                   let fld_t = |_| {
        .                       self.next_ty_var(TypeVariableOrigin {
        .                           kind: TypeVariableOriginKind::MiscVariable,
        .                           span,
        .                       })
        .                   };
        .                   let fld_c = |_, ty| {
        .                       self.next_const_var(
        .                           ty,
        .                           ConstVariableOrigin { kind: ConstVariableOriginKind::MiscVariable, span },
        .                       )
        .                   };
  196,324 ( 0.00%)          self.tcx.replace_bound_vars(value, fld_r, fld_t, fld_c)
   19,824 ( 0.00%)      }
        .           
        .               /// See the [`region_constraints::RegionConstraintCollector::verify_generic_bound`] method.
    3,472 ( 0.00%)      pub fn verify_generic_bound(
        .                   &self,
        .                   origin: SubregionOrigin<'tcx>,
        .                   kind: GenericKind<'tcx>,
        .                   a: ty::Region<'tcx>,
        .                   bound: VerifyBound<'tcx>,
        .               ) {
        .                   debug!("verify_generic_bound({:?}, {:?} <: {:?})", kind, a, bound);
        .           
    1,302 ( 0.00%)          self.inner
        .                       .borrow_mut()
        .                       .unwrap_region_constraints()
    7,378 ( 0.00%)              .verify_generic_bound(origin, kind, a, bound);
    3,038 ( 0.00%)      }
        .           
        .               /// Obtains the latest type of the given closure; this may be a
        .               /// closure in the current function, in which case its
        .               /// `ClosureKind` may not yet be known.
    1,000 ( 0.00%)      pub fn closure_kind(&self, closure_substs: SubstsRef<'tcx>) -> Option<ty::ClosureKind> {
    2,000 ( 0.00%)          let closure_kind_ty = closure_substs.as_closure().kind_ty();
        .                   let closure_kind_ty = self.shallow_resolve(closure_kind_ty);
    1,500 ( 0.00%)          closure_kind_ty.to_opt_closure_kind()
        .               }
        .           
        .               /// Clears the selection, evaluation, and projection caches. This is useful when
        .               /// repeatedly attempting to select an `Obligation` while changing only
        .               /// its `ParamEnv`, since `FulfillmentContext` doesn't use probing.
        .               pub fn clear_caches(&self) {
        .                   self.selection_cache.clear();
        .                   self.evaluation_cache.clear();
        .                   self.inner.borrow_mut().projection_cache().clear();
        .               }
        .           
        .               pub fn universe(&self) -> ty::UniverseIndex {
  578,946 ( 0.01%)          self.universe.get()
  210,750 ( 0.00%)      }
        .           
        .               /// Creates and return a fresh universe that extends all previous
        .               /// universes. Updates `self.universe` to that new universe.
      270 ( 0.00%)      pub fn create_next_universe(&self) -> ty::UniverseIndex {
      418 ( 0.00%)          let u = self.universe.get().next_universe();
        .                   self.universe.set(u);
        .                   u
      270 ( 0.00%)      }
        .           
        .               /// Resolves and evaluates a constant.
        .               ///
        .               /// The constant can be located on a trait like `<A as B>::C`, in which case the given
        .               /// substitutions and environment are used to resolve the constant. Alternatively if the
        .               /// constant has generic parameters in scope the substitutions are used to evaluate the value of
        .               /// the constant. For example in `fn foo<T>() { let _ = [0; bar::<T>()]; }` the repeat count
        .               /// constant `bar::<T>()` requires a substitution for `T`, if the substitution for `T` is still
        .               /// too generic for the constant to be evaluated then `Err(ErrorHandled::TooGeneric)` is
        .               /// returned.
        .               ///
        .               /// This handles inferences variables within both `param_env` and `substs` by
        .               /// performing the operation on their respective canonical forms.
    2,093 ( 0.00%)      pub fn const_eval_resolve(
        .                   &self,
        .                   param_env: ty::ParamEnv<'tcx>,
        .                   unevaluated: ty::Unevaluated<'tcx>,
        .                   span: Option<Span>,
        .               ) -> EvalToConstValueResult<'tcx> {
      161 ( 0.00%)          let substs = self.resolve_vars_if_possible(unevaluated.substs);
        .           
        .                   // Postpone the evaluation of constants whose substs depend on inference
        .                   // variables
        .                   if substs.has_infer_types_or_consts() {
        .                       return Err(ErrorHandled::TooGeneric);
        .                   }
        .           
      161 ( 0.00%)          let param_env_erased = self.tcx.erase_regions(param_env);
        .                   let substs_erased = self.tcx.erase_regions(substs);
        .           
        .                   let unevaluated = ty::Unevaluated {
        .                       def: unevaluated.def,
        .                       substs: substs_erased,
      322 ( 0.00%)              promoted: unevaluated.promoted,
        .                   };
        .           
        .                   // The return value is the evaluated value which doesn't contain any reference to inference
        .                   // variables, thus we don't need to substitute back the original values.
    1,932 ( 0.00%)          self.tcx.const_eval_resolve(param_env_erased, unevaluated, span)
    1,449 ( 0.00%)      }
        .           
        .               /// If `typ` is a type variable of some kind, resolve it one level
        .               /// (but do not resolve types found in the result). If `typ` is
        .               /// not a type variable, just return it unmodified.
        .               // FIXME(eddyb) inline into `ShallowResolver::visit_ty`.
3,505,024 ( 0.07%)      fn shallow_resolve_ty(&self, typ: Ty<'tcx>) -> Ty<'tcx> {
1,785,897 ( 0.04%)          match *typ.kind() {
        .                       ty::Infer(ty::TyVar(v)) => {
        .                           // Not entirely obvious: if `typ` is a type variable,
        .                           // it can be resolved to an int/float variable, which
        .                           // can then be recursively resolved, hence the
        .                           // recursion. Note though that we prevent type
        .                           // variables from unifying to other type variables
        .                           // directly (though they may be embedded
        .                           // structurally), and we prevent cycles in any case,
        .                           // so this recursion should always be of very limited
        .                           // depth.
        .                           //
        .                           // Note: if these two lines are combined into one we get
        .                           // dynamic borrow errors on `self.inner`.
  903,972 ( 0.02%)                  let known = self.inner.borrow_mut().type_variables().probe(v).known();
        .                           known.map_or(typ, |t| self.shallow_resolve_ty(t))
        .                       }
        .           
    2,956 ( 0.00%)              ty::Infer(ty::IntVar(v)) => self
        .                           .inner
        .                           .borrow_mut()
        .                           .int_unification_table()
        .                           .probe_value(v)
    1,542 ( 0.00%)                  .map(|v| v.to_type(self.tcx))
        .                           .unwrap_or(typ),
        .           
      900 ( 0.00%)              ty::Infer(ty::FloatVar(v)) => self
        .                           .inner
        .                           .borrow_mut()
        .                           .float_unification_table()
        .                           .probe_value(v)
      448 ( 0.00%)                  .map(|v| v.to_type(self.tcx))
        .                           .unwrap_or(typ),
        .           
        .                       _ => typ,
        .                   }
3,943,152 ( 0.08%)      }
        .           
        .               /// `ty_or_const_infer_var_changed` is equivalent to one of these two:
        .               ///   * `shallow_resolve(ty) != ty` (where `ty.kind = ty::Infer(_)`)
        .               ///   * `shallow_resolve(ct) != ct` (where `ct.kind = ty::ConstKind::Infer(_)`)
        .               ///
        .               /// However, `ty_or_const_infer_var_changed` is more efficient. It's always
        .               /// inlined, despite being large, because it has only two call sites that
        .               /// are extremely hot (both in `traits::fulfill`'s checking of `stalled_on`
-- line 1659 ----------------------------------------
-- line 1662 ----------------------------------------
        .               #[inline(always)]
        .               pub fn ty_or_const_infer_var_changed(&self, infer_var: TyOrConstInferVar<'tcx>) -> bool {
        .                   match infer_var {
        .                       TyOrConstInferVar::Ty(v) => {
        .                           use self::type_variable::TypeVariableValue;
        .           
        .                           // If `inlined_probe` returns a `Known` value, it never equals
        .                           // `ty::Infer(ty::TyVar(v))`.
1,381,670 ( 0.03%)                  match self.inner.borrow_mut().type_variables().inlined_probe(v) {
        .                               TypeVariableValue::Unknown { .. } => false,
        .                               TypeVariableValue::Known { .. } => true,
        .                           }
        .                       }
        .           
        .                       TyOrConstInferVar::TyInt(v) => {
        .                           // If `inlined_probe_value` returns a value it's always a
        .                           // `ty::Int(_)` or `ty::UInt(_)`, which never matches a
        .                           // `ty::Infer(_)`.
       78 ( 0.00%)                  self.inner.borrow_mut().int_unification_table().inlined_probe_value(v).is_some()
        .                       }
        .           
        .                       TyOrConstInferVar::TyFloat(v) => {
        .                           // If `probe_value` returns a value it's always a
        .                           // `ty::Float(_)`, which never matches a `ty::Infer(_)`.
        .                           //
        .                           // Not `inlined_probe_value(v)` because this call site is colder.
        .                           self.inner.borrow_mut().float_unification_table().probe_value(v).is_some()
-- line 1688 ----------------------------------------
-- line 1716 ----------------------------------------
        .               /// Equivalent to `ty::ConstKind::Infer(ty::InferConst::Var(_))`.
        .               Const(ConstVid<'tcx>),
        .           }
        .           
        .           impl<'tcx> TyOrConstInferVar<'tcx> {
        .               /// Tries to extract an inference variable from a type or a constant, returns `None`
        .               /// for types other than `ty::Infer(_)` (or `InferTy::Fresh*`) and
        .               /// for constants other than `ty::ConstKind::Infer(_)` (or `InferConst::Fresh`).
   11,317 ( 0.00%)      pub fn maybe_from_generic_arg(arg: GenericArg<'tcx>) -> Option<Self> {
        .                   match arg.unpack() {
        .                       GenericArgKind::Type(ty) => Self::maybe_from_ty(ty),
        .                       GenericArgKind::Const(ct) => Self::maybe_from_const(ct),
        .                       GenericArgKind::Lifetime(_) => None,
        .                   }
   11,317 ( 0.00%)      }
        .           
        .               /// Tries to extract an inference variable from a type, returns `None`
        .               /// for types other than `ty::Infer(_)` (or `InferTy::Fresh*`).
    1,404 ( 0.00%)      pub fn maybe_from_ty(ty: Ty<'tcx>) -> Option<Self> {
  114,481 ( 0.00%)          match *ty.kind() {
   25,434 ( 0.00%)              ty::Infer(ty::TyVar(v)) => Some(TyOrConstInferVar::Ty(v)),
        8 ( 0.00%)              ty::Infer(ty::IntVar(v)) => Some(TyOrConstInferVar::TyInt(v)),
        .                       ty::Infer(ty::FloatVar(v)) => Some(TyOrConstInferVar::TyFloat(v)),
        .                       _ => None,
        .                   }
    1,404 ( 0.00%)      }
        .           
        .               /// Tries to extract an inference variable from a constant, returns `None`
        .               /// for constants other than `ty::ConstKind::Infer(_)` (or `InferConst::Fresh`).
        .               pub fn maybe_from_const(ct: &'tcx ty::Const<'tcx>) -> Option<Self> {
        .                   match ct.val {
        .                       ty::ConstKind::Infer(InferConst::Var(v)) => Some(TyOrConstInferVar::Const(v)),
        .                       _ => None,
        .                   }
-- line 1749 ----------------------------------------
-- line 1755 ----------------------------------------
        .           }
        .           
        .           impl<'a, 'tcx> TypeFolder<'tcx> for ShallowResolver<'a, 'tcx> {
        .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
        .                   self.infcx.tcx
        .               }
        .           
        .               fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {
  675,115 ( 0.01%)          self.infcx.shallow_resolve_ty(ty)
        .               }
        .           
    1,928 ( 0.00%)      fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
      974 ( 0.00%)          if let ty::Const { val: ty::ConstKind::Infer(InferConst::Var(vid)), .. } = ct {
       25 ( 0.00%)              self.infcx
        .                           .inner
        .                           .borrow_mut()
        .                           .const_unification_table()
       15 ( 0.00%)                  .probe_value(*vid)
        .                           .val
        .                           .known()
        .                           .unwrap_or(ct)
        .                   } else {
        .                       ct
        .                   }
    2,410 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> TypeTrace<'tcx> {
        .               pub fn span(&self) -> Span {
       22 ( 0.00%)          self.cause.span
        .               }
        .           
        .               pub fn types(
        .                   cause: &ObligationCause<'tcx>,
        .                   a_is_expected: bool,
        .                   a: Ty<'tcx>,
        .                   b: Ty<'tcx>,
        .               ) -> TypeTrace<'tcx> {
-- line 1792 ----------------------------------------
-- line 1800 ----------------------------------------
        .                   b: &'tcx ty::Const<'tcx>,
        .               ) -> TypeTrace<'tcx> {
        .                   TypeTrace { cause: cause.clone(), values: Consts(ExpectedFound::new(a_is_expected, a, b)) }
        .               }
        .           }
        .           
        .           impl<'tcx> SubregionOrigin<'tcx> {
        .               pub fn span(&self) -> Span {
       55 ( 0.00%)          match *self {
       11 ( 0.00%)              Subtype(ref a) => a.span(),
        .                       RelateObjectBound(a) => a,
        .                       RelateParamBound(a, ..) => a,
        .                       RelateRegionParamBound(a) => a,
        .                       Reborrow(a) => a,
        .                       ReborrowUpvar(a, _) => a,
        .                       DataBorrowed(_, a) => a,
        .                       ReferenceOutlivesReferent(_, a) => a,
        .                       CompareImplMethodObligation { span, .. } => span,
-- line 1817 ----------------------------------------
-- line 1818 ----------------------------------------
        .                       CompareImplTypeObligation { span, .. } => span,
        .                   }
        .               }
        .           
        .               pub fn from_obligation_cause<F>(cause: &traits::ObligationCause<'tcx>, default: F) -> Self
        .               where
        .                   F: FnOnce() -> Self,
        .               {
   46,502 ( 0.00%)          match *cause.code() {
    5,377 ( 0.00%)              traits::ObligationCauseCode::ReferenceOutlivesReferent(ref_type) => {
   26,885 ( 0.00%)                  SubregionOrigin::ReferenceOutlivesReferent(ref_type, cause.span)
        .                       }
        .           
        .                       traits::ObligationCauseCode::CompareImplMethodObligation {
       44 ( 0.00%)                  impl_item_def_id,
       44 ( 0.00%)                  trait_item_def_id,
        .                       } => SubregionOrigin::CompareImplMethodObligation {
       66 ( 0.00%)                  span: cause.span,
        .                           impl_item_def_id,
        .                           trait_item_def_id,
        .                       },
        .           
        .                       traits::ObligationCauseCode::CompareImplTypeObligation {
        .                           impl_item_def_id,
        .                           trait_item_def_id,
        .                       } => SubregionOrigin::CompareImplTypeObligation {
-- line 1843 ----------------------------------------

3,239,616 ( 0.07%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/hash/sip.rs
--------------------------------------------------------------------------------
Ir                 

-- line 120 ----------------------------------------
        .           }
        .           
        .           /// Loads a u64 using up to 7 bytes of a byte slice. It looks clumsy but the
        .           /// `copy_nonoverlapping` calls that occur (via `load_int_le!`) all have fixed
        .           /// sizes and avoid calling `memcpy`, which is good for speed.
        .           ///
        .           /// Unsafe because: unchecked indexing at start..start+len
        .           #[inline]
      324 ( 0.00%)  unsafe fn u8to64_le(buf: &[u8], start: usize, len: usize) -> u64 {
        .               debug_assert!(len < 8);
       36 ( 0.00%)      let mut i = 0; // current byte index (from LSB) in the output u64
       36 ( 0.00%)      let mut out = 0;
1,221,456 ( 0.03%)      if i + 3 < len {
        .                   // SAFETY: `i` cannot be greater than `len`, and the caller must guarantee
        .                   // that the index start..start+len is in bounds.
       72 ( 0.00%)          out = unsafe { load_int_le!(buf, start + i, u32) } as u64;
       28 ( 0.00%)          i += 4;
        .               }
2,536,511 ( 0.05%)      if i + 1 < len {
        .                   // SAFETY: same as above.
1,268,286 ( 0.03%)          out |= (unsafe { load_int_le!(buf, start + i, u16) } as u64) << (i * 8);
  633,876 ( 0.01%)          i += 2
        .               }
1,413,640 ( 0.03%)      if i < len {
        .                   // SAFETY: same as above.
2,074,132 ( 0.04%)          out |= (unsafe { *buf.get_unchecked(start + i) } as u64) << (i * 8);
      256 ( 0.00%)          i += 1;
        .               }
        .               debug_assert_eq!(i, len);
        .               out
      108 ( 0.00%)  }
        .           
        .           impl SipHasher {
        .               /// Creates a new `SipHasher` with the two initial keys set to 0.
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_deprecated(
        .                   since = "1.13.0",
        .                   reason = "use `std::collections::hash_map::DefaultHasher` instead"
-- line 158 ----------------------------------------
-- line 189 ----------------------------------------
        .           
        .               /// Creates a `SipHasher13` that is keyed off the provided keys.
        .               #[inline]
        .               #[unstable(feature = "hashmap_internals", issue = "none")]
        .               #[rustc_deprecated(
        .                   since = "1.13.0",
        .                   reason = "use `std::collections::hash_map::DefaultHasher` instead"
        .               )]
      100 ( 0.00%)      pub fn new_with_keys(key0: u64, key1: u64) -> SipHasher13 {
  242,841 ( 0.01%)          SipHasher13 { hasher: Hasher::new_with_keys(key0, key1) }
       40 ( 0.00%)      }
        .           }
        .           
        .           impl<S: Sip> Hasher<S> {
        .               #[inline]
      120 ( 0.00%)      fn new_with_keys(key0: u64, key1: u64) -> Hasher<S> {
      269 ( 0.00%)          let mut state = Hasher {
        .                       k0: key0,
        .                       k1: key1,
        .                       length: 0,
       80 ( 0.00%)              state: State { v0: 0, v1: 0, v2: 0, v3: 0 },
        .                       tail: 0,
        .                       ntail: 0,
        .                       _marker: PhantomData,
        .                   };
       20 ( 0.00%)          state.reset();
        .                   state
       40 ( 0.00%)      }
        .           
        .               #[inline]
       40 ( 0.00%)      fn reset(&mut self) {
       20 ( 0.00%)          self.length = 0;
  364,137 ( 0.01%)          self.state.v0 = self.k0 ^ 0x736f6d6570736575;
  387,610 ( 0.01%)          self.state.v1 = self.k1 ^ 0x646f72616e646f6d;
       60 ( 0.00%)          self.state.v2 = self.k0 ^ 0x6c7967656e657261;
       60 ( 0.00%)          self.state.v3 = self.k1 ^ 0x7465646279746573;
       20 ( 0.00%)          self.ntail = 0;
       40 ( 0.00%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl super::Hasher for SipHasher {
        .               #[inline]
        .               fn write(&mut self, msg: &[u8]) {
        .                   self.0.hasher.write(msg)
        .               }
-- line 234 ----------------------------------------
-- line 237 ----------------------------------------
        .               fn finish(&self) -> u64 {
        .                   self.0.hasher.finish()
        .               }
        .           }
        .           
        .           #[unstable(feature = "hashmap_internals", issue = "none")]
        .           impl super::Hasher for SipHasher13 {
        .               #[inline]
      144 ( 0.00%)      fn write(&mut self, msg: &[u8]) {
       36 ( 0.00%)          self.hasher.write(msg)
       72 ( 0.00%)      }
        .           
        .               #[inline]
       40 ( 0.00%)      fn finish(&self) -> u64 {
       40 ( 0.00%)          self.hasher.finish()
       40 ( 0.00%)      }
        .           }
        .           
        .           impl<S: Sip> super::Hasher for Hasher<S> {
        .               // Note: no integer hashing methods (`write_u*`, `write_i*`) are defined
        .               // for this type. We could add them, copy the `short_write` implementation
        .               // in librustc_data_structures/sip128.rs, and add `write_u*`/`write_i*`
        .               // methods to `SipHasher`, `SipHasher13`, and `DefaultHasher`. This would
        .               // greatly speed up integer hashing by those hashers, at the cost of
        .               // slightly slowing down compile speeds on some benchmarks. See #69152 for
        .               // details.
        .               #[inline]
      252 ( 0.00%)      fn write(&mut self, msg: &[u8]) {
       36 ( 0.00%)          let length = msg.len();
1,560,753 ( 0.03%)          self.length += length;
        .           
       36 ( 0.00%)          let mut needed = 0;
        .           
1,537,161 ( 0.03%)          if self.ntail != 0 {
  781,961 ( 0.02%)              needed = 8 - self.ntail;
        .                       // SAFETY: `cmp::min(length, needed)` is guaranteed to not be over `length`
3,909,632 ( 0.08%)              self.tail |= unsafe { u8to64_le(msg, 0, cmp::min(length, needed)) } << (8 * self.ntail);
  781,872 ( 0.02%)              if length < needed {
  538,596 ( 0.01%)                  self.ntail += length;
        .                           return;
        .                       } else {
  121,670 ( 0.00%)                  self.state.v3 ^= self.tail;
        .                           S::c_rounds(&mut self.state);
  243,340 ( 0.01%)                  self.state.v0 ^= self.tail;
  121,670 ( 0.00%)                  self.ntail = 0;
        .                       }
        .                   }
        .           
        .                   // Buffered tail is now flushed, process new input.
  439,365 ( 0.01%)          let len = length - needed;
  439,316 ( 0.01%)          let left = len & 0x7; // len % 8
        .           
       40 ( 0.00%)          let mut i = needed;
  659,538 ( 0.01%)          while i < len - left {
        .                       // SAFETY: because `len - left` is the biggest multiple of 8 under
        .                       // `len`, and because `i` starts at `needed` where `len` is `length - needed`,
        .                       // `i + 8` is guaranteed to be less than or equal to `length`.
      176 ( 0.00%)              let mi = unsafe { load_int_le!(msg, i, u64) };
        .           
      184 ( 0.00%)              self.state.v3 ^= mi;
       22 ( 0.00%)              S::c_rounds(&mut self.state);
      184 ( 0.00%)              self.state.v0 ^= mi;
        .           
      401 ( 0.00%)              i += 8;
        .                   }
        .           
        .                   // SAFETY: `i` is now `needed + len.div_euclid(8) * 8`,
        .                   // so `i + left` = `needed + len` = `length`, which is by
        .                   // definition equal to `msg.len()`.
  462,818 ( 0.01%)          self.tail = unsafe { u8to64_le(msg, i, left) };
       20 ( 0.00%)          self.ntail = left;
      108 ( 0.00%)      }
        .           
        .               #[inline]
       60 ( 0.00%)      fn finish(&self) -> u64 {
  121,522 ( 0.00%)          let mut state = self.state;
        .           
  606,950 ( 0.01%)          let b: u64 = ((self.length as u64 & 0xff) << 56) | self.tail;
        .           
  121,402 ( 0.00%)          state.v3 ^= b;
       40 ( 0.00%)          S::c_rounds(&mut state);
  121,402 ( 0.00%)          state.v0 ^= b;
        .           
  121,422 ( 0.00%)          state.v2 ^= 0xff;
       40 ( 0.00%)          S::d_rounds(&mut state);
        .           
  242,804 ( 0.01%)          state.v0 ^ state.v1 ^ state.v2 ^ state.v3
       40 ( 0.00%)      }
        .           }
        .           
        .           impl<S: Sip> Clone for Hasher<S> {
        .               #[inline]
        .               fn clone(&self) -> Hasher<S> {
        .                   Hasher {
        .                       k0: self.k0,
        .                       k1: self.k1,
-- line 332 ----------------------------------------
-- line 353 ----------------------------------------
        .               fn d_rounds(_: &mut State);
        .           }
        .           
        .           #[derive(Debug, Clone, Default)]
        .           struct Sip13Rounds;
        .           
        .           impl Sip for Sip13Rounds {
        .               #[inline]
       93 ( 0.00%)      fn c_rounds(state: &mut State) {
1,583,098 ( 0.03%)          compress!(state);
       62 ( 0.00%)      }
        .           
        .               #[inline]
       60 ( 0.00%)      fn d_rounds(state: &mut State) {
  486,568 ( 0.01%)          compress!(state);
  486,568 ( 0.01%)          compress!(state);
  365,206 ( 0.01%)          compress!(state);
       40 ( 0.00%)      }
        .           }
        .           
        .           #[derive(Debug, Clone, Default)]
        .           struct Sip24Rounds;
        .           
        .           impl Sip for Sip24Rounds {
        .               #[inline]
        .               fn c_rounds(state: &mut State) {
-- line 378 ----------------------------------------

3,642,256 ( 0.08%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/hash/sip.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/buffer.rs
--------------------------------------------------------------------------------
Ir                 

-- line 13 ----------------------------------------
        .               reserve: extern "C" fn(Buffer<T>, usize) -> Buffer<T>,
        .               drop: extern "C" fn(Buffer<T>),
        .           }
        .           
        .           unsafe impl<T: Copy + Sync> Sync for Buffer<T> {}
        .           unsafe impl<T: Copy + Send> Send for Buffer<T> {}
        .           
        .           impl<T: Copy> Default for Buffer<T> {
       90 ( 0.00%)      fn default() -> Self {
      120 ( 0.00%)          Self::from(vec![])
       60 ( 0.00%)      }
        .           }
        .           
        .           impl<T: Copy> Deref for Buffer<T> {
        .               type Target = [T];
       15 ( 0.00%)      fn deref(&self) -> &[T] {
  772,176 ( 0.02%)          unsafe { slice::from_raw_parts(self.data as *const T, self.len) }
       10 ( 0.00%)      }
        .           }
        .           
        .           impl<T: Copy> DerefMut for Buffer<T> {
        .               fn deref_mut(&mut self) -> &mut [T] {
        .                   unsafe { slice::from_raw_parts_mut(self.data, self.len) }
        .               }
        .           }
        .           
        .           impl<T: Copy> Buffer<T> {
        .               pub(super) fn new() -> Self {
        .                   Self::default()
        .               }
        .           
       10 ( 0.00%)      pub(super) fn clear(&mut self) {
1,611,934 ( 0.03%)          self.len = 0;
       10 ( 0.00%)      }
        .           
      120 ( 0.00%)      pub(super) fn take(&mut self) -> Self {
       30 ( 0.00%)          mem::take(self)
       60 ( 0.00%)      }
        .           
        .               // We have the array method separate from extending from a slice. This is
        .               // because in the case of small arrays, codegen can be more efficient
        .               // (avoiding a memmove call). With extend_from_slice, LLVM at least
        .               // currently is not able to make that optimization.
       25 ( 0.00%)      pub(super) fn extend_from_array<const N: usize>(&mut self, xs: &[T; N]) {
3,587,821 ( 0.07%)          if xs.len() > (self.capacity - self.len) {
        .                       let b = self.take();
      210 ( 0.00%)              *self = (b.reserve)(b, xs.len());
        .                   }
        .                   unsafe {
  617,965 ( 0.01%)              xs.as_ptr().copy_to_nonoverlapping(self.data.add(self.len), xs.len());
1,878,086 ( 0.04%)              self.len += xs.len();
        .                   }
       10 ( 0.00%)      }
        .           
  146,196 ( 0.00%)      pub(super) fn extend_from_slice(&mut self, xs: &[T]) {
  148,380 ( 0.00%)          if xs.len() > (self.capacity - self.len) {
        .                       let b = self.take();
      336 ( 0.00%)              *self = (b.reserve)(b, xs.len());
        .                   }
        .                   unsafe {
       16 ( 0.00%)              xs.as_ptr().copy_to_nonoverlapping(self.data.add(self.len), xs.len());
   74,190 ( 0.00%)              self.len += xs.len();
        .                   }
  170,562 ( 0.00%)      }
        .           
       30 ( 0.00%)      pub(super) fn push(&mut self, v: T) {
        .                   // The code here is taken from Vec::push, and we know that reserve()
        .                   // will panic if we're exceeding isize::MAX bytes and so there's no need
        .                   // to check for overflow.
3,982,566 ( 0.08%)          if self.len == self.capacity {
        .                       let b = self.take();
        .                       *self = (b.reserve)(b, 1);
        .                   }
        .                   unsafe {
2,565,183 ( 0.05%)              *self.data.add(self.len) = v;
2,303,482 ( 0.05%)              self.len += 1;
        .                   }
       10 ( 0.00%)      }
        .           }
        .           
        .           impl Write for Buffer<u8> {
        .               fn write(&mut self, xs: &[u8]) -> io::Result<usize> {
        .                   self.extend_from_slice(xs);
        .                   Ok(xs.len())
        .               }
        .           
    2,184 ( 0.00%)      fn write_all(&mut self, xs: &[u8]) -> io::Result<()> {
   73,098 ( 0.00%)          self.extend_from_slice(xs);
        .                   Ok(())
    3,276 ( 0.00%)      }
        .           
        .               fn flush(&mut self) -> io::Result<()> {
        .                   Ok(())
        .               }
        .           }
        .           
        .           impl<T: Copy> Drop for Buffer<T> {
       45 ( 0.00%)      fn drop(&mut self) {
       30 ( 0.00%)          let b = self.take();
4,062,081 ( 0.08%)          (b.drop)(b);
       30 ( 0.00%)      }
        .           }
        .           
        .           impl<T: Copy> From<Vec<T>> for Buffer<T> {
      180 ( 0.00%)      fn from(mut v: Vec<T>) -> Self {
      780 ( 0.00%)          let (data, len, capacity) = (v.as_mut_ptr(), v.len(), v.capacity());
      240 ( 0.00%)          mem::forget(v);
        .           
        .                   // This utility function is nested in here because it can *only*
        .                   // be safely called on `Buffer`s created by *this* `proc_macro`.
       45 ( 0.00%)          fn to_vec<T: Copy>(b: Buffer<T>) -> Vec<T> {
        .                       unsafe {
      135 ( 0.00%)                  let Buffer { data, len, capacity, .. } = b;
       75 ( 0.00%)                  mem::forget(b);
       15 ( 0.00%)                  Vec::from_raw_parts(data, len, capacity)
        .                       }
       30 ( 0.00%)          }
        .           
      104 ( 0.00%)          extern "C" fn reserve<T: Copy>(b: Buffer<T>, additional: usize) -> Buffer<T> {
       78 ( 0.00%)              let mut v = to_vec(b);
        .                       v.reserve(additional);
       78 ( 0.00%)              Buffer::from(v)
      104 ( 0.00%)          }
        .           
       30 ( 0.00%)          extern "C" fn drop<T: Copy>(b: Buffer<T>) {
  338,613 ( 0.01%)              mem::drop(to_vec(b));
  338,513 ( 0.01%)          }
        .           
      432 ( 0.00%)          Buffer { data, len, capacity, reserve, drop }
       60 ( 0.00%)      }
        .           }

1,546,522 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/buffer.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs
--------------------------------------------------------------------------------
Ir                  

-- line 57 ----------------------------------------
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
         .                   ///
         .                   /// ```
         .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::from_str_radix(\"A\", 16), Ok(10));")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
     2,294 ( 0.00%)          pub fn from_str_radix(src: &str, radix: u32) -> Result<Self, ParseIntError> {
     1,365 ( 0.00%)              from_str_radix(src, radix)
     3,441 ( 0.00%)          }
         .           
         .                   /// Returns the number of ones in the binary representation of `self`.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
         .                   ///
         .                   /// ```
-- line 75 ----------------------------------------
-- line 80 ----------------------------------------
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
         .                   #[doc(alias = "popcount")]
         .                   #[doc(alias = "popcnt")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn count_ones(self) -> u32 {
   313,785 ( 0.01%)              intrinsics::ctpop(self as $ActualT) as u32
         .                   }
         .           
         .                   /// Returns the number of zeros in the binary representation of `self`.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
         .                   ///
-- line 96 ----------------------------------------
-- line 118 ----------------------------------------
         .                   /// assert_eq!(n.leading_zeros(), 2);
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn leading_zeros(self) -> u32 {
   932,774 ( 0.02%)              intrinsics::ctlz(self as $ActualT) as u32
         .                   }
         .           
         .                   /// Returns the number of trailing zeros in the binary representation
         .                   /// of `self`.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 134 ----------------------------------------
-- line 139 ----------------------------------------
         .                   /// assert_eq!(n.trailing_zeros(), 3);
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn trailing_zeros(self) -> u32 {
   794,060 ( 0.02%)              intrinsics::cttz(self) as u32
         .                   }
         .           
         .                   /// Returns the number of leading ones in the binary representation of `self`.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
         .                   ///
-- line 155 ----------------------------------------
-- line 204 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(n.rotate_left(", $rot, "), m);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn rotate_left(self, n: u32) -> Self {
29,002,457 ( 0.61%)              intrinsics::rotate_left(self, n as $SelfT)
         .                   }
         .           
         .                   /// Shifts the bits to the right by a specified amount, `n`,
         .                   /// wrapping the truncated bits to the beginning of the resulting
         .                   /// integer.
         .                   ///
         .                   /// Please note this isn't the same operation as the `>>` shifting operator!
         .                   ///
-- line 220 ----------------------------------------
-- line 429 ----------------------------------------
         .                   )]
         .                   #[doc = concat!("assert_eq!((", stringify!($SelfT), "::MAX - 2).checked_add(3), None);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_checked_int_methods", since = "1.47.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline]
   210,040 ( 0.00%)          pub const fn checked_add(self, rhs: Self) -> Option<Self> {
   168,085 ( 0.00%)              let (a, b) = self.overflowing_add(rhs);
   420,080 ( 0.01%)              if unlikely!(b) {None} else {Some(a)}
   168,032 ( 0.00%)          }
         .           
         .                   /// Unchecked integer addition. Computes `self + rhs`, assuming overflow
         .                   /// cannot occur.
         .                   ///
         .                   /// # Safety
         .                   ///
         .                   /// This results in undefined behavior when
         .                   #[doc = concat!("`self + rhs > ", stringify!($SelfT), "::MAX` or `self + rhs < ", stringify!($SelfT), "::MIN`,")]
-- line 448 ----------------------------------------
-- line 456 ----------------------------------------
         .                   )]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
         .                   #[inline(always)]
         .                   pub const unsafe fn unchecked_add(self, rhs: Self) -> Self {
         .                       // SAFETY: the caller must uphold the safety contract for
         .                       // `unchecked_add`.
 1,813,246 ( 0.04%)              unsafe { intrinsics::unchecked_add(self, rhs) }
         .                   }
         .           
         .                   /// Checked addition with a signed integer. Computes `self + rhs`,
         .                   /// returning `None` if overflow occurred.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 472 ----------------------------------------
-- line 525 ----------------------------------------
         .                   )]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
         .                   #[inline(always)]
         .                   pub const unsafe fn unchecked_sub(self, rhs: Self) -> Self {
         .                       // SAFETY: the caller must uphold the safety contract for
         .                       // `unchecked_sub`.
   158,301 ( 0.00%)              unsafe { intrinsics::unchecked_sub(self, rhs) }
         .                   }
         .           
         .                   /// Checked integer multiplication. Computes `self * rhs`, returning
         .                   /// `None` if overflow occurred.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 541 ----------------------------------------
-- line 544 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(5", stringify!($SelfT), ".checked_mul(1), Some(5));")]
         .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.checked_mul(2), None);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_checked_int_methods", since = "1.47.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline]
   293,382 ( 0.01%)          pub const fn checked_mul(self, rhs: Self) -> Option<Self> {
   195,588 ( 0.00%)              let (a, b) = self.overflowing_mul(rhs);
   488,970 ( 0.01%)              if unlikely!(b) {None} else {Some(a)}
   195,588 ( 0.00%)          }
         .           
         .                   /// Unchecked integer multiplication. Computes `self * rhs`, assuming overflow
         .                   /// cannot occur.
         .                   ///
         .                   /// # Safety
         .                   ///
         .                   /// This results in undefined behavior when
         .                   #[doc = concat!("`self * rhs > ", stringify!($SelfT), "::MAX` or `self * rhs < ", stringify!($SelfT), "::MIN`,")]
-- line 563 ----------------------------------------
-- line 1035 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.saturating_add(127), ", stringify!($SelfT), "::MAX);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
         .                   #[inline(always)]
         .                   pub const fn saturating_add(self, rhs: Self) -> Self {
   335,104 ( 0.01%)              intrinsics::saturating_add(self, rhs)
     1,598 ( 0.00%)          }
         .           
         .                   /// Saturating addition with a signed integer. Computes `self + rhs`,
         .                   /// saturating at the numeric bounds instead of overflowing.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
         .                   ///
-- line 1052 ----------------------------------------
-- line 1084 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(13", stringify!($SelfT), ".saturating_sub(127), 0);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
         .                   #[inline(always)]
         .                   pub const fn saturating_sub(self, rhs: Self) -> Self {
    54,852 ( 0.00%)              intrinsics::saturating_sub(self, rhs)
         .                   }
         .           
         .                   /// Saturating integer multiplication. Computes `self * rhs`,
         .                   /// saturating at the numeric bounds instead of overflowing.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 1100 ----------------------------------------
-- line 1104 ----------------------------------------
         .                   #[doc = concat!("assert_eq!((", stringify!($SelfT), "::MAX).saturating_mul(10), ", stringify!($SelfT),"::MAX);")]
         .                   /// ```
         .                   #[stable(feature = "wrapping", since = "1.7.0")]
         .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline]
         .                   pub const fn saturating_mul(self, rhs: Self) -> Self {
         2 ( 0.00%)              match self.checked_mul(rhs) {
         .                           Some(x) => x,
         .                           None => Self::MAX,
         .                       }
         .                   }
         .           
         .                   /// Saturating integer division. Computes `self / rhs`, saturating at the
         .                   /// numeric bounds instead of overflowing.
         .                   ///
-- line 1120 ----------------------------------------
-- line 1175 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(200", stringify!($SelfT), ".wrapping_add(", stringify!($SelfT), "::MAX), 199);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn wrapping_add(self, rhs: Self) -> Self {
15,181,649 ( 0.32%)              intrinsics::wrapping_add(self, rhs)
         .                   }
         .           
         .                   /// Wrapping (modular) addition with a signed integer. Computes
         .                   /// `self + rhs`, wrapping around at the boundary of the type.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 1191 ----------------------------------------
-- line 1217 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(100", stringify!($SelfT), ".wrapping_sub(", stringify!($SelfT), "::MAX), 101);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn wrapping_sub(self, rhs: Self) -> Self {
 4,304,257 ( 0.09%)              intrinsics::wrapping_sub(self, rhs)
         .                   }
         .           
         .                   /// Wrapping (modular) multiplication. Computes `self *
         .                   /// rhs`, wrapping around at the boundary of the type.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 1233 ----------------------------------------
-- line 1240 ----------------------------------------
         .                   /// assert_eq!(25u8.wrapping_mul(12), 44);
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn wrapping_mul(self, rhs: Self) -> Self {
13,571,893 ( 0.28%)              intrinsics::wrapping_mul(self, rhs)
         .                   }
         .           
         .                   /// Wrapping (modular) division. Computes `self / rhs`.
         .                   /// Wrapped division on unsigned types is just normal division.
         .                   /// There's no way wrapping could ever happen.
         .                   /// This function exists, so that all operations
         .                   /// are accounted for in the wrapping operations.
         .                   ///
-- line 1256 ----------------------------------------
-- line 1397 ----------------------------------------
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn wrapping_shl(self, rhs: u32) -> Self {
         .                       // SAFETY: the masking by the bitsize of the type ensures that we do not shift
         .                       // out of bounds
         .                       unsafe {
         8 ( 0.00%)                  intrinsics::unchecked_shl(self, (rhs & ($BITS - 1)) as $SelfT)
         .                       }
         .                   }
         .           
         .                   /// Panic-free bitwise shift-right; yields `self >> mask(rhs)`,
         .                   /// where `mask` removes any high-order bits of `rhs` that
         .                   /// would cause the shift to exceed the bitwidth of the type.
         .                   ///
         .                   /// Note that this is *not* the same as a rotate-right; the
-- line 1413 ----------------------------------------
-- line 1491 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(5", stringify!($SelfT), ".overflowing_add(2), (7, false));")]
         .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.overflowing_add(1), (0, true));")]
         .                   /// ```
         .                   #[stable(feature = "wrapping", since = "1.7.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
       107 ( 0.00%)          pub const fn overflowing_add(self, rhs: Self) -> (Self, bool) {
 2,101,290 ( 0.04%)              let (a, b) = intrinsics::add_with_overflow(self as $ActualT, rhs as $ActualT);
    84,016 ( 0.00%)              (a as Self, b)
   168,246 ( 0.00%)          }
         .           
         .                   /// Calculates `self + rhs + carry` without the ability to overflow.
         .                   ///
         .                   /// Performs "ternary addition" which takes in an extra bit to add, and may return an
         .                   /// additional bit of overflow. This allows for chaining together multiple additions
         .                   /// to create "big integers" which represent larger values.
         .                   ///
         .                   #[doc = concat!("This can be thought of as a ", stringify!($BITS), "-bit \"full adder\", in the electronics sense.")]
-- line 1510 ----------------------------------------
-- line 1587 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(5", stringify!($SelfT), ".overflowing_sub(2), (3, false));")]
         .                   #[doc = concat!("assert_eq!(0", stringify!($SelfT), ".overflowing_sub(1), (", stringify!($SelfT), "::MAX, true));")]
         .                   /// ```
         .                   #[stable(feature = "wrapping", since = "1.7.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
       321 ( 0.00%)          pub const fn overflowing_sub(self, rhs: Self) -> (Self, bool) {
   580,116 ( 0.01%)              let (a, b) = intrinsics::sub_with_overflow(self as $ActualT, rhs as $ActualT);
         .                       (a as Self, b)
       642 ( 0.00%)          }
         .           
         .                   /// Calculates `self - rhs - borrow` without the ability to overflow.
         .                   ///
         .                   /// Performs "ternary subtraction" which takes in an extra bit to subtract, and may return
         .                   /// an additional bit of overflow. This allows for chaining together multiple subtractions
         .                   /// to create "big integers" which represent larger values.
         .                   ///
         .                   /// # Examples
-- line 1606 ----------------------------------------
-- line 1674 ----------------------------------------
         .                   /// assert_eq!(1_000_000_000u32.overflowing_mul(10), (1410065408, true));
         .                   /// ```
         .                   #[stable(feature = "wrapping", since = "1.7.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                     without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn overflowing_mul(self, rhs: Self) -> (Self, bool) {
 3,567,893 ( 0.07%)              let (a, b) = intrinsics::mul_with_overflow(self as $ActualT, rhs as $ActualT);
    97,794 ( 0.00%)              (a as Self, b)
   195,588 ( 0.00%)          }
         .           
         .                   /// Calculates the divisor when `self` is divided by `rhs`.
         .                   ///
         .                   /// Returns a tuple of the divisor along with a boolean indicating
         .                   /// whether an arithmetic overflow would occur. Note that for unsigned
         .                   /// integers overflow never occurs, so the second value is always
         .                   /// `false`.
         .                   ///
-- line 1692 ----------------------------------------
-- line 2132 ----------------------------------------
         .                   #[doc = concat!("assert!(16", stringify!($SelfT), ".is_power_of_two());")]
         .                   #[doc = concat!("assert!(!10", stringify!($SelfT), ".is_power_of_two());")]
         .                   /// ```
         .                   #[must_use]
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_is_power_of_two", since = "1.32.0")]
         .                   #[inline(always)]
         .                   pub const fn is_power_of_two(self) -> bool {
       264 ( 0.00%)              self.count_ones() == 1
         .                   }
         .           
         .                   // Returns one less than next power of two.
         .                   // (For 8u8 next power of two is 8u8 and for 6u8 it is 8u8)
         .                   //
         .                   // 8u8.one_less_than_next_power_of_two() == 7
         .                   // 6u8.one_less_than_next_power_of_two() == 7
         .                   //
         .                   // This method cannot overflow, as in the `next_power_of_two`
         .                   // overflow cases it instead ends up returning the maximum value
         .                   // of the type, and can return 0 for 0.
         .                   #[inline]
         .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
         6 ( 0.00%)          const fn one_less_than_next_power_of_two(self) -> Self {
    44,042 ( 0.00%)              if self <= 1 { return 0; }
         .           
    53,226 ( 0.00%)              let p = self - 1;
         .                       // SAFETY: Because `p > 0`, it cannot consist entirely of leading zeros.
         .                       // That means the shift is always in-bounds, and some processors
         .                       // (such as intel pre-haswell) have more efficient ctlz
         .                       // intrinsics when the argument is non-zero.
   159,507 ( 0.00%)              let z = unsafe { intrinsics::ctlz_nonzero(p) };
    53,225 ( 0.00%)              <$SelfT>::MAX >> z
         8 ( 0.00%)          }
         .           
         .                   /// Returns the smallest power of two greater than or equal to `self`.
         .                   ///
         .                   /// When return value overflows (i.e., `self > (1 << (N-1))` for type
         .                   /// `uN`), it panics in debug mode and the return value is wrapped to 0 in
         .                   /// release mode (the only situation in which method can return 0).
         .                   ///
         .                   /// # Examples
-- line 2172 ----------------------------------------
-- line 2178 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(3", stringify!($SelfT), ".next_power_of_two(), 4);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline]
         .                   #[rustc_inherit_overflow_checks]
         4 ( 0.00%)          pub const fn next_power_of_two(self) -> Self {
    62,324 ( 0.00%)              self.one_less_than_next_power_of_two() + 1
         4 ( 0.00%)          }
         .           
         .                   /// Returns the smallest power of two greater than or equal to `n`. If
         .                   /// the next power of two is greater than the type's maximum value,
         .                   /// `None` is returned, otherwise the power of two is wrapped in `Some`.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 2196 ----------------------------------------
-- line 2264 ----------------------------------------
         .                   #[doc = concat!("let bytes = ", $swap_op, stringify!($SelfT), ".to_le_bytes();")]
         .                   #[doc = concat!("assert_eq!(bytes, ", $le_bytes, ");")]
         .                   /// ```
         .                   #[stable(feature = "int_to_from_bytes", since = "1.32.0")]
         .                   #[rustc_const_stable(feature = "const_int_conversion", since = "1.44.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline]
        25 ( 0.00%)          pub const fn to_le_bytes(self) -> [u8; mem::size_of::<Self>()] {
        20 ( 0.00%)              self.to_le().to_ne_bytes()
        15 ( 0.00%)          }
         .           
         .                   /// Return the memory representation of this integer as a byte array in
         .                   /// native byte order.
         .                   ///
         .                   /// As the target platform's native endianness is used, portable code
         .                   /// should use [`to_be_bytes`] or [`to_le_bytes`], as appropriate,
         .                   /// instead.
         .                   ///
-- line 2282 ----------------------------------------
-- line 2300 ----------------------------------------
         .                   /// ```
         .                   #[stable(feature = "int_to_from_bytes", since = "1.32.0")]
         .                   #[rustc_const_stable(feature = "const_int_conversion", since = "1.44.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   // SAFETY: const sound because integers are plain old datatypes so we can always
         .                   // transmute them to arrays of bytes
         .                   #[inline]
        18 ( 0.00%)          pub const fn to_ne_bytes(self) -> [u8; mem::size_of::<Self>()] {
         .                       // SAFETY: integers are plain old datatypes so we can always transmute them to
         .                       // arrays of bytes
         9 ( 0.00%)              unsafe { mem::transmute(self) }
        27 ( 0.00%)          }
         .           
         .                   /// Create a native endian integer value from its representation
         .                   /// as a byte array in big endian.
         .                   ///
         .                   #[doc = $from_xe_bytes_doc]
         .                   ///
         .                   /// # Examples
         .                   ///
-- line 2320 ----------------------------------------
-- line 2360 ----------------------------------------
         .                   ///     *input = rest;
         .                   #[doc = concat!("    ", stringify!($SelfT), "::from_le_bytes(int_bytes.try_into().unwrap())")]
         .                   /// }
         .                   /// ```
         .                   #[stable(feature = "int_to_from_bytes", since = "1.32.0")]
         .                   #[rustc_const_stable(feature = "const_int_conversion", since = "1.44.0")]
         .                   #[must_use]
         .                   #[inline]
        20 ( 0.00%)          pub const fn from_le_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {
        25 ( 0.00%)              Self::from_le(Self::from_ne_bytes(bytes))
        10 ( 0.00%)          }
         .           
         .                   /// Create a native endian integer value from its memory representation
         .                   /// as a byte array in native endianness.
         .                   ///
         .                   /// As the target platform's native endianness is used, portable code
         .                   /// likely wants to use [`from_be_bytes`] or [`from_le_bytes`], as
         .                   /// appropriate instead.
         .                   ///
-- line 2378 ----------------------------------------
-- line 2402 ----------------------------------------
         .                   /// }
         .                   /// ```
         .                   #[stable(feature = "int_to_from_bytes", since = "1.32.0")]
         .                   #[rustc_const_stable(feature = "const_int_conversion", since = "1.44.0")]
         .                   #[must_use]
         .                   // SAFETY: const sound because integers are plain old datatypes so we can always
         .                   // transmute to them
         .                   #[inline]
        20 ( 0.00%)          pub const fn from_ne_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {
         .                       // SAFETY: integers are plain old datatypes so we can always transmute to them
        30 ( 0.00%)              unsafe { mem::transmute(bytes) }
        10 ( 0.00%)          }
         .           
         .                   /// New code should prefer to use
         .                   #[doc = concat!("[`", stringify!($SelfT), "::MIN", "`] instead.")]
         .                   ///
         .                   /// Returns the smallest value that can be represented by this integer type.
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_promotable]
         .                   #[inline(always)]
-- line 2421 ----------------------------------------

   650,948 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/str/validations.rs
--------------------------------------------------------------------------------
Ir                 

-- line 3 ----------------------------------------
        .           use crate::mem;
        .           
        .           use super::Utf8Error;
        .           
        .           /// Returns the initial codepoint accumulator for the first byte.
        .           /// The first byte is special, only want bottom 5 bits for width 2, 4 bits
        .           /// for width 3, and 3 bits for width 4.
        .           #[inline]
       50 ( 0.00%)  const fn utf8_first_byte(byte: u8, width: u32) -> u32 {
      188 ( 0.00%)      (byte & (0x7F >> width)) as u32
       20 ( 0.00%)  }
        .           
        .           /// Returns the value of `ch` updated with continuation byte `byte`.
        .           #[inline]
       60 ( 0.00%)  const fn utf8_acc_cont_byte(ch: u32, byte: u8) -> u32 {
      234 ( 0.00%)      (ch << 6) | (byte & CONT_MASK) as u32
       24 ( 0.00%)  }
        .           
        .           /// Checks whether the byte is a UTF-8 continuation byte (i.e., starts with the
        .           /// bits `10`).
        .           #[inline]
        .           pub(super) const fn utf8_is_cont_byte(byte: u8) -> bool {
        .               (byte as i8) < -64
        .           }
        .           
-- line 27 ----------------------------------------
-- line 28 ----------------------------------------
        .           /// Reads the next code point out of a byte iterator (assuming a
        .           /// UTF-8-like encoding).
        .           ///
        .           /// # Safety
        .           ///
        .           /// `bytes` must produce a valid UTF-8-like (UTF-8 or WTF-8) string
        .           #[unstable(feature = "str_internals", issue = "none")]
        .           #[inline]
  986,142 ( 0.02%)  pub unsafe fn next_code_point<'a, I: Iterator<Item = &'a u8>>(bytes: &mut I) -> Option<u32> {
        .               // Decode UTF-8
5,742,827 ( 0.12%)      let x = *bytes.next()?;
2,923,470 ( 0.06%)      if x < 128 {
  990,011 ( 0.02%)          return Some(x as u32);
        .               }
        .           
        .               // Multibyte case follows
        .               // Decode from a byte combination out of: [[[x y] z] w]
        .               // NOTE: Performance is sensitive to the exact formulation here
       60 ( 0.00%)      let init = utf8_first_byte(x, 2);
        .               // SAFETY: `bytes` produces an UTF-8-like string,
        .               // so the iterator must produce a value here.
       80 ( 0.00%)      let y = unsafe { *bytes.next().unwrap_unchecked() };
       30 ( 0.00%)      let mut ch = utf8_acc_cont_byte(init, y);
       80 ( 0.00%)      if x >= 0xE0 {
        .                   // [[x y z] w] case
        .                   // 5th bit in 0xE0 .. 0xEF is always clear, so `init` is still valid
        .                   // SAFETY: `bytes` produces an UTF-8-like string,
        .                   // so the iterator must produce a value here.
       14 ( 0.00%)          let z = unsafe { *bytes.next().unwrap_unchecked() };
       12 ( 0.00%)          let y_z = utf8_acc_cont_byte((y & CONT_MASK) as u32, z);
        8 ( 0.00%)          ch = init << 12 | y_z;
       62 ( 0.00%)          if x >= 0xF0 {
        .                       // [x y z w] case
        .                       // use only the lower 3 bits of `init`
        .                       // SAFETY: `bytes` produces an UTF-8-like string,
        .                       // so the iterator must produce a value here.
        .                       let w = unsafe { *bytes.next().unwrap_unchecked() };
        .                       ch = (init & 7) << 18 | utf8_acc_cont_byte(y_z, w);
        .                   }
        .               }
        .           
       30 ( 0.00%)      Some(ch)
1,643,570 ( 0.03%)  }
        .           
        .           /// Reads the last code point out of a byte iterator (assuming a
        .           /// UTF-8-like encoding).
        .           ///
        .           /// # Safety
        .           ///
        .           /// `bytes` must produce a valid UTF-8-like (UTF-8 or WTF-8) string
        .           #[inline]
   16,749 ( 0.00%)  pub(super) unsafe fn next_code_point_reverse<'a, I>(bytes: &mut I) -> Option<u32>
        .           where
        .               I: DoubleEndedIterator<Item = &'a u8>,
        .           {
        .               // Decode UTF-8
   68,451 ( 0.00%)      let w = match *bytes.next_back()? {
   55,454 ( 0.00%)          next_byte if next_byte < 128 => return Some(next_byte as u32),
        .                   back_byte => back_byte,
        .               };
        .           
        .               // Multibyte case follows
        .               // Decode from a byte combination out of: [x [y [z w]]]
        .               let mut ch;
        .               // SAFETY: `bytes` produces an UTF-8-like string,
        .               // so the iterator must produce a value here.
-- line 93 ----------------------------------------
-- line 105 ----------------------------------------
        .                       ch = utf8_first_byte(x, 4);
        .                       ch = utf8_acc_cont_byte(ch, y);
        .                   }
        .                   ch = utf8_acc_cont_byte(ch, z);
        .               }
        .               ch = utf8_acc_cont_byte(ch, w);
        .           
        .               Some(ch)
   27,915 ( 0.00%)  }
        .           
        .           // use truncation to fit u64 into usize
        .           const NONASCII_MASK: usize = 0x80808080_80808080u64 as usize;
        .           
        .           /// Returns `true` if any byte in the word `x` is nonascii (>= 128).
        .           #[inline]
        .           const fn contains_nonascii(x: usize) -> bool {
   13,389 ( 0.00%)      (x & NONASCII_MASK) != 0
        .           }
        .           
        .           /// Walks through `v` checking that it's a valid UTF-8 sequence,
        .           /// returning `Ok(())` in that case, or, if it is invalid, `Err(err)`.
        .           #[inline(always)]
        .           #[rustc_const_unstable(feature = "str_internals", issue = "none")]
        .           pub(super) const fn run_utf8_validation(v: &[u8]) -> Result<(), Utf8Error> {
        .               let mut index = 0;
        .               let len = v.len();
        .           
        .               let usize_bytes = mem::size_of::<usize>();
        .               let ascii_block_size = 2 * usize_bytes;
  908,724 ( 0.02%)      let blocks_end = if len >= ascii_block_size { len - ascii_block_size + 1 } else { 0 };
        .               let align = v.as_ptr().align_offset(usize_bytes);
        .           
1,227,264 ( 0.03%)      while index < len {
        .                   let old_offset = index;
        .                   macro_rules! err {
        .                       ($error_len: expr) => {
        .                           return Err(Utf8Error { valid_up_to: old_offset, error_len: $error_len })
        .                       };
        .                   }
        .           
        .                   macro_rules! next {
-- line 145 ----------------------------------------
-- line 148 ----------------------------------------
        .                           // we needed data, but there was none: error!
        .                           if index >= len {
        .                               err!(None)
        .                           }
        .                           v[index]
        .                       }};
        .                   }
        .           
  333,345 ( 0.01%)          let first = v[index];
  666,690 ( 0.01%)          if first >= 128 {
        .                       let w = utf8_char_width(first);
        .                       // 2-byte encoding is for codepoints  \u{0080} to  \u{07ff}
        .                       //        first  C2 80        last DF BF
        .                       // 3-byte encoding is for codepoints  \u{0800} to  \u{ffff}
        .                       //        first  E0 A0 80     last EF BF BF
        .                       //   excluding surrogates codepoints  \u{d800} to  \u{dfff}
        .                       //               ED A0 80 to       ED BF BF
        .                       // 4-byte encoding is for codepoints \u{1000}0 to \u{10ff}ff
-- line 165 ----------------------------------------
-- line 169 ----------------------------------------
        .                       //
        .                       // https://tools.ietf.org/html/rfc3629
        .                       // UTF8-1      = %x00-7F
        .                       // UTF8-2      = %xC2-DF UTF8-tail
        .                       // UTF8-3      = %xE0 %xA0-BF UTF8-tail / %xE1-EC 2( UTF8-tail ) /
        .                       //               %xED %x80-9F UTF8-tail / %xEE-EF 2( UTF8-tail )
        .                       // UTF8-4      = %xF0 %x90-BF 2( UTF8-tail ) / %xF1-F3 3( UTF8-tail ) /
        .                       //               %xF4 %x80-8F 2( UTF8-tail )
      128 ( 0.00%)              match w {
        .                           2 => {
       64 ( 0.00%)                      if next!() as i8 >= -64 {
        .                                   err!(Some(1))
        .                               }
        .                           }
        .                           3 => {
       54 ( 0.00%)                      match (first, next!()) {
        .                                   (0xE0, 0xA0..=0xBF)
       42 ( 0.00%)                          | (0xE1..=0xEC, 0x80..=0xBF)
        .                                   | (0xED, 0x80..=0x9F)
        .                                   | (0xEE..=0xEF, 0x80..=0xBF) => {}
        .                                   _ => err!(Some(1)),
        .                               }
       26 ( 0.00%)                      if next!() as i8 >= -64 {
        .                                   err!(Some(2))
        .                               }
        .                           }
        .                           4 => {
        .                               match (first, next!()) {
        .                                   (0xF0, 0x90..=0xBF) | (0xF1..=0xF3, 0x80..=0xBF) | (0xF4, 0x80..=0x8F) => {}
        .                                   _ => err!(Some(1)),
        .                               }
-- line 199 ----------------------------------------
-- line 201 ----------------------------------------
        .                                   err!(Some(2))
        .                               }
        .                               if next!() as i8 >= -64 {
        .                                   err!(Some(3))
        .                               }
        .                           }
        .                           _ => err!(Some(1)),
        .                       }
       36 ( 0.00%)              index += 1;
        .                   } else {
        .                       // Ascii case, try to skip forward quickly.
        .                       // When the pointer is aligned, read 2 words of data per iteration
        .                       // until we find a word containing a non-ascii byte.
1,022,746 ( 0.02%)              if align != usize::MAX && align.wrapping_sub(index) % usize_bytes == 0 {
        .                           let ptr = v.as_ptr();
   72,340 ( 0.00%)                  while index < blocks_end {
        .                               // SAFETY: since `align - index` and `ascii_block_size` are
        .                               // multiples of `usize_bytes`, `block = ptr.add(index)` is
        .                               // always aligned with a `usize` so it's safe to dereference
        .                               // both `block` and `block.offset(1)`.
        .                               unsafe {
        .                                   let block = ptr.add(index) as *const usize;
        .                                   // break if there is a nonascii byte
   13,389 ( 0.00%)                          let zu = contains_nonascii(*block);
        .                                   let zv = contains_nonascii(*block.offset(1));
   26,778 ( 0.00%)                          if zu || zv {
        .                                       break;
        .                                   }
        .                               }
   26,774 ( 0.00%)                      index += ascii_block_size;
        .                           }
        .                           // step from the point where the wordwise loop stopped
  572,489 ( 0.01%)                  while index < len && v[index] < 128 {
  114,772 ( 0.00%)                      index += 1;
        .                           }
        .                       } else {
  310,538 ( 0.01%)                  index += 1;
        .                       }
        .                   }
        .               }
        .           
        .               Ok(())
        .           }
        .           
        .           // https://tools.ietf.org/html/rfc3629
-- line 245 ----------------------------------------
-- line 263 ----------------------------------------
        .               4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // F
        .           ];
        .           
        .           /// Given a first byte, determines how many bytes are in this UTF-8 character.
        .           #[unstable(feature = "str_internals", issue = "none")]
        .           #[must_use]
        .           #[inline]
        .           pub const fn utf8_char_width(b: u8) -> usize {
       48 ( 0.00%)      UTF8_CHAR_WIDTH[b as usize] as usize
        .           }
        .           
        .           /// Mask of the value bits of a continuation byte.
        .           const CONT_MASK: u8 = 0b0011_1111;
        .           
        .           // truncate `&str` to length at most equal to `max`
        .           // return `true` if it were truncated, and the new str.
        .           pub(super) fn truncate_to_char_boundary(s: &str, mut max: usize) -> (bool, &str) {
-- line 279 ----------------------------------------

6,903,604 ( 0.14%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/str/validations.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs
--------------------------------------------------------------------------------
Ir                  

-- line 416 ----------------------------------------
         .               /// ```
         .               /// # #![allow(unused_mut)]
         .               /// let mut vec: Vec<i32> = Vec::new();
         .               /// ```
         .               #[inline]
         .               #[rustc_const_stable(feature = "const_vec_new", since = "1.39.0")]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[must_use]
    23,859 ( 0.00%)      pub const fn new() -> Self {
 7,253,858 ( 0.15%)          Vec { buf: RawVec::NEW, len: 0 }
    24,307 ( 0.00%)      }
         .           
         .               /// Constructs a new, empty `Vec<T>` with the specified capacity.
         .               ///
         .               /// The vector will be able to hold exactly `capacity` elements without
         .               /// reallocating. If `capacity` is 0, the vector will not allocate.
         .               ///
         .               /// It is important to note that although the returned vector has the
         .               /// *capacity* specified, the vector will have a zero *length*. For an
-- line 434 ----------------------------------------
-- line 461 ----------------------------------------
         .               /// vec.push(11);
         .               /// assert_eq!(vec.len(), 11);
         .               /// assert!(vec.capacity() >= 11);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[must_use]
    13,352 ( 0.00%)      pub fn with_capacity(capacity: usize) -> Self {
     3,338 ( 0.00%)          Self::with_capacity_in(capacity, Global)
     6,676 ( 0.00%)      }
         .           
         .               /// Creates a `Vec<T>` directly from the raw components of another vector.
         .               ///
         .               /// # Safety
         .               ///
         .               /// This is highly unsafe, due to the number of invariants that aren't
         .               /// checked:
         .               ///
-- line 479 ----------------------------------------
-- line 529 ----------------------------------------
         .               ///
         .               ///     // Put everything back together into a Vec
         .               ///     let rebuilt = Vec::from_raw_parts(p, len, cap);
         .               ///     assert_eq!(rebuilt, [4, 5, 6]);
         .               /// }
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
        90 ( 0.00%)      pub unsafe fn from_raw_parts(ptr: *mut T, length: usize, capacity: usize) -> Self {
        15 ( 0.00%)          unsafe { Self::from_raw_parts_in(ptr, length, capacity, Global) }
        30 ( 0.00%)      }
         .           }
         .           
         .           impl<T, A: Allocator> Vec<T, A> {
         .               /// Constructs a new, empty `Vec<T, A>`.
         .               ///
         .               /// The vector will not allocate until elements are pushed onto it.
         .               ///
         .               /// # Examples
-- line 547 ----------------------------------------
-- line 600 ----------------------------------------
         .               /// // ...but this may make the vector reallocate
         .               /// vec.push(11);
         .               /// assert_eq!(vec.len(), 11);
         .               /// assert!(vec.capacity() >= 11);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[inline]
         .               #[unstable(feature = "allocator_api", issue = "32838")]
    91,357 ( 0.00%)      pub fn with_capacity_in(capacity: usize, alloc: A) -> Self {
 2,051,834 ( 0.04%)          Vec { buf: RawVec::with_capacity_in(capacity, alloc), len: 0 }
    26,102 ( 0.00%)      }
         .           
         .               /// Creates a `Vec<T, A>` directly from the raw components of another vector.
         .               ///
         .               /// # Safety
         .               ///
         .               /// This is highly unsafe, due to the number of invariants that aren't
         .               /// checked:
         .               ///
-- line 618 ----------------------------------------
-- line 676 ----------------------------------------
         .               ///
         .               ///     // Put everything back together into a Vec
         .               ///     let rebuilt = Vec::from_raw_parts_in(p, len, cap, alloc.clone());
         .               ///     assert_eq!(rebuilt, [4, 5, 6]);
         .               /// }
         .               /// ```
         .               #[inline]
         .               #[unstable(feature = "allocator_api", issue = "32838")]
       273 ( 0.00%)      pub unsafe fn from_raw_parts_in(ptr: *mut T, length: usize, capacity: usize, alloc: A) -> Self {
   258,920 ( 0.01%)          unsafe { Vec { buf: RawVec::from_raw_parts_in(ptr, capacity, alloc), len: length } }
        42 ( 0.00%)      }
         .           
         .               /// Decomposes a `Vec<T>` into its raw components.
         .               ///
         .               /// Returns the raw pointer to the underlying data, the length of
         .               /// the vector (in elements), and the allocated capacity of the
         .               /// data (in elements). These are the same arguments in the same
         .               /// order as the arguments to [`from_raw_parts`].
         .               ///
-- line 694 ----------------------------------------
-- line 777 ----------------------------------------
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let vec: Vec<i32> = Vec::with_capacity(10);
         .               /// assert_eq!(vec.capacity(), 10);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
    25,164 ( 0.00%)      pub fn capacity(&self) -> usize {
   515,185 ( 0.01%)          self.buf.capacity()
    12,582 ( 0.00%)      }
         .           
         .               /// Reserves capacity for at least `additional` more elements to be inserted
         .               /// in the given `Vec<T>`. The collection may reserve more space to avoid
         .               /// frequent reallocations. After calling `reserve`, capacity will be
         .               /// greater than or equal to `self.len() + additional`. Does nothing if
         .               /// capacity is already sufficient.
         .               ///
         .               /// # Panics
-- line 795 ----------------------------------------
-- line 800 ----------------------------------------
         .               ///
         .               /// ```
         .               /// let mut vec = vec![1];
         .               /// vec.reserve(10);
         .               /// assert!(vec.capacity() >= 11);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[stable(feature = "rust1", since = "1.0.0")]
    20,750 ( 0.00%)      pub fn reserve(&mut self, additional: usize) {
   702,626 ( 0.01%)          self.buf.reserve(self.len, additional);
     8,300 ( 0.00%)      }
         .           
         .               /// Reserves the minimum capacity for exactly `additional` more elements to
         .               /// be inserted in the given `Vec<T>`. After calling `reserve_exact`,
         .               /// capacity will be greater than or equal to `self.len() + additional`.
         .               /// Does nothing if the capacity is already sufficient.
         .               ///
         .               /// Note that the allocator may give the collection more space than it
         .               /// requests. Therefore, capacity can not be relied upon to be precisely
-- line 818 ----------------------------------------
-- line 829 ----------------------------------------
         .               /// ```
         .               /// let mut vec = vec![1];
         .               /// vec.reserve_exact(10);
         .               /// assert!(vec.capacity() >= 11);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn reserve_exact(&mut self, additional: usize) {
    21,099 ( 0.00%)          self.buf.reserve_exact(self.len, additional);
         .               }
         .           
         .               /// Tries to reserve capacity for at least `additional` more elements to be inserted
         .               /// in the given `Vec<T>`. The collection may reserve more space to avoid
         .               /// frequent reallocations. After calling `try_reserve`, capacity will be
         .               /// greater than or equal to `self.len() + additional`. Does nothing if
         .               /// capacity is already sufficient.
         .               ///
-- line 845 ----------------------------------------
-- line 926 ----------------------------------------
         .               /// let mut vec = Vec::with_capacity(10);
         .               /// vec.extend([1, 2, 3]);
         .               /// assert_eq!(vec.capacity(), 10);
         .               /// vec.shrink_to_fit();
         .               /// assert!(vec.capacity() >= 3);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[stable(feature = "rust1", since = "1.0.0")]
       306 ( 0.00%)      pub fn shrink_to_fit(&mut self) {
         .                   // The capacity is never less than the length, and there's nothing to do when
         .                   // they are equal, so we can avoid the panic case in `RawVec::shrink_to_fit`
         .                   // by only calling it with a greater capacity.
    60,349 ( 0.00%)          if self.capacity() > self.len {
    26,164 ( 0.00%)              self.buf.shrink_to_fit(self.len);
         .                   }
       204 ( 0.00%)      }
         .           
         .               /// Shrinks the capacity of the vector with a lower bound.
         .               ///
         .               /// The capacity will remain at least as large as both the length
         .               /// and the supplied value.
         .               ///
         .               /// If the current capacity is less than the lower limit, this is a no-op.
         .               ///
-- line 949 ----------------------------------------
-- line 987 ----------------------------------------
         .               /// vec.extend([1, 2, 3]);
         .               ///
         .               /// assert_eq!(vec.capacity(), 10);
         .               /// let slice = vec.into_boxed_slice();
         .               /// assert_eq!(slice.into_vec().capacity(), 3);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[stable(feature = "rust1", since = "1.0.0")]
       204 ( 0.00%)      pub fn into_boxed_slice(mut self) -> Box<[T], A> {
         .                   unsafe {
       612 ( 0.00%)              self.shrink_to_fit();
    20,556 ( 0.00%)              let me = ManuallyDrop::new(self);
     1,020 ( 0.00%)              let buf = ptr::read(&me.buf);
       510 ( 0.00%)              let len = me.len();
     1,326 ( 0.00%)              buf.into_box(len).assume_init()
       102 ( 0.00%)          }
       204 ( 0.00%)      }
         .           
         .               /// Shortens the vector, keeping the first `len` elements and dropping
         .               /// the rest.
         .               ///
         .               /// If `len` is greater than the vector's current length, this has no
         .               /// effect.
         .               ///
         .               /// The [`drain`] method can emulate `truncate`, but causes the excess
-- line 1011 ----------------------------------------
-- line 1040 ----------------------------------------
         .               /// let mut vec = vec![1, 2, 3];
         .               /// vec.truncate(0);
         .               /// assert_eq!(vec, []);
         .               /// ```
         .               ///
         .               /// [`clear`]: Vec::clear
         .               /// [`drain`]: Vec::drain
         .               #[stable(feature = "rust1", since = "1.0.0")]
   517,907 ( 0.01%)      pub fn truncate(&mut self, len: usize) {
         .                   // This is safe because:
         .                   //
         .                   // * the slice passed to `drop_in_place` is valid; the `len > self.len`
         .                   //   case avoids creating an invalid slice, and
         .                   // * the `len` of the vector is shrunk before calling `drop_in_place`,
         .                   //   such that no value will be dropped twice in case `drop_in_place`
         .                   //   were to panic once (if it panics twice, the program aborts).
         .                   unsafe {
         .                       // Note: It's intentional that this is `>` and not `>=`.
         .                       //       Changing it to `>=` has negative performance
         .                       //       implications in some cases. See #78884 for more.
   424,136 ( 0.01%)              if len > self.len {
         .                           return;
         .                       }
         .                       let remaining_len = self.len - len;
         .                       let s = ptr::slice_from_raw_parts_mut(self.as_mut_ptr().add(len), remaining_len);
   388,430 ( 0.01%)              self.len = len;
    11,427 ( 0.00%)              ptr::drop_in_place(s);
         .                   }
   621,488 ( 0.01%)      }
         .           
         .               /// Extracts a slice containing the entire vector.
         .               ///
         .               /// Equivalent to `&s[..]`.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
-- line 1076 ----------------------------------------
-- line 1123 ----------------------------------------
         .               ///         assert_eq!(*x_ptr.add(i), 1 << i);
         .               ///     }
         .               /// }
         .               /// ```
         .               ///
         .               /// [`as_mut_ptr`]: Vec::as_mut_ptr
         .               #[stable(feature = "vec_as_ptr", since = "1.37.0")]
         .               #[inline]
   130,948 ( 0.00%)      pub fn as_ptr(&self) -> *const T {
         .                   // We shadow the slice method of the same name to avoid going through
         .                   // `deref`, which creates an intermediate reference.
 8,645,725 ( 0.18%)          let ptr = self.buf.ptr();
         .                   unsafe {
    65,474 ( 0.00%)              assume(!ptr.is_null());
         .                   }
         .                   ptr
   130,948 ( 0.00%)      }
         .           
         .               /// Returns an unsafe mutable pointer to the vector's buffer.
         .               ///
         .               /// The caller must ensure that the vector outlives the pointer this
         .               /// function returns, or else it will end up pointing to garbage.
         .               /// Modifying the vector may cause its buffer to be reallocated,
         .               /// which would also make any pointers to it invalid.
         .               ///
-- line 1147 ----------------------------------------
-- line 1159 ----------------------------------------
         .               ///         *x_ptr.add(i) = i as i32;
         .               ///     }
         .               ///     x.set_len(size);
         .               /// }
         .               /// assert_eq!(&*x, &[0, 1, 2, 3]);
         .               /// ```
         .               #[stable(feature = "vec_as_ptr", since = "1.37.0")]
         .               #[inline]
   815,704 ( 0.02%)      pub fn as_mut_ptr(&mut self) -> *mut T {
         .                   // We shadow the slice method of the same name to avoid going through
         .                   // `deref_mut`, which creates an intermediate reference.
 7,947,353 ( 0.17%)          let ptr = self.buf.ptr();
         .                   unsafe {
   407,852 ( 0.01%)              assume(!ptr.is_null());
         .                   }
         .                   ptr
   815,704 ( 0.02%)      }
         .           
         .               /// Returns a reference to the underlying allocator.
         .               #[unstable(feature = "allocator_api", issue = "32838")]
         .               #[inline]
    10,608 ( 0.00%)      pub fn allocator(&self) -> &A {
    10,608 ( 0.00%)          self.buf.allocator()
    10,608 ( 0.00%)      }
         .           
         .               /// Forces the length of the vector to `new_len`.
         .               ///
         .               /// This is a low-level operation that maintains none of the normal
         .               /// invariants of the type. Normally changing the length of a vector
         .               /// is done using one of the safe operations instead, such as
         .               /// [`truncate`], [`resize`], [`extend`], or [`clear`].
         .               ///
-- line 1190 ----------------------------------------
-- line 1256 ----------------------------------------
         .               ///     vec.set_len(0);
         .               /// }
         .               /// ```
         .               ///
         .               /// Normally, here, one would use [`clear`] instead to correctly drop
         .               /// the contents and thus not leak memory.
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
    93,903 ( 0.00%)      pub unsafe fn set_len(&mut self, new_len: usize) {
         .                   debug_assert!(new_len <= self.capacity());
         .           
 1,187,614 ( 0.02%)          self.len = new_len;
    64,042 ( 0.00%)      }
         .           
         .               /// Removes an element from the vector and returns it.
         .               ///
         .               /// The removed element is replaced by the last element of the vector.
         .               ///
         .               /// This does not preserve ordering, but is *O*(1).
         .               /// If you need to preserve the element order, use [`remove`] instead.
         .               ///
-- line 1276 ----------------------------------------
-- line 1329 ----------------------------------------
         .               /// let mut vec = vec![1, 2, 3];
         .               /// vec.insert(1, 4);
         .               /// assert_eq!(vec, [1, 4, 2, 3]);
         .               /// vec.insert(4, 5);
         .               /// assert_eq!(vec, [1, 4, 2, 3, 5]);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[stable(feature = "rust1", since = "1.0.0")]
     8,022 ( 0.00%)      pub fn insert(&mut self, index: usize, element: T) {
         .                   #[cold]
         .                   #[inline(never)]
         .                   fn assert_failed(index: usize, len: usize) -> ! {
         .                       panic!("insertion index (is {}) should be <= len (is {})", index, len);
         .                   }
         .           
     1,596 ( 0.00%)          let len = self.len();
     6,490 ( 0.00%)          if index > len {
         .                       assert_failed(index, len);
         .                   }
         .           
         .                   // space for the new element
    10,554 ( 0.00%)          if len == self.buf.capacity() {
         .                       self.reserve(1);
         .                   }
         .           
         .                   unsafe {
         .                       // infallible
         .                       // The spot to put the new value
         .                       {
         .                           let p = self.as_mut_ptr().add(index);
         .                           // Shift everything over to make space. (Duplicating the
         .                           // `index`th element into two consecutive places.)
    14,187 ( 0.00%)                  ptr::copy(p, p.offset(1), len - index);
         .                           // Write it in, overwriting the first copy of the `index`th
         .                           // element.
         .                           ptr::write(p, element);
         .                       }
    10,358 ( 0.00%)              self.set_len(len + 1);
         .                   }
     6,876 ( 0.00%)      }
         .           
         .               /// Removes and returns the element at position `index` within the vector,
         .               /// shifting all elements after it to the left.
         .               ///
         .               /// Note: Because this shifts over the remaining elements, it has a
         .               /// worst-case performance of *O*(*n*). If you don't need the order of elements
         .               /// to be preserved, use [`swap_remove`] instead. If you'd like to remove
         .               /// elements from the beginning of the `Vec`, consider using
-- line 1376 ----------------------------------------
-- line 1387 ----------------------------------------
         .               ///
         .               /// ```
         .               /// let mut v = vec![1, 2, 3];
         .               /// assert_eq!(v.remove(1), 2);
         .               /// assert_eq!(v, [1, 3]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[track_caller]
    30,702 ( 0.00%)      pub fn remove(&mut self, index: usize) -> T {
         .                   #[cold]
         .                   #[inline(never)]
         .                   #[track_caller]
         .                   fn assert_failed(index: usize, len: usize) -> ! {
         .                       panic!("removal index (is {}) should be < len (is {})", index, len);
         .                   }
         .           
    15,559 ( 0.00%)          let len = self.len();
    22,827 ( 0.00%)          if index >= len {
         .                       assert_failed(index, len);
         .                   }
         .                   unsafe {
         .                       // infallible
         .                       let ret;
         .                       {
         .                           // the place we are taking from.
    12,110 ( 0.00%)                  let ptr = self.as_mut_ptr().add(index);
         .                           // copy it out, unsafely having a copy of the value on
         .                           // the stack and in the vector at the same time.
    58,336 ( 0.00%)                  ret = ptr::read(ptr);
         .           
         .                           // Shift everything down to fill in that spot.
    45,770 ( 0.00%)                  ptr::copy(ptr.offset(1), ptr, len - index - 1);
         .                       }
    25,653 ( 0.00%)              self.set_len(len - 1);
     2,422 ( 0.00%)              ret
         .                   }
    31,794 ( 0.00%)      }
         .           
         .               /// Retains only the elements specified by the predicate.
         .               ///
         .               /// In other words, remove all elements `e` such that `f(&e)` returns `false`.
         .               /// This method operates in place, visiting each element exactly once in the
         .               /// original order, and preserves the order of the retained elements.
         .               ///
         .               /// # Examples
-- line 1431 ----------------------------------------
-- line 1442 ----------------------------------------
         .               /// ```
         .               /// let mut vec = vec![1, 2, 3, 4, 5];
         .               /// let keep = [false, true, true, false, true];
         .               /// let mut iter = keep.iter();
         .               /// vec.retain(|_| *iter.next().unwrap());
         .               /// assert_eq!(vec, [2, 3, 5]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
   424,644 ( 0.01%)      pub fn retain<F>(&mut self, mut f: F)
         .               where
         .                   F: FnMut(&T) -> bool,
         .               {
    38,067 ( 0.00%)          self.retain_mut(|elem| f(elem));
   411,080 ( 0.01%)      }
         .           
         .               /// Retains only the elements specified by the predicate, passing a mutable reference to it.
         .               ///
         .               /// In other words, remove all elements `e` such that `f(&mut e)` returns `false`.
         .               /// This method operates in place, visiting each element exactly once in the
         .               /// original order, and preserves the order of the retained elements.
         .               ///
         .               /// # Examples
-- line 1463 ----------------------------------------
-- line 1474 ----------------------------------------
         .               /// });
         .               /// assert_eq!(vec, [2, 3, 4]);
         .               /// ```
         .               #[unstable(feature = "vec_retain_mut", issue = "90829")]
         .               pub fn retain_mut<F>(&mut self, mut f: F)
         .               where
         .                   F: FnMut(&mut T) -> bool,
         .               {
    55,991 ( 0.00%)          let original_len = self.len();
         .                   // Avoid double drop if the drop guard is not executed,
         .                   // since we may make some holes during the process.
         .                   unsafe { self.set_len(0) };
         .           
         .                   // Vec: [Kept, Kept, Hole, Hole, Hole, Hole, Unchecked, Unchecked]
         .                   //      |<-              processed len   ->| ^- next to check
         .                   //                  |<-  deleted cnt     ->|
         .                   //      |<-              original_len                          ->|
-- line 1490 ----------------------------------------
-- line 1499 ----------------------------------------
         .                       v: &'a mut Vec<T, A>,
         .                       processed_len: usize,
         .                       deleted_cnt: usize,
         .                       original_len: usize,
         .                   }
         .           
         .                   impl<T, A: Allocator> Drop for BackshiftOnDrop<'_, T, A> {
         .                       fn drop(&mut self) {
    45,322 ( 0.00%)                  if self.deleted_cnt > 0 {
         .                               // SAFETY: Trailing unchecked items must be valid since we never touch them.
         .                               unsafe {
         .                                   ptr::copy(
         .                                       self.v.as_ptr().add(self.processed_len),
    35,359 ( 0.00%)                              self.v.as_mut_ptr().add(self.processed_len - self.deleted_cnt),
         .                                       self.original_len - self.processed_len,
         .                                   );
         .                               }
         .                           }
         .                           // SAFETY: After filling holes, all items are in contiguous memory.
         .                           unsafe {
         2 ( 0.00%)                      self.v.set_len(self.original_len - self.deleted_cnt);
         .                           }
         .                       }
         .                   }
         .           
         .                   let mut g = BackshiftOnDrop { v: self, processed_len: 0, deleted_cnt: 0, original_len };
         .           
         .                   fn process_loop<F, T, A: Allocator, const DELETED: bool>(
         .                       original_len: usize,
         .                       f: &mut F,
         .                       g: &mut BackshiftOnDrop<'_, T, A>,
         .                   ) where
         .                       F: FnMut(&mut T) -> bool,
         .                   {
   785,235 ( 0.02%)              while g.processed_len != original_len {
         .                           // SAFETY: Unchecked element must be valid.
         .                           let cur = unsafe { &mut *g.v.as_mut_ptr().add(g.processed_len) };
   214,793 ( 0.00%)                  if !f(cur) {
         .                               // Advance early to avoid double drop if `drop_in_place` panicked.
    19,422 ( 0.00%)                      g.processed_len += 1;
    14,866 ( 0.00%)                      g.deleted_cnt += 1;
         .                               // SAFETY: We never touch this element again after dropped.
     9,609 ( 0.00%)                      unsafe { ptr::drop_in_place(cur) };
         .                               // We already advanced the counter.
         .                               if DELETED {
         .                                   continue;
         .                               } else {
         .                                   break;
         .                               }
         .                           }
         .                           if DELETED {
         .                               // SAFETY: `deleted_cnt` > 0, so the hole slot must not overlap with current element.
         .                               // We use copy for move, and never touch this element again.
         .                               unsafe {
    16,488 ( 0.00%)                          let hole_slot = g.v.as_mut_ptr().add(g.processed_len - g.deleted_cnt);
         .                                   ptr::copy_nonoverlapping(cur, hole_slot, 1);
         .                               }
         .                           }
    15,344 ( 0.00%)                  g.processed_len += 1;
         .                       }
         .                   }
         .           
         .                   // Stage 1: Nothing was deleted.
         .                   process_loop::<F, T, A, false>(original_len, &mut f, &mut g);
         .           
         .                   // Stage 2: Some elements were deleted.
         .                   process_loop::<F, T, A, true>(original_len, &mut f, &mut g);
-- line 1565 ----------------------------------------
-- line 1606 ----------------------------------------
         .               /// ```
         .               /// let mut vec = vec!["foo", "bar", "Bar", "baz", "bar"];
         .               ///
         .               /// vec.dedup_by(|a, b| a.eq_ignore_ascii_case(b));
         .               ///
         .               /// assert_eq!(vec, ["foo", "bar", "baz", "bar"]);
         .               /// ```
         .               #[stable(feature = "dedup_by", since = "1.16.0")]
    60,816 ( 0.00%)      pub fn dedup_by<F>(&mut self, mut same_bucket: F)
         .               where
         .                   F: FnMut(&mut T, &mut T) -> bool,
         .               {
     8,688 ( 0.00%)          let len = self.len();
    22,624 ( 0.00%)          if len <= 1 {
         .                       return;
         .                   }
         .           
         .                   /* INVARIANT: vec.len() > read >= write > write-1 >= 0 */
         .                   struct FillGapOnDrop<'a, T, A: core::alloc::Allocator> {
         .                       /* Offset of the element we want to check if it is duplicate */
         .                       read: usize,
         .           
-- line 1627 ----------------------------------------
-- line 1670 ----------------------------------------
         .                   let ptr = gap.vec.as_mut_ptr();
         .           
         .                   /* Drop items while going through Vec, it should be more efficient than
         .                    * doing slice partition_dedup + truncate */
         .           
         .                   /* SAFETY: Because of the invariant, read_ptr, prev_ptr and write_ptr
         .                    * are always in-bounds and read_ptr never aliases prev_ptr */
         .                   unsafe {
     6,975 ( 0.00%)              while gap.read < len {
         .                           let read_ptr = ptr.add(gap.read);
         .                           let prev_ptr = ptr.add(gap.write.wrapping_sub(1));
         .           
     2,542 ( 0.00%)                  if same_bucket(&mut *read_ptr, &mut *prev_ptr) {
         .                               // Increase `gap.read` now since the drop may panic.
         .                               gap.read += 1;
         .                               /* We have found duplicate, drop it in-place */
         .                               ptr::drop_in_place(read_ptr);
         .                           } else {
         .                               let write_ptr = ptr.add(gap.write);
         .           
         .                               /* Because `read_ptr` can be equal to `write_ptr`, we either
         .                                * have to use `copy` or conditional `copy_nonoverlapping`.
         .                                * Looks like the first option is faster. */
         .                               ptr::copy(read_ptr, write_ptr, 1);
         .           
         .                               /* We have filled that place, so go further */
     3,173 ( 0.00%)                      gap.write += 1;
         .                               gap.read += 1;
         .                           }
         .                       }
         .           
         .                       /* Technically we could let `gap` clean up with its Drop, but
         .                        * when `same_bucket` is guaranteed to not panic, this bloats a little
         .                        * the codegen, so we just do it manually */
         .                       gap.vec.set_len(gap.write);
         .                       mem::forget(gap);
         .                   }
    69,504 ( 0.00%)      }
         .           
         .               /// Appends an element to the back of a collection.
         .               ///
         .               /// # Panics
         .               ///
         .               /// Panics if the new capacity exceeds `isize::MAX` bytes.
         .               ///
         .               /// # Examples
-- line 1715 ----------------------------------------
-- line 1717 ----------------------------------------
         .               /// ```
         .               /// let mut vec = vec![1, 2];
         .               /// vec.push(3);
         .               /// assert_eq!(vec, [1, 2, 3]);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
 1,897,788 ( 0.04%)      pub fn push(&mut self, value: T) {
         .                   // This will panic or abort if we would allocate > isize::MAX bytes
         .                   // or if the length increment would overflow for zero-sized types.
12,741,292 ( 0.27%)          if self.len == self.buf.capacity() {
   915,668 ( 0.02%)              self.buf.reserve_for_push(self.len);
         .                   }
         .                   unsafe {
 3,543,366 ( 0.07%)              let end = self.as_mut_ptr().add(self.len);
 1,763,918 ( 0.04%)              ptr::write(end, value);
16,642,972 ( 0.35%)              self.len += 1;
         .                   }
   636,716 ( 0.01%)      }
         .           
         .               /// Removes the last element from a vector and returns it, or [`None`] if it
         .               /// is empty.
         .               ///
         .               /// If you'd like to pop the first element, consider using
         .               /// [`VecDeque::pop_front`] instead.
         .               ///
         .               /// [`VecDeque::pop_front`]: crate::collections::VecDeque::pop_front
-- line 1744 ----------------------------------------
-- line 1747 ----------------------------------------
         .               ///
         .               /// ```
         .               /// let mut vec = vec![1, 2, 3];
         .               /// assert_eq!(vec.pop(), Some(3));
         .               /// assert_eq!(vec, [1, 2]);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
    10,480 ( 0.00%)      pub fn pop(&mut self) -> Option<T> {
 2,249,107 ( 0.05%)          if self.len == 0 {
        26 ( 0.00%)              None
         .                   } else {
         .                       unsafe {
 1,746,766 ( 0.04%)                  self.len -= 1;
   324,783 ( 0.01%)                  Some(ptr::read(self.as_ptr().add(self.len())))
         .                       }
         .                   }
     4,192 ( 0.00%)      }
         .           
         .               /// Moves all the elements of `other` into `Self`, leaving `other` empty.
         .               ///
         .               /// # Panics
         .               ///
         .               /// Panics if the number of elements in the vector overflows a `usize`.
         .               ///
         .               /// # Examples
-- line 1772 ----------------------------------------
-- line 1776 ----------------------------------------
         .               /// let mut vec2 = vec![4, 5, 6];
         .               /// vec.append(&mut vec2);
         .               /// assert_eq!(vec, [1, 2, 3, 4, 5, 6]);
         .               /// assert_eq!(vec2, []);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[inline]
         .               #[stable(feature = "append", since = "1.4.0")]
     1,995 ( 0.00%)      pub fn append(&mut self, other: &mut Self) {
         .                   unsafe {
         .                       self.append_elements(other.as_slice() as _);
         .                       other.set_len(0);
         .                   }
     1,710 ( 0.00%)      }
         .           
         .               /// Appends elements to `Self` from other buffer.
         .               #[cfg(not(no_global_oom_handling))]
         .               #[inline]
    24,010 ( 0.00%)      unsafe fn append_elements(&mut self, other: *const [T]) {
     2,401 ( 0.00%)          let count = unsafe { (*other).len() };
     2,401 ( 0.00%)          self.reserve(count);
    43,630 ( 0.00%)          let len = self.len();
     7,203 ( 0.00%)          unsafe { ptr::copy_nonoverlapping(other as *const T, self.as_mut_ptr().add(len), count) };
   475,363 ( 0.01%)          self.len += count;
     4,802 ( 0.00%)      }
         .           
         .               /// Creates a draining iterator that removes the specified range in the vector
         .               /// and yields the removed items.
         .               ///
         .               /// When the iterator **is** dropped, all elements in the range are removed
         .               /// from the vector, even if the iterator was not fully consumed. If the
         .               /// iterator **is not** dropped (with [`mem::forget`] for example), it is
         .               /// unspecified how many elements are removed.
-- line 1808 ----------------------------------------
-- line 1820 ----------------------------------------
         .               /// assert_eq!(v, &[1]);
         .               /// assert_eq!(u, &[2, 3]);
         .               ///
         .               /// // A full range clears the vector
         .               /// v.drain(..);
         .               /// assert_eq!(v, &[]);
         .               /// ```
         .               #[stable(feature = "drain", since = "1.6.0")]
    68,726 ( 0.00%)      pub fn drain<R>(&mut self, range: R) -> Drain<'_, T, A>
         .               where
         .                   R: RangeBounds<usize>,
         .               {
         .                   // Memory safety
         .                   //
         .                   // When the Drain is first created, it shortens the length of
         .                   // the source vector to make sure no uninitialized or moved-from elements
         .                   // are accessible at all if the Drain's destructor never gets to run.
         .                   //
         .                   // Drain will ptr::read out the values to remove.
         .                   // When finished, remaining tail of the vec is copied back to cover
         .                   // the hole, and the vector length is restored to the new length.
         .                   //
   129,751 ( 0.00%)          let len = self.len();
   147,270 ( 0.00%)          let Range { start, end } = slice::range(range, ..len);
         .           
         .                   unsafe {
         .                       // set self.vec length's to start, to be safe in case Drain is leaked
    29,454 ( 0.00%)              self.set_len(start);
         .                       // Use the borrow in the IterMut to indicate borrowing behavior of the
         .                       // whole Drain iterator (like &mut T).
   158,279 ( 0.00%)              let range_slice = slice::from_raw_parts_mut(self.as_mut_ptr().add(start), end - start);
    66,379 ( 0.00%)              Drain {
         .                           tail_start: end,
    49,886 ( 0.00%)                  tail_len: len - end,
    49,090 ( 0.00%)                  iter: range_slice.iter(),
    39,272 ( 0.00%)                  vec: NonNull::from(self),
         .                       }
         .                   }
    19,636 ( 0.00%)      }
         .           
         .               /// Clears the vector, removing all values.
         .               ///
         .               /// Note that this method has no effect on the allocated capacity
         .               /// of the vector.
         .               ///
         .               /// # Examples
         .               ///
-- line 1866 ----------------------------------------
-- line 1869 ----------------------------------------
         .               ///
         .               /// v.clear();
         .               ///
         .               /// assert!(v.is_empty());
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn clear(&mut self) {
   925,260 ( 0.02%)          self.truncate(0)
         .               }
         .           
         .               /// Returns the number of elements in the vector, also referred to
         .               /// as its 'length'.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let a = vec![1, 2, 3];
         .               /// assert_eq!(a.len(), 3);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
 1,042,028 ( 0.02%)      pub fn len(&self) -> usize {
   521,014 ( 0.01%)          self.len
 1,042,028 ( 0.02%)      }
         .           
         .               /// Returns `true` if the vector contains no elements.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let mut v = Vec::new();
         .               /// assert!(v.is_empty());
         .               ///
         .               /// v.push(1);
         .               /// assert!(!v.is_empty());
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
    28,350 ( 0.00%)      pub fn is_empty(&self) -> bool {
   995,726 ( 0.02%)          self.len() == 0
    56,700 ( 0.00%)      }
         .           
         .               /// Splits the collection into two at the given index.
         .               ///
         .               /// Returns a newly allocated vector containing the elements in the range
         .               /// `[at, len)`. After the call, the original vector will be left containing
         .               /// the elements `[0, at)` with its previous capacity unchanged.
         .               ///
         .               /// # Panics
-- line 1917 ----------------------------------------
-- line 1935 ----------------------------------------
         .                   A: Clone,
         .               {
         .                   #[cold]
         .                   #[inline(never)]
         .                   fn assert_failed(at: usize, len: usize) -> ! {
         .                       panic!("`at` split index (is {}) should be <= len (is {})", at, len);
         .                   }
         .           
     4,291 ( 0.00%)          if at > self.len() {
         .                       assert_failed(at, self.len());
         .                   }
         .           
     3,287 ( 0.00%)          if at == 0 {
         .                       // the new vector can take over the original buffer and avoid the copy
         .                       return mem::replace(
         .                           self,
         .                           Vec::with_capacity_in(self.capacity(), self.allocator().clone()),
         .                       );
         .                   }
         .           
         .                   let other_len = self.len - at;
-- line 1955 ----------------------------------------
-- line 1988 ----------------------------------------
         .               ///
         .               /// let mut vec = vec![];
         .               /// let mut p = 1;
         .               /// vec.resize_with(4, || { p *= 2; p });
         .               /// assert_eq!(vec, [2, 4, 8, 16]);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[stable(feature = "vec_resize_with", since = "1.33.0")]
    87,245 ( 0.00%)      pub fn resize_with<F>(&mut self, new_len: usize, f: F)
         .               where
         .                   F: FnMut() -> T,
         .               {
    11,873 ( 0.00%)          let len = self.len();
    23,746 ( 0.00%)          if new_len > len {
    85,363 ( 0.00%)              self.extend_with(new_len - len, ExtendFunc(f));
         .                   } else {
         .                       self.truncate(new_len);
         .                   }
    75,372 ( 0.00%)      }
         .           
         .               /// Consumes and leaks the `Vec`, returning a mutable reference to the contents,
         .               /// `&'a mut [T]`. Note that the type `T` must outlive the chosen lifetime
         .               /// `'a`. If the type has only static references, or none at all, then this
         .               /// may be chosen to be `'static`.
         .               ///
         .               /// As of Rust 1.57, this method does not reallocate or shrink the `Vec`,
         .               /// so the leaked allocation may include unused capacity that is not part
-- line 2014 ----------------------------------------
-- line 2064 ----------------------------------------
         .               /// unsafe {
         .               ///     v.set_len(3);
         .               /// }
         .               ///
         .               /// assert_eq!(&v, &[0, 1, 2]);
         .               /// ```
         .               #[stable(feature = "vec_spare_capacity", since = "1.60.0")]
         .               #[inline]
    16,110 ( 0.00%)      pub fn spare_capacity_mut(&mut self) -> &mut [MaybeUninit<T>] {
         .                   // Note:
         .                   // This method is not implemented in terms of `split_at_spare_mut`,
         .                   // to prevent invalidation of pointers to the buffer.
         .                   unsafe {
    21,480 ( 0.00%)              slice::from_raw_parts_mut(
    37,596 ( 0.00%)                  self.as_mut_ptr().add(self.len) as *mut MaybeUninit<T>,
    26,977 ( 0.00%)                  self.buf.capacity() - self.len,
         .                       )
         .                   }
    10,740 ( 0.00%)      }
         .           
         .               /// Returns vector content as a slice of `T`, along with the remaining spare
         .               /// capacity of the vector as a slice of `MaybeUninit<T>`.
         .               ///
         .               /// The returned spare capacity slice can be used to fill the vector with data
         .               /// (e.g. by reading from a file) before marking the data as initialized using
         .               /// the [`set_len`] method.
         .               ///
-- line 2090 ----------------------------------------
-- line 2189 ----------------------------------------
         .               /// assert_eq!(vec, ["hello", "world", "world"]);
         .               ///
         .               /// let mut vec = vec![1, 2, 3, 4];
         .               /// vec.resize(2, 0);
         .               /// assert_eq!(vec, [1, 2]);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[stable(feature = "vec_resize", since = "1.5.0")]
     7,140 ( 0.00%)      pub fn resize(&mut self, new_len: usize, value: T) {
       714 ( 0.00%)          let len = self.len();
         .           
     2,142 ( 0.00%)          if new_len > len {
    12,585 ( 0.00%)              self.extend_with(new_len - len, ExtendElement(value))
         .                   } else {
         .                       self.truncate(new_len);
         .                   }
     1,682 ( 0.00%)      }
         .           
         .               /// Clones and appends all elements in a slice to the `Vec`.
         .               ///
         .               /// Iterates over the slice `other`, clones each element, and then appends
         .               /// it to this `Vec`. The `other` slice is traversed in-order.
         .               ///
         .               /// Note that this function is same as [`extend`] except that it is
         .               /// specialized to work with slices instead. If and when Rust gets
-- line 2213 ----------------------------------------
-- line 2220 ----------------------------------------
         .               /// let mut vec = vec![1];
         .               /// vec.extend_from_slice(&[2, 3, 4]);
         .               /// assert_eq!(vec, [1, 2, 3, 4]);
         .               /// ```
         .               ///
         .               /// [`extend`]: Vec::extend
         .               #[cfg(not(no_global_oom_handling))]
         .               #[stable(feature = "vec_extend_from_slice", since = "1.6.0")]
    26,411 ( 0.00%)      pub fn extend_from_slice(&mut self, other: &[T]) {
     9,604 ( 0.00%)          self.spec_extend(other.iter())
     4,802 ( 0.00%)      }
         .           
         .               /// Copies elements from `src` range to the end of the vector.
         .               ///
         .               /// # Panics
         .               ///
         .               /// Panics if the starting point is greater than the end point or if
         .               /// the end point is greater than the length of the vector.
         .               ///
-- line 2238 ----------------------------------------
-- line 2271 ----------------------------------------
         .           trait ExtendWith<T> {
         .               fn next(&mut self) -> T;
         .               fn last(self) -> T;
         .           }
         .           
         .           struct ExtendElement<T>(T);
         .           impl<T: Clone> ExtendWith<T> for ExtendElement<T> {
         .               fn next(&mut self) -> T {
     3,926 ( 0.00%)          self.0.clone()
         .               }
         .               fn last(self) -> T {
         .                   self.0
         .               }
         .           }
         .           
         .           struct ExtendFunc<F>(F);
         .           impl<T, F: FnMut() -> T> ExtendWith<T> for ExtendFunc<F> {
-- line 2287 ----------------------------------------
-- line 2291 ----------------------------------------
         .               fn last(mut self) -> T {
         .                   (self.0)()
         .               }
         .           }
         .           
         .           impl<T, A: Allocator> Vec<T, A> {
         .               #[cfg(not(no_global_oom_handling))]
         .               /// Extend the vector by `n` values, using the given generator.
   398,566 ( 0.01%)      fn extend_with<E: ExtendWith<T>>(&mut self, n: usize, mut value: E) {
         .                   self.reserve(n);
         .           
         .                   unsafe {
    16,109 ( 0.00%)              let mut ptr = self.as_mut_ptr().add(self.len());
         .                       // Use SetLenOnDrop to work around bug where compiler
         .                       // might not realize the store through `ptr` through self.set_len()
         .                       // don't alias.
         .                       let mut local_len = SetLenOnDrop::new(&mut self.len);
         .           
         .                       // Write all elements except the last one
         .                       for _ in 1..n {
         .                           ptr::write(ptr, value.next());
         .                           ptr = ptr.offset(1);
         .                           // Increment the length in every step in case next() panics
         .                           local_len.increment_len(1);
         .                       }
         .           
   588,707 ( 0.01%)              if n > 0 {
         .                           // We can write the last element directly without cloning needlessly
         .                           ptr::write(ptr, value.last());
         .                           local_len.increment_len(1);
         .                       }
         .           
         .                       // len set by scope guard
         .                   }
   314,723 ( 0.01%)      }
         .           }
         .           
         .           impl<T: PartialEq, A: Allocator> Vec<T, A> {
         .               /// Removes consecutive repeated elements in the vector according to the
         .               /// [`PartialEq`] trait implementation.
         .               ///
         .               /// If the vector is sorted, this removes all duplicates.
         .               ///
-- line 2333 ----------------------------------------
-- line 2338 ----------------------------------------
         .               ///
         .               /// vec.dedup();
         .               ///
         .               /// assert_eq!(vec, [1, 2, 3, 2]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[inline]
         .               pub fn dedup(&mut self) {
     8,689 ( 0.00%)          self.dedup_by(|a, b| a == b)
         .               }
         .           }
         .           
         .           ////////////////////////////////////////////////////////////////////////////////
         .           // Internal methods and functions
         .           ////////////////////////////////////////////////////////////////////////////////
         .           
         .           #[doc(hidden)]
         .           #[cfg(not(no_global_oom_handling))]
         .           #[stable(feature = "rust1", since = "1.0.0")]
   106,515 ( 0.00%)  pub fn from_elem<T: Clone>(elem: T, n: usize) -> Vec<T> {
   527,023 ( 0.01%)      <T as SpecFromElem>::from_elem(elem, n, Global)
   125,961 ( 0.00%)  }
         .           
         .           #[doc(hidden)]
         .           #[cfg(not(no_global_oom_handling))]
         .           #[unstable(feature = "allocator_api", issue = "32838")]
         .           pub fn from_elem_in<T: Clone, A: Allocator>(elem: T, n: usize, alloc: A) -> Vec<T, A> {
         .               <T as SpecFromElem>::from_elem(elem, n, alloc)
         .           }
         .           
-- line 2367 ----------------------------------------
-- line 2423 ----------------------------------------
         .           ////////////////////////////////////////////////////////////////////////////////
         .           // Common trait implementations for Vec
         .           ////////////////////////////////////////////////////////////////////////////////
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T, A: Allocator> ops::Deref for Vec<T, A> {
         .               type Target = [T];
         .           
   190,134 ( 0.00%)      fn deref(&self) -> &[T] {
13,239,060 ( 0.28%)          unsafe { slice::from_raw_parts(self.as_ptr(), self.len) }
   126,819 ( 0.00%)      }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T, A: Allocator> ops::DerefMut for Vec<T, A> {
     4,962 ( 0.00%)      fn deref_mut(&mut self) -> &mut [T] {
 3,134,679 ( 0.07%)          unsafe { slice::from_raw_parts_mut(self.as_mut_ptr(), self.len) }
     3,308 ( 0.00%)      }
         .           }
         .           
         .           #[cfg(not(no_global_oom_handling))]
         .           trait SpecCloneFrom {
         .               fn clone_from(this: &mut Self, other: &Self);
         .           }
         .           
         .           #[cfg(not(no_global_oom_handling))]
-- line 2448 ----------------------------------------
-- line 2468 ----------------------------------------
         .                   this.extend_from_slice(other);
         .               }
         .           }
         .           
         .           #[cfg(not(no_global_oom_handling))]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T: Clone, A: Allocator + Clone> Clone for Vec<T, A> {
         .               #[cfg(not(test))]
   585,122 ( 0.01%)      fn clone(&self) -> Self {
    18,895 ( 0.00%)          let alloc = self.allocator().clone();
    34,013 ( 0.00%)          <[T]>::to_vec_in(&**self, alloc)
   698,536 ( 0.01%)      }
         .           
         .               // HACK(japaric): with cfg(test) the inherent `[T]::to_vec` method, which is
         .               // required for this method definition, is not available. Instead use the
         .               // `slice::to_vec`  function which is only available with cfg(test)
         .               // NB see the slice::hack module in slice.rs for more information
         .               #[cfg(test)]
         .               fn clone(&self) -> Self {
         .                   let alloc = self.allocator().clone();
-- line 2487 ----------------------------------------
-- line 2517 ----------------------------------------
         .           #[rustc_on_unimplemented(
         .               message = "vector indices are of type `usize` or ranges of `usize`",
         .               label = "vector indices are of type `usize` or ranges of `usize`"
         .           )]
         .           impl<T, I: SliceIndex<[T]>, A: Allocator> Index<I> for Vec<T, A> {
         .               type Output = I::Output;
         .           
         .               #[inline]
        55 ( 0.00%)      fn index(&self, index: I) -> &Self::Output {
   509,268 ( 0.01%)          Index::index(&**self, index)
        22 ( 0.00%)      }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           #[rustc_on_unimplemented(
         .               message = "vector indices are of type `usize` or ranges of `usize`",
         .               label = "vector indices are of type `usize` or ranges of `usize`"
         .           )]
         .           impl<T, I: SliceIndex<[T]>, A: Allocator> IndexMut<I> for Vec<T, A> {
         .               #[inline]
         .               fn index_mut(&mut self, index: I) -> &mut Self::Output {
        52 ( 0.00%)          IndexMut::index_mut(&mut **self, index)
         .               }
         .           }
         .           
         .           #[cfg(not(no_global_oom_handling))]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T> FromIterator<T> for Vec<T> {
         .               #[inline]
     4,845 ( 0.00%)      fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> Vec<T> {
 3,243,614 ( 0.07%)          <Self as SpecFromIter<T, I::IntoIter>>::from_iter(iter.into_iter())
     3,214 ( 0.00%)      }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T, A: Allocator> IntoIterator for Vec<T, A> {
         .               type Item = T;
         .               type IntoIter = IntoIter<T, A>;
         .           
         .               /// Creates a consuming iterator, that is, one that moves each value out of
-- line 2556 ----------------------------------------
-- line 2562 ----------------------------------------
         .               /// ```
         .               /// let v = vec!["a".to_string(), "b".to_string()];
         .               /// for s in v.into_iter() {
         .               ///     // s has type String, not &String
         .               ///     println!("{}", s);
         .               /// }
         .               /// ```
         .               #[inline]
     4,575 ( 0.00%)      fn into_iter(self) -> IntoIter<T, A> {
         .                   unsafe {
 1,326,402 ( 0.03%)              let mut me = ManuallyDrop::new(self);
     3,050 ( 0.00%)              let alloc = ptr::read(me.allocator());
     7,625 ( 0.00%)              let begin = me.as_mut_ptr();
     4,575 ( 0.00%)              let end = if mem::size_of::<T>() == 0 {
         .                           arith_offset(begin as *const i8, me.len() as isize) as *const T
         .                       } else {
     7,625 ( 0.00%)                  begin.add(me.len()) as *const T
         .                       };
     1,525 ( 0.00%)              let cap = me.buf.capacity();
   450,487 ( 0.01%)              IntoIter {
     6,100 ( 0.00%)                  buf: NonNull::new_unchecked(begin),
         .                           phantom: PhantomData,
         .                           cap,
         .                           alloc,
         .                           ptr: begin,
     1,525 ( 0.00%)                  end,
         .                       }
         .                   }
     3,050 ( 0.00%)      }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<'a, T, A: Allocator> IntoIterator for &'a Vec<T, A> {
         .               type Item = &'a T;
         .               type IntoIter = slice::Iter<'a, T>;
         .           
       282 ( 0.00%)      fn into_iter(self) -> slice::Iter<'a, T> {
       915 ( 0.00%)          self.iter()
       282 ( 0.00%)      }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<'a, T, A: Allocator> IntoIterator for &'a mut Vec<T, A> {
         .               type Item = &'a mut T;
         .               type IntoIter = slice::IterMut<'a, T>;
         .           
         .               fn into_iter(self) -> slice::IterMut<'a, T> {
     1,344 ( 0.00%)          self.iter_mut()
         .               }
         .           }
         .           
         .           #[cfg(not(no_global_oom_handling))]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T, A: Allocator> Extend<T> for Vec<T, A> {
         .               #[inline]
     3,288 ( 0.00%)      fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {
 1,744,022 ( 0.04%)          <Self as SpecExtend<T, I::IntoIter>>::spec_extend(self, iter.into_iter())
     3,288 ( 0.00%)      }
         .           
         .               #[inline]
         .               fn extend_one(&mut self, item: T) {
       632 ( 0.00%)          self.push(item);
         .               }
         .           
         .               #[inline]
         .               fn extend_reserve(&mut self, additional: usize) {
         .                   self.reserve(additional);
         .               }
         .           }
         .           
         .           impl<T, A: Allocator> Vec<T, A> {
         .               // leaf method to which various SpecFrom/SpecExtend implementations delegate when
         .               // they have no further optimizations to apply
         .               #[cfg(not(no_global_oom_handling))]
     6,392 ( 0.00%)      fn extend_desugared<I: Iterator<Item = T>>(&mut self, mut iterator: I) {
         .                   // This is the case for a general iterator.
         .                   //
         .                   // This function should be the moral equivalent of:
         .                   //
         .                   //      for item in iterator {
         .                   //          self.push(item);
         .                   //      }
   365,146 ( 0.01%)          while let Some(element) = iterator.next() {
   102,484 ( 0.00%)              let len = self.len();
   615,097 ( 0.01%)              if len == self.capacity() {
     6,793 ( 0.00%)                  let (lower, _) = iterator.size_hint();
     1,846 ( 0.00%)                  self.reserve(lower.saturating_add(1));
         .                       }
         .                       unsafe {
    49,314 ( 0.00%)                  ptr::write(self.as_mut_ptr().add(len), element);
         .                           // Since next() executes user code which can panic we have to bump the length
         .                           // after each step.
         .                           // NB can't overflow since we would have had to alloc the address space
   470,736 ( 0.01%)                  self.set_len(len + 1);
         .                       }
     6,159 ( 0.00%)          }
    12,530 ( 0.00%)      }
         .           
         .               /// Creates a splicing iterator that replaces the specified range in the vector
         .               /// with the given `replace_with` iterator and yields the removed items.
         .               /// `replace_with` does not need to be the same length as `range`.
         .               ///
         .               /// `range` is removed even if the iterator is not consumed until the end.
         .               ///
         .               /// It is unspecified how many elements are removed from the vector
-- line 2666 ----------------------------------------
-- line 2693 ----------------------------------------
         .               #[cfg(not(no_global_oom_handling))]
         .               #[inline]
         .               #[stable(feature = "vec_splice", since = "1.21.0")]
         .               pub fn splice<R, I>(&mut self, range: R, replace_with: I) -> Splice<'_, I::IntoIter, A>
         .               where
         .                   R: RangeBounds<usize>,
         .                   I: IntoIterator<Item = T>,
         .               {
    10,137 ( 0.00%)          Splice { drain: self.drain(range), replace_with: replace_with.into_iter() }
         .               }
         .           
         .               /// Creates an iterator which uses a closure to determine if an element should be removed.
         .               ///
         .               /// If the closure returns true, then the element is removed and yielded.
         .               /// If the closure returns false, the element will remain in the vector and will not be yielded
         .               /// by the iterator.
         .               ///
-- line 2709 ----------------------------------------
-- line 2745 ----------------------------------------
         .               /// assert_eq!(evens, vec![2, 4, 6, 8, 14]);
         .               /// assert_eq!(odds, vec![1, 3, 5, 9, 11, 13, 15]);
         .               /// ```
         .               #[unstable(feature = "drain_filter", reason = "recently added", issue = "43244")]
         .               pub fn drain_filter<F>(&mut self, filter: F) -> DrainFilter<'_, T, F, A>
         .               where
         .                   F: FnMut(&mut T) -> bool,
         .               {
     4,682 ( 0.00%)          let old_len = self.len();
         .           
         .                   // Guard against us getting leaked (leak amplification)
         .                   unsafe {
         .                       self.set_len(0);
         .                   }
         .           
     9,112 ( 0.00%)          DrainFilter { vec: self, idx: 0, del: 0, old_len, pred: filter, panic_flag: false }
         .               }
         .           }
         .           
         .           /// Extend implementation that copies elements out of references before pushing them onto the Vec.
         .           ///
         .           /// This implementation is specialized for slice iterators, where it uses [`copy_from_slice`] to
         .           /// append the entire slice at once.
         .           ///
-- line 2768 ----------------------------------------
-- line 2796 ----------------------------------------
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T: Eq, A: Allocator> Eq for Vec<T, A> {}
         .           
         .           /// Implements ordering of vectors, [lexicographically](core::cmp::Ord#lexicographical-comparison).
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T: Ord, A: Allocator> Ord for Vec<T, A> {
         .               #[inline]
    17,264 ( 0.00%)      fn cmp(&self, other: &Self) -> Ordering {
    34,528 ( 0.00%)          Ord::cmp(&**self, &**other)
     8,632 ( 0.00%)      }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           unsafe impl<#[may_dangle] T, A: Allocator> Drop for Vec<T, A> {
 2,140,569 ( 0.04%)      fn drop(&mut self) {
         .                   unsafe {
         .                       // use drop for [T]
         .                       // use a raw slice to refer to the elements of the vector as weakest necessary type;
         .                       // could avoid questions of validity in certain cases
 1,169,532 ( 0.02%)              ptr::drop_in_place(ptr::slice_from_raw_parts_mut(self.as_mut_ptr(), self.len))
         .                   }
         .                   // RawVec handles deallocation
 2,443,792 ( 0.05%)      }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           #[rustc_const_unstable(feature = "const_default_impls", issue = "87864")]
         .           impl<T> const Default for Vec<T> {
         .               /// Creates an empty `Vec<T>`.
         .               fn default() -> Vec<T> {
         .                   Vec::new()
-- line 2827 ----------------------------------------
-- line 2976 ----------------------------------------
         .               /// newly-allocated buffer with exactly the right capacity.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// assert_eq!(Box::from(vec![1, 2, 3]), vec![1, 2, 3].into_boxed_slice());
         .               /// ```
         .               fn from(v: Vec<T, A>) -> Self {
         4 ( 0.00%)          v.into_boxed_slice()
         .               }
         .           }
         .           
         .           #[cfg(not(no_global_oom_handling))]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl From<&str> for Vec<u8> {
         .               /// Allocate a `Vec<u8>` and fill it with a UTF-8 string.
         .               ///
-- line 2992 ----------------------------------------

 7,533,083 ( 0.16%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/region_constraints/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 23 ----------------------------------------
        .           use std::collections::BTreeMap;
        .           use std::ops::Range;
        .           use std::{cmp, fmt, mem};
        .           
        .           mod leak_check;
        .           
        .           pub use rustc_middle::infer::MemberConstraint;
        .           
  271,293 ( 0.01%)  #[derive(Default)]
        .           pub struct RegionConstraintStorage<'tcx> {
        .               /// For each `RegionVid`, the corresponding `RegionVariableOrigin`.
        .               var_infos: IndexVec<RegionVid, RegionVariableInfo>,
        .           
        .               data: RegionConstraintData<'tcx>,
        .           
        .               /// For a given pair of regions (R1, R2), maps to a region R3 that
        .               /// is designated as their LUB (edges R1 <= R3 and R2 <= R3
-- line 39 ----------------------------------------
-- line 64 ----------------------------------------
        .               storage: &'a mut RegionConstraintStorage<'tcx>,
        .               undo_log: &'a mut InferCtxtUndoLogs<'tcx>,
        .           }
        .           
        .           impl<'tcx> std::ops::Deref for RegionConstraintCollector<'_, 'tcx> {
        .               type Target = RegionConstraintStorage<'tcx>;
        .               #[inline]
        .               fn deref(&self) -> &RegionConstraintStorage<'tcx> {
    8,305 ( 0.00%)          self.storage
        .               }
        .           }
        .           
        .           impl<'tcx> std::ops::DerefMut for RegionConstraintCollector<'_, 'tcx> {
        .               #[inline]
        .               fn deref_mut(&mut self) -> &mut RegionConstraintStorage<'tcx> {
   72,689 ( 0.00%)          self.storage
        .               }
        .           }
        .           
        .           pub type VarInfos = IndexVec<RegionVid, RegionVariableInfo>;
        .           
        .           /// The full set of region constraints gathered up by the collector.
        .           /// Describes constraints between the region variables and other
        .           /// regions, as well as other conditions that must be verified, or
        .           /// assumptions that can be made.
  147,336 ( 0.00%)  #[derive(Debug, Default, Clone)]
        .           pub struct RegionConstraintData<'tcx> {
        .               /// Constraints of the form `A <= B`, where either `A` or `B` can
        .               /// be a region variable (or neither, as it happens).
        .               pub constraints: BTreeMap<Constraint<'tcx>, SubregionOrigin<'tcx>>,
        .           
        .               /// Constraints of the form `R0 member of [R1, ..., Rn]`, meaning that
        .               /// `R0` must be equal to one of the regions `R1..Rn`. These occur
        .               /// with `impl Trait` quite frequently.
-- line 97 ----------------------------------------
-- line 122 ----------------------------------------
        .               /// This hashmap is used to avoid that naive scenario. Basically
        .               /// we record the fact that `'a <= 'b` is implied by the fn
        .               /// signature, and then ignore the constraint when solving
        .               /// equations. This is a bit of a hack but seems to work.
        .               pub givens: FxHashSet<(Region<'tcx>, ty::RegionVid)>,
        .           }
        .           
        .           /// Represents a constraint that influences the inference process.
3,822,574 ( 0.08%)  #[derive(Clone, Copy, PartialEq, Eq, Debug, PartialOrd, Ord)]
        .           pub enum Constraint<'tcx> {
        .               /// A region variable is a subregion of another.
  929,946 ( 0.02%)      VarSubVar(RegionVid, RegionVid),
        .           
        .               /// A concrete region is a subregion of region variable.
  134,045 ( 0.00%)      RegSubVar(Region<'tcx>, RegionVid),
        .           
        .               /// A region variable is a subregion of a concrete region. This does not
        .               /// directly affect inference, but instead is checked after
        .               /// inference is complete.
   46,224 ( 0.00%)      VarSubReg(RegionVid, Region<'tcx>),
        .           
        .               /// A constraint where neither side is a variable. This does not
        .               /// directly affect inference, but instead is checked after
        .               /// inference is complete.
   14,405 ( 0.00%)      RegSubReg(Region<'tcx>, Region<'tcx>),
        .           }
        .           
        .           impl Constraint<'_> {
        .               pub fn involves_placeholders(&self) -> bool {
    3,052 ( 0.00%)          match self {
        .                       Constraint::VarSubVar(_, _) => false,
        .                       Constraint::VarSubReg(_, r) | Constraint::RegSubVar(r, _) => r.is_placeholder(),
        .                       Constraint::RegSubReg(r, s) => r.is_placeholder() || s.is_placeholder(),
        .                   }
        .               }
        .           }
        .           
        .           #[derive(Debug, Clone)]
-- line 159 ----------------------------------------
-- line 304 ----------------------------------------
        .               pub universe: ty::UniverseIndex,
        .           }
        .           
        .           pub struct RegionSnapshot {
        .               any_unifications: bool,
        .           }
        .           
        .           impl<'tcx> RegionConstraintStorage<'tcx> {
   49,326 ( 0.00%)      pub fn new() -> Self {
        .                   Self::default()
   49,326 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub(crate) fn with_log<'a>(
        .                   &'a mut self,
        .                   undo_log: &'a mut InferCtxtUndoLogs<'tcx>,
        .               ) -> RegionConstraintCollector<'a, 'tcx> {
        .                   RegionConstraintCollector { storage: self, undo_log }
        .               }
        .           
        .               fn rollback_undo_entry(&mut self, undo_entry: UndoLog<'tcx>) {
  149,260 ( 0.00%)          match undo_entry {
        .                       AddVar(vid) => {
        .                           self.var_infos.pop().unwrap();
   47,456 ( 0.00%)                  assert_eq!(self.var_infos.len(), vid.index() as usize);
        .                       }
   17,988 ( 0.00%)              AddConstraint(ref constraint) => {
   71,952 ( 0.00%)                  self.data.constraints.remove(constraint);
        .                       }
        .                       AddVerify(index) => {
        .                           self.data.verifys.pop();
        .                           assert_eq!(self.data.verifys.len(), index);
        .                       }
        .                       AddGiven(sub, sup) => {
        .                           self.data.givens.remove(&(sub, sup));
        .                       }
-- line 339 ----------------------------------------
-- line 348 ----------------------------------------
        .           }
        .           
        .           impl<'tcx> RegionConstraintCollector<'_, 'tcx> {
        .               pub fn num_region_vars(&self) -> usize {
        .                   self.var_infos.len()
        .               }
        .           
        .               pub fn region_constraint_data(&self) -> &RegionConstraintData<'tcx> {
    3,634 ( 0.00%)          &self.data
    3,634 ( 0.00%)      }
        .           
        .               /// Once all the constraints have been gathered, extract out the final data.
        .               ///
        .               /// Not legal during a snapshot.
        .               pub fn into_infos_and_data(self) -> (VarInfos, RegionConstraintData<'tcx>) {
   12,171 ( 0.00%)          assert!(!UndoLogs::<super::UndoLog<'_>>::in_snapshot(&self.undo_log));
        .                   (mem::take(&mut self.storage.var_infos), mem::take(&mut self.storage.data))
        .               }
        .           
        .               /// Takes (and clears) the current set of constraints. Note that
        .               /// the set of variables remains intact, but all relationships
        .               /// between them are reset. This is used during NLL checking to
        .               /// grab the set of constraints that arose from a particular
        .               /// operation.
-- line 371 ----------------------------------------
-- line 418 ----------------------------------------
        .           
        .               pub fn start_snapshot(&mut self) -> RegionSnapshot {
        .                   debug!("RegionConstraintCollector: start_snapshot");
        .                   RegionSnapshot { any_unifications: self.any_unifications }
        .               }
        .           
        .               pub fn rollback_to(&mut self, snapshot: RegionSnapshot) {
        .                   debug!("RegionConstraintCollector: rollback_to({:?})", snapshot);
   49,045 ( 0.00%)          self.any_unifications = snapshot.any_unifications;
        .               }
        .           
  436,134 ( 0.01%)      pub fn new_region_var(
        .                   &mut self,
        .                   universe: ty::UniverseIndex,
        .                   origin: RegionVariableOrigin,
        .               ) -> RegionVid {
   72,689 ( 0.00%)          let vid = self.var_infos.push(RegionVariableInfo { origin, universe });
        .           
  218,067 ( 0.00%)          let u_vid = self.unification_table().new_key(UnifiedRegion(None));
   72,689 ( 0.00%)          assert_eq!(vid, u_vid.vid);
        .                   self.undo_log.push(AddVar(vid));
        .                   debug!("created new region variable {:?} in {:?} with origin {:?}", vid, universe, origin);
        .                   vid
  581,512 ( 0.01%)      }
        .           
        .               /// Returns the universe for the given variable.
        .               pub fn var_universe(&self, vid: RegionVid) -> ty::UniverseIndex {
   41,089 ( 0.00%)          self.var_infos[vid].universe
        .               }
        .           
        .               /// Returns the origin for the given variable.
        .               pub fn var_origin(&self, vid: RegionVid) -> RegionVariableOrigin {
        .                   self.var_infos[vid].origin
        .               }
        .           
        .               fn add_constraint(&mut self, constraint: Constraint<'tcx>, origin: SubregionOrigin<'tcx>) {
        .                   // cannot add constraints once regions are resolved
        .                   debug!("RegionConstraintCollector: add_constraint({:?})", constraint);
        .           
        .                   // never overwrite an existing (constraint, origin) - only insert one if it isn't
        .                   // present in the map yet. This prevents origins from outside the snapshot being
        .                   // replaced with "less informative" origins e.g., during calls to `can_eq`
        .                   let undo_log = &mut self.undo_log;
  475,122 ( 0.01%)          self.storage.data.constraints.entry(constraint).or_insert_with(|| {
  268,302 ( 0.01%)              undo_log.push(AddConstraint(constraint));
  178,868 ( 0.00%)              origin
        .                   });
        .               }
        .           
        .               fn add_verify(&mut self, verify: Verify<'tcx>) {
        .                   // cannot add verifys once regions are resolved
        .                   debug!("RegionConstraintCollector: add_verify({:?})", verify);
        .           
        .                   // skip no-op cases known to be satisfied
      868 ( 0.00%)          if let VerifyBound::AllBounds(ref bs) = verify.bound {
        .                       if bs.is_empty() {
        .                           return;
        .                       }
        .                   }
        .           
      434 ( 0.00%)          let index = self.data.verifys.len();
    6,510 ( 0.00%)          self.data.verifys.push(verify);
      434 ( 0.00%)          self.undo_log.push(AddVerify(index));
        .               }
        .           
        .               pub fn add_given(&mut self, sub: Region<'tcx>, sup: ty::RegionVid) {
        .                   // cannot add givens once regions are resolved
        .                   if self.data.givens.insert((sub, sup)) {
        .                       debug!("add_given({:?} <= {:?})", sub, sup);
        .           
        .                       self.undo_log.push(AddGiven(sub, sup));
        .                   }
        .               }
        .           
  205,380 ( 0.00%)      pub fn make_eqregion(
        .                   &mut self,
        .                   origin: SubregionOrigin<'tcx>,
        .                   sub: Region<'tcx>,
        .                   sup: Region<'tcx>,
        .               ) {
  102,690 ( 0.00%)          if sub != sup {
        .                       // Eventually, it would be nice to add direct support for
        .                       // equating regions.
   93,416 ( 0.00%)              self.make_subregion(origin.clone(), sub, sup);
  105,093 ( 0.00%)              self.make_subregion(origin, sup, sub);
        .           
   58,641 ( 0.00%)              match (sub, sup) {
   28,806 ( 0.00%)                  (&ty::ReVar(sub), &ty::ReVar(sup)) => {
        .                               debug!("make_eqregion: unifying {:?} with {:?}", sub, sup);
   48,010 ( 0.00%)                      self.unification_table().union(sub, sup);
        .                               self.any_unifications = true;
        .                           }
        .                           (&ty::ReVar(vid), value) | (value, &ty::ReVar(vid)) => {
        .                               debug!("make_eqregion: unifying {:?} with {:?}", vid, value);
    7,276 ( 0.00%)                      self.unification_table().union_value(vid, UnifiedRegion(Some(value)));
        .                               self.any_unifications = true;
        .                           }
        .                           (_, _) => {}
        .                       }
        .                   }
   81,739 ( 0.00%)      }
        .           
        .               pub fn member_constraint(
        .                   &mut self,
        .                   opaque_type_def_id: DefId,
        .                   definition_span: Span,
        .                   hidden_ty: Ty<'tcx>,
        .                   member_region: ty::Region<'tcx>,
        .                   choice_regions: &Lrc<Vec<ty::Region<'tcx>>>,
-- line 526 ----------------------------------------
-- line 535 ----------------------------------------
        .                       opaque_type_def_id,
        .                       definition_span,
        .                       hidden_ty,
        .                       member_region,
        .                       choice_regions: choice_regions.clone(),
        .                   });
        .               }
        .           
  653,920 ( 0.01%)      #[instrument(skip(self, origin), level = "debug")]
        .               pub fn make_subregion(
        .                   &mut self,
        .                   origin: SubregionOrigin<'tcx>,
        .                   sub: Region<'tcx>,
        .                   sup: Region<'tcx>,
        .               ) {
        .                   // cannot add constraints once regions are resolved
        .                   debug!("origin = {:#?}", origin);
        .           
  475,128 ( 0.01%)          match (sub, sup) {
        .                       (&ReLateBound(..), _) | (_, &ReLateBound(..)) => {
        .                           span_bug!(origin.span(), "cannot relate bound region: {:?} <= {:?}", sub, sup);
        .                       }
        .                       (_, &ReStatic) => {
        .                           // all regions are subregions of static, so we can ignore this
        .                       }
   34,606 ( 0.00%)              (&ReVar(sub_id), &ReVar(sup_id)) => {
  242,242 ( 0.01%)                  self.add_constraint(Constraint::VarSubVar(sub_id, sup_id), origin);
        .                       }
        .                       (_, &ReVar(sup_id)) => {
   29,540 ( 0.00%)                  self.add_constraint(Constraint::RegSubVar(sub, sup_id), origin);
        .                       }
    4,604 ( 0.00%)              (&ReVar(sub_id), _) => {
   32,228 ( 0.00%)                  self.add_constraint(Constraint::VarSubReg(sub_id, sup), origin);
        .                       }
        .                       _ => {
   13,160 ( 0.00%)                  self.add_constraint(Constraint::RegSubReg(sub, sup), origin);
        .                       }
        .                   }
        .               }
        .           
    2,170 ( 0.00%)      pub fn verify_generic_bound(
        .                   &mut self,
        .                   origin: SubregionOrigin<'tcx>,
        .                   kind: GenericKind<'tcx>,
        .                   sub: Region<'tcx>,
        .                   bound: VerifyBound<'tcx>,
        .               ) {
    5,642 ( 0.00%)          self.add_verify(Verify { kind, origin, region: sub, bound });
    2,170 ( 0.00%)      }
        .           
        .               pub fn lub_regions(
        .                   &mut self,
        .                   tcx: TyCtxt<'tcx>,
        .                   origin: SubregionOrigin<'tcx>,
        .                   a: Region<'tcx>,
        .                   b: Region<'tcx>,
        .               ) -> Region<'tcx> {
-- line 591 ----------------------------------------
-- line 599 ----------------------------------------
        .                       _ if a == b => {
        .                           a // LUB(a,a) = a
        .                       }
        .           
        .                       _ => self.combine_vars(tcx, Lub, a, b, origin),
        .                   }
        .               }
        .           
      128 ( 0.00%)      pub fn glb_regions(
        .                   &mut self,
        .                   tcx: TyCtxt<'tcx>,
        .                   origin: SubregionOrigin<'tcx>,
        .                   a: Region<'tcx>,
        .                   b: Region<'tcx>,
        .               ) -> Region<'tcx> {
        .                   // cannot add constraints once regions are resolved
        .                   debug!("RegionConstraintCollector: glb_regions({:?}, {:?})", a, b);
       54 ( 0.00%)          match (a, b) {
        .                       (&ReStatic, r) | (r, &ReStatic) => {
        .                           r // static lives longer than everything else
        .                       }
        .           
       22 ( 0.00%)              _ if a == b => {
        .                           a // GLB(a,a) = a
        .                       }
        .           
      132 ( 0.00%)              _ => self.combine_vars(tcx, Glb, a, b, origin),
        .                   }
      128 ( 0.00%)      }
        .           
        .               /// Resolves the passed RegionVid to the root RegionVid in the unification table
        .               pub fn opportunistic_resolve_var(&mut self, rid: ty::RegionVid) -> ty::RegionVid {
   59,752 ( 0.00%)          self.unification_table().find(rid).vid
        .               }
        .           
        .               /// If the Region is a `ReVar`, then resolves it either to the root value in
        .               /// the unification table, if it exists, or to the root `ReVar` in the table.
        .               /// If the Region is not a `ReVar`, just returns the Region itself.
        .               pub fn opportunistic_resolve_region(
        .                   &mut self,
        .                   tcx: TyCtxt<'tcx>,
-- line 639 ----------------------------------------
-- line 647 ----------------------------------------
        .                               tcx.reuse_or_mk_region(region, ty::ReVar(root))
        .                           })
        .                       }
        .                       _ => region,
        .                   }
        .               }
        .           
        .               fn combine_map(&mut self, t: CombineMapType) -> &mut CombineMap<'tcx> {
       88 ( 0.00%)          match t {
        .                       Glb => &mut self.glbs,
        .                       Lub => &mut self.lubs,
        .                   }
        .               }
        .           
      132 ( 0.00%)      fn combine_vars(
        .                   &mut self,
        .                   tcx: TyCtxt<'tcx>,
        .                   t: CombineMapType,
        .                   a: Region<'tcx>,
        .                   b: Region<'tcx>,
        .                   origin: SubregionOrigin<'tcx>,
        .               ) -> Region<'tcx> {
        .                   let vars = TwoRegions { a, b };
        .                   if let Some(&c) = self.combine_map(t).get(&vars) {
        .                       return tcx.mk_region(ReVar(c));
        .                   }
        .                   let a_universe = self.universe(a);
        .                   let b_universe = self.universe(b);
        .                   let c_universe = cmp::max(a_universe, b_universe);
       55 ( 0.00%)          let c = self.new_region_var(c_universe, MiscVariable(origin.span()));
        .                   self.combine_map(t).insert(vars, c);
       11 ( 0.00%)          self.undo_log.push(AddCombination(t, vars));
       55 ( 0.00%)          let new_r = tcx.mk_region(ReVar(c));
       88 ( 0.00%)          for old_r in [a, b] {
       22 ( 0.00%)              match t {
      187 ( 0.00%)                  Glb => self.make_subregion(origin.clone(), new_r, old_r),
        .                           Lub => self.make_subregion(origin.clone(), old_r, new_r),
        .                       }
        .                   }
        .                   debug!("combine_vars() c={:?}", c);
        .                   new_r
       99 ( 0.00%)      }
        .           
        .               pub fn universe(&self, region: Region<'tcx>) -> ty::UniverseIndex {
   56,704 ( 0.00%)          match *region {
        .                       ty::ReStatic | ty::ReErased | ty::ReFree(..) | ty::ReEarlyBound(..) => {
        .                           ty::UniverseIndex::ROOT
        .                       }
        .                       ty::ReEmpty(ui) => ui,
        .                       ty::RePlaceholder(placeholder) => placeholder.universe,
    7,549 ( 0.00%)              ty::ReVar(vid) => self.var_universe(vid),
        .                       ty::ReLateBound(..) => bug!("universe(): encountered bound region {:?}", region),
        .                   }
        .               }
        .           
   18,875 ( 0.00%)      pub fn vars_since_snapshot(
        .                   &self,
        .                   value_count: usize,
        .               ) -> (Range<RegionVid>, Vec<RegionVariableOrigin>) {
        .                   let range = RegionVid::from(value_count)..RegionVid::from(self.unification_table.len());
   22,650 ( 0.00%)          (
        .                       range.clone(),
        .                       (range.start.index()..range.end.index())
        .                           .map(|index| self.var_infos[ty::RegionVid::from(index)].origin)
        .                           .collect(),
        .                   )
   22,650 ( 0.00%)      }
        .           
        .               /// See `InferCtxt::region_constraints_added_in_snapshot`.
   21,183 ( 0.00%)      pub fn region_constraints_added_in_snapshot(&self, mark: &Snapshot<'tcx>) -> Option<bool> {
    7,061 ( 0.00%)          self.undo_log
        .                       .region_constraints_in_snapshot(mark)
    3,567 ( 0.00%)              .map(|&elt| match elt {
    1,058 ( 0.00%)                  AddConstraint(constraint) => Some(constraint.involves_placeholders()),
        .                           _ => None,
        .                       })
        .                       .max()
        .                       .unwrap_or(None)
   28,244 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn unification_table(&mut self) -> super::UnificationTable<'_, 'tcx, RegionVidKey<'tcx>> {
  198,096 ( 0.00%)          ut::UnificationTable::with_log(&mut self.storage.unification_table, self.undo_log)
        .               }
        .           }
        .           
        .           impl fmt::Debug for RegionSnapshot {
        .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   write!(f, "RegionSnapshot")
        .               }
        .           }
-- line 737 ----------------------------------------
-- line 750 ----------------------------------------
        .                   match *self {
        .                       GenericKind::Param(ref p) => write!(f, "{}", p),
        .                       GenericKind::Projection(ref p) => write!(f, "{}", p),
        .                   }
        .               }
        .           }
        .           
        .           impl<'tcx> GenericKind<'tcx> {
      514 ( 0.00%)      pub fn to_ty(&self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
    6,498 ( 0.00%)          match *self {
      669 ( 0.00%)              GenericKind::Param(ref p) => p.to_ty(tcx),
       22 ( 0.00%)              GenericKind::Projection(ref p) => tcx.mk_projection(p.item_def_id, p.substs),
        .                   }
      514 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> VerifyBound<'tcx> {
      468 ( 0.00%)      pub fn must_hold(&self) -> bool {
      596 ( 0.00%)          match self {
        .                       VerifyBound::IfEq(..) => false,
        .                       VerifyBound::OutlivedBy(ty::ReStatic) => true,
        .                       VerifyBound::OutlivedBy(_) => false,
        .                       VerifyBound::IsEmpty => false,
      110 ( 0.00%)              VerifyBound::AnyBound(bs) => bs.iter().any(|b| b.must_hold()),
        .                       VerifyBound::AllBounds(bs) => bs.iter().all(|b| b.must_hold()),
        .                   }
      546 ( 0.00%)      }
        .           
      300 ( 0.00%)      pub fn cannot_hold(&self) -> bool {
      440 ( 0.00%)          match self {
        .                       VerifyBound::IfEq(_, b) => b.cannot_hold(),
        .                       VerifyBound::IsEmpty => false,
        .                       VerifyBound::OutlivedBy(_) => false,
       40 ( 0.00%)              VerifyBound::AnyBound(bs) => bs.iter().all(|b| b.cannot_hold()),
        .                       VerifyBound::AllBounds(bs) => bs.iter().any(|b| b.cannot_hold()),
        .                   }
      420 ( 0.00%)      }
        .           
      132 ( 0.00%)      pub fn or(self, vb: VerifyBound<'tcx>) -> VerifyBound<'tcx> {
      168 ( 0.00%)          if self.must_hold() || vb.cannot_hold() {
        8 ( 0.00%)              self
       80 ( 0.00%)          } else if self.cannot_hold() || vb.must_hold() {
       80 ( 0.00%)              vb
        .                   } else {
        .                       VerifyBound::AnyBound(vec![self, vb])
        .                   }
      174 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> RegionConstraintData<'tcx> {
        .               /// Returns `true` if this region constraint data contains no constraints, and `false`
        .               /// otherwise.
        .               pub fn is_empty(&self) -> bool {
        .                   let RegionConstraintData { constraints, member_constraints, verifys, givens } = self;
    4,089 ( 0.00%)          constraints.is_empty()
        .                       && member_constraints.is_empty()
        .                       && verifys.is_empty()
        .                       && givens.is_empty()
        .               }
        .           }
        .           
        .           impl<'tcx> Rollback<UndoLog<'tcx>> for RegionConstraintStorage<'tcx> {
  149,260 ( 0.00%)      fn reverse(&mut self, undo: UndoLog<'tcx>) {
  119,408 ( 0.00%)          self.rollback_undo_entry(undo)
  149,260 ( 0.00%)      }
        .           }

1,803,818 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/region_constraints/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 36 ----------------------------------------
        .           use rustc_session::parse::ParseSess;
        .           use rustc_span::source_map::{MultiSpan, Span, DUMMY_SP};
        .           use rustc_span::symbol::{kw, sym, Ident, Symbol};
        .           use tracing::debug;
        .           
        .           use std::ops::Range;
        .           use std::{cmp, mem, slice};
        .           
   33,454 ( 0.00%)  bitflags::bitflags! {
        .               struct Restrictions: u8 {
        .                   const STMT_EXPR         = 1 << 0;
        .                   const NO_STRUCT_LITERAL = 1 << 1;
        .                   const CONST_EXPR        = 1 << 2;
        .               }
        .           }
        .           
        .           #[derive(Clone, Copy, PartialEq, Debug)]
-- line 52 ----------------------------------------
-- line 104 ----------------------------------------
        .                               $self.bump();
        .                               return $self.maybe_recover_from_bad_qpath_stage_2($self.prev_token.span, ty);
        .                           }
        .                       }
        .                   }
        .               };
        .           }
        .           
  129,373 ( 0.00%)  #[derive(Clone)]
        .           pub struct Parser<'a> {
    3,571 ( 0.00%)      pub sess: &'a ParseSess,
        .               /// The current token.
    2,262 ( 0.00%)      pub token: Token,
        .               /// The spacing for the current token
    2,030 ( 0.00%)      pub token_spacing: Spacing,
        .               /// The previous token.
    3,393 ( 0.00%)      pub prev_token: Token,
    2,929 ( 0.00%)      pub capture_cfg: bool,
    6,757 ( 0.00%)      restrictions: Restrictions,
    4,060 ( 0.00%)      expected_tokens: Vec<TokenType>,
        .               // Important: This must only be advanced from `next_tok`
        .               // to ensure that `token_cursor.num_next_calls` is updated properly
        .               token_cursor: TokenCursor,
    4,060 ( 0.00%)      desugar_doc_comments: bool,
        .               /// This field is used to keep track of how many left angle brackets we have seen. This is
        .               /// required in order to detect extra leading left angle brackets (`<` characters) and error
        .               /// appropriately.
        .               ///
        .               /// See the comments in the `parse_path_segment` function for more details.
    4,060 ( 0.00%)      unmatched_angle_bracket_count: u32,
    6,090 ( 0.00%)      max_angle_bracket_count: u32,
        .               /// A list of all unclosed delimiters found by the lexer. If an entry is used for error recovery
        .               /// it gets removed from here. Every entry left at the end gets emitted as an independent
        .               /// error.
    2,030 ( 0.00%)      pub(super) unclosed_delims: Vec<UnmatchedBrace>,
        .               last_unexpected_token_span: Option<Span>,
        .               /// Span pointing at the `:` for the last type ascription the parser has seen, and whether it
        .               /// looked like it could have been a mistyped path or literal `Option:Some(42)`).
        .               pub last_type_ascription: Option<(Span, bool /* likely path typo */)>,
        .               /// If present, this `Parser` is not parsing Rust code but rather a macro call.
        .               subparser_name: Option<&'static str>,
        .               capture_state: CaptureState,
        .               /// This allows us to recover when the user forget to add braces around
-- line 146 ----------------------------------------
-- line 173 ----------------------------------------
        .           /// the first macro inner attribute to invoke a proc-macro).
        .           /// When create a `TokenStream`, the inner attributes get inserted
        .           /// into the proper place in the token stream.
        .           pub type ReplaceRange = (Range<u32>, Vec<(FlatToken, Spacing)>);
        .           
        .           /// Controls how we capture tokens. Capturing can be expensive,
        .           /// so we try to avoid performing capturing in cases where
        .           /// we will never need an `AttrAnnotatedTokenStream`
    2,030 ( 0.00%)  #[derive(Copy, Clone)]
        .           pub enum Capturing {
        .               /// We aren't performing any capturing - this is the default mode.
        .               No,
        .               /// We are capturing tokens
        .               Yes,
        .           }
        .           
    8,530 ( 0.00%)  #[derive(Clone)]
        .           struct CaptureState {
    8,120 ( 0.00%)      capturing: Capturing,
    2,030 ( 0.00%)      replace_ranges: Vec<ReplaceRange>,
        .               inner_attr_ranges: FxHashMap<AttrId, ReplaceRange>,
        .           }
        .           
        .           impl<'a> Drop for Parser<'a> {
        .               fn drop(&mut self) {
   13,853 ( 0.00%)          emit_unclosed_delims(&mut self.unclosed_delims, &self.sess);
        .               }
        .           }
        .           
  168,752 ( 0.00%)  #[derive(Clone)]
        .           struct TokenCursor {
        .               frame: TokenCursorFrame,
   38,367 ( 0.00%)      stack: Vec<TokenCursorFrame>,
        .               desugar_doc_comments: bool,
        .               // Counts the number of calls to `next` or `next_desugared`,
        .               // depending on whether `desugar_doc_comments` is set.
   12,396 ( 0.00%)      num_next_calls: usize,
        .               // During parsing, we may sometimes need to 'unglue' a
        .               // glued token into two component tokens
        .               // (e.g. '>>' into '>' and '>), so that the parser
        .               // can consume them one at a time. This process
        .               // bypasses the normal capturing mechanism
        .               // (e.g. `num_next_calls` will not be incremented),
        .               // since the 'unglued' tokens due not exist in
        .               // the original `TokenStream`.
-- line 217 ----------------------------------------
-- line 226 ----------------------------------------
        .               // in `Option<Vec<u8>>` requires us to unglue
        .               // the trailing `>>` token. The `break_last_token`
        .               // field is used to track this token - it gets
        .               // appended to the captured stream when
        .               // we evaluate a `LazyTokenStream`
        .               break_last_token: bool,
        .           }
        .           
   76,804 ( 0.00%)  #[derive(Clone)]
        .           struct TokenCursorFrame {
   27,568 ( 0.00%)      delim: token::DelimToken,
        .               span: DelimSpan,
        .               open_delim: bool,
   55,136 ( 0.00%)      tree_cursor: tokenstream::Cursor,
        .               close_delim: bool,
        .           }
        .           
        .           impl TokenCursorFrame {
        .               fn new(span: DelimSpan, delim: DelimToken, tts: TokenStream) -> Self {
    9,675 ( 0.00%)          TokenCursorFrame {
        .                       delim,
        .                       span,
        .                       open_delim: false,
   15,955 ( 0.00%)              tree_cursor: tts.into_trees(),
        .                       close_delim: false,
        .                   }
        .               }
        .           }
        .           
        .           impl TokenCursor {
1,275,012 ( 0.03%)      fn next(&mut self) -> (Token, Spacing) {
        .                   loop {
  614,088 ( 0.01%)              let (tree, spacing) = if !self.frame.open_delim {
   11,991 ( 0.00%)                  self.frame.open_delim = true;
   59,955 ( 0.00%)                  TokenTree::open_tt(self.frame.span, self.frame.delim).into()
1,234,226 ( 0.03%)              } else if let Some(tree) = self.frame.tree_cursor.next_with_spacing() {
        .                           tree
   51,356 ( 0.00%)              } else if !self.frame.close_delim {
   11,677 ( 0.00%)                  self.frame.close_delim = true;
   58,385 ( 0.00%)                  TokenTree::close_tt(self.frame.span, self.frame.delim).into()
   23,348 ( 0.00%)              } else if let Some(frame) = self.stack.pop() {
  151,762 ( 0.00%)                  self.frame = frame;
        .                           continue;
        .                       } else {
   41,886 ( 0.00%)                  (TokenTree::Token(Token::new(token::Eof, DUMMY_SP)), Spacing::Alone)
        .                       };
        .           
  236,296 ( 0.00%)              match tree {
        .                           TokenTree::Token(token) => {
  850,008 ( 0.02%)                      return (token, spacing);
        .                           }
        .                           TokenTree::Delimited(sp, delim, tts) => {
        .                               let frame = TokenCursorFrame::new(sp, delim, tts);
        .                               self.stack.push(mem::replace(&mut self.frame, frame));
        .                           }
        .                       }
        .                   }
  850,008 ( 0.02%)      }
        .           
  153,750 ( 0.00%)      fn next_desugared(&mut self) -> (Token, Spacing) {
   46,313 ( 0.00%)          let (data, attr_style, sp) = match self.next() {
      282 ( 0.00%)              (Token { kind: token::DocComment(_, attr_style, data), span }, _) => {
        .                           (data, attr_style, span)
        .                       }
   76,405 ( 0.00%)              tok => return tok,
        .                   };
        .           
        .                   // Searches for the occurrences of `"#*` and returns the minimum number of `#`s
        .                   // required to wrap the text.
        .                   let mut num_of_hashes = 0;
        .                   let mut count = 0;
   22,364 ( 0.00%)          for ch in data.as_str().chars() {
        .                       count = match ch {
        .                           '"' => 1,
        2 ( 0.00%)                  '#' if count > 0 => count + 1,
        .                           _ => 0,
        .                       };
        .                       num_of_hashes = cmp::max(num_of_hashes, count);
        .                   }
        .           
      376 ( 0.00%)          let delim_span = DelimSpan::from_single(sp);
      470 ( 0.00%)          let body = TokenTree::Delimited(
        .                       delim_span,
        .                       token::Bracket,
    1,128 ( 0.00%)              [
      658 ( 0.00%)                  TokenTree::token(token::Ident(sym::doc, false), sp),
      376 ( 0.00%)                  TokenTree::token(token::Eq, sp),
      752 ( 0.00%)                  TokenTree::token(TokenKind::lit(token::StrRaw(num_of_hashes), data, None), sp),
        .                       ]
        .                       .iter()
        .                       .cloned()
        .                       .collect::<TokenStream>(),
       94 ( 0.00%)          );
        .           
        .                   self.stack.push(mem::replace(
        .                       &mut self.frame,
        .                       TokenCursorFrame::new(
        .                           delim_span,
        .                           token::NoDelim,
       94 ( 0.00%)                  if attr_style == AttrStyle::Inner {
        .                               [TokenTree::token(token::Pound, sp), TokenTree::token(token::Not, sp), body]
        .                                   .iter()
        .                                   .cloned()
        .                                   .collect::<TokenStream>()
        .                           } else {
    1,128 ( 0.00%)                      [TokenTree::token(token::Pound, sp), body]
        .                                   .iter()
        .                                   .cloned()
        .                                   .collect::<TokenStream>()
        .                           },
        .                       ),
        .                   ));
        .           
      282 ( 0.00%)          self.next()
  138,375 ( 0.00%)      }
        .           }
        .           
   61,995 ( 0.00%)  #[derive(Debug, Clone, PartialEq)]
        .           enum TokenType {
   49,607 ( 0.00%)      Token(TokenKind),
        .               Keyword(Symbol),
        .               Operator,
        .               Lifetime,
        .               Ident,
        .               Path,
        .               Type,
        .               Const,
        .           }
-- line 353 ----------------------------------------
-- line 378 ----------------------------------------
        .               /// The separator token.
        .               sep: Option<TokenKind>,
        .               /// `true` if a trailing separator is allowed.
        .               trailing_sep_allowed: bool,
        .           }
        .           
        .           impl SeqSep {
        .               fn trailing_allowed(t: TokenKind) -> SeqSep {
      231 ( 0.00%)          SeqSep { sep: Some(t), trailing_sep_allowed: true }
        .               }
        .           
        .               fn none() -> SeqSep {
        .                   SeqSep { sep: None, trailing_sep_allowed: false }
        .               }
        .           }
        .           
        .           pub enum FollowedByType {
        .               Yes,
        .               No,
        .           }
        .           
        .           fn token_descr_opt(token: &Token) -> Option<&'static str> {
    1,304 ( 0.00%)      Some(match token.kind {
    2,608 ( 0.00%)          _ if token.is_special_ident() => "reserved identifier",
    2,608 ( 0.00%)          _ if token.is_used_keyword() => "keyword",
    2,608 ( 0.00%)          _ if token.is_unused_keyword() => "reserved keyword",
        .                   token::DocComment(..) => "doc comment",
        .                   _ => return None,
        .               })
        .           }
        .           
    4,564 ( 0.00%)  pub(super) fn token_descr(token: &Token) -> String {
    1,304 ( 0.00%)      let token_str = pprust::token_to_string(token);
        .               match token_descr_opt(token) {
        .                   Some(prefix) => format!("{} `{}`", prefix, token_str),
    4,564 ( 0.00%)          _ => format!("`{}`", token_str),
        .               }
    3,260 ( 0.00%)  }
        .           
        .           impl<'a> Parser<'a> {
   27,090 ( 0.00%)      pub fn new(
        .                   sess: &'a ParseSess,
        .                   tokens: TokenStream,
        .                   desugar_doc_comments: bool,
        .                   subparser_name: Option<&'static str>,
        .               ) -> Self {
    1,935 ( 0.00%)          let mut start_frame = TokenCursorFrame::new(DelimSpan::dummy(), token::NoDelim, tokens);
    3,870 ( 0.00%)          start_frame.open_delim = true;
        .                   start_frame.close_delim = true;
        .           
   59,985 ( 0.00%)          let mut parser = Parser {
        .                       sess,
    1,935 ( 0.00%)              token: Token::dummy(),
        .                       token_spacing: Spacing::Alone,
    1,935 ( 0.00%)              prev_token: Token::dummy(),
        .                       capture_cfg: false,
        .                       restrictions: Restrictions::empty(),
        .                       expected_tokens: Vec::new(),
        .                       token_cursor: TokenCursor {
   11,610 ( 0.00%)                  frame: start_frame,
        .                           stack: Vec::new(),
        .                           num_next_calls: 0,
        .                           desugar_doc_comments,
        .                           break_last_token: false,
        .                       },
        .                       desugar_doc_comments,
        .                       unmatched_angle_bracket_count: 0,
        .                       max_angle_bracket_count: 0,
-- line 445 ----------------------------------------
-- line 451 ----------------------------------------
        .                           capturing: Capturing::No,
        .                           replace_ranges: Vec::new(),
        .                           inner_attr_ranges: Default::default(),
        .                       },
        .                       current_closure: None,
        .                   };
        .           
        .                   // Make parser point to the first token.
    3,870 ( 0.00%)          parser.bump();
        .           
        .                   parser
   17,415 ( 0.00%)      }
        .           
        .               fn next_tok(&mut self, fallback_span: Span) -> (Token, Spacing) {
        .                   loop {
  615,720 ( 0.01%)              let (mut next, spacing) = if self.desugar_doc_comments {
   61,500 ( 0.00%)                  self.token_cursor.next_desugared()
        .                       } else {
  261,735 ( 0.01%)                  self.token_cursor.next()
        .                       };
  410,480 ( 0.01%)              self.token_cursor.num_next_calls += 1;
        .                       // We've retrieved an token from the underlying
        .                       // cursor, so we no longer need to worry about
        .                       // an unglued token. See `break_and_eat` for more details
  102,620 ( 0.00%)              self.token_cursor.break_last_token = false;
  410,480 ( 0.01%)              if next.span.is_dummy() {
        .                           // Tweak the location for better diagnostics, but keep syntactic context intact.
    7,844 ( 0.00%)                  next.span = fallback_span.with_ctxt(next.span.ctxt());
        .                       }
  342,868 ( 0.01%)              if matches!(
  205,240 ( 0.00%)                  next.kind,
        .                           token::OpenDelim(token::NoDelim) | token::CloseDelim(token::NoDelim)
        .                       ) {
        .                           continue;
        .                       }
  409,728 ( 0.01%)              return (next, spacing);
        .                   }
        .               }
        .           
        .               pub fn unexpected<T>(&mut self) -> PResult<'a, T> {
        .                   match self.expect_one_of(&[], &[]) {
        .                       Err(e) => Err(e),
        .                       // We can get `Ok(true)` from `recover_closing_delimiter`
        .                       // which is called in `expected_one_of_not_found`.
        .                       Ok(_) => FatalError.raise(),
        .                   }
        .               }
        .           
        .               /// Expects and consumes the token `t`. Signals an error if the next token is not `t`.
  103,671 ( 0.00%)      pub fn expect(&mut self, t: &TokenKind) -> PResult<'a, bool /* recovered */> {
   11,519 ( 0.00%)          if self.expected_tokens.is_empty() {
    8,088 ( 0.00%)              if self.token == *t {
    6,740 ( 0.00%)                  self.bump();
        .                           Ok(false)
        .                       } else {
        .                           self.unexpected_try_recover(t)
        .                       }
        .                   } else {
  122,052 ( 0.00%)              self.expect_one_of(slice::from_ref(t), &[])
        .                   }
  172,785 ( 0.00%)      }
        .           
        .               /// Expect next token to be edible or inedible token.  If edible,
        .               /// then consume it; if inedible, then return without consuming
        .               /// anything.  Signal a fatal error if next token is unexpected.
  165,096 ( 0.00%)      pub fn expect_one_of(
        .                   &mut self,
        .                   edible: &[TokenKind],
        .                   inedible: &[TokenKind],
        .               ) -> PResult<'a, bool /* recovered */> {
   27,516 ( 0.00%)          if edible.contains(&self.token.kind) {
   36,486 ( 0.00%)              self.bump();
        .                       Ok(false)
        .                   } else if inedible.contains(&self.token.kind) {
        .                       // leave it in the input
        .                       Ok(false)
        .                   } else if self.last_unexpected_token_span == Some(self.token.span) {
        .                       FatalError.raise();
        .                   } else {
        .                       self.expected_one_of_not_found(edible, inedible)
        .                   }
  206,370 ( 0.00%)      }
        .           
        .               // Public for rustfmt usage.
        .               pub fn parse_ident(&mut self) -> PResult<'a, Ident> {
   84,115 ( 0.00%)          self.parse_ident_common(true)
        .               }
        .           
        .               fn ident_or_err(&mut self) -> PResult<'a, (Ident, /* is_raw */ bool)> {
   70,836 ( 0.00%)          self.token.ident().ok_or_else(|| match self.prev_token.kind {
        .                       TokenKind::DocComment(..) => {
        .                           self.span_err(self.prev_token.span, Error::UselessDocComment)
        .                       }
        .                       _ => self.expected_ident_found(),
        .                   })
        .               }
        .           
  161,252 ( 0.00%)      fn parse_ident_common(&mut self, recover: bool) -> PResult<'a, Ident> {
   23,036 ( 0.00%)          let (ident, is_raw) = self.ident_or_err()?;
  138,216 ( 0.00%)          if !is_raw && ident.is_reserved() {
        .                       let mut err = self.expected_ident_found();
        .                       if recover {
        .                           err.emit();
        .                       } else {
        .                           return Err(err);
        .                       }
        .                   }
   92,144 ( 0.00%)          self.bump();
        .                   Ok(ident)
  230,360 ( 0.00%)      }
        .           
        .               /// Checks if the next token is `tok`, and returns `true` if so.
        .               ///
        .               /// This method will automatically add `tok` to `expected_tokens` if `tok` is not
        .               /// encountered.
1,812,160 ( 0.04%)      fn check(&mut self, tok: &TokenKind) -> bool {
  789,034 ( 0.02%)          let is_present = self.token == *tok;
  532,416 ( 0.01%)          if !is_present {
1,097,707 ( 0.02%)              self.expected_tokens.push(TokenType::Token(tok.clone()));
        .                   }
        .                   is_present
1,812,160 ( 0.04%)      }
        .           
        .               /// Consumes a token 'tok' if it exists. Returns whether the given token was present.
       60 ( 0.00%)      pub fn eat(&mut self, tok: &TokenKind) -> bool {
  369,437 ( 0.01%)          let is_present = self.check(tok);
  243,400 ( 0.01%)          if is_present {
   50,456 ( 0.00%)              self.bump()
        .                   }
        .                   is_present
       75 ( 0.00%)      }
        .           
        .               /// If the next token is the given keyword, returns `true` without eating it.
        .               /// An expectation is also added for diagnostics purposes.
   61,345 ( 0.00%)      fn check_keyword(&mut self, kw: Symbol) -> bool {
   14,292 ( 0.00%)          self.expected_tokens.push(TokenType::Keyword(kw));
  419,872 ( 0.01%)          self.token.is_keyword(kw)
        .               }
        .           
        .               /// If the next token is the given keyword, eats it and returns `true`.
        .               /// Otherwise, returns `false`. An expectation is also added for diagnostics purposes.
        .               // Public for rustfmt usage.
  117,245 ( 0.00%)      pub fn eat_keyword(&mut self, kw: Symbol) -> bool {
   89,458 ( 0.00%)          if self.check_keyword(kw) {
    9,140 ( 0.00%)              self.bump();
        .                       true
        .                   } else {
        .                       false
        .                   }
  117,245 ( 0.00%)      }
        .           
        .               fn eat_keyword_noexpect(&mut self, kw: Symbol) -> bool {
   16,092 ( 0.00%)          if self.token.is_keyword(kw) {
    3,894 ( 0.00%)              self.bump();
        .                       true
        .                   } else {
        .                       false
        .                   }
        .               }
        .           
        .               /// If the given word is not a keyword, signals an error.
        .               /// If the next token is not the given word, signals an error.
        .               /// Otherwise, eats it.
    1,525 ( 0.00%)      fn expect_keyword(&mut self, kw: Symbol) -> PResult<'a, ()> {
        .                   if !self.eat_keyword(kw) { self.unexpected() } else { Ok(()) }
    1,220 ( 0.00%)      }
        .           
        .               /// Is the given keyword `kw` followed by a non-reserved identifier?
   52,328 ( 0.00%)      fn is_kw_followed_by_ident(&self, kw: Symbol) -> bool {
   26,164 ( 0.00%)          self.token.is_keyword(kw) && self.look_ahead(1, |t| t.is_ident() && !t.is_reserved_ident())
   58,869 ( 0.00%)      }
        .           
   95,886 ( 0.00%)      fn check_or_expected(&mut self, ok: bool, typ: TokenType) -> bool {
   35,134 ( 0.00%)          if ok {
        .                       true
        .                   } else {
   19,308 ( 0.00%)              self.expected_tokens.push(typ);
        .                       false
        .                   }
   95,886 ( 0.00%)      }
        .           
        .               fn check_ident(&mut self) -> bool {
   14,965 ( 0.00%)          self.check_or_expected(self.token.is_ident(), TokenType::Ident)
        .               }
        .           
   38,220 ( 0.00%)      fn check_path(&mut self) -> bool {
   84,352 ( 0.00%)          self.check_or_expected(self.token.is_path_start(), TokenType::Path)
   47,775 ( 0.00%)      }
        .           
        .               fn check_type(&mut self) -> bool {
    6,084 ( 0.00%)          self.check_or_expected(self.token.can_begin_type(), TokenType::Type)
        .               }
        .           
        .               fn check_const_arg(&mut self) -> bool {
    6,048 ( 0.00%)          self.check_or_expected(self.token.can_begin_const_arg(), TokenType::Const)
        .               }
        .           
   17,127 ( 0.00%)      fn check_inline_const(&self, dist: usize) -> bool {
    9,515 ( 0.00%)          self.is_keyword_ahead(dist, &[kw::Const])
        .                       && self.look_ahead(dist + 1, |t| match t.kind {
        .                           token::Interpolated(ref nt) => matches!(**nt, token::NtBlock(..)),
        .                           token::OpenDelim(DelimToken::Brace) => true,
        .                           _ => false,
        .                       })
   17,127 ( 0.00%)      }
        .           
        .               /// Checks to see if the next token is either `+` or `+=`.
        .               /// Otherwise returns `false`.
        .               fn check_plus(&mut self) -> bool {
   10,300 ( 0.00%)          self.check_or_expected(
    5,150 ( 0.00%)              self.token.is_like_plus(),
    5,150 ( 0.00%)              TokenType::Token(token::BinOp(token::Plus)),
        .                   )
        .               }
        .           
        .               /// Eats the expected token if it's present possibly breaking
        .               /// compound tokens like multi-character operators in process.
        .               /// Returns `true` if the token was eaten.
  145,848 ( 0.00%)      fn break_and_eat(&mut self, expected: TokenKind) -> bool {
   85,078 ( 0.00%)          if self.token.kind == expected {
    5,248 ( 0.00%)              self.bump();
        .                       return true;
        .                   }
   47,650 ( 0.00%)          match self.token.kind.break_two_token_op() {
      732 ( 0.00%)              Some((first, second)) if first == expected => {
      360 ( 0.00%)                  let first_span = self.sess.source_map().start_point(self.token.span);
      450 ( 0.00%)                  let second_span = self.token.span.with_lo(first_span.hi());
      810 ( 0.00%)                  self.token = Token::new(first, first_span);
        .                           // Keep track of this token - if we end token capturing now,
        .                           // we'll want to append this token to the captured stream.
        .                           //
        .                           // If we consume any additional tokens, then this token
        .                           // is not needed (we'll capture the entire 'glued' token),
        .                           // and `next_tok` will set this field to `None`
       90 ( 0.00%)                  self.token_cursor.break_last_token = true;
        .                           // Use the spacing of the glued token as the spacing
        .                           // of the unglued second token.
    1,260 ( 0.00%)                  self.bump_with((Token::new(second, second_span), self.token_spacing));
        .                           true
        .                       }
        .                       _ => {
   28,320 ( 0.00%)                  self.expected_tokens.push(TokenType::Token(expected));
        .                           false
        .                       }
        .                   }
  147,180 ( 0.00%)      }
        .           
        .               /// Eats `+` possibly breaking tokens like `+=` in process.
        .               fn eat_plus(&mut self) -> bool {
      776 ( 0.00%)          self.break_and_eat(token::BinOp(token::Plus))
        .               }
        .           
        .               /// Eats `&` possibly breaking tokens like `&&` in process.
        .               /// Signals an error if `&` is not eaten.
        .               fn expect_and(&mut self) -> PResult<'a, ()> {
    6,552 ( 0.00%)          if self.break_and_eat(token::BinOp(token::And)) { Ok(()) } else { self.unexpected() }
        .               }
        .           
        .               /// Eats `|` possibly breaking tokens like `||` in process.
        .               /// Signals an error if `|` was not eaten.
        .               fn expect_or(&mut self) -> PResult<'a, ()> {
      462 ( 0.00%)          if self.break_and_eat(token::BinOp(token::Or)) { Ok(()) } else { self.unexpected() }
        .               }
        .           
        .               /// Eats `<` possibly breaking tokens like `<<` in process.
    7,776 ( 0.00%)      fn eat_lt(&mut self) -> bool {
   31,753 ( 0.00%)          let ate = self.break_and_eat(token::Lt);
   20,832 ( 0.00%)          if ate {
        .                       // See doc comment for `unmatched_angle_bracket_count`.
    3,160 ( 0.00%)              self.unmatched_angle_bracket_count += 1;
    3,334 ( 0.00%)              self.max_angle_bracket_count += 1;
        .                       debug!("eat_lt: (increment) count={:?}", self.unmatched_angle_bracket_count);
        .                   }
        .                   ate
    7,776 ( 0.00%)      }
        .           
        .               /// Eats `<` possibly breaking tokens like `<<` in process.
        .               /// Signals an error if `<` was not eaten.
        .               fn expect_lt(&mut self) -> PResult<'a, ()> {
        .                   if self.eat_lt() { Ok(()) } else { self.unexpected() }
        .               }
        .           
        .               /// Eats `>` possibly breaking tokens like `>>` in process.
        .               /// Signals an error if `>` was not eaten.
        .               fn expect_gt(&mut self) -> PResult<'a, ()> {
    4,044 ( 0.00%)          if self.break_and_eat(token::Gt) {
        .                       // See doc comment for `unmatched_angle_bracket_count`.
    2,022 ( 0.00%)              if self.unmatched_angle_bracket_count > 0 {
    1,348 ( 0.00%)                  self.unmatched_angle_bracket_count -= 1;
        .                           debug!("expect_gt: (decrement) count={:?}", self.unmatched_angle_bracket_count);
        .                       }
        .                       Ok(())
        .                   } else {
        .                       self.unexpected()
        .                   }
        .               }
        .           
        .               fn expect_any_with_type(&mut self, kets: &[&TokenKind], expect: TokenExpectType) -> bool {
        .                   kets.iter().any(|k| match expect {
   26,844 ( 0.00%)              TokenExpectType::Expect => self.check(k),
    1,155 ( 0.00%)              TokenExpectType::NoExpect => self.token == **k,
        .                   })
        .               }
        .           
        .               fn parse_seq_to_before_tokens<T>(
        .                   &mut self,
        .                   kets: &[&TokenKind],
        .                   sep: SeqSep,
        .                   expect: TokenExpectType,
-- line 759 ----------------------------------------
-- line 761 ----------------------------------------
        .               ) -> PResult<'a, (Vec<T>, bool /* trailing */, bool /* recovered */)> {
        .                   let mut first = true;
        .                   let mut recovered = false;
        .                   let mut trailing = false;
        .                   let mut v = vec![];
        .                   let unclosed_delims = !self.unclosed_delims.is_empty();
        .           
        .                   while !self.expect_any_with_type(kets, expect) {
   27,048 ( 0.00%)              if let token::CloseDelim(..) | token::Eof = self.token.kind {
        .                           break;
        .                       }
   19,292 ( 0.00%)              if let Some(ref t) = sep.sep {
   23,047 ( 0.00%)                  if first {
        .                               first = false;
        .                           } else {
   13,884 ( 0.00%)                      match self.expect(t) {
        .                                   Ok(false) => {
        .                                       self.current_closure.take();
        .                                   }
        .                                   Ok(true) => {
        .                                       self.current_closure.take();
        .                                       recovered = true;
        .                                       break;
        .                                   }
-- line 784 ----------------------------------------
-- line 857 ----------------------------------------
        .                                               e.cancel();
        .                                               break;
        .                                           }
        .                                       }
        .                                   }
        .                               }
        .                           }
        .                       }
    9,782 ( 0.00%)              if sep.trailing_sep_allowed && self.expect_any_with_type(kets, expect) {
        .                           trailing = true;
        .                           break;
        .                       }
        .           
    7,187 ( 0.00%)              let t = f(self)?;
    8,853 ( 0.00%)              v.push(t);
        .                   }
        .           
   15,872 ( 0.00%)          Ok((v, trailing, recovered))
        .               }
        .           
        .               fn recover_missing_braces_around_closure_body(
        .                   &mut self,
        .                   closure_spans: ClosureSpans,
        .                   mut expect_err: DiagnosticBuilder<'_>,
        .               ) -> PResult<'a, ()> {
        .                   let initial_semicolon = self.token.span;
-- line 882 ----------------------------------------
-- line 937 ----------------------------------------
        .               /// `f` must consume tokens until reaching the next separator or
        .               /// closing bracket.
        .               fn parse_seq_to_before_end<T>(
        .                   &mut self,
        .                   ket: &TokenKind,
        .                   sep: SeqSep,
        .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
        .               ) -> PResult<'a, (Vec<T>, bool, bool)> {
   16,448 ( 0.00%)          self.parse_seq_to_before_tokens(&[ket], sep, TokenExpectType::Expect, f)
        .               }
        .           
        .               /// Parses a sequence, including the closing delimiter. The function
        .               /// `f` must consume tokens until reaching the next separator or
        .               /// closing bracket.
   24,950 ( 0.00%)      fn parse_seq_to_end<T>(
        .                   &mut self,
        .                   ket: &TokenKind,
        .                   sep: SeqSep,
        .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
        .               ) -> PResult<'a, (Vec<T>, bool /* trailing */)> {
   10,369 ( 0.00%)          let (val, trailing, recovered) = self.parse_seq_to_before_end(ket, sep, f)?;
    5,195 ( 0.00%)          if !recovered {
        .                       self.eat(ket);
        .                   }
   26,955 ( 0.00%)          Ok((val, trailing))
   19,960 ( 0.00%)      }
        .           
        .               /// Parses a sequence, including the closing delimiter. The function
        .               /// `f` must consume tokens until reaching the next separator or
        .               /// closing bracket.
        .               fn parse_unspanned_seq<T>(
        .                   &mut self,
        .                   bra: &TokenKind,
        .                   ket: &TokenKind,
        .                   sep: SeqSep,
        .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
        .               ) -> PResult<'a, (Vec<T>, bool)> {
    8,999 ( 0.00%)          self.expect(bra)?;
   19,960 ( 0.00%)          self.parse_seq_to_end(ket, sep, f)
        .               }
        .           
        .               fn parse_delim_comma_seq<T>(
        .                   &mut self,
        .                   delim: DelimToken,
        .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
        .               ) -> PResult<'a, (Vec<T>, bool)> {
        .                   self.parse_unspanned_seq(
    3,537 ( 0.00%)              &token::OpenDelim(delim),
    4,647 ( 0.00%)              &token::CloseDelim(delim),
        .                       SeqSep::trailing_allowed(token::Comma),
        .                       f,
        .                   )
        .               }
        .           
        .               fn parse_paren_comma_seq<T>(
        .                   &mut self,
        .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
        .               ) -> PResult<'a, (Vec<T>, bool)> {
        .                   self.parse_delim_comma_seq(token::Paren, f)
        .               }
        .           
        .               /// Advance the parser by one token using provided token as the next one.
1,332,786 ( 0.03%)      fn bump_with(&mut self, (next_token, next_spacing): (Token, Spacing)) {
        .                   // Bumping after EOF is a bad sign, usually an infinite loop.
  615,132 ( 0.01%)          if self.prev_token.kind == TokenKind::Eof {
        .                       let msg = "attempted to bump the parser past EOF (may be stuck in a loop)";
        .                       self.span_bug(self.token.span, msg);
        .                   }
        .           
        .                   // Update the current and previous tokens.
  410,088 ( 0.01%)          self.prev_token = mem::replace(&mut self.token, next_token);
  102,522 ( 0.00%)          self.token_spacing = next_spacing;
        .           
        .                   // Diagnostics.
  102,522 ( 0.00%)          self.expected_tokens.clear();
        .               }
        .           
        .               /// Advance the parser by one token.
  819,456 ( 0.02%)      pub fn bump(&mut self) {
  409,728 ( 0.01%)          let next_token = self.next_tok(self.token.span);
  614,592 ( 0.01%)          self.bump_with(next_token);
  819,456 ( 0.02%)      }
        .           
        .               /// Look-ahead `dist` tokens of `self.token` and get access to that token there.
        .               /// When `dist == 0` then the current token is looked at.
      112 ( 0.00%)      pub fn look_ahead<R>(&self, dist: usize, looker: impl FnOnce(&Token) -> R) -> R {
    6,762 ( 0.00%)          if dist == 0 {
    2,829 ( 0.00%)              return looker(&self.token);
        .                   }
        .           
   39,257 ( 0.00%)          let frame = &self.token_cursor.frame;
   44,121 ( 0.00%)          if frame.delim != DelimToken::NoDelim {
        .                       let all_normal = (0..dist).all(|i| {
  122,668 ( 0.00%)                  let token = frame.tree_cursor.look_ahead(i);
  164,887 ( 0.00%)                  !matches!(token, Some(TokenTree::Delimited(_, DelimToken::NoDelim, _)))
        .                       });
        .                       if all_normal {
  203,881 ( 0.00%)                  return match frame.tree_cursor.look_ahead(dist - 1) {
   74,590 ( 0.00%)                      Some(tree) => match tree {
   35,402 ( 0.00%)                          TokenTree::Token(token) => looker(token),
        .                                   TokenTree::Delimited(dspan, delim, _) => {
   15,315 ( 0.00%)                              looker(&Token::new(token::OpenDelim(*delim), dspan.open))
        .                                   }
        .                               },
   26,249 ( 0.00%)                      None => looker(&Token::new(token::CloseDelim(frame.delim), frame.span.close)),
        .                           };
        .                       }
        .                   }
        .           
        .                   let mut cursor = self.token_cursor.clone();
        .                   let mut i = 0;
    3,392 ( 0.00%)          let mut token = Token::dummy();
      624 ( 0.00%)          while i < dist {
   24,081 ( 0.00%)              token = cursor.next().0;
   10,783 ( 0.00%)              if matches!(
    6,838 ( 0.00%)                  token.kind,
        .                           token::OpenDelim(token::NoDelim) | token::CloseDelim(token::NoDelim)
        .                       ) {
        .                           continue;
        .                       }
      310 ( 0.00%)              i += 1;
        .                   }
      699 ( 0.00%)          return looker(&token);
      126 ( 0.00%)      }
        .           
        .               /// Returns whether any of the given keywords are `dist` tokens ahead of the current one.
   27,486 ( 0.00%)      fn is_keyword_ahead(&self, dist: usize, kws: &[Symbol]) -> bool {
    7,940 ( 0.00%)          self.look_ahead(dist, |t| kws.iter().any(|&kw| t.is_keyword(kw)))
   27,486 ( 0.00%)      }
        .           
        .               /// Parses asyncness: `async` or nothing.
        .               fn parse_asyncness(&mut self) -> Async {
        .                   if self.eat_keyword(kw::Async) {
        .                       let span = self.prev_token.uninterpolated_span();
        .                       Async::Yes { span, closure_id: DUMMY_NODE_ID, return_impl_trait_id: DUMMY_NODE_ID }
        .                   } else {
        .                       Async::No
        .                   }
        .               }
        .           
        .               /// Parses unsafety: `unsafe` or nothing.
    1,746 ( 0.00%)      fn parse_unsafety(&mut self) -> Unsafe {
        .                   if self.eat_keyword(kw::Unsafe) {
       25 ( 0.00%)              Unsafe::Yes(self.prev_token.uninterpolated_span())
        .                   } else {
        .                       Unsafe::No
        .                   }
    6,984 ( 0.00%)      }
        .           
        .               /// Parses constness: `const` or nothing.
   19,072 ( 0.00%)      fn parse_constness(&mut self) -> Const {
        .                   // Avoid const blocks to be parsed as const items
    5,270 ( 0.00%)          if self.look_ahead(1, |t| t != &token::OpenDelim(DelimToken::Brace))
        .                       && self.eat_keyword(kw::Const)
        .                   {
    1,275 ( 0.00%)              Const::Yes(self.prev_token.uninterpolated_span())
        .                   } else {
        .                       Const::No
        .                   }
   33,376 ( 0.00%)      }
        .           
        .               /// Parses inline const expressions.
        .               fn parse_const_block(&mut self, span: Span, pat: bool) -> PResult<'a, P<Expr>> {
        .                   if pat {
        .                       self.sess.gated_spans.gate(sym::inline_const_pat, span);
        .                   } else {
        .                       self.sess.gated_spans.gate(sym::inline_const, span);
        .                   }
-- line 1104 ----------------------------------------
-- line 1110 ----------------------------------------
        .                   };
        .                   let blk_span = anon_const.value.span;
        .                   Ok(self.mk_expr(span.to(blk_span), ExprKind::ConstBlock(anon_const), AttrVec::new()))
        .               }
        .           
        .               /// Parses mutability (`mut` or nothing).
        .               fn parse_mutability(&mut self) -> Mutability {
        .                   if self.eat_keyword(kw::Mut) { Mutability::Mut } else { Mutability::Not }
    2,303 ( 0.00%)      }
        .           
        .               /// Possibly parses mutability (`const` or `mut`).
    5,004 ( 0.00%)      fn parse_const_or_mut(&mut self) -> Option<Mutability> {
        .                   if self.eat_keyword(kw::Mut) {
        .                       Some(Mutability::Mut)
        .                   } else if self.eat_keyword(kw::Const) {
        .                       Some(Mutability::Not)
        .                   } else {
        .                       None
        .                   }
    5,004 ( 0.00%)      }
        .           
        .               fn parse_field_name(&mut self) -> PResult<'a, Ident> {
    3,925 ( 0.00%)          if let token::Literal(token::Lit { kind: token::Integer, symbol, suffix }) = self.token.kind
        .                   {
       10 ( 0.00%)              self.expect_no_suffix(self.token.span, "a tuple index", suffix);
        4 ( 0.00%)              self.bump();
        2 ( 0.00%)              Ok(Ident::new(symbol, self.prev_token.span))
        .                   } else {
    5,868 ( 0.00%)              self.parse_ident_common(true)
        .                   }
        3 ( 0.00%)      }
        .           
        .               fn parse_mac_args(&mut self) -> PResult<'a, P<MacArgs>> {
    1,341 ( 0.00%)          self.parse_mac_args_common(true).map(P)
        .               }
        .           
        .               fn parse_attr_args(&mut self) -> PResult<'a, MacArgs> {
    4,434 ( 0.00%)          self.parse_mac_args_common(false)
        .               }
        .           
   17,361 ( 0.00%)      fn parse_mac_args_common(&mut self, delimited_only: bool) -> PResult<'a, MacArgs> {
   15,432 ( 0.00%)          Ok(
   14,473 ( 0.00%)              if self.check(&token::OpenDelim(DelimToken::Paren))
    3,816 ( 0.00%)                  || self.check(&token::OpenDelim(DelimToken::Bracket))
    3,426 ( 0.00%)                  || self.check(&token::OpenDelim(DelimToken::Brace))
        .                       {
    3,540 ( 0.00%)                  match self.parse_token_tree() {
    4,425 ( 0.00%)                      TokenTree::Delimited(dspan, delim, tokens) =>
        .                               // We've confirmed above that there is a delimiter so unwrapping is OK.
        .                               {
    1,770 ( 0.00%)                          MacArgs::Delimited(dspan, MacDelimiter::from_token(delim).unwrap(), tokens)
        .                               }
        .                               _ => unreachable!(),
        .                           }
    2,088 ( 0.00%)              } else if !delimited_only {
        .                           if self.eat(&token::Eq) {
      643 ( 0.00%)                      let eq_span = self.prev_token.span;
        .           
        .                               // Collect tokens because they are used during lowering to HIR.
      643 ( 0.00%)                      let expr = self.parse_expr_force_collect()?;
      643 ( 0.00%)                      let span = expr.span;
        .           
    3,215 ( 0.00%)                      let token_kind = token::Interpolated(Lrc::new(token::NtExpr(expr)));
    5,787 ( 0.00%)                      MacArgs::Eq(eq_span, Token::new(token_kind, span))
        .                           } else {
        .                               MacArgs::Empty
        .                           }
        .                       } else {
        .                           return self.unexpected();
        .                       },
        .                   )
   13,503 ( 0.00%)      }
        .           
        .               fn parse_or_use_outer_attributes(
        .                   &mut self,
        .                   already_parsed_attrs: Option<AttrWrapper>,
        .               ) -> PResult<'a, AttrWrapper> {
   32,847 ( 0.00%)          if let Some(attrs) = already_parsed_attrs {
        .                       Ok(attrs)
        .                   } else {
   19,250 ( 0.00%)              self.parse_outer_attributes()
        .                   }
        .               }
        .           
        .               /// Parses a single token tree from the input.
   15,192 ( 0.00%)      pub(crate) fn parse_token_tree(&mut self) -> TokenTree {
    8,913 ( 0.00%)          match self.token.kind {
        .                       token::OpenDelim(..) => {
        .                           let depth = self.token_cursor.stack.len();
        .           
        .                           // We keep advancing the token cursor until we hit
        .                           // the matching `CloseDelim` token.
   43,392 ( 0.00%)                  while !(depth == self.token_cursor.stack.len()
        .                               && matches!(self.token.kind, token::CloseDelim(_)))
        .                           {
        .                               // Advance one token at a time, so `TokenCursor::next()`
        .                               // can capture these tokens if necessary.
   30,420 ( 0.00%)                      self.bump();
        .                           }
        .                           // We are still inside the frame corresponding
        .                           // to the delimited stream we captured, so grab
        .                           // the tokens from this frame.
        .                           let frame = &self.token_cursor.frame;
    2,190 ( 0.00%)                  let stream = frame.tree_cursor.stream.clone();
    2,190 ( 0.00%)                  let span = frame.span;
    1,095 ( 0.00%)                  let delim = frame.delim;
        .                           // Consume close delimiter
    2,190 ( 0.00%)                  self.bump();
    5,475 ( 0.00%)                  TokenTree::Delimited(span, delim, stream)
        .                       }
        .                       token::CloseDelim(_) | token::Eof => unreachable!(),
        .                       _ => {
    1,608 ( 0.00%)                  self.bump();
    4,020 ( 0.00%)                  TokenTree::Token(self.prev_token.clone())
        .                       }
        .                   }
   13,293 ( 0.00%)      }
        .           
        .               /// Parses a stream of tokens into a list of `TokenTree`s, up to EOF.
        .               pub fn parse_all_token_trees(&mut self) -> PResult<'a, Vec<TokenTree>> {
        .                   let mut tts = Vec::new();
        .                   while self.token != token::Eof {
        .                       tts.push(self.parse_token_tree());
        .                   }
        .                   Ok(tts)
-- line 1234 ----------------------------------------
-- line 1244 ----------------------------------------
        .                   }
        .                   TokenStream::new(result)
        .               }
        .           
        .               /// Evaluates the closure with restrictions in place.
        .               ///
        .               /// Afters the closure is evaluated, restrictions are reset.
        .               fn with_res<T>(&mut self, res: Restrictions, f: impl FnOnce(&mut Self) -> T) -> T {
   10,872 ( 0.00%)          let old = self.restrictions;
   13,079 ( 0.00%)          self.restrictions = res;
        .                   let res = f(self);
   12,953 ( 0.00%)          self.restrictions = old;
        .                   res
        .               }
        .           
   30,480 ( 0.00%)      fn is_crate_vis(&self) -> bool {
   19,050 ( 0.00%)          self.token.is_keyword(kw::Crate) && self.look_ahead(1, |t| t != &token::ModSep)
   34,290 ( 0.00%)      }
        .           
        .               /// Parses `pub`, `pub(crate)` and `pub(in path)` plus shortcuts `crate` for `pub(crate)`,
        .               /// `pub(self)` for `pub(in self)` and `pub(super)` for `pub(in super)`.
        .               /// If the following element can't be a tuple (i.e., it's a function definition), then
        .               /// it's not a tuple struct field), and the contents within the parentheses aren't valid,
        .               /// so emit a proper diagnostic.
        .               // Public for rustfmt usage.
   28,950 ( 0.00%)      pub fn parse_visibility(&mut self, fbt: FollowedByType) -> PResult<'a, Visibility> {
    5,840 ( 0.00%)          maybe_whole!(self, NtVis, |x| x);
        .           
    2,890 ( 0.00%)          self.expected_tokens.push(TokenType::Keyword(kw::Crate));
   11,560 ( 0.00%)          if self.is_crate_vis() {
        .                       self.bump(); // `crate`
        .                       self.sess.gated_spans.gate(sym::crate_visibility_modifier, self.prev_token.span);
        .                       return Ok(Visibility {
        .                           span: self.prev_token.span,
        .                           kind: VisibilityKind::Crate(CrateSugar::JustCrate),
        .                           tokens: None,
        .                       });
        .                   }
        .           
        .                   if !self.eat_keyword(kw::Pub) {
        .                       // We need a span for our `Spanned<VisibilityKind>`, but there's inherently no
        .                       // keyword to grab a span from for inherited visibility; an empty span at the
        .                       // beginning of the current token would seem to be the "Schelling span".
    2,332 ( 0.00%)              return Ok(Visibility {
    6,996 ( 0.00%)                  span: self.token.span.shrink_to_lo(),
        .                           kind: VisibilityKind::Inherited,
        .                           tokens: None,
        .                       });
        .                   }
      558 ( 0.00%)          let lo = self.prev_token.span;
        .           
    2,790 ( 0.00%)          if self.check(&token::OpenDelim(token::Paren)) {
        .                       // We don't `self.bump()` the `(` yet because this might be a struct definition where
        .                       // `()` or a tuple might be allowed. For example, `struct Struct(pub (), pub (usize));`.
        .                       // Because of this, we only `bump` the `(` if we're assured it is appropriate to do so
        .                       // by the following tokens.
       90 ( 0.00%)              if self.is_keyword_ahead(1, &[kw::Crate]) && self.look_ahead(2, |t| t != &token::ModSep)
        .                       // account for `pub(crate::foo)`
        .                       {
        .                           // Parse `pub(crate)`.
       30 ( 0.00%)                  self.bump(); // `(`
       20 ( 0.00%)                  self.bump(); // `crate`
       30 ( 0.00%)                  self.expect(&token::CloseDelim(token::Paren))?; // `)`
       10 ( 0.00%)                  let vis = VisibilityKind::Crate(CrateSugar::PubCrate);
        .                           return Ok(Visibility {
       30 ( 0.00%)                      span: lo.to(self.prev_token.span),
        .                               kind: vis,
        .                               tokens: None,
        .                           });
        .                       } else if self.is_keyword_ahead(1, &[kw::In]) {
        .                           // Parse `pub(in path)`.
        .                           self.bump(); // `(`
        .                           self.bump(); // `in`
        .                           let path = self.parse_path(PathStyle::Mod)?; // `path`
-- line 1317 ----------------------------------------
-- line 1338 ----------------------------------------
        .                       } else if let FollowedByType::No = fbt {
        .                           // Provide this diagnostic if a type cannot follow;
        .                           // in particular, if this is not a tuple struct.
        .                           self.recover_incorrect_vis_restriction()?;
        .                           // Emit diagnostic, but continue with public visibility.
        .                       }
        .                   }
        .           
    1,644 ( 0.00%)          Ok(Visibility { span: lo, kind: VisibilityKind::Public, tokens: None })
   26,055 ( 0.00%)      }
        .           
        .               /// Recovery for e.g. `pub(something) fn ...` or `struct X { pub(something) y: Z }`
        .               fn recover_incorrect_vis_restriction(&mut self) -> PResult<'a, ()> {
        .                   self.bump(); // `(`
        .                   let path = self.parse_path(PathStyle::Mod)?;
        .                   self.expect(&token::CloseDelim(token::Paren))?; // `)`
        .           
        .                   let msg = "incorrect visibility restriction";
-- line 1355 ----------------------------------------
-- line 1370 ----------------------------------------
        .                       )
        .                       .emit();
        .           
        .                   Ok(())
        .               }
        .           
        .               /// Parses `extern string_literal?`.
        .               fn parse_extern(&mut self) -> Extern {
      570 ( 0.00%)          if self.eat_keyword(kw::Extern) { Extern::from_abi(self.parse_abi()) } else { Extern::None }
        .               }
        .           
        .               /// Parses a string literal as an ABI spec.
        .               fn parse_abi(&mut self) -> Option<StrLit> {
        .                   match self.parse_str_lit() {
        .                       Ok(str_lit) => Some(str_lit),
        .                       Err(Some(lit)) => match lit.kind {
        .                           ast::LitKind::Err(_) => None,
-- line 1386 ----------------------------------------
-- line 1395 ----------------------------------------
        .                                   .emit();
        .                               None
        .                           }
        .                       },
        .                       Err(None) => None,
        .                   }
        .               }
        .           
   11,690 ( 0.00%)      pub fn collect_tokens_no_attrs<R: AstLike>(
        .                   &mut self,
        .                   f: impl FnOnce(&mut Self) -> PResult<'a, R>,
        .               ) -> PResult<'a, R> {
        .                   // The only reason to call `collect_tokens_no_attrs` is if you want tokens, so use
        .                   // `ForceCollect::Yes`
        .                   self.collect_tokens_trailing_token(
        .                       AttrWrapper::empty(),
        .                       ForceCollect::Yes,
    1,184 ( 0.00%)              |this, _attrs| Ok((f(this)?, TrailingToken::None)),
        .                   )
   11,690 ( 0.00%)      }
        .           
        .               /// `::{` or `::*`
  153,576 ( 0.00%)      fn is_import_coupler(&mut self) -> bool {
   76,788 ( 0.00%)          self.check(&token::ModSep)
        .                       && self.look_ahead(1, |t| {
   91,672 ( 0.00%)                  *t == token::OpenDelim(token::Brace) || *t == token::BinOp(token::Star)
        .                       })
  124,947 ( 0.00%)      }
        .           
        .               pub fn clear_expected_tokens(&mut self) {
        .                   self.expected_tokens.clear();
        .               }
        .           }
        .           
        .           crate fn make_unclosed_delims_error(
        .               unmatched: UnmatchedBrace,
-- line 1430 ----------------------------------------
-- line 1450 ----------------------------------------
        .                   err.span_label(sp, "closing delimiter possibly meant for this");
        .               }
        .               if let Some(sp) = unmatched.unclosed_span {
        .                   err.span_label(sp, "unclosed delimiter");
        .               }
        .               Some(err)
        .           }
        .           
   33,096 ( 0.00%)  pub fn emit_unclosed_delims(unclosed_delims: &mut Vec<UnmatchedBrace>, sess: &ParseSess) {
   16,548 ( 0.00%)      *sess.reached_eof.borrow_mut() |=
        .                   unclosed_delims.iter().any(|unmatched_delim| unmatched_delim.found_delim.is_none());
   16,548 ( 0.00%)      for unmatched in unclosed_delims.drain(..) {
        .                   if let Some(mut e) = make_unclosed_delims_error(unmatched, sess) {
        .                       e.emit();
        .                   }
        .               }
   33,096 ( 0.00%)  }
        .           
        .           /// A helper struct used when building an `AttrAnnotatedTokenStream` from
        .           /// a `LazyTokenStream`. Both delimiter and non-delimited tokens
        .           /// are stored as `FlatToken::Token`. A vector of `FlatToken`s
        .           /// is then 'parsed' to build up an `AttrAnnotatedTokenStream` with nested
        .           /// `AttrAnnotatedTokenTree::Delimited` tokens
        .           #[derive(Debug, Clone)]
        .           pub enum FlatToken {
-- line 1474 ----------------------------------------

  619,801 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_privacy/src/lib.rs
--------------------------------------------------------------------------------
Ir                 

-- line 59 ----------------------------------------
        .                   &mut self,
        .                   def_id: DefId,
        .                   kind: &str,
        .                   descr: &dyn fmt::Display,
        .               ) -> ControlFlow<Self::BreakTy>;
        .           
        .               /// Not overridden, but used to actually visit types and traits.
        .               fn skeleton(&mut self) -> DefIdVisitorSkeleton<'_, 'tcx, Self> {
  468,499 ( 0.01%)          DefIdVisitorSkeleton {
        .                       def_id_visitor: self,
        .                       visited_opaque_tys: Default::default(),
        .                       dummy: Default::default(),
        .                   }
        .               }
    4,518 ( 0.00%)      fn visit(&mut self, ty_fragment: impl TypeFoldable<'tcx>) -> ControlFlow<Self::BreakTy> {
        .                   ty_fragment.visit_with(&mut self.skeleton())
    7,530 ( 0.00%)      }
    2,814 ( 0.00%)      fn visit_trait(&mut self, trait_ref: TraitRef<'tcx>) -> ControlFlow<Self::BreakTy> {
        .                   self.skeleton().visit_trait(trait_ref)
    2,814 ( 0.00%)      }
        .               fn visit_projection_ty(
        .                   &mut self,
        .                   projection: ty::ProjectionTy<'tcx>,
        .               ) -> ControlFlow<Self::BreakTy> {
       52 ( 0.00%)          self.skeleton().visit_projection_ty(projection)
        .               }
        .               fn visit_predicates(
        .                   &mut self,
        .                   predicates: ty::GenericPredicates<'tcx>,
        .               ) -> ControlFlow<Self::BreakTy> {
    4,562 ( 0.00%)          self.skeleton().visit_predicates(predicates)
        .               }
        .           }
        .           
        .           struct DefIdVisitorSkeleton<'v, 'tcx, V: ?Sized> {
        .               def_id_visitor: &'v mut V,
        .               visited_opaque_tys: FxHashSet<DefId>,
        .               dummy: PhantomData<TyCtxt<'tcx>>,
        .           }
        .           
        .           impl<'tcx, V> DefIdVisitorSkeleton<'_, 'tcx, V>
        .           where
        .               V: DefIdVisitor<'tcx> + ?Sized,
        .           {
        .               fn visit_trait(&mut self, trait_ref: TraitRef<'tcx>) -> ControlFlow<V::BreakTy> {
      469 ( 0.00%)          let TraitRef { def_id, substs } = trait_ref;
   41,961 ( 0.00%)          self.def_id_visitor.visit_def_id(def_id, "trait", &trait_ref.print_only_trait_path())?;
      469 ( 0.00%)          if self.def_id_visitor.shallow() { ControlFlow::CONTINUE } else { substs.visit_with(self) }
        .               }
        .           
   10,350 ( 0.00%)      fn visit_projection_ty(
        .                   &mut self,
        .                   projection: ty::ProjectionTy<'tcx>,
        .               ) -> ControlFlow<V::BreakTy> {
    8,280 ( 0.00%)          let (trait_ref, assoc_substs) =
    2,070 ( 0.00%)              projection.trait_ref_and_own_substs(self.def_id_visitor.tcx());
        .                   self.visit_trait(trait_ref)?;
        .                   if self.def_id_visitor.shallow() {
        .                       ControlFlow::CONTINUE
        .                   } else {
        .                       assoc_substs.iter().try_for_each(|subst| subst.visit_with(self))
        .                   }
    9,315 ( 0.00%)      }
        .           
        .               fn visit_predicate(&mut self, predicate: ty::Predicate<'tcx>) -> ControlFlow<V::BreakTy> {
      706 ( 0.00%)          match predicate.kind().skip_binder() {
        .                       ty::PredicateKind::Trait(ty::TraitPredicate {
        .                           trait_ref,
        .                           constness: _,
        .                           polarity: _,
        .                       }) => self.visit_trait(trait_ref),
        .                       ty::PredicateKind::Projection(ty::ProjectionPredicate { projection_ty, term }) => {
       70 ( 0.00%)                  term.visit_with(self)?;
      175 ( 0.00%)                  self.visit_projection_ty(projection_ty)
        .                       }
        .                       ty::PredicateKind::TypeOutlives(ty::OutlivesPredicate(ty, _region)) => {
        .                           ty.visit_with(self)
        .                       }
        .                       ty::PredicateKind::RegionOutlives(..) => ControlFlow::CONTINUE,
        .                       ty::PredicateKind::ConstEvaluatable(uv)
        .                           if self.def_id_visitor.tcx().features().generic_const_exprs =>
        .                       {
-- line 140 ----------------------------------------
-- line 157 ----------------------------------------
        .                       ACNode::Leaf(leaf) => self.visit_const(leaf),
        .                       ACNode::Cast(_, _, ty) => self.visit_ty(ty),
        .                       ACNode::Binop(..) | ACNode::UnaryOp(..) | ACNode::FunctionCall(_, _) => {
        .                           ControlFlow::CONTINUE
        .                       }
        .                   })
        .               }
        .           
   31,934 ( 0.00%)      fn visit_predicates(
        .                   &mut self,
        .                   predicates: ty::GenericPredicates<'tcx>,
        .               ) -> ControlFlow<V::BreakTy> {
        .                   let ty::GenericPredicates { parent: _, predicates } = predicates;
        .                   predicates.iter().try_for_each(|&(predicate, _span)| self.visit_predicate(predicate))
   36,496 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx, V> TypeVisitor<'tcx> for DefIdVisitorSkeleton<'_, 'tcx, V>
        .           where
        .               V: DefIdVisitor<'tcx> + ?Sized,
        .           {
        .               type BreakTy = V::BreakTy;
        .           
1,380,403 ( 0.03%)      fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<V::BreakTy> {
  153,795 ( 0.00%)          let tcx = self.def_id_visitor.tcx();
        .                   // InternalSubsts are not visited here because they are visited below in `super_visit_with`.
  760,359 ( 0.02%)          match *ty.kind() {
  218,916 ( 0.00%)              ty::Adt(&ty::AdtDef { did: def_id, .. }, ..)
        .                       | ty::Foreign(def_id)
        .                       | ty::FnDef(def_id, ..)
        .                       | ty::Closure(def_id, ..)
        .                       | ty::Generator(def_id, ..) => {
  974,852 ( 0.02%)                  self.def_id_visitor.visit_def_id(def_id, "type", &ty)?;
        .                           if self.def_id_visitor.shallow() {
        .                               return ControlFlow::CONTINUE;
        .                           }
        .                           // Default type visitor doesn't visit signatures of fn types.
        .                           // Something like `fn() -> Priv {my_func}` is considered a private type even if
        .                           // `my_func` is public, so we need to visit signatures.
  221,602 ( 0.00%)                  if let ty::FnDef(..) = ty.kind() {
        .                               tcx.fn_sig(def_id).visit_with(self)?;
        .                           }
        .                           // Inherent static methods don't have self type in substs.
        .                           // Something like `fn() {my_method}` type of the method
        .                           // `impl Pub<Priv> { pub fn my_method() {} }` is considered a private type,
        .                           // so we need to visit the self type additionally.
  338,906 ( 0.01%)                  if let Some(assoc_item) = tcx.opt_associated_item(def_id) {
   17,900 ( 0.00%)                      if let ty::ImplContainer(impl_def_id) = assoc_item.container {
    3,746 ( 0.00%)                          tcx.type_of(impl_def_id).visit_with(self)?;
        .                               }
        .                           }
        .                       }
    1,974 ( 0.00%)              ty::Projection(proj) => {
        .                           if self.def_id_visitor.skip_assoc_tys() {
        .                               // Visitors searching for minimal visibility/reachability want to
        .                               // conservatively approximate associated types like `<Type as Trait>::Alias`
        .                               // as visible/reachable even if both `Type` and `Trait` are private.
        .                               // Ideally, associated types should be substituted in the same way as
        .                               // free type aliases, but this isn't done yet.
        .                               return ControlFlow::CONTINUE;
        .                           }
        .                           // This will also visit substs if necessary, so we don't need to recurse.
    9,730 ( 0.00%)                  return self.visit_projection_ty(proj);
        .                       }
    2,050 ( 0.00%)              ty::Dynamic(predicates, ..) => {
        .                           // All traits in the list are considered the "primary" part of the type
        .                           // and are visited by shallow visitors.
   16,443 ( 0.00%)                  for predicate in predicates {
   12,952 ( 0.00%)                      let trait_ref = match predicate.skip_binder() {
   12,216 ( 0.00%)                          ty::ExistentialPredicate::Trait(trait_ref) => trait_ref,
      322 ( 0.00%)                          ty::ExistentialPredicate::Projection(proj) => proj.trait_ref(tcx),
        .                                   ty::ExistentialPredicate::AutoTrait(def_id) => {
      310 ( 0.00%)                              ty::ExistentialTraitRef { def_id, substs: InternalSubsts::empty() }
        .                                   }
        .                               };
    4,072 ( 0.00%)                      let ty::ExistentialTraitRef { def_id, substs: _ } = trait_ref;
   25,299 ( 0.00%)                      self.def_id_visitor.visit_def_id(def_id, "trait", &trait_ref)?;
        .                           }
        .                       }
        .                       ty::Opaque(def_id, ..) => {
        .                           // Skip repeated `Opaque`s to avoid infinite recursion.
        .                           if self.visited_opaque_tys.insert(def_id) {
        .                               // The intent is to treat `impl Trait1 + Trait2` identically to
        .                               // `dyn Trait1 + Trait2`. Therefore we ignore def-id of the opaque type itself
        .                               // (it either has no visibility, or its visibility is insignificant, like
-- line 241 ----------------------------------------
-- line 270 ----------------------------------------
        .                       ty::Bound(..) | ty::Placeholder(..) | ty::Infer(..) => {
        .                           bug!("unexpected type: {:?}", ty)
        .                       }
        .                   }
        .           
        .                   if self.def_id_visitor.shallow() {
        .                       ControlFlow::CONTINUE
        .                   } else {
  426,653 ( 0.01%)              ty.super_visit_with(self)
        .                   }
1,332,585 ( 0.03%)      }
        .           
        .               fn visit_const(&mut self, c: &'tcx Const<'tcx>) -> ControlFlow<Self::BreakTy> {
   28,248 ( 0.00%)          self.visit_ty(c.ty)?;
    4,708 ( 0.00%)          let tcx = self.def_id_visitor.tcx();
   32,956 ( 0.00%)          if let Ok(Some(ct)) = AbstractConst::from_const(tcx, c) {
        .                       self.visit_abstract_const_expr(tcx, ct)?;
        .                   }
        .                   ControlFlow::CONTINUE
        .               }
        .           }
        .           
        .           fn min(vis1: ty::Visibility, vis2: ty::Visibility, tcx: TyCtxt<'_>) -> ty::Visibility {
    1,717 ( 0.00%)      if vis1.is_at_least(vis2, tcx) { vis2 } else { vis1 }
        .           }
        .           
        .           ////////////////////////////////////////////////////////////////////////////////
        .           /// Visitor used to determine if pub(restricted) is used anywhere in the crate.
        .           ///
        .           /// This is done so that `private_in_public` warnings can be turned into hard errors
        .           /// in crates that have been updated to use pub(restricted).
        .           ////////////////////////////////////////////////////////////////////////////////
-- line 301 ----------------------------------------
-- line 303 ----------------------------------------
        .               tcx: TyCtxt<'tcx>,
        .               has_pub_restricted: bool,
        .           }
        .           
        .           impl<'tcx> Visitor<'tcx> for PubRestrictedVisitor<'tcx> {
        .               type NestedFilter = nested_filter::All;
        .           
        .               fn nested_visit_map(&mut self) -> Self::Map {
    3,725 ( 0.00%)          self.tcx.hir()
        .               }
        .               fn visit_vis(&mut self, vis: &'tcx hir::Visibility<'tcx>) {
    7,925 ( 0.00%)          self.has_pub_restricted = self.has_pub_restricted || vis.node.is_pub_restricted();
        .               }
        .           }
        .           
        .           ////////////////////////////////////////////////////////////////////////////////
        .           /// Visitor used to determine impl visibility and reachability.
        .           ////////////////////////////////////////////////////////////////////////////////
        .           
        .           struct FindMin<'a, 'tcx, VL: VisibilityLike> {
-- line 322 ----------------------------------------
-- line 336 ----------------------------------------
        .                   true
        .               }
        .               fn visit_def_id(
        .                   &mut self,
        .                   def_id: DefId,
        .                   _kind: &str,
        .                   _descr: &dyn fmt::Display,
        .               ) -> ControlFlow<Self::BreakTy> {
   15,293 ( 0.00%)          self.min = VL::new_min(self, def_id);
        .                   ControlFlow::CONTINUE
        .               }
        .           }
        .           
        .           trait VisibilityLike: Sized {
        .               const MAX: Self;
        .               const SHALLOW: bool = false;
        .               fn new_min(find: &FindMin<'_, '_, Self>, def_id: DefId) -> Self;
        .           
        .               // Returns an over-approximation (`skip_assoc_tys` = true) of visibility due to
        .               // associated types for which we can't determine visibility precisely.
   10,542 ( 0.00%)      fn of_impl(def_id: LocalDefId, tcx: TyCtxt<'_>, access_levels: &AccessLevels) -> Self {
    5,020 ( 0.00%)          let mut find = FindMin { tcx, access_levels, min: Self::MAX };
    1,506 ( 0.00%)          find.visit(tcx.type_of(def_id));
    4,518 ( 0.00%)          if let Some(trait_ref) = tcx.impl_trait_ref(def_id) {
      469 ( 0.00%)              find.visit_trait(trait_ref);
        .                   }
    1,136 ( 0.00%)          find.min
   12,048 ( 0.00%)      }
        .           }
        .           impl VisibilityLike for ty::Visibility {
        .               const MAX: Self = ty::Visibility::Public;
   10,654 ( 0.00%)      fn new_min(find: &FindMin<'_, '_, Self>, def_id: DefId) -> Self {
    4,566 ( 0.00%)          min(find.tcx.visibility(def_id), find.min, find.tcx)
   15,220 ( 0.00%)      }
        .           }
        .           impl VisibilityLike for Option<AccessLevel> {
        .               const MAX: Self = Some(AccessLevel::Public);
        .               // Type inference is very smart sometimes.
        .               // It can make an impl reachable even some components of its type or trait are unreachable.
        .               // E.g. methods of `impl ReachableTrait<UnreachableTy> for ReachableTy<UnreachableTy> { ... }`
        .               // can be usable from other crates (#57264). So we skip substs when calculating reachability
        .               // and consider an impl reachable if its "shallow" type and trait are reachable.
        .               //
        .               // The assumption we make here is that type-inference won't let you use an impl without knowing
        .               // both "shallow" version of its self type and "shallow" version of its trait if it exists
        .               // (which require reaching the `DefId`s in them).
        .               const SHALLOW: bool = true;
    5,676 ( 0.00%)      fn new_min(find: &FindMin<'_, '_, Self>, def_id: DefId) -> Self {
        .                   cmp::min(
    5,676 ( 0.00%)              if let Some(def_id) = def_id.as_local() {
    2,052 ( 0.00%)                  find.access_levels.map.get(&def_id).copied()
        .                       } else {
        .                           Self::MAX
        .                       },
    4,582 ( 0.00%)              find.min,
        .                   )
    7,568 ( 0.00%)      }
        .           }
        .           
        .           ////////////////////////////////////////////////////////////////////////////////
        .           /// The embargo visitor, used to determine the exports of the AST.
        .           ////////////////////////////////////////////////////////////////////////////////
        .           
        .           struct EmbargoVisitor<'tcx> {
        .               tcx: TyCtxt<'tcx>,
-- line 400 ----------------------------------------
-- line 422 ----------------------------------------
        .           
        .           struct ReachEverythingInTheInterfaceVisitor<'a, 'tcx> {
        .               access_level: Option<AccessLevel>,
        .               item_def_id: LocalDefId,
        .               ev: &'a mut EmbargoVisitor<'tcx>,
        .           }
        .           
        .           impl<'tcx> EmbargoVisitor<'tcx> {
   33,088 ( 0.00%)      fn get(&self, def_id: LocalDefId) -> Option<AccessLevel> {
        .                   self.access_levels.map.get(&def_id).copied()
   33,088 ( 0.00%)      }
        .           
        .               fn update_with_hir_id(
        .                   &mut self,
        .                   hir_id: hir::HirId,
        .                   level: Option<AccessLevel>,
        .               ) -> Option<AccessLevel> {
    6,948 ( 0.00%)          let def_id = self.tcx.hir().local_def_id(hir_id);
        .                   self.update(def_id, level)
        .               }
        .           
        .               /// Updates node level and returns the updated level.
        .               fn update(&mut self, def_id: LocalDefId, level: Option<AccessLevel>) -> Option<AccessLevel> {
   36,000 ( 0.00%)          let old_level = self.get(def_id);
        .                   // Accessibility levels can only grow.
        .                   if level > old_level {
        .                       self.access_levels.map.insert(def_id, level.unwrap());
    1,309 ( 0.00%)              self.changed = true;
        .                       level
        .                   } else {
        .                       old_level
        .                   }
        .               }
        .           
        .               fn reach(
        .                   &mut self,
-- line 457 ----------------------------------------
-- line 458 ----------------------------------------
        .                   def_id: LocalDefId,
        .                   access_level: Option<AccessLevel>,
        .               ) -> ReachEverythingInTheInterfaceVisitor<'_, 'tcx> {
        .                   ReachEverythingInTheInterfaceVisitor {
        .                       access_level: cmp::min(access_level, Some(AccessLevel::Reachable)),
        .                       item_def_id: def_id,
        .                       ev: self,
        .                   }
   12,648 ( 0.00%)      }
        .           
        .               // We have to make sure that the items that macros might reference
        .               // are reachable, since they might be exported transitively.
        .               fn update_reachability_from_macro(&mut self, local_def_id: LocalDefId, md: &MacroDef) {
        .                   // Non-opaque macros cannot make other items more accessible than they already are.
        .           
        4 ( 0.00%)          let hir_id = self.tcx.hir().local_def_id_to_hir_id(local_def_id);
       12 ( 0.00%)          let attrs = self.tcx.hir().attrs(hir_id);
       28 ( 0.00%)          if attr::find_transparency(attrs, md.macro_rules).0 != Transparency::Opaque {
        .                       return;
        .                   }
        .           
        .                   let item_def_id = local_def_id.to_def_id();
        .                   let macro_module_def_id =
        .                       ty::DefIdTree::parent(self.tcx, item_def_id).unwrap().expect_local();
        .                   if self.tcx.hir().opt_def_kind(macro_module_def_id) != Some(DefKind::Mod) {
        .                       // The macro's parent doesn't correspond to a `mod`, return early (#63164, #65252).
-- line 483 ----------------------------------------
-- line 630 ----------------------------------------
        .           }
        .           
        .           impl<'tcx> Visitor<'tcx> for EmbargoVisitor<'tcx> {
        .               type NestedFilter = nested_filter::All;
        .           
        .               /// We want to visit items in the context of their containing
        .               /// module and so forth, so supply a crate for doing a deep walk.
        .               fn nested_visit_map(&mut self) -> Self::Map {
    7,450 ( 0.00%)          self.tcx.hir()
        .               }
        .           
   26,028 ( 0.00%)      fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {
    5,784 ( 0.00%)          let item_level = match item.kind {
        .                       hir::ItemKind::Impl { .. } => {
        .                           let impl_level =
    6,024 ( 0.00%)                      Option::<AccessLevel>::of_impl(item.def_id, self.tcx, &self.access_levels);
    1,004 ( 0.00%)                  self.update(item.def_id, impl_level)
        .                       }
    7,552 ( 0.00%)              _ => self.get(item.def_id),
        .                   };
        .           
        .                   // Update levels of nested things.
   14,946 ( 0.00%)          match item.kind {
        .                       hir::ItemKind::Enum(ref def, _) => {
      136 ( 0.00%)                  for variant in def.variants {
    1,752 ( 0.00%)                      let variant_level = self.update_with_hir_id(variant.id, item_level);
    2,336 ( 0.00%)                      if let Some(ctor_hir_id) = variant.data.ctor_hir_id() {
        .                                   self.update_with_hir_id(ctor_hir_id, item_level);
        .                               }
    1,168 ( 0.00%)                      for field in variant.data.fields() {
    1,196 ( 0.00%)                          self.update_with_hir_id(field.hir_id, variant_level);
        .                               }
        .                           }
        .                       }
        .                       hir::ItemKind::Impl(ref impl_) => {
    3,012 ( 0.00%)                  for impl_item_ref in impl_.items {
    6,772 ( 0.00%)                      if impl_.of_trait.is_some()
      836 ( 0.00%)                          || self.tcx.visibility(impl_item_ref.id.def_id) == ty::Visibility::Public
        .                               {
    3,432 ( 0.00%)                          self.update(impl_item_ref.id.def_id, item_level);
        .                               }
        .                           }
        .                       }
       90 ( 0.00%)              hir::ItemKind::Trait(.., trait_item_refs) => {
        .                           for trait_item_ref in trait_item_refs {
      216 ( 0.00%)                      self.update(trait_item_ref.id.def_id, item_level);
        .                           }
        .                       }
        .                       hir::ItemKind::Struct(ref def, _) | hir::ItemKind::Union(ref def, _) => {
      304 ( 0.00%)                  if let Some(ctor_hir_id) = def.ctor_hir_id() {
        .                               self.update_with_hir_id(ctor_hir_id, item_level);
        .                           }
      152 ( 0.00%)                  for field in def.fields() {
      720 ( 0.00%)                      if field.vis.node.is_pub() {
       32 ( 0.00%)                          self.update_with_hir_id(field.hir_id, item_level);
        .                               }
        .                           }
        .                       }
        .                       hir::ItemKind::Macro(ref macro_def) => {
        8 ( 0.00%)                  self.update_reachability_from_macro(item.def_id, macro_def);
        .                       }
        .                       hir::ItemKind::ForeignMod { items, .. } => {
        .                           for foreign_item in items {
        .                               if self.tcx.visibility(foreign_item.id.def_id) == ty::Visibility::Public {
        .                                   self.update(foreign_item.id.def_id, item_level);
        .                               }
        .                           }
        .                       }
-- line 697 ----------------------------------------
-- line 704 ----------------------------------------
        .                       | hir::ItemKind::TyAlias(..)
        .                       | hir::ItemKind::Mod(..)
        .                       | hir::ItemKind::TraitAlias(..)
        .                       | hir::ItemKind::Fn(..)
        .                       | hir::ItemKind::ExternCrate(..) => {}
        .                   }
        .           
        .                   // Mark all items in interfaces of reachable items as reachable.
   14,460 ( 0.00%)          match item.kind {
        .                       // The interface is empty.
        .                       hir::ItemKind::Macro(..) | hir::ItemKind::ExternCrate(..) => {}
        .                       // All nested items are checked by `visit_item`.
        .                       hir::ItemKind::Mod(..) => {}
        .                       // Handled in the access level of in rustc_resolve
        .                       hir::ItemKind::Use(..) => {}
        .                       // The interface is empty.
        .                       hir::ItemKind::GlobalAsm(..) => {}
-- line 720 ----------------------------------------
-- line 732 ----------------------------------------
        .                               self.reach(item.def_id, exist_level).generics().predicates().ty();
        .                           }
        .                       }
        .                       // Visit everything.
        .                       hir::ItemKind::Const(..)
        .                       | hir::ItemKind::Static(..)
        .                       | hir::ItemKind::Fn(..)
        .                       | hir::ItemKind::TyAlias(..) => {
      492 ( 0.00%)                  if item_level.is_some() {
      808 ( 0.00%)                      self.reach(item.def_id, item_level).generics().predicates().ty();
        .                           }
        .                       }
       16 ( 0.00%)              hir::ItemKind::Trait(.., trait_item_refs) => {
       30 ( 0.00%)                  if item_level.is_some() {
       64 ( 0.00%)                      self.reach(item.def_id, item_level).generics().predicates();
        .           
        .                               for trait_item_ref in trait_item_refs {
       60 ( 0.00%)                          let mut reach = self.reach(trait_item_ref.id.def_id, item_level);
      120 ( 0.00%)                          reach.generics().predicates();
        .           
       54 ( 0.00%)                          if trait_item_ref.kind == AssocItemKind::Type
       16 ( 0.00%)                              && !trait_item_ref.defaultness.has_value()
        .                                   {
        .                                       // No type to visit.
        .                                   } else {
       44 ( 0.00%)                              reach.ty();
        .                                   }
        .                               }
        .                           }
        .                       }
        .                       hir::ItemKind::TraitAlias(..) => {
        .                           if item_level.is_some() {
        .                               self.reach(item.def_id, item_level).generics().predicates();
        .                           }
        .                       }
        .                       // Visit everything except for private impl items.
        .                       hir::ItemKind::Impl(ref impl_) => {
    1,004 ( 0.00%)                  if item_level.is_some() {
    9,720 ( 0.00%)                      self.reach(item.def_id, item_level).generics().predicates().ty().trait_ref();
        .           
      972 ( 0.00%)                      for impl_item_ref in impl_.items {
    4,896 ( 0.00%)                          let impl_item_level = self.get(impl_item_ref.id.def_id);
    6,504 ( 0.00%)                          if impl_item_level.is_some() {
   16,260 ( 0.00%)                              self.reach(impl_item_ref.id.def_id, impl_item_level)
        .                                           .generics()
        .                                           .predicates()
        .                                           .ty();
        .                                   }
        .                               }
        .                           }
        .                       }
        .           
        .                       // Visit everything, but enum variants have their own levels.
        .                       hir::ItemKind::Enum(ref def, _) => {
      136 ( 0.00%)                  if item_level.is_some() {
    1,072 ( 0.00%)                      self.reach(item.def_id, item_level).generics().predicates();
        .                           }
      136 ( 0.00%)                  for variant in def.variants {
    5,256 ( 0.00%)                      let variant_level = self.get(self.tcx.hir().local_def_id(variant.id));
      584 ( 0.00%)                      if variant_level.is_some() {
    1,160 ( 0.00%)                          for field in variant.data.fields() {
    3,564 ( 0.00%)                              self.reach(self.tcx.hir().local_def_id(field.hir_id), variant_level)
        .                                           .ty();
        .                                   }
        .                                   // Corner case: if the variant is reachable, but its
        .                                   // enum is not, make the enum reachable as well.
    1,160 ( 0.00%)                          self.update(item.def_id, variant_level);
        .                               }
        .                           }
        .                       }
        .                       // Visit everything, but foreign items have their own levels.
        .                       hir::ItemKind::ForeignMod { items, .. } => {
        .                           for foreign_item in items {
        .                               let foreign_item_level = self.get(foreign_item.id.def_id);
        .                               if foreign_item_level.is_some() {
-- line 806 ----------------------------------------
-- line 808 ----------------------------------------
        .                                       .generics()
        .                                       .predicates()
        .                                       .ty();
        .                               }
        .                           }
        .                       }
        .                       // Visit everything except for private fields.
        .                       hir::ItemKind::Struct(ref struct_def, _) | hir::ItemKind::Union(ref struct_def, _) => {
       76 ( 0.00%)                  if item_level.is_some() {
      544 ( 0.00%)                      self.reach(item.def_id, item_level).generics().predicates();
      136 ( 0.00%)                      for field in struct_def.fields() {
    1,176 ( 0.00%)                          let def_id = self.tcx.hir().local_def_id(field.hir_id);
      504 ( 0.00%)                          let field_level = self.get(def_id);
      168 ( 0.00%)                          if field_level.is_some() {
       40 ( 0.00%)                              self.reach(def_id, field_level).ty();
        .                                   }
        .                               }
        .                           }
        .                       }
        .                   }
        .           
        .                   let orig_level = mem::replace(&mut self.prev_level, item_level);
    8,676 ( 0.00%)          intravisit::walk_item(self, item);
    2,892 ( 0.00%)          self.prev_level = orig_level;
   23,136 ( 0.00%)      }
        .           
        .               fn visit_block(&mut self, b: &'tcx hir::Block<'tcx>) {
        .                   // Blocks can have public items, for example impls, but they always
        .                   // start as completely private regardless of publicity of a function,
        .                   // constant, type, field, etc., in which this block resides.
        .                   let orig_level = mem::replace(&mut self.prev_level, None);
        .                   intravisit::walk_block(self, b);
        .                   self.prev_level = orig_level;
        .               }
        .           }
        .           
        .           impl ReachEverythingInTheInterfaceVisitor<'_, '_> {
   22,694 ( 0.00%)      fn generics(&mut self) -> &mut Self {
   12,968 ( 0.00%)          for param in &self.ev.tcx.generics_of(self.item_def_id).params {
    1,578 ( 0.00%)              match param.kind {
        .                           GenericParamDefKind::Lifetime => {}
      162 ( 0.00%)                  GenericParamDefKind::Type { has_default, .. } => {
      162 ( 0.00%)                      if has_default {
        .                                   self.visit(self.ev.tcx.type_of(param.def_id));
        .                               }
        .                           }
        .                           GenericParamDefKind::Const { has_default, .. } => {
        .                               self.visit(self.ev.tcx.type_of(param.def_id));
        .                               if has_default {
        .                                   self.visit(self.ev.tcx.const_param_default(param.def_id));
        .                               }
        .                           }
        .                       }
        .                   }
        .                   self
   29,178 ( 0.00%)      }
        .           
   16,210 ( 0.00%)      fn predicates(&mut self) -> &mut Self {
    9,726 ( 0.00%)          self.visit_predicates(self.ev.tcx.predicates_of(self.item_def_id));
        .                   self
   19,452 ( 0.00%)      }
        .           
   15,160 ( 0.00%)      fn ty(&mut self) -> &mut Self {
    9,492 ( 0.00%)          self.visit(self.ev.tcx.type_of(self.item_def_id));
        .                   self
   18,192 ( 0.00%)      }
        .           
        .               fn trait_ref(&mut self) -> &mut Self {
    5,832 ( 0.00%)          if let Some(trait_ref) = self.ev.tcx.impl_trait_ref(self.item_def_id) {
        .                       self.visit_trait(trait_ref);
        .                   }
        .                   self
        .               }
        .           }
        .           
        .           impl<'tcx> DefIdVisitor<'tcx> for ReachEverythingInTheInterfaceVisitor<'_, 'tcx> {
        .               fn tcx(&self) -> TyCtxt<'tcx> {
   45,588 ( 0.00%)          self.ev.tcx
        .               }
   54,830 ( 0.00%)      fn visit_def_id(
        .                   &mut self,
        .                   def_id: DefId,
        .                   _kind: &str,
        .                   _descr: &dyn fmt::Display,
        .               ) -> ControlFlow<Self::BreakTy> {
   32,912 ( 0.00%)          if let Some(def_id) = def_id.as_local() {
   31,395 ( 0.00%)              if let (ty::Visibility::Public, _) | (_, Some(AccessLevel::ReachableFromImplTrait)) =
    7,874 ( 0.00%)                  (self.tcx().visibility(def_id.to_def_id()), self.access_level)
        .                       {
        .                           self.ev.update(def_id, self.access_level);
        .                       }
        .                   }
        .                   ControlFlow::CONTINUE
   76,762 ( 0.00%)      }
        .           }
        .           
        .           //////////////////////////////////////////////////////////////////////////////////////
        .           /// Name privacy visitor, checks privacy and reports violations.
        .           /// Most of name privacy checks are performed during the main resolution phase,
        .           /// or later in type checking when field accesses and associated items are resolved.
        .           /// This pass performs remaining checks for fields in struct expressions and patterns.
        .           //////////////////////////////////////////////////////////////////////////////////////
-- line 909 ----------------------------------------
-- line 920 ----------------------------------------
        .               /// `Expr` or `Pat` nodes (they are guaranteed to be found only in bodies).
        .               #[track_caller]
        .               fn typeck_results(&self) -> &'tcx ty::TypeckResults<'tcx> {
        .                   self.maybe_typeck_results
        .                       .expect("`NamePrivacyVisitor::typeck_results` called outside of body")
        .               }
        .           
        .               // Checks that a field in a struct constructor (expression or pattern) is accessible.
   29,010 ( 0.00%)      fn check_field(
        .                   &mut self,
        .                   use_ctxt: Span,        // syntax context of the field name at the use site
        .                   span: Span,            // span of the field pattern, e.g., `x: 0`
        .                   def: &'tcx ty::AdtDef, // definition of the struct or enum
        .                   field: &'tcx ty::FieldDef,
        .                   in_update_syntax: bool,
        .               ) {
    5,802 ( 0.00%)          if def.is_enum() {
        .                       return;
        .                   }
        .           
        .                   // definition of the field
        .                   let ident = Ident::new(kw::Empty, use_ctxt);
    3,988 ( 0.00%)          let hir_id = self.tcx.hir().local_def_id_to_hir_id(self.current_item);
   13,958 ( 0.00%)          let def_id = self.tcx.adjust_ident_and_get_scope(ident, def.did, hir_id).1;
    1,994 ( 0.00%)          if !field.vis.is_accessible_from(def_id, self.tcx) {
        .                       let label = if in_update_syntax {
        .                           format!("field `{}` is private", field.name)
        .                       } else {
        .                           "private field".to_string()
        .                       };
        .           
        .                       struct_span_err!(
        .                           self.tcx.sess,
-- line 952 ----------------------------------------
-- line 955 ----------------------------------------
        .                           "field `{}` of {} `{}` is private",
        .                           field.name,
        .                           def.variant_descr(),
        .                           self.tcx.def_path_str(def.did)
        .                       )
        .                       .span_label(span, label)
        .                       .emit();
        .                   }
   23,208 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> Visitor<'tcx> for NamePrivacyVisitor<'tcx> {
        .               type NestedFilter = nested_filter::All;
        .           
        .               /// We want to visit items in the context of their containing
        .               /// module and so forth, so supply a crate for doing a deep walk.
        .               fn nested_visit_map(&mut self) -> Self::Map {
    2,333 ( 0.00%)          self.tcx.hir()
        .               }
        .           
        .               fn visit_mod(&mut self, _m: &'tcx hir::Mod<'tcx>, _s: Span, _n: hir::HirId) {
        .                   // Don't visit nested modules, since we run a separate visitor walk
        .                   // for each module in `privacy_access_levels`
        .               }
        .           
        .               fn visit_nested_body(&mut self, body: hir::BodyId) {
        .                   let old_maybe_typeck_results =
    6,971 ( 0.00%)              self.maybe_typeck_results.replace(self.tcx.typeck_body(body));
    8,178 ( 0.00%)          let body = self.tcx.hir().body(body);
        .                   self.visit_body(body);
      726 ( 0.00%)          self.maybe_typeck_results = old_maybe_typeck_results;
        .               }
        .           
        .               fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {
    1,446 ( 0.00%)          let orig_current_item = mem::replace(&mut self.current_item, item.def_id);
    4,309 ( 0.00%)          intravisit::walk_item(self, item);
    1,446 ( 0.00%)          self.current_item = orig_current_item;
        .               }
        .           
  212,094 ( 0.00%)      fn visit_expr(&mut self, expr: &'tcx hir::Expr<'tcx>) {
   47,132 ( 0.00%)          if let hir::ExprKind::Struct(qpath, fields, ref base) = expr.kind {
    4,716 ( 0.00%)              let res = self.typeck_results().qpath_res(qpath, expr.hir_id);
    2,358 ( 0.00%)              let adt = self.typeck_results().expr_ty(expr).ty_adt_def().unwrap();
    7,074 ( 0.00%)              let variant = adt.variant_of_res(res);
    3,144 ( 0.00%)              if let Some(base) = *base {
        .                           // If the expression uses FRU we need to make sure all the unmentioned fields
        .                           // are checked for privacy (RFC 736). Rather than computing the set of
        .                           // unmentioned fields, just check them all.
        .                           for (vf_index, variant_field) in variant.fields.iter().enumerate() {
        .                               let field = fields.iter().find(|f| {
        .                                   self.tcx.field_index(f.hir_id, self.typeck_results()) == vf_index
        .                               });
        .                               let (use_ctxt, span) = match field {
        .                                   Some(field) => (field.ident.span, field.span),
        .                                   None => (base.span, base.span),
        .                               };
        .                               self.check_field(use_ctxt, span, adt, variant_field, true);
        .                           }
        .                       } else {
        .                           for field in fields {
    2,186 ( 0.00%)                      let use_ctxt = field.ident.span;
   14,375 ( 0.00%)                      let index = self.tcx.field_index(field.hir_id, self.typeck_results());
   24,046 ( 0.00%)                      self.check_field(use_ctxt, field.span, adt, &variant.fields[index], false);
        .                           }
        .                       }
        .                   }
        .           
  235,660 ( 0.00%)          intravisit::walk_expr(self, expr);
        .               }
        .           
   39,304 ( 0.00%)      fn visit_pat(&mut self, pat: &'tcx hir::Pat<'tcx>) {
   10,336 ( 0.00%)          if let PatKind::Struct(ref qpath, fields, _) = pat.kind {
    3,570 ( 0.00%)              let res = self.typeck_results().qpath_res(qpath, pat.hir_id);
    2,040 ( 0.00%)              let adt = self.typeck_results().pat_ty(pat).ty_adt_def().unwrap();
    4,080 ( 0.00%)              let variant = adt.variant_of_res(res);
        .                       for field in fields {
      715 ( 0.00%)                  let use_ctxt = field.ident.span;
    4,964 ( 0.00%)                  let index = self.tcx.field_index(field.hir_id, self.typeck_results());
    7,150 ( 0.00%)                  self.check_field(use_ctxt, field.span, adt, &variant.fields[index], false);
        .                       }
        .                   }
        .           
   44,217 ( 0.00%)          intravisit::walk_pat(self, pat);
        .               }
        .           }
        .           
        .           ////////////////////////////////////////////////////////////////////////////////////////////
        .           /// Type privacy visitor, checks types for privacy and reports violations.
        .           /// Both explicitly written types and inferred types of expressions and patterns are checked.
        .           /// Checks are performed on "semantic" types regardless of names and their hygiene.
        .           ////////////////////////////////////////////////////////////////////////////////////////////
-- line 1045 ----------------------------------------
-- line 1061 ----------------------------------------
        .                       .expect("`TypePrivacyVisitor::typeck_results` called outside of body")
        .               }
        .           
        .               fn item_is_accessible(&self, did: DefId) -> bool {
        .                   self.tcx.visibility(did).is_accessible_from(self.current_item.to_def_id(), self.tcx)
        .               }
        .           
        .               // Take node-id of an expression or pattern and check its type for privacy.
  207,844 ( 0.00%)      fn check_expr_pat_type(&mut self, id: hir::HirId, span: Span) -> bool {
   29,692 ( 0.00%)          self.span = span;
   29,692 ( 0.00%)          let typeck_results = self.typeck_results();
        .                   let result: ControlFlow<()> = try {
  118,768 ( 0.00%)              self.visit(typeck_results.node_type(id))?;
  237,536 ( 0.00%)              self.visit(typeck_results.node_substs(id))?;
  267,228 ( 0.01%)              if let Some(adjustments) = typeck_results.adjustments().get(id) {
        .                           adjustments.iter().try_for_each(|adjustment| self.visit(adjustment.target))?;
        .                       }
        .                   };
        .                   result.is_break()
  237,536 ( 0.00%)      }
        .           
        .               fn check_def_id(&mut self, def_id: DefId, kind: &str, descr: &dyn fmt::Display) -> bool {
  132,412 ( 0.00%)          let is_error = !self.item_is_accessible(def_id);
        .                   if is_error {
        .                       self.tcx
        .                           .sess
        .                           .struct_span_err(self.span, &format!("{} `{}` is private", kind, descr))
        .                           .span_label(self.span, &format!("private {}", kind))
        .                           .emit();
        .                   }
        .                   is_error
-- line 1091 ----------------------------------------
-- line 1093 ----------------------------------------
        .           }
        .           
        .           impl<'tcx> Visitor<'tcx> for TypePrivacyVisitor<'tcx> {
        .               type NestedFilter = nested_filter::All;
        .           
        .               /// We want to visit items in the context of their containing
        .               /// module and so forth, so supply a crate for doing a deep walk.
        .               fn nested_visit_map(&mut self) -> Self::Map {
    2,333 ( 0.00%)          self.tcx.hir()
        .               }
        .           
        .               fn visit_mod(&mut self, _m: &'tcx hir::Mod<'tcx>, _s: Span, _n: hir::HirId) {
        .                   // Don't visit nested modules, since we run a separate visitor walk
        .                   // for each module in `privacy_access_levels`
        .               }
        .           
   13,630 ( 0.00%)      fn visit_nested_body(&mut self, body: hir::BodyId) {
        .                   let old_maybe_typeck_results =
    4,089 ( 0.00%)              self.maybe_typeck_results.replace(self.tcx.typeck_body(body));
    8,178 ( 0.00%)          let body = self.tcx.hir().body(body);
        .                   self.visit_body(body);
    1,363 ( 0.00%)          self.maybe_typeck_results = old_maybe_typeck_results;
   10,904 ( 0.00%)      }
        .           
        .               fn visit_generic_arg(&mut self, generic_arg: &'tcx hir::GenericArg<'tcx>) {
   10,307 ( 0.00%)          match generic_arg {
    2,992 ( 0.00%)              hir::GenericArg::Type(t) => self.visit_ty(t),
        .                       hir::GenericArg::Infer(inf) => self.visit_infer(inf),
        .                       hir::GenericArg::Lifetime(_) | hir::GenericArg::Const(_) => {}
        .                   }
        .               }
        .           
   58,317 ( 0.00%)      fn visit_ty(&mut self, hir_ty: &'tcx hir::Ty<'tcx>) {
   16,662 ( 0.00%)          self.span = hir_ty.span;
   24,993 ( 0.00%)          if let Some(typeck_results) = self.maybe_typeck_results {
        .                       // Types in bodies.
    9,720 ( 0.00%)              if self.visit(typeck_results.node_type(hir_ty.hir_id)).is_break() {
        .                           return;
        .                       }
        .                   } else {
        .                       // Types in signatures.
        .                       // FIXME: This is very ineffective. Ideally each HIR type should be converted
        .                       // into a semantic type only once and the result should be cached somehow.
   15,273 ( 0.00%)              if self.visit(rustc_typeck::hir_ty_to_ty(self.tcx, hir_ty)).is_break() {
        .                           return;
        .                       }
        .                   }
        .           
   24,993 ( 0.00%)          intravisit::walk_ty(self, hir_ty);
   49,986 ( 0.00%)      }
        .           
        .               fn visit_infer(&mut self, inf: &'tcx hir::InferArg) {
        .                   self.span = inf.span;
        .                   if let Some(typeck_results) = self.maybe_typeck_results {
        .                       if let Some(ty) = typeck_results.node_type_opt(inf.hir_id) {
        .                           if self.visit(ty).is_break() {
        .                               return;
        .                           }
-- line 1150 ----------------------------------------
-- line 1152 ----------------------------------------
        .                           // We don't do anything for const infers here.
        .                       }
        .                   } else {
        .                       bug!("visit_infer without typeck_results");
        .                   }
        .                   intravisit::walk_inf(self, inf);
        .               }
        .           
    4,944 ( 0.00%)      fn visit_trait_ref(&mut self, trait_ref: &'tcx hir::TraitRef<'tcx>) {
    1,854 ( 0.00%)          self.span = trait_ref.path.span;
      618 ( 0.00%)          if self.maybe_typeck_results.is_none() {
        .                       // Avoid calling `hir_trait_to_predicates` in bodies, it will ICE.
        .                       // The traits' privacy in bodies is already checked as a part of trait object types.
      618 ( 0.00%)              let bounds = rustc_typeck::hir_trait_to_predicates(
      618 ( 0.00%)                  self.tcx,
        .                           trait_ref,
        .                           // NOTE: This isn't really right, but the actual type doesn't matter here. It's
        .                           // just required by `ty::TraitRef`.
    1,854 ( 0.00%)                  self.tcx.types.never,
        .                       );
        .           
    5,562 ( 0.00%)              for (trait_predicate, _, _) in bounds.trait_bounds {
    4,326 ( 0.00%)                  if self.visit_trait(trait_predicate.skip_binder()).is_break() {
        .                               return;
        .                           }
        .                       }
        .           
    3,799 ( 0.00%)              for (poly_predicate, _) in bounds.projection_bounds {
       78 ( 0.00%)                  let pred = poly_predicate.skip_binder();
        .                           let poly_pred_term = self.visit(pred.term);
       52 ( 0.00%)                  if poly_pred_term.is_break()
        .                               || self.visit_projection_ty(pred.projection_ty).is_break()
        .                           {
        .                               return;
        .                           }
        .                       }
        .                   }
        .           
        .                   intravisit::walk_trait_ref(self, trait_ref);
    4,944 ( 0.00%)      }
        .           
        .               // Check types of expressions
  212,094 ( 0.00%)      fn visit_expr(&mut self, expr: &'tcx hir::Expr<'tcx>) {
  212,094 ( 0.00%)          if self.check_expr_pat_type(expr.hir_id, expr.span) {
        .                       // Do not check nested expressions if the error already happened.
        .                       return;
        .                   }
  159,852 ( 0.00%)          match expr.kind {
      447 ( 0.00%)              hir::ExprKind::Assign(_, rhs, _) | hir::ExprKind::Match(rhs, ..) => {
        .                           // Do not report duplicate errors for `x = y` and `match x { ... }`.
    2,961 ( 0.00%)                  if self.check_expr_pat_type(rhs.hir_id, rhs.span) {
        .                               return;
        .                           }
        .                       }
    1,078 ( 0.00%)              hir::ExprKind::MethodCall(segment, ..) => {
        .                           // Method calls have to be checked specially.
    2,156 ( 0.00%)                  self.span = segment.ident.span;
    6,468 ( 0.00%)                  if let Some(def_id) = self.typeck_results().type_dependent_def_id(expr.hir_id) {
    3,234 ( 0.00%)                      if self.visit(self.tcx.type_of(def_id)).is_break() {
        .                                   return;
        .                               }
        .                           } else {
        .                               self.tcx
        .                                   .sess
        .                                   .delay_span_bug(expr.span, "no type-dependent def for method call");
        .                           }
        .                       }
        .                       _ => {}
        .                   }
        .           
   70,698 ( 0.00%)          intravisit::walk_expr(self, expr);
  188,528 ( 0.00%)      }
        .           
        .               // Prohibit access to associated items with insufficient nominal visibility.
        .               //
        .               // Additionally, until better reachability analysis for macros 2.0 is available,
        .               // we prohibit access to private statics from other crates, this allows to give
        .               // more code internal visibility at link time. (Access to private functions
        .               // is already prohibited by type privacy for function types.)
  154,620 ( 0.00%)      fn visit_qpath(&mut self, qpath: &'tcx hir::QPath<'tcx>, id: hir::HirId, span: Span) {
   30,924 ( 0.00%)          let def = match qpath {
   40,686 ( 0.00%)              hir::QPath::Resolved(_, path) => match path.res {
   42,726 ( 0.00%)                  Res::Def(kind, def_id) => Some((kind, def_id)),
        .                           _ => None,
        .                       },
    1,900 ( 0.00%)              hir::QPath::TypeRelative(..) | hir::QPath::LangItem(..) => self
        .                           .maybe_typeck_results
   16,632 ( 0.00%)                  .and_then(|typeck_results| typeck_results.type_dependent_def(id)),
        .                   };
        .                   let def = def.filter(|(kind, _)| {
   17,938 ( 0.00%)              matches!(
        .                           kind,
        .                           DefKind::AssocFn | DefKind::AssocConst | DefKind::AssocTy | DefKind::Static
        .                       )
        .                   });
        .                   if let Some((kind, def_id)) = def {
        .                       let is_local_static =
    8,436 ( 0.00%)                  if let DefKind::Static = kind { def_id.is_local() } else { false };
    4,882 ( 0.00%)              if !self.item_is_accessible(def_id) && !is_local_static {
        .                           let sess = self.tcx.sess;
        .                           let sm = sess.source_map();
        .                           let name = match qpath {
        .                               hir::QPath::Resolved(..) | hir::QPath::LangItem(..) => {
        .                                   sm.span_to_snippet(qpath.span()).ok()
        .                               }
        .                               hir::QPath::TypeRelative(_, segment) => Some(segment.ident.to_string()),
        .                           };
-- line 1258 ----------------------------------------
-- line 1263 ----------------------------------------
        .                           };
        .                           sess.struct_span_err(span, &msg)
        .                               .span_label(span, &format!("private {}", kind))
        .                               .emit();
        .                           return;
        .                       }
        .                   }
        .           
  170,082 ( 0.00%)          intravisit::walk_qpath(self, qpath, id, span);
        .               }
        .           
        .               // Check types of patterns.
        .               fn visit_pat(&mut self, pattern: &'tcx hir::Pat<'tcx>) {
   31,298 ( 0.00%)          if self.check_expr_pat_type(pattern.hir_id, pattern.span) {
        .                       // Do not check nested patterns if the error already happened.
        .                       return;
        .                   }
        .           
   16,556 ( 0.00%)          intravisit::walk_pat(self, pattern);
        .               }
        .           
    4,000 ( 0.00%)      fn visit_local(&mut self, local: &'tcx hir::Local<'tcx>) {
    2,400 ( 0.00%)          if let Some(init) = local.init {
    5,530 ( 0.00%)              if self.check_expr_pat_type(init.hir_id, init.span) {
        .                           // Do not report duplicate errors for `let x = y`.
        .                           return;
        .                       }
        .                   }
        .           
        .                   intravisit::walk_local(self, local);
    3,160 ( 0.00%)      }
        .           
        .               // Check types in item interfaces.
        .               fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {
    1,446 ( 0.00%)          let orig_current_item = mem::replace(&mut self.current_item, item.def_id);
        .                   let old_maybe_typeck_results = self.maybe_typeck_results.take();
    4,309 ( 0.00%)          intravisit::walk_item(self, item);
    1,446 ( 0.00%)          self.maybe_typeck_results = old_maybe_typeck_results;
    1,500 ( 0.00%)          self.current_item = orig_current_item;
        .               }
        .           }
        .           
        .           impl<'tcx> DefIdVisitor<'tcx> for TypePrivacyVisitor<'tcx> {
        .               fn tcx(&self) -> TyCtxt<'tcx> {
  267,702 ( 0.01%)          self.tcx
        .               }
  993,090 ( 0.02%)      fn visit_def_id(
        .                   &mut self,
        .                   def_id: DefId,
        .                   kind: &str,
        .                   descr: &dyn fmt::Display,
        .               ) -> ControlFlow<Self::BreakTy> {
        .                   if self.check_def_id(def_id, kind, descr) {
        .                       ControlFlow::BREAK
        .                   } else {
        .                       ControlFlow::CONTINUE
        .                   }
  595,854 ( 0.01%)      }
        .           }
        .           
        .           ///////////////////////////////////////////////////////////////////////////////
        .           /// Obsolete visitors for checking for private items in public interfaces.
        .           /// These visitors are supposed to be kept in frozen state and produce an
        .           /// "old error node set". For backward compatibility the new visitor reports
        .           /// warnings instead of hard errors when the erroneous node is not in this old set.
        .           ///////////////////////////////////////////////////////////////////////////////
-- line 1328 ----------------------------------------
-- line 1342 ----------------------------------------
        .               /// Whether we've recurred at all (i.e., if we're pointing at the
        .               /// first type on which `visit_ty` was called).
        .               at_outer_type: bool,
        .               /// Whether that first type is a public path.
        .               outer_type_is_public_path: bool,
        .           }
        .           
        .           impl<'a, 'tcx> ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {
    1,794 ( 0.00%)      fn path_is_private_type(&self, path: &hir::Path<'_>) -> bool {
    5,454 ( 0.00%)          let did = match path.res {
        .                       Res::PrimTy(..) | Res::SelfTy(..) | Res::Err => return false,
    6,708 ( 0.00%)              res => res.def_id(),
        .                   };
        .           
        .                   // A path can only be private if:
        .                   // it's in this crate...
    1,118 ( 0.00%)          if let Some(did) = did.as_local() {
        .                       // .. and it corresponds to a private type in the AST (this returns
        .                       // `None` for type parameters).
    4,307 ( 0.00%)              match self.tcx.hir().find(self.tcx.hir().local_def_id_to_hir_id(did)) {
    3,118 ( 0.00%)                  Some(Node::Item(item)) => !item.vis.node.is_pub(),
        .                           Some(_) | None => false,
        .                       }
        .                   } else {
        .                       false
        .                   }
    3,588 ( 0.00%)      }
        .           
        .               fn trait_is_public(&self, trait_id: LocalDefId) -> bool {
        .                   // FIXME: this would preferably be using `exported_items`, but all
        .                   // traits are exported currently (see `EmbargoVisitor.exported_trait`).
        .                   self.access_levels.is_public(trait_id)
        .               }
        .           
        .               fn check_generic_bound(&mut self, bound: &hir::GenericBound<'_>) {
       98 ( 0.00%)          if let hir::GenericBound::Trait(ref trait_ref, _) = *bound {
       73 ( 0.00%)              if self.path_is_private_type(trait_ref.trait_ref.path) {
        .                           self.old_error_set.insert(trait_ref.trait_ref.hir_ref_id);
        .                       }
        .                   }
        .               }
        .           
        .               fn item_is_public(&self, def_id: LocalDefId, vis: &hir::Visibility<'_>) -> bool {
    1,455 ( 0.00%)          self.access_levels.is_reachable(def_id) || vis.node.is_pub()
        .               }
        .           }
        .           
        .           impl<'a, 'b, 'tcx, 'v> Visitor<'v> for ObsoleteCheckTypeForPrivatenessVisitor<'a, 'b, 'tcx> {
        .               fn visit_generic_arg(&mut self, generic_arg: &'v hir::GenericArg<'v>) {
       62 ( 0.00%)          match generic_arg {
        .                       hir::GenericArg::Type(t) => self.visit_ty(t),
        .                       hir::GenericArg::Infer(inf) => self.visit_ty(&inf.to_ty()),
        .                       hir::GenericArg::Lifetime(_) | hir::GenericArg::Const(_) => {}
        .                   }
        .               }
        .           
        .               fn visit_ty(&mut self, ty: &hir::Ty<'_>) {
    2,505 ( 0.00%)          if let hir::TyKind::Path(hir::QPath::Resolved(_, path)) = ty.kind {
    2,004 ( 0.00%)              if self.inner.path_is_private_type(path) {
        .                           self.contains_private = true;
        .                           // Found what we're looking for, so let's stop working.
        .                           return;
        .                       }
        .                   }
        .                   if let hir::TyKind::Path(_) = ty.kind {
       18 ( 0.00%)              if self.at_outer_type {
      486 ( 0.00%)                  self.outer_type_is_public_path = true;
        .                       }
        .                   }
      981 ( 0.00%)          self.at_outer_type = false;
      990 ( 0.00%)          intravisit::walk_ty(self, ty)
    1,944 ( 0.00%)      }
        .           
        .               // Don't want to recurse into `[, .. expr]`.
        .               fn visit_expr(&mut self, _: &hir::Expr<'_>) {}
        .           }
        .           
        .           impl<'a, 'tcx> Visitor<'tcx> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {
        .               type NestedFilter = nested_filter::All;
        .           
        .               /// We want to visit items in the context of their containing
        .               /// module and so forth, so supply a crate for doing a deep walk.
        .               fn nested_visit_map(&mut self) -> Self::Map {
    2,032 ( 0.00%)          self.tcx.hir()
        .               }
        .           
   12,771 ( 0.00%)      fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {
    5,676 ( 0.00%)          match item.kind {
        .                       // Contents of a private mod can be re-exported, so we need
        .                       // to check internals.
        .                       hir::ItemKind::Mod(_) => {}
        .           
        .                       // An `extern {}` doesn't introduce a new privacy
        .                       // namespace (the contents have their own privacies).
        .                       hir::ItemKind::ForeignMod { .. } => {}
        .           
       10 ( 0.00%)              hir::ItemKind::Trait(.., bounds, _) => {
       24 ( 0.00%)                  if !self.trait_is_public(item.def_id) {
        .                               return;
        .                           }
        .           
        .                           for bound in bounds.iter() {
        .                               self.check_generic_bound(bound)
        .                           }
        .                       }
        .           
-- line 1447 ----------------------------------------
-- line 1454 ----------------------------------------
        .                           // `impl [... for] Private` is never visible.
        .                           let self_contains_private;
        .                           // `impl [... for] Public<...>`, but not `impl [... for]
        .                           // Vec<Public>` or `(Public,)`, etc.
        .                           let self_is_public_path;
        .           
        .                           // Check the properties of the `Self` type:
        .                           {
    1,968 ( 0.00%)                      let mut visitor = ObsoleteCheckTypeForPrivatenessVisitor {
        .                                   inner: self,
        .                                   contains_private: false,
        .                                   at_outer_type: true,
        .                                   outer_type_is_public_path: false,
        .                               };
      492 ( 0.00%)                      visitor.visit_ty(impl_.self_ty);
        .                               self_contains_private = visitor.contains_private;
        .                               self_is_public_path = visitor.outer_type_is_public_path;
        .                           }
        .           
        .                           // Miscellaneous info about the impl:
        .           
        .                           // `true` iff this is `impl Private for ...`.
        .                           let not_private_trait = impl_.of_trait.as_ref().map_or(
        .                               true, // no trait counts as public trait
        .                               |tr| {
    1,377 ( 0.00%)                          if let Some(def_id) = tr.path.res.def_id().as_local() {
       78 ( 0.00%)                              self.trait_is_public(def_id)
        .                                   } else {
        .                                       true // external traits must be public
        .                                   }
        .                               },
        .                           );
        .           
        .                           // `true` iff this is a trait impl or at least one method is public.
        .                           //
        .                           // `impl Public { $( fn ...() {} )* }` is not visible.
        .                           //
        .                           // This is required over just using the methods' privacy
        .                           // directly because we might have `impl<T: Foo<Private>> ...`,
        .                           // and we shouldn't warn about the generics if all the methods
        .                           // are private (because `T` won't be visible externally).
        .                           let trait_or_some_public_method = impl_.of_trait.is_some()
       33 ( 0.00%)                      || impl_.items.iter().any(|impl_item_ref| {
      136 ( 0.00%)                          let impl_item = self.tcx.hir().impl_item(impl_item_ref.id);
      228 ( 0.00%)                          match impl_item.kind {
        .                                       hir::ImplItemKind::Const(..) | hir::ImplItemKind::Fn(..) => {
        .                                           self.access_levels.is_reachable(impl_item_ref.id.def_id)
        .                                       }
        .                                       hir::ImplItemKind::TyAlias(_) => false,
        .                                   }
        .                               });
        .           
      980 ( 0.00%)                  if !self_contains_private && not_private_trait && trait_or_some_public_method {
        .                               intravisit::walk_generics(self, &impl_.generics);
        .           
      964 ( 0.00%)                      match impl_.of_trait {
        .                                   None => {
       31 ( 0.00%)                              for impl_item_ref in impl_.items {
        .                                           // This is where we choose whether to walk down
        .                                           // further into the impl to check its items. We
        .                                           // should only walk into public items so that we
        .                                           // don't erroneously report errors for private
        .                                           // types in private items.
    1,248 ( 0.00%)                                  let impl_item = self.tcx.hir().impl_item(impl_item_ref.id);
    1,195 ( 0.00%)                                  match impl_item.kind {
        .                                               hir::ImplItemKind::Const(..) | hir::ImplItemKind::Fn(..)
      425 ( 0.00%)                                          if self
      208 ( 0.00%)                                              .item_is_public(impl_item.def_id, &impl_item.vis) =>
        .                                               {
        .                                                   intravisit::walk_impl_item(self, impl_item)
        .                                               }
        .                                               hir::ImplItemKind::TyAlias(..) => {
        .                                                   intravisit::walk_impl_item(self, impl_item)
        .                                               }
        .                                               _ => {}
        .                                           }
-- line 1529 ----------------------------------------
-- line 1538 ----------------------------------------
        .                                       //
        .                                       // Those in 1. can only occur if the trait is in
        .                                       // this crate and will've been warned about on the
        .                                       // trait definition (there's no need to warn twice
        .                                       // so we don't check the methods).
        .                                       //
        .                                       // Those in 2. are warned via walk_generics and this
        .                                       // call here.
    1,353 ( 0.00%)                              intravisit::walk_path(self, tr.path);
        .           
        .                                       // Those in 3. are warned with this call.
      451 ( 0.00%)                              for impl_item_ref in impl_.items {
    3,020 ( 0.00%)                                  let impl_item = self.tcx.hir().impl_item(impl_item_ref.id);
    3,906 ( 0.00%)                                  if let hir::ImplItemKind::TyAlias(ty) = impl_item.kind {
        .                                               self.visit_ty(ty);
        .                                           }
        .                                       }
        .                                   }
        .                               }
       30 ( 0.00%)                  } else if impl_.of_trait.is_none() && self_is_public_path {
        .                               // `impl Public<Private> { ... }`. Any public static
        .                               // methods will be visible as `Public::foo`.
        .                               let mut found_pub_static = false;
        1 ( 0.00%)                      for impl_item_ref in impl_.items {
        .                                   if self.access_levels.is_reachable(impl_item_ref.id.def_id)
        .                                       || self.tcx.visibility(impl_item_ref.id.def_id)
        .                                           == ty::Visibility::Public
        .                                   {
        .                                       let impl_item = self.tcx.hir().impl_item(impl_item_ref.id);
        .                                       match impl_item_ref.kind {
        .                                           AssocItemKind::Const => {
        .                                               found_pub_static = true;
-- line 1569 ----------------------------------------
-- line 1584 ----------------------------------------
        .                           return;
        .                       }
        .           
        .                       // `type ... = ...;` can contain private types, because
        .                       // we're introducing a new name.
        .                       hir::ItemKind::TyAlias(..) => return,
        .           
        .                       // Not at all public, so we don't care.
    5,257 ( 0.00%)              _ if !self.item_is_public(item.def_id, &item.vis) => {
        .                           return;
        .                       }
        .           
        .                       _ => {}
        .                   }
        .           
        .                   // We've carefully constructed it so that if we're here, then
        .                   // any `visit_ty`'s will be called on things that are in
        .                   // public signatures, i.e., things that we're interested in for
        .                   // this visitor.
    3,580 ( 0.00%)          intravisit::walk_item(self, item);
    8,488 ( 0.00%)      }
        .           
    2,528 ( 0.00%)      fn visit_generics(&mut self, generics: &'tcx hir::Generics<'tcx>) {
        .                   for param in generics.params {
       27 ( 0.00%)              for bound in param.bounds {
        .                           self.check_generic_bound(bound);
        .                       }
        .                   }
      316 ( 0.00%)          for predicate in generics.where_clause.predicates {
        3 ( 0.00%)              match predicate {
        .                           hir::WherePredicate::BoundPredicate(bound_pred) => {
        1 ( 0.00%)                      for bound in bound_pred.bounds.iter() {
        .                                   self.check_generic_bound(bound)
        .                               }
        .                           }
        .                           hir::WherePredicate::RegionPredicate(_) => {}
        .                           hir::WherePredicate::EqPredicate(eq_pred) => {
        .                               self.visit_ty(eq_pred.rhs_ty);
        .                           }
        .                       }
        .                   }
    2,528 ( 0.00%)      }
        .           
        .               fn visit_foreign_item(&mut self, item: &'tcx hir::ForeignItem<'tcx>) {
        .                   if self.access_levels.is_reachable(item.def_id) {
        .                       intravisit::walk_foreign_item(self, item)
        .                   }
        .               }
        .           
        .               fn visit_ty(&mut self, t: &'tcx hir::Ty<'tcx>) {
    5,848 ( 0.00%)          if let hir::TyKind::Path(hir::QPath::Resolved(_, path)) = t.kind {
    4,152 ( 0.00%)              if self.path_is_private_type(path) {
        .                           self.old_error_set.insert(t.hir_id);
        .                       }
        .                   }
    7,091 ( 0.00%)          intravisit::walk_ty(self, t)
        .               }
        .           
    2,320 ( 0.00%)      fn visit_variant(
        .                   &mut self,
        .                   v: &'tcx hir::Variant<'tcx>,
        .                   g: &'tcx hir::Generics<'tcx>,
        .                   item_id: hir::HirId,
        .               ) {
    2,900 ( 0.00%)          if self.access_levels.is_reachable(self.tcx.hir().local_def_id(v.id)) {
      290 ( 0.00%)              self.in_variant = true;
        .                       intravisit::walk_variant(self, v, g, item_id);
      290 ( 0.00%)              self.in_variant = false;
        .                   }
    2,030 ( 0.00%)      }
        .           
    1,410 ( 0.00%)      fn visit_field_def(&mut self, s: &'tcx hir::FieldDef<'tcx>) {
    1,684 ( 0.00%)          if s.vis.node.is_pub() || self.in_variant {
        .                       intravisit::walk_field_def(self, s);
        .                   }
      320 ( 0.00%)      }
        .           
        .               // We don't need to introspect into these at all: an
        .               // expression/block context can't possibly contain exported things.
        .               // (Making them no-ops stops us from traversing the whole AST without
        .               // having to be super careful about our `walk_...` calls above.)
        .               fn visit_block(&mut self, _: &'tcx hir::Block<'tcx>) {}
        .               fn visit_expr(&mut self, _: &'tcx hir::Expr<'tcx>) {}
        .           }
-- line 1667 ----------------------------------------
-- line 1679 ----------------------------------------
        .               /// The visitor checks that each component type is at least this visible.
        .               required_visibility: ty::Visibility,
        .               has_pub_restricted: bool,
        .               has_old_errors: bool,
        .               in_assoc_ty: bool,
        .           }
        .           
        .           impl SearchInterfaceForPrivateItemsVisitor<'_> {
    9,212 ( 0.00%)      fn generics(&mut self) -> &mut Self {
    3,948 ( 0.00%)          for param in &self.tcx.generics_of(self.item_def_id).params {
      717 ( 0.00%)              match param.kind {
        .                           GenericParamDefKind::Lifetime => {}
       90 ( 0.00%)                  GenericParamDefKind::Type { has_default, .. } => {
       90 ( 0.00%)                      if has_default {
        .                                   self.visit(self.tcx.type_of(param.def_id));
        .                               }
        .                           }
        .                           // FIXME(generic_const_exprs): May want to look inside const here
        .                           GenericParamDefKind::Const { .. } => {
        .                               self.visit(self.tcx.type_of(param.def_id));
        .                           }
        .                       }
        .                   }
        .                   self
   10,528 ( 0.00%)      }
        .           
    6,580 ( 0.00%)      fn predicates(&mut self) -> &mut Self {
        .                   // N.B., we use `explicit_predicates_of` and not `predicates_of`
        .                   // because we don't want to report privacy errors due to where
        .                   // clauses that the compiler inferred. We only want to
        .                   // consider the ones that the user wrote. This is important
        .                   // for the inferred outlives rules; see
        .                   // `src/test/ui/rfc-2093-infer-outlives/privacy.rs`.
    2,632 ( 0.00%)          self.visit_predicates(self.tcx.explicit_predicates_of(self.item_def_id));
        .                   self
    7,896 ( 0.00%)      }
        .           
       20 ( 0.00%)      fn bounds(&mut self) -> &mut Self {
        .                   self.visit_predicates(ty::GenericPredicates {
        .                       parent: None,
        8 ( 0.00%)              predicates: self.tcx.explicit_item_bounds(self.item_def_id),
        .                   });
        .                   self
       20 ( 0.00%)      }
        .           
    7,240 ( 0.00%)      fn ty(&mut self) -> &mut Self {
    2,896 ( 0.00%)          self.visit(self.tcx.type_of(self.item_def_id));
        .                   self
    7,240 ( 0.00%)      }
        .           
        .               fn check_def_id(&mut self, def_id: DefId, kind: &str, descr: &dyn fmt::Display) -> bool {
   21,561 ( 0.00%)          if self.leaks_private_dep(def_id) {
        .                       self.tcx.struct_span_lint_hir(
        .                           lint::builtin::EXPORTED_PRIVATE_DEPENDENCIES,
        .                           self.tcx.hir().local_def_id_to_hir_id(self.item_def_id),
        .                           self.tcx.def_span(self.item_def_id.to_def_id()),
        .                           |lint| {
        .                               lint.build(&format!(
        .                                   "{} `{}` from private dependency '{}' in public \
        .                                                           interface",
-- line 1738 ----------------------------------------
-- line 1740 ----------------------------------------
        .                                   descr,
        .                                   self.tcx.crate_name(def_id.krate)
        .                               ))
        .                               .emit()
        .                           },
        .                       );
        .                   }
        .           
   10,438 ( 0.00%)          let hir_id = match def_id.as_local() {
    3,025 ( 0.00%)              Some(def_id) => self.tcx.hir().local_def_id_to_hir_id(def_id),
        .                       None => return false,
        .                   };
        .           
        .                   let vis = self.tcx.visibility(def_id);
    5,915 ( 0.00%)          if !vis.is_at_least(self.required_visibility, self.tcx) {
        .                       let vis_descr = match vis {
        .                           ty::Visibility::Public => "public",
        .                           ty::Visibility::Invisible => "private",
        .                           ty::Visibility::Restricted(vis_def_id) => {
        .                               if vis_def_id == self.tcx.parent_module(hir_id).to_def_id() {
        .                                   "private"
        .                               } else if vis_def_id.is_top_level_module() {
        .                                   "crate-private"
-- line 1762 ----------------------------------------
-- line 1792 ----------------------------------------
        .                   false
        .               }
        .           
        .               /// An item is 'leaked' from a private dependency if all
        .               /// of the following are true:
        .               /// 1. It's contained within a public type
        .               /// 2. It comes from a private crate
        .               fn leaks_private_dep(&self, item_id: DefId) -> bool {
   13,164 ( 0.00%)          let ret = self.required_visibility.is_public() && self.tcx.is_private_dep(item_id.krate);
        .           
        .                   tracing::debug!("leaks_private_dep(item_id={:?})={}", item_id, ret);
        .                   ret
        .               }
        .           }
        .           
        .           impl<'tcx> DefIdVisitor<'tcx> for SearchInterfaceForPrivateItemsVisitor<'tcx> {
        .               fn tcx(&self) -> TyCtxt<'tcx> {
    7,306 ( 0.00%)          self.tcx
        .               }
   70,208 ( 0.00%)      fn visit_def_id(
        .                   &mut self,
        .                   def_id: DefId,
        .                   kind: &str,
        .                   descr: &dyn fmt::Display,
        .               ) -> ControlFlow<Self::BreakTy> {
        .                   if self.check_def_id(def_id, kind, descr) {
        .                       ControlFlow::BREAK
        .                   } else {
        .                       ControlFlow::CONTINUE
        .                   }
   39,492 ( 0.00%)      }
        .           }
        .           
        .           struct PrivateItemsInPublicInterfacesVisitor<'tcx> {
        .               tcx: TyCtxt<'tcx>,
        .               has_pub_restricted: bool,
        .               old_error_set_ancestry: LocalDefIdSet,
        .           }
        .           
        .           impl<'tcx> PrivateItemsInPublicInterfacesVisitor<'tcx> {
        .               fn check(
        .                   &self,
        .                   def_id: LocalDefId,
        .                   required_visibility: ty::Visibility,
        .               ) -> SearchInterfaceForPrivateItemsVisitor<'tcx> {
   12,998 ( 0.00%)          SearchInterfaceForPrivateItemsVisitor {
    1,210 ( 0.00%)              tcx: self.tcx,
        .                       item_def_id: def_id,
        .                       required_visibility,
    1,904 ( 0.00%)              has_pub_restricted: self.has_pub_restricted,
        .                       has_old_errors: self.old_error_set_ancestry.contains(&def_id),
        .                       in_assoc_ty: false,
        .                   }
        .               }
        .           
   11,908 ( 0.00%)      fn check_assoc_item(
        .                   &self,
        .                   def_id: LocalDefId,
        .                   assoc_item_kind: AssocItemKind,
        .                   defaultness: hir::Defaultness,
        .                   vis: ty::Visibility,
        .               ) {
        .                   let mut check = self.check(def_id, vis);
        .           
    1,832 ( 0.00%)          let (check_ty, is_assoc_ty) = match assoc_item_kind {
        .                       AssocItemKind::Const | AssocItemKind::Fn { .. } => (true, false),
      200 ( 0.00%)              AssocItemKind::Type => (defaultness.has_value(), true),
        .                   };
    1,832 ( 0.00%)          check.in_assoc_ty = is_assoc_ty;
    3,664 ( 0.00%)          check.generics().predicates();
      204 ( 0.00%)          if check_ty {
      912 ( 0.00%)              check.ty();
        .                   }
    7,328 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> Visitor<'tcx> for PrivateItemsInPublicInterfacesVisitor<'tcx> {
        .               type NestedFilter = nested_filter::OnlyBodies;
        .           
        .               fn nested_visit_map(&mut self) -> Self::Map {
      883 ( 0.00%)          self.tcx.hir()
        .               }
        .           
   13,014 ( 0.00%)      fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {
    1,446 ( 0.00%)          let tcx = self.tcx;
    1,446 ( 0.00%)          let item_visibility = tcx.visibility(item.def_id);
        .           
    7,230 ( 0.00%)          match item.kind {
        .                       // Crates are always public.
        .                       hir::ItemKind::ExternCrate(..) => {}
        .                       // All nested items are checked by `visit_item`.
        .                       hir::ItemKind::Mod(..) => {}
        .                       // Checked in resolve.
        .                       hir::ItemKind::Use(..) => {}
        .                       // No subitems.
        .                       hir::ItemKind::Macro(..) | hir::ItemKind::GlobalAsm(..) => {}
        .                       // Subitems of these items have inherited publicity.
        .                       hir::ItemKind::Const(..)
        .                       | hir::ItemKind::Static(..)
        .                       | hir::ItemKind::Fn(..)
        .                       | hir::ItemKind::TyAlias(..) => {
    1,476 ( 0.00%)                  self.check(item.def_id, item_visibility).generics().predicates().ty();
        .                       }
        .                       hir::ItemKind::OpaqueTy(..) => {
        .                           // `ty()` for opaque types is the underlying type,
        .                           // it's not a part of interface, so we skip it.
        .                           self.check(item.def_id, item_visibility).generics().bounds();
        .                       }
       60 ( 0.00%)              hir::ItemKind::Trait(.., trait_item_refs) => {
       60 ( 0.00%)                  self.check(item.def_id, item_visibility).generics().predicates();
        .           
        .                           for trait_item_ref in trait_item_refs {
      324 ( 0.00%)                      self.check_assoc_item(
       54 ( 0.00%)                          trait_item_ref.id.def_id,
        .                                   trait_item_ref.kind,
        .                                   trait_item_ref.defaultness,
        .                                   item_visibility,
        .                               );
        .           
      183 ( 0.00%)                      if let AssocItemKind::Type = trait_item_ref.kind {
       24 ( 0.00%)                          self.check(trait_item_ref.id.def_id, item_visibility).bounds();
        .                               }
        .                           }
        .                       }
        .                       hir::ItemKind::TraitAlias(..) => {
        .                           self.check(item.def_id, item_visibility).generics().predicates();
        .                       }
        .                       hir::ItemKind::Enum(ref def, _) => {
      272 ( 0.00%)                  self.check(item.def_id, item_visibility).generics().predicates();
        .           
       68 ( 0.00%)                  for variant in def.variants {
      292 ( 0.00%)                      for field in variant.data.fields() {
    2,400 ( 0.00%)                          self.check(self.tcx.hir().local_def_id(field.hir_id), item_visibility).ty();
        .                               }
        .                           }
        .                       }
        .                       // Subitems of foreign modules have their own publicity.
        .                       hir::ItemKind::ForeignMod { items, .. } => {
        .                           for foreign_item in items {
        .                               let vis = tcx.visibility(foreign_item.id.def_id);
        .                               self.check(foreign_item.id.def_id, vis).generics().predicates().ty();
        .                           }
        .                       }
        .                       // Subitems of structs and unions have their own publicity.
        .                       hir::ItemKind::Struct(ref struct_def, _) | hir::ItemKind::Union(ref struct_def, _) => {
      152 ( 0.00%)                  self.check(item.def_id, item_visibility).generics().predicates();
        .           
      114 ( 0.00%)                  for field in struct_def.fields() {
      540 ( 0.00%)                      let def_id = tcx.hir().local_def_id(field.hir_id);
        .                               let field_visibility = tcx.visibility(def_id);
      270 ( 0.00%)                      self.check(def_id, min(item_visibility, field_visibility, tcx)).ty();
        .                           }
        .                       }
        .                       // An inherent impl is public when its type is public
        .                       // Subitems of inherent impls have their own publicity.
        .                       // A trait impl is public when both its type and its trait are public
        .                       // Subitems of trait impls have inherited publicity.
        .                       hir::ItemKind::Impl(ref impl_) => {
    2,008 ( 0.00%)                  let impl_vis = ty::Visibility::of_impl(item.def_id, tcx, &Default::default());
        .                           // check that private components do not appear in the generics or predicates of inherent impls
        .                           // this check is intentionally NOT performed for impls of traits, per #90586
    1,004 ( 0.00%)                  if impl_.of_trait.is_none() {
      165 ( 0.00%)                      self.check(item.def_id, impl_vis).generics().predicates();
        .                           }
      502 ( 0.00%)                  for impl_item_ref in impl_.items {
      812 ( 0.00%)                      let impl_item_vis = if impl_.of_trait.is_none() {
      209 ( 0.00%)                          min(tcx.visibility(impl_item_ref.id.def_id), impl_vis, tcx)
        .                               } else {
        .                                   impl_vis
        .                               };
    4,963 ( 0.00%)                      self.check_assoc_item(
      862 ( 0.00%)                          impl_item_ref.id.def_id,
        .                                   impl_item_ref.kind,
        .                                   impl_item_ref.defaultness,
        .                                   impl_item_vis,
        .                               );
        .                           }
        .                       }
        .                   }
   11,568 ( 0.00%)      }
        .           }
        .           
        .           pub fn provide(providers: &mut Providers) {
        8 ( 0.00%)      *providers = Providers {
        .                   visibility,
        .                   privacy_access_levels,
        .                   check_private_in_public,
        .                   check_mod_privacy,
        .                   ..*providers
        .               };
        1 ( 0.00%)  }
        .           
   28,989 ( 0.00%)  fn visibility(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Visibility {
    3,221 ( 0.00%)      let def_id = def_id.expect_local();
        .               match tcx.resolutions(()).visibilities.get(&def_id) {
    4,024 ( 0.00%)          Some(vis) => *vis,
        .                   None => {
        .                       let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);
   13,835 ( 0.00%)              match tcx.hir().get(hir_id) {
        .                           // Unique types created for closures participate in type privacy checking.
        .                           // They have visibilities inherited from the module they are defined in.
        .                           Node::Expr(hir::Expr { kind: hir::ExprKind::Closure(..), .. }) => {
      462 ( 0.00%)                      ty::Visibility::Restricted(tcx.parent_module(hir_id).to_def_id())
        .                           }
        .                           // - AST lowering may clone `use` items and the clones don't
        .                           //   get their entries in the resolver's visibility table.
        .                           // - AST lowering also creates opaque type items with inherited visibilies.
        .                           //   Visibility on them should have no effect, but to avoid the visibility
        .                           //   query failing on some items, we provide it for opaque types as well.
        .                           Node::Item(hir::Item {
      479 ( 0.00%)                      vis,
        .                               kind: hir::ItemKind::Use(..) | hir::ItemKind::OpaqueTy(..),
        .                               ..
    2,874 ( 0.00%)                  }) => ty::Visibility::from_hir(vis, hir_id, tcx),
        .                           // Visibilities of trait impl items are inherited from their traits
        .                           // and are not filled in resolve.
        .                           Node::ImplItem(impl_item) => {
    8,489 ( 0.00%)                      match tcx.hir().get_by_def_id(tcx.hir().get_parent_item(hir_id)) {
        .                                   Node::Item(hir::Item {
        .                                       kind: hir::ItemKind::Impl(hir::Impl { of_trait: Some(tr), .. }),
        .                                       ..
      653 ( 0.00%)                          }) => tr.path.res.opt_def_id().map_or_else(
        .                                       || {
        .                                           tcx.sess.delay_span_bug(tr.path.span, "trait without a def-id");
        .                                           ty::Visibility::Public
        .                                       },
        .                                       |def_id| tcx.visibility(def_id),
        .                                   ),
        .                                   _ => span_bug!(impl_item.span, "the parent is not a trait impl"),
        .                               }
-- line 2021 ----------------------------------------
-- line 2023 ----------------------------------------
        .                           _ => span_bug!(
        .                               tcx.def_span(def_id),
        .                               "visibility table unexpectedly missing a def-id: {:?}",
        .                               def_id,
        .                           ),
        .                       }
        .                   }
        .               }
   25,768 ( 0.00%)  }
        .           
      232 ( 0.00%)  fn check_mod_privacy(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {
        .               // Check privacy of names not checked in previous compilation stages.
        .               let mut visitor =
      116 ( 0.00%)          NamePrivacyVisitor { tcx, maybe_typeck_results: None, current_item: module_def_id };
      261 ( 0.00%)      let (module, span, hir_id) = tcx.hir().get_module(module_def_id);
        .           
        .               intravisit::walk_mod(&mut visitor, module, hir_id);
        .           
        .               // Check privacy of explicitly written types and traits as well as
        .               // inferred types of expressions and patterns.
        .               let mut visitor =
      174 ( 0.00%)          TypePrivacyVisitor { tcx, maybe_typeck_results: None, current_item: module_def_id, span };
        .               intravisit::walk_mod(&mut visitor, module, hir_id);
      232 ( 0.00%)  }
        .           
        7 ( 0.00%)  fn privacy_access_levels(tcx: TyCtxt<'_>, (): ()) -> &AccessLevels {
        .               // Build up a set of all exported items in the AST. This is a set of all
        .               // items which are reachable from external crates based on visibility.
        9 ( 0.00%)      let mut visitor = EmbargoVisitor {
        .                   tcx,
        .                   access_levels: tcx.resolutions(()).access_levels.clone(),
        .                   macro_reachable: Default::default(),
        .                   prev_level: Some(AccessLevel::Public),
        .                   changed: false,
        .               };
        .           
        .               loop {
        .                   tcx.hir().walk_toplevel_module(&mut visitor);
        4 ( 0.00%)          if visitor.changed {
        3 ( 0.00%)              visitor.changed = false;
        .                   } else {
        .                       break;
        .                   }
        .               }
        .           
        1 ( 0.00%)      tcx.arena.alloc(visitor.access_levels)
        9 ( 0.00%)  }
        .           
        8 ( 0.00%)  fn check_private_in_public(tcx: TyCtxt<'_>, (): ()) {
        .               let access_levels = tcx.privacy_access_levels(());
        .           
        9 ( 0.00%)      let mut visitor = ObsoleteVisiblePrivateTypesVisitor {
        .                   tcx,
        .                   access_levels,
        .                   in_variant: false,
        .                   old_error_set: Default::default(),
        .               };
        .               tcx.hir().walk_toplevel_module(&mut visitor);
        .           
        .               let has_pub_restricted = {
        5 ( 0.00%)          let mut pub_restricted_visitor = PubRestrictedVisitor { tcx, has_pub_restricted: false };
        .                   tcx.hir().walk_toplevel_module(&mut pub_restricted_visitor);
        1 ( 0.00%)          pub_restricted_visitor.has_pub_restricted
        .               };
        .           
        .               let mut old_error_set_ancestry = HirIdSet::default();
        9 ( 0.00%)      for mut id in visitor.old_error_set.iter().copied() {
        .                   loop {
        .                       if !old_error_set_ancestry.insert(id) {
        .                           break;
        .                       }
        .                       let parent = tcx.hir().get_parent_node(id);
        .                       if parent == id {
        .                           break;
        .                       }
        .                       id = parent;
        .                   }
        .               }
        .           
        .               // Check for private types and traits in public interfaces.
        8 ( 0.00%)      let mut visitor = PrivateItemsInPublicInterfacesVisitor {
        .                   tcx,
        .                   has_pub_restricted,
        .                   // Only definition IDs are ever searched in `old_error_set_ancestry`,
        .                   // so we can filter away all non-definition IDs at this point.
        .                   old_error_set_ancestry: old_error_set_ancestry
        .                       .into_iter()
        .                       .filter_map(|hir_id| tcx.hir().opt_local_def_id(hir_id))
        .                       .collect(),
        .               };
        6 ( 0.00%)      tcx.hir().visit_all_item_likes(&mut DeepVisitor::new(&mut visitor));
        8 ( 0.00%)  }

  781,042 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_privacy/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs
--------------------------------------------------------------------------------
Ir                  

-- line 186 ----------------------------------------
         .           /// // use the values stored in map
         .           /// ```
         .           pub struct HashMap<K, V, S = DefaultHashBuilder, A: Allocator + Clone = Global> {
         .               pub(crate) hash_builder: S,
         .               pub(crate) table: RawTable<(K, V), A>,
         .           }
         .           
         .           impl<K: Clone, V: Clone, S: Clone, A: Allocator + Clone> Clone for HashMap<K, V, S, A> {
       448 ( 0.00%)      fn clone(&self) -> Self {
     9,912 ( 0.00%)          HashMap {
         .                       hash_builder: self.hash_builder.clone(),
     2,031 ( 0.00%)              table: self.table.clone(),
         .                   }
       504 ( 0.00%)      }
         .           
         .               fn clone_from(&mut self, source: &Self) {
         .                   self.table.clone_from(&source.table);
         .           
         .                   // Update hash_builder only if we successfully cloned all elements.
         .                   self.hash_builder.clone_from(&source.hash_builder);
         .               }
         .           }
         .           
         .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
         .           /// instances of any functions like RawTable::reserve from being generated
         .           #[cfg_attr(feature = "inline-more", inline)]
        14 ( 0.00%)  pub(crate) fn make_hasher<K, Q, V, S>(hash_builder: &S) -> impl Fn(&(Q, V)) -> u64 + '_
         .           where
         .               K: Borrow<Q>,
         .               Q: Hash,
         .               S: BuildHasher,
         .           {
   248,687 ( 0.01%)      move |val| make_hash::<K, Q, S>(hash_builder, &val.0)
        21 ( 0.00%)  }
         .           
         .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
         .           /// instances of any functions like RawTable::reserve from being generated
         .           #[cfg_attr(feature = "inline-more", inline)]
        40 ( 0.00%)  fn equivalent_key<Q, K, V>(k: &Q) -> impl Fn(&(K, V)) -> bool + '_
         .           where
         .               K: Borrow<Q>,
         .               Q: ?Sized + Eq,
         .           {
   793,338 ( 0.02%)      move |x| k.eq(x.0.borrow())
        60 ( 0.00%)  }
         .           
         .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
         .           /// instances of any functions like RawTable::reserve from being generated
         .           #[cfg_attr(feature = "inline-more", inline)]
         .           fn equivalent<Q, K>(k: &Q) -> impl Fn(&K) -> bool + '_
         .           where
         .               K: Borrow<Q>,
         .               Q: ?Sized + Eq,
         .           {
   742,744 ( 0.02%)      move |x| k.eq(x.borrow())
         .           }
         .           
         .           #[cfg(not(feature = "nightly"))]
         .           #[cfg_attr(feature = "inline-more", inline)]
         .           pub(crate) fn make_hash<K, Q, S>(hash_builder: &S, val: &Q) -> u64
         .           where
         .               K: Borrow<Q>,
         .               Q: Hash + ?Sized,
-- line 248 ----------------------------------------
-- line 251 ----------------------------------------
         .               use core::hash::Hasher;
         .               let mut state = hash_builder.build_hasher();
         .               val.hash(&mut state);
         .               state.finish()
         .           }
         .           
         .           #[cfg(feature = "nightly")]
         .           #[cfg_attr(feature = "inline-more", inline)]
        41 ( 0.00%)  pub(crate) fn make_hash<K, Q, S>(hash_builder: &S, val: &Q) -> u64
         .           where
         .               K: Borrow<Q>,
         .               Q: Hash + ?Sized,
         .               S: BuildHasher,
         .           {
     1,689 ( 0.00%)      hash_builder.hash_one(val)
        30 ( 0.00%)  }
         .           
         .           #[cfg(not(feature = "nightly"))]
         .           #[cfg_attr(feature = "inline-more", inline)]
         .           pub(crate) fn make_insert_hash<K, S>(hash_builder: &S, val: &K) -> u64
         .           where
         .               K: Hash,
         .               S: BuildHasher,
         .           {
-- line 274 ----------------------------------------
-- line 275 ----------------------------------------
         .               use core::hash::Hasher;
         .               let mut state = hash_builder.build_hasher();
         .               val.hash(&mut state);
         .               state.finish()
         .           }
         .           
         .           #[cfg(feature = "nightly")]
         .           #[cfg_attr(feature = "inline-more", inline)]
        21 ( 0.00%)  pub(crate) fn make_insert_hash<K, S>(hash_builder: &S, val: &K) -> u64
         .           where
         .               K: Hash,
         .               S: BuildHasher,
         .           {
   359,102 ( 0.01%)      hash_builder.hash_one(val)
        14 ( 0.00%)  }
         .           
         .           #[cfg(feature = "ahash")]
         .           impl<K, V> HashMap<K, V, DefaultHashBuilder> {
         .               /// Creates an empty `HashMap`.
         .               ///
         .               /// The hash map is initially created with a capacity of 0, so it will not allocate until it
         .               /// is first inserted into.
         .               ///
-- line 297 ----------------------------------------
-- line 366 ----------------------------------------
         .               ///
         .               /// let s = DefaultHashBuilder::default();
         .               /// let mut map = HashMap::with_hasher(s);
         .               /// map.insert(1, 2);
         .               /// ```
         .               ///
         .               /// [`BuildHasher`]: ../../std/hash/trait.BuildHasher.html
         .               #[cfg_attr(feature = "inline-more", inline)]
        70 ( 0.00%)      pub const fn with_hasher(hash_builder: S) -> Self {
   448,162 ( 0.01%)          Self {
         .                       hash_builder,
        22 ( 0.00%)              table: RawTable::new(),
         .                   }
        18 ( 0.00%)      }
         .           
         .               /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`
         .               /// to hash the keys.
         .               ///
         .               /// The hash map will be able to hold at least `capacity` elements without
         .               /// reallocating. If `capacity` is 0, the hash map will not allocate.
         .               ///
         .               /// Warning: `hash_builder` is normally randomly generated, and
-- line 387 ----------------------------------------
-- line 437 ----------------------------------------
         .               /// use hashbrown::hash_map::DefaultHashBuilder;
         .               ///
         .               /// let s = DefaultHashBuilder::default();
         .               /// let mut map = HashMap::with_hasher(s);
         .               /// map.insert(1, 2);
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn with_hasher_in(hash_builder: S, alloc: A) -> Self {
        97 ( 0.00%)          Self {
         .                       hash_builder,
         .                       table: RawTable::new_in(alloc),
         .                   }
         .               }
         .           
         .               /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`
         .               /// to hash the keys. It will be allocated with the given allocator.
         .               ///
-- line 453 ----------------------------------------
-- line 663 ----------------------------------------
         .               ///
         .               /// let mut a = HashMap::new();
         .               /// assert_eq!(a.len(), 0);
         .               /// a.insert(1, "a");
         .               /// assert_eq!(a.len(), 1);
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn len(&self) -> usize {
    42,035 ( 0.00%)          self.table.len()
         .               }
         .           
         .               /// Returns `true` if the map contains no elements.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// use hashbrown::HashMap;
-- line 679 ----------------------------------------
-- line 680 ----------------------------------------
         .               ///
         .               /// let mut a = HashMap::new();
         .               /// assert!(a.is_empty());
         .               /// a.insert(1, "a");
         .               /// assert!(!a.is_empty());
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn is_empty(&self) -> bool {
   176,150 ( 0.00%)          self.len() == 0
         .               }
         .           
         .               /// Clears the map, returning all key-value pairs as an iterator. Keeps the
         .               /// allocated memory for reuse.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
-- line 696 ----------------------------------------
-- line 790 ----------------------------------------
         .               /// use hashbrown::HashMap;
         .               ///
         .               /// let mut a = HashMap::new();
         .               /// a.insert(1, "a");
         .               /// a.clear();
         .               /// assert!(a.is_empty());
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
         6 ( 0.00%)      pub fn clear(&mut self) {
         .                   self.table.clear();
         6 ( 0.00%)      }
         .           
         .               /// Creates a consuming iterator visiting all the keys in arbitrary order.
         .               /// The map cannot be used after calling this.
         .               /// The iterator element type is `K`.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
-- line 808 ----------------------------------------
-- line 963 ----------------------------------------
         .               /// }
         .               ///
         .               /// assert_eq!(letters[&'s'], 2);
         .               /// assert_eq!(letters[&'t'], 3);
         .               /// assert_eq!(letters[&'u'], 1);
         .               /// assert_eq!(letters.get(&'y'), None);
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
     1,312 ( 0.00%)      pub fn entry(&mut self, key: K) -> Entry<'_, K, V, S, A> {
         .                   let hash = make_insert_hash::<K, S>(&self.hash_builder, &key);
         .                   if let Some(elem) = self.table.find(hash, equivalent_key(&key)) {
       300 ( 0.00%)              Entry::Occupied(OccupiedEntry {
         .                           hash,
         .                           key: Some(key),
         .                           elem,
         .                           table: self,
         .                       })
         .                   } else {
     1,340 ( 0.00%)              Entry::Vacant(VacantEntry {
         .                           hash,
         .                           key,
         .                           table: self,
         .                       })
         .                   }
     1,640 ( 0.00%)      }
         .           
         .               /// Gets the given key's corresponding entry by reference in the map for in-place manipulation.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// use hashbrown::HashMap;
         .               ///
-- line 995 ----------------------------------------
-- line 1041 ----------------------------------------
         .               /// use hashbrown::HashMap;
         .               ///
         .               /// let mut map = HashMap::new();
         .               /// map.insert(1, "a");
         .               /// assert_eq!(map.get(&1), Some(&"a"));
         .               /// assert_eq!(map.get(&2), None);
         .               /// ```
         .               #[inline]
        21 ( 0.00%)      pub fn get<Q: ?Sized>(&self, k: &Q) -> Option<&V>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
 1,708,157 ( 0.04%)          match self.get_inner(k) {
        28 ( 0.00%)              Some(&(_, ref v)) => Some(v),
         .                       None => None,
         .                   }
        21 ( 0.00%)      }
         .           
         .               /// Returns the key-value pair corresponding to the supplied key.
         .               ///
         .               /// The supplied key may be any borrowed form of the map's key type, but
         .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
         .               /// the key type.
         .               ///
         .               /// [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html
-- line 1067 ----------------------------------------
-- line 1086 ----------------------------------------
         .                   // Avoid `Option::map` because it bloats LLVM IR.
         .                   match self.get_inner(k) {
         .                       Some(&(ref key, ref value)) => Some((key, value)),
         .                       None => None,
         .                   }
         .               }
         .           
         .               #[inline]
        65 ( 0.00%)      fn get_inner<Q: ?Sized>(&self, k: &Q) -> Option<&(K, V)>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
 1,994,492 ( 0.04%)          if self.table.is_empty() {
         .                       None
         .                   } else {
        53 ( 0.00%)              let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
        78 ( 0.00%)              self.table.get(hash, equivalent_key(k))
         .                   }
        39 ( 0.00%)      }
         .           
         .               /// Returns the key-value pair corresponding to the supplied key, with a mutable reference to value.
         .               ///
         .               /// The supplied key may be any borrowed form of the map's key type, but
         .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
         .               /// the key type.
         .               ///
         .               /// [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html
-- line 1113 ----------------------------------------
-- line 1155 ----------------------------------------
         .               /// use hashbrown::HashMap;
         .               ///
         .               /// let mut map = HashMap::new();
         .               /// map.insert(1, "a");
         .               /// assert_eq!(map.contains_key(&1), true);
         .               /// assert_eq!(map.contains_key(&2), false);
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
   664,006 ( 0.01%)      pub fn contains_key<Q: ?Sized>(&self, k: &Q) -> bool
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
        30 ( 0.00%)          self.get_inner(k).is_some()
   863,360 ( 0.02%)      }
         .           
         .               /// Returns a mutable reference to the value corresponding to the key.
         .               ///
         .               /// The key may be any borrowed form of the map's key type, but
         .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
         .               /// the key type.
         .               ///
         .               /// [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html
-- line 1177 ----------------------------------------
-- line 1185 ----------------------------------------
         .               /// let mut map = HashMap::new();
         .               /// map.insert(1, "a");
         .               /// if let Some(x) = map.get_mut(&1) {
         .               ///     *x = "b";
         .               /// }
         .               /// assert_eq!(map[&1], "b");
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
       907 ( 0.00%)      pub fn get_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut V>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
     2,721 ( 0.00%)          match self.get_inner_mut(k) {
         .                       Some(&mut (_, ref mut v)) => Some(v),
         .                       None => None,
         .                   }
     1,814 ( 0.00%)      }
         .           
         .               #[inline]
         .               fn get_inner_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut (K, V)>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
       907 ( 0.00%)          if self.table.is_empty() {
         .                       None
         .                   } else {
         .                       let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
         .                       self.table.get_mut(hash, equivalent_key(k))
         .                   }
         .               }
         .           
         .               /// Attempts to get mutable references to `N` values in the map at once.
-- line 1219 ----------------------------------------
-- line 1495 ----------------------------------------
         .               /// assert_eq!(map.insert(37, "a"), None);
         .               /// assert_eq!(map.is_empty(), false);
         .               ///
         .               /// map.insert(37, "b");
         .               /// assert_eq!(map.insert(37, "c"), Some("b"));
         .               /// assert_eq!(map[&37], "c");
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
 5,528,370 ( 0.12%)      pub fn insert(&mut self, k: K, v: V) -> Option<V> {
        70 ( 0.00%)          let hash = make_insert_hash::<K, S>(&self.hash_builder, &k);
     1,438 ( 0.00%)          if let Some((_, item)) = self.table.get_mut(hash, equivalent_key(&k)) {
         .                       Some(mem::replace(item, v))
         .                   } else {
 2,477,422 ( 0.05%)              self.table
 2,092,808 ( 0.04%)                  .insert(hash, (k, v), make_hasher::<K, _, V, S>(&self.hash_builder));
   267,727 ( 0.01%)              None
         .                   }
 5,246,401 ( 0.11%)      }
         .           
         .               /// Insert a key-value pair into the map without checking
         .               /// if the key already exists in the map.
         .               ///
         .               /// Returns a reference to the key and value just inserted.
         .               ///
         .               /// This operation is safe if a key does not exist in the map.
         .               ///
-- line 1520 ----------------------------------------
-- line 1592 ----------------------------------------
         .               /// use hashbrown::HashMap;
         .               ///
         .               /// let mut map = HashMap::new();
         .               /// map.insert(1, "a");
         .               /// assert_eq!(map.remove(&1), Some("a"));
         .               /// assert_eq!(map.remove(&1), None);
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
   181,360 ( 0.00%)      pub fn remove<Q: ?Sized>(&mut self, k: &Q) -> Option<V>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
 1,278,846 ( 0.03%)          match self.remove_entry(k) {
    71,318 ( 0.00%)              Some((_, v)) => Some(v),
   140,447 ( 0.00%)              None => None,
         .                   }
   398,923 ( 0.01%)      }
         .           
         .               /// Removes a key from the map, returning the stored key and value if the
         .               /// key was previously in the map.
         .               ///
         .               /// The key may be any borrowed form of the map's key type, but
         .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
         .               /// the key type.
         .               ///
-- line 1618 ----------------------------------------
-- line 1631 ----------------------------------------
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn remove_entry<Q: ?Sized>(&mut self, k: &Q) -> Option<(K, V)>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
         .                   let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
   449,218 ( 0.01%)          self.table.remove_entry(hash, equivalent_key(k))
         .               }
         .           }
         .           
         .           impl<K, V, S, A: Allocator + Clone> HashMap<K, V, S, A> {
         .               /// Creates a raw entry builder for the HashMap.
         .               ///
         .               /// Raw entries provide the lowest level of control for searching and
         .               /// manipulating a map. They must be manually initialized with a hash and
-- line 1647 ----------------------------------------
-- line 2069 ----------------------------------------
         .           where
         .               F: FnMut(&K, &mut V) -> bool,
         .               A: Allocator + Clone,
         .           {
         .               type Item = (K, V);
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn next(&mut self) -> Option<Self::Item> {
        42 ( 0.00%)          self.inner.next(&mut self.f)
         .               }
         .           
         .               #[inline]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
         .                   (0, self.inner.iter.size_hint().1)
         .               }
         .           }
         .           
-- line 2085 ----------------------------------------
-- line 2095 ----------------------------------------
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub(super) fn next<F>(&mut self, f: &mut F) -> Option<(K, V)>
         .               where
         .                   F: FnMut(&K, &mut V) -> bool,
         .               {
         .                   unsafe {
         .                       for item in &mut self.iter {
         .                           let &mut (ref key, ref mut value) = item.as_mut();
       168 ( 0.00%)                  if f(key, value) {
        14 ( 0.00%)                      return Some(self.table.remove(item));
         .                           }
         .                       }
         .                   }
         .                   None
         .               }
         .           }
         .           
         .           /// A mutable iterator over the values of a `HashMap`.
-- line 2112 ----------------------------------------
-- line 2209 ----------------------------------------
         .               /// Creates a `RawEntryMut` from the given key and its hash.
         .               #[inline]
         .               #[allow(clippy::wrong_self_convention)]
         .               pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> RawEntryMut<'a, K, V, S, A>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Eq,
         .               {
 3,577,096 ( 0.07%)          self.from_hash(hash, equivalent(k))
         .               }
         .           }
         .           
         .           impl<'a, K, V, S, A: Allocator + Clone> RawEntryBuilderMut<'a, K, V, S, A> {
         .               /// Creates a `RawEntryMut` from the given hash.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[allow(clippy::wrong_self_convention)]
 9,590,957 ( 0.20%)      pub fn from_hash<F>(self, hash: u64, is_match: F) -> RawEntryMut<'a, K, V, S, A>
         .               where
         .                   for<'b> F: FnMut(&'b K) -> bool,
         .               {
         .                   self.search(hash, is_match)
10,212,656 ( 0.21%)      }
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn search<F>(self, hash: u64, mut is_match: F) -> RawEntryMut<'a, K, V, S, A>
         .               where
         .                   for<'b> F: FnMut(&'b K) -> bool,
         .               {
 1,084,134 ( 0.02%)          match self.map.table.find(hash, |(k, _)| is_match(k)) {
 5,949,134 ( 0.12%)              Some(elem) => RawEntryMut::Occupied(RawOccupiedEntryMut {
         .                           elem,
         .                           table: &mut self.map.table,
         .                           hash_builder: &self.map.hash_builder,
         .                       }),
   544,944 ( 0.01%)              None => RawEntryMut::Vacant(RawVacantEntryMut {
         .                           table: &mut self.map.table,
         .                           hash_builder: &self.map.hash_builder,
         .                       }),
         .                   }
         .               }
         .           }
         .           
         .           impl<'a, K, V, S, A: Allocator + Clone> RawEntryBuilder<'a, K, V, S, A> {
-- line 2251 ----------------------------------------
-- line 2260 ----------------------------------------
         .               {
         .                   let hash = make_hash::<K, Q, S>(&self.map.hash_builder, k);
         .                   self.from_key_hashed_nocheck(hash, k)
         .               }
         .           
         .               /// Access an entry by a key and its hash.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[allow(clippy::wrong_self_convention)]
 2,479,907 ( 0.05%)      pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> Option<(&'a K, &'a V)>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Eq,
         .               {
 2,991,094 ( 0.06%)          self.from_hash(hash, equivalent(k))
 4,538,614 ( 0.09%)      }
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn search<F>(self, hash: u64, mut is_match: F) -> Option<(&'a K, &'a V)>
         .               where
         .                   F: FnMut(&K) -> bool,
         .               {
 4,600,514 ( 0.10%)          match self.map.table.get(hash, |(k, _)| is_match(k)) {
         .                       Some(&(ref key, ref value)) => Some((key, value)),
         .                       None => None,
         .                   }
         .               }
         .           
         .               /// Access an entry by hash.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[allow(clippy::wrong_self_convention)]
-- line 2289 ----------------------------------------
-- line 2624 ----------------------------------------
         .               /// and returns a mutable reference to it.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[allow(clippy::shadow_unrelated)]
         .               pub fn insert_hashed_nocheck(self, hash: u64, key: K, value: V) -> (&'a mut K, &'a mut V)
         .               where
         .                   K: Hash,
         .                   S: BuildHasher,
         .               {
   902,687 ( 0.02%)          let &mut (ref mut k, ref mut v) = self.table.insert_entry(
         .                       hash,
         .                       (key, value),
         .                       make_hasher::<K, _, V, S>(self.hash_builder),
         .                   );
         .                   (k, v)
         .               }
         .           
         .               /// Set the value of an entry with a custom hasher function.
-- line 2640 ----------------------------------------
-- line 2974 ----------------------------------------
         .               /// map.insert("a", 1);
         .               /// map.insert("b", 2);
         .               /// map.insert("c", 3);
         .               ///
         .               /// // Not possible with .iter()
         .               /// let vec: Vec<(&str, i32)> = map.into_iter().collect();
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
     4,015 ( 0.00%)      fn into_iter(self) -> IntoIter<K, V, A> {
    87,716 ( 0.00%)          IntoIter {
    45,794 ( 0.00%)              inner: self.table.into_iter(),
         .                   }
    12,045 ( 0.00%)      }
         .           }
         .           
         .           impl<'a, K, V> Iterator for Iter<'a, K, V> {
         .               type Item = (&'a K, &'a V);
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn next(&mut self) -> Option<(&'a K, &'a V)> {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
   326,800 ( 0.01%)          match self.inner.next() {
         .                       Some(x) => unsafe {
         .                           let r = x.as_ref();
     2,760 ( 0.00%)                  Some((&r.0, &r.1))
         .                       },
         .                       None => None,
         .                   }
         .               }
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
       162 ( 0.00%)          self.inner.size_hint()
         .               }
         .           }
         .           impl<K, V> ExactSizeIterator for Iter<'_, K, V> {
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn len(&self) -> usize {
         .                   self.inner.len()
         .               }
         .           }
-- line 3013 ----------------------------------------
-- line 3018 ----------------------------------------
         .               type Item = (&'a K, &'a mut V);
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn next(&mut self) -> Option<(&'a K, &'a mut V)> {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
         .                   match self.inner.next() {
         .                       Some(x) => unsafe {
         .                           let r = x.as_mut();
         2 ( 0.00%)                  Some((&r.0, &mut r.1))
         .                       },
         .                       None => None,
         .                   }
         .               }
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
         .                   self.inner.size_hint()
         .               }
-- line 3034 ----------------------------------------
-- line 3051 ----------------------------------------
         .               }
         .           }
         .           
         .           impl<K, V, A: Allocator + Clone> Iterator for IntoIter<K, V, A> {
         .               type Item = (K, V);
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn next(&mut self) -> Option<(K, V)> {
     3,262 ( 0.00%)          self.inner.next()
         .               }
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
         .                   self.inner.size_hint()
         .               }
         .           }
         .           impl<K, V, A: Allocator + Clone> ExactSizeIterator for IntoIter<K, V, A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
-- line 3067 ----------------------------------------
-- line 3076 ----------------------------------------
         .                   f.debug_list().entries(self.iter()).finish()
         .               }
         .           }
         .           
         .           impl<'a, K, V> Iterator for Keys<'a, K, V> {
         .               type Item = &'a K;
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
       126 ( 0.00%)      fn next(&mut self) -> Option<&'a K> {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
         .                   match self.inner.next() {
         .                       Some((k, _)) => Some(k),
         .                       None => None,
         .                   }
       252 ( 0.00%)      }
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
         .                   self.inner.size_hint()
         .               }
         .           }
         .           impl<K, V> ExactSizeIterator for Keys<'_, K, V> {
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn len(&self) -> usize {
-- line 3098 ----------------------------------------
-- line 3819 ----------------------------------------
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn insert(self, value: V) -> &'a mut V
         .               where
         .                   K: Hash,
         .                   S: BuildHasher,
         .               {
         .                   let table = &mut self.table.table;
       108 ( 0.00%)          let entry = table.insert_entry(
         .                       self.hash,
         .                       (self.key, value),
         .                       make_hasher::<K, _, V, S>(&self.table.hash_builder),
         .                   );
         .                   &mut entry.1
         .               }
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
-- line 3835 ----------------------------------------
-- line 4557 ----------------------------------------
         .           /// keys with new values returned from the iterator.
         .           impl<K, V, S, A> Extend<(K, V)> for HashMap<K, V, S, A>
         .           where
         .               K: Eq + Hash,
         .               S: BuildHasher,
         .               A: Allocator + Clone,
         .           {
         .               #[cfg_attr(feature = "inline-more", inline)]
    84,633 ( 0.00%)      fn extend<T: IntoIterator<Item = (K, V)>>(&mut self, iter: T) {
         .                   // Keys may be already present or show multiple times in the iterator.
         .                   // Reserve the entire hint lower bound if the map is empty.
         .                   // Otherwise reserve half the hint (rounded up), so the map
         .                   // will only resize twice in the worst case.
    65,023 ( 0.00%)          let iter = iter.into_iter();
    50,039 ( 0.00%)          let reserve = if self.is_empty() {
         .                       iter.size_hint().0
         .                   } else {
     5,177 ( 0.00%)              (iter.size_hint().0 + 1) / 2
         .                   };
         .                   self.reserve(reserve);
         .                   iter.for_each(move |(k, v)| {
   167,815 ( 0.00%)              self.insert(k, v);
         .                   });
    57,540 ( 0.00%)      }
         .           
         .               #[inline]
         .               #[cfg(feature = "nightly")]
         .               fn extend_one(&mut self, (k, v): (K, V)) {
         .                   self.insert(k, v);
         .               }
         .           
         .               #[inline]
-- line 4588 ----------------------------------------

 4,082,871 ( 0.09%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/std/src/io/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 330 ----------------------------------------
        .           //    the function only *appends* bytes to the buffer. We'll get undefined
        .           //    behavior if existing bytes are overwritten to have non-UTF-8 data.
        .           pub(crate) unsafe fn append_to_string<F>(buf: &mut String, f: F) -> Result<usize>
        .           where
        .               F: FnOnce(&mut Vec<u8>) -> Result<usize>,
        .           {
        .               let mut g = Guard { len: buf.len(), buf: buf.as_mut_vec() };
        .               let ret = f(g.buf);
       12 ( 0.00%)      if str::from_utf8(&g.buf[g.len..]).is_err() {
        .                   ret.and_then(|_| {
        .                       Err(Error::new_const(ErrorKind::InvalidData, &"stream did not contain valid UTF-8"))
        .                   })
        .               } else {
        .                   g.len = g.buf.len();
       36 ( 0.00%)          ret
        .               }
        .           }
        .           
        .           // This uses an adaptive system to extend the vector when it fills. We want to
        .           // avoid paying to allocate and zero a huge chunk of memory if the reader only
        .           // has 4 bytes while still making large reads if the reader does have a ton
        .           // of data to return. Simply tacking on an extra DEFAULT_BUF_SIZE space every
        .           // time is 4,500 times (!) slower than a default reservation size of 32 if the
        .           // reader has a very small amount of data to return.
      110 ( 0.00%)  pub(crate) fn default_read_to_end<R: Read + ?Sized>(r: &mut R, buf: &mut Vec<u8>) -> Result<usize> {
       60 ( 0.00%)      let start_len = buf.len();
        .               let start_cap = buf.capacity();
        .           
        .               let mut initialized = 0; // Extra initialized bytes from previous loop iteration
        .               loop {
       81 ( 0.00%)          if buf.len() == buf.capacity() {
        .                       buf.reserve(32); // buf is full, need more space
        .                   }
        .           
        .                   let mut read_buf = ReadBuf::uninit(buf.spare_capacity_mut());
        .           
        .                   // SAFETY: These bytes were initialized but not filled in the previous loop
        .                   unsafe {
        .                       read_buf.assume_init(initialized);
        .                   }
        .           
      182 ( 0.00%)          match r.read_buf(&mut read_buf) {
        .                       Ok(()) => {}
        .                       Err(e) if e.kind() == ErrorKind::Interrupted => continue,
        .                       Err(e) => return Err(e),
        .                   }
        .           
       75 ( 0.00%)          if read_buf.filled_len() == 0 {
       25 ( 0.00%)              return Ok(buf.len() - start_len);
        .                   }
        .           
        .                   // store how much was initialized but not filled
       60 ( 0.00%)          initialized = read_buf.initialized_len() - read_buf.filled_len();
       40 ( 0.00%)          let new_len = read_buf.filled_len() + buf.len();
        .           
        .                   // SAFETY: ReadBuf's invariants mean this much memory is init
        .                   unsafe {
        .                       buf.set_len(new_len);
        .                   }
        .           
      108 ( 0.00%)          if buf.len() == buf.capacity() && buf.capacity() == start_cap {
        .                       // The buffer might be an exact fit. Let's read into a probe buffer
        .                       // and see if it returns `Ok(0)`. If so, we've avoided an
        .                       // unnecessary doubling of the capacity. But if not, append the
        .                       // probe buffer to the primary buffer and let its capacity grow.
       26 ( 0.00%)              let mut probe = [0u8; 32];
        .           
        .                       loop {
       60 ( 0.00%)                  match r.read(&mut probe) {
       24 ( 0.00%)                      Ok(0) => return Ok(buf.len() - start_len),
        .                               Ok(n) => {
        .                                   buf.extend_from_slice(&probe[..n]);
        .                                   break;
        .                               }
        .                               Err(ref e) if e.kind() == ErrorKind::Interrupted => continue,
        .                               Err(e) => return Err(e),
        .                           }
        .                       }
        .                   }
        .               }
       88 ( 0.00%)  }
        .           
       42 ( 0.00%)  pub(crate) fn default_read_to_string<R: Read + ?Sized>(
        .               r: &mut R,
        .               buf: &mut String,
        .           ) -> Result<usize> {
        .               // Note that we do *not* call `r.read_to_end()` here. We are passing
        .               // `&mut Vec<u8>` (the raw contents of `buf`) into the `read_to_end`
        .               // method to fill it up. An arbitrary implementation could overwrite the
        .               // entire contents of the vector, not just append to it (which is what
        .               // we are expecting).
        .               //
        .               // To prevent extraneously checking the UTF-8-ness of the entire buffer
        .               // we pass it to our hardcoded `default_read_to_end` implementation which
        .               // we know is guaranteed to only read data into the end of the buffer.
        6 ( 0.00%)      unsafe { append_to_string(buf, |b| default_read_to_end(r, b)) }
       42 ( 0.00%)  }
        .           
        .           pub(crate) fn default_read_vectored<F>(read: F, bufs: &mut [IoSliceMut<'_>]) -> Result<usize>
        .           where
        .               F: FnOnce(&mut [u8]) -> Result<usize>,
        .           {
        .               let buf = bufs.iter_mut().find(|b| !b.is_empty()).map_or(&mut [][..], |b| &mut **b);
        .               read(buf)
        .           }
-- line 434 ----------------------------------------
-- line 455 ----------------------------------------
        .               }
        .               if !buf.is_empty() {
        .                   Err(Error::new_const(ErrorKind::UnexpectedEof, &"failed to fill whole buffer"))
        .               } else {
        .                   Ok(())
        .               }
        .           }
        .           
      112 ( 0.00%)  pub(crate) fn default_read_buf<F>(read: F, buf: &mut ReadBuf<'_>) -> Result<()>
        .           where
        .               F: FnOnce(&mut [u8]) -> Result<usize>,
        .           {
        .               let n = read(buf.initialize_unfilled())?;
        .               buf.add_filled(n);
        .               Ok(())
      192 ( 0.00%)  }
        .           
        .           /// The `Read` trait allows for reading bytes from a source.
        .           ///
        .           /// Implementors of the `Read` trait are called 'readers'.
        .           ///
        .           /// Readers are defined by one required method, [`read()`]. Each call to [`read()`]
        .           /// will attempt to pull bytes from this source into a provided buffer. A
        .           /// number of other methods are implemented in terms of [`read()`], giving
-- line 478 ----------------------------------------
-- line 694 ----------------------------------------
        .               /// ```
        .               ///
        .               /// (See also the [`std::fs::read`] convenience function for reading from a
        .               /// file.)
        .               ///
        .               /// [`std::fs::read`]: crate::fs::read
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               fn read_to_end(&mut self, buf: &mut Vec<u8>) -> Result<usize> {
        4 ( 0.00%)          default_read_to_end(self, buf)
        .               }
        .           
        .               /// Read all bytes until EOF in this source, appending them to `buf`.
        .               ///
        .               /// If successful, this function returns the number of bytes which were read
        .               /// and appended to `buf`.
        .               ///
        .               /// # Errors
-- line 710 ----------------------------------------
-- line 803 ----------------------------------------
        .               /// Pull some bytes from this source into the specified buffer.
        .               ///
        .               /// This is equivalent to the [`read`](Read::read) method, except that it is passed a [`ReadBuf`] rather than `[u8]` to allow use
        .               /// with uninitialized buffers. The new data will be appended to any existing contents of `buf`.
        .               ///
        .               /// The default implementation delegates to `read`.
        .               #[unstable(feature = "read_buf", issue = "78485")]
        .               fn read_buf(&mut self, buf: &mut ReadBuf<'_>) -> Result<()> {
      112 ( 0.00%)          default_read_buf(|b| self.read(b), buf)
        .               }
        .           
        .               /// Read the exact number of bytes required to fill `buf`.
        .               ///
        .               /// This is equivalent to the [`read_exact`](Read::read_exact) method, except that it is passed a [`ReadBuf`] rather than `[u8]` to
        .               /// allow use with uninitialized buffers.
        .               #[unstable(feature = "read_buf", issue = "78485")]
        .               fn read_buf_exact(&mut self, buf: &mut ReadBuf<'_>) -> Result<()> {
-- line 819 ----------------------------------------
-- line 901 ----------------------------------------
        .               ///
        .               ///     for byte in f.bytes() {
        .               ///         println!("{}", byte.unwrap());
        .               ///     }
        .               ///     Ok(())
        .               /// }
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
  556,444 ( 0.01%)      fn bytes(self) -> Bytes<Self>
        .               where
        .                   Self: Sized,
        .               {
  278,222 ( 0.01%)          Bytes { inner: self }
  834,666 ( 0.02%)      }
        .           
        .               /// Creates an adapter which will chain this stream with another.
        .               ///
        .               /// The returned `Read` instance will first read all bytes from this object
        .               /// until EOF is encountered. Afterwards the output is equivalent to the
        .               /// output of `next`.
        .               ///
        .               /// # Examples
-- line 922 ----------------------------------------
-- line 1503 ----------------------------------------
        .               /// fn main() -> std::io::Result<()> {
        .               ///     let mut buffer = File::create("foo.txt")?;
        .               ///
        .               ///     buffer.write_all(b"some bytes")?;
        .               ///     Ok(())
        .               /// }
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        8 ( 0.00%)      fn write_all(&mut self, mut buf: &[u8]) -> Result<()> {
        2 ( 0.00%)          while !buf.is_empty() {
        .                       match self.write(buf) {
        .                           Ok(0) => {
        .                               return Err(Error::new_const(
        .                                   ErrorKind::WriteZero,
        .                                   &"failed to write whole buffer",
        .                               ));
        .                           }
        .                           Ok(n) => buf = &buf[n..],
        .                           Err(ref e) if e.kind() == ErrorKind::Interrupted => {}
        .                           Err(e) => return Err(e),
        .                       }
        .                   }
        .                   Ok(())
       12 ( 0.00%)      }
        .           
        .               /// Attempts to write multiple buffers into this writer.
        .               ///
        .               /// This method will continuously call [`write_vectored`] until there is no
        .               /// more data to be written or an error of non-[`ErrorKind::Interrupted`]
        .               /// kind is returned. This method will not return until all buffers have
        .               /// been successfully written or such an error occurs. The first error that
        .               /// is not of [`ErrorKind::Interrupted`] kind generated from this method
-- line 1534 ----------------------------------------
-- line 1624 ----------------------------------------
        .               ///     // this call
        .               ///     write!(buffer, "{:.*}", 2, 1.234567)?;
        .               ///     // turns into this:
        .               ///     buffer.write_fmt(format_args!("{:.*}", 2, 1.234567))?;
        .               ///     Ok(())
        .               /// }
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        6 ( 0.00%)      fn write_fmt(&mut self, fmt: fmt::Arguments<'_>) -> Result<()> {
        .                   // Create a shim which translates a Write to a fmt::Write and saves
        .                   // off I/O errors. instead of discarding them
        .                   struct Adapter<'a, T: ?Sized + 'a> {
        .                       inner: &'a mut T,
        .                       error: Result<()>,
        .                   }
        .           
        .                   impl<T: Write + ?Sized> fmt::Write for Adapter<'_, T> {
      292 ( 0.00%)              fn write_str(&mut self, s: &str) -> fmt::Result {
       52 ( 0.00%)                  match self.inner.write_all(s.as_bytes()) {
        .                               Ok(()) => Ok(()),
        .                               Err(e) => {
        .                                   self.error = Err(e);
        .                                   Err(fmt::Error)
        .                               }
        .                           }
      380 ( 0.00%)              }
        .                   }
        .           
       22 ( 0.00%)          let mut output = Adapter { inner: self, error: Ok(()) };
       94 ( 0.00%)          match fmt::write(&mut output, fmt) {
        .                       Ok(()) => Ok(()),
        .                       Err(..) => {
        .                           // check if the error came from the underlying `Write` or not
        .                           if output.error.is_err() {
        .                               output.error
        .                           } else {
        .                               Err(Error::new_const(ErrorKind::Uncategorized, &"formatter error"))
        .                           }
        .                       }
        .                   }
       18 ( 0.00%)      }
        .           
        .               /// Creates a "by reference" adapter for this instance of `Write`.
        .               ///
        .               /// The returned adapter also implements `Write` and will simply borrow this
        .               /// current writer.
        .               ///
        .               /// # Examples
        .               ///
-- line 1672 ----------------------------------------
-- line 2658 ----------------------------------------
        .           pub struct Bytes<R> {
        .               inner: R,
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<R: Read> Iterator for Bytes<R> {
        .               type Item = Result<u8>;
        .           
1,391,170 ( 0.03%)      fn next(&mut self) -> Option<Result<u8>> {
  278,234 ( 0.01%)          let mut byte = 0;
        .                   loop {
3,338,808 ( 0.07%)              return match self.inner.read(slice::from_mut(&mut byte)) {
        .                           Ok(0) => None,
2,782,340 ( 0.06%)                  Ok(..) => Some(Ok(byte)),
        .                           Err(ref e) if e.kind() == ErrorKind::Interrupted => continue,
        .                           Err(e) => Some(Err(e)),
        .                       };
        .                   }
  556,468 ( 0.01%)      }
        .           
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   SizeHint::size_hint(&self.inner)
        .               }
        .           }
        .           
        .           trait SizeHint {
        .               fn lower_bound(&self) -> usize;
-- line 2684 ----------------------------------------

1,113,028 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/std/src/io/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/rpc.rs
--------------------------------------------------------------------------------
Ir                 

-- line 21 ----------------------------------------
        .           
        .           pub(super) trait DecodeMut<'a, 's, S>: Sized {
        .               fn decode(r: &mut Reader<'a>, s: &'s mut S) -> Self;
        .           }
        .           
        .           macro_rules! rpc_encode_decode {
        .               (le $ty:ty) => {
        .                   impl<S> Encode<S> for $ty {
1,894,269 ( 0.04%)              fn encode(self, w: &mut Writer, _: &mut S) {
       30 ( 0.00%)                  w.extend_from_array(&self.to_le_bytes());
2,367,815 ( 0.05%)              }
        .                   }
        .           
        .                   impl<S> DecodeMut<'_, '_, S> for $ty {
       20 ( 0.00%)              fn decode(r: &mut Reader<'_>, _: &mut S) -> Self {
        .                           const N: usize = ::std::mem::size_of::<$ty>();
        .           
       25 ( 0.00%)                  let mut bytes = [0; N];
  294,234 ( 0.01%)                  bytes.copy_from_slice(&r[..N]);
1,236,227 ( 0.03%)                  *r = &r[N..];
        .           
       25 ( 0.00%)                  Self::from_le_bytes(bytes)
       10 ( 0.00%)              }
        .                   }
        .               };
        .               (struct $name:ident { $($field:ident),* $(,)? }) => {
        .                   impl<S> Encode<S> for $name {
        .                       fn encode(self, w: &mut Writer, s: &mut S) {
        .                           $(self.$field.encode(w, s);)*
        .                       }
        .                   }
-- line 51 ----------------------------------------
-- line 55 ----------------------------------------
        .                           $name {
        .                               $($field: DecodeMut::decode(r, s)),*
        .                           }
        .                       }
        .                   }
        .               };
        .               (enum $name:ident $(<$($T:ident),+>)? { $($variant:ident $(($field:ident))*),* $(,)? }) => {
        .                   impl<S, $($($T: Encode<S>),+)?> Encode<S> for $name $(<$($T),+>)? {
5,123,197 ( 0.11%)              fn encode(self, w: &mut Writer, s: &mut S) {
        .                           // HACK(eddyb): `Tag` enum duplicated between the
        .                           // two impls as there's no other place to stash it.
        .                           #[allow(non_upper_case_globals)]
        .                           mod tag {
        .                               #[repr(u8)] enum Tag { $($variant),* }
        .           
        .                               $(pub const $variant: u8 = Tag::$variant as u8;)*
        .                           }
        .           
2,802,785 ( 0.06%)                  match self {
  487,514 ( 0.01%)                      $($name::$variant $(($field))* => {
   48,980 ( 0.00%)                          tag::$variant.encode(w, s);
  599,178 ( 0.01%)                          $($field.encode(w, s);)*
       10 ( 0.00%)                      })*
        .                           }
4,133,242 ( 0.09%)              }
        .                   }
        .           
        .                   impl<'a, S, $($($T: for<'s> DecodeMut<'a, 's, S>),+)?> DecodeMut<'a, '_, S>
        .                       for $name $(<$($T),+>)?
        .                   {
1,293,491 ( 0.03%)              fn decode(r: &mut Reader<'a>, s: &mut S) -> Self {
        .                           // HACK(eddyb): `Tag` enum duplicated between the
        .                           // two impls as there's no other place to stash it.
        .                           #[allow(non_upper_case_globals)]
        .                           mod tag {
        .                               #[repr(u8)] enum Tag { $($variant),* }
        .           
        .                               $(pub const $variant: u8 = Tag::$variant as u8;)*
        .                           }
        .           
1,249,511 ( 0.03%)                  match u8::decode(r, s) {
        .                               $(tag::$variant => {
    1,059 ( 0.00%)                          $(let $field = DecodeMut::decode(r, s);)*
  899,657 ( 0.02%)                          $name::$variant $(($field))*
      522 ( 0.00%)                      })*
        .                               _ => unreachable!(),
        .                           }
2,232,051 ( 0.05%)              }
        .                   }
        .               }
        .           }
        .           
        .           impl<S> Encode<S> for () {
        .               fn encode(self, _: &mut Writer, _: &mut S) {}
        .           }
        .           
        .           impl<S> DecodeMut<'_, '_, S> for () {
        .               fn decode(_: &mut Reader<'_>, _: &mut S) -> Self {}
        .           }
        .           
        .           impl<S> Encode<S> for u8 {
  318,293 ( 0.01%)      fn encode(self, w: &mut Writer, _: &mut S) {
       10 ( 0.00%)          w.push(self);
  265,225 ( 0.01%)      }
        .           }
        .           
        .           impl<S> DecodeMut<'_, '_, S> for u8 {
        .               fn decode(r: &mut Reader<'_>, _: &mut S) -> Self {
5,153,077 ( 0.11%)          let x = r[0];
2,864,943 ( 0.06%)          *r = &r[1..];
        .                   x
        .               }
        .           }
        .           
        .           rpc_encode_decode!(le u32);
        .           rpc_encode_decode!(le usize);
        .           
        .           impl<S> Encode<S> for bool {
        .               fn encode(self, w: &mut Writer, s: &mut S) {
   65,985 ( 0.00%)          (self as u8).encode(w, s);
        .               }
        .           }
        .           
        .           impl<S> DecodeMut<'_, '_, S> for bool {
        .               fn decode(r: &mut Reader<'_>, s: &mut S) -> Self {
   43,994 ( 0.00%)          match u8::decode(r, s) {
        .                       0 => false,
        .                       1 => true,
        .                       _ => unreachable!(),
        .                   }
        .               }
        .           }
        .           
        .           impl<S> Encode<S> for char {
        .               fn encode(self, w: &mut Writer, s: &mut S) {
   50,148 ( 0.00%)          (self as u32).encode(w, s);
        .               }
        .           }
        .           
        .           impl<S> DecodeMut<'_, '_, S> for char {
        .               fn decode(r: &mut Reader<'_>, s: &mut S) -> Self {
        .                   char::from_u32(u32::decode(r, s)).unwrap()
        .               }
        .           }
        .           
        .           impl<S> Encode<S> for NonZeroU32 {
       30 ( 0.00%)      fn encode(self, w: &mut Writer, s: &mut S) {
1,430,771 ( 0.03%)          self.get().encode(w, s);
       10 ( 0.00%)      }
        .           }
        .           
        .           impl<S> DecodeMut<'_, '_, S> for NonZeroU32 {
       15 ( 0.00%)      fn decode(r: &mut Reader<'_>, s: &mut S) -> Self {
       35 ( 0.00%)          Self::new(u32::decode(r, s)).unwrap()
       10 ( 0.00%)      }
        .           }
        .           
        .           impl<S, A: Encode<S>, B: Encode<S>> Encode<S> for (A, B) {
        .               fn encode(self, w: &mut Writer, s: &mut S) {
        .                   self.0.encode(w, s);
        .                   self.1.encode(w, s);
        .               }
        .           }
-- line 177 ----------------------------------------
-- line 204 ----------------------------------------
        .                   Ok(x),
        .                   Err(e),
        .               }
        .           );
        .           
        .           impl<S> Encode<S> for &[u8] {
        .               fn encode(self, w: &mut Writer, s: &mut S) {
        .                   self.len().encode(w, s);
    1,456 ( 0.00%)          w.write_all(self).unwrap();
        .               }
        .           }
        .           
        .           impl<'a, S> DecodeMut<'a, '_, S> for &'a [u8] {
        .               fn decode(r: &mut Reader<'a>, s: &mut S) -> Self {
        .                   let len = usize::decode(r, s);
        .                   let xs = &r[..len];
   73,924 ( 0.00%)          *r = &r[len..];
        .                   xs
        .               }
        .           }
        .           
        .           impl<S> Encode<S> for &str {
    1,456 ( 0.00%)      fn encode(self, w: &mut Writer, s: &mut S) {
        .                   self.as_bytes().encode(w, s);
    1,820 ( 0.00%)      }
        .           }
        .           
        .           impl<'a, S> DecodeMut<'a, '_, S> for &'a str {
   24,464 ( 0.00%)      fn decode(r: &mut Reader<'a>, s: &mut S) -> Self {
   48,928 ( 0.00%)          str::from_utf8(<&[u8]>::decode(r, s)).unwrap()
   48,928 ( 0.00%)      }
        .           }
        .           
        .           impl<S> Encode<S> for String {
        .               fn encode(self, w: &mut Writer, s: &mut S) {
    1,456 ( 0.00%)          self[..].encode(w, s);
        .               }
        .           }
        .           
        .           impl<S> DecodeMut<'_, '_, S> for String {
        .               fn decode(r: &mut Reader<'_>, s: &mut S) -> Self {
    1,820 ( 0.00%)          <&str>::decode(r, s).to_string()
        .               }
        .           }
        .           
        .           /// Simplified version of panic payloads, ignoring
        .           /// types other than `&'static str` and `String`.
        .           pub enum PanicMessage {
        .               StaticStr(&'static str),
        .               String(String),
-- line 253 ----------------------------------------

4,739,696 ( 0.10%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/rpc.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.8.4/src/common.rs
--------------------------------------------------------------------------------
Ir                 

-- line 9 ----------------------------------------
        .               pub row: u64,
        .               /// Column, counting from 0
        .               pub column: u64,
        .           }
        .           
        .           impl TextPosition {
        .               /// Creates a new position initialized to the beginning of the document
        .               #[inline]
        6 ( 0.00%)      pub fn new() -> TextPosition {
       12 ( 0.00%)          TextPosition { row: 0, column: 0 }
       24 ( 0.00%)      }
        .           
        .               /// Advances the position in a line
        .               #[inline]
1,360,930 ( 0.03%)      pub fn advance(&mut self, count: u8) {
1,905,302 ( 0.04%)          self.column += count as u64;
  544,372 ( 0.01%)      }
        .           
        .               /// Advances the position in a line to the next tab position
        .               #[inline]
        .               pub fn advance_to_tab(&mut self, width: u8) {
        .                   let width = width as u64;
        .                   self.column += width - self.column % width
        .               }
        .           
        .               /// Advances the position to the beginning of the next line
        .               #[inline]
   18,108 ( 0.00%)      pub fn new_line(&mut self) {
    6,036 ( 0.00%)          self.column = 0;
   42,252 ( 0.00%)          self.row += 1;
   12,072 ( 0.00%)      }
        .           }
        .           
        .           impl fmt::Debug for TextPosition {
        .               #[inline]
        .               fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        .                   write!(f, "{}:{}", self.row + 1, self.column + 1)
        .               }
        .           }
-- line 47 ----------------------------------------
-- line 92 ----------------------------------------
        .                   fmt::Display::fmt(self, f)
        .               }
        .           }
        .           
        .           /// Checks whether the given character is a white space character (`S`)
        .           /// as is defined by XML 1.1 specification, [section 2.3][1].
        .           ///
        .           /// [1]: http://www.w3.org/TR/2006/REC-xml11-20060816/#sec-common-syn
1,061,944 ( 0.02%)  pub fn is_whitespace_char(c: char) -> bool {
2,547,008 ( 0.05%)      match c {
   54,692 ( 0.00%)          '\x20' | '\x09' | '\x0d' | '\x0a' => true,
  421,588 ( 0.01%)          _ => false
        .               }
1,327,430 ( 0.03%)  }
        .           
        .           /// Checks whether the given string is compound only by white space
        .           /// characters (`S`) using the previous is_whitespace_char to check
        .           /// all characters of this string
        .           pub fn is_whitespace_str(s: &str) -> bool {
        .               s.chars().all(is_whitespace_char)
        .           }
        .           
        .           /// Checks whether the given character is a name start character (`NameStartChar`)
        .           /// as is defined by XML 1.1 specification, [section 2.3][1].
        .           ///
        .           /// [1]: http://www.w3.org/TR/2006/REC-xml11-20060816/#sec-common-syn
   99,864 ( 0.00%)  pub fn is_name_start_char(c: char) -> bool {
  199,728 ( 0.00%)      match c {
  366,090 ( 0.01%)          ':' | 'A'...'Z' | '_' | 'a'...'z' |
      312 ( 0.00%)          '\u{C0}'...'\u{D6}' | '\u{D8}'...'\u{F6}' | '\u{F8}'...'\u{2FF}' |
      208 ( 0.00%)          '\u{370}'...'\u{37D}' | '\u{37F}'...'\u{1FFF}' |
      208 ( 0.00%)          '\u{200C}'...'\u{200D}' | '\u{2070}'...'\u{218F}' |
      208 ( 0.00%)          '\u{2C00}'...'\u{2FEF}' | '\u{3001}'...'\u{D7FF}' |
      208 ( 0.00%)          '\u{F900}'...'\u{FDCF}' | '\u{FDF0}'...'\u{FFFD}' |
   66,628 ( 0.00%)          '\u{10000}'...'\u{EFFFF}' => true,
       52 ( 0.00%)          _ => false
        .               }
  166,440 ( 0.00%)  }
        .           
        .           /// Checks whether the given character is a name character (`NameChar`)
        .           /// as is defined by XML 1.1 specification, [section 2.3][1].
        .           ///
        .           /// [1]: http://www.w3.org/TR/2006/REC-xml11-20060816/#sec-common-syn
   83,754 ( 0.00%)  pub fn is_name_char(c: char) -> bool {
       78 ( 0.00%)      match c {
  139,590 ( 0.00%)          _ if is_name_start_char(c) => true,
        .                   '-' | '.' | '0'...'9' | '\u{B7}' |
       52 ( 0.00%)          '\u{300}'...'\u{36F}' | '\u{203F}'...'\u{2040}' => true,
        .                   _ => false
        .               }
  139,590 ( 0.00%)  }

1,264,340 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.8.4/src/common.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/str/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 137 ----------------------------------------
        .               ///
        .               /// assert_eq!("ƒoo".len(), 4); // fancy f!
        .               /// assert_eq!("ƒoo".chars().count(), 3);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_stable(feature = "const_str_len", since = "1.39.0")]
        .               #[must_use]
        .               #[inline]
  179,100 ( 0.00%)      pub const fn len(&self) -> usize {
        .                   self.as_bytes().len()
   71,640 ( 0.00%)      }
        .           
        .               /// Returns `true` if `self` has a length of zero bytes.
        .               ///
        .               /// # Examples
        .               ///
        .               /// Basic usage:
        .               ///
        .               /// ```
-- line 155 ----------------------------------------
-- line 158 ----------------------------------------
        .               ///
        .               /// let s = "not empty";
        .               /// assert!(!s.is_empty());
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_stable(feature = "const_str_is_empty", since = "1.39.0")]
        .               #[must_use]
        .               #[inline]
   32,046 ( 0.00%)      pub const fn is_empty(&self) -> bool {
   90,440 ( 0.00%)          self.len() == 0
   42,728 ( 0.00%)      }
        .           
        .               /// Checks that `index`-th byte is the first byte in a UTF-8 code point
        .               /// sequence or the end of the string.
        .               ///
        .               /// The start and end of the string (when `index == self.len()`) are
        .               /// considered to be boundaries.
        .               ///
        .               /// Returns `false` if `index` is greater than `self.len()`.
-- line 176 ----------------------------------------
-- line 188 ----------------------------------------
        .               /// assert!(!s.is_char_boundary(2));
        .               ///
        .               /// // third byte of `老`
        .               /// assert!(!s.is_char_boundary(8));
        .               /// ```
        .               #[must_use]
        .               #[stable(feature = "is_char_boundary", since = "1.9.0")]
        .               #[inline]
    7,420 ( 0.00%)      pub fn is_char_boundary(&self, index: usize) -> bool {
        .                   // 0 is always ok.
        .                   // Test for 0 explicitly so that it can optimize out the check
        .                   // easily and skip reading string data for that case.
        .                   // Note that optimizing `self.get(..index)` relies on this.
  152,162 ( 0.00%)          if index == 0 {
        5 ( 0.00%)              return true;
        .                   }
        .           
   90,077 ( 0.00%)          match self.as_bytes().get(index) {
        .                       // For `None` we have two options:
        .                       //
        .                       // - index == self.len()
        .                       //   Empty strings are valid, so return true
        .                       // - index > self.len()
        .                       //   In this case return false
        .                       //
        .                       // The check is placed exactly here, because it improves generated
        .                       // code on higher opt-levels. See PR #84751 for more details.
   14,335 ( 0.00%)              None => index == self.len(),
        .           
        .                       // This is bit magic equivalent to: b < 128 || b >= 192
  104,311 ( 0.00%)              Some(&b) => (b as i8) >= -0x40,
        .                   }
    6,360 ( 0.00%)      }
        .           
        .               /// Converts a string slice to a byte slice. To convert the byte slice back
        .               /// into a string slice, use the [`from_utf8`] function.
        .               ///
        .               /// # Examples
        .               ///
        .               /// Basic usage:
        .               ///
-- line 228 ----------------------------------------
-- line 232 ----------------------------------------
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_stable(feature = "str_as_bytes", since = "1.39.0")]
        .               #[must_use]
        .               #[inline(always)]
        .               #[allow(unused_attributes)]
        .               pub const fn as_bytes(&self) -> &[u8] {
        .                   // SAFETY: const sound because we transmute two types with the same layout
2,971,152 ( 0.06%)          unsafe { mem::transmute(self) }
        .               }
        .           
        .               /// Converts a mutable string slice to a mutable byte slice.
        .               ///
        .               /// # Safety
        .               ///
        .               /// The caller must ensure that the content of the slice is valid UTF-8
        .               /// before the borrow ends and the underlying `str` is used.
-- line 248 ----------------------------------------
-- line 409 ----------------------------------------
        .               /// unsafe {
        .               ///     assert_eq!("🗻", v.get_unchecked(0..4));
        .               ///     assert_eq!("∈", v.get_unchecked(4..7));
        .               ///     assert_eq!("🌏", v.get_unchecked(7..11));
        .               /// }
        .               /// ```
        .               #[stable(feature = "str_checked_slicing", since = "1.20.0")]
        .               #[inline]
  196,042 ( 0.00%)      pub unsafe fn get_unchecked<I: SliceIndex<str>>(&self, i: I) -> &I::Output {
        .                   // SAFETY: the caller must uphold the safety contract for `get_unchecked`;
        .                   // the slice is dereferenceable because `self` is a safe reference.
        .                   // The returned pointer is safe because impls of `SliceIndex` have to guarantee that it is.
   53,466 ( 0.00%)          unsafe { &*i.get_unchecked(self) }
   35,644 ( 0.00%)      }
        .           
        .               /// Returns a mutable, unchecked subslice of `str`.
        .               ///
        .               /// This is the unchecked alternative to indexing the `str`.
        .               ///
        .               /// # Safety
        .               ///
        .               /// Callers of this function are responsible that these preconditions are
-- line 430 ----------------------------------------
-- line 680 ----------------------------------------
        .               ///
        .               /// assert_eq!(Some('y'), chars.next()); // not 'y̆'
        .               /// assert_eq!(Some('\u{0306}'), chars.next());
        .               ///
        .               /// assert_eq!(None, chars.next());
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
1,426,245 ( 0.03%)      pub fn chars(&self) -> Chars<'_> {
1,426,245 ( 0.03%)          Chars { iter: self.as_bytes().iter() }
1,140,996 ( 0.02%)      }
        .           
        .               /// Returns an iterator over the [`char`]s of a string slice, and their
        .               /// positions.
        .               ///
        .               /// As a string slice consists of valid UTF-8, we can iterate through a
        .               /// string slice by [`char`]. This method returns an iterator of both
        .               /// these [`char`]s, as well as their byte positions.
        .               ///
-- line 698 ----------------------------------------
-- line 737 ----------------------------------------
        .               /// // note the 3 here - the last character took up two bytes
        .               /// assert_eq!(Some((3, 'e')), char_indices.next());
        .               /// assert_eq!(Some((4, 's')), char_indices.next());
        .               ///
        .               /// assert_eq!(None, char_indices.next());
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
   49,445 ( 0.00%)      pub fn char_indices(&self) -> CharIndices<'_> {
   26,970 ( 0.00%)          CharIndices { front_offset: 0, iter: self.chars() }
    8,990 ( 0.00%)      }
        .           
        .               /// An iterator over the bytes of a string slice.
        .               ///
        .               /// As a string slice consists of a sequence of bytes, we can iterate
        .               /// through a string slice by byte. This method returns such an iterator.
        .               ///
        .               /// # Examples
        .               ///
-- line 755 ----------------------------------------
-- line 807 ----------------------------------------
        .               /// assert_eq!(Some("lamb"), iter.next());
        .               ///
        .               /// assert_eq!(None, iter.next());
        .               /// ```
        .               #[must_use = "this returns the split string as an iterator, \
        .                             without modifying the original"]
        .               #[stable(feature = "split_whitespace", since = "1.1.0")]
        .               #[inline]
    5,350 ( 0.00%)      pub fn split_whitespace(&self) -> SplitWhitespace<'_> {
    9,639 ( 0.00%)          SplitWhitespace { inner: self.split(IsWhitespace).filter(IsNotEmpty) }
    2,140 ( 0.00%)      }
        .           
        .               /// Splits a string slice by ASCII whitespace.
        .               ///
        .               /// The iterator returned will return string slices that are sub-slices of
        .               /// the original string slice, separated by any amount of ASCII whitespace.
        .               ///
        .               /// To split by Unicode `Whitespace` instead, use [`split_whitespace`].
        .               ///
-- line 825 ----------------------------------------
-- line 896 ----------------------------------------
        .               /// assert_eq!(Some("bar"), lines.next());
        .               /// assert_eq!(Some(""), lines.next());
        .               /// assert_eq!(Some("baz"), lines.next());
        .               ///
        .               /// assert_eq!(None, lines.next());
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
    2,605 ( 0.00%)      pub fn lines(&self) -> Lines<'_> {
    5,210 ( 0.00%)          Lines(self.split_terminator('\n').map(LinesAnyMap))
    1,042 ( 0.00%)      }
        .           
        .               /// An iterator over the lines of a string.
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_deprecated(since = "1.4.0", reason = "use lines() instead now")]
        .               #[inline]
        .               #[allow(deprecated)]
        .               pub fn lines_any(&self) -> LinesAny<'_> {
        .                   LinesAny(self.lines())
-- line 914 ----------------------------------------
-- line 979 ----------------------------------------
        .               ///
        .               /// ```
        .               /// let bananas = "bananas";
        .               ///
        .               /// assert!(bananas.starts_with("bana"));
        .               /// assert!(!bananas.starts_with("nana"));
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
  232,797 ( 0.00%)      pub fn starts_with<'a, P: Pattern<'a>>(&'a self, pat: P) -> bool {
   42,348 ( 0.00%)          pat.is_prefix_of(self)
   84,696 ( 0.00%)      }
        .           
        .               /// Returns `true` if the given pattern matches a suffix of this
        .               /// string slice.
        .               ///
        .               /// Returns `false` if it does not.
        .               ///
        .               /// The [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a
        .               /// function or closure that determines if a character matches.
-- line 997 ----------------------------------------
-- line 1005 ----------------------------------------
        .               ///
        .               /// ```
        .               /// let bananas = "bananas";
        .               ///
        .               /// assert!(bananas.ends_with("anas"));
        .               /// assert!(!bananas.ends_with("nana"));
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
       77 ( 0.00%)      pub fn ends_with<'a, P>(&'a self, pat: P) -> bool
        .               where
        .                   P: Pattern<'a, Searcher: ReverseSearcher<'a>>,
        .               {
       14 ( 0.00%)          pat.is_suffix_of(self)
       28 ( 0.00%)      }
        .           
        .               /// Returns the byte index of the first character of this string slice that
        .               /// matches the pattern.
        .               ///
        .               /// Returns [`None`] if the pattern doesn't match.
        .               ///
        .               /// The [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a
        .               /// function or closure that determines if a character matches.
-- line 1026 ----------------------------------------
-- line 1056 ----------------------------------------
        .               /// ```
        .               /// let s = "Löwe 老虎 Léopard";
        .               /// let x: &[_] = &['1', '2'];
        .               ///
        .               /// assert_eq!(s.find(x), None);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
      174 ( 0.00%)      pub fn find<'a, P: Pattern<'a>>(&'a self, pat: P) -> Option<usize> {
      309 ( 0.00%)          pat.into_searcher(self).next_match().map(|(i, _)| i)
       65 ( 0.00%)      }
        .           
        .               /// Returns the byte index for the first character of the rightmost match of the pattern in
        .               /// this string slice.
        .               ///
        .               /// Returns [`None`] if the pattern doesn't match.
        .               ///
        .               /// The [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a
        .               /// function or closure that determines if a character matches.
-- line 1074 ----------------------------------------
-- line 1102 ----------------------------------------
        .               /// ```
        .               /// let s = "Löwe 老虎 Léopard";
        .               /// let x: &[_] = &['1', '2'];
        .               ///
        .               /// assert_eq!(s.rfind(x), None);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
   21,808 ( 0.00%)      pub fn rfind<'a, P>(&'a self, pat: P) -> Option<usize>
        .               where
        .                   P: Pattern<'a, Searcher: ReverseSearcher<'a>>,
        .               {
        .                   pat.into_searcher(self).next_match_back().map(|(i, _)| i)
   21,808 ( 0.00%)      }
        .           
        .               /// An iterator over substrings of this string slice, separated by
        .               /// characters matched by a pattern.
        .               ///
        .               /// The [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a
        .               /// function or closure that determines if a character matches.
        .               ///
        .               /// [`char`]: prim@char
-- line 1123 ----------------------------------------
-- line 1224 ----------------------------------------
        .               /// assert_eq!(d, &["a", "b", "c"]);
        .               /// ```
        .               ///
        .               /// Use [`split_whitespace`] for this behavior.
        .               ///
        .               /// [`split_whitespace`]: str::split_whitespace
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
   99,468 ( 0.00%)      pub fn split<'a, P: Pattern<'a>>(&'a self, pat: P) -> Split<'a, P> {
  139,912 ( 0.00%)          Split(SplitInternal {
        .                       start: 0,
   23,448 ( 0.00%)              end: self.len(),
   31,264 ( 0.00%)              matcher: pat.into_searcher(self),
        .                       allow_trailing_empty: true,
        .                       finished: false,
        .                   })
   15,632 ( 0.00%)      }
        .           
        .               /// An iterator over substrings of this string slice, separated by
        .               /// characters matched by a pattern. Differs from the iterator produced by
        .               /// `split` in that `split_inclusive` leaves the matched part as the
        .               /// terminator of the substring.
        .               ///
        .               /// The [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a
        .               /// function or closure that determines if a character matches.
-- line 1248 ----------------------------------------
-- line 1370 ----------------------------------------
        .               /// let v: Vec<&str> = "A..B..".split_terminator(".").collect();
        .               /// assert_eq!(v, ["A", "", "B", ""]);
        .               ///
        .               /// let v: Vec<&str> = "A.B:C.D".split_terminator(&['.', ':'][..]).collect();
        .               /// assert_eq!(v, ["A", "B", "C", "D"]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
    3,126 ( 0.00%)      pub fn split_terminator<'a, P: Pattern<'a>>(&'a self, pat: P) -> SplitTerminator<'a, P> {
   10,941 ( 0.00%)          SplitTerminator(SplitInternal { allow_trailing_empty: false, ..self.split(pat).0 })
    1,042 ( 0.00%)      }
        .           
        .               /// An iterator over substrings of `self`, separated by characters
        .               /// matched by a pattern and yielded in reverse order.
        .               ///
        .               /// The [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a
        .               /// function or closure that determines if a character matches.
        .               ///
        .               /// [`char`]: prim@char
-- line 1388 ----------------------------------------
-- line 1472 ----------------------------------------
        .               ///
        .               /// ```
        .               /// let v: Vec<&str> = "abc1defXghi".splitn(2, |c| c == '1' || c == 'X').collect();
        .               /// assert_eq!(v, ["abc", "defXghi"]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
        .               pub fn splitn<'a, P: Pattern<'a>>(&'a self, n: usize, pat: P) -> SplitN<'a, P> {
      254 ( 0.00%)          SplitN(SplitNInternal { iter: self.split(pat).0, count: n })
        .               }
        .           
        .               /// An iterator over substrings of this string slice, separated by a
        .               /// pattern, starting from the end of the string, restricted to returning
        .               /// at most `n` items.
        .               ///
        .               /// If `n` substrings are returned, the last substring (the `n`th substring)
        .               /// will contain the remainder of the string.
-- line 1488 ----------------------------------------
-- line 1540 ----------------------------------------
        .               /// ```
        .               /// assert_eq!("cfg".split_once('='), None);
        .               /// assert_eq!("cfg=foo".split_once('='), Some(("cfg", "foo")));
        .               /// assert_eq!("cfg=foo=bar".split_once('='), Some(("cfg", "foo=bar")));
        .               /// ```
        .               #[stable(feature = "str_split_once", since = "1.52.0")]
        .               #[inline]
        .               pub fn split_once<'a, P: Pattern<'a>>(&'a self, delimiter: P) -> Option<(&'a str, &'a str)> {
       90 ( 0.00%)          let (start, end) = delimiter.into_searcher(self).next_match()?;
        .                   // SAFETY: `Searcher` is known to return valid indices.
        .                   unsafe { Some((self.get_unchecked(..start), self.get_unchecked(end..))) }
        .               }
        .           
        .               /// Splits the string on the last occurrence of the specified delimiter and
        .               /// returns prefix before delimiter and suffix after delimiter.
        .               ///
        .               /// # Examples
-- line 1556 ----------------------------------------
-- line 1748 ----------------------------------------
        .               /// let s = " Hello\tworld\t";
        .               ///
        .               /// assert_eq!("Hello\tworld", s.trim());
        .               /// ```
        .               #[inline]
        .               #[must_use = "this returns the trimmed string as a slice, \
        .                             without modifying the original"]
        .               #[stable(feature = "rust1", since = "1.0.0")]
    9,288 ( 0.00%)      pub fn trim(&self) -> &str {
   98,456 ( 0.00%)          self.trim_matches(|c: char| c.is_whitespace())
    6,192 ( 0.00%)      }
        .           
        .               /// Returns a string slice with leading whitespace removed.
        .               ///
        .               /// 'Whitespace' is defined according to the terms of the Unicode Derived
        .               /// Core Property `White_Space`.
        .               ///
        .               /// # Text directionality
        .               ///
-- line 1766 ----------------------------------------
-- line 1825 ----------------------------------------
        .               /// let s = "  עברית  ";
        .               /// assert!(Some('ת') == s.trim_end().chars().rev().next());
        .               /// ```
        .               #[inline]
        .               #[must_use = "this returns the trimmed string as a new slice, \
        .                             without modifying the original"]
        .               #[stable(feature = "trim_direction", since = "1.30.0")]
        .               pub fn trim_end(&self) -> &str {
    1,238 ( 0.00%)          self.trim_end_matches(|c: char| c.is_whitespace())
        .               }
        .           
        .               /// Returns a string slice with leading whitespace removed.
        .               ///
        .               /// 'Whitespace' is defined according to the terms of the Unicode Derived
        .               /// Core Property `White_Space`.
        .               ///
        .               /// # Text directionality
-- line 1841 ----------------------------------------
-- line 1945 ----------------------------------------
        .               /// A more complex pattern, using a closure:
        .               ///
        .               /// ```
        .               /// assert_eq!("1foo1barXX".trim_matches(|c| c == '1' || c == 'X'), "foo1bar");
        .               /// ```
        .               #[must_use = "this returns the trimmed string as a new slice, \
        .                             without modifying the original"]
        .               #[stable(feature = "rust1", since = "1.0.0")]
   53,718 ( 0.00%)      pub fn trim_matches<'a, P>(&'a self, pat: P) -> &'a str
        .               where
        .                   P: Pattern<'a, Searcher: DoubleEndedSearcher<'a>>,
        .               {
    3,418 ( 0.00%)          let mut i = 0;
    3,418 ( 0.00%)          let mut j = 0;
    6,836 ( 0.00%)          let mut matcher = pat.into_searcher(self);
   26,870 ( 0.00%)          if let Some((a, b)) = matcher.next_reject() {
    2,938 ( 0.00%)              i = a;
    2,938 ( 0.00%)              j = b; // Remember earliest known match, correct it below if
        .                       // last match is different
        .                   }
   20,514 ( 0.00%)          if let Some((_, b)) = matcher.next_reject_back() {
    2,938 ( 0.00%)              j = b;
        .                   }
        .                   // SAFETY: `Searcher` is known to return valid indices.
   37,598 ( 0.00%)          unsafe { self.get_unchecked(i..j) }
   40,046 ( 0.00%)      }
        .           
        .               /// Returns a string slice with all prefixes that match a pattern
        .               /// repeatedly removed.
        .               ///
        .               /// The [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a
        .               /// function or closure that determines if a character matches.
        .               ///
        .               /// [`char`]: prim@char
-- line 1978 ----------------------------------------
-- line 1994 ----------------------------------------
        .               /// assert_eq!("123foo1bar123".trim_start_matches(char::is_numeric), "foo1bar123");
        .               ///
        .               /// let x: &[_] = &['1', '2'];
        .               /// assert_eq!("12foo1bar12".trim_start_matches(x), "foo1bar12");
        .               /// ```
        .               #[must_use = "this returns the trimmed string as a new slice, \
        .                             without modifying the original"]
        .               #[stable(feature = "trim_direction", since = "1.30.0")]
   19,398 ( 0.00%)      pub fn trim_start_matches<'a, P: Pattern<'a>>(&'a self, pat: P) -> &'a str {
        .                   let mut i = self.len();
        .                   let mut matcher = pat.into_searcher(self);
        .                   if let Some((a, _)) = matcher.next_reject() {
        .                       i = a;
        .                   }
        .                   // SAFETY: `Searcher` is known to return valid indices.
        .                   unsafe { self.get_unchecked(i..self.len()) }
   19,398 ( 0.00%)      }
        .           
        .               /// Returns a string slice with the prefix removed.
        .               ///
        .               /// If the string starts with the pattern `prefix`, returns substring after the prefix, wrapped
        .               /// in `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.
        .               ///
        .               /// If the string does not start with `prefix`, returns `None`.
        .               ///
-- line 2018 ----------------------------------------
-- line 2098 ----------------------------------------
        .               /// A more complex pattern, using a closure:
        .               ///
        .               /// ```
        .               /// assert_eq!("1fooX".trim_end_matches(|c| c == '1' || c == 'X'), "1foo");
        .               /// ```
        .               #[must_use = "this returns the trimmed string as a new slice, \
        .                             without modifying the original"]
        .               #[stable(feature = "trim_direction", since = "1.30.0")]
   11,142 ( 0.00%)      pub fn trim_end_matches<'a, P>(&'a self, pat: P) -> &'a str
        .               where
        .                   P: Pattern<'a, Searcher: ReverseSearcher<'a>>,
        .               {
        .                   let mut j = 0;
        .                   let mut matcher = pat.into_searcher(self);
        .                   if let Some((_, b)) = matcher.next_reject_back() {
        .                       j = b;
        .                   }
        .                   // SAFETY: `Searcher` is known to return valid indices.
        .                   unsafe { self.get_unchecked(0..j) }
   12,380 ( 0.00%)      }
        .           
        .               /// Returns a string slice with all prefixes that match a pattern
        .               /// repeatedly removed.
        .               ///
        .               /// The [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a
        .               /// function or closure that determines if a character matches.
        .               ///
        .               /// [`char`]: prim@char
-- line 2125 ----------------------------------------
-- line 2239 ----------------------------------------
        .               ///
        .               /// ```
        .               /// let nope = "j".parse::<u32>();
        .               ///
        .               /// assert!(nope.is_err());
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
   29,799 ( 0.00%)      pub fn parse<F: FromStr>(&self) -> Result<F, F::Err> {
    7,444 ( 0.00%)          FromStr::from_str(self)
   12,681 ( 0.00%)      }
        .           
        .               /// Checks if all characters in this string are within the ASCII range.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let ascii = "hello!\n";
        .               /// let non_ascii = "Grüße, Jürgen ❤";
-- line 2257 ----------------------------------------
-- line 2420 ----------------------------------------
        .               /// Using `to_string`:
        .               ///
        .               /// ```
        .               /// assert_eq!("❤\n!".escape_default().to_string(), "\\u{2764}\\n!");
        .               /// ```
        .               #[must_use = "this returns the escaped string as an iterator, \
        .                             without modifying the original"]
        .               #[stable(feature = "str_escape", since = "1.34.0")]
      632 ( 0.00%)      pub fn escape_default(&self) -> EscapeDefault<'_> {
    2,528 ( 0.00%)          EscapeDefault { inner: self.chars().flat_map(CharEscapeDefault) }
      632 ( 0.00%)      }
        .           
        .               /// Return an iterator that escapes each char in `self` with [`char::escape_unicode`].
        .               ///
        .               /// # Examples
        .               ///
        .               /// As an iterator:
        .               ///
        .               /// ```
-- line 2438 ----------------------------------------
-- line 2466 ----------------------------------------
        .               pub fn escape_unicode(&self) -> EscapeUnicode<'_> {
        .                   EscapeUnicode { inner: self.chars().flat_map(CharEscapeUnicode) }
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl AsRef<[u8]> for str {
        .               #[inline]
   81,280 ( 0.00%)      fn as_ref(&self) -> &[u8] {
        .                   self.as_bytes()
   32,512 ( 0.00%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[rustc_const_unstable(feature = "const_default_impls", issue = "87864")]
        .           impl const Default for &str {
        .               /// Creates an empty str
        .               #[inline]
        .               fn default() -> Self {
-- line 2484 ----------------------------------------
-- line 2495 ----------------------------------------
        .                   unsafe { from_utf8_unchecked_mut(&mut []) }
        .               }
        .           }
        .           
        .           impl_fn_for_zst! {
        .               /// A nameable, cloneable fn type
        .               #[derive(Clone)]
        .               struct LinesAnyMap impl<'a> Fn = |line: &'a str| -> &'a str {
    7,359 ( 0.00%)          let l = line.len();
   40,871 ( 0.00%)          if l > 0 && line.as_bytes()[l - 1] == b'\r' { &line[0 .. l - 1] }
    4,906 ( 0.00%)          else { line }
        .               };
        .           
        .               #[derive(Clone)]
        .               struct CharEscapeDebugContinue impl Fn = |c: char| -> char::EscapeDebug {
        .                   c.escape_debug_ext(EscapeDebugExtArgs {
        .                       escape_grapheme_extended: false,
        .                       escape_single_quote: true,
        .                       escape_double_quote: true
-- line 2513 ----------------------------------------
-- line 2520 ----------------------------------------
        .               };
        .               #[derive(Clone)]
        .               struct CharEscapeDefault impl Fn = |c: char| -> char::EscapeDefault {
        .                   c.escape_default()
        .               };
        .           
        .               #[derive(Clone)]
        .               struct IsWhitespace impl Fn = |c: char| -> bool {
   69,016 ( 0.00%)          c.is_whitespace()
        .               };
        .           
        .               #[derive(Clone)]
        .               struct IsAsciiWhitespace impl Fn = |byte: &u8| -> bool {
        .                   byte.is_ascii_whitespace()
        .               };
        .           
        .               #[derive(Clone)]
        .               struct IsNotEmpty impl<'a, 'b> Fn = |s: &'a &'b str| -> bool {
   26,570 ( 0.00%)          !s.is_empty()
        .               };
        .           
        .               #[derive(Clone)]
        .               struct BytesIsNotEmpty impl<'a, 'b> Fn = |s: &'a &'b [u8]| -> bool {
        .                   !s.is_empty()
        .               };
        .           
        .               #[derive(Clone)]
-- line 2546 ----------------------------------------

1,683,441 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/str/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/vec_deque/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 126 ----------------------------------------
        .                           self.extend(remainder.iter().cloned());
        .                       }
        .                   }
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           unsafe impl<#[may_dangle] T, A: Allocator> Drop for VecDeque<T, A> {
   29,364 ( 0.00%)      fn drop(&mut self) {
        .                   /// Runs the destructor for all items in the slice when it gets dropped (normally or
        .                   /// during unwinding).
        .                   struct Dropper<'a, T>(&'a mut [T]);
        .           
        .                   impl<'a, T> Drop for Dropper<'a, T> {
        4 ( 0.00%)              fn drop(&mut self) {
        .                           unsafe {
        .                               ptr::drop_in_place(self.0);
        .                           }
        4 ( 0.00%)              }
        .                   }
        .           
       20 ( 0.00%)          let (front, back) = self.as_mut_slices();
        .                   unsafe {
        4 ( 0.00%)              let _back_dropper = Dropper(back);
        .                       // use drop for [T]
        .                       ptr::drop_in_place(front);
        4 ( 0.00%)          }
        .                   // RawVec handles deallocation
   33,556 ( 0.00%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T> Default for VecDeque<T> {
        .               /// Creates an empty `VecDeque<T>`.
        .               #[inline]
        .               fn default() -> VecDeque<T> {
        .                   VecDeque::new()
        .               }
        .           }
        .           
        .           impl<T, A: Allocator> VecDeque<T, A> {
        .               /// Marginally more convenient
        .               #[inline]
    9,588 ( 0.00%)      fn ptr(&self) -> *mut T {
   28,134 ( 0.00%)          self.buf.ptr()
    9,588 ( 0.00%)      }
        .           
        .               /// Marginally more convenient
        .               #[inline]
   28,758 ( 0.00%)      fn cap(&self) -> usize {
   38,344 ( 0.00%)          if mem::size_of::<T>() == 0 {
        .                       // For zero sized types, we are always at maximum capacity
        .                       MAXIMUM_ZST_CAPACITY
        .                   } else {
   51,281 ( 0.00%)              self.buf.capacity()
        .                   }
   28,758 ( 0.00%)      }
        .           
        .               /// Turn ptr into a slice
        .               #[inline]
        .               unsafe fn buffer_as_slice(&self) -> &[T] {
        .                   unsafe { slice::from_raw_parts(self.ptr(), self.cap()) }
        .               }
        .           
        .               /// Turn ptr into a mut slice
        .               #[inline]
        6 ( 0.00%)      unsafe fn buffer_as_mut_slice(&mut self) -> &mut [T] {
       14 ( 0.00%)          unsafe { slice::from_raw_parts_mut(self.ptr(), self.cap()) }
        4 ( 0.00%)      }
        .           
        .               /// Moves an element out of the buffer
        .               #[inline]
    9,584 ( 0.00%)      unsafe fn buffer_read(&mut self, off: usize) -> T {
  151,077 ( 0.00%)          unsafe { ptr::read(self.ptr().add(off)) }
    4,792 ( 0.00%)      }
        .           
        .               /// Writes an element into the buffer, moving it.
        .               #[inline]
   14,376 ( 0.00%)      unsafe fn buffer_write(&mut self, off: usize, value: T) {
        .                   unsafe {
   23,960 ( 0.00%)              ptr::write(self.ptr().add(off), value);
        .                   }
    4,792 ( 0.00%)      }
        .           
        .               /// Returns `true` if the buffer is at full capacity.
        .               #[inline]
        .               fn is_full(&self) -> bool {
  150,504 ( 0.00%)          self.cap() - self.len() == 1
        .               }
        .           
        .               /// Returns the index in the underlying buffer for a given logical element
        .               /// index.
        .               #[inline]
        .               fn wrap_index(&self, idx: usize) -> usize {
        .                   wrap_index(idx, self.cap())
        .               }
        .           
        .               /// Returns the index in the underlying buffer for a given logical element
        .               /// index + addend.
        .               #[inline]
   33,544 ( 0.00%)      fn wrap_add(&self, idx: usize, addend: usize) -> usize {
   19,168 ( 0.00%)          wrap_index(idx.wrapping_add(addend), self.cap())
    9,584 ( 0.00%)      }
        .           
        .               /// Returns the index in the underlying buffer for a given logical element
        .               /// index - subtrahend.
        .               #[inline]
        .               fn wrap_sub(&self, idx: usize, subtrahend: usize) -> usize {
        .                   wrap_index(idx.wrapping_sub(subtrahend), self.cap())
        .               }
        .           
-- line 236 ----------------------------------------
-- line 452 ----------------------------------------
        .                   //   [o o . o o o o o ]
        .                   //          T             H
        .                   // B [. . . o o o o o o o . . . . . . ]
        .                   //              H T
        .                   //   [o o o o o . o o ]
        .                   //              H                 T
        .                   // C [o o o o o . . . . . . . . . o o ]
        .           
      444 ( 0.00%)          if self.tail <= self.head {
        .                       // A
        .                       // Nop
       53 ( 0.00%)          } else if self.head < old_capacity - self.tail {
        .                       // B
        .                       unsafe {
        .                           self.copy_nonoverlapping(old_capacity, 0, self.head);
        .                       }
        3 ( 0.00%)              self.head += old_capacity;
        .                       debug_assert!(self.head > self.tail);
        .                   } else {
        .                       // C
       24 ( 0.00%)              let new_tail = new_capacity - (old_capacity - self.tail);
        .                       unsafe {
        8 ( 0.00%)                  self.copy_nonoverlapping(new_tail, self.tail, old_capacity - self.tail);
        .                       }
        8 ( 0.00%)              self.tail = new_tail;
        .                       debug_assert!(self.head < self.tail);
        .                   }
        .                   debug_assert!(self.head < self.cap());
        .                   debug_assert!(self.tail < self.cap());
        .                   debug_assert!(self.cap().count_ones() == 1);
        .               }
        .           }
        .           
-- line 484 ----------------------------------------
-- line 506 ----------------------------------------
        .               /// ```
        .               /// use std::collections::VecDeque;
        .               ///
        .               /// let vector: VecDeque<u32> = VecDeque::with_capacity(10);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[must_use]
        8 ( 0.00%)      pub fn with_capacity(capacity: usize) -> VecDeque<T> {
   11,898 ( 0.00%)          Self::with_capacity_in(capacity, Global)
        4 ( 0.00%)      }
        .           }
        .           
        .           impl<T, A: Allocator> VecDeque<T, A> {
        .               /// Creates an empty `VecDeque`.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// use std::collections::VecDeque;
        .               ///
        .               /// let vector: VecDeque<u32> = VecDeque::new();
        .               /// ```
        .               #[inline]
        .               #[unstable(feature = "allocator_api", issue = "32838")]
        .               pub fn new_in(alloc: A) -> VecDeque<T, A> {
    4,410 ( 0.00%)          VecDeque::with_capacity_in(INITIAL_CAPACITY, alloc)
        .               }
        .           
        .               /// Creates an empty `VecDeque` with space for at least `capacity` elements.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// use std::collections::VecDeque;
        .               ///
        .               /// let vector: VecDeque<u32> = VecDeque::with_capacity(10);
        .               /// ```
        .               #[unstable(feature = "allocator_api", issue = "32838")]
   32,622 ( 0.00%)      pub fn with_capacity_in(capacity: usize, alloc: A) -> VecDeque<T, A> {
   20,246 ( 0.00%)          assert!(capacity < 1_usize << usize::BITS - 1, "capacity overflow");
        .                   // +1 since the ringbuffer always leaves one space empty
       30 ( 0.00%)          let cap = cmp::max(capacity + 1, MINIMUM_CAPACITY + 1).next_power_of_two();
        .           
   49,760 ( 0.00%)          VecDeque { tail: 0, head: 0, buf: RawVec::with_capacity_in(cap, alloc) }
   48,922 ( 0.00%)      }
        .           
        .               /// Provides a reference to the element at the given index.
        .               ///
        .               /// Element at index 0 is the front of the queue.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 559 ----------------------------------------
-- line 562 ----------------------------------------
        .               /// let mut buf = VecDeque::new();
        .               /// buf.push_back(3);
        .               /// buf.push_back(4);
        .               /// buf.push_back(5);
        .               /// assert_eq!(buf.get(1), Some(&4));
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn get(&self, index: usize) -> Option<&T> {
   11,815 ( 0.00%)          if index < self.len() {
        .                       let idx = self.wrap_add(self.tail, index);
        .                       unsafe { Some(&*self.ptr().add(idx)) }
        .                   } else {
        .                       None
        .                   }
        .               }
        .           
        .               /// Provides a mutable reference to the element at the given index.
-- line 578 ----------------------------------------
-- line 591 ----------------------------------------
        .               /// if let Some(elem) = buf.get_mut(1) {
        .               ///     *elem = 7;
        .               /// }
        .               ///
        .               /// assert_eq!(buf[1], 7);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn get_mut(&mut self, index: usize) -> Option<&mut T> {
    7,218 ( 0.00%)          if index < self.len() {
        .                       let idx = self.wrap_add(self.tail, index);
        .                       unsafe { Some(&mut *self.ptr().add(idx)) }
        .                   } else {
        .                       None
        .                   }
        .               }
        .           
        .               /// Swaps elements at indices `i` and `j`.
-- line 607 ----------------------------------------
-- line 644 ----------------------------------------
        .               /// ```
        .               /// use std::collections::VecDeque;
        .               ///
        .               /// let buf: VecDeque<i32> = VecDeque::with_capacity(10);
        .               /// assert!(buf.capacity() >= 10);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
    4,792 ( 0.00%)      pub fn capacity(&self) -> usize {
   16,772 ( 0.00%)          self.cap() - 1
    4,792 ( 0.00%)      }
        .           
        .               /// Reserves the minimum capacity for exactly `additional` more elements to be inserted in the
        .               /// given `VecDeque`. Does nothing if the capacity is already sufficient.
        .               ///
        .               /// Note that the allocator may give the collection more space than it requests. Therefore
        .               /// capacity can not be relied upon to be precisely minimal. Prefer [`reserve`] if future
        .               /// insertions are expected.
        .               ///
-- line 662 ----------------------------------------
-- line 692 ----------------------------------------
        .               /// ```
        .               /// use std::collections::VecDeque;
        .               ///
        .               /// let mut buf: VecDeque<i32> = [1].into();
        .               /// buf.reserve(10);
        .               /// assert!(buf.capacity() >= 11);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        3 ( 0.00%)      pub fn reserve(&mut self, additional: usize) {
        .                   let old_cap = self.cap();
       10 ( 0.00%)          let used_cap = self.len() + 1;
        .                   let new_cap = used_cap
        .                       .checked_add(additional)
        .                       .and_then(|needed_cap| needed_cap.checked_next_power_of_two())
        .                       .expect("capacity overflow");
        .           
       18 ( 0.00%)          if new_cap > old_cap {
       28 ( 0.00%)              self.buf.reserve_exact(used_cap, new_cap - used_cap);
        .                       unsafe {
        .                           self.handle_capacity_increase(old_cap);
        .                       }
        .                   }
        4 ( 0.00%)      }
        .           
        .               /// Tries to reserve the minimum capacity for exactly `additional` more elements to
        .               /// be inserted in the given `VecDeque<T>`. After calling `try_reserve_exact`,
        .               /// capacity will be greater than or equal to `self.len() + additional`.
        .               /// Does nothing if the capacity is already sufficient.
        .               ///
        .               /// Note that the allocator may give the collection more space than it
        .               /// requests. Therefore, capacity can not be relied upon to be precisely
-- line 722 ----------------------------------------
-- line 924 ----------------------------------------
        .               /// buf.push_back(5);
        .               /// buf.push_back(10);
        .               /// buf.push_back(15);
        .               /// assert_eq!(buf, [5, 10, 15]);
        .               /// buf.truncate(1);
        .               /// assert_eq!(buf, [5]);
        .               /// ```
        .               #[stable(feature = "deque_extras", since = "1.16.0")]
    3,336 ( 0.00%)      pub fn truncate(&mut self, len: usize) {
        .                   /// Runs the destructor for all items in the slice when it gets dropped (normally or
        .                   /// during unwinding).
        .                   struct Dropper<'a, T>(&'a mut [T]);
        .           
        .                   impl<'a, T> Drop for Dropper<'a, T> {
        .                       fn drop(&mut self) {
        .                           unsafe {
        .                               ptr::drop_in_place(self.0);
-- line 940 ----------------------------------------
-- line 945 ----------------------------------------
        .                   // Safe because:
        .                   //
        .                   // * Any slice passed to `drop_in_place` is valid; the second case has
        .                   //   `len <= front.len()` and returning on `len > self.len()` ensures
        .                   //   `begin <= back.len()` in the first case
        .                   // * The head of the VecDeque is moved before calling `drop_in_place`,
        .                   //   so no value is dropped twice if `drop_in_place` panics
        .                   unsafe {
      834 ( 0.00%)              if len > self.len() {
        .                           return;
        .                       }
        .                       let num_dropped = self.len() - len;
        .                       let (front, back) = self.as_mut_slices();
      834 ( 0.00%)              if len > front.len() {
        .                           let begin = len - front.len();
        .                           let drop_back = back.get_unchecked_mut(begin..) as *mut _;
        .                           self.head = self.wrap_sub(self.head, num_dropped);
        .                           ptr::drop_in_place(drop_back);
        .                       } else {
        .                           let drop_back = back as *mut _;
        .                           let drop_front = front.get_unchecked_mut(len..) as *mut _;
      417 ( 0.00%)                  self.head = self.wrap_sub(self.head, num_dropped);
        .           
        .                           // Make sure the second half is dropped even when a destructor
        .                           // in the first one panics.
        .                           let _back_dropper = Dropper(&mut *drop_back);
        .                           ptr::drop_in_place(drop_front);
        .                       }
        .                   }
    3,336 ( 0.00%)      }
        .           
        .               /// Returns a reference to the underlying allocator.
        .               #[unstable(feature = "allocator_api", issue = "32838")]
        .               #[inline]
        .               pub fn allocator(&self) -> &A {
        .                   self.buf.allocator()
        .               }
        .           
-- line 982 ----------------------------------------
-- line 1083 ----------------------------------------
        .               /// vector.push_front(9);
        .               ///
        .               /// vector.as_mut_slices().0[0] = 42;
        .               /// vector.as_mut_slices().1[0] = 24;
        .               /// assert_eq!(vector.as_slices(), (&[42, 10][..], &[24, 1][..]));
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "deque_extras_15", since = "1.5.0")]
       14 ( 0.00%)      pub fn as_mut_slices(&mut self) -> (&mut [T], &mut [T]) {
        .                   unsafe {
   16,348 ( 0.00%)              let head = self.head;
   16,348 ( 0.00%)              let tail = self.tail;
   17,634 ( 0.00%)              let buf = self.buffer_as_mut_slice();
        2 ( 0.00%)              RingSlices::ring_slices(buf, head, tail)
        .                   }
        4 ( 0.00%)      }
        .           
        .               /// Returns the number of elements in the `VecDeque`.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// use std::collections::VecDeque;
        .               ///
        .               /// let mut v = VecDeque::new();
        .               /// assert_eq!(v.len(), 0);
        .               /// v.push_back(1);
        .               /// assert_eq!(v.len(), 1);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
    4,792 ( 0.00%)      pub fn len(&self) -> usize {
   25,782 ( 0.00%)          count(self.tail, self.head, self.cap())
    4,792 ( 0.00%)      }
        .           
        .               /// Returns `true` if the `VecDeque` is empty.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// use std::collections::VecDeque;
        .               ///
        .               /// let mut v = VecDeque::new();
        .               /// assert!(v.is_empty());
        .               /// v.push_front(1);
        .               /// assert!(!v.is_empty());
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
1,114,400 ( 0.02%)      pub fn is_empty(&self) -> bool {
1,761,967 ( 0.04%)          self.tail == self.head
2,228,800 ( 0.05%)      }
        .           
        .               fn range_tail_head<R>(&self, range: R) -> (usize, usize)
        .               where
        .                   R: RangeBounds<usize>,
        .               {
        .                   let Range { start, end } = slice::range(range, ..self.len());
        .                   let tail = self.wrap_add(self.tail, start);
        .                   let head = self.wrap_add(self.tail, end);
-- line 1140 ----------------------------------------
-- line 1307 ----------------------------------------
        .               /// let mut v = VecDeque::new();
        .               /// v.push_back(1);
        .               /// v.clear();
        .               /// assert!(v.is_empty());
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
        .               pub fn clear(&mut self) {
      853 ( 0.00%)          self.truncate(0);
        .               }
        .           
        .               /// Returns `true` if the `VecDeque` contains an element equal to the
        .               /// given value.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 1323 ----------------------------------------
-- line 1396 ----------------------------------------
        .               /// assert_eq!(d.back(), None);
        .               ///
        .               /// d.push_back(1);
        .               /// d.push_back(2);
        .               /// assert_eq!(d.back(), Some(&2));
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn back(&self) -> Option<&T> {
      495 ( 0.00%)          self.get(self.len().wrapping_sub(1))
        .               }
        .           
        .               /// Provides a mutable reference to the back element, or `None` if the
        .               /// `VecDeque` is empty.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 1412 ----------------------------------------
-- line 1440 ----------------------------------------
        .               /// d.push_back(1);
        .               /// d.push_back(2);
        .               ///
        .               /// assert_eq!(d.pop_front(), Some(1));
        .               /// assert_eq!(d.pop_front(), Some(2));
        .               /// assert_eq!(d.pop_front(), None);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
  829,746 ( 0.02%)      pub fn pop_front(&mut self) -> Option<T> {
1,231,340 ( 0.03%)          if self.is_empty() {
  274,186 ( 0.01%)              None
        .                   } else {
    7,188 ( 0.00%)              let tail = self.tail;
  115,945 ( 0.00%)              self.tail = self.wrap_add(self.tail, 1);
   54,491 ( 0.00%)              unsafe { Some(self.buffer_read(tail)) }
        .                   }
  829,746 ( 0.02%)      }
        .           
        .               /// Removes the last element from the `VecDeque` and returns it, or `None` if
        .               /// it is empty.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// use std::collections::VecDeque;
-- line 1464 ----------------------------------------
-- line 1466 ----------------------------------------
        .               /// let mut buf = VecDeque::new();
        .               /// assert_eq!(buf.pop_back(), None);
        .               /// buf.push_back(1);
        .               /// buf.push_back(3);
        .               /// assert_eq!(buf.pop_back(), Some(3));
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn pop_back(&mut self) -> Option<T> {
    1,183 ( 0.00%)          if self.is_empty() {
        .                       None
        .                   } else {
    1,823 ( 0.00%)              self.head = self.wrap_sub(self.head, 1);
        .                       let head = self.head;
        .                       unsafe { Some(self.buffer_read(head)) }
        .                   }
        .               }
        .           
        .               /// Prepends an element to the `VecDeque`.
        .               ///
        .               /// # Examples
-- line 1485 ----------------------------------------
-- line 1513 ----------------------------------------
        .               /// use std::collections::VecDeque;
        .               ///
        .               /// let mut buf = VecDeque::new();
        .               /// buf.push_back(1);
        .               /// buf.push_back(3);
        .               /// assert_eq!(3, *buf.back().unwrap());
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
    7,656 ( 0.00%)      pub fn push_back(&mut self, value: T) {
  150,504 ( 0.00%)          if self.is_full() {
      183 ( 0.00%)              self.grow();
        .                   }
        .           
      102 ( 0.00%)          let head = self.head;
   50,270 ( 0.00%)          self.head = self.wrap_add(self.head, 1);
   48,254 ( 0.00%)          unsafe { self.buffer_write(head, value) }
    7,656 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn is_contiguous(&self) -> bool {
        .                   // FIXME: Should we consider `head == 0` to mean
        .                   // that `self` is contiguous?
        .                   self.tail <= self.head
        .               }
        .           
-- line 1537 ----------------------------------------
-- line 2209 ----------------------------------------
        .                       self.truncate(idx);
        .                   }
        .               }
        .           
        .               // Double the buffer size. This method is inline(never), so we expect it to only
        .               // be called in cold paths.
        .               // This may panic or abort
        .               #[inline(never)]
      612 ( 0.00%)      fn grow(&mut self) {
        .                   // Extend or possibly remove this assertion when valid use-cases for growing the
        .                   // buffer without it being full emerge
        .                   debug_assert!(self.is_full());
        .                   let old_cap = self.cap();
      306 ( 0.00%)          self.buf.reserve_exact(old_cap, old_cap);
      510 ( 0.00%)          assert!(self.cap() == old_cap * 2);
        .                   unsafe {
        .                       self.handle_capacity_increase(old_cap);
        .                   }
        .                   debug_assert!(!self.is_full());
      612 ( 0.00%)      }
        .           
        .               /// Modifies the `VecDeque` in-place so that `len()` is equal to `new_len`,
        .               /// either by removing excess elements from the back or by appending
        .               /// elements generated by calling `generator` to the back.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 2236 ----------------------------------------
-- line 2748 ----------------------------------------
        .               #[stable(feature = "deque_extras", since = "1.16.0")]
        .               pub fn resize(&mut self, new_len: usize, value: T) {
        .                   self.resize_with(new_len, || value.clone());
        .               }
        .           }
        .           
        .           /// Returns the index in the underlying buffer for a given logical element index.
        .           #[inline]
   19,168 ( 0.00%)  fn wrap_index(index: usize, size: usize) -> usize {
        .               // size is always a power of 2
        .               debug_assert!(size.is_power_of_two());
  336,070 ( 0.01%)      index & (size - 1)
    9,584 ( 0.00%)  }
        .           
        .           /// Calculate the number of elements left to be read in the buffer
        .           #[inline]
   16,772 ( 0.00%)  fn count(tail: usize, head: usize, size: usize) -> usize {
        .               // size is always a power of 2
  282,025 ( 0.01%)      (head.wrapping_sub(tail)) & (size - 1)
    4,792 ( 0.00%)  }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T: PartialEq, A: Allocator> PartialEq for VecDeque<T, A> {
        .               fn eq(&self, other: &Self) -> bool {
        .                   if self.len() != other.len() {
        .                       return false;
        .                   }
        .                   let (sa, sb) = self.as_slices();
-- line 2775 ----------------------------------------
-- line 2902 ----------------------------------------
        .           
        .               fn into_iter(self) -> IterMut<'a, T> {
        .                   self.iter_mut()
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> Extend<T> for VecDeque<T, A> {
   27,980 ( 0.00%)      fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {
        .                   // This function should be the moral equivalent of:
        .                   //
        .                   //      for item in iter.into_iter() {
        .                   //          self.push_back(item);
        .                   //      }
   11,980 ( 0.00%)          let mut iter = iter.into_iter();
   86,256 ( 0.00%)          while let Some(element) = iter.next() {
   27,271 ( 0.00%)              if self.len() == self.capacity() {
        .                           let (lower, _) = iter.size_hint();
        2 ( 0.00%)                  self.reserve(lower.saturating_add(1));
        .                       }
        .           
    7,189 ( 0.00%)              let head = self.head;
   17,520 ( 0.00%)              self.head = self.wrap_add(self.head, 1);
        .                       unsafe {
    9,808 ( 0.00%)                  self.buffer_write(head, element);
        .                       }
    2,396 ( 0.00%)          }
    9,044 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn extend_one(&mut self, elem: T) {
        .                   self.push_back(elem);
        .               }
        .           
        .               #[inline]
        .               fn extend_reserve(&mut self, additional: usize) {
-- line 2937 ----------------------------------------

  426,189 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/vec_deque/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs
--------------------------------------------------------------------------------
Ir                  

-- line 91 ----------------------------------------
         .           // maximum of number bytes needed to fill an 8-byte-sized element on which
         .           // SipHash operates. Note that for variable-sized copies which are known to be
         .           // less than 8 bytes, this function will perform more work than necessary unless
         .           // the compiler is able to optimize the extra work away.
         .           #[inline]
         .           unsafe fn copy_nonoverlapping_small(src: *const u8, dst: *mut u8, count: usize) {
         .               debug_assert!(count <= 8);
         .           
    97,341 ( 0.00%)      if count == 8 {
         .                   ptr::copy_nonoverlapping(src, dst, 8);
         .                   return;
         .               }
         .           
         .               let mut i = 0;
   106,710 ( 0.00%)      if i + 3 < count {
         .                   ptr::copy_nonoverlapping(src.add(i), dst.add(i), 4);
         .                   i += 4;
         .               }
         .           
   231,482 ( 0.00%)      if i + 1 < count {
         .                   ptr::copy_nonoverlapping(src.add(i), dst.add(i), 2);
    28,426 ( 0.00%)          i += 2
         .               }
         .           
   106,710 ( 0.00%)      if i < count {
    72,604 ( 0.00%)          *dst.add(i) = *src.add(i);
         .                   i += 1;
         .               }
         .           
         .               debug_assert_eq!(i, count);
         .           }
         .           
         .           // # Implementation
         .           //
-- line 124 ----------------------------------------
-- line 201 ----------------------------------------
         .           
         .                   hasher
         .               }
         .           
         .               // A specialized write function for values with size <= 8.
         .               #[inline]
         .               fn short_write<T>(&mut self, x: T) {
         .                   let size = mem::size_of::<T>();
 1,470,981 ( 0.03%)          let nbuf = self.nbuf;
         .                   debug_assert!(size <= 8);
         .                   debug_assert!(nbuf < BUFFER_SIZE);
         .                   debug_assert!(nbuf + size < BUFFER_WITH_SPILL_SIZE);
         .           
10,248,172 ( 0.21%)          if nbuf + size < BUFFER_SIZE {
         .                       unsafe {
         .                           // The memcpy call is optimized away because the size is known.
         .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
         .                           ptr::copy_nonoverlapping(&x as *const _ as *const u8, dst, size);
         .                       }
         .           
 3,268,528 ( 0.07%)              self.nbuf = nbuf + size;
         .           
         .                       return;
         .                   }
         .           
   561,858 ( 0.01%)          unsafe { self.short_write_process_buffer(x) }
         .               }
         .           
         .               // A specialized write function for values with size <= 8 that should only
         .               // be called when the write would cause the buffer to fill.
         .               //
         .               // SAFETY: the write of `x` into `self.buf` starting at byte offset
         .               // `self.nbuf` must cause `self.buf` to become fully initialized (and not
         .               // overflow) if it wasn't already.
         .               #[inline(never)]
   164,910 ( 0.00%)      unsafe fn short_write_process_buffer<T>(&mut self, x: T) {
         .                   let size = mem::size_of::<T>();
   164,910 ( 0.00%)          let nbuf = self.nbuf;
         .                   debug_assert!(size <= 8);
         .                   debug_assert!(nbuf < BUFFER_SIZE);
         .                   debug_assert!(nbuf + size >= BUFFER_SIZE);
         .                   debug_assert!(nbuf + size < BUFFER_WITH_SPILL_SIZE);
         .           
         .                   // Copy first part of input into end of buffer, possibly into spill
         .                   // element. The memcpy call is optimized away because the size is known.
         .                   let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
         .                   ptr::copy_nonoverlapping(&x as *const _ as *const u8, dst, size);
         .           
         .                   // Process buffer.
         .                   for i in 0..BUFFER_CAPACITY {
 1,649,100 ( 0.03%)              let elem = self.buf.get_unchecked(i).assume_init().to_le();
 1,319,280 ( 0.03%)              self.state.v3 ^= elem;
         .                       Sip24Rounds::c_rounds(&mut self.state);
 1,484,190 ( 0.03%)              self.state.v0 ^= elem;
         .                   }
         .           
         .                   // Copy remaining input into start of buffer by copying size - 1
         .                   // elements from spill (at most size - 1 bytes could have overflowed
         .                   // into the spill). The memcpy call is optimized away because the size
         .                   // is known. And the whole copy is optimized away for size == 1.
         .                   let src = self.buf.get_unchecked(BUFFER_SPILL_INDEX) as *const _ as *const u8;
         .                   ptr::copy_nonoverlapping(src, self.buf.as_mut_ptr() as *mut u8, size - 1);
         .           
         .                   // This function should only be called when the write fills the buffer.
         .                   // Therefore, when size == 1, the new `self.nbuf` must be zero. The size
         .                   // is statically known, so the branch is optimized away.
   783,682 ( 0.02%)          self.nbuf = if size == 1 { 0 } else { nbuf + size - BUFFER_SIZE };
   659,640 ( 0.01%)          self.processed += BUFFER_SIZE;
   329,820 ( 0.01%)      }
         .           
         .               // A write function for byte slices.
         .               #[inline]
         .               fn slice_write(&mut self, msg: &[u8]) {
         .                   let length = msg.len();
    17,870 ( 0.00%)          let nbuf = self.nbuf;
         .                   debug_assert!(nbuf < BUFFER_SIZE);
         .           
   342,773 ( 0.01%)          if nbuf + length < BUFFER_SIZE {
         .                       unsafe {
         .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
         .           
   121,716 ( 0.00%)                  if length <= 8 {
         .                               copy_nonoverlapping_small(msg.as_ptr(), dst, length);
         .                           } else {
         .                               // This memcpy is *not* optimized away.
         .                               ptr::copy_nonoverlapping(msg.as_ptr(), dst, length);
         .                           }
         .                       }
         .           
    62,574 ( 0.00%)              self.nbuf = nbuf + length;
         .           
         .                       return;
         .                   }
         .           
    52,530 ( 0.00%)          unsafe { self.slice_write_process_buffer(msg) }
         .               }
         .           
         .               // A write function for byte slices that should only be called when the
         .               // write would cause the buffer to fill.
         .               //
         .               // SAFETY: `self.buf` must be initialized up to the byte offset `self.nbuf`,
         .               // and `msg` must contain enough bytes to initialize the rest of the element
         .               // containing the byte offset `self.nbuf`.
         .               #[inline(never)]
    32,420 ( 0.00%)      unsafe fn slice_write_process_buffer(&mut self, msg: &[u8]) {
         .                   let length = msg.len();
     6,484 ( 0.00%)          let nbuf = self.nbuf;
         .                   debug_assert!(nbuf < BUFFER_SIZE);
         .                   debug_assert!(nbuf + length >= BUFFER_SIZE);
         .           
         .                   // Always copy first part of input into current element of buffer.
         .                   // This function should only be called when the write fills the buffer,
         .                   // so we know that there is enough input to fill the current element.
    19,452 ( 0.00%)          let valid_in_elem = nbuf % ELEM_SIZE;
     6,484 ( 0.00%)          let needed_in_elem = ELEM_SIZE - valid_in_elem;
         .           
         .                   let src = msg.as_ptr();
         .                   let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
         .                   copy_nonoverlapping_small(src, dst, needed_in_elem);
         .           
         .                   // Process buffer.
         .           
         .                   // Using `nbuf / ELEM_SIZE + 1` rather than `(nbuf + needed_in_elem) /
         .                   // ELEM_SIZE` to show the compiler that this loop's upper bound is > 0.
         .                   // We know that is true, because last step ensured we have a full
         .                   // element in the buffer.
    12,968 ( 0.00%)          let last = nbuf / ELEM_SIZE + 1;
         .           
         .                   for i in 0..last {
    48,662 ( 0.00%)              let elem = self.buf.get_unchecked(i).assume_init().to_le();
    55,146 ( 0.00%)              self.state.v3 ^= elem;
         .                       Sip24Rounds::c_rounds(&mut self.state);
    97,324 ( 0.00%)              self.state.v0 ^= elem;
         .                   }
         .           
         .                   // Process the remaining element-sized chunks of input.
         .                   let mut processed = needed_in_elem;
    12,968 ( 0.00%)          let input_left = length - processed;
     8,334 ( 0.00%)          let elems_left = input_left / ELEM_SIZE;
         .                   let extra_bytes_left = input_left % ELEM_SIZE;
         .           
         .                   for _ in 0..elems_left {
    17,159 ( 0.00%)              let elem = (msg.as_ptr().add(processed) as *const u64).read_unaligned().to_le();
    17,159 ( 0.00%)              self.state.v3 ^= elem;
         .                       Sip24Rounds::c_rounds(&mut self.state);
    17,159 ( 0.00%)              self.state.v0 ^= elem;
    34,318 ( 0.00%)              processed += ELEM_SIZE;
         .                   }
         .           
         .                   // Copy remaining input into start of buffer.
         .                   let src = msg.as_ptr().add(processed);
         .                   let dst = self.buf.as_mut_ptr() as *mut u8;
         .                   copy_nonoverlapping_small(src, dst, extra_bytes_left);
         .           
     6,484 ( 0.00%)          self.nbuf = extra_bytes_left;
    32,420 ( 0.00%)          self.processed += nbuf + processed;
    38,904 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn finish128(mut self) -> (u64, u64) {
         .                   debug_assert!(self.nbuf < BUFFER_SIZE);
         .           
         .                   // Process full elements in buffer.
    59,424 ( 0.00%)          let last = self.nbuf / ELEM_SIZE;
         .           
         .                   // Since we're consuming self, avoid updating members for a potential
         .                   // performance gain.
    79,232 ( 0.00%)          let mut state = self.state;
         .           
         .                   for i in 0..last {
    57,871 ( 0.00%)              let elem = unsafe { self.buf.get_unchecked(i).assume_init().to_le() };
    57,871 ( 0.00%)              state.v3 ^= elem;
         .                       Sip24Rounds::c_rounds(&mut state);
    57,871 ( 0.00%)              state.v0 ^= elem;
         .                   }
         .           
         .                   // Get remaining partial element.
    39,616 ( 0.00%)          let elem = if self.nbuf % ELEM_SIZE != 0 {
         .                       unsafe {
         .                           // Ensure element is initialized by writing zero bytes. At most
         .                           // `ELEM_SIZE - 1` are required given the above check. It's safe
         .                           // to write this many because we have the spill and we maintain
         .                           // `self.nbuf` such that this write will start before the spill.
         .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(self.nbuf);
         .                           ptr::write_bytes(dst, 0, ELEM_SIZE - 1);
    17,151 ( 0.00%)                  self.buf.get_unchecked(last).assume_init().to_le()
         .                       }
         .                   } else {
         .                       0
         .                   };
         .           
         .                   // Finalize the hash.
    56,767 ( 0.00%)          let length = self.processed + self.nbuf;
    39,614 ( 0.00%)          let b: u64 = ((length as u64 & 0xff) << 56) | elem;
         .           
    19,807 ( 0.00%)          state.v3 ^= b;
         .                   Sip24Rounds::c_rounds(&mut state);
    19,807 ( 0.00%)          state.v0 ^= b;
         .           
    19,807 ( 0.00%)          state.v2 ^= 0xee;
         .                   Sip24Rounds::d_rounds(&mut state);
    65,416 ( 0.00%)          let _0 = state.v0 ^ state.v1 ^ state.v2 ^ state.v3;
         .           
    25,800 ( 0.00%)          state.v1 ^= 0xdd;
         .                   Sip24Rounds::d_rounds(&mut state);
    25,800 ( 0.00%)          let _1 = state.v0 ^ state.v1 ^ state.v2 ^ state.v3;
         .           
         .                   (_0, _1)
         .               }
         .           }
         .           
         .           impl Hasher for SipHasher128 {
         .               #[inline]
         .               fn write_u8(&mut self, i: u8) {
-- line 414 ----------------------------------------
-- line 471 ----------------------------------------
         .           }
         .           
         .           #[derive(Debug, Clone, Default)]
         .           struct Sip24Rounds;
         .           
         .           impl Sip24Rounds {
         .               #[inline]
         .               fn c_rounds(state: &mut State) {
 6,035,478 ( 0.13%)          compress!(state);
 6,491,832 ( 0.14%)          compress!(state);
         .               }
         .           
         .               #[inline]
         .               fn d_rounds(state: &mut State) {
   130,828 ( 0.00%)          compress!(state);
   130,828 ( 0.00%)          compress!(state);
   130,828 ( 0.00%)          compress!(state);
   111,022 ( 0.00%)          compress!(state);
         .               }
         .           }

 1,140,646 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs
--------------------------------------------------------------------------------
Ir                 

-- line 27 ----------------------------------------
        .           impl CacheEntry {
        .               #[inline]
        .               fn update(
        .                   &mut self,
        .                   new_file_and_idx: Option<(Lrc<SourceFile>, usize)>,
        .                   pos: BytePos,
        .                   time_stamp: usize,
        .               ) {
   12,692 ( 0.00%)          if let Some((file, file_idx)) = new_file_and_idx {
    7,264 ( 0.00%)              self.file = file;
   10,259 ( 0.00%)              self.file_index = file_idx;
        .                   }
        .           
    5,752 ( 0.00%)          let line_index = self.file.lookup_line(pos).unwrap();
        .                   let line_bounds = self.file.line_bounds(line_index);
   23,186 ( 0.00%)          self.line_number = line_index + 1;
   34,941 ( 0.00%)          self.line = line_bounds;
        .                   self.touch(time_stamp);
        .               }
        .           
        .               #[inline]
        .               fn touch(&mut self, time_stamp: usize) {
  304,352 ( 0.01%)          self.time_stamp = time_stamp;
        .               }
        .           }
        .           
        .           #[derive(Clone)]
        .           pub struct CachingSourceMapView<'sm> {
        .               source_map: &'sm SourceMap,
        .               line_cache: [CacheEntry; 3],
        .               time_stamp: usize,
        .           }
        .           
        .           impl<'sm> CachingSourceMapView<'sm> {
    9,154 ( 0.00%)      pub fn new(source_map: &'sm SourceMap) -> CachingSourceMapView<'sm> {
        .                   let files = source_map.files();
    4,577 ( 0.00%)          let first_file = files[0].clone();
        .                   let entry = CacheEntry {
        .                       time_stamp: 0,
        .                       line_number: 0,
        .                       line: BytePos(0)..BytePos(0),
        .                       file: first_file,
        .                       file_index: 0,
        .                   };
        .           
   22,885 ( 0.00%)          CachingSourceMapView {
        .                       source_map,
   32,039 ( 0.00%)              line_cache: [entry.clone(), entry.clone(), entry],
        .                       time_stamp: 0,
        .                   }
   18,308 ( 0.00%)      }
        .           
        .               pub fn byte_pos_to_line_and_col(
        .                   &mut self,
        .                   pos: BytePos,
        .               ) -> Option<(Lrc<SourceFile>, usize, BytePos)> {
        .                   self.time_stamp += 1;
        .           
        .                   // Check if the position is in one of the cached lines
-- line 85 ----------------------------------------
-- line 106 ----------------------------------------
        .                   };
        .           
        .                   let cache_entry = &mut self.line_cache[oldest];
        .                   cache_entry.update(new_file_and_idx, pos, self.time_stamp);
        .           
        .                   Some((cache_entry.file.clone(), cache_entry.line_number, pos - cache_entry.line.start))
        .               }
        .           
1,102,766 ( 0.02%)      pub fn span_data_to_lines_and_cols(
        .                   &mut self,
        .                   span_data: &SpanData,
        .               ) -> Option<(Lrc<SourceFile>, usize, BytePos, usize, BytePos)> {
  630,152 ( 0.01%)          self.time_stamp += 1;
        .           
        .                   // Check if lo and hi are in the cached lines.
  157,538 ( 0.00%)          let lo_cache_idx = self.cache_entry_index(span_data.lo);
  157,538 ( 0.00%)          let hi_cache_idx = self.cache_entry_index(span_data.hi);
        .           
  294,956 ( 0.01%)          if lo_cache_idx != -1 && hi_cache_idx != -1 {
        .                       // Cache hit for span lo and hi. Check if they belong to the same file.
        .                       let result = {
  294,288 ( 0.01%)                  let lo = &self.line_cache[lo_cache_idx as usize];
        .                           let hi = &self.line_cache[hi_cache_idx as usize];
        .           
  882,864 ( 0.02%)                  if lo.file_index != hi.file_index {
        .                               return None;
        .                           }
        .           
        .                           (
  294,182 ( 0.01%)                      lo.file.clone(),
        .                               lo.line_number,
        .                               span_data.lo - lo.line.start,
  147,091 ( 0.00%)                      hi.line_number,
        .                               span_data.hi - hi.line.start,
        .                           )
        .                       };
        .           
  147,091 ( 0.00%)              self.line_cache[lo_cache_idx as usize].touch(self.time_stamp);
  147,091 ( 0.00%)              self.line_cache[hi_cache_idx as usize].touch(self.time_stamp);
        .           
  588,364 ( 0.01%)              return Some(result);
        .                   }
        .           
        .                   // No cache hit or cache hit for only one of span lo and hi.
   20,120 ( 0.00%)          let oldest = if lo_cache_idx != -1 || hi_cache_idx != -1 {
        .                       let avoid_idx = if lo_cache_idx != -1 { lo_cache_idx } else { hi_cache_idx };
        .                       self.oldest_cache_entry_index_avoid(avoid_idx as usize)
        .                   } else {
        .                       self.oldest_cache_entry_index()
        .                   };
        .           
        .                   // If the entry doesn't point to the correct file, get the new file and index.
        .                   // Return early if the file containing beginning of span doesn't contain end of span.
   80,920 ( 0.00%)          let new_file_and_idx = if !file_contains(&self.line_cache[oldest].file, span_data.lo) {
   22,710 ( 0.00%)              let new_file_and_idx = self.file_for_position(span_data.lo)?;
   27,252 ( 0.00%)              if !file_contains(&new_file_and_idx.0, span_data.hi) {
      124 ( 0.00%)                  return None;
        .                       }
        .           
   17,672 ( 0.00%)              Some(new_file_and_idx)
        .                   } else {
        .                       let file = &self.line_cache[oldest].file;
   17,556 ( 0.00%)              if !file_contains(&file, span_data.hi) {
        .                           return None;
        .                       }
        .           
   17,256 ( 0.00%)              None
        .                   };
        .           
        .                   // Update the cache entries.
   50,850 ( 0.00%)          let (lo_idx, hi_idx) = match (lo_cache_idx, hi_cache_idx) {
        .                       // Oldest cache entry is for span_data.lo line.
        .                       (-1, -1) => {
        .                           let lo = &mut self.line_cache[oldest];
        .                           lo.update(new_file_and_idx, span_data.lo, self.time_stamp);
        .           
   26,397 ( 0.00%)                  if !lo.line.contains(&span_data.hi) {
        .                               let new_file_and_idx = Some((lo.file.clone(), lo.file_index));
        .                               let next_oldest = self.oldest_cache_entry_index_avoid(oldest);
        .                               let hi = &mut self.line_cache[next_oldest];
        .                               hi.update(new_file_and_idx, span_data.hi, self.time_stamp);
        .                               (oldest, next_oldest)
        .                           } else {
        .                               (oldest, oldest)
        .                           }
        .                       }
        .                       // Oldest cache entry is for span_data.lo line.
        .                       (-1, _) => {
        .                           let lo = &mut self.line_cache[oldest];
        .                           lo.update(new_file_and_idx, span_data.lo, self.time_stamp);
      220 ( 0.00%)                  let hi = &mut self.line_cache[hi_cache_idx as usize];
      330 ( 0.00%)                  hi.touch(self.time_stamp);
        .                           (oldest, hi_cache_idx as usize)
        .                       }
        .                       // Oldest cache entry is for span_data.hi line.
        .                       (_, -1) => {
        .                           let hi = &mut self.line_cache[oldest];
    1,261 ( 0.00%)                  hi.update(new_file_and_idx, span_data.hi, self.time_stamp);
    2,522 ( 0.00%)                  let lo = &mut self.line_cache[lo_cache_idx as usize];
    5,044 ( 0.00%)                  lo.touch(self.time_stamp);
        .                           (lo_cache_idx as usize, oldest)
        .                       }
        .                       _ => {
        .                           panic!();
        .                       }
        .                   };
        .           
        .                   let lo = &self.line_cache[lo_idx];
        .                   let hi = &self.line_cache[hi_idx];
        .           
        .                   // Span lo and hi may equal line end when last line doesn't
        .                   // end in newline, hence the inclusive upper bounds below.
   20,340 ( 0.00%)          assert!(span_data.lo >= lo.line.start);
   10,170 ( 0.00%)          assert!(span_data.lo <= lo.line.end);
   20,340 ( 0.00%)          assert!(span_data.hi >= hi.line.start);
   10,170 ( 0.00%)          assert!(span_data.hi <= hi.line.end);
   50,850 ( 0.00%)          assert!(lo.file.contains(span_data.lo));
   30,510 ( 0.00%)          assert!(lo.file.contains(span_data.hi));
   30,510 ( 0.00%)          assert_eq!(lo.file_index, hi.file_index);
        .           
   30,510 ( 0.00%)          Some((
   10,170 ( 0.00%)              lo.file.clone(),
        .                       lo.line_number,
        .                       span_data.lo - lo.line.start,
   10,170 ( 0.00%)              hi.line_number,
        .                       span_data.hi - hi.line.start,
        .                   ))
1,417,842 ( 0.03%)      }
        .           
        .               fn cache_entry_index(&self, pos: BytePos) -> isize {
        .                   for (idx, cache_entry) in self.line_cache.iter().enumerate() {
1,206,282 ( 0.03%)              if cache_entry.line.contains(&pos) {
        .                           return idx as isize;
        .                       }
        .                   }
        .           
        .                   -1
        .               }
        .           
        .               fn oldest_cache_entry_index(&self) -> usize {
        .                   let mut oldest = 0;
        .           
        .                   for idx in 1..self.line_cache.len() {
   52,794 ( 0.00%)              if self.line_cache[idx].time_stamp < self.line_cache[oldest].time_stamp {
        .                           oldest = idx;
        .                       }
        .                   }
        .           
        .                   oldest
        .               }
        .           
        .               fn oldest_cache_entry_index_avoid(&self, avoid_idx: usize) -> usize {
        .                   let mut oldest = if avoid_idx != 0 { 0 } else { 1 };
        .           
        .                   for idx in 0..self.line_cache.len() {
   17,256 ( 0.00%)              if idx != avoid_idx
    9,855 ( 0.00%)                  && self.line_cache[idx].time_stamp < self.line_cache[oldest].time_stamp
        .                       {
        .                           oldest = idx;
        .                       }
        .                   }
        .           
        .                   oldest
        .               }
        .           
   22,710 ( 0.00%)      fn file_for_position(&self, pos: BytePos) -> Option<(Lrc<SourceFile>, usize)> {
    4,542 ( 0.00%)          if !self.source_map.files().is_empty() {
    9,084 ( 0.00%)              let file_idx = self.source_map.lookup_source_file_idx(pos);
        .                       let file = &self.source_map.files()[file_idx];
        .           
   36,336 ( 0.00%)              if file_contains(file, pos) {
        .                           return Some((file.clone(), file_idx));
        .                       }
        .                   }
        .           
        .                   None
   22,710 ( 0.00%)      }
        .           }
        .           
        .           #[inline]
        .           fn file_contains(file: &SourceFile, pos: BytePos) -> bool {
        .               // `SourceMap::lookup_source_file_idx` and `SourceFile::contains` both consider the position
        .               // one past the end of a file to belong to it. Normally, that's what we want. But for the
        .               // purposes of converting a byte position to a line and column number, we can't come up with a
        .               // line and column number if the file is empty, because an empty file doesn't contain any
-- line 290 ----------------------------------------

1,821,286 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/non_null.rs
--------------------------------------------------------------------------------
Ir                 

-- line 186 ----------------------------------------
        .               /// use std::ptr::NonNull;
        .               ///
        .               /// // NEVER DO THAT!!! This is undefined behavior. ⚠️
        .               /// let ptr = unsafe { NonNull::<u32>::new_unchecked(std::ptr::null_mut()) };
        .               /// ```
        .               #[stable(feature = "nonnull", since = "1.25.0")]
        .               #[rustc_const_stable(feature = "const_nonnull_new_unchecked", since = "1.25.0")]
        .               #[inline]
2,108,994 ( 0.04%)      pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
        .                   // SAFETY: the caller must guarantee that `ptr` is non-null.
5,853,371 ( 0.12%)          unsafe { NonNull { pointer: ptr as _ } }
3,138,994 ( 0.07%)      }
        .           
        .               /// Creates a new `NonNull` if `ptr` is non-null.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// use std::ptr::NonNull;
        .               ///
-- line 205 ----------------------------------------
-- line 207 ----------------------------------------
        .               /// let ptr = NonNull::<u32>::new(&mut x as *mut _).expect("ptr is null!");
        .               ///
        .               /// if let Some(ptr) = NonNull::<u32>::new(std::ptr::null_mut()) {
        .               ///     unreachable!();
        .               /// }
        .               /// ```
        .               #[stable(feature = "nonnull", since = "1.25.0")]
        .               #[inline]
  144,738 ( 0.00%)      pub fn new(ptr: *mut T) -> Option<Self> {
  241,230 ( 0.01%)          if !ptr.is_null() {
        .                       // SAFETY: The pointer is already checked and is not null
  144,738 ( 0.00%)              Some(unsafe { Self::new_unchecked(ptr) })
        .                   } else {
        .                       None
        .                   }
  144,738 ( 0.00%)      }
        .           
        .               /// Performs the same functionality as [`std::ptr::from_raw_parts`], except that a
        .               /// `NonNull` pointer is returned, as opposed to a raw `*const` pointer.
        .               ///
        .               /// See the documentation of [`std::ptr::from_raw_parts`] for more details.
        .               ///
        .               /// [`std::ptr::from_raw_parts`]: crate::ptr::from_raw_parts
        .               #[unstable(feature = "ptr_metadata", issue = "81513")]
-- line 230 ----------------------------------------
-- line 268 ----------------------------------------
        .               /// unsafe { *ptr.as_ptr() += 2; }
        .               /// let x_value = unsafe { *ptr.as_ptr() };
        .               /// assert_eq!(x_value, 2);
        .               /// ```
        .               #[stable(feature = "nonnull", since = "1.25.0")]
        .               #[rustc_const_stable(feature = "const_nonnull_as_ptr", since = "1.32.0")]
        .               #[must_use]
        .               #[inline]
8,172,209 ( 0.17%)      pub const fn as_ptr(self) -> *mut T {
        .                   self.pointer as *mut T
5,382,814 ( 0.11%)      }
        .           
        .               /// Returns a shared reference to the value. If the value may be uninitialized, [`as_uninit_ref`]
        .               /// must be used instead.
        .               ///
        .               /// For the mutable counterpart see [`as_mut`].
        .               ///
        .               /// [`as_uninit_ref`]: NonNull::as_uninit_ref
        .               /// [`as_mut`]: NonNull::as_mut
-- line 286 ----------------------------------------
-- line 316 ----------------------------------------
        .               /// println!("{}", ref_x);
        .               /// ```
        .               ///
        .               /// [the module documentation]: crate::ptr#safety
        .               #[stable(feature = "nonnull", since = "1.25.0")]
        .               #[rustc_const_unstable(feature = "const_ptr_as_ref", issue = "91822")]
        .               #[must_use]
        .               #[inline]
    1,230 ( 0.00%)      pub const unsafe fn as_ref<'a>(&self) -> &'a T {
        .                   // SAFETY: the caller must guarantee that `self` meets all the
        .                   // requirements for a reference.
    1,845 ( 0.00%)          unsafe { &*self.as_ptr() }
    1,230 ( 0.00%)      }
        .           
        .               /// Returns a unique reference to the value. If the value may be uninitialized, [`as_uninit_mut`]
        .               /// must be used instead.
        .               ///
        .               /// For the shared counterpart see [`as_ref`].
        .               ///
        .               /// [`as_uninit_mut`]: NonNull::as_uninit_mut
        .               /// [`as_ref`]: NonNull::as_ref
-- line 336 ----------------------------------------
-- line 391 ----------------------------------------
        .               /// let casted_ptr = ptr.cast::<i8>();
        .               /// let raw_ptr: *mut i8 = casted_ptr.as_ptr();
        .               /// ```
        .               #[stable(feature = "nonnull_cast", since = "1.27.0")]
        .               #[rustc_const_stable(feature = "const_nonnull_cast", since = "1.36.0")]
        .               #[must_use = "this returns the result of the operation, \
        .                             without modifying the original"]
        .               #[inline]
  149,476 ( 0.00%)      pub const fn cast<U>(self) -> NonNull<U> {
        .                   // SAFETY: `self` is a `NonNull` pointer which is necessarily non-null
  201,422 ( 0.00%)          unsafe { NonNull::new_unchecked(self.as_ptr() as *mut U) }
  100,656 ( 0.00%)      }
        .           }
        .           
        .           impl<T> NonNull<[T]> {
        .               /// Creates a non-null raw slice from a thin pointer and a length.
        .               ///
        .               /// The `len` argument is the number of **elements**, not the number of bytes.
        .               ///
        .               /// This function is safe, but dereferencing the return value is unsafe.
-- line 410 ----------------------------------------
-- line 425 ----------------------------------------
        .               /// ```
        .               ///
        .               /// (Note that this example artificially demonstrates a use of this method,
        .               /// but `let slice = NonNull::from(&x[..]);` would be a better way to write code like this.)
        .               #[unstable(feature = "nonnull_slice_from_raw_parts", issue = "71941")]
        .               #[rustc_const_unstable(feature = "const_nonnull_slice_from_raw_parts", issue = "71941")]
        .               #[must_use]
        .               #[inline]
  195,976 ( 0.00%)      pub const fn slice_from_raw_parts(data: NonNull<T>, len: usize) -> Self {
        .                   // SAFETY: `data` is a `NonNull` pointer which is necessarily non-null
  391,952 ( 0.01%)          unsafe { Self::new_unchecked(super::slice_from_raw_parts_mut(data.as_ptr(), len)) }
   97,988 ( 0.00%)      }
        .           
        .               /// Returns the length of a non-null raw slice.
        .               ///
        .               /// The returned value is the number of **elements**, not the number of bytes.
        .               ///
        .               /// This function is safe, even when the non-null raw slice cannot be dereferenced to a slice
        .               /// because the pointer does not have a valid address.
        .               ///
-- line 444 ----------------------------------------
-- line 469 ----------------------------------------
        .               ///
        .               /// let slice: NonNull<[i8]> = NonNull::slice_from_raw_parts(NonNull::dangling(), 3);
        .               /// assert_eq!(slice.as_non_null_ptr(), NonNull::new(1 as *mut i8).unwrap());
        .               /// ```
        .               #[inline]
        .               #[must_use]
        .               #[unstable(feature = "slice_ptr_get", issue = "74265")]
        .               #[rustc_const_unstable(feature = "slice_ptr_get", issue = "74265")]
      522 ( 0.00%)      pub const fn as_non_null_ptr(self) -> NonNull<T> {
        .                   // SAFETY: We know `self` is non-null.
      870 ( 0.00%)          unsafe { NonNull::new_unchecked(self.as_ptr().as_mut_ptr()) }
      348 ( 0.00%)      }
        .           
        .               /// Returns a raw pointer to the slice's buffer.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```rust
        .               /// #![feature(slice_ptr_get, nonnull_slice_from_raw_parts)]
        .               /// use std::ptr::NonNull;
-- line 488 ----------------------------------------
-- line 489 ----------------------------------------
        .               ///
        .               /// let slice: NonNull<[i8]> = NonNull::slice_from_raw_parts(NonNull::dangling(), 3);
        .               /// assert_eq!(slice.as_mut_ptr(), 1 as *mut i8);
        .               /// ```
        .               #[inline]
        .               #[must_use]
        .               #[unstable(feature = "slice_ptr_get", issue = "74265")]
        .               #[rustc_const_unstable(feature = "slice_ptr_get", issue = "74265")]
      510 ( 0.00%)      pub const fn as_mut_ptr(self) -> *mut T {
      680 ( 0.00%)          self.as_non_null_ptr().as_ptr()
      340 ( 0.00%)      }
        .           
        .               /// Returns a shared reference to a slice of possibly uninitialized values. In contrast to
        .               /// [`as_ref`], this does not require that the value has to be initialized.
        .               ///
        .               /// For the mutable counterpart see [`as_uninit_slice_mut`].
        .               ///
        .               /// [`as_ref`]: NonNull::as_ref
        .               /// [`as_uninit_slice_mut`]: NonNull::as_uninit_slice_mut
-- line 507 ----------------------------------------
-- line 705 ----------------------------------------
        .                   self.as_ptr().hash(state)
        .               }
        .           }
        .           
        .           #[unstable(feature = "ptr_internals", issue = "none")]
        .           #[rustc_const_unstable(feature = "const_convert", issue = "88674")]
        .           impl<T: ?Sized> const From<Unique<T>> for NonNull<T> {
        .               #[inline]
  123,060 ( 0.00%)      fn from(unique: Unique<T>) -> Self {
        .                   // SAFETY: A Unique pointer cannot be null, so the conditions for
        .                   // new_unchecked() are respected.
  246,120 ( 0.01%)          unsafe { NonNull::new_unchecked(unique.as_ptr()) }
  123,060 ( 0.00%)      }
        .           }
        .           
        .           #[stable(feature = "nonnull", since = "1.25.0")]
        .           #[rustc_const_unstable(feature = "const_convert", issue = "88674")]
        .           impl<T: ?Sized> const From<&mut T> for NonNull<T> {
        .               #[inline]
   31,302 ( 0.00%)      fn from(reference: &mut T) -> Self {
        .                   // SAFETY: A mutable reference cannot be null.
   61,430 ( 0.00%)          unsafe { NonNull { pointer: reference as *mut T } }
   46,953 ( 0.00%)      }
        .           }
        .           
        .           #[stable(feature = "nonnull", since = "1.25.0")]
        .           #[rustc_const_unstable(feature = "const_convert", issue = "88674")]
        .           impl<T: ?Sized> const From<&T> for NonNull<T> {
        .               #[inline]
        .               fn from(reference: &T) -> Self {
        .                   // SAFETY: A reference cannot be null, so the conditions for
-- line 735 ----------------------------------------

  860,669 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/non_null.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs
--------------------------------------------------------------------------------
Ir                 

-- line 5 ----------------------------------------
        .           #[stable(feature = "alloc_system_type", since = "1.28.0")]
        .           unsafe impl GlobalAlloc for System {
        .               #[inline]
        .               unsafe fn alloc(&self, layout: Layout) -> *mut u8 {
        .                   // jemalloc provides alignment less than MIN_ALIGN for small allocations.
        .                   // So only rely on MIN_ALIGN if size >= align.
        .                   // Also see <https://github.com/rust-lang/rust/issues/45955> and
        .                   // <https://github.com/rust-lang/rust/issues/62251#issuecomment-507580914>.
6,763,536 ( 0.14%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
5,072,652 ( 0.11%)              libc::malloc(layout.size()) as *mut u8
        .                   } else {
        .                       #[cfg(target_os = "macos")]
        .                       {
        .                           if layout.align() > (1 << 31) {
        .                               return ptr::null_mut();
        .                           }
        .                       }
        .                       aligned_malloc(&layout)
        .                   }
        .               }
        .           
        .               #[inline]
        .               unsafe fn alloc_zeroed(&self, layout: Layout) -> *mut u8 {
        .                   // See the comment above in `alloc` for why this check looks the way it does.
  286,928 ( 0.01%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
  430,392 ( 0.01%)              libc::calloc(layout.size(), 1) as *mut u8
        .                   } else {
        .                       let ptr = self.alloc(layout);
        .                       if !ptr.is_null() {
        .                           ptr::write_bytes(ptr, 0, layout.size());
        .                       }
        .                       ptr
        .                   }
        .               }
        .           
        .               #[inline]
        .               unsafe fn dealloc(&self, ptr: *mut u8, _layout: Layout) {
1,762,604 ( 0.04%)          libc::free(ptr as *mut libc::c_void)
        .               }
        .           
        .               #[inline]
        .               unsafe fn realloc(&self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {
  613,788 ( 0.01%)          if layout.align() <= MIN_ALIGN && layout.align() <= new_size {
1,227,576 ( 0.03%)              libc::realloc(ptr as *mut libc::c_void, new_size) as *mut u8
        .                   } else {
        .                       realloc_fallback(self, ptr, layout, new_size)
        .                   }
        .               }
        .           }
        .           
        .           cfg_if::cfg_if! {
        .               if #[cfg(any(
-- line 56 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/unicode/printable.rs
--------------------------------------------------------------------------------
Ir               

      .           // NOTE: The following code was generated by "src/libcore/unicode/printable.py",
      .           //       do not edit directly!
      .           
292,839 ( 0.01%)  fn check(x: u16, singletonuppers: &[(u8, u8)], singletonlowers: &[u8], normal: &[u8]) -> bool {
      .               let xupper = (x >> 8) as u8;
      .               let mut lowerstart = 0;
390,500 ( 0.01%)      for &(upper, lowercount) in singletonuppers {
195,274 ( 0.00%)          let lowerend = lowerstart + lowercount as usize;
390,500 ( 0.01%)          if xupper == upper {
      .                       for &lower in &singletonlowers[lowerstart..lowerend] {
390,448 ( 0.01%)                  if lower == x as u8 {
      .                               return false;
      .                           }
      .                       }
 97,638 ( 0.00%)          } else if xupper < upper {
      .                       break;
      .                   }
      .                   lowerstart = lowerend;
      .               }
      .           
292,839 ( 0.01%)      let mut x = x as i32;
      .               let mut normal = normal.iter().cloned();
      .               let mut current = true;
      .               while let Some(v) = normal.next() {
586,026 ( 0.01%)          let len = if v & 0x80 != 0 {
     39 ( 0.00%)              ((v & 0x7f) as i32) << 8 | normal.next().unwrap() as i32
      .                   } else {
      .                       v as i32
      .                   };
586,026 ( 0.01%)          x -= len;
586,026 ( 0.01%)          if x < 0 {
      .                       break;
      .                   }
195,400 ( 0.00%)          current = !current;
      .               }
      .               current
488,065 ( 0.01%)  }
      .           
 97,613 ( 0.00%)  pub(crate) fn is_printable(x: char) -> bool {
      .               let x = x as u32;
      .               let lower = x as u16;
195,226 ( 0.00%)      if x < 0x10000 {
585,678 ( 0.01%)          check(lower, SINGLETONS0U, SINGLETONS0L, NORMAL0)
      .               } else if x < 0x20000 {
      .                   check(lower, SINGLETONS1U, SINGLETONS1L, NORMAL1)
      .               } else {
      .                   if 0x2a6e0 <= x && x < 0x2a700 {
      .                       return false;
      .                   }
      .                   if 0x2b739 <= x && x < 0x2b740 {
      .                       return false;
-- line 51 ----------------------------------------
-- line 65 ----------------------------------------
      .                   if 0x3134b <= x && x < 0xe0100 {
      .                       return false;
      .                   }
      .                   if 0xe01f0 <= x && x < 0x110000 {
      .                       return false;
      .                   }
      .                   true
      .               }
195,226 ( 0.00%)  }
      .           
      .           #[rustfmt::skip]
      .           const SINGLETONS0U: &[(u8, u8)] = &[
      .               (0x00, 1),
      .               (0x03, 5),
      .               (0x05, 6),
      .               (0x06, 2),
      .               (0x07, 6),
-- line 81 ----------------------------------------

878,726 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/unicode/printable.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/type_variable.rs
--------------------------------------------------------------------------------
Ir                 

-- line 44 ----------------------------------------
        .           /// Convert from a specific kind of undo to the more general UndoLog
        .           impl<'tcx> From<Instantiate> for UndoLog<'tcx> {
        .               fn from(l: Instantiate) -> Self {
        .                   UndoLog::Values(sv::UndoLog::Other(l))
        .               }
        .           }
        .           
        .           impl<'tcx> Rollback<UndoLog<'tcx>> for TypeVariableStorage<'tcx> {
  136,505 ( 0.00%)      fn reverse(&mut self, undo: UndoLog<'tcx>) {
  573,991 ( 0.01%)          match undo {
  108,534 ( 0.00%)              UndoLog::EqRelation(undo) => self.eq_relations.reverse(undo),
   58,950 ( 0.00%)              UndoLog::SubRelation(undo) => self.sub_relations.reverse(undo),
  105,526 ( 0.00%)              UndoLog::Values(undo) => self.values.reverse(undo),
        .                   }
  273,010 ( 0.01%)      }
        .           }
        .           
        .           pub struct TypeVariableStorage<'tcx> {
        .               values: sv::SnapshotVecStorage<Delegate>,
        .           
        .               /// Two variables are unified in `eq_relations` when we have a
        .               /// constraint `?X == ?Y`. This table also stores, for each key,
        .               /// the known value.
-- line 66 ----------------------------------------
-- line 136 ----------------------------------------
        .               DynReturnFn,
        .               LatticeVariable,
        .           }
        .           
        .           pub(crate) struct TypeVariableData {
        .               origin: TypeVariableOrigin,
        .           }
        .           
  871,340 ( 0.02%)  #[derive(Copy, Clone, Debug)]
        .           pub enum TypeVariableValue<'tcx> {
        .               Known { value: Ty<'tcx> },
        .               Unknown { universe: ty::UniverseIndex },
        .           }
        .           
        .           impl<'tcx> TypeVariableValue<'tcx> {
        .               /// If this value is known, returns the type it is known to be.
        .               /// Otherwise, `None`.
        .               pub fn known(&self) -> Option<Ty<'tcx>> {
  538,040 ( 0.01%)          match *self {
        .                       TypeVariableValue::Unknown { .. } => None,
        .                       TypeVariableValue::Known { value } => Some(value),
        .                   }
        .               }
        .           
        .               pub fn is_unknown(&self) -> bool {
        .                   match *self {
        .                       TypeVariableValue::Unknown { .. } => true,
-- line 162 ----------------------------------------
-- line 166 ----------------------------------------
        .           }
        .           
        .           pub(crate) struct Instantiate;
        .           
        .           pub(crate) struct Delegate;
        .           
        .           impl<'tcx> TypeVariableStorage<'tcx> {
        .               pub fn new() -> TypeVariableStorage<'tcx> {
   73,989 ( 0.00%)          TypeVariableStorage {
        .                       values: sv::SnapshotVecStorage::new(),
        .                       eq_relations: ut::UnificationTableStorage::new(),
        .                       sub_relations: ut::UnificationTableStorage::new(),
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub(crate) fn with_log<'a>(
-- line 182 ----------------------------------------
-- line 188 ----------------------------------------
        .           }
        .           
        .           impl<'tcx> TypeVariableTable<'_, 'tcx> {
        .               /// Returns the origin that was given when `vid` was created.
        .               ///
        .               /// Note that this function does not return care whether
        .               /// `vid` has been unified with something else or not.
        .               pub fn var_origin(&self, vid: ty::TyVid) -> &TypeVariableOrigin {
      949 ( 0.00%)          &self.storage.values.get(vid.as_usize()).origin
        .               }
        .           
        .               /// Records that `a == b`, depending on `dir`.
        .               ///
        .               /// Precondition: neither `a` nor `b` are known.
        .               pub fn equate(&mut self, a: ty::TyVid, b: ty::TyVid) {
        .                   debug_assert!(self.probe(a).is_unknown());
        .                   debug_assert!(self.probe(b).is_unknown());
    9,387 ( 0.00%)          self.eq_relations().union(a, b);
    8,046 ( 0.00%)          self.sub_relations().union(a, b);
        .               }
        .           
        .               /// Records that `a <: b`, depending on `dir`.
        .               ///
        .               /// Precondition: neither `a` nor `b` are known.
        .               pub fn sub(&mut self, a: ty::TyVid, b: ty::TyVid) {
        .                   debug_assert!(self.probe(a).is_unknown());
        .                   debug_assert!(self.probe(b).is_unknown());
    7,016 ( 0.00%)          self.sub_relations().union(a, b);
        .               }
        .           
        .               /// Instantiates `vid` with the type `ty`.
        .               ///
        .               /// Precondition: `vid` must not have been previously instantiated.
  211,635 ( 0.00%)      pub fn instantiate(&mut self, vid: ty::TyVid, ty: Ty<'tcx>) {
        .                   let vid = self.root_var(vid);
        .                   debug_assert!(self.probe(vid).is_unknown());
        .                   debug_assert!(
        .                       self.eq_relations().probe_value(vid).is_unknown(),
        .                       "instantiating type variable `{:?}` twice: new-value = {:?}, old-value={:?}",
        .                       vid,
        .                       ty,
        .                       self.eq_relations().probe_value(vid)
        .                   );
  296,289 ( 0.01%)          self.eq_relations().union_value(vid, TypeVariableValue::Known { value: ty });
        .           
        .                   // Hack: we only need this so that `types_escaping_snapshot`
        .                   // can see what has been unified; see the Delegate impl for
        .                   // more details.
        .                   self.undo_log.push(Instantiate);
  211,635 ( 0.00%)      }
        .           
        .               /// Creates a new type variable.
        .               ///
        .               /// - `diverging`: indicates if this is a "diverging" type
        .               ///   variable, e.g.,  one created as the type of a `return`
        .               ///   expression. The code in this module doesn't care if a
        .               ///   variable is diverging, but the main Rust type-checker will
        .               ///   sometimes "unify" such variables with the `!` or `()` types.
        .               /// - `origin`: indicates *why* the type variable was created.
        .               ///   The code in this module doesn't care, but it can be useful
        .               ///   for improving error messages.
  257,112 ( 0.01%)      pub fn new_var(
        .                   &mut self,
        .                   universe: ty::UniverseIndex,
        .                   origin: TypeVariableOrigin,
        .               ) -> ty::TyVid {
  385,668 ( 0.01%)          let eq_key = self.eq_relations().new_key(TypeVariableValue::Unknown { universe });
        .           
  214,260 ( 0.00%)          let sub_key = self.sub_relations().new_key(());
   42,852 ( 0.00%)          assert_eq!(eq_key.vid, sub_key);
        .           
  385,668 ( 0.01%)          let index = self.values().push(TypeVariableData { origin });
  171,408 ( 0.00%)          assert_eq!(eq_key.vid.as_u32(), index as u32);
        .           
        .                   debug!("new_var(index={:?}, universe={:?}, origin={:?}", eq_key.vid, universe, origin,);
        .           
        .                   eq_key.vid
  299,964 ( 0.01%)      }
        .           
        .               /// Returns the number of type variables created thus far.
        .               pub fn num_vars(&self) -> usize {
    3,775 ( 0.00%)          self.storage.values.len()
        .               }
        .           
        .               /// Returns the "root" variable of `vid` in the `eq_relations`
        .               /// equivalence table. All type variables that have been equated
        .               /// will yield the same root variable (per the union-find
        .               /// algorithm), so `root_var(a) == root_var(b)` implies that `a ==
        .               /// b` (transitively).
        .               pub fn root_var(&mut self, vid: ty::TyVid) -> ty::TyVid {
  159,576 ( 0.00%)          self.eq_relations().find(vid).vid
        .               }
        .           
        .               /// Returns the "root" variable of `vid` in the `sub_relations`
        .               /// equivalence table. All type variables that have been are
        .               /// related via equality or subtyping will yield the same root
        .               /// variable (per the union-find algorithm), so `sub_root_var(a)
        .               /// == sub_root_var(b)` implies that:
        .               ///
        .               ///     exists X. (a <: X || X <: a) && (b <: X || X <: b)
      894 ( 0.00%)      pub fn sub_root_var(&mut self, vid: ty::TyVid) -> ty::TyVid {
  131,787 ( 0.00%)          self.sub_relations().find(vid)
    1,788 ( 0.00%)      }
        .           
        .               /// Returns `true` if `a` and `b` have same "sub-root" (i.e., exists some
        .               /// type X such that `forall i in {a, b}. (i <: X || X <: i)`.
        .               pub fn sub_unified(&mut self, a: ty::TyVid, b: ty::TyVid) -> bool {
        .                   self.sub_root_var(a) == self.sub_root_var(b)
        .               }
        .           
        .               /// Retrieves the type to which `vid` has been instantiated, if
        .               /// any.
1,957,775 ( 0.04%)      pub fn probe(&mut self, vid: ty::TyVid) -> TypeVariableValue<'tcx> {
        .                   self.inlined_probe(vid)
1,957,775 ( 0.04%)      }
        .           
        .               /// An always-inlined variant of `probe`, for very hot call sites.
        .               #[inline(always)]
        .               pub fn inlined_probe(&mut self, vid: ty::TyVid) -> TypeVariableValue<'tcx> {
1,331,282 ( 0.03%)          self.eq_relations().inlined_probe_value(vid)
        .               }
        .           
        .               /// If `t` is a type-inference variable, and it has been
        .               /// instantiated, then return the with which it was
        .               /// instantiated. Otherwise, returns `t`.
        .               pub fn replace_if_possible(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {
  443,620 ( 0.01%)          match *t.kind() {
  347,409 ( 0.01%)              ty::Infer(ty::TyVar(v)) => match self.probe(v) {
        .                           TypeVariableValue::Unknown { .. } => t,
        .                           TypeVariableValue::Known { value } => value,
        .                       },
        .                       _ => t,
        .                   }
        .               }
        .           
        .               #[inline]
-- line 323 ----------------------------------------
-- line 324 ----------------------------------------
        .               fn values(
        .                   &mut self,
        .               ) -> sv::SnapshotVec<Delegate, &mut Vec<TypeVariableData>, &mut InferCtxtUndoLogs<'tcx>> {
        .                   self.storage.values.with_log(self.undo_log)
        .               }
        .           
        .               #[inline]
        .               fn eq_relations(&mut self) -> super::UnificationTable<'_, 'tcx, TyVidEqKey<'tcx>> {
1,716,494 ( 0.04%)          self.storage.eq_relations.with_log(self.undo_log)
        .               }
        .           
        .               #[inline]
        .               fn sub_relations(&mut self) -> super::UnificationTable<'_, 'tcx, ty::TyVid> {
   93,134 ( 0.00%)          self.storage.sub_relations.with_log(self.undo_log)
        .               }
        .           
        .               /// Returns a range of the type variables created during the snapshot.
   18,875 ( 0.00%)      pub fn vars_since_snapshot(
        .                   &mut self,
        .                   value_count: usize,
        .               ) -> (Range<TyVid>, Vec<TypeVariableOrigin>) {
        .                   let range = TyVid::from_usize(value_count)..TyVid::from_usize(self.num_vars());
   22,650 ( 0.00%)          (
        .                       range.start..range.end,
        .                       (range.start.as_usize()..range.end.as_usize())
        .                           .map(|index| self.storage.values.get(index).origin)
        .                           .collect(),
        .                   )
   22,650 ( 0.00%)      }
        .           
        .               /// Returns indices of all variables that are not yet
        .               /// instantiated.
        .               pub fn unsolved_variables(&mut self) -> Vec<ty::TyVid> {
        .                   (0..self.storage.values.len())
        .                       .filter_map(|i| {
        .                           let vid = ty::TyVid::from_usize(i);
   69,140 ( 0.00%)                  match self.probe(vid) {
        .                               TypeVariableValue::Unknown { .. } => Some(vid),
        .                               TypeVariableValue::Known { .. } => None,
        .                           }
        .                       })
        .                       .collect()
        .               }
        .           }
        .           
-- line 368 ----------------------------------------
-- line 391 ----------------------------------------
        .           /// These structs (a newtyped TyVid) are used as the unification key
        .           /// for the `eq_relations`; they carry a `TypeVariableValue` along
        .           /// with them.
        .           #[derive(Copy, Clone, Debug, PartialEq, Eq)]
        .           pub(crate) struct TyVidEqKey<'tcx> {
        .               vid: ty::TyVid,
        .           
        .               // in the table, we map each ty-vid to one of these:
1,531,731 ( 0.03%)      phantom: PhantomData<TypeVariableValue<'tcx>>,
        .           }
        .           
        .           impl<'tcx> From<ty::TyVid> for TyVidEqKey<'tcx> {
        .               #[inline] // make this function eligible for inlining - it is quite hot.
        .               fn from(vid: ty::TyVid) -> Self {
        .                   TyVidEqKey { vid, phantom: PhantomData }
        .               }
        .           }
-- line 407 ----------------------------------------
-- line 419 ----------------------------------------
        .                   "TyVidEqKey"
        .               }
        .           }
        .           
        .           impl<'tcx> ut::UnifyValue for TypeVariableValue<'tcx> {
        .               type Error = ut::NoError;
        .           
        .               fn unify_values(value1: &Self, value2: &Self) -> Result<Self, ut::NoError> {
  176,013 ( 0.00%)          match (value1, value2) {
        .                       // We never equate two type variables, both of which
        .                       // have known types.  Instead, we recursively equate
        .                       // those types.
        .                       (&TypeVariableValue::Known { .. }, &TypeVariableValue::Known { .. }) => {
        .                           bug!("equating two type variables, both of which have known types")
        .                       }
        .           
        .                       // If one side is known, prefer that one.
        .                       (&TypeVariableValue::Known { .. }, &TypeVariableValue::Unknown { .. }) => Ok(*value1),
        .                       (&TypeVariableValue::Unknown { .. }, &TypeVariableValue::Known { .. }) => Ok(*value2),
        .           
        .                       // If both sides are *unknown*, it hardly matters, does it?
        .                       (
    1,341 ( 0.00%)                  &TypeVariableValue::Unknown { universe: universe1 },
    1,341 ( 0.00%)                  &TypeVariableValue::Unknown { universe: universe2 },
        .                       ) => {
        .                           // If we unify two unbound variables, ?T and ?U, then whatever
        .                           // value they wind up taking (which must be the same value) must
        .                           // be nameable by both universes. Therefore, the resulting
        .                           // universe is the minimum of the two universes, because that is
        .                           // the one which contains the fewest names in scope.
        .                           let universe = cmp::min(universe1, universe2);
    5,364 ( 0.00%)                  Ok(TypeVariableValue::Unknown { universe })
        .                       }
        .                   }
        .               }
        .           }

  123,476 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/type_variable.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.8.4/src/util.rs
--------------------------------------------------------------------------------
Ir                 

-- line 27 ----------------------------------------
        .                   match *self {
        .                       UnexpectedEof => write!(f, "unexpected end of stream"),
        .                       Utf8(ref e) => write!(f, "UTF-8 decoding error: {}", e),
        .                       Io(ref e) => write!(f, "I/O error: {}", e)
        .                   }
        .               }
        .           }
        .           
1,947,554 ( 0.04%)  pub fn next_char_from<R: Read>(source: &mut R) -> Result<Option<char>, CharReadError> {
        .               const MAX_CODEPOINT_LEN: usize = 4;
        .           
  834,666 ( 0.02%)      let mut bytes = source.bytes();
1,112,888 ( 0.02%)      let mut buf = [0u8; MAX_CODEPOINT_LEN];
  278,222 ( 0.01%)      let mut pos = 0;
        .           
        .               loop {
3,895,276 ( 0.08%)          let next = match bytes.next() {
1,112,936 ( 0.02%)              Some(Ok(b)) => b,
        .                       Some(Err(e)) => return Err(e.into()),
        .                       None if pos == 0 => return Ok(None),
        .                       None => return Err(CharReadError::UnexpectedEof)
2,782,340 ( 0.06%)          };
1,947,638 ( 0.04%)          buf[pos] = next;
2,225,872 ( 0.05%)          pos += 1;
        .           
3,895,300 ( 0.08%)          match str::from_utf8(&buf[..pos]) {
3,616,886 ( 0.08%)              Ok(s) => return Ok(s.chars().next()),  // always Some(..)
       24 ( 0.00%)              Err(_) if pos < MAX_CODEPOINT_LEN => {},
        .                       Err(e) => return Err(e.into())
        .                   }
        .               }
  556,444 ( 0.01%)  }
        .           
        .           #[cfg(test)]
        .           mod tests {
        .               #[test]
        .               fn test_next_char_from() {
        .                   use std::io;
        .                   use std::error::Error;
        .           
-- line 66 ----------------------------------------

2,225,836 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.8.4/src/util.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/metadata.rs
--------------------------------------------------------------------------------
Ir                 

-- line 85 ----------------------------------------
        .           ///
        .           /// ```
        .           /// #![feature(ptr_metadata)]
        .           ///
        .           /// assert_eq!(std::ptr::metadata("foo"), 3_usize);
        .           /// ```
        .           #[rustc_const_unstable(feature = "ptr_metadata", issue = "81513")]
        .           #[inline]
   22,455 ( 0.00%)  pub const fn metadata<T: ?Sized>(ptr: *const T) -> <T as Pointee>::Metadata {
        .               // SAFETY: Accessing the value from the `PtrRepr` union is safe since *const T
        .               // and PtrComponents<T> have the same memory layouts. Only std can make this
        .               // guarantee.
   22,455 ( 0.00%)      unsafe { PtrRepr { const_ptr: ptr }.components.metadata }
   14,970 ( 0.00%)  }
        .           
        .           /// Forms a (possibly-wide) raw pointer from a data address and metadata.
        .           ///
        .           /// This function is safe but the returned pointer is not necessarily safe to dereference.
        .           /// For slices, see the documentation of [`slice::from_raw_parts`] for safety requirements.
        .           /// For trait objects, the metadata must come from a pointer to the same underlying erased type.
        .           ///
        .           /// [`slice::from_raw_parts`]: crate::slice::from_raw_parts
        .           #[unstable(feature = "ptr_metadata", issue = "81513")]
        .           #[rustc_const_unstable(feature = "ptr_metadata", issue = "81513")]
        .           #[inline]
1,255,113 ( 0.03%)  pub const fn from_raw_parts<T: ?Sized>(
        .               data_address: *const (),
        .               metadata: <T as Pointee>::Metadata,
        .           ) -> *const T {
        .               // SAFETY: Accessing the value from the `PtrRepr` union is safe since *const T
        .               // and PtrComponents<T> have the same memory layouts. Only std can make this
        .               // guarantee.
3,346,968 ( 0.07%)      unsafe { PtrRepr { components: PtrComponents { data_address, metadata } }.const_ptr }
  836,742 ( 0.02%)  }
        .           
        .           /// Performs the same functionality as [`from_raw_parts`], except that a
        .           /// raw `*mut` pointer is returned, as opposed to a raw `*const` pointer.
        .           ///
        .           /// See the documentation of [`from_raw_parts`] for more details.
        .           #[unstable(feature = "ptr_metadata", issue = "81513")]
        .           #[rustc_const_unstable(feature = "ptr_metadata", issue = "81513")]
        .           #[inline]
  486,390 ( 0.01%)  pub const fn from_raw_parts_mut<T: ?Sized>(
        .               data_address: *mut (),
        .               metadata: <T as Pointee>::Metadata,
        .           ) -> *mut T {
        .               // SAFETY: Accessing the value from the `PtrRepr` union is safe since *const T
        .               // and PtrComponents<T> have the same memory layouts. Only std can make this
        .               // guarantee.
1,310,411 ( 0.03%)      unsafe { PtrRepr { components: PtrComponents { data_address, metadata } }.mut_ptr }
  324,260 ( 0.01%)  }
        .           
        .           #[repr(C)]
        .           pub(crate) union PtrRepr<T: ?Sized> {
        .               pub(crate) const_ptr: *const T,
        .               pub(crate) mut_ptr: *mut T,
        .               pub(crate) components: PtrComponents<T>,
        .           }
        .           
-- line 143 ----------------------------------------

      118 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/metadata.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mut_ptr.rs
--------------------------------------------------------------------------------
Ir                  

-- line 28 ----------------------------------------
         .               /// ```
         .               /// let mut s = [1, 2, 3];
         .               /// let ptr: *mut u32 = s.as_mut_ptr();
         .               /// assert!(!ptr.is_null());
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_ptr_is_null", issue = "74939")]
         .               #[inline]
 4,241,916 ( 0.09%)      pub const fn is_null(self) -> bool {
         .                   // Compare via a cast to a thin pointer, so fat pointers are only
         .                   // considering their "data" part for null-ness.
 4,241,916 ( 0.09%)          (self as *mut u8).guaranteed_eq(null_mut())
 4,241,916 ( 0.09%)      }
         .           
         .               /// Casts to a pointer of another type.
         .               #[stable(feature = "ptr_cast", since = "1.38.0")]
         .               #[rustc_const_stable(feature = "const_ptr_cast", since = "1.38.0")]
         .               #[inline(always)]
         .               pub const fn cast<U>(self) -> *mut U {
         .                   self as _
         .               }
-- line 48 ----------------------------------------
-- line 299 ----------------------------------------
         .               #[inline(always)]
         .               pub const unsafe fn offset(self, count: isize) -> *mut T
         .               where
         .                   T: Sized,
         .               {
         .                   // SAFETY: the caller must uphold the safety contract for `offset`.
         .                   // The obtained pointer is valid for writes since the caller must
         .                   // guarantee that it points to the same allocated object as `self`.
34,754,375 ( 0.73%)          unsafe { intrinsics::offset(self, count) as *mut T }
         .               }
         .           
         .               /// Calculates the offset from a pointer using wrapping arithmetic.
         .               /// `count` is in units of T; e.g., a `count` of 3 represents a pointer
         .               /// offset of `3 * size_of::<T>()` bytes.
         .               ///
         .               /// # Safety
         .               ///
-- line 315 ----------------------------------------
-- line 360 ----------------------------------------
         .               #[must_use = "returns a new pointer rather than modifying its argument"]
         .               #[rustc_const_unstable(feature = "const_ptr_offset", issue = "71499")]
         .               #[inline(always)]
         .               pub const fn wrapping_offset(self, count: isize) -> *mut T
         .               where
         .                   T: Sized,
         .               {
         .                   // SAFETY: the `arith_offset` intrinsic has no prerequisites to be called.
       633 ( 0.00%)          unsafe { intrinsics::arith_offset(self, count) as *mut T }
         .               }
         .           
         .               /// Returns `None` if the pointer is null, or else returns a unique reference to
         .               /// the value wrapped in `Some`. If the value may be uninitialized, [`as_uninit_mut`]
         .               /// must be used instead.
         .               ///
         .               /// For the shared counterpart see [`as_ref`].
         .               ///
-- line 376 ----------------------------------------
-- line 492 ----------------------------------------
         .               /// affect the outcome, but just the performance.
         .               /// The consequences of using this method to make runtime and compile-time code behave
         .               /// differently have not been explored. This method should not be used to introduce such
         .               /// differences, and it should also not be stabilized before we have a better understanding
         .               /// of this issue.
         .               #[unstable(feature = "const_raw_ptr_comparison", issue = "53020")]
         .               #[rustc_const_unstable(feature = "const_raw_ptr_comparison", issue = "53020")]
         .               #[inline]
 3,181,437 ( 0.07%)      pub const fn guaranteed_eq(self, other: *mut T) -> bool
         .               where
         .                   T: Sized,
         .               {
 6,363,323 ( 0.13%)          intrinsics::ptr_guaranteed_eq(self as *const _, other as *const _)
 4,241,916 ( 0.09%)      }
         .           
         .               /// Returns whether two pointers are guaranteed to be unequal.
         .               ///
         .               /// At runtime this function behaves like `self != other`.
         .               /// However, in some contexts (e.g., compile-time evaluation),
         .               /// it is not always possible to determine the inequality of two pointers, so this function may
         .               /// spuriously return `false` for pointers that later actually turn out to be unequal.
         .               /// But when it returns `true`, the pointers are guaranteed to be unequal.
-- line 513 ----------------------------------------
-- line 683 ----------------------------------------
         .               #[rustc_const_unstable(feature = "const_ptr_offset", issue = "71499")]
         .               #[inline(always)]
         .               pub const unsafe fn add(self, count: usize) -> Self
         .               where
         .                   T: Sized,
         .               {
         .                   // SAFETY: the caller must uphold the safety contract for `offset`.
         .                   unsafe { self.offset(count as isize) }
    13,486 ( 0.00%)      }
         .           
         .               /// Calculates the offset from a pointer (convenience for
         .               /// `.offset((count as isize).wrapping_neg())`).
         .               ///
         .               /// `count` is in units of T; e.g., a `count` of 3 represents a pointer
         .               /// offset of `3 * size_of::<T>()` bytes.
         .               ///
         .               /// # Safety
-- line 699 ----------------------------------------
-- line 741 ----------------------------------------
         .               ///     println!("{}", *end.sub(1) as char);
         .               ///     println!("{}", *end.sub(2) as char);
         .               /// }
         .               /// ```
         .               #[stable(feature = "pointer_methods", since = "1.26.0")]
         .               #[must_use = "returns a new pointer rather than modifying its argument"]
         .               #[rustc_const_unstable(feature = "const_ptr_offset", issue = "71499")]
         .               #[inline]
       490 ( 0.00%)      pub const unsafe fn sub(self, count: usize) -> Self
         .               where
         .                   T: Sized,
         .               {
         .                   // SAFETY: the caller must uphold the safety contract for `offset`.
         .                   unsafe { self.offset((count as isize).wrapping_neg()) }
       140 ( 0.00%)      }
         .           
         .               /// Calculates the offset from a pointer using wrapping arithmetic.
         .               /// (convenience for `.wrapping_offset(count as isize)`)
         .               ///
         .               /// `count` is in units of T; e.g., a `count` of 3 represents a pointer
         .               /// offset of `3 * size_of::<T>()` bytes.
         .               ///
         .               /// # Safety
-- line 763 ----------------------------------------
-- line 1055 ----------------------------------------
         .               ///
         .               /// See [`ptr::drop_in_place`] for safety concerns and examples.
         .               ///
         .               /// [`ptr::drop_in_place`]: crate::ptr::drop_in_place()
         .               #[stable(feature = "pointer_methods", since = "1.26.0")]
         .               #[inline(always)]
         .               pub unsafe fn drop_in_place(self) {
         .                   // SAFETY: the caller must uphold the safety contract for `drop_in_place`.
     1,568 ( 0.00%)          unsafe { drop_in_place(self) }
         .               }
         .           
         .               /// Overwrites a memory location with the given value without reading or
         .               /// dropping the old value.
         .               ///
         .               /// See [`ptr::write`] for safety concerns and examples.
         .               ///
         .               /// [`ptr::write`]: crate::ptr::write()
-- line 1071 ----------------------------------------
-- line 1072 ----------------------------------------
         .               #[stable(feature = "pointer_methods", since = "1.26.0")]
         .               #[rustc_const_unstable(feature = "const_ptr_write", issue = "86302")]
         .               #[inline(always)]
         .               pub const unsafe fn write(self, val: T)
         .               where
         .                   T: Sized,
         .               {
         .                   // SAFETY: the caller must uphold the safety contract for `write`.
     4,367 ( 0.00%)          unsafe { write(self, val) }
         7 ( 0.00%)      }
         .           
         .               /// Invokes memset on the specified pointer, setting `count * size_of::<T>()`
         .               /// bytes of memory starting at `self` to `val`.
         .               ///
         .               /// See [`ptr::write_bytes`] for safety concerns and examples.
         .               ///
         .               /// [`ptr::write_bytes`]: crate::ptr::write_bytes()
         .               #[stable(feature = "pointer_methods", since = "1.26.0")]
         .               #[rustc_const_unstable(feature = "const_ptr_write", issue = "86302")]
         .               #[inline(always)]
         .               pub const unsafe fn write_bytes(self, val: u8, count: usize)
         .               where
         .                   T: Sized,
         .               {
         .                   // SAFETY: the caller must uphold the safety contract for `write_bytes`.
        16 ( 0.00%)          unsafe { write_bytes(self, val, count) }
         4 ( 0.00%)      }
         .           
         .               /// Performs a volatile write of a memory location with the given value without
         .               /// reading or dropping the old value.
         .               ///
         .               /// Volatile operations are intended to act on I/O memory, and are guaranteed
         .               /// to not be elided or reordered by the compiler across other volatile
         .               /// operations.
         .               ///
-- line 1106 ----------------------------------------
-- line 1416 ----------------------------------------
         .               }
         .           }
         .           
         .           // Equality for pointers
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T: ?Sized> PartialEq for *mut T {
         .               #[inline(always)]
         .               fn eq(&self, other: &*mut T) -> bool {
    71,592 ( 0.00%)          *self == *other
         .               }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T: ?Sized> Eq for *mut T {}
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T: ?Sized> Ord for *mut T {
-- line 1432 ----------------------------------------

 3,084,313 ( 0.06%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mut_ptr.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/mem/mod.rs
--------------------------------------------------------------------------------
Ir                  

-- line 136 ----------------------------------------
         .           /// [`Box::leak`]: ../../std/boxed/struct.Box.html#method.leak
         .           /// [`Box::into_raw`]: ../../std/boxed/struct.Box.html#method.into_raw
         .           /// [`mem::drop`]: drop
         .           /// [ub]: ../../reference/behavior-considered-undefined.html
         .           #[inline]
         .           #[rustc_const_stable(feature = "const_forget", since = "1.46.0")]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           #[cfg_attr(not(test), rustc_diagnostic_item = "mem_forget")]
    47,918 ( 0.00%)  pub const fn forget<T>(t: T) {
       333 ( 0.00%)      let _ = ManuallyDrop::new(t);
    36,554 ( 0.00%)  }
         .           
         .           /// Like [`forget`], but also accepts unsized values.
         .           ///
         .           /// This function is just a shim intended to be removed when the `unsized_locals` feature gets
         .           /// stabilized.
         .           #[inline]
         .           #[unstable(feature = "forget_unsized", issue = "none")]
         .           pub fn forget_unsized<T: ?Sized>(t: T) {
-- line 154 ----------------------------------------
-- line 324 ----------------------------------------
         .           /// let y: &[u8] = &x;
         .           /// assert_eq!(13, mem::size_of_val(y));
         .           /// ```
         .           #[inline]
         .           #[must_use]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           #[rustc_const_unstable(feature = "const_size_of_val", issue = "46571")]
         .           #[cfg_attr(not(test), rustc_diagnostic_item = "mem_size_of_val")]
   118,864 ( 0.00%)  pub const fn size_of_val<T: ?Sized>(val: &T) -> usize {
         .               // SAFETY: `val` is a reference, so it's a valid raw pointer
   220,867 ( 0.00%)      unsafe { intrinsics::size_of_val(val) }
    79,278 ( 0.00%)  }
         .           
         .           /// Returns the size of the pointed-to value in bytes.
         .           ///
         .           /// This is usually the same as `size_of::<T>()`. However, when `T` *has* no
         .           /// statically-known size, e.g., a slice [`[T]`][slice] or a [trait object],
         .           /// then `size_of_val_raw` can be used to get the dynamically-known size.
         .           ///
         .           /// # Safety
-- line 343 ----------------------------------------
-- line 375 ----------------------------------------
         .           /// assert_eq!(13, unsafe { mem::size_of_val_raw(y) });
         .           /// ```
         .           #[inline]
         .           #[must_use]
         .           #[unstable(feature = "layout_for_ptr", issue = "69835")]
         .           #[rustc_const_unstable(feature = "const_size_of_val_raw", issue = "46571")]
         .           pub const unsafe fn size_of_val_raw<T: ?Sized>(val: *const T) -> usize {
         .               // SAFETY: the caller must provide a valid raw pointer
        14 ( 0.00%)      unsafe { intrinsics::size_of_val(val) }
         .           }
         .           
         .           /// Returns the [ABI]-required minimum alignment of a type.
         .           ///
         .           /// Every reference to a value of the type `T` must be a multiple of this number.
         .           ///
         .           /// This is the alignment used for struct fields. It may be smaller than the preferred alignment.
         .           ///
-- line 391 ----------------------------------------
-- line 467 ----------------------------------------
         .           ///
         .           /// assert_eq!(4, mem::align_of_val(&5i32));
         .           /// ```
         .           #[inline]
         .           #[must_use]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           #[rustc_const_unstable(feature = "const_align_of_val", issue = "46571")]
         .           #[allow(deprecated)]
       106 ( 0.00%)  pub const fn align_of_val<T: ?Sized>(val: &T) -> usize {
         .               // SAFETY: val is a reference, so it's a valid raw pointer
       159 ( 0.00%)      unsafe { intrinsics::min_align_of_val(val) }
       106 ( 0.00%)  }
         .           
         .           /// Returns the [ABI]-required minimum alignment of the type of the value that `val` points to.
         .           ///
         .           /// Every reference to a value of the type `T` must be a multiple of this number.
         .           ///
         .           /// [ABI]: https://en.wikipedia.org/wiki/Application_binary_interface
         .           ///
         .           /// # Safety
-- line 486 ----------------------------------------
-- line 578 ----------------------------------------
         .           ///     }
         .           /// }
         .           /// ```
         .           #[inline]
         .           #[must_use]
         .           #[stable(feature = "needs_drop", since = "1.21.0")]
         .           #[rustc_const_stable(feature = "const_needs_drop", since = "1.36.0")]
         .           #[rustc_diagnostic_item = "needs_drop"]
         9 ( 0.00%)  pub const fn needs_drop<T>() -> bool {
        27 ( 0.00%)      intrinsics::needs_drop::<T>()
        36 ( 0.00%)  }
         .           
         .           /// Returns the value of type `T` represented by the all-zero byte-pattern.
         .           ///
         .           /// This means that, for example, the padding byte in `(u8, u16)` is not
         .           /// necessarily zeroed.
         .           ///
         .           /// There is no guarantee that an all-zero byte-pattern represents a valid value
         .           /// of some type `T`. For example, the all-zero byte-pattern is not a valid value
-- line 596 ----------------------------------------
-- line 694 ----------------------------------------
         .           /// mem::swap(&mut x, &mut y);
         .           ///
         .           /// assert_eq!(42, x);
         .           /// assert_eq!(5, y);
         .           /// ```
         .           #[inline]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           #[rustc_const_unstable(feature = "const_swap", issue = "83163")]
        12 ( 0.00%)  pub const fn swap<T>(x: &mut T, y: &mut T) {
         .               // SAFETY: the raw pointers have been created from safe mutable references satisfying all the
         .               // constraints on `ptr::swap_nonoverlapping_one`
         .               unsafe {
         4 ( 0.00%)          ptr::swap_nonoverlapping_one(x, y);
         .               }
         8 ( 0.00%)  }
         .           
         .           /// Replaces `dest` with the default value of `T`, returning the previous `dest` value.
         .           ///
         .           /// * If you want to replace the values of two variables, see [`swap`].
         .           /// * If you want to replace with a passed value instead of the default value, see [`replace`].
         .           ///
         .           /// # Examples
         .           ///
-- line 716 ----------------------------------------
-- line 759 ----------------------------------------
         .           /// let mut buffer = Buffer { buf: vec![0, 1] };
         .           /// assert_eq!(buffer.buf.len(), 2);
         .           ///
         .           /// assert_eq!(buffer.get_and_reset(), vec![0, 1]);
         .           /// assert_eq!(buffer.buf.len(), 0);
         .           /// ```
         .           #[inline]
         .           #[stable(feature = "mem_take", since = "1.40.0")]
       150 ( 0.00%)  pub fn take<T: Default>(dest: &mut T) -> T {
       120 ( 0.00%)      replace(dest, T::default())
        60 ( 0.00%)  }
         .           
         .           /// Moves `src` into the referenced `dest`, returning the previous `dest` value.
         .           ///
         .           /// Neither value is dropped.
         .           ///
         .           /// * If you want to replace the values of two variables, see [`swap`].
         .           /// * If you want to replace with a default value, see [`take`].
         .           ///
-- line 777 ----------------------------------------
-- line 826 ----------------------------------------
         .           /// assert_eq!(buffer.replace_index(0, 2), 0);
         .           /// assert_eq!(buffer.buf[0], 2);
         .           /// ```
         .           #[inline]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           #[must_use = "if you don't need the old value, you can just assign the new value directly"]
         .           #[rustc_const_unstable(feature = "const_replace", issue = "83164")]
         .           #[cfg_attr(not(test), rustc_diagnostic_item = "mem_replace")]
 1,340,037 ( 0.03%)  pub const fn replace<T>(dest: &mut T, src: T) -> T {
         .               // SAFETY: We read from `dest` but directly write `src` into it afterwards,
         .               // such that the old value is not duplicated. Nothing is dropped and
         .               // nothing here can panic.
         .               unsafe {
 1,665,473 ( 0.03%)          let result = ptr::read(dest);
15,388,078 ( 0.32%)          ptr::write(dest, src);
         .                   result
         .               }
   437,672 ( 0.01%)  }
         .           
         .           /// Disposes of a value.
         .           ///
         .           /// This does so by calling the argument's implementation of [`Drop`][drop].
         .           ///
         .           /// This effectively does nothing for types which implement `Copy`, e.g.
         .           /// integers. Such values are copied and _then_ moved into the function, so the
         .           /// value persists after this function call.
-- line 851 ----------------------------------------
-- line 901 ----------------------------------------
         .           ///
         .           /// println!("x: {}, y: {}", x, y.0); // still available
         .           /// ```
         .           ///
         .           /// [`RefCell`]: crate::cell::RefCell
         .           #[inline]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           #[cfg_attr(not(test), rustc_diagnostic_item = "mem_drop")]
    19,338 ( 0.00%)  pub fn drop<T>(_x: T) {}
         .           
         .           /// Interprets `src` as having type `&U`, and then reads `src` without moving
         .           /// the contained value.
         .           ///
         .           /// This function will unsafely assume the pointer `src` is valid for [`size_of::<U>`][size_of]
         .           /// bytes by transmuting `&T` to `&U` and then reading the `&U` (except that this is done in a way
         .           /// that is correct even when `&U` makes stricter alignment requirements than `&T`). It will also
         .           /// unsafely create a copy of the contained value instead of moving out of `src`.
-- line 917 ----------------------------------------
-- line 947 ----------------------------------------
         .           ///
         .           /// // The contents of 'foo_array' should not have changed
         .           /// assert_eq!(foo_array, [10]);
         .           /// ```
         .           #[inline]
         .           #[must_use]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           #[rustc_const_unstable(feature = "const_transmute_copy", issue = "83165")]
        75 ( 0.00%)  pub const unsafe fn transmute_copy<T, U>(src: &T) -> U {
         .               // If U has a higher alignment requirement, src might not be suitably aligned.
        30 ( 0.00%)      if align_of::<U>() > align_of::<T>() {
         .                   // SAFETY: `src` is a reference which is guaranteed to be valid for reads.
         .                   // The caller must guarantee that the actual transmutation is safe.
         .                   unsafe { ptr::read_unaligned(src as *const T as *const U) }
         .               } else {
         .                   // SAFETY: `src` is a reference which is guaranteed to be valid for reads.
         .                   // We just checked that `src as *const U` was properly aligned.
         .                   // The caller must guarantee that the actual transmutation is safe.
        30 ( 0.00%)          unsafe { ptr::read(src as *const T as *const U) }
         .               }
        30 ( 0.00%)  }
         .           
         .           /// Opaque type representing the discriminant of an enum.
         .           ///
         .           /// See the [`discriminant`] function in this module for more information.
         .           #[stable(feature = "discriminant_value", since = "1.21.0")]
         .           pub struct Discriminant<T>(<T as DiscriminantKind>::Discriminant);
         .           
         .           // N.B. These trait implementations cannot be derived because we don't want any bounds on T.
-- line 975 ----------------------------------------
-- line 991 ----------------------------------------
         .               }
         .           }
         .           
         .           #[stable(feature = "discriminant_value", since = "1.21.0")]
         .           impl<T> cmp::Eq for Discriminant<T> {}
         .           
         .           #[stable(feature = "discriminant_value", since = "1.21.0")]
         .           impl<T> hash::Hash for Discriminant<T> {
     7,209 ( 0.00%)      fn hash<H: hash::Hasher>(&self, state: &mut H) {
         .                   self.0.hash(state);
    12,766 ( 0.00%)      }
         .           }
         .           
         .           #[stable(feature = "discriminant_value", since = "1.21.0")]
         .           impl<T> fmt::Debug for Discriminant<T> {
         .               fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
         .                   fmt.debug_tuple("Discriminant").field(&self.0).finish()
         .               }
         .           }
-- line 1009 ----------------------------------------
-- line 1031 ----------------------------------------
         .           /// assert_eq!(mem::discriminant(&Foo::A("bar")), mem::discriminant(&Foo::A("baz")));
         .           /// assert_eq!(mem::discriminant(&Foo::B(1)), mem::discriminant(&Foo::B(2)));
         .           /// assert_ne!(mem::discriminant(&Foo::B(3)), mem::discriminant(&Foo::C(3)));
         .           /// ```
         .           #[stable(feature = "discriminant_value", since = "1.21.0")]
         .           #[rustc_const_unstable(feature = "const_discriminant", issue = "69821")]
         .           #[cfg_attr(not(test), rustc_diagnostic_item = "mem_discriminant")]
         .           pub const fn discriminant<T>(v: &T) -> Discriminant<T> {
    47,666 ( 0.00%)      Discriminant(intrinsics::discriminant_value(v))
         .           }
         .           
         .           /// Returns the number of variants in the enum type `T`.
         .           ///
         .           /// If `T` is not an enum, calling this function will not result in undefined behavior, but the
         .           /// return value is unspecified. Equally, if `T` is an enum with more variants than `usize::MAX`
         .           /// the return value is unspecified. Uninhabited variants will be counted.
         .           ///
-- line 1047 ----------------------------------------

   670,773 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/mem/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.8.4/src/reader/parser/outside_tag.rs
--------------------------------------------------------------------------------
Ir                 

-- line 4 ----------------------------------------
        .           use reader::lexer::Token;
        .           
        .           use super::{
        .               Result, PullParser, State, ClosingTagSubstate, OpeningTagSubstate,
        .               ProcessingInstructionSubstate, DEFAULT_VERSION, DEFAULT_ENCODING, DEFAULT_STANDALONE
        .           };
        .           
        .           impl PullParser {
1,074,756 ( 0.02%)      pub fn outside_tag(&mut self, t: Token) -> Option<Result> {
1,637,264 ( 0.03%)          match t {
        .                       Token::ReferenceStart =>
        .                           self.into_state_continue(State::InsideReference(Box::new(State::OutsideTag))),
        .           
  221,728 ( 0.00%)              Token::Whitespace(_) if self.depth() == 0 && self.config.ignore_root_level_whitespace => None,  // skip whitespace outside of the root element
        .           
  366,974 ( 0.01%)              Token::Whitespace(_) if self.config.trim_whitespace && !self.buf_has_data() => None,
        .           
   96,312 ( 0.00%)              Token::Whitespace(c) => {
  192,624 ( 0.00%)                  if !self.buf_has_data() {
        .                               self.push_pos();
        .                           }
   64,208 ( 0.00%)                  self.append_char_continue(c)
        .                       }
        .           
1,206,582 ( 0.03%)              _ if t.contains_char_data() && self.depth() == 0 =>
        .                           Some(self_error!(self; "Unexpected characters outside the root element: {}", t)),
        .           
  676,062 ( 0.01%)              _ if t.contains_char_data() => {  // Non-whitespace char data
  663,150 ( 0.01%)                  if !self.buf_has_data() {
      644 ( 0.00%)                      self.push_pos();
        .                           }
  132,630 ( 0.00%)                  self.inside_whitespace = false;
  397,890 ( 0.01%)                  t.push_to_string(&mut self.buf);
  265,260 ( 0.01%)                  None
        .                       }
        .           
        .                       Token::ReferenceEnd => { // Semi-colon in a text outside an entity
       12 ( 0.00%)                  self.inside_whitespace = false;
       36 ( 0.00%)                  Token::ReferenceEnd.push_to_string(&mut self.buf);
       24 ( 0.00%)                  None
        .                       }
        .           
      160 ( 0.00%)              Token::CommentStart if self.config.coalesce_characters && self.config.ignore_comments => {
        .                           // We need to switch the lexer into a comment mode inside comments
       80 ( 0.00%)                  self.lexer.inside_comment();
      200 ( 0.00%)                  self.into_state_continue(State::InsideComment)
        .                       }
        .           
        .                       Token::CDataStart if self.config.coalesce_characters && self.config.cdata_to_characters => {
        .                           if !self.buf_has_data() {
        .                               self.push_pos();
        .                           }
        .                           // We need to disable lexing errors inside CDATA
        .                           self.lexer.disable_errors();
        .                           self.into_state_continue(State::InsideCData)
        .                       }
        .           
        .                       _ => {
        .                           // Encountered some markup event, flush the buffer as characters
        .                           // or a whitespace
   14,378 ( 0.00%)                  let mut next_event = if self.buf_has_data() {
      966 ( 0.00%)                      let buf = self.take_buf();
    1,932 ( 0.00%)                      if self.inside_whitespace && self.config.trim_whitespace {
        .                                   None
    2,254 ( 0.00%)                      } else if self.inside_whitespace && !self.config.whitespace_to_characters {
        .                                   Some(Ok(XmlEvent::Whitespace(buf)))
      966 ( 0.00%)                      } else if self.config.trim_whitespace {
    9,982 ( 0.00%)                          Some(Ok(XmlEvent::Characters(buf.trim_matches(is_whitespace_char).into())))
        .                               } else {
        .                                   Some(Ok(XmlEvent::Characters(buf)))
        .                               }
    5,488 ( 0.00%)                  } else { None };
    2,100 ( 0.00%)                  self.inside_whitespace = true;  // Reset inside_whitespace flag
    4,200 ( 0.00%)                  self.push_pos();
    8,400 ( 0.00%)                  match t {
        .                               Token::ProcessingInstructionStart =>
       34 ( 0.00%)                          self.into_state(State::InsideProcessingInstruction(ProcessingInstructionSubstate::PIInsideName), next_event),
        .           
        .                               Token::DoctypeStart if !self.encountered_element => {
        .                                   // We don't have a doctype event so skip this position
        .                                   // FIXME: update when we have a doctype event
        .                                   self.next_pos();
        .                                   self.lexer.disable_errors();
        .                                   self.into_state(State::InsideDoctype, next_event)
        .                               }
        .           
        .                               Token::OpeningTagStart => {
        .                                   // If declaration was not parsed and we have encountered an element,
        .                                   // emit this declaration as the next event.
    7,180 ( 0.00%)                          if !self.parsed_declaration {
        .                                       self.parsed_declaration = true;
        .                                       let sd_event = XmlEvent::StartDocument {
        .                                           version: DEFAULT_VERSION,
        .                                           encoding: DEFAULT_ENCODING.into(),
        .                                           standalone: DEFAULT_STANDALONE
        .                                       };
        .                                       // next_event is always none here because we're outside of
        .                                       // the root element
        .                                       next_event = Some(Ok(sd_event));
        .                                       self.push_pos();
        .                                   }
    1,436 ( 0.00%)                          self.encountered_element = true;
    4,308 ( 0.00%)                          self.nst.push_empty();
   24,412 ( 0.00%)                          self.into_state(State::InsideOpeningTag(OpeningTagSubstate::InsideName), next_event)
        .                               }
        .           
    3,310 ( 0.00%)                      Token::ClosingTagStart if self.depth() > 0 =>
   11,254 ( 0.00%)                          self.into_state(State::InsideClosingTag(ClosingTagSubstate::CTInsideName), next_event),
        .           
        .                               Token::CommentStart => {
        .                                   // We need to switch the lexer into a comment mode inside comments
        .                                   self.lexer.inside_comment();
        .                                   self.into_state(State::InsideComment, next_event)
        .                               }
        .           
        .                               Token::CDataStart => {
        .                                   // We need to disable lexing errors inside CDATA
        .                                   self.lexer.disable_errors();
        .                                   self.into_state(State::InsideCData, next_event)
        .                               }
        .           
        .                               _ => Some(self_error!(self; "Unexpected token: {}", t))
        .                           }
   10,500 ( 0.00%)              }
        .                   }
  358,252 ( 0.01%)      }
        .           }

2,240,942 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.8.4/src/reader/parser/outside_tag.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/scoped_cell.rs
--------------------------------------------------------------------------------
Ir                 

-- line 22 ----------------------------------------
        .           impl<'a, 'b, T: LambdaL> Deref for RefMutL<'a, 'b, T> {
        .               type Target = <T as ApplyL<'b>>::Out;
        .               fn deref(&self) -> &Self::Target {
        .                   self.0
        .               }
        .           }
        .           
        .           impl<'a, 'b, T: LambdaL> DerefMut for RefMutL<'a, 'b, T> {
       20 ( 0.00%)      fn deref_mut(&mut self) -> &mut Self::Target {
       10 ( 0.00%)          self.0
       20 ( 0.00%)      }
        .           }
        .           
        .           pub struct ScopedCell<T: LambdaL>(Cell<<T as ApplyL<'static>>::Out>);
        .           
        .           impl<T: LambdaL> ScopedCell<T> {
        .               #[rustc_allow_const_fn_unstable(const_fn)]
        3 ( 0.00%)      pub const fn new(value: <T as ApplyL<'static>>::Out) -> Self {
       10 ( 0.00%)          ScopedCell(Cell::new(value))
        2 ( 0.00%)      }
        .           
        .               /// Sets the value in `self` to `replacement` while
        .               /// running `f`, which gets the old value, mutably.
        .               /// The old value will be restored after `f` exits, even
        .               /// by panic, including modifications made to it by `f`.
2,486,388 ( 0.05%)      pub fn replace<'a, R>(
        .                   &self,
        .                   replacement: <T as ApplyL<'a>>::Out,
        .                   f: impl for<'b, 'c> FnOnce(RefMutL<'b, 'c, T>) -> R,
        .               ) -> R {
        .                   /// Wrapper that ensures that the cell always gets filled
        .                   /// (with the original state, optionally changed by `f`),
        .                   /// even if `f` had panicked.
        .                   struct PutBackOnDrop<'a, T: LambdaL> {
        .                       cell: &'a ScopedCell<T>,
        .                       value: Option<<T as ApplyL<'static>>::Out>,
        .                   }
        .           
        .                   impl<'a, T: LambdaL> Drop for PutBackOnDrop<'a, T> {
       45 ( 0.00%)              fn drop(&mut self) {
  338,650 ( 0.01%)                  self.cell.0.set(self.value.take().unwrap());
       30 ( 0.00%)              }
        .                   }
        .           
  677,223 ( 0.01%)          let mut put_back_on_drop = PutBackOnDrop {
        .                       cell: self,
      150 ( 0.00%)              value: Some(self.0.replace(unsafe {
       30 ( 0.00%)                  let erased = mem::transmute_copy(&replacement);
      180 ( 0.00%)                  mem::forget(replacement);
      150 ( 0.00%)                  erased
        .                       })),
        .                   };
        .           
  215,191 ( 0.00%)          f(RefMutL(put_back_on_drop.value.as_mut().unwrap()))
3,289,712 ( 0.07%)      }
        .           
        .               /// Sets the value in `self` to `value` while running `f`.
       35 ( 0.00%)      pub fn set<R>(&self, value: <T as ApplyL<'_>>::Out, f: impl FnOnce() -> R) -> R {
       80 ( 0.00%)          self.replace(value, |_| f())
       10 ( 0.00%)      }
        .           }

  190,291 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/scoped_cell.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs
--------------------------------------------------------------------------------
Ir                  

-- line 70 ----------------------------------------
         .           
         .                   impl<'a, T> $name<'a, T> {
         .                       // Helper function for creating a slice from the iterator.
         .                       #[inline(always)]
         .                       fn make_slice(&self) -> &'a [T] {
         .                           // SAFETY: the iterator was created from a slice with pointer
         .                           // `self.ptr` and length `len!(self)`. This guarantees that all
         .                           // the prerequisites for `from_raw_parts` are fulfilled.
 1,543,482 ( 0.03%)                  unsafe { from_raw_parts(self.ptr.as_ptr(), len!(self)) }
         .                       }
         .           
         .                       // Helper function for moving the start of the iterator forwards by `offset` elements,
         .                       // returning the old start.
         .                       // Unsafe because the offset must not exceed `self.len()`.
         .                       #[inline(always)]
         .                       unsafe fn post_inc_start(&mut self, offset: isize) -> * $raw_mut T {
         .                           if mem::size_of::<T>() == 0 {
         .                               zst_shrink!(self, offset);
         .                               self.ptr.as_ptr()
         .                           } else {
 2,868,918 ( 0.06%)                      let old = self.ptr.as_ptr();
         .                               // SAFETY: the caller guarantees that `offset` doesn't exceed `self.len()`,
         .                               // so this new pointer is inside `self` and thus guaranteed to be non-null.
 5,246,543 ( 0.11%)                      self.ptr = unsafe { NonNull::new_unchecked(self.ptr.as_ptr().offset(offset)) };
   478,153 ( 0.01%)                      old
         .                           }
   956,306 ( 0.02%)              }
         .           
         .                       // Helper function for moving the end of the iterator backwards by `offset` elements,
         .                       // returning the new end.
         .                       // Unsafe because the offset must not exceed `self.len()`.
         .                       #[inline(always)]
         .                       unsafe fn pre_dec_end(&mut self, offset: isize) -> * $raw_mut T {
         .                           if mem::size_of::<T>() == 0 {
         .                               zst_shrink!(self, offset);
         .                               self.ptr.as_ptr()
         .                           } else {
         .                               // SAFETY: the caller guarantees that `offset` doesn't exceed `self.len()`,
         .                               // which is guaranteed to not overflow an `isize`. Also, the resulting pointer
         .                               // is in bounds of `slice`, which fulfills the other requirements for `offset`.
   103,211 ( 0.00%)                      self.end = unsafe { self.end.offset(-offset) };
    29,432 ( 0.00%)                      self.end
         .                           }
    29,432 ( 0.00%)              }
         .                   }
         .           
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   impl<T> ExactSizeIterator for $name<'_, T> {
         .                       #[inline(always)]
         .                       fn len(&self) -> usize {
 3,909,015 ( 0.08%)                  len!(self)
   377,934 ( 0.01%)              }
         .           
         .                       #[inline(always)]
         .                       fn is_empty(&self) -> bool {
         .                           is_empty!(self)
         .                       }
         .                   }
         .           
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   impl<'a, T> Iterator for $name<'a, T> {
         .                       type Item = $elem;
         .           
         .                       #[inline]
 1,545,459 ( 0.03%)              fn next(&mut self) -> Option<$elem> {
         .                           // could be implemented with slices, but this avoids bounds checks
         .           
         .                           // SAFETY: `assume` calls are safe since a slice's start pointer
         .                           // must be non-null, and slices over non-ZSTs must also have a
         .                           // non-null end pointer. The call to `next_unchecked!` is safe
         .                           // since we check if the iterator is empty first.
         .                           unsafe {
 2,513,212 ( 0.05%)                      assume(!self.ptr.as_ptr().is_null());
 2,575,765 ( 0.05%)                      if mem::size_of::<T>() != 0 {
 1,558,460 ( 0.03%)                          assume(!self.end.is_null());
         .                               }
68,582,091 ( 1.43%)                      if is_empty!(self) {
    37,000 ( 0.00%)                          None
         .                               } else {
   956,375 ( 0.02%)                          Some(next_unchecked!(self))
         .                               }
         .                           }
 1,545,459 ( 0.03%)              }
         .           
         .                       #[inline]
        30 ( 0.00%)              fn size_hint(&self) -> (usize, Option<usize>) {
 2,127,162 ( 0.04%)                  let exact = len!(self);
        54 ( 0.00%)                  (exact, Some(exact))
        12 ( 0.00%)              }
         .           
         .                       #[inline]
         .                       fn count(self) -> usize {
         .                           len!(self)
         .                       }
         .           
         .                       #[inline]
         .                       fn nth(&mut self, n: usize) -> Option<$elem> {
    31,150 ( 0.00%)                  if n >= len!(self) {
         .                               // This iterator is now empty.
         .                               if mem::size_of::<T>() == 0 {
         .                                   // We have to do it this way as `ptr` may never be 0, but `end`
         .                                   // could be (due to wrapping).
         .                                   self.end = self.ptr.as_ptr();
         .                               } else {
         .                                   // SAFETY: end can't be 0 if T isn't ZST because ptr isn't 0 and end >= ptr
         .                                   unsafe {
-- line 175 ----------------------------------------
-- line 203 ----------------------------------------
         .                       // faster to compile.
         .                       #[inline]
         .                       fn for_each<F>(mut self, mut f: F)
         .                       where
         .                           Self: Sized,
         .                           F: FnMut(Self::Item),
         .                       {
         .                           while let Some(x) = self.next() {
    12,084 ( 0.00%)                      f(x);
         .                           }
         .                       }
         .           
         .                       // We override the default implementation, which uses `try_fold`,
         .                       // because this simple implementation generates less LLVM IR and is
         .                       // faster to compile.
         .                       #[inline]
     1,848 ( 0.00%)              fn all<F>(&mut self, mut f: F) -> bool
         .                       where
         .                           Self: Sized,
         .                           F: FnMut(Self::Item) -> bool,
         .                       {
    15,495 ( 0.00%)                  while let Some(x) = self.next() {
    24,274 ( 0.00%)                      if !f(x) {
       114 ( 0.00%)                          return false;
         .                               }
         .                           }
       252 ( 0.00%)                  true
     1,944 ( 0.00%)              }
         .           
         .                       // We override the default implementation, which uses `try_fold`,
         .                       // because this simple implementation generates less LLVM IR and is
         .                       // faster to compile.
         .                       #[inline]
     5,972 ( 0.00%)              fn any<F>(&mut self, mut f: F) -> bool
         .                       where
         .                           Self: Sized,
         .                           F: FnMut(Self::Item) -> bool,
         .                       {
   920,471 ( 0.02%)                  while let Some(x) = self.next() {
 1,218,051 ( 0.03%)                      if f(x) {
         9 ( 0.00%)                          return true;
         .                               }
         .                           }
         6 ( 0.00%)                  false
     5,980 ( 0.00%)              }
         .           
         .                       // We override the default implementation, which uses `try_fold`,
         .                       // because this simple implementation generates less LLVM IR and is
         .                       // faster to compile.
         .                       #[inline]
    21,224 ( 0.00%)              fn find<P>(&mut self, mut predicate: P) -> Option<Self::Item>
         .                       where
         .                           Self: Sized,
         .                           P: FnMut(&Self::Item) -> bool,
         .                       {
   153,956 ( 0.00%)                  while let Some(x) = self.next() {
   174,627 ( 0.00%)                      if predicate(&x) {
       126 ( 0.00%)                          return Some(x);
         .                               }
         .                           }
     3,544 ( 0.00%)                  None
    18,046 ( 0.00%)              }
         .           
         .                       // We override the default implementation, which uses `try_fold`,
         .                       // because this simple implementation generates less LLVM IR and is
         .                       // faster to compile.
         .                       #[inline]
       636 ( 0.00%)              fn find_map<B, F>(&mut self, mut f: F) -> Option<B>
         .                       where
         .                           Self: Sized,
         .                           F: FnMut(Self::Item) -> Option<B>,
         .                       {
    44,914 ( 0.00%)                  while let Some(x) = self.next() {
   336,935 ( 0.01%)                      if let Some(y) = f(x) {
    40,638 ( 0.00%)                          return Some(y);
         .                               }
       360 ( 0.00%)                  }
        39 ( 0.00%)                  None
    13,485 ( 0.00%)              }
         .           
         .                       // We override the default implementation, which uses `try_fold`,
         .                       // because this simple implementation generates less LLVM IR and is
         .                       // faster to compile. Also, the `assume` avoids a bounds check.
         .                       #[inline]
         .                       #[rustc_inherit_overflow_checks]
    26,884 ( 0.00%)              fn position<P>(&mut self, mut predicate: P) -> Option<usize> where
         .                           Self: Sized,
         .                           P: FnMut(Self::Item) -> bool,
         .                       {
   168,025 ( 0.00%)                  let n = len!(self);
     6,721 ( 0.00%)                  let mut i = 0;
   629,962 ( 0.01%)                  while let Some(x) = self.next() {
   655,169 ( 0.01%)                      if predicate(x) {
         .                                   // SAFETY: we are guaranteed to be in bounds by the loop invariant:
         .                                   // when `i >= n`, `self.next()` returns `None` and the loop breaks.
       374 ( 0.00%)                          unsafe { assume(i < n) };
     1,122 ( 0.00%)                          return Some(i);
         .                               }
   313,464 ( 0.01%)                      i += 1;
         .                           }
     6,347 ( 0.00%)                  None
    27,258 ( 0.00%)              }
         .           
         .                       // We override the default implementation, which uses `try_fold`,
         .                       // because this simple implementation generates less LLVM IR and is
         .                       // faster to compile. Also, the `assume` avoids a bounds check.
         .                       #[inline]
         .                       fn rposition<P>(&mut self, mut predicate: P) -> Option<usize> where
         .                           P: FnMut(Self::Item) -> bool,
         .                           Self: Sized + ExactSizeIterator + DoubleEndedIterator
         .                       {
         .                           let n = len!(self);
         .                           let mut i = n;
    39,925 ( 0.00%)                  while let Some(x) = self.next_back() {
   497,842 ( 0.01%)                      i -= 1;
   397,943 ( 0.01%)                      if predicate(x) {
         .                                   // SAFETY: `i` must be lower than `n` since it starts at `n`
         .                                   // and is only decreasing.
         .                                   unsafe { assume(i < n) };
         .                                   return Some(i);
         .                               }
         .                           }
         .                           None
         .                       }
-- line 326 ----------------------------------------
-- line 332 ----------------------------------------
         .                           // the returned references is guaranteed to refer to an element
         .                           // of the slice and thus guaranteed to be valid.
         .                           //
         .                           // Also note that the caller also guarantees that we're never
         .                           // called with the same index again, and that no other methods
         .                           // that will access this subslice are called, so it is valid
         .                           // for the returned reference to be mutable in the case of
         .                           // `IterMut`
    91,154 ( 0.00%)                  unsafe { & $( $mut_ )? * self.ptr.as_ptr().add(idx) }
         .                       }
         .           
         .                       $($extra)*
         .                   }
         .           
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   impl<'a, T> DoubleEndedIterator for $name<'a, T> {
         .                       #[inline]
    45,603 ( 0.00%)              fn next_back(&mut self) -> Option<$elem> {
         .                           // could be implemented with slices, but this avoids bounds checks
         .           
         .                           // SAFETY: `assume` calls are safe since a slice's start pointer must be non-null,
         .                           // and slices over non-ZSTs must also have a non-null end pointer.
         .                           // The call to `next_back_unchecked!` is safe since we check if the iterator is
         .                           // empty first.
         .                           unsafe {
    61,002 ( 0.00%)                      assume(!self.ptr.as_ptr().is_null());
    76,005 ( 0.00%)                      if mem::size_of::<T>() != 0 {
    30,633 ( 0.00%)                          assume(!self.end.is_null());
         .                               }
 2,007,176 ( 0.04%)                      if is_empty!(self) {
       485 ( 0.00%)                          None
         .                               } else {
    29,432 ( 0.00%)                          Some(next_back_unchecked!(self))
         .                               }
         .                           }
    45,603 ( 0.00%)              }
         .           
         .                       #[inline]
         .                       fn nth_back(&mut self, n: usize) -> Option<$elem> {
         .                           if n >= len!(self) {
         .                               // This iterator is now empty.
         .                               self.end = self.ptr.as_ptr();
         .                               return None;
         .                           }
-- line 375 ----------------------------------------

17,871,654 ( 0.37%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/obligation_forest/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 121 ----------------------------------------
        .           #[derive(Debug)]
        .           pub enum ProcessResult<O, E> {
        .               Unchanged,
        .               Changed(Vec<O>),
        .               Error(E),
        .           }
        .           
        .           #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
   69,694 ( 0.00%)  struct ObligationTreeId(usize);
        .           
        .           type ObligationTreeIdGenerator =
        .               std::iter::Map<std::ops::RangeFrom<usize>, fn(usize) -> ObligationTreeId>;
        .           
        .           pub struct ObligationForest<O: ForestObligation> {
        .               /// The list of obligations. In between calls to `process_obligations`,
        .               /// this list only contains nodes in the `Pending` or `Waiting` state.
        .               ///
-- line 137 ----------------------------------------
-- line 181 ----------------------------------------
        .               has_parent: bool,
        .           
        .               /// Identifier of the obligation tree to which this node belongs.
        .               obligation_tree_id: ObligationTreeId,
        .           }
        .           
        .           impl<O> Node<O> {
        .               fn new(parent: Option<usize>, obligation: O, obligation_tree_id: ObligationTreeId) -> Node<O> {
  787,328 ( 0.02%)          Node {
        .                       obligation,
        .                       state: Cell::new(NodeState::Pending),
   92,291 ( 0.00%)              dependents: if let Some(parent_index) = parent { vec![parent_index] } else { vec![] },
        .                       has_parent: parent.is_some(),
        .                       obligation_tree_id,
        .                   }
        .               }
        .           }
        .           
        .           /// The state of one node in some tree within the forest. This represents the
        .           /// current state of processing for the obligation (of type `O`) associated
-- line 200 ----------------------------------------
-- line 223 ----------------------------------------
        .           ///  |     compress()
        .           ///  v
        .           /// (Removed)
        .           /// ```
        .           /// The `Error` state can be introduced in several places, via `error_at()`.
        .           ///
        .           /// Outside of `ObligationForest` methods, nodes should be either `Pending` or
        .           /// `Waiting`.
  860,332 ( 0.02%)  #[derive(Debug, Copy, Clone, PartialEq, Eq)]
        .           enum NodeState {
        .               /// This obligation has not yet been selected successfully. Cannot have
        .               /// subobligations.
        .               Pending,
        .           
        .               /// This obligation was selected successfully, but may or may not have
        .               /// subobligations.
        .               Success,
-- line 239 ----------------------------------------
-- line 279 ----------------------------------------
        .               pub stalled: bool,
        .           }
        .           
        .           impl<O, E> OutcomeTrait for Outcome<O, E> {
        .               type Error = Error<O, E>;
        .               type Obligation = O;
        .           
        .               fn new() -> Self {
  134,710 ( 0.00%)          Self { stalled: true, errors: vec![] }
        .               }
        .           
        .               fn mark_not_stalled(&mut self) {
   48,699 ( 0.00%)          self.stalled = false;
        .               }
        .           
        .               fn is_stalled(&self) -> bool {
   25,827 ( 0.00%)          self.stalled
        .               }
        .           
        .               fn record_completed(&mut self, _outcome: &Self::Obligation) {
        .                   // do nothing
        .               }
        .           
        .               fn record_error(&mut self, error: Self::Error) {
      128 ( 0.00%)          self.errors.push(error)
        .               }
        .           }
        .           
        .           #[derive(Debug, PartialEq, Eq)]
        .           pub struct Error<O, E> {
        .               pub error: E,
        .               pub backtrace: Vec<O>,
        .           }
        .           
        .           impl<O: ForestObligation> ObligationForest<O> {
   18,809 ( 0.00%)      pub fn new() -> ObligationForest<O> {
  225,708 ( 0.00%)          ObligationForest {
        .                       nodes: vec![],
        .                       done_cache: Default::default(),
        .                       active_cache: Default::default(),
        .                       reused_node_vec: vec![],
        .                       obligation_tree_id_generator: (0..).map(ObligationTreeId),
        .                       error_cache: Default::default(),
        .                   }
   18,809 ( 0.00%)      }
        .           
        .               /// Returns the total number of nodes in the forest that have not
        .               /// yet been fully resolved.
        .               pub fn len(&self) -> usize {
        .                   self.nodes.len()
        .               }
        .           
        .               /// Registers an obligation.
        .               pub fn register_obligation(&mut self, obligation: O) {
        .                   // Ignore errors here - there is no guarantee of success.
  574,379 ( 0.01%)          let _ = self.register_obligation_at(obligation, None);
        .               }
        .           
        .               // Returns Err(()) if we already know this obligation failed.
  786,984 ( 0.02%)      fn register_obligation_at(&mut self, obligation: O, parent: Option<usize>) -> Result<(), ()> {
  143,088 ( 0.00%)          let cache_key = obligation.as_cache_key();
  143,088 ( 0.00%)          if self.done_cache.contains(&cache_key) {
        .                       debug!("register_obligation_at: ignoring already done obligation: {:?}", obligation);
        .                       return Ok(());
        .                   }
        .           
  355,008 ( 0.01%)          match self.active_cache.entry(cache_key) {
        .                       Entry::Occupied(o) => {
   19,920 ( 0.00%)                  let node = &mut self.nodes[*o.get()];
   19,920 ( 0.00%)                  if let Some(parent_index) = parent {
        .                               // If the node is already in `active_cache`, it has already
        .                               // had its chance to be marked with a parent. So if it's
        .                               // not already present, just dump `parent` into the
        .                               // dependents as a non-parent.
   20,724 ( 0.00%)                      if !node.dependents.contains(&parent_index) {
        .                                   node.dependents.push(parent_index);
        .                               }
        .                           }
   29,880 ( 0.00%)                  if let NodeState::Error = node.state.get() { Err(()) } else { Ok(()) }
        .                       }
  147,624 ( 0.00%)              Entry::Vacant(v) => {
  295,248 ( 0.01%)                  let obligation_tree_id = match parent {
   28,722 ( 0.00%)                      Some(parent_index) => self.nodes[parent_index].obligation_tree_id,
        .                               None => self.obligation_tree_id_generator.next().unwrap(),
        .                           };
        .           
        .                           let already_failed = parent.is_some()
        .                               && self
        .                                   .error_cache
        .                                   .get(&obligation_tree_id)
        .                                   .map_or(false, |errors| errors.contains(v.key()));
        .           
        .                           if already_failed {
        .                               Err(())
        .                           } else {
   49,208 ( 0.00%)                      let new_index = self.nodes.len();
        .                               v.insert(new_index);
        .                               self.nodes.push(Node::new(parent, obligation, obligation_tree_id));
        .                               Ok(())
        .                           }
        .                       }
        .                   }
  643,896 ( 0.01%)      }
        .           
        .               /// Converts all remaining obligations to the given error.
  212,422 ( 0.00%)      pub fn to_errors<E: Clone>(&mut self, error: E) -> Vec<Error<O, E>> {
        .                   let errors = self
        .                       .nodes
        .                       .iter()
        .                       .enumerate()
        .                       .filter(|(_index, node)| node.state.get() == NodeState::Pending)
        .                       .map(|(index, _node)| Error { error: error.clone(), backtrace: self.error_at(index) })
        .                       .collect();
        .           
   60,692 ( 0.00%)          self.compress(|_| assert!(false));
        .                   errors
  182,076 ( 0.00%)      }
        .           
        .               /// Returns the set of obligations that are in a pending state.
        .               pub fn map_pending_obligations<P, F>(&self, f: F) -> Vec<P>
        .               where
        .                   F: Fn(&O) -> P,
        .               {
       42 ( 0.00%)          self.nodes
        .                       .iter()
        .                       .filter(|node| node.state.get() == NodeState::Pending)
        .                       .map(|node| f(&node.obligation))
        .                       .collect()
        .               }
        .           
       56 ( 0.00%)      fn insert_into_error_cache(&mut self, index: usize) {
        .                   let node = &self.nodes[index];
        8 ( 0.00%)          self.error_cache
       24 ( 0.00%)              .entry(node.obligation_tree_id)
        .                       .or_default()
        .                       .insert(node.obligation.as_cache_key());
       64 ( 0.00%)      }
        .           
        .               /// Performs a pass through the obligation list. This must
        .               /// be called in a loop until `outcome.stalled` is false.
        .               ///
        .               /// This _cannot_ be unrolled (presently, at least).
        .               #[inline(never)]
  606,195 ( 0.01%)      pub fn process_obligations<P, OUT>(&mut self, processor: &mut P) -> OUT
        .               where
        .                   P: ObligationProcessor<Obligation = O>,
        .                   OUT: OutcomeTrait<Obligation = O, Error = Error<O, P::Error>>,
        .               {
        .                   let mut outcome = OUT::new();
        .           
        .                   // Note that the loop body can append new nodes, and those new nodes
        .                   // will then be processed by subsequent iterations of the loop.
        .                   //
        .                   // We can't use an iterator for the loop because `self.nodes` is
        .                   // appended to and the borrow checker would complain. We also can't use
        .                   // `for index in 0..self.nodes.len() { ... }` because the range would
        .                   // be computed with the initial length, and we would miss the appended
        .                   // nodes. Therefore we use a `while` loop.
        .                   let mut index = 0;
  420,597 ( 0.01%)          while let Some(node) = self.nodes.get_mut(index) {
        .                       // `processor.process_obligation` can modify the predicate within
        .                       // `node.obligation`, and that predicate is the key used for
        .                       // `self.active_cache`. This means that `self.active_cache` can get
        .                       // out of sync with `nodes`. It's not very common, but it does
        .                       // happen, and code in `compress` has to allow for it.
  706,484 ( 0.01%)              if node.state.get() != NodeState::Pending {
   35,692 ( 0.00%)                  index += 1;
        .                           continue;
        .                       }
        .           
  278,814 ( 0.01%)              match processor.process_obligation(&mut node.obligation) {
        .                           ProcessResult::Unchanged => {
        .                               // No change in state.
        .                           }
  194,764 ( 0.00%)                  ProcessResult::Changed(children) => {
        .                               // We are not (yet) stalled.
        .                               outcome.mark_not_stalled();
        .                               node.state.set(NodeState::Success);
        .           
  249,486 ( 0.01%)                      for child in children {
  465,137 ( 0.01%)                          let st = self.register_obligation_at(child, Some(index));
   54,722 ( 0.00%)                          if let Err(()) = st {
        .                                       // Error already reported - propagate it
        .                                       // to our node.
        .                                       self.error_at(index);
        .                                   }
        .                               }
        .                           }
        .                           ProcessResult::Error(err) => {
        .                               outcome.mark_not_stalled();
      264 ( 0.00%)                      outcome.record_error(Error { error: err, backtrace: self.error_at(index) });
        .                           }
        .                       }
  635,100 ( 0.01%)              index += 1;
        .                   }
        .           
        .                   // There's no need to perform marking, cycle processing and compression when nothing
        .                   // changed.
   25,827 ( 0.00%)          if !outcome.is_stalled() {
        .                       self.mark_successes();
        .                       self.process_cycles(processor);
   25,198 ( 0.00%)              self.compress(|obl| outcome.record_completed(obl));
        .                   }
        .           
        .                   outcome
  606,195 ( 0.01%)      }
        .           
        .               /// Returns a vector of obligations for `p` and all of its
        .               /// ancestors, putting them into the error state in the process.
       56 ( 0.00%)      fn error_at(&self, mut index: usize) -> Vec<O> {
        .                   let mut error_stack: Vec<usize> = vec![];
        .                   let mut trace = vec![];
        .           
        .                   loop {
        .                       let node = &self.nodes[index];
        8 ( 0.00%)              node.state.set(NodeState::Error);
        .                       trace.push(node.obligation.clone());
       16 ( 0.00%)              if node.has_parent {
        .                           // The first dependent is the parent, which is treated
        .                           // specially.
        .                           error_stack.extend(node.dependents.iter().skip(1));
        .                           index = node.dependents[0];
        .                       } else {
        .                           // No parent; treat all dependents non-specially.
        .                           error_stack.extend(node.dependents.iter());
        .                           break;
-- line 504 ----------------------------------------
-- line 509 ----------------------------------------
        .                       let node = &self.nodes[index];
        .                       if node.state.get() != NodeState::Error {
        .                           node.state.set(NodeState::Error);
        .                           error_stack.extend(node.dependents.iter());
        .                       }
        .                   }
        .           
        .                   trace
       64 ( 0.00%)      }
        .           
        .               /// Mark all `Waiting` nodes as `Success`, except those that depend on a
        .               /// pending node.
        .               fn mark_successes(&self) {
        .                   // Convert all `Waiting` nodes to `Success`.
        .                   for node in &self.nodes {
  294,232 ( 0.01%)              if node.state.get() == NodeState::Waiting {
        .                           node.state.set(NodeState::Success);
        .                       }
        .                   }
        .           
        .                   // Convert `Success` nodes that depend on a pending node back to
        .                   // `Waiting`.
        .                   for node in &self.nodes {
  137,601 ( 0.00%)              if node.state.get() == NodeState::Pending {
        .                           // This call site is hot.
        .                           self.inlined_mark_dependents_as_waiting(node);
        .                       }
        .                   }
        .               }
        .           
        .               // This always-inlined function is for the hot call site.
        .               #[inline(always)]
        .               fn inlined_mark_dependents_as_waiting(&self, node: &Node<O>) {
   25,586 ( 0.00%)          for &index in node.dependents.iter() {
        .                       let node = &self.nodes[index];
   25,586 ( 0.00%)              let state = node.state.get();
   25,586 ( 0.00%)              if state == NodeState::Success {
        .                           // This call site is cold.
   32,253 ( 0.00%)                  self.uninlined_mark_dependents_as_waiting(node);
        .                       } else {
        .                           debug_assert!(state == NodeState::Waiting || state == NodeState::Error)
        .                       }
        .                   }
        .               }
        .           
        .               // This never-inlined function is for the cold call site.
        .               #[inline(never)]
   75,257 ( 0.00%)      fn uninlined_mark_dependents_as_waiting(&self, node: &Node<O>) {
        .                   // Mark node Waiting in the cold uninlined code instead of the hot inlined
        .                   node.state.set(NodeState::Waiting);
        .                   self.inlined_mark_dependents_as_waiting(node)
   86,008 ( 0.00%)      }
        .           
        .               /// Report cycles between all `Success` nodes, and convert all `Success`
        .               /// nodes to `Done`. This must be called after `mark_successes`.
        .               fn process_cycles<P>(&mut self, processor: &mut P)
        .               where
        .                   P: ObligationProcessor<Obligation = O>,
        .               {
   12,599 ( 0.00%)          let mut stack = std::mem::take(&mut self.reused_node_vec);
        .                   for (index, node) in self.nodes.iter().enumerate() {
        .                       // For some benchmarks this state test is extremely hot. It's a win
        .                       // to handle the no-op cases immediately to avoid the cost of the
        .                       // function call.
  137,601 ( 0.00%)              if node.state.get() == NodeState::Success {
  233,180 ( 0.00%)                  self.find_cycles_from_node(&mut stack, processor, index);
        .                       }
        .                   }
        .           
        .                   debug_assert!(stack.is_empty());
  100,792 ( 0.00%)          self.reused_node_vec = stack;
        .               }
        .           
  600,903 ( 0.01%)      fn find_cycles_from_node<P>(&self, stack: &mut Vec<usize>, processor: &mut P, index: usize)
        .               where
        .                   P: ObligationProcessor<Obligation = O>,
        .               {
        .                   let node = &self.nodes[index];
  133,534 ( 0.00%)          if node.state.get() == NodeState::Success {
    4,424 ( 0.00%)              match stack.iter().rposition(|&n| n == index) {
        .                           None => {
        .                               stack.push(index);
   20,131 ( 0.00%)                      for &dep_index in node.dependents.iter() {
   80,524 ( 0.00%)                          self.find_cycles_from_node(stack, processor, dep_index);
        .                               }
        .                               stack.pop();
        .                               node.state.set(NodeState::Done);
        .                           }
        .                           Some(rpos) => {
        .                               // Cycle detected.
      183 ( 0.00%)                      processor.process_backedge(
        .                                   stack[rpos..].iter().map(|&i| &self.nodes[i].obligation),
        .                                   PhantomData,
        .                               );
        .                           }
        .                       }
        .                   }
  534,136 ( 0.01%)      }
        .           
        .               /// Compresses the vector, removing all popped nodes. This adjusts the
        .               /// indices and hence invalidates any outstanding indices. `process_cycles`
        .               /// must be run beforehand to remove any cycles on `Success` nodes.
        .               #[inline(never)]
  313,214 ( 0.01%)      fn compress(&mut self, mut outcome_cb: impl FnMut(&O)) {
   42,945 ( 0.00%)          let orig_nodes_len = self.nodes.len();
        .                   let mut node_rewrites: Vec<_> = std::mem::take(&mut self.reused_node_vec);
        .                   debug_assert!(node_rewrites.is_empty());
        .                   node_rewrites.extend(0..orig_nodes_len);
        .                   let mut dead_nodes = 0;
        .           
        .                   // Move removable nodes to the end, preserving the order of the
        .                   // remaining nodes.
        .                   //
        .                   // LOOP INVARIANT:
        .                   //     self.nodes[0..index - dead_nodes] are the first remaining nodes
        .                   //     self.nodes[index - dead_nodes..index] are all dead
        .                   //     self.nodes[index..] are unchanged
        .                   for index in 0..orig_nodes_len {
        .                       let node = &self.nodes[index];
  738,401 ( 0.02%)              match node.state.get() {
        .                           NodeState::Pending | NodeState::Waiting => {
  177,804 ( 0.00%)                      if dead_nodes > 0 {
   55,464 ( 0.00%)                          self.nodes.swap(index, index - dead_nodes);
   92,440 ( 0.00%)                          node_rewrites[index] -= dead_nodes;
        .                               }
        .                           }
        .                           NodeState::Done => {
        .                               // This lookup can fail because the contents of
        .                               // `self.active_cache` are not guaranteed to match those of
        .                               // `self.nodes`. See the comment in `process_obligation`
        .                               // for more details.
  180,726 ( 0.00%)                      if let Some((predicate, _)) =
  146,073 ( 0.00%)                          self.active_cache.remove_entry(&node.obligation.as_cache_key())
        .                               {
        .                                   self.done_cache.insert(predicate);
        .                               } else {
        .                                   self.done_cache.insert(node.obligation.as_cache_key().clone());
        .                               }
        .                               // Extract the success stories.
        .                               outcome_cb(&node.obligation);
   97,382 ( 0.00%)                      node_rewrites[index] = orig_nodes_len;
   97,382 ( 0.00%)                      dead_nodes += 1;
        .                           }
        .                           NodeState::Error => {
        .                               // We *intentionally* remove the node from the cache at this point. Otherwise
        .                               // tests must come up with a different type on every type error they
        .                               // check against.
       24 ( 0.00%)                      self.active_cache.remove(&node.obligation.as_cache_key());
       16 ( 0.00%)                      self.insert_into_error_cache(index);
       16 ( 0.00%)                      node_rewrites[index] = orig_nodes_len;
       16 ( 0.00%)                      dead_nodes += 1;
        .                           }
        .                           NodeState::Success => unreachable!(),
        .                       }
        .                   }
        .           
        .                   if dead_nodes > 0 {
        .                       // Remove the dead nodes and rewrite indices.
   22,854 ( 0.00%)              self.nodes.truncate(orig_nodes_len - dead_nodes);
   11,427 ( 0.00%)              self.apply_rewrites(&node_rewrites);
        .                   }
        .           
        .                   node_rewrites.truncate(0);
  171,780 ( 0.00%)          self.reused_node_vec = node_rewrites;
  343,560 ( 0.01%)      }
        .           
        .               #[inline(never)]
  102,843 ( 0.00%)      fn apply_rewrites(&mut self, node_rewrites: &[usize]) {
        .                   let orig_nodes_len = node_rewrites.len();
        .           
        .                   for node in &mut self.nodes {
        .                       let mut i = 0;
   83,495 ( 0.00%)              while let Some(dependent) = node.dependents.get_mut(i) {
   68,392 ( 0.00%)                  let new_index = node_rewrites[*dependent];
   34,196 ( 0.00%)                  if new_index >= orig_nodes_len {
        .                               node.dependents.swap_remove(i);
        .                               if i == 0 && node.has_parent {
        .                                   // We just removed the parent.
        .                                   node.has_parent = false;
        .                               }
        .                           } else {
   17,098 ( 0.00%)                      *dependent = new_index;
   34,196 ( 0.00%)                      i += 1;
        .                           }
        .                       }
        .                   }
        .           
        .                   // This updating of `self.active_cache` is necessary because the
        .                   // removal of nodes within `compress` can fail. See above.
        .                   self.active_cache.retain(|_predicate, index| {
  321,740 ( 0.01%)              let new_index = node_rewrites[*index];
  160,870 ( 0.00%)              if new_index >= orig_nodes_len {
        .                           false
        .                       } else {
   66,397 ( 0.00%)                  *index = new_index;
        .                           true
        .                       }
        .                   });
   91,416 ( 0.00%)      }
        .           }

1,669,424 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/obligation_forest/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 118 ----------------------------------------
        .               /// let a = [1, 2, 3];
        .               /// assert_eq!(a.len(), 3);
        .               /// ```
        .               #[lang = "slice_len_fn"]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_stable(feature = "const_slice_len", since = "1.39.0")]
        .               #[inline]
        .               // SAFETY: const sound because we transmute out the length field as a usize (which it must be)
  164,946 ( 0.00%)      pub const fn len(&self) -> usize {
        .                   // FIXME: Replace with `crate::ptr::metadata(self)` when that is const-stable.
        .                   // As of this writing this causes a "Const-stable functions can only call other
        .                   // const-stable functions" error.
        .           
        .                   // SAFETY: Accessing the value from the `PtrRepr` union is safe since *const T
        .                   // and PtrComponents<T> have the same memory layouts. Only std can make this
        .                   // guarantee.
  164,946 ( 0.00%)          unsafe { crate::ptr::PtrRepr { const_ptr: self }.components.metadata }
  109,964 ( 0.00%)      }
        .           
        .               /// Returns `true` if the slice has a length of 0.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let a = [1, 2, 3];
        .               /// assert!(!a.is_empty());
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_stable(feature = "const_slice_is_empty", since = "1.39.0")]
        .               #[inline]
      132 ( 0.00%)      pub const fn is_empty(&self) -> bool {
1,126,919 ( 0.02%)          self.len() == 0
      176 ( 0.00%)      }
        .           
        .               /// Returns the first element of the slice, or `None` if it is empty.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let v = [10, 40, 30];
        .               /// assert_eq!(Some(&10), v.first());
-- line 158 ----------------------------------------
-- line 159 ----------------------------------------
        .               ///
        .               /// let w: &[i32] = &[];
        .               /// assert_eq!(None, w.first());
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
        .               #[inline]
        .               pub const fn first(&self) -> Option<&T> {
   17,370 ( 0.00%)          if let [first, ..] = self { Some(first) } else { None }
        .               }
        .           
        .               /// Returns a mutable pointer to the first element of the slice, or `None` if it is empty.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let x = &mut [0, 1, 2];
-- line 175 ----------------------------------------
-- line 178 ----------------------------------------
        .               ///     *first = 5;
        .               /// }
        .               /// assert_eq!(x, &[5, 1, 2]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_slice_first_last", issue = "83570")]
        .               #[inline]
        .               pub const fn first_mut(&mut self) -> Option<&mut T> {
    4,192 ( 0.00%)          if let [first, ..] = self { Some(first) } else { None }
        .               }
        .           
        .               /// Returns the first and all the rest of the elements of the slice, or `None` if it is empty.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let x = &[0, 1, 2];
-- line 194 ----------------------------------------
-- line 237 ----------------------------------------
        .               ///     assert_eq!(last, &2);
        .               ///     assert_eq!(elements, &[0, 1]);
        .               /// }
        .               /// ```
        .               #[stable(feature = "slice_splits", since = "1.5.0")]
        .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
        .               #[inline]
        .               pub const fn split_last(&self) -> Option<(&T, &[T])> {
   47,589 ( 0.00%)          if let [init @ .., last] = self { Some((last, init)) } else { None }
        .               }
        .           
        .               /// Returns the last and all the rest of the elements of the slice, or `None` if it is empty.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let x = &mut [0, 1, 2];
-- line 253 ----------------------------------------
-- line 276 ----------------------------------------
        .               ///
        .               /// let w: &[i32] = &[];
        .               /// assert_eq!(None, w.last());
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
        .               #[inline]
        .               pub const fn last(&self) -> Option<&T> {
  629,498 ( 0.01%)          if let [.., last] = self { Some(last) } else { None }
        .               }
        .           
        .               /// Returns a mutable pointer to the last item in the slice.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let x = &mut [0, 1, 2];
-- line 292 ----------------------------------------
-- line 294 ----------------------------------------
        .               /// if let Some(last) = x.last_mut() {
        .               ///     *last = 10;
        .               /// }
        .               /// assert_eq!(x, &[0, 1, 10]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_slice_first_last", issue = "83570")]
        .               #[inline]
       30 ( 0.00%)      pub const fn last_mut(&mut self) -> Option<&mut T> {
1,212,292 ( 0.03%)          if let [.., last] = self { Some(last) } else { None }
       18 ( 0.00%)      }
        .           
        .               /// Returns a reference to an element or subslice depending on the type of
        .               /// index.
        .               ///
        .               /// - If given a position, returns a reference to the element at that
        .               ///   position or `None` if out of bounds.
        .               /// - If given a range, returns the subslice corresponding to that range,
        .               ///   or `None` if out of bounds.
-- line 312 ----------------------------------------
-- line 317 ----------------------------------------
        .               /// let v = [10, 40, 30];
        .               /// assert_eq!(Some(&40), v.get(1));
        .               /// assert_eq!(Some(&[10, 40][..]), v.get(0..2));
        .               /// assert_eq!(None, v.get(3));
        .               /// assert_eq!(None, v.get(0..4));
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
  136,425 ( 0.00%)      pub fn get<I>(&self, index: I) -> Option<&I::Output>
        .               where
        .                   I: SliceIndex<Self>,
        .               {
   37,015 ( 0.00%)          index.get(self)
   25,380 ( 0.00%)      }
        .           
        .               /// Returns a mutable reference to an element or subslice depending on the
        .               /// type of index (see [`get`]) or `None` if the index is out of bounds.
        .               ///
        .               /// [`get`]: slice::get
        .               ///
        .               /// # Examples
        .               ///
-- line 338 ----------------------------------------
-- line 372 ----------------------------------------
        .               /// let x = &[1, 2, 4];
        .               ///
        .               /// unsafe {
        .               ///     assert_eq!(x.get_unchecked(1), &2);
        .               /// }
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
  279,248 ( 0.01%)      pub unsafe fn get_unchecked<I>(&self, index: I) -> &I::Output
        .               where
        .                   I: SliceIndex<Self>,
        .               {
        .                   // SAFETY: the caller must uphold most of the safety requirements for `get_unchecked`;
        .                   // the slice is dereferenceable because `self` is a safe reference.
        .                   // The returned pointer is safe because impls of `SliceIndex` have to guarantee that it is.
   82,666 ( 0.00%)          unsafe { &*index.get_unchecked(self) }
   69,812 ( 0.00%)      }
        .           
        .               /// Returns a mutable reference to an element or subslice, without doing
        .               /// bounds checking.
        .               ///
        .               /// For a safe alternative see [`get_mut`].
        .               ///
        .               /// # Safety
        .               ///
-- line 396 ----------------------------------------
-- line 408 ----------------------------------------
        .               /// unsafe {
        .               ///     let elem = x.get_unchecked_mut(1);
        .               ///     *elem = 13;
        .               /// }
        .               /// assert_eq!(x, &[1, 13, 4]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
  186,112 ( 0.00%)      pub unsafe fn get_unchecked_mut<I>(&mut self, index: I) -> &mut I::Output
        .               where
        .                   I: SliceIndex<Self>,
        .               {
        .                   // SAFETY: the caller must uphold the safety requirements for `get_unchecked_mut`;
        .                   // the slice is dereferenceable because `self` is a safe reference.
        .                   // The returned pointer is safe because impls of `SliceIndex` have to guarantee that it is.
   56,777 ( 0.00%)          unsafe { &mut *index.get_unchecked_mut(self) }
   46,528 ( 0.00%)      }
        .           
        .               /// Returns a raw pointer to the slice's buffer.
        .               ///
        .               /// The caller must ensure that the slice outlives the pointer this
        .               /// function returns, or else it will end up pointing to garbage.
        .               ///
        .               /// The caller must also ensure that the memory the pointer (non-transitively) points to
        .               /// is never written to (except inside an `UnsafeCell`) using this pointer or any pointer
-- line 432 ----------------------------------------
-- line 447 ----------------------------------------
        .               ///     }
        .               /// }
        .               /// ```
        .               ///
        .               /// [`as_mut_ptr`]: slice::as_mut_ptr
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_stable(feature = "const_slice_as_ptr", since = "1.32.0")]
        .               #[inline]
1,826,492 ( 0.04%)      pub const fn as_ptr(&self) -> *const T {
1,187,715 ( 0.02%)          self as *const [T] as *const T
  913,246 ( 0.02%)      }
        .           
        .               /// Returns an unsafe mutable pointer to the slice's buffer.
        .               ///
        .               /// The caller must ensure that the slice outlives the pointer this
        .               /// function returns, or else it will end up pointing to garbage.
        .               ///
        .               /// Modifying the container referenced by this slice may cause its buffer
        .               /// to be reallocated, which would also make any pointers to it invalid.
-- line 465 ----------------------------------------
-- line 475 ----------------------------------------
        .               ///         *x_ptr.add(i) += 2;
        .               ///     }
        .               /// }
        .               /// assert_eq!(x, &[3, 4, 6]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_ptr_offset", issue = "71499")]
        .               #[inline]
  139,684 ( 0.00%)      pub const fn as_mut_ptr(&mut self) -> *mut T {
        6 ( 0.00%)          self as *mut [T] as *mut T
   69,842 ( 0.00%)      }
        .           
        .               /// Returns the two raw pointers spanning the slice.
        .               ///
        .               /// The returned range is half-open, which means that the end pointer
        .               /// points *one past* the last element of the slice. This way, an empty
        .               /// slice is represented by two equal pointers, and the difference between
        .               /// the two pointers represents the size of the slice.
        .               ///
-- line 493 ----------------------------------------
-- line 556 ----------------------------------------
        .               /// [`as_mut_ptr`]: slice::as_mut_ptr
        .               #[stable(feature = "slice_ptr_range", since = "1.48.0")]
        .               #[rustc_const_unstable(feature = "const_ptr_offset", issue = "71499")]
        .               #[inline]
        .               pub const fn as_mut_ptr_range(&mut self) -> Range<*mut T> {
        .                   let start = self.as_mut_ptr();
        .                   // SAFETY: See as_ptr_range() above for why `add` here is safe.
        .                   let end = unsafe { start.add(self.len()) };
        1 ( 0.00%)          start..end
        .               }
        .           
        .               /// Swaps two elements in the slice.
        .               ///
        .               /// # Arguments
        .               ///
        .               /// * a - The index of the first element
        .               /// * b - The index of the second element
-- line 572 ----------------------------------------
-- line 582 ----------------------------------------
        .               /// v.swap(2, 4);
        .               /// assert!(v == ["a", "b", "e", "d", "c"]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_swap", issue = "83163")]
        .               #[inline]
        .               #[track_caller]
        .               pub const fn swap(&mut self, a: usize, b: usize) {
   22,918 ( 0.00%)          let _ = &self[a];
   66,003 ( 0.00%)          let _ = &self[b];
        .           
        .                   // SAFETY: we just checked that both `a` and `b` are in bounds
        .                   unsafe { self.swap_unchecked(a, b) }
        .               }
        .           
        .               /// Swaps two elements in the slice, without doing bounds checking.
        .               ///
        .               /// For a safe alternative see [`swap`].
-- line 599 ----------------------------------------
-- line 644 ----------------------------------------
        .               /// ```
        .               /// let mut v = [1, 2, 3];
        .               /// v.reverse();
        .               /// assert!(v == [3, 2, 1]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
        .               pub fn reverse(&mut self) {
        2 ( 0.00%)          let half_len = self.len() / 2;
        .                   let Range { start, end } = self.as_mut_ptr_range();
        .           
        .                   // These slices will skip the middle item for an odd length,
        .                   // since that one doesn't need to move.
        .                   let (front_half, back_half) =
        .                       // SAFETY: Both are subparts of the original slice, so the memory
        .                       // range is valid, and they don't overlap because they're each only
        .                       // half (or less) of the original slice.
-- line 660 ----------------------------------------
-- line 677 ----------------------------------------
        .           
        .                       // Because this function is first compiled in isolation,
        .                       // this check tells LLVM that the indexing below is
        .                       // in-bounds.  Then after inlining -- once the actual
        .                       // lengths of the slices are known -- it's removed.
        .                       let (a, b) = (&mut a[..n], &mut b[..n]);
        .           
        .                       for i in 0..n {
    4,804 ( 0.00%)                  mem::swap(&mut a[i], &mut b[n - 1 - i]);
        .                       }
        .                   }
        .               }
        .           
        .               /// Returns an iterator over the slice.
        .               ///
        .               /// # Examples
        .               ///
-- line 693 ----------------------------------------
-- line 697 ----------------------------------------
        .               ///
        .               /// assert_eq!(iterator.next(), Some(&1));
        .               /// assert_eq!(iterator.next(), Some(&2));
        .               /// assert_eq!(iterator.next(), Some(&4));
        .               /// assert_eq!(iterator.next(), None);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
1,015,713 ( 0.02%)      pub fn iter(&self) -> Iter<'_, T> {
1,015,713 ( 0.02%)          Iter::new(self)
  677,142 ( 0.01%)      }
        .           
        .               /// Returns an iterator that allows modifying each value.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let x = &mut [1, 2, 4];
        .               /// for elem in x.iter_mut() {
        .               ///     *elem += 2;
        .               /// }
        .               /// assert_eq!(x, &[3, 4, 6]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
    4,944 ( 0.00%)      pub fn iter_mut(&mut self) -> IterMut<'_, T> {
    4,944 ( 0.00%)          IterMut::new(self)
    3,296 ( 0.00%)      }
        .           
        .               /// Returns an iterator over all contiguous windows of length
        .               /// `size`. The windows overlap. If the slice is shorter than
        .               /// `size`, the iterator returns no values.
        .               ///
        .               /// # Panics
        .               ///
        .               /// Panics if `size` is 0.
-- line 732 ----------------------------------------
-- line 1499 ----------------------------------------
        .               ///     assert_eq!(left, [1, 2, 3, 4, 5, 6]);
        .               ///     assert_eq!(right, []);
        .               /// }
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
        .               #[track_caller]
        .               pub fn split_at(&self, mid: usize) -> (&[T], &[T]) {
       18 ( 0.00%)          assert!(mid <= self.len());
        .                   // SAFETY: `[ptr; mid]` and `[mid; len]` are inside `self`, which
        .                   // fulfills the requirements of `from_raw_parts_mut`.
        .                   unsafe { self.split_at_unchecked(mid) }
        .               }
        .           
        .               /// Divides one mutable slice into two at an index.
        .               ///
        .               /// The first will contain all indices from `[0, mid)` (excluding
-- line 1515 ----------------------------------------
-- line 1529 ----------------------------------------
        .               /// assert_eq!(right, [3, 0, 5, 6]);
        .               /// left[1] = 2;
        .               /// right[1] = 4;
        .               /// assert_eq!(v, [1, 2, 3, 4, 5, 6]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
        .               #[track_caller]
  123,060 ( 0.00%)      pub fn split_at_mut(&mut self, mid: usize) -> (&mut [T], &mut [T]) {
  177,204 ( 0.00%)          assert!(mid <= self.len());
        .                   // SAFETY: `[ptr; mid]` and `[mid; len]` are inside `self`, which
        .                   // fulfills the requirements of `from_raw_parts_mut`.
   24,612 ( 0.00%)          unsafe { self.split_at_mut_unchecked(mid) }
   24,612 ( 0.00%)      }
        .           
        .               /// Divides one slice into two at an index, without doing bounds checking.
        .               ///
        .               /// The first will contain all indices from `[0, mid)` (excluding
        .               /// the index `mid` itself) and the second will contain all
        .               /// indices from `[mid, len)` (excluding the index `len` itself).
        .               ///
        .               /// For a safe alternative see [`split_at`].
-- line 1550 ----------------------------------------
-- line 1620 ----------------------------------------
        .               ///     assert_eq!(right, [3, 0, 5, 6]);
        .               ///     left[1] = 2;
        .               ///     right[1] = 4;
        .               /// }
        .               /// assert_eq!(v, [1, 2, 3, 4, 5, 6]);
        .               /// ```
        .               #[unstable(feature = "slice_split_at_unchecked", reason = "new API", issue = "76014")]
        .               #[inline]
  159,978 ( 0.00%)      pub unsafe fn split_at_mut_unchecked(&mut self, mid: usize) -> (&mut [T], &mut [T]) {
   12,306 ( 0.00%)          let len = self.len();
   36,918 ( 0.00%)          let ptr = self.as_mut_ptr();
        .           
        .                   // SAFETY: Caller has to check that `0 <= mid <= self.len()`.
        .                   //
        .                   // `[ptr; mid]` and `[mid; len]` are not overlapping, so returning a mutable reference
        .                   // is fine.
  207,757 ( 0.00%)          unsafe { (from_raw_parts_mut(ptr, mid), from_raw_parts_mut(ptr.add(mid), len - mid)) }
   24,612 ( 0.00%)      }
        .           
        .               /// Divides one slice into an array and a remainder slice at an index.
        .               ///
        .               /// The array will contain all indices from `[0, N)` (excluding
        .               /// the index `N` itself) and the slice will contain all
        .               /// indices from `[N, len)` (excluding the index `len` itself).
        .               ///
        .               /// # Panics
-- line 1645 ----------------------------------------
-- line 2113 ----------------------------------------
        .               /// assert!(!v.iter().any(|e| e == "hi"));
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
        .               pub fn contains(&self, x: &T) -> bool
        .               where
        .                   T: PartialEq,
        .               {
    3,216 ( 0.00%)          cmp::SliceContains::slice_contains(x, self)
        .               }
        .           
        .               /// Returns `true` if `needle` is a prefix of the slice.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let v = [10, 40, 30];
-- line 2129 ----------------------------------------
-- line 2137 ----------------------------------------
        .               ///
        .               /// ```
        .               /// let v = &[10, 40, 30];
        .               /// assert!(v.starts_with(&[]));
        .               /// let v: &[u8] = &[];
        .               /// assert!(v.starts_with(&[]));
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
  148,218 ( 0.00%)      pub fn starts_with(&self, needle: &[T]) -> bool
        .               where
        .                   T: PartialEq,
        .               {
   63,522 ( 0.00%)          let n = needle.len();
  412,582 ( 0.01%)          self.len() >= n && needle == &self[..n]
  105,870 ( 0.00%)      }
        .           
        .               /// Returns `true` if `needle` is a suffix of the slice.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let v = [10, 40, 30];
        .               /// assert!(v.ends_with(&[30]));
-- line 2159 ----------------------------------------
-- line 2166 ----------------------------------------
        .               ///
        .               /// ```
        .               /// let v = &[10, 40, 30];
        .               /// assert!(v.ends_with(&[]));
        .               /// let v: &[u8] = &[];
        .               /// assert!(v.ends_with(&[]));
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
       49 ( 0.00%)      pub fn ends_with(&self, needle: &[T]) -> bool
        .               where
        .                   T: PartialEq,
        .               {
       63 ( 0.00%)          let (m, n) = (self.len(), needle.len());
   11,392 ( 0.00%)          m >= n && needle == &self[m - n..]
       35 ( 0.00%)      }
        .           
        .               /// Returns a subslice with the prefix removed.
        .               ///
        .               /// If the slice starts with `prefix`, returns the subslice after the prefix, wrapped in `Some`.
        .               /// If `prefix` is empty, simply returns the original slice.
        .               ///
        .               /// If the slice does not start with `prefix`, returns `None`.
        .               ///
-- line 2188 ----------------------------------------
-- line 2293 ----------------------------------------
        .               /// s.insert(idx, num);
        .               /// assert_eq!(s, [0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 42, 55]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn binary_search(&self, x: &T) -> Result<usize, usize>
        .               where
        .                   T: Ord,
        .               {
        3 ( 0.00%)          self.binary_search_by(|p| p.cmp(x))
        .               }
        .           
        .               /// Binary searches this sorted slice with a comparator function.
        .               ///
        .               /// The comparator function should implement an order consistent
        .               /// with the sort order of the underlying slice, returning an
        .               /// order code that indicates whether its argument is `Less`,
        .               /// `Equal` or `Greater` the desired target.
-- line 2309 ----------------------------------------
-- line 2345 ----------------------------------------
        .               #[inline]
        .               pub fn binary_search_by<'a, F>(&'a self, mut f: F) -> Result<usize, usize>
        .               where
        .                   F: FnMut(&'a T) -> Ordering,
        .               {
        .                   let mut size = self.len();
        .                   let mut left = 0;
        .                   let mut right = size;
5,135,586 ( 0.11%)          while left < right {
6,574,238 ( 0.14%)              let mid = left + size / 2;
        .           
        .                       // SAFETY: the call is made safe by the following invariants:
        .                       // - `mid >= 0`
        .                       // - `mid < size`: `mid` is limited by `[left; right)` bound.
1,150,894 ( 0.02%)              let cmp = f(unsafe { self.get_unchecked(mid) });
        .           
        .                       // The reason why we use if/else control flow rather than match
        .                       // is because match reorders comparison operations, which is perf sensitive.
        .                       // This is x86 asm for u8: https://rust.godbolt.org/z/8Y8Pra.
1,990,999 ( 0.04%)              if cmp == Less {
1,728,728 ( 0.04%)                  left = mid + 1;
1,357,884 ( 0.03%)              } else if cmp == Greater {
        .                           right = mid;
        .                       } else {
        .                           // SAFETY: same as the `get_unchecked` above
        .                           unsafe { crate::intrinsics::assume(mid < self.len()) };
        .                           return Ok(mid);
        .                       }
        .           
5,126,939 ( 0.11%)              size = right - left;
        .                   }
        .                   Err(left)
        .               }
        .           
        .               /// Binary searches this sorted slice with a key extraction function.
        .               ///
        .               /// Assumes that the slice is sorted by the key, for instance with
        .               /// [`sort_by_key`] using the same key extraction function.
-- line 2382 ----------------------------------------
-- line 3187 ----------------------------------------
        .               /// assert_eq!(slice, [4, 5, 3, 4, 5]);
        .               /// ```
        .               ///
        .               /// [`clone_from_slice`]: slice::clone_from_slice
        .               /// [`split_at_mut`]: slice::split_at_mut
        .               #[doc(alias = "memcpy")]
        .               #[stable(feature = "copy_from_slice", since = "1.9.0")]
        .               #[track_caller]
  123,090 ( 0.00%)      pub fn copy_from_slice(&mut self, src: &[T])
        .               where
        .                   T: Copy,
        .               {
        .                   // The panic code path was put into a cold function to not bloat the
        .                   // call site.
        .                   #[inline(never)]
        .                   #[cold]
        .                   #[track_caller]
        .                   fn len_mismatch_fail(dst_len: usize, src_len: usize) -> ! {
        .                       panic!(
        .                           "source slice length ({}) does not match destination slice length ({})",
        .                           src_len, dst_len,
        .                       );
        .                   }
        .           
  187,274 ( 0.00%)          if self.len() != src.len() {
        .                       len_mismatch_fail(self.len(), src.len());
        .                   }
        .           
        .                   // SAFETY: `self` is valid for `self.len()` elements by definition, and `src` was
        .                   // checked to have the same length. The slices cannot overlap because
        .                   // mutable references are exclusive.
        .                   unsafe {
   73,854 ( 0.00%)              ptr::copy_nonoverlapping(src.as_ptr(), self.as_mut_ptr(), self.len());
        .                   }
   24,618 ( 0.00%)      }
        .           
        .               /// Copies elements from one part of the slice to another part of itself,
        .               /// using a memmove.
        .               ///
        .               /// `src` is the range within `self` to copy from. `dest` is the starting
        .               /// index of the range within `self` to copy to, which will have the same
        .               /// length as `src`. The two ranges may overlap. The ends of the two ranges
        .               /// must be less than or equal to `self.len()`.
-- line 3229 ----------------------------------------
-- line 3380 ----------------------------------------
        .                       }
        .                       a << k
        .                   }
        .                   let gcd: usize = gcd(mem::size_of::<T>(), mem::size_of::<U>());
        .                   let ts: usize = mem::size_of::<U>() / gcd;
        .                   let us: usize = mem::size_of::<T>() / gcd;
        .           
        .                   // Armed with this knowledge, we can find how many `U`s we can fit!
        4 ( 0.00%)          let us_len = self.len() / ts * us;
        .                   // And how many `T`s will be in the trailing slice!
   26,154 ( 0.00%)          let ts_len = self.len() % ts;
        .                   (us_len, ts_len)
        .               }
        .           
        .               /// Transmute the slice to a slice of another type, ensuring alignment of the types is
        .               /// maintained.
        .               ///
        .               /// This method splits the slice into three distinct slices: prefix, correctly aligned middle
        .               /// slice of a new type, and the suffix slice. The method may make the middle slice the greatest
-- line 3398 ----------------------------------------
-- line 3429 ----------------------------------------
        .                       return (self, &[], &[]);
        .                   }
        .           
        .                   // First, find at what point do we split between the first and 2nd slice. Easy with
        .                   // ptr.align_offset.
        .                   let ptr = self.as_ptr();
        .                   // SAFETY: See the `align_to_mut` method for the detailed safety comment.
        .                   let offset = unsafe { crate::ptr::align_offset(ptr, mem::align_of::<U>()) };
   26,154 ( 0.00%)          if offset > self.len() {
        .                       (self, &[], &[])
        .                   } else {
        .                       let (left, rest) = self.split_at(offset);
        .                       let (us_len, ts_len) = rest.align_to_offsets::<U>();
        .                       // SAFETY: now `rest` is definitely aligned, so `from_raw_parts` below is okay,
        .                       // since the caller guarantees that we can transmute `T` to `U` safely.
        .                       unsafe {
        .                           (
        .                               left,
        .                               from_raw_parts(rest.as_ptr() as *const U, us_len),
   26,158 ( 0.00%)                      from_raw_parts(rest.as_ptr().add(rest.len() - ts_len), ts_len),
        .                           )
        .                       }
        .                   }
        .               }
        .           
        .               /// Transmute the slice to a slice of another type, ensuring alignment of the types is
        .               /// maintained.
        .               ///
-- line 3456 ----------------------------------------
-- line 3731 ----------------------------------------
        .               /// let v = [1, 2, 3, 3, 5, 6, 7];
        .               /// let i = v.partition_point(|&x| x < 5);
        .               ///
        .               /// assert_eq!(i, 4);
        .               /// assert!(v[..i].iter().all(|&x| x < 5));
        .               /// assert!(v[i..].iter().all(|&x| !(x < 5)));
        .               /// ```
        .               #[stable(feature = "partition_point", since = "1.52.0")]
        8 ( 0.00%)      pub fn partition_point<P>(&self, mut pred: P) -> usize
        .               where
        .                   P: FnMut(&T) -> bool,
        .               {
        .                   self.binary_search_by(|x| if pred(x) { Less } else { Greater }).unwrap_or_else(|i| i)
       16 ( 0.00%)      }
        .           
        .               /// Removes the subslice corresponding to the given range
        .               /// and returns a reference to it.
        .               ///
        .               /// Returns `None` and does not modify the slice if the given
        .               /// range is out of bounds.
        .               ///
        .               /// Note that this method only accepts one-sided ranges such as
-- line 3752 ----------------------------------------

5,626,600 ( 0.12%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter.rs
--------------------------------------------------------------------------------
Ir                 

-- line 15 ----------------------------------------
        .           
        .           use super::{from_raw_parts, from_raw_parts_mut};
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<'a, T> IntoIterator for &'a [T] {
        .               type Item = &'a T;
        .               type IntoIter = Iter<'a, T>;
        .           
      210 ( 0.00%)      fn into_iter(self) -> Iter<'a, T> {
      210 ( 0.00%)          self.iter()
      140 ( 0.00%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<'a, T> IntoIterator for &'a mut [T] {
        .               type Item = &'a mut T;
        .               type IntoIter = IterMut<'a, T>;
        .           
      636 ( 0.00%)      fn into_iter(self) -> IterMut<'a, T> {
      636 ( 0.00%)          self.iter_mut()
      424 ( 0.00%)      }
        .           }
        .           
        .           // Macro helper functions
        .           #[inline(always)]
        .           fn size_from_ptr<T>(_: *const T) -> usize {
        .               mem::size_of::<T>()
    6,721 ( 0.00%)  }
        .           
        .           /// Immutable slice iterator
        .           ///
        .           /// This struct is created by the [`iter`] method on [slices].
        .           ///
        .           /// # Examples
        .           ///
        .           /// Basic usage:
-- line 50 ----------------------------------------
-- line 79 ----------------------------------------
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           unsafe impl<T: Sync> Sync for Iter<'_, T> {}
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           unsafe impl<T: Sync> Send for Iter<'_, T> {}
        .           
        .           impl<'a, T> Iter<'a, T> {
        .               #[inline]
1,354,284 ( 0.03%)      pub(super) fn new(slice: &'a [T]) -> Self {
1,015,713 ( 0.02%)          let ptr = slice.as_ptr();
        .                   // SAFETY: Similar to `IterMut::new`.
        .                   unsafe {
  338,571 ( 0.01%)              assume(!ptr.is_null());
        .           
1,692,855 ( 0.04%)              let end = if mem::size_of::<T>() == 0 {
        .                           (ptr as *const u8).wrapping_add(slice.len()) as *const T
        .                       } else {
  338,571 ( 0.01%)                  ptr.add(slice.len())
        .                       };
        .           
2,445,625 ( 0.05%)              Self { ptr: NonNull::new_unchecked(ptr as *mut T), end, _marker: PhantomData }
        .                   }
1,354,284 ( 0.03%)      }
        .           
        .               /// Views the underlying data as a subslice of the original data.
        .               ///
        .               /// This has the same lifetime as the original slice, and so the
        .               /// iterator can continue to be used while this exists.
        .               ///
        .               /// # Examples
        .               ///
-- line 109 ----------------------------------------
-- line 121 ----------------------------------------
        .               ///
        .               /// // Next, we move to the second element of the slice:
        .               /// iter.next();
        .               /// // Now `as_slice` returns "[2, 3]":
        .               /// println!("{:?}", iter.as_slice());
        .               /// ```
        .               #[must_use]
        .               #[stable(feature = "iter_to_slice", since = "1.4.0")]
    9,604 ( 0.00%)      pub fn as_slice(&self) -> &'a [T] {
  492,835 ( 0.01%)          self.make_slice()
    4,802 ( 0.00%)      }
        .           }
        .           
        .           iterator! {struct Iter -> *const T, &'a T, const, {/* no mut */}, {
        .               fn is_sorted_by<F>(self, mut compare: F) -> bool
        .               where
        .                   Self: Sized,
        .                   F: FnMut(&Self::Item, &Self::Item) -> Option<Ordering>,
        .               {
-- line 139 ----------------------------------------
-- line 141 ----------------------------------------
        .                       compare(&&w[0], &&w[1]).map(|o| o != Ordering::Greater).unwrap_or(false)
        .                   })
        .               }
        .           }}
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T> Clone for Iter<'_, T> {
        .               fn clone(&self) -> Self {
   43,933 ( 0.00%)          Iter { ptr: self.ptr, end: self.end, _marker: self._marker }
        .               }
        .           }
        .           
        .           #[stable(feature = "slice_iter_as_ref", since = "1.13.0")]
        .           impl<T> AsRef<[T]> for Iter<'_, T> {
        .               fn as_ref(&self) -> &[T] {
        .                   self.as_slice()
        .               }
-- line 157 ----------------------------------------
-- line 199 ----------------------------------------
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           unsafe impl<T: Sync> Sync for IterMut<'_, T> {}
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           unsafe impl<T: Send> Send for IterMut<'_, T> {}
        .           
        .           impl<'a, T> IterMut<'a, T> {
        .               #[inline]
    6,592 ( 0.00%)      pub(super) fn new(slice: &'a mut [T]) -> Self {
    4,944 ( 0.00%)          let ptr = slice.as_mut_ptr();
        .                   // SAFETY: There are several things here:
        .                   //
        .                   // `ptr` has been obtained by `slice.as_ptr()` where `slice` is a valid
        .                   // reference thus it is non-NUL and safe to use and pass to
        .                   // `NonNull::new_unchecked` .
        .                   //
        .                   // Adding `slice.len()` to the starting pointer gives a pointer
        .                   // at the end of `slice`. `end` will never be dereferenced, only checked
-- line 216 ----------------------------------------
-- line 218 ----------------------------------------
        .                   // done.
        .                   //
        .                   // In the case of a ZST, the end pointer is just the start pointer plus
        .                   // the length, to also allows for the fast `ptr == end` check.
        .                   //
        .                   // See the `next_unchecked!` and `is_empty!` macros as well as the
        .                   // `post_inc_start` method for more information.
        .                   unsafe {
    1,648 ( 0.00%)              assume(!ptr.is_null());
        .           
    8,240 ( 0.00%)              let end = if mem::size_of::<T>() == 0 {
        .                           (ptr as *mut u8).wrapping_add(slice.len()) as *mut T
        .                       } else {
    1,648 ( 0.00%)                  ptr.add(slice.len())
        .                       };
        .           
   22,971 ( 0.00%)              Self { ptr: NonNull::new_unchecked(ptr), end, _marker: PhantomData }
        .                   }
    6,592 ( 0.00%)      }
        .           
        .               /// Views the underlying data as a subslice of the original data.
        .               ///
        .               /// To avoid creating `&mut` references that alias, this is forced
        .               /// to consume the iterator.
        .               ///
        .               /// # Examples
        .               ///
-- line 244 ----------------------------------------
-- line 1711 ----------------------------------------
        .               v: &'a [T],
        .               rem: &'a [T],
        .               chunk_size: usize,
        .           }
        .           
        .           impl<'a, T> ChunksExact<'a, T> {
        .               #[inline]
        .               pub(super) fn new(slice: &'a [T], chunk_size: usize) -> Self {
       12 ( 0.00%)          let rem = slice.len() % chunk_size;
       18 ( 0.00%)          let fst_len = slice.len() - rem;
        .                   // SAFETY: 0 <= fst_len <= slice.len() by construction above
        .                   let (fst, snd) = unsafe { slice.split_at_unchecked(fst_len) };
        .                   Self { v: fst, rem: snd, chunk_size }
        .               }
        .           
        .               /// Returns the remainder of the original slice that is not going to be
        .               /// returned by the iterator. The returned slice has at most `chunk_size-1`
        .               /// elements.
-- line 1728 ----------------------------------------
-- line 1742 ----------------------------------------
        .           }
        .           
        .           #[stable(feature = "chunks_exact", since = "1.31.0")]
        .           impl<'a, T> Iterator for ChunksExact<'a, T> {
        .               type Item = &'a [T];
        .           
        .               #[inline]
        .               fn next(&mut self) -> Option<&'a [T]> {
    3,272 ( 0.00%)          if self.v.len() < self.chunk_size {
        .                       None
        .                   } else {
        .                       let (fst, snd) = self.v.split_at(self.chunk_size);
        .                       self.v = snd;
        .                       Some(fst)
        .                   }
        .               }
        .           
-- line 1758 ----------------------------------------
-- line 2024 ----------------------------------------
        .               num: usize,
        .               marker: PhantomData<&'a [T; N]>,
        .           }
        .           
        .           impl<'a, T: 'a, const N: usize> ArrayWindows<'a, T, N> {
        .               #[inline]
        .               pub(super) fn new(slice: &'a [T]) -> Self {
        .                   let num_windows = slice.len().saturating_sub(N - 1);
       11 ( 0.00%)          Self { slice_head: slice.as_ptr(), num: num_windows, marker: PhantomData }
        .               }
        .           }
        .           
        .           #[unstable(feature = "array_windows", issue = "75027")]
        .           impl<'a, T, const N: usize> Iterator for ArrayWindows<'a, T, N> {
        .               type Item = &'a [T; N];
        .           
        .               #[inline]
        .               fn next(&mut self) -> Option<Self::Item> {
   24,580 ( 0.00%)          if self.num == 0 {
        .                       return None;
        .                   }
        .                   // SAFETY:
        .                   // This is safe because it's indexing into a slice guaranteed to be length > N.
        .                   let ret = unsafe { &*self.slice_head.cast::<[T; N]>() };
        .                   // SAFETY: Guaranteed that there are at least 1 item remaining otherwise
        .                   // earlier branch would've been hit
        .                   self.slice_head = unsafe { self.slice_head.add(1) };
-- line 2050 ----------------------------------------

3,527,554 ( 0.07%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/hir/map/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 17 ----------------------------------------
        .           use rustc_span::hygiene::MacroKind;
        .           use rustc_span::source_map::Spanned;
        .           use rustc_span::symbol::{kw, sym, Ident, Symbol};
        .           use rustc_span::Span;
        .           use rustc_target::spec::abi::Abi;
        .           use std::collections::VecDeque;
        .           
        .           fn fn_decl<'hir>(node: Node<'hir>) -> Option<&'hir FnDecl<'hir>> {
   11,120 ( 0.00%)      match node {
        .                   Node::Item(Item { kind: ItemKind::Fn(sig, _, _), .. })
        .                   | Node::TraitItem(TraitItem { kind: TraitItemKind::Fn(sig, _), .. })
        .                   | Node::ImplItem(ImplItem { kind: ImplItemKind::Fn(sig, _), .. }) => Some(&sig.decl),
        .                   Node::Expr(Expr { kind: ExprKind::Closure(_, fn_decl, ..), .. })
        .                   | Node::ForeignItem(ForeignItem { kind: ForeignItemKind::Fn(fn_decl, ..), .. }) => {
        .                       Some(fn_decl)
        .                   }
        .                   _ => None,
        .               }
        .           }
        .           
        .           pub fn fn_sig<'hir>(node: Node<'hir>) -> Option<&'hir FnSig<'hir>> {
    3,993 ( 0.00%)      match &node {
        .                   Node::Item(Item { kind: ItemKind::Fn(sig, _, _), .. })
        .                   | Node::TraitItem(TraitItem { kind: TraitItemKind::Fn(sig, _), .. })
        .                   | Node::ImplItem(ImplItem { kind: ImplItemKind::Fn(sig, _), .. }) => Some(sig),
        .                   _ => None,
        .               }
        .           }
        .           
        .           pub fn associated_body<'hir>(node: Node<'hir>) -> Option<BodyId> {
  169,034 ( 0.00%)      match node {
        .                   Node::Item(Item {
        .                       kind: ItemKind::Const(_, body) | ItemKind::Static(.., body) | ItemKind::Fn(.., body),
        .                       ..
        .                   })
        .                   | Node::TraitItem(TraitItem {
        .                       kind:
        .                           TraitItemKind::Const(_, Some(body)) | TraitItemKind::Fn(_, TraitFn::Provided(body)),
        .                       ..
        .                   })
        .                   | Node::ImplItem(ImplItem {
        .                       kind: ImplItemKind::Const(_, body) | ImplItemKind::Fn(_, body),
        .                       ..
        .                   })
   30,257 ( 0.00%)          | Node::Expr(Expr { kind: ExprKind::Closure(.., body, _, _), .. }) => Some(*body),
        .           
   16,992 ( 0.00%)          Node::AnonConst(constant) => Some(constant.body),
        .           
        .                   _ => None,
        .               }
        .           }
        .           
        .           fn is_body_owner<'hir>(node: Node<'hir>, hir_id: HirId) -> bool {
        .               match associated_body(node) {
        .                   Some(b) => b.hir_id == hir_id,
-- line 71 ----------------------------------------
-- line 83 ----------------------------------------
        .           pub struct ParentHirIterator<'hir> {
        .               current_id: HirId,
        .               map: Map<'hir>,
        .           }
        .           
        .           impl<'hir> Iterator for ParentHirIterator<'hir> {
        .               type Item = (HirId, Node<'hir>);
        .           
   21,868 ( 0.00%)      fn next(&mut self) -> Option<Self::Item> {
    3,124 ( 0.00%)          if self.current_id == CRATE_HIR_ID {
        .                       return None;
        .                   }
        .                   loop {
        .                       // There are nodes that do not have entries, so we need to skip them.
        .                       let parent_id = self.map.get_parent_node(self.current_id);
        .           
    9,147 ( 0.00%)              if parent_id == self.current_id {
        .                           self.current_id = CRATE_HIR_ID;
        .                           return None;
        .                       }
        .           
    6,098 ( 0.00%)              self.current_id = parent_id;
   24,392 ( 0.00%)              if let Some(node) = self.map.find(parent_id) {
   12,196 ( 0.00%)                  return Some((parent_id, node));
        .                       }
        .                       // If this `HirId` doesn't have an entry, skip it and look for its `parent_id`.
        .                   }
   28,116 ( 0.00%)      }
        .           }
        .           
        .           /// An iterator that walks up the ancestor tree of a given `HirId`.
        .           /// Constructed using `tcx.hir().parent_owner_iter(hir_id)`.
        .           pub struct ParentOwnerIterator<'hir> {
        .               current_id: HirId,
        .               map: Map<'hir>,
        .           }
        .           
        .           impl<'hir> Iterator for ParentOwnerIterator<'hir> {
        .               type Item = (LocalDefId, OwnerNode<'hir>);
        .           
  141,993 ( 0.00%)      fn next(&mut self) -> Option<Self::Item> {
   47,331 ( 0.00%)          if self.current_id.local_id.index() != 0 {
    7,718 ( 0.00%)              self.current_id.local_id = ItemLocalId::new(0);
   30,872 ( 0.00%)              if let Some(node) = self.map.tcx.hir_owner(self.current_id.owner) {
        .                           return Some((self.current_id.owner, node.node));
        .                       }
        .                   }
    8,059 ( 0.00%)          if self.current_id == CRATE_HIR_ID {
       32 ( 0.00%)              return None;
        .                   }
        .                   loop {
        .                       // There are nodes that do not have entries, so we need to skip them.
        .                       let parent_id = self.map.def_key(self.current_id.owner).parent;
        .           
        .                       let parent_id = parent_id.map_or(CRATE_HIR_ID.owner, |local_def_index| {
        .                           let def_id = LocalDefId { local_def_index };
        .                           self.map.local_def_id_to_hir_id(def_id).owner
        .                       });
   16,086 ( 0.00%)              self.current_id = HirId::make_owner(parent_id);
        .           
        .                       // If this `HirId` doesn't have an entry, skip it and look for its `parent_id`.
   16,086 ( 0.00%)              if let Some(node) = self.map.tcx.hir_owner(self.current_id.owner) {
        .                           return Some((self.current_id.owner, node.node));
        .                       }
        .                   }
  126,216 ( 0.00%)      }
        .           }
        .           
        .           impl<'hir> Map<'hir> {
      210 ( 0.00%)      pub fn krate(&self) -> &'hir Crate<'hir> {
       30 ( 0.00%)          self.tcx.hir_crate(())
      240 ( 0.00%)      }
        .           
        7 ( 0.00%)      pub fn root_module(&self) -> &'hir Mod<'hir> {
        1 ( 0.00%)          match self.tcx.hir_owner(CRATE_DEF_ID).map(|o| o.node) {
        .                       Some(OwnerNode::Crate(item)) => item,
        .                       _ => bug!(),
        .                   }
        8 ( 0.00%)      }
        .           
        .               pub fn items(&self) -> impl Iterator<Item = &'hir Item<'hir>> + 'hir {
        .                   let krate = self.krate();
        .                   krate.owners.iter().filter_map(|owner| match owner.as_ref()?.node() {
        .                       OwnerNode::Item(item) => Some(item),
        .                       _ => None,
        .                   })
        .               }
-- line 169 ----------------------------------------
-- line 184 ----------------------------------------
        .           
        .               #[inline]
        .               pub fn def_path_hash(self, def_id: LocalDefId) -> DefPathHash {
        .                   // Accessing the DefPathHash is ok, it is incr. comp. stable.
        .                   self.tcx.untracked_resolutions.definitions.def_path_hash(def_id)
        .               }
        .           
        .               #[inline]
  265,452 ( 0.01%)      pub fn local_def_id(&self, hir_id: HirId) -> LocalDefId {
   61,707 ( 0.00%)          self.opt_local_def_id(hir_id).unwrap_or_else(|| {
        .                       bug!(
        .                           "local_def_id: no entry for `{:?}`, which has a map of `{:?}`",
        .                           hir_id,
        .                           self.find(hir_id)
        .                       )
        .                   })
  199,089 ( 0.00%)      }
        .           
        .               #[inline]
  164,552 ( 0.00%)      pub fn opt_local_def_id(&self, hir_id: HirId) -> Option<LocalDefId> {
   46,213 ( 0.00%)          if hir_id.local_id == ItemLocalId::new(0) {
        .                       Some(hir_id.owner)
        .                   } else {
   30,010 ( 0.00%)              self.tcx
        .                           .hir_owner_nodes(hir_id.owner)?
        .                           .local_id_to_def_id
        .                           .get(&hir_id.local_id)
        .                           .copied()
        .                   }
  185,121 ( 0.00%)      }
        .           
        .               #[inline]
       89 ( 0.00%)      pub fn local_def_id_to_hir_id(&self, def_id: LocalDefId) -> HirId {
        .                   // FIXME(#85914) is this access safe for incr. comp.?
   13,519 ( 0.00%)          self.tcx.untracked_resolutions.definitions.local_def_id_to_hir_id(def_id)
      178 ( 0.00%)      }
        .           
        7 ( 0.00%)      pub fn iter_local_def_id(&self) -> impl Iterator<Item = LocalDefId> + '_ {
        .                   // Create a dependency to the crate to be sure we reexcute this when the amount of
        .                   // definitions change.
        1 ( 0.00%)          self.tcx.ensure().hir_crate(());
        .                   self.tcx.untracked_resolutions.definitions.iter_local_def_id()
        9 ( 0.00%)      }
        .           
   30,660 ( 0.00%)      pub fn opt_def_kind(&self, local_def_id: LocalDefId) -> Option<DefKind> {
        .                   let hir_id = self.local_def_id_to_hir_id(local_def_id);
   56,940 ( 0.00%)          let def_kind = match self.find(hir_id)? {
    5,784 ( 0.00%)              Node::Item(item) => match item.kind {
        .                           ItemKind::Static(..) => DefKind::Static,
        .                           ItemKind::Const(..) => DefKind::Const,
        .                           ItemKind::Fn(..) => DefKind::Fn,
        .                           ItemKind::Macro(..) => DefKind::Macro(MacroKind::Bang),
        .                           ItemKind::Mod(..) => DefKind::Mod,
        .                           ItemKind::OpaqueTy(..) => DefKind::OpaqueTy,
        .                           ItemKind::TyAlias(..) => DefKind::TyAlias,
        .                           ItemKind::Enum(..) => DefKind::Enum,
-- line 239 ----------------------------------------
-- line 247 ----------------------------------------
        .                           ItemKind::GlobalAsm(..) => DefKind::GlobalAsm,
        .                           ItemKind::Impl { .. } => DefKind::Impl,
        .                       },
        .                       Node::ForeignItem(item) => match item.kind {
        .                           ForeignItemKind::Fn(..) => DefKind::Fn,
        .                           ForeignItemKind::Static(..) => DefKind::Static,
        .                           ForeignItemKind::Type => DefKind::ForeignTy,
        .                       },
      108 ( 0.00%)              Node::TraitItem(item) => match item.kind {
        .                           TraitItemKind::Const(..) => DefKind::AssocConst,
        .                           TraitItemKind::Fn(..) => DefKind::AssocFn,
        .                           TraitItemKind::Type(..) => DefKind::AssocTy,
        .                       },
      862 ( 0.00%)              Node::ImplItem(item) => match item.kind {
        .                           ImplItemKind::Const(..) => DefKind::AssocConst,
        .                           ImplItemKind::Fn(..) => DefKind::AssocFn,
        .                           ImplItemKind::TyAlias(..) => DefKind::AssocTy,
        .                       },
        .                       Node::Variant(_) => DefKind::Variant,
        .                       Node::Ctor(variant_data) => {
        .                           // FIXME(eddyb) is this even possible, if we have a `Node::Ctor`?
      995 ( 0.00%)                  assert_ne!(variant_data.ctor_hir_id(), None);
        .           
    1,389 ( 0.00%)                  let ctor_of = match self.find(self.get_parent_node(hir_id)) {
        .                               Some(Node::Item(..)) => def::CtorOf::Struct,
        .                               Some(Node::Variant(..)) => def::CtorOf::Variant,
        .                               _ => unreachable!(),
        .                           };
      398 ( 0.00%)                  DefKind::Ctor(ctor_of, def::CtorKind::from_hir(variant_data))
      796 ( 0.00%)              }
        .                       Node::AnonConst(_) => {
    1,416 ( 0.00%)                  let inline = match self.find(self.get_parent_node(hir_id)) {
        .                               Some(Node::Expr(&Expr {
        .                                   kind: ExprKind::ConstBlock(ref anon_const), ..
        .                               })) if anon_const.hir_id == hir_id => true,
        .                               _ => false,
        .                           };
        .                           if inline { DefKind::InlineConst } else { DefKind::AnonConst }
        .                       }
        .                       Node::Field(_) => DefKind::Field,
      385 ( 0.00%)              Node::Expr(expr) => match expr.kind {
        .                           ExprKind::Closure(.., None) => DefKind::Closure,
        .                           ExprKind::Closure(.., Some(_)) => DefKind::Generator,
        .                           _ => bug!("def_kind: unsupported node: {}", self.node_to_string(hir_id)),
        .                       },
      276 ( 0.00%)              Node::GenericParam(param) => match param.kind {
        .                           GenericParamKind::Lifetime { .. } => DefKind::LifetimeParam,
        .                           GenericParamKind::Type { .. } => DefKind::TyParam,
        .                           GenericParamKind::Const { .. } => DefKind::ConstParam,
        .                       },
        .                       Node::Crate(_) => DefKind::Mod,
        .                       Node::Stmt(_)
        .                       | Node::PathSegment(_)
        .                       | Node::Ty(_)
-- line 300 ----------------------------------------
-- line 304 ----------------------------------------
        .                       | Node::Binding(_)
        .                       | Node::Local(_)
        .                       | Node::Param(_)
        .                       | Node::Arm(_)
        .                       | Node::Lifetime(_)
        .                       | Node::Visibility(_)
        .                       | Node::Block(_) => return None,
        .                   };
   14,196 ( 0.00%)          Some(def_kind)
   43,800 ( 0.00%)      }
        .           
        .               pub fn def_kind(&self, local_def_id: LocalDefId) -> DefKind {
        .                   self.opt_def_kind(local_def_id)
        .                       .unwrap_or_else(|| bug!("def_kind: unsupported node: {:?}", local_def_id))
        .               }
        .           
1,848,008 ( 0.04%)      pub fn find_parent_node(&self, id: HirId) -> Option<HirId> {
  231,001 ( 0.00%)          if id.local_id == ItemLocalId::from_u32(0) {
        .                       Some(self.tcx.hir_owner_parent(id.owner))
        .                   } else {
  444,510 ( 0.01%)              let owner = self.tcx.hir_owner_nodes(id.owner)?;
  222,255 ( 0.00%)              let node = owner.nodes[id.local_id].as_ref()?;
  666,765 ( 0.01%)              let hir_id = HirId { owner: id.owner, local_id: node.parent };
        .                       Some(hir_id)
        .                   }
1,848,008 ( 0.04%)      }
        .           
    6,789 ( 0.00%)      pub fn get_parent_node(&self, hir_id: HirId) -> HirId {
1,199,104 ( 0.03%)          self.find_parent_node(hir_id).unwrap()
   13,578 ( 0.00%)      }
        .           
        .               /// Retrieves the `Node` corresponding to `id`, returning `None` if cannot be found.
1,220,520 ( 0.03%)      pub fn find(&self, id: HirId) -> Option<Node<'hir>> {
  152,565 ( 0.00%)          if id.local_id == ItemLocalId::from_u32(0) {
        .                       let owner = self.tcx.hir_owner(id.owner)?;
   96,654 ( 0.00%)              Some(owner.node.into())
        .                   } else {
  110,088 ( 0.00%)              let owner = self.tcx.hir_owner_nodes(id.owner)?;
   55,044 ( 0.00%)              let node = owner.nodes[id.local_id].as_ref()?;
  165,132 ( 0.00%)              Some(node.node)
        .                   }
1,220,520 ( 0.03%)      }
        .           
        .               /// Retrieves the `Node` corresponding to `id`, returning `None` if cannot be found.
        .               #[inline]
        .               pub fn find_by_def_id(&self, id: LocalDefId) -> Option<Node<'hir>> {
   23,940 ( 0.00%)          self.find(self.local_def_id_to_hir_id(id))
        .               }
        .           
        .               /// Retrieves the `Node` corresponding to `id`, panicking if it cannot be found.
  106,701 ( 0.00%)      pub fn get(&self, id: HirId) -> Node<'hir> {
   55,452 ( 0.00%)          self.find(id).unwrap_or_else(|| bug!("couldn't find hir id {} in the HIR map", id))
   71,134 ( 0.00%)      }
        .           
        .               /// Retrieves the `Node` corresponding to `id`, panicking if it cannot be found.
        .               #[inline]
        .               pub fn get_by_def_id(&self, id: LocalDefId) -> Node<'hir> {
        .                   self.find_by_def_id(id).unwrap_or_else(|| bug!("couldn't find {:?} in the HIR map", id))
        .               }
        .           
    4,304 ( 0.00%)      pub fn get_if_local(&self, id: DefId) -> Option<Node<'hir>> {
    2,152 ( 0.00%)          id.as_local().and_then(|id| self.find(self.local_def_id_to_hir_id(id)))
    4,304 ( 0.00%)      }
        .           
        .               pub fn get_generics(&self, id: LocalDefId) -> Option<&'hir Generics<'hir>> {
        .                   let node = self.tcx.hir_owner(id)?;
        .                   match node.node {
        .                       OwnerNode::ImplItem(impl_item) => Some(&impl_item.generics),
        .                       OwnerNode::TraitItem(trait_item) => Some(&trait_item.generics),
        .                       OwnerNode::Item(Item {
        .                           kind:
-- line 374 ----------------------------------------
-- line 381 ----------------------------------------
        .                               | ItemKind::TraitAlias(generics, _)
        .                               | ItemKind::Impl(Impl { generics, .. }),
        .                           ..
        .                       }) => Some(generics),
        .                       _ => None,
        .                   }
        .               }
        .           
  271,439 ( 0.01%)      pub fn item(&self, id: ItemId) -> &'hir Item<'hir> {
   77,554 ( 0.00%)          self.tcx.hir_owner(id.def_id).unwrap().node.expect_item()
  310,216 ( 0.01%)      }
        .           
    9,891 ( 0.00%)      pub fn trait_item(&self, id: TraitItemId) -> &'hir TraitItem<'hir> {
    2,826 ( 0.00%)          self.tcx.hir_owner(id.def_id).unwrap().node.expect_trait_item()
   11,304 ( 0.00%)      }
        .           
  173,411 ( 0.00%)      pub fn impl_item(&self, id: ImplItemId) -> &'hir ImplItem<'hir> {
   49,546 ( 0.00%)          self.tcx.hir_owner(id.def_id).unwrap().node.expect_impl_item()
  198,184 ( 0.00%)      }
        .           
        .               pub fn foreign_item(&self, id: ForeignItemId) -> &'hir ForeignItem<'hir> {
        .                   self.tcx.hir_owner(id.def_id).unwrap().node.expect_foreign_item()
        .               }
        .           
  314,769 ( 0.01%)      pub fn body(&self, id: BodyId) -> &'hir Body<'hir> {
   89,934 ( 0.00%)          self.tcx.hir_owner_nodes(id.hir_id.owner).unwrap().bodies[&id.hir_id.local_id]
  359,736 ( 0.01%)      }
        .           
    6,672 ( 0.00%)      pub fn fn_decl_by_hir_id(&self, hir_id: HirId) -> Option<&'hir FnDecl<'hir>> {
    6,672 ( 0.00%)          if let Some(node) = self.find(hir_id) {
        .                       fn_decl(node)
        .                   } else {
        .                       bug!("no node for hir_id `{}`", hir_id)
        .                   }
    4,448 ( 0.00%)      }
        .           
    1,830 ( 0.00%)      pub fn fn_sig_by_hir_id(&self, hir_id: HirId) -> Option<&'hir FnSig<'hir>> {
    1,830 ( 0.00%)          if let Some(node) = self.find(hir_id) {
        .                       fn_sig(node)
        .                   } else {
        .                       bug!("no node for hir_id `{}`", hir_id)
        .                   }
    1,830 ( 0.00%)      }
        .           
        .               pub fn enclosing_body_owner(&self, hir_id: HirId) -> HirId {
        .                   for (parent, _) in self.parent_iter(hir_id) {
        .                       if let Some(body) = self.maybe_body_owned_by(parent) {
        .                           return self.body_owner(body);
        .                       }
        .                   }
        .           
        .                   bug!("no `enclosing_body_owner` for hir_id `{}`", hir_id);
        .               }
        .           
        .               /// Returns the `HirId` that corresponds to the definition of
        .               /// which this is the body of, i.e., a `fn`, `const` or `static`
        .               /// item (possibly associated), a closure, or a `hir::AnonConst`.
  207,816 ( 0.00%)      pub fn body_owner(&self, BodyId { hir_id }: BodyId) -> HirId {
        .                   let parent = self.get_parent_node(hir_id);
  155,862 ( 0.00%)          assert!(self.find(parent).map_or(false, |n| is_body_owner(n, hir_id)));
        .                   parent
  207,816 ( 0.00%)      }
        .           
   66,685 ( 0.00%)      pub fn body_owner_def_id(&self, id: BodyId) -> LocalDefId {
  102,845 ( 0.00%)          self.local_def_id(self.body_owner(id))
   66,685 ( 0.00%)      }
        .           
        .               /// Given a `HirId`, returns the `BodyId` associated with it,
        .               /// if the node is a body owner, otherwise returns `None`.
    9,860 ( 0.00%)      pub fn maybe_body_owned_by(&self, hir_id: HirId) -> Option<BodyId> {
   32,542 ( 0.00%)          self.find(hir_id).map(associated_body).flatten()
   29,580 ( 0.00%)      }
        .           
        .               /// Given a body owner's id, returns the `BodyId` associated with it.
   26,658 ( 0.00%)      pub fn body_owned_by(&self, id: HirId) -> BodyId {
        .                   self.maybe_body_owned_by(id).unwrap_or_else(|| {
        .                       span_bug!(
        .                           self.span(id),
        .                           "body_owned_by: {} has no associated body",
        .                           self.node_to_string(id)
        .                       );
        .                   })
   20,734 ( 0.00%)      }
        .           
      751 ( 0.00%)      pub fn body_param_names(&self, id: BodyId) -> impl Iterator<Item = Ident> + 'hir {
    7,529 ( 0.00%)          self.body(id).params.iter().map(|arg| match arg.pat.kind {
    2,618 ( 0.00%)              PatKind::Binding(_, _, ident, _) => ident,
        .                       _ => Ident::empty(),
        .                   })
    2,253 ( 0.00%)      }
        .           
        .               /// Returns the `BodyOwnerKind` of this `LocalDefId`.
        .               ///
        .               /// Panics if `LocalDefId` does not have an associated body.
   44,319 ( 0.00%)      pub fn body_owner_kind(&self, id: HirId) -> BodyOwnerKind {
   97,761 ( 0.00%)          match self.get(id) {
        .                       Node::Item(&Item { kind: ItemKind::Const(..), .. })
        .                       | Node::TraitItem(&TraitItem { kind: TraitItemKind::Const(..), .. })
        .                       | Node::ImplItem(&ImplItem { kind: ImplItemKind::Const(..), .. })
        .                       | Node::AnonConst(_) => BodyOwnerKind::Const,
        .                       Node::Ctor(..)
        .                       | Node::Item(&Item { kind: ItemKind::Fn(..), .. })
        .                       | Node::TraitItem(&TraitItem { kind: TraitItemKind::Fn(..), .. })
        .                       | Node::ImplItem(&ImplItem { kind: ImplItemKind::Fn(..), .. }) => BodyOwnerKind::Fn,
    1,428 ( 0.00%)              Node::Item(&Item { kind: ItemKind::Static(_, m, _), .. }) => BodyOwnerKind::Static(m),
        .                       Node::Expr(&Expr { kind: ExprKind::Closure(..), .. }) => BodyOwnerKind::Closure,
        .                       node => bug!("{:#?} is not a body node", node),
        .                   }
   44,319 ( 0.00%)      }
        .           
        .               /// Returns the `ConstContext` of the body associated with this `LocalDefId`.
        .               ///
        .               /// Panics if `LocalDefId` does not have an associated body.
        .               ///
        .               /// This should only be used for determining the context of a body, a return
        .               /// value of `Some` does not always suggest that the owner of the body is `const`,
        .               /// just that it has to be checked as if it were.
   53,376 ( 0.00%)      pub fn body_const_context(&self, did: LocalDefId) -> Option<ConstContext> {
        .                   let hir_id = self.local_def_id_to_hir_id(did);
   80,064 ( 0.00%)          let ccx = match self.body_owner_kind(hir_id) {
        .                       BodyOwnerKind::Const => ConstContext::Const,
    2,142 ( 0.00%)              BodyOwnerKind::Static(mt) => ConstContext::Static(mt),
        .           
    3,154 ( 0.00%)              BodyOwnerKind::Fn if self.tcx.is_constructor(did.to_def_id()) => return None,
    3,154 ( 0.00%)              BodyOwnerKind::Fn if self.tcx.is_const_fn_raw(did.to_def_id()) => ConstContext::ConstFn,
        .                       BodyOwnerKind::Fn
    5,408 ( 0.00%)                  if self.tcx.has_attr(did.to_def_id(), sym::default_method_body_is_const) =>
        .                       {
        .                           ConstContext::ConstFn
        .                       }
        .                       BodyOwnerKind::Fn | BodyOwnerKind::Closure => return None,
        .                   };
        .           
        .                   Some(ccx)
   60,048 ( 0.00%)      }
        .           
        .               /// Returns an iterator of the `DefId`s for all body-owners in this
        .               /// crate. If you would prefer to iterate over the bodies
        .               /// themselves, you can do `self.hir().krate().body_ids.iter()`.
       21 ( 0.00%)      pub fn body_owners(self) -> impl Iterator<Item = LocalDefId> + 'hir {
        3 ( 0.00%)          self.krate()
        .                       .owners
        .                       .iter_enumerated()
        .                       .flat_map(move |(owner, owner_info)| {
   13,140 ( 0.00%)                  let bodies = &owner_info.as_ref()?.nodes.bodies;
        .                           Some(bodies.iter().map(move |&(local_id, _)| {
      293 ( 0.00%)                      let hir_id = HirId { owner, local_id };
        .                               let body_id = BodyId { hir_id };
   12,751 ( 0.00%)                      self.body_owner_def_id(body_id)
        .                           }))
        .                       })
        .                       .flatten()
       15 ( 0.00%)      }
        .           
       10 ( 0.00%)      pub fn par_body_owners<F: Fn(LocalDefId) + Sync + Send>(self, f: F) {
        .                   use rustc_data_structures::sync::{par_iter, ParallelIterator};
        .                   #[cfg(parallel_compiler)]
        .                   use rustc_rayon::iter::IndexedParallelIterator;
        .           
        3 ( 0.00%)          par_iter(&self.krate().owners.raw).enumerate().for_each(|(owner, owner_info)| {
        .                       let owner = LocalDefId::new(owner);
   26,280 ( 0.00%)              if let Some(owner_info) = owner_info {
        .                           par_iter(owner_info.nodes.bodies.range(..)).for_each(|(local_id, _)| {
        .                               let hir_id = HirId { owner, local_id: *local_id };
        .                               let body_id = BodyId { hir_id };
   12,267 ( 0.00%)                      f(self.body_owner_def_id(body_id))
        .                           })
        .                       }
        .                   });
        8 ( 0.00%)      }
        .           
      130 ( 0.00%)      pub fn ty_param_owner(&self, id: HirId) -> LocalDefId {
       74 ( 0.00%)          match self.get(id) {
        .                       Node::Item(&Item { kind: ItemKind::Trait(..) | ItemKind::TraitAlias(..), .. }) => {
        .                           id.expect_owner()
        .                       }
        .                       Node::GenericParam(_) => self.get_parent_item(id),
        .                       _ => bug!("ty_param_owner: {} not a type parameter", self.node_to_string(id)),
        .                   }
       91 ( 0.00%)      }
        .           
      310 ( 0.00%)      pub fn ty_param_name(&self, id: HirId) -> Symbol {
      202 ( 0.00%)          match self.get(id) {
        .                       Node::Item(&Item { kind: ItemKind::Trait(..) | ItemKind::TraitAlias(..), .. }) => {
        .                           kw::SelfUpper
        .                       }
       22 ( 0.00%)              Node::GenericParam(param) => param.name.ident().name,
        .                       _ => bug!("ty_param_name: {} not a type parameter", self.node_to_string(id)),
        .                   }
      186 ( 0.00%)      }
        .           
    1,215 ( 0.00%)      pub fn trait_impls(&self, trait_did: DefId) -> &'hir [LocalDefId] {
      135 ( 0.00%)          self.tcx.all_local_trait_impls(()).get(&trait_did).map_or(&[], |xs| &xs[..])
    1,215 ( 0.00%)      }
        .           
        .               /// Gets the attributes on the crate. This is preferable to
        .               /// invoking `krate.attrs` because it registers a tighter
        .               /// dep-graph access.
        .               pub fn krate_attrs(&self) -> &'hir [ast::Attribute] {
       20 ( 0.00%)          self.attrs(CRATE_HIR_ID)
        .               }
        .           
      665 ( 0.00%)      pub fn get_module(&self, module: LocalDefId) -> (&'hir Mod<'hir>, Span, HirId) {
        .                   let hir_id = HirId::make_owner(module);
      475 ( 0.00%)          match self.tcx.hir_owner(module).map(|o| o.node) {
      168 ( 0.00%)              Some(OwnerNode::Item(&Item { span, kind: ItemKind::Mod(ref m), .. })) => {
        .                           (m, span, hir_id)
        .                       }
       33 ( 0.00%)              Some(OwnerNode::Crate(item)) => (item, item.inner, hir_id),
        .                       node => panic!("not a module: {:?}", node),
        .                   }
      855 ( 0.00%)      }
        .           
        .               /// Walks the contents of a crate. See also `Crate::visit_all_items`.
       11 ( 0.00%)      pub fn walk_toplevel_module(self, visitor: &mut impl Visitor<'hir>) {
       30 ( 0.00%)          let (top_mod, span, hir_id) = self.get_module(CRATE_DEF_ID);
        .                   visitor.visit_mod(top_mod, span, hir_id);
        8 ( 0.00%)      }
        .           
        .               /// Walks the attributes in a crate.
       20 ( 0.00%)      pub fn walk_attributes(self, visitor: &mut impl Visitor<'hir>) {
        2 ( 0.00%)          let krate = self.krate();
        .                   for (owner, info) in krate.owners.iter_enumerated() {
   17,520 ( 0.00%)              if let Some(info) = info {
        .                           for (local_id, attrs) in info.attrs.map.iter() {
        .                               let id = HirId { owner, local_id: *local_id };
        .                               for a in *attrs {
   15,455 ( 0.00%)                          visitor.visit_attribute(id, a)
        .                               }
        .                           }
        .                       }
        .                   }
       16 ( 0.00%)      }
        .           
        .               /// Visits all items in the crate in some deterministic (but
        .               /// unspecified) order. If you just need to process every item,
        .               /// but don't care about nesting, this method is the best choice.
        .               ///
        .               /// If you do care about nesting -- usually because your algorithm
        .               /// follows lexical scoping rules -- then you want a different
        .               /// approach. You should override `visit_nested_item` in your
        .               /// visitor and then call `intravisit::walk_crate` instead.
      144 ( 0.00%)      pub fn visit_all_item_likes<V>(&self, visitor: &mut V)
        .               where
        .                   V: itemlikevisit::ItemLikeVisitor<'hir>,
        .               {
       20 ( 0.00%)          let krate = self.krate();
       70 ( 0.00%)          for owner in krate.owners.iter().filter_map(Option::as_ref) {
   77,979 ( 0.00%)              match owner.node() {
   62,178 ( 0.00%)                  OwnerNode::Item(item) => visitor.visit_item(item),
        .                           OwnerNode::ForeignItem(item) => visitor.visit_foreign_item(item),
    2,586 ( 0.00%)                  OwnerNode::ImplItem(item) => visitor.visit_impl_item(item),
        .                           OwnerNode::TraitItem(item) => visitor.visit_trait_item(item),
        .                           OwnerNode::Crate(_) => {}
        .                       }
        .                   }
      144 ( 0.00%)      }
        .           
        .               /// A parallel version of `visit_all_item_likes`.
        .               pub fn par_visit_all_item_likes<V>(&self, visitor: &V)
        .               where
        .                   V: itemlikevisit::ParItemLikeVisitor<'hir> + Sync + Send,
        .               {
        1 ( 0.00%)          let krate = self.krate();
        2 ( 0.00%)          par_for_each_in(&krate.owners.raw, |owner| match owner.as_ref().map(OwnerInfo::node) {
    1,446 ( 0.00%)              Some(OwnerNode::Item(item)) => visitor.visit_item(item),
        .                       Some(OwnerNode::ForeignItem(item)) => visitor.visit_foreign_item(item),
      862 ( 0.00%)              Some(OwnerNode::ImplItem(item)) => visitor.visit_impl_item(item),
       54 ( 0.00%)              Some(OwnerNode::TraitItem(item)) => visitor.visit_trait_item(item),
        .                       Some(OwnerNode::Crate(_)) | None => {}
        .                   })
        .               }
        .           
    2,494 ( 0.00%)      pub fn visit_item_likes_in_module<V>(&self, module: LocalDefId, visitor: &mut V)
        .               where
        .                   V: ItemLikeVisitor<'hir>,
        .               {
      319 ( 0.00%)          let module = self.tcx.hir_module_items(module);
        .           
      348 ( 0.00%)          for id in module.items.iter() {
   65,070 ( 0.00%)              visitor.visit_item(self.item(*id));
        .                   }
        .           
      348 ( 0.00%)          for id in module.trait_items.iter() {
    2,160 ( 0.00%)              visitor.visit_trait_item(self.trait_item(*id));
        .                   }
        .           
      348 ( 0.00%)          for id in module.impl_items.iter() {
   33,618 ( 0.00%)              visitor.visit_impl_item(self.impl_item(*id));
        .                   }
        .           
      348 ( 0.00%)          for id in module.foreign_items.iter() {
        .                       visitor.visit_foreign_item(self.foreign_item(*id));
        .                   }
    2,552 ( 0.00%)      }
        .           
       46 ( 0.00%)      pub fn for_each_module(&self, f: impl Fn(LocalDefId)) {
        .                   let mut queue = VecDeque::new();
        .                   queue.push_back(CRATE_DEF_ID);
        .           
      232 ( 0.00%)          while let Some(id) = queue.pop_front() {
        .                       f(id);
       87 ( 0.00%)              let items = self.tcx.hir_module_items(id);
      928 ( 0.00%)              queue.extend(items.submodules.iter().copied())
        .                   }
       40 ( 0.00%)      }
        .           
        .               #[cfg(not(parallel_compiler))]
        .               #[inline]
        .               pub fn par_for_each_module(&self, f: impl Fn(LocalDefId)) {
        4 ( 0.00%)          self.for_each_module(f)
        .               }
        .           
        .               #[cfg(parallel_compiler)]
        .               pub fn par_for_each_module(&self, f: impl Fn(LocalDefId) + Sync) {
        .                   use rustc_data_structures::sync::{par_iter, ParallelIterator};
        .                   par_iter_submodules(self.tcx, CRATE_DEF_ID, &f);
        .           
        .                   fn par_iter_submodules<F>(tcx: TyCtxt<'_>, module: LocalDefId, f: &F)
-- line 699 ----------------------------------------
-- line 703 ----------------------------------------
        .                       (*f)(module);
        .                       let items = tcx.hir_module_items(module);
        .                       par_iter(&items.submodules[..]).for_each(|&sm| par_iter_submodules(tcx, sm, f));
        .                   }
        .               }
        .           
        .               /// Returns an iterator for the nodes in the ancestor tree of the `current_id`
        .               /// until the crate root is reached. Prefer this over your own loop using `get_parent_node`.
    2,588 ( 0.00%)      pub fn parent_iter(self, current_id: HirId) -> ParentHirIterator<'hir> {
        .                   ParentHirIterator { current_id, map: self }
   10,352 ( 0.00%)      }
        .           
        .               /// Returns an iterator for the nodes in the ancestor tree of the `current_id`
        .               /// until the crate root is reached. Prefer this over your own loop using `get_parent_node`.
        .               pub fn parent_owner_iter(self, current_id: HirId) -> ParentOwnerIterator<'hir> {
        .                   ParentOwnerIterator { current_id, map: self }
   46,110 ( 0.00%)      }
        .           
        .               /// Checks if the node is left-hand side of an assignment.
        .               pub fn is_lhs(&self, id: HirId) -> bool {
        .                   match self.find(self.get_parent_node(id)) {
        .                       Some(Node::Expr(expr)) => match expr.kind {
        .                           ExprKind::Assign(lhs, _rhs, _span) => lhs.hir_id == id,
        .                           _ => false,
        .                       },
-- line 727 ----------------------------------------
-- line 792 ----------------------------------------
        .                   }
        .                   None
        .               }
        .           
        .               /// Retrieves the `HirId` for `id`'s parent item, or `id` itself if no
        .               /// parent item is in this map. The "parent item" is the closest parent node
        .               /// in the HIR which is recorded by the map and is an item, either an item
        .               /// in a module, trait, or impl.
   13,481 ( 0.00%)      pub fn get_parent_item(&self, hir_id: HirId) -> LocalDefId {
  121,374 ( 0.00%)          if let Some((def_id, _node)) = self.parent_owner_iter(hir_id).next() {
        .                       def_id
        .                   } else {
        .                       CRATE_DEF_ID
        .                   }
   26,962 ( 0.00%)      }
        .           
        .               /// Returns the `HirId` of `id`'s nearest module parent, or `id` itself if no
        .               /// module parent is in this map.
        .               pub(super) fn get_module_parent_node(&self, hir_id: HirId) -> LocalDefId {
   16,572 ( 0.00%)          for (def_id, node) in self.parent_owner_iter(hir_id) {
    8,946 ( 0.00%)              if let OwnerNode::Item(&Item { kind: ItemKind::Mod(_), .. }) = node {
        .                           return def_id;
        .                       }
        .                   }
        .                   CRATE_DEF_ID
        .               }
        .           
        .               /// When on an if expression, a match arm tail expression or a match arm, give back
        .               /// the enclosing `if` or `match` expression.
-- line 820 ----------------------------------------
-- line 885 ----------------------------------------
        .                       }
        .                   }
        .                   bug!(
        .                       "expected foreign mod or inlined parent, found {}",
        .                       self.node_to_string(HirId::make_owner(parent))
        .                   )
        .               }
        .           
   56,196 ( 0.00%)      pub fn expect_item(&self, id: LocalDefId) -> &'hir Item<'hir> {
   24,084 ( 0.00%)          match self.tcx.hir_owner(id) {
        .                       Some(Owner { node: OwnerNode::Item(item), .. }) => item,
        .                       _ => bug!("expected item, found {}", self.node_to_string(HirId::make_owner(id))),
        .                   }
   64,224 ( 0.00%)      }
        .           
   12,068 ( 0.00%)      pub fn expect_impl_item(&self, id: LocalDefId) -> &'hir ImplItem<'hir> {
    5,172 ( 0.00%)          match self.tcx.hir_owner(id) {
        .                       Some(Owner { node: OwnerNode::ImplItem(item), .. }) => item,
        .                       _ => bug!("expected impl item, found {}", self.node_to_string(HirId::make_owner(id))),
        .                   }
   13,792 ( 0.00%)      }
        .           
      756 ( 0.00%)      pub fn expect_trait_item(&self, id: LocalDefId) -> &'hir TraitItem<'hir> {
      324 ( 0.00%)          match self.tcx.hir_owner(id) {
        .                       Some(Owner { node: OwnerNode::TraitItem(item), .. }) => item,
        .                       _ => bug!("expected trait item, found {}", self.node_to_string(HirId::make_owner(id))),
        .                   }
      864 ( 0.00%)      }
        .           
        .               pub fn expect_variant(&self, id: HirId) -> &'hir Variant<'hir> {
        .                   match self.find(id) {
        .                       Some(Node::Variant(variant)) => variant,
        .                       _ => bug!("expected variant, found {}", self.node_to_string(id)),
        .                   }
        .               }
        .           
-- line 920 ----------------------------------------
-- line 929 ----------------------------------------
        .           
        .               pub fn expect_expr(&self, id: HirId) -> &'hir Expr<'hir> {
        .                   match self.find(id) {
        .                       Some(Node::Expr(expr)) => expr,
        .                       _ => bug!("expected expr, found {}", self.node_to_string(id)),
        .                   }
        .               }
        .           
    4,464 ( 0.00%)      pub fn opt_name(&self, id: HirId) -> Option<Symbol> {
    1,500 ( 0.00%)          Some(match self.get(id) {
        .                       Node::Item(i) => i.ident.name,
        .                       Node::ForeignItem(fi) => fi.ident.name,
        .                       Node::ImplItem(ii) => ii.ident.name,
        .                       Node::TraitItem(ti) => ti.ident.name,
        .                       Node::Variant(v) => v.ident.name,
        .                       Node::Field(f) => f.ident.name,
        .                       Node::Lifetime(lt) => lt.name.ident().name,
    1,470 ( 0.00%)              Node::GenericParam(param) => param.name.ident().name,
       12 ( 0.00%)              Node::Binding(&Pat { kind: PatKind::Binding(_, _, l, _), .. }) => l.name,
        .                       Node::Ctor(..) => self.name(HirId::make_owner(self.get_parent_item(id))),
        .                       _ => return None,
        .                   })
    2,480 ( 0.00%)      }
        .           
    3,944 ( 0.00%)      pub fn name(&self, id: HirId) -> Symbol {
    1,494 ( 0.00%)          match self.opt_name(id) {
        .                       Some(name) => name,
        .                       None => bug!("no name for {}", self.node_to_string(id)),
        .                   }
    2,958 ( 0.00%)      }
        .           
        .               /// Given a node ID, gets a list of attributes associated with the AST
        .               /// corresponding to the node-ID.
2,507,841 ( 0.05%)      pub fn attrs(&self, id: HirId) -> &'hir [ast::Attribute] {
  358,263 ( 0.01%)          self.tcx.hir_attrs(id.owner).get(id.local_id)
2,866,104 ( 0.06%)      }
        .           
        .               /// Gets the span of the definition of the specified HIR node.
        .               /// This is used by `tcx.get_span`
   13,647 ( 0.00%)      pub fn span(&self, hir_id: HirId) -> Span {
   77,213 ( 0.00%)          self.opt_span(hir_id)
        .                       .unwrap_or_else(|| bug!("hir::map::Map::span: id not in map: {:?}", hir_id))
   13,647 ( 0.00%)      }
        .           
  185,451 ( 0.00%)      pub fn opt_span(&self, hir_id: HirId) -> Option<Span> {
  185,451 ( 0.00%)          let span = match self.find(hir_id)? {
        .                       Node::Param(param) => param.span,
    4,406 ( 0.00%)              Node::Item(item) => match &item.kind {
        .                           ItemKind::Fn(sig, _, _) => sig.span,
    4,390 ( 0.00%)                  _ => item.span,
        .                       },
        .                       Node::ForeignItem(foreign_item) => foreign_item.span,
      792 ( 0.00%)              Node::TraitItem(trait_item) => match &trait_item.kind {
      540 ( 0.00%)                  TraitItemKind::Fn(sig, _) => sig.span,
      252 ( 0.00%)                  _ => trait_item.span,
        .                       },
    6,320 ( 0.00%)              Node::ImplItem(impl_item) => match &impl_item.kind {
    5,824 ( 0.00%)                  ImplItemKind::Fn(sig, _) => sig.span,
      496 ( 0.00%)                  _ => impl_item.span,
        .                       },
      584 ( 0.00%)              Node::Variant(variant) => variant.span,
      580 ( 0.00%)              Node::Field(field) => field.span,
    8,260 ( 0.00%)              Node::AnonConst(constant) => self.body(constant.body).value.span,
        .                       Node::Expr(expr) => expr.span,
        .                       Node::Stmt(stmt) => stmt.span,
        .                       Node::PathSegment(seg) => seg.ident.span,
        .                       Node::Ty(ty) => ty.span,
        .                       Node::TraitRef(tr) => tr.path.span,
        .                       Node::Binding(pat) => pat.span,
        .                       Node::Pat(pat) => pat.span,
        .                       Node::Arm(arm) => arm.span,
        .                       Node::Block(block) => block.span,
    1,415 ( 0.00%)              Node::Ctor(..) => match self.find(self.get_parent_node(hir_id))? {
        .                           Node::Item(item) => item.span,
        .                           Node::Variant(variant) => variant.span,
        .                           _ => unreachable!(),
        .                       },
        .                       Node::Lifetime(lifetime) => lifetime.span,
        .                       Node::GenericParam(param) => param.span,
        .                       Node::Visibility(&Spanned {
        .                           node: VisibilityKind::Restricted { ref path, .. },
        .                           ..
        .                       }) => path.span,
        .                       Node::Infer(i) => i.span,
        .                       Node::Visibility(v) => bug!("unexpected Visibility {:?}", v),
        .                       Node::Local(local) => local.span,
        4 ( 0.00%)              Node::Crate(item) => item.inner,
        .                   };
        .                   Some(span)
  264,930 ( 0.01%)      }
        .           
        .               /// Like `hir.span()`, but includes the body of function items
        .               /// (instead of just the function header)
        .               pub fn span_with_body(&self, hir_id: HirId) -> Span {
        .                   match self.find(hir_id) {
        .                       Some(Node::TraitItem(item)) => item.span,
        .                       Some(Node::ImplItem(impl_item)) => impl_item.span,
        .                       Some(Node::Item(item)) => item.span,
        .                       Some(_) => self.span(hir_id),
        .                       _ => bug!("hir::map::Map::span_with_body: id not in map: {:?}", hir_id),
        .                   }
        .               }
        .           
    1,276 ( 0.00%)      pub fn span_if_local(&self, id: DefId) -> Option<Span> {
    7,324 ( 0.00%)          id.as_local().and_then(|id| self.opt_span(self.local_def_id_to_hir_id(id)))
    1,914 ( 0.00%)      }
        .           
        .               pub fn res_span(&self, res: Res) -> Option<Span> {
        .                   match res {
        .                       Res::Err => None,
        .                       Res::Local(id) => Some(self.span(id)),
        .                       res => self.span_if_local(res.opt_def_id()?),
        .                   }
        .               }
-- line 1042 ----------------------------------------
-- line 1062 ----------------------------------------
        .           }
        .           
        .           impl<'hir> intravisit::Map<'hir> for Map<'hir> {
        .               fn find(&self, hir_id: HirId) -> Option<Node<'hir>> {
        .                   self.find(hir_id)
        .               }
        .           
        .               fn body(&self, id: BodyId) -> &'hir Body<'hir> {
   27,174 ( 0.00%)          self.body(id)
        .               }
        .           
        .               fn item(&self, id: ItemId) -> &'hir Item<'hir> {
   18,744 ( 0.00%)          self.item(id)
        .               }
        .           
        .               fn trait_item(&self, id: TraitItemId) -> &'hir TraitItem<'hir> {
      765 ( 0.00%)          self.trait_item(id)
        .               }
        .           
        .               fn impl_item(&self, id: ImplItemId) -> &'hir ImplItem<'hir> {
   12,068 ( 0.00%)          self.impl_item(id)
        .               }
        .           
        .               fn foreign_item(&self, id: ForeignItemId) -> &'hir ForeignItem<'hir> {
        .                   self.foreign_item(id)
        .               }
        .           }
        .           
        7 ( 0.00%)  pub(super) fn crate_hash(tcx: TyCtxt<'_>, crate_num: CrateNum) -> Svh {
        .               debug_assert_eq!(crate_num, LOCAL_CRATE);
        .               let krate = tcx.hir_crate(());
        3 ( 0.00%)      let hir_body_hash = krate.hir_hash;
        .           
        .               let upstream_crates = upstream_crates(tcx);
        .           
        .               // We hash the final, remapped names of all local source files so we
        .               // don't have to include the path prefix remapping commandline args.
        .               // If we included the full mapping in the SVH, we could only have
        .               // reproducible builds by compiling from the same directory. So we just
        .               // hash the result of the mapping instead of the mapping itself.
        2 ( 0.00%)      let mut source_file_names: Vec<_> = tcx
        .                   .sess
        .                   .source_map()
        .                   .files()
        .                   .iter()
        .                   .filter(|source_file| source_file.cnum == LOCAL_CRATE)
       38 ( 0.00%)          .map(|source_file| source_file.name_hash)
        .                   .collect();
        .           
        .               source_file_names.sort_unstable();
        .           
        .               let mut hcx = tcx.create_stable_hashing_context();
        .               let mut stable_hasher = StableHasher::new();
        .               hir_body_hash.hash_stable(&mut hcx, &mut stable_hasher);
        .               upstream_crates.hash_stable(&mut hcx, &mut stable_hasher);
        .               source_file_names.hash_stable(&mut hcx, &mut stable_hasher);
        3 ( 0.00%)      if tcx.sess.opts.debugging_opts.incremental_relative_spans {
        .                   let definitions = &tcx.untracked_resolutions.definitions;
        .                   let mut owner_spans: Vec<_> = krate
        .                       .owners
        .                       .iter_enumerated()
        .                       .filter_map(|(def_id, info)| {
        .                           let _ = info.as_ref()?;
        .                           let def_path_hash = definitions.def_path_hash(def_id);
        .                           let span = definitions.def_span(def_id);
        .                           debug_assert_eq!(span.parent(), None);
        .                           Some((def_path_hash, span))
        .                       })
        .                       .collect();
        .                   owner_spans.sort_unstable_by_key(|bn| bn.0);
        .                   owner_spans.hash_stable(&mut hcx, &mut stable_hasher);
        .               }
        3 ( 0.00%)      tcx.sess.opts.dep_tracking_hash(true).hash_stable(&mut hcx, &mut stable_hasher);
        2 ( 0.00%)      tcx.sess.local_stable_crate_id().hash_stable(&mut hcx, &mut stable_hasher);
        .           
        .               let crate_hash: Fingerprint = stable_hasher.finish();
        1 ( 0.00%)      Svh::new(crate_hash.to_smaller_hash())
        9 ( 0.00%)  }
        .           
        .           fn upstream_crates(tcx: TyCtxt<'_>) -> Vec<(StableCrateId, Svh)> {
        .               let mut upstream_crates: Vec<_> = tcx
        .                   .crates(())
        .                   .iter()
        .                   .map(|&cnum| {
      170 ( 0.00%)              let stable_crate_id = tcx.resolutions(()).cstore.stable_crate_id(cnum);
       34 ( 0.00%)              let hash = tcx.crate_hash(cnum);
        .                       (stable_crate_id, hash)
        .                   })
        .                   .collect();
        .               upstream_crates.sort_unstable_by_key(|&(stable_crate_id, _)| stable_crate_id);
        .               upstream_crates
        .           }
        .           
        .           fn hir_id_to_string(map: &Map<'_>, id: HirId) -> String {
-- line 1155 ----------------------------------------
-- line 1238 ----------------------------------------
        .                   Some(Node::Lifetime(_)) => node_str("lifetime"),
        .                   Some(Node::GenericParam(ref param)) => format!("generic_param {:?}{}", param, id_str),
        .                   Some(Node::Visibility(ref vis)) => format!("visibility {:?}{}", vis, id_str),
        .                   Some(Node::Crate(..)) => String::from("root_crate"),
        .                   None => format!("unknown node{}", id_str),
        .               }
        .           }
        .           
      261 ( 0.00%)  pub(super) fn hir_module_items(tcx: TyCtxt<'_>, module_id: LocalDefId) -> ModuleItems {
      174 ( 0.00%)      let mut collector = ModuleCollector {
        .                   tcx,
        .                   submodules: Vec::default(),
        .                   items: Vec::default(),
        .                   trait_items: Vec::default(),
        .                   impl_items: Vec::default(),
        .                   foreign_items: Vec::default(),
        .               };
        .           
      145 ( 0.00%)      let (hir_mod, span, hir_id) = tcx.hir().get_module(module_id);
        .               collector.visit_mod(hir_mod, span, hir_id);
        .           
      464 ( 0.00%)      let ModuleCollector { submodules, items, trait_items, impl_items, foreign_items, .. } =
        .                   collector;
      319 ( 0.00%)      return ModuleItems {
      116 ( 0.00%)          submodules: submodules.into_boxed_slice(),
      116 ( 0.00%)          items: items.into_boxed_slice(),
      116 ( 0.00%)          trait_items: trait_items.into_boxed_slice(),
      116 ( 0.00%)          impl_items: impl_items.into_boxed_slice(),
      116 ( 0.00%)          foreign_items: foreign_items.into_boxed_slice(),
        .               };
        .           
        .               struct ModuleCollector<'tcx> {
        .                   tcx: TyCtxt<'tcx>,
        .                   submodules: Vec<LocalDefId>,
        .                   items: Vec<ItemId>,
        .                   trait_items: Vec<TraitItemId>,
        .                   impl_items: Vec<ImplItemId>,
        .                   foreign_items: Vec<ForeignItemId>,
        .               }
        .           
        .               impl<'hir> Visitor<'hir> for ModuleCollector<'hir> {
        .                   type NestedFilter = nested_filter::All;
        .           
        .                   fn nested_visit_map(&mut self) -> Self::Map {
    3,696 ( 0.00%)              self.tcx.hir()
        .                   }
        .           
    7,230 ( 0.00%)          fn visit_item(&mut self, item: &'hir Item<'hir>) {
    4,338 ( 0.00%)              self.items.push(item.item_id());
    2,892 ( 0.00%)              if let ItemKind::Mod(..) = item.kind {
        .                           // If this declares another module, do not recurse inside it.
       28 ( 0.00%)                  self.submodules.push(item.def_id);
        .                       } else {
    8,508 ( 0.00%)                  intravisit::walk_item(self, item)
        .                       }
      112 ( 0.00%)          }
        .           
        .                   fn visit_trait_item(&mut self, item: &'hir TraitItem<'hir>) {
      162 ( 0.00%)              self.trait_items.push(item.trait_item_id());
      162 ( 0.00%)              intravisit::walk_trait_item(self, item)
        .                   }
        .           
        .                   fn visit_impl_item(&mut self, item: &'hir ImplItem<'hir>) {
    2,586 ( 0.00%)              self.impl_items.push(item.impl_item_id());
    2,586 ( 0.00%)              intravisit::walk_impl_item(self, item)
        .                   }
        .           
        .                   fn visit_foreign_item(&mut self, item: &'hir ForeignItem<'hir>) {
        .                       self.foreign_items.push(item.foreign_item_id());
        .                       intravisit::walk_foreign_item(self, item)
        .                   }
        .               }
      232 ( 0.00%)  }

1,212,798 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/hir/map/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_dataflow/src/drop_flag_effects.rs
--------------------------------------------------------------------------------
Ir                 

-- line 48 ----------------------------------------
        .           //
        .           // FIXME: we have to do something for moving slice patterns.
        .           fn place_contents_drop_state_cannot_differ<'tcx>(
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               place: mir::Place<'tcx>,
        .           ) -> bool {
        .               let ty = place.ty(body, tcx).ty;
  924,740 ( 0.02%)      match ty.kind() {
        .                   ty::Array(..) => {
        .                       debug!(
        .                           "place_contents_drop_state_cannot_differ place: {:?} ty: {:?} => false",
        .                           place, ty
        .                       );
        .                       false
        .                   }
        .                   ty::Slice(..) | ty::Ref(..) | ty::RawPtr(..) => {
        .                       debug!(
        .                           "place_contents_drop_state_cannot_differ place: {:?} ty: {:?} refd => true",
        .                           place, ty
        .                       );
        .                       true
        .                   }
  477,270 ( 0.01%)          ty::Adt(def, _) if (def.has_dtor(tcx) && !def.is_box()) || def.is_union() => {
        .                       debug!(
        .                           "place_contents_drop_state_cannot_differ place: {:?} ty: {:?} Drop => true",
        .                           place, ty
        .                       );
        .                       true
        .                   }
        .                   _ => false,
        .               }
-- line 79 ----------------------------------------
-- line 83 ----------------------------------------
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               move_data: &MoveData<'tcx>,
        .               lookup_result: LookupResult,
        .               each_child: F,
        .           ) where
        .               F: FnMut(MovePathIndex),
        .           {
   19,092 ( 0.00%)      match lookup_result {
        .                   LookupResult::Parent(..) => {
        .                       // access to untracked value - do not touch children
        .                   }
        .                   LookupResult::Exact(e) => on_all_children_bits(tcx, body, move_data, e, each_child),
        .               }
        .           }
        .           
        .           pub fn on_all_children_bits<'tcx, F>(
-- line 99 ----------------------------------------
-- line 100 ----------------------------------------
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               move_data: &MoveData<'tcx>,
        .               move_path_index: MovePathIndex,
        .               mut each_child: F,
        .           ) where
        .               F: FnMut(MovePathIndex),
        .           {
1,494,112 ( 0.03%)      fn is_terminal_path<'tcx>(
        .                   tcx: TyCtxt<'tcx>,
        .                   body: &Body<'tcx>,
        .                   move_data: &MoveData<'tcx>,
        .                   path: MovePathIndex,
        .               ) -> bool {
  373,528 ( 0.01%)          place_contents_drop_state_cannot_differ(tcx, body, move_data.move_paths[path].place)
1,494,112 ( 0.03%)      }
        .           
1,693,345 ( 0.04%)      fn on_all_children_bits<'tcx, F>(
        .                   tcx: TyCtxt<'tcx>,
        .                   body: &Body<'tcx>,
        .                   move_data: &MoveData<'tcx>,
        .                   move_path_index: MovePathIndex,
        .                   each_child: &mut F,
        .               ) where
        .                   F: FnMut(MovePathIndex),
        .               {
   64,736 ( 0.00%)          each_child(move_path_index);
        .           
1,307,348 ( 0.03%)          if is_terminal_path(tcx, body, move_data, move_path_index) {
        .                       return;
        .                   }
        .           
   84,595 ( 0.00%)          let mut next_child_index = move_data.move_paths[move_path_index].first_child;
  192,813 ( 0.00%)          while let Some(child_index) = next_child_index {
   32,394 ( 0.00%)              on_all_children_bits(tcx, body, move_data, child_index, each_child);
    5,399 ( 0.00%)              next_child_index = move_data.move_paths[child_index].next_sibling;
        .                   }
1,473,390 ( 0.03%)      }
1,102,151 ( 0.02%)      on_all_children_bits(tcx, body, move_data, move_path_index, &mut each_child);
        .           }
        .           
        .           pub fn on_all_drop_children_bits<'tcx, F>(
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               ctxt: &MoveDataParamEnv<'tcx>,
        .               path: MovePathIndex,
        .               mut each_child: F,
-- line 146 ----------------------------------------
-- line 156 ----------------------------------------
        .                   if erased_ty.needs_drop(tcx, ctxt.param_env) {
        .                       each_child(child);
        .                   } else {
        .                       debug!("on_all_drop_children_bits - skipping")
        .                   }
        .               })
        .           }
        .           
   59,416 ( 0.00%)  pub fn drop_flag_effects_for_function_entry<'tcx, F>(
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               ctxt: &MoveDataParamEnv<'tcx>,
        .               mut callback: F,
        .           ) where
        .               F: FnMut(MovePathIndex, DropFlagState),
        .           {
        .               let move_data = &ctxt.move_data;
    5,342 ( 0.00%)      for arg in body.args_iter() {
    6,652 ( 0.00%)          let place = mir::Place::from(arg);
    9,978 ( 0.00%)          let lookup_result = move_data.rev_lookup.find(place.as_ref());
        .                   on_lookup_result_bits(tcx, body, move_data, lookup_result, |mpi| {
    3,470 ( 0.00%)              callback(mpi, DropFlagState::Present)
        .                   });
        .               }
   42,736 ( 0.00%)  }
        .           
2,427,144 ( 0.05%)  pub fn drop_flag_effects_for_location<'tcx, F>(
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               ctxt: &MoveDataParamEnv<'tcx>,
        .               loc: Location,
        .               mut callback: F,
        .           ) where
        .               F: FnMut(MovePathIndex, DropFlagState),
        .           {
        .               let move_data = &ctxt.move_data;
        .               debug!("drop_flag_effects_for_location({:?})", loc);
        .           
        .               // first, move out of the RHS
  169,718 ( 0.00%)      for mi in &move_data.loc_map[loc] {
  423,839 ( 0.01%)          let path = mi.move_path_index(move_data);
        .                   debug!("moving out of path {:?}", move_data.move_paths[path]);
        .           
  111,176 ( 0.00%)          on_all_children_bits(tcx, body, move_data, path, |mpi| callback(mpi, DropFlagState::Absent))
        .               }
        .           
        .               debug!("drop_flag_effects: assignment for location({:?})", loc);
        .           
   64,874 ( 0.00%)      for_location_inits(tcx, body, move_data, loc, |mpi| callback(mpi, DropFlagState::Present));
1,704,880 ( 0.04%)  }
        .           
        .           pub fn for_location_inits<'tcx, F>(
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               move_data: &MoveData<'tcx>,
        .               loc: Location,
        .               mut callback: F,
        .           ) where
        .               F: FnMut(MovePathIndex),
        .           {
  169,718 ( 0.00%)      for ii in &move_data.init_loc_map[loc] {
  293,960 ( 0.01%)          let init = move_data.inits[*ii];
  165,856 ( 0.00%)          match init.kind {
        .                       InitKind::Deep => {
        .                           let path = init.path;
        .           
        .                           on_all_children_bits(tcx, body, move_data, path, &mut callback)
        .                       }
        .                       InitKind::Shallow => {
        .                           let mpi = init.path;
        .                           callback(mpi);
-- line 226 ----------------------------------------
-- line 230 ----------------------------------------
        .               }
        .           }
        .           
        .           /// Calls `handle_inactive_variant` for each descendant move path of `enum_place` that contains a
        .           /// `Downcast` to a variant besides the `active_variant`.
        .           ///
        .           /// NOTE: If there are no move paths corresponding to an inactive variant,
        .           /// `handle_inactive_variant` will not be called for that variant.
    9,444 ( 0.00%)  pub(crate) fn on_all_inactive_variants<'tcx>(
        .               tcx: TyCtxt<'tcx>,
        .               body: &mir::Body<'tcx>,
        .               move_data: &MoveData<'tcx>,
        .               enum_place: mir::Place<'tcx>,
        .               active_variant: VariantIdx,
        .               mut handle_inactive_variant: impl FnMut(MovePathIndex),
        .           ) {
    3,935 ( 0.00%)      let enum_mpi = match move_data.rev_lookup.find(enum_place.as_ref()) {
        .                   LookupResult::Exact(mpi) => mpi,
        .                   LookupResult::Parent(_) => return,
        .               };
        .           
        .               let enum_path = &move_data.move_paths[enum_mpi];
    2,038 ( 0.00%)      for (variant_mpi, variant_path) in enum_path.children(&move_data.move_paths) {
        .                   // Because of the way we build the `MoveData` tree, each child should have exactly one more
        .                   // projection than `enum_place`. This additional projection must be a downcast since the
        .                   // base is an enum.
      374 ( 0.00%)          let (downcast, base_proj) = variant_path.place.projection.split_last().unwrap();
    1,496 ( 0.00%)          assert_eq!(enum_place.projection.len(), base_proj.len());
        .           
    1,122 ( 0.00%)          let variant_idx = match *downcast {
        .                       mir::ProjectionElem::Downcast(_, idx) => idx,
        .                       _ => unreachable!(),
        .                   };
        .           
      374 ( 0.00%)          if variant_idx != active_variant {
        .                       on_all_children_bits(tcx, body, move_data, variant_mpi, |mpi| {
      472 ( 0.00%)                  handle_inactive_variant(mpi)
        .                       });
        .                   }
        .               }
    6,296 ( 0.00%)  }

1,222,043 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_dataflow/src/drop_flag_effects.rs>

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./elf/../elf/dl-tls.c
  ./elf/../sysdeps/x86_64/dl-machine.h
  ./elf/../sysdeps/x86_64/tls_get_addr.S
  ./elf/dl-lookup.c
  ./io/../sysdeps/unix/sysv/linux/read.c
  ./malloc/malloc.c
  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S
  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S

--------------------------------------------------------------------------------
Ir                     
--------------------------------------------------------------------------------
1,870,983,123 (39.06%)  events annotated

